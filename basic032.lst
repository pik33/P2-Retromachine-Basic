00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 94 09 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 90 F2 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed A0 EF 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 98 69 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 80 E2 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 D8 DD 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 E4 4A 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 C0 E9 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 4C 7C 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 FC A3 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa B4 A1 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 8C B3 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc C8 0D 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     44 1A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     D8 2E B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     F0 E5 05 F1 | 	add	objptr, ##41968
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     F0 E5 85 F1 | 	sub	objptr, ##41968
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     D0 31 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     24 39 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     1C 33 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     E0 30 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     1C FF B1 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     F0 E5 05 F1 | 	add	objptr, ##41968
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     F0 E5 85 F1 | 	sub	objptr, ##41968
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     14 FD B1 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     B4 FC B1 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F8 E5 05 F1 | 	add	objptr, ##41976
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     BA E5 85 F1 | 	sub	objptr, ##41914
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     BC E5 05 F1 | 	add	objptr, ##41916
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     BA E5 85 F1 | 	sub	objptr, ##41914
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     44 FC B1 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     8C 14 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F8 E5 05 F1 | 	add	objptr, ##41976
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F8 E5 85 F1 | 	sub	objptr, ##41976
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     A8 17 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     0C 2E B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     60 35 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     5C 2F B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     9D 01 00 FF 
00ccc     B2 50 06 F6 | 	mov	local22, ##@LR__5267
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     D8 FA B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     3C 54 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     4C 32 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     F8 1B B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     28 1E B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     98 2C B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     EC 33 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     E8 2D B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     74 F9 B1 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     68 13 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     5C 13 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     EC 12 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     B8 12 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     D8 12 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     C8 12 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     18 F8 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     C4 F7 B1 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     94 F7 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F8 E5 05 F1 | 	add	objptr, ##41976
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     BA E5 85 F1 | 	sub	objptr, ##41914
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     BC E5 05 F1 | 	add	objptr, ##41916
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     BA E5 85 F1 | 	sub	objptr, ##41914
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     2C F7 B1 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     74 0F B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F8 E5 05 F1 | 	add	objptr, ##41976
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F8 E5 85 F1 | 	sub	objptr, ##41976
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     50 10 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     14 F6 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     C0 F5 B1 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     90 F5 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F8 E5 05 F1 | 	add	objptr, ##41976
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     BA E5 85 F1 | 	sub	objptr, ##41914
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     BC E5 05 F1 | 	add	objptr, ##41916
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     BA E5 85 F1 | 	sub	objptr, ##41914
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     28 F5 B1 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     70 0D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F8 E5 05 F1 | 	add	objptr, ##41976
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F8 E5 85 F1 | 	sub	objptr, ##41976
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     9D 01 00 FF 
01328     B3 50 06 F6 | 	mov	local22, ##@LR__5268
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     98 0E B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     38 0E B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     8C 0D B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     30 0D B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     7C FB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     6C FB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     A0 2C B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     78 2C B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     50 2C B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     A8 21 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     F8 21 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     E8 21 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     4C 21 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     B0 4C B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     E8 4B B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     9D 01 00 FF 
01800     B4 16 06 F6 | 	mov	arg03, ##@LR__5269
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     D8 4B B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     10 4B B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     9D 01 00 FF 
01860     B5 2C 06 F6 | 	mov	local04, ##@LR__5270
01864     1A 00 00 FF 
01868     E0 E5 05 F1 | 	add	objptr, ##13792
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     E0 E5 85 F1 | 	sub	objptr, ##13792
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     00 E4 05 F1 | 	add	objptr, ##41984
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     00 E4 85 F1 | 	sub	objptr, ##41984
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     90 47 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     9D 01 00 FF 
01920     B6 14 06 F6 | 	mov	arg02, ##@LR__5271
01924     14 26 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     50 47 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     9D 01 00 FF 
01960     B8 14 06 F6 | 	mov	arg02, ##@LR__5272
01964     D4 25 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     E0 46 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     9D 01 00 FF 
019d0     BA 38 06 F6 | 	mov	local10, ##@LR__5273
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     60 25 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     00 E4 05 F1 | 	add	objptr, ##41984
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     00 E4 85 F1 | 	sub	objptr, ##41984
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     00 E4 05 F1 | 	add	objptr, ##41984
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     00 E4 85 F1 | 	sub	objptr, ##41984
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     7C 45 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     7C 49 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     B4 48 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     04 E4 05 F1 | 	add	objptr, ##41988
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E8 E5 85 F1 | 	sub	objptr, ##13800
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     B8 44 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     40 49 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     78 48 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     9D 01 00 FF 
01b04     BC 2C 06 F6 | 	mov	local04, ##@LR__5274
01b08     52 00 00 FF 
01b0c     04 E4 05 F1 | 	add	objptr, ##41988
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     04 E4 85 F1 | 	sub	objptr, ##41988
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     04 E4 05 F1 | 	add	objptr, ##41988
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     04 E4 85 F1 | 	sub	objptr, ##41988
01b50     9D 01 00 FF 
01b54     BD 30 06 F6 | 	mov	local06, ##@LR__5275
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     DC 23 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     04 E4 05 F1 | 	add	objptr, ##41988
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     04 E4 85 F1 | 	sub	objptr, ##41988
01bb0     9D 01 00 FF 
01bb4     BE 14 06 F6 | 	mov	arg02, ##@LR__5276
01bb8     80 23 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     04 E4 05 F1 | 	add	objptr, ##41988
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     04 E4 85 F1 | 	sub	objptr, ##41988
01c08     9D 01 00 FF 
01c0c     BF 14 06 F6 | 	mov	arg02, ##@LR__5277
01c10     28 23 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     04 E4 05 F1 | 	add	objptr, ##41988
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     04 E4 85 F1 | 	sub	objptr, ##41988
01c60     9D 01 00 FF 
01c64     C0 14 06 F6 | 	mov	arg02, ##@LR__5278
01c68     D0 22 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     EC 43 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     00 E4 05 F1 | 	add	objptr, ##41984
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     00 E4 85 F1 | 	sub	objptr, ##41984
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     0C E4 05 F1 | 	add	objptr, ##41996
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     0C E4 85 F1 | 	sub	objptr, ##41996
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     F0 E5 05 F1 | 	add	objptr, ##13808
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     0C E4 85 F1 | 	sub	objptr, ##41996
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     EC 42 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     9D 01 00 FF 
01dc4     C1 14 06 F6 | 	mov	arg02, ##@LR__5279
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     6C 21 B2 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     F0 E5 05 F1 | 	add	objptr, ##13808
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     0C E4 85 F1 | 	sub	objptr, ##41996
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     68 42 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     9D 01 00 FF 
01e48     C2 14 06 F6 | 	mov	arg02, ##@LR__5280
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     E8 20 B2 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     64 4B B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     9D 01 00 FF 
01f5c     C3 2C 06 F6 | 	mov	local04, ##@LR__5281
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     9D 01 00 FF 
01f90     C5 14 06 F6 | 	mov	arg02, ##@LR__5282
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     9C 1F B2 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     70 1F B2 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     9D 01 00 FF 
02098     C7 14 06 F6 | 	mov	arg02, ##@LR__5283
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     98 1E B2 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     9D 01 00 FF 
020b4     C9 14 06 F6 | 	mov	arg02, ##@LR__5284
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     7C 1E B2 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     14 3F B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     9D 01 00 FF 
0210c     CB 14 06 F6 | 	mov	arg02, ##@LR__5285
02110     28 1E B2 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     44 3E B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     9D 01 00 FF 
02154     CD 14 06 F6 | 	mov	arg02, ##@LR__5286
02158     E0 1D B2 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     2C 3E B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     74 1D B2 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     9D 01 00 FF 
022d8     CF 14 06 F6 | 	mov	arg02, ##@LR__5287
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     50 1C B2 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     9D 01 00 FF 
022f8     D1 14 06 F6 | 	mov	arg02, ##@LR__5288
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     38 1C B2 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     9D 01 00 FF 
02310     D3 30 06 F6 | 	mov	local06, ##@LR__5289
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     1C 1C B2 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     9D 01 00 FF 
0232c     D5 3C 06 F6 | 	mov	local12, ##@LR__5290
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     00 1C B2 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     9D 01 00 FF 
02348     D7 3A 06 F6 | 	mov	local11, ##@LR__5291
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     E0 1B B2 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     9D 01 00 FF 
02368     D9 3A 06 F6 | 	mov	local11, ##@LR__5292
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     C4 1B B2 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     9D 01 00 FF 
02384     DB 40 06 F6 | 	mov	local14, ##@LR__5293
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     A8 1B B2 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     9D 01 00 FF 
023a0     DD 5C 06 F6 | 	mov	local28, ##@LR__5294
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     88 1B B2 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     9D 01 00 FF 
023c0     DF 5C 06 F6 | 	mov	local28, ##@LR__5295
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     6C 1B B2 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     9D 01 00 FF 
023dc     E1 52 06 F6 | 	mov	local23, ##@LR__5296
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     4C 1B B2 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     9D 01 00 FF 
023fc     E3 52 06 F6 | 	mov	local23, ##@LR__5297
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     30 1B B2 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     9D 01 00 FF 
02418     E5 5E 06 F6 | 	mov	local29, ##@LR__5298
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     10 1B B2 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     9D 01 00 FF 
02438     E7 60 06 F6 | 	mov	local30, ##@LR__5299
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     F0 1A B2 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     9D 01 00 FF 
02458     E9 62 06 F6 | 	mov	local31, ##@LR__5300
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     D0 1A B2 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     D0 1A B2 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     80 3E B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     B8 3D B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     8C 38 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     9D 01 00 FF 
0270c     EB 14 06 F6 | 	mov	arg02, ##@LR__5301
02710     28 18 B2 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     D0 38 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     9D 01 00 FF 
02750     ED 14 06 F6 | 	mov	arg02, ##@LR__5302
02754     E4 17 B2 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     08 3B B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     34 42 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     9D 01 00 FF 
02828     EF 14 06 F6 | 	mov	arg02, ##@LR__5303
0282c     0C 17 B2 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     9D 01 00 FF 
02858     F4 14 06 F6 | 	mov	arg02, ##@LR__5304
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     D4 16 B2 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     9D 01 00 FF 
028a8     F9 16 06 F6 | 	mov	arg03, ##@LR__5305
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     1C 3C B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     30 36 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     64 35 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     38 35 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     9D 01 00 FF 
02a60     FB 14 06 F6 | 	mov	arg02, ##@LR__5306
02a64     D4 14 B2 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     74 34 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     9D 01 00 FF 
02bc0     FD 30 06 F6 | 	mov	local06, ##@LR__5307
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     9D 01 00 FF 
02bec     FF 14 06 F6 | 	mov	arg02, ##@LR__5308
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     3C 13 B2 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     9D 01 00 FF 
02c0c     05 15 06 F6 | 	mov	arg02, ##@LR__5309
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     24 13 B2 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     9D 01 00 FF 
02c24     0C 15 06 F6 | 	mov	arg02, ##@LR__5310
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     0C 13 B2 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     9D 01 00 FF 
02c58     12 15 06 F6 | 	mov	arg02, ##@LR__5311
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     D4 12 B2 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     9D 01 00 FF 
02c8c     15 31 06 F6 | 	mov	local06, ##@LR__5312
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     9D 01 00 FF 
02cc8     17 15 06 F6 | 	mov	arg02, ##@LR__5313
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     64 12 B2 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     9D 01 00 FF 
02cfc     1B 31 06 F6 | 	mov	local06, ##@LR__5314
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     9D 01 00 FF 
02d1c     1D 15 06 F6 | 	mov	arg02, ##@LR__5315
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     14 12 B2 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     9D 01 00 FF 
02d34     22 15 06 F6 | 	mov	arg02, ##@LR__5316
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     FC 11 B2 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     9D 01 00 FF 
02d68     25 15 06 F6 | 	mov	arg02, ##@LR__5317
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     C4 11 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     9D 01 00 FF 
02d9c     2B 31 06 F6 | 	mov	local06, ##@LR__5318
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     9D 01 00 FF 
02dcc     2D 15 06 F6 | 	mov	arg02, ##@LR__5319
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     60 11 B2 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     9D 01 00 FF 
02e00     36 31 06 F6 | 	mov	local06, ##@LR__5320
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     9D 01 00 FF 
02e30     38 15 06 F6 | 	mov	arg02, ##@LR__5321
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     FC 10 B2 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     9D 01 00 FF 
02e64     41 31 06 F6 | 	mov	local06, ##@LR__5322
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     9D 01 00 FF 
02e94     43 15 06 F6 | 	mov	arg02, ##@LR__5323
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     98 10 B2 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     9D 01 00 FF 
02ec8     4C 31 06 F6 | 	mov	local06, ##@LR__5324
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     9D 01 00 FF 
02ef8     4E 15 06 F6 | 	mov	arg02, ##@LR__5325
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     34 10 B2 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     9D 01 00 FF 
02f2c     51 31 06 F6 | 	mov	local06, ##@LR__5326
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     9E 01 00 FF 
03064     44 14 06 F6 | 	mov	arg02, ##@LR__5411
03068     D0 0E B2 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     F8 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     30 39 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     34 2F B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     E8 2C B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     68 35 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     5C 2D B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     20 2F B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     E4 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     60 35 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     20 35 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     28 2A B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     84 2A B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     9D 01 00 FF 
0371c     53 31 06 F6 | 	mov	local06, ##@LR__5327
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     9D 01 00 FF 
0373c     54 15 06 F6 | 	mov	arg02, ##@LR__5328
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     F4 07 B2 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     9D 01 00 FF 
03754     59 15 06 F6 | 	mov	arg02, ##@LR__5329
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     DC 07 B2 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     9D 01 00 FF 
0376c     5E 31 06 F6 | 	mov	local06, ##@LR__5330
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     C0 07 B2 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     9D 01 00 FF 
03788     63 3D 06 F6 | 	mov	local12, ##@LR__5331
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     A0 07 B2 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     9D 01 00 FF 
037a8     67 3B 06 F6 | 	mov	local11, ##@LR__5332
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     80 07 B2 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     9D 01 00 FF 
037c8     6B 41 06 F6 | 	mov	local14, ##@LR__5333
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     60 07 B2 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     9D 01 00 FF 
037e8     6E 3F 06 F6 | 	mov	local13, ##@LR__5334
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     40 07 B2 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     9D 01 00 FF 
03808     72 3F 06 F6 | 	mov	local13, ##@LR__5335
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     24 07 B2 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     9D 01 00 FF 
03824     78 51 06 F6 | 	mov	local22, ##@LR__5336
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     04 07 B2 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     9D 01 00 FF 
038c0     7B 15 06 F6 | 	mov	arg02, ##@LR__5337
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     70 06 B2 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     9D 01 00 FF 
038d8     82 2F 06 F6 | 	mov	local05, ##@LR__5338
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     54 06 B2 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     9D 01 00 FF 
03970     88 15 06 F6 | 	mov	arg02, ##@LR__5339
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     C0 05 B2 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     9D 01 00 FF 
039c0     8B 15 06 F6 | 	mov	arg02, ##@LR__5340
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     70 05 B2 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     9D 01 00 FF 
039f8     8F 2F 06 F6 | 	mov	local05, ##@LR__5341
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     30 05 B2 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     9D 01 00 FF 
03a4c     91 31 06 F6 | 	mov	local06, ##@LR__5342
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     9D 01 00 FF 
03a7c     94 39 06 F6 | 	mov	local10, ##@LR__5343
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     B0 04 B2 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     9D 01 00 FF 
03ab8     97 2F 06 F6 | 	mov	local05, ##@LR__5344
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     6C 04 B2 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     E8 03 B2 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     88 2E B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     30 38 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     A4 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     74 43 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     8C C8 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     04 E4 05 F1 | 	add	objptr, ##41988
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     04 E4 85 F1 | 	sub	objptr, ##41988
03cfc     9D 01 00 FF 
03d00     99 15 06 F6 | 	mov	arg02, ##@LR__5345
03d04     34 02 B2 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     04 E4 05 F1 | 	add	objptr, ##41988
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E8 E5 85 F1 | 	sub	objptr, ##13800
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     80 42 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     98 C7 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     04 E4 05 F1 | 	add	objptr, ##41988
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     04 E4 85 F1 | 	sub	objptr, ##41988
03df0     9D 01 00 FF 
03df4     9A 15 06 F6 | 	mov	arg02, ##@LR__5346
03df8     40 01 B2 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     04 E4 05 F1 | 	add	objptr, ##41988
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E8 E5 85 F1 | 	sub	objptr, ##13800
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     5C 42 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     AC C6 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     04 E4 05 F1 | 	add	objptr, ##41988
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     04 E4 85 F1 | 	sub	objptr, ##41988
03edc     9D 01 00 FF 
03ee0     9B 15 06 F6 | 	mov	arg02, ##@LR__5347
03ee4     54 00 B2 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     04 E4 05 F1 | 	add	objptr, ##41988
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E8 E5 85 F1 | 	sub	objptr, ##13800
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     6C 41 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     BC C5 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     04 E4 05 F1 | 	add	objptr, ##41988
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     04 E4 85 F1 | 	sub	objptr, ##41988
03fcc     9D 01 00 FF 
03fd0     9C 15 06 F6 | 	mov	arg02, ##@LR__5348
03fd4     64 FF B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     04 E4 05 F1 | 	add	objptr, ##41988
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E8 E5 85 F1 | 	sub	objptr, ##13800
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     5C 8A B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     9D 01 00 FF 
04048     9D 13 06 F6 | 	mov	arg01, ##@LR__5349
0404c                 | ' 
0404c                 | ' write(text)
0404c     48 E6 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     44 EB B1 FD | 	call	#_hg010b_spin2_crlf
04054     9D 01 00 FF 
04058     9E 13 06 F6 | 	mov	arg01, ##@LR__5350
0405c                 | ' 
0405c                 | ' write(text)
0405c     38 E6 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     34 EB B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     AC 5B B2 FD | 	call	#__system___getiolock_0579
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     7C FE B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     50 0B B2 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     E8 0A B2 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     6C 5B B2 FD | 	call	#__system___getiolock_0579
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     9D 01 00 FF 
040f0     A4 15 06 F6 | 	mov	arg02, ##@LR__5351
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     40 FE B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     9D 01 00 FF 
04108     A6 15 06 F6 | 	mov	arg02, ##@LR__5352
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     28 FE B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     9D 01 00 FF 
04120     A8 15 06 F6 | 	mov	arg02, ##@LR__5353
04124     13 13 02 F6 | 	mov	arg01, local01
04128     10 FE B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     9D 01 00 FF 
04138     AB 15 06 F6 | 	mov	arg02, ##@LR__5354
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     F8 FD B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     9D 01 00 FF 
04150     AF 15 06 F6 | 	mov	arg02, ##@LR__5355
04154     13 13 02 F6 | 	mov	arg01, local01
04158     E0 FD B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     9D 01 00 FF 
04168     B1 15 06 F6 | 	mov	arg02, ##@LR__5356
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     C8 FD B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     9D 01 00 FF 
04180     B3 15 06 F6 | 	mov	arg02, ##@LR__5357
04184     13 13 02 F6 | 	mov	arg01, local01
04188     B0 FD B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     9D 01 00 FF 
04198     B7 15 06 F6 | 	mov	arg02, ##@LR__5358
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     98 FD B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     9D 01 00 FF 
041b0     BB 15 06 F6 | 	mov	arg02, ##@LR__5359
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     80 FD B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     9D 01 00 FF 
041c8     BF 15 06 F6 | 	mov	arg02, ##@LR__5360
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     68 FD B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     9D 01 00 FF 
041e0     C3 15 06 F6 | 	mov	arg02, ##@LR__5361
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     50 FD B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     9D 01 00 FF 
041f8     C7 15 06 F6 | 	mov	arg02, ##@LR__5362
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     38 FD B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     9D 01 00 FF 
04210     C9 15 06 F6 | 	mov	arg02, ##@LR__5363
04214     13 13 02 F6 | 	mov	arg01, local01
04218     20 FD B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     9D 01 00 FF 
04228     CD 15 06 F6 | 	mov	arg02, ##@LR__5364
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     08 FD B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     9D 01 00 FF 
04240     CF 15 06 F6 | 	mov	arg02, ##@LR__5365
04244     13 13 02 F6 | 	mov	arg01, local01
04248     F0 FC B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     9D 01 00 FF 
04258     D1 15 06 F6 | 	mov	arg02, ##@LR__5366
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     D8 FC B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     9D 01 00 FF 
04270     D4 15 06 F6 | 	mov	arg02, ##@LR__5367
04274     13 13 02 F6 | 	mov	arg01, local01
04278     C0 FC B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     9D 01 00 FF 
04288     D7 15 06 F6 | 	mov	arg02, ##@LR__5368
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     A8 FC B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     9D 01 00 FF 
042a0     D9 15 06 F6 | 	mov	arg02, ##@LR__5369
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     90 FC B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     9D 01 00 FF 
042b8     DB 15 06 F6 | 	mov	arg02, ##@LR__5370
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     78 FC B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     9D 01 00 FF 
042d0     DE 15 06 F6 | 	mov	arg02, ##@LR__5371
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     60 FC B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     9D 01 00 FF 
042e8     E1 15 06 F6 | 	mov	arg02, ##@LR__5372
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     48 FC B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     BC 1B B2 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     9D 01 00 FF 
043dc     E4 15 06 F6 | 	mov	arg02, ##@LR__5373
043e0     58 FB B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     F0 1B B2 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     9D 01 00 FF 
04430     E6 15 06 F6 | 	mov	arg02, ##@LR__5374
04434     04 FB B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     CC 1B B2 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     9D 01 00 FF 
04454     E8 15 06 F6 | 	mov	arg02, ##@LR__5375
04458     E0 FA B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     A0 1B B2 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     18 31 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     2C 25 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     B8 2D B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     9D 01 00 FF 
044b8     EA 15 06 F6 | 	mov	arg02, ##@LR__5376
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     78 FA B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     9D 01 00 FF 
044d0     F0 15 06 F6 | 	mov	arg02, ##@LR__5377
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     60 FA B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     9D 01 00 FF 
044e8     F7 15 06 F6 | 	mov	arg02, ##@LR__5378
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     48 FA B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     54 1A B2 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     9D 01 00 FF 
04544     FF 15 06 F6 | 	mov	arg02, ##@LR__5379
04548     F0 F9 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     40 1B B2 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     9E 01 00 FF 
04570     01 14 06 F6 | 	mov	arg02, ##@LR__5380
04574     C4 F9 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     18 1B B2 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     00 1B B2 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     CC 1A B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     9E 01 00 FF 
045e4     03 14 06 F6 | 	mov	arg02, ##@LR__5381
045e8     50 F9 B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     18 1A B2 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     90 2F B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     40 2C B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     F0 19 B2 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     68 2F B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     4C 27 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     08 2C B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     B4 19 B2 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     9E 01 00 FF 
0466c     05 14 06 F6 | 	mov	arg02, ##@LR__5382
04670     C8 F8 B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     9E 01 00 FF 
04684     07 14 06 F6 | 	mov	arg02, ##@LR__5383
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     AC F8 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     9E 01 00 FF 
0469c     09 14 06 F6 | 	mov	arg02, ##@LR__5384
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     94 F8 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     9E 01 00 FF 
046b4     0C 14 06 F6 | 	mov	arg02, ##@LR__5385
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     7C F8 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     9E 01 00 FF 
046cc     0E 14 06 F6 | 	mov	arg02, ##@LR__5386
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     64 F8 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     9E 01 00 FF 
046e4     11 14 06 F6 | 	mov	arg02, ##@LR__5387
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     4C F8 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     9E 01 00 FF 
046fc     13 14 06 F6 | 	mov	arg02, ##@LR__5388
04700     17 13 02 F6 | 	mov	arg01, local05
04704     34 F8 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     9E 01 00 FF 
04714     15 14 06 F6 | 	mov	arg02, ##@LR__5389
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     1C F8 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     9E 01 00 FF 
0472c     18 14 06 F6 | 	mov	arg02, ##@LR__5390
04730     17 13 02 F6 | 	mov	arg01, local05
04734     04 F8 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     9E 01 00 FF 
04744     1A 14 06 F6 | 	mov	arg02, ##@LR__5391
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     EC F7 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     9E 01 00 FF 
0475c     1D 14 06 F6 | 	mov	arg02, ##@LR__5392
04760     17 13 02 F6 | 	mov	arg01, local05
04764     D4 F7 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     9E 01 00 FF 
04774     1F 14 06 F6 | 	mov	arg02, ##@LR__5393
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     BC F7 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     9E 01 00 FF 
0478c     22 14 06 F6 | 	mov	arg02, ##@LR__5394
04790     17 13 02 F6 | 	mov	arg01, local05
04794     A4 F7 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     9E 01 00 FF 
047a4     24 14 06 F6 | 	mov	arg02, ##@LR__5395
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     8C F7 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     9E 01 00 FF 
048a4     26 14 06 F6 | 	mov	arg02, ##@LR__5396
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     8C F6 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     9E 01 00 FF 
048bc     28 14 06 F6 | 	mov	arg02, ##@LR__5397
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     74 F6 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     9E 01 00 FF 
048d4     2A 14 06 F6 | 	mov	arg02, ##@LR__5398
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     5C F6 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     9E 01 00 FF 
048ec     2C 14 06 F6 | 	mov	arg02, ##@LR__5399
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     44 F6 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     9E 01 00 FF 
04904     2E 14 06 F6 | 	mov	arg02, ##@LR__5400
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     2C F6 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     9E 01 00 FF 
0491c     30 14 06 F6 | 	mov	arg02, ##@LR__5401
04920     13 13 02 F6 | 	mov	arg01, local01
04924     14 F6 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     9E 01 00 FF 
04934     32 14 06 F6 | 	mov	arg02, ##@LR__5402
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     FC F5 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     9E 01 00 FF 
0494c     34 14 06 F6 | 	mov	arg02, ##@LR__5403
04950     13 13 02 F6 | 	mov	arg01, local01
04954     E4 F5 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     9E 01 00 FF 
04964     36 14 06 F6 | 	mov	arg02, ##@LR__5404
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     CC F5 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     9E 01 00 FF 
0497c     38 14 06 F6 | 	mov	arg02, ##@LR__5405
04980     13 13 02 F6 | 	mov	arg01, local01
04984     B4 F5 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     9E 01 00 FF 
04994     3A 14 06 F6 | 	mov	arg02, ##@LR__5406
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     9C F5 B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     9E 01 00 FF 
049ac     3C 14 06 F6 | 	mov	arg02, ##@LR__5407
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     84 F5 B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     9E 01 00 FF 
049c4     3E 14 06 F6 | 	mov	arg02, ##@LR__5408
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     6C F5 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     9E 01 00 FF 
049dc     40 14 06 F6 | 	mov	arg02, ##@LR__5409
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     54 F5 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     9E 01 00 FF 
049f4     42 14 06 F6 | 	mov	arg02, ##@LR__5410
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     3C F5 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     9E 01 00 FF 
04aa4     46 14 06 F6 | 	mov	arg02, ##@LR__5412
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     8C F4 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     64 0C 90 AD |  if_e	jmp	#LR__0310
04ab8     9E 01 00 FF 
04abc     4B 14 06 F6 | 	mov	arg02, ##@LR__5413
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     74 F4 B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     54 0C 90 AD |  if_e	jmp	#LR__0311
04ad0     9E 01 00 FF 
04ad4     4E 14 06 F6 | 	mov	arg02, ##@LR__5414
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     5C F4 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     44 0C 90 AD |  if_e	jmp	#LR__0312
04ae8     9E 01 00 FF 
04aec     53 14 06 F6 | 	mov	arg02, ##@LR__5415
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     44 F4 B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     34 0C 90 AD |  if_e	jmp	#LR__0313
04b00     9E 01 00 FF 
04b04     57 14 06 F6 | 	mov	arg02, ##@LR__5416
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     2C F4 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     24 0C 90 AD |  if_e	jmp	#LR__0314
04b18     9E 01 00 FF 
04b1c     5C 14 06 F6 | 	mov	arg02, ##@LR__5417
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     14 F4 B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     14 0C 90 AD |  if_e	jmp	#LR__0315
04b30     9E 01 00 FF 
04b34     60 14 06 F6 | 	mov	arg02, ##@LR__5418
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     FC F3 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     04 0C 90 AD |  if_e	jmp	#LR__0316
04b48     9E 01 00 FF 
04b4c     63 14 06 F6 | 	mov	arg02, ##@LR__5419
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     E4 F3 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     F4 0B 90 AD |  if_e	jmp	#LR__0317
04b60     9E 01 00 FF 
04b64     6E 14 06 F6 | 	mov	arg02, ##@LR__5420
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     CC F3 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     E4 0B 90 AD |  if_e	jmp	#LR__0318
04b78     9E 01 00 FF 
04b7c     72 14 06 F6 | 	mov	arg02, ##@LR__5421
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     B4 F3 B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     D4 0B 90 AD |  if_e	jmp	#LR__0319
04b90     9E 01 00 FF 
04b94     7C 14 06 F6 | 	mov	arg02, ##@LR__5422
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     9C F3 B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     C4 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     9E 01 00 FF 
04bac     80 14 06 F6 | 	mov	arg02, ##@LR__5423
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     84 F3 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     B4 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     9E 01 00 FF 
04bc4     8A 14 06 F6 | 	mov	arg02, ##@LR__5424
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     6C F3 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     A4 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     9E 01 00 FF 
04bdc     8E 14 06 F6 | 	mov	arg02, ##@LR__5425
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     54 F3 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     94 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     9E 01 00 FF 
04bf4     99 14 06 F6 | 	mov	arg02, ##@LR__5426
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     3C F3 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     84 0B 90 AD |  if_e	jmp	#LR__0324
04c08     9E 01 00 FF 
04c0c     9D 14 06 F6 | 	mov	arg02, ##@LR__5427
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     24 F3 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     74 0B 90 AD |  if_e	jmp	#LR__0325
04c20     9E 01 00 FF 
04c24     A4 14 06 F6 | 	mov	arg02, ##@LR__5428
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     0C F3 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     64 0B 90 AD |  if_e	jmp	#LR__0326
04c38     9E 01 00 FF 
04c3c     A8 14 06 F6 | 	mov	arg02, ##@LR__5429
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     F4 F2 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     54 0B 90 AD |  if_e	jmp	#LR__0327
04c50     9E 01 00 FF 
04c54     AE 14 06 F6 | 	mov	arg02, ##@LR__5430
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     DC F2 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     44 0B 90 AD |  if_e	jmp	#LR__0328
04c68     9E 01 00 FF 
04c6c     B4 14 06 F6 | 	mov	arg02, ##@LR__5431
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     C4 F2 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     34 0B 90 AD |  if_e	jmp	#LR__0329
04c80     9E 01 00 FF 
04c84     B8 14 06 F6 | 	mov	arg02, ##@LR__5432
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     AC F2 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     24 0B 90 AD |  if_e	jmp	#LR__0330
04c98     9E 01 00 FF 
04c9c     BE 14 06 F6 | 	mov	arg02, ##@LR__5433
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     94 F2 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     14 0B 90 AD |  if_e	jmp	#LR__0331
04cb0     9E 01 00 FF 
04cb4     C1 14 06 F6 | 	mov	arg02, ##@LR__5434
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     7C F2 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     04 0B 90 AD |  if_e	jmp	#LR__0332
04cc8     9E 01 00 FF 
04ccc     C7 14 06 F6 | 	mov	arg02, ##@LR__5435
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     64 F2 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     F4 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     9E 01 00 FF 
04ce4     CB 14 06 F6 | 	mov	arg02, ##@LR__5436
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     4C F2 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     E4 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     9E 01 00 FF 
04cfc     D2 14 06 F6 | 	mov	arg02, ##@LR__5437
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     34 F2 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     D4 0A 90 AD |  if_e	jmp	#LR__0335
04d10     9E 01 00 FF 
04d14     D7 14 06 F6 | 	mov	arg02, ##@LR__5438
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     1C F2 B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     C4 0A 90 AD |  if_e	jmp	#LR__0336
04d28     9E 01 00 FF 
04d2c     DE 14 06 F6 | 	mov	arg02, ##@LR__5439
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     04 F2 B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     B4 0A 90 AD |  if_e	jmp	#LR__0337
04d40     9E 01 00 FF 
04d44     E5 14 06 F6 | 	mov	arg02, ##@LR__5440
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     EC F1 B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     A4 0A 90 AD |  if_e	jmp	#LR__0338
04d58     9E 01 00 FF 
04d5c     EF 14 06 F6 | 	mov	arg02, ##@LR__5441
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     D4 F1 B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     94 0A 90 AD |  if_e	jmp	#LR__0339
04d70     9E 01 00 FF 
04d74     F3 14 06 F6 | 	mov	arg02, ##@LR__5442
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     BC F1 B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     84 0A 90 AD |  if_e	jmp	#LR__0340
04d88     9E 01 00 FF 
04d8c     F7 14 06 F6 | 	mov	arg02, ##@LR__5443
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     A4 F1 B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     74 0A 90 AD |  if_e	jmp	#LR__0341
04da0     9E 01 00 FF 
04da4     FE 14 06 F6 | 	mov	arg02, ##@LR__5444
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     8C F1 B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     64 0A 90 AD |  if_e	jmp	#LR__0342
04db8     9E 01 00 FF 
04dbc     02 15 06 F6 | 	mov	arg02, ##@LR__5445
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     74 F1 B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     54 0A 90 AD |  if_e	jmp	#LR__0343
04dd0     9E 01 00 FF 
04dd4     06 15 06 F6 | 	mov	arg02, ##@LR__5446
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     5C F1 B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     44 0A 90 AD |  if_e	jmp	#LR__0344
04de8     9E 01 00 FF 
04dec     0C 15 06 F6 | 	mov	arg02, ##@LR__5447
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     44 F1 B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     34 0A 90 AD |  if_e	jmp	#LR__0345
04e00     9E 01 00 FF 
04e04     11 15 06 F6 | 	mov	arg02, ##@LR__5448
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     2C F1 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     24 0A 90 AD |  if_e	jmp	#LR__0346
04e18     9E 01 00 FF 
04e1c     18 15 06 F6 | 	mov	arg02, ##@LR__5449
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     14 F1 B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     14 0A 90 AD |  if_e	jmp	#LR__0347
04e30     9E 01 00 FF 
04e34     1C 15 06 F6 | 	mov	arg02, ##@LR__5450
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     FC F0 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     04 0A 90 AD |  if_e	jmp	#LR__0348
04e48     9E 01 00 FF 
04e4c     21 15 06 F6 | 	mov	arg02, ##@LR__5451
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     E4 F0 B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     F4 09 90 AD |  if_e	jmp	#LR__0349
04e60     9E 01 00 FF 
04e64     25 15 06 F6 | 	mov	arg02, ##@LR__5452
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     CC F0 B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     E4 09 90 AD |  if_e	jmp	#LR__0350
04e78     9E 01 00 FF 
04e7c     2B 15 06 F6 | 	mov	arg02, ##@LR__5453
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     B4 F0 B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     D4 09 90 AD |  if_e	jmp	#LR__0351
04e90     9E 01 00 FF 
04e94     2E 15 06 F6 | 	mov	arg02, ##@LR__5454
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     9C F0 B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     C4 09 90 AD |  if_e	jmp	#LR__0352
04ea8     9E 01 00 FF 
04eac     36 15 06 F6 | 	mov	arg02, ##@LR__5455
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     84 F0 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     B4 09 90 AD |  if_e	jmp	#LR__0353
04ec0     9E 01 00 FF 
04ec4     3A 15 06 F6 | 	mov	arg02, ##@LR__5456
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     6C F0 B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     A4 09 90 AD |  if_e	jmp	#LR__0354
04ed8     9E 01 00 FF 
04edc     3F 15 06 F6 | 	mov	arg02, ##@LR__5457
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     54 F0 B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     94 09 90 AD |  if_e	jmp	#LR__0355
04ef0     9E 01 00 FF 
04ef4     43 15 06 F6 | 	mov	arg02, ##@LR__5458
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     3C F0 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     84 09 90 AD |  if_e	jmp	#LR__0356
04f08     9E 01 00 FF 
04f0c     48 15 06 F6 | 	mov	arg02, ##@LR__5459
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     24 F0 B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     74 09 90 AD |  if_e	jmp	#LR__0357
04f20     9E 01 00 FF 
04f24     4C 15 06 F6 | 	mov	arg02, ##@LR__5460
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     0C F0 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     64 09 90 AD |  if_e	jmp	#LR__0358
04f38     9E 01 00 FF 
04f3c     4F 15 06 F6 | 	mov	arg02, ##@LR__5461
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     F4 EF B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     54 09 90 AD |  if_e	jmp	#LR__0359
04f50     9E 01 00 FF 
04f54     55 15 06 F6 | 	mov	arg02, ##@LR__5462
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     DC EF B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     44 09 90 AD |  if_e	jmp	#LR__0360
04f68     9E 01 00 FF 
04f6c     59 15 06 F6 | 	mov	arg02, ##@LR__5463
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     C4 EF B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     34 09 90 AD |  if_e	jmp	#LR__0361
04f80     9E 01 00 FF 
04f84     5D 15 06 F6 | 	mov	arg02, ##@LR__5464
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     AC EF B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     24 09 90 AD |  if_e	jmp	#LR__0362
04f98     9E 01 00 FF 
04f9c     63 15 06 F6 | 	mov	arg02, ##@LR__5465
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     94 EF B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     14 09 90 AD |  if_e	jmp	#LR__0363
04fb0     9E 01 00 FF 
04fb4     68 15 06 F6 | 	mov	arg02, ##@LR__5466
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     7C EF B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     04 09 90 AD |  if_e	jmp	#LR__0364
04fc8     9E 01 00 FF 
04fcc     6B 15 06 F6 | 	mov	arg02, ##@LR__5467
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     64 EF B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     F4 08 90 AD |  if_e	jmp	#LR__0365
04fe0     9E 01 00 FF 
04fe4     6E 15 06 F6 | 	mov	arg02, ##@LR__5468
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     4C EF B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     E4 08 90 AD |  if_e	jmp	#LR__0366
04ff8     9E 01 00 FF 
04ffc     72 15 06 F6 | 	mov	arg02, ##@LR__5469
05000     13 13 02 F6 | 	mov	arg01, local01
05004     34 EF B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     D4 08 90 AD |  if_e	jmp	#LR__0367
05010     9E 01 00 FF 
05014     75 15 06 F6 | 	mov	arg02, ##@LR__5470
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     1C EF B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     C4 08 90 AD |  if_e	jmp	#LR__0368
05028     9E 01 00 FF 
0502c     7B 15 06 F6 | 	mov	arg02, ##@LR__5471
05030     13 13 02 F6 | 	mov	arg01, local01
05034     04 EF B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     B4 08 90 AD |  if_e	jmp	#LR__0369
05040     9E 01 00 FF 
05044     80 15 06 F6 | 	mov	arg02, ##@LR__5472
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     EC EE B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     A4 08 90 AD |  if_e	jmp	#LR__0370
05058     9E 01 00 FF 
0505c     83 15 06 F6 | 	mov	arg02, ##@LR__5473
05060     13 13 02 F6 | 	mov	arg01, local01
05064     D4 EE B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     94 08 90 AD |  if_e	jmp	#LR__0371
05070     9E 01 00 FF 
05074     88 15 06 F6 | 	mov	arg02, ##@LR__5474
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     BC EE B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     84 08 90 AD |  if_e	jmp	#LR__0372
05088     9E 01 00 FF 
0508c     8C 15 06 F6 | 	mov	arg02, ##@LR__5475
05090     13 13 02 F6 | 	mov	arg01, local01
05094     A4 EE B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     74 08 90 AD |  if_e	jmp	#LR__0373
050a0     9E 01 00 FF 
050a4     92 15 06 F6 | 	mov	arg02, ##@LR__5476
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     8C EE B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     64 08 90 AD |  if_e	jmp	#LR__0374
050b8     9E 01 00 FF 
050bc     98 15 06 F6 | 	mov	arg02, ##@LR__5477
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     74 EE B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     54 08 90 AD |  if_e	jmp	#LR__0375
050d0     9E 01 00 FF 
050d4     9D 15 06 F6 | 	mov	arg02, ##@LR__5478
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     5C EE B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     44 08 90 AD |  if_e	jmp	#LR__0376
050e8     9E 01 00 FF 
050ec     A0 15 06 F6 | 	mov	arg02, ##@LR__5479
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     44 EE B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     34 08 90 AD |  if_e	jmp	#LR__0377
05100     9E 01 00 FF 
05104     A6 15 06 F6 | 	mov	arg02, ##@LR__5480
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     2C EE B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     24 08 90 AD |  if_e	jmp	#LR__0378
05118     9E 01 00 FF 
0511c     AA 15 06 F6 | 	mov	arg02, ##@LR__5481
05120     13 13 02 F6 | 	mov	arg01, local01
05124     14 EE B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     14 08 90 AD |  if_e	jmp	#LR__0379
05130     9E 01 00 FF 
05134     AF 15 06 F6 | 	mov	arg02, ##@LR__5482
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     FC ED B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     04 08 90 AD |  if_e	jmp	#LR__0380
05148     9E 01 00 FF 
0514c     B2 15 06 F6 | 	mov	arg02, ##@LR__5483
05150     13 13 02 F6 | 	mov	arg01, local01
05154     E4 ED B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     F4 07 90 AD |  if_e	jmp	#LR__0381
05160     9E 01 00 FF 
05164     B5 15 06 F6 | 	mov	arg02, ##@LR__5484
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     CC ED B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     E4 07 90 AD |  if_e	jmp	#LR__0382
05178     9E 01 00 FF 
0517c     BA 15 06 F6 | 	mov	arg02, ##@LR__5485
05180     13 13 02 F6 | 	mov	arg01, local01
05184     B4 ED B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     D4 07 90 AD |  if_e	jmp	#LR__0383
05190     9E 01 00 FF 
05194     C0 15 06 F6 | 	mov	arg02, ##@LR__5486
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     9C ED B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     C4 07 90 AD |  if_e	jmp	#LR__0384
051a8     9E 01 00 FF 
051ac     C4 15 06 F6 | 	mov	arg02, ##@LR__5487
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     84 ED B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     B4 07 90 AD |  if_e	jmp	#LR__0385
051c0     9E 01 00 FF 
051c4     CD 15 06 F6 | 	mov	arg02, ##@LR__5488
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     6C ED B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     A4 07 90 AD |  if_e	jmp	#LR__0386
051d8     9E 01 00 FF 
051dc     D3 15 06 F6 | 	mov	arg02, ##@LR__5489
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     54 ED B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     94 07 90 AD |  if_e	jmp	#LR__0387
051f0     9E 01 00 FF 
051f4     D9 15 06 F6 | 	mov	arg02, ##@LR__5490
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     3C ED B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     84 07 90 AD |  if_e	jmp	#LR__0388
05208     9E 01 00 FF 
0520c     E2 15 06 F6 | 	mov	arg02, ##@LR__5491
05210     13 13 02 F6 | 	mov	arg01, local01
05214     24 ED B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     74 07 90 AD |  if_e	jmp	#LR__0389
05220     9E 01 00 FF 
05224     EC 15 06 F6 | 	mov	arg02, ##@LR__5492
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     0C ED B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     64 07 90 AD |  if_e	jmp	#LR__0390
05238     9E 01 00 FF 
0523c     F5 15 06 F6 | 	mov	arg02, ##@LR__5493
05240     13 13 02 F6 | 	mov	arg01, local01
05244     F4 EC B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     54 07 90 AD |  if_e	jmp	#LR__0391
05250     9E 01 00 FF 
05254     FA 15 06 F6 | 	mov	arg02, ##@LR__5494
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     DC EC B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     44 07 90 AD |  if_e	jmp	#LR__0392
05268     9E 01 00 FF 
0526c     FD 15 06 F6 | 	mov	arg02, ##@LR__5495
05270     13 13 02 F6 | 	mov	arg01, local01
05274     C4 EC B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     34 07 90 AD |  if_e	jmp	#LR__0393
05280     9F 01 00 FF 
05284     02 14 06 F6 | 	mov	arg02, ##@LR__5496
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     AC EC B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     24 07 90 AD |  if_e	jmp	#LR__0394
05298     9F 01 00 FF 
0529c     06 14 06 F6 | 	mov	arg02, ##@LR__5497
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     94 EC B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     14 07 90 AD |  if_e	jmp	#LR__0395
052b0     9F 01 00 FF 
052b4     0B 14 06 F6 | 	mov	arg02, ##@LR__5498
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     7C EC B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     04 07 90 AD |  if_e	jmp	#LR__0396
052c8     9F 01 00 FF 
052cc     0F 14 06 F6 | 	mov	arg02, ##@LR__5499
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     64 EC B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     F4 06 90 AD |  if_e	jmp	#LR__0397
052e0     9F 01 00 FF 
052e4     18 14 06 F6 | 	mov	arg02, ##@LR__5500
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     4C EC B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     E4 06 90 AD |  if_e	jmp	#LR__0398
052f8     9F 01 00 FF 
052fc     1D 14 06 F6 | 	mov	arg02, ##@LR__5501
05300     13 13 02 F6 | 	mov	arg01, local01
05304     34 EC B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     D4 06 90 AD |  if_e	jmp	#LR__0399
05310     9F 01 00 FF 
05314     23 14 06 F6 | 	mov	arg02, ##@LR__5502
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     1C EC B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     C4 06 90 AD |  if_e	jmp	#LR__0400
05328     9F 01 00 FF 
0532c     25 14 06 F6 | 	mov	arg02, ##@LR__5503
05330     13 13 02 F6 | 	mov	arg01, local01
05334     04 EC B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     B4 06 90 AD |  if_e	jmp	#LR__0401
05340     9F 01 00 FF 
05344     29 14 06 F6 | 	mov	arg02, ##@LR__5504
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     EC EB B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     A4 06 90 AD |  if_e	jmp	#LR__0402
05358     9F 01 00 FF 
0535c     2D 14 06 F6 | 	mov	arg02, ##@LR__5505
05360     13 13 02 F6 | 	mov	arg01, local01
05364     D4 EB B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     94 06 90 AD |  if_e	jmp	#LR__0403
05370     9F 01 00 FF 
05374     32 14 06 F6 | 	mov	arg02, ##@LR__5506
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     BC EB B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     84 06 90 AD |  if_e	jmp	#LR__0404
05388     9F 01 00 FF 
0538c     3A 14 06 F6 | 	mov	arg02, ##@LR__5507
05390     13 13 02 F6 | 	mov	arg01, local01
05394     A4 EB B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     74 06 90 AD |  if_e	jmp	#LR__0405
053a0     9F 01 00 FF 
053a4     3E 14 06 F6 | 	mov	arg02, ##@LR__5508
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     8C EB B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     64 06 90 AD |  if_e	jmp	#LR__0406
053b8     9F 01 00 FF 
053bc     40 14 06 F6 | 	mov	arg02, ##@LR__5509
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     74 EB B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     54 06 90 AD |  if_e	jmp	#LR__0407
053d0     9F 01 00 FF 
053d4     48 14 06 F6 | 	mov	arg02, ##@LR__5510
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     5C EB B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     44 06 90 AD |  if_e	jmp	#LR__0408
053e8     9F 01 00 FF 
053ec     4F 14 06 F6 | 	mov	arg02, ##@LR__5511
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     44 EB B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     34 06 90 AD |  if_e	jmp	#LR__0409
05400     9F 01 00 FF 
05404     53 14 06 F6 | 	mov	arg02, ##@LR__5512
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     2C EB B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     24 06 90 AD |  if_e	jmp	#LR__0410
05418     9F 01 00 FF 
0541c     58 14 06 F6 | 	mov	arg02, ##@LR__5513
05420     13 13 02 F6 | 	mov	arg01, local01
05424     14 EB B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     14 06 90 AD |  if_e	jmp	#LR__0411
05430     9F 01 00 FF 
05434     5B 14 06 F6 | 	mov	arg02, ##@LR__5514
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     FC EA B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     04 06 90 AD |  if_e	jmp	#LR__0412
05448     9F 01 00 FF 
0544c     64 14 06 F6 | 	mov	arg02, ##@LR__5515
05450     13 13 02 F6 | 	mov	arg01, local01
05454     E4 EA B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     F4 05 90 AD |  if_e	jmp	#LR__0413
05460     9F 01 00 FF 
05464     68 14 06 F6 | 	mov	arg02, ##@LR__5516
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     CC EA B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     E4 05 90 AD |  if_e	jmp	#LR__0414
05478     9F 01 00 FF 
0547c     6F 14 06 F6 | 	mov	arg02, ##@LR__5517
05480     13 13 02 F6 | 	mov	arg01, local01
05484     B4 EA B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     D4 05 90 AD |  if_e	jmp	#LR__0415
05490     9F 01 00 FF 
05494     73 14 06 F6 | 	mov	arg02, ##@LR__5518
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     9C EA B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     C4 05 90 AD |  if_e	jmp	#LR__0416
054a8     9F 01 00 FF 
054ac     7A 14 06 F6 | 	mov	arg02, ##@LR__5519
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     84 EA B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     B4 05 90 AD |  if_e	jmp	#LR__0417
054c0     9F 01 00 FF 
054c4     7E 14 06 F6 | 	mov	arg02, ##@LR__5520
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     6C EA B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     A4 05 90 AD |  if_e	jmp	#LR__0418
054d8     9F 01 00 FF 
054dc     85 14 06 F6 | 	mov	arg02, ##@LR__5521
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     54 EA B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     94 05 90 AD |  if_e	jmp	#LR__0419
054f0     9F 01 00 FF 
054f4     89 14 06 F6 | 	mov	arg02, ##@LR__5522
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     3C EA B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     84 05 90 AD |  if_e	jmp	#LR__0420
05508     9F 01 00 FF 
0550c     94 14 06 F6 | 	mov	arg02, ##@LR__5523
05510     13 13 02 F6 | 	mov	arg01, local01
05514     24 EA B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     74 05 90 AD |  if_e	jmp	#LR__0421
05520     9F 01 00 FF 
05524     98 14 06 F6 | 	mov	arg02, ##@LR__5524
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     0C EA B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     64 05 90 AD |  if_e	jmp	#LR__0422
05538     9F 01 00 FF 
0553c     9F 14 06 F6 | 	mov	arg02, ##@LR__5525
05540     13 13 02 F6 | 	mov	arg01, local01
05544     F4 E9 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     54 05 90 AD |  if_e	jmp	#LR__0423
05550     9F 01 00 FF 
05554     A3 14 06 F6 | 	mov	arg02, ##@LR__5526
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     DC E9 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     44 05 90 AD |  if_e	jmp	#LR__0424
05568     9F 01 00 FF 
0556c     AB 14 06 F6 | 	mov	arg02, ##@LR__5527
05570     13 13 02 F6 | 	mov	arg01, local01
05574     C4 E9 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     34 05 90 AD |  if_e	jmp	#LR__0425
05580     9F 01 00 FF 
05584     AF 14 06 F6 | 	mov	arg02, ##@LR__5528
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     AC E9 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     24 05 90 AD |  if_e	jmp	#LR__0426
05598     9F 01 00 FF 
0559c     B6 14 06 F6 | 	mov	arg02, ##@LR__5529
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     94 E9 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     14 05 90 AD |  if_e	jmp	#LR__0427
055b0     9F 01 00 FF 
055b4     BD 14 06 F6 | 	mov	arg02, ##@LR__5530
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     7C E9 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     04 05 90 AD |  if_e	jmp	#LR__0428
055c8     9F 01 00 FF 
055cc     C1 14 06 F6 | 	mov	arg02, ##@LR__5531
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     64 E9 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     F4 04 90 AD |  if_e	jmp	#LR__0429
055e0     9F 01 00 FF 
055e4     C7 14 06 F6 | 	mov	arg02, ##@LR__5532
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     4C E9 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     E4 04 90 AD |  if_e	jmp	#LR__0430
055f8     9F 01 00 FF 
055fc     CB 14 06 F6 | 	mov	arg02, ##@LR__5533
05600     13 13 02 F6 | 	mov	arg01, local01
05604     34 E9 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     D4 04 90 AD |  if_e	jmp	#LR__0431
05610     9F 01 00 FF 
05614     D2 14 06 F6 | 	mov	arg02, ##@LR__5534
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     1C E9 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     C4 04 90 AD |  if_e	jmp	#LR__0432
05628     9F 01 00 FF 
0562c     D7 14 06 F6 | 	mov	arg02, ##@LR__5535
05630     13 13 02 F6 | 	mov	arg01, local01
05634     04 E9 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     B4 04 90 AD |  if_e	jmp	#LR__0433
05640     9F 01 00 FF 
05644     DC 14 06 F6 | 	mov	arg02, ##@LR__5536
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     EC E8 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     A4 04 90 AD |  if_e	jmp	#LR__0434
05658     9F 01 00 FF 
0565c     E3 14 06 F6 | 	mov	arg02, ##@LR__5537
05660     13 13 02 F6 | 	mov	arg01, local01
05664     D4 E8 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     94 04 90 AD |  if_e	jmp	#LR__0435
05670     9F 01 00 FF 
05674     E6 14 06 F6 | 	mov	arg02, ##@LR__5538
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     BC E8 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     84 04 90 AD |  if_e	jmp	#LR__0436
05688     9F 01 00 FF 
0568c     F0 14 06 F6 | 	mov	arg02, ##@LR__5539
05690     13 13 02 F6 | 	mov	arg01, local01
05694     A4 E8 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     74 04 90 AD |  if_e	jmp	#LR__0437
056a0     9F 01 00 FF 
056a4     F4 14 06 F6 | 	mov	arg02, ##@LR__5540
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     8C E8 B1 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     64 04 90 AD |  if_e	jmp	#LR__0438
056b8     9F 01 00 FF 
056bc     FC 14 06 F6 | 	mov	arg02, ##@LR__5541
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     74 E8 B1 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     54 04 90 AD |  if_e	jmp	#LR__0439
056d0     9F 01 00 FF 
056d4     00 15 06 F6 | 	mov	arg02, ##@LR__5542
056d8     13 13 02 F6 | 	mov	arg01, local01
056dc     5C E8 B1 FD | 	call	#__system___string_cmp
056e0     00 FA 0D F2 | 	cmp	result1, #0 wz
056e4     44 04 90 AD |  if_e	jmp	#LR__0440
056e8     9F 01 00 FF 
056ec     06 15 06 F6 | 	mov	arg02, ##@LR__5543
056f0     13 13 02 F6 | 	mov	arg01, local01
056f4     44 E8 B1 FD | 	call	#__system___string_cmp
056f8     00 FA 0D F2 | 	cmp	result1, #0 wz
056fc     34 04 90 AD |  if_e	jmp	#LR__0441
05700     9F 01 00 FF 
05704     0C 15 06 F6 | 	mov	arg02, ##@LR__5544
05708     13 13 02 F6 | 	mov	arg01, local01
0570c     2C E8 B1 FD | 	call	#__system___string_cmp
05710     00 FA 0D F2 | 	cmp	result1, #0 wz
05714     24 04 90 AD |  if_e	jmp	#LR__0442
05718     28 04 90 FD | 	jmp	#LR__0443
0571c                 | LR__0310
0571c     5C FA 05 F6 | 	mov	result1, #92
05720     24 04 90 FD | 	jmp	#LR__0444
05724                 | LR__0311
05724     5C FA 05 F6 | 	mov	result1, #92
05728     1C 04 90 FD | 	jmp	#LR__0444
0572c                 | LR__0312
0572c     B9 FA 05 F6 | 	mov	result1, #185
05730     14 04 90 FD | 	jmp	#LR__0444
05734                 | LR__0313
05734     47 FA 05 F6 | 	mov	result1, #71
05738     0C 04 90 FD | 	jmp	#LR__0444
0573c                 | LR__0314
0573c     59 FA 05 F6 | 	mov	result1, #89
05740     04 04 90 FD | 	jmp	#LR__0444
05744                 | LR__0315
05744     59 FA 05 F6 | 	mov	result1, #89
05748     FC 03 90 FD | 	jmp	#LR__0444
0574c                 | LR__0316
0574c     C3 FA 05 F6 | 	mov	result1, #195
05750     F4 03 90 FD | 	jmp	#LR__0444
05754                 | LR__0317
05754     AE FA 05 F6 | 	mov	result1, #174
05758     EC 03 90 FD | 	jmp	#LR__0444
0575c                 | LR__0318
0575c     AE FA 05 F6 | 	mov	result1, #174
05760     E4 03 90 FD | 	jmp	#LR__0444
05764                 | LR__0319
05764     B1 FA 05 F6 | 	mov	result1, #177
05768     DC 03 90 FD | 	jmp	#LR__0444
0576c                 | LR__0320
0576c     B1 FA 05 F6 | 	mov	result1, #177
05770     D4 03 90 FD | 	jmp	#LR__0444
05774                 | LR__0321
05774     AF FA 05 F6 | 	mov	result1, #175
05778     CC 03 90 FD | 	jmp	#LR__0444
0577c                 | LR__0322
0577c     AF FA 05 F6 | 	mov	result1, #175
05780     C4 03 90 FD | 	jmp	#LR__0444
05784                 | LR__0323
05784     B0 FA 05 F6 | 	mov	result1, #176
05788     BC 03 90 FD | 	jmp	#LR__0444
0578c                 | LR__0324
0578c     B0 FA 05 F6 | 	mov	result1, #176
05790     B4 03 90 FD | 	jmp	#LR__0444
05794                 | LR__0325
05794     45 FA 05 F6 | 	mov	result1, #69
05798     AC 03 90 FD | 	jmp	#LR__0444
0579c                 | LR__0326
0579c     45 FA 05 F6 | 	mov	result1, #69
057a0     A4 03 90 FD | 	jmp	#LR__0444
057a4                 | LR__0327
057a4     69 FA 05 F6 | 	mov	result1, #105
057a8     9C 03 90 FD | 	jmp	#LR__0444
057ac                 | LR__0328
057ac     B4 FA 05 F6 | 	mov	result1, #180
057b0     94 03 90 FD | 	jmp	#LR__0444
057b4                 | LR__0329
057b4     40 FA 05 F6 | 	mov	result1, #64
057b8     8C 03 90 FD | 	jmp	#LR__0444
057bc                 | LR__0330
057bc     49 FA 05 F6 | 	mov	result1, #73
057c0     84 03 90 FD | 	jmp	#LR__0444
057c4                 | LR__0331
057c4     49 FA 05 F6 | 	mov	result1, #73
057c8     7C 03 90 FD | 	jmp	#LR__0444
057cc                 | LR__0332
057cc     50 FA 05 F6 | 	mov	result1, #80
057d0     74 03 90 FD | 	jmp	#LR__0444
057d4                 | LR__0333
057d4     50 FA 05 F6 | 	mov	result1, #80
057d8     6C 03 90 FD | 	jmp	#LR__0444
057dc                 | LR__0334
057dc     68 FA 05 F6 | 	mov	result1, #104
057e0     64 03 90 FD | 	jmp	#LR__0444
057e4                 | LR__0335
057e4     B7 FA 05 F6 | 	mov	result1, #183
057e8     5C 03 90 FD | 	jmp	#LR__0444
057ec                 | LR__0336
057ec     73 FA 05 F6 | 	mov	result1, #115
057f0     54 03 90 FD | 	jmp	#LR__0444
057f4                 | LR__0337
057f4     74 FA 05 F6 | 	mov	result1, #116
057f8     4C 03 90 FD | 	jmp	#LR__0444
057fc                 | LR__0338
057fc     6C FA 05 F6 | 	mov	result1, #108
05800     44 03 90 FD | 	jmp	#LR__0444
05804                 | LR__0339
05804     6C FA 05 F6 | 	mov	result1, #108
05808     3C 03 90 FD | 	jmp	#LR__0444
0580c                 | LR__0340
0580c     89 FA 05 F6 | 	mov	result1, #137
05810     34 03 90 FD | 	jmp	#LR__0444
05814                 | LR__0341
05814     C2 FA 05 F6 | 	mov	result1, #194
05818     2C 03 90 FD | 	jmp	#LR__0444
0581c                 | LR__0342
0581c     72 FA 05 F6 | 	mov	result1, #114
05820     24 03 90 FD | 	jmp	#LR__0444
05824                 | LR__0343
05824     5D FA 05 F6 | 	mov	result1, #93
05828     1C 03 90 FD | 	jmp	#LR__0444
0582c                 | LR__0344
0582c     96 FA 05 F6 | 	mov	result1, #150
05830     14 03 90 FD | 	jmp	#LR__0444
05834                 | LR__0345
05834     43 FA 05 F6 | 	mov	result1, #67
05838     0C 03 90 FD | 	jmp	#LR__0444
0583c                 | LR__0346
0583c     43 FA 05 F6 | 	mov	result1, #67
05840     04 03 90 FD | 	jmp	#LR__0444
05844                 | LR__0347
05844     43 FA 05 F6 | 	mov	result1, #67
05848     FC 02 90 FD | 	jmp	#LR__0444
0584c                 | LR__0348
0584c     5A FA 05 F6 | 	mov	result1, #90
05850     F4 02 90 FD | 	jmp	#LR__0444
05854                 | LR__0349
05854     AB FA 05 F6 | 	mov	result1, #171
05858     EC 02 90 FD | 	jmp	#LR__0444
0585c                 | LR__0350
0585c     BD FA 05 F6 | 	mov	result1, #189
05860     E4 02 90 FD | 	jmp	#LR__0444
05864                 | LR__0351
05864     BD FA 05 F6 | 	mov	result1, #189
05868     DC 02 90 FD | 	jmp	#LR__0444
0586c                 | LR__0352
0586c     46 FA 05 F6 | 	mov	result1, #70
05870     D4 02 90 FD | 	jmp	#LR__0444
05874                 | LR__0353
05874     46 FA 05 F6 | 	mov	result1, #70
05878     CC 02 90 FD | 	jmp	#LR__0444
0587c                 | LR__0354
0587c     71 FA 05 F6 | 	mov	result1, #113
05880     C4 02 90 FD | 	jmp	#LR__0444
05884                 | LR__0355
05884     71 FA 05 F6 | 	mov	result1, #113
05888     BC 02 90 FD | 	jmp	#LR__0444
0588c                 | LR__0356
0588c     60 FA 05 F6 | 	mov	result1, #96
05890     B4 02 90 FD | 	jmp	#LR__0444
05894                 | LR__0357
05894     4A FA 05 F6 | 	mov	result1, #74
05898     AC 02 90 FD | 	jmp	#LR__0444
0589c                 | LR__0358
0589c     4A FA 05 F6 | 	mov	result1, #74
058a0     A4 02 90 FD | 	jmp	#LR__0444
058a4                 | LR__0359
058a4     48 FA 05 F6 | 	mov	result1, #72
058a8     9C 02 90 FD | 	jmp	#LR__0444
058ac                 | LR__0360
058ac     48 FA 05 F6 | 	mov	result1, #72
058b0     94 02 90 FD | 	jmp	#LR__0444
058b4                 | LR__0361
058b4     BB FA 05 F6 | 	mov	result1, #187
058b8     8C 02 90 FD | 	jmp	#LR__0444
058bc                 | LR__0362
058bc     A9 FA 05 F6 | 	mov	result1, #169
058c0     84 02 90 FD | 	jmp	#LR__0444
058c4                 | LR__0363
058c4     4E FA 05 F6 | 	mov	result1, #78
058c8     7C 02 90 FD | 	jmp	#LR__0444
058cc                 | LR__0364
058cc     4E FA 05 F6 | 	mov	result1, #78
058d0     74 02 90 FD | 	jmp	#LR__0444
058d4                 | LR__0365
058d4     58 FA 05 F6 | 	mov	result1, #88
058d8     6C 02 90 FD | 	jmp	#LR__0444
058dc                 | LR__0366
058dc     5F FA 05 F6 | 	mov	result1, #95
058e0     64 02 90 FD | 	jmp	#LR__0444
058e4                 | LR__0367
058e4     5F FA 05 F6 | 	mov	result1, #95
058e8     5C 02 90 FD | 	jmp	#LR__0444
058ec                 | LR__0368
058ec     B5 FA 05 F6 | 	mov	result1, #181
058f0     54 02 90 FD | 	jmp	#LR__0444
058f4                 | LR__0369
058f4     4C FA 05 F6 | 	mov	result1, #76
058f8     4C 02 90 FD | 	jmp	#LR__0444
058fc                 | LR__0370
058fc     4C FA 05 F6 | 	mov	result1, #76
05900     44 02 90 FD | 	jmp	#LR__0444
05904                 | LR__0371
05904     52 FA 05 F6 | 	mov	result1, #82
05908     3C 02 90 FD | 	jmp	#LR__0444
0590c                 | LR__0372
0590c     52 FA 05 F6 | 	mov	result1, #82
05910     34 02 90 FD | 	jmp	#LR__0444
05914                 | LR__0373
05914     97 FA 05 F6 | 	mov	result1, #151
05918     2C 02 90 FD | 	jmp	#LR__0444
0591c                 | LR__0374
0591c     C6 FA 05 F6 | 	mov	result1, #198
05920     24 02 90 FD | 	jmp	#LR__0444
05924                 | LR__0375
05924     61 FA 05 F6 | 	mov	result1, #97
05928     1C 02 90 FD | 	jmp	#LR__0444
0592c                 | LR__0376
0592c     61 FA 05 F6 | 	mov	result1, #97
05930     14 02 90 FD | 	jmp	#LR__0444
05934                 | LR__0377
05934     63 FA 05 F6 | 	mov	result1, #99
05938     0C 02 90 FD | 	jmp	#LR__0444
0593c                 | LR__0378
0593c     41 FA 05 F6 | 	mov	result1, #65
05940     04 02 90 FD | 	jmp	#LR__0444
05944                 | LR__0379
05944     4B FA 05 F6 | 	mov	result1, #75
05948     FC 01 90 FD | 	jmp	#LR__0444
0594c                 | LR__0380
0594c     4B FA 05 F6 | 	mov	result1, #75
05950     F4 01 90 FD | 	jmp	#LR__0444
05954                 | LR__0381
05954     C1 FA 05 F6 | 	mov	result1, #193
05958     EC 01 90 FD | 	jmp	#LR__0444
0595c                 | LR__0382
0595c     B3 FA 05 F6 | 	mov	result1, #179
05960     E4 01 90 FD | 	jmp	#LR__0444
05964                 | LR__0383
05964     5E FA 05 F6 | 	mov	result1, #94
05968     DC 01 90 FD | 	jmp	#LR__0444
0596c                 | LR__0384
0596c     5E FA 05 F6 | 	mov	result1, #94
05970     D4 01 90 FD | 	jmp	#LR__0444
05974                 | LR__0385
05974     7C FA 05 F6 | 	mov	result1, #124
05978     CC 01 90 FD | 	jmp	#LR__0444
0597c                 | LR__0386
0597c     7E FA 05 F6 | 	mov	result1, #126
05980     C4 01 90 FD | 	jmp	#LR__0444
05984                 | LR__0387
05984     7D FA 05 F6 | 	mov	result1, #125
05988     BC 01 90 FD | 	jmp	#LR__0444
0598c                 | LR__0388
0598c     7F FA 05 F6 | 	mov	result1, #127
05990     B4 01 90 FD | 	jmp	#LR__0444
05994                 | LR__0389
05994     80 FA 05 F6 | 	mov	result1, #128
05998     AC 01 90 FD | 	jmp	#LR__0444
0599c                 | LR__0390
0599c     55 FA 05 F6 | 	mov	result1, #85
059a0     A4 01 90 FD | 	jmp	#LR__0444
059a4                 | LR__0391
059a4     75 FA 05 F6 | 	mov	result1, #117
059a8     9C 01 90 FD | 	jmp	#LR__0444
059ac                 | LR__0392
059ac     75 FA 05 F6 | 	mov	result1, #117
059b0     94 01 90 FD | 	jmp	#LR__0444
059b4                 | LR__0393
059b4     42 FA 05 F6 | 	mov	result1, #66
059b8     8C 01 90 FD | 	jmp	#LR__0444
059bc                 | LR__0394
059bc     42 FA 05 F6 | 	mov	result1, #66
059c0     84 01 90 FD | 	jmp	#LR__0444
059c4                 | LR__0395
059c4     95 FA 05 F6 | 	mov	result1, #149
059c8     7C 01 90 FD | 	jmp	#LR__0444
059cc                 | LR__0396
059cc     AC FA 05 F6 | 	mov	result1, #172
059d0     74 01 90 FD | 	jmp	#LR__0444
059d4                 | LR__0397
059d4     81 FA 05 F6 | 	mov	result1, #129
059d8     6C 01 90 FD | 	jmp	#LR__0444
059dc                 | LR__0398
059dc     81 FA 05 F6 | 	mov	result1, #129
059e0     64 01 90 FD | 	jmp	#LR__0444
059e4                 | LR__0399
059e4     44 FA 05 F6 | 	mov	result1, #68
059e8     5C 01 90 FD | 	jmp	#LR__0444
059ec                 | LR__0400
059ec     44 FA 05 F6 | 	mov	result1, #68
059f0     54 01 90 FD | 	jmp	#LR__0444
059f4                 | LR__0401
059f4     BC FA 05 F6 | 	mov	result1, #188
059f8     4C 01 90 FD | 	jmp	#LR__0444
059fc                 | LR__0402
059fc     88 FA 05 F6 | 	mov	result1, #136
05a00     44 01 90 FD | 	jmp	#LR__0444
05a04                 | LR__0403
05a04     B6 FA 05 F6 | 	mov	result1, #182
05a08     3C 01 90 FD | 	jmp	#LR__0444
05a0c                 | LR__0404
05a0c     92 FA 05 F6 | 	mov	result1, #146
05a10     34 01 90 FD | 	jmp	#LR__0444
05a14                 | LR__0405
05a14     BE FA 05 F6 | 	mov	result1, #190
05a18     2C 01 90 FD | 	jmp	#LR__0444
05a1c                 | LR__0406
05a1c     BE FA 05 F6 | 	mov	result1, #190
05a20     24 01 90 FD | 	jmp	#LR__0444
05a24                 | LR__0407
05a24     C7 FA 05 F6 | 	mov	result1, #199
05a28     1C 01 90 FD | 	jmp	#LR__0444
05a2c                 | LR__0408
05a2c     AA FA 05 F6 | 	mov	result1, #170
05a30     14 01 90 FD | 	jmp	#LR__0444
05a34                 | LR__0409
05a34     4D FA 05 F6 | 	mov	result1, #77
05a38     0C 01 90 FD | 	jmp	#LR__0444
05a3c                 | LR__0410
05a3c     51 FA 05 F6 | 	mov	result1, #81
05a40     04 01 90 FD | 	jmp	#LR__0444
05a44                 | LR__0411
05a44     51 FA 05 F6 | 	mov	result1, #81
05a48     FC 00 90 FD | 	jmp	#LR__0444
05a4c                 | LR__0412
05a4c     8E FA 05 F6 | 	mov	result1, #142
05a50     F4 00 90 FD | 	jmp	#LR__0444
05a54                 | LR__0413
05a54     8E FA 05 F6 | 	mov	result1, #142
05a58     EC 00 90 FD | 	jmp	#LR__0444
05a5c                 | LR__0414
05a5c     90 FA 05 F6 | 	mov	result1, #144
05a60     E4 00 90 FD | 	jmp	#LR__0444
05a64                 | LR__0415
05a64     90 FA 05 F6 | 	mov	result1, #144
05a68     DC 00 90 FD | 	jmp	#LR__0444
05a6c                 | LR__0416
05a6c     8D FA 05 F6 | 	mov	result1, #141
05a70     D4 00 90 FD | 	jmp	#LR__0444
05a74                 | LR__0417
05a74     8D FA 05 F6 | 	mov	result1, #141
05a78     CC 00 90 FD | 	jmp	#LR__0444
05a7c                 | LR__0418
05a7c     8C FA 05 F6 | 	mov	result1, #140
05a80     C4 00 90 FD | 	jmp	#LR__0444
05a84                 | LR__0419
05a84     8C FA 05 F6 | 	mov	result1, #140
05a88     BC 00 90 FD | 	jmp	#LR__0444
05a8c                 | LR__0420
05a8c     91 FA 05 F6 | 	mov	result1, #145
05a90     B4 00 90 FD | 	jmp	#LR__0444
05a94                 | LR__0421
05a94     91 FA 05 F6 | 	mov	result1, #145
05a98     AC 00 90 FD | 	jmp	#LR__0444
05a9c                 | LR__0422
05a9c     8B FA 05 F6 | 	mov	result1, #139
05aa0     A4 00 90 FD | 	jmp	#LR__0444
05aa4                 | LR__0423
05aa4     8B FA 05 F6 | 	mov	result1, #139
05aa8     9C 00 90 FD | 	jmp	#LR__0444
05aac                 | LR__0424
05aac     8F FA 05 F6 | 	mov	result1, #143
05ab0     94 00 90 FD | 	jmp	#LR__0444
05ab4                 | LR__0425
05ab4     8F FA 05 F6 | 	mov	result1, #143
05ab8     8C 00 90 FD | 	jmp	#LR__0444
05abc                 | LR__0426
05abc     8F FA 05 F6 | 	mov	result1, #143
05ac0     84 00 90 FD | 	jmp	#LR__0444
05ac4                 | LR__0427
05ac4     B2 FA 05 F6 | 	mov	result1, #178
05ac8     7C 00 90 FD | 	jmp	#LR__0444
05acc                 | LR__0428
05acc     B2 FA 05 F6 | 	mov	result1, #178
05ad0     74 00 90 FD | 	jmp	#LR__0444
05ad4                 | LR__0429
05ad4     75 FA 05 F6 | 	mov	result1, #117
05ad8     6C 00 90 FD | 	jmp	#LR__0444
05adc                 | LR__0430
05adc     75 FA 05 F6 | 	mov	result1, #117
05ae0     64 00 90 FD | 	jmp	#LR__0444
05ae4                 | LR__0431
05ae4     6D FA 05 F6 | 	mov	result1, #109
05ae8     5C 00 90 FD | 	jmp	#LR__0444
05aec                 | LR__0432
05aec     6D FA 05 F6 | 	mov	result1, #109
05af0     54 00 90 FD | 	jmp	#LR__0444
05af4                 | LR__0433
05af4     5B FA 05 F6 | 	mov	result1, #91
05af8     4C 00 90 FD | 	jmp	#LR__0444
05afc                 | LR__0434
05afc     56 FA 05 F6 | 	mov	result1, #86
05b00     44 00 90 FD | 	jmp	#LR__0444
05b04                 | LR__0435
05b04     56 FA 05 F6 | 	mov	result1, #86
05b08     3C 00 90 FD | 	jmp	#LR__0444
05b0c                 | LR__0436
05b0c     70 FA 05 F6 | 	mov	result1, #112
05b10     34 00 90 FD | 	jmp	#LR__0444
05b14                 | LR__0437
05b14     70 FA 05 F6 | 	mov	result1, #112
05b18     2C 00 90 FD | 	jmp	#LR__0444
05b1c                 | LR__0438
05b1c     57 FA 05 F6 | 	mov	result1, #87
05b20     24 00 90 FD | 	jmp	#LR__0444
05b24                 | LR__0439
05b24     57 FA 05 F6 | 	mov	result1, #87
05b28     1C 00 90 FD | 	jmp	#LR__0444
05b2c                 | LR__0440
05b2c     79 FA 05 F6 | 	mov	result1, #121
05b30     14 00 90 FD | 	jmp	#LR__0444
05b34                 | LR__0441
05b34     77 FA 05 F6 | 	mov	result1, #119
05b38     0C 00 90 FD | 	jmp	#LR__0444
05b3c                 | LR__0442
05b3c     78 FA 05 F6 | 	mov	result1, #120
05b40     04 00 90 FD | 	jmp	#LR__0444
05b44                 | LR__0443
05b44     00 FA 05 F6 | 	mov	result1, #0
05b48                 | LR__0444
05b48     A7 F0 03 F6 | 	mov	ptra, fp
05b4c     B2 00 A0 FD | 	call	#popregs_
05b50                 | _iscommand_ret
05b50     2D 00 64 FD | 	ret
05b54                 | 
05b54                 | ' 
05b54                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05b54                 | ' 
05b54                 | ' function isfunction(s as string) as ubyte
05b54                 | _isfunction
05b54     01 4A 05 F6 | 	mov	COUNT_, #1
05b58     A8 00 A0 FD | 	call	#pushregs_
05b5c                 | ' 
05b5c                 | ' select case s
05b5c     09 27 02 F6 | 	mov	local01, arg01
05b60     9F 01 00 FF 
05b64     12 15 06 F6 | 	mov	arg02, ##@LR__5545
05b68     13 13 02 F6 | 	mov	arg01, local01
05b6c     CC E3 B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     3C 04 90 AD |  if_e	jmp	#LR__0450
05b78     9F 01 00 FF 
05b7c     16 15 06 F6 | 	mov	arg02, ##@LR__5546
05b80     13 13 02 F6 | 	mov	arg01, local01
05b84     B4 E3 B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     2C 04 90 AD |  if_e	jmp	#LR__0451
05b90     9F 01 00 FF 
05b94     1B 15 06 F6 | 	mov	arg02, ##@LR__5547
05b98     13 13 02 F6 | 	mov	arg01, local01
05b9c     9C E3 B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     1C 04 90 AD |  if_e	jmp	#LR__0452
05ba8     9F 01 00 FF 
05bac     1F 15 06 F6 | 	mov	arg02, ##@LR__5548
05bb0     13 13 02 F6 | 	mov	arg01, local01
05bb4     84 E3 B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     0C 04 90 AD |  if_e	jmp	#LR__0453
05bc0     9F 01 00 FF 
05bc4     24 15 06 F6 | 	mov	arg02, ##@LR__5549
05bc8     13 13 02 F6 | 	mov	arg01, local01
05bcc     6C E3 B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     FC 03 90 AD |  if_e	jmp	#LR__0454
05bd8     9F 01 00 FF 
05bdc     28 15 06 F6 | 	mov	arg02, ##@LR__5550
05be0     13 13 02 F6 | 	mov	arg01, local01
05be4     54 E3 B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     EC 03 90 AD |  if_e	jmp	#LR__0455
05bf0     9F 01 00 FF 
05bf4     2D 15 06 F6 | 	mov	arg02, ##@LR__5551
05bf8     13 13 02 F6 | 	mov	arg01, local01
05bfc     3C E3 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     DC 03 90 AD |  if_e	jmp	#LR__0456
05c08     9F 01 00 FF 
05c0c     31 15 06 F6 | 	mov	arg02, ##@LR__5552
05c10     13 13 02 F6 | 	mov	arg01, local01
05c14     24 E3 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     CC 03 90 AD |  if_e	jmp	#LR__0457
05c20     9F 01 00 FF 
05c24     36 15 06 F6 | 	mov	arg02, ##@LR__5553
05c28     13 13 02 F6 | 	mov	arg01, local01
05c2c     0C E3 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     BC 03 90 AD |  if_e	jmp	#LR__0458
05c38     9F 01 00 FF 
05c3c     3B 15 06 F6 | 	mov	arg02, ##@LR__5554
05c40     13 13 02 F6 | 	mov	arg01, local01
05c44     F4 E2 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     AC 03 90 AD |  if_e	jmp	#LR__0459
05c50     9F 01 00 FF 
05c54     3F 15 06 F6 | 	mov	arg02, ##@LR__5555
05c58     13 13 02 F6 | 	mov	arg01, local01
05c5c     DC E2 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     9C 03 90 AD |  if_e	jmp	#LR__0460
05c68     9F 01 00 FF 
05c6c     45 15 06 F6 | 	mov	arg02, ##@LR__5556
05c70     13 13 02 F6 | 	mov	arg01, local01
05c74     C4 E2 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     8C 03 90 AD |  if_e	jmp	#LR__0461
05c80     9F 01 00 FF 
05c84     4E 15 06 F6 | 	mov	arg02, ##@LR__5557
05c88     13 13 02 F6 | 	mov	arg01, local01
05c8c     AC E2 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     7C 03 90 AD |  if_e	jmp	#LR__0462
05c98     9F 01 00 FF 
05c9c     52 15 06 F6 | 	mov	arg02, ##@LR__5558
05ca0     13 13 02 F6 | 	mov	arg01, local01
05ca4     94 E2 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     6C 03 90 AD |  if_e	jmp	#LR__0463
05cb0     9F 01 00 FF 
05cb4     56 15 06 F6 | 	mov	arg02, ##@LR__5559
05cb8     13 13 02 F6 | 	mov	arg01, local01
05cbc     7C E2 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     5C 03 90 AD |  if_e	jmp	#LR__0464
05cc8     9F 01 00 FF 
05ccc     5F 15 06 F6 | 	mov	arg02, ##@LR__5560
05cd0     13 13 02 F6 | 	mov	arg01, local01
05cd4     64 E2 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     4C 03 90 AD |  if_e	jmp	#LR__0465
05ce0     9F 01 00 FF 
05ce4     63 15 06 F6 | 	mov	arg02, ##@LR__5561
05ce8     13 13 02 F6 | 	mov	arg01, local01
05cec     4C E2 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     3C 03 90 AD |  if_e	jmp	#LR__0466
05cf8     9F 01 00 FF 
05cfc     71 15 06 F6 | 	mov	arg02, ##@LR__5562
05d00     13 13 02 F6 | 	mov	arg01, local01
05d04     34 E2 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     2C 03 90 AD |  if_e	jmp	#LR__0467
05d10     9F 01 00 FF 
05d14     7E 15 06 F6 | 	mov	arg02, ##@LR__5563
05d18     13 13 02 F6 | 	mov	arg01, local01
05d1c     1C E2 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     1C 03 90 AD |  if_e	jmp	#LR__0468
05d28     9F 01 00 FF 
05d2c     86 15 06 F6 | 	mov	arg02, ##@LR__5564
05d30     13 13 02 F6 | 	mov	arg01, local01
05d34     04 E2 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     0C 03 90 AD |  if_e	jmp	#LR__0469
05d40     9F 01 00 FF 
05d44     8B 15 06 F6 | 	mov	arg02, ##@LR__5565
05d48     13 13 02 F6 | 	mov	arg01, local01
05d4c     EC E1 B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     FC 02 90 AD |  if_e	jmp	#LR__0470
05d58     9F 01 00 FF 
05d5c     92 15 06 F6 | 	mov	arg02, ##@LR__5566
05d60     13 13 02 F6 | 	mov	arg01, local01
05d64     D4 E1 B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     EC 02 90 AD |  if_e	jmp	#LR__0471
05d70     9F 01 00 FF 
05d74     96 15 06 F6 | 	mov	arg02, ##@LR__5567
05d78     13 13 02 F6 | 	mov	arg01, local01
05d7c     BC E1 B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     DC 02 90 AD |  if_e	jmp	#LR__0472
05d88     9F 01 00 FF 
05d8c     9C 15 06 F6 | 	mov	arg02, ##@LR__5568
05d90     13 13 02 F6 | 	mov	arg01, local01
05d94     A4 E1 B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     CC 02 90 AD |  if_e	jmp	#LR__0473
05da0     9F 01 00 FF 
05da4     A0 15 06 F6 | 	mov	arg02, ##@LR__5569
05da8     13 13 02 F6 | 	mov	arg01, local01
05dac     8C E1 B1 FD | 	call	#__system___string_cmp
05db0     00 FA 0D F2 | 	cmp	result1, #0 wz
05db4     BC 02 90 AD |  if_e	jmp	#LR__0474
05db8     9F 01 00 FF 
05dbc     A4 15 06 F6 | 	mov	arg02, ##@LR__5570
05dc0     13 13 02 F6 | 	mov	arg01, local01
05dc4     74 E1 B1 FD | 	call	#__system___string_cmp
05dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dcc     AC 02 90 AD |  if_e	jmp	#LR__0475
05dd0     9F 01 00 FF 
05dd4     AA 15 06 F6 | 	mov	arg02, ##@LR__5571
05dd8     13 13 02 F6 | 	mov	arg01, local01
05ddc     5C E1 B1 FD | 	call	#__system___string_cmp
05de0     00 FA 0D F2 | 	cmp	result1, #0 wz
05de4     9C 02 90 AD |  if_e	jmp	#LR__0476
05de8     9F 01 00 FF 
05dec     AF 15 06 F6 | 	mov	arg02, ##@LR__5572
05df0     13 13 02 F6 | 	mov	arg01, local01
05df4     44 E1 B1 FD | 	call	#__system___string_cmp
05df8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dfc     8C 02 90 AD |  if_e	jmp	#LR__0477
05e00     9F 01 00 FF 
05e04     B6 15 06 F6 | 	mov	arg02, ##@LR__5573
05e08     13 13 02 F6 | 	mov	arg01, local01
05e0c     2C E1 B1 FD | 	call	#__system___string_cmp
05e10     00 FA 0D F2 | 	cmp	result1, #0 wz
05e14     7C 02 90 AD |  if_e	jmp	#LR__0478
05e18     9F 01 00 FF 
05e1c     BD 15 06 F6 | 	mov	arg02, ##@LR__5574
05e20     13 13 02 F6 | 	mov	arg01, local01
05e24     14 E1 B1 FD | 	call	#__system___string_cmp
05e28     00 FA 0D F2 | 	cmp	result1, #0 wz
05e2c     6C 02 90 AD |  if_e	jmp	#LR__0479
05e30     9F 01 00 FF 
05e34     C4 15 06 F6 | 	mov	arg02, ##@LR__5575
05e38     13 13 02 F6 | 	mov	arg01, local01
05e3c     FC E0 B1 FD | 	call	#__system___string_cmp
05e40     00 FA 0D F2 | 	cmp	result1, #0 wz
05e44     5C 02 90 AD |  if_e	jmp	#LR__0480
05e48     9F 01 00 FF 
05e4c     CB 15 06 F6 | 	mov	arg02, ##@LR__5576
05e50     13 13 02 F6 | 	mov	arg01, local01
05e54     E4 E0 B1 FD | 	call	#__system___string_cmp
05e58     00 FA 0D F2 | 	cmp	result1, #0 wz
05e5c     4C 02 90 AD |  if_e	jmp	#LR__0481
05e60     9F 01 00 FF 
05e64     D0 15 06 F6 | 	mov	arg02, ##@LR__5577
05e68     13 13 02 F6 | 	mov	arg01, local01
05e6c     CC E0 B1 FD | 	call	#__system___string_cmp
05e70     00 FA 0D F2 | 	cmp	result1, #0 wz
05e74     3C 02 90 AD |  if_e	jmp	#LR__0482
05e78     9F 01 00 FF 
05e7c     D8 15 06 F6 | 	mov	arg02, ##@LR__5578
05e80     13 13 02 F6 | 	mov	arg01, local01
05e84     B4 E0 B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     2C 02 90 AD |  if_e	jmp	#LR__0483
05e90     9F 01 00 FF 
05e94     DE 15 06 F6 | 	mov	arg02, ##@LR__5579
05e98     13 13 02 F6 | 	mov	arg01, local01
05e9c     9C E0 B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     1C 02 90 AD |  if_e	jmp	#LR__0484
05ea8     9F 01 00 FF 
05eac     E5 15 06 F6 | 	mov	arg02, ##@LR__5580
05eb0     13 13 02 F6 | 	mov	arg01, local01
05eb4     84 E0 B1 FD | 	call	#__system___string_cmp
05eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ebc     0C 02 90 AD |  if_e	jmp	#LR__0485
05ec0     9F 01 00 FF 
05ec4     EB 15 06 F6 | 	mov	arg02, ##@LR__5581
05ec8     13 13 02 F6 | 	mov	arg01, local01
05ecc     6C E0 B1 FD | 	call	#__system___string_cmp
05ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed4     FC 01 90 AD |  if_e	jmp	#LR__0486
05ed8     9F 01 00 FF 
05edc     F1 15 06 F6 | 	mov	arg02, ##@LR__5582
05ee0     13 13 02 F6 | 	mov	arg01, local01
05ee4     54 E0 B1 FD | 	call	#__system___string_cmp
05ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eec     EC 01 90 AD |  if_e	jmp	#LR__0487
05ef0     9F 01 00 FF 
05ef4     F5 15 06 F6 | 	mov	arg02, ##@LR__5583
05ef8     13 13 02 F6 | 	mov	arg01, local01
05efc     3C E0 B1 FD | 	call	#__system___string_cmp
05f00     00 FA 0D F2 | 	cmp	result1, #0 wz
05f04     DC 01 90 AD |  if_e	jmp	#LR__0488
05f08     9F 01 00 FF 
05f0c     F9 15 06 F6 | 	mov	arg02, ##@LR__5584
05f10     13 13 02 F6 | 	mov	arg01, local01
05f14     24 E0 B1 FD | 	call	#__system___string_cmp
05f18     00 FA 0D F2 | 	cmp	result1, #0 wz
05f1c     CC 01 90 AD |  if_e	jmp	#LR__0489
05f20     9F 01 00 FF 
05f24     FD 15 06 F6 | 	mov	arg02, ##@LR__5585
05f28     13 13 02 F6 | 	mov	arg01, local01
05f2c     0C E0 B1 FD | 	call	#__system___string_cmp
05f30     00 FA 0D F2 | 	cmp	result1, #0 wz
05f34     BC 01 90 AD |  if_e	jmp	#LR__0490
05f38     A0 01 00 FF 
05f3c     03 14 06 F6 | 	mov	arg02, ##@LR__5586
05f40     13 13 02 F6 | 	mov	arg01, local01
05f44     F4 DF B1 FD | 	call	#__system___string_cmp
05f48     00 FA 0D F2 | 	cmp	result1, #0 wz
05f4c     AC 01 90 AD |  if_e	jmp	#LR__0491
05f50     A0 01 00 FF 
05f54     09 14 06 F6 | 	mov	arg02, ##@LR__5587
05f58     13 13 02 F6 | 	mov	arg01, local01
05f5c     DC DF B1 FD | 	call	#__system___string_cmp
05f60     00 FA 0D F2 | 	cmp	result1, #0 wz
05f64     9C 01 90 AD |  if_e	jmp	#LR__0492
05f68     A0 01 00 FF 
05f6c     0E 14 06 F6 | 	mov	arg02, ##@LR__5588
05f70     13 13 02 F6 | 	mov	arg01, local01
05f74     C4 DF B1 FD | 	call	#__system___string_cmp
05f78     00 FA 0D F2 | 	cmp	result1, #0 wz
05f7c     8C 01 90 AD |  if_e	jmp	#LR__0493
05f80     A0 01 00 FF 
05f84     12 14 06 F6 | 	mov	arg02, ##@LR__5589
05f88     13 13 02 F6 | 	mov	arg01, local01
05f8c     AC DF B1 FD | 	call	#__system___string_cmp
05f90     00 FA 0D F2 | 	cmp	result1, #0 wz
05f94     7C 01 90 AD |  if_e	jmp	#LR__0494
05f98     A0 01 00 FF 
05f9c     16 14 06 F6 | 	mov	arg02, ##@LR__5590
05fa0     13 13 02 F6 | 	mov	arg01, local01
05fa4     94 DF B1 FD | 	call	#__system___string_cmp
05fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fac     6C 01 90 AD |  if_e	jmp	#LR__0495
05fb0     70 01 90 FD | 	jmp	#LR__0496
05fb4                 | LR__0450
05fb4     9E FA 05 F6 | 	mov	result1, #158
05fb8     6C 01 90 FD | 	jmp	#LR__0497
05fbc                 | LR__0451
05fbc     85 FA 05 F6 | 	mov	result1, #133
05fc0     64 01 90 FD | 	jmp	#LR__0497
05fc4                 | LR__0452
05fc4     9B FA 05 F6 | 	mov	result1, #155
05fc8     5C 01 90 FD | 	jmp	#LR__0497
05fcc                 | LR__0453
05fcc     9B FA 05 F6 | 	mov	result1, #155
05fd0     54 01 90 FD | 	jmp	#LR__0497
05fd4                 | LR__0454
05fd4     A7 FA 05 F6 | 	mov	result1, #167
05fd8     4C 01 90 FD | 	jmp	#LR__0497
05fdc                 | LR__0455
05fdc     84 FA 05 F6 | 	mov	result1, #132
05fe0     44 01 90 FD | 	jmp	#LR__0497
05fe4                 | LR__0456
05fe4     86 FA 05 F6 | 	mov	result1, #134
05fe8     3C 01 90 FD | 	jmp	#LR__0497
05fec                 | LR__0457
05fec     A2 FA 05 F6 | 	mov	result1, #162
05ff0     34 01 90 FD | 	jmp	#LR__0497
05ff4                 | LR__0458
05ff4     9F FA 05 F6 | 	mov	result1, #159
05ff8     2C 01 90 FD | 	jmp	#LR__0497
05ffc                 | LR__0459
05ffc     82 FA 05 F6 | 	mov	result1, #130
06000     24 01 90 FD | 	jmp	#LR__0497
06004                 | LR__0460
06004     99 FA 05 F6 | 	mov	result1, #153
06008     1C 01 90 FD | 	jmp	#LR__0497
0600c                 | LR__0461
0600c     C5 FA 05 F6 | 	mov	result1, #197
06010     14 01 90 FD | 	jmp	#LR__0497
06014                 | LR__0462
06014     C5 FA 05 F6 | 	mov	result1, #197
06018     0C 01 90 FD | 	jmp	#LR__0497
0601c                 | LR__0463
0601c     9C FA 05 F6 | 	mov	result1, #156
06020     04 01 90 FD | 	jmp	#LR__0497
06024                 | LR__0464
06024     6F FA 05 F6 | 	mov	result1, #111
06028     FC 00 90 FD | 	jmp	#LR__0497
0602c                 | LR__0465
0602c     6F FA 05 F6 | 	mov	result1, #111
06030     F4 00 90 FD | 	jmp	#LR__0497
06034                 | LR__0466
06034     93 FA 05 F6 | 	mov	result1, #147
06038     EC 00 90 FD | 	jmp	#LR__0497
0603c                 | LR__0467
0603c     94 FA 05 F6 | 	mov	result1, #148
06040     E4 00 90 FD | 	jmp	#LR__0497
06044                 | LR__0468
06044     62 FA 05 F6 | 	mov	result1, #98
06048     DC 00 90 FD | 	jmp	#LR__0497
0604c                 | LR__0469
0604c     A3 FA 05 F6 | 	mov	result1, #163
06050     D4 00 90 FD | 	jmp	#LR__0497
06054                 | LR__0470
06054     9D FA 05 F6 | 	mov	result1, #157
06058     CC 00 90 FD | 	jmp	#LR__0497
0605c                 | LR__0471
0605c     8A FA 05 F6 | 	mov	result1, #138
06060     C4 00 90 FD | 	jmp	#LR__0497
06064                 | LR__0472
06064     A4 FA 05 F6 | 	mov	result1, #164
06068     BC 00 90 FD | 	jmp	#LR__0497
0606c                 | LR__0473
0606c     A8 FA 05 F6 | 	mov	result1, #168
06070     B4 00 90 FD | 	jmp	#LR__0497
06074                 | LR__0474
06074     AD FA 05 F6 | 	mov	result1, #173
06078     AC 00 90 FD | 	jmp	#LR__0497
0607c                 | LR__0475
0607c     9A FA 05 F6 | 	mov	result1, #154
06080     A4 00 90 FD | 	jmp	#LR__0497
06084                 | LR__0476
06084     A6 FA 05 F6 | 	mov	result1, #166
06088     9C 00 90 FD | 	jmp	#LR__0497
0608c                 | LR__0477
0608c     66 FA 05 F6 | 	mov	result1, #102
06090     94 00 90 FD | 	jmp	#LR__0497
06094                 | LR__0478
06094     67 FA 05 F6 | 	mov	result1, #103
06098     8C 00 90 FD | 	jmp	#LR__0497
0609c                 | LR__0479
0609c     64 FA 05 F6 | 	mov	result1, #100
060a0     84 00 90 FD | 	jmp	#LR__0497
060a4                 | LR__0480
060a4     65 FA 05 F6 | 	mov	result1, #101
060a8     7C 00 90 FD | 	jmp	#LR__0497
060ac                 | LR__0481
060ac     98 FA 05 F6 | 	mov	result1, #152
060b0     74 00 90 FD | 	jmp	#LR__0497
060b4                 | LR__0482
060b4     7B FA 05 F6 | 	mov	result1, #123
060b8     6C 00 90 FD | 	jmp	#LR__0497
060bc                 | LR__0483
060bc     76 FA 05 F6 | 	mov	result1, #118
060c0     64 00 90 FD | 	jmp	#LR__0497
060c4                 | LR__0484
060c4     A5 FA 05 F6 | 	mov	result1, #165
060c8     5C 00 90 FD | 	jmp	#LR__0497
060cc                 | LR__0485
060cc     7A FA 05 F6 | 	mov	result1, #122
060d0     54 00 90 FD | 	jmp	#LR__0497
060d4                 | LR__0486
060d4     BF FA 05 F6 | 	mov	result1, #191
060d8     4C 00 90 FD | 	jmp	#LR__0497
060dc                 | LR__0487
060dc     54 FA 05 F6 | 	mov	result1, #84
060e0     44 00 90 FD | 	jmp	#LR__0497
060e4                 | LR__0488
060e4     6B FA 05 F6 | 	mov	result1, #107
060e8     3C 00 90 FD | 	jmp	#LR__0497
060ec                 | LR__0489
060ec     87 FA 05 F6 | 	mov	result1, #135
060f0     34 00 90 FD | 	jmp	#LR__0497
060f4                 | LR__0490
060f4     6A FA 05 F6 | 	mov	result1, #106
060f8     2C 00 90 FD | 	jmp	#LR__0497
060fc                 | LR__0491
060fc     6E FA 05 F6 | 	mov	result1, #110
06100     24 00 90 FD | 	jmp	#LR__0497
06104                 | LR__0492
06104     A1 FA 05 F6 | 	mov	result1, #161
06108     1C 00 90 FD | 	jmp	#LR__0497
0610c                 | LR__0493
0610c     83 FA 05 F6 | 	mov	result1, #131
06110     14 00 90 FD | 	jmp	#LR__0497
06114                 | LR__0494
06114     A0 FA 05 F6 | 	mov	result1, #160
06118     0C 00 90 FD | 	jmp	#LR__0497
0611c                 | LR__0495
0611c     9B FA 05 F6 | 	mov	result1, #155
06120     04 00 90 FD | 	jmp	#LR__0497
06124                 | LR__0496
06124     00 FA 05 F6 | 	mov	result1, #0
06128                 | LR__0497
06128     A7 F0 03 F6 | 	mov	ptra, fp
0612c     B2 00 A0 FD | 	call	#popregs_
06130                 | _isfunction_ret
06130     2D 00 64 FD | 	ret
06134                 | 
06134                 | ' 
06134                 | ' ' Check if the part is a name
06134                 | ' 
06134                 | ' function isname(s as string) as boolean
06134                 | _isname
06134     0D 4A 05 F6 | 	mov	COUNT_, #13
06138     A8 00 A0 FD | 	call	#pushregs_
0613c     09 27 02 F6 | 	mov	local01, arg01
06140     09 29 02 F6 | 	mov	local02, arg01
06144     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
06148                 | LR__0500
06148     14 FB C9 FA | 	rdbyte	result1, local02 wz
0614c     01 28 06 51 |  if_ne	add	local02, #1
06150     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
06154                 | LR__0501
06154     09 29 82 F1 | 	sub	local02, arg01
06158     14 FB 01 F6 | 	mov	result1, local02
0615c     FD 2A 0A F6 | 	mov	local03, result1 wz
06160     00 FA 05 A6 |  if_e	mov	result1, #0
06164     34 02 90 AD |  if_e	jmp	#LR__0513
06168     13 13 02 F6 | 	mov	arg01, local01
0616c     01 14 06 F6 | 	mov	arg02, #1
06170     01 16 06 F6 | 	mov	arg03, #1
06174     30 FF B1 FD | 	call	#__system__Mid_S
06178     FD 2C 02 F6 | 	mov	local04, result1
0617c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0617c     A0 01 00 FF 
06180     1D 14 06 F6 | 	mov	arg02, ##@LR__5591
06184     16 13 02 F6 | 	mov	arg01, local04
06188     B0 DD B1 FD | 	call	#__system___string_cmp
0618c     00 FA 55 F2 | 	cmps	result1, #0 wc
06190     18 00 90 CD |  if_b	jmp	#LR__0502
06194     A0 01 00 FF 
06198     1F 14 06 F6 | 	mov	arg02, ##@LR__5592
0619c     16 13 02 F6 | 	mov	arg01, local04
061a0     98 DD B1 FD | 	call	#__system___string_cmp
061a4     01 FA 55 F2 | 	cmps	result1, #1 wc
061a8     1C 00 90 CD |  if_b	jmp	#LR__0503
061ac                 | LR__0502
061ac     A0 01 00 FF 
061b0     21 14 06 F6 | 	mov	arg02, ##@LR__5593
061b4     16 13 02 F6 | 	mov	arg01, local04
061b8     80 DD B1 FD | 	call	#__system___string_cmp
061bc     00 FA 0D F2 | 	cmp	result1, #0 wz
061c0     00 FA 05 56 |  if_ne	mov	result1, #0
061c4     D4 01 90 5D |  if_ne	jmp	#LR__0513
061c8                 | LR__0503
061c8                 | ' if l>2 then 
061c8     03 2A 56 F2 | 	cmps	local03, #3 wc
061cc     C8 01 90 CD |  if_b	jmp	#LR__0512
061d0                 | '   for i=2 to l
061d0     02 2E 06 F6 | 	mov	local05, #2
061d4     15 31 02 F6 | 	mov	local06, local03
061d8     01 30 06 F1 | 	add	local06, #1
061dc                 | LR__0504
061dc     18 2F 52 F2 | 	cmps	local05, local06 wc
061e0     B4 01 90 3D |  if_ae	jmp	#LR__0511
061e4     13 13 02 F6 | 	mov	arg01, local01
061e8     17 15 02 F6 | 	mov	arg02, local05
061ec     01 16 06 F6 | 	mov	arg03, #1
061f0     B4 FE B1 FD | 	call	#__system__Mid_S
061f4     FD 2C 02 F6 | 	mov	local04, result1
061f8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
061f8     15 2F 52 F2 | 	cmps	local05, local03 wc
061fc     9C 00 90 3D |  if_ae	jmp	#LR__0507
06200     A0 01 00 FF 
06204     23 14 06 F6 | 	mov	arg02, ##@LR__5594
06208     16 13 02 F6 | 	mov	arg01, local04
0620c     2C DD B1 FD | 	call	#__system___string_cmp
06210     00 FA 55 F2 | 	cmps	result1, #0 wc
06214     18 00 90 CD |  if_b	jmp	#LR__0505
06218     A0 01 00 FF 
0621c     25 14 06 F6 | 	mov	arg02, ##@LR__5595
06220     16 13 02 F6 | 	mov	arg01, local04
06224     14 DD B1 FD | 	call	#__system___string_cmp
06228     01 FA 55 F2 | 	cmps	result1, #1 wc
0622c     6C 00 90 CD |  if_b	jmp	#LR__0507
06230                 | LR__0505
06230     A0 01 00 FF 
06234     27 14 06 F6 | 	mov	arg02, ##@LR__5596
06238     16 13 02 F6 | 	mov	arg01, local04
0623c     FC DC B1 FD | 	call	#__system___string_cmp
06240     00 FA 55 F2 | 	cmps	result1, #0 wc
06244     18 00 90 CD |  if_b	jmp	#LR__0506
06248     A0 01 00 FF 
0624c     29 14 06 F6 | 	mov	arg02, ##@LR__5597
06250     16 13 02 F6 | 	mov	arg01, local04
06254     E4 DC B1 FD | 	call	#__system___string_cmp
06258     01 FA 55 F2 | 	cmps	result1, #1 wc
0625c     3C 00 90 CD |  if_b	jmp	#LR__0507
06260                 | LR__0506
06260     A0 01 00 FF 
06264     2B 32 06 F6 | 	mov	local07, ##@LR__5598
06268     16 13 02 F6 | 	mov	arg01, local04
0626c     19 15 02 F6 | 	mov	arg02, local07
06270     C8 DC B1 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     20 00 90 AD |  if_e	jmp	#LR__0507
0627c     A0 01 00 FF 
06280     2D 34 06 F6 | 	mov	local08, ##@LR__5599
06284     16 13 02 F6 | 	mov	arg01, local04
06288     1A 15 02 F6 | 	mov	arg02, local08
0628c     AC DC B1 FD | 	call	#__system___string_cmp
06290     FD 36 0A F6 | 	mov	local09, result1 wz
06294     00 FA 05 56 |  if_ne	mov	result1, #0
06298     00 01 90 5D |  if_ne	jmp	#LR__0513
0629c                 | LR__0507
0629c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0629c     15 2F 0A F2 | 	cmp	local05, local03 wz
062a0     EC 00 90 5D |  if_ne	jmp	#LR__0510
062a4     A0 01 00 FF 
062a8     2F 38 06 F6 | 	mov	local10, ##@LR__5600
062ac     16 13 02 F6 | 	mov	arg01, local04
062b0     1C 15 02 F6 | 	mov	arg02, local10
062b4     84 DC B1 FD | 	call	#__system___string_cmp
062b8     FD 3A 02 F6 | 	mov	local11, result1
062bc     00 3A 56 F2 | 	cmps	local11, #0 wc
062c0     1C 00 90 CD |  if_b	jmp	#LR__0508
062c4     A0 01 00 FF 
062c8     31 14 06 F6 | 	mov	arg02, ##@LR__5601
062cc     16 13 02 F6 | 	mov	arg01, local04
062d0     68 DC B1 FD | 	call	#__system___string_cmp
062d4     FD 38 02 F6 | 	mov	local10, result1
062d8     01 38 56 F2 | 	cmps	local10, #1 wc
062dc     B0 00 90 CD |  if_b	jmp	#LR__0510
062e0                 | LR__0508
062e0     A0 01 00 FF 
062e4     33 14 06 F6 | 	mov	arg02, ##@LR__5602
062e8     16 13 02 F6 | 	mov	arg01, local04
062ec     4C DC B1 FD | 	call	#__system___string_cmp
062f0     00 FA 55 F2 | 	cmps	result1, #0 wc
062f4     1C 00 90 CD |  if_b	jmp	#LR__0509
062f8     A0 01 00 FF 
062fc     35 36 06 F6 | 	mov	local09, ##@LR__5603
06300     16 13 02 F6 | 	mov	arg01, local04
06304     1B 15 02 F6 | 	mov	arg02, local09
06308     30 DC B1 FD | 	call	#__system___string_cmp
0630c     01 FA 55 F2 | 	cmps	result1, #1 wc
06310     7C 00 90 CD |  if_b	jmp	#LR__0510
06314                 | LR__0509
06314     A0 01 00 FF 
06318     37 36 06 F6 | 	mov	local09, ##@LR__5604
0631c     16 13 02 F6 | 	mov	arg01, local04
06320     1B 15 02 F6 | 	mov	arg02, local09
06324     14 DC B1 FD | 	call	#__system___string_cmp
06328     00 FA 4D F2 | 	cmps	result1, #0 wz
0632c     60 00 90 AD |  if_e	jmp	#LR__0510
06330     A0 01 00 FF 
06334     39 34 06 F6 | 	mov	local08, ##@LR__5605
06338     16 13 02 F6 | 	mov	arg01, local04
0633c     1A 15 02 F6 | 	mov	arg02, local08
06340     F8 DB B1 FD | 	call	#__system___string_cmp
06344     FD 36 0A F6 | 	mov	local09, result1 wz
06348     44 00 90 AD |  if_e	jmp	#LR__0510
0634c     A0 01 00 FF 
06350     3B 3C 06 F6 | 	mov	local12, ##@LR__5606
06354     1E 35 02 F6 | 	mov	local08, local12
06358     16 13 02 F6 | 	mov	arg01, local04
0635c     1A 15 02 F6 | 	mov	arg02, local08
06360     D8 DB B1 FD | 	call	#__system___string_cmp
06364     FD 32 0A F6 | 	mov	local07, result1 wz
06368     24 00 90 AD |  if_e	jmp	#LR__0510
0636c     A0 01 00 FF 
06370     3D 3E 06 F6 | 	mov	local13, ##@LR__5607
06374     1F 3D 02 F6 | 	mov	local12, local13
06378     16 13 02 F6 | 	mov	arg01, local04
0637c     1E 15 02 F6 | 	mov	arg02, local12
06380     B8 DB B1 FD | 	call	#__system___string_cmp
06384     FD 34 0A F6 | 	mov	local08, result1 wz
06388     00 FA 05 56 |  if_ne	mov	result1, #0
0638c     0C 00 90 5D |  if_ne	jmp	#LR__0513
06390                 | LR__0510
06390     01 2E 06 F1 | 	add	local05, #1
06394     44 FE 9F FD | 	jmp	#LR__0504
06398                 | LR__0511
06398                 | LR__0512
06398                 | ' return true
06398     01 FA 65 F6 | 	neg	result1, #1
0639c                 | LR__0513
0639c     A7 F0 03 F6 | 	mov	ptra, fp
063a0     B2 00 A0 FD | 	call	#popregs_
063a4                 | _isname_ret
063a4     2D 00 64 FD | 	ret
063a8                 | 
063a8                 | ' 
063a8                 | ' ' Check if the part is a number.  
063a8                 | ' 
063a8                 | ' function isnum(s as string) as boolean 
063a8                 | _isnum
063a8     13 4A 05 F6 | 	mov	COUNT_, #19
063ac     A8 00 A0 FD | 	call	#pushregs_
063b0     09 27 02 F6 | 	mov	local01, arg01
063b4     00 28 06 F6 | 	mov	local02, #0
063b8     00 2A 06 F6 | 	mov	local03, #0
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     09 2D 02 F6 | 	mov	local04, arg01
063c4     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
063c8                 | LR__0520
063c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
063cc     01 2C 06 51 |  if_ne	add	local04, #1
063d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
063d4                 | LR__0521
063d4     09 2D 82 F1 | 	sub	local04, arg01
063d8     16 FB 01 F6 | 	mov	result1, local04
063dc     FD 2E 0A F6 | 	mov	local05, result1 wz
063e0     00 FA 05 A6 |  if_e	mov	result1, #0
063e4     A0 03 90 AD |  if_e	jmp	#LR__0536
063e8     13 13 02 F6 | 	mov	arg01, local01
063ec     01 14 06 F6 | 	mov	arg02, #1
063f0     01 16 06 F6 | 	mov	arg03, #1
063f4     B0 FC B1 FD | 	call	#__system__Mid_S
063f8     FD 30 02 F6 | 	mov	local06, result1
063fc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
063fc     A0 01 00 FF 
06400     3F 14 06 F6 | 	mov	arg02, ##@LR__5608
06404     18 13 02 F6 | 	mov	arg01, local06
06408     30 DB B1 FD | 	call	#__system___string_cmp
0640c     00 FA 55 F2 | 	cmps	result1, #0 wc
06410     1C 00 90 CD |  if_b	jmp	#LR__0522
06414     A0 01 00 FF 
06418     41 32 06 F6 | 	mov	local07, ##@LR__5609
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     19 15 02 F6 | 	mov	arg02, local07
06424     14 DB B1 FD | 	call	#__system___string_cmp
06428     01 FA 55 F2 | 	cmps	result1, #1 wc
0642c     84 00 90 CD |  if_b	jmp	#LR__0523
06430                 | LR__0522
06430     A0 01 00 FF 
06434     43 34 06 F6 | 	mov	local08, ##@LR__5610
06438     1A 33 02 F6 | 	mov	local07, local08
0643c     18 13 02 F6 | 	mov	arg01, local06
06440     19 15 02 F6 | 	mov	arg02, local07
06444     F4 DA B1 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     64 00 90 AD |  if_e	jmp	#LR__0523
06450     A0 01 00 FF 
06454     45 36 06 F6 | 	mov	local09, ##@LR__5611
06458     1B 35 02 F6 | 	mov	local08, local09
0645c     18 13 02 F6 | 	mov	arg01, local06
06460     1A 15 02 F6 | 	mov	arg02, local08
06464     D4 DA B1 FD | 	call	#__system___string_cmp
06468     FD 32 0A F6 | 	mov	local07, result1 wz
0646c     44 00 90 AD |  if_e	jmp	#LR__0523
06470     A0 01 00 FF 
06474     47 38 06 F6 | 	mov	local10, ##@LR__5612
06478     1C 37 02 F6 | 	mov	local09, local10
0647c     18 13 02 F6 | 	mov	arg01, local06
06480     1B 15 02 F6 | 	mov	arg02, local09
06484     B4 DA B1 FD | 	call	#__system___string_cmp
06488     FD 34 0A F6 | 	mov	local08, result1 wz
0648c     24 00 90 AD |  if_e	jmp	#LR__0523
06490     A0 01 00 FF 
06494     49 3A 06 F6 | 	mov	local11, ##@LR__5613
06498     1D 39 02 F6 | 	mov	local10, local11
0649c     18 13 02 F6 | 	mov	arg01, local06
064a0     1C 15 02 F6 | 	mov	arg02, local10
064a4     94 DA B1 FD | 	call	#__system___string_cmp
064a8     FD 36 0A F6 | 	mov	local09, result1 wz
064ac     00 FA 05 56 |  if_ne	mov	result1, #0
064b0     D4 02 90 5D |  if_ne	jmp	#LR__0536
064b4                 | LR__0523
064b4                 | ' if m$="." then ds=1
064b4     A0 01 00 FF 
064b8     4B 14 06 F6 | 	mov	arg02, ##@LR__5614
064bc     18 13 02 F6 | 	mov	arg01, local06
064c0     78 DA B1 FD | 	call	#__system___string_cmp
064c4     00 FA 0D F2 | 	cmp	result1, #0 wz
064c8     01 28 06 A6 |  if_e	mov	local02, #1
064cc                 | ' if m$="$" then hex=1 else hex=0
064cc     A0 01 00 FF 
064d0     4D 14 06 F6 | 	mov	arg02, ##@LR__5615
064d4     18 13 02 F6 | 	mov	arg01, local06
064d8     60 DA B1 FD | 	call	#__system___string_cmp
064dc     00 FA 0D F2 | 	cmp	result1, #0 wz
064e0     01 3C 06 A6 |  if_e	mov	local12, #1
064e4     00 3C 06 56 |  if_ne	mov	local12, #0
064e8                 | ' if m$="%" then bin=1 else bin=0
064e8     A0 01 00 FF 
064ec     4F 14 06 F6 | 	mov	arg02, ##@LR__5616
064f0     18 13 02 F6 | 	mov	arg01, local06
064f4     44 DA B1 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     01 3E 06 A6 |  if_e	mov	local13, #1
06500     00 3E 06 56 |  if_ne	mov	local13, #0
06504                 | ' if l>1 then 
06504     02 2E 56 F2 | 	cmps	local05, #2 wc
06508     78 02 90 CD |  if_b	jmp	#LR__0535
0650c                 | '   for i=2 to l
0650c     02 40 06 F6 | 	mov	local14, #2
06510     17 43 02 F6 | 	mov	local15, local05
06514     01 42 06 F1 | 	add	local15, #1
06518                 | LR__0524
06518     21 41 52 F2 | 	cmps	local14, local15 wc
0651c     64 02 90 3D |  if_ae	jmp	#LR__0534
06520     13 13 02 F6 | 	mov	arg01, local01
06524     20 15 02 F6 | 	mov	arg02, local14
06528     01 16 06 F6 | 	mov	arg03, #1
0652c     78 FB B1 FD | 	call	#__system__Mid_S
06530     FD 30 02 F6 | 	mov	local06, result1
06534     00 44 06 F6 | 	mov	local16, #0
06538                 | '     m$=mid$(s,i,1) : b=false
06538                 | '     if m$>="0" andalso m$<="9" then b=true  
06538     A0 01 00 FF 
0653c     51 14 06 F6 | 	mov	arg02, ##@LR__5617
06540     18 13 02 F6 | 	mov	arg01, local06
06544     F4 D9 B1 FD | 	call	#__system___string_cmp
06548     00 FA 55 F2 | 	cmps	result1, #0 wc
0654c     1C 00 90 CD |  if_b	jmp	#LR__0525
06550     A0 01 00 FF 
06554     53 32 06 F6 | 	mov	local07, ##@LR__5618
06558     18 13 02 F6 | 	mov	arg01, local06
0655c     19 15 02 F6 | 	mov	arg02, local07
06560     D8 D9 B1 FD | 	call	#__system___string_cmp
06564     01 FA 55 F2 | 	cmps	result1, #1 wc
06568     01 44 66 C6 |  if_b	neg	local16, #1
0656c                 | LR__0525
0656c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0656c     A0 01 00 FF 
06570     55 14 06 F6 | 	mov	arg02, ##@LR__5619
06574     18 13 02 F6 | 	mov	arg01, local06
06578     C0 D9 B1 FD | 	call	#__system___string_cmp
0657c     00 FA 0D F2 | 	cmp	result1, #0 wz
06580     7C 00 90 AD |  if_e	jmp	#LR__0526
06584     A0 01 00 FF 
06588     57 32 06 F6 | 	mov	local07, ##@LR__5620
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     19 15 02 F6 | 	mov	arg02, local07
06594     A4 D9 B1 FD | 	call	#__system___string_cmp
06598     00 FA 0D F2 | 	cmp	result1, #0 wz
0659c     60 00 90 AD |  if_e	jmp	#LR__0526
065a0     A0 01 00 FF 
065a4     59 34 06 F6 | 	mov	local08, ##@LR__5621
065a8     1A 33 02 F6 | 	mov	local07, local08
065ac     18 13 02 F6 | 	mov	arg01, local06
065b0     19 15 02 F6 | 	mov	arg02, local07
065b4     84 D9 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     40 00 90 AD |  if_e	jmp	#LR__0526
065c0     A0 01 00 FF 
065c4     5B 36 06 F6 | 	mov	local09, ##@LR__5622
065c8     1B 35 02 F6 | 	mov	local08, local09
065cc     18 13 02 F6 | 	mov	arg01, local06
065d0     1A 15 02 F6 | 	mov	arg02, local08
065d4     64 D9 B1 FD | 	call	#__system___string_cmp
065d8     FD 32 0A F6 | 	mov	local07, result1 wz
065dc     20 00 90 AD |  if_e	jmp	#LR__0526
065e0     A0 01 00 FF 
065e4     5D 38 06 F6 | 	mov	local10, ##@LR__5623
065e8     1C 37 02 F6 | 	mov	local09, local10
065ec     18 13 02 F6 | 	mov	arg01, local06
065f0     1B 15 02 F6 | 	mov	arg02, local09
065f4     44 D9 B1 FD | 	call	#__system___string_cmp
065f8     FD 34 0A F6 | 	mov	local08, result1 wz
065fc     04 00 90 5D |  if_ne	jmp	#LR__0527
06600                 | LR__0526
06600     01 44 66 F6 | 	neg	local16, #1
06604                 | LR__0527
06604                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06604     01 3C 0E F2 | 	cmp	local12, #1 wz
06608     34 00 90 5D |  if_ne	jmp	#LR__0528
0660c     A0 01 00 FF 
06610     5F 14 06 F6 | 	mov	arg02, ##@LR__5624
06614     18 13 02 F6 | 	mov	arg01, local06
06618     20 D9 B1 FD | 	call	#__system___string_cmp
0661c     00 FA 55 F2 | 	cmps	result1, #0 wc
06620     1C 00 90 CD |  if_b	jmp	#LR__0528
06624     A0 01 00 FF 
06628     61 32 06 F6 | 	mov	local07, ##@LR__5625
0662c     18 13 02 F6 | 	mov	arg01, local06
06630     19 15 02 F6 | 	mov	arg02, local07
06634     04 D9 B1 FD | 	call	#__system___string_cmp
06638     01 FA 55 F2 | 	cmps	result1, #1 wc
0663c     01 44 66 C6 |  if_b	neg	local16, #1
06640                 | LR__0528
06640                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06640     01 3E 0E F2 | 	cmp	local13, #1 wz
06644     58 00 90 5D |  if_ne	jmp	#LR__0530
06648     A0 01 00 FF 
0664c     63 14 06 F6 | 	mov	arg02, ##@LR__5626
06650     18 13 02 F6 | 	mov	arg01, local06
06654     E4 D8 B1 FD | 	call	#__system___string_cmp
06658     00 FA 55 F2 | 	cmps	result1, #0 wc
0665c     1C 00 90 CD |  if_b	jmp	#LR__0529
06660     A0 01 00 FF 
06664     65 32 06 F6 | 	mov	local07, ##@LR__5627
06668     18 13 02 F6 | 	mov	arg01, local06
0666c     19 15 02 F6 | 	mov	arg02, local07
06670     C8 D8 B1 FD | 	call	#__system___string_cmp
06674     01 FA 55 F2 | 	cmps	result1, #1 wc
06678     24 00 90 CD |  if_b	jmp	#LR__0530
0667c                 | LR__0529
0667c     A0 01 00 FF 
06680     67 34 06 F6 | 	mov	local08, ##@LR__5628
06684     1A 33 02 F6 | 	mov	local07, local08
06688     18 13 02 F6 | 	mov	arg01, local06
0668c     19 15 02 F6 | 	mov	arg02, local07
06690     A8 D8 B1 FD | 	call	#__system___string_cmp
06694     00 FA 0D F2 | 	cmp	result1, #0 wz
06698     00 FA 05 56 |  if_ne	mov	result1, #0
0669c     E8 00 90 5D |  if_ne	jmp	#LR__0536
066a0                 | LR__0530
066a0                 | '     if not b then return false
066a0     22 45 22 F6 | 	not	local16, local16
066a4     00 44 0E F2 | 	cmp	local16, #0 wz
066a8     00 FA 05 56 |  if_ne	mov	result1, #0
066ac     D8 00 90 5D |  if_ne	jmp	#LR__0536
066b0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
066b0     A0 01 00 FF 
066b4     69 14 06 F6 | 	mov	arg02, ##@LR__5629
066b8     18 13 02 F6 | 	mov	arg01, local06
066bc     7C D8 B1 FD | 	call	#__system___string_cmp
066c0     00 FA 0D F2 | 	cmp	result1, #0 wz
066c4     3C 00 90 5D |  if_ne	jmp	#LR__0531
066c8     20 15 02 F6 | 	mov	arg02, local14
066cc     01 14 86 F1 | 	sub	arg02, #1
066d0     13 13 02 F6 | 	mov	arg01, local01
066d4     01 16 06 F6 | 	mov	arg03, #1
066d8     CC F9 B1 FD | 	call	#__system__Mid_S
066dc     FD 12 02 F6 | 	mov	arg01, result1
066e0     BC FB B1 FD | 	call	#__system__LCase_S
066e4     FD 12 02 F6 | 	mov	arg01, result1
066e8     A0 01 00 FF 
066ec     6B 32 06 F6 | 	mov	local07, ##@LR__5630
066f0     19 15 02 F6 | 	mov	arg02, local07
066f4     44 D8 B1 FD | 	call	#__system___string_cmp
066f8     00 FA 0D F2 | 	cmp	result1, #0 wz
066fc     00 FA 05 56 |  if_ne	mov	result1, #0
06700     84 00 90 5D |  if_ne	jmp	#LR__0536
06704                 | LR__0531
06704                 | '     if m$="." then ds+=1: if ds>1 then return false
06704     A0 01 00 FF 
06708     6D 14 06 F6 | 	mov	arg02, ##@LR__5631
0670c     18 13 02 F6 | 	mov	arg01, local06
06710     28 D8 B1 FD | 	call	#__system___string_cmp
06714     00 FA 0D F2 | 	cmp	result1, #0 wz
06718     01 28 06 A1 |  if_e	add	local02, #1
0671c     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06720     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06724     60 00 90 2D |  if_nc_and_z	jmp	#LR__0536
06728                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06728     A0 01 00 FF 
0672c     6F 46 06 F6 | 	mov	local17, ##@LR__5632
06730     23 49 02 F6 | 	mov	local18, local17
06734     18 13 02 F6 | 	mov	arg01, local06
06738     24 15 02 F6 | 	mov	arg02, local18
0673c     FC D7 B1 FD | 	call	#__system___string_cmp
06740     FD 4A 0A F6 | 	mov	local19, result1 wz
06744     20 00 90 AD |  if_e	jmp	#LR__0532
06748     A0 01 00 FF 
0674c     71 32 06 F6 | 	mov	local07, ##@LR__5633
06750     19 47 02 F6 | 	mov	local17, local07
06754     18 13 02 F6 | 	mov	arg01, local06
06758     23 15 02 F6 | 	mov	arg02, local17
0675c     DC D7 B1 FD | 	call	#__system___string_cmp
06760     FD 48 0A F6 | 	mov	local18, result1 wz
06764     14 00 90 5D |  if_ne	jmp	#LR__0533
06768                 | LR__0532
06768     01 2A 06 F1 | 	add	local03, #1
0676c     00 3C 0E F2 | 	cmp	local12, #0 wz
06770     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06774     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06778     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0536
0677c                 | LR__0533
0677c     01 40 06 F1 | 	add	local14, #1
06780     94 FD 9F FD | 	jmp	#LR__0524
06784                 | LR__0534
06784                 | LR__0535
06784                 | ' return true
06784     01 FA 65 F6 | 	neg	result1, #1
06788                 | LR__0536
06788     A7 F0 03 F6 | 	mov	ptra, fp
0678c     B2 00 A0 FD | 	call	#popregs_
06790                 | _isnum_ret
06790     2D 00 64 FD | 	ret
06794                 | 
06794                 | '   
06794                 | ' ' Check if the part is an integer number.    
06794                 | '   
06794                 | ' function isint(s as string) as boolean
06794                 | _isint
06794     0E 4A 05 F6 | 	mov	COUNT_, #14
06798     A8 00 A0 FD | 	call	#pushregs_
0679c     09 27 02 F6 | 	mov	local01, arg01
067a0     09 29 02 F6 | 	mov	local02, arg01
067a4     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
067a8                 | LR__0540
067a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
067ac     01 28 06 51 |  if_ne	add	local02, #1
067b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
067b4                 | LR__0541
067b4     09 29 82 F1 | 	sub	local02, arg01
067b8     14 FB 01 F6 | 	mov	result1, local02
067bc     FD 2A 0A F6 | 	mov	local03, result1 wz
067c0     00 FA 05 A6 |  if_e	mov	result1, #0
067c4     64 02 90 AD |  if_e	jmp	#LR__0554
067c8     13 13 02 F6 | 	mov	arg01, local01
067cc     01 14 06 F6 | 	mov	arg02, #1
067d0     01 16 06 F6 | 	mov	arg03, #1
067d4     D0 F8 B1 FD | 	call	#__system__Mid_S
067d8     FD 2C 02 F6 | 	mov	local04, result1
067dc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
067dc     A0 01 00 FF 
067e0     73 14 06 F6 | 	mov	arg02, ##@LR__5634
067e4     16 13 02 F6 | 	mov	arg01, local04
067e8     50 D7 B1 FD | 	call	#__system___string_cmp
067ec     00 FA 55 F2 | 	cmps	result1, #0 wc
067f0     1C 00 90 CD |  if_b	jmp	#LR__0542
067f4     A0 01 00 FF 
067f8     75 2E 06 F6 | 	mov	local05, ##@LR__5635
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     17 15 02 F6 | 	mov	arg02, local05
06804     34 D7 B1 FD | 	call	#__system___string_cmp
06808     01 FA 55 F2 | 	cmps	result1, #1 wc
0680c     64 00 90 CD |  if_b	jmp	#LR__0543
06810                 | LR__0542
06810     A0 01 00 FF 
06814     77 30 06 F6 | 	mov	local06, ##@LR__5636
06818     18 2F 02 F6 | 	mov	local05, local06
0681c     16 13 02 F6 | 	mov	arg01, local04
06820     17 15 02 F6 | 	mov	arg02, local05
06824     14 D7 B1 FD | 	call	#__system___string_cmp
06828     00 FA 0D F2 | 	cmp	result1, #0 wz
0682c     44 00 90 AD |  if_e	jmp	#LR__0543
06830     A0 01 00 FF 
06834     79 32 06 F6 | 	mov	local07, ##@LR__5637
06838     19 31 02 F6 | 	mov	local06, local07
0683c     16 13 02 F6 | 	mov	arg01, local04
06840     18 15 02 F6 | 	mov	arg02, local06
06844     F4 D6 B1 FD | 	call	#__system___string_cmp
06848     FD 2E 0A F6 | 	mov	local05, result1 wz
0684c     24 00 90 AD |  if_e	jmp	#LR__0543
06850     A0 01 00 FF 
06854     7B 34 06 F6 | 	mov	local08, ##@LR__5638
06858     1A 33 02 F6 | 	mov	local07, local08
0685c     16 13 02 F6 | 	mov	arg01, local04
06860     19 15 02 F6 | 	mov	arg02, local07
06864     D4 D6 B1 FD | 	call	#__system___string_cmp
06868     FD 30 0A F6 | 	mov	local06, result1 wz
0686c     00 FA 05 56 |  if_ne	mov	result1, #0
06870     B8 01 90 5D |  if_ne	jmp	#LR__0554
06874                 | LR__0543
06874                 | ' if m$="$" then hex=1 else hex=0
06874     A0 01 00 FF 
06878     7D 14 06 F6 | 	mov	arg02, ##@LR__5639
0687c     16 13 02 F6 | 	mov	arg01, local04
06880     B8 D6 B1 FD | 	call	#__system___string_cmp
06884     00 FA 0D F2 | 	cmp	result1, #0 wz
06888     01 36 06 A6 |  if_e	mov	local09, #1
0688c     00 36 06 56 |  if_ne	mov	local09, #0
06890                 | ' if m$="%" then bin=1 else bin=0
06890     A0 01 00 FF 
06894     7F 14 06 F6 | 	mov	arg02, ##@LR__5640
06898     16 13 02 F6 | 	mov	arg01, local04
0689c     9C D6 B1 FD | 	call	#__system___string_cmp
068a0     00 FA 0D F2 | 	cmp	result1, #0 wz
068a4     01 38 06 A6 |  if_e	mov	local10, #1
068a8     00 38 06 56 |  if_ne	mov	local10, #0
068ac                 | ' if l>1 then 
068ac     02 2A 56 F2 | 	cmps	local03, #2 wc
068b0     74 01 90 CD |  if_b	jmp	#LR__0553
068b4                 | '   for i=2 to l
068b4     02 3A 06 F6 | 	mov	local11, #2
068b8     15 3D 02 F6 | 	mov	local12, local03
068bc     01 3C 06 F1 | 	add	local12, #1
068c0                 | LR__0544
068c0     1E 3B 52 F2 | 	cmps	local11, local12 wc
068c4     60 01 90 3D |  if_ae	jmp	#LR__0552
068c8     13 13 02 F6 | 	mov	arg01, local01
068cc     1D 15 02 F6 | 	mov	arg02, local11
068d0     01 16 06 F6 | 	mov	arg03, #1
068d4     D0 F7 B1 FD | 	call	#__system__Mid_S
068d8     FD 2C 02 F6 | 	mov	local04, result1
068dc                 | '     m$=mid$(s,i,1) 
068dc                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
068dc     00 36 0E F2 | 	cmp	local09, #0 wz
068e0     50 00 90 5D |  if_ne	jmp	#LR__0546
068e4     A0 01 00 FF 
068e8     81 14 06 F6 | 	mov	arg02, ##@LR__5641
068ec     16 13 02 F6 | 	mov	arg01, local04
068f0     48 D6 B1 FD | 	call	#__system___string_cmp
068f4     00 FA 55 F2 | 	cmps	result1, #0 wc
068f8     18 00 90 CD |  if_b	jmp	#LR__0545
068fc     A0 01 00 FF 
06900     83 14 06 F6 | 	mov	arg02, ##@LR__5642
06904     16 13 02 F6 | 	mov	arg01, local04
06908     30 D6 B1 FD | 	call	#__system___string_cmp
0690c     01 FA 55 F2 | 	cmps	result1, #1 wc
06910     20 00 90 CD |  if_b	jmp	#LR__0546
06914                 | LR__0545
06914     A0 01 00 FF 
06918     85 30 06 F6 | 	mov	local06, ##@LR__5643
0691c     16 13 02 F6 | 	mov	arg01, local04
06920     18 15 02 F6 | 	mov	arg02, local06
06924     14 D6 B1 FD | 	call	#__system___string_cmp
06928     00 FA 0D F2 | 	cmp	result1, #0 wz
0692c     00 FA 05 56 |  if_ne	mov	result1, #0
06930     F8 00 90 5D |  if_ne	jmp	#LR__0554
06934                 | LR__0546
06934                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06934     01 36 0E F2 | 	cmp	local09, #1 wz
06938     90 00 90 5D |  if_ne	jmp	#LR__0549
0693c     A0 01 00 FF 
06940     87 14 06 F6 | 	mov	arg02, ##@LR__5644
06944     16 13 02 F6 | 	mov	arg01, local04
06948     F0 D5 B1 FD | 	call	#__system___string_cmp
0694c     00 FA 55 F2 | 	cmps	result1, #0 wc
06950     1C 00 90 CD |  if_b	jmp	#LR__0547
06954     A0 01 00 FF 
06958     89 14 06 F6 | 	mov	arg02, ##@LR__5645
0695c     16 13 02 F6 | 	mov	arg01, local04
06960     D8 D5 B1 FD | 	call	#__system___string_cmp
06964     FD 3E 02 F6 | 	mov	local13, result1
06968     01 3E 56 F2 | 	cmps	local13, #1 wc
0696c     5C 00 90 CD |  if_b	jmp	#LR__0549
06970                 | LR__0547
06970     A0 01 00 FF 
06974     8B 2E 06 F6 | 	mov	local05, ##@LR__5646
06978     16 13 02 F6 | 	mov	arg01, local04
0697c     17 15 02 F6 | 	mov	arg02, local05
06980     B8 D5 B1 FD | 	call	#__system___string_cmp
06984     FD 40 02 F6 | 	mov	local14, result1
06988     00 40 56 F2 | 	cmps	local14, #0 wc
0698c     1C 00 90 CD |  if_b	jmp	#LR__0548
06990     A0 01 00 FF 
06994     8D 32 06 F6 | 	mov	local07, ##@LR__5647
06998     16 13 02 F6 | 	mov	arg01, local04
0699c     19 15 02 F6 | 	mov	arg02, local07
069a0     98 D5 B1 FD | 	call	#__system___string_cmp
069a4     01 FA 55 F2 | 	cmps	result1, #1 wc
069a8     20 00 90 CD |  if_b	jmp	#LR__0549
069ac                 | LR__0548
069ac     A0 01 00 FF 
069b0     8F 34 06 F6 | 	mov	local08, ##@LR__5648
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     1A 15 02 F6 | 	mov	arg02, local08
069bc     7C D5 B1 FD | 	call	#__system___string_cmp
069c0     00 FA 0D F2 | 	cmp	result1, #0 wz
069c4     00 FA 05 56 |  if_ne	mov	result1, #0
069c8     60 00 90 5D |  if_ne	jmp	#LR__0554
069cc                 | LR__0549
069cc                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
069cc     01 38 0E F2 | 	cmp	local10, #1 wz
069d0     4C 00 90 5D |  if_ne	jmp	#LR__0551
069d4     A0 01 00 FF 
069d8     91 14 06 F6 | 	mov	arg02, ##@LR__5649
069dc     16 13 02 F6 | 	mov	arg01, local04
069e0     58 D5 B1 FD | 	call	#__system___string_cmp
069e4     00 FA 55 F2 | 	cmps	result1, #0 wc
069e8     18 00 90 CD |  if_b	jmp	#LR__0550
069ec     A0 01 00 FF 
069f0     93 14 06 F6 | 	mov	arg02, ##@LR__5650
069f4     16 13 02 F6 | 	mov	arg01, local04
069f8     40 D5 B1 FD | 	call	#__system___string_cmp
069fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06a00     1C 00 90 CD |  if_b	jmp	#LR__0551
06a04                 | LR__0550
06a04     A0 01 00 FF 
06a08     95 14 06 F6 | 	mov	arg02, ##@LR__5651
06a0c     16 13 02 F6 | 	mov	arg01, local04
06a10     28 D5 B1 FD | 	call	#__system___string_cmp
06a14     00 FA 0D F2 | 	cmp	result1, #0 wz
06a18     00 FA 05 56 |  if_ne	mov	result1, #0
06a1c     0C 00 90 5D |  if_ne	jmp	#LR__0554
06a20                 | LR__0551
06a20     01 3A 06 F1 | 	add	local11, #1
06a24     98 FE 9F FD | 	jmp	#LR__0544
06a28                 | LR__0552
06a28                 | LR__0553
06a28                 | ' return true
06a28     01 FA 65 F6 | 	neg	result1, #1
06a2c                 | LR__0554
06a2c     A7 F0 03 F6 | 	mov	ptra, fp
06a30     B2 00 A0 FD | 	call	#popregs_
06a34                 | _isint_ret
06a34     2D 00 64 FD | 	ret
06a38                 | 
06a38                 | ' 
06a38                 | ' ' Check if the part is a positive decimal number.  
06a38                 | ' 
06a38                 | ' function isdec(s as string) as boolean
06a38                 | _isdec
06a38     05 4A 05 F6 | 	mov	COUNT_, #5
06a3c     A8 00 A0 FD | 	call	#pushregs_
06a40     09 27 02 F6 | 	mov	local01, arg01
06a44     09 29 02 F6 | 	mov	local02, arg01
06a48     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06a4c                 | LR__0560
06a4c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06a50     01 28 06 51 |  if_ne	add	local02, #1
06a54     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06a58                 | LR__0561
06a58     09 29 82 F1 | 	sub	local02, arg01
06a5c     14 FB 01 F6 | 	mov	result1, local02
06a60     FD 28 0A F6 | 	mov	local02, result1 wz
06a64     00 FA 05 A6 |  if_e	mov	result1, #0
06a68     80 00 90 AD |  if_e	jmp	#LR__0566
06a6c                 | ' for i=1 to l
06a6c     01 2A 06 F6 | 	mov	local03, #1
06a70     14 2D 02 F6 | 	mov	local04, local02
06a74     01 2C 06 F1 | 	add	local04, #1
06a78                 | LR__0562
06a78     16 2B 52 F2 | 	cmps	local03, local04 wc
06a7c     68 00 90 3D |  if_ae	jmp	#LR__0565
06a80     13 13 02 F6 | 	mov	arg01, local01
06a84     15 15 02 F6 | 	mov	arg02, local03
06a88     01 16 06 F6 | 	mov	arg03, #1
06a8c     18 F6 B1 FD | 	call	#__system__Mid_S
06a90     FD 2E 02 F6 | 	mov	local05, result1
06a94                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06a94     A0 01 00 FF 
06a98     97 14 06 F6 | 	mov	arg02, ##@LR__5652
06a9c     17 13 02 F6 | 	mov	arg01, local05
06aa0     98 D4 B1 FD | 	call	#__system___string_cmp
06aa4     00 FA 55 F2 | 	cmps	result1, #0 wc
06aa8     18 00 90 CD |  if_b	jmp	#LR__0563
06aac     A0 01 00 FF 
06ab0     99 14 06 F6 | 	mov	arg02, ##@LR__5653
06ab4     17 13 02 F6 | 	mov	arg01, local05
06ab8     80 D4 B1 FD | 	call	#__system___string_cmp
06abc     01 FA 55 F2 | 	cmps	result1, #1 wc
06ac0     1C 00 90 CD |  if_b	jmp	#LR__0564
06ac4                 | LR__0563
06ac4     A0 01 00 FF 
06ac8     9B 14 06 F6 | 	mov	arg02, ##@LR__5654
06acc     17 13 02 F6 | 	mov	arg01, local05
06ad0     68 D4 B1 FD | 	call	#__system___string_cmp
06ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ad8     00 FA 05 56 |  if_ne	mov	result1, #0
06adc     0C 00 90 5D |  if_ne	jmp	#LR__0566
06ae0                 | LR__0564
06ae0     01 2A 06 F1 | 	add	local03, #1
06ae4     90 FF 9F FD | 	jmp	#LR__0562
06ae8                 | LR__0565
06ae8                 | ' return true
06ae8     01 FA 65 F6 | 	neg	result1, #1
06aec                 | LR__0566
06aec     A7 F0 03 F6 | 	mov	ptra, fp
06af0     B2 00 A0 FD | 	call	#popregs_
06af4                 | _isdec_ret
06af4     2D 00 64 FD | 	ret
06af8                 | 
06af8                 | ' 
06af8                 | ' ' Check if the part is a string.  
06af8                 | ' 
06af8                 | ' function isstring(s as string) as boolean
06af8                 | _isstring
06af8     01 4A 05 F6 | 	mov	COUNT_, #1
06afc     A8 00 A0 FD | 	call	#pushregs_
06b00                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06b00     09 27 02 F6 | 	mov	local01, arg01
06b04     01 14 06 F6 | 	mov	arg02, #1
06b08     84 F4 B1 FD | 	call	#__system__Left_S
06b0c     FD 12 02 F6 | 	mov	arg01, result1
06b10     A0 01 00 FF 
06b14     9D 14 06 F6 | 	mov	arg02, ##@LR__5655
06b18     20 D4 B1 FD | 	call	#__system___string_cmp
06b1c     00 FA 4D F2 | 	cmps	result1, #0 wz
06b20     28 00 90 5D |  if_ne	jmp	#LR__0570
06b24     13 13 02 F6 | 	mov	arg01, local01
06b28     01 14 06 F6 | 	mov	arg02, #1
06b2c     E8 F4 B1 FD | 	call	#__system__Right_S
06b30     FD 12 02 F6 | 	mov	arg01, result1
06b34     A0 01 00 FF 
06b38     9F 14 06 F6 | 	mov	arg02, ##@LR__5656
06b3c     FC D3 B1 FD | 	call	#__system___string_cmp
06b40     00 FA 4D F2 | 	cmps	result1, #0 wz
06b44     01 FA 65 A6 |  if_e	neg	result1, #1
06b48     04 00 90 AD |  if_e	jmp	#LR__0571
06b4c                 | LR__0570
06b4c     00 FA 05 F6 | 	mov	result1, #0
06b50                 | LR__0571
06b50     A7 F0 03 F6 | 	mov	ptra, fp
06b54     B2 00 A0 FD | 	call	#popregs_
06b58                 | _isstring_ret
06b58     2D 00 64 FD | 	ret
06b5c                 | 
06b5c                 | ' 
06b5c                 | ' ' getnoteval. Returns the frequency of note token
06b5c                 | ' 
06b5c                 | ' function getnoteval(token) as single
06b5c                 | _getnoteval
06b5c     02 4A 05 F6 | 	mov	COUNT_, #2
06b60     A8 00 A0 FD | 	call	#pushregs_
06b64     01 00 00 FF 
06b68     00 13 86 F1 | 	sub	arg01, ##768
06b6c     09 15 52 F6 | 	abs	arg02, arg01 wc
06b70     0C 14 16 FD | 	qdiv	arg02, #12
06b74     14 00 00 FF 
06b78     D8 E4 05 F1 | 	add	objptr, ##10456
06b7c     19 14 62 FD | 	getqy	arg02
06b80     0A 15 82 F6 | 	negc	arg02, arg02
06b84     02 14 66 F0 | 	shl	arg02, #2
06b88     F2 14 02 F1 | 	add	arg02, objptr
06b8c     0A 27 02 FB | 	rdlong	local01, arg02
06b90     09 15 52 F6 | 	abs	arg02, arg01 wc
06b94     0C 14 16 FD | 	qdiv	arg02, #12
06b98     14 00 00 FF 
06b9c     D8 E4 85 F1 | 	sub	objptr, ##10456
06ba0     01 12 06 F6 | 	mov	arg01, #1
06ba4                 | ' noteexp=1+(note/12) 
06ba4                 | ' return (2.0^noteexp)*notebase
06ba4     18 14 62 FD | 	getqx	arg02
06ba8     0A 13 82 F3 | 	sumc	arg01, arg02
06bac     09 13 52 F6 | 	abs	arg01, arg01 wc
06bb0     1F 28 C6 C9 |  if_b	decod	local02, #31
06bb4     00 28 06 36 |  if_ae	mov	local02, #0
06bb8     CC FD B1 FD | 	call	#__system___float_fromuns
06bbc     14 FB 61 F5 | 	xor	result1, local02
06bc0     FD 14 02 F6 | 	mov	arg02, result1
06bc4     1E 12 C6 F9 | 	decod	arg01, #30
06bc8     C8 10 B2 FD | 	call	#__system____builtin_powf
06bcc     FD 12 02 F6 | 	mov	arg01, result1
06bd0     13 15 02 F6 | 	mov	arg02, local01
06bd4     B4 01 B2 FD | 	call	#__system___float_mul
06bd8     A7 F0 03 F6 | 	mov	ptra, fp
06bdc     B2 00 A0 FD | 	call	#popregs_
06be0                 | _getnoteval_ret
06be0     2D 00 64 FD | 	ret
06be4                 | 
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' '
06be4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06be4                 | ' '
06be4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06be4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06be4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06be4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06be4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06be4                 | ' ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' ' Helper functions to manage program lines
06be4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06be4                 | ' 
06be4                 | ' '----- delete a line from a program
06be4                 | ' 
06be4                 | ' function deleteline(aline as ulong) as integer
06be4                 | _deleteline
06be4     02 4A 05 F6 | 	mov	COUNT_, #2
06be8     A8 00 A0 FD | 	call	#pushregs_
06bec     2C F0 07 F1 | 	add	ptra, #44
06bf0     04 4E 05 F1 | 	add	fp, #4
06bf4     A7 12 62 FC | 	wrlong	arg01, fp
06bf8     4A 00 00 FF 
06bfc     88 E4 05 F1 | 	add	objptr, ##38024
06c00     F2 26 02 FB | 	rdlong	local01, objptr
06c04     0C 4E 05 F1 | 	add	fp, #12
06c08     A7 26 62 FC | 	wrlong	local01, fp
06c0c     10 4E 85 F1 | 	sub	fp, #16
06c10                 | ' 
06c10                 | ' searchptr=programstart
06c10                 | ' do
06c10     3E 00 00 FF 
06c14     BC E5 85 F1 | 	sub	objptr, ##32188
06c18                 | LR__0580
06c18     14 4E 05 F1 | 	add	fp, #20
06c1c     A7 12 02 F6 | 	mov	arg01, fp
06c20     04 4E 85 F1 | 	sub	fp, #4
06c24     A7 14 02 FB | 	rdlong	arg02, fp
06c28     10 4E 85 F1 | 	sub	fp, #16
06c2c     18 16 06 F6 | 	mov	arg03, #24
06c30     A0 C6 B1 FD | 	call	#_psram_spin2_read1
06c34     10 4E 05 F1 | 	add	fp, #16
06c38     A7 26 02 FB | 	rdlong	local01, fp
06c3c     08 4E 85 F1 | 	sub	fp, #8
06c40     A7 26 62 FC | 	wrlong	local01, fp
06c44     20 4E 05 F1 | 	add	fp, #32
06c48     A7 26 02 FB | 	rdlong	local01, fp
06c4c     18 4E 85 F1 | 	sub	fp, #24
06c50     A7 26 62 FC | 	wrlong	local01, fp
06c54     04 4E 05 F1 | 	add	fp, #4
06c58     A7 26 02 FB | 	rdlong	local01, fp
06c5c     10 4E 85 F1 | 	sub	fp, #16
06c60     A7 16 02 FB | 	rdlong	arg03, fp
06c64     04 4E 85 F1 | 	sub	fp, #4
06c68     0B 27 12 F2 | 	cmp	local01, arg03 wc
06c6c     28 4E 05 C1 |  if_b	add	fp, #40
06c70     A7 28 02 CB |  if_b	rdlong	local02, fp
06c74     28 4E 85 C1 |  if_b	sub	fp, #40
06c78     FF FF 3F CF 
06c7c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06c80     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06c84     0B 00 00 FF 
06c88     CC E4 85 F1 | 	sub	objptr, ##5836
06c8c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06c8c     14 4E 05 F1 | 	add	fp, #20
06c90     A7 26 02 FB | 	rdlong	local01, fp
06c94     10 4E 85 F1 | 	sub	fp, #16
06c98     A7 28 02 FB | 	rdlong	local02, fp
06c9c     04 4E 85 F1 | 	sub	fp, #4
06ca0     14 27 0A F2 | 	cmp	local01, local02 wz
06ca4     01 FA 65 56 |  if_ne	neg	result1, #1
06ca8     34 02 90 5D |  if_ne	jmp	#LR__0585
06cac     08 4E 05 F1 | 	add	fp, #8
06cb0     A7 12 02 FB | 	rdlong	arg01, fp
06cb4     08 4E 85 F1 | 	sub	fp, #8
06cb8     01 14 66 F6 | 	neg	arg02, #1
06cbc     50 9A B1 FD | 	call	#_pslpoke
06cc0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06cc0                 | ' 
06cc0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06cc0     28 4E 05 F1 | 	add	fp, #40
06cc4     A7 26 02 FB | 	rdlong	local01, fp
06cc8     28 4E 85 F1 | 	sub	fp, #40
06ccc     FF FF 3F FF 
06cd0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06cd4     24 4E 05 A1 |  if_e	add	fp, #36
06cd8     A7 28 02 AB |  if_e	rdlong	local02, fp
06cdc     24 4E 85 A1 |  if_e	sub	fp, #36
06ce0     FF FF 7F AF 
06ce4     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ce8     88 00 90 5D |  if_ne	jmp	#LR__0581
06cec     4A 00 00 FF 
06cf0     88 E4 05 F1 | 	add	objptr, ##38024
06cf4     00 04 80 FF 
06cf8     F2 00 68 FC | 	wrlong	##524288, objptr
06cfc     07 00 00 FF 
06d00     2C E4 85 F1 | 	sub	objptr, ##3628
06d04     00 04 80 FF 
06d08     F2 00 68 FC | 	wrlong	##524288, objptr
06d0c     07 00 00 FF 
06d10     30 E4 05 F1 | 	add	objptr, ##3632
06d14     F2 00 68 FC | 	wrlong	#0, objptr
06d18     04 E4 05 F1 | 	add	objptr, #4
06d1c     FF FF FF FF 
06d20     F2 FE 6B FC | 	wrlong	##-1, objptr
06d24     4A 00 00 FF 
06d28     90 E4 85 F1 | 	sub	objptr, ##38032
06d2c     00 12 06 F6 | 	mov	arg01, #0
06d30     01 14 66 F6 | 	neg	arg02, #1
06d34     D8 99 B1 FD | 	call	#_pslpoke
06d38     10 12 06 F6 | 	mov	arg01, #16
06d3c     01 14 66 F6 | 	neg	arg02, #1
06d40     CC 99 B1 FD | 	call	#_pslpoke
06d44     14 12 06 F6 | 	mov	arg01, #20
06d48     1E 14 CE F9 | 	bmask	arg02, #30
06d4c     C0 99 B1 FD | 	call	#_pslpoke
06d50     50 00 00 FF 
06d54     B8 E4 05 F1 | 	add	objptr, ##41144
06d58     00 04 80 FF 
06d5c     F2 00 68 FC | 	wrlong	##524288, objptr
06d60     04 E4 05 F1 | 	add	objptr, #4
06d64     00 04 80 FF 
06d68     F2 00 68 FC | 	wrlong	##524288, objptr
06d6c     50 00 00 FF 
06d70     BC E4 85 F1 | 	sub	objptr, ##41148
06d74                 | LR__0581
06d74                 | ' 
06d74                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06d74     28 4E 05 F1 | 	add	fp, #40
06d78     A7 26 02 FB | 	rdlong	local01, fp
06d7c     28 4E 85 F1 | 	sub	fp, #40
06d80     FF FF 3F FF 
06d84     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d88     74 00 90 5D |  if_ne	jmp	#LR__0582
06d8c     24 4E 05 F1 | 	add	fp, #36
06d90     A7 28 02 FB | 	rdlong	local02, fp
06d94     24 4E 85 F1 | 	sub	fp, #36
06d98     FF FF 7F FF 
06d9c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06da0     5C 00 90 AD |  if_e	jmp	#LR__0582
06da4     24 4E 05 F1 | 	add	fp, #36
06da8     A7 12 02 FB | 	rdlong	arg01, fp
06dac     24 4E 85 F1 | 	sub	fp, #36
06db0     14 12 06 F1 | 	add	arg01, #20
06db4     1E 14 CE F9 | 	bmask	arg02, #30
06db8     54 99 B1 FD | 	call	#_pslpoke
06dbc     24 4E 05 F1 | 	add	fp, #36
06dc0     A7 26 02 FB | 	rdlong	local01, fp
06dc4     4A 00 00 FF 
06dc8     90 E4 05 F1 | 	add	objptr, ##38032
06dcc     F2 26 62 FC | 	wrlong	local01, objptr
06dd0     4A 00 00 FF 
06dd4     90 E4 85 F1 | 	sub	objptr, ##38032
06dd8     A7 12 02 FB | 	rdlong	arg01, fp
06ddc     24 4E 85 F1 | 	sub	fp, #36
06de0     5C 9A B1 FD | 	call	#_pslpeek
06de4     4A 00 00 FF 
06de8     8C E4 05 F1 | 	add	objptr, ##38028
06dec     F2 FA 61 FC | 	wrlong	result1, objptr
06df0     4A 00 00 FF 
06df4     8C E4 85 F1 | 	sub	objptr, ##38028
06df8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06df8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06df8                 | '   lastline=pslpeek(header(4))
06df8                 | '   return 0
06df8     00 FA 05 F6 | 	mov	result1, #0
06dfc     E0 00 90 FD | 	jmp	#LR__0585
06e00                 | LR__0582
06e00                 | ' 
06e00                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06e00     28 4E 05 F1 | 	add	fp, #40
06e04     A7 26 02 FB | 	rdlong	local01, fp
06e08     28 4E 85 F1 | 	sub	fp, #40
06e0c     FF FF 3F FF 
06e10     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e14     58 00 90 AD |  if_e	jmp	#LR__0583
06e18     24 4E 05 F1 | 	add	fp, #36
06e1c     A7 28 02 FB | 	rdlong	local02, fp
06e20     24 4E 85 F1 | 	sub	fp, #36
06e24     FF FF 7F FF 
06e28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06e2c     40 00 90 5D |  if_ne	jmp	#LR__0583
06e30     28 4E 05 F1 | 	add	fp, #40
06e34     A7 12 02 FB | 	rdlong	arg01, fp
06e38     28 4E 85 F1 | 	sub	fp, #40
06e3c     10 12 06 F1 | 	add	arg01, #16
06e40     01 14 66 F6 | 	neg	arg02, #1
06e44     C8 98 B1 FD | 	call	#_pslpoke
06e48     28 4E 05 F1 | 	add	fp, #40
06e4c     A7 26 02 FB | 	rdlong	local01, fp
06e50     28 4E 85 F1 | 	sub	fp, #40
06e54     4A 00 00 FF 
06e58     88 E4 05 F1 | 	add	objptr, ##38024
06e5c     F2 26 62 FC | 	wrlong	local01, objptr
06e60     4A 00 00 FF 
06e64     88 E4 85 F1 | 	sub	objptr, ##38024
06e68                 | ' '   print "deleted first line"
06e68                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06e68                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06e68                 | '   return 0
06e68     00 FA 05 F6 | 	mov	result1, #0
06e6c     70 00 90 FD | 	jmp	#LR__0585
06e70                 | LR__0583
06e70                 | ' 
06e70                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06e70     28 4E 05 F1 | 	add	fp, #40
06e74     A7 26 02 FB | 	rdlong	local01, fp
06e78     28 4E 85 F1 | 	sub	fp, #40
06e7c     FF FF 3F FF 
06e80     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e84     24 4E 05 51 |  if_ne	add	fp, #36
06e88     A7 28 02 5B |  if_ne	rdlong	local02, fp
06e8c     24 4E 85 51 |  if_ne	sub	fp, #36
06e90     FF FF 7F 5F 
06e94     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06e98     40 00 90 AD |  if_e	jmp	#LR__0584
06e9c     28 4E 05 F1 | 	add	fp, #40
06ea0     A7 12 02 FB | 	rdlong	arg01, fp
06ea4     10 12 06 F1 | 	add	arg01, #16
06ea8     04 4E 85 F1 | 	sub	fp, #4
06eac     A7 14 02 FB | 	rdlong	arg02, fp
06eb0     24 4E 85 F1 | 	sub	fp, #36
06eb4     58 98 B1 FD | 	call	#_pslpoke
06eb8     24 4E 05 F1 | 	add	fp, #36
06ebc     A7 12 02 FB | 	rdlong	arg01, fp
06ec0     14 12 06 F1 | 	add	arg01, #20
06ec4     04 4E 05 F1 | 	add	fp, #4
06ec8     A7 14 02 FB | 	rdlong	arg02, fp
06ecc     28 4E 85 F1 | 	sub	fp, #40
06ed0     3C 98 B1 FD | 	call	#_pslpoke
06ed4                 | '    pslpoke(header(5)+16,header(4))  
06ed4                 | '    pslpoke(header(4)+20, header(5))
06ed4                 | '    return 0
06ed4     00 FA 05 F6 | 	mov	result1, #0
06ed8     04 00 90 FD | 	jmp	#LR__0585
06edc                 | LR__0584
06edc     00 FA 05 F6 | 	mov	result1, #0
06ee0                 | LR__0585
06ee0     A7 F0 03 F6 | 	mov	ptra, fp
06ee4     B2 00 A0 FD | 	call	#popregs_
06ee8                 | _deleteline_ret
06ee8     2D 00 64 FD | 	ret
06eec                 | 
06eec                 | ' 
06eec                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06eec                 | ' 
06eec                 | ' sub save_line
06eec                 | _save_line
06eec     03 4A 05 F6 | 	mov	COUNT_, #3
06ef0     A8 00 A0 FD | 	call	#pushregs_
06ef4     4A 00 00 FF 
06ef8     7C E4 05 F1 | 	add	objptr, ##38012
06efc     F2 16 02 FB | 	rdlong	arg03, objptr
06f00     01 16 06 F1 | 	add	arg03, #1
06f04     05 00 00 FF 
06f08     18 E4 85 F1 | 	sub	objptr, ##2584
06f0c     F2 14 02 FB | 	rdlong	arg02, objptr
06f10     0B 15 02 FD | 	qmul	arg02, arg03
06f14     0E 00 00 FF 
06f18     44 E4 85 F1 | 	sub	objptr, ##7236
06f1c     F2 12 02 FB | 	rdlong	arg01, objptr
06f20     37 00 00 FF 
06f24     20 E4 85 F1 | 	sub	objptr, ##28192
06f28     09 27 02 F6 | 	mov	local01, arg01
06f2c     18 28 62 FD | 	getqx	local02
06f30     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06f34                 | LR__0590
06f34     13 FB C9 FA | 	rdbyte	result1, local01 wz
06f38     01 26 06 51 |  if_ne	add	local01, #1
06f3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06f40                 | LR__0591
06f40     09 27 82 F1 | 	sub	local01, arg01
06f44     03 26 CE F7 | 	test	local01, #3 wz
06f48     02 26 46 50 |  if_ne	shr	local01, #2
06f4c     01 26 06 51 |  if_ne	add	local01, #1
06f50     02 26 66 50 |  if_ne	shl	local01, #2
06f54     14 2B 02 F6 | 	mov	local03, local02
06f58     13 2B 02 F1 | 	add	local03, local01
06f5c     43 00 00 FF 
06f60     5C E4 05 F1 | 	add	objptr, ##34396
06f64     F2 16 02 FB | 	rdlong	arg03, objptr
06f68     14 17 02 F1 | 	add	arg03, local02
06f6c     04 00 00 FF 
06f70     28 E4 05 F1 | 	add	objptr, ##2088
06f74     F2 16 62 FC | 	wrlong	arg03, objptr
06f78     04 E4 05 F1 | 	add	objptr, #4
06f7c     F2 26 62 FC | 	wrlong	local01, objptr
06f80     0C E4 85 F1 | 	sub	objptr, #12
06f84     F2 12 02 F6 | 	mov	arg01, objptr
06f88     04 00 00 FF 
06f8c     20 E4 85 F1 | 	sub	objptr, ##2080
06f90     F2 14 02 FB | 	rdlong	arg02, objptr
06f94     14 17 02 F6 | 	mov	arg03, local02
06f98     37 00 00 FF 
06f9c     90 E5 85 F1 | 	sub	objptr, ##28560
06fa0     CC C3 B1 FD | 	call	#_psram_spin2_write
06fa4     2B 00 00 FF 
06fa8     54 E5 05 F1 | 	add	objptr, ##22356
06fac     F2 12 02 FB | 	rdlong	arg01, objptr
06fb0     0C 00 00 FF 
06fb4     3C E4 05 F1 | 	add	objptr, ##6204
06fb8     F2 14 02 FB | 	rdlong	arg02, objptr
06fbc     14 15 02 F1 | 	add	arg02, local02
06fc0     13 17 02 F6 | 	mov	arg03, local01
06fc4     37 00 00 FF 
06fc8     90 E5 85 F1 | 	sub	objptr, ##28560
06fcc     A0 C3 B1 FD | 	call	#_psram_spin2_write
06fd0     37 00 00 FF 
06fd4     90 E5 05 F1 | 	add	objptr, ##28560
06fd8     F2 26 02 FB | 	rdlong	local01, objptr
06fdc     15 27 02 F1 | 	add	local01, local03
06fe0     F2 26 62 FC | 	wrlong	local01, objptr
06fe4     43 00 00 FF 
06fe8     5C E4 85 F1 | 	sub	objptr, ##34396
06fec     A7 F0 03 F6 | 	mov	ptra, fp
06ff0     B2 00 A0 FD | 	call	#popregs_
06ff4                 | _save_line_ret
06ff4     2D 00 64 FD | 	ret
06ff8                 | 
06ff8                 | ' 
06ff8                 | ' '----- Insert a new line into the middle of the program
06ff8                 | ' 
06ff8                 | ' function insertline(aline as ulong) as integer
06ff8                 | _insertline
06ff8     02 4A 05 F6 | 	mov	COUNT_, #2
06ffc     A8 00 A0 FD | 	call	#pushregs_
07000     28 F0 07 F1 | 	add	ptra, #40
07004     04 4E 05 F1 | 	add	fp, #4
07008     A7 12 62 FC | 	wrlong	arg01, fp
0700c     4A 00 00 FF 
07010     88 E4 05 F1 | 	add	objptr, ##38024
07014     F2 26 02 FB | 	rdlong	local01, objptr
07018     04 4E 05 F1 | 	add	fp, #4
0701c     A7 26 62 FC | 	wrlong	local01, fp
07020     08 4E 85 F1 | 	sub	fp, #8
07024                 | ' 
07024                 | ' do
07024     3E 00 00 FF 
07028     BC E5 85 F1 | 	sub	objptr, ##32188
0702c                 | LR__0600
0702c     10 4E 05 F1 | 	add	fp, #16
07030     A7 12 02 F6 | 	mov	arg01, fp
07034     08 4E 85 F1 | 	sub	fp, #8
07038     A7 14 02 FB | 	rdlong	arg02, fp
0703c     08 4E 85 F1 | 	sub	fp, #8
07040     18 16 06 F6 | 	mov	arg03, #24
07044     8C C2 B1 FD | 	call	#_psram_spin2_read1
07048     08 4E 05 F1 | 	add	fp, #8
0704c     A7 26 02 FB | 	rdlong	local01, fp
07050     04 4E 05 F1 | 	add	fp, #4
07054     A7 26 62 FC | 	wrlong	local01, fp
07058     18 4E 05 F1 | 	add	fp, #24
0705c     A7 26 02 FB | 	rdlong	local01, fp
07060     1C 4E 85 F1 | 	sub	fp, #28
07064     A7 26 62 FC | 	wrlong	local01, fp
07068     08 4E 05 F1 | 	add	fp, #8
0706c     A7 26 02 FB | 	rdlong	local01, fp
07070     0C 4E 85 F1 | 	sub	fp, #12
07074     A7 16 02 FB | 	rdlong	arg03, fp
07078     04 4E 85 F1 | 	sub	fp, #4
0707c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07080     24 4E 05 C1 |  if_b	add	fp, #36
07084     A7 28 02 CB |  if_b	rdlong	local02, fp
07088     24 4E 85 C1 |  if_b	sub	fp, #36
0708c     FF FF 3F CF 
07090     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07094     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07098     0B 00 00 FF 
0709c     CC E4 85 F1 | 	sub	objptr, ##5836
070a0                 | ' 
070a0                 | ' if header(0)=aline then return -1 				' delete it first
070a0     10 4E 05 F1 | 	add	fp, #16
070a4     A7 26 02 FB | 	rdlong	local01, fp
070a8     0C 4E 85 F1 | 	sub	fp, #12
070ac     A7 28 02 FB | 	rdlong	local02, fp
070b0     04 4E 85 F1 | 	sub	fp, #4
070b4     14 27 0A F2 | 	cmp	local01, local02 wz
070b8     01 FA 65 A6 |  if_e	neg	result1, #1
070bc     48 01 90 AD |  if_e	jmp	#LR__0603
070c0                 | ' if header(0)<aline then return -2 				' end of program reached
070c0     10 4E 05 F1 | 	add	fp, #16
070c4     A7 26 02 FB | 	rdlong	local01, fp
070c8     0C 4E 85 F1 | 	sub	fp, #12
070cc     A7 16 02 FB | 	rdlong	arg03, fp
070d0     04 4E 85 F1 | 	sub	fp, #4
070d4     0B 27 12 F2 | 	cmp	local01, arg03 wc
070d8     02 FA 65 C6 |  if_b	neg	result1, #2
070dc     28 01 90 CD |  if_b	jmp	#LR__0603
070e0                 | ' 
070e0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
070e0     20 4E 05 F1 | 	add	fp, #32
070e4     A7 26 02 FB | 	rdlong	local01, fp
070e8     20 4E 85 F1 | 	sub	fp, #32
070ec     FF FF 7F FF 
070f0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
070f4     78 00 90 5D |  if_ne	jmp	#LR__0601
070f8     43 00 00 FF 
070fc     5C E4 05 F1 | 	add	objptr, ##34396
07100     F2 26 02 FB | 	rdlong	local01, objptr
07104     07 00 00 FF 
07108     2C E4 05 F1 | 	add	objptr, ##3628
0710c     F2 26 62 FC | 	wrlong	local01, objptr
07110     0C 4E 05 F1 | 	add	fp, #12
07114     A7 12 02 FB | 	rdlong	arg01, fp
07118     0C 4E 85 F1 | 	sub	fp, #12
0711c     10 12 06 F1 | 	add	arg01, #16
07120     07 00 00 FF 
07124     2C E4 85 F1 | 	sub	objptr, ##3628
07128     F2 14 02 FB | 	rdlong	arg02, objptr
0712c     43 00 00 FF 
07130     5C E4 85 F1 | 	sub	objptr, ##34396
07134     D8 95 B1 FD | 	call	#_pslpoke
07138     47 00 00 FF 
0713c     8C E4 05 F1 | 	add	objptr, ##36492
07140     FF FF FF FF 
07144     F2 FE 6B FC | 	wrlong	##-1, objptr
07148     0C 4E 05 F1 | 	add	fp, #12
0714c     A7 26 02 FB | 	rdlong	local01, fp
07150     0C 4E 85 F1 | 	sub	fp, #12
07154     04 E4 05 F1 | 	add	objptr, #4
07158     F2 26 62 FC | 	wrlong	local01, objptr
0715c     47 00 00 FF 
07160     90 E4 85 F1 | 	sub	objptr, ##36496
07164     84 FD BF FD | 	call	#_save_line
07168                 | '   programstart=programptr
07168                 | '   pslpoke(lineptr2+16,programptr)
07168                 | '   ucompiledline(4)=$FFFF_FFFF
07168                 | '   ucompiledline(5)=lineptr2
07168                 | '   save_line
07168                 | '   return 0
07168     00 FA 05 F6 | 	mov	result1, #0
0716c     98 00 90 FD | 	jmp	#LR__0603
07170                 | LR__0601
07170                 | ' 
07170                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07170     20 4E 05 F1 | 	add	fp, #32
07174     A7 26 02 FB | 	rdlong	local01, fp
07178     20 4E 85 F1 | 	sub	fp, #32
0717c     FF FF 7F FF 
07180     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07184     7C 00 90 AD |  if_e	jmp	#LR__0602
07188     20 4E 05 F1 | 	add	fp, #32
0718c     A7 26 02 FB | 	rdlong	local01, fp
07190     47 00 00 FF 
07194     8C E4 05 F1 | 	add	objptr, ##36492
07198     F2 26 62 FC | 	wrlong	local01, objptr
0719c     14 4E 85 F1 | 	sub	fp, #20
071a0     A7 26 02 FB | 	rdlong	local01, fp
071a4     04 E4 05 F1 | 	add	objptr, #4
071a8     F2 26 62 FC | 	wrlong	local01, objptr
071ac     A7 12 02 FB | 	rdlong	arg01, fp
071b0     0C 4E 85 F1 | 	sub	fp, #12
071b4     10 12 06 F1 | 	add	arg01, #16
071b8     04 00 00 FF 
071bc     34 E4 85 F1 | 	sub	objptr, ##2100
071c0     F2 14 02 FB | 	rdlong	arg02, objptr
071c4     43 00 00 FF 
071c8     5C E4 85 F1 | 	sub	objptr, ##34396
071cc     40 95 B1 FD | 	call	#_pslpoke
071d0     20 4E 05 F1 | 	add	fp, #32
071d4     A7 12 02 FB | 	rdlong	arg01, fp
071d8     20 4E 85 F1 | 	sub	fp, #32
071dc     14 12 06 F1 | 	add	arg01, #20
071e0     43 00 00 FF 
071e4     5C E4 05 F1 | 	add	objptr, ##34396
071e8     F2 14 02 FB | 	rdlong	arg02, objptr
071ec     43 00 00 FF 
071f0     5C E4 85 F1 | 	sub	objptr, ##34396
071f4     18 95 B1 FD | 	call	#_pslpoke
071f8     F0 FC BF FD | 	call	#_save_line
071fc                 | '   ucompiledline(4)=header(4)
071fc                 | '   ucompiledline(5)=lineptr2
071fc                 | '   pslpoke(lineptr2+16,programptr)
071fc                 | '   pslpoke(header(4)+20,programptr)
071fc                 | '   save_line
071fc                 | '   return 0
071fc     00 FA 05 F6 | 	mov	result1, #0
07200     04 00 90 FD | 	jmp	#LR__0603
07204                 | LR__0602
07204     00 FA 05 F6 | 	mov	result1, #0
07208                 | LR__0603
07208     A7 F0 03 F6 | 	mov	ptra, fp
0720c     B2 00 A0 FD | 	call	#popregs_
07210                 | _insertline_ret
07210     2D 00 64 FD | 	ret
07214                 | 
07214                 | ' 
07214                 | ' '----- Adds a new line at the end of the program
07214                 | ' 
07214                 | ' sub add_line_at_end(aline) 
07214                 | _add_line_at_end
07214     4A 00 00 FF 
07218     8C E4 05 F1 | 	add	objptr, ##38028
0721c     F2 12 62 FC | 	wrlong	arg01, objptr
07220     04 E4 05 F1 | 	add	objptr, #4
07224     F2 14 02 FB | 	rdlong	arg02, objptr
07228     03 00 00 FF 
0722c     04 E4 85 F1 | 	sub	objptr, ##1540
07230     F2 14 62 FC | 	wrlong	arg02, objptr
07234     03 00 00 FF 
07238     04 E4 05 F1 | 	add	objptr, ##1540
0723c     F2 12 02 FB | 	rdlong	arg01, objptr
07240     14 12 06 F1 | 	add	arg01, #20
07244     07 00 00 FF 
07248     34 E4 85 F1 | 	sub	objptr, ##3636
0724c     F2 14 02 FB | 	rdlong	arg02, objptr
07250     43 00 00 FF 
07254     5C E4 85 F1 | 	sub	objptr, ##34396
07258     B4 94 B1 FD | 	call	#_pslpoke
0725c     43 00 00 FF 
07260     5C E4 05 F1 | 	add	objptr, ##34396
07264     F2 14 02 FB | 	rdlong	arg02, objptr
07268     07 00 00 FF 
0726c     34 E4 05 F1 | 	add	objptr, ##3636
07270     F2 14 62 FC | 	wrlong	arg02, objptr
07274     03 00 00 FF 
07278     00 E4 85 F1 | 	sub	objptr, ##1536
0727c     FF FF BF FF 
07280     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07284                 | ' 
07284                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07284                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07284     04 00 00 FF 
07288     34 E4 85 F1 | 	sub	objptr, ##2100
0728c     F2 14 02 FB | 	rdlong	arg02, objptr
07290     43 00 00 FF 
07294     5C E4 85 F1 | 	sub	objptr, ##34396
07298     00 04 00 FF 
0729c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
072a0     47 00 00 AF 
072a4     8C E4 05 A1 |  if_e	add	objptr, ##36492
072a8     FF FF FF AF 
072ac     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
072b0     47 00 00 AF 
072b4     8C E4 85 A1 |  if_e	sub	objptr, ##36492
072b8     30 FC BF FD | 	call	#_save_line
072bc     43 00 00 FF 
072c0     5C E4 05 F1 | 	add	objptr, ##34396
072c4     F2 12 02 FB | 	rdlong	arg01, objptr
072c8     43 00 00 FF 
072cc     5C E4 85 F1 | 	sub	objptr, ##34396
072d0     01 14 66 F6 | 	neg	arg02, #1
072d4     38 94 B1 FD | 	call	#_pslpoke
072d8                 | _add_line_at_end_ret
072d8     2D 00 64 FD | 	ret
072dc                 | 
072dc                 | ' 
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' 
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
072dc                 | ' '--------------------------------------------------------------------------------------------------------------------------
072dc                 | ' 
072dc                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
072dc                 | ' 
072dc                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
072dc                 | _compile_immediate
072dc     0A 4A 05 F6 | 	mov	COUNT_, #10
072e0     A8 00 A0 FD | 	call	#pushregs_
072e4                 | _compile_immediate_enter
072e4     09 2D 02 F6 | 	mov	local04, arg01
072e8     0A 2F 02 F6 | 	mov	local05, arg02
072ec     00 30 06 F6 | 	mov	local06, #0
072f0     00 32 06 F6 | 	mov	local07, #0
072f4     00 34 06 F6 | 	mov	local08, #0
072f8                 | ' 
072f8                 | ' ' linetype=cont+1
072f8                 | ' ' 1 : this is the first part of the line that will continue
072f8                 | ' ' 2 - this is the continuation of the line
072f8                 | ' ' 3 - this is the last continued line
072f8                 | ' ' 4 - this is the one and only part
072f8                 | ' ' 5 - continued after if/else
072f8                 | ' 
072f8                 | ' err=0
072f8                 | ' cmd=0
072f8                 | ' vars=0
072f8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
072f8     02 2C 0E F2 | 	cmp	local04, #2 wz
072fc     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07300     24 00 90 5D |  if_ne	jmp	#LR__0610
07304     35 00 00 FF 
07308     10 E4 05 F1 | 	add	objptr, ##27152
0730c     F2 32 02 FB | 	rdlong	local07, objptr
07310     01 36 06 F6 | 	mov	local09, #1
07314     02 00 00 FF 
07318     34 E4 05 F1 | 	add	objptr, ##1076
0731c     F2 02 68 FC | 	wrlong	#1, objptr
07320     37 00 00 FF 
07324     44 E4 85 F1 | 	sub	objptr, ##28228
07328                 | LR__0610
07328                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07328     04 2C 0E F2 | 	cmp	local04, #4 wz
0732c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07330     30 00 90 5D |  if_ne	jmp	#LR__0611
07334     35 00 00 FF 
07338     18 E4 05 F1 | 	add	objptr, ##27160
0733c     F2 32 02 FB | 	rdlong	local07, objptr
07340     02 36 06 F6 | 	mov	local09, #2
07344     02 00 00 FF 
07348     2C E4 05 F1 | 	add	objptr, ##1068
0734c     F2 04 68 FC | 	wrlong	#2, objptr
07350     13 00 00 FF 
07354     38 E4 05 F1 | 	add	objptr, ##9784
07358     F2 04 68 FC | 	wrlong	#2, objptr
0735c     4A 00 00 FF 
07360     7C E4 85 F1 | 	sub	objptr, ##38012
07364                 | LR__0611
07364                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07364     05 2C 0E F2 | 	cmp	local04, #5 wz
07368     40 00 90 5D |  if_ne	jmp	#LR__0612
0736c     37 00 00 FF 
07370     44 E4 05 F1 | 	add	objptr, ##28228
07374     F2 FC 01 FB | 	rdlong	result2, objptr
07378     FE 36 02 F6 | 	mov	local09, result2
0737c     03 36 66 F0 | 	shl	local09, #3
07380     02 00 00 FF 
07384     38 E4 85 F1 | 	sub	objptr, ##1080
07388     F2 36 02 F1 | 	add	local09, objptr
0738c     04 36 06 F1 | 	add	local09, #4
07390     1B 33 02 FB | 	rdlong	local07, local09
07394     01 FC 05 F1 | 	add	result2, #1
07398     02 00 00 FF 
0739c     38 E4 05 F1 | 	add	objptr, ##1080
073a0     F2 FC 61 FC | 	wrlong	result2, objptr
073a4     37 00 00 FF 
073a8     44 E4 85 F1 | 	sub	objptr, ##28228
073ac                 | LR__0612
073ac                 | ' 
073ac                 | ' 'print  "In compile_immediate cmd=:", cmd
073ac                 | ' 451 select case cmd
073ac     5C 32 0E F2 | 	cmp	local07, #92 wz
073b0     C4 02 90 AD |  if_e	jmp	#LR__0613
073b4     B9 32 0E F2 | 	cmp	local07, #185 wz
073b8     C8 02 90 AD |  if_e	jmp	#LR__0614
073bc     47 32 0E F2 | 	cmp	local07, #71 wz
073c0     D0 02 90 AD |  if_e	jmp	#LR__0615
073c4     59 32 0E F2 | 	cmp	local07, #89 wz
073c8     D8 02 90 AD |  if_e	jmp	#LR__0616
073cc     C3 32 0E F2 | 	cmp	local07, #195 wz
073d0     E0 02 90 AD |  if_e	jmp	#LR__0617
073d4     45 32 0E F2 | 	cmp	local07, #69 wz
073d8     E4 02 90 AD |  if_e	jmp	#LR__0618
073dc     69 32 0E F2 | 	cmp	local07, #105 wz
073e0     EC 02 90 AD |  if_e	jmp	#LR__0619
073e4     40 32 0E F2 | 	cmp	local07, #64 wz
073e8     C4 06 90 AD |  if_e	jmp	#LR__0692
073ec     B4 32 0E F2 | 	cmp	local07, #180 wz
073f0     E8 02 90 AD |  if_e	jmp	#LR__0620
073f4     49 32 0E F2 | 	cmp	local07, #73 wz
073f8     EC 02 90 AD |  if_e	jmp	#LR__0621
073fc     50 32 0E F2 | 	cmp	local07, #80 wz
07400     F0 02 90 AD |  if_e	jmp	#LR__0622
07404     AE 32 0E F2 | 	cmp	local07, #174 wz
07408     F8 02 90 AD |  if_e	jmp	#LR__0623
0740c     B0 32 0E F2 | 	cmp	local07, #176 wz
07410     FC 02 90 AD |  if_e	jmp	#LR__0624
07414     AF 32 0E F2 | 	cmp	local07, #175 wz
07418     00 03 90 AD |  if_e	jmp	#LR__0625
0741c     B1 32 0E F2 | 	cmp	local07, #177 wz
07420     04 03 90 AD |  if_e	jmp	#LR__0626
07424     68 32 0E F2 | 	cmp	local07, #104 wz
07428     08 03 90 AD |  if_e	jmp	#LR__0627
0742c     B7 32 0E F2 | 	cmp	local07, #183 wz
07430     7C 06 90 AD |  if_e	jmp	#LR__0692
07434     74 32 0E F2 | 	cmp	local07, #116 wz
07438     04 03 90 AD |  if_e	jmp	#LR__0628
0743c     73 32 0E F2 | 	cmp	local07, #115 wz
07440     0C 03 90 AD |  if_e	jmp	#LR__0629
07444     6C 32 0E F2 | 	cmp	local07, #108 wz
07448     14 03 90 AD |  if_e	jmp	#LR__0630
0744c     89 32 0E F2 | 	cmp	local07, #137 wz
07450     5C 06 90 AD |  if_e	jmp	#LR__0692
07454     C2 32 0E F2 | 	cmp	local07, #194 wz
07458     14 03 90 AD |  if_e	jmp	#LR__0631
0745c     72 32 0E F2 | 	cmp	local07, #114 wz
07460     18 03 90 AD |  if_e	jmp	#LR__0632
07464     5D 32 0E F2 | 	cmp	local07, #93 wz
07468     1C 03 90 AD |  if_e	jmp	#LR__0633
0746c     96 32 0E F2 | 	cmp	local07, #150 wz
07470     24 03 90 AD |  if_e	jmp	#LR__0634
07474     43 32 0E F2 | 	cmp	local07, #67 wz
07478     28 03 90 AD |  if_e	jmp	#LR__0635
0747c     5A 32 0E F2 | 	cmp	local07, #90 wz
07480     30 03 90 AD |  if_e	jmp	#LR__0636
07484     AB 32 0E F2 | 	cmp	local07, #171 wz
07488     24 06 90 AD |  if_e	jmp	#LR__0692
0748c     BD 32 0E F2 | 	cmp	local07, #189 wz
07490     30 03 90 AD |  if_e	jmp	#LR__0637
07494     BB 32 0E F2 | 	cmp	local07, #187 wz
07498     38 03 90 AD |  if_e	jmp	#LR__0638
0749c     4E 32 0E F2 | 	cmp	local07, #78 wz
074a0     40 03 90 AD |  if_e	jmp	#LR__0639
074a4     A9 32 0E F2 | 	cmp	local07, #169 wz
074a8     58 03 90 AD |  if_e	jmp	#LR__0641
074ac     46 32 0E F2 | 	cmp	local07, #70 wz
074b0     70 03 90 AD |  if_e	jmp	#LR__0643
074b4     71 32 0E F2 | 	cmp	local07, #113 wz
074b8     78 03 90 AD |  if_e	jmp	#LR__0644
074bc     60 32 0E F2 | 	cmp	local07, #96 wz
074c0     7C 03 90 AD |  if_e	jmp	#LR__0645
074c4     4A 32 0E F2 | 	cmp	local07, #74 wz
074c8     80 03 90 AD |  if_e	jmp	#LR__0646
074cc     48 32 0E F2 | 	cmp	local07, #72 wz
074d0     84 03 90 AD |  if_e	jmp	#LR__0647
074d4     58 32 0E F2 | 	cmp	local07, #88 wz
074d8     8C 03 90 AD |  if_e	jmp	#LR__0648
074dc     5F 32 0E F2 | 	cmp	local07, #95 wz
074e0     94 03 90 AD |  if_e	jmp	#LR__0649
074e4     B5 32 0E F2 | 	cmp	local07, #181 wz
074e8     98 03 90 AD |  if_e	jmp	#LR__0650
074ec     8A 32 0E F2 | 	cmp	local07, #138 wz
074f0     A0 03 90 AD |  if_e	jmp	#LR__0651
074f4     4C 32 0E F2 | 	cmp	local07, #76 wz
074f8     A4 03 90 AD |  if_e	jmp	#LR__0652
074fc     52 32 0E F2 | 	cmp	local07, #82 wz
07500     AC 03 90 AD |  if_e	jmp	#LR__0653
07504     97 32 0E F2 | 	cmp	local07, #151 wz
07508     B4 03 90 AD |  if_e	jmp	#LR__0654
0750c     C6 32 0E F2 | 	cmp	local07, #198 wz
07510     B8 03 90 AD |  if_e	jmp	#LR__0655
07514     61 32 0E F2 | 	cmp	local07, #97 wz
07518     BC 03 90 AD |  if_e	jmp	#LR__0656
0751c     63 32 0E F2 | 	cmp	local07, #99 wz
07520     C0 03 90 AD |  if_e	jmp	#LR__0657
07524     41 32 0E F2 | 	cmp	local07, #65 wz
07528     84 05 90 AD |  if_e	jmp	#LR__0692
0752c     4B 32 0E F2 | 	cmp	local07, #75 wz
07530     BC 03 90 AD |  if_e	jmp	#LR__0658
07534     C1 32 0E F2 | 	cmp	local07, #193 wz
07538     C0 03 90 AD |  if_e	jmp	#LR__0659
0753c     B3 32 0E F2 | 	cmp	local07, #179 wz
07540     C4 03 90 AD |  if_e	jmp	#LR__0660
07544     5E 32 0E F2 | 	cmp	local07, #94 wz
07548     C8 03 90 AD |  if_e	jmp	#LR__0661
0754c     7C 32 0E F2 | 	cmp	local07, #124 wz
07550     CC 03 90 AD |  if_e	jmp	#LR__0662
07554     7D 32 0E F2 | 	cmp	local07, #125 wz
07558     D0 03 90 AD |  if_e	jmp	#LR__0663
0755c     7E 32 0E F2 | 	cmp	local07, #126 wz
07560     D4 03 90 AD |  if_e	jmp	#LR__0664
07564     7F 32 0E F2 | 	cmp	local07, #127 wz
07568     D8 03 90 AD |  if_e	jmp	#LR__0665
0756c     80 32 0E F2 | 	cmp	local07, #128 wz
07570     DC 03 90 AD |  if_e	jmp	#LR__0666
07574     55 32 0E F2 | 	cmp	local07, #85 wz
07578     E0 03 90 AD |  if_e	jmp	#LR__0667
0757c     75 32 0E F2 | 	cmp	local07, #117 wz
07580     E4 03 90 AD |  if_e	jmp	#LR__0668
07584     42 32 0E F2 | 	cmp	local07, #66 wz
07588     EC 03 90 AD |  if_e	jmp	#LR__0669
0758c     95 32 0E F2 | 	cmp	local07, #149 wz
07590     F4 03 90 AD |  if_e	jmp	#LR__0670
07594     AC 32 0E F2 | 	cmp	local07, #172 wz
07598     14 05 90 AD |  if_e	jmp	#LR__0692
0759c     81 32 0E F2 | 	cmp	local07, #129 wz
075a0     F0 03 90 AD |  if_e	jmp	#LR__0671
075a4     44 32 0E F2 | 	cmp	local07, #68 wz
075a8     F4 03 90 AD |  if_e	jmp	#LR__0672
075ac     BC 32 0E F2 | 	cmp	local07, #188 wz
075b0     F8 03 90 AD |  if_e	jmp	#LR__0673
075b4     88 32 0E F2 | 	cmp	local07, #136 wz
075b8     F4 04 90 AD |  if_e	jmp	#LR__0692
075bc     B6 32 0E F2 | 	cmp	local07, #182 wz
075c0     F8 03 90 AD |  if_e	jmp	#LR__0674
075c4     92 32 0E F2 | 	cmp	local07, #146 wz
075c8     00 04 90 AD |  if_e	jmp	#LR__0675
075cc     BE 32 0E F2 | 	cmp	local07, #190 wz
075d0     98 05 90 AD |  if_e	jmp	#LR__0693
075d4     C7 32 0E F2 | 	cmp	local07, #199 wz
075d8     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
075dc     D0 04 90 AD |  if_e	jmp	#LR__0692
075e0     4D 32 0E F2 | 	cmp	local07, #77 wz
075e4     F0 03 90 AD |  if_e	jmp	#LR__0676
075e8     51 32 0E F2 | 	cmp	local07, #81 wz
075ec     F8 03 90 AD |  if_e	jmp	#LR__0677
075f0     8E 32 0E F2 | 	cmp	local07, #142 wz
075f4     00 04 90 AD |  if_e	jmp	#LR__0678
075f8     90 32 0E F2 | 	cmp	local07, #144 wz
075fc     04 04 90 AD |  if_e	jmp	#LR__0679
07600     8D 32 0E F2 | 	cmp	local07, #141 wz
07604     08 04 90 AD |  if_e	jmp	#LR__0680
07608     8C 32 0E F2 | 	cmp	local07, #140 wz
0760c     0C 04 90 AD |  if_e	jmp	#LR__0681
07610     91 32 0E F2 | 	cmp	local07, #145 wz
07614     10 04 90 AD |  if_e	jmp	#LR__0682
07618     8B 32 0E F2 | 	cmp	local07, #139 wz
0761c     14 04 90 AD |  if_e	jmp	#LR__0683
07620     8F 32 0E F2 | 	cmp	local07, #143 wz
07624     18 04 90 AD |  if_e	jmp	#LR__0684
07628     B2 32 0E F2 | 	cmp	local07, #178 wz
0762c     1C 04 90 AD |  if_e	jmp	#LR__0685
07630     6D 32 0E F2 | 	cmp	local07, #109 wz
07634     24 04 90 AD |  if_e	jmp	#LR__0686
07638     70 32 0E F2 | 	cmp	local07, #112 wz
0763c     70 04 90 AD |  if_e	jmp	#LR__0692
07640     56 32 0E F2 | 	cmp	local07, #86 wz
07644     20 04 90 AD |  if_e	jmp	#LR__0687
07648     57 32 0E F2 | 	cmp	local07, #87 wz
0764c     60 04 90 AD |  if_e	jmp	#LR__0692
07650     79 32 0E F2 | 	cmp	local07, #121 wz
07654     1C 04 90 AD |  if_e	jmp	#LR__0688
07658     77 32 0E F2 | 	cmp	local07, #119 wz
0765c     20 04 90 AD |  if_e	jmp	#LR__0689
07660     78 32 0E F2 | 	cmp	local07, #120 wz
07664     24 04 90 AD |  if_e	jmp	#LR__0690
07668     01 00 00 FF 
0766c     04 32 0E F2 | 	cmp	local07, ##516 wz
07670     24 04 90 AD |  if_e	jmp	#LR__0691
07674     F4 04 90 FD | 	jmp	#LR__0693
07678                 | LR__0613
07678     40 0B B0 FD | 	call	#_compile_fun_2p
0767c     FD 30 02 F6 | 	mov	local06, result1
07680     2C 04 90 FD | 	jmp	#LR__0692
07684                 | LR__0614
07684     04 0E B0 FD | 	call	#_compile_fun_varp
07688     FD 34 02 F6 | 	mov	local08, result1
0768c     FE 30 02 F6 | 	mov	local06, result2
07690     1C 04 90 FD | 	jmp	#LR__0692
07694                 | LR__0615
07694     F4 0D B0 FD | 	call	#_compile_fun_varp
07698     FD 34 02 F6 | 	mov	local08, result1
0769c     FE 30 02 F6 | 	mov	local06, result2
076a0     0C 04 90 FD | 	jmp	#LR__0692
076a4                 | LR__0616
076a4     E4 0D B0 FD | 	call	#_compile_fun_varp
076a8     FD 34 02 F6 | 	mov	local08, result1
076ac     FE 30 02 F6 | 	mov	local06, result2
076b0     FC 03 90 FD | 	jmp	#LR__0692
076b4                 | LR__0617
076b4                 | ' return expr()
076b4     B8 3C B0 FD | 	call	#_expr
076b8     FD 30 02 F6 | 	mov	local06, result1
076bc     F0 03 90 FD | 	jmp	#LR__0692
076c0                 | LR__0618
076c0     C8 0D B0 FD | 	call	#_compile_fun_varp
076c4     FD 34 02 F6 | 	mov	local08, result1
076c8     FE 30 02 F6 | 	mov	local06, result2
076cc     E0 03 90 FD | 	jmp	#LR__0692
076d0                 | LR__0619
076d0                 | ' return expr()
076d0     9C 3C B0 FD | 	call	#_expr
076d4     FD 30 02 F6 | 	mov	local06, result1
076d8     D4 03 90 FD | 	jmp	#LR__0692
076dc                 | LR__0620
076dc                 | ' return expr()
076dc     90 3C B0 FD | 	call	#_expr
076e0     FD 30 02 F6 | 	mov	local06, result1
076e4     C8 03 90 FD | 	jmp	#LR__0692
076e8                 | LR__0621
076e8                 | ' return expr()
076e8     84 3C B0 FD | 	call	#_expr
076ec     FD 30 02 F6 | 	mov	local06, result1
076f0     BC 03 90 FD | 	jmp	#LR__0692
076f4                 | LR__0622
076f4     94 0D B0 FD | 	call	#_compile_fun_varp
076f8     FD 34 02 F6 | 	mov	local08, result1
076fc     FE 30 02 F6 | 	mov	local06, result2
07700     AC 03 90 FD | 	jmp	#LR__0692
07704                 | LR__0623
07704     B4 0A B0 FD | 	call	#_compile_fun_2p
07708     FD 30 02 F6 | 	mov	local06, result1
0770c     A0 03 90 FD | 	jmp	#LR__0692
07710                 | LR__0624
07710     A8 0A B0 FD | 	call	#_compile_fun_2p
07714     FD 30 02 F6 | 	mov	local06, result1
07718     94 03 90 FD | 	jmp	#LR__0692
0771c                 | LR__0625
0771c     9C 0A B0 FD | 	call	#_compile_fun_2p
07720     FD 30 02 F6 | 	mov	local06, result1
07724     88 03 90 FD | 	jmp	#LR__0692
07728                 | LR__0626
07728     90 0A B0 FD | 	call	#_compile_fun_2p
0772c     FD 30 02 F6 | 	mov	local06, result1
07730     7C 03 90 FD | 	jmp	#LR__0692
07734                 | LR__0627
07734                 | ' return expr()
07734     38 3C B0 FD | 	call	#_expr
07738     FD 30 02 F6 | 	mov	local06, result1
0773c     70 03 90 FD | 	jmp	#LR__0692
07740                 | LR__0628
07740     48 0D B0 FD | 	call	#_compile_fun_varp
07744     FD 34 02 F6 | 	mov	local08, result1
07748     FE 30 02 F6 | 	mov	local06, result2
0774c     60 03 90 FD | 	jmp	#LR__0692
07750                 | LR__0629
07750     38 0D B0 FD | 	call	#_compile_fun_varp
07754     FD 34 02 F6 | 	mov	local08, result1
07758     FE 30 02 F6 | 	mov	local06, result2
0775c     50 03 90 FD | 	jmp	#LR__0692
07760                 | LR__0630
07760     28 0D B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     40 03 90 FD | 	jmp	#LR__0692
07770                 | LR__0631
07770                 | ' return expr()
07770     FC 3B B0 FD | 	call	#_expr
07774     FD 30 02 F6 | 	mov	local06, result1
07778     34 03 90 FD | 	jmp	#LR__0692
0777c                 | LR__0632
0777c     30 22 B0 FD | 	call	#_compile_dim
07780     FD 30 02 F6 | 	mov	local06, result1
07784     E4 03 90 FD | 	jmp	#LR__0693
07788                 | LR__0633
07788     00 0D B0 FD | 	call	#_compile_fun_varp
0778c     FD 34 02 F6 | 	mov	local08, result1
07790     FE 30 02 F6 | 	mov	local06, result2
07794     18 03 90 FD | 	jmp	#LR__0692
07798                 | LR__0634
07798     20 0A B0 FD | 	call	#_compile_fun_2p
0779c     FD 30 02 F6 | 	mov	local06, result1
077a0     0C 03 90 FD | 	jmp	#LR__0692
077a4                 | LR__0635
077a4     E4 0C B0 FD | 	call	#_compile_fun_varp
077a8     FD 34 02 F6 | 	mov	local08, result1
077ac     FE 30 02 F6 | 	mov	local06, result2
077b0     FC 02 90 FD | 	jmp	#LR__0692
077b4                 | LR__0636
077b4     17 13 02 F6 | 	mov	arg01, local05
077b8     BC 20 B0 FD | 	call	#_compile_else
077bc     FD 30 02 F6 | 	mov	local06, result1
077c0     A8 03 90 FD | 	jmp	#LR__0693
077c4                 | LR__0637
077c4     C4 0C B0 FD | 	call	#_compile_fun_varp
077c8     FD 34 02 F6 | 	mov	local08, result1
077cc     FE 30 02 F6 | 	mov	local06, result2
077d0     DC 02 90 FD | 	jmp	#LR__0692
077d4                 | LR__0638
077d4     B4 0C B0 FD | 	call	#_compile_fun_varp
077d8     FD 34 02 F6 | 	mov	local08, result1
077dc     FE 30 02 F6 | 	mov	local06, result2
077e0     CC 02 90 FD | 	jmp	#LR__0692
077e4                 | LR__0639
077e4     01 2E 16 F2 | 	cmp	local05, #1 wc
077e8     08 00 90 CD |  if_b	jmp	#LR__0640
077ec     D4 2D B0 FD | 	call	#_compile_goto
077f0     78 03 90 FD | 	jmp	#LR__0693
077f4                 | LR__0640
077f4     19 12 06 F6 | 	mov	arg01, #25
077f8     00 14 06 F6 | 	mov	arg02, #0
077fc     70 8D B1 FD | 	call	#_printerror
07800     68 03 90 FD | 	jmp	#LR__0693
07804                 | LR__0641
07804     01 2E 16 F2 | 	cmp	local05, #1 wc
07808     08 00 90 CD |  if_b	jmp	#LR__0642
0780c     50 2D B0 FD | 	call	#_compile_gosub
07810     58 03 90 FD | 	jmp	#LR__0693
07814                 | LR__0642
07814     19 12 06 F6 | 	mov	arg01, #25
07818     00 14 06 F6 | 	mov	arg02, #0
0781c     50 8D B1 FD | 	call	#_printerror
07820     48 03 90 FD | 	jmp	#LR__0693
07824                 | LR__0643
07824     64 0C B0 FD | 	call	#_compile_fun_varp
07828     FD 34 02 F6 | 	mov	local08, result1
0782c     FE 30 02 F6 | 	mov	local06, result2
07830     7C 02 90 FD | 	jmp	#LR__0692
07834                 | LR__0644
07834     FC 0A B0 FD | 	call	#_compile_fun_4p
07838     FD 30 02 F6 | 	mov	local06, result1
0783c     70 02 90 FD | 	jmp	#LR__0692
07840                 | LR__0645
07840                 | ' return expr()
07840     2C 3B B0 FD | 	call	#_expr
07844     FD 30 02 F6 | 	mov	local06, result1
07848     64 02 90 FD | 	jmp	#LR__0692
0784c                 | LR__0646
0784c     34 28 B0 FD | 	call	#_compile_for
07850     FD 30 02 F6 | 	mov	local06, result1
07854     14 03 90 FD | 	jmp	#LR__0693
07858                 | LR__0647
07858     30 0C B0 FD | 	call	#_compile_fun_varp
0785c     FD 34 02 F6 | 	mov	local08, result1
07860     FE 30 02 F6 | 	mov	local06, result2
07864     48 02 90 FD | 	jmp	#LR__0692
07868                 | LR__0648
07868     17 13 02 F6 | 	mov	arg01, local05
0786c     80 1E B0 FD | 	call	#_compile_if
07870     FD 30 02 F6 | 	mov	local06, result1
07874     F4 02 90 FD | 	jmp	#LR__0693
07878                 | LR__0649
07878                 | ' return expr()
07878     F4 3A B0 FD | 	call	#_expr
0787c     FD 30 02 F6 | 	mov	local06, result1
07880     2C 02 90 FD | 	jmp	#LR__0692
07884                 | LR__0650
07884     D0 0D B0 FD | 	call	#_compile_input
07888     FD 34 02 F6 | 	mov	local08, result1
0788c     FE 30 02 F6 | 	mov	local06, result2
07890     1C 02 90 FD | 	jmp	#LR__0692
07894                 | LR__0651
07894                 | ' return expr()
07894     D8 3A B0 FD | 	call	#_expr
07898     FD 30 02 F6 | 	mov	local06, result1
0789c     10 02 90 FD | 	jmp	#LR__0692
078a0                 | LR__0652
078a0     E8 0B B0 FD | 	call	#_compile_fun_varp
078a4     FD 34 02 F6 | 	mov	local08, result1
078a8     FE 30 02 F6 | 	mov	local06, result2
078ac     00 02 90 FD | 	jmp	#LR__0692
078b0                 | LR__0653
078b0     D8 0B B0 FD | 	call	#_compile_fun_varp
078b4     FD 34 02 F6 | 	mov	local08, result1
078b8     FE 30 02 F6 | 	mov	local06, result2
078bc     F0 01 90 FD | 	jmp	#LR__0692
078c0                 | LR__0654
078c0     F8 08 B0 FD | 	call	#_compile_fun_2p
078c4     FD 30 02 F6 | 	mov	local06, result1
078c8     E4 01 90 FD | 	jmp	#LR__0692
078cc                 | LR__0655
078cc                 | ' return expr()
078cc     A0 3A B0 FD | 	call	#_expr
078d0     FD 30 02 F6 | 	mov	local06, result1
078d4     D8 01 90 FD | 	jmp	#LR__0692
078d8                 | LR__0656
078d8                 | ' return expr()
078d8     94 3A B0 FD | 	call	#_expr
078dc     FD 30 02 F6 | 	mov	local06, result1
078e0     CC 01 90 FD | 	jmp	#LR__0692
078e4                 | LR__0657
078e4                 | ' return expr()
078e4     88 3A B0 FD | 	call	#_expr
078e8     FD 30 02 F6 | 	mov	local06, result1
078ec     C0 01 90 FD | 	jmp	#LR__0692
078f0                 | LR__0658
078f0     D4 2A B0 FD | 	call	#_compile_next
078f4     FD 30 02 F6 | 	mov	local06, result1
078f8     70 02 90 FD | 	jmp	#LR__0693
078fc                 | LR__0659
078fc     B4 30 B0 FD | 	call	#_compile_on
07900     FD 30 02 F6 | 	mov	local06, result1
07904     64 02 90 FD | 	jmp	#LR__0693
07908                 | LR__0660
07908     38 09 B0 FD | 	call	#_compile_fun_3p
0790c     FD 30 02 F6 | 	mov	local06, result1
07910     9C 01 90 FD | 	jmp	#LR__0692
07914                 | LR__0661
07914                 | ' return expr()
07914     58 3A B0 FD | 	call	#_expr
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     90 01 90 FD | 	jmp	#LR__0692
07920                 | LR__0662
07920                 | ' return expr()
07920     4C 3A B0 FD | 	call	#_expr
07924     FD 30 02 F6 | 	mov	local06, result1
07928     84 01 90 FD | 	jmp	#LR__0692
0792c                 | LR__0663
0792c                 | ' return expr()
0792c     40 3A B0 FD | 	call	#_expr
07930     FD 30 02 F6 | 	mov	local06, result1
07934     78 01 90 FD | 	jmp	#LR__0692
07938                 | LR__0664
07938                 | ' return expr()
07938     34 3A B0 FD | 	call	#_expr
0793c     FD 30 02 F6 | 	mov	local06, result1
07940     6C 01 90 FD | 	jmp	#LR__0692
07944                 | LR__0665
07944     EC 09 B0 FD | 	call	#_compile_fun_4p
07948     FD 30 02 F6 | 	mov	local06, result1
0794c     60 01 90 FD | 	jmp	#LR__0692
07950                 | LR__0666
07950                 | ' return expr()
07950     1C 3A B0 FD | 	call	#_expr
07954     FD 30 02 F6 | 	mov	local06, result1
07958     54 01 90 FD | 	jmp	#LR__0692
0795c                 | LR__0667
0795c     5C 08 B0 FD | 	call	#_compile_fun_2p
07960     FD 30 02 F6 | 	mov	local06, result1
07964     48 01 90 FD | 	jmp	#LR__0692
07968                 | LR__0668
07968     20 0B B0 FD | 	call	#_compile_fun_varp
0796c     FD 34 02 F6 | 	mov	local08, result1
07970     FE 30 02 F6 | 	mov	local06, result2
07974     38 01 90 FD | 	jmp	#LR__0692
07978                 | LR__0669
07978     10 0B B0 FD | 	call	#_compile_fun_varp
0797c     FD 34 02 F6 | 	mov	local08, result1
07980     FE 30 02 F6 | 	mov	local06, result2
07984     28 01 90 FD | 	jmp	#LR__0692
07988                 | LR__0670
07988     30 08 B0 FD | 	call	#_compile_fun_2p
0798c     FD 30 02 F6 | 	mov	local06, result1
07990     1C 01 90 FD | 	jmp	#LR__0692
07994                 | LR__0671
07994     24 08 B0 FD | 	call	#_compile_fun_2p
07998     FD 30 02 F6 | 	mov	local06, result1
0799c     10 01 90 FD | 	jmp	#LR__0692
079a0                 | LR__0672
079a0     74 16 B0 FD | 	call	#_compile_print
079a4     FD 30 02 F6 | 	mov	local06, result1
079a8     C0 01 90 FD | 	jmp	#LR__0693
079ac                 | LR__0673
079ac     DC 0A B0 FD | 	call	#_compile_fun_varp
079b0     FD 34 02 F6 | 	mov	local08, result1
079b4     FE 30 02 F6 | 	mov	local06, result2
079b8     F4 00 90 FD | 	jmp	#LR__0692
079bc                 | LR__0674
079bc     A8 0B B0 FD | 	call	#_compile_read
079c0     FD 34 02 F6 | 	mov	local08, result1
079c4     FE 30 02 F6 | 	mov	local06, result2
079c8     E4 00 90 FD | 	jmp	#LR__0692
079cc                 | LR__0675
079cc                 | ' return expr()
079cc     A0 39 B0 FD | 	call	#_expr
079d0     FD 30 02 F6 | 	mov	local06, result1
079d4     D8 00 90 FD | 	jmp	#LR__0692
079d8                 | LR__0676
079d8     B0 0A B0 FD | 	call	#_compile_fun_varp
079dc     FD 34 02 F6 | 	mov	local08, result1
079e0     FE 30 02 F6 | 	mov	local06, result2
079e4     C8 00 90 FD | 	jmp	#LR__0692
079e8                 | LR__0677
079e8     A0 0A B0 FD | 	call	#_compile_fun_varp
079ec     FD 34 02 F6 | 	mov	local08, result1
079f0     FE 30 02 F6 | 	mov	local06, result2
079f4     B8 00 90 FD | 	jmp	#LR__0692
079f8                 | LR__0678
079f8     C0 07 B0 FD | 	call	#_compile_fun_2p
079fc     FD 30 02 F6 | 	mov	local06, result1
07a00     AC 00 90 FD | 	jmp	#LR__0692
07a04                 | LR__0679
07a04     B4 07 B0 FD | 	call	#_compile_fun_2p
07a08     FD 30 02 F6 | 	mov	local06, result1
07a0c     A0 00 90 FD | 	jmp	#LR__0692
07a10                 | LR__0680
07a10     A8 07 B0 FD | 	call	#_compile_fun_2p
07a14     FD 30 02 F6 | 	mov	local06, result1
07a18     94 00 90 FD | 	jmp	#LR__0692
07a1c                 | LR__0681
07a1c     9C 07 B0 FD | 	call	#_compile_fun_2p
07a20     FD 30 02 F6 | 	mov	local06, result1
07a24     88 00 90 FD | 	jmp	#LR__0692
07a28                 | LR__0682
07a28     90 07 B0 FD | 	call	#_compile_fun_2p
07a2c     FD 30 02 F6 | 	mov	local06, result1
07a30     7C 00 90 FD | 	jmp	#LR__0692
07a34                 | LR__0683
07a34     84 07 B0 FD | 	call	#_compile_fun_2p
07a38     FD 30 02 F6 | 	mov	local06, result1
07a3c     70 00 90 FD | 	jmp	#LR__0692
07a40                 | LR__0684
07a40     78 07 B0 FD | 	call	#_compile_fun_2p
07a44     FD 30 02 F6 | 	mov	local06, result1
07a48     64 00 90 FD | 	jmp	#LR__0692
07a4c                 | LR__0685
07a4c     3C 0A B0 FD | 	call	#_compile_fun_varp
07a50     FD 34 02 F6 | 	mov	local08, result1
07a54     FE 30 02 F6 | 	mov	local06, result2
07a58     54 00 90 FD | 	jmp	#LR__0692
07a5c                 | LR__0686
07a5c     E4 07 B0 FD | 	call	#_compile_fun_3p
07a60     FD 30 02 F6 | 	mov	local06, result1
07a64     48 00 90 FD | 	jmp	#LR__0692
07a68                 | LR__0687
07a68                 | ' return expr()
07a68     04 39 B0 FD | 	call	#_expr
07a6c     FD 30 02 F6 | 	mov	local06, result1
07a70     3C 00 90 FD | 	jmp	#LR__0692
07a74                 | LR__0688
07a74     44 07 B0 FD | 	call	#_compile_fun_2p
07a78     FD 30 02 F6 | 	mov	local06, result1
07a7c     30 00 90 FD | 	jmp	#LR__0692
07a80                 | LR__0689
07a80     38 07 B0 FD | 	call	#_compile_fun_2p
07a84     FD 30 02 F6 | 	mov	local06, result1
07a88     24 00 90 FD | 	jmp	#LR__0692
07a8c                 | LR__0690
07a8c     2C 07 B0 FD | 	call	#_compile_fun_2p
07a90     FD 30 02 F6 | 	mov	local06, result1
07a94     18 00 90 FD | 	jmp	#LR__0692
07a98                 | LR__0691
07a98     1C 13 B0 FD | 	call	#_compile_array_assign
07a9c     FD 30 02 F6 | 	mov	local06, result1
07aa0     0E 30 0E F2 | 	cmp	local06, #14 wz
07aa4     C4 00 90 5D |  if_ne	jmp	#LR__0693
07aa8                 | ' return 23
07aa8     17 30 06 F6 | 	mov	local06, #23
07aac     BC 00 90 FD | 	jmp	#LR__0693
07ab0                 | ' return 23
07ab0                 | LR__0692
07ab0     19 2B 02 F6 | 	mov	local03, local07
07ab4     1A 27 02 F6 | 	mov	local01, local08
07ab8     13 37 02 F6 | 	mov	local09, local01
07abc     14 39 02 F6 | 	mov	local10, local02
07ac0     15 33 02 F6 | 	mov	local07, local03
07ac4     4A 00 00 FF 
07ac8     7C E4 05 F1 | 	add	objptr, ##38012
07acc     F2 26 02 FB | 	rdlong	local01, objptr
07ad0     13 35 02 F6 | 	mov	local08, local01
07ad4     01 34 66 F0 | 	shl	local08, #1
07ad8     13 35 02 F1 | 	add	local08, local01
07adc     02 34 66 F0 | 	shl	local08, #2
07ae0     03 00 00 FF 
07ae4     00 E4 85 F1 | 	sub	objptr, ##1536
07ae8     F2 34 02 F1 | 	add	local08, objptr
07aec     1A 37 62 FC | 	wrlong	local09, local08
07af0     03 00 00 FF 
07af4     00 E4 05 F1 | 	add	objptr, ##1536
07af8     F2 26 02 FB | 	rdlong	local01, objptr
07afc     13 37 02 F6 | 	mov	local09, local01
07b00     01 36 66 F0 | 	shl	local09, #1
07b04     13 37 02 F1 | 	add	local09, local01
07b08     02 36 66 F0 | 	shl	local09, #2
07b0c     03 00 00 FF 
07b10     00 E4 85 F1 | 	sub	objptr, ##1536
07b14     F2 36 02 F1 | 	add	local09, objptr
07b18     04 36 06 F1 | 	add	local09, #4
07b1c     1B 39 62 FC | 	wrlong	local10, local09
07b20     03 00 00 FF 
07b24     00 E4 05 F1 | 	add	objptr, ##1536
07b28     F2 26 02 FB | 	rdlong	local01, objptr
07b2c     13 39 02 F6 | 	mov	local10, local01
07b30     01 38 66 F0 | 	shl	local10, #1
07b34     13 39 02 F1 | 	add	local10, local01
07b38     02 38 66 F0 | 	shl	local10, #2
07b3c     03 00 00 FF 
07b40     00 E4 85 F1 | 	sub	objptr, ##1536
07b44     F2 38 02 F1 | 	add	local10, objptr
07b48     08 38 06 F1 | 	add	local10, #8
07b4c     1C 33 62 FC | 	wrlong	local07, local10
07b50     03 00 00 FF 
07b54     00 E4 05 F1 | 	add	objptr, ##1536
07b58     F2 36 02 FB | 	rdlong	local09, objptr
07b5c     01 36 06 F1 | 	add	local09, #1
07b60     F2 36 62 FC | 	wrlong	local09, objptr
07b64     4A 00 00 FF 
07b68     7C E4 85 F1 | 	sub	objptr, ##38012
07b6c                 | LR__0693
07b6c                 | ' 
07b6c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07b6c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07b6c     03 2C 0E F2 | 	cmp	local04, #3 wz
07b70     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07b74     38 00 90 5D |  if_ne	jmp	#LR__0694
07b78     4A 00 00 FF 
07b7c     7C E4 05 F1 | 	add	objptr, ##38012
07b80     F2 38 02 FB | 	rdlong	local10, objptr
07b84     1C 27 02 F6 | 	mov	local01, local10
07b88     01 26 66 F0 | 	shl	local01, #1
07b8c     1C 27 02 F1 | 	add	local01, local10
07b90     02 26 66 F0 | 	shl	local01, #2
07b94     03 00 00 FF 
07b98     00 E4 85 F1 | 	sub	objptr, ##1536
07b9c     F2 26 02 F1 | 	add	local01, objptr
07ba0     08 26 06 F1 | 	add	local01, #8
07ba4     13 FD 6B FC | 	wrlong	#510, local01
07ba8     47 00 00 FF 
07bac     7C E4 85 F1 | 	sub	objptr, ##36476
07bb0                 | LR__0694
07bb0                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07bb0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07bb0     4A 00 00 FF 
07bb4     7C E4 05 F1 | 	add	objptr, ##38012
07bb8     F2 26 02 FB | 	rdlong	local01, objptr
07bbc     4A 00 00 FF 
07bc0     7C E4 85 F1 | 	sub	objptr, ##38012
07bc4     97 58 48 FB | 	callpa	#(@LR__0697-@LR__0695)>>2,fcache_load_ptr_
07bc8                 | LR__0695
07bc8     13 39 02 F6 | 	mov	local10, local01
07bcc     01 38 66 F0 | 	shl	local10, #1
07bd0     13 39 02 F1 | 	add	local10, local01
07bd4     02 38 66 F0 | 	shl	local10, #2
07bd8     47 00 00 FF 
07bdc     7C E4 05 F1 | 	add	objptr, ##36476
07be0     F2 38 02 F1 | 	add	local10, objptr
07be4     08 38 06 F1 | 	add	local10, #8
07be8     1C 39 02 FB | 	rdlong	local10, local10
07bec     9B 38 0E F2 | 	cmp	local10, #155 wz
07bf0     47 00 00 FF 
07bf4     7C E4 85 F1 | 	sub	objptr, ##36476
07bf8     70 00 90 5D |  if_ne	jmp	#LR__0696
07bfc     13 37 02 F6 | 	mov	local09, local01
07c00     01 36 86 F1 | 	sub	local09, #1
07c04     1B 39 02 F6 | 	mov	local10, local09
07c08     01 38 66 F0 | 	shl	local10, #1
07c0c     1B 39 02 F1 | 	add	local10, local09
07c10     02 38 66 F0 | 	shl	local10, #2
07c14     47 00 00 FF 
07c18     7C E4 05 F1 | 	add	objptr, ##36476
07c1c     F2 38 02 F1 | 	add	local10, objptr
07c20     08 38 06 F1 | 	add	local10, #8
07c24     1C 39 02 FB | 	rdlong	local10, local10
07c28     11 38 0E F2 | 	cmp	local10, #17 wz
07c2c     47 00 00 FF 
07c30     7C E4 85 F1 | 	sub	objptr, ##36476
07c34     34 00 90 5D |  if_ne	jmp	#LR__0696
07c38     13 37 02 F6 | 	mov	local09, local01
07c3c     01 36 86 F1 | 	sub	local09, #1
07c40     1B 39 02 F6 | 	mov	local10, local09
07c44     01 38 66 F0 | 	shl	local10, #1
07c48     1B 39 02 F1 | 	add	local10, local09
07c4c     02 38 66 F0 | 	shl	local10, #2
07c50     47 00 00 FF 
07c54     7C E4 05 F1 | 	add	objptr, ##36476
07c58     F2 38 02 F1 | 	add	local10, objptr
07c5c     08 38 06 F1 | 	add	local10, #8
07c60     1C 25 68 FC | 	wrlong	#18, local10
07c64     47 00 00 FF 
07c68     7C E4 85 F1 | 	sub	objptr, ##36476
07c6c                 | LR__0696
07c6c     01 26 86 F1 | 	sub	local01, #1
07c70     01 26 56 F2 | 	cmps	local01, #1 wc
07c74     50 FF 9F 3D |  if_ae	jmp	#LR__0695
07c78                 | LR__0697
07c78                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07c78                 | ' return err
07c78     18 FB 01 F6 | 	mov	result1, local06
07c7c     A7 F0 03 F6 | 	mov	ptra, fp
07c80     B2 00 A0 FD | 	call	#popregs_
07c84                 | _compile_immediate_ret
07c84     2D 00 64 FD | 	ret
07c88                 | 
07c88                 | ' 
07c88                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07c88                 | ' 
07c88                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07c88                 | _compile_immediate_assign
07c88     0C 4A 05 F6 | 	mov	COUNT_, #12
07c8c     A8 00 A0 FD | 	call	#pushregs_
07c90     09 2D 02 F6 | 	mov	local04, arg01
07c94     FF 2A 06 F6 | 	mov	local03, #255
07c98     01 2E 66 F6 | 	neg	local05, #1
07c9c     00 30 06 F6 | 	mov	local06, #0
07ca0                 | ' 
07ca0                 | ' t1.result_type=result_error : t1.result.uresult=0
07ca0                 | ' i=-1: j=-1 : err=0
07ca0                 | ' 
07ca0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07ca0     02 2C 0E F2 | 	cmp	local04, #2 wz
07ca4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07ca8     35 00 00 AF 
07cac     0C E4 05 A1 |  if_e	add	objptr, ##27148
07cb0     F2 32 02 AB |  if_e	rdlong	local07, objptr
07cb4     02 00 00 AF 
07cb8     38 E4 05 A1 |  if_e	add	objptr, ##1080
07cbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
07cc0     37 00 00 AF 
07cc4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07cc8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07cc8     04 2C 0E F2 | 	cmp	local04, #4 wz
07ccc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07cd0     2C 00 90 5D |  if_ne	jmp	#LR__0700
07cd4     35 00 00 FF 
07cd8     14 E4 05 F1 | 	add	objptr, ##27156
07cdc     F2 32 02 FB | 	rdlong	local07, objptr
07ce0     02 00 00 FF 
07ce4     30 E4 05 F1 | 	add	objptr, ##1072
07ce8     F2 06 68 FC | 	wrlong	#3, objptr
07cec     13 00 00 FF 
07cf0     38 E4 05 F1 | 	add	objptr, ##9784
07cf4     F2 04 68 FC | 	wrlong	#2, objptr
07cf8     4A 00 00 FF 
07cfc     7C E4 85 F1 | 	sub	objptr, ##38012
07d00                 | LR__0700
07d00                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07d00     05 2C 0E F2 | 	cmp	local04, #5 wz
07d04     3C 00 90 5D |  if_ne	jmp	#LR__0701
07d08     37 00 00 FF 
07d0c     44 E4 05 F1 | 	add	objptr, ##28228
07d10     F2 FA 01 FB | 	rdlong	result1, objptr
07d14     FD 32 02 F6 | 	mov	local07, result1
07d18     03 32 66 F0 | 	shl	local07, #3
07d1c     02 00 00 FF 
07d20     38 E4 85 F1 | 	sub	objptr, ##1080
07d24     F2 32 02 F1 | 	add	local07, objptr
07d28     19 33 02 FB | 	rdlong	local07, local07
07d2c     02 FA 05 F1 | 	add	result1, #2
07d30     02 00 00 FF 
07d34     38 E4 05 F1 | 	add	objptr, ##1080
07d38     F2 FA 61 FC | 	wrlong	result1, objptr
07d3c     37 00 00 FF 
07d40     44 E4 85 F1 | 	sub	objptr, ##28228
07d44                 | LR__0701
07d44     19 13 02 F6 | 	mov	arg01, local07
07d48     01 14 06 F6 | 	mov	arg02, #1
07d4c     C8 E2 B1 FD | 	call	#__system__Right_S
07d50     FD 34 02 F6 | 	mov	local08, result1
07d54     18 36 B0 FD | 	call	#_expr
07d58                 | ' 
07d58                 | ' suffix2$=right$(varname2$,1)
07d58                 | ' expr()
07d58                 | ' if varnum>0 then					' try to find a variable
07d58     35 00 00 FF 
07d5c     08 E4 05 F1 | 	add	objptr, ##27144
07d60     F2 36 02 FB | 	rdlong	local09, objptr
07d64     35 00 00 FF 
07d68     08 E4 85 F1 | 	sub	objptr, ##27144
07d6c     01 36 56 F2 | 	cmps	local09, #1 wc
07d70     58 00 90 CD |  if_b	jmp	#LR__0704
07d74                 | '   for i=0 to varnum-1
07d74     00 38 06 F6 | 	mov	local10, #0
07d78     35 00 00 FF 
07d7c     08 E4 05 F1 | 	add	objptr, ##27144
07d80     F2 3A 02 FB | 	rdlong	local11, objptr
07d84     35 00 00 FF 
07d88     08 E4 85 F1 | 	sub	objptr, ##27144
07d8c                 | LR__0702
07d8c     1D 39 52 F2 | 	cmps	local10, local11 wc
07d90     38 00 90 3D |  if_ae	jmp	#LR__0703
07d94                 | '     if variables(i).name=varname2$ then j=i : exit
07d94     1C 37 02 F6 | 	mov	local09, local10
07d98     04 36 66 F0 | 	shl	local09, #4
07d9c     14 00 00 FF 
07da0     F8 E5 05 F1 | 	add	objptr, ##10744
07da4     F2 36 02 F1 | 	add	local09, objptr
07da8     1B 13 02 FB | 	rdlong	arg01, local09
07dac     19 15 02 F6 | 	mov	arg02, local07
07db0     14 00 00 FF 
07db4     F8 E5 85 F1 | 	sub	objptr, ##10744
07db8     80 C1 B1 FD | 	call	#__system___string_cmp
07dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
07dc0     1C 2F 02 A6 |  if_e	mov	local05, local10
07dc4     01 38 06 51 |  if_ne	add	local10, #1
07dc8     C0 FF 9F 5D |  if_ne	jmp	#LR__0702
07dcc                 | LR__0703
07dcc                 | LR__0704
07dcc                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07dcc     FF FF 7F FF 
07dd0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07dd4     60 00 90 5D |  if_ne	jmp	#LR__0705
07dd8     35 00 00 FF 
07ddc     08 E4 05 F1 | 	add	objptr, ##27144
07de0     F2 36 02 FB | 	rdlong	local09, objptr
07de4     35 00 00 FF 
07de8     08 E4 85 F1 | 	sub	objptr, ##27144
07dec     02 00 00 FF 
07df0     00 36 56 F2 | 	cmps	local09, ##1024 wc
07df4     40 00 90 3D |  if_ae	jmp	#LR__0705
07df8     35 00 00 FF 
07dfc     08 E4 05 F1 | 	add	objptr, ##27144
07e00     F2 3A 02 FB | 	rdlong	local11, objptr
07e04     04 3A 66 F0 | 	shl	local11, #4
07e08     20 00 00 FF 
07e0c     10 E4 85 F1 | 	sub	objptr, ##16400
07e10     F2 3A 02 F1 | 	add	local11, objptr
07e14     1D 33 62 FC | 	wrlong	local07, local11
07e18     20 00 00 FF 
07e1c     10 E4 05 F1 | 	add	objptr, ##16400
07e20     F2 36 02 FB | 	rdlong	local09, objptr
07e24     1B 2F 02 F6 | 	mov	local05, local09
07e28     01 36 06 F1 | 	add	local09, #1
07e2c     F2 36 62 FC | 	wrlong	local09, objptr
07e30     35 00 00 FF 
07e34     08 E4 85 F1 | 	sub	objptr, ##27144
07e38                 | LR__0705
07e38                 | ' if varnum>=maxvars then
07e38     35 00 00 FF 
07e3c     08 E4 05 F1 | 	add	objptr, ##27144
07e40     F2 36 02 FB | 	rdlong	local09, objptr
07e44     35 00 00 FF 
07e48     08 E4 85 F1 | 	sub	objptr, ##27144
07e4c     02 00 00 FF 
07e50     00 36 56 F2 | 	cmps	local09, ##1024 wc
07e54     2D 30 06 36 |  if_ae	mov	local06, #45
07e58     C8 01 90 3D |  if_ae	jmp	#LR__0710
07e5c     17 27 02 F6 | 	mov	local01, local05
07e60     17 2A 06 F6 | 	mov	local03, #23
07e64     13 37 02 F6 | 	mov	local09, local01
07e68     14 3D 02 F6 | 	mov	local12, local02
07e6c     15 27 02 F6 | 	mov	local01, local03
07e70     4A 00 00 FF 
07e74     7C E4 05 F1 | 	add	objptr, ##38012
07e78     F2 3A 02 FB | 	rdlong	local11, objptr
07e7c     1D 39 02 F6 | 	mov	local10, local11
07e80     01 38 66 F0 | 	shl	local10, #1
07e84     1D 39 02 F1 | 	add	local10, local11
07e88     02 38 66 F0 | 	shl	local10, #2
07e8c     03 00 00 FF 
07e90     00 E4 85 F1 | 	sub	objptr, ##1536
07e94     F2 38 02 F1 | 	add	local10, objptr
07e98     1C 37 62 FC | 	wrlong	local09, local10
07e9c     03 00 00 FF 
07ea0     00 E4 05 F1 | 	add	objptr, ##1536
07ea4     F2 36 02 FB | 	rdlong	local09, objptr
07ea8     1B 3B 02 F6 | 	mov	local11, local09
07eac     01 3A 66 F0 | 	shl	local11, #1
07eb0     1B 3B 02 F1 | 	add	local11, local09
07eb4     02 3A 66 F0 | 	shl	local11, #2
07eb8     03 00 00 FF 
07ebc     00 E4 85 F1 | 	sub	objptr, ##1536
07ec0     F2 3A 02 F1 | 	add	local11, objptr
07ec4     04 3A 06 F1 | 	add	local11, #4
07ec8     1D 3D 62 FC | 	wrlong	local12, local11
07ecc     03 00 00 FF 
07ed0     00 E4 05 F1 | 	add	objptr, ##1536
07ed4     F2 36 02 FB | 	rdlong	local09, objptr
07ed8     1B 3D 02 F6 | 	mov	local12, local09
07edc     01 3C 66 F0 | 	shl	local12, #1
07ee0     1B 3D 02 F1 | 	add	local12, local09
07ee4     02 3C 66 F0 | 	shl	local12, #2
07ee8     03 00 00 FF 
07eec     00 E4 85 F1 | 	sub	objptr, ##1536
07ef0     F2 3C 02 F1 | 	add	local12, objptr
07ef4     08 3C 06 F1 | 	add	local12, #8
07ef8     1E 27 62 FC | 	wrlong	local01, local12
07efc     03 00 00 FF 
07f00     00 E4 05 F1 | 	add	objptr, ##1536
07f04     F2 36 02 FB | 	rdlong	local09, objptr
07f08     01 36 06 F1 | 	add	local09, #1
07f0c     F2 36 62 FC | 	wrlong	local09, objptr
07f10     4A 00 00 FF 
07f14     7C E4 85 F1 | 	sub	objptr, ##38012
07f18                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07f18                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07f18                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07f18     03 2C 0E F2 | 	cmp	local04, #3 wz
07f1c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07f20     38 00 90 5D |  if_ne	jmp	#LR__0706
07f24     4A 00 00 FF 
07f28     7C E4 05 F1 | 	add	objptr, ##38012
07f2c     F2 3C 02 FB | 	rdlong	local12, objptr
07f30     1E 27 02 F6 | 	mov	local01, local12
07f34     01 26 66 F0 | 	shl	local01, #1
07f38     1E 27 02 F1 | 	add	local01, local12
07f3c     02 26 66 F0 | 	shl	local01, #2
07f40     03 00 00 FF 
07f44     00 E4 85 F1 | 	sub	objptr, ##1536
07f48     F2 26 02 F1 | 	add	local01, objptr
07f4c     08 26 06 F1 | 	add	local01, #8
07f50     13 FD 6B FC | 	wrlong	#510, local01
07f54     47 00 00 FF 
07f58     7C E4 85 F1 | 	sub	objptr, ##36476
07f5c                 | LR__0706
07f5c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07f5c     4A 00 00 FF 
07f60     7C E4 05 F1 | 	add	objptr, ##38012
07f64     F2 38 02 FB | 	rdlong	local10, objptr
07f68     4A 00 00 FF 
07f6c     7C E4 85 F1 | 	sub	objptr, ##38012
07f70     97 58 48 FB | 	callpa	#(@LR__0709-@LR__0707)>>2,fcache_load_ptr_
07f74                 | LR__0707
07f74     1C 3D 02 F6 | 	mov	local12, local10
07f78     01 3C 66 F0 | 	shl	local12, #1
07f7c     1C 3D 02 F1 | 	add	local12, local10
07f80     02 3C 66 F0 | 	shl	local12, #2
07f84     47 00 00 FF 
07f88     7C E4 05 F1 | 	add	objptr, ##36476
07f8c     F2 3C 02 F1 | 	add	local12, objptr
07f90     08 3C 06 F1 | 	add	local12, #8
07f94     1E 3D 02 FB | 	rdlong	local12, local12
07f98     9B 3C 0E F2 | 	cmp	local12, #155 wz
07f9c     47 00 00 FF 
07fa0     7C E4 85 F1 | 	sub	objptr, ##36476
07fa4     70 00 90 5D |  if_ne	jmp	#LR__0708
07fa8     1C 3D 02 F6 | 	mov	local12, local10
07fac     01 3C 86 F1 | 	sub	local12, #1
07fb0     1E 27 02 F6 | 	mov	local01, local12
07fb4     01 26 66 F0 | 	shl	local01, #1
07fb8     1E 27 02 F1 | 	add	local01, local12
07fbc     02 26 66 F0 | 	shl	local01, #2
07fc0     47 00 00 FF 
07fc4     7C E4 05 F1 | 	add	objptr, ##36476
07fc8     F2 26 02 F1 | 	add	local01, objptr
07fcc     08 26 06 F1 | 	add	local01, #8
07fd0     13 27 02 FB | 	rdlong	local01, local01
07fd4     11 26 0E F2 | 	cmp	local01, #17 wz
07fd8     47 00 00 FF 
07fdc     7C E4 85 F1 | 	sub	objptr, ##36476
07fe0     34 00 90 5D |  if_ne	jmp	#LR__0708
07fe4     1C 3D 02 F6 | 	mov	local12, local10
07fe8     01 3C 86 F1 | 	sub	local12, #1
07fec     1E 27 02 F6 | 	mov	local01, local12
07ff0     01 26 66 F0 | 	shl	local01, #1
07ff4     1E 27 02 F1 | 	add	local01, local12
07ff8     02 26 66 F0 | 	shl	local01, #2
07ffc     47 00 00 FF 
08000     7C E4 05 F1 | 	add	objptr, ##36476
08004     F2 26 02 F1 | 	add	local01, objptr
08008     08 26 06 F1 | 	add	local01, #8
0800c     13 25 68 FC | 	wrlong	#18, local01
08010     47 00 00 FF 
08014     7C E4 85 F1 | 	sub	objptr, ##36476
08018                 | LR__0708
08018     01 38 86 F1 | 	sub	local10, #1
0801c     01 38 56 F2 | 	cmps	local10, #1 wc
08020     50 FF 9F 3D |  if_ae	jmp	#LR__0707
08024                 | LR__0709
08024                 | LR__0710
08024                 | ' return err
08024     18 FB 01 F6 | 	mov	result1, local06
08028     A7 F0 03 F6 | 	mov	ptra, fp
0802c     B2 00 A0 FD | 	call	#popregs_
08030                 | _compile_immediate_assign_ret
08030     2D 00 64 FD | 	ret
08034                 | 
08034                 | ' 
08034                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08034                 | ' 
08034                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08034                 | _compile
08034     03 4A 05 F6 | 	mov	COUNT_, #3
08038     A8 00 A0 FD | 	call	#pushregs_
0803c     09 27 02 F6 | 	mov	local01, arg01
08040     0B 29 02 F6 | 	mov	local02, arg03
08044     47 00 00 FF 
08048     7C E4 05 F1 | 	add	objptr, ##36476
0804c     F2 26 62 FC | 	wrlong	local01, objptr
08050     04 E4 05 F1 | 	add	objptr, #4
08054     F2 14 62 FC | 	wrlong	arg02, objptr
08058     47 00 00 FF 
0805c     80 E4 85 F1 | 	sub	objptr, ##36480
08060     14 13 02 F6 | 	mov	arg01, local02
08064     01 12 06 F1 | 	add	arg01, #1
08068     13 15 02 F6 | 	mov	arg02, local01
0806c     6C F2 BF FD | 	call	#_compile_immediate
08070     FD 2A 0A F6 | 	mov	local03, result1 wz
08074                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08074                 | ' ucompiledline(0)=alinemajor
08074                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08074                 | ' 
08074                 | ' ' cont: 
08074                 | ' ' 0 - this is the first part of the line that will continue
08074                 | ' ' 1 - this is the continuation of the line
08074                 | ' ' 2 - this is the last continued line
08074                 | ' ' 3 - this is the one and only part
08074                 | ' 
08074                 | ' err=compile_immediate(cont+1,alinemajor) 
08074                 | ' if err=0 andalso alinemajor>0 then
08074     74 00 90 5D |  if_ne	jmp	#LR__0725
08078     01 26 16 F2 | 	cmp	local01, #1 wc
0807c     6C 00 90 CD |  if_b	jmp	#LR__0725
08080                 | '   if cont=3 orelse cont=2 then 
08080     03 28 0E F2 | 	cmp	local02, #3 wz
08084     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08088     60 00 90 5D |  if_ne	jmp	#LR__0724
0808c                 | '     if alinemajor >lastline then 
0808c     4A 00 00 FF 
08090     8C E4 05 F1 | 	add	objptr, ##38028
08094     F2 14 02 FB | 	rdlong	arg02, objptr
08098     4A 00 00 FF 
0809c     8C E4 85 F1 | 	sub	objptr, ##38028
080a0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080a4     0C 00 90 ED |  if_be	jmp	#LR__0720
080a8     13 13 02 F6 | 	mov	arg01, local01
080ac     64 F1 BF FD | 	call	#_add_line_at_end
080b0     38 00 90 FD | 	jmp	#LR__0723
080b4                 | LR__0720
080b4     13 13 02 F6 | 	mov	arg01, local01
080b8     28 EB BF FD | 	call	#_deleteline
080bc                 | '       deleteline(alinemajor)  
080bc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
080bc     4A 00 00 FF 
080c0     8C E4 05 F1 | 	add	objptr, ##38028
080c4     F2 14 02 FB | 	rdlong	arg02, objptr
080c8     4A 00 00 FF 
080cc     8C E4 85 F1 | 	sub	objptr, ##38028
080d0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080d4     0C 00 90 ED |  if_be	jmp	#LR__0721
080d8     13 13 02 F6 | 	mov	arg01, local01
080dc     34 F1 BF FD | 	call	#_add_line_at_end
080e0     08 00 90 FD | 	jmp	#LR__0722
080e4                 | LR__0721
080e4     13 13 02 F6 | 	mov	arg01, local01
080e8     0C EF BF FD | 	call	#_insertline
080ec                 | LR__0722
080ec                 | LR__0723
080ec                 | LR__0724
080ec                 | LR__0725
080ec                 | ' return err
080ec     15 FB 01 F6 | 	mov	result1, local03
080f0     A7 F0 03 F6 | 	mov	ptra, fp
080f4     B2 00 A0 FD | 	call	#popregs_
080f8                 | _compile_ret
080f8     2D 00 64 FD | 	ret
080fc                 | 
080fc                 | ' 
080fc                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
080fc                 | ' 
080fc                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
080fc                 | _compile_assign
080fc     03 4A 05 F6 | 	mov	COUNT_, #3
08100     A8 00 A0 FD | 	call	#pushregs_
08104     09 27 02 F6 | 	mov	local01, arg01
08108     0B 29 02 F6 | 	mov	local02, arg03
0810c     47 00 00 FF 
08110     7C E4 05 F1 | 	add	objptr, ##36476
08114     F2 26 62 FC | 	wrlong	local01, objptr
08118     04 E4 05 F1 | 	add	objptr, #4
0811c     F2 14 62 FC | 	wrlong	arg02, objptr
08120     47 00 00 FF 
08124     80 E4 85 F1 | 	sub	objptr, ##36480
08128     14 13 02 F6 | 	mov	arg01, local02
0812c     01 12 06 F1 | 	add	arg01, #1
08130     54 FB BF FD | 	call	#_compile_immediate_assign
08134     FD 2A 02 F6 | 	mov	local03, result1
08138                 | ' 
08138                 | ' ucompiledline(0)=alinemajor
08138                 | ' ucompiledline(1)=alineminor
08138                 | ' 
08138                 | ' err=compile_immediate_assign(cont+1) 
08138                 | ' if alinemajor>0 then
08138     01 26 16 F2 | 	cmp	local01, #1 wc
0813c     6C 00 90 CD |  if_b	jmp	#LR__0735
08140                 | '   if cont=3 orelse cont=2 then 
08140     03 28 0E F2 | 	cmp	local02, #3 wz
08144     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08148     60 00 90 5D |  if_ne	jmp	#LR__0734
0814c                 | '     if alinemajor >lastline then 
0814c     4A 00 00 FF 
08150     8C E4 05 F1 | 	add	objptr, ##38028
08154     F2 14 02 FB | 	rdlong	arg02, objptr
08158     4A 00 00 FF 
0815c     8C E4 85 F1 | 	sub	objptr, ##38028
08160     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08164     0C 00 90 ED |  if_be	jmp	#LR__0730
08168     13 13 02 F6 | 	mov	arg01, local01
0816c     A4 F0 BF FD | 	call	#_add_line_at_end
08170     38 00 90 FD | 	jmp	#LR__0733
08174                 | LR__0730
08174     13 13 02 F6 | 	mov	arg01, local01
08178     68 EA BF FD | 	call	#_deleteline
0817c                 | '       deleteline(alinemajor)  
0817c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0817c     4A 00 00 FF 
08180     8C E4 05 F1 | 	add	objptr, ##38028
08184     F2 14 02 FB | 	rdlong	arg02, objptr
08188     4A 00 00 FF 
0818c     8C E4 85 F1 | 	sub	objptr, ##38028
08190     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08194     0C 00 90 ED |  if_be	jmp	#LR__0731
08198     13 13 02 F6 | 	mov	arg01, local01
0819c     74 F0 BF FD | 	call	#_add_line_at_end
081a0     08 00 90 FD | 	jmp	#LR__0732
081a4                 | LR__0731
081a4     13 13 02 F6 | 	mov	arg01, local01
081a8     4C EE BF FD | 	call	#_insertline
081ac                 | LR__0732
081ac                 | LR__0733
081ac                 | LR__0734
081ac                 | LR__0735
081ac                 | ' return err
081ac     15 FB 01 F6 | 	mov	result1, local03
081b0     A7 F0 03 F6 | 	mov	ptra, fp
081b4     B2 00 A0 FD | 	call	#popregs_
081b8                 | _compile_assign_ret
081b8     2D 00 64 FD | 	ret
081bc                 | 
081bc                 | ' 
081bc                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
081bc                 | ' 
081bc                 | ' function compile_fun_2p() as ulong
081bc                 | _compile_fun_2p
081bc     01 4A 05 F6 | 	mov	COUNT_, #1
081c0     A8 00 A0 FD | 	call	#pushregs_
081c4     A8 31 B0 FD | 	call	#_expr
081c8     FD 26 02 F6 | 	mov	local01, result1
081cc                 | ' err=expr() : if err>0 then return err
081cc     01 26 16 F2 | 	cmp	local01, #1 wc
081d0     13 FB 01 36 |  if_ae	mov	result1, local01
081d4     60 00 90 3D |  if_ae	jmp	#LR__0740
081d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081d8     37 00 00 FF 
081dc     44 E4 05 F1 | 	add	objptr, ##28228
081e0     F2 26 02 FB | 	rdlong	local01, objptr
081e4     03 26 66 F0 | 	shl	local01, #3
081e8     02 00 00 FF 
081ec     38 E4 85 F1 | 	sub	objptr, ##1080
081f0     F2 26 02 F1 | 	add	local01, objptr
081f4     04 26 06 F1 | 	add	local01, #4
081f8     13 27 02 FB | 	rdlong	local01, local01
081fc     11 26 0E F2 | 	cmp	local01, #17 wz
08200     35 00 00 FF 
08204     0C E4 85 F1 | 	sub	objptr, ##27148
08208     15 FA 05 56 |  if_ne	mov	result1, #21
0820c     28 00 90 5D |  if_ne	jmp	#LR__0740
08210     37 00 00 FF 
08214     44 E4 05 F1 | 	add	objptr, ##28228
08218     F2 26 02 FB | 	rdlong	local01, objptr
0821c     01 26 06 F1 | 	add	local01, #1
08220     F2 26 62 FC | 	wrlong	local01, objptr
08224     37 00 00 FF 
08228     44 E4 85 F1 | 	sub	objptr, ##28228
0822c     40 31 B0 FD | 	call	#_expr
08230                 | ' err=expr() : if err>0 then return err
08230     01 FA 15 F2 | 	cmp	result1, #1 wc
08234                 | ' return 0
08234     00 FA 05 C6 |  if_b	mov	result1, #0
08238                 | LR__0740
08238     A7 F0 03 F6 | 	mov	ptra, fp
0823c     B2 00 A0 FD | 	call	#popregs_
08240                 | _compile_fun_2p_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | ' 
08244                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08244                 | ' 
08244                 | ' function compile_fun_3p() as ulong
08244                 | _compile_fun_3p
08244     01 4A 05 F6 | 	mov	COUNT_, #1
08248     A8 00 A0 FD | 	call	#pushregs_
0824c     20 31 B0 FD | 	call	#_expr
08250     FD 26 02 F6 | 	mov	local01, result1
08254                 | ' err=expr() : if err>0 then return err
08254     01 26 16 F2 | 	cmp	local01, #1 wc
08258     13 FB 01 36 |  if_ae	mov	result1, local01
0825c     C8 00 90 3D |  if_ae	jmp	#LR__0750
08260                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08260     37 00 00 FF 
08264     44 E4 05 F1 | 	add	objptr, ##28228
08268     F2 26 02 FB | 	rdlong	local01, objptr
0826c     03 26 66 F0 | 	shl	local01, #3
08270     02 00 00 FF 
08274     38 E4 85 F1 | 	sub	objptr, ##1080
08278     F2 26 02 F1 | 	add	local01, objptr
0827c     04 26 06 F1 | 	add	local01, #4
08280     13 27 02 FB | 	rdlong	local01, local01
08284     11 26 0E F2 | 	cmp	local01, #17 wz
08288     35 00 00 FF 
0828c     0C E4 85 F1 | 	sub	objptr, ##27148
08290     15 FA 05 56 |  if_ne	mov	result1, #21
08294     90 00 90 5D |  if_ne	jmp	#LR__0750
08298     37 00 00 FF 
0829c     44 E4 05 F1 | 	add	objptr, ##28228
082a0     F2 26 02 FB | 	rdlong	local01, objptr
082a4     01 26 06 F1 | 	add	local01, #1
082a8     F2 26 62 FC | 	wrlong	local01, objptr
082ac     37 00 00 FF 
082b0     44 E4 85 F1 | 	sub	objptr, ##28228
082b4     B8 30 B0 FD | 	call	#_expr
082b8     FD 26 02 F6 | 	mov	local01, result1
082bc                 | ' err=expr() : if err>0 then return err
082bc     01 26 16 F2 | 	cmp	local01, #1 wc
082c0     13 FB 01 36 |  if_ae	mov	result1, local01
082c4     60 00 90 3D |  if_ae	jmp	#LR__0750
082c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
082c8     37 00 00 FF 
082cc     44 E4 05 F1 | 	add	objptr, ##28228
082d0     F2 26 02 FB | 	rdlong	local01, objptr
082d4     03 26 66 F0 | 	shl	local01, #3
082d8     02 00 00 FF 
082dc     38 E4 85 F1 | 	sub	objptr, ##1080
082e0     F2 26 02 F1 | 	add	local01, objptr
082e4     04 26 06 F1 | 	add	local01, #4
082e8     13 27 02 FB | 	rdlong	local01, local01
082ec     11 26 0E F2 | 	cmp	local01, #17 wz
082f0     35 00 00 FF 
082f4     0C E4 85 F1 | 	sub	objptr, ##27148
082f8     15 FA 05 56 |  if_ne	mov	result1, #21
082fc     28 00 90 5D |  if_ne	jmp	#LR__0750
08300     37 00 00 FF 
08304     44 E4 05 F1 | 	add	objptr, ##28228
08308     F2 26 02 FB | 	rdlong	local01, objptr
0830c     01 26 06 F1 | 	add	local01, #1
08310     F2 26 62 FC | 	wrlong	local01, objptr
08314     37 00 00 FF 
08318     44 E4 85 F1 | 	sub	objptr, ##28228
0831c     50 30 B0 FD | 	call	#_expr
08320                 | ' err=expr() : if err>0 then return err
08320     01 FA 15 F2 | 	cmp	result1, #1 wc
08324                 | ' return 0
08324     00 FA 05 C6 |  if_b	mov	result1, #0
08328                 | LR__0750
08328     A7 F0 03 F6 | 	mov	ptra, fp
0832c     B2 00 A0 FD | 	call	#popregs_
08330                 | _compile_fun_3p_ret
08330     2D 00 64 FD | 	ret
08334                 | 
08334                 | ' 
08334                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08334                 | ' 
08334                 | ' function compile_fun_4p() as ulong
08334                 | _compile_fun_4p
08334     01 4A 05 F6 | 	mov	COUNT_, #1
08338     A8 00 A0 FD | 	call	#pushregs_
0833c     30 30 B0 FD | 	call	#_expr
08340     FD 26 02 F6 | 	mov	local01, result1
08344                 | ' err=expr() : if err>0 then return err
08344     01 26 16 F2 | 	cmp	local01, #1 wc
08348     13 FB 01 36 |  if_ae	mov	result1, local01
0834c     30 01 90 3D |  if_ae	jmp	#LR__0760
08350                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08350     37 00 00 FF 
08354     44 E4 05 F1 | 	add	objptr, ##28228
08358     F2 26 02 FB | 	rdlong	local01, objptr
0835c     03 26 66 F0 | 	shl	local01, #3
08360     02 00 00 FF 
08364     38 E4 85 F1 | 	sub	objptr, ##1080
08368     F2 26 02 F1 | 	add	local01, objptr
0836c     04 26 06 F1 | 	add	local01, #4
08370     13 27 02 FB | 	rdlong	local01, local01
08374     11 26 0E F2 | 	cmp	local01, #17 wz
08378     35 00 00 FF 
0837c     0C E4 85 F1 | 	sub	objptr, ##27148
08380     15 FA 05 56 |  if_ne	mov	result1, #21
08384     F8 00 90 5D |  if_ne	jmp	#LR__0760
08388     37 00 00 FF 
0838c     44 E4 05 F1 | 	add	objptr, ##28228
08390     F2 26 02 FB | 	rdlong	local01, objptr
08394     01 26 06 F1 | 	add	local01, #1
08398     F2 26 62 FC | 	wrlong	local01, objptr
0839c     37 00 00 FF 
083a0     44 E4 85 F1 | 	sub	objptr, ##28228
083a4     C8 2F B0 FD | 	call	#_expr
083a8     FD 26 02 F6 | 	mov	local01, result1
083ac                 | ' err=expr() : if err>0 then return err
083ac     01 26 16 F2 | 	cmp	local01, #1 wc
083b0     13 FB 01 36 |  if_ae	mov	result1, local01
083b4     C8 00 90 3D |  if_ae	jmp	#LR__0760
083b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
083b8     37 00 00 FF 
083bc     44 E4 05 F1 | 	add	objptr, ##28228
083c0     F2 26 02 FB | 	rdlong	local01, objptr
083c4     03 26 66 F0 | 	shl	local01, #3
083c8     02 00 00 FF 
083cc     38 E4 85 F1 | 	sub	objptr, ##1080
083d0     F2 26 02 F1 | 	add	local01, objptr
083d4     04 26 06 F1 | 	add	local01, #4
083d8     13 27 02 FB | 	rdlong	local01, local01
083dc     11 26 0E F2 | 	cmp	local01, #17 wz
083e0     35 00 00 FF 
083e4     0C E4 85 F1 | 	sub	objptr, ##27148
083e8     15 FA 05 56 |  if_ne	mov	result1, #21
083ec     90 00 90 5D |  if_ne	jmp	#LR__0760
083f0     37 00 00 FF 
083f4     44 E4 05 F1 | 	add	objptr, ##28228
083f8     F2 26 02 FB | 	rdlong	local01, objptr
083fc     01 26 06 F1 | 	add	local01, #1
08400     F2 26 62 FC | 	wrlong	local01, objptr
08404     37 00 00 FF 
08408     44 E4 85 F1 | 	sub	objptr, ##28228
0840c     60 2F B0 FD | 	call	#_expr
08410     FD 26 02 F6 | 	mov	local01, result1
08414                 | ' err=expr() : if err>0 then return err
08414     01 26 16 F2 | 	cmp	local01, #1 wc
08418     13 FB 01 36 |  if_ae	mov	result1, local01
0841c     60 00 90 3D |  if_ae	jmp	#LR__0760
08420                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08420     37 00 00 FF 
08424     44 E4 05 F1 | 	add	objptr, ##28228
08428     F2 26 02 FB | 	rdlong	local01, objptr
0842c     03 26 66 F0 | 	shl	local01, #3
08430     02 00 00 FF 
08434     38 E4 85 F1 | 	sub	objptr, ##1080
08438     F2 26 02 F1 | 	add	local01, objptr
0843c     04 26 06 F1 | 	add	local01, #4
08440     13 27 02 FB | 	rdlong	local01, local01
08444     11 26 0E F2 | 	cmp	local01, #17 wz
08448     35 00 00 FF 
0844c     0C E4 85 F1 | 	sub	objptr, ##27148
08450     15 FA 05 56 |  if_ne	mov	result1, #21
08454     28 00 90 5D |  if_ne	jmp	#LR__0760
08458     37 00 00 FF 
0845c     44 E4 05 F1 | 	add	objptr, ##28228
08460     F2 26 02 FB | 	rdlong	local01, objptr
08464     01 26 06 F1 | 	add	local01, #1
08468     F2 26 62 FC | 	wrlong	local01, objptr
0846c     37 00 00 FF 
08470     44 E4 85 F1 | 	sub	objptr, ##28228
08474     F8 2E B0 FD | 	call	#_expr
08478                 | ' err=expr() : if err>0 then return err
08478     01 FA 15 F2 | 	cmp	result1, #1 wc
0847c                 | ' return 0
0847c     00 FA 05 C6 |  if_b	mov	result1, #0
08480                 | LR__0760
08480     A7 F0 03 F6 | 	mov	ptra, fp
08484     B2 00 A0 FD | 	call	#popregs_
08488                 | _compile_fun_4p_ret
08488     2D 00 64 FD | 	ret
0848c                 | 
0848c                 | ' 
0848c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
0848c                 | ' 
0848c                 | ' function compile_fun_varp() as ulong,ulong 
0848c                 | _compile_fun_varp
0848c     03 4A 05 F6 | 	mov	COUNT_, #3
08490     A8 00 A0 FD | 	call	#pushregs_
08494     00 26 06 F6 | 	mov	local01, #0
08498                 | ' 
08498                 | ' i=0 : err=0
08498                 | ' if lparts(ct).token<>token_end then
08498     37 00 00 FF 
0849c     44 E4 05 F1 | 	add	objptr, ##28228
084a0     F2 28 02 FB | 	rdlong	local02, objptr
084a4     03 28 66 F0 | 	shl	local02, #3
084a8     02 00 00 FF 
084ac     38 E4 85 F1 | 	sub	objptr, ##1080
084b0     F2 28 02 F1 | 	add	local02, objptr
084b4     04 28 06 F1 | 	add	local02, #4
084b8     14 29 02 FB | 	rdlong	local02, local02
084bc     FE 29 0E F2 | 	cmp	local02, #510 wz
084c0     35 00 00 FF 
084c4     0C E4 85 F1 | 	sub	objptr, ##27148
084c8     88 00 90 AD |  if_e	jmp	#LR__0771
084cc                 | '   do
084cc                 | LR__0770
084cc     A0 2E B0 FD | 	call	#_expr
084d0     01 26 06 F1 | 	add	local01, #1
084d4                 | '     expr()
084d4                 | '     i+=1
084d4                 | '     if lparts(ct).token=token_comma then ct+=1
084d4     37 00 00 FF 
084d8     44 E4 05 F1 | 	add	objptr, ##28228
084dc     F2 28 02 FB | 	rdlong	local02, objptr
084e0     03 28 66 F0 | 	shl	local02, #3
084e4     02 00 00 FF 
084e8     38 E4 85 F1 | 	sub	objptr, ##1080
084ec     F2 28 02 F1 | 	add	local02, objptr
084f0     04 28 06 F1 | 	add	local02, #4
084f4     14 29 02 FB | 	rdlong	local02, local02
084f8     11 28 0E F2 | 	cmp	local02, #17 wz
084fc     35 00 00 FF 
08500     0C E4 85 F1 | 	sub	objptr, ##27148
08504     37 00 00 AF 
08508     44 E4 05 A1 |  if_e	add	objptr, ##28228
0850c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08510     01 2A 06 A1 |  if_e	add	local03, #1
08514     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08518     37 00 00 AF 
0851c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08520                 | '     if lparts(ct).token=token_end then exit loop
08520     37 00 00 FF 
08524     44 E4 05 F1 | 	add	objptr, ##28228
08528     F2 28 02 FB | 	rdlong	local02, objptr
0852c     03 28 66 F0 | 	shl	local02, #3
08530     02 00 00 FF 
08534     38 E4 85 F1 | 	sub	objptr, ##1080
08538     F2 28 02 F1 | 	add	local02, objptr
0853c     04 28 06 F1 | 	add	local02, #4
08540     14 29 02 FB | 	rdlong	local02, local02
08544     FE 29 0E F2 | 	cmp	local02, #510 wz
08548     35 00 00 FF 
0854c     0C E4 85 F1 | 	sub	objptr, ##27148
08550     78 FF 9F 5D |  if_ne	jmp	#LR__0770
08554                 | LR__0771
08554                 | ' return i,err
08554     13 FB 01 F6 | 	mov	result1, local01
08558     00 FC 05 F6 | 	mov	result2, #0
0855c     A7 F0 03 F6 | 	mov	ptra, fp
08560     B2 00 A0 FD | 	call	#popregs_
08564                 | _compile_fun_varp_ret
08564     2D 00 64 FD | 	ret
08568                 | 
08568                 | ' 
08568                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08568                 | ' 
08568                 | ' function compile_read() as ulong,ulong 
08568                 | _compile_read
08568     04 4A 05 F6 | 	mov	COUNT_, #4
0856c     A8 00 A0 FD | 	call	#pushregs_
08570     00 26 06 F6 | 	mov	local01, #0
08574                 | ' 
08574                 | ' i=0 : err=0
08574                 | ' if lparts(ct).token<>token_end then
08574     37 00 00 FF 
08578     44 E4 05 F1 | 	add	objptr, ##28228
0857c     F2 28 02 FB | 	rdlong	local02, objptr
08580     03 28 66 F0 | 	shl	local02, #3
08584     02 00 00 FF 
08588     38 E4 85 F1 | 	sub	objptr, ##1080
0858c     F2 28 02 F1 | 	add	local02, objptr
08590     04 28 06 F1 | 	add	local02, #4
08594     14 29 02 FB | 	rdlong	local02, local02
08598     FE 29 0E F2 | 	cmp	local02, #510 wz
0859c     35 00 00 FF 
085a0     0C E4 85 F1 | 	sub	objptr, ##27148
085a4     98 00 90 AD |  if_e	jmp	#LR__0781
085a8                 | '   do
085a8                 | LR__0780
085a8     30 2A B0 FD | 	call	#_getaddr
085ac     FD 2A 02 F6 | 	mov	local03, result1
085b0     37 00 00 FF 
085b4     44 E4 05 F1 | 	add	objptr, ##28228
085b8     F2 28 02 FB | 	rdlong	local02, objptr
085bc     01 28 06 F1 | 	add	local02, #1
085c0     F2 28 62 FC | 	wrlong	local02, objptr
085c4     01 26 06 F1 | 	add	local01, #1
085c8                 | '     err=getaddr() :ct+=1
085c8                 | '     i+=1 
085c8                 | '     if lparts(ct).token=token_comma then ct+=1 
085c8     03 28 66 F0 | 	shl	local02, #3
085cc     02 00 00 FF 
085d0     38 E4 85 F1 | 	sub	objptr, ##1080
085d4     F2 28 02 F1 | 	add	local02, objptr
085d8     04 28 06 F1 | 	add	local02, #4
085dc     14 29 02 FB | 	rdlong	local02, local02
085e0     11 28 0E F2 | 	cmp	local02, #17 wz
085e4     35 00 00 FF 
085e8     0C E4 85 F1 | 	sub	objptr, ##27148
085ec     37 00 00 AF 
085f0     44 E4 05 A1 |  if_e	add	objptr, ##28228
085f4     F2 2C 02 AB |  if_e	rdlong	local04, objptr
085f8     01 2C 06 A1 |  if_e	add	local04, #1
085fc     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08600     37 00 00 AF 
08604     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08608                 | '     if lparts(ct).token=token_end then exit loop
08608     37 00 00 FF 
0860c     44 E4 05 F1 | 	add	objptr, ##28228
08610     F2 28 02 FB | 	rdlong	local02, objptr
08614     03 28 66 F0 | 	shl	local02, #3
08618     02 00 00 FF 
0861c     38 E4 85 F1 | 	sub	objptr, ##1080
08620     F2 28 02 F1 | 	add	local02, objptr
08624     04 28 06 F1 | 	add	local02, #4
08628     14 29 02 FB | 	rdlong	local02, local02
0862c     FE 29 0E F2 | 	cmp	local02, #510 wz
08630     35 00 00 FF 
08634     0C E4 85 F1 | 	sub	objptr, ##27148
08638     08 00 90 AD |  if_e	jmp	#LR__0782
0863c     68 FF 9F FD | 	jmp	#LR__0780
08640                 | LR__0781
08640     36 2A 06 F6 | 	mov	local03, #54
08644                 | LR__0782
08644                 | ' return i,err
08644     13 FB 01 F6 | 	mov	result1, local01
08648     15 FD 01 F6 | 	mov	result2, local03
0864c     A7 F0 03 F6 | 	mov	ptra, fp
08650     B2 00 A0 FD | 	call	#popregs_
08654                 | _compile_read_ret
08654     2D 00 64 FD | 	ret
08658                 | 
08658                 | ' 
08658                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08658                 | ' 
08658                 | ' function compile_input() as ulong,ulong 
08658                 | _compile_input
08658     0F 4A 05 F6 | 	mov	COUNT_, #15
0865c     A8 00 A0 FD | 	call	#pushregs_
08660                 | ' 
08660                 | ' if lparts(ct).token=token_string then
08660     37 00 00 FF 
08664     44 E4 05 F1 | 	add	objptr, ##28228
08668     F2 16 02 FB | 	rdlong	arg03, objptr
0866c     03 16 66 F0 | 	shl	arg03, #3
08670     02 00 00 FF 
08674     38 E4 85 F1 | 	sub	objptr, ##1080
08678     F2 16 02 F1 | 	add	arg03, objptr
0867c     04 16 06 F1 | 	add	arg03, #4
08680     0B FD 01 FB | 	rdlong	result2, arg03
08684     01 00 00 FF 
08688     03 FC 0D F2 | 	cmp	result2, ##515 wz
0868c     35 00 00 FF 
08690     0C E4 85 F1 | 	sub	objptr, ##27148
08694     38 06 90 5D |  if_ne	jmp	#LR__0797
08698     37 00 00 FF 
0869c     44 E4 05 F1 | 	add	objptr, ##28228
086a0     F2 14 02 FB | 	rdlong	arg02, objptr
086a4     03 14 66 F0 | 	shl	arg02, #3
086a8     02 00 00 FF 
086ac     38 E4 85 F1 | 	sub	objptr, ##1080
086b0     F2 14 02 F1 | 	add	arg02, objptr
086b4     0A 13 02 FB | 	rdlong	arg01, arg02
086b8     35 00 00 FF 
086bc     0C E4 85 F1 | 	sub	objptr, ##27148
086c0     09 2D 02 F6 | 	mov	local04, arg01
086c4     97 06 48 FB | 	callpa	#(@LR__0791-@LR__0790)>>2,fcache_load_ptr_
086c8                 | LR__0790
086c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
086cc     01 2C 06 51 |  if_ne	add	local04, #1
086d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0790
086d4                 | LR__0791
086d4     09 2D 82 F1 | 	sub	local04, arg01
086d8     16 FB 01 F6 | 	mov	result1, local04
086dc     52 00 00 FF 
086e0     00 E4 05 F1 | 	add	objptr, ##41984
086e4     F2 FA 61 FC | 	wrlong	result1, objptr
086e8     54 E4 85 F1 | 	sub	objptr, #84
086ec     F2 12 02 FB | 	rdlong	arg01, objptr
086f0     FD 12 82 F1 | 	sub	arg01, result1
086f4     04 12 86 F1 | 	sub	arg01, #4
086f8     03 12 26 F5 | 	andn	arg01, #3
086fc     F2 12 62 FC | 	wrlong	arg01, objptr
08700     54 E4 05 F1 | 	add	objptr, #84
08704     F2 14 02 FB | 	rdlong	arg02, objptr
08708     52 00 00 FF 
0870c     00 E4 85 F1 | 	sub	objptr, ##41984
08710     FC 7F B1 FD | 	call	#_pslpoke
08714                 | '   pslpoke memtop,l
08714                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08714     01 2E 06 F6 | 	mov	local05, #1
08718     52 00 00 FF 
0871c     00 E4 05 F1 | 	add	objptr, ##41984
08720     F2 30 02 FB | 	rdlong	local06, objptr
08724     52 00 00 FF 
08728     00 E4 85 F1 | 	sub	objptr, ##41984
0872c     01 30 06 F1 | 	add	local06, #1
08730                 | LR__0792
08730     18 2F 52 F2 | 	cmps	local05, local06 wc
08734     5C 00 90 3D |  if_ae	jmp	#LR__0793
08738     51 00 00 FF 
0873c     AC E5 05 F1 | 	add	objptr, ##41900
08740     F2 32 02 FB | 	rdlong	local07, objptr
08744     03 32 06 F1 | 	add	local07, #3
08748     17 33 02 F1 | 	add	local07, local05
0874c     1A 00 00 FF 
08750     68 E5 85 F1 | 	sub	objptr, ##13672
08754     F2 14 02 FB | 	rdlong	arg02, objptr
08758     03 14 66 F0 | 	shl	arg02, #3
0875c     02 00 00 FF 
08760     38 E4 85 F1 | 	sub	objptr, ##1080
08764     F2 14 02 F1 | 	add	arg02, objptr
08768     0A 13 02 FB | 	rdlong	arg01, arg02
0876c     17 15 02 F6 | 	mov	arg02, local05
08770     01 16 06 F6 | 	mov	arg03, #1
08774     35 00 00 FF 
08778     0C E4 85 F1 | 	sub	objptr, ##27148
0877c     28 D9 B1 FD | 	call	#__system__Mid_S
08780     FD 14 C2 FA | 	rdbyte	arg02, result1
08784     19 13 02 F6 | 	mov	arg01, local07
08788     14 80 B1 FD | 	call	#_pspoke
0878c     01 2E 06 F1 | 	add	local05, #1
08790     9C FF 9F FD | 	jmp	#LR__0792
08794                 | LR__0793
08794     51 00 00 FF 
08798     AC E5 05 F1 | 	add	objptr, ##41900
0879c     F2 26 02 FB | 	rdlong	local01, objptr
087a0     2B 2A 06 F6 | 	mov	local03, #43
087a4     13 35 02 F6 | 	mov	local08, local01
087a8     14 33 02 F6 | 	mov	local07, local02
087ac     15 37 02 F6 | 	mov	local09, local03
087b0     07 00 00 FF 
087b4     30 E5 85 F1 | 	sub	objptr, ##3888
087b8     F2 30 02 FB | 	rdlong	local06, objptr
087bc     18 2F 02 F6 | 	mov	local05, local06
087c0     01 2E 66 F0 | 	shl	local05, #1
087c4     18 2F 02 F1 | 	add	local05, local06
087c8     02 2E 66 F0 | 	shl	local05, #2
087cc     03 00 00 FF 
087d0     00 E4 85 F1 | 	sub	objptr, ##1536
087d4     F2 2E 02 F1 | 	add	local05, objptr
087d8     17 35 62 FC | 	wrlong	local08, local05
087dc     03 00 00 FF 
087e0     00 E4 05 F1 | 	add	objptr, ##1536
087e4     F2 34 02 FB | 	rdlong	local08, objptr
087e8     1A 31 02 F6 | 	mov	local06, local08
087ec     01 30 66 F0 | 	shl	local06, #1
087f0     1A 31 02 F1 | 	add	local06, local08
087f4     02 30 66 F0 | 	shl	local06, #2
087f8     03 00 00 FF 
087fc     00 E4 85 F1 | 	sub	objptr, ##1536
08800     F2 30 02 F1 | 	add	local06, objptr
08804     04 30 06 F1 | 	add	local06, #4
08808     18 33 62 FC | 	wrlong	local07, local06
0880c     03 00 00 FF 
08810     00 E4 05 F1 | 	add	objptr, ##1536
08814     F2 34 02 FB | 	rdlong	local08, objptr
08818     1A 33 02 F6 | 	mov	local07, local08
0881c     01 32 66 F0 | 	shl	local07, #1
08820     1A 33 02 F1 | 	add	local07, local08
08824     02 32 66 F0 | 	shl	local07, #2
08828     03 00 00 FF 
0882c     00 E4 85 F1 | 	sub	objptr, ##1536
08830     F2 32 02 F1 | 	add	local07, objptr
08834     08 32 06 F1 | 	add	local07, #8
08838     19 37 62 FC | 	wrlong	local09, local07
0883c     03 00 00 FF 
08840     00 E4 05 F1 | 	add	objptr, ##1536
08844     F2 34 02 FB | 	rdlong	local08, objptr
08848     01 34 06 F1 | 	add	local08, #1
0884c     F2 34 62 FC | 	wrlong	local08, objptr
08850     13 00 00 FF 
08854     38 E4 85 F1 | 	sub	objptr, ##9784
08858     F2 34 02 FB | 	rdlong	local08, objptr
0885c     01 34 06 F1 | 	add	local08, #1
08860     F2 34 62 FC | 	wrlong	local08, objptr
08864                 | '   t1.result.uresult=memtop
08864                 | '   t1.result_type=result_string2  
08864                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08864                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08864     03 34 66 F0 | 	shl	local08, #3
08868     02 00 00 FF 
0886c     38 E4 85 F1 | 	sub	objptr, ##1080
08870     F2 34 02 F1 | 	add	local08, objptr
08874     04 34 06 F1 | 	add	local08, #4
08878     1A 35 02 FB | 	rdlong	local08, local08
0887c     11 34 0E F2 | 	cmp	local08, #17 wz
08880     35 00 00 FF 
08884     0C E4 85 F1 | 	sub	objptr, ##27148
08888     60 01 90 5D |  if_ne	jmp	#LR__0794
0888c     21 2A 06 F6 | 	mov	local03, #33
08890     13 35 02 F6 | 	mov	local08, local01
08894     14 33 02 F6 | 	mov	local07, local02
08898     15 39 02 F6 | 	mov	local10, local03
0889c     4A 00 00 FF 
088a0     7C E4 05 F1 | 	add	objptr, ##38012
088a4     F2 3A 02 FB | 	rdlong	local11, objptr
088a8     1D 3D 02 F6 | 	mov	local12, local11
088ac     01 3C 66 F0 | 	shl	local12, #1
088b0     1D 3D 02 F1 | 	add	local12, local11
088b4     02 3C 66 F0 | 	shl	local12, #2
088b8     03 00 00 FF 
088bc     00 E4 85 F1 | 	sub	objptr, ##1536
088c0     F2 3C 02 F1 | 	add	local12, objptr
088c4     1E 35 62 FC | 	wrlong	local08, local12
088c8     03 00 00 FF 
088cc     00 E4 05 F1 | 	add	objptr, ##1536
088d0     F2 3E 02 FB | 	rdlong	local13, objptr
088d4     1F 35 02 F6 | 	mov	local08, local13
088d8     01 34 66 F0 | 	shl	local08, #1
088dc     1F 35 02 F1 | 	add	local08, local13
088e0     02 34 66 F0 | 	shl	local08, #2
088e4     03 00 00 FF 
088e8     00 E4 85 F1 | 	sub	objptr, ##1536
088ec     F2 34 02 F1 | 	add	local08, objptr
088f0     04 34 06 F1 | 	add	local08, #4
088f4     1A 33 62 FC | 	wrlong	local07, local08
088f8     03 00 00 FF 
088fc     00 E4 05 F1 | 	add	objptr, ##1536
08900     F2 34 02 FB | 	rdlong	local08, objptr
08904     1A 41 02 F6 | 	mov	local14, local08
08908     01 40 66 F0 | 	shl	local14, #1
0890c     1A 41 02 F1 | 	add	local14, local08
08910     02 40 66 F0 | 	shl	local14, #2
08914     03 00 00 FF 
08918     00 E4 85 F1 | 	sub	objptr, ##1536
0891c     F2 40 02 F1 | 	add	local14, objptr
08920     08 40 06 F1 | 	add	local14, #8
08924     20 39 62 FC | 	wrlong	local10, local14
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 34 02 FB | 	rdlong	local08, objptr
08934     01 34 06 F1 | 	add	local08, #1
08938     F2 34 62 FC | 	wrlong	local08, objptr
0893c     44 2A 06 F6 | 	mov	local03, #68
08940     13 35 02 F6 | 	mov	local08, local01
08944     14 33 02 F6 | 	mov	local07, local02
08948     15 39 02 F6 | 	mov	local10, local03
0894c     F2 40 02 FB | 	rdlong	local14, objptr
08950     20 3F 02 F6 | 	mov	local13, local14
08954     01 3E 66 F0 | 	shl	local13, #1
08958     20 3F 02 F1 | 	add	local13, local14
0895c     02 3E 66 F0 | 	shl	local13, #2
08960     03 00 00 FF 
08964     00 E4 85 F1 | 	sub	objptr, ##1536
08968     F2 3E 02 F1 | 	add	local13, objptr
0896c     1F 35 62 FC | 	wrlong	local08, local13
08970     03 00 00 FF 
08974     00 E4 05 F1 | 	add	objptr, ##1536
08978     F2 40 02 FB | 	rdlong	local14, objptr
0897c     20 3F 02 F6 | 	mov	local13, local14
08980     01 3E 66 F0 | 	shl	local13, #1
08984     20 3F 02 F1 | 	add	local13, local14
08988     02 3E 66 F0 | 	shl	local13, #2
0898c     03 00 00 FF 
08990     00 E4 85 F1 | 	sub	objptr, ##1536
08994     F2 3E 02 F1 | 	add	local13, objptr
08998     04 3E 06 F1 | 	add	local13, #4
0899c     1F 33 62 FC | 	wrlong	local07, local13
089a0     03 00 00 FF 
089a4     00 E4 05 F1 | 	add	objptr, ##1536
089a8     F2 3E 02 FB | 	rdlong	local13, objptr
089ac     1F 41 02 F6 | 	mov	local14, local13
089b0     01 40 66 F0 | 	shl	local14, #1
089b4     1F 41 02 F1 | 	add	local14, local13
089b8     02 40 66 F0 | 	shl	local14, #2
089bc     03 00 00 FF 
089c0     00 E4 85 F1 | 	sub	objptr, ##1536
089c4     F2 40 02 F1 | 	add	local14, objptr
089c8     08 40 06 F1 | 	add	local14, #8
089cc     20 39 62 FC | 	wrlong	local10, local14
089d0     03 00 00 FF 
089d4     00 E4 05 F1 | 	add	objptr, ##1536
089d8     F2 34 02 FB | 	rdlong	local08, objptr
089dc     01 34 06 F1 | 	add	local08, #1
089e0     F2 34 62 FC | 	wrlong	local08, objptr
089e4     4A 00 00 FF 
089e8     7C E4 85 F1 | 	sub	objptr, ##38012
089ec                 | LR__0794
089ec                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
089ec     37 00 00 FF 
089f0     44 E4 05 F1 | 	add	objptr, ##28228
089f4     F2 34 02 FB | 	rdlong	local08, objptr
089f8     03 34 66 F0 | 	shl	local08, #3
089fc     02 00 00 FF 
08a00     38 E4 85 F1 | 	sub	objptr, ##1080
08a04     F2 34 02 F1 | 	add	local08, objptr
08a08     04 34 06 F1 | 	add	local08, #4
08a0c     1A 41 02 FB | 	rdlong	local14, local08
08a10     12 40 0E F2 | 	cmp	local14, #18 wz
08a14     35 00 00 FF 
08a18     0C E4 85 F1 | 	sub	objptr, ##27148
08a1c     60 01 90 5D |  if_ne	jmp	#LR__0795
08a20     22 2A 06 F6 | 	mov	local03, #34
08a24     13 35 02 F6 | 	mov	local08, local01
08a28     14 33 02 F6 | 	mov	local07, local02
08a2c     15 39 02 F6 | 	mov	local10, local03
08a30     4A 00 00 FF 
08a34     7C E4 05 F1 | 	add	objptr, ##38012
08a38     F2 40 02 FB | 	rdlong	local14, objptr
08a3c     20 3F 02 F6 | 	mov	local13, local14
08a40     01 3E 66 F0 | 	shl	local13, #1
08a44     20 3F 02 F1 | 	add	local13, local14
08a48     02 3E 66 F0 | 	shl	local13, #2
08a4c     03 00 00 FF 
08a50     00 E4 85 F1 | 	sub	objptr, ##1536
08a54     F2 3E 02 F1 | 	add	local13, objptr
08a58     1F 35 62 FC | 	wrlong	local08, local13
08a5c     03 00 00 FF 
08a60     00 E4 05 F1 | 	add	objptr, ##1536
08a64     F2 40 02 FB | 	rdlong	local14, objptr
08a68     20 35 02 F6 | 	mov	local08, local14
08a6c     01 34 66 F0 | 	shl	local08, #1
08a70     20 35 02 F1 | 	add	local08, local14
08a74     02 34 66 F0 | 	shl	local08, #2
08a78     03 00 00 FF 
08a7c     00 E4 85 F1 | 	sub	objptr, ##1536
08a80     F2 34 02 F1 | 	add	local08, objptr
08a84     04 34 06 F1 | 	add	local08, #4
08a88     1A 33 62 FC | 	wrlong	local07, local08
08a8c     03 00 00 FF 
08a90     00 E4 05 F1 | 	add	objptr, ##1536
08a94     F2 34 02 FB | 	rdlong	local08, objptr
08a98     1A 41 02 F6 | 	mov	local14, local08
08a9c     01 40 66 F0 | 	shl	local14, #1
08aa0     1A 41 02 F1 | 	add	local14, local08
08aa4     02 40 66 F0 | 	shl	local14, #2
08aa8     03 00 00 FF 
08aac     00 E4 85 F1 | 	sub	objptr, ##1536
08ab0     F2 40 02 F1 | 	add	local14, objptr
08ab4     08 40 06 F1 | 	add	local14, #8
08ab8     20 39 62 FC | 	wrlong	local10, local14
08abc     03 00 00 FF 
08ac0     00 E4 05 F1 | 	add	objptr, ##1536
08ac4     F2 34 02 FB | 	rdlong	local08, objptr
08ac8     01 34 06 F1 | 	add	local08, #1
08acc     F2 34 62 FC | 	wrlong	local08, objptr
08ad0     44 2A 06 F6 | 	mov	local03, #68
08ad4     13 35 02 F6 | 	mov	local08, local01
08ad8     14 33 02 F6 | 	mov	local07, local02
08adc     15 39 02 F6 | 	mov	local10, local03
08ae0     F2 40 02 FB | 	rdlong	local14, objptr
08ae4     20 3F 02 F6 | 	mov	local13, local14
08ae8     01 3E 66 F0 | 	shl	local13, #1
08aec     20 3F 02 F1 | 	add	local13, local14
08af0     02 3E 66 F0 | 	shl	local13, #2
08af4     03 00 00 FF 
08af8     00 E4 85 F1 | 	sub	objptr, ##1536
08afc     F2 3E 02 F1 | 	add	local13, objptr
08b00     1F 35 62 FC | 	wrlong	local08, local13
08b04     03 00 00 FF 
08b08     00 E4 05 F1 | 	add	objptr, ##1536
08b0c     F2 40 02 FB | 	rdlong	local14, objptr
08b10     20 3F 02 F6 | 	mov	local13, local14
08b14     01 3E 66 F0 | 	shl	local13, #1
08b18     20 3F 02 F1 | 	add	local13, local14
08b1c     02 3E 66 F0 | 	shl	local13, #2
08b20     03 00 00 FF 
08b24     00 E4 85 F1 | 	sub	objptr, ##1536
08b28     F2 3E 02 F1 | 	add	local13, objptr
08b2c     04 3E 06 F1 | 	add	local13, #4
08b30     1F 33 62 FC | 	wrlong	local07, local13
08b34     03 00 00 FF 
08b38     00 E4 05 F1 | 	add	objptr, ##1536
08b3c     F2 3E 02 FB | 	rdlong	local13, objptr
08b40     1F 41 02 F6 | 	mov	local14, local13
08b44     01 40 66 F0 | 	shl	local14, #1
08b48     1F 41 02 F1 | 	add	local14, local13
08b4c     02 40 66 F0 | 	shl	local14, #2
08b50     03 00 00 FF 
08b54     00 E4 85 F1 | 	sub	objptr, ##1536
08b58     F2 40 02 F1 | 	add	local14, objptr
08b5c     08 40 06 F1 | 	add	local14, #8
08b60     20 39 62 FC | 	wrlong	local10, local14
08b64     03 00 00 FF 
08b68     00 E4 05 F1 | 	add	objptr, ##1536
08b6c     F2 34 02 FB | 	rdlong	local08, objptr
08b70     01 34 06 F1 | 	add	local08, #1
08b74     F2 34 62 FC | 	wrlong	local08, objptr
08b78     4A 00 00 FF 
08b7c     7C E4 85 F1 | 	sub	objptr, ##38012
08b80                 | LR__0795
08b80                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08b80     37 00 00 FF 
08b84     44 E4 05 F1 | 	add	objptr, ##28228
08b88     F2 34 02 FB | 	rdlong	local08, objptr
08b8c     03 34 66 F0 | 	shl	local08, #3
08b90     02 00 00 FF 
08b94     38 E4 85 F1 | 	sub	objptr, ##1080
08b98     F2 34 02 F1 | 	add	local08, objptr
08b9c     04 34 06 F1 | 	add	local08, #4
08ba0     1A 41 02 FB | 	rdlong	local14, local08
08ba4     12 40 0E F2 | 	cmp	local14, #18 wz
08ba8     35 00 00 FF 
08bac     0C E4 85 F1 | 	sub	objptr, ##27148
08bb0     00 01 90 AD |  if_e	jmp	#LR__0796
08bb4     37 00 00 FF 
08bb8     44 E4 05 F1 | 	add	objptr, ##28228
08bbc     F2 34 02 FB | 	rdlong	local08, objptr
08bc0     03 34 66 F0 | 	shl	local08, #3
08bc4     02 00 00 FF 
08bc8     38 E4 85 F1 | 	sub	objptr, ##1080
08bcc     F2 34 02 F1 | 	add	local08, objptr
08bd0     04 34 06 F1 | 	add	local08, #4
08bd4     1A 41 02 FB | 	rdlong	local14, local08
08bd8     11 40 0E F2 | 	cmp	local14, #17 wz
08bdc     35 00 00 FF 
08be0     0C E4 85 F1 | 	sub	objptr, ##27148
08be4     CC 00 90 AD |  if_e	jmp	#LR__0796
08be8     44 2A 06 F6 | 	mov	local03, #68
08bec     13 35 02 F6 | 	mov	local08, local01
08bf0     14 33 02 F6 | 	mov	local07, local02
08bf4     15 39 02 F6 | 	mov	local10, local03
08bf8     4A 00 00 FF 
08bfc     7C E4 05 F1 | 	add	objptr, ##38012
08c00     F2 40 02 FB | 	rdlong	local14, objptr
08c04     20 3F 02 F6 | 	mov	local13, local14
08c08     01 3E 66 F0 | 	shl	local13, #1
08c0c     20 3F 02 F1 | 	add	local13, local14
08c10     02 3E 66 F0 | 	shl	local13, #2
08c14     03 00 00 FF 
08c18     00 E4 85 F1 | 	sub	objptr, ##1536
08c1c     F2 3E 02 F1 | 	add	local13, objptr
08c20     1F 35 62 FC | 	wrlong	local08, local13
08c24     03 00 00 FF 
08c28     00 E4 05 F1 | 	add	objptr, ##1536
08c2c     F2 40 02 FB | 	rdlong	local14, objptr
08c30     20 3F 02 F6 | 	mov	local13, local14
08c34     01 3E 66 F0 | 	shl	local13, #1
08c38     20 3F 02 F1 | 	add	local13, local14
08c3c     02 3E 66 F0 | 	shl	local13, #2
08c40     03 00 00 FF 
08c44     00 E4 85 F1 | 	sub	objptr, ##1536
08c48     F2 3E 02 F1 | 	add	local13, objptr
08c4c     04 3E 06 F1 | 	add	local13, #4
08c50     1F 33 62 FC | 	wrlong	local07, local13
08c54     03 00 00 FF 
08c58     00 E4 05 F1 | 	add	objptr, ##1536
08c5c     F2 3E 02 FB | 	rdlong	local13, objptr
08c60     1F 41 02 F6 | 	mov	local14, local13
08c64     01 40 66 F0 | 	shl	local14, #1
08c68     1F 41 02 F1 | 	add	local14, local13
08c6c     02 40 66 F0 | 	shl	local14, #2
08c70     03 00 00 FF 
08c74     00 E4 85 F1 | 	sub	objptr, ##1536
08c78     F2 40 02 F1 | 	add	local14, objptr
08c7c     08 40 06 F1 | 	add	local14, #8
08c80     20 39 62 FC | 	wrlong	local10, local14
08c84     03 00 00 FF 
08c88     00 E4 05 F1 | 	add	objptr, ##1536
08c8c     F2 34 02 FB | 	rdlong	local08, objptr
08c90     01 34 06 F1 | 	add	local08, #1
08c94     F2 34 62 FC | 	wrlong	local08, objptr
08c98     13 00 00 FF 
08c9c     38 E4 85 F1 | 	sub	objptr, ##9784
08ca0     F2 34 02 FB | 	rdlong	local08, objptr
08ca4     01 34 86 F1 | 	sub	local08, #1
08ca8     F2 34 62 FC | 	wrlong	local08, objptr
08cac     37 00 00 FF 
08cb0     44 E4 85 F1 | 	sub	objptr, ##28228
08cb4                 | LR__0796
08cb4     37 00 00 FF 
08cb8     44 E4 05 F1 | 	add	objptr, ##28228
08cbc     F2 34 02 FB | 	rdlong	local08, objptr
08cc0     01 34 06 F1 | 	add	local08, #1
08cc4     F2 34 62 FC | 	wrlong	local08, objptr
08cc8     37 00 00 FF 
08ccc     44 E4 85 F1 | 	sub	objptr, ##28228
08cd0                 | LR__0797
08cd0     00 2E 06 F6 | 	mov	local05, #0
08cd4                 | ' i=0 : err=0
08cd4                 | ' if lparts(ct).token<>token_end then
08cd4     37 00 00 FF 
08cd8     44 E4 05 F1 | 	add	objptr, ##28228
08cdc     F2 40 02 FB | 	rdlong	local14, objptr
08ce0     03 40 66 F0 | 	shl	local14, #3
08ce4     02 00 00 FF 
08ce8     38 E4 85 F1 | 	sub	objptr, ##1080
08cec     F2 40 02 F1 | 	add	local14, objptr
08cf0     04 40 06 F1 | 	add	local14, #4
08cf4     20 41 02 FB | 	rdlong	local14, local14
08cf8     FE 41 0E F2 | 	cmp	local14, #510 wz
08cfc     35 00 00 FF 
08d00     0C E4 85 F1 | 	sub	objptr, ##27148
08d04     98 00 90 AD |  if_e	jmp	#LR__0799
08d08                 | '   do
08d08                 | LR__0798
08d08     D0 22 B0 FD | 	call	#_getaddr
08d0c     FD 42 02 F6 | 	mov	local15, result1
08d10     37 00 00 FF 
08d14     44 E4 05 F1 | 	add	objptr, ##28228
08d18     F2 40 02 FB | 	rdlong	local14, objptr
08d1c     01 40 06 F1 | 	add	local14, #1
08d20     F2 40 62 FC | 	wrlong	local14, objptr
08d24     01 2E 06 F1 | 	add	local05, #1
08d28                 | '     err=getaddr() :ct+=1
08d28                 | '     i+=1 
08d28                 | '     if lparts(ct).token=token_comma then ct+=1 
08d28     03 40 66 F0 | 	shl	local14, #3
08d2c     02 00 00 FF 
08d30     38 E4 85 F1 | 	sub	objptr, ##1080
08d34     F2 40 02 F1 | 	add	local14, objptr
08d38     04 40 06 F1 | 	add	local14, #4
08d3c     20 41 02 FB | 	rdlong	local14, local14
08d40     11 40 0E F2 | 	cmp	local14, #17 wz
08d44     35 00 00 FF 
08d48     0C E4 85 F1 | 	sub	objptr, ##27148
08d4c     37 00 00 AF 
08d50     44 E4 05 A1 |  if_e	add	objptr, ##28228
08d54     F2 34 02 AB |  if_e	rdlong	local08, objptr
08d58     01 34 06 A1 |  if_e	add	local08, #1
08d5c     F2 34 62 AC |  if_e	wrlong	local08, objptr
08d60     37 00 00 AF 
08d64     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08d68                 | '     if lparts(ct).token=token_end then exit loop
08d68     37 00 00 FF 
08d6c     44 E4 05 F1 | 	add	objptr, ##28228
08d70     F2 40 02 FB | 	rdlong	local14, objptr
08d74     03 40 66 F0 | 	shl	local14, #3
08d78     02 00 00 FF 
08d7c     38 E4 85 F1 | 	sub	objptr, ##1080
08d80     F2 40 02 F1 | 	add	local14, objptr
08d84     04 40 06 F1 | 	add	local14, #4
08d88     20 41 02 FB | 	rdlong	local14, local14
08d8c     FE 41 0E F2 | 	cmp	local14, #510 wz
08d90     35 00 00 FF 
08d94     0C E4 85 F1 | 	sub	objptr, ##27148
08d98     08 00 90 AD |  if_e	jmp	#LR__0800
08d9c     68 FF 9F FD | 	jmp	#LR__0798
08da0                 | LR__0799
08da0     36 42 06 F6 | 	mov	local15, #54
08da4                 | LR__0800
08da4                 | ' return i,err
08da4     17 FB 01 F6 | 	mov	result1, local05
08da8     21 FD 01 F6 | 	mov	result2, local15
08dac     A7 F0 03 F6 | 	mov	ptra, fp
08db0     B2 00 A0 FD | 	call	#popregs_
08db4                 | _compile_input_ret
08db4     2D 00 64 FD | 	ret
08db8                 | 
08db8                 | ' 
08db8                 | ' '----- compile assign to an array element
08db8                 | ' 
08db8                 | ' function compile_array_assign() as ulong 
08db8                 | _compile_array_assign
08db8     0B 4A 05 F6 | 	mov	COUNT_, #11
08dbc     A8 00 A0 FD | 	call	#pushregs_
08dc0     00 2C 06 F6 | 	mov	local04, #0
08dc4     00 2E 06 F6 | 	mov	local05, #0
08dc8     37 00 00 FF 
08dcc     44 E4 05 F1 | 	add	objptr, ##28228
08dd0     F2 30 02 FB | 	rdlong	local06, objptr
08dd4     18 FB 01 F6 | 	mov	result1, local06
08dd8     01 FA 85 F1 | 	sub	result1, #1
08ddc     03 FA 65 F0 | 	shl	result1, #3
08de0     02 00 00 FF 
08de4     38 E4 85 F1 | 	sub	objptr, ##1080
08de8     F2 FA 01 F1 | 	add	result1, objptr
08dec     FD 32 02 FB | 	rdlong	local07, result1
08df0                 | ' numpar=0 : err=0
08df0                 | ' varname$=lparts(ct-1).part$
08df0                 | ' if lparts(ct).token=token_lpar then
08df0     03 30 66 F0 | 	shl	local06, #3
08df4     F2 30 02 F1 | 	add	local06, objptr
08df8     04 30 06 F1 | 	add	local06, #4
08dfc     18 31 02 FB | 	rdlong	local06, local06
08e00     15 30 0E F2 | 	cmp	local06, #21 wz
08e04     35 00 00 FF 
08e08     0C E4 85 F1 | 	sub	objptr, ##27148
08e0c     F4 01 90 5D |  if_ne	jmp	#LR__0814
08e10     37 00 00 FF 
08e14     44 E4 05 F1 | 	add	objptr, ##28228
08e18     F2 34 02 FB | 	rdlong	local08, objptr
08e1c     01 34 06 F1 | 	add	local08, #1
08e20     F2 34 62 FC | 	wrlong	local08, objptr
08e24     37 00 00 FF 
08e28     44 E4 85 F1 | 	sub	objptr, ##28228
08e2c                 | '   ct+=1 											' omit this lpar, this is for expr list
08e2c                 | '   do
08e2c                 | LR__0810
08e2c     40 25 B0 FD | 	call	#_expr
08e30     37 00 00 FF 
08e34     44 E4 05 F1 | 	add	objptr, ##28228
08e38     F2 30 02 FB | 	rdlong	local06, objptr
08e3c     01 30 06 F1 | 	add	local06, #1
08e40     F2 30 62 FC | 	wrlong	local06, objptr
08e44     01 2C 06 F1 | 	add	local04, #1
08e48     01 30 86 F1 | 	sub	local06, #1
08e4c     03 30 66 F0 | 	shl	local06, #3
08e50     02 00 00 FF 
08e54     38 E4 85 F1 | 	sub	objptr, ##1080
08e58     F2 30 02 F1 | 	add	local06, objptr
08e5c     04 30 06 F1 | 	add	local06, #4
08e60     18 35 02 FB | 	rdlong	local08, local06
08e64     14 34 0E F2 | 	cmp	local08, #20 wz
08e68     35 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##27148
08e70     34 00 90 AD |  if_e	jmp	#LR__0811
08e74     37 00 00 FF 
08e78     44 E4 05 F1 | 	add	objptr, ##28228
08e7c     F2 34 02 FB | 	rdlong	local08, objptr
08e80     03 34 66 F0 | 	shl	local08, #3
08e84     02 00 00 FF 
08e88     38 E4 85 F1 | 	sub	objptr, ##1080
08e8c     F2 34 02 F1 | 	add	local08, objptr
08e90     04 34 06 F1 | 	add	local08, #4
08e94     1A 35 02 FB | 	rdlong	local08, local08
08e98     FE 35 0E F2 | 	cmp	local08, #510 wz
08e9c     35 00 00 FF 
08ea0     0C E4 85 F1 | 	sub	objptr, ##27148
08ea4     84 FF 9F 5D |  if_ne	jmp	#LR__0810
08ea8                 | LR__0811
08ea8     37 00 00 FF 
08eac     44 E4 05 F1 | 	add	objptr, ##28228
08eb0     F2 34 02 FB | 	rdlong	local08, objptr
08eb4     01 34 06 F1 | 	add	local08, #1
08eb8     F2 34 62 FC | 	wrlong	local08, objptr
08ebc     37 00 00 FF 
08ec0     44 E4 85 F1 | 	sub	objptr, ##28228
08ec4     A8 24 B0 FD | 	call	#_expr
08ec8     01 36 66 F6 | 	neg	local09, #1
08ecc     00 38 06 F6 | 	mov	local10, #0
08ed0                 | '   ct+=1 : expr()
08ed0                 | '   j=-1 : i=0 
08ed0                 | '   do 
08ed0                 | LR__0812
08ed0                 | '     if variables(i).name=varname$ then j=i: exit loop
08ed0     1C 31 02 F6 | 	mov	local06, local10
08ed4     04 30 66 F0 | 	shl	local06, #4
08ed8     14 00 00 FF 
08edc     F8 E5 05 F1 | 	add	objptr, ##10744
08ee0     F2 30 02 F1 | 	add	local06, objptr
08ee4     18 13 02 FB | 	rdlong	arg01, local06
08ee8     19 15 02 F6 | 	mov	arg02, local07
08eec     14 00 00 FF 
08ef0     F8 E5 85 F1 | 	sub	objptr, ##10744
08ef4     44 B0 B1 FD | 	call	#__system___string_cmp
08ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
08efc     1C 37 02 A6 |  if_e	mov	local09, local10
08f00     20 00 90 AD |  if_e	jmp	#LR__0813
08f04     01 38 06 F1 | 	add	local10, #1
08f08     35 00 00 FF 
08f0c     08 E4 05 F1 | 	add	objptr, ##27144
08f10     F2 34 02 FB | 	rdlong	local08, objptr
08f14     35 00 00 FF 
08f18     08 E4 85 F1 | 	sub	objptr, ##27144
08f1c     1A 39 5A F2 | 	cmps	local10, local08 wcz
08f20     AC FF 9F ED |  if_be	jmp	#LR__0812
08f24                 | LR__0813
08f24     1B 27 02 F6 | 	mov	local01, local09
08f28     16 29 02 F6 | 	mov	local02, local04
08f2c     17 2A 06 F6 | 	mov	local03, #23
08f30     13 35 02 F6 | 	mov	local08, local01
08f34     14 3B 02 F6 | 	mov	local11, local02
08f38     15 33 02 F6 | 	mov	local07, local03
08f3c     4A 00 00 FF 
08f40     7C E4 05 F1 | 	add	objptr, ##38012
08f44     F2 26 02 FB | 	rdlong	local01, objptr
08f48     13 37 02 F6 | 	mov	local09, local01
08f4c     01 36 66 F0 | 	shl	local09, #1
08f50     13 37 02 F1 | 	add	local09, local01
08f54     02 36 66 F0 | 	shl	local09, #2
08f58     03 00 00 FF 
08f5c     00 E4 85 F1 | 	sub	objptr, ##1536
08f60     F2 36 02 F1 | 	add	local09, objptr
08f64     1B 35 62 FC | 	wrlong	local08, local09
08f68     03 00 00 FF 
08f6c     00 E4 05 F1 | 	add	objptr, ##1536
08f70     F2 26 02 FB | 	rdlong	local01, objptr
08f74     13 37 02 F6 | 	mov	local09, local01
08f78     01 36 66 F0 | 	shl	local09, #1
08f7c     13 37 02 F1 | 	add	local09, local01
08f80     02 36 66 F0 | 	shl	local09, #2
08f84     03 00 00 FF 
08f88     00 E4 85 F1 | 	sub	objptr, ##1536
08f8c     F2 36 02 F1 | 	add	local09, objptr
08f90     04 36 06 F1 | 	add	local09, #4
08f94     1B 3B 62 FC | 	wrlong	local11, local09
08f98     03 00 00 FF 
08f9c     00 E4 05 F1 | 	add	objptr, ##1536
08fa0     F2 3A 02 FB | 	rdlong	local11, objptr
08fa4     1D 27 02 F6 | 	mov	local01, local11
08fa8     01 26 66 F0 | 	shl	local01, #1
08fac     1D 27 02 F1 | 	add	local01, local11
08fb0     02 26 66 F0 | 	shl	local01, #2
08fb4     03 00 00 FF 
08fb8     00 E4 85 F1 | 	sub	objptr, ##1536
08fbc     F2 26 02 F1 | 	add	local01, objptr
08fc0     08 26 06 F1 | 	add	local01, #8
08fc4     13 33 62 FC | 	wrlong	local07, local01
08fc8     03 00 00 FF 
08fcc     00 E4 05 F1 | 	add	objptr, ##1536
08fd0     F2 34 02 FB | 	rdlong	local08, objptr
08fd4     01 34 06 F1 | 	add	local08, #1
08fd8     F2 34 62 FC | 	wrlong	local08, objptr
08fdc                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08fdc                 | '   if numpar>3 then err=45
08fdc     04 2C 16 F2 | 	cmp	local04, #4 wc
08fe0     2D 2E 06 36 |  if_ae	mov	local05, #45
08fe4                 | '   if i>varnum then err=20
08fe4     15 00 00 FF 
08fe8     74 E4 85 F1 | 	sub	objptr, ##10868
08fec     F2 34 02 FB | 	rdlong	local08, objptr
08ff0     35 00 00 FF 
08ff4     08 E4 85 F1 | 	sub	objptr, ##27144
08ff8     1A 39 5A F2 | 	cmps	local10, local08 wcz
08ffc     14 2E 06 16 |  if_a	mov	local05, #20
09000     04 00 90 FD | 	jmp	#LR__0815
09004                 | LR__0814
09004     0E 2E 06 F6 | 	mov	local05, #14
09008                 | LR__0815
09008                 | ' return err
09008     17 FB 01 F6 | 	mov	result1, local05
0900c     A7 F0 03 F6 | 	mov	ptra, fp
09010     B2 00 A0 FD | 	call	#popregs_
09014                 | _compile_array_assign_ret
09014     2D 00 64 FD | 	ret
09018                 | 
09018                 | ' 
09018                 | ' '----- compile print command with its ";" and "," modifiers
09018                 | ' 
09018                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09018                 | _compile_print
09018     0B 4A 05 F6 | 	mov	COUNT_, #11
0901c     A8 00 A0 FD | 	call	#pushregs_
09020     00 26 06 F6 | 	mov	local01, #0
09024     1D 2A 06 F6 | 	mov	local03, #29
09028                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09028                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09028     37 00 00 FF 
0902c     44 E4 05 F1 | 	add	objptr, ##28228
09030     F2 2C 02 FB | 	rdlong	local04, objptr
09034     03 2C 66 F0 | 	shl	local04, #3
09038     02 00 00 FF 
0903c     38 E4 85 F1 | 	sub	objptr, ##1080
09040     F2 2C 02 F1 | 	add	local04, objptr
09044     04 2C 06 F1 | 	add	local04, #4
09048     16 2D 02 FB | 	rdlong	local04, local04
0904c     FE 2D 0E F2 | 	cmp	local04, #510 wz
09050     35 00 00 FF 
09054     0C E4 85 F1 | 	sub	objptr, ##27148
09058     68 01 90 5D |  if_ne	jmp	#LR__0820
0905c     20 2A 06 F6 | 	mov	local03, #32
09060     13 2F 02 F6 | 	mov	local05, local01
09064     14 31 02 F6 | 	mov	local06, local02
09068     15 33 02 F6 | 	mov	local07, local03
0906c     4A 00 00 FF 
09070     7C E4 05 F1 | 	add	objptr, ##38012
09074     F2 34 02 FB | 	rdlong	local08, objptr
09078     1A 37 02 F6 | 	mov	local09, local08
0907c     01 36 66 F0 | 	shl	local09, #1
09080     1A 37 02 F1 | 	add	local09, local08
09084     02 36 66 F0 | 	shl	local09, #2
09088     03 00 00 FF 
0908c     00 E4 85 F1 | 	sub	objptr, ##1536
09090     F2 36 02 F1 | 	add	local09, objptr
09094     1B 2F 62 FC | 	wrlong	local05, local09
09098     03 00 00 FF 
0909c     00 E4 05 F1 | 	add	objptr, ##1536
090a0     F2 2E 02 FB | 	rdlong	local05, objptr
090a4     17 39 02 F6 | 	mov	local10, local05
090a8     01 38 66 F0 | 	shl	local10, #1
090ac     17 39 02 F1 | 	add	local10, local05
090b0     02 38 66 F0 | 	shl	local10, #2
090b4     03 00 00 FF 
090b8     00 E4 85 F1 | 	sub	objptr, ##1536
090bc     F2 38 02 F1 | 	add	local10, objptr
090c0     04 38 06 F1 | 	add	local10, #4
090c4     1C 31 62 FC | 	wrlong	local06, local10
090c8     03 00 00 FF 
090cc     00 E4 05 F1 | 	add	objptr, ##1536
090d0     F2 2E 02 FB | 	rdlong	local05, objptr
090d4     17 3B 02 F6 | 	mov	local11, local05
090d8     01 3A 66 F0 | 	shl	local11, #1
090dc     17 3B 02 F1 | 	add	local11, local05
090e0     02 3A 66 F0 | 	shl	local11, #2
090e4     03 00 00 FF 
090e8     00 E4 85 F1 | 	sub	objptr, ##1536
090ec     F2 3A 02 F1 | 	add	local11, objptr
090f0     08 3A 06 F1 | 	add	local11, #8
090f4     1D 33 62 FC | 	wrlong	local07, local11
090f8     03 00 00 FF 
090fc     00 E4 05 F1 | 	add	objptr, ##1536
09100     F2 2E 02 FB | 	rdlong	local05, objptr
09104     01 2E 06 F1 | 	add	local05, #1
09108     F2 2E 62 FC | 	wrlong	local05, objptr
0910c     44 2A 06 F6 | 	mov	local03, #68
09110     13 2F 02 F6 | 	mov	local05, local01
09114     14 31 02 F6 | 	mov	local06, local02
09118     15 33 02 F6 | 	mov	local07, local03
0911c     F2 34 02 FB | 	rdlong	local08, objptr
09120     1A 37 02 F6 | 	mov	local09, local08
09124     01 36 66 F0 | 	shl	local09, #1
09128     1A 37 02 F1 | 	add	local09, local08
0912c     02 36 66 F0 | 	shl	local09, #2
09130     03 00 00 FF 
09134     00 E4 85 F1 | 	sub	objptr, ##1536
09138     F2 36 02 F1 | 	add	local09, objptr
0913c     1B 2F 62 FC | 	wrlong	local05, local09
09140     03 00 00 FF 
09144     00 E4 05 F1 | 	add	objptr, ##1536
09148     F2 3A 02 FB | 	rdlong	local11, objptr
0914c     1D 39 02 F6 | 	mov	local10, local11
09150     01 38 66 F0 | 	shl	local10, #1
09154     1D 39 02 F1 | 	add	local10, local11
09158     02 38 66 F0 | 	shl	local10, #2
0915c     03 00 00 FF 
09160     00 E4 85 F1 | 	sub	objptr, ##1536
09164     F2 38 02 F1 | 	add	local10, objptr
09168     04 38 06 F1 | 	add	local10, #4
0916c     1C 31 62 FC | 	wrlong	local06, local10
09170     03 00 00 FF 
09174     00 E4 05 F1 | 	add	objptr, ##1536
09178     F2 38 02 FB | 	rdlong	local10, objptr
0917c     1C 3B 02 F6 | 	mov	local11, local10
09180     01 3A 66 F0 | 	shl	local11, #1
09184     1C 3B 02 F1 | 	add	local11, local10
09188     02 3A 66 F0 | 	shl	local11, #2
0918c     03 00 00 FF 
09190     00 E4 85 F1 | 	sub	objptr, ##1536
09194     F2 3A 02 F1 | 	add	local11, objptr
09198     08 3A 06 F1 | 	add	local11, #8
0919c     1D 33 62 FC | 	wrlong	local07, local11
091a0     03 00 00 FF 
091a4     00 E4 05 F1 | 	add	objptr, ##1536
091a8     F2 2E 02 FB | 	rdlong	local05, objptr
091ac     01 2E 06 F1 | 	add	local05, #1
091b0     F2 2E 62 FC | 	wrlong	local05, objptr
091b4     4A 00 00 FF 
091b8     7C E4 85 F1 | 	sub	objptr, ##38012
091bc     00 FA 05 F6 | 	mov	result1, #0
091c0     20 05 90 FD | 	jmp	#LR__0827
091c4                 | LR__0820
091c4                 | ' do
091c4                 | LR__0821
091c4     A8 21 B0 FD | 	call	#_expr
091c8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
091c8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
091c8     37 00 00 FF 
091cc     44 E4 05 F1 | 	add	objptr, ##28228
091d0     F2 2C 02 FB | 	rdlong	local04, objptr
091d4     03 2C 66 F0 | 	shl	local04, #3
091d8     02 00 00 FF 
091dc     38 E4 85 F1 | 	sub	objptr, ##1080
091e0     F2 2C 02 F1 | 	add	local04, objptr
091e4     04 2C 06 F1 | 	add	local04, #4
091e8     16 35 02 FB | 	rdlong	local08, local04
091ec     11 34 0E F2 | 	cmp	local08, #17 wz
091f0     35 00 00 FF 
091f4     0C E4 85 F1 | 	sub	objptr, ##27148
091f8     60 01 90 5D |  if_ne	jmp	#LR__0822
091fc     21 2A 06 F6 | 	mov	local03, #33
09200     13 2F 02 F6 | 	mov	local05, local01
09204     14 31 02 F6 | 	mov	local06, local02
09208     15 33 02 F6 | 	mov	local07, local03
0920c     4A 00 00 FF 
09210     7C E4 05 F1 | 	add	objptr, ##38012
09214     F2 34 02 FB | 	rdlong	local08, objptr
09218     1A 37 02 F6 | 	mov	local09, local08
0921c     01 36 66 F0 | 	shl	local09, #1
09220     1A 37 02 F1 | 	add	local09, local08
09224     02 36 66 F0 | 	shl	local09, #2
09228     03 00 00 FF 
0922c     00 E4 85 F1 | 	sub	objptr, ##1536
09230     F2 36 02 F1 | 	add	local09, objptr
09234     1B 2F 62 FC | 	wrlong	local05, local09
09238     03 00 00 FF 
0923c     00 E4 05 F1 | 	add	objptr, ##1536
09240     F2 3A 02 FB | 	rdlong	local11, objptr
09244     1D 39 02 F6 | 	mov	local10, local11
09248     01 38 66 F0 | 	shl	local10, #1
0924c     1D 39 02 F1 | 	add	local10, local11
09250     02 38 66 F0 | 	shl	local10, #2
09254     03 00 00 FF 
09258     00 E4 85 F1 | 	sub	objptr, ##1536
0925c     F2 38 02 F1 | 	add	local10, objptr
09260     04 38 06 F1 | 	add	local10, #4
09264     1C 31 62 FC | 	wrlong	local06, local10
09268     03 00 00 FF 
0926c     00 E4 05 F1 | 	add	objptr, ##1536
09270     F2 2E 02 FB | 	rdlong	local05, objptr
09274     17 3B 02 F6 | 	mov	local11, local05
09278     01 3A 66 F0 | 	shl	local11, #1
0927c     17 3B 02 F1 | 	add	local11, local05
09280     02 3A 66 F0 | 	shl	local11, #2
09284     03 00 00 FF 
09288     00 E4 85 F1 | 	sub	objptr, ##1536
0928c     F2 3A 02 F1 | 	add	local11, objptr
09290     08 3A 06 F1 | 	add	local11, #8
09294     1D 33 62 FC | 	wrlong	local07, local11
09298     03 00 00 FF 
0929c     00 E4 05 F1 | 	add	objptr, ##1536
092a0     F2 2E 02 FB | 	rdlong	local05, objptr
092a4     01 2E 06 F1 | 	add	local05, #1
092a8     F2 2E 62 FC | 	wrlong	local05, objptr
092ac     44 2A 06 F6 | 	mov	local03, #68
092b0     13 2F 02 F6 | 	mov	local05, local01
092b4     14 31 02 F6 | 	mov	local06, local02
092b8     15 33 02 F6 | 	mov	local07, local03
092bc     F2 34 02 FB | 	rdlong	local08, objptr
092c0     1A 37 02 F6 | 	mov	local09, local08
092c4     01 36 66 F0 | 	shl	local09, #1
092c8     1A 37 02 F1 | 	add	local09, local08
092cc     02 36 66 F0 | 	shl	local09, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 36 02 F1 | 	add	local09, objptr
092dc     1B 2F 62 FC | 	wrlong	local05, local09
092e0     03 00 00 FF 
092e4     00 E4 05 F1 | 	add	objptr, ##1536
092e8     F2 3A 02 FB | 	rdlong	local11, objptr
092ec     1D 39 02 F6 | 	mov	local10, local11
092f0     01 38 66 F0 | 	shl	local10, #1
092f4     1D 39 02 F1 | 	add	local10, local11
092f8     02 38 66 F0 | 	shl	local10, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 38 02 F1 | 	add	local10, objptr
09308     04 38 06 F1 | 	add	local10, #4
0930c     1C 31 62 FC | 	wrlong	local06, local10
09310     03 00 00 FF 
09314     00 E4 05 F1 | 	add	objptr, ##1536
09318     F2 38 02 FB | 	rdlong	local10, objptr
0931c     1C 3B 02 F6 | 	mov	local11, local10
09320     01 3A 66 F0 | 	shl	local11, #1
09324     1C 3B 02 F1 | 	add	local11, local10
09328     02 3A 66 F0 | 	shl	local11, #2
0932c     03 00 00 FF 
09330     00 E4 85 F1 | 	sub	objptr, ##1536
09334     F2 3A 02 F1 | 	add	local11, objptr
09338     08 3A 06 F1 | 	add	local11, #8
0933c     1D 33 62 FC | 	wrlong	local07, local11
09340     03 00 00 FF 
09344     00 E4 05 F1 | 	add	objptr, ##1536
09348     F2 2E 02 FB | 	rdlong	local05, objptr
0934c     01 2E 06 F1 | 	add	local05, #1
09350     F2 2E 62 FC | 	wrlong	local05, objptr
09354     4A 00 00 FF 
09358     7C E4 85 F1 | 	sub	objptr, ##38012
0935c                 | LR__0822
0935c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0935c     37 00 00 FF 
09360     44 E4 05 F1 | 	add	objptr, ##28228
09364     F2 2C 02 FB | 	rdlong	local04, objptr
09368     03 2C 66 F0 | 	shl	local04, #3
0936c     02 00 00 FF 
09370     38 E4 85 F1 | 	sub	objptr, ##1080
09374     F2 2C 02 F1 | 	add	local04, objptr
09378     04 2C 06 F1 | 	add	local04, #4
0937c     16 35 02 FB | 	rdlong	local08, local04
09380     12 34 0E F2 | 	cmp	local08, #18 wz
09384     35 00 00 FF 
09388     0C E4 85 F1 | 	sub	objptr, ##27148
0938c     60 01 90 5D |  if_ne	jmp	#LR__0823
09390     22 2A 06 F6 | 	mov	local03, #34
09394     13 2F 02 F6 | 	mov	local05, local01
09398     14 31 02 F6 | 	mov	local06, local02
0939c     15 33 02 F6 | 	mov	local07, local03
093a0     4A 00 00 FF 
093a4     7C E4 05 F1 | 	add	objptr, ##38012
093a8     F2 34 02 FB | 	rdlong	local08, objptr
093ac     1A 37 02 F6 | 	mov	local09, local08
093b0     01 36 66 F0 | 	shl	local09, #1
093b4     1A 37 02 F1 | 	add	local09, local08
093b8     02 36 66 F0 | 	shl	local09, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 36 02 F1 | 	add	local09, objptr
093c8     1B 2F 62 FC | 	wrlong	local05, local09
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 3A 02 FB | 	rdlong	local11, objptr
093d8     1D 39 02 F6 | 	mov	local10, local11
093dc     01 38 66 F0 | 	shl	local10, #1
093e0     1D 39 02 F1 | 	add	local10, local11
093e4     02 38 66 F0 | 	shl	local10, #2
093e8     03 00 00 FF 
093ec     00 E4 85 F1 | 	sub	objptr, ##1536
093f0     F2 38 02 F1 | 	add	local10, objptr
093f4     04 38 06 F1 | 	add	local10, #4
093f8     1C 31 62 FC | 	wrlong	local06, local10
093fc     03 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##1536
09404     F2 2E 02 FB | 	rdlong	local05, objptr
09408     17 3B 02 F6 | 	mov	local11, local05
0940c     01 3A 66 F0 | 	shl	local11, #1
09410     17 3B 02 F1 | 	add	local11, local05
09414     02 3A 66 F0 | 	shl	local11, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 3A 02 F1 | 	add	local11, objptr
09424     08 3A 06 F1 | 	add	local11, #8
09428     1D 33 62 FC | 	wrlong	local07, local11
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 2E 02 FB | 	rdlong	local05, objptr
09438     01 2E 06 F1 | 	add	local05, #1
0943c     F2 2E 62 FC | 	wrlong	local05, objptr
09440     44 2A 06 F6 | 	mov	local03, #68
09444     13 2F 02 F6 | 	mov	local05, local01
09448     14 31 02 F6 | 	mov	local06, local02
0944c     15 33 02 F6 | 	mov	local07, local03
09450     F2 34 02 FB | 	rdlong	local08, objptr
09454     1A 37 02 F6 | 	mov	local09, local08
09458     01 36 66 F0 | 	shl	local09, #1
0945c     1A 37 02 F1 | 	add	local09, local08
09460     02 36 66 F0 | 	shl	local09, #2
09464     03 00 00 FF 
09468     00 E4 85 F1 | 	sub	objptr, ##1536
0946c     F2 36 02 F1 | 	add	local09, objptr
09470     1B 2F 62 FC | 	wrlong	local05, local09
09474     03 00 00 FF 
09478     00 E4 05 F1 | 	add	objptr, ##1536
0947c     F2 3A 02 FB | 	rdlong	local11, objptr
09480     1D 39 02 F6 | 	mov	local10, local11
09484     01 38 66 F0 | 	shl	local10, #1
09488     1D 39 02 F1 | 	add	local10, local11
0948c     02 38 66 F0 | 	shl	local10, #2
09490     03 00 00 FF 
09494     00 E4 85 F1 | 	sub	objptr, ##1536
09498     F2 38 02 F1 | 	add	local10, objptr
0949c     04 38 06 F1 | 	add	local10, #4
094a0     1C 31 62 FC | 	wrlong	local06, local10
094a4     03 00 00 FF 
094a8     00 E4 05 F1 | 	add	objptr, ##1536
094ac     F2 38 02 FB | 	rdlong	local10, objptr
094b0     1C 3B 02 F6 | 	mov	local11, local10
094b4     01 3A 66 F0 | 	shl	local11, #1
094b8     1C 3B 02 F1 | 	add	local11, local10
094bc     02 3A 66 F0 | 	shl	local11, #2
094c0     03 00 00 FF 
094c4     00 E4 85 F1 | 	sub	objptr, ##1536
094c8     F2 3A 02 F1 | 	add	local11, objptr
094cc     08 3A 06 F1 | 	add	local11, #8
094d0     1D 33 62 FC | 	wrlong	local07, local11
094d4     03 00 00 FF 
094d8     00 E4 05 F1 | 	add	objptr, ##1536
094dc     F2 2E 02 FB | 	rdlong	local05, objptr
094e0     01 2E 06 F1 | 	add	local05, #1
094e4     F2 2E 62 FC | 	wrlong	local05, objptr
094e8     4A 00 00 FF 
094ec     7C E4 85 F1 | 	sub	objptr, ##38012
094f0                 | LR__0823
094f0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
094f0     37 00 00 FF 
094f4     44 E4 05 F1 | 	add	objptr, ##28228
094f8     F2 2C 02 FB | 	rdlong	local04, objptr
094fc     03 2C 66 F0 | 	shl	local04, #3
09500     02 00 00 FF 
09504     38 E4 85 F1 | 	sub	objptr, ##1080
09508     F2 2C 02 F1 | 	add	local04, objptr
0950c     04 2C 06 F1 | 	add	local04, #4
09510     16 35 02 FB | 	rdlong	local08, local04
09514     FE 35 0E F2 | 	cmp	local08, #510 wz
09518     35 00 00 FF 
0951c     0C E4 85 F1 | 	sub	objptr, ##27148
09520     B8 00 90 5D |  if_ne	jmp	#LR__0824
09524     44 2A 06 F6 | 	mov	local03, #68
09528     13 2F 02 F6 | 	mov	local05, local01
0952c     14 31 02 F6 | 	mov	local06, local02
09530     15 33 02 F6 | 	mov	local07, local03
09534     4A 00 00 FF 
09538     7C E4 05 F1 | 	add	objptr, ##38012
0953c     F2 34 02 FB | 	rdlong	local08, objptr
09540     1A 37 02 F6 | 	mov	local09, local08
09544     01 36 66 F0 | 	shl	local09, #1
09548     1A 37 02 F1 | 	add	local09, local08
0954c     02 36 66 F0 | 	shl	local09, #2
09550     03 00 00 FF 
09554     00 E4 85 F1 | 	sub	objptr, ##1536
09558     F2 36 02 F1 | 	add	local09, objptr
0955c     1B 2F 62 FC | 	wrlong	local05, local09
09560     03 00 00 FF 
09564     00 E4 05 F1 | 	add	objptr, ##1536
09568     F2 3A 02 FB | 	rdlong	local11, objptr
0956c     1D 39 02 F6 | 	mov	local10, local11
09570     01 38 66 F0 | 	shl	local10, #1
09574     1D 39 02 F1 | 	add	local10, local11
09578     02 38 66 F0 | 	shl	local10, #2
0957c     03 00 00 FF 
09580     00 E4 85 F1 | 	sub	objptr, ##1536
09584     F2 38 02 F1 | 	add	local10, objptr
09588     04 38 06 F1 | 	add	local10, #4
0958c     1C 31 62 FC | 	wrlong	local06, local10
09590     03 00 00 FF 
09594     00 E4 05 F1 | 	add	objptr, ##1536
09598     F2 38 02 FB | 	rdlong	local10, objptr
0959c     1C 3B 02 F6 | 	mov	local11, local10
095a0     01 3A 66 F0 | 	shl	local11, #1
095a4     1C 3B 02 F1 | 	add	local11, local10
095a8     02 3A 66 F0 | 	shl	local11, #2
095ac     03 00 00 FF 
095b0     00 E4 85 F1 | 	sub	objptr, ##1536
095b4     F2 3A 02 F1 | 	add	local11, objptr
095b8     08 3A 06 F1 | 	add	local11, #8
095bc     1D 33 62 FC | 	wrlong	local07, local11
095c0     03 00 00 FF 
095c4     00 E4 05 F1 | 	add	objptr, ##1536
095c8     F2 2E 02 FB | 	rdlong	local05, objptr
095cc     01 2E 06 F1 | 	add	local05, #1
095d0     F2 2E 62 FC | 	wrlong	local05, objptr
095d4     4A 00 00 FF 
095d8     7C E4 85 F1 | 	sub	objptr, ##38012
095dc                 | LR__0824
095dc                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
095dc     37 00 00 FF 
095e0     44 E4 05 F1 | 	add	objptr, ##28228
095e4     F2 2C 02 FB | 	rdlong	local04, objptr
095e8     03 2C 66 F0 | 	shl	local04, #3
095ec     02 00 00 FF 
095f0     38 E4 85 F1 | 	sub	objptr, ##1080
095f4     F2 2C 02 F1 | 	add	local04, objptr
095f8     04 2C 06 F1 | 	add	local04, #4
095fc     16 35 02 FB | 	rdlong	local08, local04
09600     11 34 0E F2 | 	cmp	local08, #17 wz
09604     35 00 00 FF 
09608     0C E4 85 F1 | 	sub	objptr, ##27148
0960c     6C 00 90 AD |  if_e	jmp	#LR__0825
09610     37 00 00 FF 
09614     44 E4 05 F1 | 	add	objptr, ##28228
09618     F2 34 02 FB | 	rdlong	local08, objptr
0961c     03 34 66 F0 | 	shl	local08, #3
09620     02 00 00 FF 
09624     38 E4 85 F1 | 	sub	objptr, ##1080
09628     F2 34 02 F1 | 	add	local08, objptr
0962c     04 34 06 F1 | 	add	local08, #4
09630     1A 35 02 FB | 	rdlong	local08, local08
09634     12 34 0E F2 | 	cmp	local08, #18 wz
09638     35 00 00 FF 
0963c     0C E4 85 F1 | 	sub	objptr, ##27148
09640     38 00 90 AD |  if_e	jmp	#LR__0825
09644     37 00 00 FF 
09648     44 E4 05 F1 | 	add	objptr, ##28228
0964c     F2 3A 02 FB | 	rdlong	local11, objptr
09650     03 3A 66 F0 | 	shl	local11, #3
09654     02 00 00 FF 
09658     38 E4 85 F1 | 	sub	objptr, ##1080
0965c     F2 3A 02 F1 | 	add	local11, objptr
09660     04 3A 06 F1 | 	add	local11, #4
09664     1D 3B 02 FB | 	rdlong	local11, local11
09668     FE 3B 0E F2 | 	cmp	local11, #510 wz
0966c     35 00 00 FF 
09670     0C E4 85 F1 | 	sub	objptr, ##27148
09674     16 FA 05 56 |  if_ne	mov	result1, #22
09678     68 00 90 5D |  if_ne	jmp	#LR__0827
0967c                 | LR__0825
0967c     37 00 00 FF 
09680     44 E4 05 F1 | 	add	objptr, ##28228
09684     F2 2C 02 FB | 	rdlong	local04, objptr
09688     01 2C 06 F1 | 	add	local04, #1
0968c     F2 2C 62 FC | 	wrlong	local04, objptr
09690     03 2C 66 F0 | 	shl	local04, #3
09694     02 00 00 FF 
09698     38 E4 85 F1 | 	sub	objptr, ##1080
0969c     F2 2C 02 F1 | 	add	local04, objptr
096a0     04 2C 06 F1 | 	add	local04, #4
096a4     16 35 02 FB | 	rdlong	local08, local04
096a8     FE 35 0E F2 | 	cmp	local08, #510 wz
096ac     35 00 00 FF 
096b0     0C E4 85 F1 | 	sub	objptr, ##27148
096b4     28 00 90 AD |  if_e	jmp	#LR__0826
096b8     37 00 00 FF 
096bc     44 E4 05 F1 | 	add	objptr, ##28228
096c0     F2 3A 02 FB | 	rdlong	local11, objptr
096c4     0E 00 00 FF 
096c8     1C E4 05 F1 | 	add	objptr, ##7196
096cc     F2 38 02 FB | 	rdlong	local10, objptr
096d0     45 00 00 FF 
096d4     60 E4 85 F1 | 	sub	objptr, ##35424
096d8     1C 3B 52 F2 | 	cmps	local11, local10 wc
096dc     E4 FA 9F CD |  if_b	jmp	#LR__0821
096e0                 | LR__0826
096e0                 | ' return 0
096e0     00 FA 05 F6 | 	mov	result1, #0
096e4                 | LR__0827
096e4     A7 F0 03 F6 | 	mov	ptra, fp
096e8     B2 00 A0 FD | 	call	#popregs_
096ec                 | _compile_print_ret
096ec     2D 00 64 FD | 	ret
096f0                 | 
096f0                 | ' 
096f0                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
096f0                 | ' 
096f0                 | ' function compile_if(aline as ulong) as ulong  
096f0                 | _compile_if
096f0     09 4A 05 F6 | 	mov	COUNT_, #9
096f4     A8 00 A0 FD | 	call	#pushregs_
096f8                 | _compile_if_enter
096f8     09 2D 02 F6 | 	mov	local04, arg01
096fc                 | ' return expr()
096fc     70 1C B0 FD | 	call	#_expr
09700     37 00 00 FF 
09704     44 E4 05 F1 | 	add	objptr, ##28228
09708     F2 14 02 FB | 	rdlong	arg02, objptr
0970c     0A 2F 02 F6 | 	mov	local05, arg02
09710     03 2E 66 F0 | 	shl	local05, #3
09714     02 00 00 FF 
09718     38 E4 85 F1 | 	sub	objptr, ##1080
0971c     F2 2E 02 F1 | 	add	local05, objptr
09720     04 2E 06 F1 | 	add	local05, #4
09724     17 2F 02 FB | 	rdlong	local05, local05
09728     01 14 06 F1 | 	add	arg02, #1
0972c     02 00 00 FF 
09730     38 E4 05 F1 | 	add	objptr, ##1080
09734     F2 14 62 FC | 	wrlong	arg02, objptr
09738     37 00 00 FF 
0973c     44 E4 85 F1 | 	sub	objptr, ##28228
09740                 | ' 
09740                 | ' err=compile_fun_1p()
09740                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09740     5B 2E 0E F2 | 	cmp	local05, #91 wz
09744     34 FA 05 56 |  if_ne	mov	result1, #52
09748     20 01 90 5D |  if_ne	jmp	#LR__0832
0974c     58 2A 06 F6 | 	mov	local03, #88
09750     13 31 02 F6 | 	mov	local06, local01
09754     14 33 02 F6 | 	mov	local07, local02
09758     15 15 02 F6 | 	mov	arg02, local03
0975c     4A 00 00 FF 
09760     7C E4 05 F1 | 	add	objptr, ##38012
09764     F2 12 02 FB | 	rdlong	arg01, objptr
09768     09 35 02 F6 | 	mov	local08, arg01
0976c     01 34 66 F0 | 	shl	local08, #1
09770     09 35 02 F1 | 	add	local08, arg01
09774     02 34 66 F0 | 	shl	local08, #2
09778     03 00 00 FF 
0977c     00 E4 85 F1 | 	sub	objptr, ##1536
09780     F2 34 02 F1 | 	add	local08, objptr
09784     1A 31 62 FC | 	wrlong	local06, local08
09788     03 00 00 FF 
0978c     00 E4 05 F1 | 	add	objptr, ##1536
09790     F2 30 02 FB | 	rdlong	local06, objptr
09794     18 13 02 F6 | 	mov	arg01, local06
09798     01 12 66 F0 | 	shl	arg01, #1
0979c     18 13 02 F1 | 	add	arg01, local06
097a0     02 12 66 F0 | 	shl	arg01, #2
097a4     03 00 00 FF 
097a8     00 E4 85 F1 | 	sub	objptr, ##1536
097ac     F2 12 02 F1 | 	add	arg01, objptr
097b0     04 12 06 F1 | 	add	arg01, #4
097b4     09 33 62 FC | 	wrlong	local07, arg01
097b8     03 00 00 FF 
097bc     00 E4 05 F1 | 	add	objptr, ##1536
097c0     F2 30 02 FB | 	rdlong	local06, objptr
097c4     18 13 02 F6 | 	mov	arg01, local06
097c8     01 12 66 F0 | 	shl	arg01, #1
097cc     18 13 02 F1 | 	add	arg01, local06
097d0     02 12 66 F0 | 	shl	arg01, #2
097d4     03 00 00 FF 
097d8     00 E4 85 F1 | 	sub	objptr, ##1536
097dc     F2 12 02 F1 | 	add	arg01, objptr
097e0     08 12 06 F1 | 	add	arg01, #8
097e4     09 15 62 FC | 	wrlong	arg02, arg01
097e8     03 00 00 FF 
097ec     00 E4 05 F1 | 	add	objptr, ##1536
097f0     F2 30 02 FB | 	rdlong	local06, objptr
097f4     01 30 06 F1 | 	add	local06, #1
097f8     F2 30 62 FC | 	wrlong	local06, objptr
097fc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
097fc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
097fc     13 00 00 FF 
09800     38 E4 85 F1 | 	sub	objptr, ##9784
09804     F2 14 02 FB | 	rdlong	arg02, objptr
09808     01 14 06 F1 | 	add	arg02, #1
0980c     03 14 66 F0 | 	shl	arg02, #3
09810     02 00 00 FF 
09814     38 E4 85 F1 | 	sub	objptr, ##1080
09818     F2 14 02 F1 | 	add	arg02, objptr
0981c     0A 13 02 FB | 	rdlong	arg01, arg02
09820     35 00 00 FF 
09824     0C E4 85 F1 | 	sub	objptr, ##27148
09828                 | ' 
09828                 | ' select case s
09828     9E 01 00 FF 
0982c     44 14 06 F6 | 	mov	arg02, ##@LR__5411
09830     08 A7 B1 FD | 	call	#__system___string_cmp
09834     00 FA 0D F2 | 	cmp	result1, #0 wz
09838     1B FA 05 A6 |  if_e	mov	result1, #27
0983c     00 FA 05 56 |  if_ne	mov	result1, #0
09840     00 FA 0D F2 | 	cmp	result1, #0 wz
09844     10 00 90 AD |  if_e	jmp	#LR__0830
09848     05 12 06 F6 | 	mov	arg01, #5
0984c     38 E4 BF FD | 	call	#_compile_immediate_assign
09850     FD 36 02 F6 | 	mov	local09, result1
09854     10 00 90 FD | 	jmp	#LR__0831
09858                 | LR__0830
09858     05 12 06 F6 | 	mov	arg01, #5
0985c     16 15 02 F6 | 	mov	arg02, local04
09860     78 DA BF FD | 	call	#_compile_immediate
09864     FD 36 02 F6 | 	mov	local09, result1
09868                 | LR__0831
09868                 | ' return err
09868     1B FB 01 F6 | 	mov	result1, local09
0986c                 | LR__0832
0986c     A7 F0 03 F6 | 	mov	ptra, fp
09870     B2 00 A0 FD | 	call	#popregs_
09874                 | _compile_if_ret
09874     2D 00 64 FD | 	ret
09878                 | 
09878                 | ' 
09878                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09878                 | ' 
09878                 | ' function compile_else(aline as ulong) as ulong  
09878                 | _compile_else
09878     07 4A 05 F6 | 	mov	COUNT_, #7
0987c     A8 00 A0 FD | 	call	#pushregs_
09880                 | _compile_else_enter
09880     09 2D 02 F6 | 	mov	local04, arg01
09884     5A 2A 06 F6 | 	mov	local03, #90
09888     13 2F 02 F6 | 	mov	local05, local01
0988c     14 31 02 F6 | 	mov	local06, local02
09890     15 27 02 F6 | 	mov	local01, local03
09894     4A 00 00 FF 
09898     7C E4 05 F1 | 	add	objptr, ##38012
0989c     F2 14 02 FB | 	rdlong	arg02, objptr
098a0     0A 13 02 F6 | 	mov	arg01, arg02
098a4     01 12 66 F0 | 	shl	arg01, #1
098a8     0A 13 02 F1 | 	add	arg01, arg02
098ac     02 12 66 F0 | 	shl	arg01, #2
098b0     03 00 00 FF 
098b4     00 E4 85 F1 | 	sub	objptr, ##1536
098b8     F2 12 02 F1 | 	add	arg01, objptr
098bc     09 2F 62 FC | 	wrlong	local05, arg01
098c0     03 00 00 FF 
098c4     00 E4 05 F1 | 	add	objptr, ##1536
098c8     F2 2E 02 FB | 	rdlong	local05, objptr
098cc     17 15 02 F6 | 	mov	arg02, local05
098d0     01 14 66 F0 | 	shl	arg02, #1
098d4     17 15 02 F1 | 	add	arg02, local05
098d8     02 14 66 F0 | 	shl	arg02, #2
098dc     03 00 00 FF 
098e0     00 E4 85 F1 | 	sub	objptr, ##1536
098e4     F2 14 02 F1 | 	add	arg02, objptr
098e8     04 14 06 F1 | 	add	arg02, #4
098ec     0A 31 62 FC | 	wrlong	local06, arg02
098f0     03 00 00 FF 
098f4     00 E4 05 F1 | 	add	objptr, ##1536
098f8     F2 30 02 FB | 	rdlong	local06, objptr
098fc     18 2F 02 F6 | 	mov	local05, local06
09900     01 2E 66 F0 | 	shl	local05, #1
09904     18 2F 02 F1 | 	add	local05, local06
09908     02 2E 66 F0 | 	shl	local05, #2
0990c     03 00 00 FF 
09910     00 E4 85 F1 | 	sub	objptr, ##1536
09914     F2 2E 02 F1 | 	add	local05, objptr
09918     08 2E 06 F1 | 	add	local05, #8
0991c     17 27 62 FC | 	wrlong	local01, local05
09920     03 00 00 FF 
09924     00 E4 05 F1 | 	add	objptr, ##1536
09928     F2 2E 02 FB | 	rdlong	local05, objptr
0992c     01 2E 06 F1 | 	add	local05, #1
09930     F2 2E 62 FC | 	wrlong	local05, objptr
09934                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09934                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09934     13 00 00 FF 
09938     38 E4 85 F1 | 	sub	objptr, ##9784
0993c     F2 30 02 FB | 	rdlong	local06, objptr
09940     01 30 06 F1 | 	add	local06, #1
09944     03 30 66 F0 | 	shl	local06, #3
09948     02 00 00 FF 
0994c     38 E4 85 F1 | 	sub	objptr, ##1080
09950     F2 30 02 F1 | 	add	local06, objptr
09954     18 13 02 FB | 	rdlong	arg01, local06
09958     35 00 00 FF 
0995c     0C E4 85 F1 | 	sub	objptr, ##27148
09960                 | ' 
09960                 | ' select case s
09960     9E 01 00 FF 
09964     44 14 06 F6 | 	mov	arg02, ##@LR__5411
09968     D0 A5 B1 FD | 	call	#__system___string_cmp
0996c     00 FA 0D F2 | 	cmp	result1, #0 wz
09970     1B FA 05 A6 |  if_e	mov	result1, #27
09974     00 FA 05 56 |  if_ne	mov	result1, #0
09978     00 FA 0D F2 | 	cmp	result1, #0 wz
0997c     10 00 90 AD |  if_e	jmp	#LR__0840
09980     05 12 06 F6 | 	mov	arg01, #5
09984     00 E3 BF FD | 	call	#_compile_immediate_assign
09988     FD 32 02 F6 | 	mov	local07, result1
0998c     10 00 90 FD | 	jmp	#LR__0841
09990                 | LR__0840
09990     05 12 06 F6 | 	mov	arg01, #5
09994     16 15 02 F6 | 	mov	arg02, local04
09998     40 D9 BF FD | 	call	#_compile_immediate
0999c     FD 32 02 F6 | 	mov	local07, result1
099a0                 | LR__0841
099a0                 | ' return err
099a0     19 FB 01 F6 | 	mov	result1, local07
099a4     A7 F0 03 F6 | 	mov	ptra, fp
099a8     B2 00 A0 FD | 	call	#popregs_
099ac                 | _compile_else_ret
099ac     2D 00 64 FD | 	ret
099b0                 | 
099b0                 | ' 
099b0                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
099b0                 | ' 
099b0                 | ' function compile_dim() as ulong  
099b0                 | _compile_dim
099b0     11 4A 05 F6 | 	mov	COUNT_, #17
099b4     A8 00 A0 FD | 	call	#pushregs_
099b8     01 26 06 F6 | 	mov	local01, #1
099bc     01 28 06 F6 | 	mov	local02, #1
099c0     01 2A 06 F6 | 	mov	local03, #1
099c4                 | ' 
099c4                 | ' dims(0)=1: dims(1)=1: dims(2)=1
099c4                 | ' if isname(lparts(ct).part$) then 
099c4     37 00 00 FF 
099c8     44 E4 05 F1 | 	add	objptr, ##28228
099cc     F2 18 02 FB | 	rdlong	arg04, objptr
099d0     03 18 66 F0 | 	shl	arg04, #3
099d4     02 00 00 FF 
099d8     38 E4 85 F1 | 	sub	objptr, ##1080
099dc     F2 18 02 F1 | 	add	arg04, objptr
099e0     0C 13 02 FB | 	rdlong	arg01, arg04
099e4     35 00 00 FF 
099e8     0C E4 85 F1 | 	sub	objptr, ##27148
099ec     44 C7 BF FD | 	call	#_isname
099f0     00 FA 0D F2 | 	cmp	result1, #0 wz
099f4     78 05 90 AD |  if_e	jmp	#LR__0873
099f8     37 00 00 FF 
099fc     44 E4 05 F1 | 	add	objptr, ##28228
09a00     F2 2C 02 FB | 	rdlong	local04, objptr
09a04     03 2C 66 F0 | 	shl	local04, #3
09a08     02 00 00 FF 
09a0c     38 E4 85 F1 | 	sub	objptr, ##1080
09a10     F2 2C 02 F1 | 	add	local04, objptr
09a14     16 2F 02 FB | 	rdlong	local05, local04
09a18     01 30 66 F6 | 	neg	local06, #1
09a1c                 | '   varname2$=lparts(ct).part$ 
09a1c                 | '   j=-1
09a1c                 | '   if varnum>0 then
09a1c     04 E4 85 F1 | 	sub	objptr, #4
09a20     F2 32 02 FB | 	rdlong	local07, objptr
09a24     35 00 00 FF 
09a28     08 E4 85 F1 | 	sub	objptr, ##27144
09a2c     01 32 56 F2 | 	cmps	local07, #1 wc
09a30     58 00 90 CD |  if_b	jmp	#LR__0852
09a34                 | '     for i=0 to varnum-1
09a34     00 34 06 F6 | 	mov	local08, #0
09a38     35 00 00 FF 
09a3c     08 E4 05 F1 | 	add	objptr, ##27144
09a40     F2 36 02 FB | 	rdlong	local09, objptr
09a44     35 00 00 FF 
09a48     08 E4 85 F1 | 	sub	objptr, ##27144
09a4c                 | LR__0850
09a4c     1B 35 52 F2 | 	cmps	local08, local09 wc
09a50     38 00 90 3D |  if_ae	jmp	#LR__0851
09a54                 | '       if variables(i).name=varname2$ then j=i : exit
09a54     1A 2D 02 F6 | 	mov	local04, local08
09a58     04 2C 66 F0 | 	shl	local04, #4
09a5c     14 00 00 FF 
09a60     F8 E5 05 F1 | 	add	objptr, ##10744
09a64     F2 2C 02 F1 | 	add	local04, objptr
09a68     16 13 02 FB | 	rdlong	arg01, local04
09a6c     17 15 02 F6 | 	mov	arg02, local05
09a70     14 00 00 FF 
09a74     F8 E5 85 F1 | 	sub	objptr, ##10744
09a78     C0 A4 B1 FD | 	call	#__system___string_cmp
09a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a80     1A 31 02 A6 |  if_e	mov	local06, local08
09a84     01 34 06 51 |  if_ne	add	local08, #1
09a88     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09a8c                 | LR__0851
09a8c                 | LR__0852
09a8c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09a8c     FF FF 7F FF 
09a90     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09a94     35 00 00 AF 
09a98     08 E4 05 A1 |  if_e	add	objptr, ##27144
09a9c     F2 30 02 AB |  if_e	rdlong	local06, objptr
09aa0     35 00 00 AF 
09aa4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09aa8     78 00 90 AD |  if_e	jmp	#LR__0853
09aac     00 12 06 F6 | 	mov	arg01, #0
09ab0     88 01 B2 FD | 	call	#__system___getiolock_0579
09ab4     FD 12 02 F6 | 	mov	arg01, result1
09ab8     58 A4 B1 FD | 	call	#__system___lockmem
09abc     A0 01 00 FF 
09ac0     A1 14 06 F6 | 	mov	arg02, ##@LR__5657
09ac4     00 12 06 F6 | 	mov	arg01, #0
09ac8     00 16 06 F6 | 	mov	arg03, #0
09acc     38 B1 B1 FD | 	call	#__system___basic_print_string
09ad0     51 00 00 FF 
09ad4     C4 E5 05 F1 | 	add	objptr, ##41924
09ad8     F2 14 02 FB | 	rdlong	arg02, objptr
09adc     51 00 00 FF 
09ae0     C4 E5 85 F1 | 	sub	objptr, ##41924
09ae4     00 12 06 F6 | 	mov	arg01, #0
09ae8     00 16 06 F6 | 	mov	arg03, #0
09aec     0A 18 06 F6 | 	mov	arg04, #10
09af0     98 B1 B1 FD | 	call	#__system___basic_print_unsigned
09af4     A0 01 00 FF 
09af8     AF 14 06 F6 | 	mov	arg02, ##@LR__5658
09afc     00 12 06 F6 | 	mov	arg01, #0
09b00     00 16 06 F6 | 	mov	arg03, #0
09b04     00 B1 B1 FD | 	call	#__system___basic_print_string
09b08     00 12 06 F6 | 	mov	arg01, #0
09b0c     0A 14 06 F6 | 	mov	arg02, #10
09b10     00 16 06 F6 | 	mov	arg03, #0
09b14     98 B0 B1 FD | 	call	#__system___basic_print_char
09b18     00 12 06 F6 | 	mov	arg01, #0
09b1c     1C 01 B2 FD | 	call	#__system___getiolock_0579
09b20     FD 00 68 FC | 	wrlong	#0, result1
09b24                 | LR__0853
09b24                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09b24     37 00 00 FF 
09b28     44 E4 05 F1 | 	add	objptr, ##28228
09b2c     F2 14 02 FB | 	rdlong	arg02, objptr
09b30     01 14 06 F1 | 	add	arg02, #1
09b34     03 14 66 F0 | 	shl	arg02, #3
09b38     02 00 00 FF 
09b3c     38 E4 85 F1 | 	sub	objptr, ##1080
09b40     F2 14 02 F1 | 	add	arg02, objptr
09b44     0A 13 02 FB | 	rdlong	arg01, arg02
09b48     A0 01 00 FF 
09b4c     D0 14 06 F6 | 	mov	arg02, ##@LR__5659
09b50     35 00 00 FF 
09b54     0C E4 85 F1 | 	sub	objptr, ##27148
09b58     E0 A3 B1 FD | 	call	#__system___string_cmp
09b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
09b60     44 00 90 AD |  if_e	jmp	#LR__0854
09b64     37 00 00 FF 
09b68     44 E4 05 F1 | 	add	objptr, ##28228
09b6c     F2 36 02 FB | 	rdlong	local09, objptr
09b70     01 36 06 F1 | 	add	local09, #1
09b74     03 36 66 F0 | 	shl	local09, #3
09b78     02 00 00 FF 
09b7c     38 E4 85 F1 | 	sub	objptr, ##1080
09b80     F2 36 02 F1 | 	add	local09, objptr
09b84     1B 13 02 FB | 	rdlong	arg01, local09
09b88     A0 01 00 FF 
09b8c     D2 14 06 F6 | 	mov	arg02, ##@LR__5660
09b90     35 00 00 FF 
09b94     0C E4 85 F1 | 	sub	objptr, ##27148
09b98     A0 A3 B1 FD | 	call	#__system___string_cmp
09b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09ba0     2B FA 05 56 |  if_ne	mov	result1, #43
09ba4     D0 04 90 5D |  if_ne	jmp	#LR__0875
09ba8                 | LR__0854
09ba8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09ba8     37 00 00 FF 
09bac     44 E4 05 F1 | 	add	objptr, ##28228
09bb0     F2 14 02 FB | 	rdlong	arg02, objptr
09bb4     01 14 06 F1 | 	add	arg02, #1
09bb8     03 14 66 F0 | 	shl	arg02, #3
09bbc     02 00 00 FF 
09bc0     38 E4 85 F1 | 	sub	objptr, ##1080
09bc4     F2 14 02 F1 | 	add	arg02, objptr
09bc8     0A 13 02 FB | 	rdlong	arg01, arg02
09bcc     A0 01 00 FF 
09bd0     D5 14 06 F6 | 	mov	arg02, ##@LR__5661
09bd4     35 00 00 FF 
09bd8     0C E4 85 F1 | 	sub	objptr, ##27148
09bdc     5C A3 B1 FD | 	call	#__system___string_cmp
09be0     00 FA 0D F2 | 	cmp	result1, #0 wz
09be4     37 00 00 AF 
09be8     44 E4 05 A1 |  if_e	add	objptr, ##28228
09bec     F2 38 02 AB |  if_e	rdlong	local10, objptr
09bf0     37 00 00 AF 
09bf4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09bf8     01 38 06 A1 |  if_e	add	local10, #1
09bfc     5C 01 90 AD |  if_e	jmp	#LR__0859
09c00     37 00 00 FF 
09c04     44 E4 05 F1 | 	add	objptr, ##28228
09c08     F2 38 02 FB | 	rdlong	local10, objptr
09c0c     37 00 00 FF 
09c10     44 E4 85 F1 | 	sub	objptr, ##28228
09c14     02 38 06 F1 | 	add	local10, #2
09c18     00 3A 06 F6 | 	mov	local11, #0
09c1c                 | '   l=ct+2 : m=0 : do
09c1c                 | LR__0855
09c1c                 | '   if isdec(lparts(l).part$) then 
09c1c     1C 2D 02 F6 | 	mov	local04, local10
09c20     03 2C 66 F0 | 	shl	local04, #3
09c24     35 00 00 FF 
09c28     0C E4 05 F1 | 	add	objptr, ##27148
09c2c     F2 2C 02 F1 | 	add	local04, objptr
09c30     16 13 02 FB | 	rdlong	arg01, local04
09c34     35 00 00 FF 
09c38     0C E4 85 F1 | 	sub	objptr, ##27148
09c3c     F8 CD BF FD | 	call	#_isdec
09c40     00 FA 0D F2 | 	cmp	result1, #0 wz
09c44     44 00 90 AD |  if_e	jmp	#LR__0856
09c48     1D 3D 02 F6 | 	mov	local12, local11
09c4c     13 3D 06 F1 | 	add	local12, #local01
09c50     1C 37 02 F6 | 	mov	local09, local10
09c54     03 36 66 F0 | 	shl	local09, #3
09c58     35 00 00 FF 
09c5c     0C E4 05 F1 | 	add	objptr, ##27148
09c60     F2 36 02 F1 | 	add	local09, objptr
09c64     1B 13 02 FB | 	rdlong	arg01, local09
09c68     00 14 06 F6 | 	mov	arg02, #0
09c6c     35 00 00 FF 
09c70     0C E4 85 F1 | 	sub	objptr, ##27148
09c74     8C D7 B1 FD | 	call	#__system____builtin_atoi
09c78     FD 3E 02 F6 | 	mov	local13, result1
09c7c                 | 	'.live	local13
09c7c                 | 	'.live	local12
09c7c     00 3C 8E F9 | 	altd	local12, #0
09c80     1F 3D 02 F6 | 	mov	local12, local13
09c84     01 3A 06 F1 | 	add	local11, #1
09c88     08 00 90 FD | 	jmp	#LR__0857
09c8c                 | LR__0856
09c8c                 | '     return(17)
09c8c     11 FA 05 F6 | 	mov	result1, #17
09c90     E4 03 90 FD | 	jmp	#LR__0875
09c94                 | LR__0857
09c94                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09c94     1C 2D 02 F6 | 	mov	local04, local10
09c98     01 2C 06 F1 | 	add	local04, #1
09c9c     03 2C 66 F0 | 	shl	local04, #3
09ca0     35 00 00 FF 
09ca4     0C E4 05 F1 | 	add	objptr, ##27148
09ca8     F2 2C 02 F1 | 	add	local04, objptr
09cac     16 13 02 FB | 	rdlong	arg01, local04
09cb0     A0 01 00 FF 
09cb4     D8 14 06 F6 | 	mov	arg02, ##@LR__5662
09cb8     35 00 00 FF 
09cbc     0C E4 85 F1 | 	sub	objptr, ##27148
09cc0     78 A2 B1 FD | 	call	#__system___string_cmp
09cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cc8     3C 00 90 AD |  if_e	jmp	#LR__0858
09ccc     1C 3F 02 F6 | 	mov	local13, local10
09cd0     01 3E 06 F1 | 	add	local13, #1
09cd4     03 3E 66 F0 | 	shl	local13, #3
09cd8     35 00 00 FF 
09cdc     0C E4 05 F1 | 	add	objptr, ##27148
09ce0     F2 3E 02 F1 | 	add	local13, objptr
09ce4     1F 13 02 FB | 	rdlong	arg01, local13
09ce8     A0 01 00 FF 
09cec     DA 14 06 F6 | 	mov	arg02, ##@LR__5663
09cf0     35 00 00 FF 
09cf4     0C E4 85 F1 | 	sub	objptr, ##27148
09cf8     40 A2 B1 FD | 	call	#__system___string_cmp
09cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
09d00     2C FA 05 56 |  if_ne	mov	result1, #44
09d04     70 03 90 5D |  if_ne	jmp	#LR__0875
09d08                 | LR__0858
09d08     02 38 06 F1 | 	add	local10, #2
09d0c     1C 2D 02 F6 | 	mov	local04, local10
09d10     01 2C 86 F1 | 	sub	local04, #1
09d14     03 2C 66 F0 | 	shl	local04, #3
09d18     35 00 00 FF 
09d1c     0C E4 05 F1 | 	add	objptr, ##27148
09d20     F2 2C 02 F1 | 	add	local04, objptr
09d24     16 13 02 FB | 	rdlong	arg01, local04
09d28     A0 01 00 FF 
09d2c     DC 14 06 F6 | 	mov	arg02, ##@LR__5664
09d30     35 00 00 FF 
09d34     0C E4 85 F1 | 	sub	objptr, ##27148
09d38     00 A2 B1 FD | 	call	#__system___string_cmp
09d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
09d40     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09d44     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0855
09d48                 | '   if m>3 then return 45
09d48     04 3A 56 F2 | 	cmps	local11, #4 wc
09d4c     2D FA 05 36 |  if_ae	mov	result1, #45
09d50     24 03 90 3D |  if_ae	jmp	#LR__0875
09d54     00 41 06 F6 | 	mov	local14, #256
09d58     0C 42 06 F6 | 	mov	local15, #12
09d5c                 | LR__0859
09d5c                 | '   arraytype=array_no_type : esize=12
09d5c                 | ' 1350 
09d5c                 | '   if lparts(l).part$="as" then
09d5c     1C 2D 02 F6 | 	mov	local04, local10
09d60     03 2C 66 F0 | 	shl	local04, #3
09d64     35 00 00 FF 
09d68     0C E4 05 F1 | 	add	objptr, ##27148
09d6c     F2 2C 02 F1 | 	add	local04, objptr
09d70     16 13 02 FB | 	rdlong	arg01, local04
09d74     A0 01 00 FF 
09d78     DE 14 06 F6 | 	mov	arg02, ##@LR__5665
09d7c     35 00 00 FF 
09d80     0C E4 85 F1 | 	sub	objptr, ##27148
09d84     B4 A1 B1 FD | 	call	#__system___string_cmp
09d88     00 FA 0D F2 | 	cmp	result1, #0 wz
09d8c     E8 01 90 5D |  if_ne	jmp	#LR__0874
09d90                 | '     select case lparts(l+1).part$
09d90     1C 3D 02 F6 | 	mov	local12, local10
09d94     01 3C 06 F1 | 	add	local12, #1
09d98     03 3C 66 F0 | 	shl	local12, #3
09d9c     35 00 00 FF 
09da0     0C E4 05 F1 | 	add	objptr, ##27148
09da4     F2 3C 02 F1 | 	add	local12, objptr
09da8     1E 45 02 FB | 	rdlong	local16, local12
09dac     A0 01 00 FF 
09db0     E1 14 06 F6 | 	mov	arg02, ##@LR__5666
09db4     22 13 02 F6 | 	mov	arg01, local16
09db8     35 00 00 FF 
09dbc     0C E4 85 F1 | 	sub	objptr, ##27148
09dc0     78 A1 B1 FD | 	call	#__system___string_cmp
09dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09dc8     0C 01 90 AD |  if_e	jmp	#LR__0860
09dcc     A0 01 00 FF 
09dd0     E6 14 06 F6 | 	mov	arg02, ##@LR__5667
09dd4     22 13 02 F6 | 	mov	arg01, local16
09dd8     60 A1 B1 FD | 	call	#__system___string_cmp
09ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
09de0     00 01 90 AD |  if_e	jmp	#LR__0861
09de4     A0 01 00 FF 
09de8     EC 14 06 F6 | 	mov	arg02, ##@LR__5668
09dec     22 13 02 F6 | 	mov	arg01, local16
09df0     48 A1 B1 FD | 	call	#__system___string_cmp
09df4     00 FA 0D F2 | 	cmp	result1, #0 wz
09df8     F4 00 90 AD |  if_e	jmp	#LR__0862
09dfc     A0 01 00 FF 
09e00     F2 14 06 F6 | 	mov	arg02, ##@LR__5669
09e04     22 13 02 F6 | 	mov	arg01, local16
09e08     30 A1 B1 FD | 	call	#__system___string_cmp
09e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e10     E8 00 90 AD |  if_e	jmp	#LR__0863
09e14     A0 01 00 FF 
09e18     F9 14 06 F6 | 	mov	arg02, ##@LR__5670
09e1c     22 13 02 F6 | 	mov	arg01, local16
09e20     18 A1 B1 FD | 	call	#__system___string_cmp
09e24     00 FA 0D F2 | 	cmp	result1, #0 wz
09e28     DC 00 90 AD |  if_e	jmp	#LR__0864
09e2c     A0 01 00 FF 
09e30     FE 14 06 F6 | 	mov	arg02, ##@LR__5671
09e34     22 13 02 F6 | 	mov	arg01, local16
09e38     00 A1 B1 FD | 	call	#__system___string_cmp
09e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e40     D0 00 90 AD |  if_e	jmp	#LR__0865
09e44     A0 01 00 FF 
09e48     06 15 06 F6 | 	mov	arg02, ##@LR__5672
09e4c     22 13 02 F6 | 	mov	arg01, local16
09e50     E8 A0 B1 FD | 	call	#__system___string_cmp
09e54     00 FA 0D F2 | 	cmp	result1, #0 wz
09e58     C4 00 90 AD |  if_e	jmp	#LR__0866
09e5c     A0 01 00 FF 
09e60     0C 15 06 F6 | 	mov	arg02, ##@LR__5673
09e64     22 13 02 F6 | 	mov	arg01, local16
09e68     D0 A0 B1 FD | 	call	#__system___string_cmp
09e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e70     B8 00 90 AD |  if_e	jmp	#LR__0867
09e74     A0 01 00 FF 
09e78     12 15 06 F6 | 	mov	arg02, ##@LR__5674
09e7c     22 13 02 F6 | 	mov	arg01, local16
09e80     B8 A0 B1 FD | 	call	#__system___string_cmp
09e84     00 FA 0D F2 | 	cmp	result1, #0 wz
09e88     AC 00 90 AD |  if_e	jmp	#LR__0868
09e8c     A0 01 00 FF 
09e90     19 15 06 F6 | 	mov	arg02, ##@LR__5675
09e94     22 13 02 F6 | 	mov	arg01, local16
09e98     A0 A0 B1 FD | 	call	#__system___string_cmp
09e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09ea0     A0 00 90 AD |  if_e	jmp	#LR__0869
09ea4     A0 01 00 FF 
09ea8     20 15 06 F6 | 	mov	arg02, ##@LR__5676
09eac     22 13 02 F6 | 	mov	arg01, local16
09eb0     88 A0 B1 FD | 	call	#__system___string_cmp
09eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
09eb8     94 00 90 AD |  if_e	jmp	#LR__0870
09ebc     A0 01 00 FF 
09ec0     27 15 06 F6 | 	mov	arg02, ##@LR__5677
09ec4     22 13 02 F6 | 	mov	arg01, local16
09ec8     70 A0 B1 FD | 	call	#__system___string_cmp
09ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ed0     88 00 90 AD |  if_e	jmp	#LR__0871
09ed4     90 00 90 FD | 	jmp	#LR__0872
09ed8                 | LR__0860
09ed8     01 41 06 F6 | 	mov	local14, #257
09edc     01 42 06 F6 | 	mov	local15, #1
09ee0     94 00 90 FD | 	jmp	#LR__0874
09ee4                 | LR__0861
09ee4     02 41 06 F6 | 	mov	local14, #258
09ee8     01 42 06 F6 | 	mov	local15, #1
09eec     88 00 90 FD | 	jmp	#LR__0874
09ef0                 | LR__0862
09ef0     03 41 06 F6 | 	mov	local14, #259
09ef4     02 42 06 F6 | 	mov	local15, #2
09ef8     7C 00 90 FD | 	jmp	#LR__0874
09efc                 | LR__0863
09efc     04 41 06 F6 | 	mov	local14, #260
09f00     02 42 06 F6 | 	mov	local15, #2
09f04     70 00 90 FD | 	jmp	#LR__0874
09f08                 | LR__0864
09f08     05 41 06 F6 | 	mov	local14, #261
09f0c     04 42 06 F6 | 	mov	local15, #4
09f10     64 00 90 FD | 	jmp	#LR__0874
09f14                 | LR__0865
09f14     05 41 06 F6 | 	mov	local14, #261
09f18     04 42 06 F6 | 	mov	local15, #4
09f1c     58 00 90 FD | 	jmp	#LR__0874
09f20                 | LR__0866
09f20     06 41 06 F6 | 	mov	local14, #262
09f24     04 42 06 F6 | 	mov	local15, #4
09f28     4C 00 90 FD | 	jmp	#LR__0874
09f2c                 | LR__0867
09f2c     07 41 06 F6 | 	mov	local14, #263
09f30     08 42 06 F6 | 	mov	local15, #8
09f34     40 00 90 FD | 	jmp	#LR__0874
09f38                 | LR__0868
09f38     08 41 06 F6 | 	mov	local14, #264
09f3c     08 42 06 F6 | 	mov	local15, #8
09f40     34 00 90 FD | 	jmp	#LR__0874
09f44                 | LR__0869
09f44     09 41 06 F6 | 	mov	local14, #265
09f48     04 42 06 F6 | 	mov	local15, #4
09f4c     28 00 90 FD | 	jmp	#LR__0874
09f50                 | LR__0870
09f50     0A 41 06 F6 | 	mov	local14, #266
09f54     08 42 06 F6 | 	mov	local15, #8
09f58     1C 00 90 FD | 	jmp	#LR__0874
09f5c                 | LR__0871
09f5c     0B 41 06 F6 | 	mov	local14, #267
09f60     04 42 06 F6 | 	mov	local15, #4
09f64     10 00 90 FD | 	jmp	#LR__0874
09f68                 | LR__0872
09f68     2F FA 05 F6 | 	mov	result1, #47
09f6c     08 01 90 FD | 	jmp	#LR__0875
09f70                 | LR__0873
09f70                 | '   return 46
09f70     2E FA 05 F6 | 	mov	result1, #46
09f74     00 01 90 FD | 	jmp	#LR__0875
09f78                 | LR__0874
09f78     13 43 02 FD | 	qmul	local15, local01
09f7c     18 32 62 FD | 	getqx	local07
09f80     14 33 02 FD | 	qmul	local07, local02
09f84     18 44 62 FD | 	getqx	local16
09f88     15 45 02 FD | 	qmul	local16, local03
09f8c     51 00 00 FF 
09f90     AC E5 05 F1 | 	add	objptr, ##41900
09f94     F2 46 02 FB | 	rdlong	local17, objptr
09f98     20 15 02 F6 | 	mov	arg02, local14
09f9c     18 44 62 FD | 	getqx	local16
09fa0     22 47 82 F1 | 	sub	local17, local16
09fa4     10 46 86 F1 | 	sub	local17, #16
09fa8     0F 46 26 F5 | 	andn	local17, #15
09fac     F2 46 62 FC | 	wrlong	local17, objptr
09fb0     51 00 00 FF 
09fb4     AC E5 85 F1 | 	sub	objptr, ##41900
09fb8     23 13 02 F6 | 	mov	arg01, local17
09fbc     98 67 B1 FD | 	call	#_psdpoke
09fc0     23 13 02 F6 | 	mov	arg01, local17
09fc4     02 12 06 F1 | 	add	arg01, #2
09fc8     21 15 02 F6 | 	mov	arg02, local15
09fcc     88 67 B1 FD | 	call	#_psdpoke
09fd0     23 13 02 F6 | 	mov	arg01, local17
09fd4     04 12 06 F1 | 	add	arg01, #4
09fd8     13 15 02 F6 | 	mov	arg02, local01
09fdc     30 67 B1 FD | 	call	#_pslpoke
09fe0     23 13 02 F6 | 	mov	arg01, local17
09fe4     08 12 06 F1 | 	add	arg01, #8
09fe8     14 15 02 F6 | 	mov	arg02, local02
09fec     20 67 B1 FD | 	call	#_pslpoke
09ff0     23 13 02 F6 | 	mov	arg01, local17
09ff4     0C 12 06 F1 | 	add	arg01, #12
09ff8     15 15 02 F6 | 	mov	arg02, local03
09ffc     10 67 B1 FD | 	call	#_pslpoke
0a000     18 3D 02 F6 | 	mov	local12, local06
0a004     04 3C 66 F0 | 	shl	local12, #4
0a008     14 00 00 FF 
0a00c     F8 E5 05 F1 | 	add	objptr, ##10744
0a010     F2 3C 02 F1 | 	add	local12, objptr
0a014     1E 2F 62 FC | 	wrlong	local05, local12
0a018     18 3D 02 F6 | 	mov	local12, local06
0a01c     04 3C 66 F0 | 	shl	local12, #4
0a020     F2 3C 02 F1 | 	add	local12, objptr
0a024     04 3C 06 F1 | 	add	local12, #4
0a028     1E 47 62 FC | 	wrlong	local17, local12
0a02c     18 3D 02 F6 | 	mov	local12, local06
0a030     04 3C 66 F0 | 	shl	local12, #4
0a034     F2 3C 02 F1 | 	add	local12, objptr
0a038     0C 3C 06 F1 | 	add	local12, #12
0a03c     1E 41 62 FC | 	wrlong	local14, local12
0a040                 | ' memtop=arrayptr
0a040                 | ' psdpoke arrayptr,arraytype 
0a040                 | ' psdpoke arrayptr+2,esize 
0a040                 | ' pslpoke arrayptr+4,dims(0)
0a040                 | ' pslpoke arrayptr+8,dims(1)
0a040                 | ' pslpoke arrayptr+12,dims(2)
0a040                 | ' variables(j).name=varname2$
0a040                 | ' variables(j).value.uresult=arrayptr
0a040                 | ' variables(j).vartype=arraytype
0a040                 | ' if j=varnum then varnum+=1
0a040     20 00 00 FF 
0a044     10 E4 05 F1 | 	add	objptr, ##16400
0a048     F2 32 02 FB | 	rdlong	local07, objptr
0a04c     35 00 00 FF 
0a050     08 E4 85 F1 | 	sub	objptr, ##27144
0a054     19 31 0A F2 | 	cmp	local06, local07 wz
0a058     35 00 00 AF 
0a05c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a060     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a064     01 32 06 A1 |  if_e	add	local07, #1
0a068     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a06c     35 00 00 AF 
0a070     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a074                 | ' return 0
0a074     00 FA 05 F6 | 	mov	result1, #0
0a078                 | LR__0875
0a078     A7 F0 03 F6 | 	mov	ptra, fp
0a07c     B2 00 A0 FD | 	call	#popregs_
0a080                 | _compile_dim_ret
0a080     2D 00 64 FD | 	ret
0a084                 | 
0a084                 | ' 
0a084                 | ' '----- compile 'for' command. 
0a084                 | ' 
0a084                 | ' function compile_for() as ulong  
0a084                 | _compile_for
0a084     05 4A 05 F6 | 	mov	COUNT_, #5
0a088     A8 00 A0 FD | 	call	#pushregs_
0a08c                 | ' 
0a08c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a08c     37 00 00 FF 
0a090     44 E4 05 F1 | 	add	objptr, ##28228
0a094     F2 14 02 FB | 	rdlong	arg02, objptr
0a098     01 14 06 F1 | 	add	arg02, #1
0a09c     03 14 66 F0 | 	shl	arg02, #3
0a0a0     02 00 00 FF 
0a0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0a8     F2 14 02 F1 | 	add	arg02, objptr
0a0ac     0A 13 02 FB | 	rdlong	arg01, arg02
0a0b0     35 00 00 FF 
0a0b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b8                 | ' 
0a0b8                 | ' select case s
0a0b8     9E 01 00 FF 
0a0bc     44 14 06 F6 | 	mov	arg02, ##@LR__5411
0a0c0     78 9E B1 FD | 	call	#__system___string_cmp
0a0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0c8     1B FA 05 A6 |  if_e	mov	result1, #27
0a0cc     00 FA 05 56 |  if_ne	mov	result1, #0
0a0d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0d4     0C 00 90 AD |  if_e	jmp	#LR__0880
0a0d8     05 12 06 F6 | 	mov	arg01, #5
0a0dc     A8 DB BF FD | 	call	#_compile_immediate_assign
0a0e0     08 00 90 FD | 	jmp	#LR__0881
0a0e4                 | LR__0880
0a0e4     20 FA 05 F6 | 	mov	result1, #32
0a0e8     D0 02 90 FD | 	jmp	#LR__0885
0a0ec                 | LR__0881
0a0ec     4A 00 00 FF 
0a0f0     7C E4 05 F1 | 	add	objptr, ##38012
0a0f4     F2 14 02 FB | 	rdlong	arg02, objptr
0a0f8     0A 13 02 F6 | 	mov	arg01, arg02
0a0fc     01 12 86 F1 | 	sub	arg01, #1
0a100     09 2D 02 F6 | 	mov	local04, arg01
0a104     01 2C 66 F0 | 	shl	local04, #1
0a108     09 2D 02 F1 | 	add	local04, arg01
0a10c     02 2C 66 F0 | 	shl	local04, #2
0a110     03 00 00 FF 
0a114     00 E4 85 F1 | 	sub	objptr, ##1536
0a118     F2 2C 02 F1 | 	add	local04, objptr
0a11c     16 27 02 FB | 	rdlong	local01, local04
0a120     04 2C 06 F1 | 	add	local04, #4
0a124     16 2D 02 FB | 	rdlong	local04, local04
0a128     01 14 86 F1 | 	sub	arg02, #1
0a12c     0A 13 02 F6 | 	mov	arg01, arg02
0a130     01 12 66 F0 | 	shl	arg01, #1
0a134     0A 13 02 F1 | 	add	arg01, arg02
0a138     02 12 66 F0 | 	shl	arg01, #2
0a13c     F2 12 02 F1 | 	add	arg01, objptr
0a140     08 12 06 F1 | 	add	arg01, #8
0a144     09 15 02 FB | 	rdlong	arg02, arg01
0a148     16 29 02 F6 | 	mov	local02, local04
0a14c     0A 2B 02 F6 | 	mov	local03, arg02
0a150                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a150     17 2A 0E F2 | 	cmp	local03, #23 wz
0a154     47 00 00 FF 
0a158     7C E4 85 F1 | 	sub	objptr, ##36476
0a15c     22 FA 05 56 |  if_ne	mov	result1, #34
0a160     58 02 90 5D |  if_ne	jmp	#LR__0885
0a164     13 2F 02 F6 | 	mov	local05, local01
0a168                 | ' varnum=t1.result.uresult
0a168                 | ' if lparts(ct).part$<>"to" then return 33
0a168     37 00 00 FF 
0a16c     44 E4 05 F1 | 	add	objptr, ##28228
0a170     F2 26 02 FB | 	rdlong	local01, objptr
0a174     03 26 66 F0 | 	shl	local01, #3
0a178     02 00 00 FF 
0a17c     38 E4 85 F1 | 	sub	objptr, ##1080
0a180     F2 26 02 F1 | 	add	local01, objptr
0a184     13 13 02 FB | 	rdlong	arg01, local01
0a188     A0 01 00 FF 
0a18c     2E 15 06 F6 | 	mov	arg02, ##@LR__5678
0a190     35 00 00 FF 
0a194     0C E4 85 F1 | 	sub	objptr, ##27148
0a198     A0 9D B1 FD | 	call	#__system___string_cmp
0a19c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1a0     21 FA 05 56 |  if_ne	mov	result1, #33
0a1a4     14 02 90 5D |  if_ne	jmp	#LR__0885
0a1a8     37 00 00 FF 
0a1ac     44 E4 05 F1 | 	add	objptr, ##28228
0a1b0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1b4     01 2C 06 F1 | 	add	local04, #1
0a1b8     F2 2C 62 FC | 	wrlong	local04, objptr
0a1bc     37 00 00 FF 
0a1c0     44 E4 85 F1 | 	sub	objptr, ##28228
0a1c4     A8 11 B0 FD | 	call	#_expr
0a1c8                 | ' ct+=1
0a1c8                 | ' expr()  										' there is "to" value pushed on the stack
0a1c8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0a1c8     37 00 00 FF 
0a1cc     44 E4 05 F1 | 	add	objptr, ##28228
0a1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1d4     03 2C 66 F0 | 	shl	local04, #3
0a1d8     02 00 00 FF 
0a1dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a1e0     F2 2C 02 F1 | 	add	local04, objptr
0a1e4     16 13 02 FB | 	rdlong	arg01, local04
0a1e8     A0 01 00 FF 
0a1ec     31 15 06 F6 | 	mov	arg02, ##@LR__5679
0a1f0     35 00 00 FF 
0a1f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1f8     40 9D B1 FD | 	call	#__system___string_cmp
0a1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a200     3C 00 90 AD |  if_e	jmp	#LR__0882
0a204     37 00 00 FF 
0a208     44 E4 05 F1 | 	add	objptr, ##28228
0a20c     F2 2C 02 FB | 	rdlong	local04, objptr
0a210     03 2C 66 F0 | 	shl	local04, #3
0a214     02 00 00 FF 
0a218     38 E4 85 F1 | 	sub	objptr, ##1080
0a21c     F2 2C 02 F1 | 	add	local04, objptr
0a220     16 13 02 FB | 	rdlong	arg01, local04
0a224     A0 01 00 FF 
0a228     36 15 06 F6 | 	mov	arg02, ##@LR__5680
0a22c     35 00 00 FF 
0a230     0C E4 85 F1 | 	sub	objptr, ##27148
0a234     04 9D B1 FD | 	call	#__system___string_cmp
0a238     00 FA 0D F2 | 	cmp	result1, #0 wz
0a23c     24 00 90 5D |  if_ne	jmp	#LR__0883
0a240                 | LR__0882
0a240     37 00 00 FF 
0a244     44 E4 05 F1 | 	add	objptr, ##28228
0a248     F2 26 02 FB | 	rdlong	local01, objptr
0a24c     01 26 06 F1 | 	add	local01, #1
0a250     F2 26 62 FC | 	wrlong	local01, objptr
0a254     37 00 00 FF 
0a258     44 E4 85 F1 | 	sub	objptr, ##28228
0a25c     10 11 B0 FD | 	call	#_expr
0a260     78 00 90 FD | 	jmp	#LR__0884
0a264                 | LR__0883
0a264     4A 00 00 FF 
0a268     7C E4 05 F1 | 	add	objptr, ##38012
0a26c     F2 26 02 FB | 	rdlong	local01, objptr
0a270     13 2D 02 F6 | 	mov	local04, local01
0a274     01 2C 66 F0 | 	shl	local04, #1
0a278     13 2D 02 F1 | 	add	local04, local01
0a27c     02 2C 66 F0 | 	shl	local04, #2
0a280     03 00 00 FF 
0a284     00 E4 85 F1 | 	sub	objptr, ##1536
0a288     F2 2C 02 F1 | 	add	local04, objptr
0a28c     08 2C 06 F1 | 	add	local04, #8
0a290     16 39 68 FC | 	wrlong	#28, local04
0a294     03 00 00 FF 
0a298     00 E4 05 F1 | 	add	objptr, ##1536
0a29c     F2 26 02 FB | 	rdlong	local01, objptr
0a2a0     13 2D 02 F6 | 	mov	local04, local01
0a2a4     01 2C 66 F0 | 	shl	local04, #1
0a2a8     13 2D 02 F1 | 	add	local04, local01
0a2ac     02 2C 66 F0 | 	shl	local04, #2
0a2b0     03 00 00 FF 
0a2b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2b8     F2 2C 02 F1 | 	add	local04, objptr
0a2bc     16 03 68 FC | 	wrlong	#1, local04
0a2c0     03 00 00 FF 
0a2c4     00 E4 05 F1 | 	add	objptr, ##1536
0a2c8     F2 26 02 FB | 	rdlong	local01, objptr
0a2cc     01 26 06 F1 | 	add	local01, #1
0a2d0     F2 26 62 FC | 	wrlong	local01, objptr
0a2d4     4A 00 00 FF 
0a2d8     7C E4 85 F1 | 	sub	objptr, ##38012
0a2dc                 | LR__0884
0a2dc     4A 00 00 FF 
0a2e0     7C E4 05 F1 | 	add	objptr, ##38012
0a2e4     F2 26 02 FB | 	rdlong	local01, objptr
0a2e8     13 2D 02 F6 | 	mov	local04, local01
0a2ec     01 2C 66 F0 | 	shl	local04, #1
0a2f0     13 2D 02 F1 | 	add	local04, local01
0a2f4     02 2C 66 F0 | 	shl	local04, #2
0a2f8     03 00 00 FF 
0a2fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a300     F2 2C 02 F1 | 	add	local04, objptr
0a304     08 2C 06 F1 | 	add	local04, #8
0a308     16 39 68 FC | 	wrlong	#28, local04
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 26 02 FB | 	rdlong	local01, objptr
0a318     13 2D 02 F6 | 	mov	local04, local01
0a31c     01 2C 66 F0 | 	shl	local04, #1
0a320     13 2D 02 F1 | 	add	local04, local01
0a324     02 2C 66 F0 | 	shl	local04, #2
0a328     03 00 00 FF 
0a32c     00 E4 85 F1 | 	sub	objptr, ##1536
0a330     F2 2C 02 F1 | 	add	local04, objptr
0a334     16 2F 62 FC | 	wrlong	local05, local04
0a338     03 00 00 FF 
0a33c     00 E4 05 F1 | 	add	objptr, ##1536
0a340     F2 2E 02 FB | 	rdlong	local05, objptr
0a344     01 2E 06 F1 | 	add	local05, #1
0a348     F2 2E 62 FC | 	wrlong	local05, objptr
0a34c     17 27 02 F6 | 	mov	local01, local05
0a350     01 26 66 F0 | 	shl	local01, #1
0a354     17 27 02 F1 | 	add	local01, local05
0a358     02 26 66 F0 | 	shl	local01, #2
0a35c     03 00 00 FF 
0a360     00 E4 85 F1 | 	sub	objptr, ##1536
0a364     F2 26 02 F1 | 	add	local01, objptr
0a368     08 26 06 F1 | 	add	local01, #8
0a36c     13 95 68 FC | 	wrlong	#74, local01
0a370     03 00 00 FF 
0a374     00 E4 05 F1 | 	add	objptr, ##1536
0a378     F2 2E 02 FB | 	rdlong	local05, objptr
0a37c     17 27 02 F6 | 	mov	local01, local05
0a380     01 26 66 F0 | 	shl	local01, #1
0a384     17 27 02 F1 | 	add	local01, local05
0a388     02 26 66 F0 | 	shl	local01, #2
0a38c     03 00 00 FF 
0a390     00 E4 85 F1 | 	sub	objptr, ##1536
0a394     F2 26 02 F1 | 	add	local01, objptr
0a398     13 01 68 FC | 	wrlong	#0, local01
0a39c     03 00 00 FF 
0a3a0     00 E4 05 F1 | 	add	objptr, ##1536
0a3a4     F2 2E 02 FB | 	rdlong	local05, objptr
0a3a8     01 2E 06 F1 | 	add	local05, #1
0a3ac     F2 2E 62 FC | 	wrlong	local05, objptr
0a3b0     4A 00 00 FF 
0a3b4     7C E4 85 F1 | 	sub	objptr, ##38012
0a3b8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a3b8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a3b8                 | ' return 0
0a3b8     00 FA 05 F6 | 	mov	result1, #0
0a3bc                 | LR__0885
0a3bc     A7 F0 03 F6 | 	mov	ptra, fp
0a3c0     B2 00 A0 FD | 	call	#popregs_
0a3c4                 | _compile_for_ret
0a3c4     2D 00 64 FD | 	ret
0a3c8                 | 
0a3c8                 | ' 
0a3c8                 | ' '----- compile 'next' command. 
0a3c8                 | ' 
0a3c8                 | ' function compile_next() as ulong
0a3c8                 | _compile_next
0a3c8     04 4A 05 F6 | 	mov	COUNT_, #4
0a3cc     A8 00 A0 FD | 	call	#pushregs_
0a3d0     37 00 00 FF 
0a3d4     44 E4 05 F1 | 	add	objptr, ##28228
0a3d8     F2 14 02 FB | 	rdlong	arg02, objptr
0a3dc     03 14 66 F0 | 	shl	arg02, #3
0a3e0     02 00 00 FF 
0a3e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3e8     F2 14 02 F1 | 	add	arg02, objptr
0a3ec     0A 27 02 FB | 	rdlong	local01, arg02
0a3f0                 | ' 
0a3f0                 | ' varname$=lparts(ct).part$ 
0a3f0                 | ' if varnum=0 then return 35
0a3f0     04 E4 85 F1 | 	sub	objptr, #4
0a3f4     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a3f8     35 00 00 FF 
0a3fc     08 E4 85 F1 | 	sub	objptr, ##27144
0a400     23 FA 05 A6 |  if_e	mov	result1, #35
0a404     4C 01 90 AD |  if_e	jmp	#LR__0892
0a408     01 28 66 F6 | 	neg	local02, #1
0a40c                 | ' j=-1
0a40c                 | ' for i=0 to varnum-1
0a40c     00 2A 06 F6 | 	mov	local03, #0
0a410     35 00 00 FF 
0a414     08 E4 05 F1 | 	add	objptr, ##27144
0a418     F2 2C 02 FB | 	rdlong	local04, objptr
0a41c     35 00 00 FF 
0a420     08 E4 85 F1 | 	sub	objptr, ##27144
0a424                 | LR__0890
0a424     16 2B 12 F2 | 	cmp	local03, local04 wc
0a428     38 00 90 3D |  if_ae	jmp	#LR__0891
0a42c                 | '   if variables(i).name=varname$ then j=i : exit
0a42c     15 15 02 F6 | 	mov	arg02, local03
0a430     04 14 66 F0 | 	shl	arg02, #4
0a434     14 00 00 FF 
0a438     F8 E5 05 F1 | 	add	objptr, ##10744
0a43c     F2 14 02 F1 | 	add	arg02, objptr
0a440     0A 13 02 FB | 	rdlong	arg01, arg02
0a444     13 15 02 F6 | 	mov	arg02, local01
0a448     14 00 00 FF 
0a44c     F8 E5 85 F1 | 	sub	objptr, ##10744
0a450     E8 9A B1 FD | 	call	#__system___string_cmp
0a454     00 FA 0D F2 | 	cmp	result1, #0 wz
0a458     15 29 02 A6 |  if_e	mov	local02, local03
0a45c     01 2A 06 51 |  if_ne	add	local03, #1
0a460     C0 FF 9F 5D |  if_ne	jmp	#LR__0890
0a464                 | LR__0891
0a464                 | ' if j=-1 then return 35
0a464     FF FF 7F FF 
0a468     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a46c     23 FA 05 A6 |  if_e	mov	result1, #35
0a470     E0 00 90 AD |  if_e	jmp	#LR__0892
0a474     4A 00 00 FF 
0a478     7C E4 05 F1 | 	add	objptr, ##38012
0a47c     F2 2C 02 FB | 	rdlong	local04, objptr
0a480     16 2B 02 F6 | 	mov	local03, local04
0a484     01 2A 66 F0 | 	shl	local03, #1
0a488     16 2B 02 F1 | 	add	local03, local04
0a48c     02 2A 66 F0 | 	shl	local03, #2
0a490     03 00 00 FF 
0a494     00 E4 85 F1 | 	sub	objptr, ##1536
0a498     F2 2A 02 F1 | 	add	local03, objptr
0a49c     08 2A 06 F1 | 	add	local03, #8
0a4a0     15 39 68 FC | 	wrlong	#28, local03
0a4a4     03 00 00 FF 
0a4a8     00 E4 05 F1 | 	add	objptr, ##1536
0a4ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a4b0     16 2B 02 F6 | 	mov	local03, local04
0a4b4     01 2A 66 F0 | 	shl	local03, #1
0a4b8     16 2B 02 F1 | 	add	local03, local04
0a4bc     02 2A 66 F0 | 	shl	local03, #2
0a4c0     03 00 00 FF 
0a4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4c8     F2 2A 02 F1 | 	add	local03, objptr
0a4cc     15 29 62 FC | 	wrlong	local02, local03
0a4d0     03 00 00 FF 
0a4d4     00 E4 05 F1 | 	add	objptr, ##1536
0a4d8     F2 2C 02 FB | 	rdlong	local04, objptr
0a4dc     01 2C 06 F1 | 	add	local04, #1
0a4e0     F2 2C 62 FC | 	wrlong	local04, objptr
0a4e4     16 2B 02 F6 | 	mov	local03, local04
0a4e8     01 2A 66 F0 | 	shl	local03, #1
0a4ec     16 2B 02 F1 | 	add	local03, local04
0a4f0     02 2A 66 F0 | 	shl	local03, #2
0a4f4     03 00 00 FF 
0a4f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4fc     F2 2A 02 F1 | 	add	local03, objptr
0a500     08 2A 06 F1 | 	add	local03, #8
0a504     15 97 68 FC | 	wrlong	#75, local03
0a508     03 00 00 FF 
0a50c     00 E4 05 F1 | 	add	objptr, ##1536
0a510     F2 2C 02 FB | 	rdlong	local04, objptr
0a514     16 2B 02 F6 | 	mov	local03, local04
0a518     01 2A 66 F0 | 	shl	local03, #1
0a51c     16 2B 02 F1 | 	add	local03, local04
0a520     02 2A 66 F0 | 	shl	local03, #2
0a524     03 00 00 FF 
0a528     00 E4 85 F1 | 	sub	objptr, ##1536
0a52c     F2 2A 02 F1 | 	add	local03, objptr
0a530     15 01 68 FC | 	wrlong	#0, local03
0a534     03 00 00 FF 
0a538     00 E4 05 F1 | 	add	objptr, ##1536
0a53c     F2 2C 02 FB | 	rdlong	local04, objptr
0a540     01 2C 06 F1 | 	add	local04, #1
0a544     F2 2C 62 FC | 	wrlong	local04, objptr
0a548     4A 00 00 FF 
0a54c     7C E4 85 F1 | 	sub	objptr, ##38012
0a550                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a550                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a550                 | ' return 0
0a550     00 FA 05 F6 | 	mov	result1, #0
0a554                 | LR__0892
0a554     A7 F0 03 F6 | 	mov	ptra, fp
0a558     B2 00 A0 FD | 	call	#popregs_
0a55c                 | _compile_next_ret
0a55c     2D 00 64 FD | 	ret
0a560                 | 
0a560                 | ' 
0a560                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a560                 | ' 
0a560                 | ' function compile_gosub() as ulong
0a560                 | _compile_gosub
0a560     02 4A 05 F6 | 	mov	COUNT_, #2
0a564     A8 00 A0 FD | 	call	#pushregs_
0a568     4A 00 00 FF 
0a56c     7C E4 05 F1 | 	add	objptr, ##38012
0a570     F2 26 02 FB | 	rdlong	local01, objptr
0a574     13 29 02 F6 | 	mov	local02, local01
0a578     01 28 66 F0 | 	shl	local02, #1
0a57c     13 29 02 F1 | 	add	local02, local01
0a580     02 28 66 F0 | 	shl	local02, #2
0a584     03 00 00 FF 
0a588     00 E4 85 F1 | 	sub	objptr, ##1536
0a58c     F2 28 02 F1 | 	add	local02, objptr
0a590     08 28 06 F1 | 	add	local02, #8
0a594     14 53 69 FC | 	wrlong	#169, local02
0a598     03 00 00 FF 
0a59c     00 E4 05 F1 | 	add	objptr, ##1536
0a5a0     F2 28 02 FB | 	rdlong	local02, objptr
0a5a4     01 28 06 F1 | 	add	local02, #1
0a5a8     F2 28 62 FC | 	wrlong	local02, objptr
0a5ac     4A 00 00 FF 
0a5b0     7C E4 85 F1 | 	sub	objptr, ##38012
0a5b4     0C 00 B0 FD | 	call	#_compile_goto
0a5b8                 | ' compiledline(lineptr).result_type=token_gosub
0a5b8                 | ' lineptr+=1
0a5b8                 | ' err=compile_goto()
0a5b8                 | ' return err
0a5b8     A7 F0 03 F6 | 	mov	ptra, fp
0a5bc     B2 00 A0 FD | 	call	#popregs_
0a5c0                 | _compile_gosub_ret
0a5c0     2D 00 64 FD | 	ret
0a5c4                 | 
0a5c4                 | ' 
0a5c4                 | ' '----- compile 'goto' 
0a5c4                 | ' 
0a5c4                 | ' function compile_goto() as ulong
0a5c4                 | _compile_goto
0a5c4     03 4A 05 F6 | 	mov	COUNT_, #3
0a5c8     A8 00 A0 FD | 	call	#pushregs_
0a5cc     34 F0 07 F1 | 	add	ptra, #52
0a5d0                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a5d0     37 00 00 FF 
0a5d4     44 E4 05 F1 | 	add	objptr, ##28228
0a5d8     F2 16 02 FB | 	rdlong	arg03, objptr
0a5dc     03 16 66 F0 | 	shl	arg03, #3
0a5e0     02 00 00 FF 
0a5e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5e8     F2 16 02 F1 | 	add	arg03, objptr
0a5ec     04 16 06 F1 | 	add	arg03, #4
0a5f0     0B 17 02 FB | 	rdlong	arg03, arg03
0a5f4     01 00 00 FF 
0a5f8     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a5fc     35 00 00 FF 
0a600     0C E4 85 F1 | 	sub	objptr, ##27148
0a604     CC 02 90 5D |  if_ne	jmp	#LR__0905
0a608     37 00 00 FF 
0a60c     44 E4 05 F1 | 	add	objptr, ##28228
0a610     F2 16 02 FB | 	rdlong	arg03, objptr
0a614     01 16 06 F1 | 	add	arg03, #1
0a618     03 16 66 F0 | 	shl	arg03, #3
0a61c     02 00 00 FF 
0a620     38 E4 85 F1 | 	sub	objptr, ##1080
0a624     F2 16 02 F1 | 	add	arg03, objptr
0a628     04 16 06 F1 | 	add	arg03, #4
0a62c     0B 17 02 FB | 	rdlong	arg03, arg03
0a630     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a634     35 00 00 FF 
0a638     0C E4 85 F1 | 	sub	objptr, ##27148
0a63c     94 02 90 5D |  if_ne	jmp	#LR__0905
0a640     37 00 00 FF 
0a644     44 E4 05 F1 | 	add	objptr, ##28228
0a648     F2 16 02 FB | 	rdlong	arg03, objptr
0a64c     03 16 66 F0 | 	shl	arg03, #3
0a650     02 00 00 FF 
0a654     38 E4 85 F1 | 	sub	objptr, ##1080
0a658     F2 16 02 F1 | 	add	arg03, objptr
0a65c     0B 13 02 FB | 	rdlong	arg01, arg03
0a660     00 14 06 F6 | 	mov	arg02, #0
0a664     35 00 00 FF 
0a668     0C E4 85 F1 | 	sub	objptr, ##27148
0a66c     94 CD B1 FD | 	call	#__system____builtin_atoi
0a670     04 4E 05 F1 | 	add	fp, #4
0a674     A7 FA 61 FC | 	wrlong	result1, fp
0a678     4A 00 00 FF 
0a67c     7C E4 05 F1 | 	add	objptr, ##38012
0a680     F2 26 02 FB | 	rdlong	local01, objptr
0a684     13 29 02 F6 | 	mov	local02, local01
0a688     01 28 66 F0 | 	shl	local02, #1
0a68c     13 29 02 F1 | 	add	local02, local01
0a690     02 28 66 F0 | 	shl	local02, #2
0a694     03 00 00 FF 
0a698     00 E4 85 F1 | 	sub	objptr, ##1536
0a69c     F2 28 02 F1 | 	add	local02, objptr
0a6a0     08 28 06 F1 | 	add	local02, #8
0a6a4     14 9D 68 FC | 	wrlong	#78, local02
0a6a8     03 00 00 FF 
0a6ac     0C E4 05 F1 | 	add	objptr, ##1548
0a6b0     F2 2A 02 FB | 	rdlong	local03, objptr
0a6b4     4A 00 00 FF 
0a6b8     88 E4 85 F1 | 	sub	objptr, ##38024
0a6bc     04 4E 05 F1 | 	add	fp, #4
0a6c0     A7 2A 62 FC | 	wrlong	local03, fp
0a6c4     08 4E 85 F1 | 	sub	fp, #8
0a6c8                 | '   gotoline=val%(lparts(ct).part$) 
0a6c8                 | '   compiledline(lineptr).result_type=token_fast_goto
0a6c8                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a6c8                 | '   do
0a6c8                 | LR__0900
0a6c8     10 4E 05 F1 | 	add	fp, #16
0a6cc     A7 12 02 F6 | 	mov	arg01, fp
0a6d0     08 4E 85 F1 | 	sub	fp, #8
0a6d4     A7 14 02 FB | 	rdlong	arg02, fp
0a6d8     08 4E 85 F1 | 	sub	fp, #8
0a6dc     18 16 06 F6 | 	mov	arg03, #24
0a6e0     0B 00 00 FF 
0a6e4     CC E4 05 F1 | 	add	objptr, ##5836
0a6e8     E8 8B B1 FD | 	call	#_psram_spin2_read1
0a6ec     0B 00 00 FF 
0a6f0     CC E4 85 F1 | 	sub	objptr, ##5836
0a6f4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a6f4                 | '     if gotoheader(0)<>$FFFFFFFF then
0a6f4     10 4E 05 F1 | 	add	fp, #16
0a6f8     A7 2A 02 FB | 	rdlong	local03, fp
0a6fc     10 4E 85 F1 | 	sub	fp, #16
0a700     FF FF 7F FF 
0a704     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a708     24 00 90 AD |  if_e	jmp	#LR__0901
0a70c     08 4E 05 F1 | 	add	fp, #8
0a710     A7 2A 02 FB | 	rdlong	local03, fp
0a714     04 4E 05 F1 | 	add	fp, #4
0a718     A7 2A 62 FC | 	wrlong	local03, fp
0a71c     18 4E 05 F1 | 	add	fp, #24
0a720     A7 2A 02 FB | 	rdlong	local03, fp
0a724     1C 4E 85 F1 | 	sub	fp, #28
0a728     A7 2A 62 FC | 	wrlong	local03, fp
0a72c     08 4E 85 F1 | 	sub	fp, #8
0a730                 | LR__0901
0a730     24 4E 05 F1 | 	add	fp, #36
0a734     A7 2A 02 FB | 	rdlong	local03, fp
0a738     24 4E 85 F1 | 	sub	fp, #36
0a73c     FF FF 3F FF 
0a740     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a744     10 4E 05 51 |  if_ne	add	fp, #16
0a748     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a74c     10 4E 85 51 |  if_ne	sub	fp, #16
0a750     FF FF 7F 5F 
0a754     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a758     1C 00 90 AD |  if_e	jmp	#LR__0902
0a75c     10 4E 05 F1 | 	add	fp, #16
0a760     A7 2A 02 FB | 	rdlong	local03, fp
0a764     0C 4E 85 F1 | 	sub	fp, #12
0a768     A7 28 02 FB | 	rdlong	local02, fp
0a76c     04 4E 85 F1 | 	sub	fp, #4
0a770     14 2B 0A F2 | 	cmp	local03, local02 wz
0a774     50 FF 9F 5D |  if_ne	jmp	#LR__0900
0a778                 | LR__0902
0a778                 | '   if gotoheader(0)=gotoline then
0a778     10 4E 05 F1 | 	add	fp, #16
0a77c     A7 2A 02 FB | 	rdlong	local03, fp
0a780     0C 4E 85 F1 | 	sub	fp, #12
0a784     A7 26 02 FB | 	rdlong	local01, fp
0a788     04 4E 85 F1 | 	sub	fp, #4
0a78c     13 2B 0A F2 | 	cmp	local03, local01 wz
0a790     7C 00 90 5D |  if_ne	jmp	#LR__0903
0a794     4A 00 00 FF 
0a798     7C E4 05 F1 | 	add	objptr, ##38012
0a79c     F2 26 02 FB | 	rdlong	local01, objptr
0a7a0     13 29 02 F6 | 	mov	local02, local01
0a7a4     01 28 66 F0 | 	shl	local02, #1
0a7a8     13 29 02 F1 | 	add	local02, local01
0a7ac     02 28 66 F0 | 	shl	local02, #2
0a7b0     03 00 00 FF 
0a7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7b8     F2 28 02 F1 | 	add	local02, objptr
0a7bc     0C 4E 05 F1 | 	add	fp, #12
0a7c0     A7 2A 02 FB | 	rdlong	local03, fp
0a7c4     14 2B 62 FC | 	wrlong	local03, local02
0a7c8     03 00 00 FF 
0a7cc     00 E4 05 F1 | 	add	objptr, ##1536
0a7d0     F2 26 02 FB | 	rdlong	local01, objptr
0a7d4     13 29 02 F6 | 	mov	local02, local01
0a7d8     01 28 66 F0 | 	shl	local02, #1
0a7dc     13 29 02 F1 | 	add	local02, local01
0a7e0     02 28 66 F0 | 	shl	local02, #2
0a7e4     03 00 00 FF 
0a7e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7ec     F2 28 02 F1 | 	add	local02, objptr
0a7f0     08 4E 85 F1 | 	sub	fp, #8
0a7f4     A7 2A 02 FB | 	rdlong	local03, fp
0a7f8     04 4E 85 F1 | 	sub	fp, #4
0a7fc     04 28 06 F1 | 	add	local02, #4
0a800     14 2B 62 FC | 	wrlong	local03, local02
0a804     47 00 00 FF 
0a808     7C E4 85 F1 | 	sub	objptr, ##36476
0a80c     A4 00 90 FD | 	jmp	#LR__0904
0a810                 | LR__0903
0a810     4A 00 00 FF 
0a814     7C E4 05 F1 | 	add	objptr, ##38012
0a818     F2 26 02 FB | 	rdlong	local01, objptr
0a81c     13 29 02 F6 | 	mov	local02, local01
0a820     01 28 66 F0 | 	shl	local02, #1
0a824     13 29 02 F1 | 	add	local02, local01
0a828     02 28 66 F0 | 	shl	local02, #2
0a82c     03 00 00 FF 
0a830     00 E4 85 F1 | 	sub	objptr, ##1536
0a834     F2 28 02 F1 | 	add	local02, objptr
0a838     00 00 C0 FF 
0a83c     14 01 68 FC | 	wrlong	##-2147483648, local02
0a840     03 00 00 FF 
0a844     00 E4 05 F1 | 	add	objptr, ##1536
0a848     F2 26 02 FB | 	rdlong	local01, objptr
0a84c     13 29 02 F6 | 	mov	local02, local01
0a850     01 28 66 F0 | 	shl	local02, #1
0a854     13 29 02 F1 | 	add	local02, local01
0a858     02 28 66 F0 | 	shl	local02, #2
0a85c     03 00 00 FF 
0a860     00 E4 85 F1 | 	sub	objptr, ##1536
0a864     F2 28 02 F1 | 	add	local02, objptr
0a868     04 4E 05 F1 | 	add	fp, #4
0a86c     A7 2A 02 FB | 	rdlong	local03, fp
0a870     04 4E 85 F1 | 	sub	fp, #4
0a874     04 28 06 F1 | 	add	local02, #4
0a878     14 2B 62 FC | 	wrlong	local03, local02
0a87c     03 00 00 FF 
0a880     00 E4 05 F1 | 	add	objptr, ##1536
0a884     F2 26 02 FB | 	rdlong	local01, objptr
0a888     13 29 02 F6 | 	mov	local02, local01
0a88c     01 28 66 F0 | 	shl	local02, #1
0a890     13 29 02 F1 | 	add	local02, local01
0a894     02 28 66 F0 | 	shl	local02, #2
0a898     03 00 00 FF 
0a89c     00 E4 85 F1 | 	sub	objptr, ##1536
0a8a0     F2 28 02 F1 | 	add	local02, objptr
0a8a4     08 28 06 F1 | 	add	local02, #8
0a8a8     14 A7 68 FC | 	wrlong	#83, local02
0a8ac     47 00 00 FF 
0a8b0     7C E4 85 F1 | 	sub	objptr, ##36476
0a8b4                 | LR__0904
0a8b4     4A 00 00 FF 
0a8b8     7C E4 05 F1 | 	add	objptr, ##38012
0a8bc     F2 2A 02 FB | 	rdlong	local03, objptr
0a8c0     01 2A 06 F1 | 	add	local03, #1
0a8c4     F2 2A 62 FC | 	wrlong	local03, objptr
0a8c8     4A 00 00 FF 
0a8cc     7C E4 85 F1 | 	sub	objptr, ##38012
0a8d0     D0 00 90 FD | 	jmp	#LR__0906
0a8d4                 | LR__0905
0a8d4     98 0A B0 FD | 	call	#_expr
0a8d8     30 4E 05 F1 | 	add	fp, #48
0a8dc     A7 9E 68 FC | 	wrlong	#79, fp
0a8e0     08 4E 85 F1 | 	sub	fp, #8
0a8e4     A7 00 68 FC | 	wrlong	#0, fp
0a8e8     04 4E 05 F1 | 	add	fp, #4
0a8ec     A7 2A 02 FB | 	rdlong	local03, fp
0a8f0     04 4E 05 F1 | 	add	fp, #4
0a8f4     A7 26 02 FB | 	rdlong	local01, fp
0a8f8     30 4E 85 F1 | 	sub	fp, #48
0a8fc     4A 00 00 FF 
0a900     7C E4 05 F1 | 	add	objptr, ##38012
0a904     F2 28 02 FB | 	rdlong	local02, objptr
0a908     14 17 02 F6 | 	mov	arg03, local02
0a90c     01 16 66 F0 | 	shl	arg03, #1
0a910     14 17 02 F1 | 	add	arg03, local02
0a914     02 16 66 F0 | 	shl	arg03, #2
0a918     03 00 00 FF 
0a91c     00 E4 85 F1 | 	sub	objptr, ##1536
0a920     F2 16 02 F1 | 	add	arg03, objptr
0a924     0B 01 68 FC | 	wrlong	#0, arg03
0a928     03 00 00 FF 
0a92c     00 E4 05 F1 | 	add	objptr, ##1536
0a930     F2 28 02 FB | 	rdlong	local02, objptr
0a934     14 17 02 F6 | 	mov	arg03, local02
0a938     01 16 66 F0 | 	shl	arg03, #1
0a93c     14 17 02 F1 | 	add	arg03, local02
0a940     02 16 66 F0 | 	shl	arg03, #2
0a944     03 00 00 FF 
0a948     00 E4 85 F1 | 	sub	objptr, ##1536
0a94c     F2 16 02 F1 | 	add	arg03, objptr
0a950     04 16 06 F1 | 	add	arg03, #4
0a954     0B 2B 62 FC | 	wrlong	local03, arg03
0a958     03 00 00 FF 
0a95c     00 E4 05 F1 | 	add	objptr, ##1536
0a960     F2 2A 02 FB | 	rdlong	local03, objptr
0a964     15 29 02 F6 | 	mov	local02, local03
0a968     01 28 66 F0 | 	shl	local02, #1
0a96c     15 29 02 F1 | 	add	local02, local03
0a970     02 28 66 F0 | 	shl	local02, #2
0a974     03 00 00 FF 
0a978     00 E4 85 F1 | 	sub	objptr, ##1536
0a97c     F2 28 02 F1 | 	add	local02, objptr
0a980     08 28 06 F1 | 	add	local02, #8
0a984     14 27 62 FC | 	wrlong	local01, local02
0a988     03 00 00 FF 
0a98c     00 E4 05 F1 | 	add	objptr, ##1536
0a990     F2 2A 02 FB | 	rdlong	local03, objptr
0a994     01 2A 06 F1 | 	add	local03, #1
0a998     F2 2A 62 FC | 	wrlong	local03, objptr
0a99c     4A 00 00 FF 
0a9a0     7C E4 85 F1 | 	sub	objptr, ##38012
0a9a4                 | LR__0906
0a9a4                 | ' return 0
0a9a4     00 FA 05 F6 | 	mov	result1, #0
0a9a8     A7 F0 03 F6 | 	mov	ptra, fp
0a9ac     B2 00 A0 FD | 	call	#popregs_
0a9b0                 | _compile_goto_ret
0a9b0     2D 00 64 FD | 	ret
0a9b4                 | 
0a9b4                 | ' 
0a9b4                 | ' '----- compile 'on' (on..goto, on..gosub) 
0a9b4                 | ' 
0a9b4                 | ' function compile_on() as ulong
0a9b4                 | _compile_on
0a9b4     04 4A 05 F6 | 	mov	COUNT_, #4
0a9b8     A8 00 A0 FD | 	call	#pushregs_
0a9bc     B0 09 B0 FD | 	call	#_expr
0a9c0     00 26 06 F6 | 	mov	local01, #0
0a9c4     4A 00 00 FF 
0a9c8     7C E4 05 F1 | 	add	objptr, ##38012
0a9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a9d0     0A 13 02 F6 | 	mov	arg01, arg02
0a9d4     01 12 66 F0 | 	shl	arg01, #1
0a9d8     0A 13 02 F1 | 	add	arg01, arg02
0a9dc     02 12 66 F0 | 	shl	arg01, #2
0a9e0     03 00 00 FF 
0a9e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a9e8     F2 12 02 F1 | 	add	arg01, objptr
0a9ec     08 12 06 F1 | 	add	arg01, #8
0a9f0     09 83 69 FC | 	wrlong	#193, arg01
0a9f4     03 00 00 FF 
0a9f8     00 E4 05 F1 | 	add	objptr, ##1536
0a9fc     F2 14 02 FB | 	rdlong	arg02, objptr
0aa00     0A 29 02 F6 | 	mov	local02, arg02
0aa04     01 14 06 F1 | 	add	arg02, #1
0aa08     F2 14 62 FC | 	wrlong	arg02, objptr
0aa0c                 | ' expr()
0aa0c                 | ' 'print lparts(ct).part$ 'ok
0aa0c                 | ' numpar=0
0aa0c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0aa0c                 | ' if lparts(ct).part$="goto" then
0aa0c     13 00 00 FF 
0aa10     38 E4 85 F1 | 	sub	objptr, ##9784
0aa14     F2 14 02 FB | 	rdlong	arg02, objptr
0aa18     03 14 66 F0 | 	shl	arg02, #3
0aa1c     02 00 00 FF 
0aa20     38 E4 85 F1 | 	sub	objptr, ##1080
0aa24     F2 14 02 F1 | 	add	arg02, objptr
0aa28     0A 13 02 FB | 	rdlong	arg01, arg02
0aa2c     A0 01 00 FF 
0aa30     39 15 06 F6 | 	mov	arg02, ##@LR__5681
0aa34     35 00 00 FF 
0aa38     0C E4 85 F1 | 	sub	objptr, ##27148
0aa3c     FC 94 B1 FD | 	call	#__system___string_cmp
0aa40     00 FA 0D F2 | 	cmp	result1, #0 wz
0aa44     14 02 90 5D |  if_ne	jmp	#LR__0915
0aa48     37 00 00 FF 
0aa4c     44 E4 05 F1 | 	add	objptr, ##28228
0aa50     F2 2A 02 FB | 	rdlong	local03, objptr
0aa54     37 00 00 FF 
0aa58     44 E4 85 F1 | 	sub	objptr, ##28228
0aa5c     01 2A 06 F1 | 	add	local03, #1
0aa60                 | '   i=ct+1
0aa60                 | '   do
0aa60                 | LR__0910
0aa60                 | '     if lparts(i).token=token_decimal then
0aa60     15 FB 01 F6 | 	mov	result1, local03
0aa64     03 FA 65 F0 | 	shl	result1, #3
0aa68     35 00 00 FF 
0aa6c     0C E4 05 F1 | 	add	objptr, ##27148
0aa70     F2 FA 01 F1 | 	add	result1, objptr
0aa74     04 FA 05 F1 | 	add	result1, #4
0aa78     FD FA 01 FB | 	rdlong	result1, result1
0aa7c     01 00 00 FF 
0aa80     00 FA 0D F2 | 	cmp	result1, ##512 wz
0aa84     35 00 00 FF 
0aa88     0C E4 85 F1 | 	sub	objptr, ##27148
0aa8c     DC 00 90 5D |  if_ne	jmp	#LR__0911
0aa90     4A 00 00 FF 
0aa94     7C E4 05 F1 | 	add	objptr, ##38012
0aa98     F2 FA 01 FB | 	rdlong	result1, objptr
0aa9c     FD 14 02 F6 | 	mov	arg02, result1
0aaa0     01 14 66 F0 | 	shl	arg02, #1
0aaa4     FD 14 02 F1 | 	add	arg02, result1
0aaa8     02 14 66 F0 | 	shl	arg02, #2
0aaac     03 00 00 FF 
0aab0     00 E4 85 F1 | 	sub	objptr, ##1536
0aab4     F2 14 02 F1 | 	add	arg02, objptr
0aab8     00 00 C0 FF 
0aabc     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0aac0     03 00 00 FF 
0aac4     00 E4 05 F1 | 	add	objptr, ##1536
0aac8     F2 14 02 FB | 	rdlong	arg02, objptr
0aacc     0A 2D 02 F6 | 	mov	local04, arg02
0aad0     01 2C 66 F0 | 	shl	local04, #1
0aad4     0A 2D 02 F1 | 	add	local04, arg02
0aad8     02 2C 66 F0 | 	shl	local04, #2
0aadc     03 00 00 FF 
0aae0     00 E4 85 F1 | 	sub	objptr, ##1536
0aae4     F2 2C 02 F1 | 	add	local04, objptr
0aae8     15 15 02 F6 | 	mov	arg02, local03
0aaec     03 14 66 F0 | 	shl	arg02, #3
0aaf0     12 00 00 FF 
0aaf4     70 E4 85 F1 | 	sub	objptr, ##9328
0aaf8     F2 14 02 F1 | 	add	arg02, objptr
0aafc     0A 13 02 FB | 	rdlong	arg01, arg02
0ab00     00 14 06 F6 | 	mov	arg02, #0
0ab04     35 00 00 FF 
0ab08     0C E4 85 F1 | 	sub	objptr, ##27148
0ab0c     F4 C8 B1 FD | 	call	#__system____builtin_atoi
0ab10     04 2C 06 F1 | 	add	local04, #4
0ab14     16 FB 61 FC | 	wrlong	result1, local04
0ab18     4A 00 00 FF 
0ab1c     7C E4 05 F1 | 	add	objptr, ##38012
0ab20     F2 14 02 FB | 	rdlong	arg02, objptr
0ab24     0A 2D 02 F6 | 	mov	local04, arg02
0ab28     01 2C 66 F0 | 	shl	local04, #1
0ab2c     0A 2D 02 F1 | 	add	local04, arg02
0ab30     02 2C 66 F0 | 	shl	local04, #2
0ab34     03 00 00 FF 
0ab38     00 E4 85 F1 | 	sub	objptr, ##1536
0ab3c     F2 2C 02 F1 | 	add	local04, objptr
0ab40     08 2C 06 F1 | 	add	local04, #8
0ab44     16 A7 68 FC | 	wrlong	#83, local04
0ab48     03 00 00 FF 
0ab4c     00 E4 05 F1 | 	add	objptr, ##1536
0ab50     F2 2C 02 FB | 	rdlong	local04, objptr
0ab54     01 2C 06 F1 | 	add	local04, #1
0ab58     F2 2C 62 FC | 	wrlong	local04, objptr
0ab5c     4A 00 00 FF 
0ab60     7C E4 85 F1 | 	sub	objptr, ##38012
0ab64     01 26 06 F1 | 	add	local01, #1
0ab68     08 00 90 FD | 	jmp	#LR__0912
0ab6c                 | LR__0911
0ab6c                 | '       return 17
0ab6c     11 FA 05 F6 | 	mov	result1, #17
0ab70     5C 04 90 FD | 	jmp	#LR__0925
0ab74                 | LR__0912
0ab74     01 2A 06 F1 | 	add	local03, #1
0ab78                 | '     i+=1
0ab78                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ab78     15 2D 02 F6 | 	mov	local04, local03
0ab7c     03 2C 66 F0 | 	shl	local04, #3
0ab80     35 00 00 FF 
0ab84     0C E4 05 F1 | 	add	objptr, ##27148
0ab88     F2 2C 02 F1 | 	add	local04, objptr
0ab8c     04 2C 06 F1 | 	add	local04, #4
0ab90     16 2D 02 FB | 	rdlong	local04, local04
0ab94     11 2C 0E F2 | 	cmp	local04, #17 wz
0ab98     35 00 00 FF 
0ab9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aba0     30 00 90 AD |  if_e	jmp	#LR__0913
0aba4     15 2D 02 F6 | 	mov	local04, local03
0aba8     03 2C 66 F0 | 	shl	local04, #3
0abac     35 00 00 FF 
0abb0     0C E4 05 F1 | 	add	objptr, ##27148
0abb4     F2 2C 02 F1 | 	add	local04, objptr
0abb8     04 2C 06 F1 | 	add	local04, #4
0abbc     16 2D 02 FB | 	rdlong	local04, local04
0abc0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abc4     35 00 00 FF 
0abc8     0C E4 85 F1 | 	sub	objptr, ##27148
0abcc     15 FA 05 56 |  if_ne	mov	result1, #21
0abd0     FC 03 90 5D |  if_ne	jmp	#LR__0925
0abd4                 | LR__0913
0abd4                 | '     if lparts(i).token=token_end then exit loop
0abd4     15 2D 02 F6 | 	mov	local04, local03
0abd8     03 2C 66 F0 | 	shl	local04, #3
0abdc     35 00 00 FF 
0abe0     0C E4 05 F1 | 	add	objptr, ##27148
0abe4     F2 2C 02 F1 | 	add	local04, objptr
0abe8     04 2C 06 F1 | 	add	local04, #4
0abec     16 2D 02 FB | 	rdlong	local04, local04
0abf0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abf4     35 00 00 FF 
0abf8     0C E4 85 F1 | 	sub	objptr, ##27148
0abfc     30 00 90 AD |  if_e	jmp	#LR__0914
0ac00     01 2A 06 F1 | 	add	local03, #1
0ac04     15 2D 02 F6 | 	mov	local04, local03
0ac08     03 2C 66 F0 | 	shl	local04, #3
0ac0c     35 00 00 FF 
0ac10     0C E4 05 F1 | 	add	objptr, ##27148
0ac14     F2 2C 02 F1 | 	add	local04, objptr
0ac18     04 2C 06 F1 | 	add	local04, #4
0ac1c     16 2D 02 FB | 	rdlong	local04, local04
0ac20     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ac24     35 00 00 FF 
0ac28     0C E4 85 F1 | 	sub	objptr, ##27148
0ac2c     30 FE 9F 5D |  if_ne	jmp	#LR__0910
0ac30                 | LR__0914
0ac30     14 2D 02 F6 | 	mov	local04, local02
0ac34     01 2C 66 F0 | 	shl	local04, #1
0ac38     14 2D 02 F1 | 	add	local04, local02
0ac3c     02 2C 66 F0 | 	shl	local04, #2
0ac40     47 00 00 FF 
0ac44     7C E4 05 F1 | 	add	objptr, ##36476
0ac48     F2 2C 02 F1 | 	add	local04, objptr
0ac4c     04 2C 06 F1 | 	add	local04, #4
0ac50     16 03 68 FC | 	wrlong	#1, local04
0ac54     47 00 00 FF 
0ac58     7C E4 85 F1 | 	sub	objptr, ##36476
0ac5c                 | LR__0915
0ac5c                 | ' 
0ac5c                 | ' if lparts(ct).part$="gosub" then
0ac5c     37 00 00 FF 
0ac60     44 E4 05 F1 | 	add	objptr, ##28228
0ac64     F2 2A 02 FB | 	rdlong	local03, objptr
0ac68     03 2A 66 F0 | 	shl	local03, #3
0ac6c     02 00 00 FF 
0ac70     38 E4 85 F1 | 	sub	objptr, ##1080
0ac74     F2 2A 02 F1 | 	add	local03, objptr
0ac78     15 13 02 FB | 	rdlong	arg01, local03
0ac7c     A0 01 00 FF 
0ac80     3E 15 06 F6 | 	mov	arg02, ##@LR__5682
0ac84     35 00 00 FF 
0ac88     0C E4 85 F1 | 	sub	objptr, ##27148
0ac8c     AC 92 B1 FD | 	call	#__system___string_cmp
0ac90     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac94     84 02 90 5D |  if_ne	jmp	#LR__0921
0ac98     37 00 00 FF 
0ac9c     44 E4 05 F1 | 	add	objptr, ##28228
0aca0     F2 2A 02 FB | 	rdlong	local03, objptr
0aca4     37 00 00 FF 
0aca8     44 E4 85 F1 | 	sub	objptr, ##28228
0acac     01 2A 06 F1 | 	add	local03, #1
0acb0                 | '   i=ct+1
0acb0                 | '   do
0acb0                 | LR__0916
0acb0                 | '     if lparts(i).token=token_decimal then
0acb0     15 2D 02 F6 | 	mov	local04, local03
0acb4     03 2C 66 F0 | 	shl	local04, #3
0acb8     35 00 00 FF 
0acbc     0C E4 05 F1 | 	add	objptr, ##27148
0acc0     F2 2C 02 F1 | 	add	local04, objptr
0acc4     04 2C 06 F1 | 	add	local04, #4
0acc8     16 2D 02 FB | 	rdlong	local04, local04
0accc     01 00 00 FF 
0acd0     00 2C 0E F2 | 	cmp	local04, ##512 wz
0acd4     35 00 00 FF 
0acd8     0C E4 85 F1 | 	sub	objptr, ##27148
0acdc     4C 01 90 5D |  if_ne	jmp	#LR__0917
0ace0     4A 00 00 FF 
0ace4     7C E4 05 F1 | 	add	objptr, ##38012
0ace8     F2 FA 01 FB | 	rdlong	result1, objptr
0acec     FD 2C 02 F6 | 	mov	local04, result1
0acf0     01 2C 66 F0 | 	shl	local04, #1
0acf4     FD 2C 02 F1 | 	add	local04, result1
0acf8     02 2C 66 F0 | 	shl	local04, #2
0acfc     03 00 00 FF 
0ad00     00 E4 85 F1 | 	sub	objptr, ##1536
0ad04     F2 2C 02 F1 | 	add	local04, objptr
0ad08     08 2C 06 F1 | 	add	local04, #8
0ad0c     16 53 69 FC | 	wrlong	#169, local04
0ad10     03 00 00 FF 
0ad14     00 E4 05 F1 | 	add	objptr, ##1536
0ad18     F2 FA 01 FB | 	rdlong	result1, objptr
0ad1c     01 FA 05 F1 | 	add	result1, #1
0ad20     F2 FA 61 FC | 	wrlong	result1, objptr
0ad24     FD 2C 02 F6 | 	mov	local04, result1
0ad28     01 2C 66 F0 | 	shl	local04, #1
0ad2c     FD 2C 02 F1 | 	add	local04, result1
0ad30     02 2C 66 F0 | 	shl	local04, #2
0ad34     03 00 00 FF 
0ad38     00 E4 85 F1 | 	sub	objptr, ##1536
0ad3c     F2 2C 02 F1 | 	add	local04, objptr
0ad40     00 00 C0 FF 
0ad44     16 01 68 FC | 	wrlong	##-2147483648, local04
0ad48     03 00 00 FF 
0ad4c     00 E4 05 F1 | 	add	objptr, ##1536
0ad50     F2 FA 01 FB | 	rdlong	result1, objptr
0ad54     FD 2C 02 F6 | 	mov	local04, result1
0ad58     01 2C 66 F0 | 	shl	local04, #1
0ad5c     FD 2C 02 F1 | 	add	local04, result1
0ad60     02 2C 66 F0 | 	shl	local04, #2
0ad64     03 00 00 FF 
0ad68     00 E4 85 F1 | 	sub	objptr, ##1536
0ad6c     F2 2C 02 F1 | 	add	local04, objptr
0ad70     15 13 02 F6 | 	mov	arg01, local03
0ad74     03 12 66 F0 | 	shl	arg01, #3
0ad78     12 00 00 FF 
0ad7c     70 E4 85 F1 | 	sub	objptr, ##9328
0ad80     F2 12 02 F1 | 	add	arg01, objptr
0ad84     09 13 02 FB | 	rdlong	arg01, arg01
0ad88     00 14 06 F6 | 	mov	arg02, #0
0ad8c     35 00 00 FF 
0ad90     0C E4 85 F1 | 	sub	objptr, ##27148
0ad94     6C C6 B1 FD | 	call	#__system____builtin_atoi
0ad98     04 2C 06 F1 | 	add	local04, #4
0ad9c     16 FB 61 FC | 	wrlong	result1, local04
0ada0     4A 00 00 FF 
0ada4     7C E4 05 F1 | 	add	objptr, ##38012
0ada8     F2 12 02 FB | 	rdlong	arg01, objptr
0adac     09 2D 02 F6 | 	mov	local04, arg01
0adb0     01 2C 66 F0 | 	shl	local04, #1
0adb4     09 2D 02 F1 | 	add	local04, arg01
0adb8     02 2C 66 F0 | 	shl	local04, #2
0adbc     03 00 00 FF 
0adc0     00 E4 85 F1 | 	sub	objptr, ##1536
0adc4     F2 2C 02 F1 | 	add	local04, objptr
0adc8     08 2C 06 F1 | 	add	local04, #8
0adcc     16 A7 68 FC | 	wrlong	#83, local04
0add0     03 00 00 FF 
0add4     00 E4 05 F1 | 	add	objptr, ##1536
0add8     F2 12 02 FB | 	rdlong	arg01, objptr
0addc     01 12 06 F1 | 	add	arg01, #1
0ade0     F2 12 62 FC | 	wrlong	arg01, objptr
0ade4     01 26 06 F1 | 	add	local01, #1
0ade8     09 2D 02 F6 | 	mov	local04, arg01
0adec     01 2C 66 F0 | 	shl	local04, #1
0adf0     09 2D 02 F1 | 	add	local04, arg01
0adf4     02 2C 66 F0 | 	shl	local04, #2
0adf8     03 00 00 FF 
0adfc     00 E4 85 F1 | 	sub	objptr, ##1536
0ae00     F2 2C 02 F1 | 	add	local04, objptr
0ae04     08 2C 06 F1 | 	add	local04, #8
0ae08     16 5B 68 FC | 	wrlong	#45, local04
0ae0c     03 00 00 FF 
0ae10     00 E4 05 F1 | 	add	objptr, ##1536
0ae14     F2 2C 02 FB | 	rdlong	local04, objptr
0ae18     01 2C 06 F1 | 	add	local04, #1
0ae1c     F2 2C 62 FC | 	wrlong	local04, objptr
0ae20     4A 00 00 FF 
0ae24     7C E4 85 F1 | 	sub	objptr, ##38012
0ae28     08 00 90 FD | 	jmp	#LR__0918
0ae2c                 | LR__0917
0ae2c                 | '       return 17
0ae2c     11 FA 05 F6 | 	mov	result1, #17
0ae30     9C 01 90 FD | 	jmp	#LR__0925
0ae34                 | LR__0918
0ae34     01 2A 06 F1 | 	add	local03, #1
0ae38                 | '     i+=1
0ae38                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ae38     15 2D 02 F6 | 	mov	local04, local03
0ae3c     03 2C 66 F0 | 	shl	local04, #3
0ae40     35 00 00 FF 
0ae44     0C E4 05 F1 | 	add	objptr, ##27148
0ae48     F2 2C 02 F1 | 	add	local04, objptr
0ae4c     04 2C 06 F1 | 	add	local04, #4
0ae50     16 2D 02 FB | 	rdlong	local04, local04
0ae54     11 2C 0E F2 | 	cmp	local04, #17 wz
0ae58     35 00 00 FF 
0ae5c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae60     30 00 90 AD |  if_e	jmp	#LR__0919
0ae64     15 2D 02 F6 | 	mov	local04, local03
0ae68     03 2C 66 F0 | 	shl	local04, #3
0ae6c     35 00 00 FF 
0ae70     0C E4 05 F1 | 	add	objptr, ##27148
0ae74     F2 2C 02 F1 | 	add	local04, objptr
0ae78     04 2C 06 F1 | 	add	local04, #4
0ae7c     16 2D 02 FB | 	rdlong	local04, local04
0ae80     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ae84     35 00 00 FF 
0ae88     0C E4 85 F1 | 	sub	objptr, ##27148
0ae8c     15 FA 05 56 |  if_ne	mov	result1, #21
0ae90     3C 01 90 5D |  if_ne	jmp	#LR__0925
0ae94                 | LR__0919
0ae94                 | '     if lparts(i).token=token_end then exit loop
0ae94     15 2D 02 F6 | 	mov	local04, local03
0ae98     03 2C 66 F0 | 	shl	local04, #3
0ae9c     35 00 00 FF 
0aea0     0C E4 05 F1 | 	add	objptr, ##27148
0aea4     F2 2C 02 F1 | 	add	local04, objptr
0aea8     04 2C 06 F1 | 	add	local04, #4
0aeac     16 2D 02 FB | 	rdlong	local04, local04
0aeb0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aeb4     35 00 00 FF 
0aeb8     0C E4 85 F1 | 	sub	objptr, ##27148
0aebc     30 00 90 AD |  if_e	jmp	#LR__0920
0aec0     01 2A 06 F1 | 	add	local03, #1
0aec4     15 2D 02 F6 | 	mov	local04, local03
0aec8     03 2C 66 F0 | 	shl	local04, #3
0aecc     35 00 00 FF 
0aed0     0C E4 05 F1 | 	add	objptr, ##27148
0aed4     F2 2C 02 F1 | 	add	local04, objptr
0aed8     04 2C 06 F1 | 	add	local04, #4
0aedc     16 2D 02 FB | 	rdlong	local04, local04
0aee0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aee4     35 00 00 FF 
0aee8     0C E4 85 F1 | 	sub	objptr, ##27148
0aeec     C0 FD 9F 5D |  if_ne	jmp	#LR__0916
0aef0                 | LR__0920
0aef0     14 2D 02 F6 | 	mov	local04, local02
0aef4     01 2C 66 F0 | 	shl	local04, #1
0aef8     14 2D 02 F1 | 	add	local04, local02
0aefc     02 2C 66 F0 | 	shl	local04, #2
0af00     47 00 00 FF 
0af04     7C E4 05 F1 | 	add	objptr, ##36476
0af08     F2 2C 02 F1 | 	add	local04, objptr
0af0c     04 2C 06 F1 | 	add	local04, #4
0af10     16 07 68 FC | 	wrlong	#3, local04
0af14     47 00 00 FF 
0af18     7C E4 85 F1 | 	sub	objptr, ##36476
0af1c                 | LR__0921
0af1c     14 2B 02 F6 | 	mov	local03, local02
0af20     01 2A 66 F0 | 	shl	local03, #1
0af24     14 2B 02 F1 | 	add	local03, local02
0af28     02 2A 66 F0 | 	shl	local03, #2
0af2c     47 00 00 FF 
0af30     7C E4 05 F1 | 	add	objptr, ##36476
0af34     F2 2A 02 F1 | 	add	local03, objptr
0af38     15 27 62 FC | 	wrlong	local01, local03
0af3c                 | ' compiledline(onlineptr).result.uresult=numpar
0af3c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0af3c     03 00 00 FF 
0af40     00 E4 05 F1 | 	add	objptr, ##1536
0af44     F2 2A 02 FB | 	rdlong	local03, objptr
0af48     4A 00 00 FF 
0af4c     7C E4 85 F1 | 	sub	objptr, ##38012
0af50     97 3C 48 FB | 	callpa	#(@LR__0924-@LR__0922)>>2,fcache_load_ptr_
0af54                 | LR__0922
0af54     15 2D 02 F6 | 	mov	local04, local03
0af58     01 2C 66 F0 | 	shl	local04, #1
0af5c     15 2D 02 F1 | 	add	local04, local03
0af60     02 2C 66 F0 | 	shl	local04, #2
0af64     47 00 00 FF 
0af68     7C E4 05 F1 | 	add	objptr, ##36476
0af6c     F2 2C 02 F1 | 	add	local04, objptr
0af70     08 2C 06 F1 | 	add	local04, #8
0af74     16 2D 02 FB | 	rdlong	local04, local04
0af78     2D 2C 0E F2 | 	cmp	local04, #45 wz
0af7c     47 00 00 FF 
0af80     7C E4 85 F1 | 	sub	objptr, ##36476
0af84     38 00 90 5D |  if_ne	jmp	#LR__0923
0af88     15 2D 02 F6 | 	mov	local04, local03
0af8c     01 2C 66 F0 | 	shl	local04, #1
0af90     15 2D 02 F1 | 	add	local04, local03
0af94     02 2C 66 F0 | 	shl	local04, #2
0af98     47 00 00 FF 
0af9c     7C E4 05 F1 | 	add	objptr, ##36476
0afa0     F2 2C 02 F1 | 	add	local04, objptr
0afa4     03 00 00 FF 
0afa8     00 E4 05 F1 | 	add	objptr, ##1536
0afac     F2 26 02 FB | 	rdlong	local01, objptr
0afb0     4A 00 00 FF 
0afb4     7C E4 85 F1 | 	sub	objptr, ##38012
0afb8     02 26 86 F1 | 	sub	local01, #2
0afbc     16 27 62 FC | 	wrlong	local01, local04
0afc0                 | LR__0923
0afc0     01 2A 86 F1 | 	sub	local03, #1
0afc4     14 2B 52 F2 | 	cmps	local03, local02 wc
0afc8     88 FF 9F 3D |  if_ae	jmp	#LR__0922
0afcc                 | LR__0924
0afcc                 | ' return 0
0afcc     00 FA 05 F6 | 	mov	result1, #0
0afd0                 | LR__0925
0afd0     A7 F0 03 F6 | 	mov	ptra, fp
0afd4     B2 00 A0 FD | 	call	#popregs_
0afd8                 | _compile_on_ret
0afd8     2D 00 64 FD | 	ret
0afdc                 | 
0afdc                 | ' 
0afdc                 | ' '----- A helper for compile_input and compile_read
0afdc                 | '  
0afdc                 | ' function getaddr() as ulong
0afdc                 | _getaddr
0afdc     0B 4A 05 F6 | 	mov	COUNT_, #11
0afe0     A8 00 A0 FD | 	call	#pushregs_
0afe4     37 00 00 FF 
0afe8     44 E4 05 F1 | 	add	objptr, ##28228
0afec     F2 2C 02 FB | 	rdlong	local04, objptr
0aff0     03 2C 66 F0 | 	shl	local04, #3
0aff4     02 00 00 FF 
0aff8     38 E4 85 F1 | 	sub	objptr, ##1080
0affc     F2 2C 02 F1 | 	add	local04, objptr
0b000     16 2F 02 FB | 	rdlong	local05, local04
0b004     01 30 66 F6 | 	neg	local06, #1
0b008                 | ' 
0b008                 | ' varname$=lparts(ct).part$
0b008                 | ' j=-1
0b008                 | ' 
0b008                 | ' for i=0 to varnum-1
0b008     00 32 06 F6 | 	mov	local07, #0
0b00c     04 E4 85 F1 | 	sub	objptr, #4
0b010     F2 34 02 FB | 	rdlong	local08, objptr
0b014     35 00 00 FF 
0b018     08 E4 85 F1 | 	sub	objptr, ##27144
0b01c                 | LR__0930
0b01c     1A 33 52 F2 | 	cmps	local07, local08 wc
0b020     38 00 90 3D |  if_ae	jmp	#LR__0931
0b024                 | '   if variables(i).name=varname$ then j=i : exit
0b024     19 2D 02 F6 | 	mov	local04, local07
0b028     04 2C 66 F0 | 	shl	local04, #4
0b02c     14 00 00 FF 
0b030     F8 E5 05 F1 | 	add	objptr, ##10744
0b034     F2 2C 02 F1 | 	add	local04, objptr
0b038     16 13 02 FB | 	rdlong	arg01, local04
0b03c     17 15 02 F6 | 	mov	arg02, local05
0b040     14 00 00 FF 
0b044     F8 E5 85 F1 | 	sub	objptr, ##10744
0b048     F0 8E B1 FD | 	call	#__system___string_cmp
0b04c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b050     19 31 02 A6 |  if_e	mov	local06, local07
0b054     01 32 06 51 |  if_ne	add	local07, #1
0b058     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0b05c                 | LR__0931
0b05c                 | ' if  j=-1 andalso varnum<maxvars then   
0b05c     FF FF 7F FF 
0b060     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b064     A8 00 90 5D |  if_ne	jmp	#LR__0932
0b068     35 00 00 FF 
0b06c     08 E4 05 F1 | 	add	objptr, ##27144
0b070     F2 34 02 FB | 	rdlong	local08, objptr
0b074     35 00 00 FF 
0b078     08 E4 85 F1 | 	sub	objptr, ##27144
0b07c     02 00 00 FF 
0b080     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b084     88 00 90 3D |  if_ae	jmp	#LR__0932
0b088     35 00 00 FF 
0b08c     08 E4 05 F1 | 	add	objptr, ##27144
0b090     F2 2C 02 FB | 	rdlong	local04, objptr
0b094     04 2C 66 F0 | 	shl	local04, #4
0b098     20 00 00 FF 
0b09c     10 E4 85 F1 | 	sub	objptr, ##16400
0b0a0     F2 2C 02 F1 | 	add	local04, objptr
0b0a4     16 2F 62 FC | 	wrlong	local05, local04
0b0a8     20 00 00 FF 
0b0ac     10 E4 05 F1 | 	add	objptr, ##16400
0b0b0     F2 2C 02 FB | 	rdlong	local04, objptr
0b0b4     04 2C 66 F0 | 	shl	local04, #4
0b0b8     20 00 00 FF 
0b0bc     10 E4 85 F1 | 	sub	objptr, ##16400
0b0c0     F2 2C 02 F1 | 	add	local04, objptr
0b0c4     04 2C 06 F1 | 	add	local04, #4
0b0c8     16 01 68 FC | 	wrlong	#0, local04
0b0cc     20 00 00 FF 
0b0d0     10 E4 05 F1 | 	add	objptr, ##16400
0b0d4     F2 2C 02 FB | 	rdlong	local04, objptr
0b0d8     04 2C 66 F0 | 	shl	local04, #4
0b0dc     20 00 00 FF 
0b0e0     10 E4 85 F1 | 	sub	objptr, ##16400
0b0e4     F2 2C 02 F1 | 	add	local04, objptr
0b0e8     0C 2C 06 F1 | 	add	local04, #12
0b0ec     16 39 68 FC | 	wrlong	#28, local04
0b0f0     20 00 00 FF 
0b0f4     10 E4 05 F1 | 	add	objptr, ##16400
0b0f8     F2 34 02 FB | 	rdlong	local08, objptr
0b0fc     1A 31 02 F6 | 	mov	local06, local08
0b100     01 34 06 F1 | 	add	local08, #1
0b104     F2 34 62 FC | 	wrlong	local08, objptr
0b108     35 00 00 FF 
0b10c     08 E4 85 F1 | 	sub	objptr, ##27144
0b110                 | LR__0932
0b110     00 34 06 F6 | 	mov	local08, #0
0b114                 | ' numpar=0
0b114                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b114     37 00 00 FF 
0b118     44 E4 05 F1 | 	add	objptr, ##28228
0b11c     F2 2C 02 FB | 	rdlong	local04, objptr
0b120     01 2C 06 F1 | 	add	local04, #1
0b124     03 2C 66 F0 | 	shl	local04, #3
0b128     02 00 00 FF 
0b12c     38 E4 85 F1 | 	sub	objptr, ##1080
0b130     F2 2C 02 F1 | 	add	local04, objptr
0b134     04 2C 06 F1 | 	add	local04, #4
0b138     16 33 02 FB | 	rdlong	local07, local04
0b13c     15 32 0E F2 | 	cmp	local07, #21 wz
0b140     35 00 00 FF 
0b144     0C E4 85 F1 | 	sub	objptr, ##27148
0b148     54 01 90 5D |  if_ne	jmp	#LR__0937
0b14c     37 00 00 FF 
0b150     44 E4 05 F1 | 	add	objptr, ##28228
0b154     F2 36 02 FB | 	rdlong	local09, objptr
0b158     01 36 06 F1 | 	add	local09, #1
0b15c     F2 36 62 FC | 	wrlong	local09, objptr
0b160     37 00 00 FF 
0b164     44 E4 85 F1 | 	sub	objptr, ##28228
0b168                 | '   ct+=1 											' omit this lpar, this is for expr list
0b168                 | '   do
0b168                 | LR__0933
0b168     37 00 00 FF 
0b16c     44 E4 05 F1 | 	add	objptr, ##28228
0b170     F2 2C 02 FB | 	rdlong	local04, objptr
0b174     01 2C 06 F1 | 	add	local04, #1
0b178     F2 2C 62 FC | 	wrlong	local04, objptr
0b17c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b17c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b17c     03 2C 66 F0 | 	shl	local04, #3
0b180     02 00 00 FF 
0b184     38 E4 85 F1 | 	sub	objptr, ##1080
0b188     F2 2C 02 F1 | 	add	local04, objptr
0b18c     04 2C 06 F1 | 	add	local04, #4
0b190     16 37 02 FB | 	rdlong	local09, local04
0b194     15 36 0E F2 | 	cmp	local09, #21 wz
0b198     35 00 00 FF 
0b19c     0C E4 85 F1 | 	sub	objptr, ##27148
0b1a0     44 00 90 5D |  if_ne	jmp	#LR__0934
0b1a4     37 00 00 FF 
0b1a8     44 E4 05 F1 | 	add	objptr, ##28228
0b1ac     F2 36 02 FB | 	rdlong	local09, objptr
0b1b0     01 36 06 F1 | 	add	local09, #1
0b1b4     F2 36 62 FC | 	wrlong	local09, objptr
0b1b8     37 00 00 FF 
0b1bc     44 E4 85 F1 | 	sub	objptr, ##28228
0b1c0     AC 01 B0 FD | 	call	#_expr
0b1c4     FD 38 02 F6 | 	mov	local10, result1
0b1c8     37 00 00 FF 
0b1cc     44 E4 05 F1 | 	add	objptr, ##28228
0b1d0     F2 36 02 FB | 	rdlong	local09, objptr
0b1d4     01 36 06 F1 | 	add	local09, #1
0b1d8     F2 36 62 FC | 	wrlong	local09, objptr
0b1dc     37 00 00 FF 
0b1e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b1e4     08 00 90 FD | 	jmp	#LR__0935
0b1e8                 | LR__0934
0b1e8     84 01 B0 FD | 	call	#_expr
0b1ec     FD 38 02 F6 | 	mov	local10, result1
0b1f0                 | LR__0935
0b1f0                 | '     if err>0 then return err
0b1f0     01 38 56 F2 | 	cmps	local10, #1 wc
0b1f4     1C FB 01 36 |  if_ae	mov	result1, local10
0b1f8     68 01 90 3D |  if_ae	jmp	#LR__0938
0b1fc     01 34 06 F1 | 	add	local08, #1
0b200     37 00 00 FF 
0b204     44 E4 05 F1 | 	add	objptr, ##28228
0b208     F2 2C 02 FB | 	rdlong	local04, objptr
0b20c     03 2C 66 F0 | 	shl	local04, #3
0b210     02 00 00 FF 
0b214     38 E4 85 F1 | 	sub	objptr, ##1080
0b218     F2 2C 02 F1 | 	add	local04, objptr
0b21c     04 2C 06 F1 | 	add	local04, #4
0b220     16 39 02 FB | 	rdlong	local10, local04
0b224     14 38 0E F2 | 	cmp	local10, #20 wz
0b228     35 00 00 FF 
0b22c     0C E4 85 F1 | 	sub	objptr, ##27148
0b230     34 00 90 AD |  if_e	jmp	#LR__0936
0b234     37 00 00 FF 
0b238     44 E4 05 F1 | 	add	objptr, ##28228
0b23c     F2 38 02 FB | 	rdlong	local10, objptr
0b240     03 38 66 F0 | 	shl	local10, #3
0b244     02 00 00 FF 
0b248     38 E4 85 F1 | 	sub	objptr, ##1080
0b24c     F2 38 02 F1 | 	add	local10, objptr
0b250     04 38 06 F1 | 	add	local10, #4
0b254     1C 39 02 FB | 	rdlong	local10, local10
0b258     FE 39 0E F2 | 	cmp	local10, #510 wz
0b25c     35 00 00 FF 
0b260     0C E4 85 F1 | 	sub	objptr, ##27148
0b264     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0b268                 | LR__0936
0b268                 | '     if lparts(ct).token=token_end then return 14
0b268     37 00 00 FF 
0b26c     44 E4 05 F1 | 	add	objptr, ##28228
0b270     F2 2C 02 FB | 	rdlong	local04, objptr
0b274     03 2C 66 F0 | 	shl	local04, #3
0b278     02 00 00 FF 
0b27c     38 E4 85 F1 | 	sub	objptr, ##1080
0b280     F2 2C 02 F1 | 	add	local04, objptr
0b284     04 2C 06 F1 | 	add	local04, #4
0b288     16 39 02 FB | 	rdlong	local10, local04
0b28c     FE 39 0E F2 | 	cmp	local10, #510 wz
0b290     35 00 00 FF 
0b294     0C E4 85 F1 | 	sub	objptr, ##27148
0b298     0E FA 05 A6 |  if_e	mov	result1, #14
0b29c     C4 00 90 AD |  if_e	jmp	#LR__0938
0b2a0                 | LR__0937
0b2a0     1A 29 02 F6 | 	mov	local02, local08
0b2a4     12 2A 06 F6 | 	mov	local03, #18
0b2a8     18 27 02 F6 | 	mov	local01, local06
0b2ac     13 37 02 F6 | 	mov	local09, local01
0b2b0     14 3B 02 F6 | 	mov	local11, local02
0b2b4     15 27 02 F6 | 	mov	local01, local03
0b2b8     4A 00 00 FF 
0b2bc     7C E4 05 F1 | 	add	objptr, ##38012
0b2c0     F2 38 02 FB | 	rdlong	local10, objptr
0b2c4     1C 35 02 F6 | 	mov	local08, local10
0b2c8     01 34 66 F0 | 	shl	local08, #1
0b2cc     1C 35 02 F1 | 	add	local08, local10
0b2d0     02 34 66 F0 | 	shl	local08, #2
0b2d4     03 00 00 FF 
0b2d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2dc     F2 34 02 F1 | 	add	local08, objptr
0b2e0     1A 37 62 FC | 	wrlong	local09, local08
0b2e4     03 00 00 FF 
0b2e8     00 E4 05 F1 | 	add	objptr, ##1536
0b2ec     F2 38 02 FB | 	rdlong	local10, objptr
0b2f0     1C 37 02 F6 | 	mov	local09, local10
0b2f4     01 36 66 F0 | 	shl	local09, #1
0b2f8     1C 37 02 F1 | 	add	local09, local10
0b2fc     02 36 66 F0 | 	shl	local09, #2
0b300     03 00 00 FF 
0b304     00 E4 85 F1 | 	sub	objptr, ##1536
0b308     F2 36 02 F1 | 	add	local09, objptr
0b30c     04 36 06 F1 | 	add	local09, #4
0b310     1B 3B 62 FC | 	wrlong	local11, local09
0b314     03 00 00 FF 
0b318     00 E4 05 F1 | 	add	objptr, ##1536
0b31c     F2 3A 02 FB | 	rdlong	local11, objptr
0b320     1D 39 02 F6 | 	mov	local10, local11
0b324     01 38 66 F0 | 	shl	local10, #1
0b328     1D 39 02 F1 | 	add	local10, local11
0b32c     02 38 66 F0 | 	shl	local10, #2
0b330     03 00 00 FF 
0b334     00 E4 85 F1 | 	sub	objptr, ##1536
0b338     F2 38 02 F1 | 	add	local10, objptr
0b33c     08 38 06 F1 | 	add	local10, #8
0b340     1C 27 62 FC | 	wrlong	local01, local10
0b344     03 00 00 FF 
0b348     00 E4 05 F1 | 	add	objptr, ##1536
0b34c     F2 36 02 FB | 	rdlong	local09, objptr
0b350     01 36 06 F1 | 	add	local09, #1
0b354     F2 36 62 FC | 	wrlong	local09, objptr
0b358     4A 00 00 FF 
0b35c     7C E4 85 F1 | 	sub	objptr, ##38012
0b360                 | ' t2.result.twowords(1)=numpar
0b360                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b360                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b360                 | ' return 0
0b360     00 FA 05 F6 | 	mov	result1, #0
0b364                 | LR__0938
0b364     A7 F0 03 F6 | 	mov	ptra, fp
0b368     B2 00 A0 FD | 	call	#popregs_
0b36c                 | _getaddr_ret
0b36c     2D 00 64 FD | 	ret
0b370                 | 
0b370                 | ' 
0b370                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '--------------------------------------------- 
0b370                 | ' 
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' 
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' '
0b370                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b370                 | ' '
0b370                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b370                 | ' 
0b370                 | ' function expr() as ulong 
0b370                 | _expr
0b370     07 4A 05 F6 | 	mov	COUNT_, #7
0b374     A8 00 A0 FD | 	call	#pushregs_
0b378                 | _expr_enter
0b378     37 00 00 FF 
0b37c     44 E4 05 F1 | 	add	objptr, ##28228
0b380     F2 2C 02 FB | 	rdlong	local04, objptr
0b384     03 2C 66 F0 | 	shl	local04, #3
0b388     02 00 00 FF 
0b38c     38 E4 85 F1 | 	sub	objptr, ##1080
0b390     F2 2C 02 F1 | 	add	local04, objptr
0b394     04 2C 06 F1 | 	add	local04, #4
0b398     16 2F 02 FB | 	rdlong	local05, local04
0b39c                 | ' 
0b39c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b39c     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b3a0     35 00 00 FF 
0b3a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b3a8     C4 00 90 5D |  if_ne	jmp	#LR__0940
0b3ac     1D 26 06 F6 | 	mov	local01, #29
0b3b0     FF 2A 06 F6 | 	mov	local03, #255
0b3b4     13 31 02 F6 | 	mov	local06, local01
0b3b8     14 33 02 F6 | 	mov	local07, local02
0b3bc     15 27 02 F6 | 	mov	local01, local03
0b3c0     4A 00 00 FF 
0b3c4     7C E4 05 F1 | 	add	objptr, ##38012
0b3c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b3cc     17 2D 02 F6 | 	mov	local04, local05
0b3d0     01 2C 66 F0 | 	shl	local04, #1
0b3d4     17 2D 02 F1 | 	add	local04, local05
0b3d8     02 2C 66 F0 | 	shl	local04, #2
0b3dc     03 00 00 FF 
0b3e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e4     F2 2C 02 F1 | 	add	local04, objptr
0b3e8     16 31 62 FC | 	wrlong	local06, local04
0b3ec     03 00 00 FF 
0b3f0     00 E4 05 F1 | 	add	objptr, ##1536
0b3f4     F2 30 02 FB | 	rdlong	local06, objptr
0b3f8     18 2F 02 F6 | 	mov	local05, local06
0b3fc     01 2E 66 F0 | 	shl	local05, #1
0b400     18 2F 02 F1 | 	add	local05, local06
0b404     02 2E 66 F0 | 	shl	local05, #2
0b408     03 00 00 FF 
0b40c     00 E4 85 F1 | 	sub	objptr, ##1536
0b410     F2 2E 02 F1 | 	add	local05, objptr
0b414     04 2E 06 F1 | 	add	local05, #4
0b418     17 33 62 FC | 	wrlong	local07, local05
0b41c     03 00 00 FF 
0b420     00 E4 05 F1 | 	add	objptr, ##1536
0b424     F2 32 02 FB | 	rdlong	local07, objptr
0b428     19 31 02 F6 | 	mov	local06, local07
0b42c     01 30 66 F0 | 	shl	local06, #1
0b430     19 31 02 F1 | 	add	local06, local07
0b434     02 30 66 F0 | 	shl	local06, #2
0b438     03 00 00 FF 
0b43c     00 E4 85 F1 | 	sub	objptr, ##1536
0b440     F2 30 02 F1 | 	add	local06, objptr
0b444     08 30 06 F1 | 	add	local06, #8
0b448     18 27 62 FC | 	wrlong	local01, local06
0b44c     03 00 00 FF 
0b450     00 E4 05 F1 | 	add	objptr, ##1536
0b454     F2 30 02 FB | 	rdlong	local06, objptr
0b458     01 30 06 F1 | 	add	local06, #1
0b45c     F2 30 62 FC | 	wrlong	local06, objptr
0b460     4A 00 00 FF 
0b464     7C E4 85 F1 | 	sub	objptr, ##38012
0b468     1D FA 05 F6 | 	mov	result1, #29
0b46c     64 01 90 FD | 	jmp	#LR__0943
0b470                 | LR__0940
0b470     00 26 06 F6 | 	mov	local01, #0
0b474     68 01 B0 FD | 	call	#_addsub
0b478                 | ' t3.result.uresult=0
0b478                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b478                 | ' if err>0 then return err
0b478     01 FA 15 F2 | 	cmp	result1, #1 wc
0b47c     54 01 90 3D |  if_ae	jmp	#LR__0943
0b480     37 00 00 FF 
0b484     44 E4 05 F1 | 	add	objptr, ##28228
0b488     F2 2C 02 FB | 	rdlong	local04, objptr
0b48c     03 2C 66 F0 | 	shl	local04, #3
0b490     02 00 00 FF 
0b494     38 E4 85 F1 | 	sub	objptr, ##1080
0b498     F2 2C 02 F1 | 	add	local04, objptr
0b49c     04 2C 06 F1 | 	add	local04, #4
0b4a0     16 2F 02 FB | 	rdlong	local05, local04
0b4a4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b4a4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b4a4     35 00 00 FF 
0b4a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b4ac                 | LR__0941
0b4ac     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b4b0     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b4b4     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b4b8     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b4bc     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b4c0     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b4c4     08 01 90 5D |  if_ne	jmp	#LR__0942
0b4c8     37 00 00 FF 
0b4cc     44 E4 05 F1 | 	add	objptr, ##28228
0b4d0     F2 30 02 FB | 	rdlong	local06, objptr
0b4d4     01 30 06 F1 | 	add	local06, #1
0b4d8     F2 30 62 FC | 	wrlong	local06, objptr
0b4dc     37 00 00 FF 
0b4e0     44 E4 85 F1 | 	sub	objptr, ##28228
0b4e4     F8 00 B0 FD | 	call	#_addsub
0b4e8                 | '   ct+=1
0b4e8                 | '   err=addsub() : if err>0 then return err
0b4e8     01 FA 15 F2 | 	cmp	result1, #1 wc
0b4ec     E4 00 90 3D |  if_ae	jmp	#LR__0943
0b4f0     17 2B 02 F6 | 	mov	local03, local05
0b4f4     13 31 02 F6 | 	mov	local06, local01
0b4f8     14 33 02 F6 | 	mov	local07, local02
0b4fc     15 2F 02 F6 | 	mov	local05, local03
0b500     4A 00 00 FF 
0b504     7C E4 05 F1 | 	add	objptr, ##38012
0b508     F2 2C 02 FB | 	rdlong	local04, objptr
0b50c     16 FB 01 F6 | 	mov	result1, local04
0b510     01 FA 65 F0 | 	shl	result1, #1
0b514     16 FB 01 F1 | 	add	result1, local04
0b518     02 FA 65 F0 | 	shl	result1, #2
0b51c     03 00 00 FF 
0b520     00 E4 85 F1 | 	sub	objptr, ##1536
0b524     F2 FA 01 F1 | 	add	result1, objptr
0b528     FD 30 62 FC | 	wrlong	local06, result1
0b52c     03 00 00 FF 
0b530     00 E4 05 F1 | 	add	objptr, ##1536
0b534     F2 30 02 FB | 	rdlong	local06, objptr
0b538     18 2D 02 F6 | 	mov	local04, local06
0b53c     01 2C 66 F0 | 	shl	local04, #1
0b540     18 2D 02 F1 | 	add	local04, local06
0b544     02 2C 66 F0 | 	shl	local04, #2
0b548     03 00 00 FF 
0b54c     00 E4 85 F1 | 	sub	objptr, ##1536
0b550     F2 2C 02 F1 | 	add	local04, objptr
0b554     04 2C 06 F1 | 	add	local04, #4
0b558     16 33 62 FC | 	wrlong	local07, local04
0b55c     03 00 00 FF 
0b560     00 E4 05 F1 | 	add	objptr, ##1536
0b564     F2 32 02 FB | 	rdlong	local07, objptr
0b568     19 31 02 F6 | 	mov	local06, local07
0b56c     01 30 66 F0 | 	shl	local06, #1
0b570     19 31 02 F1 | 	add	local06, local07
0b574     02 30 66 F0 | 	shl	local06, #2
0b578     03 00 00 FF 
0b57c     00 E4 85 F1 | 	sub	objptr, ##1536
0b580     F2 30 02 F1 | 	add	local06, objptr
0b584     08 30 06 F1 | 	add	local06, #8
0b588     18 2F 62 FC | 	wrlong	local05, local06
0b58c     03 00 00 FF 
0b590     00 E4 05 F1 | 	add	objptr, ##1536
0b594     F2 30 02 FB | 	rdlong	local06, objptr
0b598     01 30 06 F1 | 	add	local06, #1
0b59c     F2 30 62 FC | 	wrlong	local06, objptr
0b5a0     13 00 00 FF 
0b5a4     38 E4 85 F1 | 	sub	objptr, ##9784
0b5a8     F2 2C 02 FB | 	rdlong	local04, objptr
0b5ac     03 2C 66 F0 | 	shl	local04, #3
0b5b0     02 00 00 FF 
0b5b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b5b8     F2 2C 02 F1 | 	add	local04, objptr
0b5bc     04 2C 06 F1 | 	add	local04, #4
0b5c0     16 2F 02 FB | 	rdlong	local05, local04
0b5c4     35 00 00 FF 
0b5c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b5cc     DC FE 9F FD | 	jmp	#LR__0941
0b5d0                 | LR__0942
0b5d0                 | ' return 0  
0b5d0     00 FA 05 F6 | 	mov	result1, #0
0b5d4                 | LR__0943
0b5d4     A7 F0 03 F6 | 	mov	ptra, fp
0b5d8     B2 00 A0 FD | 	call	#popregs_
0b5dc                 | _expr_ret
0b5dc     2D 00 64 FD | 	ret
0b5e0                 | 
0b5e0                 | ' 
0b5e0                 | ' ' Second level operators : add, sub, logic
0b5e0                 | ' 
0b5e0                 | ' function addsub() as ulong
0b5e0                 | _addsub
0b5e0     07 4A 05 F6 | 	mov	COUNT_, #7
0b5e4     A8 00 A0 FD | 	call	#pushregs_
0b5e8                 | _addsub_enter
0b5e8     00 26 06 F6 | 	mov	local01, #0
0b5ec     60 01 B0 FD | 	call	#_muldiv
0b5f0                 | ' 
0b5f0                 | ' t3.result.uresult=0
0b5f0                 | ' err=muldiv() : if err>0 then return err           			 
0b5f0     01 FA 15 F2 | 	cmp	result1, #1 wc
0b5f4     4C 01 90 3D |  if_ae	jmp	#LR__0952
0b5f8     37 00 00 FF 
0b5fc     44 E4 05 F1 | 	add	objptr, ##28228
0b600     F2 2C 02 FB | 	rdlong	local04, objptr
0b604     03 2C 66 F0 | 	shl	local04, #3
0b608     02 00 00 FF 
0b60c     38 E4 85 F1 | 	sub	objptr, ##1080
0b610     F2 2C 02 F1 | 	add	local04, objptr
0b614     04 2C 06 F1 | 	add	local04, #4
0b618     16 2F 02 FB | 	rdlong	local05, local04
0b61c                 | ' op = lparts(ct).token				 
0b61c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b61c     35 00 00 FF 
0b620     0C E4 85 F1 | 	sub	objptr, ##27148
0b624                 | LR__0950
0b624     01 2E 0E F2 | 	cmp	local05, #1 wz
0b628     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b62c     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b630     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b634     08 01 90 5D |  if_ne	jmp	#LR__0951
0b638     37 00 00 FF 
0b63c     44 E4 05 F1 | 	add	objptr, ##28228
0b640     F2 2C 02 FB | 	rdlong	local04, objptr
0b644     01 2C 06 F1 | 	add	local04, #1
0b648     F2 2C 62 FC | 	wrlong	local04, objptr
0b64c     37 00 00 FF 
0b650     44 E4 85 F1 | 	sub	objptr, ##28228
0b654     F8 00 B0 FD | 	call	#_muldiv
0b658                 | '   ct+=1
0b658                 | '   err=muldiv() : if err>0 then return err   
0b658     01 FA 15 F2 | 	cmp	result1, #1 wc
0b65c     E4 00 90 3D |  if_ae	jmp	#LR__0952
0b660     17 2B 02 F6 | 	mov	local03, local05
0b664     13 31 02 F6 | 	mov	local06, local01
0b668     14 33 02 F6 | 	mov	local07, local02
0b66c     15 2F 02 F6 | 	mov	local05, local03
0b670     4A 00 00 FF 
0b674     7C E4 05 F1 | 	add	objptr, ##38012
0b678     F2 2C 02 FB | 	rdlong	local04, objptr
0b67c     16 FB 01 F6 | 	mov	result1, local04
0b680     01 FA 65 F0 | 	shl	result1, #1
0b684     16 FB 01 F1 | 	add	result1, local04
0b688     02 FA 65 F0 | 	shl	result1, #2
0b68c     03 00 00 FF 
0b690     00 E4 85 F1 | 	sub	objptr, ##1536
0b694     F2 FA 01 F1 | 	add	result1, objptr
0b698     FD 30 62 FC | 	wrlong	local06, result1
0b69c     03 00 00 FF 
0b6a0     00 E4 05 F1 | 	add	objptr, ##1536
0b6a4     F2 30 02 FB | 	rdlong	local06, objptr
0b6a8     18 2D 02 F6 | 	mov	local04, local06
0b6ac     01 2C 66 F0 | 	shl	local04, #1
0b6b0     18 2D 02 F1 | 	add	local04, local06
0b6b4     02 2C 66 F0 | 	shl	local04, #2
0b6b8     03 00 00 FF 
0b6bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b6c0     F2 2C 02 F1 | 	add	local04, objptr
0b6c4     04 2C 06 F1 | 	add	local04, #4
0b6c8     16 33 62 FC | 	wrlong	local07, local04
0b6cc     03 00 00 FF 
0b6d0     00 E4 05 F1 | 	add	objptr, ##1536
0b6d4     F2 32 02 FB | 	rdlong	local07, objptr
0b6d8     19 31 02 F6 | 	mov	local06, local07
0b6dc     01 30 66 F0 | 	shl	local06, #1
0b6e0     19 31 02 F1 | 	add	local06, local07
0b6e4     02 30 66 F0 | 	shl	local06, #2
0b6e8     03 00 00 FF 
0b6ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b6f0     F2 30 02 F1 | 	add	local06, objptr
0b6f4     08 30 06 F1 | 	add	local06, #8
0b6f8     18 2F 62 FC | 	wrlong	local05, local06
0b6fc     03 00 00 FF 
0b700     00 E4 05 F1 | 	add	objptr, ##1536
0b704     F2 30 02 FB | 	rdlong	local06, objptr
0b708     01 30 06 F1 | 	add	local06, #1
0b70c     F2 30 62 FC | 	wrlong	local06, objptr
0b710     13 00 00 FF 
0b714     38 E4 85 F1 | 	sub	objptr, ##9784
0b718     F2 2C 02 FB | 	rdlong	local04, objptr
0b71c     03 2C 66 F0 | 	shl	local04, #3
0b720     02 00 00 FF 
0b724     38 E4 85 F1 | 	sub	objptr, ##1080
0b728     F2 2C 02 F1 | 	add	local04, objptr
0b72c     04 2C 06 F1 | 	add	local04, #4
0b730     16 2F 02 FB | 	rdlong	local05, local04
0b734     35 00 00 FF 
0b738     0C E4 85 F1 | 	sub	objptr, ##27148
0b73c     E4 FE 9F FD | 	jmp	#LR__0950
0b740                 | LR__0951
0b740                 | ' return 0
0b740     00 FA 05 F6 | 	mov	result1, #0
0b744                 | LR__0952
0b744     A7 F0 03 F6 | 	mov	ptra, fp
0b748     B2 00 A0 FD | 	call	#popregs_
0b74c                 | _addsub_ret
0b74c     2D 00 64 FD | 	ret
0b750                 | 
0b750                 | ' 
0b750                 | ' ' Third level operators : mul,div,shift,power
0b750                 | ' 
0b750                 | ' function muldiv() as ulong
0b750                 | _muldiv
0b750     07 4A 05 F6 | 	mov	COUNT_, #7
0b754     A8 00 A0 FD | 	call	#pushregs_
0b758                 | _muldiv_enter
0b758     00 26 06 F6 | 	mov	local01, #0
0b75c     6C 01 B0 FD | 	call	#_getvalue
0b760                 | ' 
0b760                 | ' t3.result.uresult=0
0b760                 | ' err=getvalue() : if err>0 then return err     
0b760     01 FA 15 F2 | 	cmp	result1, #1 wc
0b764     58 01 90 3D |  if_ae	jmp	#LR__0962
0b768     37 00 00 FF 
0b76c     44 E4 05 F1 | 	add	objptr, ##28228
0b770     F2 2C 02 FB | 	rdlong	local04, objptr
0b774     03 2C 66 F0 | 	shl	local04, #3
0b778     02 00 00 FF 
0b77c     38 E4 85 F1 | 	sub	objptr, ##1080
0b780     F2 2C 02 F1 | 	add	local04, objptr
0b784     04 2C 06 F1 | 	add	local04, #4
0b788     16 2F 02 FB | 	rdlong	local05, local04
0b78c                 | ' op = lparts(ct).token
0b78c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b78c     35 00 00 FF 
0b790     0C E4 85 F1 | 	sub	objptr, ##27148
0b794                 | LR__0960
0b794     05 2E 0E F2 | 	cmp	local05, #5 wz
0b798     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b79c     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b7a0     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b7a4     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b7a8     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b7ac     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b7b0     08 01 90 5D |  if_ne	jmp	#LR__0961
0b7b4     37 00 00 FF 
0b7b8     44 E4 05 F1 | 	add	objptr, ##28228
0b7bc     F2 2C 02 FB | 	rdlong	local04, objptr
0b7c0     01 2C 06 F1 | 	add	local04, #1
0b7c4     F2 2C 62 FC | 	wrlong	local04, objptr
0b7c8     37 00 00 FF 
0b7cc     44 E4 85 F1 | 	sub	objptr, ##28228
0b7d0     F8 00 B0 FD | 	call	#_getvalue
0b7d4                 | '   ct+=1
0b7d4                 | '   err=getvalue() :if err>0 then return err   
0b7d4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b7d8     E4 00 90 3D |  if_ae	jmp	#LR__0962
0b7dc     17 2B 02 F6 | 	mov	local03, local05
0b7e0     13 31 02 F6 | 	mov	local06, local01
0b7e4     14 33 02 F6 | 	mov	local07, local02
0b7e8     15 2F 02 F6 | 	mov	local05, local03
0b7ec     4A 00 00 FF 
0b7f0     7C E4 05 F1 | 	add	objptr, ##38012
0b7f4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7f8     16 FB 01 F6 | 	mov	result1, local04
0b7fc     01 FA 65 F0 | 	shl	result1, #1
0b800     16 FB 01 F1 | 	add	result1, local04
0b804     02 FA 65 F0 | 	shl	result1, #2
0b808     03 00 00 FF 
0b80c     00 E4 85 F1 | 	sub	objptr, ##1536
0b810     F2 FA 01 F1 | 	add	result1, objptr
0b814     FD 30 62 FC | 	wrlong	local06, result1
0b818     03 00 00 FF 
0b81c     00 E4 05 F1 | 	add	objptr, ##1536
0b820     F2 30 02 FB | 	rdlong	local06, objptr
0b824     18 2D 02 F6 | 	mov	local04, local06
0b828     01 2C 66 F0 | 	shl	local04, #1
0b82c     18 2D 02 F1 | 	add	local04, local06
0b830     02 2C 66 F0 | 	shl	local04, #2
0b834     03 00 00 FF 
0b838     00 E4 85 F1 | 	sub	objptr, ##1536
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     04 2C 06 F1 | 	add	local04, #4
0b844     16 33 62 FC | 	wrlong	local07, local04
0b848     03 00 00 FF 
0b84c     00 E4 05 F1 | 	add	objptr, ##1536
0b850     F2 32 02 FB | 	rdlong	local07, objptr
0b854     19 31 02 F6 | 	mov	local06, local07
0b858     01 30 66 F0 | 	shl	local06, #1
0b85c     19 31 02 F1 | 	add	local06, local07
0b860     02 30 66 F0 | 	shl	local06, #2
0b864     03 00 00 FF 
0b868     00 E4 85 F1 | 	sub	objptr, ##1536
0b86c     F2 30 02 F1 | 	add	local06, objptr
0b870     08 30 06 F1 | 	add	local06, #8
0b874     18 2F 62 FC | 	wrlong	local05, local06
0b878     03 00 00 FF 
0b87c     00 E4 05 F1 | 	add	objptr, ##1536
0b880     F2 30 02 FB | 	rdlong	local06, objptr
0b884     01 30 06 F1 | 	add	local06, #1
0b888     F2 30 62 FC | 	wrlong	local06, objptr
0b88c     13 00 00 FF 
0b890     38 E4 85 F1 | 	sub	objptr, ##9784
0b894     F2 2C 02 FB | 	rdlong	local04, objptr
0b898     03 2C 66 F0 | 	shl	local04, #3
0b89c     02 00 00 FF 
0b8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0b8a4     F2 2C 02 F1 | 	add	local04, objptr
0b8a8     04 2C 06 F1 | 	add	local04, #4
0b8ac     16 2F 02 FB | 	rdlong	local05, local04
0b8b0     35 00 00 FF 
0b8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b8b8     D8 FE 9F FD | 	jmp	#LR__0960
0b8bc                 | LR__0961
0b8bc                 | ' return 0
0b8bc     00 FA 05 F6 | 	mov	result1, #0
0b8c0                 | LR__0962
0b8c0     A7 F0 03 F6 | 	mov	ptra, fp
0b8c4     B2 00 A0 FD | 	call	#popregs_
0b8c8                 | _muldiv_ret
0b8c8     2D 00 64 FD | 	ret
0b8cc                 | 
0b8cc                 | ' 
0b8cc                 | ' ' Get a value for operations
0b8cc                 | ' 
0b8cc                 | ' function getvalue()  as ulong
0b8cc                 | _getvalue
0b8cc     0B 4A 05 F6 | 	mov	COUNT_, #11
0b8d0     A8 00 A0 FD | 	call	#pushregs_
0b8d4                 | _getvalue_enter
0b8d4     01 2C 06 F6 | 	mov	local04, #1
0b8d8     00 26 06 F6 | 	mov	local01, #0
0b8dc     1D 2A 06 F6 | 	mov	local03, #29
0b8e0     37 00 00 FF 
0b8e4     44 E4 05 F1 | 	add	objptr, ##28228
0b8e8     F2 16 02 FB | 	rdlong	arg03, objptr
0b8ec     03 16 66 F0 | 	shl	arg03, #3
0b8f0     02 00 00 FF 
0b8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b8f8     F2 16 02 F1 | 	add	arg03, objptr
0b8fc     04 16 06 F1 | 	add	arg03, #4
0b900     0B 2F 02 FB | 	rdlong	local05, arg03
0b904                 | ' 
0b904                 | ' m=1											' for negative numbers
0b904                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b904                 | ' op=lparts(ct).token
0b904                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b904     02 2E 0E F2 | 	cmp	local05, #2 wz
0b908     35 00 00 FF 
0b90c     0C E4 85 F1 | 	sub	objptr, ##27148
0b910     38 00 90 5D |  if_ne	jmp	#LR__0970
0b914     01 2C 66 F6 | 	neg	local04, #1
0b918     37 00 00 FF 
0b91c     44 E4 05 F1 | 	add	objptr, ##28228
0b920     F2 2E 02 FB | 	rdlong	local05, objptr
0b924     01 2E 06 F1 | 	add	local05, #1
0b928     F2 2E 62 FC | 	wrlong	local05, objptr
0b92c     03 2E 66 F0 | 	shl	local05, #3
0b930     02 00 00 FF 
0b934     38 E4 85 F1 | 	sub	objptr, ##1080
0b938     F2 2E 02 F1 | 	add	local05, objptr
0b93c     04 2E 06 F1 | 	add	local05, #4
0b940     17 2F 02 FB | 	rdlong	local05, local05
0b944     35 00 00 FF 
0b948     0C E4 85 F1 | 	sub	objptr, ##27148
0b94c                 | LR__0970
0b94c                 | ' select case op
0b94c     01 00 00 FF 
0b950     00 2E 0E F2 | 	cmp	local05, ##512 wz
0b954     44 00 90 AD |  if_e	jmp	#LR__0971
0b958     01 00 00 FF 
0b95c     01 2E 0E F2 | 	cmp	local05, ##513 wz
0b960     90 01 90 AD |  if_e	jmp	#LR__0974
0b964     01 00 00 FF 
0b968     02 2E 0E F2 | 	cmp	local05, ##514 wz
0b96c     44 04 90 AD |  if_e	jmp	#LR__0981
0b970     01 00 00 FF 
0b974     03 2E 0E F2 | 	cmp	local05, ##515 wz
0b978     A8 05 90 AD |  if_e	jmp	#LR__0984
0b97c     2C 2E 0E F2 | 	cmp	local05, #44 wz
0b980     78 07 90 AD |  if_e	jmp	#LR__0989
0b984     01 00 00 FF 
0b988     04 2E 0E F2 | 	cmp	local05, ##516 wz
0b98c     70 08 90 AD |  if_e	jmp	#LR__0990
0b990     15 2E 0E F2 | 	cmp	local05, #21 wz
0b994     98 08 90 AD |  if_e	jmp	#LR__0991
0b998     10 09 90 FD | 	jmp	#LR__0992
0b99c                 | LR__0971
0b99c                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0b99c     01 2C 0E F2 | 	cmp	local04, #1 wz
0b9a0     3C 00 90 5D |  if_ne	jmp	#LR__0972
0b9a4     37 00 00 FF 
0b9a8     44 E4 05 F1 | 	add	objptr, ##28228
0b9ac     F2 2E 02 FB | 	rdlong	local05, objptr
0b9b0     03 2E 66 F0 | 	shl	local05, #3
0b9b4     02 00 00 FF 
0b9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0b9bc     F2 2E 02 F1 | 	add	local05, objptr
0b9c0     17 13 02 FB | 	rdlong	arg01, local05
0b9c4     00 14 06 F6 | 	mov	arg02, #0
0b9c8     35 00 00 FF 
0b9cc     0C E4 85 F1 | 	sub	objptr, ##27148
0b9d0     30 BA B1 FD | 	call	#__system____builtin_atoi
0b9d4     FD 2C 02 FD | 	qmul	local04, result1
0b9d8     18 26 62 FD | 	getqx	local01
0b9dc     1C 2A 06 F6 | 	mov	local03, #28
0b9e0                 | LR__0972
0b9e0                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0b9e0     FF FF 7F FF 
0b9e4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b9e8     3C 00 90 5D |  if_ne	jmp	#LR__0973
0b9ec     37 00 00 FF 
0b9f0     44 E4 05 F1 | 	add	objptr, ##28228
0b9f4     F2 2E 02 FB | 	rdlong	local05, objptr
0b9f8     03 2E 66 F0 | 	shl	local05, #3
0b9fc     02 00 00 FF 
0ba00     38 E4 85 F1 | 	sub	objptr, ##1080
0ba04     F2 2E 02 F1 | 	add	local05, objptr
0ba08     17 13 02 FB | 	rdlong	arg01, local05
0ba0c     00 14 06 F6 | 	mov	arg02, #0
0ba10     35 00 00 FF 
0ba14     0C E4 85 F1 | 	sub	objptr, ##27148
0ba18     E8 B9 B1 FD | 	call	#__system____builtin_atoi
0ba1c     FD 2C 02 FD | 	qmul	local04, result1
0ba20     18 26 62 FD | 	getqx	local01
0ba24     1C 2A 06 F6 | 	mov	local03, #28
0ba28                 | LR__0973
0ba28     13 31 02 F6 | 	mov	local06, local01
0ba2c     14 33 02 F6 | 	mov	local07, local02
0ba30     15 2F 02 F6 | 	mov	local05, local03
0ba34     4A 00 00 FF 
0ba38     7C E4 05 F1 | 	add	objptr, ##38012
0ba3c     F2 26 02 FB | 	rdlong	local01, objptr
0ba40     13 2D 02 F6 | 	mov	local04, local01
0ba44     01 2C 66 F0 | 	shl	local04, #1
0ba48     13 2D 02 F1 | 	add	local04, local01
0ba4c     02 2C 66 F0 | 	shl	local04, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 2C 02 F1 | 	add	local04, objptr
0ba5c     16 31 62 FC | 	wrlong	local06, local04
0ba60     03 00 00 FF 
0ba64     00 E4 05 F1 | 	add	objptr, ##1536
0ba68     F2 30 02 FB | 	rdlong	local06, objptr
0ba6c     18 27 02 F6 | 	mov	local01, local06
0ba70     01 26 66 F0 | 	shl	local01, #1
0ba74     18 27 02 F1 | 	add	local01, local06
0ba78     02 26 66 F0 | 	shl	local01, #2
0ba7c     03 00 00 FF 
0ba80     00 E4 85 F1 | 	sub	objptr, ##1536
0ba84     F2 26 02 F1 | 	add	local01, objptr
0ba88     04 26 06 F1 | 	add	local01, #4
0ba8c     13 33 62 FC | 	wrlong	local07, local01
0ba90     03 00 00 FF 
0ba94     00 E4 05 F1 | 	add	objptr, ##1536
0ba98     F2 32 02 FB | 	rdlong	local07, objptr
0ba9c     19 31 02 F6 | 	mov	local06, local07
0baa0     01 30 66 F0 | 	shl	local06, #1
0baa4     19 31 02 F1 | 	add	local06, local07
0baa8     02 30 66 F0 | 	shl	local06, #2
0baac     03 00 00 FF 
0bab0     00 E4 85 F1 | 	sub	objptr, ##1536
0bab4     F2 30 02 F1 | 	add	local06, objptr
0bab8     08 30 06 F1 | 	add	local06, #8
0babc     18 2F 62 FC | 	wrlong	local05, local06
0bac0     03 00 00 FF 
0bac4     00 E4 05 F1 | 	add	objptr, ##1536
0bac8     F2 30 02 FB | 	rdlong	local06, objptr
0bacc     01 30 06 F1 | 	add	local06, #1
0bad0     F2 30 62 FC | 	wrlong	local06, objptr
0bad4     13 00 00 FF 
0bad8     38 E4 85 F1 | 	sub	objptr, ##9784
0badc     F2 30 02 FB | 	rdlong	local06, objptr
0bae0     01 30 06 F1 | 	add	local06, #1
0bae4     F2 30 62 FC | 	wrlong	local06, objptr
0bae8     37 00 00 FF 
0baec     44 E4 85 F1 | 	sub	objptr, ##28228
0baf0     E4 07 90 FD | 	jmp	#LR__0993
0baf4                 | LR__0974
0baf4                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0baf4     37 00 00 FF 
0baf8     44 E4 05 F1 | 	add	objptr, ##28228
0bafc     F2 16 02 FB | 	rdlong	arg03, objptr
0bb00     03 16 66 F0 | 	shl	arg03, #3
0bb04     02 00 00 FF 
0bb08     38 E4 85 F1 | 	sub	objptr, ##1080
0bb0c     F2 16 02 F1 | 	add	arg03, objptr
0bb10     0B 13 02 FB | 	rdlong	arg01, arg03
0bb14     01 14 06 F6 | 	mov	arg02, #1
0bb18     35 00 00 FF 
0bb1c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb20     6C A4 B1 FD | 	call	#__system__Left_S
0bb24     FD 12 02 F6 | 	mov	arg01, result1
0bb28     A0 01 00 FF 
0bb2c     44 15 06 F6 | 	mov	arg02, ##@LR__5683
0bb30     08 84 B1 FD | 	call	#__system___string_cmp
0bb34     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb38     94 00 90 5D |  if_ne	jmp	#LR__0977
0bb3c     37 00 00 FF 
0bb40     44 E4 05 F1 | 	add	objptr, ##28228
0bb44     F2 32 02 FB | 	rdlong	local07, objptr
0bb48     19 31 02 F6 | 	mov	local06, local07
0bb4c     03 30 66 F0 | 	shl	local06, #3
0bb50     02 00 00 FF 
0bb54     38 E4 85 F1 | 	sub	objptr, ##1080
0bb58     F2 30 02 F1 | 	add	local06, objptr
0bb5c     A0 01 00 FF 
0bb60     46 2F 06 F6 | 	mov	local05, ##@LR__5684
0bb64     03 32 66 F0 | 	shl	local07, #3
0bb68     F2 32 02 F1 | 	add	local07, objptr
0bb6c     19 33 02 FB | 	rdlong	local07, local07
0bb70     02 00 00 FF 
0bb74     38 E4 05 F1 | 	add	objptr, ##1080
0bb78     F2 26 02 FB | 	rdlong	local01, objptr
0bb7c     03 26 66 F0 | 	shl	local01, #3
0bb80     02 00 00 FF 
0bb84     38 E4 85 F1 | 	sub	objptr, ##1080
0bb88     F2 26 02 F1 | 	add	local01, objptr
0bb8c     13 13 02 FB | 	rdlong	arg01, local01
0bb90     35 00 00 FF 
0bb94     0C E4 85 F1 | 	sub	objptr, ##27148
0bb98     09 35 02 F6 | 	mov	local08, arg01
0bb9c     97 06 48 FB | 	callpa	#(@LR__0976-@LR__0975)>>2,fcache_load_ptr_
0bba0                 | LR__0975
0bba0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bba4     01 34 06 51 |  if_ne	add	local08, #1
0bba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0975
0bbac                 | LR__0976
0bbac     09 35 82 F1 | 	sub	local08, arg01
0bbb0     1A 15 02 F6 | 	mov	arg02, local08
0bbb4     01 14 86 F1 | 	sub	arg02, #1
0bbb8     19 13 02 F6 | 	mov	arg01, local07
0bbbc     58 A4 B1 FD | 	call	#__system__Right_S
0bbc0     FD 14 02 F6 | 	mov	arg02, result1
0bbc4     17 13 02 F6 | 	mov	arg01, local05
0bbc8     A4 83 B1 FD | 	call	#__system___string_concat
0bbcc     18 FB 61 FC | 	wrlong	result1, local06
0bbd0                 | LR__0977
0bbd0                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0bbd0     37 00 00 FF 
0bbd4     44 E4 05 F1 | 	add	objptr, ##28228
0bbd8     F2 16 02 FB | 	rdlong	arg03, objptr
0bbdc     03 16 66 F0 | 	shl	arg03, #3
0bbe0     02 00 00 FF 
0bbe4     38 E4 85 F1 | 	sub	objptr, ##1080
0bbe8     F2 16 02 F1 | 	add	arg03, objptr
0bbec     0B 13 02 FB | 	rdlong	arg01, arg03
0bbf0     01 14 06 F6 | 	mov	arg02, #1
0bbf4     35 00 00 FF 
0bbf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bbfc     90 A3 B1 FD | 	call	#__system__Left_S
0bc00     FD 12 02 F6 | 	mov	arg01, result1
0bc04     A0 01 00 FF 
0bc08     49 15 06 F6 | 	mov	arg02, ##@LR__5685
0bc0c     2C 83 B1 FD | 	call	#__system___string_cmp
0bc10     00 FA 0D F2 | 	cmp	result1, #0 wz
0bc14     94 00 90 5D |  if_ne	jmp	#LR__0980
0bc18     37 00 00 FF 
0bc1c     44 E4 05 F1 | 	add	objptr, ##28228
0bc20     F2 32 02 FB | 	rdlong	local07, objptr
0bc24     19 31 02 F6 | 	mov	local06, local07
0bc28     03 30 66 F0 | 	shl	local06, #3
0bc2c     02 00 00 FF 
0bc30     38 E4 85 F1 | 	sub	objptr, ##1080
0bc34     F2 30 02 F1 | 	add	local06, objptr
0bc38     A0 01 00 FF 
0bc3c     4B 2F 06 F6 | 	mov	local05, ##@LR__5686
0bc40     03 32 66 F0 | 	shl	local07, #3
0bc44     F2 32 02 F1 | 	add	local07, objptr
0bc48     19 33 02 FB | 	rdlong	local07, local07
0bc4c     02 00 00 FF 
0bc50     38 E4 05 F1 | 	add	objptr, ##1080
0bc54     F2 26 02 FB | 	rdlong	local01, objptr
0bc58     03 26 66 F0 | 	shl	local01, #3
0bc5c     02 00 00 FF 
0bc60     38 E4 85 F1 | 	sub	objptr, ##1080
0bc64     F2 26 02 F1 | 	add	local01, objptr
0bc68     13 13 02 FB | 	rdlong	arg01, local01
0bc6c     35 00 00 FF 
0bc70     0C E4 85 F1 | 	sub	objptr, ##27148
0bc74     09 35 02 F6 | 	mov	local08, arg01
0bc78     97 06 48 FB | 	callpa	#(@LR__0979-@LR__0978)>>2,fcache_load_ptr_
0bc7c                 | LR__0978
0bc7c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bc80     01 34 06 51 |  if_ne	add	local08, #1
0bc84     F4 FF 9F 5D |  if_ne	jmp	#LR__0978
0bc88                 | LR__0979
0bc88     09 35 82 F1 | 	sub	local08, arg01
0bc8c     1A 15 02 F6 | 	mov	arg02, local08
0bc90     01 14 86 F1 | 	sub	arg02, #1
0bc94     19 13 02 F6 | 	mov	arg01, local07
0bc98     7C A3 B1 FD | 	call	#__system__Right_S
0bc9c     FD 14 02 F6 | 	mov	arg02, result1
0bca0     17 13 02 F6 | 	mov	arg01, local05
0bca4     C8 82 B1 FD | 	call	#__system___string_concat
0bca8     18 FB 61 FC | 	wrlong	result1, local06
0bcac                 | LR__0980
0bcac     37 00 00 FF 
0bcb0     44 E4 05 F1 | 	add	objptr, ##28228
0bcb4     F2 30 02 FB | 	rdlong	local06, objptr
0bcb8     03 30 66 F0 | 	shl	local06, #3
0bcbc     02 00 00 FF 
0bcc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bcc4     F2 30 02 F1 | 	add	local06, objptr
0bcc8     18 13 02 FB | 	rdlong	arg01, local06
0bccc     00 14 06 F6 | 	mov	arg02, #0
0bcd0     35 00 00 FF 
0bcd4     0C E4 85 F1 | 	sub	objptr, ##27148
0bcd8     28 B7 B1 FD | 	call	#__system____builtin_atoi
0bcdc     FD 2C 02 FD | 	qmul	local04, result1
0bce0     4A 00 00 FF 
0bce4     7C E4 05 F1 | 	add	objptr, ##38012
0bce8     F2 30 02 FB | 	rdlong	local06, objptr
0bcec     18 37 02 F6 | 	mov	local09, local06
0bcf0     01 36 66 F0 | 	shl	local09, #1
0bcf4     18 37 02 F1 | 	add	local09, local06
0bcf8     02 36 66 F0 | 	shl	local09, #2
0bcfc     03 00 00 FF 
0bd00     00 E4 85 F1 | 	sub	objptr, ##1536
0bd04     F2 36 02 F1 | 	add	local09, objptr
0bd08     03 00 00 FF 
0bd0c     00 E4 05 F1 | 	add	objptr, ##1536
0bd10     18 26 62 FD | 	getqx	local01
0bd14     1C 2A 06 F6 | 	mov	local03, #28
0bd18     13 31 02 F6 | 	mov	local06, local01
0bd1c     14 33 02 F6 | 	mov	local07, local02
0bd20     1B 31 62 FC | 	wrlong	local06, local09
0bd24     15 37 02 F6 | 	mov	local09, local03
0bd28     F2 30 02 FB | 	rdlong	local06, objptr
0bd2c     18 2F 02 F6 | 	mov	local05, local06
0bd30     01 2E 66 F0 | 	shl	local05, #1
0bd34     18 2F 02 F1 | 	add	local05, local06
0bd38     02 2E 66 F0 | 	shl	local05, #2
0bd3c     03 00 00 FF 
0bd40     00 E4 85 F1 | 	sub	objptr, ##1536
0bd44     F2 2E 02 F1 | 	add	local05, objptr
0bd48     04 2E 06 F1 | 	add	local05, #4
0bd4c     17 33 62 FC | 	wrlong	local07, local05
0bd50     03 00 00 FF 
0bd54     00 E4 05 F1 | 	add	objptr, ##1536
0bd58     F2 32 02 FB | 	rdlong	local07, objptr
0bd5c     19 31 02 F6 | 	mov	local06, local07
0bd60     01 30 66 F0 | 	shl	local06, #1
0bd64     19 31 02 F1 | 	add	local06, local07
0bd68     02 30 66 F0 | 	shl	local06, #2
0bd6c     03 00 00 FF 
0bd70     00 E4 85 F1 | 	sub	objptr, ##1536
0bd74     F2 30 02 F1 | 	add	local06, objptr
0bd78     08 30 06 F1 | 	add	local06, #8
0bd7c     18 37 62 FC | 	wrlong	local09, local06
0bd80     03 00 00 FF 
0bd84     00 E4 05 F1 | 	add	objptr, ##1536
0bd88     F2 30 02 FB | 	rdlong	local06, objptr
0bd8c     01 30 06 F1 | 	add	local06, #1
0bd90     F2 30 62 FC | 	wrlong	local06, objptr
0bd94     13 00 00 FF 
0bd98     38 E4 85 F1 | 	sub	objptr, ##9784
0bd9c     F2 30 02 FB | 	rdlong	local06, objptr
0bda0     01 30 06 F1 | 	add	local06, #1
0bda4     F2 30 62 FC | 	wrlong	local06, objptr
0bda8     37 00 00 FF 
0bdac     44 E4 85 F1 | 	sub	objptr, ##28228
0bdb0     24 05 90 FD | 	jmp	#LR__0993
0bdb4                 | LR__0981
0bdb4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bdb4     01 2C 0E F2 | 	cmp	local04, #1 wz
0bdb8     48 00 90 5D |  if_ne	jmp	#LR__0982
0bdbc     00 C0 1F FF 
0bdc0     00 30 06 F6 | 	mov	local06, ##1065353216
0bdc4     37 00 00 FF 
0bdc8     44 E4 05 F1 | 	add	objptr, ##28228
0bdcc     F2 36 02 FB | 	rdlong	local09, objptr
0bdd0     03 36 66 F0 | 	shl	local09, #3
0bdd4     02 00 00 FF 
0bdd8     38 E4 85 F1 | 	sub	objptr, ##1080
0bddc     F2 36 02 F1 | 	add	local09, objptr
0bde0     1B 13 02 FB | 	rdlong	arg01, local09
0bde4     35 00 00 FF 
0bde8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdec     A8 B7 B1 FD | 	call	#__system____builtin_atof
0bdf0     FD 14 02 F6 | 	mov	arg02, result1
0bdf4     18 13 02 F6 | 	mov	arg01, local06
0bdf8     90 AF B1 FD | 	call	#__system___float_mul
0bdfc     FD 26 02 F6 | 	mov	local01, result1
0be00     1E 2A 06 F6 | 	mov	local03, #30
0be04                 | LR__0982
0be04                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0be04     FF FF 7F FF 
0be08     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0be0c     48 00 90 5D |  if_ne	jmp	#LR__0983
0be10     00 C0 5F FF 
0be14     00 30 06 F6 | 	mov	local06, ##-1082130432
0be18     37 00 00 FF 
0be1c     44 E4 05 F1 | 	add	objptr, ##28228
0be20     F2 36 02 FB | 	rdlong	local09, objptr
0be24     03 36 66 F0 | 	shl	local09, #3
0be28     02 00 00 FF 
0be2c     38 E4 85 F1 | 	sub	objptr, ##1080
0be30     F2 36 02 F1 | 	add	local09, objptr
0be34     1B 13 02 FB | 	rdlong	arg01, local09
0be38     35 00 00 FF 
0be3c     0C E4 85 F1 | 	sub	objptr, ##27148
0be40     54 B7 B1 FD | 	call	#__system____builtin_atof
0be44     FD 14 02 F6 | 	mov	arg02, result1
0be48     18 13 02 F6 | 	mov	arg01, local06
0be4c     3C AF B1 FD | 	call	#__system___float_mul
0be50     FD 26 02 F6 | 	mov	local01, result1
0be54     1E 2A 06 F6 | 	mov	local03, #30
0be58                 | LR__0983
0be58     13 31 02 F6 | 	mov	local06, local01
0be5c     14 33 02 F6 | 	mov	local07, local02
0be60     15 2F 02 F6 | 	mov	local05, local03
0be64     4A 00 00 FF 
0be68     7C E4 05 F1 | 	add	objptr, ##38012
0be6c     F2 26 02 FB | 	rdlong	local01, objptr
0be70     13 37 02 F6 | 	mov	local09, local01
0be74     01 36 66 F0 | 	shl	local09, #1
0be78     13 37 02 F1 | 	add	local09, local01
0be7c     02 36 66 F0 | 	shl	local09, #2
0be80     03 00 00 FF 
0be84     00 E4 85 F1 | 	sub	objptr, ##1536
0be88     F2 36 02 F1 | 	add	local09, objptr
0be8c     1B 31 62 FC | 	wrlong	local06, local09
0be90     03 00 00 FF 
0be94     00 E4 05 F1 | 	add	objptr, ##1536
0be98     F2 36 02 FB | 	rdlong	local09, objptr
0be9c     1B 31 02 F6 | 	mov	local06, local09
0bea0     01 30 66 F0 | 	shl	local06, #1
0bea4     1B 31 02 F1 | 	add	local06, local09
0bea8     02 30 66 F0 | 	shl	local06, #2
0beac     03 00 00 FF 
0beb0     00 E4 85 F1 | 	sub	objptr, ##1536
0beb4     F2 30 02 F1 | 	add	local06, objptr
0beb8     04 30 06 F1 | 	add	local06, #4
0bebc     18 33 62 FC | 	wrlong	local07, local06
0bec0     03 00 00 FF 
0bec4     00 E4 05 F1 | 	add	objptr, ##1536
0bec8     F2 36 02 FB | 	rdlong	local09, objptr
0becc     1B 33 02 F6 | 	mov	local07, local09
0bed0     01 32 66 F0 | 	shl	local07, #1
0bed4     1B 33 02 F1 | 	add	local07, local09
0bed8     02 32 66 F0 | 	shl	local07, #2
0bedc     03 00 00 FF 
0bee0     00 E4 85 F1 | 	sub	objptr, ##1536
0bee4     F2 32 02 F1 | 	add	local07, objptr
0bee8     08 32 06 F1 | 	add	local07, #8
0beec     19 2F 62 FC | 	wrlong	local05, local07
0bef0     03 00 00 FF 
0bef4     00 E4 05 F1 | 	add	objptr, ##1536
0bef8     F2 30 02 FB | 	rdlong	local06, objptr
0befc     01 30 06 F1 | 	add	local06, #1
0bf00     F2 30 62 FC | 	wrlong	local06, objptr
0bf04     13 00 00 FF 
0bf08     38 E4 85 F1 | 	sub	objptr, ##9784
0bf0c     F2 30 02 FB | 	rdlong	local06, objptr
0bf10     01 30 06 F1 | 	add	local06, #1
0bf14     F2 30 62 FC | 	wrlong	local06, objptr
0bf18     37 00 00 FF 
0bf1c     44 E4 85 F1 | 	sub	objptr, ##28228
0bf20     B4 03 90 FD | 	jmp	#LR__0993
0bf24                 | LR__0984
0bf24     37 00 00 FF 
0bf28     44 E4 05 F1 | 	add	objptr, ##28228
0bf2c     F2 16 02 FB | 	rdlong	arg03, objptr
0bf30     03 16 66 F0 | 	shl	arg03, #3
0bf34     02 00 00 FF 
0bf38     38 E4 85 F1 | 	sub	objptr, ##1080
0bf3c     F2 16 02 F1 | 	add	arg03, objptr
0bf40     0B 13 02 FB | 	rdlong	arg01, arg03
0bf44     35 00 00 FF 
0bf48     0C E4 85 F1 | 	sub	objptr, ##27148
0bf4c     09 35 02 F6 | 	mov	local08, arg01
0bf50     97 06 48 FB | 	callpa	#(@LR__0986-@LR__0985)>>2,fcache_load_ptr_
0bf54                 | LR__0985
0bf54     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bf58     01 34 06 51 |  if_ne	add	local08, #1
0bf5c     F4 FF 9F 5D |  if_ne	jmp	#LR__0985
0bf60                 | LR__0986
0bf60     09 35 82 F1 | 	sub	local08, arg01
0bf64     1A FB 01 F6 | 	mov	result1, local08
0bf68     52 00 00 FF 
0bf6c     00 E4 05 F1 | 	add	objptr, ##41984
0bf70     F2 FA 61 FC | 	wrlong	result1, objptr
0bf74     54 E4 85 F1 | 	sub	objptr, #84
0bf78     F2 12 02 FB | 	rdlong	arg01, objptr
0bf7c     FD 12 82 F1 | 	sub	arg01, result1
0bf80     04 12 86 F1 | 	sub	arg01, #4
0bf84     03 12 26 F5 | 	andn	arg01, #3
0bf88     F2 12 62 FC | 	wrlong	arg01, objptr
0bf8c     54 E4 05 F1 | 	add	objptr, #84
0bf90     F2 14 02 FB | 	rdlong	arg02, objptr
0bf94     52 00 00 FF 
0bf98     00 E4 85 F1 | 	sub	objptr, ##41984
0bf9c     70 47 B1 FD | 	call	#_pslpoke
0bfa0                 | '     pslpoke memtop,l
0bfa0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0bfa0     01 38 06 F6 | 	mov	local10, #1
0bfa4     52 00 00 FF 
0bfa8     00 E4 05 F1 | 	add	objptr, ##41984
0bfac     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb0     52 00 00 FF 
0bfb4     00 E4 85 F1 | 	sub	objptr, ##41984
0bfb8     01 3A 06 F1 | 	add	local11, #1
0bfbc                 | LR__0987
0bfbc     1D 39 52 F2 | 	cmps	local10, local11 wc
0bfc0     5C 00 90 3D |  if_ae	jmp	#LR__0988
0bfc4     51 00 00 FF 
0bfc8     AC E5 05 F1 | 	add	objptr, ##41900
0bfcc     F2 32 02 FB | 	rdlong	local07, objptr
0bfd0     03 32 06 F1 | 	add	local07, #3
0bfd4     1C 33 02 F1 | 	add	local07, local10
0bfd8     1A 00 00 FF 
0bfdc     68 E5 85 F1 | 	sub	objptr, ##13672
0bfe0     F2 36 02 FB | 	rdlong	local09, objptr
0bfe4     03 36 66 F0 | 	shl	local09, #3
0bfe8     02 00 00 FF 
0bfec     38 E4 85 F1 | 	sub	objptr, ##1080
0bff0     F2 36 02 F1 | 	add	local09, objptr
0bff4     1B 13 02 FB | 	rdlong	arg01, local09
0bff8     1C 15 02 F6 | 	mov	arg02, local10
0bffc     01 16 06 F6 | 	mov	arg03, #1
0c000     35 00 00 FF 
0c004     0C E4 85 F1 | 	sub	objptr, ##27148
0c008     9C A0 B1 FD | 	call	#__system__Mid_S
0c00c     FD 14 C2 FA | 	rdbyte	arg02, result1
0c010     19 13 02 F6 | 	mov	arg01, local07
0c014     88 47 B1 FD | 	call	#_pspoke
0c018     01 38 06 F1 | 	add	local10, #1
0c01c     9C FF 9F FD | 	jmp	#LR__0987
0c020                 | LR__0988
0c020     51 00 00 FF 
0c024     AC E5 05 F1 | 	add	objptr, ##41900
0c028     F2 26 02 FB | 	rdlong	local01, objptr
0c02c     2B 2A 06 F6 | 	mov	local03, #43
0c030     13 31 02 F6 | 	mov	local06, local01
0c034     14 33 02 F6 | 	mov	local07, local02
0c038     15 3B 02 F6 | 	mov	local11, local03
0c03c     07 00 00 FF 
0c040     30 E5 85 F1 | 	sub	objptr, ##3888
0c044     F2 38 02 FB | 	rdlong	local10, objptr
0c048     1C 37 02 F6 | 	mov	local09, local10
0c04c     01 36 66 F0 | 	shl	local09, #1
0c050     1C 37 02 F1 | 	add	local09, local10
0c054     02 36 66 F0 | 	shl	local09, #2
0c058     03 00 00 FF 
0c05c     00 E4 85 F1 | 	sub	objptr, ##1536
0c060     F2 36 02 F1 | 	add	local09, objptr
0c064     1B 31 62 FC | 	wrlong	local06, local09
0c068     03 00 00 FF 
0c06c     00 E4 05 F1 | 	add	objptr, ##1536
0c070     F2 38 02 FB | 	rdlong	local10, objptr
0c074     1C 37 02 F6 | 	mov	local09, local10
0c078     01 36 66 F0 | 	shl	local09, #1
0c07c     1C 37 02 F1 | 	add	local09, local10
0c080     02 36 66 F0 | 	shl	local09, #2
0c084     03 00 00 FF 
0c088     00 E4 85 F1 | 	sub	objptr, ##1536
0c08c     F2 36 02 F1 | 	add	local09, objptr
0c090     04 36 06 F1 | 	add	local09, #4
0c094     1B 33 62 FC | 	wrlong	local07, local09
0c098     03 00 00 FF 
0c09c     00 E4 05 F1 | 	add	objptr, ##1536
0c0a0     F2 38 02 FB | 	rdlong	local10, objptr
0c0a4     1C 37 02 F6 | 	mov	local09, local10
0c0a8     01 36 66 F0 | 	shl	local09, #1
0c0ac     1C 37 02 F1 | 	add	local09, local10
0c0b0     02 36 66 F0 | 	shl	local09, #2
0c0b4     03 00 00 FF 
0c0b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0bc     F2 36 02 F1 | 	add	local09, objptr
0c0c0     08 36 06 F1 | 	add	local09, #8
0c0c4     1B 3B 62 FC | 	wrlong	local11, local09
0c0c8     03 00 00 FF 
0c0cc     00 E4 05 F1 | 	add	objptr, ##1536
0c0d0     F2 30 02 FB | 	rdlong	local06, objptr
0c0d4     01 30 06 F1 | 	add	local06, #1
0c0d8     F2 30 62 FC | 	wrlong	local06, objptr
0c0dc     13 00 00 FF 
0c0e0     38 E4 85 F1 | 	sub	objptr, ##9784
0c0e4     F2 30 02 FB | 	rdlong	local06, objptr
0c0e8     01 30 06 F1 | 	add	local06, #1
0c0ec     F2 30 62 FC | 	wrlong	local06, objptr
0c0f0     37 00 00 FF 
0c0f4     44 E4 85 F1 | 	sub	objptr, ##28228
0c0f8     DC 01 90 FD | 	jmp	#LR__0993
0c0fc                 | LR__0989
0c0fc     2C 2A 06 F6 | 	mov	local03, #44
0c100     37 00 00 FF 
0c104     44 E4 05 F1 | 	add	objptr, ##28228
0c108     F2 30 02 FB | 	rdlong	local06, objptr
0c10c     03 30 66 F0 | 	shl	local06, #3
0c110     02 00 00 FF 
0c114     38 E4 85 F1 | 	sub	objptr, ##1080
0c118     F2 30 02 F1 | 	add	local06, objptr
0c11c     18 13 02 FB | 	rdlong	arg01, local06
0c120     00 14 06 F6 | 	mov	arg02, #0
0c124     35 00 00 FF 
0c128     0C E4 85 F1 | 	sub	objptr, ##27148
0c12c     D4 B2 B1 FD | 	call	#__system____builtin_atoi
0c130     FD 26 02 F6 | 	mov	local01, result1
0c134     13 31 02 F6 | 	mov	local06, local01
0c138     14 33 02 F6 | 	mov	local07, local02
0c13c     15 3B 02 F6 | 	mov	local11, local03
0c140     4A 00 00 FF 
0c144     7C E4 05 F1 | 	add	objptr, ##38012
0c148     F2 38 02 FB | 	rdlong	local10, objptr
0c14c     1C 37 02 F6 | 	mov	local09, local10
0c150     01 36 66 F0 | 	shl	local09, #1
0c154     1C 37 02 F1 | 	add	local09, local10
0c158     02 36 66 F0 | 	shl	local09, #2
0c15c     03 00 00 FF 
0c160     00 E4 85 F1 | 	sub	objptr, ##1536
0c164     F2 36 02 F1 | 	add	local09, objptr
0c168     1B 31 62 FC | 	wrlong	local06, local09
0c16c     03 00 00 FF 
0c170     00 E4 05 F1 | 	add	objptr, ##1536
0c174     F2 38 02 FB | 	rdlong	local10, objptr
0c178     1C 37 02 F6 | 	mov	local09, local10
0c17c     01 36 66 F0 | 	shl	local09, #1
0c180     1C 37 02 F1 | 	add	local09, local10
0c184     02 36 66 F0 | 	shl	local09, #2
0c188     03 00 00 FF 
0c18c     00 E4 85 F1 | 	sub	objptr, ##1536
0c190     F2 36 02 F1 | 	add	local09, objptr
0c194     04 36 06 F1 | 	add	local09, #4
0c198     1B 33 62 FC | 	wrlong	local07, local09
0c19c     03 00 00 FF 
0c1a0     00 E4 05 F1 | 	add	objptr, ##1536
0c1a4     F2 38 02 FB | 	rdlong	local10, objptr
0c1a8     1C 37 02 F6 | 	mov	local09, local10
0c1ac     01 36 66 F0 | 	shl	local09, #1
0c1b0     1C 37 02 F1 | 	add	local09, local10
0c1b4     02 36 66 F0 | 	shl	local09, #2
0c1b8     03 00 00 FF 
0c1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c1c0     F2 36 02 F1 | 	add	local09, objptr
0c1c4     08 36 06 F1 | 	add	local09, #8
0c1c8     1B 3B 62 FC | 	wrlong	local11, local09
0c1cc     03 00 00 FF 
0c1d0     00 E4 05 F1 | 	add	objptr, ##1536
0c1d4     F2 30 02 FB | 	rdlong	local06, objptr
0c1d8     01 30 06 F1 | 	add	local06, #1
0c1dc     F2 30 62 FC | 	wrlong	local06, objptr
0c1e0     13 00 00 FF 
0c1e4     38 E4 85 F1 | 	sub	objptr, ##9784
0c1e8     F2 30 02 FB | 	rdlong	local06, objptr
0c1ec     01 30 06 F1 | 	add	local06, #1
0c1f0     F2 30 62 FC | 	wrlong	local06, objptr
0c1f4     37 00 00 FF 
0c1f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1fc     D8 00 90 FD | 	jmp	#LR__0993
0c200                 | LR__0990
0c200     16 13 02 F6 | 	mov	arg01, local04
0c204     24 04 B0 FD | 	call	#_getvar
0c208     37 00 00 FF 
0c20c     44 E4 05 F1 | 	add	objptr, ##28228
0c210     F2 30 02 FB | 	rdlong	local06, objptr
0c214     01 30 06 F1 | 	add	local06, #1
0c218     F2 30 62 FC | 	wrlong	local06, objptr
0c21c     37 00 00 FF 
0c220     44 E4 85 F1 | 	sub	objptr, ##28228
0c224                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c224     01 FA 55 F2 | 	cmps	result1, #1 wc
0c228     B0 00 90 3D |  if_ae	jmp	#LR__0994
0c22c     A8 00 90 FD | 	jmp	#LR__0993
0c230                 | LR__0991
0c230     37 00 00 FF 
0c234     44 E4 05 F1 | 	add	objptr, ##28228
0c238     F2 30 02 FB | 	rdlong	local06, objptr
0c23c     01 30 06 F1 | 	add	local06, #1
0c240     F2 30 62 FC | 	wrlong	local06, objptr
0c244     37 00 00 FF 
0c248     44 E4 85 F1 | 	sub	objptr, ##28228
0c24c     20 F1 BF FD | 	call	#_expr
0c250                 | '     ct+=1
0c250                 | '     err=expr() : if err>0 then return err 
0c250     01 FA 55 F2 | 	cmps	result1, #1 wc
0c254     84 00 90 3D |  if_ae	jmp	#LR__0994
0c258                 | '     if lparts(ct).token=token_rpar then ct+=1
0c258     37 00 00 FF 
0c25c     44 E4 05 F1 | 	add	objptr, ##28228
0c260     F2 3A 02 FB | 	rdlong	local11, objptr
0c264     03 3A 66 F0 | 	shl	local11, #3
0c268     02 00 00 FF 
0c26c     38 E4 85 F1 | 	sub	objptr, ##1080
0c270     F2 3A 02 F1 | 	add	local11, objptr
0c274     04 3A 06 F1 | 	add	local11, #4
0c278     1D 3B 02 FB | 	rdlong	local11, local11
0c27c     14 3A 0E F2 | 	cmp	local11, #20 wz
0c280     35 00 00 FF 
0c284     0C E4 85 F1 | 	sub	objptr, ##27148
0c288     4C 00 90 5D |  if_ne	jmp	#LR__0993
0c28c     37 00 00 FF 
0c290     44 E4 05 F1 | 	add	objptr, ##28228
0c294     F2 30 02 FB | 	rdlong	local06, objptr
0c298     01 30 06 F1 | 	add	local06, #1
0c29c     F2 30 62 FC | 	wrlong	local06, objptr
0c2a0     37 00 00 FF 
0c2a4     44 E4 85 F1 | 	sub	objptr, ##28228
0c2a8     2C 00 90 FD | 	jmp	#LR__0993
0c2ac                 | LR__0992
0c2ac     16 13 02 F6 | 	mov	arg01, local04
0c2b0     34 00 B0 FD | 	call	#_getfun
0c2b4     37 00 00 FF 
0c2b8     44 E4 05 F1 | 	add	objptr, ##28228
0c2bc     F2 30 02 FB | 	rdlong	local06, objptr
0c2c0     01 30 06 F1 | 	add	local06, #1
0c2c4     F2 30 62 FC | 	wrlong	local06, objptr
0c2c8     37 00 00 FF 
0c2cc     44 E4 85 F1 | 	sub	objptr, ##28228
0c2d0                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c2d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c2d4     04 00 90 3D |  if_ae	jmp	#LR__0994
0c2d8                 | LR__0993
0c2d8                 | ' return 0  
0c2d8     00 FA 05 F6 | 	mov	result1, #0
0c2dc                 | LR__0994
0c2dc     A7 F0 03 F6 | 	mov	ptra, fp
0c2e0     B2 00 A0 FD | 	call	#popregs_
0c2e4                 | _getvalue_ret
0c2e4     2D 00 64 FD | 	ret
0c2e8                 | 
0c2e8                 | ' 
0c2e8                 | ' ' Get a function result 
0c2e8                 | ' 
0c2e8                 | ' function getfun(m as integer) as ulong
0c2e8                 | _getfun
0c2e8     0F 4A 05 F6 | 	mov	COUNT_, #15
0c2ec     A8 00 A0 FD | 	call	#pushregs_
0c2f0                 | _getfun_enter
0c2f0     09 2D 02 F6 | 	mov	local04, arg01
0c2f4     37 00 00 FF 
0c2f8     44 E4 05 F1 | 	add	objptr, ##28228
0c2fc     F2 2E 02 FB | 	rdlong	local05, objptr
0c300     17 31 02 F6 | 	mov	local06, local05
0c304     00 32 06 F6 | 	mov	local07, #0
0c308                 | ' oldct=ct
0c308                 | ' numpar=0
0c308                 | ' if lparts(ct+1).token=token_lpar then
0c308     01 2E 06 F1 | 	add	local05, #1
0c30c     03 2E 66 F0 | 	shl	local05, #3
0c310     02 00 00 FF 
0c314     38 E4 85 F1 | 	sub	objptr, ##1080
0c318     F2 2E 02 F1 | 	add	local05, objptr
0c31c     04 2E 06 F1 | 	add	local05, #4
0c320     17 2F 02 FB | 	rdlong	local05, local05
0c324     15 2E 0E F2 | 	cmp	local05, #21 wz
0c328     35 00 00 FF 
0c32c     0C E4 85 F1 | 	sub	objptr, ##27148
0c330     54 01 90 5D |  if_ne	jmp	#LR__1004
0c334     37 00 00 FF 
0c338     44 E4 05 F1 | 	add	objptr, ##28228
0c33c     F2 34 02 FB | 	rdlong	local08, objptr
0c340     01 34 06 F1 | 	add	local08, #1
0c344     F2 34 62 FC | 	wrlong	local08, objptr
0c348     37 00 00 FF 
0c34c     44 E4 85 F1 | 	sub	objptr, ##28228
0c350                 | '   ct+=1 											' omit this lpar, this is for expr list
0c350                 | '   do
0c350                 | LR__1000
0c350     37 00 00 FF 
0c354     44 E4 05 F1 | 	add	objptr, ##28228
0c358     F2 2E 02 FB | 	rdlong	local05, objptr
0c35c     01 2E 06 F1 | 	add	local05, #1
0c360     F2 2E 62 FC | 	wrlong	local05, objptr
0c364                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c364                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c364     03 2E 66 F0 | 	shl	local05, #3
0c368     02 00 00 FF 
0c36c     38 E4 85 F1 | 	sub	objptr, ##1080
0c370     F2 2E 02 F1 | 	add	local05, objptr
0c374     04 2E 06 F1 | 	add	local05, #4
0c378     17 35 02 FB | 	rdlong	local08, local05
0c37c     15 34 0E F2 | 	cmp	local08, #21 wz
0c380     35 00 00 FF 
0c384     0C E4 85 F1 | 	sub	objptr, ##27148
0c388     44 00 90 5D |  if_ne	jmp	#LR__1001
0c38c     37 00 00 FF 
0c390     44 E4 05 F1 | 	add	objptr, ##28228
0c394     F2 34 02 FB | 	rdlong	local08, objptr
0c398     01 34 06 F1 | 	add	local08, #1
0c39c     F2 34 62 FC | 	wrlong	local08, objptr
0c3a0     37 00 00 FF 
0c3a4     44 E4 85 F1 | 	sub	objptr, ##28228
0c3a8     C4 EF BF FD | 	call	#_expr
0c3ac     FD 36 02 F6 | 	mov	local09, result1
0c3b0     37 00 00 FF 
0c3b4     44 E4 05 F1 | 	add	objptr, ##28228
0c3b8     F2 34 02 FB | 	rdlong	local08, objptr
0c3bc     01 34 06 F1 | 	add	local08, #1
0c3c0     F2 34 62 FC | 	wrlong	local08, objptr
0c3c4     37 00 00 FF 
0c3c8     44 E4 85 F1 | 	sub	objptr, ##28228
0c3cc     08 00 90 FD | 	jmp	#LR__1002
0c3d0                 | LR__1001
0c3d0     9C EF BF FD | 	call	#_expr
0c3d4     FD 36 02 F6 | 	mov	local09, result1
0c3d8                 | LR__1002
0c3d8                 | '     if err>0 then return err
0c3d8     01 36 16 F2 | 	cmp	local09, #1 wc
0c3dc     1B FB 01 36 |  if_ae	mov	result1, local09
0c3e0     3C 02 90 3D |  if_ae	jmp	#LR__1006
0c3e4     01 32 06 F1 | 	add	local07, #1
0c3e8     37 00 00 FF 
0c3ec     44 E4 05 F1 | 	add	objptr, ##28228
0c3f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3f4     03 2E 66 F0 | 	shl	local05, #3
0c3f8     02 00 00 FF 
0c3fc     38 E4 85 F1 | 	sub	objptr, ##1080
0c400     F2 2E 02 F1 | 	add	local05, objptr
0c404     04 2E 06 F1 | 	add	local05, #4
0c408     17 37 02 FB | 	rdlong	local09, local05
0c40c     14 36 0E F2 | 	cmp	local09, #20 wz
0c410     35 00 00 FF 
0c414     0C E4 85 F1 | 	sub	objptr, ##27148
0c418     34 00 90 AD |  if_e	jmp	#LR__1003
0c41c     37 00 00 FF 
0c420     44 E4 05 F1 | 	add	objptr, ##28228
0c424     F2 36 02 FB | 	rdlong	local09, objptr
0c428     03 36 66 F0 | 	shl	local09, #3
0c42c     02 00 00 FF 
0c430     38 E4 85 F1 | 	sub	objptr, ##1080
0c434     F2 36 02 F1 | 	add	local09, objptr
0c438     04 36 06 F1 | 	add	local09, #4
0c43c     1B 37 02 FB | 	rdlong	local09, local09
0c440     FE 37 0E F2 | 	cmp	local09, #510 wz
0c444     35 00 00 FF 
0c448     0C E4 85 F1 | 	sub	objptr, ##27148
0c44c     00 FF 9F 5D |  if_ne	jmp	#LR__1000
0c450                 | LR__1003
0c450                 | '   if lparts(ct).token=token_end then return 14
0c450     37 00 00 FF 
0c454     44 E4 05 F1 | 	add	objptr, ##28228
0c458     F2 2E 02 FB | 	rdlong	local05, objptr
0c45c     03 2E 66 F0 | 	shl	local05, #3
0c460     02 00 00 FF 
0c464     38 E4 85 F1 | 	sub	objptr, ##1080
0c468     F2 2E 02 F1 | 	add	local05, objptr
0c46c     04 2E 06 F1 | 	add	local05, #4
0c470     17 37 02 FB | 	rdlong	local09, local05
0c474     FE 37 0E F2 | 	cmp	local09, #510 wz
0c478     35 00 00 FF 
0c47c     0C E4 85 F1 | 	sub	objptr, ##27148
0c480     0E FA 05 A6 |  if_e	mov	result1, #14
0c484     98 01 90 AD |  if_e	jmp	#LR__1006
0c488                 | LR__1004
0c488     19 27 02 F6 | 	mov	local01, local07
0c48c     03 30 66 F0 | 	shl	local06, #3
0c490     35 00 00 FF 
0c494     0C E4 05 F1 | 	add	objptr, ##27148
0c498     F2 30 02 F1 | 	add	local06, objptr
0c49c     04 30 06 F1 | 	add	local06, #4
0c4a0     18 2B 02 FB | 	rdlong	local03, local06
0c4a4     13 35 02 F6 | 	mov	local08, local01
0c4a8     14 39 02 F6 | 	mov	local10, local02
0c4ac     15 3B 02 F6 | 	mov	local11, local03
0c4b0     15 00 00 FF 
0c4b4     70 E4 05 F1 | 	add	objptr, ##10864
0c4b8     F2 3C 02 FB | 	rdlong	local12, objptr
0c4bc     1E 3F 02 F6 | 	mov	local13, local12
0c4c0     01 3E 66 F0 | 	shl	local13, #1
0c4c4     1E 3F 02 F1 | 	add	local13, local12
0c4c8     02 3E 66 F0 | 	shl	local13, #2
0c4cc     03 00 00 FF 
0c4d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d4     F2 3E 02 F1 | 	add	local13, objptr
0c4d8     1F 35 62 FC | 	wrlong	local08, local13
0c4dc     03 00 00 FF 
0c4e0     00 E4 05 F1 | 	add	objptr, ##1536
0c4e4     F2 34 02 FB | 	rdlong	local08, objptr
0c4e8     1A 41 02 F6 | 	mov	local14, local08
0c4ec     01 40 66 F0 | 	shl	local14, #1
0c4f0     1A 41 02 F1 | 	add	local14, local08
0c4f4     02 40 66 F0 | 	shl	local14, #2
0c4f8     03 00 00 FF 
0c4fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c500     F2 40 02 F1 | 	add	local14, objptr
0c504     04 40 06 F1 | 	add	local14, #4
0c508     20 39 62 FC | 	wrlong	local10, local14
0c50c     03 00 00 FF 
0c510     00 E4 05 F1 | 	add	objptr, ##1536
0c514     F2 34 02 FB | 	rdlong	local08, objptr
0c518     1A 43 02 F6 | 	mov	local15, local08
0c51c     01 42 66 F0 | 	shl	local15, #1
0c520     1A 43 02 F1 | 	add	local15, local08
0c524     02 42 66 F0 | 	shl	local15, #2
0c528     03 00 00 FF 
0c52c     00 E4 85 F1 | 	sub	objptr, ##1536
0c530     F2 42 02 F1 | 	add	local15, objptr
0c534     08 42 06 F1 | 	add	local15, #8
0c538     21 3B 62 FC | 	wrlong	local11, local15
0c53c     03 00 00 FF 
0c540     00 E4 05 F1 | 	add	objptr, ##1536
0c544     F2 34 02 FB | 	rdlong	local08, objptr
0c548     01 34 06 F1 | 	add	local08, #1
0c54c     F2 34 62 FC | 	wrlong	local08, objptr
0c550     4A 00 00 FF 
0c554     7C E4 85 F1 | 	sub	objptr, ##38012
0c558                 | ' t2.result.uresult=numpar
0c558                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c558                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c558                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c558     FF FF 7F FF 
0c55c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c560     B8 00 90 5D |  if_ne	jmp	#LR__1005
0c564     15 2A 06 F6 | 	mov	local03, #21
0c568     13 35 02 F6 | 	mov	local08, local01
0c56c     14 39 02 F6 | 	mov	local10, local02
0c570     15 3B 02 F6 | 	mov	local11, local03
0c574     4A 00 00 FF 
0c578     7C E4 05 F1 | 	add	objptr, ##38012
0c57c     F2 3C 02 FB | 	rdlong	local12, objptr
0c580     1E 3F 02 F6 | 	mov	local13, local12
0c584     01 3E 66 F0 | 	shl	local13, #1
0c588     1E 3F 02 F1 | 	add	local13, local12
0c58c     02 3E 66 F0 | 	shl	local13, #2
0c590     03 00 00 FF 
0c594     00 E4 85 F1 | 	sub	objptr, ##1536
0c598     F2 3E 02 F1 | 	add	local13, objptr
0c59c     1F 35 62 FC | 	wrlong	local08, local13
0c5a0     03 00 00 FF 
0c5a4     00 E4 05 F1 | 	add	objptr, ##1536
0c5a8     F2 42 02 FB | 	rdlong	local15, objptr
0c5ac     21 41 02 F6 | 	mov	local14, local15
0c5b0     01 40 66 F0 | 	shl	local14, #1
0c5b4     21 41 02 F1 | 	add	local14, local15
0c5b8     02 40 66 F0 | 	shl	local14, #2
0c5bc     03 00 00 FF 
0c5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5c4     F2 40 02 F1 | 	add	local14, objptr
0c5c8     04 40 06 F1 | 	add	local14, #4
0c5cc     20 39 62 FC | 	wrlong	local10, local14
0c5d0     03 00 00 FF 
0c5d4     00 E4 05 F1 | 	add	objptr, ##1536
0c5d8     F2 40 02 FB | 	rdlong	local14, objptr
0c5dc     20 43 02 F6 | 	mov	local15, local14
0c5e0     01 42 66 F0 | 	shl	local15, #1
0c5e4     20 43 02 F1 | 	add	local15, local14
0c5e8     02 42 66 F0 | 	shl	local15, #2
0c5ec     03 00 00 FF 
0c5f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5f4     F2 42 02 F1 | 	add	local15, objptr
0c5f8     08 42 06 F1 | 	add	local15, #8
0c5fc     21 3B 62 FC | 	wrlong	local11, local15
0c600     03 00 00 FF 
0c604     00 E4 05 F1 | 	add	objptr, ##1536
0c608     F2 34 02 FB | 	rdlong	local08, objptr
0c60c     01 34 06 F1 | 	add	local08, #1
0c610     F2 34 62 FC | 	wrlong	local08, objptr
0c614     4A 00 00 FF 
0c618     7C E4 85 F1 | 	sub	objptr, ##38012
0c61c                 | LR__1005
0c61c                 | ' return 0
0c61c     00 FA 05 F6 | 	mov	result1, #0
0c620                 | LR__1006
0c620     A7 F0 03 F6 | 	mov	ptra, fp
0c624     B2 00 A0 FD | 	call	#popregs_
0c628                 | _getfun_ret
0c628     2D 00 64 FD | 	ret
0c62c                 | 
0c62c                 | '   
0c62c                 | '   
0c62c                 | ' function getvar(m as integer) as ulong
0c62c                 | _getvar
0c62c     11 4A 05 F6 | 	mov	COUNT_, #17
0c630     A8 00 A0 FD | 	call	#pushregs_
0c634                 | _getvar_enter
0c634     09 2D 02 F6 | 	mov	local04, arg01
0c638     37 00 00 FF 
0c63c     44 E4 05 F1 | 	add	objptr, ##28228
0c640     F2 2E 02 FB | 	rdlong	local05, objptr
0c644     03 2E 66 F0 | 	shl	local05, #3
0c648     02 00 00 FF 
0c64c     38 E4 85 F1 | 	sub	objptr, ##1080
0c650     F2 2E 02 F1 | 	add	local05, objptr
0c654     17 31 02 FB | 	rdlong	local06, local05
0c658     01 32 66 F6 | 	neg	local07, #1
0c65c                 | ' 
0c65c                 | ' varname$=lparts(ct).part$
0c65c                 | ' j=-1
0c65c                 | ' 
0c65c                 | ' for i=0 to varnum-1
0c65c     00 34 06 F6 | 	mov	local08, #0
0c660     04 E4 85 F1 | 	sub	objptr, #4
0c664     F2 36 02 FB | 	rdlong	local09, objptr
0c668     35 00 00 FF 
0c66c     08 E4 85 F1 | 	sub	objptr, ##27144
0c670                 | LR__1010
0c670     1B 35 52 F2 | 	cmps	local08, local09 wc
0c674     38 00 90 3D |  if_ae	jmp	#LR__1011
0c678                 | '   if variables(i).name=varname$ then j=i : exit
0c678     1A 2F 02 F6 | 	mov	local05, local08
0c67c     04 2E 66 F0 | 	shl	local05, #4
0c680     14 00 00 FF 
0c684     F8 E5 05 F1 | 	add	objptr, ##10744
0c688     F2 2E 02 F1 | 	add	local05, objptr
0c68c     17 13 02 FB | 	rdlong	arg01, local05
0c690     18 15 02 F6 | 	mov	arg02, local06
0c694     14 00 00 FF 
0c698     F8 E5 85 F1 | 	sub	objptr, ##10744
0c69c     9C 78 B1 FD | 	call	#__system___string_cmp
0c6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6a4     1A 33 02 A6 |  if_e	mov	local07, local08
0c6a8     01 34 06 51 |  if_ne	add	local08, #1
0c6ac     C0 FF 9F 5D |  if_ne	jmp	#LR__1010
0c6b0                 | LR__1011
0c6b0                 | ' if  j=-1 andalso varnum<maxvars then   
0c6b0     FF FF 7F FF 
0c6b4     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c6b8     A8 00 90 5D |  if_ne	jmp	#LR__1012
0c6bc     35 00 00 FF 
0c6c0     08 E4 05 F1 | 	add	objptr, ##27144
0c6c4     F2 36 02 FB | 	rdlong	local09, objptr
0c6c8     35 00 00 FF 
0c6cc     08 E4 85 F1 | 	sub	objptr, ##27144
0c6d0     02 00 00 FF 
0c6d4     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c6d8     88 00 90 3D |  if_ae	jmp	#LR__1012
0c6dc     35 00 00 FF 
0c6e0     08 E4 05 F1 | 	add	objptr, ##27144
0c6e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c6e8     04 2E 66 F0 | 	shl	local05, #4
0c6ec     20 00 00 FF 
0c6f0     10 E4 85 F1 | 	sub	objptr, ##16400
0c6f4     F2 2E 02 F1 | 	add	local05, objptr
0c6f8     17 31 62 FC | 	wrlong	local06, local05
0c6fc     20 00 00 FF 
0c700     10 E4 05 F1 | 	add	objptr, ##16400
0c704     F2 2E 02 FB | 	rdlong	local05, objptr
0c708     04 2E 66 F0 | 	shl	local05, #4
0c70c     20 00 00 FF 
0c710     10 E4 85 F1 | 	sub	objptr, ##16400
0c714     F2 2E 02 F1 | 	add	local05, objptr
0c718     04 2E 06 F1 | 	add	local05, #4
0c71c     17 01 68 FC | 	wrlong	#0, local05
0c720     20 00 00 FF 
0c724     10 E4 05 F1 | 	add	objptr, ##16400
0c728     F2 2E 02 FB | 	rdlong	local05, objptr
0c72c     04 2E 66 F0 | 	shl	local05, #4
0c730     20 00 00 FF 
0c734     10 E4 85 F1 | 	sub	objptr, ##16400
0c738     F2 2E 02 F1 | 	add	local05, objptr
0c73c     0C 2E 06 F1 | 	add	local05, #12
0c740     17 39 68 FC | 	wrlong	#28, local05
0c744     20 00 00 FF 
0c748     10 E4 05 F1 | 	add	objptr, ##16400
0c74c     F2 36 02 FB | 	rdlong	local09, objptr
0c750     1B 33 02 F6 | 	mov	local07, local09
0c754     01 36 06 F1 | 	add	local09, #1
0c758     F2 36 62 FC | 	wrlong	local09, objptr
0c75c     35 00 00 FF 
0c760     08 E4 85 F1 | 	sub	objptr, ##27144
0c764                 | LR__1012
0c764     00 36 06 F6 | 	mov	local09, #0
0c768                 | ' numpar=0
0c768                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c768     37 00 00 FF 
0c76c     44 E4 05 F1 | 	add	objptr, ##28228
0c770     F2 2E 02 FB | 	rdlong	local05, objptr
0c774     01 2E 06 F1 | 	add	local05, #1
0c778     03 2E 66 F0 | 	shl	local05, #3
0c77c     02 00 00 FF 
0c780     38 E4 85 F1 | 	sub	objptr, ##1080
0c784     F2 2E 02 F1 | 	add	local05, objptr
0c788     04 2E 06 F1 | 	add	local05, #4
0c78c     17 35 02 FB | 	rdlong	local08, local05
0c790     15 34 0E F2 | 	cmp	local08, #21 wz
0c794     35 00 00 FF 
0c798     0C E4 85 F1 | 	sub	objptr, ##27148
0c79c     54 01 90 5D |  if_ne	jmp	#LR__1017
0c7a0     37 00 00 FF 
0c7a4     44 E4 05 F1 | 	add	objptr, ##28228
0c7a8     F2 38 02 FB | 	rdlong	local10, objptr
0c7ac     01 38 06 F1 | 	add	local10, #1
0c7b0     F2 38 62 FC | 	wrlong	local10, objptr
0c7b4     37 00 00 FF 
0c7b8     44 E4 85 F1 | 	sub	objptr, ##28228
0c7bc                 | '   ct+=1 											' omit this lpar, this is for expr list
0c7bc                 | '   do
0c7bc                 | LR__1013
0c7bc     37 00 00 FF 
0c7c0     44 E4 05 F1 | 	add	objptr, ##28228
0c7c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c7c8     01 2E 06 F1 | 	add	local05, #1
0c7cc     F2 2E 62 FC | 	wrlong	local05, objptr
0c7d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c7d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c7d0     03 2E 66 F0 | 	shl	local05, #3
0c7d4     02 00 00 FF 
0c7d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7dc     F2 2E 02 F1 | 	add	local05, objptr
0c7e0     04 2E 06 F1 | 	add	local05, #4
0c7e4     17 39 02 FB | 	rdlong	local10, local05
0c7e8     15 38 0E F2 | 	cmp	local10, #21 wz
0c7ec     35 00 00 FF 
0c7f0     0C E4 85 F1 | 	sub	objptr, ##27148
0c7f4     44 00 90 5D |  if_ne	jmp	#LR__1014
0c7f8     37 00 00 FF 
0c7fc     44 E4 05 F1 | 	add	objptr, ##28228
0c800     F2 38 02 FB | 	rdlong	local10, objptr
0c804     01 38 06 F1 | 	add	local10, #1
0c808     F2 38 62 FC | 	wrlong	local10, objptr
0c80c     37 00 00 FF 
0c810     44 E4 85 F1 | 	sub	objptr, ##28228
0c814     58 EB BF FD | 	call	#_expr
0c818     FD 3A 02 F6 | 	mov	local11, result1
0c81c     37 00 00 FF 
0c820     44 E4 05 F1 | 	add	objptr, ##28228
0c824     F2 38 02 FB | 	rdlong	local10, objptr
0c828     01 38 06 F1 | 	add	local10, #1
0c82c     F2 38 62 FC | 	wrlong	local10, objptr
0c830     37 00 00 FF 
0c834     44 E4 85 F1 | 	sub	objptr, ##28228
0c838     08 00 90 FD | 	jmp	#LR__1015
0c83c                 | LR__1014
0c83c     30 EB BF FD | 	call	#_expr
0c840     FD 3A 02 F6 | 	mov	local11, result1
0c844                 | LR__1015
0c844                 | '     if err>0 then return err
0c844     01 3A 56 F2 | 	cmps	local11, #1 wc
0c848     1D FB 01 36 |  if_ae	mov	result1, local11
0c84c     2C 02 90 3D |  if_ae	jmp	#LR__1019
0c850     01 36 06 F1 | 	add	local09, #1
0c854     37 00 00 FF 
0c858     44 E4 05 F1 | 	add	objptr, ##28228
0c85c     F2 2E 02 FB | 	rdlong	local05, objptr
0c860     03 2E 66 F0 | 	shl	local05, #3
0c864     02 00 00 FF 
0c868     38 E4 85 F1 | 	sub	objptr, ##1080
0c86c     F2 2E 02 F1 | 	add	local05, objptr
0c870     04 2E 06 F1 | 	add	local05, #4
0c874     17 3B 02 FB | 	rdlong	local11, local05
0c878     14 3A 0E F2 | 	cmp	local11, #20 wz
0c87c     35 00 00 FF 
0c880     0C E4 85 F1 | 	sub	objptr, ##27148
0c884     34 00 90 AD |  if_e	jmp	#LR__1016
0c888     37 00 00 FF 
0c88c     44 E4 05 F1 | 	add	objptr, ##28228
0c890     F2 3A 02 FB | 	rdlong	local11, objptr
0c894     03 3A 66 F0 | 	shl	local11, #3
0c898     02 00 00 FF 
0c89c     38 E4 85 F1 | 	sub	objptr, ##1080
0c8a0     F2 3A 02 F1 | 	add	local11, objptr
0c8a4     04 3A 06 F1 | 	add	local11, #4
0c8a8     1D 3B 02 FB | 	rdlong	local11, local11
0c8ac     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c8b0     35 00 00 FF 
0c8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c8b8     00 FF 9F 5D |  if_ne	jmp	#LR__1013
0c8bc                 | LR__1016
0c8bc                 | '     if lparts(ct).token=token_end then return 14
0c8bc     37 00 00 FF 
0c8c0     44 E4 05 F1 | 	add	objptr, ##28228
0c8c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c8c8     03 2E 66 F0 | 	shl	local05, #3
0c8cc     02 00 00 FF 
0c8d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c8d4     F2 2E 02 F1 | 	add	local05, objptr
0c8d8     04 2E 06 F1 | 	add	local05, #4
0c8dc     17 3B 02 FB | 	rdlong	local11, local05
0c8e0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c8e4     35 00 00 FF 
0c8e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c8ec     0E FA 05 A6 |  if_e	mov	result1, #14
0c8f0     88 01 90 AD |  if_e	jmp	#LR__1019
0c8f4                 | LR__1017
0c8f4     1B 29 02 F6 | 	mov	local02, local09
0c8f8     11 2A 06 F6 | 	mov	local03, #17
0c8fc     19 27 02 F6 | 	mov	local01, local07
0c900     13 39 02 F6 | 	mov	local10, local01
0c904     14 3D 02 F6 | 	mov	local12, local02
0c908     15 3F 02 F6 | 	mov	local13, local03
0c90c     4A 00 00 FF 
0c910     7C E4 05 F1 | 	add	objptr, ##38012
0c914     F2 40 02 FB | 	rdlong	local14, objptr
0c918     20 43 02 F6 | 	mov	local15, local14
0c91c     01 42 66 F0 | 	shl	local15, #1
0c920     20 43 02 F1 | 	add	local15, local14
0c924     02 42 66 F0 | 	shl	local15, #2
0c928     03 00 00 FF 
0c92c     00 E4 85 F1 | 	sub	objptr, ##1536
0c930     F2 42 02 F1 | 	add	local15, objptr
0c934     21 39 62 FC | 	wrlong	local10, local15
0c938     03 00 00 FF 
0c93c     00 E4 05 F1 | 	add	objptr, ##1536
0c940     F2 38 02 FB | 	rdlong	local10, objptr
0c944     1C 45 02 F6 | 	mov	local16, local10
0c948     01 44 66 F0 | 	shl	local16, #1
0c94c     1C 45 02 F1 | 	add	local16, local10
0c950     02 44 66 F0 | 	shl	local16, #2
0c954     03 00 00 FF 
0c958     00 E4 85 F1 | 	sub	objptr, ##1536
0c95c     F2 44 02 F1 | 	add	local16, objptr
0c960     04 44 06 F1 | 	add	local16, #4
0c964     22 3D 62 FC | 	wrlong	local12, local16
0c968     03 00 00 FF 
0c96c     00 E4 05 F1 | 	add	objptr, ##1536
0c970     F2 38 02 FB | 	rdlong	local10, objptr
0c974     1C 47 02 F6 | 	mov	local17, local10
0c978     01 46 66 F0 | 	shl	local17, #1
0c97c     1C 47 02 F1 | 	add	local17, local10
0c980     02 46 66 F0 | 	shl	local17, #2
0c984     03 00 00 FF 
0c988     00 E4 85 F1 | 	sub	objptr, ##1536
0c98c     F2 46 02 F1 | 	add	local17, objptr
0c990     08 46 06 F1 | 	add	local17, #8
0c994     23 3F 62 FC | 	wrlong	local13, local17
0c998     03 00 00 FF 
0c99c     00 E4 05 F1 | 	add	objptr, ##1536
0c9a0     F2 38 02 FB | 	rdlong	local10, objptr
0c9a4     01 38 06 F1 | 	add	local10, #1
0c9a8     F2 38 62 FC | 	wrlong	local10, objptr
0c9ac     4A 00 00 FF 
0c9b0     7C E4 85 F1 | 	sub	objptr, ##38012
0c9b4                 | ' t2.result.twowords(1)=numpar
0c9b4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0c9b4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c9b4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c9b4     FF FF 7F FF 
0c9b8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c9bc     B8 00 90 5D |  if_ne	jmp	#LR__1018
0c9c0     15 2A 06 F6 | 	mov	local03, #21
0c9c4     13 39 02 F6 | 	mov	local10, local01
0c9c8     14 3D 02 F6 | 	mov	local12, local02
0c9cc     15 3F 02 F6 | 	mov	local13, local03
0c9d0     4A 00 00 FF 
0c9d4     7C E4 05 F1 | 	add	objptr, ##38012
0c9d8     F2 40 02 FB | 	rdlong	local14, objptr
0c9dc     20 43 02 F6 | 	mov	local15, local14
0c9e0     01 42 66 F0 | 	shl	local15, #1
0c9e4     20 43 02 F1 | 	add	local15, local14
0c9e8     02 42 66 F0 | 	shl	local15, #2
0c9ec     03 00 00 FF 
0c9f0     00 E4 85 F1 | 	sub	objptr, ##1536
0c9f4     F2 42 02 F1 | 	add	local15, objptr
0c9f8     21 39 62 FC | 	wrlong	local10, local15
0c9fc     03 00 00 FF 
0ca00     00 E4 05 F1 | 	add	objptr, ##1536
0ca04     F2 46 02 FB | 	rdlong	local17, objptr
0ca08     23 45 02 F6 | 	mov	local16, local17
0ca0c     01 44 66 F0 | 	shl	local16, #1
0ca10     23 45 02 F1 | 	add	local16, local17
0ca14     02 44 66 F0 | 	shl	local16, #2
0ca18     03 00 00 FF 
0ca1c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca20     F2 44 02 F1 | 	add	local16, objptr
0ca24     04 44 06 F1 | 	add	local16, #4
0ca28     22 3D 62 FC | 	wrlong	local12, local16
0ca2c     03 00 00 FF 
0ca30     00 E4 05 F1 | 	add	objptr, ##1536
0ca34     F2 44 02 FB | 	rdlong	local16, objptr
0ca38     22 47 02 F6 | 	mov	local17, local16
0ca3c     01 46 66 F0 | 	shl	local17, #1
0ca40     22 47 02 F1 | 	add	local17, local16
0ca44     02 46 66 F0 | 	shl	local17, #2
0ca48     03 00 00 FF 
0ca4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca50     F2 46 02 F1 | 	add	local17, objptr
0ca54     08 46 06 F1 | 	add	local17, #8
0ca58     23 3F 62 FC | 	wrlong	local13, local17
0ca5c     03 00 00 FF 
0ca60     00 E4 05 F1 | 	add	objptr, ##1536
0ca64     F2 38 02 FB | 	rdlong	local10, objptr
0ca68     01 38 06 F1 | 	add	local10, #1
0ca6c     F2 38 62 FC | 	wrlong	local10, objptr
0ca70     4A 00 00 FF 
0ca74     7C E4 85 F1 | 	sub	objptr, ##38012
0ca78                 | LR__1018
0ca78                 | ' return 0
0ca78     00 FA 05 F6 | 	mov	result1, #0
0ca7c                 | LR__1019
0ca7c     A7 F0 03 F6 | 	mov	ptra, fp
0ca80     B2 00 A0 FD | 	call	#popregs_
0ca84                 | _getvar_ret
0ca84     2D 00 64 FD | 	ret
0ca88                 | 
0ca88                 | ' 
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' 
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '                                                                                                                                       -
0ca88                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0ca88                 | ' '                                                                                                                                       -
0ca88                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0ca88                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ca88                 | ' 
0ca88                 | ' function execute_line (astart=0 as integer) as integer
0ca88                 | _execute_line
0ca88     04 4A 05 F6 | 	mov	COUNT_, #4
0ca8c     A8 00 A0 FD | 	call	#pushregs_
0ca90     50 00 00 FF 
0ca94     BC E4 05 F1 | 	add	objptr, ##41148
0ca98     F2 00 68 FC | 	wrlong	#0, objptr
0ca9c                 | ' 
0ca9c                 | ' runptr2=0
0ca9c                 | ' for lineptr_e=astart to lineptr-1
0ca9c     06 00 00 FF 
0caa0     3C E4 85 F1 | 	sub	objptr, ##3132
0caa4     F2 12 62 FC | 	wrlong	arg01, objptr
0caa8     04 E4 85 F1 | 	sub	objptr, #4
0caac     F2 26 02 FB | 	rdlong	local01, objptr
0cab0     4A 00 00 FF 
0cab4     7C E4 85 F1 | 	sub	objptr, ##38012
0cab8                 | LR__1020
0cab8     4A 00 00 FF 
0cabc     80 E4 05 F1 | 	add	objptr, ##38016
0cac0     F2 FA 01 FB | 	rdlong	result1, objptr
0cac4     4A 00 00 FF 
0cac8     80 E4 85 F1 | 	sub	objptr, ##38016
0cacc     13 FB 51 F2 | 	cmps	result1, local01 wc
0cad0     98 00 90 3D |  if_ae	jmp	#LR__1021
0cad4     4A 00 00 FF 
0cad8     80 E4 05 F1 | 	add	objptr, ##38016
0cadc     F2 FA 01 FB | 	rdlong	result1, objptr
0cae0     FD 28 02 F6 | 	mov	local02, result1
0cae4     01 28 66 F0 | 	shl	local02, #1
0cae8     FD 28 02 F1 | 	add	local02, result1
0caec     02 28 66 F0 | 	shl	local02, #2
0caf0     03 00 00 FF 
0caf4     04 E4 85 F1 | 	sub	objptr, ##1540
0caf8     F2 28 02 F1 | 	add	local02, objptr
0cafc     08 28 06 F1 | 	add	local02, #8
0cb00     14 29 02 FB | 	rdlong	local02, local02
0cb04     14 29 E2 F8 | 	getbyte	local02, local02, #0
0cb08     02 28 66 F0 | 	shl	local02, #2
0cb0c     04 00 00 FF 
0cb10     1C E4 85 F1 | 	sub	objptr, ##2076
0cb14     F2 28 02 F1 | 	add	local02, objptr
0cb18     14 29 02 FB | 	rdlong	local02, local02
0cb1c     14 2B 02 F6 | 	mov	local03, local02
0cb20     13 28 46 F7 | 	zerox	local02, #19
0cb24     14 2A 46 F0 | 	shr	local03, #20
0cb28     02 2A 66 F0 | 	shl	local03, #2
0cb2c     ED 2A 02 F1 | 	add	local03, __methods__
0cb30     15 2B 02 FB | 	rdlong	local03, local03
0cb34     43 00 00 FF 
0cb38     60 E4 85 F1 | 	sub	objptr, ##34400
0cb3c     F2 2C 02 F6 | 	mov	local04, objptr
0cb40     14 E5 01 F6 | 	mov	objptr, local02
0cb44     2D 2A 62 FD | 	call	local03
0cb48     16 E5 01 F6 | 	mov	objptr, local04
0cb4c     4A 00 00 FF 
0cb50     80 E4 05 F1 | 	add	objptr, ##38016
0cb54     F2 2C 02 FB | 	rdlong	local04, objptr
0cb58     01 2C 06 F1 | 	add	local04, #1
0cb5c     F2 2C 62 FC | 	wrlong	local04, objptr
0cb60     4A 00 00 FF 
0cb64     80 E4 85 F1 | 	sub	objptr, ##38016
0cb68     4C FF 9F FD | 	jmp	#LR__1020
0cb6c                 | LR__1021
0cb6c                 | ' return runptr2
0cb6c     50 00 00 FF 
0cb70     BC E4 05 F1 | 	add	objptr, ##41148
0cb74     F2 FA 01 FB | 	rdlong	result1, objptr
0cb78     50 00 00 FF 
0cb7c     BC E4 85 F1 | 	sub	objptr, ##41148
0cb80     A7 F0 03 F6 | 	mov	ptra, fp
0cb84     B2 00 A0 FD | 	call	#popregs_
0cb88                 | _execute_line_ret
0cb88     2D 00 64 FD | 	ret
0cb8c                 | 
0cb8c                 | ' 
0cb8c                 | ' 
0cb8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb8c                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0cb8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cb8c                 | ' 
0cb8c                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0cb8c                 | ' 
0cb8c                 | ' function pop() as expr_result
0cb8c                 | _pop
0cb8c                 | ' if stackpointer=0 then
0cb8c     43 00 00 FF 
0cb90     58 E4 05 F1 | 	add	objptr, ##34392
0cb94     F2 FA 09 FB | 	rdlong	result1, objptr wz
0cb98     43 00 00 FF 
0cb9c     58 E4 85 F1 | 	sub	objptr, ##34392
0cba0     FF 04 06 A6 |  if_e	mov	_var03, #255
0cba4     18 00 06 A6 |  if_e	mov	_var01, #24
0cba8     68 00 90 AD |  if_e	jmp	#LR__1030
0cbac     43 00 00 FF 
0cbb0     58 E4 05 F1 | 	add	objptr, ##34392
0cbb4     F2 FA 01 FB | 	rdlong	result1, objptr
0cbb8     01 FA 85 F1 | 	sub	result1, #1
0cbbc     F2 FA 61 FC | 	wrlong	result1, objptr
0cbc0     FD FE 01 F6 | 	mov	result3, result1
0cbc4     01 FE 65 F0 | 	shl	result3, #1
0cbc8     FD FE 01 F1 | 	add	result3, result1
0cbcc     02 FE 65 F0 | 	shl	result3, #2
0cbd0     0C 00 00 FF 
0cbd4     0C E4 85 F1 | 	sub	objptr, ##6156
0cbd8     F2 FE 01 F1 | 	add	result3, objptr
0cbdc     FF 00 02 FB | 	rdlong	_var01, result3
0cbe0     04 FE 05 F1 | 	add	result3, #4
0cbe4     FF FE 01 FB | 	rdlong	result3, result3
0cbe8     FD FC 01 F6 | 	mov	result2, result1
0cbec     01 FC 65 F0 | 	shl	result2, #1
0cbf0     FD FC 01 F1 | 	add	result2, result1
0cbf4     02 FC 65 F0 | 	shl	result2, #2
0cbf8     F2 FC 01 F1 | 	add	result2, objptr
0cbfc     08 FC 05 F1 | 	add	result2, #8
0cc00     FE FA 01 FB | 	rdlong	result1, result2
0cc04     FF 02 02 F6 | 	mov	_var02, result3
0cc08     FD 04 02 F6 | 	mov	_var03, result1
0cc0c     37 00 00 FF 
0cc10     4C E4 85 F1 | 	sub	objptr, ##28236
0cc14                 | LR__1030
0cc14                 | ' return t1
0cc14     01 FD 01 F6 | 	mov	result2, _var02
0cc18     02 FF 01 F6 | 	mov	result3, _var03
0cc1c     00 FB 01 F6 | 	mov	result1, _var01
0cc20                 | _pop_ret
0cc20     2D 00 64 FD | 	ret
0cc24                 | 
0cc24                 | ' 
0cc24                 | ' sub push(t1 as expr_result )
0cc24                 | _push
0cc24                 | ' if stackpointer<maxstack then 
0cc24     43 00 00 FF 
0cc28     58 E4 05 F1 | 	add	objptr, ##34392
0cc2c     F2 00 02 FB | 	rdlong	_var01, objptr
0cc30     43 00 00 FF 
0cc34     58 E4 85 F1 | 	sub	objptr, ##34392
0cc38     01 00 00 FF 
0cc3c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0cc40     BC 00 90 3D |  if_ae	jmp	#LR__1040
0cc44     09 01 02 FB | 	rdlong	_var01, arg01
0cc48     04 12 06 F1 | 	add	arg01, #4
0cc4c     09 03 02 FB | 	rdlong	_var02, arg01
0cc50     04 12 06 F1 | 	add	arg01, #4
0cc54     09 13 02 FB | 	rdlong	arg01, arg01
0cc58     43 00 00 FF 
0cc5c     58 E4 05 F1 | 	add	objptr, ##34392
0cc60     F2 04 02 FB | 	rdlong	_var03, objptr
0cc64     02 07 02 F6 | 	mov	_var04, _var03
0cc68     01 06 66 F0 | 	shl	_var04, #1
0cc6c     02 07 02 F1 | 	add	_var04, _var03
0cc70     02 06 66 F0 | 	shl	_var04, #2
0cc74     0C 00 00 FF 
0cc78     0C E4 85 F1 | 	sub	objptr, ##6156
0cc7c     F2 06 02 F1 | 	add	_var04, objptr
0cc80     03 01 62 FC | 	wrlong	_var01, _var04
0cc84     0C 00 00 FF 
0cc88     0C E4 05 F1 | 	add	objptr, ##6156
0cc8c     F2 06 02 FB | 	rdlong	_var04, objptr
0cc90     03 05 02 F6 | 	mov	_var03, _var04
0cc94     01 04 66 F0 | 	shl	_var03, #1
0cc98     03 05 02 F1 | 	add	_var03, _var04
0cc9c     02 04 66 F0 | 	shl	_var03, #2
0cca0     0C 00 00 FF 
0cca4     0C E4 85 F1 | 	sub	objptr, ##6156
0cca8     F2 04 02 F1 | 	add	_var03, objptr
0ccac     04 04 06 F1 | 	add	_var03, #4
0ccb0     02 03 62 FC | 	wrlong	_var02, _var03
0ccb4     0C 00 00 FF 
0ccb8     0C E4 05 F1 | 	add	objptr, ##6156
0ccbc     F2 06 02 FB | 	rdlong	_var04, objptr
0ccc0     03 05 02 F6 | 	mov	_var03, _var04
0ccc4     01 04 66 F0 | 	shl	_var03, #1
0ccc8     03 05 02 F1 | 	add	_var03, _var04
0cccc     02 04 66 F0 | 	shl	_var03, #2
0ccd0     0C 00 00 FF 
0ccd4     0C E4 85 F1 | 	sub	objptr, ##6156
0ccd8     F2 04 02 F1 | 	add	_var03, objptr
0ccdc     08 04 06 F1 | 	add	_var03, #8
0cce0     02 13 62 FC | 	wrlong	arg01, _var03
0cce4     0C 00 00 FF 
0cce8     0C E4 05 F1 | 	add	objptr, ##6156
0ccec     F2 00 02 FB | 	rdlong	_var01, objptr
0ccf0     01 00 06 F1 | 	add	_var01, #1
0ccf4     F2 00 62 FC | 	wrlong	_var01, objptr
0ccf8     43 00 00 FF 
0ccfc     58 E4 85 F1 | 	sub	objptr, ##34392
0cd00                 | LR__1040
0cd00                 | _push_ret
0cd00     2D 00 64 FD | 	ret
0cd04                 | 
0cd04                 | ' 
0cd04                 | ' ' -------------------------------- Runtime converting functions
0cd04                 | ' 
0cd04                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0cd04                 | ' 
0cd04                 | ' function  convertstring(psaddr as ulong) as string
0cd04                 | _convertstring
0cd04     04 4A 05 F6 | 	mov	COUNT_, #4
0cd08     A8 00 A0 FD | 	call	#pushregs_
0cd0c     09 27 02 F6 | 	mov	local01, arg01
0cd10     2C 3B B1 FD | 	call	#_pslpeek
0cd14     FD 28 02 F6 | 	mov	local02, result1
0cd18     A0 01 00 FF 
0cd1c     4E 2B 06 F6 | 	mov	local03, ##@LR__5687
0cd20                 | ' l=pslpeek(psaddr) 
0cd20                 | ' s="" 
0cd20                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0cd20     01 2C 06 F6 | 	mov	local04, #1
0cd24     01 28 06 F1 | 	add	local02, #1
0cd28                 | LR__1050
0cd28     14 2D 52 F2 | 	cmps	local04, local02 wc
0cd2c     30 00 90 3D |  if_ae	jmp	#LR__1051
0cd30     13 13 02 F6 | 	mov	arg01, local01
0cd34     03 12 06 F1 | 	add	arg01, #3
0cd38     16 13 02 F1 | 	add	arg01, local04
0cd3c     A8 3A B1 FD | 	call	#_pspeek
0cd40     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0cd44     0C 94 B1 FD | 	call	#__system__Chr_S
0cd48     FD 14 02 F6 | 	mov	arg02, result1
0cd4c     15 13 02 F6 | 	mov	arg01, local03
0cd50     1C 72 B1 FD | 	call	#__system___string_concat
0cd54     FD 2A 02 F6 | 	mov	local03, result1
0cd58     01 2C 06 F1 | 	add	local04, #1
0cd5c     C8 FF 9F FD | 	jmp	#LR__1050
0cd60                 | LR__1051
0cd60                 | ' return s
0cd60     15 FB 01 F6 | 	mov	result1, local03
0cd64     A7 F0 03 F6 | 	mov	ptra, fp
0cd68     B2 00 A0 FD | 	call	#popregs_
0cd6c                 | _convertstring_ret
0cd6c     2D 00 64 FD | 	ret
0cd70                 | 
0cd70                 | ' 
0cd70                 | ' ' converts a variable to an integer
0cd70                 | ' 
0cd70                 | ' function converttoint (t1 as expr_result) as integer 
0cd70                 | _converttoint
0cd70     02 4A 05 F6 | 	mov	COUNT_, #2
0cd74     A8 00 A0 FD | 	call	#pushregs_
0cd78     09 27 02 F6 | 	mov	local01, arg01
0cd7c                 | ' 
0cd7c                 | ' select case t1.result_type
0cd7c     08 26 06 F1 | 	add	local01, #8
0cd80     13 29 02 FB | 	rdlong	local02, local01
0cd84     08 26 86 F1 | 	sub	local01, #8
0cd88     1C 28 0E F2 | 	cmp	local02, #28 wz
0cd8c     2C 00 90 AD |  if_e	jmp	#LR__1060
0cd90     1D 28 0E F2 | 	cmp	local02, #29 wz
0cd94     2C 00 90 AD |  if_e	jmp	#LR__1061
0cd98     1E 28 0E F2 | 	cmp	local02, #30 wz
0cd9c     2C 00 90 AD |  if_e	jmp	#LR__1062
0cda0     1F 28 0E F2 | 	cmp	local02, #31 wz
0cda4     34 00 90 AD |  if_e	jmp	#LR__1063
0cda8     2B 28 0E F2 | 	cmp	local02, #43 wz
0cdac     44 00 90 AD |  if_e	jmp	#LR__1064
0cdb0     2C 28 0E F2 | 	cmp	local02, #44 wz
0cdb4     5C 00 90 AD |  if_e	jmp	#LR__1065
0cdb8     60 00 90 FD | 	jmp	#LR__1066
0cdbc                 | LR__1060
0cdbc     13 FB 01 FB | 	rdlong	result1, local01
0cdc0     5C 00 90 FD | 	jmp	#LR__1067
0cdc4                 | LR__1061
0cdc4     13 FB 01 FB | 	rdlong	result1, local01
0cdc8     54 00 90 FD | 	jmp	#LR__1067
0cdcc                 | LR__1062
0cdcc     13 13 02 FB | 	rdlong	arg01, local01
0cdd0     01 14 06 F6 | 	mov	arg02, #1
0cdd4     7C A4 B1 FD | 	call	#__system___float_tointeger
0cdd8     44 00 90 FD | 	jmp	#LR__1067
0cddc                 | LR__1063
0cddc     13 13 02 FB | 	rdlong	arg01, local01
0cde0     B4 A7 B1 FD | 	call	#__system____builtin_atof
0cde4     FD 12 02 F6 | 	mov	arg01, result1
0cde8     01 14 06 F6 | 	mov	arg02, #1
0cdec     64 A4 B1 FD | 	call	#__system___float_tointeger
0cdf0     2C 00 90 FD | 	jmp	#LR__1067
0cdf4                 | LR__1064
0cdf4     13 13 02 FB | 	rdlong	arg01, local01
0cdf8     08 FF BF FD | 	call	#_convertstring
0cdfc     FD 12 02 F6 | 	mov	arg01, result1
0ce00     94 A7 B1 FD | 	call	#__system____builtin_atof
0ce04     FD 12 02 F6 | 	mov	arg01, result1
0ce08     01 14 06 F6 | 	mov	arg02, #1
0ce0c     44 A4 B1 FD | 	call	#__system___float_tointeger
0ce10     0C 00 90 FD | 	jmp	#LR__1067
0ce14                 | LR__1065
0ce14     13 FB 01 FB | 	rdlong	result1, local01
0ce18     04 00 90 FD | 	jmp	#LR__1067
0ce1c                 | LR__1066
0ce1c     00 FA 05 F6 | 	mov	result1, #0
0ce20                 | LR__1067
0ce20     A7 F0 03 F6 | 	mov	ptra, fp
0ce24     B2 00 A0 FD | 	call	#popregs_
0ce28                 | _converttoint_ret
0ce28     2D 00 64 FD | 	ret
0ce2c                 | 
0ce2c                 | ' 
0ce2c                 | ' ' converts a variable to float
0ce2c                 | ' 
0ce2c                 | ' function converttofloat (t1 as expr_result) as single
0ce2c                 | _converttofloat
0ce2c     03 4A 05 F6 | 	mov	COUNT_, #3
0ce30     A8 00 A0 FD | 	call	#pushregs_
0ce34     09 27 02 F6 | 	mov	local01, arg01
0ce38                 | ' 
0ce38                 | ' select case t1.result_type
0ce38     08 26 06 F1 | 	add	local01, #8
0ce3c     13 29 02 FB | 	rdlong	local02, local01
0ce40     08 26 86 F1 | 	sub	local01, #8
0ce44     1C 28 0E F2 | 	cmp	local02, #28 wz
0ce48     24 00 90 AD |  if_e	jmp	#LR__1070
0ce4c     1D 28 0E F2 | 	cmp	local02, #29 wz
0ce50     38 00 90 AD |  if_e	jmp	#LR__1071
0ce54     1E 28 0E F2 | 	cmp	local02, #30 wz
0ce58     3C 00 90 AD |  if_e	jmp	#LR__1072
0ce5c     1F 28 0E F2 | 	cmp	local02, #31 wz
0ce60     3C 00 90 AD |  if_e	jmp	#LR__1073
0ce64     2B 28 0E F2 | 	cmp	local02, #43 wz
0ce68     40 00 90 AD |  if_e	jmp	#LR__1074
0ce6c     50 00 90 FD | 	jmp	#LR__1075
0ce70                 | LR__1070
0ce70     13 13 02 FB | 	rdlong	arg01, local01
0ce74     09 13 52 F6 | 	abs	arg01, arg01 wc
0ce78     1F 2A C6 C9 |  if_b	decod	local03, #31
0ce7c     00 2A 06 36 |  if_ae	mov	local03, #0
0ce80     04 9B B1 FD | 	call	#__system___float_fromuns
0ce84     15 FB 61 F5 | 	xor	result1, local03
0ce88     38 00 90 FD | 	jmp	#LR__1076
0ce8c                 | LR__1071
0ce8c     13 13 02 FB | 	rdlong	arg01, local01
0ce90     F4 9A B1 FD | 	call	#__system___float_fromuns
0ce94     2C 00 90 FD | 	jmp	#LR__1076
0ce98                 | LR__1072
0ce98     13 FB 01 FB | 	rdlong	result1, local01
0ce9c     24 00 90 FD | 	jmp	#LR__1076
0cea0                 | LR__1073
0cea0     13 13 02 FB | 	rdlong	arg01, local01
0cea4     F0 A6 B1 FD | 	call	#__system____builtin_atof
0cea8     18 00 90 FD | 	jmp	#LR__1076
0ceac                 | LR__1074
0ceac     13 13 02 FB | 	rdlong	arg01, local01
0ceb0     50 FE BF FD | 	call	#_convertstring
0ceb4     FD 12 02 F6 | 	mov	arg01, result1
0ceb8     DC A6 B1 FD | 	call	#__system____builtin_atof
0cebc     04 00 90 FD | 	jmp	#LR__1076
0cec0                 | LR__1075
0cec0     00 FA 05 F6 | 	mov	result1, #0
0cec4                 | LR__1076
0cec4     A7 F0 03 F6 | 	mov	ptra, fp
0cec8     B2 00 A0 FD | 	call	#popregs_
0cecc                 | _converttofloat_ret
0cecc     2D 00 64 FD | 	ret
0ced0                 | 
0ced0                 | ' 
0ced0                 | ' '----------------- End of converting 
0ced0                 | ' 
0ced0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ced0                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0ced0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ced0                 | ' 
0ced0                 | ' sub csave_block(address as ulong)
0ced0                 | _csave_block
0ced0     09 01 02 F6 | 	mov	_var01, arg01
0ced4                 | ' 
0ced4                 | ' for i=0 to 63 step 2
0ced4     00 02 06 F6 | 	mov	_var02, #0
0ced8                 | LR__1080
0ced8                 | '   do: loop until lpeek(base+64*7)>32768
0ced8     37 00 00 FF 
0cedc     10 E4 05 F1 | 	add	objptr, ##28176
0cee0     97 0C 48 FB | 	callpa	#(@LR__1082-@LR__1081)>>2,fcache_load_ptr_
0cee4                 | LR__1081
0cee4     F2 12 02 FB | 	rdlong	arg01, objptr
0cee8     C0 13 06 F1 | 	add	arg01, #448
0ceec     09 FB 01 FB | 	rdlong	result1, arg01
0cef0     40 00 00 FF 
0cef4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cef8     E8 FF 9F CD |  if_b	jmp	#LR__1081
0cefc                 | LR__1082
0cefc     00 13 02 F6 | 	mov	arg01, _var01
0cf00     01 05 02 F6 | 	mov	_var03, _var02
0cf04     02 04 66 F0 | 	shl	_var03, #2
0cf08     02 13 02 F1 | 	add	arg01, _var03
0cf0c     09 07 02 FB | 	rdlong	_var04, arg01
0cf10     1B 00 00 FF 
0cf14     08 E4 05 F1 | 	add	objptr, ##13832
0cf18     F2 06 62 FC | 	wrlong	_var04, objptr
0cf1c     52 00 00 FF 
0cf20     18 E4 85 F1 | 	sub	objptr, ##42008
0cf24                 | '   q=lpeek(address+4*i)
0cf24                 | '      for bit=0 to 31
0cf24     00 08 06 F6 | 	mov	_var05, #0
0cf28     97 84 48 FB | 	callpa	#(@LR__1087-@LR__1083)>>2,fcache_load_ptr_
0cf2c                 | LR__1083
0cf2c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0cf2c     52 00 00 FF 
0cf30     18 E4 05 F1 | 	add	objptr, ##42008
0cf34     F2 06 02 FB | 	rdlong	_var04, objptr
0cf38     52 00 00 FF 
0cf3c     18 E4 85 F1 | 	sub	objptr, ##42008
0cf40     04 05 C2 F9 | 	decod	_var03, _var05
0cf44     02 07 CA F7 | 	test	_var04, _var03 wz
0cf48     60 00 90 AD |  if_e	jmp	#LR__1084
0cf4c     04 05 02 F6 | 	mov	_var03, _var05
0cf50     02 04 66 F0 | 	shl	_var03, #2
0cf54     4D 00 00 FF 
0cf58     B4 E5 05 F1 | 	add	objptr, ##39860
0cf5c     F2 04 02 F1 | 	add	_var03, objptr
0cf60     02 FF 48 FC | 	wrbyte	#127, _var03
0cf64     04 05 02 F6 | 	mov	_var03, _var05
0cf68     02 04 66 F0 | 	shl	_var03, #2
0cf6c     01 04 06 F1 | 	add	_var03, #1
0cf70     F2 04 02 F1 | 	add	_var03, objptr
0cf74     02 01 49 FC | 	wrbyte	#128, _var03
0cf78     04 05 02 F6 | 	mov	_var03, _var05
0cf7c     02 04 66 F0 | 	shl	_var03, #2
0cf80     02 04 06 F1 | 	add	_var03, #2
0cf84     F2 04 02 F1 | 	add	_var03, objptr
0cf88     02 FF 48 FC | 	wrbyte	#127, _var03
0cf8c     04 05 02 F6 | 	mov	_var03, _var05
0cf90     02 04 66 F0 | 	shl	_var03, #2
0cf94     03 04 06 F1 | 	add	_var03, #3
0cf98     F2 04 02 F1 | 	add	_var03, objptr
0cf9c     02 01 49 FC | 	wrbyte	#128, _var03
0cfa0     4D 00 00 FF 
0cfa4     B4 E5 85 F1 | 	sub	objptr, ##39860
0cfa8     5C 00 90 FD | 	jmp	#LR__1085
0cfac                 | LR__1084
0cfac     04 05 02 F6 | 	mov	_var03, _var05
0cfb0     02 04 66 F0 | 	shl	_var03, #2
0cfb4     4D 00 00 FF 
0cfb8     B4 E5 05 F1 | 	add	objptr, ##39860
0cfbc     F2 04 02 F1 | 	add	_var03, objptr
0cfc0     02 01 49 FC | 	wrbyte	#128, _var03
0cfc4     04 05 02 F6 | 	mov	_var03, _var05
0cfc8     02 04 66 F0 | 	shl	_var03, #2
0cfcc     01 04 06 F1 | 	add	_var03, #1
0cfd0     F2 04 02 F1 | 	add	_var03, objptr
0cfd4     02 01 49 FC | 	wrbyte	#128, _var03
0cfd8     04 05 02 F6 | 	mov	_var03, _var05
0cfdc     02 04 66 F0 | 	shl	_var03, #2
0cfe0     02 04 06 F1 | 	add	_var03, #2
0cfe4     F2 04 02 F1 | 	add	_var03, objptr
0cfe8     02 FF 48 FC | 	wrbyte	#127, _var03
0cfec     04 05 02 F6 | 	mov	_var03, _var05
0cff0     02 04 66 F0 | 	shl	_var03, #2
0cff4     03 04 06 F1 | 	add	_var03, #3
0cff8     F2 04 02 F1 | 	add	_var03, objptr
0cffc     02 FF 48 FC | 	wrbyte	#127, _var03
0d000     4D 00 00 FF 
0d004     B4 E5 85 F1 | 	sub	objptr, ##39860
0d008                 | LR__1085
0d008     01 08 06 F1 | 	add	_var05, #1
0d00c     20 08 56 F2 | 	cmps	_var05, #32 wc
0d010     18 FF 9F CD |  if_b	jmp	#LR__1083
0d014                 | '   do: loop until lpeek(base+64*7)<32768
0d014     37 00 00 FF 
0d018     10 E4 05 F1 | 	add	objptr, ##28176
0d01c                 | LR__1086
0d01c     F2 12 02 FB | 	rdlong	arg01, objptr
0d020     C0 13 06 F1 | 	add	arg01, #448
0d024     09 FB 01 FB | 	rdlong	result1, arg01
0d028     40 00 00 FF 
0d02c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d030     E8 FF 9F 3D |  if_ae	jmp	#LR__1086
0d034                 | LR__1087
0d034     00 13 02 F6 | 	mov	arg01, _var01
0d038     04 12 06 F1 | 	add	arg01, #4
0d03c     01 05 02 F6 | 	mov	_var03, _var02
0d040     02 04 66 F0 | 	shl	_var03, #2
0d044     02 13 02 F1 | 	add	arg01, _var03
0d048     09 07 02 FB | 	rdlong	_var04, arg01
0d04c     1B 00 00 FF 
0d050     08 E4 05 F1 | 	add	objptr, ##13832
0d054     F2 06 62 FC | 	wrlong	_var04, objptr
0d058     52 00 00 FF 
0d05c     18 E4 85 F1 | 	sub	objptr, ##42008
0d060                 | '   q=lpeek(address+4+4*i)
0d060                 | '      for bit=0 to 31
0d060     00 08 06 F6 | 	mov	_var05, #0
0d064     97 94 48 FB | 	callpa	#(@LR__1091-@LR__1088)>>2,fcache_load_ptr_
0d068                 | LR__1088
0d068                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0d068     52 00 00 FF 
0d06c     18 E4 05 F1 | 	add	objptr, ##42008
0d070     F2 06 02 FB | 	rdlong	_var04, objptr
0d074     52 00 00 FF 
0d078     18 E4 85 F1 | 	sub	objptr, ##42008
0d07c     04 05 C2 F9 | 	decod	_var03, _var05
0d080     02 07 CA F7 | 	test	_var04, _var03 wz
0d084     80 00 90 AD |  if_e	jmp	#LR__1089
0d088     04 0B 02 F6 | 	mov	_var06, _var05
0d08c     02 0A 66 F0 | 	shl	_var06, #2
0d090     80 04 06 F6 | 	mov	_var03, #128
0d094     05 05 02 F1 | 	add	_var03, _var06
0d098     4D 00 00 FF 
0d09c     B4 E5 05 F1 | 	add	objptr, ##39860
0d0a0     F2 04 02 F1 | 	add	_var03, objptr
0d0a4     02 FF 48 FC | 	wrbyte	#127, _var03
0d0a8     04 0B 02 F6 | 	mov	_var06, _var05
0d0ac     02 0A 66 F0 | 	shl	_var06, #2
0d0b0     80 04 06 F6 | 	mov	_var03, #128
0d0b4     05 05 02 F1 | 	add	_var03, _var06
0d0b8     01 04 06 F1 | 	add	_var03, #1
0d0bc     F2 04 02 F1 | 	add	_var03, objptr
0d0c0     02 01 49 FC | 	wrbyte	#128, _var03
0d0c4     04 0B 02 F6 | 	mov	_var06, _var05
0d0c8     02 0A 66 F0 | 	shl	_var06, #2
0d0cc     80 04 06 F6 | 	mov	_var03, #128
0d0d0     05 05 02 F1 | 	add	_var03, _var06
0d0d4     02 04 06 F1 | 	add	_var03, #2
0d0d8     F2 04 02 F1 | 	add	_var03, objptr
0d0dc     02 FF 48 FC | 	wrbyte	#127, _var03
0d0e0     04 0B 02 F6 | 	mov	_var06, _var05
0d0e4     02 0A 66 F0 | 	shl	_var06, #2
0d0e8     80 04 06 F6 | 	mov	_var03, #128
0d0ec     05 05 02 F1 | 	add	_var03, _var06
0d0f0     03 04 06 F1 | 	add	_var03, #3
0d0f4     F2 04 02 F1 | 	add	_var03, objptr
0d0f8     02 01 49 FC | 	wrbyte	#128, _var03
0d0fc     4D 00 00 FF 
0d100     B4 E5 85 F1 | 	sub	objptr, ##39860
0d104     7C 00 90 FD | 	jmp	#LR__1090
0d108                 | LR__1089
0d108     04 0B 02 F6 | 	mov	_var06, _var05
0d10c     02 0A 66 F0 | 	shl	_var06, #2
0d110     80 04 06 F6 | 	mov	_var03, #128
0d114     05 05 02 F1 | 	add	_var03, _var06
0d118     4D 00 00 FF 
0d11c     B4 E5 05 F1 | 	add	objptr, ##39860
0d120     F2 04 02 F1 | 	add	_var03, objptr
0d124     02 01 49 FC | 	wrbyte	#128, _var03
0d128     04 0B 02 F6 | 	mov	_var06, _var05
0d12c     02 0A 66 F0 | 	shl	_var06, #2
0d130     80 04 06 F6 | 	mov	_var03, #128
0d134     05 05 02 F1 | 	add	_var03, _var06
0d138     01 04 06 F1 | 	add	_var03, #1
0d13c     F2 04 02 F1 | 	add	_var03, objptr
0d140     02 01 49 FC | 	wrbyte	#128, _var03
0d144     04 0B 02 F6 | 	mov	_var06, _var05
0d148     02 0A 66 F0 | 	shl	_var06, #2
0d14c     80 04 06 F6 | 	mov	_var03, #128
0d150     05 05 02 F1 | 	add	_var03, _var06
0d154     02 04 06 F1 | 	add	_var03, #2
0d158     F2 04 02 F1 | 	add	_var03, objptr
0d15c     02 FF 48 FC | 	wrbyte	#127, _var03
0d160     04 0B 02 F6 | 	mov	_var06, _var05
0d164     02 0A 66 F0 | 	shl	_var06, #2
0d168     80 04 06 F6 | 	mov	_var03, #128
0d16c     05 05 02 F1 | 	add	_var03, _var06
0d170     03 04 06 F1 | 	add	_var03, #3
0d174     F2 04 02 F1 | 	add	_var03, objptr
0d178     02 FF 48 FC | 	wrbyte	#127, _var03
0d17c     4D 00 00 FF 
0d180     B4 E5 85 F1 | 	sub	objptr, ##39860
0d184                 | LR__1090
0d184     01 08 06 F1 | 	add	_var05, #1
0d188     20 08 56 F2 | 	cmps	_var05, #32 wc
0d18c     D8 FE 9F CD |  if_b	jmp	#LR__1088
0d190                 | LR__1091
0d190     02 02 06 F1 | 	add	_var02, #2
0d194     40 02 56 F2 | 	cmps	_var02, #64 wc
0d198     3C FD 9F CD |  if_b	jmp	#LR__1080
0d19c                 | ' do: loop until lpeek(base+64*7)>32768
0d19c     37 00 00 FF 
0d1a0     10 E4 05 F1 | 	add	objptr, ##28176
0d1a4     97 84 48 FB | 	callpa	#(@LR__1100-@LR__1092)>>2,fcache_load_ptr_
0d1a8                 | LR__1092
0d1a8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ac     C0 13 06 F1 | 	add	arg01, #448
0d1b0     09 FB 01 FB | 	rdlong	result1, arg01
0d1b4     40 00 00 FF 
0d1b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d1bc     E8 FF 9F CD |  if_b	jmp	#LR__1092
0d1c0     37 00 00 FF 
0d1c4     10 E4 85 F1 | 	sub	objptr, ##28176
0d1c8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d1c8     00 02 06 F6 | 	mov	_var02, #0
0d1cc                 | LR__1093
0d1cc     01 07 52 F6 | 	abs	_var04, _var02 wc
0d1d0     07 06 06 F5 | 	and	_var04, #7
0d1d4     03 07 82 F6 | 	negc	_var04, _var04
0d1d8     04 06 56 F2 | 	cmps	_var04, #4 wc
0d1dc     20 00 90 3D |  if_ae	jmp	#LR__1094
0d1e0     01 0B 02 F6 | 	mov	_var06, _var02
0d1e4     4D 00 00 FF 
0d1e8     B4 E5 05 F1 | 	add	objptr, ##39860
0d1ec     F2 0A 02 F1 | 	add	_var06, objptr
0d1f0     05 FF 48 FC | 	wrbyte	#127, _var06
0d1f4     4D 00 00 FF 
0d1f8     B4 E5 85 F1 | 	sub	objptr, ##39860
0d1fc     1C 00 90 FD | 	jmp	#LR__1095
0d200                 | LR__1094
0d200     01 0B 02 F6 | 	mov	_var06, _var02
0d204     4D 00 00 FF 
0d208     B4 E5 05 F1 | 	add	objptr, ##39860
0d20c     F2 0A 02 F1 | 	add	_var06, objptr
0d210     05 01 49 FC | 	wrbyte	#128, _var06
0d214     4D 00 00 FF 
0d218     B4 E5 85 F1 | 	sub	objptr, ##39860
0d21c                 | LR__1095
0d21c     01 02 06 F1 | 	add	_var02, #1
0d220     80 02 56 F2 | 	cmps	_var02, #128 wc
0d224     A4 FF 9F CD |  if_b	jmp	#LR__1093
0d228                 | ' 
0d228                 | ' do: loop until lpeek(base+64*7)<32768
0d228     37 00 00 FF 
0d22c     10 E4 05 F1 | 	add	objptr, ##28176
0d230                 | LR__1096
0d230     F2 12 02 FB | 	rdlong	arg01, objptr
0d234     C0 13 06 F1 | 	add	arg01, #448
0d238     09 FB 01 FB | 	rdlong	result1, arg01
0d23c     40 00 00 FF 
0d240     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d244     E8 FF 9F 3D |  if_ae	jmp	#LR__1096
0d248     37 00 00 FF 
0d24c     10 E4 85 F1 | 	sub	objptr, ##28176
0d250                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d250     80 02 06 F6 | 	mov	_var02, #128
0d254                 | LR__1097
0d254     01 07 52 F6 | 	abs	_var04, _var02 wc
0d258     07 06 06 F5 | 	and	_var04, #7
0d25c     03 07 82 F6 | 	negc	_var04, _var04
0d260     04 06 56 F2 | 	cmps	_var04, #4 wc
0d264     20 00 90 3D |  if_ae	jmp	#LR__1098
0d268     01 0B 02 F6 | 	mov	_var06, _var02
0d26c     4D 00 00 FF 
0d270     B4 E5 05 F1 | 	add	objptr, ##39860
0d274     F2 0A 02 F1 | 	add	_var06, objptr
0d278     05 FF 48 FC | 	wrbyte	#127, _var06
0d27c     4D 00 00 FF 
0d280     B4 E5 85 F1 | 	sub	objptr, ##39860
0d284     1C 00 90 FD | 	jmp	#LR__1099
0d288                 | LR__1098
0d288     01 0B 02 F6 | 	mov	_var06, _var02
0d28c     4D 00 00 FF 
0d290     B4 E5 05 F1 | 	add	objptr, ##39860
0d294     F2 0A 02 F1 | 	add	_var06, objptr
0d298     05 01 49 FC | 	wrbyte	#128, _var06
0d29c     4D 00 00 FF 
0d2a0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d2a4                 | LR__1099
0d2a4     01 02 06 F1 | 	add	_var02, #1
0d2a8     00 03 16 F2 | 	cmp	_var02, #256 wc
0d2ac     A4 FF 9F CD |  if_b	jmp	#LR__1097
0d2b0                 | LR__1100
0d2b0                 | _csave_block_ret
0d2b0     2D 00 64 FD | 	ret
0d2b4                 | 
0d2b4                 | ' 
0d2b4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d2b4                 | _csave_addtoblock
0d2b4     04 4A 05 F6 | 	mov	COUNT_, #4
0d2b8     A8 00 A0 FD | 	call	#pushregs_
0d2bc     09 27 02 F6 | 	mov	local01, arg01
0d2c0                 | ' 
0d2c0                 | ' if force=0 then
0d2c0     07 14 4E F7 | 	zerox	arg02, #7 wz
0d2c4     78 00 90 5D |  if_ne	jmp	#LR__1110
0d2c8     50 00 00 FF 
0d2cc     B4 E4 05 F1 | 	add	objptr, ##41140
0d2d0     F2 14 02 FB | 	rdlong	arg02, objptr
0d2d4     02 00 00 FF 
0d2d8     00 E4 85 F1 | 	sub	objptr, ##1024
0d2dc     F2 14 02 F1 | 	add	arg02, objptr
0d2e0     0A 27 42 FC | 	wrbyte	local01, arg02
0d2e4     02 00 00 FF 
0d2e8     00 E4 05 F1 | 	add	objptr, ##1024
0d2ec     F2 26 02 FB | 	rdlong	local01, objptr
0d2f0     01 26 06 F1 | 	add	local01, #1
0d2f4     F2 26 62 FC | 	wrlong	local01, objptr
0d2f8                 | '   block(blockptr)=d
0d2f8                 | '   blockptr+=1
0d2f8                 | '   if blockptr>=255 then
0d2f8     50 00 00 FF 
0d2fc     B4 E4 85 F1 | 	sub	objptr, ##41140
0d300     FF 26 16 F2 | 	cmp	local01, #255 wc
0d304     E4 00 90 CD |  if_b	jmp	#LR__1114
0d308     4E 00 00 FF 
0d30c     B4 E4 05 F1 | 	add	objptr, ##40116
0d310     F2 12 02 F6 | 	mov	arg01, objptr
0d314     4E 00 00 FF 
0d318     B4 E4 85 F1 | 	sub	objptr, ##40116
0d31c     B0 FB BF FD | 	call	#_csave_block
0d320     50 00 00 FF 
0d324     B4 E4 05 F1 | 	add	objptr, ##41140
0d328     F2 00 68 FC | 	wrlong	#0, objptr
0d32c     50 00 00 FF 
0d330     B4 E4 85 F1 | 	sub	objptr, ##41140
0d334     2C 13 06 F6 | 	mov	arg01, #300
0d338     CC 6E B1 FD | 	call	#__system___waitms
0d33c     AC 00 90 FD | 	jmp	#LR__1114
0d340                 | LR__1110
0d340     50 00 00 FF 
0d344     B4 E4 05 F1 | 	add	objptr, ##41140
0d348     F2 28 02 FB | 	rdlong	local02, objptr
0d34c     02 00 00 FF 
0d350     00 E4 85 F1 | 	sub	objptr, ##1024
0d354     F2 28 02 F1 | 	add	local02, objptr
0d358     14 27 42 FC | 	wrbyte	local01, local02
0d35c                 | '   block(blockptr)=d
0d35c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d35c     02 00 00 FF 
0d360     00 E4 05 F1 | 	add	objptr, ##1024
0d364     F2 2A 02 FB | 	rdlong	local03, objptr
0d368     50 00 00 FF 
0d36c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d370     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d374     40 00 90 3D |  if_ae	jmp	#LR__1113
0d378     50 00 00 FF 
0d37c     B4 E4 05 F1 | 	add	objptr, ##41140
0d380     F2 2C 02 FB | 	rdlong	local04, objptr
0d384     50 00 00 FF 
0d388     B4 E4 85 F1 | 	sub	objptr, ##41140
0d38c                 | LR__1111
0d38c     00 2D 56 F2 | 	cmps	local04, #256 wc
0d390     24 00 90 3D |  if_ae	jmp	#LR__1112
0d394     16 29 02 F6 | 	mov	local02, local04
0d398     4E 00 00 FF 
0d39c     B4 E4 05 F1 | 	add	objptr, ##40116
0d3a0     F2 28 02 F1 | 	add	local02, objptr
0d3a4     14 01 48 FC | 	wrbyte	#0, local02
0d3a8     01 2C 06 F1 | 	add	local04, #1
0d3ac     4E 00 00 FF 
0d3b0     B4 E4 85 F1 | 	sub	objptr, ##40116
0d3b4     D4 FF 9F FD | 	jmp	#LR__1111
0d3b8                 | LR__1112
0d3b8                 | LR__1113
0d3b8     4E 00 00 FF 
0d3bc     B4 E4 05 F1 | 	add	objptr, ##40116
0d3c0     F2 12 02 F6 | 	mov	arg01, objptr
0d3c4     4E 00 00 FF 
0d3c8     B4 E4 85 F1 | 	sub	objptr, ##40116
0d3cc     00 FB BF FD | 	call	#_csave_block
0d3d0     50 00 00 FF 
0d3d4     B4 E4 05 F1 | 	add	objptr, ##41140
0d3d8     F2 00 68 FC | 	wrlong	#0, objptr
0d3dc     50 00 00 FF 
0d3e0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d3e4     2C 13 06 F6 | 	mov	arg01, #300
0d3e8     1C 6E B1 FD | 	call	#__system___waitms
0d3ec                 | LR__1114
0d3ec     A7 F0 03 F6 | 	mov	ptra, fp
0d3f0     B2 00 A0 FD | 	call	#popregs_
0d3f4                 | _csave_addtoblock_ret
0d3f4     2D 00 64 FD | 	ret
0d3f8                 | 
0d3f8                 | ' 
0d3f8                 | ' '----------------------- csave
0d3f8                 | ' 
0d3f8                 | ' sub test_csave
0d3f8                 | _test_csave
0d3f8     04 4A 05 F6 | 	mov	COUNT_, #4
0d3fc     A8 00 A0 FD | 	call	#pushregs_
0d400     C0 F0 07 F1 | 	add	ptra, #192
0d404                 | ' 'dim fileheader,savestart, saveptr as ulong
0d404                 | ' 
0d404                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d404     4A 00 00 FF 
0d408     88 E4 05 F1 | 	add	objptr, ##38024
0d40c     F2 12 02 FB | 	rdlong	arg01, objptr
0d410     4A 00 00 FF 
0d414     88 E4 85 F1 | 	sub	objptr, ##38024
0d418     24 34 B1 FD | 	call	#_pslpeek
0d41c     FF FF 7F FF 
0d420     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d424     10 00 90 5D |  if_ne	jmp	#LR__1120
0d428     1B 12 06 F6 | 	mov	arg01, #27
0d42c     00 14 06 F6 | 	mov	arg02, #0
0d430     3C 31 B1 FD | 	call	#_printerror
0d434     1C 03 90 FD | 	jmp	#LR__1134
0d438                 | LR__1120
0d438     50 F7 BF FD | 	call	#_pop
0d43c     90 4E 05 F1 | 	add	fp, #144
0d440     A7 FA 61 FC | 	wrlong	result1, fp
0d444     04 4E 05 F1 | 	add	fp, #4
0d448     A7 FC 61 FC | 	wrlong	result2, fp
0d44c     04 4E 05 F1 | 	add	fp, #4
0d450     A7 FE 61 FC | 	wrlong	result3, fp
0d454                 | ' t1=pop()
0d454                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d454     98 4E 85 F1 | 	sub	fp, #152
0d458     1F FE 0D F2 | 	cmp	result3, #31 wz
0d45c     24 00 90 AD |  if_e	jmp	#LR__1121
0d460     51 00 00 FF 
0d464     D8 E5 05 F1 | 	add	objptr, ##41944
0d468     F2 1C 02 FB | 	rdlong	arg06, objptr
0d46c     51 00 00 FF 
0d470     D8 E5 85 F1 | 	sub	objptr, ##41944
0d474     8C 4E 05 F1 | 	add	fp, #140
0d478     A7 1C 62 FC | 	wrlong	arg06, fp
0d47c     8C 4E 85 F1 | 	sub	fp, #140
0d480     14 00 90 FD | 	jmp	#LR__1122
0d484                 | LR__1121
0d484     90 4E 05 F1 | 	add	fp, #144
0d488     A7 1C 02 FB | 	rdlong	arg06, fp
0d48c     04 4E 85 F1 | 	sub	fp, #4
0d490     A7 1C 62 FC | 	wrlong	arg06, fp
0d494     8C 4E 85 F1 | 	sub	fp, #140
0d498                 | LR__1122
0d498                 | ' 
0d498                 | ' ' prepare 1 kHz header wave
0d498                 | ' 
0d498                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d498     A7 00 68 FC | 	wrlong	#0, fp
0d49c     97 34 48 FB | 	callpa	#(@LR__1126-@LR__1123)>>2,fcache_load_ptr_
0d4a0                 | LR__1123
0d4a0     A7 1C 02 FB | 	rdlong	arg06, fp
0d4a4     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d4a8     07 1A 06 F5 | 	and	arg05, #7
0d4ac     0D 1B 82 F6 | 	negc	arg05, arg05
0d4b0     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d4b4     20 00 90 3D |  if_ae	jmp	#LR__1124
0d4b8     A7 1A 02 FB | 	rdlong	arg05, fp
0d4bc     4D 00 00 FF 
0d4c0     B4 E5 05 F1 | 	add	objptr, ##39860
0d4c4     F2 1A 02 F1 | 	add	arg05, objptr
0d4c8     0D FF 48 FC | 	wrbyte	#127, arg05
0d4cc     4D 00 00 FF 
0d4d0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d4d4     1C 00 90 FD | 	jmp	#LR__1125
0d4d8                 | LR__1124
0d4d8     A7 1A 02 FB | 	rdlong	arg05, fp
0d4dc     4D 00 00 FF 
0d4e0     B4 E5 05 F1 | 	add	objptr, ##39860
0d4e4     F2 1A 02 F1 | 	add	arg05, objptr
0d4e8     0D 01 49 FC | 	wrbyte	#128, arg05
0d4ec     4D 00 00 FF 
0d4f0     B4 E5 85 F1 | 	sub	objptr, ##39860
0d4f4                 | LR__1125
0d4f4     A7 1A 02 FB | 	rdlong	arg05, fp
0d4f8     01 1A 06 F1 | 	add	arg05, #1
0d4fc     A7 1A 62 FC | 	wrlong	arg05, fp
0d500     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d504     98 FF 9F CD |  if_b	jmp	#LR__1123
0d508                 | LR__1126
0d508     4D 00 00 FF 
0d50c     B4 E5 05 F1 | 	add	objptr, ##39860
0d510     F2 14 02 F6 | 	mov	arg02, objptr
0d514     07 12 06 F6 | 	mov	arg01, #7
0d518     0F 00 00 FF 
0d51c     40 17 06 F6 | 	mov	arg03, ##8000
0d520     0E 18 C6 F9 | 	decod	arg04, #14
0d524     00 1B 06 F6 | 	mov	arg05, #256
0d528     00 1C 06 F6 | 	mov	arg06, #0
0d52c     42 00 00 FF 
0d530     E8 E4 85 F1 | 	sub	objptr, ##34024
0d534     38 66 B1 FD | 	call	#_audio096_spin2_play8
0d538     0B 00 00 FF 
0d53c     CC E4 85 F1 | 	sub	objptr, ##5836
0d540     05 00 00 FF 
0d544     B8 13 06 F6 | 	mov	arg01, ##3000
0d548     BC 6C B1 FD | 	call	#__system___waitms
0d54c     50 00 00 FF 
0d550     B4 E4 05 F1 | 	add	objptr, ##41140
0d554     F2 00 68 FC | 	wrlong	#0, objptr
0d558     50 00 00 FF 
0d55c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d560     72 12 06 F6 | 	mov	arg01, #114
0d564     00 14 06 F6 | 	mov	arg02, #0
0d568     48 FD BF FD | 	call	#_csave_addtoblock
0d56c     62 12 06 F6 | 	mov	arg01, #98
0d570     00 14 06 F6 | 	mov	arg02, #0
0d574     3C FD BF FD | 	call	#_csave_addtoblock
0d578     61 12 06 F6 | 	mov	arg01, #97
0d57c     00 14 06 F6 | 	mov	arg02, #0
0d580     30 FD BF FD | 	call	#_csave_addtoblock
0d584     0D 12 06 F6 | 	mov	arg01, #13
0d588     00 14 06 F6 | 	mov	arg02, #0
0d58c     24 FD BF FD | 	call	#_csave_addtoblock
0d590                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d590                 | ' waitms 3000 
0d590                 | ' 
0d590                 | ' blockptr=0
0d590                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d590                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d590     A7 02 68 FC | 	wrlong	#1, fp
0d594     8C 4E 05 F1 | 	add	fp, #140
0d598     A7 12 02 FB | 	rdlong	arg01, fp
0d59c     8C 4E 85 F1 | 	sub	fp, #140
0d5a0     09 27 02 F6 | 	mov	local01, arg01
0d5a4     97 06 48 FB | 	callpa	#(@LR__1128-@LR__1127)>>2,fcache_load_ptr_
0d5a8                 | LR__1127
0d5a8     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d5ac     01 26 06 51 |  if_ne	add	local01, #1
0d5b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1127
0d5b4                 | LR__1128
0d5b4     09 27 82 F1 | 	sub	local01, arg01
0d5b8     13 29 02 F6 | 	mov	local02, local01
0d5bc     01 28 06 F1 | 	add	local02, #1
0d5c0                 | LR__1129
0d5c0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5c4     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d5c8     34 00 90 3D |  if_ae	jmp	#LR__1130
0d5cc     8C 4E 05 F1 | 	add	fp, #140
0d5d0     A7 12 02 FB | 	rdlong	arg01, fp
0d5d4     8C 4E 85 F1 | 	sub	fp, #140
0d5d8     A7 14 02 FB | 	rdlong	arg02, fp
0d5dc     01 16 06 F6 | 	mov	arg03, #1
0d5e0     C4 8A B1 FD | 	call	#__system__Mid_S
0d5e4     FD 12 C2 FA | 	rdbyte	arg01, result1
0d5e8     00 14 06 F6 | 	mov	arg02, #0
0d5ec     C4 FC BF FD | 	call	#_csave_addtoblock
0d5f0     A7 1A 02 FB | 	rdlong	arg05, fp
0d5f4     01 1A 06 F1 | 	add	arg05, #1
0d5f8     A7 1A 62 FC | 	wrlong	arg05, fp
0d5fc     C0 FF 9F FD | 	jmp	#LR__1129
0d600                 | LR__1130
0d600     00 12 06 F6 | 	mov	arg01, #0
0d604     00 14 06 F6 | 	mov	arg02, #0
0d608     A8 FC BF FD | 	call	#_csave_addtoblock
0d60c     72 12 06 F6 | 	mov	arg01, #114
0d610     00 14 06 F6 | 	mov	arg02, #0
0d614     9C FC BF FD | 	call	#_csave_addtoblock
0d618     62 12 06 F6 | 	mov	arg01, #98
0d61c     00 14 06 F6 | 	mov	arg02, #0
0d620     90 FC BF FD | 	call	#_csave_addtoblock
0d624     73 12 06 F6 | 	mov	arg01, #115
0d628     00 14 06 F6 | 	mov	arg02, #0
0d62c     84 FC BF FD | 	call	#_csave_addtoblock
0d630     0D 12 06 F6 | 	mov	arg01, #13
0d634     00 14 06 F6 | 	mov	arg02, #0
0d638     78 FC BF FD | 	call	#_csave_addtoblock
0d63c     4A 00 00 FF 
0d640     88 E4 05 F1 | 	add	objptr, ##38024
0d644     F2 2A 02 FB | 	rdlong	local03, objptr
0d648     4A 00 00 FF 
0d64c     88 E4 85 F1 | 	sub	objptr, ##38024
0d650     9C 4E 05 F1 | 	add	fp, #156
0d654     A7 2A 62 FC | 	wrlong	local03, fp
0d658     9C 4E 85 F1 | 	sub	fp, #156
0d65c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d65c                 | ' 
0d65c                 | ' saveptr=programstart
0d65c                 | ' do
0d65c                 | LR__1131
0d65c     A0 4E 05 F1 | 	add	fp, #160
0d660     A7 12 02 F6 | 	mov	arg01, fp
0d664     04 4E 85 F1 | 	sub	fp, #4
0d668     A7 14 02 FB | 	rdlong	arg02, fp
0d66c     9C 4E 85 F1 | 	sub	fp, #156
0d670     18 16 06 F6 | 	mov	arg03, #24
0d674     0B 00 00 FF 
0d678     CC E4 05 F1 | 	add	objptr, ##5836
0d67c     54 5C B1 FD | 	call	#_psram_spin2_read1
0d680     0C 4E 05 F1 | 	add	fp, #12
0d684     A7 12 02 F6 | 	mov	arg01, fp
0d688     9C 4E 05 F1 | 	add	fp, #156
0d68c     A7 14 02 FB | 	rdlong	arg02, fp
0d690     04 4E 05 F1 | 	add	fp, #4
0d694     A7 16 02 FB | 	rdlong	arg03, fp
0d698     AC 4E 85 F1 | 	sub	fp, #172
0d69c     34 5C B1 FD | 	call	#_psram_spin2_read1
0d6a0     0B 00 00 FF 
0d6a4     CC E4 85 F1 | 	sub	objptr, ##5836
0d6a8     AC 4E 05 F1 | 	add	fp, #172
0d6ac     A7 12 02 FB | 	rdlong	arg01, fp
0d6b0     AC 4E 85 F1 | 	sub	fp, #172
0d6b4     00 14 06 F6 | 	mov	arg02, #0
0d6b8     F8 FB BF FD | 	call	#_csave_addtoblock
0d6bc                 | ' 
0d6bc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d6bc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d6bc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d6bc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d6bc     A7 00 68 FC | 	wrlong	#0, fp
0d6c0     AC 4E 05 F1 | 	add	fp, #172
0d6c4     A7 2C 02 FB | 	rdlong	local04, fp
0d6c8     AC 4E 85 F1 | 	sub	fp, #172
0d6cc                 | LR__1132
0d6cc     A7 2A 02 FB | 	rdlong	local03, fp
0d6d0     16 2B 52 F2 | 	cmps	local03, local04 wc
0d6d4     2C 00 90 3D |  if_ae	jmp	#LR__1133
0d6d8     A7 2A 02 FB | 	rdlong	local03, fp
0d6dc     0C 4E 05 F1 | 	add	fp, #12
0d6e0     A7 2A 02 F1 | 	add	local03, fp
0d6e4     15 13 C2 FA | 	rdbyte	arg01, local03
0d6e8     00 14 06 F6 | 	mov	arg02, #0
0d6ec     0C 4E 85 F1 | 	sub	fp, #12
0d6f0     C0 FB BF FD | 	call	#_csave_addtoblock
0d6f4     A7 2A 02 FB | 	rdlong	local03, fp
0d6f8     01 2A 06 F1 | 	add	local03, #1
0d6fc     A7 2A 62 FC | 	wrlong	local03, fp
0d700     C8 FF 9F FD | 	jmp	#LR__1132
0d704                 | LR__1133
0d704     B4 4E 05 F1 | 	add	fp, #180
0d708     A7 2A 02 FB | 	rdlong	local03, fp
0d70c     18 4E 85 F1 | 	sub	fp, #24
0d710     A7 2A 62 FC | 	wrlong	local03, fp
0d714     18 4E 05 F1 | 	add	fp, #24
0d718     A7 2A 02 FB | 	rdlong	local03, fp
0d71c     B4 4E 85 F1 | 	sub	fp, #180
0d720     FF FF 3F FF 
0d724     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d728     30 FF 9F 5D |  if_ne	jmp	#LR__1131
0d72c     00 12 06 F6 | 	mov	arg01, #0
0d730     01 14 06 F6 | 	mov	arg02, #1
0d734     7C FB BF FD | 	call	#_csave_addtoblock
0d738     37 00 00 FF 
0d73c     10 E4 05 F1 | 	add	objptr, ##28176
0d740     F2 12 02 FB | 	rdlong	arg01, objptr
0d744     37 00 00 FF 
0d748     10 E4 85 F1 | 	sub	objptr, ##28176
0d74c     D4 13 06 F1 | 	add	arg01, #468
0d750     09 01 58 FC | 	wrword	#0, arg01
0d754                 | LR__1134
0d754     A7 F0 03 F6 | 	mov	ptra, fp
0d758     B2 00 A0 FD | 	call	#popregs_
0d75c                 | _test_csave_ret
0d75c     2D 00 64 FD | 	ret
0d760                 | 
0d760                 | ' 
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' 
0d760                 | ' 
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d760                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d760                 | ' 
0d760                 | ' '-------------------- abs
0d760                 | ' 
0d760                 | ' sub do_abs
0d760                 | _do_abs
0d760     01 4A 05 F6 | 	mov	COUNT_, #1
0d764     A8 00 A0 FD | 	call	#pushregs_
0d768     0C F0 07 F1 | 	add	ptra, #12
0d76c     1C F4 BF FD | 	call	#_pop
0d770     FF 26 02 F6 | 	mov	local01, result3
0d774     A7 FA 61 FC | 	wrlong	result1, fp
0d778     04 4E 05 F1 | 	add	fp, #4
0d77c     A7 FC 61 FC | 	wrlong	result2, fp
0d780     04 4E 05 F1 | 	add	fp, #4
0d784     A7 26 62 FC | 	wrlong	local01, fp
0d788                 | ' 
0d788                 | ' t1=pop()
0d788                 | ' if t1.result_type=result_int then 
0d788     08 4E 85 F1 | 	sub	fp, #8
0d78c     1C 26 0E F2 | 	cmp	local01, #28 wz
0d790     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d794     09 27 42 A6 |  if_e	abs	local01, arg01
0d798     A7 26 62 AC |  if_e	wrlong	local01, fp
0d79c     2C 00 90 AD |  if_e	jmp	#LR__1140
0d7a0     08 4E 05 F1 | 	add	fp, #8
0d7a4     A7 26 02 FB | 	rdlong	local01, fp
0d7a8     08 4E 85 F1 | 	sub	fp, #8
0d7ac     1E 26 0E F2 | 	cmp	local01, #30 wz
0d7b0     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d7b4     1F FA 05 A4 |  if_e	bitl	result1, #31
0d7b8     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d7bc     08 4E 05 51 |  if_ne	add	fp, #8
0d7c0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d7c4     08 4E 85 51 |  if_ne	sub	fp, #8
0d7c8     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d7cc                 | LR__1140
0d7cc     A7 12 02 F6 | 	mov	arg01, fp
0d7d0     50 F4 BF FD | 	call	#_push
0d7d4     A7 F0 03 F6 | 	mov	ptra, fp
0d7d8     B2 00 A0 FD | 	call	#popregs_
0d7dc                 | _do_abs_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' '-------------------- acos
0d7e0                 | ' 
0d7e0                 | ' sub do_acos
0d7e0                 | _do_acos
0d7e0     01 4A 05 F6 | 	mov	COUNT_, #1
0d7e4     A8 00 A0 FD | 	call	#pushregs_
0d7e8     10 F0 07 F1 | 	add	ptra, #16
0d7ec     4A 00 00 FF 
0d7f0     80 E4 05 F1 | 	add	objptr, ##38016
0d7f4     F2 26 02 FB | 	rdlong	local01, objptr
0d7f8     13 17 02 F6 | 	mov	arg03, local01
0d7fc     01 16 66 F0 | 	shl	arg03, #1
0d800     13 17 02 F1 | 	add	arg03, local01
0d804     02 16 66 F0 | 	shl	arg03, #2
0d808     03 00 00 FF 
0d80c     04 E4 85 F1 | 	sub	objptr, ##1540
0d810     F2 16 02 F1 | 	add	arg03, objptr
0d814     0B 17 02 FB | 	rdlong	arg03, arg03
0d818     0C 4E 05 F1 | 	add	fp, #12
0d81c     A7 16 62 FC | 	wrlong	arg03, fp
0d820                 | ' 
0d820                 | ' numpar=compiledline(lineptr_e).result.uresult
0d820                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d820     0C 4E 85 F1 | 	sub	fp, #12
0d824     02 16 16 F2 | 	cmp	arg03, #2 wc
0d828     47 00 00 FF 
0d82c     7C E4 85 F1 | 	sub	objptr, ##36476
0d830     0C 4E 05 C1 |  if_b	add	fp, #12
0d834     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d838     0C 4E 85 C1 |  if_b	sub	fp, #12
0d83c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0d840     00 12 06 F6 | 	mov	arg01, #0
0d844     F4 C3 B1 FD | 	call	#__system___getiolock_0579
0d848     FD 12 02 F6 | 	mov	arg01, result1
0d84c     C4 66 B1 FD | 	call	#__system___lockmem
0d850     A0 01 00 FF 
0d854     4F 15 06 F6 | 	mov	arg02, ##@LR__5688
0d858     00 12 06 F6 | 	mov	arg01, #0
0d85c     00 16 06 F6 | 	mov	arg03, #0
0d860     A4 73 B1 FD | 	call	#__system___basic_print_string
0d864     00 12 06 F6 | 	mov	arg01, #0
0d868     D0 C3 B1 FD | 	call	#__system___getiolock_0579
0d86c     FD 00 68 FC | 	wrlong	#0, result1
0d870     27 12 06 F6 | 	mov	arg01, #39
0d874     00 14 06 F6 | 	mov	arg02, #0
0d878     F4 2C B1 FD | 	call	#_printerror
0d87c     64 00 90 FD | 	jmp	#LR__1151
0d880                 | LR__1150
0d880     08 F3 BF FD | 	call	#_pop
0d884     FF 26 02 F6 | 	mov	local01, result3
0d888     A7 FA 61 FC | 	wrlong	result1, fp
0d88c     04 4E 05 F1 | 	add	fp, #4
0d890     A7 FC 61 FC | 	wrlong	result2, fp
0d894     04 4E 05 F1 | 	add	fp, #4
0d898     A7 26 62 FC | 	wrlong	local01, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     A7 12 02 F6 | 	mov	arg01, fp
0d8a4     84 F5 BF FD | 	call	#_converttofloat
0d8a8     FD 12 02 F6 | 	mov	arg01, result1
0d8ac     1C A0 B1 FD | 	call	#__system____builtin_acosf
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     51 00 00 FF 
0d8b8     C0 E5 05 F1 | 	add	objptr, ##41920
0d8bc     F2 14 02 FB | 	rdlong	arg02, objptr
0d8c0     51 00 00 FF 
0d8c4     C0 E5 85 F1 | 	sub	objptr, ##41920
0d8c8     C0 94 B1 FD | 	call	#__system___float_mul
0d8cc     A7 FA 61 FC | 	wrlong	result1, fp
0d8d0     08 4E 05 F1 | 	add	fp, #8
0d8d4     A7 3C 68 FC | 	wrlong	#30, fp
0d8d8     08 4E 85 F1 | 	sub	fp, #8
0d8dc     A7 12 02 F6 | 	mov	arg01, fp
0d8e0     40 F3 BF FD | 	call	#_push
0d8e4                 | LR__1151
0d8e4     A7 F0 03 F6 | 	mov	ptra, fp
0d8e8     B2 00 A0 FD | 	call	#popregs_
0d8ec                 | _do_acos_ret
0d8ec     2D 00 64 FD | 	ret
0d8f0                 | 
0d8f0                 | ' 
0d8f0                 | ' '-------------------- asc
0d8f0                 | ' 
0d8f0                 | ' sub do_asc
0d8f0                 | _do_asc
0d8f0     01 4A 05 F6 | 	mov	COUNT_, #1
0d8f4     A8 00 A0 FD | 	call	#pushregs_
0d8f8     14 F0 07 F1 | 	add	ptra, #20
0d8fc     4A 00 00 FF 
0d900     80 E4 05 F1 | 	add	objptr, ##38016
0d904     F2 26 02 FB | 	rdlong	local01, objptr
0d908     13 17 02 F6 | 	mov	arg03, local01
0d90c     01 16 66 F0 | 	shl	arg03, #1
0d910     13 17 02 F1 | 	add	arg03, local01
0d914     02 16 66 F0 | 	shl	arg03, #2
0d918     03 00 00 FF 
0d91c     04 E4 85 F1 | 	sub	objptr, ##1540
0d920     F2 16 02 F1 | 	add	arg03, objptr
0d924     0B 17 02 FB | 	rdlong	arg03, arg03
0d928     0C 4E 05 F1 | 	add	fp, #12
0d92c     A7 16 62 FC | 	wrlong	arg03, fp
0d930                 | ' 
0d930                 | ' numpar=compiledline(lineptr_e).result.uresult
0d930                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d930     0C 4E 85 F1 | 	sub	fp, #12
0d934     02 16 16 F2 | 	cmp	arg03, #2 wc
0d938     47 00 00 FF 
0d93c     7C E4 85 F1 | 	sub	objptr, ##36476
0d940     0C 4E 05 C1 |  if_b	add	fp, #12
0d944     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d948     0C 4E 85 C1 |  if_b	sub	fp, #12
0d94c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d950     00 12 06 F6 | 	mov	arg01, #0
0d954     E4 C2 B1 FD | 	call	#__system___getiolock_0579
0d958     FD 12 02 F6 | 	mov	arg01, result1
0d95c     B4 65 B1 FD | 	call	#__system___lockmem
0d960     A0 01 00 FF 
0d964     56 15 06 F6 | 	mov	arg02, ##@LR__5689
0d968     00 12 06 F6 | 	mov	arg01, #0
0d96c     00 16 06 F6 | 	mov	arg03, #0
0d970     94 72 B1 FD | 	call	#__system___basic_print_string
0d974     00 12 06 F6 | 	mov	arg01, #0
0d978     C0 C2 B1 FD | 	call	#__system___getiolock_0579
0d97c     FD 00 68 FC | 	wrlong	#0, result1
0d980     27 12 06 F6 | 	mov	arg01, #39
0d984     00 14 06 F6 | 	mov	arg02, #0
0d988     E4 2B B1 FD | 	call	#_printerror
0d98c     B4 00 90 FD | 	jmp	#LR__1163
0d990                 | LR__1160
0d990     F8 F1 BF FD | 	call	#_pop
0d994     FF 16 02 F6 | 	mov	arg03, result3
0d998     A7 FA 61 FC | 	wrlong	result1, fp
0d99c     04 4E 05 F1 | 	add	fp, #4
0d9a0     A7 FC 61 FC | 	wrlong	result2, fp
0d9a4     04 4E 05 F1 | 	add	fp, #4
0d9a8     A7 16 62 FC | 	wrlong	arg03, fp
0d9ac                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d9ac     08 4E 85 F1 | 	sub	fp, #8
0d9b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d9b4     18 00 90 5D |  if_ne	jmp	#LR__1161
0d9b8     A7 12 02 FB | 	rdlong	arg01, fp
0d9bc     44 F3 BF FD | 	call	#_convertstring
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     08 4E 05 F1 | 	add	fp, #8
0d9c8     A7 3E 68 FC | 	wrlong	#31, fp
0d9cc     08 4E 85 F1 | 	sub	fp, #8
0d9d0                 | LR__1161
0d9d0                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d9d0     08 4E 05 F1 | 	add	fp, #8
0d9d4     A7 16 02 FB | 	rdlong	arg03, fp
0d9d8     08 4E 85 F1 | 	sub	fp, #8
0d9dc     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d9e0     40 00 90 AD |  if_e	jmp	#LR__1162
0d9e4     00 12 06 F6 | 	mov	arg01, #0
0d9e8     50 C2 B1 FD | 	call	#__system___getiolock_0579
0d9ec     FD 12 02 F6 | 	mov	arg01, result1
0d9f0     20 65 B1 FD | 	call	#__system___lockmem
0d9f4     A0 01 00 FF 
0d9f8     5C 15 06 F6 | 	mov	arg02, ##@LR__5690
0d9fc     00 12 06 F6 | 	mov	arg01, #0
0da00     00 16 06 F6 | 	mov	arg03, #0
0da04     00 72 B1 FD | 	call	#__system___basic_print_string
0da08     00 12 06 F6 | 	mov	arg01, #0
0da0c     2C C2 B1 FD | 	call	#__system___getiolock_0579
0da10     FD 00 68 FC | 	wrlong	#0, result1
0da14     0F 12 06 F6 | 	mov	arg01, #15
0da18     00 14 06 F6 | 	mov	arg02, #0
0da1c     50 2B B1 FD | 	call	#_printerror
0da20     20 00 90 FD | 	jmp	#LR__1163
0da24                 | LR__1162
0da24     A7 26 02 FB | 	rdlong	local01, fp
0da28     13 27 C2 FA | 	rdbyte	local01, local01
0da2c     A7 26 62 FC | 	wrlong	local01, fp
0da30     08 4E 05 F1 | 	add	fp, #8
0da34     A7 38 68 FC | 	wrlong	#28, fp
0da38     08 4E 85 F1 | 	sub	fp, #8
0da3c     A7 12 02 F6 | 	mov	arg01, fp
0da40     E0 F1 BF FD | 	call	#_push
0da44                 | LR__1163
0da44     A7 F0 03 F6 | 	mov	ptra, fp
0da48     B2 00 A0 FD | 	call	#popregs_
0da4c                 | _do_asc_ret
0da4c     2D 00 64 FD | 	ret
0da50                 | 
0da50                 | ' 
0da50                 | ' '-------------------- asin
0da50                 | ' 
0da50                 | ' sub do_asin
0da50                 | _do_asin
0da50     01 4A 05 F6 | 	mov	COUNT_, #1
0da54     A8 00 A0 FD | 	call	#pushregs_
0da58     10 F0 07 F1 | 	add	ptra, #16
0da5c     4A 00 00 FF 
0da60     80 E4 05 F1 | 	add	objptr, ##38016
0da64     F2 26 02 FB | 	rdlong	local01, objptr
0da68     13 17 02 F6 | 	mov	arg03, local01
0da6c     01 16 66 F0 | 	shl	arg03, #1
0da70     13 17 02 F1 | 	add	arg03, local01
0da74     02 16 66 F0 | 	shl	arg03, #2
0da78     03 00 00 FF 
0da7c     04 E4 85 F1 | 	sub	objptr, ##1540
0da80     F2 16 02 F1 | 	add	arg03, objptr
0da84     0B 17 02 FB | 	rdlong	arg03, arg03
0da88     0C 4E 05 F1 | 	add	fp, #12
0da8c     A7 16 62 FC | 	wrlong	arg03, fp
0da90                 | ' 
0da90                 | ' numpar=compiledline(lineptr_e).result.uresult
0da90                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0da90     0C 4E 85 F1 | 	sub	fp, #12
0da94     02 16 16 F2 | 	cmp	arg03, #2 wc
0da98     47 00 00 FF 
0da9c     7C E4 85 F1 | 	sub	objptr, ##36476
0daa0     0C 4E 05 C1 |  if_b	add	fp, #12
0daa4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0daa8     0C 4E 85 C1 |  if_b	sub	fp, #12
0daac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dab0     00 12 06 F6 | 	mov	arg01, #0
0dab4     84 C1 B1 FD | 	call	#__system___getiolock_0579
0dab8     FD 12 02 F6 | 	mov	arg01, result1
0dabc     54 64 B1 FD | 	call	#__system___lockmem
0dac0     A0 01 00 FF 
0dac4     62 15 06 F6 | 	mov	arg02, ##@LR__5691
0dac8     00 12 06 F6 | 	mov	arg01, #0
0dacc     00 16 06 F6 | 	mov	arg03, #0
0dad0     34 71 B1 FD | 	call	#__system___basic_print_string
0dad4     00 12 06 F6 | 	mov	arg01, #0
0dad8     60 C1 B1 FD | 	call	#__system___getiolock_0579
0dadc     FD 00 68 FC | 	wrlong	#0, result1
0dae0     27 12 06 F6 | 	mov	arg01, #39
0dae4     00 14 06 F6 | 	mov	arg02, #0
0dae8     84 2A B1 FD | 	call	#_printerror
0daec     64 00 90 FD | 	jmp	#LR__1171
0daf0                 | LR__1170
0daf0     98 F0 BF FD | 	call	#_pop
0daf4     FF 26 02 F6 | 	mov	local01, result3
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 FC 61 FC | 	wrlong	result2, fp
0db04     04 4E 05 F1 | 	add	fp, #4
0db08     A7 26 62 FC | 	wrlong	local01, fp
0db0c     08 4E 85 F1 | 	sub	fp, #8
0db10     A7 12 02 F6 | 	mov	arg01, fp
0db14     14 F3 BF FD | 	call	#_converttofloat
0db18     FD 12 02 F6 | 	mov	arg01, result1
0db1c     60 9D B1 FD | 	call	#__system____builtin_asinf
0db20     FD 12 02 F6 | 	mov	arg01, result1
0db24     51 00 00 FF 
0db28     C0 E5 05 F1 | 	add	objptr, ##41920
0db2c     F2 14 02 FB | 	rdlong	arg02, objptr
0db30     51 00 00 FF 
0db34     C0 E5 85 F1 | 	sub	objptr, ##41920
0db38     50 92 B1 FD | 	call	#__system___float_mul
0db3c     A7 FA 61 FC | 	wrlong	result1, fp
0db40     08 4E 05 F1 | 	add	fp, #8
0db44     A7 3C 68 FC | 	wrlong	#30, fp
0db48     08 4E 85 F1 | 	sub	fp, #8
0db4c     A7 12 02 F6 | 	mov	arg01, fp
0db50     D0 F0 BF FD | 	call	#_push
0db54                 | LR__1171
0db54     A7 F0 03 F6 | 	mov	ptra, fp
0db58     B2 00 A0 FD | 	call	#popregs_
0db5c                 | _do_asin_ret
0db5c     2D 00 64 FD | 	ret
0db60                 | 
0db60                 | ' 
0db60                 | ' '-------------------- atn
0db60                 | ' 
0db60                 | ' sub do_atn
0db60                 | _do_atn
0db60     01 4A 05 F6 | 	mov	COUNT_, #1
0db64     A8 00 A0 FD | 	call	#pushregs_
0db68     10 F0 07 F1 | 	add	ptra, #16
0db6c     4A 00 00 FF 
0db70     80 E4 05 F1 | 	add	objptr, ##38016
0db74     F2 26 02 FB | 	rdlong	local01, objptr
0db78     13 17 02 F6 | 	mov	arg03, local01
0db7c     01 16 66 F0 | 	shl	arg03, #1
0db80     13 17 02 F1 | 	add	arg03, local01
0db84     02 16 66 F0 | 	shl	arg03, #2
0db88     03 00 00 FF 
0db8c     04 E4 85 F1 | 	sub	objptr, ##1540
0db90     F2 16 02 F1 | 	add	arg03, objptr
0db94     0B 17 02 FB | 	rdlong	arg03, arg03
0db98     0C 4E 05 F1 | 	add	fp, #12
0db9c     A7 16 62 FC | 	wrlong	arg03, fp
0dba0                 | ' 
0dba0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dba0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dba0     0C 4E 85 F1 | 	sub	fp, #12
0dba4     02 16 16 F2 | 	cmp	arg03, #2 wc
0dba8     47 00 00 FF 
0dbac     7C E4 85 F1 | 	sub	objptr, ##36476
0dbb0     0C 4E 05 C1 |  if_b	add	fp, #12
0dbb4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dbb8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dbbc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0dbc0     00 12 06 F6 | 	mov	arg01, #0
0dbc4     74 C0 B1 FD | 	call	#__system___getiolock_0579
0dbc8     FD 12 02 F6 | 	mov	arg01, result1
0dbcc     44 63 B1 FD | 	call	#__system___lockmem
0dbd0     A0 01 00 FF 
0dbd4     69 15 06 F6 | 	mov	arg02, ##@LR__5692
0dbd8     00 12 06 F6 | 	mov	arg01, #0
0dbdc     00 16 06 F6 | 	mov	arg03, #0
0dbe0     24 70 B1 FD | 	call	#__system___basic_print_string
0dbe4     00 12 06 F6 | 	mov	arg01, #0
0dbe8     50 C0 B1 FD | 	call	#__system___getiolock_0579
0dbec     FD 00 68 FC | 	wrlong	#0, result1
0dbf0     27 12 06 F6 | 	mov	arg01, #39
0dbf4     00 14 06 F6 | 	mov	arg02, #0
0dbf8     74 29 B1 FD | 	call	#_printerror
0dbfc     6C 00 90 FD | 	jmp	#LR__1181
0dc00                 | LR__1180
0dc00     88 EF BF FD | 	call	#_pop
0dc04     FF 26 02 F6 | 	mov	local01, result3
0dc08     A7 FA 61 FC | 	wrlong	result1, fp
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 FC 61 FC | 	wrlong	result2, fp
0dc14     04 4E 05 F1 | 	add	fp, #4
0dc18     A7 26 62 FC | 	wrlong	local01, fp
0dc1c     08 4E 85 F1 | 	sub	fp, #8
0dc20     A7 12 02 F6 | 	mov	arg01, fp
0dc24     04 F2 BF FD | 	call	#_converttofloat
0dc28     FD 12 02 F6 | 	mov	arg01, result1
0dc2c     00 C0 1F FF 
0dc30     00 14 06 F6 | 	mov	arg02, ##1065353216
0dc34     E0 9C B1 FD | 	call	#__system____builtin_atan2f
0dc38     FD 12 02 F6 | 	mov	arg01, result1
0dc3c     51 00 00 FF 
0dc40     C0 E5 05 F1 | 	add	objptr, ##41920
0dc44     F2 14 02 FB | 	rdlong	arg02, objptr
0dc48     51 00 00 FF 
0dc4c     C0 E5 85 F1 | 	sub	objptr, ##41920
0dc50     38 91 B1 FD | 	call	#__system___float_mul
0dc54     A7 FA 61 FC | 	wrlong	result1, fp
0dc58     08 4E 05 F1 | 	add	fp, #8
0dc5c     A7 3C 68 FC | 	wrlong	#30, fp
0dc60     08 4E 85 F1 | 	sub	fp, #8
0dc64     A7 12 02 F6 | 	mov	arg01, fp
0dc68     B8 EF BF FD | 	call	#_push
0dc6c                 | LR__1181
0dc6c     A7 F0 03 F6 | 	mov	ptra, fp
0dc70     B2 00 A0 FD | 	call	#popregs_
0dc74                 | _do_atn_ret
0dc74     2D 00 64 FD | 	ret
0dc78                 | 
0dc78                 | ' 
0dc78                 | ' '-------------------- beep
0dc78                 | ' 
0dc78                 | ' sub do_beep
0dc78                 | _do_beep
0dc78     02 4A 05 F6 | 	mov	COUNT_, #2
0dc7c     A8 00 A0 FD | 	call	#pushregs_
0dc80     20 F0 07 F1 | 	add	ptra, #32
0dc84     04 EF BF FD | 	call	#_pop
0dc88     FD 26 02 F6 | 	mov	local01, result1
0dc8c     FE 1C 02 F6 | 	mov	arg06, result2
0dc90     FF 28 02 F6 | 	mov	local02, result3
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 26 62 FC | 	wrlong	local01, fp
0dc9c     04 4E 05 F1 | 	add	fp, #4
0dca0     A7 1C 62 FC | 	wrlong	arg06, fp
0dca4     04 4E 05 F1 | 	add	fp, #4
0dca8     A7 28 62 FC | 	wrlong	local02, fp
0dcac     14 4E 85 F1 | 	sub	fp, #20
0dcb0     D8 EE BF FD | 	call	#_pop
0dcb4     A7 FA 61 FC | 	wrlong	result1, fp
0dcb8     04 4E 05 F1 | 	add	fp, #4
0dcbc     A7 FC 61 FC | 	wrlong	result2, fp
0dcc0     04 4E 05 F1 | 	add	fp, #4
0dcc4     A7 FE 61 FC | 	wrlong	result3, fp
0dcc8                 | ' 
0dcc8                 | ' t2=pop()
0dcc8                 | ' t1=pop()
0dcc8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dcc8     08 4E 85 F1 | 	sub	fp, #8
0dccc     1C FE 0D F2 | 	cmp	result3, #28 wz
0dcd0     08 4E 05 51 |  if_ne	add	fp, #8
0dcd4     A7 28 02 5B |  if_ne	rdlong	local02, fp
0dcd8     08 4E 85 51 |  if_ne	sub	fp, #8
0dcdc     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dce0     A7 26 02 AB |  if_e	rdlong	local01, fp
0dce4     18 4E 05 A1 |  if_e	add	fp, #24
0dce8     A7 26 62 AC |  if_e	wrlong	local01, fp
0dcec     18 4E 85 A1 |  if_e	sub	fp, #24
0dcf0     14 00 90 AD |  if_e	jmp	#LR__1190
0dcf4     A7 12 02 F6 | 	mov	arg01, fp
0dcf8     74 F0 BF FD | 	call	#_converttoint
0dcfc     18 4E 05 F1 | 	add	fp, #24
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04     18 4E 85 F1 | 	sub	fp, #24
0dd08                 | LR__1190
0dd08     1C 4E 05 F1 | 	add	fp, #28
0dd0c     A7 FE 48 FC | 	wrbyte	#127, fp
0dd10     01 4E 05 F1 | 	add	fp, #1
0dd14     A7 00 49 FC | 	wrbyte	#128, fp
0dd18     01 4E 85 F1 | 	sub	fp, #1
0dd1c     A7 14 02 F6 | 	mov	arg02, fp
0dd20     04 4E 85 F1 | 	sub	fp, #4
0dd24     A7 16 02 FB | 	rdlong	arg03, fp
0dd28     18 4E 85 F1 | 	sub	fp, #24
0dd2c     01 16 66 F0 | 	shl	arg03, #1
0dd30     07 12 06 F6 | 	mov	arg01, #7
0dd34     0E 18 C6 F9 | 	decod	arg04, #14
0dd38     02 1A 06 F6 | 	mov	arg05, #2
0dd3c     00 1C 06 F6 | 	mov	arg06, #0
0dd40     0B 00 00 FF 
0dd44     CC E4 05 F1 | 	add	objptr, ##5836
0dd48     24 5E B1 FD | 	call	#_audio096_spin2_play8
0dd4c     0B 00 00 FF 
0dd50     CC E4 85 F1 | 	sub	objptr, ##5836
0dd54     0C 4E 05 F1 | 	add	fp, #12
0dd58     A7 12 02 F6 | 	mov	arg01, fp
0dd5c     0C 4E 85 F1 | 	sub	fp, #12
0dd60     C0 EE BF FD | 	call	#_push
0dd64     CC BE B0 FD | 	call	#_do_waitms
0dd68     07 12 06 F6 | 	mov	arg01, #7
0dd6c     0B 00 00 FF 
0dd70     CC E4 05 F1 | 	add	objptr, ##5836
0dd74     9C 5E B1 FD | 	call	#_audio096_spin2_stop
0dd78     0B 00 00 FF 
0dd7c     CC E4 85 F1 | 	sub	objptr, ##5836
0dd80     A7 F0 03 F6 | 	mov	ptra, fp
0dd84     B2 00 A0 FD | 	call	#popregs_
0dd88                 | _do_beep_ret
0dd88     2D 00 64 FD | 	ret
0dd8c                 | 
0dd8c                 | ' 
0dd8c                 | ' '-------------------- blit
0dd8c                 | ' 
0dd8c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dd8c                 | ' sub do_blit
0dd8c                 | _do_blit
0dd8c     02 4A 05 F6 | 	mov	COUNT_, #2
0dd90     A8 00 A0 FD | 	call	#pushregs_
0dd94     3C F0 07 F1 | 	add	ptra, #60
0dd98     4A 00 00 FF 
0dd9c     80 E4 05 F1 | 	add	objptr, ##38016
0dda0     F2 26 02 FB | 	rdlong	local01, objptr
0dda4     13 25 02 F6 | 	mov	arg10, local01
0dda8     01 24 66 F0 | 	shl	arg10, #1
0ddac     13 25 02 F1 | 	add	arg10, local01
0ddb0     02 24 66 F0 | 	shl	arg10, #2
0ddb4     03 00 00 FF 
0ddb8     04 E4 85 F1 | 	sub	objptr, ##1540
0ddbc     F2 24 02 F1 | 	add	arg10, objptr
0ddc0     12 25 02 FB | 	rdlong	arg10, arg10
0ddc4     38 4E 05 F1 | 	add	fp, #56
0ddc8     A7 24 62 FC | 	wrlong	arg10, fp
0ddcc                 | ' 
0ddcc                 | ' numpar=compiledline(lineptr_e).result.uresult
0ddcc                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0ddcc     38 4E 85 F1 | 	sub	fp, #56
0ddd0     0A 24 0E F2 | 	cmp	arg10, #10 wz
0ddd4     47 00 00 FF 
0ddd8     7C E4 85 F1 | 	sub	objptr, ##36476
0dddc     38 4E 05 51 |  if_ne	add	fp, #56
0dde0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dde4     38 4E 85 51 |  if_ne	sub	fp, #56
0dde8     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0ddec     50 00 90 AD |  if_e	jmp	#LR__1200
0ddf0     00 12 06 F6 | 	mov	arg01, #0
0ddf4     44 BE B1 FD | 	call	#__system___getiolock_0579
0ddf8     FD 12 02 F6 | 	mov	arg01, result1
0ddfc     14 61 B1 FD | 	call	#__system___lockmem
0de00     A0 01 00 FF 
0de04     6F 15 06 F6 | 	mov	arg02, ##@LR__5693
0de08     00 12 06 F6 | 	mov	arg01, #0
0de0c     00 16 06 F6 | 	mov	arg03, #0
0de10     F4 6D B1 FD | 	call	#__system___basic_print_string
0de14     00 12 06 F6 | 	mov	arg01, #0
0de18     20 BE B1 FD | 	call	#__system___getiolock_0579
0de1c     FD 00 68 FC | 	wrlong	#0, result1
0de20     50 00 00 FF 
0de24     F0 E4 05 F1 | 	add	objptr, ##41200
0de28     F2 14 02 FB | 	rdlong	arg02, objptr
0de2c     50 00 00 FF 
0de30     F0 E4 85 F1 | 	sub	objptr, ##41200
0de34     27 12 06 F6 | 	mov	arg01, #39
0de38     34 27 B1 FD | 	call	#_printerror
0de3c     44 01 90 FD | 	jmp	#LR__1205
0de40                 | LR__1200
0de40                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0de40     38 4E 05 F1 | 	add	fp, #56
0de44     A7 28 02 FB | 	rdlong	local02, fp
0de48     01 28 86 F1 | 	sub	local02, #1
0de4c     04 4E 85 F1 | 	sub	fp, #4
0de50     A7 28 62 FC | 	wrlong	local02, fp
0de54     34 4E 85 F1 | 	sub	fp, #52
0de58                 | LR__1201
0de58     38 4E 05 F1 | 	add	fp, #56
0de5c     A7 26 02 FB | 	rdlong	local01, fp
0de60     01 26 86 F1 | 	sub	local01, #1
0de64     04 4E 85 F1 | 	sub	fp, #4
0de68     A7 24 02 FB | 	rdlong	arg10, fp
0de6c     34 4E 85 F1 | 	sub	fp, #52
0de70     13 25 1A F2 | 	cmp	arg10, local01 wcz
0de74     54 00 90 1D |  if_a	jmp	#LR__1202
0de78     10 ED BF FD | 	call	#_pop
0de7c     A7 FA 61 FC | 	wrlong	result1, fp
0de80     04 4E 05 F1 | 	add	fp, #4
0de84     A7 FC 61 FC | 	wrlong	result2, fp
0de88     04 4E 05 F1 | 	add	fp, #4
0de8c     A7 FE 61 FC | 	wrlong	result3, fp
0de90     2C 4E 05 F1 | 	add	fp, #44
0de94     A7 28 02 FB | 	rdlong	local02, fp
0de98     02 28 66 F0 | 	shl	local02, #2
0de9c     28 4E 85 F1 | 	sub	fp, #40
0dea0     A7 28 02 F1 | 	add	local02, fp
0dea4     0C 4E 85 F1 | 	sub	fp, #12
0dea8     A7 12 02 F6 | 	mov	arg01, fp
0deac     C0 EE BF FD | 	call	#_converttoint
0deb0     14 FB 61 FC | 	wrlong	result1, local02
0deb4     34 4E 05 F1 | 	add	fp, #52
0deb8     A7 28 02 FB | 	rdlong	local02, fp
0debc     01 28 86 F1 | 	sub	local02, #1
0dec0     A7 28 62 FC | 	wrlong	local02, fp
0dec4     34 4E 85 F1 | 	sub	fp, #52
0dec8     8C FF 9F FD | 	jmp	#LR__1201
0decc                 | LR__1202
0decc                 | ' if numpar=10 then 
0decc     38 4E 05 F1 | 	add	fp, #56
0ded0     A7 28 02 FB | 	rdlong	local02, fp
0ded4     38 4E 85 F1 | 	sub	fp, #56
0ded8     0A 28 0E F2 | 	cmp	local02, #10 wz
0dedc     5C 00 90 5D |  if_ne	jmp	#LR__1203
0dee0     0C 4E 05 F1 | 	add	fp, #12
0dee4     A7 12 02 FB | 	rdlong	arg01, fp
0dee8     04 4E 05 F1 | 	add	fp, #4
0deec     A7 14 02 FB | 	rdlong	arg02, fp
0def0     04 4E 05 F1 | 	add	fp, #4
0def4     A7 16 02 FB | 	rdlong	arg03, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 18 02 FB | 	rdlong	arg04, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 1A 02 FB | 	rdlong	arg05, fp
0df08     04 4E 05 F1 | 	add	fp, #4
0df0c     A7 1C 02 FB | 	rdlong	arg06, fp
0df10     04 4E 05 F1 | 	add	fp, #4
0df14     A7 1E 02 FB | 	rdlong	arg07, fp
0df18     04 4E 05 F1 | 	add	fp, #4
0df1c     A7 20 02 FB | 	rdlong	arg08, fp
0df20     04 4E 05 F1 | 	add	fp, #4
0df24     A7 22 02 FB | 	rdlong	arg09, fp
0df28     04 4E 05 F1 | 	add	fp, #4
0df2c     A7 24 02 FB | 	rdlong	arg10, fp
0df30     30 4E 85 F1 | 	sub	fp, #48
0df34     10 4E B1 FD | 	call	#_hg010b_spin2_blit
0df38     48 00 90 FD | 	jmp	#LR__1204
0df3c                 | LR__1203
0df3c     F2 1E 02 FB | 	rdlong	arg07, objptr
0df40     0C 4E 05 F1 | 	add	fp, #12
0df44     A7 14 02 FB | 	rdlong	arg02, fp
0df48     04 4E 05 F1 | 	add	fp, #4
0df4c     A7 16 02 FB | 	rdlong	arg03, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 18 02 FB | 	rdlong	arg04, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 1A 02 FB | 	rdlong	arg05, fp
0df60     04 4E 05 F1 | 	add	fp, #4
0df64     A7 20 02 FB | 	rdlong	arg08, fp
0df68     04 4E 05 F1 | 	add	fp, #4
0df6c     A7 22 02 FB | 	rdlong	arg09, fp
0df70     20 4E 85 F1 | 	sub	fp, #32
0df74     0F 13 02 F6 | 	mov	arg01, arg07
0df78     0A 1C C6 F9 | 	decod	arg06, #10
0df7c     0A 24 C6 F9 | 	decod	arg10, #10
0df80     C4 4D B1 FD | 	call	#_hg010b_spin2_blit
0df84                 | LR__1204
0df84                 | LR__1205
0df84     A7 F0 03 F6 | 	mov	ptra, fp
0df88     B2 00 A0 FD | 	call	#popregs_
0df8c                 | _do_blit_ret
0df8c     2D 00 64 FD | 	ret
0df90                 | 
0df90                 | ' 
0df90                 | ' 
0df90                 | ' '-------------------- bin$
0df90                 | ' 
0df90                 | ' sub do_bin
0df90                 | _do_bin
0df90     01 4A 05 F6 | 	mov	COUNT_, #1
0df94     A8 00 A0 FD | 	call	#pushregs_
0df98     18 F0 07 F1 | 	add	ptra, #24
0df9c     4A 00 00 FF 
0dfa0     80 E4 05 F1 | 	add	objptr, ##38016
0dfa4     F2 26 02 FB | 	rdlong	local01, objptr
0dfa8     13 17 02 F6 | 	mov	arg03, local01
0dfac     01 16 66 F0 | 	shl	arg03, #1
0dfb0     13 17 02 F1 | 	add	arg03, local01
0dfb4     02 16 66 F0 | 	shl	arg03, #2
0dfb8     03 00 00 FF 
0dfbc     04 E4 85 F1 | 	sub	objptr, ##1540
0dfc0     F2 16 02 F1 | 	add	arg03, objptr
0dfc4     0B 17 02 FB | 	rdlong	arg03, arg03
0dfc8     0C 4E 05 F1 | 	add	fp, #12
0dfcc     A7 16 62 FC | 	wrlong	arg03, fp
0dfd0                 | ' 
0dfd0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfd0                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0dfd0     0C 4E 85 F1 | 	sub	fp, #12
0dfd4     03 16 16 F2 | 	cmp	arg03, #3 wc
0dfd8     47 00 00 FF 
0dfdc     7C E4 85 F1 | 	sub	objptr, ##36476
0dfe0     0C 4E 05 C1 |  if_b	add	fp, #12
0dfe4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dfe8     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfec     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0dff0     00 12 06 F6 | 	mov	arg01, #0
0dff4     44 BC B1 FD | 	call	#__system___getiolock_0579
0dff8     FD 12 02 F6 | 	mov	arg01, result1
0dffc     14 5F B1 FD | 	call	#__system___lockmem
0e000     A0 01 00 FF 
0e004     76 15 06 F6 | 	mov	arg02, ##@LR__5694
0e008     00 12 06 F6 | 	mov	arg01, #0
0e00c     00 16 06 F6 | 	mov	arg03, #0
0e010     F4 6B B1 FD | 	call	#__system___basic_print_string
0e014     00 12 06 F6 | 	mov	arg01, #0
0e018     20 BC B1 FD | 	call	#__system___getiolock_0579
0e01c     FD 00 68 FC | 	wrlong	#0, result1
0e020     27 12 06 F6 | 	mov	arg01, #39
0e024     00 14 06 F6 | 	mov	arg02, #0
0e028     44 25 B1 FD | 	call	#_printerror
0e02c     B8 00 90 FD | 	jmp	#LR__1213
0e030                 | LR__1210
0e030                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e030     0C 4E 05 F1 | 	add	fp, #12
0e034     A7 26 02 FB | 	rdlong	local01, fp
0e038     0C 4E 85 F1 | 	sub	fp, #12
0e03c     02 26 0E F2 | 	cmp	local01, #2 wz
0e040     38 00 90 5D |  if_ne	jmp	#LR__1211
0e044     44 EB BF FD | 	call	#_pop
0e048     FF 26 02 F6 | 	mov	local01, result3
0e04c     A7 FA 61 FC | 	wrlong	result1, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 FC 61 FC | 	wrlong	result2, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 26 62 FC | 	wrlong	local01, fp
0e060     08 4E 85 F1 | 	sub	fp, #8
0e064     A7 12 02 F6 | 	mov	arg01, fp
0e068     04 ED BF FD | 	call	#_converttoint
0e06c     14 4E 05 F1 | 	add	fp, #20
0e070     A7 FA 61 FC | 	wrlong	result1, fp
0e074     14 4E 85 F1 | 	sub	fp, #20
0e078     0C 00 90 FD | 	jmp	#LR__1212
0e07c                 | LR__1211
0e07c     14 4E 05 F1 | 	add	fp, #20
0e080     A7 00 68 FC | 	wrlong	#0, fp
0e084     14 4E 85 F1 | 	sub	fp, #20
0e088                 | LR__1212
0e088     00 EB BF FD | 	call	#_pop
0e08c     FF 26 02 F6 | 	mov	local01, result3
0e090     A7 FA 61 FC | 	wrlong	result1, fp
0e094     04 4E 05 F1 | 	add	fp, #4
0e098     A7 FC 61 FC | 	wrlong	result2, fp
0e09c     04 4E 05 F1 | 	add	fp, #4
0e0a0     A7 26 62 FC | 	wrlong	local01, fp
0e0a4     08 4E 85 F1 | 	sub	fp, #8
0e0a8     A7 12 02 F6 | 	mov	arg01, fp
0e0ac     C0 EC BF FD | 	call	#_converttoint
0e0b0     10 4E 05 F1 | 	add	fp, #16
0e0b4     A7 FA 61 FC | 	wrlong	result1, fp
0e0b8     FD 12 02 F6 | 	mov	arg01, result1
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 14 02 FB | 	rdlong	arg02, fp
0e0c4     14 4E 85 F1 | 	sub	fp, #20
0e0c8     02 16 06 F6 | 	mov	arg03, #2
0e0cc     14 81 B1 FD | 	call	#__system__Number_S
0e0d0     A7 FA 61 FC | 	wrlong	result1, fp
0e0d4     08 4E 05 F1 | 	add	fp, #8
0e0d8     A7 3E 68 FC | 	wrlong	#31, fp
0e0dc     08 4E 85 F1 | 	sub	fp, #8
0e0e0     A7 12 02 F6 | 	mov	arg01, fp
0e0e4     3C EB BF FD | 	call	#_push
0e0e8                 | LR__1213
0e0e8     A7 F0 03 F6 | 	mov	ptra, fp
0e0ec     B2 00 A0 FD | 	call	#popregs_
0e0f0                 | _do_bin_ret
0e0f0     2D 00 64 FD | 	ret
0e0f4                 | 
0e0f4                 | ' 
0e0f4                 | ' '-------------------- box
0e0f4                 | ' 
0e0f4                 | ' sub do_box
0e0f4                 | _do_box
0e0f4     03 4A 05 F6 | 	mov	COUNT_, #3
0e0f8     A8 00 A0 FD | 	call	#pushregs_
0e0fc     30 F0 07 F1 | 	add	ptra, #48
0e100     88 EA BF FD | 	call	#_pop
0e104     FD 1A 02 F6 | 	mov	arg05, result1
0e108     FE 18 02 F6 | 	mov	arg04, result2
0e10c     FF 16 02 F6 | 	mov	arg03, result3
0e110     24 4E 05 F1 | 	add	fp, #36
0e114     A7 1A 62 FC | 	wrlong	arg05, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 18 62 FC | 	wrlong	arg04, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 16 62 FC | 	wrlong	arg03, fp
0e128     2C 4E 85 F1 | 	sub	fp, #44
0e12c     5C EA BF FD | 	call	#_pop
0e130     FD 1A 02 F6 | 	mov	arg05, result1
0e134     FE 18 02 F6 | 	mov	arg04, result2
0e138     FF 16 02 F6 | 	mov	arg03, result3
0e13c     18 4E 05 F1 | 	add	fp, #24
0e140     A7 1A 62 FC | 	wrlong	arg05, fp
0e144     04 4E 05 F1 | 	add	fp, #4
0e148     A7 18 62 FC | 	wrlong	arg04, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 16 62 FC | 	wrlong	arg03, fp
0e154     20 4E 85 F1 | 	sub	fp, #32
0e158     30 EA BF FD | 	call	#_pop
0e15c     FD 1A 02 F6 | 	mov	arg05, result1
0e160     FE 18 02 F6 | 	mov	arg04, result2
0e164     FF 26 02 F6 | 	mov	local01, result3
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 1A 62 FC | 	wrlong	arg05, fp
0e170     04 4E 05 F1 | 	add	fp, #4
0e174     A7 18 62 FC | 	wrlong	arg04, fp
0e178     04 4E 05 F1 | 	add	fp, #4
0e17c     A7 26 62 FC | 	wrlong	local01, fp
0e180     14 4E 85 F1 | 	sub	fp, #20
0e184     04 EA BF FD | 	call	#_pop
0e188     A7 FA 61 FC | 	wrlong	result1, fp
0e18c     04 4E 05 F1 | 	add	fp, #4
0e190     A7 FC 61 FC | 	wrlong	result2, fp
0e194     04 4E 05 F1 | 	add	fp, #4
0e198     A7 FE 61 FC | 	wrlong	result3, fp
0e19c                 | ' 
0e19c                 | ' t4=pop()
0e19c                 | ' t3=pop()
0e19c                 | ' t2=pop()
0e19c                 | ' t1=pop()
0e19c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e19c     FF 1A 02 F6 | 	mov	arg05, result3
0e1a0     08 4E 85 F1 | 	sub	fp, #8
0e1a4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e1a8     08 4E 05 51 |  if_ne	add	fp, #8
0e1ac     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e1b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e1b4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e1b8     A8 00 90 5D |  if_ne	jmp	#LR__1220
0e1bc     14 4E 05 F1 | 	add	fp, #20
0e1c0     A7 26 02 FB | 	rdlong	local01, fp
0e1c4     14 4E 85 F1 | 	sub	fp, #20
0e1c8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e1cc     14 4E 05 51 |  if_ne	add	fp, #20
0e1d0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1d4     14 4E 85 51 |  if_ne	sub	fp, #20
0e1d8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e1dc     84 00 90 5D |  if_ne	jmp	#LR__1220
0e1e0     20 4E 05 F1 | 	add	fp, #32
0e1e4     A7 26 02 FB | 	rdlong	local01, fp
0e1e8     20 4E 85 F1 | 	sub	fp, #32
0e1ec     1C 26 0E F2 | 	cmp	local01, #28 wz
0e1f0     20 4E 05 51 |  if_ne	add	fp, #32
0e1f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e1f8     20 4E 85 51 |  if_ne	sub	fp, #32
0e1fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e200     60 00 90 5D |  if_ne	jmp	#LR__1220
0e204     2C 4E 05 F1 | 	add	fp, #44
0e208     A7 26 02 FB | 	rdlong	local01, fp
0e20c     2C 4E 85 F1 | 	sub	fp, #44
0e210     1C 26 0E F2 | 	cmp	local01, #28 wz
0e214     2C 4E 05 51 |  if_ne	add	fp, #44
0e218     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e21c     2C 4E 85 51 |  if_ne	sub	fp, #44
0e220     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e224     3C 00 90 5D |  if_ne	jmp	#LR__1220
0e228     A7 12 02 FB | 	rdlong	arg01, fp
0e22c     0C 4E 05 F1 | 	add	fp, #12
0e230     A7 14 02 FB | 	rdlong	arg02, fp
0e234     0C 4E 05 F1 | 	add	fp, #12
0e238     A7 16 02 FB | 	rdlong	arg03, fp
0e23c     0C 4E 05 F1 | 	add	fp, #12
0e240     A7 18 02 FB | 	rdlong	arg04, fp
0e244     24 4E 85 F1 | 	sub	fp, #36
0e248     37 00 00 FF 
0e24c     28 E4 05 F1 | 	add	objptr, ##28200
0e250     F2 1A 02 FB | 	rdlong	arg05, objptr
0e254     37 00 00 FF 
0e258     28 E4 85 F1 | 	sub	objptr, ##28200
0e25c     B0 3D B1 FD | 	call	#_hg010b_spin2_box
0e260                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e260     6C 00 90 FD | 	jmp	#LR__1221
0e264                 | LR__1220
0e264     A7 12 02 F6 | 	mov	arg01, fp
0e268     04 EB BF FD | 	call	#_converttoint
0e26c     FD 28 02 F6 | 	mov	local02, result1
0e270     0C 4E 05 F1 | 	add	fp, #12
0e274     A7 12 02 F6 | 	mov	arg01, fp
0e278     0C 4E 85 F1 | 	sub	fp, #12
0e27c     F0 EA BF FD | 	call	#_converttoint
0e280     FD 2A 02 F6 | 	mov	local03, result1
0e284     18 4E 05 F1 | 	add	fp, #24
0e288     A7 12 02 F6 | 	mov	arg01, fp
0e28c     18 4E 85 F1 | 	sub	fp, #24
0e290     DC EA BF FD | 	call	#_converttoint
0e294     FD 26 02 F6 | 	mov	local01, result1
0e298     24 4E 05 F1 | 	add	fp, #36
0e29c     A7 12 02 F6 | 	mov	arg01, fp
0e2a0     24 4E 85 F1 | 	sub	fp, #36
0e2a4     C8 EA BF FD | 	call	#_converttoint
0e2a8     FD 18 02 F6 | 	mov	arg04, result1
0e2ac     37 00 00 FF 
0e2b0     28 E4 05 F1 | 	add	objptr, ##28200
0e2b4     F2 1A 02 FB | 	rdlong	arg05, objptr
0e2b8     37 00 00 FF 
0e2bc     28 E4 85 F1 | 	sub	objptr, ##28200
0e2c0     14 13 02 F6 | 	mov	arg01, local02
0e2c4     15 15 02 F6 | 	mov	arg02, local03
0e2c8     13 17 02 F6 | 	mov	arg03, local01
0e2cc     40 3D B1 FD | 	call	#_hg010b_spin2_box
0e2d0                 | LR__1221
0e2d0     A7 F0 03 F6 | 	mov	ptra, fp
0e2d4     B2 00 A0 FD | 	call	#popregs_
0e2d8                 | _do_box_ret
0e2d8     2D 00 64 FD | 	ret
0e2dc                 | 
0e2dc                 | ' 
0e2dc                 | ' '-------------------- brun
0e2dc                 | ' 
0e2dc                 | ' sub do_brun
0e2dc                 | _do_brun
0e2dc     08 4A 05 F6 | 	mov	COUNT_, #8
0e2e0     A8 00 A0 FD | 	call	#pushregs_
0e2e4     A4 E8 BF FD | 	call	#_pop
0e2e8     FE 1A 02 F6 | 	mov	arg05, result2
0e2ec     FF 18 02 F6 | 	mov	arg04, result3
0e2f0     FD 26 02 F6 | 	mov	local01, result1
0e2f4     0D 29 02 F6 | 	mov	local02, arg05
0e2f8     0C 2B 02 F6 | 	mov	local03, arg04
0e2fc                 | ' 
0e2fc                 | ' t1=pop() 
0e2fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e2fc     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e300     10 00 90 5D |  if_ne	jmp	#LR__1230
0e304     13 13 02 F6 | 	mov	arg01, local01
0e308     F8 E9 BF FD | 	call	#_convertstring
0e30c     FD 26 02 F6 | 	mov	local01, result1
0e310     1F 2A 06 F6 | 	mov	local03, #31
0e314                 | LR__1230
0e314                 | ' if t1.result_type=result_string then
0e314     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e318     EC 01 90 5D |  if_ne	jmp	#LR__1234
0e31c     13 2D 02 F6 | 	mov	local04, local01
0e320                 | '   filename=t1.result.sresult
0e320                 | '   if left$(filename,1)="/" then 
0e320     16 13 02 F6 | 	mov	arg01, local04
0e324     01 14 06 F6 | 	mov	arg02, #1
0e328     64 7C B1 FD | 	call	#__system__Left_S
0e32c     FD 12 02 F6 | 	mov	arg01, result1
0e330     A0 01 00 FF 
0e334     7D 15 06 F6 | 	mov	arg02, ##@LR__5695
0e338     00 5C B1 FD | 	call	#__system___string_cmp
0e33c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e340     16 2F 02 A6 |  if_e	mov	local05, local04
0e344     14 00 90 AD |  if_e	jmp	#LR__1231
0e348     A0 01 00 FF 
0e34c     7F 13 06 F6 | 	mov	arg01, ##@LR__5696
0e350     16 15 02 F6 | 	mov	arg02, local04
0e354     18 5C B1 FD | 	call	#__system___string_concat
0e358     FD 2E 02 F6 | 	mov	local05, result1
0e35c                 | LR__1231
0e35c                 | '   open fullfilename for input as #9
0e35c     09 12 06 F6 | 	mov	arg01, #9
0e360     17 15 02 F6 | 	mov	arg02, local05
0e364     00 16 06 F6 | 	mov	arg03, #0
0e368     AC 67 B1 FD | 	call	#__system___basic_open_string
0e36c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e370     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e374     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e378     FD 30 0A F6 | 	mov	local06, result1 wz
0e37c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e37c     8C 00 90 AD |  if_e	jmp	#LR__1232
0e380     00 12 06 F6 | 	mov	arg01, #0
0e384     B4 B8 B1 FD | 	call	#__system___getiolock_0579
0e388     FD 12 02 F6 | 	mov	arg01, result1
0e38c     84 5B B1 FD | 	call	#__system___lockmem
0e390     A0 01 00 FF 
0e394     88 15 06 F6 | 	mov	arg02, ##@LR__5697
0e398     00 12 06 F6 | 	mov	arg01, #0
0e39c     00 16 06 F6 | 	mov	arg03, #0
0e3a0     64 68 B1 FD | 	call	#__system___basic_print_string
0e3a4     00 12 06 F6 | 	mov	arg01, #0
0e3a8     18 15 02 F6 | 	mov	arg02, local06
0e3ac     00 16 06 F6 | 	mov	arg03, #0
0e3b0     0A 18 06 F6 | 	mov	arg04, #10
0e3b4     94 68 B1 FD | 	call	#__system___basic_print_integer
0e3b8     A0 01 00 FF 
0e3bc     96 15 06 F6 | 	mov	arg02, ##@LR__5698
0e3c0     00 12 06 F6 | 	mov	arg01, #0
0e3c4     00 16 06 F6 | 	mov	arg03, #0
0e3c8     3C 68 B1 FD | 	call	#__system___basic_print_string
0e3cc     18 13 02 F6 | 	mov	arg01, local06
0e3d0     CC 84 B1 FD | 	call	#__system___strerror
0e3d4     FD 14 02 F6 | 	mov	arg02, result1
0e3d8     00 12 06 F6 | 	mov	arg01, #0
0e3dc     00 16 06 F6 | 	mov	arg03, #0
0e3e0     24 68 B1 FD | 	call	#__system___basic_print_string
0e3e4     00 12 06 F6 | 	mov	arg01, #0
0e3e8     0A 14 06 F6 | 	mov	arg02, #10
0e3ec     00 16 06 F6 | 	mov	arg03, #0
0e3f0     BC 67 B1 FD | 	call	#__system___basic_print_char
0e3f4     00 12 06 F6 | 	mov	arg01, #0
0e3f8     40 B8 B1 FD | 	call	#__system___getiolock_0579
0e3fc     FD 00 68 FC | 	wrlong	#0, result1
0e400     09 12 06 F6 | 	mov	arg01, #9
0e404     64 AE B1 FD | 	call	#__system__close
0e408     FC 00 90 FD | 	jmp	#LR__1235
0e40c                 | LR__1232
0e40c     01 32 06 F6 | 	mov	local07, #1
0e410     00 34 06 F6 | 	mov	local08, #0
0e414                 | '   do
0e414                 | LR__1233
0e414                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e414     4E 00 00 FF 
0e418     B4 E4 05 F1 | 	add	objptr, ##40116
0e41c     F2 16 02 F6 | 	mov	arg03, objptr
0e420     4E 00 00 FF 
0e424     B4 E4 85 F1 | 	sub	objptr, ##40116
0e428     09 12 06 F6 | 	mov	arg01, #9
0e42c     19 15 02 F6 | 	mov	arg02, local07
0e430     0A 18 C6 F9 | 	decod	arg04, #10
0e434     01 1A 06 F6 | 	mov	arg05, #1
0e438     48 69 B1 FD | 	call	#__system___basic_get
0e43c     FD 30 02 F6 | 	mov	local06, result1
0e440     FD 32 02 F1 | 	add	local07, result1
0e444     4E 00 00 FF 
0e448     B4 E4 05 F1 | 	add	objptr, ##40116
0e44c     F2 12 02 F6 | 	mov	arg01, objptr
0e450     1A 15 02 F6 | 	mov	arg02, local08
0e454     0A 16 C6 F9 | 	decod	arg03, #10
0e458     42 00 00 FF 
0e45c     E8 E5 85 F1 | 	sub	objptr, ##34280
0e460     0C 4F B1 FD | 	call	#_psram_spin2_write
0e464     0B 00 00 FF 
0e468     CC E4 85 F1 | 	sub	objptr, ##5836
0e46c     18 35 02 F1 | 	add	local08, local06
0e470     02 00 00 FF 
0e474     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e478     E0 03 00 AF 
0e47c     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e480     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1233
0e484     36 00 00 FF 
0e488     FC E5 05 F1 | 	add	objptr, ##28156
0e48c     F2 12 02 FB | 	rdlong	arg01, objptr
0e490     03 12 62 FD | 	cogstop	arg01
0e494     04 E4 05 F1 | 	add	objptr, #4
0e498     F2 12 02 FB | 	rdlong	arg01, objptr
0e49c     03 12 62 FD | 	cogstop	arg01
0e4a0     04 E4 05 F1 | 	add	objptr, #4
0e4a4     F2 12 02 FB | 	rdlong	arg01, objptr
0e4a8     03 12 62 FD | 	cogstop	arg01
0e4ac     19 00 00 FF 
0e4b0     14 E5 05 F1 | 	add	objptr, ##13076
0e4b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e4b8     03 12 62 FD | 	cogstop	arg01
0e4bc     18 00 00 FF 
0e4c0     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e4c4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e4c8     18 00 00 FF 
0e4cc     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e4d0     19 00 00 FF 
0e4d4     0C E5 85 F1 | 	sub	objptr, ##13068
0e4d8     1E 34 06 F6 | 	mov	local08, #30
0e4dc     28 E4 61 FD | 	setq	objptr
0e4e0     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e4e4     01 34 66 C6 |  if_b	neg	local08, #1
0e4e8     1B 00 00 FF 
0e4ec     1C E4 05 F1 | 	add	objptr, ##13852
0e4f0     F2 34 62 FC | 	wrlong	local08, objptr
0e4f4     52 00 00 FF 
0e4f8     28 E4 85 F1 | 	sub	objptr, ##42024
0e4fc     00 12 06 F6 | 	mov	arg01, #0
0e500     01 12 62 FD | 	cogid	arg01
0e504     03 12 62 FD | 	cogstop	arg01
0e508                 | LR__1234
0e508                 | LR__1235
0e508     A7 F0 03 F6 | 	mov	ptra, fp
0e50c     B2 00 A0 FD | 	call	#popregs_
0e510                 | _do_brun_ret
0e510     2D 00 64 FD | 	ret
0e514                 | 
0e514                 | ' 
0e514                 | ' '-------------------- cd
0e514                 | ' 
0e514                 | ' sub do_cd
0e514                 | _do_cd
0e514     06 4A 05 F6 | 	mov	COUNT_, #6
0e518     A8 00 A0 FD | 	call	#pushregs_
0e51c     A0 01 00 FF 
0e520     99 13 06 F6 | 	mov	arg01, ##@LR__5699
0e524     31 14 06 F6 | 	mov	arg02, #49
0e528     48 B8 B1 FD | 	call	#__system___basic_dir
0e52c     5C E6 BF FD | 	call	#_pop
0e530     FE 18 02 F6 | 	mov	arg04, result2
0e534     FF 16 02 F6 | 	mov	arg03, result3
0e538     FD 26 02 F6 | 	mov	local01, result1
0e53c     0C 29 02 F6 | 	mov	local02, arg04
0e540     0B 2B 02 F6 | 	mov	local03, arg03
0e544                 | ' t1=pop()
0e544                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e544     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e548     10 00 90 5D |  if_ne	jmp	#LR__1240
0e54c     13 13 02 F6 | 	mov	arg01, local01
0e550     B0 E7 BF FD | 	call	#_convertstring
0e554     FD 26 02 F6 | 	mov	local01, result1
0e558     1F 2A 06 F6 | 	mov	local03, #31
0e55c                 | LR__1240
0e55c                 | ' if t1.result_type<>result_string then printerror(15): return
0e55c     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e560     10 00 90 AD |  if_e	jmp	#LR__1241
0e564     0F 12 06 F6 | 	mov	arg01, #15
0e568     00 14 06 F6 | 	mov	arg02, #0
0e56c     00 20 B1 FD | 	call	#_printerror
0e570     48 05 90 FD | 	jmp	#LR__1259
0e574                 | LR__1241
0e574     13 2D 02 F6 | 	mov	local04, local01
0e578                 | ' newdir$=t1.result.sresult
0e578                 | ' if newdir$=".." then 
0e578     A0 01 00 FF 
0e57c     9B 15 06 F6 | 	mov	arg02, ##@LR__5700
0e580     16 13 02 F6 | 	mov	arg01, local04
0e584     B4 59 B1 FD | 	call	#__system___string_cmp
0e588     00 FA 0D F2 | 	cmp	result1, #0 wz
0e58c     C4 01 90 5D |  if_ne	jmp	#LR__1248
0e590     4A 00 00 FF 
0e594     94 E4 05 F1 | 	add	objptr, ##38036
0e598     F2 12 02 FB | 	rdlong	arg01, objptr
0e59c     4A 00 00 FF 
0e5a0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5a4     09 2F 02 F6 | 	mov	local05, arg01
0e5a8     97 06 48 FB | 	callpa	#(@LR__1243-@LR__1242)>>2,fcache_load_ptr_
0e5ac                 | LR__1242
0e5ac     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e5b0     01 2E 06 51 |  if_ne	add	local05, #1
0e5b4     F4 FF 9F 5D |  if_ne	jmp	#LR__1242
0e5b8                 | LR__1243
0e5b8     17 13 C2 F2 | 	subr	arg01, local05
0e5bc     4A 00 00 FF 
0e5c0     94 E4 05 F1 | 	add	objptr, ##38036
0e5c4     F2 14 02 FB | 	rdlong	arg02, objptr
0e5c8     4A 00 00 FF 
0e5cc     94 E4 85 F1 | 	sub	objptr, ##38036
0e5d0     A0 01 00 FF 
0e5d4     9E 17 06 F6 | 	mov	arg03, ##@LR__5701
0e5d8     00 80 B1 FD | 	call	#__system__InstrRev
0e5dc     FD 2C 02 F6 | 	mov	local04, result1
0e5e0                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e5e0     02 2C 56 F2 | 	cmps	local04, #2 wc
0e5e4     28 00 90 CD |  if_b	jmp	#LR__1244
0e5e8     4A 00 00 FF 
0e5ec     94 E4 05 F1 | 	add	objptr, ##38036
0e5f0     F2 12 02 FB | 	rdlong	arg01, objptr
0e5f4     4A 00 00 FF 
0e5f8     94 E4 85 F1 | 	sub	objptr, ##38036
0e5fc     01 2C 86 F1 | 	sub	local04, #1
0e600     16 15 02 F6 | 	mov	arg02, local04
0e604     88 79 B1 FD | 	call	#__system__Left_S
0e608     FD 2C 02 F6 | 	mov	local04, result1
0e60c     08 00 90 FD | 	jmp	#LR__1245
0e610                 | LR__1244
0e610     A0 01 00 FF 
0e614     A0 2D 06 F6 | 	mov	local04, ##@LR__5702
0e618                 | LR__1245
0e618     16 13 02 F6 | 	mov	arg01, local04
0e61c     80 5F B1 FD | 	call	#__system___chdir
0e620     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e624     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e62c     FD 30 0A F6 | 	mov	local06, result1 wz
0e630                 | '   chdir newdir$
0e630                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e630     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e634     A4 00 90 AD |  if_e	jmp	#LR__1246
0e638     00 12 06 F6 | 	mov	arg01, #0
0e63c     FC B5 B1 FD | 	call	#__system___getiolock_0579
0e640     FD 12 02 F6 | 	mov	arg01, result1
0e644     CC 58 B1 FD | 	call	#__system___lockmem
0e648     A0 01 00 FF 
0e64c     A2 15 06 F6 | 	mov	arg02, ##@LR__5703
0e650     00 12 06 F6 | 	mov	arg01, #0
0e654     00 16 06 F6 | 	mov	arg03, #0
0e658     AC 65 B1 FD | 	call	#__system___basic_print_string
0e65c     00 12 06 F6 | 	mov	arg01, #0
0e660     18 15 02 F6 | 	mov	arg02, local06
0e664     00 16 06 F6 | 	mov	arg03, #0
0e668     0A 18 06 F6 | 	mov	arg04, #10
0e66c     DC 65 B1 FD | 	call	#__system___basic_print_integer
0e670     A0 01 00 FF 
0e674     B0 15 06 F6 | 	mov	arg02, ##@LR__5704
0e678     00 12 06 F6 | 	mov	arg01, #0
0e67c     00 16 06 F6 | 	mov	arg03, #0
0e680     84 65 B1 FD | 	call	#__system___basic_print_string
0e684     45 00 00 FF 
0e688     50 E5 05 F1 | 	add	objptr, ##35664
0e68c     F2 14 02 FB | 	rdlong	arg02, objptr
0e690     45 00 00 FF 
0e694     50 E5 85 F1 | 	sub	objptr, ##35664
0e698     00 12 06 F6 | 	mov	arg01, #0
0e69c     00 16 06 F6 | 	mov	arg03, #0
0e6a0     64 65 B1 FD | 	call	#__system___basic_print_string
0e6a4     00 12 06 F6 | 	mov	arg01, #0
0e6a8     0A 14 06 F6 | 	mov	arg02, #10
0e6ac     00 16 06 F6 | 	mov	arg03, #0
0e6b0     FC 64 B1 FD | 	call	#__system___basic_print_char
0e6b4     00 12 06 F6 | 	mov	arg01, #0
0e6b8     80 B5 B1 FD | 	call	#__system___getiolock_0579
0e6bc     FD 00 68 FC | 	wrlong	#0, result1
0e6c0     4A 00 00 FF 
0e6c4     94 E4 05 F1 | 	add	objptr, ##38036
0e6c8     F2 12 02 FB | 	rdlong	arg01, objptr
0e6cc     4A 00 00 FF 
0e6d0     94 E4 85 F1 | 	sub	objptr, ##38036
0e6d4     C8 5E B1 FD | 	call	#__system___chdir
0e6d8     14 00 90 FD | 	jmp	#LR__1247
0e6dc                 | LR__1246
0e6dc     4A 00 00 FF 
0e6e0     94 E4 05 F1 | 	add	objptr, ##38036
0e6e4     F2 2C 62 FC | 	wrlong	local04, objptr
0e6e8     4A 00 00 FF 
0e6ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e6f0                 | LR__1247
0e6f0                 | '   print "Current directory: ";currentdir$
0e6f0     00 12 06 F6 | 	mov	arg01, #0
0e6f4     44 B5 B1 FD | 	call	#__system___getiolock_0579
0e6f8     FD 12 02 F6 | 	mov	arg01, result1
0e6fc     14 58 B1 FD | 	call	#__system___lockmem
0e700     A0 01 00 FF 
0e704     B3 15 06 F6 | 	mov	arg02, ##@LR__5705
0e708     00 12 06 F6 | 	mov	arg01, #0
0e70c     00 16 06 F6 | 	mov	arg03, #0
0e710     F4 64 B1 FD | 	call	#__system___basic_print_string
0e714     4A 00 00 FF 
0e718     94 E4 05 F1 | 	add	objptr, ##38036
0e71c     F2 14 02 FB | 	rdlong	arg02, objptr
0e720     4A 00 00 FF 
0e724     94 E4 85 F1 | 	sub	objptr, ##38036
0e728     00 12 06 F6 | 	mov	arg01, #0
0e72c     00 16 06 F6 | 	mov	arg03, #0
0e730     D4 64 B1 FD | 	call	#__system___basic_print_string
0e734     00 12 06 F6 | 	mov	arg01, #0
0e738     0A 14 06 F6 | 	mov	arg02, #10
0e73c     00 16 06 F6 | 	mov	arg03, #0
0e740     6C 64 B1 FD | 	call	#__system___basic_print_char
0e744     00 12 06 F6 | 	mov	arg01, #0
0e748     F0 B4 B1 FD | 	call	#__system___getiolock_0579
0e74c     FD 00 68 FC | 	wrlong	#0, result1
0e750                 | '   return
0e750     68 03 90 FD | 	jmp	#LR__1259
0e754                 | LR__1248
0e754                 | ' if left$(newdir$,1)="/" then 
0e754     16 13 02 F6 | 	mov	arg01, local04
0e758     01 14 06 F6 | 	mov	arg02, #1
0e75c     30 78 B1 FD | 	call	#__system__Left_S
0e760     FD 12 02 F6 | 	mov	arg01, result1
0e764     A0 01 00 FF 
0e768     C7 15 06 F6 | 	mov	arg02, ##@LR__5706
0e76c     CC 57 B1 FD | 	call	#__system___string_cmp
0e770     00 FA 0D F2 | 	cmp	result1, #0 wz
0e774     3C 01 90 5D |  if_ne	jmp	#LR__1251
0e778     16 13 02 F6 | 	mov	arg01, local04
0e77c     20 5E B1 FD | 	call	#__system___chdir
0e780     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e784     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e788     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e78c     FD 30 0A F6 | 	mov	local06, result1 wz
0e790                 | '   chdir(newdir$)
0e790                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e790     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e794     A4 00 90 AD |  if_e	jmp	#LR__1249
0e798     00 12 06 F6 | 	mov	arg01, #0
0e79c     9C B4 B1 FD | 	call	#__system___getiolock_0579
0e7a0     FD 12 02 F6 | 	mov	arg01, result1
0e7a4     6C 57 B1 FD | 	call	#__system___lockmem
0e7a8     A0 01 00 FF 
0e7ac     C9 15 06 F6 | 	mov	arg02, ##@LR__5707
0e7b0     00 12 06 F6 | 	mov	arg01, #0
0e7b4     00 16 06 F6 | 	mov	arg03, #0
0e7b8     4C 64 B1 FD | 	call	#__system___basic_print_string
0e7bc     00 12 06 F6 | 	mov	arg01, #0
0e7c0     18 15 02 F6 | 	mov	arg02, local06
0e7c4     00 16 06 F6 | 	mov	arg03, #0
0e7c8     0A 18 06 F6 | 	mov	arg04, #10
0e7cc     7C 64 B1 FD | 	call	#__system___basic_print_integer
0e7d0     A0 01 00 FF 
0e7d4     D7 15 06 F6 | 	mov	arg02, ##@LR__5708
0e7d8     00 12 06 F6 | 	mov	arg01, #0
0e7dc     00 16 06 F6 | 	mov	arg03, #0
0e7e0     24 64 B1 FD | 	call	#__system___basic_print_string
0e7e4     45 00 00 FF 
0e7e8     50 E5 05 F1 | 	add	objptr, ##35664
0e7ec     F2 14 02 FB | 	rdlong	arg02, objptr
0e7f0     45 00 00 FF 
0e7f4     50 E5 85 F1 | 	sub	objptr, ##35664
0e7f8     00 12 06 F6 | 	mov	arg01, #0
0e7fc     00 16 06 F6 | 	mov	arg03, #0
0e800     04 64 B1 FD | 	call	#__system___basic_print_string
0e804     00 12 06 F6 | 	mov	arg01, #0
0e808     0A 14 06 F6 | 	mov	arg02, #10
0e80c     00 16 06 F6 | 	mov	arg03, #0
0e810     9C 63 B1 FD | 	call	#__system___basic_print_char
0e814     00 12 06 F6 | 	mov	arg01, #0
0e818     20 B4 B1 FD | 	call	#__system___getiolock_0579
0e81c     FD 00 68 FC | 	wrlong	#0, result1
0e820     4A 00 00 FF 
0e824     94 E4 05 F1 | 	add	objptr, ##38036
0e828     F2 12 02 FB | 	rdlong	arg01, objptr
0e82c     4A 00 00 FF 
0e830     94 E4 85 F1 | 	sub	objptr, ##38036
0e834     68 5D B1 FD | 	call	#__system___chdir
0e838     14 00 90 FD | 	jmp	#LR__1250
0e83c                 | LR__1249
0e83c     4A 00 00 FF 
0e840     94 E4 05 F1 | 	add	objptr, ##38036
0e844     F2 2C 62 FC | 	wrlong	local04, objptr
0e848     4A 00 00 FF 
0e84c     94 E4 85 F1 | 	sub	objptr, ##38036
0e850                 | LR__1250
0e850                 | '   print "Current directory: ";currentdir$
0e850     00 12 06 F6 | 	mov	arg01, #0
0e854     E4 B3 B1 FD | 	call	#__system___getiolock_0579
0e858     FD 12 02 F6 | 	mov	arg01, result1
0e85c     B4 56 B1 FD | 	call	#__system___lockmem
0e860     A0 01 00 FF 
0e864     DA 15 06 F6 | 	mov	arg02, ##@LR__5709
0e868     00 12 06 F6 | 	mov	arg01, #0
0e86c     00 16 06 F6 | 	mov	arg03, #0
0e870     94 63 B1 FD | 	call	#__system___basic_print_string
0e874     4A 00 00 FF 
0e878     94 E4 05 F1 | 	add	objptr, ##38036
0e87c     F2 14 02 FB | 	rdlong	arg02, objptr
0e880     4A 00 00 FF 
0e884     94 E4 85 F1 | 	sub	objptr, ##38036
0e888     00 12 06 F6 | 	mov	arg01, #0
0e88c     00 16 06 F6 | 	mov	arg03, #0
0e890     74 63 B1 FD | 	call	#__system___basic_print_string
0e894     00 12 06 F6 | 	mov	arg01, #0
0e898     0A 14 06 F6 | 	mov	arg02, #10
0e89c     00 16 06 F6 | 	mov	arg03, #0
0e8a0     0C 63 B1 FD | 	call	#__system___basic_print_char
0e8a4     00 12 06 F6 | 	mov	arg01, #0
0e8a8     90 B3 B1 FD | 	call	#__system___getiolock_0579
0e8ac     FD 00 68 FC | 	wrlong	#0, result1
0e8b0                 | '   return
0e8b0     08 02 90 FD | 	jmp	#LR__1259
0e8b4                 | LR__1251
0e8b4                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e8b4     4A 00 00 FF 
0e8b8     94 E4 05 F1 | 	add	objptr, ##38036
0e8bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e8c0     4A 00 00 FF 
0e8c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e8c8     A0 01 00 FF 
0e8cc     EE 15 06 F6 | 	mov	arg02, ##@LR__5710
0e8d0     68 56 B1 FD | 	call	#__system___string_cmp
0e8d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8d8     34 00 90 AD |  if_e	jmp	#LR__1252
0e8dc     4A 00 00 FF 
0e8e0     94 E4 05 F1 | 	add	objptr, ##38036
0e8e4     F2 12 02 FB | 	rdlong	arg01, objptr
0e8e8     4A 00 00 FF 
0e8ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e8f0     A0 01 00 FF 
0e8f4     F0 15 06 F6 | 	mov	arg02, ##@LR__5711
0e8f8     74 56 B1 FD | 	call	#__system___string_concat
0e8fc     FD 12 02 F6 | 	mov	arg01, result1
0e900     16 15 02 F6 | 	mov	arg02, local04
0e904     68 56 B1 FD | 	call	#__system___string_concat
0e908     FD 2C 02 F6 | 	mov	local04, result1
0e90c     20 00 90 FD | 	jmp	#LR__1253
0e910                 | LR__1252
0e910     4A 00 00 FF 
0e914     94 E4 05 F1 | 	add	objptr, ##38036
0e918     F2 12 02 FB | 	rdlong	arg01, objptr
0e91c     4A 00 00 FF 
0e920     94 E4 85 F1 | 	sub	objptr, ##38036
0e924     16 15 02 F6 | 	mov	arg02, local04
0e928     44 56 B1 FD | 	call	#__system___string_concat
0e92c     FD 2C 02 F6 | 	mov	local04, result1
0e930                 | LR__1253
0e930                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e930     16 13 02 F6 | 	mov	arg01, local04
0e934     01 14 06 F6 | 	mov	arg02, #1
0e938     DC 76 B1 FD | 	call	#__system__Right_S
0e93c     FD 12 02 F6 | 	mov	arg01, result1
0e940     A0 01 00 FF 
0e944     F2 15 06 F6 | 	mov	arg02, ##@LR__5712
0e948     F0 55 B1 FD | 	call	#__system___string_cmp
0e94c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e950     30 00 90 5D |  if_ne	jmp	#LR__1256
0e954     16 13 02 F6 | 	mov	arg01, local04
0e958     09 2F 02 F6 | 	mov	local05, arg01
0e95c     97 06 48 FB | 	callpa	#(@LR__1255-@LR__1254)>>2,fcache_load_ptr_
0e960                 | LR__1254
0e960     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e964     01 2E 06 51 |  if_ne	add	local05, #1
0e968     F4 FF 9F 5D |  if_ne	jmp	#LR__1254
0e96c                 | LR__1255
0e96c     09 2F 82 F1 | 	sub	local05, arg01
0e970     17 15 02 F6 | 	mov	arg02, local05
0e974     01 14 86 F1 | 	sub	arg02, #1
0e978     16 13 02 F6 | 	mov	arg01, local04
0e97c     10 76 B1 FD | 	call	#__system__Left_S
0e980     FD 2C 02 F6 | 	mov	local04, result1
0e984                 | LR__1256
0e984     16 13 02 F6 | 	mov	arg01, local04
0e988     14 5C B1 FD | 	call	#__system___chdir
0e98c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e990     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e994     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e998     FD 30 0A F6 | 	mov	local06, result1 wz
0e99c                 | '   chdir(newdir$)
0e99c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e99c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e9a0     A4 00 90 AD |  if_e	jmp	#LR__1257
0e9a4     00 12 06 F6 | 	mov	arg01, #0
0e9a8     90 B2 B1 FD | 	call	#__system___getiolock_0579
0e9ac     FD 12 02 F6 | 	mov	arg01, result1
0e9b0     60 55 B1 FD | 	call	#__system___lockmem
0e9b4     A0 01 00 FF 
0e9b8     F4 15 06 F6 | 	mov	arg02, ##@LR__5713
0e9bc     00 12 06 F6 | 	mov	arg01, #0
0e9c0     00 16 06 F6 | 	mov	arg03, #0
0e9c4     40 62 B1 FD | 	call	#__system___basic_print_string
0e9c8     00 12 06 F6 | 	mov	arg01, #0
0e9cc     18 15 02 F6 | 	mov	arg02, local06
0e9d0     00 16 06 F6 | 	mov	arg03, #0
0e9d4     0A 18 06 F6 | 	mov	arg04, #10
0e9d8     70 62 B1 FD | 	call	#__system___basic_print_integer
0e9dc     A1 01 00 FF 
0e9e0     02 14 06 F6 | 	mov	arg02, ##@LR__5714
0e9e4     00 12 06 F6 | 	mov	arg01, #0
0e9e8     00 16 06 F6 | 	mov	arg03, #0
0e9ec     18 62 B1 FD | 	call	#__system___basic_print_string
0e9f0     45 00 00 FF 
0e9f4     50 E5 05 F1 | 	add	objptr, ##35664
0e9f8     F2 14 02 FB | 	rdlong	arg02, objptr
0e9fc     45 00 00 FF 
0ea00     50 E5 85 F1 | 	sub	objptr, ##35664
0ea04     00 12 06 F6 | 	mov	arg01, #0
0ea08     00 16 06 F6 | 	mov	arg03, #0
0ea0c     F8 61 B1 FD | 	call	#__system___basic_print_string
0ea10     00 12 06 F6 | 	mov	arg01, #0
0ea14     0A 14 06 F6 | 	mov	arg02, #10
0ea18     00 16 06 F6 | 	mov	arg03, #0
0ea1c     90 61 B1 FD | 	call	#__system___basic_print_char
0ea20     00 12 06 F6 | 	mov	arg01, #0
0ea24     14 B2 B1 FD | 	call	#__system___getiolock_0579
0ea28     FD 00 68 FC | 	wrlong	#0, result1
0ea2c     4A 00 00 FF 
0ea30     94 E4 05 F1 | 	add	objptr, ##38036
0ea34     F2 12 02 FB | 	rdlong	arg01, objptr
0ea38     4A 00 00 FF 
0ea3c     94 E4 85 F1 | 	sub	objptr, ##38036
0ea40     5C 5B B1 FD | 	call	#__system___chdir
0ea44     14 00 90 FD | 	jmp	#LR__1258
0ea48                 | LR__1257
0ea48     4A 00 00 FF 
0ea4c     94 E4 05 F1 | 	add	objptr, ##38036
0ea50     F2 2C 62 FC | 	wrlong	local04, objptr
0ea54     4A 00 00 FF 
0ea58     94 E4 85 F1 | 	sub	objptr, ##38036
0ea5c                 | LR__1258
0ea5c                 | '   print "Current directory: ";currentdir$
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     D8 B1 B1 FD | 	call	#__system___getiolock_0579
0ea64     FD 12 02 F6 | 	mov	arg01, result1
0ea68     A8 54 B1 FD | 	call	#__system___lockmem
0ea6c     A1 01 00 FF 
0ea70     05 14 06 F6 | 	mov	arg02, ##@LR__5715
0ea74     00 12 06 F6 | 	mov	arg01, #0
0ea78     00 16 06 F6 | 	mov	arg03, #0
0ea7c     88 61 B1 FD | 	call	#__system___basic_print_string
0ea80     4A 00 00 FF 
0ea84     94 E4 05 F1 | 	add	objptr, ##38036
0ea88     F2 14 02 FB | 	rdlong	arg02, objptr
0ea8c     4A 00 00 FF 
0ea90     94 E4 85 F1 | 	sub	objptr, ##38036
0ea94     00 12 06 F6 | 	mov	arg01, #0
0ea98     00 16 06 F6 | 	mov	arg03, #0
0ea9c     68 61 B1 FD | 	call	#__system___basic_print_string
0eaa0     00 12 06 F6 | 	mov	arg01, #0
0eaa4     0A 14 06 F6 | 	mov	arg02, #10
0eaa8     00 16 06 F6 | 	mov	arg03, #0
0eaac     00 61 B1 FD | 	call	#__system___basic_print_char
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     84 B1 B1 FD | 	call	#__system___getiolock_0579
0eab8     FD 00 68 FC | 	wrlong	#0, result1
0eabc                 | LR__1259
0eabc     A7 F0 03 F6 | 	mov	ptra, fp
0eac0     B2 00 A0 FD | 	call	#popregs_
0eac4                 | _do_cd_ret
0eac4     2D 00 64 FD | 	ret
0eac8                 | 
0eac8                 | ' 
0eac8                 | ' '-------------------- changefreq
0eac8                 | ' 
0eac8                 | ' sub do_changefreq
0eac8                 | _do_changefreq
0eac8     04 4A 05 F6 | 	mov	COUNT_, #4
0eacc     A8 00 A0 FD | 	call	#pushregs_
0ead0     28 F0 07 F1 | 	add	ptra, #40
0ead4     B4 E0 BF FD | 	call	#_pop
0ead8     FF 14 02 F6 | 	mov	arg02, result3
0eadc     A7 FA 61 FC | 	wrlong	result1, fp
0eae0     04 4E 05 F1 | 	add	fp, #4
0eae4     A7 FC 61 FC | 	wrlong	result2, fp
0eae8     04 4E 05 F1 | 	add	fp, #4
0eaec     A7 14 62 FC | 	wrlong	arg02, fp
0eaf0     08 4E 85 F1 | 	sub	fp, #8
0eaf4     A7 12 02 F6 | 	mov	arg01, fp
0eaf8     30 E3 BF FD | 	call	#_converttofloat
0eafc     24 4E 05 F1 | 	add	fp, #36
0eb00     A7 FA 61 FC | 	wrlong	result1, fp
0eb04     24 4E 85 F1 | 	sub	fp, #36
0eb08     FD 14 02 F6 | 	mov	arg02, result1
0eb0c     FC 16 20 FF 
0eb10     54 12 06 F6 | 	mov	arg01, ##1076754516
0eb14     44 92 B1 FD | 	call	#__system____builtin_logbase
0eb18     FD 26 02 F6 | 	mov	local01, result1
0eb1c     1E 14 C6 F9 | 	decod	arg02, #30
0eb20     FC 16 20 FF 
0eb24     54 12 06 F6 | 	mov	arg01, ##1076754516
0eb28     30 92 B1 FD | 	call	#__system____builtin_logbase
0eb2c     FD 14 02 F6 | 	mov	arg02, result1
0eb30     13 13 02 F6 | 	mov	arg01, local01
0eb34     58 84 B1 FD | 	call	#__system___float_div
0eb38     FD 12 02 F6 | 	mov	arg01, result1
0eb3c     00 14 06 F6 | 	mov	arg02, #0
0eb40     10 87 B1 FD | 	call	#__system___float_tointeger
0eb44     10 4E 05 F1 | 	add	fp, #16
0eb48     A7 FA 61 FC | 	wrlong	result1, fp
0eb4c     1E 26 C6 F9 | 	decod	local01, #30
0eb50     FD 12 02 F6 | 	mov	arg01, result1
0eb54     10 4E 85 F1 | 	sub	fp, #16
0eb58     05 12 06 F1 | 	add	arg01, #5
0eb5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb60     1F 28 C6 C9 |  if_b	decod	local02, #31
0eb64     00 28 06 36 |  if_ae	mov	local02, #0
0eb68     1C 7E B1 FD | 	call	#__system___float_fromuns
0eb6c     14 FB 61 F5 | 	xor	result1, local02
0eb70     FD 14 02 F6 | 	mov	arg02, result1
0eb74     13 13 02 F6 | 	mov	arg01, local01
0eb78     18 91 B1 FD | 	call	#__system____builtin_powf
0eb7c     FD 12 02 F6 | 	mov	arg01, result1
0eb80     01 14 06 F6 | 	mov	arg02, #1
0eb84     CC 86 B1 FD | 	call	#__system___float_tointeger
0eb88     14 4E 05 F1 | 	add	fp, #20
0eb8c     A7 FA 61 FC | 	wrlong	result1, fp
0eb90                 | ' skip=round(2^(lfreq+5))
0eb90                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0eb90     14 4E 85 F1 | 	sub	fp, #20
0eb94     40 00 00 FF 
0eb98     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0eb9c     30 00 90 CD |  if_b	jmp	#LR__1260
0eba0     14 4E 05 F1 | 	add	fp, #20
0eba4     A7 26 02 FB | 	rdlong	local01, fp
0eba8     13 27 52 F6 | 	abs	local01, local01 wc
0ebac     0F 26 46 F0 | 	shr	local01, #15
0ebb0     13 27 82 F6 | 	negc	local01, local01
0ebb4     04 4E 05 F1 | 	add	fp, #4
0ebb8     A7 26 62 FC | 	wrlong	local01, fp
0ebbc     04 4E 85 F1 | 	sub	fp, #4
0ebc0     40 00 80 FF 
0ebc4     A7 00 68 FC | 	wrlong	##32768, fp
0ebc8     14 4E 85 F1 | 	sub	fp, #20
0ebcc     0C 00 90 FD | 	jmp	#LR__1261
0ebd0                 | LR__1260
0ebd0     18 4E 05 F1 | 	add	fp, #24
0ebd4     A7 02 68 FC | 	wrlong	#1, fp
0ebd8     18 4E 85 F1 | 	sub	fp, #24
0ebdc                 | LR__1261
0ebdc     24 4E 05 F1 | 	add	fp, #36
0ebe0     A7 14 02 FB | 	rdlong	arg02, fp
0ebe4     24 4E 85 F1 | 	sub	fp, #36
0ebe8     3E 2C 25 FF 
0ebec     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ebf0     9C 83 B1 FD | 	call	#__system___float_div
0ebf4     FD 26 02 F6 | 	mov	local01, result1
0ebf8     18 4E 05 F1 | 	add	fp, #24
0ebfc     A7 12 02 FB | 	rdlong	arg01, fp
0ec00     18 4E 85 F1 | 	sub	fp, #24
0ec04     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec08     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec0c     00 28 06 36 |  if_ae	mov	local02, #0
0ec10     74 7D B1 FD | 	call	#__system___float_fromuns
0ec14     14 FB 61 F5 | 	xor	result1, local02
0ec18     FD 2A 02 F6 | 	mov	local03, result1
0ec1c     1E 2C C6 F9 | 	decod	local04, #30
0ec20     0D 12 06 F6 | 	mov	arg01, #13
0ec24     10 4E 05 F1 | 	add	fp, #16
0ec28     A7 14 02 FB | 	rdlong	arg02, fp
0ec2c     10 4E 85 F1 | 	sub	fp, #16
0ec30     0A 13 82 F1 | 	sub	arg01, arg02
0ec34     09 13 52 F6 | 	abs	arg01, arg01 wc
0ec38     1F 28 C6 C9 |  if_b	decod	local02, #31
0ec3c     00 28 06 36 |  if_ae	mov	local02, #0
0ec40     44 7D B1 FD | 	call	#__system___float_fromuns
0ec44     14 FB 61 F5 | 	xor	result1, local02
0ec48     FD 14 02 F6 | 	mov	arg02, result1
0ec4c     16 13 02 F6 | 	mov	arg01, local04
0ec50     40 90 B1 FD | 	call	#__system____builtin_powf
0ec54     FD 14 02 F6 | 	mov	arg02, result1
0ec58     15 13 02 F6 | 	mov	arg01, local03
0ec5c     2C 81 B1 FD | 	call	#__system___float_mul
0ec60     FD 14 02 F6 | 	mov	arg02, result1
0ec64     13 13 02 F6 | 	mov	arg01, local01
0ec68     24 83 B1 FD | 	call	#__system___float_div
0ec6c     FD 12 02 F6 | 	mov	arg01, result1
0ec70     01 14 06 F6 | 	mov	arg02, #1
0ec74     DC 85 B1 FD | 	call	#__system___float_tointeger
0ec78     FD 26 02 F6 | 	mov	local01, result1
0ec7c     1C 4E 05 F1 | 	add	fp, #28
0ec80     A7 26 62 FC | 	wrlong	local01, fp
0ec84     1C 4E 85 F1 | 	sub	fp, #28
0ec88     00 DF BF FD | 	call	#_pop
0ec8c     FF 2C 02 F6 | 	mov	local04, result3
0ec90     A7 FA 61 FC | 	wrlong	result1, fp
0ec94     04 4E 05 F1 | 	add	fp, #4
0ec98     A7 FC 61 FC | 	wrlong	result2, fp
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 2C 62 FC | 	wrlong	local04, fp
0eca4     08 4E 85 F1 | 	sub	fp, #8
0eca8     A7 12 02 F6 | 	mov	arg01, fp
0ecac     C0 E0 BF FD | 	call	#_converttoint
0ecb0     FD 2A 52 F6 | 	abs	local03, result1 wc
0ecb4     07 2A 06 F5 | 	and	local03, #7
0ecb8     15 2B 82 F6 | 	negc	local03, local03
0ecbc     0C 4E 05 F1 | 	add	fp, #12
0ecc0     A7 2A 62 FC | 	wrlong	local03, fp
0ecc4     08 4E 05 F1 | 	add	fp, #8
0ecc8     A7 26 02 FB | 	rdlong	local01, fp
0eccc     10 26 66 F0 | 	shl	local01, #16
0ecd0     08 4E 05 F1 | 	add	fp, #8
0ecd4     A7 2C 02 FB | 	rdlong	local04, fp
0ecd8     16 27 02 F1 | 	add	local01, local04
0ecdc     04 4E 05 F1 | 	add	fp, #4
0ece0     A7 26 62 FC | 	wrlong	local01, fp
0ece4                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ece4     37 00 00 FF 
0ece8     10 E4 05 F1 | 	add	objptr, ##28176
0ecec     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf0     37 00 00 FF 
0ecf4     10 E4 85 F1 | 	sub	objptr, ##28176
0ecf8     14 4E 85 F1 | 	sub	fp, #20
0ecfc     A7 2C 02 FB | 	rdlong	local04, fp
0ed00     0C 4E 85 F1 | 	sub	fp, #12
0ed04     06 2C 66 F0 | 	shl	local04, #6
0ed08     16 13 02 F1 | 	add	arg01, local04
0ed0c     08 12 06 F1 | 	add	arg01, #8
0ed10     09 FB 01 FB | 	rdlong	result1, arg01
0ed14     1B FA 2D F4 | 	testbn	result1, #27 wz
0ed18     3C 00 90 5D |  if_ne	jmp	#LR__1262
0ed1c     37 00 00 FF 
0ed20     10 E4 05 F1 | 	add	objptr, ##28176
0ed24     F2 12 02 FB | 	rdlong	arg01, objptr
0ed28     37 00 00 FF 
0ed2c     10 E4 85 F1 | 	sub	objptr, ##28176
0ed30     0C 4E 05 F1 | 	add	fp, #12
0ed34     A7 2C 02 FB | 	rdlong	local04, fp
0ed38     06 2C 66 F0 | 	shl	local04, #6
0ed3c     16 13 02 F1 | 	add	arg01, local04
0ed40     18 12 06 F1 | 	add	arg01, #24
0ed44     14 4E 05 F1 | 	add	fp, #20
0ed48     A7 14 02 FB | 	rdlong	arg02, fp
0ed4c     20 4E 85 F1 | 	sub	fp, #32
0ed50     09 15 62 FC | 	wrlong	arg02, arg01
0ed54     80 00 90 FD | 	jmp	#LR__1263
0ed58                 | LR__1262
0ed58     37 00 00 FF 
0ed5c     10 E4 05 F1 | 	add	objptr, ##28176
0ed60     F2 26 02 FB | 	rdlong	local01, objptr
0ed64     37 00 00 FF 
0ed68     10 E4 85 F1 | 	sub	objptr, ##28176
0ed6c     0C 4E 05 F1 | 	add	fp, #12
0ed70     A7 2C 02 FB | 	rdlong	local04, fp
0ed74     06 2C 66 F0 | 	shl	local04, #6
0ed78     16 27 02 F1 | 	add	local01, local04
0ed7c     18 26 06 F1 | 	add	local01, #24
0ed80     18 4E 05 F1 | 	add	fp, #24
0ed84     A7 14 02 FB | 	rdlong	arg02, fp
0ed88     24 4E 85 F1 | 	sub	fp, #36
0ed8c     3E 2C 25 FF 
0ed90     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed94     F8 81 B1 FD | 	call	#__system___float_div
0ed98     FD 12 02 F6 | 	mov	arg01, result1
0ed9c     01 14 06 F6 | 	mov	arg02, #1
0eda0     B0 84 B1 FD | 	call	#__system___float_tointeger
0eda4     13 FB 51 FC | 	wrword	result1, local01
0eda8     37 00 00 FF 
0edac     10 E4 05 F1 | 	add	objptr, ##28176
0edb0     F2 12 02 FB | 	rdlong	arg01, objptr
0edb4     37 00 00 FF 
0edb8     10 E4 85 F1 | 	sub	objptr, ##28176
0edbc     0C 4E 05 F1 | 	add	fp, #12
0edc0     A7 2C 02 FB | 	rdlong	local04, fp
0edc4     0C 4E 85 F1 | 	sub	fp, #12
0edc8     06 2C 66 F0 | 	shl	local04, #6
0edcc     16 13 02 F1 | 	add	arg01, local04
0edd0     1A 12 06 F1 | 	add	arg01, #26
0edd4     09 01 5A FC | 	wrword	#256, arg01
0edd8                 | LR__1263
0edd8     A7 F0 03 F6 | 	mov	ptra, fp
0eddc     B2 00 A0 FD | 	call	#popregs_
0ede0                 | _do_changefreq_ret
0ede0     2D 00 64 FD | 	ret
0ede4                 | 
0ede4                 | ' 
0ede4                 | ' '-------------------- changepan
0ede4                 | ' 
0ede4                 | ' sub do_changepan
0ede4                 | _do_changepan
0ede4     01 4A 05 F6 | 	mov	COUNT_, #1
0ede8     A8 00 A0 FD | 	call	#pushregs_
0edec     14 F0 07 F1 | 	add	ptra, #20
0edf0     98 DD BF FD | 	call	#_pop
0edf4     A7 FA 61 FC | 	wrlong	result1, fp
0edf8     04 4E 05 F1 | 	add	fp, #4
0edfc     A7 FC 61 FC | 	wrlong	result2, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 FE 61 FC | 	wrlong	result3, fp
0ee08     08 4E 85 F1 | 	sub	fp, #8
0ee0c     00 00 23 FF 
0ee10     00 26 06 F6 | 	mov	local01, ##1174405120
0ee14     A7 12 02 F6 | 	mov	arg01, fp
0ee18     10 E0 BF FD | 	call	#_converttofloat
0ee1c     FD 14 02 F6 | 	mov	arg02, result1
0ee20     13 13 02 F6 | 	mov	arg01, local01
0ee24     64 7F B1 FD | 	call	#__system___float_mul
0ee28     FD 12 02 F6 | 	mov	arg01, result1
0ee2c     01 14 06 F6 | 	mov	arg02, #1
0ee30     20 84 B1 FD | 	call	#__system___float_tointeger
0ee34     0D 26 C6 F9 | 	decod	local01, #13
0ee38     FD 26 02 F1 | 	add	local01, result1
0ee3c     10 4E 05 F1 | 	add	fp, #16
0ee40     A7 26 62 FC | 	wrlong	local01, fp
0ee44                 | ' 
0ee44                 | ' t1=pop()
0ee44                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ee44                 | ' if pan<0 then pan=0
0ee44     10 4E 85 F1 | 	sub	fp, #16
0ee48     00 26 56 F2 | 	cmps	local01, #0 wc
0ee4c     10 4E 05 C1 |  if_b	add	fp, #16
0ee50     A7 00 68 CC |  if_b	wrlong	#0, fp
0ee54     10 4E 85 C1 |  if_b	sub	fp, #16
0ee58                 | ' if pan>16384 then pan=16384
0ee58     10 4E 05 F1 | 	add	fp, #16
0ee5c     A7 26 02 FB | 	rdlong	local01, fp
0ee60     10 4E 85 F1 | 	sub	fp, #16
0ee64     20 00 00 FF 
0ee68     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ee6c     10 4E 05 31 |  if_ae	add	fp, #16
0ee70     20 00 80 3F 
0ee74     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ee78     10 4E 85 31 |  if_ae	sub	fp, #16
0ee7c     0C DD BF FD | 	call	#_pop
0ee80     FF 26 02 F6 | 	mov	local01, result3
0ee84     A7 FA 61 FC | 	wrlong	result1, fp
0ee88     04 4E 05 F1 | 	add	fp, #4
0ee8c     A7 FC 61 FC | 	wrlong	result2, fp
0ee90     04 4E 05 F1 | 	add	fp, #4
0ee94     A7 26 62 FC | 	wrlong	local01, fp
0ee98     08 4E 85 F1 | 	sub	fp, #8
0ee9c     A7 12 02 F6 | 	mov	arg01, fp
0eea0     CC DE BF FD | 	call	#_converttoint
0eea4     FD 26 52 F6 | 	abs	local01, result1 wc
0eea8     07 26 06 F5 | 	and	local01, #7
0eeac     13 27 82 F6 | 	negc	local01, local01
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 26 62 FC | 	wrlong	local01, fp
0eeb8     37 00 00 FF 
0eebc     10 E4 05 F1 | 	add	objptr, ##28176
0eec0     F2 12 02 FB | 	rdlong	arg01, objptr
0eec4     37 00 00 FF 
0eec8     10 E4 85 F1 | 	sub	objptr, ##28176
0eecc     06 26 66 F0 | 	shl	local01, #6
0eed0     13 13 02 F1 | 	add	arg01, local01
0eed4     16 12 06 F1 | 	add	arg01, #22
0eed8     04 4E 05 F1 | 	add	fp, #4
0eedc     A7 14 02 FB | 	rdlong	arg02, fp
0eee0     10 4E 85 F1 | 	sub	fp, #16
0eee4     09 15 52 FC | 	wrword	arg02, arg01
0eee8     A7 F0 03 F6 | 	mov	ptra, fp
0eeec     B2 00 A0 FD | 	call	#popregs_
0eef0                 | _do_changepan_ret
0eef0     2D 00 64 FD | 	ret
0eef4                 | 
0eef4                 | ' 
0eef4                 | ' '-------------------- changevol
0eef4                 | ' 
0eef4                 | ' sub do_changevol
0eef4                 | _do_changevol
0eef4     00 4A 05 F6 | 	mov	COUNT_, #0
0eef8     A8 00 A0 FD | 	call	#pushregs_
0eefc     14 F0 07 F1 | 	add	ptra, #20
0ef00     88 DC BF FD | 	call	#_pop
0ef04     FF 14 02 F6 | 	mov	arg02, result3
0ef08     A7 FA 61 FC | 	wrlong	result1, fp
0ef0c     04 4E 05 F1 | 	add	fp, #4
0ef10     A7 FC 61 FC | 	wrlong	result2, fp
0ef14     04 4E 05 F1 | 	add	fp, #4
0ef18     A7 14 62 FC | 	wrlong	arg02, fp
0ef1c     08 4E 85 F1 | 	sub	fp, #8
0ef20     A7 12 02 F6 | 	mov	arg01, fp
0ef24     04 DF BF FD | 	call	#_converttofloat
0ef28     FD 12 02 F6 | 	mov	arg01, result1
0ef2c     00 3D 22 FF 
0ef30     00 14 06 F6 | 	mov	arg02, ##1148846080
0ef34     54 7E B1 FD | 	call	#__system___float_mul
0ef38     FD 12 02 F6 | 	mov	arg01, result1
0ef3c     01 14 06 F6 | 	mov	arg02, #1
0ef40     10 83 B1 FD | 	call	#__system___float_tointeger
0ef44     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef48     0D 14 46 F7 | 	zerox	arg02, #13
0ef4c     0A 15 82 F6 | 	negc	arg02, arg02
0ef50     10 4E 05 F1 | 	add	fp, #16
0ef54     A7 14 62 FC | 	wrlong	arg02, fp
0ef58     10 4E 85 F1 | 	sub	fp, #16
0ef5c     2C DC BF FD | 	call	#_pop
0ef60     FF 14 02 F6 | 	mov	arg02, result3
0ef64     A7 FA 61 FC | 	wrlong	result1, fp
0ef68     04 4E 05 F1 | 	add	fp, #4
0ef6c     A7 FC 61 FC | 	wrlong	result2, fp
0ef70     04 4E 05 F1 | 	add	fp, #4
0ef74     A7 14 62 FC | 	wrlong	arg02, fp
0ef78     08 4E 85 F1 | 	sub	fp, #8
0ef7c     A7 12 02 F6 | 	mov	arg01, fp
0ef80     EC DD BF FD | 	call	#_converttoint
0ef84     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef88     07 14 06 F5 | 	and	arg02, #7
0ef8c     0A 15 82 F6 | 	negc	arg02, arg02
0ef90     0C 4E 05 F1 | 	add	fp, #12
0ef94     A7 14 62 FC | 	wrlong	arg02, fp
0ef98     37 00 00 FF 
0ef9c     10 E4 05 F1 | 	add	objptr, ##28176
0efa0     F2 12 02 FB | 	rdlong	arg01, objptr
0efa4     37 00 00 FF 
0efa8     10 E4 85 F1 | 	sub	objptr, ##28176
0efac     06 14 66 F0 | 	shl	arg02, #6
0efb0     0A 13 02 F1 | 	add	arg01, arg02
0efb4     14 12 06 F1 | 	add	arg01, #20
0efb8     04 4E 05 F1 | 	add	fp, #4
0efbc     A7 14 02 FB | 	rdlong	arg02, fp
0efc0     10 4E 85 F1 | 	sub	fp, #16
0efc4     09 15 52 FC | 	wrword	arg02, arg01
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_changevol_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' '-------------------- changewav
0efd4                 | ' 
0efd4                 | ' sub do_changewav
0efd4                 | _do_changewav
0efd4     00 4A 05 F6 | 	mov	COUNT_, #0
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     14 F0 07 F1 | 	add	ptra, #20
0efe0     A8 DB BF FD | 	call	#_pop
0efe4     FF 14 02 F6 | 	mov	arg02, result3
0efe8     A7 FA 61 FC | 	wrlong	result1, fp
0efec     04 4E 05 F1 | 	add	fp, #4
0eff0     A7 FC 61 FC | 	wrlong	result2, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 14 62 FC | 	wrlong	arg02, fp
0effc     08 4E 85 F1 | 	sub	fp, #8
0f000     A7 12 02 F6 | 	mov	arg01, fp
0f004     68 DD BF FD | 	call	#_converttoint
0f008     10 4E 05 F1 | 	add	fp, #16
0f00c     A7 FA 61 FC | 	wrlong	result1, fp
0f010                 | ' 
0f010                 | ' t1=pop()
0f010                 | ' wave=converttoint(t1)
0f010                 | ' if wave<0 then wave=0
0f010     FD 14 02 F6 | 	mov	arg02, result1
0f014     10 4E 85 F1 | 	sub	fp, #16
0f018     00 14 56 F2 | 	cmps	arg02, #0 wc
0f01c     10 4E 05 C1 |  if_b	add	fp, #16
0f020     A7 00 68 CC |  if_b	wrlong	#0, fp
0f024     10 4E 85 C1 |  if_b	sub	fp, #16
0f028     60 DB BF FD | 	call	#_pop
0f02c     FF 14 02 F6 | 	mov	arg02, result3
0f030     A7 FA 61 FC | 	wrlong	result1, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 FC 61 FC | 	wrlong	result2, fp
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 14 62 FC | 	wrlong	arg02, fp
0f044     08 4E 85 F1 | 	sub	fp, #8
0f048     A7 12 02 F6 | 	mov	arg01, fp
0f04c     20 DD BF FD | 	call	#_converttoint
0f050     FD 14 52 F6 | 	abs	arg02, result1 wc
0f054     07 14 06 F5 | 	and	arg02, #7
0f058     0A 15 82 F6 | 	negc	arg02, arg02
0f05c     0C 4E 05 F1 | 	add	fp, #12
0f060     A7 14 62 FC | 	wrlong	arg02, fp
0f064                 | ' if wave <32 then 
0f064     04 4E 05 F1 | 	add	fp, #4
0f068     A7 14 02 FB | 	rdlong	arg02, fp
0f06c     10 4E 85 F1 | 	sub	fp, #16
0f070     20 14 56 F2 | 	cmps	arg02, #32 wc
0f074     48 00 90 3D |  if_ae	jmp	#LR__1270
0f078     37 00 00 FF 
0f07c     10 E4 05 F1 | 	add	objptr, ##28176
0f080     F2 12 02 FB | 	rdlong	arg01, objptr
0f084     37 00 00 FF 
0f088     10 E4 85 F1 | 	sub	objptr, ##28176
0f08c     0C 4E 05 F1 | 	add	fp, #12
0f090     A7 14 02 FB | 	rdlong	arg02, fp
0f094     06 14 66 F0 | 	shl	arg02, #6
0f098     0A 13 02 F1 | 	add	arg01, arg02
0f09c     08 12 06 F1 | 	add	arg01, #8
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 14 02 FB | 	rdlong	arg02, fp
0f0a8     10 4E 85 F1 | 	sub	fp, #16
0f0ac     0B 14 66 F0 | 	shl	arg02, #11
0f0b0     00 00 40 FF 
0f0b4     00 14 06 F1 | 	add	arg02, ##-2147483648
0f0b8     09 15 62 FC | 	wrlong	arg02, arg01
0f0bc     34 00 90 FD | 	jmp	#LR__1271
0f0c0                 | LR__1270
0f0c0     37 00 00 FF 
0f0c4     10 E4 05 F1 | 	add	objptr, ##28176
0f0c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0cc     37 00 00 FF 
0f0d0     10 E4 85 F1 | 	sub	objptr, ##28176
0f0d4     0C 4E 05 F1 | 	add	fp, #12
0f0d8     A7 14 02 FB | 	rdlong	arg02, fp
0f0dc     0C 4E 85 F1 | 	sub	fp, #12
0f0e0     06 14 66 F0 | 	shl	arg02, #6
0f0e4     0A 13 02 F1 | 	add	arg01, arg02
0f0e8     08 12 06 F1 | 	add	arg01, #8
0f0ec     00 00 C4 FF 
0f0f0     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f0f4                 | LR__1271
0f0f4     A7 F0 03 F6 | 	mov	ptra, fp
0f0f8     B2 00 A0 FD | 	call	#popregs_
0f0fc                 | _do_changewav_ret
0f0fc     2D 00 64 FD | 	ret
0f100                 | 
0f100                 | ' 
0f100                 | ' '-------------------- chr$
0f100                 | ' 
0f100                 | ' sub do_chr
0f100                 | _do_chr
0f100     01 4A 05 F6 | 	mov	COUNT_, #1
0f104     A8 00 A0 FD | 	call	#pushregs_
0f108     14 F0 07 F1 | 	add	ptra, #20
0f10c     4A 00 00 FF 
0f110     80 E4 05 F1 | 	add	objptr, ##38016
0f114     F2 26 02 FB | 	rdlong	local01, objptr
0f118     13 17 02 F6 | 	mov	arg03, local01
0f11c     01 16 66 F0 | 	shl	arg03, #1
0f120     13 17 02 F1 | 	add	arg03, local01
0f124     02 16 66 F0 | 	shl	arg03, #2
0f128     03 00 00 FF 
0f12c     04 E4 85 F1 | 	sub	objptr, ##1540
0f130     F2 16 02 F1 | 	add	arg03, objptr
0f134     0B 17 02 FB | 	rdlong	arg03, arg03
0f138     0C 4E 05 F1 | 	add	fp, #12
0f13c     A7 16 62 FC | 	wrlong	arg03, fp
0f140                 | ' 
0f140                 | ' numpar=compiledline(lineptr_e).result.uresult
0f140                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f140     0C 4E 85 F1 | 	sub	fp, #12
0f144     02 16 16 F2 | 	cmp	arg03, #2 wc
0f148     47 00 00 FF 
0f14c     7C E4 85 F1 | 	sub	objptr, ##36476
0f150     0C 4E 05 C1 |  if_b	add	fp, #12
0f154     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f158     0C 4E 85 C1 |  if_b	sub	fp, #12
0f15c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f160     00 12 06 F6 | 	mov	arg01, #0
0f164     D4 AA B1 FD | 	call	#__system___getiolock_0579
0f168     FD 12 02 F6 | 	mov	arg01, result1
0f16c     A4 4D B1 FD | 	call	#__system___lockmem
0f170     A1 01 00 FF 
0f174     19 14 06 F6 | 	mov	arg02, ##@LR__5716
0f178     00 12 06 F6 | 	mov	arg01, #0
0f17c     00 16 06 F6 | 	mov	arg03, #0
0f180     84 5A B1 FD | 	call	#__system___basic_print_string
0f184     00 12 06 F6 | 	mov	arg01, #0
0f188     B0 AA B1 FD | 	call	#__system___getiolock_0579
0f18c     FD 00 68 FC | 	wrlong	#0, result1
0f190     27 12 06 F6 | 	mov	arg01, #39
0f194     00 14 06 F6 | 	mov	arg02, #0
0f198     D4 13 B1 FD | 	call	#_printerror
0f19c     54 00 90 FD | 	jmp	#LR__1281
0f1a0                 | LR__1280
0f1a0     E8 D9 BF FD | 	call	#_pop
0f1a4     FF 26 02 F6 | 	mov	local01, result3
0f1a8     A7 FA 61 FC | 	wrlong	result1, fp
0f1ac     04 4E 05 F1 | 	add	fp, #4
0f1b0     A7 FC 61 FC | 	wrlong	result2, fp
0f1b4     04 4E 05 F1 | 	add	fp, #4
0f1b8     A7 26 62 FC | 	wrlong	local01, fp
0f1bc     08 4E 85 F1 | 	sub	fp, #8
0f1c0     A7 12 02 F6 | 	mov	arg01, fp
0f1c4     A8 DB BF FD | 	call	#_converttoint
0f1c8     10 4E 05 F1 | 	add	fp, #16
0f1cc     A7 FA 61 FC | 	wrlong	result1, fp
0f1d0     FD 12 02 F6 | 	mov	arg01, result1
0f1d4     10 4E 85 F1 | 	sub	fp, #16
0f1d8     78 6F B1 FD | 	call	#__system__Chr_S
0f1dc     A7 FA 61 FC | 	wrlong	result1, fp
0f1e0     08 4E 05 F1 | 	add	fp, #8
0f1e4     A7 3E 68 FC | 	wrlong	#31, fp
0f1e8     08 4E 85 F1 | 	sub	fp, #8
0f1ec     A7 12 02 F6 | 	mov	arg01, fp
0f1f0     30 DA BF FD | 	call	#_push
0f1f4                 | LR__1281
0f1f4     A7 F0 03 F6 | 	mov	ptra, fp
0f1f8     B2 00 A0 FD | 	call	#popregs_
0f1fc                 | _do_chr_ret
0f1fc     2D 00 64 FD | 	ret
0f200                 | 
0f200                 | ' 
0f200                 | ' '-------------------- circle
0f200                 | ' 
0f200                 | ' sub do_circle
0f200                 | _do_circle
0f200     02 4A 05 F6 | 	mov	COUNT_, #2
0f204     A8 00 A0 FD | 	call	#pushregs_
0f208     24 F0 07 F1 | 	add	ptra, #36
0f20c     7C D9 BF FD | 	call	#_pop
0f210     FD 18 02 F6 | 	mov	arg04, result1
0f214     FE 16 02 F6 | 	mov	arg03, result2
0f218     FF 14 02 F6 | 	mov	arg02, result3
0f21c     18 4E 05 F1 | 	add	fp, #24
0f220     A7 18 62 FC | 	wrlong	arg04, fp
0f224     04 4E 05 F1 | 	add	fp, #4
0f228     A7 16 62 FC | 	wrlong	arg03, fp
0f22c     04 4E 05 F1 | 	add	fp, #4
0f230     A7 14 62 FC | 	wrlong	arg02, fp
0f234     20 4E 85 F1 | 	sub	fp, #32
0f238     50 D9 BF FD | 	call	#_pop
0f23c     FD 18 02 F6 | 	mov	arg04, result1
0f240     FE 16 02 F6 | 	mov	arg03, result2
0f244     FF 26 02 F6 | 	mov	local01, result3
0f248     0C 4E 05 F1 | 	add	fp, #12
0f24c     A7 18 62 FC | 	wrlong	arg04, fp
0f250     04 4E 05 F1 | 	add	fp, #4
0f254     A7 16 62 FC | 	wrlong	arg03, fp
0f258     04 4E 05 F1 | 	add	fp, #4
0f25c     A7 26 62 FC | 	wrlong	local01, fp
0f260     14 4E 85 F1 | 	sub	fp, #20
0f264     24 D9 BF FD | 	call	#_pop
0f268     A7 FA 61 FC | 	wrlong	result1, fp
0f26c     04 4E 05 F1 | 	add	fp, #4
0f270     A7 FC 61 FC | 	wrlong	result2, fp
0f274     04 4E 05 F1 | 	add	fp, #4
0f278     A7 FE 61 FC | 	wrlong	result3, fp
0f27c                 | ' 
0f27c                 | ' t3=pop()
0f27c                 | ' t2=pop()
0f27c                 | ' t1=pop()
0f27c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f27c     FF 18 02 F6 | 	mov	arg04, result3
0f280     08 4E 85 F1 | 	sub	fp, #8
0f284     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f288     08 4E 05 51 |  if_ne	add	fp, #8
0f28c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f290     08 4E 85 51 |  if_ne	sub	fp, #8
0f294     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f298     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f29c     14 4E 05 F1 | 	add	fp, #20
0f2a0     A7 26 02 FB | 	rdlong	local01, fp
0f2a4     14 4E 85 F1 | 	sub	fp, #20
0f2a8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f2ac     14 4E 05 51 |  if_ne	add	fp, #20
0f2b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2b4     14 4E 85 51 |  if_ne	sub	fp, #20
0f2b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2bc     58 00 90 5D |  if_ne	jmp	#LR__1290
0f2c0     20 4E 05 F1 | 	add	fp, #32
0f2c4     A7 26 02 FB | 	rdlong	local01, fp
0f2c8     20 4E 85 F1 | 	sub	fp, #32
0f2cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f2d0     20 4E 05 51 |  if_ne	add	fp, #32
0f2d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2d8     20 4E 85 51 |  if_ne	sub	fp, #32
0f2dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2e0     34 00 90 5D |  if_ne	jmp	#LR__1290
0f2e4     A7 12 02 FB | 	rdlong	arg01, fp
0f2e8     0C 4E 05 F1 | 	add	fp, #12
0f2ec     A7 14 02 FB | 	rdlong	arg02, fp
0f2f0     0C 4E 05 F1 | 	add	fp, #12
0f2f4     A7 16 02 FB | 	rdlong	arg03, fp
0f2f8     18 4E 85 F1 | 	sub	fp, #24
0f2fc     37 00 00 FF 
0f300     28 E4 05 F1 | 	add	objptr, ##28200
0f304     F2 18 02 FB | 	rdlong	arg04, objptr
0f308     37 00 00 FF 
0f30c     28 E4 85 F1 | 	sub	objptr, ##28200
0f310     30 2B B1 FD | 	call	#_hg010b_spin2_circle
0f314                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f314     54 00 90 FD | 	jmp	#LR__1291
0f318                 | LR__1290
0f318     A7 12 02 F6 | 	mov	arg01, fp
0f31c     50 DA BF FD | 	call	#_converttoint
0f320     FD 26 02 F6 | 	mov	local01, result1
0f324     0C 4E 05 F1 | 	add	fp, #12
0f328     A7 12 02 F6 | 	mov	arg01, fp
0f32c     0C 4E 85 F1 | 	sub	fp, #12
0f330     3C DA BF FD | 	call	#_converttoint
0f334     FD 28 02 F6 | 	mov	local02, result1
0f338     18 4E 05 F1 | 	add	fp, #24
0f33c     A7 12 02 F6 | 	mov	arg01, fp
0f340     18 4E 85 F1 | 	sub	fp, #24
0f344     28 DA BF FD | 	call	#_converttoint
0f348     FD 16 02 F6 | 	mov	arg03, result1
0f34c     37 00 00 FF 
0f350     28 E4 05 F1 | 	add	objptr, ##28200
0f354     F2 18 02 FB | 	rdlong	arg04, objptr
0f358     37 00 00 FF 
0f35c     28 E4 85 F1 | 	sub	objptr, ##28200
0f360     13 13 02 F6 | 	mov	arg01, local01
0f364     14 15 02 F6 | 	mov	arg02, local02
0f368     D8 2A B1 FD | 	call	#_hg010b_spin2_circle
0f36c                 | LR__1291
0f36c     A7 F0 03 F6 | 	mov	ptra, fp
0f370     B2 00 A0 FD | 	call	#popregs_
0f374                 | _do_circle_ret
0f374     2D 00 64 FD | 	ret
0f378                 | 
0f378                 | ' 
0f378                 | ' '-------------------- click
0f378                 | ' 
0f378                 | ' sub do_click
0f378                 | _do_click
0f378     10 D8 BF FD | 	call	#_pop
0f37c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f380                 | ' 
0f380                 | ' t1=pop()
0f380                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f380     50 00 00 AF 
0f384     14 E5 05 A1 |  if_e	add	objptr, ##41236
0f388     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f38c     50 00 00 FF 
0f390     14 E5 C5 F3 | 	sumz	objptr, ##41236
0f394     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f398     50 00 00 5F 
0f39c     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0f3a0                 | _do_click_ret
0f3a0     2D 00 64 FD | 	ret
0f3a4                 | 
0f3a4                 | ' 
0f3a4                 | ' '-------------------- close
0f3a4                 | ' 
0f3a4                 | ' sub do_close
0f3a4                 | _do_close
0f3a4     03 4A 05 F6 | 	mov	COUNT_, #3
0f3a8     A8 00 A0 FD | 	call	#pushregs_
0f3ac     DC D7 BF FD | 	call	#_pop
0f3b0     FD 26 02 F6 | 	mov	local01, result1
0f3b4     FF 16 02 F6 | 	mov	arg03, result3
0f3b8     FE 28 02 F6 | 	mov	local02, result2
0f3bc     0B 2B 02 F6 | 	mov	local03, arg03
0f3c0                 | ' 
0f3c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f3c0                 | ' t1=pop()
0f3c0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f3c0     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f3c4     44 00 90 AD |  if_e	jmp	#LR__1300
0f3c8     00 12 06 F6 | 	mov	arg01, #0
0f3cc     6C A8 B1 FD | 	call	#__system___getiolock_0579
0f3d0     FD 12 02 F6 | 	mov	arg01, result1
0f3d4     3C 4B B1 FD | 	call	#__system___lockmem
0f3d8     A1 01 00 FF 
0f3dc     20 14 06 F6 | 	mov	arg02, ##@LR__5717
0f3e0     00 12 06 F6 | 	mov	arg01, #0
0f3e4     00 16 06 F6 | 	mov	arg03, #0
0f3e8     1C 58 B1 FD | 	call	#__system___basic_print_string
0f3ec     00 12 06 F6 | 	mov	arg01, #0
0f3f0     0A 14 06 F6 | 	mov	arg02, #10
0f3f4     00 16 06 F6 | 	mov	arg03, #0
0f3f8     B4 57 B1 FD | 	call	#__system___basic_print_char
0f3fc     00 12 06 F6 | 	mov	arg01, #0
0f400     38 A8 B1 FD | 	call	#__system___getiolock_0579
0f404     FD 00 68 FC | 	wrlong	#0, result1
0f408     08 00 90 FD | 	jmp	#LR__1301
0f40c                 | LR__1300
0f40c                 | ' channel  = t1.result.iresult
0f40c                 | ' close #channel
0f40c     13 13 02 F6 | 	mov	arg01, local01
0f410     58 9E B1 FD | 	call	#__system__close
0f414                 | LR__1301
0f414     A7 F0 03 F6 | 	mov	ptra, fp
0f418     B2 00 A0 FD | 	call	#popregs_
0f41c                 | _do_close_ret
0f41c     2D 00 64 FD | 	ret
0f420                 | 
0f420                 | ' 
0f420                 | ' '-------------------- cls
0f420                 | ' 
0f420                 | ' sub do_cls
0f420                 | _do_cls
0f420     37 00 00 FF 
0f424     3C E4 05 F1 | 	add	objptr, ##28220
0f428     F2 12 02 FB | 	rdlong	arg01, objptr
0f42c     04 E4 85 F1 | 	sub	objptr, #4
0f430     F2 14 02 FB | 	rdlong	arg02, objptr
0f434     37 00 00 FF 
0f438     38 E4 85 F1 | 	sub	objptr, ##28216
0f43c     98 2E B1 FD | 	call	#_hg010b_spin2_cls
0f440     37 00 00 FF 
0f444     3C E4 05 F1 | 	add	objptr, ##28220
0f448     F2 14 02 FB | 	rdlong	arg02, objptr
0f44c     14 E4 85 F1 | 	sub	objptr, #20
0f450     F2 14 62 FC | 	wrlong	arg02, objptr
0f454     37 00 00 FF 
0f458     28 E4 85 F1 | 	sub	objptr, ##28200
0f45c                 | _do_cls_ret
0f45c     2D 00 64 FD | 	ret
0f460                 | 
0f460                 | ' 
0f460                 | ' '-------------------- color
0f460                 | ' 
0f460                 | ' sub do_color
0f460                 | _do_color
0f460     03 4A 05 F6 | 	mov	COUNT_, #3
0f464     A8 00 A0 FD | 	call	#pushregs_
0f468     20 D7 BF FD | 	call	#_pop
0f46c     FD 26 02 F6 | 	mov	local01, result1
0f470     FE 28 02 F6 | 	mov	local02, result2
0f474     FF 2A 02 F6 | 	mov	local03, result3
0f478     37 00 00 FF 
0f47c     28 E4 05 F1 | 	add	objptr, ##28200
0f480     F2 26 62 FC | 	wrlong	local01, objptr
0f484     37 00 00 FF 
0f488     28 E4 85 F1 | 	sub	objptr, ##28200
0f48c     A7 F0 03 F6 | 	mov	ptra, fp
0f490     B2 00 A0 FD | 	call	#popregs_
0f494                 | _do_color_ret
0f494     2D 00 64 FD | 	ret
0f498                 | 
0f498                 | ' 
0f498                 | ' '-------------------- cos
0f498                 | ' 
0f498                 | ' sub do_cos
0f498                 | _do_cos
0f498     01 4A 05 F6 | 	mov	COUNT_, #1
0f49c     A8 00 A0 FD | 	call	#pushregs_
0f4a0     10 F0 07 F1 | 	add	ptra, #16
0f4a4     4A 00 00 FF 
0f4a8     80 E4 05 F1 | 	add	objptr, ##38016
0f4ac     F2 26 02 FB | 	rdlong	local01, objptr
0f4b0     13 17 02 F6 | 	mov	arg03, local01
0f4b4     01 16 66 F0 | 	shl	arg03, #1
0f4b8     13 17 02 F1 | 	add	arg03, local01
0f4bc     02 16 66 F0 | 	shl	arg03, #2
0f4c0     03 00 00 FF 
0f4c4     04 E4 85 F1 | 	sub	objptr, ##1540
0f4c8     F2 16 02 F1 | 	add	arg03, objptr
0f4cc     0B 17 02 FB | 	rdlong	arg03, arg03
0f4d0     0C 4E 05 F1 | 	add	fp, #12
0f4d4     A7 16 62 FC | 	wrlong	arg03, fp
0f4d8                 | ' 
0f4d8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4d8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f4d8     0C 4E 85 F1 | 	sub	fp, #12
0f4dc     02 16 16 F2 | 	cmp	arg03, #2 wc
0f4e0     47 00 00 FF 
0f4e4     7C E4 85 F1 | 	sub	objptr, ##36476
0f4e8     0C 4E 05 C1 |  if_b	add	fp, #12
0f4ec     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f4f0     0C 4E 85 C1 |  if_b	sub	fp, #12
0f4f4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0f4f8     00 12 06 F6 | 	mov	arg01, #0
0f4fc     3C A7 B1 FD | 	call	#__system___getiolock_0579
0f500     FD 12 02 F6 | 	mov	arg01, result1
0f504     0C 4A B1 FD | 	call	#__system___lockmem
0f508     A1 01 00 FF 
0f50c     32 14 06 F6 | 	mov	arg02, ##@LR__5718
0f510     00 12 06 F6 | 	mov	arg01, #0
0f514     00 16 06 F6 | 	mov	arg03, #0
0f518     EC 56 B1 FD | 	call	#__system___basic_print_string
0f51c     00 12 06 F6 | 	mov	arg01, #0
0f520     18 A7 B1 FD | 	call	#__system___getiolock_0579
0f524     FD 00 68 FC | 	wrlong	#0, result1
0f528     27 12 06 F6 | 	mov	arg01, #39
0f52c     00 14 06 F6 | 	mov	arg02, #0
0f530     3C 10 B1 FD | 	call	#_printerror
0f534     78 00 90 FD | 	jmp	#LR__1311
0f538                 | LR__1310
0f538     50 D6 BF FD | 	call	#_pop
0f53c     A7 FA 61 FC | 	wrlong	result1, fp
0f540     04 4E 05 F1 | 	add	fp, #4
0f544     A7 FC 61 FC | 	wrlong	result2, fp
0f548     04 4E 05 F1 | 	add	fp, #4
0f54c     A7 FE 61 FC | 	wrlong	result3, fp
0f550     08 4E 85 F1 | 	sub	fp, #8
0f554     51 00 00 FF 
0f558     BC E5 05 F1 | 	add	objptr, ##41916
0f55c     F2 26 02 FB | 	rdlong	local01, objptr
0f560     51 00 00 FF 
0f564     BC E5 85 F1 | 	sub	objptr, ##41916
0f568     A7 12 02 F6 | 	mov	arg01, fp
0f56c     BC D8 BF FD | 	call	#_converttofloat
0f570     FD 14 02 F6 | 	mov	arg02, result1
0f574     13 13 02 F6 | 	mov	arg01, local01
0f578     10 78 B1 FD | 	call	#__system___float_mul
0f57c     FD 14 02 F6 | 	mov	arg02, result1
0f580     87 E4 1F FF 
0f584     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f588     1F 14 E6 F4 | 	bitnot	arg02, #31
0f58c     2C 74 B1 FD | 	call	#__system___float_add
0f590     FD 12 02 F6 | 	mov	arg01, result1
0f594     54 81 B1 FD | 	call	#__system____builtin_sinf
0f598     A7 FA 61 FC | 	wrlong	result1, fp
0f59c     08 4E 05 F1 | 	add	fp, #8
0f5a0     A7 3C 68 FC | 	wrlong	#30, fp
0f5a4     08 4E 85 F1 | 	sub	fp, #8
0f5a8     A7 12 02 F6 | 	mov	arg01, fp
0f5ac     74 D6 BF FD | 	call	#_push
0f5b0                 | LR__1311
0f5b0     A7 F0 03 F6 | 	mov	ptra, fp
0f5b4     B2 00 A0 FD | 	call	#popregs_
0f5b8                 | _do_cos_ret
0f5b8     2D 00 64 FD | 	ret
0f5bc                 | 
0f5bc                 | ' 
0f5bc                 | ' '-------------------- cursor
0f5bc                 | ' 
0f5bc                 | ' sub do_cursor
0f5bc                 | _do_cursor
0f5bc     CC D5 BF FD | 	call	#_pop
0f5c0     00 FA 4D F2 | 	cmps	result1, #0 wz
0f5c4                 | ' t1=pop()
0f5c4                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f5c4     14 00 90 5D |  if_ne	jmp	#LR__1320
0f5c8     11 12 06 F6 | 	mov	arg01, #17
0f5cc     00 14 06 F6 | 	mov	arg02, #0
0f5d0     00 16 06 F6 | 	mov	arg03, #0
0f5d4     E0 1F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f5d8     10 00 90 FD | 	jmp	#LR__1321
0f5dc                 | LR__1320
0f5dc     11 12 06 F6 | 	mov	arg01, #17
0f5e0     08 14 06 F6 | 	mov	arg02, #8
0f5e4     10 16 06 F6 | 	mov	arg03, #16
0f5e8     CC 1F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f5ec                 | LR__1321
0f5ec                 | _do_cursor_ret
0f5ec     2D 00 64 FD | 	ret
0f5f0                 | 
0f5f0                 | ' 
0f5f0                 | ' '-------------------- defenv
0f5f0                 | ' 
0f5f0                 | ' sub do_defenv
0f5f0                 | _do_defenv
0f5f0     08 4A 05 F6 | 	mov	COUNT_, #8
0f5f4     A8 00 A0 FD | 	call	#pushregs_
0f5f8     58 F0 07 F1 | 	add	ptra, #88
0f5fc     4A 00 00 FF 
0f600     80 E4 05 F1 | 	add	objptr, ##38016
0f604     F2 26 02 FB | 	rdlong	local01, objptr
0f608     13 1B 02 F6 | 	mov	arg05, local01
0f60c     01 1A 66 F0 | 	shl	arg05, #1
0f610     13 1B 02 F1 | 	add	arg05, local01
0f614     02 1A 66 F0 | 	shl	arg05, #2
0f618     03 00 00 FF 
0f61c     04 E4 85 F1 | 	sub	objptr, ##1540
0f620     F2 1A 02 F1 | 	add	arg05, objptr
0f624     0D 1B 02 FB | 	rdlong	arg05, arg05
0f628     10 4E 05 F1 | 	add	fp, #16
0f62c     A7 1A 62 FC | 	wrlong	arg05, fp
0f630                 | ' 
0f630                 | ' numpar=compiledline(lineptr_e).result.uresult
0f630                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f630     10 4E 85 F1 | 	sub	fp, #16
0f634     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f638     47 00 00 FF 
0f63c     7C E4 85 F1 | 	sub	objptr, ##36476
0f640     10 4E 05 51 |  if_ne	add	fp, #16
0f644     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f648     10 4E 85 51 |  if_ne	sub	fp, #16
0f64c     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f650     8C 0A 90 5D |  if_ne	jmp	#LR__1351
0f654                 | ' 
0f654                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f654     10 4E 05 F1 | 	add	fp, #16
0f658     A7 26 02 FB | 	rdlong	local01, fp
0f65c     10 4E 85 F1 | 	sub	fp, #16
0f660     02 26 0E F2 | 	cmp	local01, #2 wz
0f664     24 04 90 5D |  if_ne	jmp	#LR__1343
0f668     20 D5 BF FD | 	call	#_pop
0f66c     FF 1A 02 F6 | 	mov	arg05, result3
0f670     40 4E 05 F1 | 	add	fp, #64
0f674     A7 FA 61 FC | 	wrlong	result1, fp
0f678     04 4E 05 F1 | 	add	fp, #4
0f67c     A7 FC 61 FC | 	wrlong	result2, fp
0f680     04 4E 05 F1 | 	add	fp, #4
0f684     A7 1A 62 FC | 	wrlong	arg05, fp
0f688                 | '   t1=pop()
0f688                 | '   if t1.result_type=result_string2 then 
0f688     48 4E 85 F1 | 	sub	fp, #72
0f68c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f690     20 00 90 5D |  if_ne	jmp	#LR__1330
0f694     40 4E 05 F1 | 	add	fp, #64
0f698     A7 12 02 FB | 	rdlong	arg01, fp
0f69c     40 4E 85 F1 | 	sub	fp, #64
0f6a0     60 D6 BF FD | 	call	#_convertstring
0f6a4     4C 4E 05 F1 | 	add	fp, #76
0f6a8     A7 FA 61 FC | 	wrlong	result1, fp
0f6ac     4C 4E 85 F1 | 	sub	fp, #76
0f6b0     58 00 90 FD | 	jmp	#LR__1333
0f6b4                 | LR__1330
0f6b4     48 4E 05 F1 | 	add	fp, #72
0f6b8     A7 26 02 FB | 	rdlong	local01, fp
0f6bc     48 4E 85 F1 | 	sub	fp, #72
0f6c0     1F 26 0E F2 | 	cmp	local01, #31 wz
0f6c4     18 00 90 5D |  if_ne	jmp	#LR__1331
0f6c8     40 4E 05 F1 | 	add	fp, #64
0f6cc     A7 26 02 FB | 	rdlong	local01, fp
0f6d0     0C 4E 05 F1 | 	add	fp, #12
0f6d4     A7 26 62 FC | 	wrlong	local01, fp
0f6d8     4C 4E 85 F1 | 	sub	fp, #76
0f6dc     2C 00 90 FD | 	jmp	#LR__1332
0f6e0                 | LR__1331
0f6e0     A1 01 00 FF 
0f6e4     38 26 06 F6 | 	mov	local01, ##@LR__5719
0f6e8     4C 4E 05 F1 | 	add	fp, #76
0f6ec     A7 26 62 FC | 	wrlong	local01, fp
0f6f0     0C 4E 85 F1 | 	sub	fp, #12
0f6f4     A7 12 02 F6 | 	mov	arg01, fp
0f6f8     40 4E 85 F1 | 	sub	fp, #64
0f6fc     70 D6 BF FD | 	call	#_converttoint
0f700     1C 4E 05 F1 | 	add	fp, #28
0f704     A7 FA 61 FC | 	wrlong	result1, fp
0f708     1C 4E 85 F1 | 	sub	fp, #28
0f70c                 | LR__1332
0f70c                 | LR__1333
0f70c                 | '   if s1<>"" then 
0f70c     4C 4E 05 F1 | 	add	fp, #76
0f710     A7 12 02 FB | 	rdlong	arg01, fp
0f714     4C 4E 85 F1 | 	sub	fp, #76
0f718     A1 01 00 FF 
0f71c     39 14 06 F6 | 	mov	arg02, ##@LR__5720
0f720     18 48 B1 FD | 	call	#__system___string_cmp
0f724     00 FA 0D F2 | 	cmp	result1, #0 wz
0f728     24 02 90 AD |  if_e	jmp	#LR__1337
0f72c     5C D4 BF FD | 	call	#_pop
0f730     FF 26 02 F6 | 	mov	local01, result3
0f734     40 4E 05 F1 | 	add	fp, #64
0f738     A7 FA 61 FC | 	wrlong	result1, fp
0f73c     04 4E 05 F1 | 	add	fp, #4
0f740     A7 FC 61 FC | 	wrlong	result2, fp
0f744     04 4E 05 F1 | 	add	fp, #4
0f748     A7 26 62 FC | 	wrlong	local01, fp
0f74c     08 4E 85 F1 | 	sub	fp, #8
0f750     A7 12 02 F6 | 	mov	arg01, fp
0f754     40 4E 85 F1 | 	sub	fp, #64
0f758     14 D6 BF FD | 	call	#_converttoint
0f75c     18 4E 05 F1 | 	add	fp, #24
0f760     A7 FA 61 FC | 	wrlong	result1, fp
0f764     18 4E 85 F1 | 	sub	fp, #24
0f768                 | '     t1=pop()
0f768                 | '     channel=converttoint(t1) 
0f768                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f768     09 12 06 F6 | 	mov	arg01, #9
0f76c     FC 9A B1 FD | 	call	#__system__close
0f770     09 26 06 F6 | 	mov	local01, #9
0f774     A1 01 00 FF 
0f778     3A 12 06 F6 | 	mov	arg01, ##@LR__5721
0f77c     4C 4E 05 F1 | 	add	fp, #76
0f780     A7 14 02 FB | 	rdlong	arg02, fp
0f784     4C 4E 85 F1 | 	sub	fp, #76
0f788     E4 47 B1 FD | 	call	#__system___string_concat
0f78c     FD 14 02 F6 | 	mov	arg02, result1
0f790     13 13 02 F6 | 	mov	arg01, local01
0f794     00 16 06 F6 | 	mov	arg03, #0
0f798     7C 53 B1 FD | 	call	#__system___basic_open_string
0f79c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f7a0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f7a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f7a8     0C 4E 05 F1 | 	add	fp, #12
0f7ac     A7 FA 61 FC | 	wrlong	result1, fp
0f7b0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f7b0     0C 4E 85 F1 | 	sub	fp, #12
0f7b4     A0 00 90 AD |  if_e	jmp	#LR__1334
0f7b8     00 12 06 F6 | 	mov	arg01, #0
0f7bc     7C A4 B1 FD | 	call	#__system___getiolock_0579
0f7c0     FD 12 02 F6 | 	mov	arg01, result1
0f7c4     4C 47 B1 FD | 	call	#__system___lockmem
0f7c8     A1 01 00 FF 
0f7cc     47 14 06 F6 | 	mov	arg02, ##@LR__5722
0f7d0     00 12 06 F6 | 	mov	arg01, #0
0f7d4     00 16 06 F6 | 	mov	arg03, #0
0f7d8     2C 54 B1 FD | 	call	#__system___basic_print_string
0f7dc     0C 4E 05 F1 | 	add	fp, #12
0f7e0     A7 14 02 FB | 	rdlong	arg02, fp
0f7e4     0C 4E 85 F1 | 	sub	fp, #12
0f7e8     00 12 06 F6 | 	mov	arg01, #0
0f7ec     00 16 06 F6 | 	mov	arg03, #0
0f7f0     0A 18 06 F6 | 	mov	arg04, #10
0f7f4     54 54 B1 FD | 	call	#__system___basic_print_integer
0f7f8     A1 01 00 FF 
0f7fc     55 14 06 F6 | 	mov	arg02, ##@LR__5723
0f800     00 12 06 F6 | 	mov	arg01, #0
0f804     00 16 06 F6 | 	mov	arg03, #0
0f808     FC 53 B1 FD | 	call	#__system___basic_print_string
0f80c     00 26 06 F6 | 	mov	local01, #0
0f810     0C 4E 05 F1 | 	add	fp, #12
0f814     A7 12 02 FB | 	rdlong	arg01, fp
0f818     0C 4E 85 F1 | 	sub	fp, #12
0f81c     80 70 B1 FD | 	call	#__system___strerror
0f820     FD 14 02 F6 | 	mov	arg02, result1
0f824     13 13 02 F6 | 	mov	arg01, local01
0f828     00 16 06 F6 | 	mov	arg03, #0
0f82c     D8 53 B1 FD | 	call	#__system___basic_print_string
0f830     00 12 06 F6 | 	mov	arg01, #0
0f834     0A 14 06 F6 | 	mov	arg02, #10
0f838     00 16 06 F6 | 	mov	arg03, #0
0f83c     70 53 B1 FD | 	call	#__system___basic_print_char
0f840     00 12 06 F6 | 	mov	arg01, #0
0f844     F4 A3 B1 FD | 	call	#__system___getiolock_0579
0f848     FD 00 68 FC | 	wrlong	#0, result1
0f84c     09 12 06 F6 | 	mov	arg01, #9
0f850     18 9A B1 FD | 	call	#__system__close
0f854     88 08 90 FD | 	jmp	#LR__1351
0f858                 | LR__1334
0f858                 | '     get #9,17,envbuf8(channel,0),256
0f858     18 4E 05 F1 | 	add	fp, #24
0f85c     A7 1A 02 FB | 	rdlong	arg05, fp
0f860     18 4E 85 F1 | 	sub	fp, #24
0f864     0D 17 02 F6 | 	mov	arg03, arg05
0f868     09 16 66 F0 | 	shl	arg03, #9
0f86c     0D 17 02 F1 | 	add	arg03, arg05
0f870     0C 00 00 FF 
0f874     D8 E4 05 F1 | 	add	objptr, ##6360
0f878     F2 16 02 F1 | 	add	arg03, objptr
0f87c     09 12 06 F6 | 	mov	arg01, #9
0f880     11 14 06 F6 | 	mov	arg02, #17
0f884     00 19 06 F6 | 	mov	arg04, #256
0f888     01 1A 06 F6 | 	mov	arg05, #1
0f88c     0C 00 00 FF 
0f890     D8 E4 85 F1 | 	sub	objptr, ##6360
0f894     EC 54 B1 FD | 	call	#__system___basic_get
0f898                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f898     14 4E 05 F1 | 	add	fp, #20
0f89c     A7 FE 69 FC | 	wrlong	#255, fp
0f8a0     14 4E 85 F1 | 	sub	fp, #20
0f8a4     0C 00 00 FF 
0f8a8     D8 E4 05 F1 | 	add	objptr, ##6360
0f8ac     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
0f8b0                 | LR__1335
0f8b0     18 4E 05 F1 | 	add	fp, #24
0f8b4     A7 16 02 FB | 	rdlong	arg03, fp
0f8b8     0B 27 02 F6 | 	mov	local01, arg03
0f8bc     09 26 66 F0 | 	shl	local01, #9
0f8c0     F2 26 02 F1 | 	add	local01, objptr
0f8c4     04 4E 85 F1 | 	sub	fp, #4
0f8c8     A7 1A 02 FB | 	rdlong	arg05, fp
0f8cc     0D 19 02 F6 | 	mov	arg04, arg05
0f8d0     01 18 66 F0 | 	shl	arg04, #1
0f8d4     13 19 02 F1 | 	add	arg04, local01
0f8d8     0B 27 02 F6 | 	mov	local01, arg03
0f8dc     09 26 66 F0 | 	shl	local01, #9
0f8e0     0B 27 02 F1 | 	add	local01, arg03
0f8e4     F2 26 02 F1 | 	add	local01, objptr
0f8e8     13 1B 02 F1 | 	add	arg05, local01
0f8ec     0D 27 C2 FA | 	rdbyte	local01, arg05
0f8f0     00 27 06 FA | 	mul	local01, #256
0f8f4     0C 27 52 FC | 	wrword	local01, arg04
0f8f8     A7 26 02 FB | 	rdlong	local01, fp
0f8fc     01 26 86 F1 | 	sub	local01, #1
0f900     A7 26 62 FC | 	wrlong	local01, fp
0f904     14 4E 85 F1 | 	sub	fp, #20
0f908     00 26 56 F2 | 	cmps	local01, #0 wc
0f90c     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
0f910                 | LR__1336
0f910     0C 00 00 FF 
0f914     D8 E4 85 F1 | 	sub	objptr, ##6360
0f918                 | '     close #9
0f918     09 12 06 F6 | 	mov	arg01, #9
0f91c     4C 99 B1 FD | 	call	#__system__close
0f920     18 4E 05 F1 | 	add	fp, #24
0f924     A7 26 02 FB | 	rdlong	local01, fp
0f928     18 4E 85 F1 | 	sub	fp, #24
0f92c     09 26 66 F0 | 	shl	local01, #9
0f930     0C 00 00 FF 
0f934     D8 E4 05 F1 | 	add	objptr, ##6360
0f938     F2 26 02 F1 | 	add	local01, objptr
0f93c     FE 27 06 F1 | 	add	local01, #510
0f940     13 01 58 FC | 	wrword	#0, local01
0f944                 | '     envbuf(channel,255)=0                                                              
0f944                 | '     return
0f944     0C 00 00 FF 
0f948     D8 E4 85 F1 | 	sub	objptr, ##6360
0f94c     90 07 90 FD | 	jmp	#LR__1351
0f950                 | LR__1337
0f950                 | '     if wptr < $80000 then 
0f950     1C 4E 05 F1 | 	add	fp, #28
0f954     A7 28 02 FB | 	rdlong	local02, fp
0f958     1C 4E 85 F1 | 	sub	fp, #28
0f95c     00 04 00 FF 
0f960     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f964     7C 00 90 3D |  if_ae	jmp	#LR__1340
0f968                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f968     14 4E 05 F1 | 	add	fp, #20
0f96c     A7 00 68 FC | 	wrlong	#0, fp
0f970     14 4E 85 F1 | 	sub	fp, #20
0f974     0C 00 00 FF 
0f978     D8 E4 05 F1 | 	add	objptr, ##6360
0f97c     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
0f980                 | LR__1338
0f980     18 4E 05 F1 | 	add	fp, #24
0f984     A7 28 02 FB | 	rdlong	local02, fp
0f988     09 28 66 F0 | 	shl	local02, #9
0f98c     F2 28 02 F1 | 	add	local02, objptr
0f990     04 4E 85 F1 | 	sub	fp, #4
0f994     A7 26 02 FB | 	rdlong	local01, fp
0f998     13 1B 02 F6 | 	mov	arg05, local01
0f99c     01 1A 66 F0 | 	shl	arg05, #1
0f9a0     14 1B 02 F1 | 	add	arg05, local02
0f9a4     08 4E 05 F1 | 	add	fp, #8
0f9a8     A7 12 02 FB | 	rdlong	arg01, fp
0f9ac     01 26 66 F0 | 	shl	local01, #1
0f9b0     13 13 02 F1 | 	add	arg01, local01
0f9b4     09 FB E1 FA | 	rdword	result1, arg01
0f9b8     0D FB 51 FC | 	wrword	result1, arg05
0f9bc     08 4E 85 F1 | 	sub	fp, #8
0f9c0     A7 28 02 FB | 	rdlong	local02, fp
0f9c4     01 28 06 F1 | 	add	local02, #1
0f9c8     A7 28 62 FC | 	wrlong	local02, fp
0f9cc     14 4E 85 F1 | 	sub	fp, #20
0f9d0     00 29 56 F2 | 	cmps	local02, #256 wc
0f9d4     A8 FF 9F CD |  if_b	jmp	#LR__1338
0f9d8                 | LR__1339
0f9d8     0C 00 00 FF 
0f9dc     D8 E4 85 F1 | 	sub	objptr, ##6360
0f9e0     78 00 90 FD | 	jmp	#LR__1342
0f9e4                 | LR__1340
0f9e4                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f9e4     14 4E 05 F1 | 	add	fp, #20
0f9e8     A7 00 68 FC | 	wrlong	#0, fp
0f9ec     14 4E 85 F1 | 	sub	fp, #20
0f9f0                 | LR__1341
0f9f0     18 4E 05 F1 | 	add	fp, #24
0f9f4     A7 28 02 FB | 	rdlong	local02, fp
0f9f8     09 28 66 F0 | 	shl	local02, #9
0f9fc     0C 00 00 FF 
0fa00     D8 E4 05 F1 | 	add	objptr, ##6360
0fa04     F2 28 02 F1 | 	add	local02, objptr
0fa08     04 4E 85 F1 | 	sub	fp, #4
0fa0c     A7 26 02 FB | 	rdlong	local01, fp
0fa10     13 2B 02 F6 | 	mov	local03, local01
0fa14     01 2A 66 F0 | 	shl	local03, #1
0fa18     14 2B 02 F1 | 	add	local03, local02
0fa1c     08 4E 05 F1 | 	add	fp, #8
0fa20     A7 12 02 FB | 	rdlong	arg01, fp
0fa24     1C 4E 85 F1 | 	sub	fp, #28
0fa28     01 26 66 F0 | 	shl	local01, #1
0fa2c     13 13 02 F1 | 	add	arg01, local01
0fa30     0C 00 00 FF 
0fa34     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa38     5C 0E B1 FD | 	call	#_psdpeek
0fa3c     15 FB 51 FC | 	wrword	result1, local03
0fa40     14 4E 05 F1 | 	add	fp, #20
0fa44     A7 2A 02 FB | 	rdlong	local03, fp
0fa48     01 2A 06 F1 | 	add	local03, #1
0fa4c     A7 2A 62 FC | 	wrlong	local03, fp
0fa50     14 4E 85 F1 | 	sub	fp, #20
0fa54     00 2B 56 F2 | 	cmps	local03, #256 wc
0fa58     94 FF 9F CD |  if_b	jmp	#LR__1341
0fa5c                 | LR__1342
0fa5c     18 4E 05 F1 | 	add	fp, #24
0fa60     A7 2A 02 FB | 	rdlong	local03, fp
0fa64     18 4E 85 F1 | 	sub	fp, #24
0fa68     09 2A 66 F0 | 	shl	local03, #9
0fa6c     0C 00 00 FF 
0fa70     D8 E4 05 F1 | 	add	objptr, ##6360
0fa74     F2 2A 02 F1 | 	add	local03, objptr
0fa78     FE 2B 06 F1 | 	add	local03, #510
0fa7c     15 01 58 FC | 	wrword	#0, local03
0fa80                 | '     envbuf(channel,255)=0
0fa80                 | '     return   
0fa80     0C 00 00 FF 
0fa84     D8 E4 85 F1 | 	sub	objptr, ##6360
0fa88     54 06 90 FD | 	jmp	#LR__1351
0fa8c                 | LR__1343
0fa8c                 | ' 
0fa8c                 | ' if numpar=5 then   						 'simple adsr
0fa8c     10 4E 05 F1 | 	add	fp, #16
0fa90     A7 28 02 FB | 	rdlong	local02, fp
0fa94     10 4E 85 F1 | 	sub	fp, #16
0fa98     05 28 0E F2 | 	cmp	local02, #5 wz
0fa9c     14 06 90 5D |  if_ne	jmp	#LR__1350
0faa0     E8 D0 BF FD | 	call	#_pop
0faa4     FF 26 02 F6 | 	mov	local01, result3
0faa8     40 4E 05 F1 | 	add	fp, #64
0faac     A7 FA 61 FC | 	wrlong	result1, fp
0fab0     04 4E 05 F1 | 	add	fp, #4
0fab4     A7 FC 61 FC | 	wrlong	result2, fp
0fab8     04 4E 05 F1 | 	add	fp, #4
0fabc     A7 26 62 FC | 	wrlong	local01, fp
0fac0     08 4E 85 F1 | 	sub	fp, #8
0fac4     A7 12 02 F6 | 	mov	arg01, fp
0fac8     40 4E 85 F1 | 	sub	fp, #64
0facc     5C D3 BF FD | 	call	#_converttofloat
0fad0     FD 28 02 F6 | 	mov	local02, result1
0fad4     2C 4E 05 F1 | 	add	fp, #44
0fad8     A7 28 62 FC | 	wrlong	local02, fp
0fadc     2C 4E 85 F1 | 	sub	fp, #44
0fae0     A8 D0 BF FD | 	call	#_pop
0fae4     FF 26 02 F6 | 	mov	local01, result3
0fae8     40 4E 05 F1 | 	add	fp, #64
0faec     A7 FA 61 FC | 	wrlong	result1, fp
0faf0     04 4E 05 F1 | 	add	fp, #4
0faf4     A7 FC 61 FC | 	wrlong	result2, fp
0faf8     04 4E 05 F1 | 	add	fp, #4
0fafc     A7 26 62 FC | 	wrlong	local01, fp
0fb00     08 4E 85 F1 | 	sub	fp, #8
0fb04     A7 12 02 F6 | 	mov	arg01, fp
0fb08     40 4E 85 F1 | 	sub	fp, #64
0fb0c     1C D3 BF FD | 	call	#_converttofloat
0fb10     FD 28 02 F6 | 	mov	local02, result1
0fb14     28 4E 05 F1 | 	add	fp, #40
0fb18     A7 28 62 FC | 	wrlong	local02, fp
0fb1c     28 4E 85 F1 | 	sub	fp, #40
0fb20     68 D0 BF FD | 	call	#_pop
0fb24     FF 26 02 F6 | 	mov	local01, result3
0fb28     40 4E 05 F1 | 	add	fp, #64
0fb2c     A7 FA 61 FC | 	wrlong	result1, fp
0fb30     04 4E 05 F1 | 	add	fp, #4
0fb34     A7 FC 61 FC | 	wrlong	result2, fp
0fb38     04 4E 05 F1 | 	add	fp, #4
0fb3c     A7 26 62 FC | 	wrlong	local01, fp
0fb40     08 4E 85 F1 | 	sub	fp, #8
0fb44     A7 12 02 F6 | 	mov	arg01, fp
0fb48     40 4E 85 F1 | 	sub	fp, #64
0fb4c     DC D2 BF FD | 	call	#_converttofloat
0fb50     FD 28 02 F6 | 	mov	local02, result1
0fb54     24 4E 05 F1 | 	add	fp, #36
0fb58     A7 28 62 FC | 	wrlong	local02, fp
0fb5c     24 4E 85 F1 | 	sub	fp, #36
0fb60     28 D0 BF FD | 	call	#_pop
0fb64     FF 26 02 F6 | 	mov	local01, result3
0fb68     40 4E 05 F1 | 	add	fp, #64
0fb6c     A7 FA 61 FC | 	wrlong	result1, fp
0fb70     04 4E 05 F1 | 	add	fp, #4
0fb74     A7 FC 61 FC | 	wrlong	result2, fp
0fb78     04 4E 05 F1 | 	add	fp, #4
0fb7c     A7 26 62 FC | 	wrlong	local01, fp
0fb80     08 4E 85 F1 | 	sub	fp, #8
0fb84     A7 12 02 F6 | 	mov	arg01, fp
0fb88     40 4E 85 F1 | 	sub	fp, #64
0fb8c     9C D2 BF FD | 	call	#_converttofloat
0fb90     FD 28 02 F6 | 	mov	local02, result1
0fb94     20 4E 05 F1 | 	add	fp, #32
0fb98     A7 28 62 FC | 	wrlong	local02, fp
0fb9c     20 4E 85 F1 | 	sub	fp, #32
0fba0     E8 CF BF FD | 	call	#_pop
0fba4     FF 26 02 F6 | 	mov	local01, result3
0fba8     40 4E 05 F1 | 	add	fp, #64
0fbac     A7 FA 61 FC | 	wrlong	result1, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     A7 FC 61 FC | 	wrlong	result2, fp
0fbb8     04 4E 05 F1 | 	add	fp, #4
0fbbc     A7 26 62 FC | 	wrlong	local01, fp
0fbc0     08 4E 85 F1 | 	sub	fp, #8
0fbc4     A7 12 02 F6 | 	mov	arg01, fp
0fbc8     40 4E 85 F1 | 	sub	fp, #64
0fbcc     A0 D1 BF FD | 	call	#_converttoint
0fbd0     18 4E 05 F1 | 	add	fp, #24
0fbd4     A7 FA 61 FC | 	wrlong	result1, fp
0fbd8                 | '   t1=pop() : rr=converttofloat(t1)
0fbd8                 | '   t1=pop() : ss=converttofloat(t1) 
0fbd8                 | '   t1=pop() : dd=converttofloat(t1)
0fbd8                 | '   t1=pop() : aa=converttofloat(t1)
0fbd8                 | '   t1=pop() : channel=converttoint(t1)
0fbd8                 | '   if ss<0.0 then ss=0.0 
0fbd8     10 4E 05 F1 | 	add	fp, #16
0fbdc     A7 12 02 FB | 	rdlong	arg01, fp
0fbe0     28 4E 85 F1 | 	sub	fp, #40
0fbe4     00 14 06 F6 | 	mov	arg02, #0
0fbe8     01 16 06 F6 | 	mov	arg03, #1
0fbec     D0 75 B1 FD | 	call	#__system___float_cmp
0fbf0     00 FA 55 F2 | 	cmps	result1, #0 wc
0fbf4     28 4E 05 C1 |  if_b	add	fp, #40
0fbf8     A7 00 68 CC |  if_b	wrlong	#0, fp
0fbfc     28 4E 85 C1 |  if_b	sub	fp, #40
0fc00                 | '   if ss>1.0 then ss=1.0
0fc00     28 4E 05 F1 | 	add	fp, #40
0fc04     A7 12 02 FB | 	rdlong	arg01, fp
0fc08     28 4E 85 F1 | 	sub	fp, #40
0fc0c     00 C0 1F FF 
0fc10     00 14 06 F6 | 	mov	arg02, ##1065353216
0fc14     01 16 66 F6 | 	neg	arg03, #1
0fc18     A4 75 B1 FD | 	call	#__system___float_cmp
0fc1c     01 FA 55 F2 | 	cmps	result1, #1 wc
0fc20     28 4E 05 31 |  if_ae	add	fp, #40
0fc24     00 C0 9F 3F 
0fc28     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fc2c     28 4E 85 31 |  if_ae	sub	fp, #40
0fc30     20 4E 05 F1 | 	add	fp, #32
0fc34     A7 12 02 FB | 	rdlong	arg01, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 14 02 FB | 	rdlong	arg02, fp
0fc40     24 4E 85 F1 | 	sub	fp, #36
0fc44     74 6D B1 FD | 	call	#__system___float_add
0fc48     FD 12 02 F6 | 	mov	arg01, result1
0fc4c     2C 4E 05 F1 | 	add	fp, #44
0fc50     A7 14 02 FB | 	rdlong	arg02, fp
0fc54     2C 4E 85 F1 | 	sub	fp, #44
0fc58     60 6D B1 FD | 	call	#__system___float_add
0fc5c     30 4E 05 F1 | 	add	fp, #48
0fc60     A7 FA 61 FC | 	wrlong	result1, fp
0fc64     FD 14 02 F6 | 	mov	arg02, result1
0fc68     30 4E 85 F1 | 	sub	fp, #48
0fc6c     00 C0 21 FF 
0fc70     00 12 06 F6 | 	mov	arg01, ##1132462080
0fc74     18 73 B1 FD | 	call	#__system___float_div
0fc78     34 4E 05 F1 | 	add	fp, #52
0fc7c     A7 FA 61 FC | 	wrlong	result1, fp
0fc80     14 4E 85 F1 | 	sub	fp, #20
0fc84     A7 12 02 FB | 	rdlong	arg01, fp
0fc88     FD 14 02 F6 | 	mov	arg02, result1
0fc8c     20 4E 85 F1 | 	sub	fp, #32
0fc90     F8 70 B1 FD | 	call	#__system___float_mul
0fc94     FD 12 02 F6 | 	mov	arg01, result1
0fc98     01 14 06 F6 | 	mov	arg02, #1
0fc9c     B4 75 B1 FD | 	call	#__system___float_tointeger
0fca0     A7 FA 61 FC | 	wrlong	result1, fp
0fca4     24 4E 05 F1 | 	add	fp, #36
0fca8     A7 12 02 FB | 	rdlong	arg01, fp
0fcac     10 4E 05 F1 | 	add	fp, #16
0fcb0     A7 14 02 FB | 	rdlong	arg02, fp
0fcb4     34 4E 85 F1 | 	sub	fp, #52
0fcb8     D0 70 B1 FD | 	call	#__system___float_mul
0fcbc     FD 12 02 F6 | 	mov	arg01, result1
0fcc0     01 14 06 F6 | 	mov	arg02, #1
0fcc4     8C 75 B1 FD | 	call	#__system___float_tointeger
0fcc8     04 4E 05 F1 | 	add	fp, #4
0fccc     A7 FA 61 FC | 	wrlong	result1, fp
0fcd0     28 4E 05 F1 | 	add	fp, #40
0fcd4     A7 12 02 FB | 	rdlong	arg01, fp
0fcd8     08 4E 05 F1 | 	add	fp, #8
0fcdc     A7 14 02 FB | 	rdlong	arg02, fp
0fce0     34 4E 85 F1 | 	sub	fp, #52
0fce4     A4 70 B1 FD | 	call	#__system___float_mul
0fce8     FD 12 02 F6 | 	mov	arg01, result1
0fcec     01 14 06 F6 | 	mov	arg02, #1
0fcf0     60 75 B1 FD | 	call	#__system___float_tointeger
0fcf4     0C 4E 05 F1 | 	add	fp, #12
0fcf8     A7 FA 61 FC | 	wrlong	result1, fp
0fcfc     0C 4E 85 F1 | 	sub	fp, #12
0fd00     F8 BF 23 FF 
0fd04     00 28 06 F6 | 	mov	local02, ##1199566848
0fd08     A7 12 02 FB | 	rdlong	arg01, fp
0fd0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd10     1F 2C C6 C9 |  if_b	decod	local04, #31
0fd14     00 2C 06 36 |  if_ae	mov	local04, #0
0fd18     6C 6C B1 FD | 	call	#__system___float_fromuns
0fd1c     16 FB 61 F5 | 	xor	result1, local04
0fd20     FD 14 02 F6 | 	mov	arg02, result1
0fd24     14 13 02 F6 | 	mov	arg01, local02
0fd28     64 72 B1 FD | 	call	#__system___float_div
0fd2c     38 4E 05 F1 | 	add	fp, #56
0fd30     A7 FA 61 FC | 	wrlong	result1, fp
0fd34     F8 BF 23 FF 
0fd38     00 28 06 F6 | 	mov	local02, ##1199566848
0fd3c     10 4E 85 F1 | 	sub	fp, #16
0fd40     A7 14 02 FB | 	rdlong	arg02, fp
0fd44     28 4E 85 F1 | 	sub	fp, #40
0fd48     F8 BF 23 FF 
0fd4c     00 12 06 F6 | 	mov	arg01, ##1199566848
0fd50     38 70 B1 FD | 	call	#__system___float_mul
0fd54     FD 14 02 F6 | 	mov	arg02, result1
0fd58     14 13 02 F6 | 	mov	arg01, local02
0fd5c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd60     58 6C B1 FD | 	call	#__system___float_add
0fd64     FD 28 02 F6 | 	mov	local02, result1
0fd68     04 4E 05 F1 | 	add	fp, #4
0fd6c     A7 12 02 FB | 	rdlong	arg01, fp
0fd70     04 4E 85 F1 | 	sub	fp, #4
0fd74     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd78     1F 2C C6 C9 |  if_b	decod	local04, #31
0fd7c     00 2C 06 36 |  if_ae	mov	local04, #0
0fd80     04 6C B1 FD | 	call	#__system___float_fromuns
0fd84     16 FB 61 F5 | 	xor	result1, local04
0fd88     FD 14 02 F6 | 	mov	arg02, result1
0fd8c     14 13 02 F6 | 	mov	arg01, local02
0fd90     FC 71 B1 FD | 	call	#__system___float_div
0fd94     24 4E 05 F1 | 	add	fp, #36
0fd98     A7 FA 61 FC | 	wrlong	result1, fp
0fd9c     04 4E 05 F1 | 	add	fp, #4
0fda0     A7 14 02 FB | 	rdlong	arg02, fp
0fda4     28 4E 85 F1 | 	sub	fp, #40
0fda8     F8 BF 23 FF 
0fdac     00 12 06 F6 | 	mov	arg01, ##1199566848
0fdb0     D8 6F B1 FD | 	call	#__system___float_mul
0fdb4     FD 28 02 F6 | 	mov	local02, result1
0fdb8     0C 4E 05 F1 | 	add	fp, #12
0fdbc     A7 12 02 FB | 	rdlong	arg01, fp
0fdc0     0C 4E 85 F1 | 	sub	fp, #12
0fdc4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fdc8     1F 2C C6 C9 |  if_b	decod	local04, #31
0fdcc     00 2C 06 36 |  if_ae	mov	local04, #0
0fdd0     B4 6B B1 FD | 	call	#__system___float_fromuns
0fdd4     16 FB 61 F5 | 	xor	result1, local04
0fdd8     FD 14 02 F6 | 	mov	arg02, result1
0fddc     14 13 02 F6 | 	mov	arg01, local02
0fde0     AC 71 B1 FD | 	call	#__system___float_div
0fde4     3C 4E 05 F1 | 	add	fp, #60
0fde8     A7 FA 61 FC | 	wrlong	result1, fp
0fdec     24 4E 85 F1 | 	sub	fp, #36
0fdf0     A7 2E 02 FB | 	rdlong	local05, fp
0fdf4     18 4E 85 F1 | 	sub	fp, #24
0fdf8     01 2E 66 F0 | 	shl	local05, #1
0fdfc     51 00 00 FF 
0fe00     C8 E5 05 F1 | 	add	objptr, ##41928
0fe04     F2 2E 02 F1 | 	add	local05, objptr
0fe08     A7 30 02 FB | 	rdlong	local06, fp
0fe0c     04 4E 05 F1 | 	add	fp, #4
0fe10     A7 2A 02 FB | 	rdlong	local03, fp
0fe14     15 31 02 F1 | 	add	local06, local03
0fe18     17 31 52 FC | 	wrword	local06, local05
0fe1c     1C 4E 05 F1 | 	add	fp, #28
0fe20     A7 00 68 FC | 	wrlong	#0, fp
0fe24                 | '   fulltime=aa+dd+rr
0fe24                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fe24                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fe24                 | '   suspoints(channel)=a+d
0fe24                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fe24     0C 4E 85 F1 | 	sub	fp, #12
0fe28     A7 00 68 FC | 	wrlong	#0, fp
0fe2c     14 4E 85 F1 | 	sub	fp, #20
0fe30     A7 32 02 FB | 	rdlong	local07, fp
0fe34     51 00 00 FF 
0fe38     C8 E5 85 F1 | 	sub	objptr, ##41928
0fe3c                 | LR__1344
0fe3c     14 4E 05 F1 | 	add	fp, #20
0fe40     A7 28 02 FB | 	rdlong	local02, fp
0fe44     14 4E 85 F1 | 	sub	fp, #20
0fe48     19 29 52 F2 | 	cmps	local02, local07 wc
0fe4c     80 00 90 3D |  if_ae	jmp	#LR__1345
0fe50     18 4E 05 F1 | 	add	fp, #24
0fe54     A7 30 02 FB | 	rdlong	local06, fp
0fe58     09 30 66 F0 | 	shl	local06, #9
0fe5c     0C 00 00 FF 
0fe60     D8 E4 05 F1 | 	add	objptr, ##6360
0fe64     F2 30 02 F1 | 	add	local06, objptr
0fe68     04 4E 85 F1 | 	sub	fp, #4
0fe6c     A7 2E 02 FB | 	rdlong	local05, fp
0fe70     01 2E 66 F0 | 	shl	local05, #1
0fe74     18 2F 02 F1 | 	add	local05, local06
0fe78     0C 4E 05 F1 | 	add	fp, #12
0fe7c     A7 12 02 FB | 	rdlong	arg01, fp
0fe80     20 4E 85 F1 | 	sub	fp, #32
0fe84     0C 00 00 FF 
0fe88     D8 E4 85 F1 | 	sub	objptr, ##6360
0fe8c     01 14 06 F6 | 	mov	arg02, #1
0fe90     C0 73 B1 FD | 	call	#__system___float_tointeger
0fe94     17 FB 51 FC | 	wrword	result1, local05
0fe98     20 4E 05 F1 | 	add	fp, #32
0fe9c     A7 12 02 FB | 	rdlong	arg01, fp
0fea0     18 4E 05 F1 | 	add	fp, #24
0fea4     A7 14 02 FB | 	rdlong	arg02, fp
0fea8     38 4E 85 F1 | 	sub	fp, #56
0feac     0C 6B B1 FD | 	call	#__system___float_add
0feb0     20 4E 05 F1 | 	add	fp, #32
0feb4     A7 FA 61 FC | 	wrlong	result1, fp
0feb8     0C 4E 85 F1 | 	sub	fp, #12
0febc     A7 30 02 FB | 	rdlong	local06, fp
0fec0     01 30 06 F1 | 	add	local06, #1
0fec4     A7 30 62 FC | 	wrlong	local06, fp
0fec8     14 4E 85 F1 | 	sub	fp, #20
0fecc     6C FF 9F FD | 	jmp	#LR__1344
0fed0                 | LR__1345
0fed0                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fed0     A7 28 02 FB | 	rdlong	local02, fp
0fed4     14 4E 05 F1 | 	add	fp, #20
0fed8     A7 28 62 FC | 	wrlong	local02, fp
0fedc     14 4E 85 F1 | 	sub	fp, #20
0fee0     A7 34 02 FB | 	rdlong	local08, fp
0fee4     04 4E 05 F1 | 	add	fp, #4
0fee8     A7 28 02 FB | 	rdlong	local02, fp
0feec     04 4E 85 F1 | 	sub	fp, #4
0fef0     14 35 02 F1 | 	add	local08, local02
0fef4                 | LR__1346
0fef4     14 4E 05 F1 | 	add	fp, #20
0fef8     A7 28 02 FB | 	rdlong	local02, fp
0fefc     14 4E 85 F1 | 	sub	fp, #20
0ff00     1A 29 52 F2 | 	cmps	local02, local08 wc
0ff04     A8 00 90 3D |  if_ae	jmp	#LR__1347
0ff08     18 4E 05 F1 | 	add	fp, #24
0ff0c     A7 32 02 FB | 	rdlong	local07, fp
0ff10     09 32 66 F0 | 	shl	local07, #9
0ff14     0C 00 00 FF 
0ff18     D8 E4 05 F1 | 	add	objptr, ##6360
0ff1c     F2 32 02 F1 | 	add	local07, objptr
0ff20     04 4E 85 F1 | 	sub	fp, #4
0ff24     A7 30 02 FB | 	rdlong	local06, fp
0ff28     01 30 66 F0 | 	shl	local06, #1
0ff2c     19 31 02 F1 | 	add	local06, local07
0ff30     0C 4E 05 F1 | 	add	fp, #12
0ff34     A7 12 02 FB | 	rdlong	arg01, fp
0ff38     20 4E 85 F1 | 	sub	fp, #32
0ff3c     0C 00 00 FF 
0ff40     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff44     01 14 06 F6 | 	mov	arg02, #1
0ff48     08 73 B1 FD | 	call	#__system___float_tointeger
0ff4c     18 FB 51 FC | 	wrword	result1, local06
0ff50     20 4E 05 F1 | 	add	fp, #32
0ff54     A7 12 02 FB | 	rdlong	arg01, fp
0ff58     04 4E 05 F1 | 	add	fp, #4
0ff5c     A7 14 02 FB | 	rdlong	arg02, fp
0ff60     24 4E 85 F1 | 	sub	fp, #36
0ff64     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff68     50 6A B1 FD | 	call	#__system___float_add
0ff6c     20 4E 05 F1 | 	add	fp, #32
0ff70     A7 FA 61 FC | 	wrlong	result1, fp
0ff74     20 4E 85 F1 | 	sub	fp, #32
0ff78     FD 12 02 F6 | 	mov	arg01, result1
0ff7c     00 14 06 F6 | 	mov	arg02, #0
0ff80     01 16 06 F6 | 	mov	arg03, #1
0ff84     38 72 B1 FD | 	call	#__system___float_cmp
0ff88     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff8c     20 4E 05 C1 |  if_b	add	fp, #32
0ff90     A7 00 68 CC |  if_b	wrlong	#0, fp
0ff94     20 4E 85 C1 |  if_b	sub	fp, #32
0ff98     14 4E 05 F1 | 	add	fp, #20
0ff9c     A7 32 02 FB | 	rdlong	local07, fp
0ffa0     01 32 06 F1 | 	add	local07, #1
0ffa4     A7 32 62 FC | 	wrlong	local07, fp
0ffa8     14 4E 85 F1 | 	sub	fp, #20
0ffac     44 FF 9F FD | 	jmp	#LR__1346
0ffb0                 | LR__1347
0ffb0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0ffb0     A7 28 02 FB | 	rdlong	local02, fp
0ffb4     04 4E 05 F1 | 	add	fp, #4
0ffb8     A7 34 02 FB | 	rdlong	local08, fp
0ffbc     1A 29 02 F1 | 	add	local02, local08
0ffc0     10 4E 05 F1 | 	add	fp, #16
0ffc4     A7 28 62 FC | 	wrlong	local02, fp
0ffc8     14 4E 85 F1 | 	sub	fp, #20
0ffcc                 | LR__1348
0ffcc     14 4E 05 F1 | 	add	fp, #20
0ffd0     A7 2E 02 FB | 	rdlong	local05, fp
0ffd4     14 4E 85 F1 | 	sub	fp, #20
0ffd8     00 2F 56 F2 | 	cmps	local05, #256 wc
0ffdc     A8 00 90 3D |  if_ae	jmp	#LR__1349
0ffe0     18 4E 05 F1 | 	add	fp, #24
0ffe4     A7 34 02 FB | 	rdlong	local08, fp
0ffe8     09 34 66 F0 | 	shl	local08, #9
0ffec     0C 00 00 FF 
0fff0     D8 E4 05 F1 | 	add	objptr, ##6360
0fff4     F2 34 02 F1 | 	add	local08, objptr
0fff8     04 4E 85 F1 | 	sub	fp, #4
0fffc     A7 32 02 FB | 	rdlong	local07, fp
10000     01 32 66 F0 | 	shl	local07, #1
10004     1A 33 02 F1 | 	add	local07, local08
10008     0C 4E 05 F1 | 	add	fp, #12
1000c     A7 12 02 FB | 	rdlong	arg01, fp
10010     20 4E 85 F1 | 	sub	fp, #32
10014     0C 00 00 FF 
10018     D8 E4 85 F1 | 	sub	objptr, ##6360
1001c     01 14 06 F6 | 	mov	arg02, #1
10020     30 72 B1 FD | 	call	#__system___float_tointeger
10024     19 FB 51 FC | 	wrword	result1, local07
10028     20 4E 05 F1 | 	add	fp, #32
1002c     A7 12 02 FB | 	rdlong	arg01, fp
10030     1C 4E 05 F1 | 	add	fp, #28
10034     A7 14 02 FB | 	rdlong	arg02, fp
10038     3C 4E 85 F1 | 	sub	fp, #60
1003c     1F 14 E6 F4 | 	bitnot	arg02, #31
10040     78 69 B1 FD | 	call	#__system___float_add
10044     20 4E 05 F1 | 	add	fp, #32
10048     A7 FA 61 FC | 	wrlong	result1, fp
1004c     20 4E 85 F1 | 	sub	fp, #32
10050     FD 12 02 F6 | 	mov	arg01, result1
10054     00 14 06 F6 | 	mov	arg02, #0
10058     01 16 06 F6 | 	mov	arg03, #1
1005c     60 71 B1 FD | 	call	#__system___float_cmp
10060     00 FA 55 F2 | 	cmps	result1, #0 wc
10064     20 4E 05 C1 |  if_b	add	fp, #32
10068     A7 00 68 CC |  if_b	wrlong	#0, fp
1006c     20 4E 85 C1 |  if_b	sub	fp, #32
10070     14 4E 05 F1 | 	add	fp, #20
10074     A7 34 02 FB | 	rdlong	local08, fp
10078     01 34 06 F1 | 	add	local08, #1
1007c     A7 34 62 FC | 	wrlong	local08, fp
10080     14 4E 85 F1 | 	sub	fp, #20
10084     44 FF 9F FD | 	jmp	#LR__1348
10088                 | LR__1349
10088     18 4E 05 F1 | 	add	fp, #24
1008c     A7 2E 02 FB | 	rdlong	local05, fp
10090     18 4E 85 F1 | 	sub	fp, #24
10094     09 2E 66 F0 | 	shl	local05, #9
10098     0C 00 00 FF 
1009c     D8 E4 05 F1 | 	add	objptr, ##6360
100a0     F2 2E 02 F1 | 	add	local05, objptr
100a4     FE 2F 06 F1 | 	add	local05, #510
100a8     17 01 58 FC | 	wrword	#0, local05
100ac     0C 00 00 FF 
100b0     D8 E4 85 F1 | 	sub	objptr, ##6360
100b4                 | LR__1350
100b4     18 4E 05 F1 | 	add	fp, #24
100b8     A7 2E 02 FB | 	rdlong	local05, fp
100bc     18 4E 85 F1 | 	sub	fp, #24
100c0     09 2E 66 F0 | 	shl	local05, #9
100c4     0C 00 00 FF 
100c8     D8 E4 05 F1 | 	add	objptr, ##6360
100cc     F2 2E 02 F1 | 	add	local05, objptr
100d0     FE 2F 06 F1 | 	add	local05, #510
100d4     17 01 58 FC | 	wrword	#0, local05
100d8     0C 00 00 FF 
100dc     D8 E4 85 F1 | 	sub	objptr, ##6360
100e0                 | LR__1351
100e0     A7 F0 03 F6 | 	mov	ptra, fp
100e4     B2 00 A0 FD | 	call	#popregs_
100e8                 | _do_defenv_ret
100e8     2D 00 64 FD | 	ret
100ec                 | 
100ec                 | ' 
100ec                 | ' '-------------------- defsnd
100ec                 | ' 
100ec                 | ' sub do_defsnd
100ec                 | _do_defsnd
100ec     04 4A 05 F6 | 	mov	COUNT_, #4
100f0     A8 00 A0 FD | 	call	#pushregs_
100f4     88 F0 07 F1 | 	add	ptra, #136
100f8     4A 00 00 FF 
100fc     80 E4 05 F1 | 	add	objptr, ##38016
10100     F2 1A 02 FB | 	rdlong	arg05, objptr
10104     0D 19 02 F6 | 	mov	arg04, arg05
10108     01 18 66 F0 | 	shl	arg04, #1
1010c     0D 19 02 F1 | 	add	arg04, arg05
10110     02 18 66 F0 | 	shl	arg04, #2
10114     03 00 00 FF 
10118     04 E4 85 F1 | 	sub	objptr, ##1540
1011c     F2 18 02 F1 | 	add	arg04, objptr
10120     0C 1B 02 FB | 	rdlong	arg05, arg04
10124     A7 1A 62 FC | 	wrlong	arg05, fp
10128                 | ' 
10128                 | ' numpar=compiledline(lineptr_e).result.uresult
10128                 | ' 
10128                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10128                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10128                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10128                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10128                 | ' 
10128                 | ' if numpar<2 then return
10128     02 1A 56 F2 | 	cmps	arg05, #2 wc
1012c     47 00 00 FF 
10130     7C E4 85 F1 | 	sub	objptr, ##36476
10134     94 08 90 CD |  if_b	jmp	#LR__1383
10138                 | '  
10138                 | ' if numpar=2 then
10138     A7 1A 02 FB | 	rdlong	arg05, fp
1013c     02 1A 0E F2 | 	cmp	arg05, #2 wz
10140     A0 03 90 5D |  if_ne	jmp	#LR__1370
10144     44 CA BF FD | 	call	#_pop
10148     FF 1A 02 F6 | 	mov	arg05, result3
1014c     2C 4E 05 F1 | 	add	fp, #44
10150     A7 FA 61 FC | 	wrlong	result1, fp
10154     04 4E 05 F1 | 	add	fp, #4
10158     A7 FC 61 FC | 	wrlong	result2, fp
1015c     04 4E 05 F1 | 	add	fp, #4
10160     A7 1A 62 FC | 	wrlong	arg05, fp
10164                 | '   t1=pop()
10164                 | '   if t1.result_type=result_string2 then 
10164     34 4E 85 F1 | 	sub	fp, #52
10168     2B 1A 0E F2 | 	cmp	arg05, #43 wz
1016c     20 00 90 5D |  if_ne	jmp	#LR__1360
10170     2C 4E 05 F1 | 	add	fp, #44
10174     A7 12 02 FB | 	rdlong	arg01, fp
10178     2C 4E 85 F1 | 	sub	fp, #44
1017c     84 CB BF FD | 	call	#_convertstring
10180     38 4E 05 F1 | 	add	fp, #56
10184     A7 FA 61 FC | 	wrlong	result1, fp
10188     38 4E 85 F1 | 	sub	fp, #56
1018c     58 00 90 FD | 	jmp	#LR__1363
10190                 | LR__1360
10190     34 4E 05 F1 | 	add	fp, #52
10194     A7 1A 02 FB | 	rdlong	arg05, fp
10198     34 4E 85 F1 | 	sub	fp, #52
1019c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
101a0     18 00 90 5D |  if_ne	jmp	#LR__1361
101a4     2C 4E 05 F1 | 	add	fp, #44
101a8     A7 1A 02 FB | 	rdlong	arg05, fp
101ac     0C 4E 05 F1 | 	add	fp, #12
101b0     A7 1A 62 FC | 	wrlong	arg05, fp
101b4     38 4E 85 F1 | 	sub	fp, #56
101b8     2C 00 90 FD | 	jmp	#LR__1362
101bc                 | LR__1361
101bc     A1 01 00 FF 
101c0     58 1A 06 F6 | 	mov	arg05, ##@LR__5724
101c4     38 4E 05 F1 | 	add	fp, #56
101c8     A7 1A 62 FC | 	wrlong	arg05, fp
101cc     0C 4E 85 F1 | 	sub	fp, #12
101d0     A7 12 02 F6 | 	mov	arg01, fp
101d4     2C 4E 85 F1 | 	sub	fp, #44
101d8     94 CB BF FD | 	call	#_converttoint
101dc     14 4E 05 F1 | 	add	fp, #20
101e0     A7 FA 61 FC | 	wrlong	result1, fp
101e4     14 4E 85 F1 | 	sub	fp, #20
101e8                 | LR__1362
101e8                 | LR__1363
101e8                 | '   if s<>"" then 
101e8     38 4E 05 F1 | 	add	fp, #56
101ec     A7 12 02 FB | 	rdlong	arg01, fp
101f0     38 4E 85 F1 | 	sub	fp, #56
101f4     A1 01 00 FF 
101f8     59 14 06 F6 | 	mov	arg02, ##@LR__5725
101fc     3C 3D B1 FD | 	call	#__system___string_cmp
10200     00 FA 0D F2 | 	cmp	result1, #0 wz
10204     E0 01 90 AD |  if_e	jmp	#LR__1366
10208     80 C9 BF FD | 	call	#_pop
1020c     FF 1A 02 F6 | 	mov	arg05, result3
10210     2C 4E 05 F1 | 	add	fp, #44
10214     A7 FA 61 FC | 	wrlong	result1, fp
10218     04 4E 05 F1 | 	add	fp, #4
1021c     A7 FC 61 FC | 	wrlong	result2, fp
10220     04 4E 05 F1 | 	add	fp, #4
10224     A7 1A 62 FC | 	wrlong	arg05, fp
10228     08 4E 85 F1 | 	sub	fp, #8
1022c     A7 12 02 F6 | 	mov	arg01, fp
10230     2C 4E 85 F1 | 	sub	fp, #44
10234     38 CB BF FD | 	call	#_converttoint
10238     10 4E 05 F1 | 	add	fp, #16
1023c     A7 FA 61 FC | 	wrlong	result1, fp
10240                 | '     t1=pop()
10240                 | '     channel=converttoint(t1) : if channel>31 then return
10240     FD 1A 02 F6 | 	mov	arg05, result1
10244     10 4E 85 F1 | 	sub	fp, #16
10248     20 1A 56 F2 | 	cmps	arg05, #32 wc
1024c     7C 07 90 3D |  if_ae	jmp	#LR__1383
10250                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10250     09 12 06 F6 | 	mov	arg01, #9
10254     14 90 B1 FD | 	call	#__system__close
10258     09 26 06 F6 | 	mov	local01, #9
1025c     A1 01 00 FF 
10260     5A 12 06 F6 | 	mov	arg01, ##@LR__5726
10264     38 4E 05 F1 | 	add	fp, #56
10268     A7 14 02 FB | 	rdlong	arg02, fp
1026c     38 4E 85 F1 | 	sub	fp, #56
10270     FC 3C B1 FD | 	call	#__system___string_concat
10274     FD 14 02 F6 | 	mov	arg02, result1
10278     13 13 02 F6 | 	mov	arg01, local01
1027c     00 16 06 F6 | 	mov	arg03, #0
10280     94 48 B1 FD | 	call	#__system___basic_open_string
10284     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10288     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1028c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10290     52 00 00 FF 
10294     20 E4 05 F1 | 	add	objptr, ##42016
10298     F2 FA 61 FC | 	wrlong	result1, objptr
1029c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
1029c     52 00 00 FF 
102a0     20 E4 85 F1 | 	sub	objptr, ##42016
102a4     B0 00 90 AD |  if_e	jmp	#LR__1364
102a8     00 12 06 F6 | 	mov	arg01, #0
102ac     8C 99 B1 FD | 	call	#__system___getiolock_0579
102b0     FD 12 02 F6 | 	mov	arg01, result1
102b4     5C 3C B1 FD | 	call	#__system___lockmem
102b8     A1 01 00 FF 
102bc     67 14 06 F6 | 	mov	arg02, ##@LR__5727
102c0     00 12 06 F6 | 	mov	arg01, #0
102c4     00 16 06 F6 | 	mov	arg03, #0
102c8     3C 49 B1 FD | 	call	#__system___basic_print_string
102cc     52 00 00 FF 
102d0     20 E4 05 F1 | 	add	objptr, ##42016
102d4     F2 14 02 FB | 	rdlong	arg02, objptr
102d8     52 00 00 FF 
102dc     20 E4 85 F1 | 	sub	objptr, ##42016
102e0     00 12 06 F6 | 	mov	arg01, #0
102e4     00 16 06 F6 | 	mov	arg03, #0
102e8     0A 18 06 F6 | 	mov	arg04, #10
102ec     5C 49 B1 FD | 	call	#__system___basic_print_integer
102f0     A1 01 00 FF 
102f4     75 14 06 F6 | 	mov	arg02, ##@LR__5728
102f8     00 12 06 F6 | 	mov	arg01, #0
102fc     00 16 06 F6 | 	mov	arg03, #0
10300     04 49 B1 FD | 	call	#__system___basic_print_string
10304     00 26 06 F6 | 	mov	local01, #0
10308     52 00 00 FF 
1030c     20 E4 05 F1 | 	add	objptr, ##42016
10310     F2 12 02 FB | 	rdlong	arg01, objptr
10314     52 00 00 FF 
10318     20 E4 85 F1 | 	sub	objptr, ##42016
1031c     80 65 B1 FD | 	call	#__system___strerror
10320     FD 14 02 F6 | 	mov	arg02, result1
10324     13 13 02 F6 | 	mov	arg01, local01
10328     00 16 06 F6 | 	mov	arg03, #0
1032c     D8 48 B1 FD | 	call	#__system___basic_print_string
10330     00 12 06 F6 | 	mov	arg01, #0
10334     0A 14 06 F6 | 	mov	arg02, #10
10338     00 16 06 F6 | 	mov	arg03, #0
1033c     70 48 B1 FD | 	call	#__system___basic_print_char
10340     00 12 06 F6 | 	mov	arg01, #0
10344     F4 98 B1 FD | 	call	#__system___getiolock_0579
10348     FD 00 68 FC | 	wrlong	#0, result1
1034c     09 12 06 F6 | 	mov	arg01, #9
10350     18 8F B1 FD | 	call	#__system__close
10354     74 06 90 FD | 	jmp	#LR__1383
10358                 | LR__1364
10358                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10358     04 4E 05 F1 | 	add	fp, #4
1035c     A7 00 68 FC | 	wrlong	#0, fp
10360                 | LR__1365
10360     A7 26 02 FB | 	rdlong	local01, fp
10364     01 26 66 F0 | 	shl	local01, #1
10368     11 14 06 F6 | 	mov	arg02, #17
1036c     13 15 02 F1 | 	add	arg02, local01
10370     78 4E 05 F1 | 	add	fp, #120
10374     A7 16 02 F6 | 	mov	arg03, fp
10378     7C 4E 85 F1 | 	sub	fp, #124
1037c     09 12 06 F6 | 	mov	arg01, #9
10380     01 18 06 F6 | 	mov	arg04, #1
10384     02 1A 06 F6 | 	mov	arg05, #2
10388     F8 49 B1 FD | 	call	#__system___basic_get
1038c     10 4E 05 F1 | 	add	fp, #16
10390     A7 12 02 FB | 	rdlong	arg01, fp
10394     0B 12 66 F0 | 	shl	arg01, #11
10398     0C 4E 85 F1 | 	sub	fp, #12
1039c     A7 26 02 FB | 	rdlong	local01, fp
103a0     01 26 66 F0 | 	shl	local01, #1
103a4     13 13 02 F1 | 	add	arg01, local01
103a8     78 4E 05 F1 | 	add	fp, #120
103ac     A7 14 E2 FA | 	rdword	arg02, fp
103b0     7C 4E 85 F1 | 	sub	fp, #124
103b4     0F 14 66 F7 | 	signx	arg02, #15
103b8     9C 03 B1 FD | 	call	#_psdpoke
103bc     04 4E 05 F1 | 	add	fp, #4
103c0     A7 26 02 FB | 	rdlong	local01, fp
103c4     01 26 06 F1 | 	add	local01, #1
103c8     A7 26 62 FC | 	wrlong	local01, fp
103cc     02 00 00 FF 
103d0     01 26 56 F2 | 	cmps	local01, ##1025 wc
103d4     88 FF 9F CD |  if_b	jmp	#LR__1365
103d8     04 4E 85 F1 | 	sub	fp, #4
103dc                 | '     close #9
103dc     09 12 06 F6 | 	mov	arg01, #9
103e0     88 8E B1 FD | 	call	#__system__close
103e4                 | '     return
103e4     E4 05 90 FD | 	jmp	#LR__1383
103e8                 | LR__1366
103e8                 | '     if wptr < ($80000 - 2048) then 
103e8     14 4E 05 F1 | 	add	fp, #20
103ec     A7 26 02 FB | 	rdlong	local01, fp
103f0     14 4E 85 F1 | 	sub	fp, #20
103f4     FC 03 00 FF 
103f8     00 26 56 F2 | 	cmps	local01, ##522240 wc
103fc     70 00 90 3D |  if_ae	jmp	#LR__1368
10400                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10400     04 4E 05 F1 | 	add	fp, #4
10404     A7 00 68 FC | 	wrlong	#0, fp
10408     04 4E 85 F1 | 	sub	fp, #4
1040c                 | LR__1367
1040c     10 4E 05 F1 | 	add	fp, #16
10410     A7 26 02 FB | 	rdlong	local01, fp
10414     0B 26 66 F0 | 	shl	local01, #11
10418     0C 4E 85 F1 | 	sub	fp, #12
1041c     A7 1A 02 FB | 	rdlong	arg05, fp
10420     0D 19 02 F6 | 	mov	arg04, arg05
10424     01 18 66 F0 | 	shl	arg04, #1
10428     0C 27 02 F1 | 	add	local01, arg04
1042c     10 4E 05 F1 | 	add	fp, #16
10430     A7 12 02 FB | 	rdlong	arg01, fp
10434     14 4E 85 F1 | 	sub	fp, #20
10438     01 1A 66 F0 | 	shl	arg05, #1
1043c     0D 13 02 F1 | 	add	arg01, arg05
10440     09 15 E2 FA | 	rdword	arg02, arg01
10444     13 13 02 F6 | 	mov	arg01, local01
10448     0C 03 B1 FD | 	call	#_psdpoke
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 26 02 FB | 	rdlong	local01, fp
10454     01 26 06 F1 | 	add	local01, #1
10458     A7 26 62 FC | 	wrlong	local01, fp
1045c     04 4E 85 F1 | 	sub	fp, #4
10460     02 00 00 FF 
10464     00 26 56 F2 | 	cmps	local01, ##1024 wc
10468     A0 FF 9F CD |  if_b	jmp	#LR__1367
1046c     5C 05 90 FD | 	jmp	#LR__1383
10470                 | LR__1368
10470                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10470     04 4E 05 F1 | 	add	fp, #4
10474     A7 00 68 FC | 	wrlong	#0, fp
10478     04 4E 85 F1 | 	sub	fp, #4
1047c                 | LR__1369
1047c     10 4E 05 F1 | 	add	fp, #16
10480     A7 26 02 FB | 	rdlong	local01, fp
10484     0B 26 66 F0 | 	shl	local01, #11
10488     0C 4E 85 F1 | 	sub	fp, #12
1048c     A7 1A 02 FB | 	rdlong	arg05, fp
10490     0D 19 02 F6 | 	mov	arg04, arg05
10494     01 18 66 F0 | 	shl	arg04, #1
10498     0C 27 02 F1 | 	add	local01, arg04
1049c     10 4E 05 F1 | 	add	fp, #16
104a0     A7 12 02 FB | 	rdlong	arg01, fp
104a4     14 4E 85 F1 | 	sub	fp, #20
104a8     01 1A 66 F0 | 	shl	arg05, #1
104ac     0D 13 02 F1 | 	add	arg01, arg05
104b0     E4 03 B1 FD | 	call	#_psdpeek
104b4     FD 14 02 F6 | 	mov	arg02, result1
104b8     13 13 02 F6 | 	mov	arg01, local01
104bc     98 02 B1 FD | 	call	#_psdpoke
104c0     04 4E 05 F1 | 	add	fp, #4
104c4     A7 26 02 FB | 	rdlong	local01, fp
104c8     01 26 06 F1 | 	add	local01, #1
104cc     A7 26 62 FC | 	wrlong	local01, fp
104d0     04 4E 85 F1 | 	sub	fp, #4
104d4     02 00 00 FF 
104d8     00 26 56 F2 | 	cmps	local01, ##1024 wc
104dc     9C FF 9F CD |  if_b	jmp	#LR__1369
104e0                 | '     return 
104e0     E8 04 90 FD | 	jmp	#LR__1383
104e4                 | '   return
104e4                 | LR__1370
104e4                 | ' for i=0 to 15 : harm(i)=0: next i  
104e4     04 4E 05 F1 | 	add	fp, #4
104e8     A7 00 68 FC | 	wrlong	#0, fp
104ec     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
104f0                 | LR__1371
104f0     A7 26 02 FB | 	rdlong	local01, fp
104f4     02 26 66 F0 | 	shl	local01, #2
104f8     38 4E 05 F1 | 	add	fp, #56
104fc     A7 26 02 F1 | 	add	local01, fp
10500     13 01 68 FC | 	wrlong	#0, local01
10504     38 4E 85 F1 | 	sub	fp, #56
10508     A7 26 02 FB | 	rdlong	local01, fp
1050c     01 26 06 F1 | 	add	local01, #1
10510     A7 26 62 FC | 	wrlong	local01, fp
10514     10 26 56 F2 | 	cmps	local01, #16 wc
10518     D4 FF 9F CD |  if_b	jmp	#LR__1371
1051c                 | LR__1372
1051c     04 4E 85 F1 | 	sub	fp, #4
10520                 | ' for i=numpar to 2 step -1 
10520     A7 26 02 FB | 	rdlong	local01, fp
10524     04 4E 05 F1 | 	add	fp, #4
10528     A7 26 62 FC | 	wrlong	local01, fp
1052c     04 4E 85 F1 | 	sub	fp, #4
10530                 | LR__1373
10530     58 C6 BF FD | 	call	#_pop
10534     2C 4E 05 F1 | 	add	fp, #44
10538     A7 FA 61 FC | 	wrlong	result1, fp
1053c     04 4E 05 F1 | 	add	fp, #4
10540     A7 FC 61 FC | 	wrlong	result2, fp
10544     04 4E 05 F1 | 	add	fp, #4
10548     A7 FE 61 FC | 	wrlong	result3, fp
1054c     30 4E 85 F1 | 	sub	fp, #48
10550     A7 26 02 FB | 	rdlong	local01, fp
10554     02 26 86 F1 | 	sub	local01, #2
10558     02 26 66 F0 | 	shl	local01, #2
1055c     38 4E 05 F1 | 	add	fp, #56
10560     A7 26 02 F1 | 	add	local01, fp
10564     10 4E 85 F1 | 	sub	fp, #16
10568     A7 12 02 F6 | 	mov	arg01, fp
1056c     2C 4E 85 F1 | 	sub	fp, #44
10570     B8 C8 BF FD | 	call	#_converttofloat
10574     13 FB 61 FC | 	wrlong	result1, local01
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 26 02 FB | 	rdlong	local01, fp
10580     01 26 86 F1 | 	sub	local01, #1
10584     A7 26 62 FC | 	wrlong	local01, fp
10588     04 4E 85 F1 | 	sub	fp, #4
1058c     02 26 56 F2 | 	cmps	local01, #2 wc
10590     9C FF 9F 3D |  if_ae	jmp	#LR__1373
10594     F4 C5 BF FD | 	call	#_pop
10598     FF 26 02 F6 | 	mov	local01, result3
1059c     2C 4E 05 F1 | 	add	fp, #44
105a0     A7 FA 61 FC | 	wrlong	result1, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 FC 61 FC | 	wrlong	result2, fp
105ac     04 4E 05 F1 | 	add	fp, #4
105b0     A7 26 62 FC | 	wrlong	local01, fp
105b4     08 4E 85 F1 | 	sub	fp, #8
105b8     A7 12 02 F6 | 	mov	arg01, fp
105bc     2C 4E 85 F1 | 	sub	fp, #44
105c0     AC C7 BF FD | 	call	#_converttoint
105c4     10 4E 05 F1 | 	add	fp, #16
105c8     A7 FA 61 FC | 	wrlong	result1, fp
105cc                 | ' t1=pop()
105cc                 | ' channel=converttoint(t1) : : if channel>31 then return
105cc     FD 26 02 F6 | 	mov	local01, result1
105d0     10 4E 85 F1 | 	sub	fp, #16
105d4     20 26 56 F2 | 	cmps	local01, #32 wc
105d8     F0 03 90 3D |  if_ae	jmp	#LR__1383
105dc     20 4E 05 F1 | 	add	fp, #32
105e0     A7 00 68 FC | 	wrlong	#0, fp
105e4                 | ' max=0
105e4                 | ' if harm(0)<0 then
105e4     1C 4E 05 F1 | 	add	fp, #28
105e8     A7 12 02 FB | 	rdlong	arg01, fp
105ec     3C 4E 85 F1 | 	sub	fp, #60
105f0     00 14 06 F6 | 	mov	arg02, #0
105f4     01 16 06 F6 | 	mov	arg03, #1
105f8     C4 6B B1 FD | 	call	#__system___float_cmp
105fc     00 FA 55 F2 | 	cmps	result1, #0 wc
10600     04 01 90 3D |  if_ae	jmp	#LR__1376
10604     3C 4E 05 F1 | 	add	fp, #60
10608     A7 FA 01 FB | 	rdlong	result1, fp
1060c     1F FA 05 F4 | 	bitl	result1, #31
10610     24 4E 85 F1 | 	sub	fp, #36
10614     A7 FA 61 FC | 	wrlong	result1, fp
10618     28 4E 05 F1 | 	add	fp, #40
1061c     A7 FA 01 FB | 	rdlong	result1, fp
10620     1F FA 05 F4 | 	bitl	result1, #31
10624     24 4E 85 F1 | 	sub	fp, #36
10628     A7 FA 61 FC | 	wrlong	result1, fp
1062c     20 4E 05 F1 | 	add	fp, #32
10630     00 C0 9F FF 
10634     A7 00 68 FC | 	wrlong	##1065353216, fp
10638     24 4E 85 F1 | 	sub	fp, #36
1063c     A7 26 02 FB | 	rdlong	local01, fp
10640     28 4E 05 F1 | 	add	fp, #40
10644     A7 26 62 FC | 	wrlong	local01, fp
10648     24 4E 85 F1 | 	sub	fp, #36
1064c     A7 26 02 FB | 	rdlong	local01, fp
10650     28 4E 05 F1 | 	add	fp, #40
10654     A7 26 62 FC | 	wrlong	local01, fp
10658                 | '   harm(0)=1
10658                 | '   harm(1)=even
10658                 | '   harm(2)=odd
10658                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10658     40 4E 85 F1 | 	sub	fp, #64
1065c     A7 06 68 FC | 	wrlong	#3, fp
10660                 | LR__1374
10660     A7 1A 02 FB | 	rdlong	arg05, fp
10664     0D 29 02 F6 | 	mov	local02, arg05
10668     02 28 66 F0 | 	shl	local02, #2
1066c     38 4E 05 F1 | 	add	fp, #56
10670     A7 28 02 F1 | 	add	local02, fp
10674     02 1A 86 F1 | 	sub	arg05, #2
10678     02 1A 66 F0 | 	shl	arg05, #2
1067c     A7 1A 02 F1 | 	add	arg05, fp
10680     0D 13 02 FB | 	rdlong	arg01, arg05
10684     24 4E 85 F1 | 	sub	fp, #36
10688     A7 14 02 FB | 	rdlong	arg02, fp
1068c     18 4E 85 F1 | 	sub	fp, #24
10690     F8 66 B1 FD | 	call	#__system___float_mul
10694     14 FB 61 FC | 	wrlong	result1, local02
10698     04 4E 05 F1 | 	add	fp, #4
1069c     A7 2A 02 FB | 	rdlong	local03, fp
106a0     02 2A 06 F1 | 	add	local03, #2
106a4     A7 2A 62 FC | 	wrlong	local03, fp
106a8     10 2A 56 F2 | 	cmps	local03, #16 wc
106ac     B0 FF 9F CD |  if_b	jmp	#LR__1374
106b0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
106b0     A7 08 68 FC | 	wrlong	#4, fp
106b4                 | LR__1375
106b4     A7 2A 02 FB | 	rdlong	local03, fp
106b8     15 29 02 F6 | 	mov	local02, local03
106bc     02 28 66 F0 | 	shl	local02, #2
106c0     38 4E 05 F1 | 	add	fp, #56
106c4     A7 28 02 F1 | 	add	local02, fp
106c8     02 2A 86 F1 | 	sub	local03, #2
106cc     02 2A 66 F0 | 	shl	local03, #2
106d0     A7 2A 02 F1 | 	add	local03, fp
106d4     15 13 02 FB | 	rdlong	arg01, local03
106d8     20 4E 85 F1 | 	sub	fp, #32
106dc     A7 14 02 FB | 	rdlong	arg02, fp
106e0     1C 4E 85 F1 | 	sub	fp, #28
106e4     A4 66 B1 FD | 	call	#__system___float_mul
106e8     14 FB 61 FC | 	wrlong	result1, local02
106ec     04 4E 05 F1 | 	add	fp, #4
106f0     A7 2A 02 FB | 	rdlong	local03, fp
106f4     02 2A 06 F1 | 	add	local03, #2
106f8     A7 2A 62 FC | 	wrlong	local03, fp
106fc     0F 2A 56 F2 | 	cmps	local03, #15 wc
10700     B0 FF 9F CD |  if_b	jmp	#LR__1375
10704     04 4E 85 F1 | 	sub	fp, #4
10708                 | LR__1376
10708                 | ' if harm(0)>=0 then ' synthesize with harmonics
10708     3C 4E 05 F1 | 	add	fp, #60
1070c     A7 12 02 FB | 	rdlong	arg01, fp
10710     3C 4E 85 F1 | 	sub	fp, #60
10714     00 14 06 F6 | 	mov	arg02, #0
10718     01 16 66 F6 | 	neg	arg03, #1
1071c     A0 6A B1 FD | 	call	#__system___float_cmp
10720     00 FA 55 F2 | 	cmps	result1, #0 wc
10724     A4 02 90 CD |  if_b	jmp	#LR__1382
10728                 | '   for i=0 to 1023
10728     04 4E 05 F1 | 	add	fp, #4
1072c     A7 00 68 FC | 	wrlong	#0, fp
10730     04 4E 85 F1 | 	sub	fp, #4
10734                 | LR__1377
10734     24 4E 05 F1 | 	add	fp, #36
10738     A7 00 68 FC | 	wrlong	#0, fp
1073c                 | '     spl=0
1073c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
1073c     1C 4E 85 F1 | 	sub	fp, #28
10740     A7 00 68 FC | 	wrlong	#0, fp
10744                 | LR__1378
10744     A7 28 02 FB | 	rdlong	local02, fp
10748     02 28 66 F0 | 	shl	local02, #2
1074c     34 4E 05 F1 | 	add	fp, #52
10750     A7 28 02 F1 | 	add	local02, fp
10754     14 2B 02 FB | 	rdlong	local03, local02
10758     87 E4 1D FF 
1075c     DB 29 06 F6 | 	mov	local02, ##1003032539
10760     38 4E 85 F1 | 	sub	fp, #56
10764     A7 12 02 FB | 	rdlong	arg01, fp
10768     04 4E 85 F1 | 	sub	fp, #4
1076c     09 13 52 F6 | 	abs	arg01, arg01 wc
10770     1F 2C C6 C9 |  if_b	decod	local04, #31
10774     00 2C 06 36 |  if_ae	mov	local04, #0
10778     0C 62 B1 FD | 	call	#__system___float_fromuns
1077c     16 FB 61 F5 | 	xor	result1, local04
10780     FD 14 02 F6 | 	mov	arg02, result1
10784     14 13 02 F6 | 	mov	arg01, local02
10788     00 66 B1 FD | 	call	#__system___float_mul
1078c     FD 28 02 F6 | 	mov	local02, result1
10790     08 4E 05 F1 | 	add	fp, #8
10794     A7 12 02 FB | 	rdlong	arg01, fp
10798     08 4E 85 F1 | 	sub	fp, #8
1079c     01 12 06 F1 | 	add	arg01, #1
107a0     09 13 52 F6 | 	abs	arg01, arg01 wc
107a4     1F 2C C6 C9 |  if_b	decod	local04, #31
107a8     00 2C 06 36 |  if_ae	mov	local04, #0
107ac     D8 61 B1 FD | 	call	#__system___float_fromuns
107b0     16 FB 61 F5 | 	xor	result1, local04
107b4     FD 14 02 F6 | 	mov	arg02, result1
107b8     14 13 02 F6 | 	mov	arg01, local02
107bc     CC 65 B1 FD | 	call	#__system___float_mul
107c0     FD 12 02 F6 | 	mov	arg01, result1
107c4     24 6F B1 FD | 	call	#__system____builtin_sinf
107c8     FD 14 02 F6 | 	mov	arg02, result1
107cc     15 13 02 F6 | 	mov	arg01, local03
107d0     B8 65 B1 FD | 	call	#__system___float_mul
107d4     FD 14 02 F6 | 	mov	arg02, result1
107d8     24 4E 05 F1 | 	add	fp, #36
107dc     A7 12 02 FB | 	rdlong	arg01, fp
107e0     24 4E 85 F1 | 	sub	fp, #36
107e4     D4 61 B1 FD | 	call	#__system___float_add
107e8     24 4E 05 F1 | 	add	fp, #36
107ec     A7 FA 61 FC | 	wrlong	result1, fp
107f0     1C 4E 85 F1 | 	sub	fp, #28
107f4     A7 16 02 FB | 	rdlong	arg03, fp
107f8     01 16 06 F1 | 	add	arg03, #1
107fc     A7 16 62 FC | 	wrlong	arg03, fp
10800     10 16 56 F2 | 	cmps	arg03, #16 wc
10804     3C FF 9F CD |  if_b	jmp	#LR__1378
10808                 | '     if abs(spl)>max then max=abs(spl)  
10808     1C 4E 05 F1 | 	add	fp, #28
1080c     A7 12 02 FB | 	rdlong	arg01, fp
10810     1F 12 06 F4 | 	bitl	arg01, #31
10814     04 4E 85 F1 | 	sub	fp, #4
10818     A7 14 02 FB | 	rdlong	arg02, fp
1081c     20 4E 85 F1 | 	sub	fp, #32
10820     01 16 66 F6 | 	neg	arg03, #1
10824     98 69 B1 FD | 	call	#__system___float_cmp
10828     01 FA 55 F2 | 	cmps	result1, #1 wc
1082c     18 00 90 CD |  if_b	jmp	#LR__1379
10830     24 4E 05 F1 | 	add	fp, #36
10834     A7 FA 01 FB | 	rdlong	result1, fp
10838     1F FA 05 F4 | 	bitl	result1, #31
1083c     04 4E 85 F1 | 	sub	fp, #4
10840     A7 FA 61 FC | 	wrlong	result1, fp
10844     20 4E 85 F1 | 	sub	fp, #32
10848                 | LR__1379
10848     04 4E 05 F1 | 	add	fp, #4
1084c     A7 2A 02 FB | 	rdlong	local03, fp
10850     01 2A 06 F1 | 	add	local03, #1
10854     A7 2A 62 FC | 	wrlong	local03, fp
10858     04 4E 85 F1 | 	sub	fp, #4
1085c     02 00 00 FF 
10860     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10864     CC FE 9F CD |  if_b	jmp	#LR__1377
10868                 | '   for i=0 to 1023
10868     04 4E 05 F1 | 	add	fp, #4
1086c     A7 00 68 FC | 	wrlong	#0, fp
10870     04 4E 85 F1 | 	sub	fp, #4
10874                 | LR__1380
10874     24 4E 05 F1 | 	add	fp, #36
10878     A7 00 68 FC | 	wrlong	#0, fp
1087c                 | '     spl=0
1087c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
1087c     1C 4E 85 F1 | 	sub	fp, #28
10880     A7 00 68 FC | 	wrlong	#0, fp
10884                 | LR__1381
10884     A7 2A 02 FB | 	rdlong	local03, fp
10888     02 2A 66 F0 | 	shl	local03, #2
1088c     34 4E 05 F1 | 	add	fp, #52
10890     A7 2A 02 F1 | 	add	local03, fp
10894     15 2B 02 FB | 	rdlong	local03, local03
10898     1C 4E 85 F1 | 	sub	fp, #28
1089c     A7 14 02 FB | 	rdlong	arg02, fp
108a0     20 4E 85 F1 | 	sub	fp, #32
108a4     58 7F 23 FF 
108a8     00 12 06 F6 | 	mov	arg01, ##1191096320
108ac     E0 66 B1 FD | 	call	#__system___float_div
108b0     FD 14 02 F6 | 	mov	arg02, result1
108b4     15 13 02 F6 | 	mov	arg01, local03
108b8     D0 64 B1 FD | 	call	#__system___float_mul
108bc     FD 2A 02 F6 | 	mov	local03, result1
108c0     87 E4 1D FF 
108c4     DB 29 06 F6 | 	mov	local02, ##1003032539
108c8     04 4E 05 F1 | 	add	fp, #4
108cc     A7 12 02 FB | 	rdlong	arg01, fp
108d0     04 4E 85 F1 | 	sub	fp, #4
108d4     09 13 52 F6 | 	abs	arg01, arg01 wc
108d8     1F 2C C6 C9 |  if_b	decod	local04, #31
108dc     00 2C 06 36 |  if_ae	mov	local04, #0
108e0     A4 60 B1 FD | 	call	#__system___float_fromuns
108e4     16 FB 61 F5 | 	xor	result1, local04
108e8     FD 14 02 F6 | 	mov	arg02, result1
108ec     14 13 02 F6 | 	mov	arg01, local02
108f0     98 64 B1 FD | 	call	#__system___float_mul
108f4     FD 28 02 F6 | 	mov	local02, result1
108f8     08 4E 05 F1 | 	add	fp, #8
108fc     A7 12 02 FB | 	rdlong	arg01, fp
10900     08 4E 85 F1 | 	sub	fp, #8
10904     01 12 06 F1 | 	add	arg01, #1
10908     09 13 52 F6 | 	abs	arg01, arg01 wc
1090c     1F 2C C6 C9 |  if_b	decod	local04, #31
10910     00 2C 06 36 |  if_ae	mov	local04, #0
10914     70 60 B1 FD | 	call	#__system___float_fromuns
10918     16 FB 61 F5 | 	xor	result1, local04
1091c     FD 14 02 F6 | 	mov	arg02, result1
10920     14 13 02 F6 | 	mov	arg01, local02
10924     64 64 B1 FD | 	call	#__system___float_mul
10928     FD 12 02 F6 | 	mov	arg01, result1
1092c     BC 6D B1 FD | 	call	#__system____builtin_sinf
10930     FD 14 02 F6 | 	mov	arg02, result1
10934     15 13 02 F6 | 	mov	arg01, local03
10938     50 64 B1 FD | 	call	#__system___float_mul
1093c     FD 14 02 F6 | 	mov	arg02, result1
10940     24 4E 05 F1 | 	add	fp, #36
10944     A7 12 02 FB | 	rdlong	arg01, fp
10948     24 4E 85 F1 | 	sub	fp, #36
1094c     6C 60 B1 FD | 	call	#__system___float_add
10950     24 4E 05 F1 | 	add	fp, #36
10954     A7 FA 61 FC | 	wrlong	result1, fp
10958     1C 4E 85 F1 | 	sub	fp, #28
1095c     A7 2A 02 FB | 	rdlong	local03, fp
10960     01 2A 06 F1 | 	add	local03, #1
10964     A7 2A 62 FC | 	wrlong	local03, fp
10968     10 2A 56 F2 | 	cmps	local03, #16 wc
1096c     14 FF 9F CD |  if_b	jmp	#LR__1381
10970     08 4E 05 F1 | 	add	fp, #8
10974     A7 2A 02 FB | 	rdlong	local03, fp
10978     0B 2A 66 F0 | 	shl	local03, #11
1097c     0C 4E 85 F1 | 	sub	fp, #12
10980     A7 28 02 FB | 	rdlong	local02, fp
10984     01 28 66 F0 | 	shl	local02, #1
10988     14 2B 02 F1 | 	add	local03, local02
1098c     20 4E 05 F1 | 	add	fp, #32
10990     A7 12 02 FB | 	rdlong	arg01, fp
10994     24 4E 85 F1 | 	sub	fp, #36
10998     01 14 06 F6 | 	mov	arg02, #1
1099c     B4 68 B1 FD | 	call	#__system___float_tointeger
109a0     FD 14 02 F6 | 	mov	arg02, result1
109a4     15 13 02 F6 | 	mov	arg01, local03
109a8     AC FD B0 FD | 	call	#_psdpoke
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 2A 02 FB | 	rdlong	local03, fp
109b4     01 2A 06 F1 | 	add	local03, #1
109b8     A7 2A 62 FC | 	wrlong	local03, fp
109bc     04 4E 85 F1 | 	sub	fp, #4
109c0     02 00 00 FF 
109c4     00 2A 56 F2 | 	cmps	local03, ##1024 wc
109c8     A8 FE 9F CD |  if_b	jmp	#LR__1380
109cc                 | LR__1382
109cc                 | LR__1383
109cc     A7 F0 03 F6 | 	mov	ptra, fp
109d0     B2 00 A0 FD | 	call	#popregs_
109d4                 | _do_defsnd_ret
109d4     2D 00 64 FD | 	ret
109d8                 | 
109d8                 | ' 
109d8                 | ' '-------------------- defsprite
109d8                 | ' 
109d8                 | ' sub do_defsprite
109d8                 | _do_defsprite
109d8     07 4A 05 F6 | 	mov	COUNT_, #7
109dc     A8 00 A0 FD | 	call	#pushregs_
109e0     60 F0 07 F1 | 	add	ptra, #96
109e4     A4 C1 BF FD | 	call	#_pop
109e8     FD 16 02 F6 | 	mov	arg03, result1
109ec     FE 14 02 F6 | 	mov	arg02, result2
109f0     FF 12 02 F6 | 	mov	arg01, result3
109f4     30 4E 05 F1 | 	add	fp, #48
109f8     A7 16 62 FC | 	wrlong	arg03, fp
109fc     04 4E 05 F1 | 	add	fp, #4
10a00     A7 14 62 FC | 	wrlong	arg02, fp
10a04     04 4E 05 F1 | 	add	fp, #4
10a08     A7 12 62 FC | 	wrlong	arg01, fp
10a0c     38 4E 85 F1 | 	sub	fp, #56
10a10     78 C1 BF FD | 	call	#_pop
10a14     FD 16 02 F6 | 	mov	arg03, result1
10a18     FE 14 02 F6 | 	mov	arg02, result2
10a1c     FF 12 02 F6 | 	mov	arg01, result3
10a20     24 4E 05 F1 | 	add	fp, #36
10a24     A7 16 62 FC | 	wrlong	arg03, fp
10a28     04 4E 05 F1 | 	add	fp, #4
10a2c     A7 14 62 FC | 	wrlong	arg02, fp
10a30     04 4E 05 F1 | 	add	fp, #4
10a34     A7 12 62 FC | 	wrlong	arg01, fp
10a38     2C 4E 85 F1 | 	sub	fp, #44
10a3c     4C C1 BF FD | 	call	#_pop
10a40     FD 16 02 F6 | 	mov	arg03, result1
10a44     FE 14 02 F6 | 	mov	arg02, result2
10a48     FF 12 02 F6 | 	mov	arg01, result3
10a4c     18 4E 05 F1 | 	add	fp, #24
10a50     A7 16 62 FC | 	wrlong	arg03, fp
10a54     04 4E 05 F1 | 	add	fp, #4
10a58     A7 14 62 FC | 	wrlong	arg02, fp
10a5c     04 4E 05 F1 | 	add	fp, #4
10a60     A7 12 62 FC | 	wrlong	arg01, fp
10a64     20 4E 85 F1 | 	sub	fp, #32
10a68     20 C1 BF FD | 	call	#_pop
10a6c     FD 16 02 F6 | 	mov	arg03, result1
10a70     FE 14 02 F6 | 	mov	arg02, result2
10a74     FF 12 02 F6 | 	mov	arg01, result3
10a78     0C 4E 05 F1 | 	add	fp, #12
10a7c     A7 16 62 FC | 	wrlong	arg03, fp
10a80     04 4E 05 F1 | 	add	fp, #4
10a84     A7 14 62 FC | 	wrlong	arg02, fp
10a88     04 4E 05 F1 | 	add	fp, #4
10a8c     A7 12 62 FC | 	wrlong	arg01, fp
10a90     14 4E 85 F1 | 	sub	fp, #20
10a94     F4 C0 BF FD | 	call	#_pop
10a98     FF 16 02 F6 | 	mov	arg03, result3
10a9c     A7 FA 61 FC | 	wrlong	result1, fp
10aa0     04 4E 05 F1 | 	add	fp, #4
10aa4     A7 FC 61 FC | 	wrlong	result2, fp
10aa8     04 4E 05 F1 | 	add	fp, #4
10aac     A7 16 62 FC | 	wrlong	arg03, fp
10ab0     08 4E 85 F1 | 	sub	fp, #8
10ab4     A7 12 02 F6 | 	mov	arg01, fp
10ab8     B4 C2 BF FD | 	call	#_converttoint
10abc     3C 4E 05 F1 | 	add	fp, #60
10ac0     A7 FA 61 FC | 	wrlong	result1, fp
10ac4     30 4E 85 F1 | 	sub	fp, #48
10ac8     A7 12 02 F6 | 	mov	arg01, fp
10acc     0C 4E 85 F1 | 	sub	fp, #12
10ad0     9C C2 BF FD | 	call	#_converttoint
10ad4     40 4E 05 F1 | 	add	fp, #64
10ad8     A7 FA 61 FC | 	wrlong	result1, fp
10adc     28 4E 85 F1 | 	sub	fp, #40
10ae0     A7 12 02 F6 | 	mov	arg01, fp
10ae4     18 4E 85 F1 | 	sub	fp, #24
10ae8     84 C2 BF FD | 	call	#_converttoint
10aec     44 4E 05 F1 | 	add	fp, #68
10af0     A7 FA 61 FC | 	wrlong	result1, fp
10af4     20 4E 85 F1 | 	sub	fp, #32
10af8     A7 12 02 F6 | 	mov	arg01, fp
10afc     24 4E 85 F1 | 	sub	fp, #36
10b00     6C C2 BF FD | 	call	#_converttoint
10b04     48 4E 05 F1 | 	add	fp, #72
10b08     A7 FA 61 FC | 	wrlong	result1, fp
10b0c     18 4E 85 F1 | 	sub	fp, #24
10b10     A7 12 02 F6 | 	mov	arg01, fp
10b14     30 4E 85 F1 | 	sub	fp, #48
10b18     54 C2 BF FD | 	call	#_converttoint
10b1c     4C 4E 05 F1 | 	add	fp, #76
10b20     A7 FA 61 FC | 	wrlong	result1, fp
10b24                 | ' 
10b24                 | ' t5=pop()
10b24                 | ' t4=pop()
10b24                 | ' t3=pop()
10b24                 | ' t2=pop()
10b24                 | ' t1=pop()
10b24                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10b24                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10b24     10 4E 85 F1 | 	sub	fp, #16
10b28     A7 16 02 FB | 	rdlong	arg03, fp
10b2c     3C 4E 85 F1 | 	sub	fp, #60
10b30     02 16 66 F0 | 	shl	arg03, #2
10b34     51 00 00 FF 
10b38     68 E5 05 F1 | 	add	objptr, ##41832
10b3c     F2 16 02 F1 | 	add	arg03, objptr
10b40     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10b44     51 00 00 FF 
10b48     68 E5 85 F1 | 	sub	objptr, ##41832
10b4c     2C 00 90 AD |  if_e	jmp	#LR__1390
10b50     3C 4E 05 F1 | 	add	fp, #60
10b54     A7 16 02 FB | 	rdlong	arg03, fp
10b58     3C 4E 85 F1 | 	sub	fp, #60
10b5c     02 16 66 F0 | 	shl	arg03, #2
10b60     51 00 00 FF 
10b64     68 E5 05 F1 | 	add	objptr, ##41832
10b68     F2 16 02 F1 | 	add	arg03, objptr
10b6c     0B 13 02 FB | 	rdlong	arg01, arg03
10b70     51 00 00 FF 
10b74     68 E5 85 F1 | 	sub	objptr, ##41832
10b78     74 76 B1 FD | 	call	#__system___gc_free
10b7c                 | LR__1390
10b7c     3C 4E 05 F1 | 	add	fp, #60
10b80     A7 26 02 FB | 	rdlong	local01, fp
10b84     0C 4E 05 F1 | 	add	fp, #12
10b88     A7 16 02 FB | 	rdlong	arg03, fp
10b8c     04 4E 05 F1 | 	add	fp, #4
10b90     A7 14 02 FB | 	rdlong	arg02, fp
10b94     0A 17 02 FD | 	qmul	arg03, arg02
10b98     02 26 66 F0 | 	shl	local01, #2
10b9c     51 00 00 FF 
10ba0     68 E5 05 F1 | 	add	objptr, ##41832
10ba4     F2 26 02 F1 | 	add	local01, objptr
10ba8     4C 4E 85 F1 | 	sub	fp, #76
10bac     51 00 00 FF 
10bb0     68 E5 85 F1 | 	sub	objptr, ##41832
10bb4     18 12 62 FD | 	getqx	arg01
10bb8     F8 74 B1 FD | 	call	#__system___gc_alloc_managed
10bbc     13 FB 61 FC | 	wrlong	result1, local01
10bc0                 | ' for y=a3 to a3+a5-1
10bc0     44 4E 05 F1 | 	add	fp, #68
10bc4     A7 28 02 FB | 	rdlong	local02, fp
10bc8     0C 4E 05 F1 | 	add	fp, #12
10bcc     A7 28 62 FC | 	wrlong	local02, fp
10bd0     0C 4E 85 F1 | 	sub	fp, #12
10bd4     A7 2A 02 FB | 	rdlong	local03, fp
10bd8     08 4E 05 F1 | 	add	fp, #8
10bdc     A7 2C 02 FB | 	rdlong	local04, fp
10be0     4C 4E 85 F1 | 	sub	fp, #76
10be4     16 2B 02 F1 | 	add	local03, local04
10be8                 | LR__1391
10be8     50 4E 05 F1 | 	add	fp, #80
10bec     A7 28 02 FB | 	rdlong	local02, fp
10bf0     50 4E 85 F1 | 	sub	fp, #80
10bf4     15 29 52 F2 | 	cmps	local02, local03 wc
10bf8     F4 00 90 3D |  if_ae	jmp	#LR__1394
10bfc                 | '   for x=a2 to a4+a2-1
10bfc     40 4E 05 F1 | 	add	fp, #64
10c00     A7 26 02 FB | 	rdlong	local01, fp
10c04     14 4E 05 F1 | 	add	fp, #20
10c08     A7 26 62 FC | 	wrlong	local01, fp
10c0c     0C 4E 85 F1 | 	sub	fp, #12
10c10     A7 2E 02 FB | 	rdlong	local05, fp
10c14     08 4E 85 F1 | 	sub	fp, #8
10c18     A7 30 02 FB | 	rdlong	local06, fp
10c1c     40 4E 85 F1 | 	sub	fp, #64
10c20     18 2F 02 F1 | 	add	local05, local06
10c24                 | LR__1392
10c24     54 4E 05 F1 | 	add	fp, #84
10c28     A7 26 02 FB | 	rdlong	local01, fp
10c2c     54 4E 85 F1 | 	sub	fp, #84
10c30     17 27 52 F2 | 	cmps	local01, local05 wc
10c34     A0 00 90 3D |  if_ae	jmp	#LR__1393
10c38     3C 4E 05 F1 | 	add	fp, #60
10c3c     A7 30 02 FB | 	rdlong	local06, fp
10c40     18 4E 05 F1 | 	add	fp, #24
10c44     A7 2C 02 FB | 	rdlong	local04, fp
10c48     14 4E 85 F1 | 	sub	fp, #20
10c4c     A7 28 02 FB | 	rdlong	local02, fp
10c50     10 4E 05 F1 | 	add	fp, #16
10c54     A7 26 02 FB | 	rdlong	local01, fp
10c58     13 17 02 F6 | 	mov	arg03, local01
10c5c     0C 4E 85 F1 | 	sub	fp, #12
10c60     A7 14 02 FB | 	rdlong	arg02, fp
10c64     0A 17 82 F1 | 	sub	arg03, arg02
10c68     04 4E 05 F1 | 	add	fp, #4
10c6c     A7 14 02 FB | 	rdlong	arg02, fp
10c70     0A 17 02 FD | 	qmul	arg03, arg02
10c74     02 30 66 F0 | 	shl	local06, #2
10c78     51 00 00 FF 
10c7c     68 E5 05 F1 | 	add	objptr, ##41832
10c80     F2 30 02 F1 | 	add	local06, objptr
10c84     18 31 02 FB | 	rdlong	local06, local06
10c88     16 33 02 F6 | 	mov	local07, local04
10c8c     14 33 82 F1 | 	sub	local07, local02
10c90     51 00 00 FF 
10c94     68 E5 85 F1 | 	sub	objptr, ##41832
10c98     F2 12 02 FB | 	rdlong	arg01, objptr
10c9c     16 13 02 F1 | 	add	arg01, local04
10ca0     48 4E 85 F1 | 	sub	fp, #72
10ca4     0A 26 66 F0 | 	shl	local01, #10
10ca8     13 13 02 F1 | 	add	arg01, local01
10cac     18 2C 62 FD | 	getqx	local04
10cb0     16 33 02 F1 | 	add	local07, local04
10cb4     18 33 02 F1 | 	add	local07, local06
10cb8     2C FB B0 FD | 	call	#_pspeek
10cbc     19 FB 41 FC | 	wrbyte	result1, local07
10cc0     54 4E 05 F1 | 	add	fp, #84
10cc4     A7 32 02 FB | 	rdlong	local07, fp
10cc8     01 32 06 F1 | 	add	local07, #1
10ccc     A7 32 62 FC | 	wrlong	local07, fp
10cd0     54 4E 85 F1 | 	sub	fp, #84
10cd4     4C FF 9F FD | 	jmp	#LR__1392
10cd8                 | LR__1393
10cd8     50 4E 05 F1 | 	add	fp, #80
10cdc     A7 32 02 FB | 	rdlong	local07, fp
10ce0     01 32 06 F1 | 	add	local07, #1
10ce4     A7 32 62 FC | 	wrlong	local07, fp
10ce8     50 4E 85 F1 | 	sub	fp, #80
10cec     F8 FE 9F FD | 	jmp	#LR__1391
10cf0                 | LR__1394
10cf0     3C 4E 05 F1 | 	add	fp, #60
10cf4     A7 32 02 FB | 	rdlong	local07, fp
10cf8     19 13 02 F6 | 	mov	arg01, local07
10cfc     3C 4E 85 F1 | 	sub	fp, #60
10d00     02 32 66 F0 | 	shl	local07, #2
10d04     51 00 00 FF 
10d08     68 E5 05 F1 | 	add	objptr, ##41832
10d0c     F2 32 02 F1 | 	add	local07, objptr
10d10     19 15 02 FB | 	rdlong	arg02, local07
10d14     51 00 00 FF 
10d18     68 E5 85 F1 | 	sub	objptr, ##41832
10d1c     08 08 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10d20     3C 4E 05 F1 | 	add	fp, #60
10d24     A7 12 02 FB | 	rdlong	arg01, fp
10d28     0C 4E 05 F1 | 	add	fp, #12
10d2c     A7 14 02 FB | 	rdlong	arg02, fp
10d30     04 4E 05 F1 | 	add	fp, #4
10d34     A7 16 02 FB | 	rdlong	arg03, fp
10d38     4C 4E 85 F1 | 	sub	fp, #76
10d3c     78 08 B1 FD | 	call	#_hg010b_spin2_setspritesize
10d40     A7 F0 03 F6 | 	mov	ptra, fp
10d44     B2 00 A0 FD | 	call	#popregs_
10d48                 | _do_defsprite_ret
10d48     2D 00 64 FD | 	ret
10d4c                 | 
10d4c                 | ' 
10d4c                 | ' '-------------------- deg
10d4c                 | ' 
10d4c                 | ' sub do_deg
10d4c                 | _do_deg
10d4c     51 00 00 FF 
10d50     BC E5 05 F1 | 	add	objptr, ##41916
10d54     7D 47 9E FF 
10d58     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10d5c     04 E4 05 F1 | 	add	objptr, #4
10d60     97 32 A1 FF 
10d64     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10d68     51 00 00 FF 
10d6c     C0 E5 85 F1 | 	sub	objptr, ##41920
10d70                 | _do_deg_ret
10d70     2D 00 64 FD | 	ret
10d74                 | 
10d74                 | ' 
10d74                 | ' '-------------------- delete
10d74                 | ' 
10d74                 | ' sub do_delete
10d74                 | _do_delete
10d74     05 4A 05 F6 | 	mov	COUNT_, #5
10d78     A8 00 A0 FD | 	call	#pushregs_
10d7c     0C BE BF FD | 	call	#_pop
10d80     FE 18 02 F6 | 	mov	arg04, result2
10d84     FF 16 02 F6 | 	mov	arg03, result3
10d88     FD 26 02 F6 | 	mov	local01, result1
10d8c     0C 29 02 F6 | 	mov	local02, arg04
10d90     0B 2B 02 F6 | 	mov	local03, arg03
10d94                 | ' 
10d94                 | ' t1=pop()
10d94                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10d94     2B 2A 0E F2 | 	cmp	local03, #43 wz
10d98     10 00 90 5D |  if_ne	jmp	#LR__1400
10d9c     13 13 02 F6 | 	mov	arg01, local01
10da0     60 BF BF FD | 	call	#_convertstring
10da4     FD 26 02 F6 | 	mov	local01, result1
10da8     1F 2A 06 F6 | 	mov	local03, #31
10dac                 | LR__1400
10dac                 | ' if t1.result_type<>result_string then printerror(15): return
10dac     1F 2A 0E F2 | 	cmp	local03, #31 wz
10db0     10 00 90 AD |  if_e	jmp	#LR__1401
10db4     0F 12 06 F6 | 	mov	arg01, #15
10db8     00 14 06 F6 | 	mov	arg02, #0
10dbc     B0 F7 B0 FD | 	call	#_printerror
10dc0     E0 00 90 FD | 	jmp	#LR__1405
10dc4                 | LR__1401
10dc4                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10dc4     4A 00 00 FF 
10dc8     94 E4 05 F1 | 	add	objptr, ##38036
10dcc     F2 12 02 FB | 	rdlong	arg01, objptr
10dd0     4A 00 00 FF 
10dd4     94 E4 85 F1 | 	sub	objptr, ##38036
10dd8     A1 01 00 FF 
10ddc     78 14 06 F6 | 	mov	arg02, ##@LR__5729
10de0     58 31 B1 FD | 	call	#__system___string_cmp
10de4     00 FA 0D F2 | 	cmp	result1, #0 wz
10de8     34 00 90 AD |  if_e	jmp	#LR__1402
10dec     4A 00 00 FF 
10df0     94 E4 05 F1 | 	add	objptr, ##38036
10df4     F2 12 02 FB | 	rdlong	arg01, objptr
10df8     4A 00 00 FF 
10dfc     94 E4 85 F1 | 	sub	objptr, ##38036
10e00     A1 01 00 FF 
10e04     7A 14 06 F6 | 	mov	arg02, ##@LR__5730
10e08     64 31 B1 FD | 	call	#__system___string_concat
10e0c     FD 12 02 F6 | 	mov	arg01, result1
10e10     13 15 02 F6 | 	mov	arg02, local01
10e14     58 31 B1 FD | 	call	#__system___string_concat
10e18     FD 2C 02 F6 | 	mov	local04, result1
10e1c     14 00 90 FD | 	jmp	#LR__1403
10e20                 | LR__1402
10e20     A1 01 00 FF 
10e24     7C 12 06 F6 | 	mov	arg01, ##@LR__5731
10e28     13 15 02 F6 | 	mov	arg02, local01
10e2c     40 31 B1 FD | 	call	#__system___string_concat
10e30     FD 2C 02 F6 | 	mov	local04, result1
10e34                 | LR__1403
10e34     16 13 02 F6 | 	mov	arg01, local04
10e38     A4 58 B1 FD | 	call	#__system___remove
10e3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10e40     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10e44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10e48     FD 2E 0A F6 | 	mov	local05, result1 wz
10e4c                 | ' kill filename$
10e4c                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10e4c     54 00 90 AD |  if_e	jmp	#LR__1404
10e50     00 12 06 F6 | 	mov	arg01, #0
10e54     E4 8D B1 FD | 	call	#__system___getiolock_0579
10e58     FD 12 02 F6 | 	mov	arg01, result1
10e5c     B4 30 B1 FD | 	call	#__system___lockmem
10e60     A1 01 00 FF 
10e64     7E 14 06 F6 | 	mov	arg02, ##@LR__5732
10e68     00 12 06 F6 | 	mov	arg01, #0
10e6c     00 16 06 F6 | 	mov	arg03, #0
10e70     94 3D B1 FD | 	call	#__system___basic_print_string
10e74     00 12 06 F6 | 	mov	arg01, #0
10e78     17 15 02 F6 | 	mov	arg02, local05
10e7c     00 16 06 F6 | 	mov	arg03, #0
10e80     0A 18 06 F6 | 	mov	arg04, #10
10e84     C4 3D B1 FD | 	call	#__system___basic_print_integer
10e88     00 12 06 F6 | 	mov	arg01, #0
10e8c     0A 14 06 F6 | 	mov	arg02, #10
10e90     00 16 06 F6 | 	mov	arg03, #0
10e94     18 3D B1 FD | 	call	#__system___basic_print_char
10e98     00 12 06 F6 | 	mov	arg01, #0
10e9c     9C 8D B1 FD | 	call	#__system___getiolock_0579
10ea0     FD 00 68 FC | 	wrlong	#0, result1
10ea4                 | LR__1404
10ea4                 | LR__1405
10ea4     A7 F0 03 F6 | 	mov	ptra, fp
10ea8     B2 00 A0 FD | 	call	#popregs_
10eac                 | _do_delete_ret
10eac     2D 00 64 FD | 	ret
10eb0                 | 
10eb0                 | ' 
10eb0                 | ' '-------------------- dir
10eb0                 | ' 
10eb0                 | ' sub do_dir
10eb0                 | _do_dir
10eb0     13 4A 05 F6 | 	mov	COUNT_, #19
10eb4     A8 00 A0 FD | 	call	#pushregs_
10eb8     01 00 00 FF 
10ebc     38 F0 07 F1 | 	add	ptra, ##568
10ec0                 | ' 
10ec0                 | ' print "Current directory: "; currentdir$ 
10ec0     00 12 06 F6 | 	mov	arg01, #0
10ec4     74 8D B1 FD | 	call	#__system___getiolock_0579
10ec8     FD 12 02 F6 | 	mov	arg01, result1
10ecc     44 30 B1 FD | 	call	#__system___lockmem
10ed0     A1 01 00 FF 
10ed4     B6 14 06 F6 | 	mov	arg02, ##@LR__5733
10ed8     00 12 06 F6 | 	mov	arg01, #0
10edc     00 16 06 F6 | 	mov	arg03, #0
10ee0     24 3D B1 FD | 	call	#__system___basic_print_string
10ee4     4A 00 00 FF 
10ee8     94 E4 05 F1 | 	add	objptr, ##38036
10eec     F2 14 02 FB | 	rdlong	arg02, objptr
10ef0     4A 00 00 FF 
10ef4     94 E4 85 F1 | 	sub	objptr, ##38036
10ef8     00 12 06 F6 | 	mov	arg01, #0
10efc     00 16 06 F6 | 	mov	arg03, #0
10f00     04 3D B1 FD | 	call	#__system___basic_print_string
10f04     00 12 06 F6 | 	mov	arg01, #0
10f08     0A 14 06 F6 | 	mov	arg02, #10
10f0c     00 16 06 F6 | 	mov	arg03, #0
10f10     9C 3C B1 FD | 	call	#__system___basic_print_char
10f14     01 26 06 F6 | 	mov	local01, #1
10f18     00 12 06 F6 | 	mov	arg01, #0
10f1c     1C 8D B1 FD | 	call	#__system___getiolock_0579
10f20     FD 00 68 FC | 	wrlong	#0, result1
10f24     00 28 06 F6 | 	mov	local02, #0
10f28     00 2A 06 F6 | 	mov	local03, #0
10f2c                 | ' px=0
10f2c                 | ' for i=0 to 127: filelist(i)="" : next i
10f2c     00 2C 06 F6 | 	mov	local04, #0
10f30     1C 4E 05 F1 | 	add	fp, #28
10f34     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
10f38                 | LR__1410
10f38     16 2F 02 F6 | 	mov	local05, local04
10f3c     02 2E 66 F0 | 	shl	local05, #2
10f40     A7 2E 02 F1 | 	add	local05, fp
10f44     A1 01 00 FF 
10f48     CA 30 06 F6 | 	mov	local06, ##@LR__5734
10f4c     17 31 62 FC | 	wrlong	local06, local05
10f50     01 2C 06 F1 | 	add	local04, #1
10f54     80 2C 56 F2 | 	cmps	local04, #128 wc
10f58     DC FF 9F CD |  if_b	jmp	#LR__1410
10f5c                 | LR__1411
10f5c     1C 4E 85 F1 | 	sub	fp, #28
10f60     A1 01 00 FF 
10f64     CB 12 06 F6 | 	mov	arg01, ##@LR__5735
10f68     10 14 06 F6 | 	mov	arg02, #16
10f6c     04 8E B1 FD | 	call	#__system___basic_dir
10f70     FD 32 02 F6 | 	mov	local07, result1
10f74     00 34 06 F6 | 	mov	local08, #0
10f78                 | ' filename=dir$("*", fbDirectory)
10f78                 | ' n=0
10f78                 | ' while filename <> "" andalso filename <> nil andalso n<128
10f78                 | LR__1412
10f78     A1 01 00 FF 
10f7c     CD 36 06 F6 | 	mov	local09, ##@LR__5736
10f80     19 13 02 F6 | 	mov	arg01, local07
10f84     1B 15 02 F6 | 	mov	arg02, local09
10f88     B0 2F B1 FD | 	call	#__system___string_cmp
10f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
10f90     68 00 90 AD |  if_e	jmp	#LR__1413
10f94     00 36 06 F6 | 	mov	local09, #0
10f98     19 13 02 F6 | 	mov	arg01, local07
10f9c     00 14 06 F6 | 	mov	arg02, #0
10fa0     98 2F B1 FD | 	call	#__system___string_cmp
10fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
10fa8     50 00 90 AD |  if_e	jmp	#LR__1413
10fac     80 34 56 F2 | 	cmps	local08, #128 wc
10fb0     48 00 90 3D |  if_ae	jmp	#LR__1413
10fb4     A1 01 00 FF 
10fb8     CE 12 06 F6 | 	mov	arg01, ##@LR__5737
10fbc     19 15 02 F6 | 	mov	arg02, local07
10fc0     AC 2F B1 FD | 	call	#__system___string_concat
10fc4     FD 32 02 F6 | 	mov	local07, result1
10fc8     1A 2F 02 F6 | 	mov	local05, local08
10fcc     02 2E 66 F0 | 	shl	local05, #2
10fd0     1C 4E 05 F1 | 	add	fp, #28
10fd4     A7 2E 02 F1 | 	add	local05, fp
10fd8     17 33 62 FC | 	wrlong	local07, local05
10fdc     01 34 06 F1 | 	add	local08, #1
10fe0     00 2E 06 F6 | 	mov	local05, #0
10fe4     00 12 06 F6 | 	mov	arg01, #0
10fe8     00 14 06 F6 | 	mov	arg02, #0
10fec     1C 4E 85 F1 | 	sub	fp, #28
10ff0     80 8D B1 FD | 	call	#__system___basic_dir
10ff4     FD 32 02 F6 | 	mov	local07, result1
10ff8     7C FF 9F FD | 	jmp	#LR__1412
10ffc                 | LR__1413
10ffc                 | ' for i=0 to n-1			' now sort this
10ffc     00 2C 06 F6 | 	mov	local04, #0
11000     1A 39 02 F6 | 	mov	local10, local08
11004                 | LR__1414
11004     1C 2D 52 F2 | 	cmps	local04, local10 wc
11008     DC 00 90 3D |  if_ae	jmp	#LR__1418
1100c     00 3A 06 F6 | 	mov	local11, #0
11010                 | '   swapped=false
11010                 | '   for j=0 to n-i-2
11010     00 3C 06 F6 | 	mov	local12, #0
11014     1A 3F 02 F6 | 	mov	local13, local08
11018     16 3F 82 F1 | 	sub	local13, local04
1101c     01 3E 86 F1 | 	sub	local13, #1
11020                 | LR__1415
11020     1F 3D 52 F2 | 	cmps	local12, local13 wc
11024     B0 00 90 3D |  if_ae	jmp	#LR__1417
11028                 | '     if filelist(j) > filelist(j+1) then
11028     1E 37 02 F6 | 	mov	local09, local12
1102c     02 36 66 F0 | 	shl	local09, #2
11030     1C 4E 05 F1 | 	add	fp, #28
11034     A7 36 02 F1 | 	add	local09, fp
11038     1B 13 02 FB | 	rdlong	arg01, local09
1103c     1E 37 02 F6 | 	mov	local09, local12
11040     01 36 06 F1 | 	add	local09, #1
11044     1B 31 02 F6 | 	mov	local06, local09
11048     02 30 66 F0 | 	shl	local06, #2
1104c     A7 26 02 F6 | 	mov	local01, fp
11050     A7 30 02 F1 | 	add	local06, fp
11054     18 2F 02 FB | 	rdlong	local05, local06
11058     17 15 02 F6 | 	mov	arg02, local05
1105c     1C 4E 85 F1 | 	sub	fp, #28
11060     D8 2E B1 FD | 	call	#__system___string_cmp
11064     01 FA 55 F2 | 	cmps	result1, #1 wc
11068     64 00 90 CD |  if_b	jmp	#LR__1416
1106c     1E 37 02 F6 | 	mov	local09, local12
11070     01 36 06 F1 | 	add	local09, #1
11074     02 36 66 F0 | 	shl	local09, #2
11078     1C 4E 05 F1 | 	add	fp, #28
1107c     A7 36 02 F1 | 	add	local09, fp
11080     1B 3B 02 FB | 	rdlong	local11, local09
11084     1E 31 02 F6 | 	mov	local06, local12
11088     02 30 66 F0 | 	shl	local06, #2
1108c     A7 30 02 F1 | 	add	local06, fp
11090     18 2F 02 FB | 	rdlong	local05, local06
11094     1E 37 02 F6 | 	mov	local09, local12
11098     1B 31 02 F6 | 	mov	local06, local09
1109c     02 30 66 F0 | 	shl	local06, #2
110a0     A7 26 02 F6 | 	mov	local01, fp
110a4     A7 30 02 F1 | 	add	local06, fp
110a8     18 3B 62 FC | 	wrlong	local11, local06
110ac     1E 29 02 F6 | 	mov	local02, local12
110b0     01 28 06 F1 | 	add	local02, #1
110b4     14 41 02 F6 | 	mov	local14, local02
110b8     02 40 66 F0 | 	shl	local14, #2
110bc     A7 42 02 F6 | 	mov	local15, fp
110c0     A7 40 02 F1 | 	add	local14, fp
110c4     20 2F 62 FC | 	wrlong	local05, local14
110c8     01 3A 66 F6 | 	neg	local11, #1
110cc     1C 4E 85 F1 | 	sub	fp, #28
110d0                 | LR__1416
110d0     01 3C 06 F1 | 	add	local12, #1
110d4     48 FF 9F FD | 	jmp	#LR__1415
110d8                 | LR__1417
110d8                 | ' if not swapped then exit for
110d8     1D 45 22 F6 | 	not	local16, local11
110dc     00 44 0E F2 | 	cmp	local16, #0 wz
110e0     01 2C 06 A1 |  if_e	add	local04, #1
110e4     1C FF 9F AD |  if_e	jmp	#LR__1414
110e8                 | LR__1418
110e8                 | ' for i=0 to n-1
110e8     00 2C 06 F6 | 	mov	local04, #0
110ec     1A 47 02 F6 | 	mov	local17, local08
110f0                 | LR__1419
110f0     23 2D 52 F2 | 	cmps	local04, local17 wc
110f4     94 00 90 3D |  if_ae	jmp	#LR__1421
110f8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
110f8     00 12 06 F6 | 	mov	arg01, #0
110fc     3C 8B B1 FD | 	call	#__system___getiolock_0579
11100     FD 12 02 F6 | 	mov	arg01, result1
11104     0C 2E B1 FD | 	call	#__system___lockmem
11108     16 29 02 F6 | 	mov	local02, local04
1110c     02 28 66 F0 | 	shl	local02, #2
11110     1C 4E 05 F1 | 	add	fp, #28
11114     A7 40 02 F6 | 	mov	local14, fp
11118     A7 28 02 F1 | 	add	local02, fp
1111c     14 15 02 FB | 	rdlong	arg02, local02
11120     00 26 06 F6 | 	mov	local01, #0
11124     00 12 06 F6 | 	mov	arg01, #0
11128     00 16 06 F6 | 	mov	arg03, #0
1112c     1C 4E 85 F1 | 	sub	fp, #28
11130     D4 3A B1 FD | 	call	#__system___basic_print_string
11134     00 12 06 F6 | 	mov	arg01, #0
11138     00 8B B1 FD | 	call	#__system___getiolock_0579
1113c     FD 00 68 FC | 	wrlong	#0, result1
11140     40 2A 06 F1 | 	add	local03, #64
11144     15 13 02 F6 | 	mov	arg01, local03
11148     B8 10 B1 FD | 	call	#_hg010b_spin2_setcursorx
1114c     00 2B 56 F2 | 	cmps	local03, #256 wc
11150     30 00 90 CD |  if_b	jmp	#LR__1420
11154     00 2A 06 F6 | 	mov	local03, #0
11158     00 12 06 F6 | 	mov	arg01, #0
1115c     DC 8A B1 FD | 	call	#__system___getiolock_0579
11160     FD 12 02 F6 | 	mov	arg01, result1
11164     AC 2D B1 FD | 	call	#__system___lockmem
11168     00 12 06 F6 | 	mov	arg01, #0
1116c     0A 14 06 F6 | 	mov	arg02, #10
11170     00 16 06 F6 | 	mov	arg03, #0
11174     38 3A B1 FD | 	call	#__system___basic_print_char
11178     00 12 06 F6 | 	mov	arg01, #0
1117c     BC 8A B1 FD | 	call	#__system___getiolock_0579
11180     FD 00 68 FC | 	wrlong	#0, result1
11184                 | LR__1420
11184     01 2C 06 F1 | 	add	local04, #1
11188     64 FF 9F FD | 	jmp	#LR__1419
1118c                 | LR__1421
1118c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1118c     80 34 56 F2 | 	cmps	local08, #128 wc
11190     44 00 90 CD |  if_b	jmp	#LR__1422
11194     00 12 06 F6 | 	mov	arg01, #0
11198     A0 8A B1 FD | 	call	#__system___getiolock_0579
1119c     FD 12 02 F6 | 	mov	arg01, result1
111a0     70 2D B1 FD | 	call	#__system___lockmem
111a4     A1 01 00 FF 
111a8     D5 14 06 F6 | 	mov	arg02, ##@LR__5738
111ac     00 12 06 F6 | 	mov	arg01, #0
111b0     00 16 06 F6 | 	mov	arg03, #0
111b4     50 3A B1 FD | 	call	#__system___basic_print_string
111b8     00 12 06 F6 | 	mov	arg01, #0
111bc     0A 14 06 F6 | 	mov	arg02, #10
111c0     00 16 06 F6 | 	mov	arg03, #0
111c4     E8 39 B1 FD | 	call	#__system___basic_print_char
111c8     00 12 06 F6 | 	mov	arg01, #0
111cc     6C 8A B1 FD | 	call	#__system___getiolock_0579
111d0     FD 00 68 FC | 	wrlong	#0, result1
111d4     00 26 06 F6 | 	mov	local01, #0
111d8                 | LR__1422
111d8                 | ' print
111d8     00 12 06 F6 | 	mov	arg01, #0
111dc     5C 8A B1 FD | 	call	#__system___getiolock_0579
111e0     FD 12 02 F6 | 	mov	arg01, result1
111e4     2C 2D B1 FD | 	call	#__system___lockmem
111e8     00 12 06 F6 | 	mov	arg01, #0
111ec     0A 14 06 F6 | 	mov	arg02, #10
111f0     00 16 06 F6 | 	mov	arg03, #0
111f4     B8 39 B1 FD | 	call	#__system___basic_print_char
111f8     00 12 06 F6 | 	mov	arg01, #0
111fc     3C 8A B1 FD | 	call	#__system___getiolock_0579
11200     FD 00 68 FC | 	wrlong	#0, result1
11204     00 30 06 F6 | 	mov	local06, #0
11208     00 34 06 F6 | 	mov	local08, #0
1120c     00 2A 06 F6 | 	mov	local03, #0
11210                 | ' return cursor_y
11210     3E E4 05 F1 | 	add	objptr, #62
11214     F2 48 C2 FA | 	rdbyte	local18, objptr
11218     3E E4 85 F1 | 	sub	objptr, #62
1121c     A1 01 00 FF 
11220     07 13 06 F6 | 	mov	arg01, ##@LR__5739
11224     21 14 06 F6 | 	mov	arg02, #33
11228     48 8B B1 FD | 	call	#__system___basic_dir
1122c     FD 32 02 F6 | 	mov	local07, result1
11230                 | ' n=0
11230                 | ' px=0: py=v.getcursory()
11230                 | ' filename = dir$("*", fbNormal )   
11230                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11230                 | LR__1423
11230     A1 01 00 FF 
11234     09 37 06 F6 | 	mov	local09, ##@LR__5740
11238     19 13 02 F6 | 	mov	arg01, local07
1123c     1B 15 02 F6 | 	mov	arg02, local09
11240     F8 2C B1 FD | 	call	#__system___string_cmp
11244     00 FA 0D F2 | 	cmp	result1, #0 wz
11248     54 00 90 AD |  if_e	jmp	#LR__1424
1124c     00 36 06 F6 | 	mov	local09, #0
11250     19 13 02 F6 | 	mov	arg01, local07
11254     00 14 06 F6 | 	mov	arg02, #0
11258     E0 2C B1 FD | 	call	#__system___string_cmp
1125c     00 FA 0D F2 | 	cmp	result1, #0 wz
11260     3C 00 90 AD |  if_e	jmp	#LR__1424
11264     80 34 56 F2 | 	cmps	local08, #128 wc
11268     34 00 90 3D |  if_ae	jmp	#LR__1424
1126c     1A 2F 02 F6 | 	mov	local05, local08
11270     02 2E 66 F0 | 	shl	local05, #2
11274     1C 4E 05 F1 | 	add	fp, #28
11278     A7 2E 02 F1 | 	add	local05, fp
1127c     17 33 62 FC | 	wrlong	local07, local05
11280     01 34 06 F1 | 	add	local08, #1
11284     00 2E 06 F6 | 	mov	local05, #0
11288     00 12 06 F6 | 	mov	arg01, #0
1128c     00 14 06 F6 | 	mov	arg02, #0
11290     1C 4E 85 F1 | 	sub	fp, #28
11294     DC 8A B1 FD | 	call	#__system___basic_dir
11298     FD 32 02 F6 | 	mov	local07, result1
1129c     90 FF 9F FD | 	jmp	#LR__1423
112a0                 | LR__1424
112a0                 | ' for i =0 to n-1
112a0     00 2C 06 F6 | 	mov	local04, #0
112a4                 | LR__1425
112a4     1A 2D 52 F2 | 	cmps	local04, local08 wc
112a8     D8 00 90 3D |  if_ae	jmp	#LR__1429
112ac     00 3A 06 F6 | 	mov	local11, #0
112b0                 | '   swapped=false
112b0                 | '   for j=0 to n-i-2
112b0     00 3C 06 F6 | 	mov	local12, #0
112b4     1A 4B 02 F6 | 	mov	local19, local08
112b8     16 4B 82 F1 | 	sub	local19, local04
112bc     01 4A 86 F1 | 	sub	local19, #1
112c0                 | LR__1426
112c0     25 3D 52 F2 | 	cmps	local12, local19 wc
112c4     AC 00 90 3D |  if_ae	jmp	#LR__1428
112c8                 | '     if filelist(j) > filelist(j+1) then
112c8     1E 37 02 F6 | 	mov	local09, local12
112cc     02 36 66 F0 | 	shl	local09, #2
112d0     1C 4E 05 F1 | 	add	fp, #28
112d4     A7 36 02 F1 | 	add	local09, fp
112d8     1B 13 02 FB | 	rdlong	arg01, local09
112dc     1E 37 02 F6 | 	mov	local09, local12
112e0     01 36 06 F1 | 	add	local09, #1
112e4     1B 31 02 F6 | 	mov	local06, local09
112e8     02 30 66 F0 | 	shl	local06, #2
112ec     A7 26 02 F6 | 	mov	local01, fp
112f0     A7 30 02 F1 | 	add	local06, fp
112f4     18 2F 02 FB | 	rdlong	local05, local06
112f8     17 15 02 F6 | 	mov	arg02, local05
112fc     1C 4E 85 F1 | 	sub	fp, #28
11300     38 2C B1 FD | 	call	#__system___string_cmp
11304     01 FA 55 F2 | 	cmps	result1, #1 wc
11308     60 00 90 CD |  if_b	jmp	#LR__1427
1130c     1E 37 02 F6 | 	mov	local09, local12
11310     01 36 06 F1 | 	add	local09, #1
11314     02 36 66 F0 | 	shl	local09, #2
11318     1C 4E 05 F1 | 	add	fp, #28
1131c     A7 36 02 F1 | 	add	local09, fp
11320     1B 45 02 FB | 	rdlong	local16, local09
11324     1E 31 02 F6 | 	mov	local06, local12
11328     02 30 66 F0 | 	shl	local06, #2
1132c     A7 30 02 F1 | 	add	local06, fp
11330     18 2F 02 FB | 	rdlong	local05, local06
11334     1E 37 02 F6 | 	mov	local09, local12
11338     1B 31 02 F6 | 	mov	local06, local09
1133c     02 30 66 F0 | 	shl	local06, #2
11340     A7 26 02 F6 | 	mov	local01, fp
11344     A7 30 02 F1 | 	add	local06, fp
11348     18 45 62 FC | 	wrlong	local16, local06
1134c     1E 41 02 F6 | 	mov	local14, local12
11350     01 40 06 F1 | 	add	local14, #1
11354     02 40 66 F0 | 	shl	local14, #2
11358     A7 42 02 F6 | 	mov	local15, fp
1135c     A7 40 02 F1 | 	add	local14, fp
11360     20 2F 62 FC | 	wrlong	local05, local14
11364     01 3A 66 F6 | 	neg	local11, #1
11368     1C 4E 85 F1 | 	sub	fp, #28
1136c                 | LR__1427
1136c     01 3C 06 F1 | 	add	local12, #1
11370     4C FF 9F FD | 	jmp	#LR__1426
11374                 | LR__1428
11374                 | ' if not swapped then exit for
11374     1D 45 22 F6 | 	not	local16, local11
11378     00 44 0E F2 | 	cmp	local16, #0 wz
1137c     01 2C 06 A1 |  if_e	add	local04, #1
11380     20 FF 9F AD |  if_e	jmp	#LR__1425
11384                 | LR__1429
11384                 | ' for i=0 to n-1
11384     00 2C 06 F6 | 	mov	local04, #0
11388                 | LR__1430
11388     1A 2D 52 F2 | 	cmps	local04, local08 wc
1138c     8C 00 90 3D |  if_ae	jmp	#LR__1432
11390                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11390     00 12 06 F6 | 	mov	arg01, #0
11394     A4 88 B1 FD | 	call	#__system___getiolock_0579
11398     FD 12 02 F6 | 	mov	arg01, result1
1139c     74 2B B1 FD | 	call	#__system___lockmem
113a0     16 29 02 F6 | 	mov	local02, local04
113a4     02 28 66 F0 | 	shl	local02, #2
113a8     1C 4E 05 F1 | 	add	fp, #28
113ac     A7 28 02 F1 | 	add	local02, fp
113b0     14 15 02 FB | 	rdlong	arg02, local02
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     00 16 06 F6 | 	mov	arg03, #0
113bc     1C 4E 85 F1 | 	sub	fp, #28
113c0     44 38 B1 FD | 	call	#__system___basic_print_string
113c4     00 12 06 F6 | 	mov	arg01, #0
113c8     70 88 B1 FD | 	call	#__system___getiolock_0579
113cc     FD 00 68 FC | 	wrlong	#0, result1
113d0     40 2A 06 F1 | 	add	local03, #64
113d4     15 13 02 F6 | 	mov	arg01, local03
113d8     28 0E B1 FD | 	call	#_hg010b_spin2_setcursorx
113dc     00 2B 56 F2 | 	cmps	local03, #256 wc
113e0     30 00 90 CD |  if_b	jmp	#LR__1431
113e4     00 2A 06 F6 | 	mov	local03, #0
113e8     00 12 06 F6 | 	mov	arg01, #0
113ec     4C 88 B1 FD | 	call	#__system___getiolock_0579
113f0     FD 12 02 F6 | 	mov	arg01, result1
113f4     1C 2B B1 FD | 	call	#__system___lockmem
113f8     00 12 06 F6 | 	mov	arg01, #0
113fc     0A 14 06 F6 | 	mov	arg02, #10
11400     00 16 06 F6 | 	mov	arg03, #0
11404     A8 37 B1 FD | 	call	#__system___basic_print_char
11408     00 12 06 F6 | 	mov	arg01, #0
1140c     2C 88 B1 FD | 	call	#__system___getiolock_0579
11410     FD 00 68 FC | 	wrlong	#0, result1
11414                 | LR__1431
11414     01 2C 06 F1 | 	add	local04, #1
11418     6C FF 9F FD | 	jmp	#LR__1430
1141c                 | LR__1432
1141c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1141c     80 34 56 F2 | 	cmps	local08, #128 wc
11420     40 00 90 CD |  if_b	jmp	#LR__1433
11424     00 12 06 F6 | 	mov	arg01, #0
11428     10 88 B1 FD | 	call	#__system___getiolock_0579
1142c     FD 12 02 F6 | 	mov	arg01, result1
11430     E0 2A B1 FD | 	call	#__system___lockmem
11434     A1 01 00 FF 
11438     0A 15 06 F6 | 	mov	arg02, ##@LR__5741
1143c     00 12 06 F6 | 	mov	arg01, #0
11440     00 16 06 F6 | 	mov	arg03, #0
11444     C0 37 B1 FD | 	call	#__system___basic_print_string
11448     00 12 06 F6 | 	mov	arg01, #0
1144c     0A 14 06 F6 | 	mov	arg02, #10
11450     00 16 06 F6 | 	mov	arg03, #0
11454     58 37 B1 FD | 	call	#__system___basic_print_char
11458     00 12 06 F6 | 	mov	arg01, #0
1145c     DC 87 B1 FD | 	call	#__system___getiolock_0579
11460     FD 00 68 FC | 	wrlong	#0, result1
11464                 | LR__1433
11464                 | ' print
11464     00 12 06 F6 | 	mov	arg01, #0
11468     D0 87 B1 FD | 	call	#__system___getiolock_0579
1146c     FD 12 02 F6 | 	mov	arg01, result1
11470     A0 2A B1 FD | 	call	#__system___lockmem
11474     00 12 06 F6 | 	mov	arg01, #0
11478     0A 14 06 F6 | 	mov	arg02, #10
1147c     00 16 06 F6 | 	mov	arg03, #0
11480     2C 37 B1 FD | 	call	#__system___basic_print_char
11484     00 12 06 F6 | 	mov	arg01, #0
11488     B0 87 B1 FD | 	call	#__system___getiolock_0579
1148c     FD 00 68 FC | 	wrlong	#0, result1
11490     A7 F0 03 F6 | 	mov	ptra, fp
11494     B2 00 A0 FD | 	call	#popregs_
11498                 | _do_dir_ret
11498     2D 00 64 FD | 	ret
1149c                 | 
1149c                 | ' 
1149c                 | ' '-------------------- dpeek
1149c                 | ' 
1149c                 | ' sub do_dpeek
1149c                 | _do_dpeek
1149c     00 4A 05 F6 | 	mov	COUNT_, #0
114a0     A8 00 A0 FD | 	call	#pushregs_
114a4     14 F0 07 F1 | 	add	ptra, #20
114a8     E0 B6 BF FD | 	call	#_pop
114ac     A7 FA 61 FC | 	wrlong	result1, fp
114b0     04 4E 05 F1 | 	add	fp, #4
114b4     A7 FC 61 FC | 	wrlong	result2, fp
114b8     04 4E 05 F1 | 	add	fp, #4
114bc     A7 FE 61 FC | 	wrlong	result3, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     A7 12 02 F6 | 	mov	arg01, fp
114c8     A4 B8 BF FD | 	call	#_converttoint
114cc     0C 4E 05 F1 | 	add	fp, #12
114d0     A7 FA 61 FC | 	wrlong	result1, fp
114d4                 | ' 
114d4                 | ' t1=pop()
114d4                 | ' a=converttoint(t1)
114d4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
114d4     0C 4E 85 F1 | 	sub	fp, #12
114d8     00 04 00 FF 
114dc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
114e0     1C 00 90 3D |  if_ae	jmp	#LR__1440
114e4     0C 4E 05 F1 | 	add	fp, #12
114e8     A7 12 02 FB | 	rdlong	arg01, fp
114ec     09 FB E1 FA | 	rdword	result1, arg01
114f0     04 4E 05 F1 | 	add	fp, #4
114f4     A7 FA 61 FC | 	wrlong	result1, fp
114f8     10 4E 85 F1 | 	sub	fp, #16
114fc     1C 00 90 FD | 	jmp	#LR__1441
11500                 | LR__1440
11500     0C 4E 05 F1 | 	add	fp, #12
11504     A7 12 02 FB | 	rdlong	arg01, fp
11508     0C 4E 85 F1 | 	sub	fp, #12
1150c     88 F3 B0 FD | 	call	#_psdpeek
11510     10 4E 05 F1 | 	add	fp, #16
11514     A7 FA 61 FC | 	wrlong	result1, fp
11518     10 4E 85 F1 | 	sub	fp, #16
1151c                 | LR__1441
1151c     08 4E 05 F1 | 	add	fp, #8
11520     A7 3A 68 FC | 	wrlong	#29, fp
11524     08 4E 05 F1 | 	add	fp, #8
11528     A7 12 02 FB | 	rdlong	arg01, fp
1152c     10 4E 85 F1 | 	sub	fp, #16
11530     A7 12 62 FC | 	wrlong	arg01, fp
11534     A7 12 02 F6 | 	mov	arg01, fp
11538     E8 B6 BF FD | 	call	#_push
1153c     A7 F0 03 F6 | 	mov	ptra, fp
11540     B2 00 A0 FD | 	call	#popregs_
11544                 | _do_dpeek_ret
11544     2D 00 64 FD | 	ret
11548                 | 
11548                 | ' 
11548                 | ' '-------------------- dpoke
11548                 | ' 
11548                 | ' sub do_dpoke
11548                 | _do_dpoke
11548     01 4A 05 F6 | 	mov	COUNT_, #1
1154c     A8 00 A0 FD | 	call	#pushregs_
11550     20 F0 07 F1 | 	add	ptra, #32
11554     34 B6 BF FD | 	call	#_pop
11558     FD 14 02 F6 | 	mov	arg02, result1
1155c     FE 12 02 F6 | 	mov	arg01, result2
11560     FF 26 02 F6 | 	mov	local01, result3
11564     A7 14 62 FC | 	wrlong	arg02, fp
11568     04 4E 05 F1 | 	add	fp, #4
1156c     A7 12 62 FC | 	wrlong	arg01, fp
11570     04 4E 05 F1 | 	add	fp, #4
11574     A7 26 62 FC | 	wrlong	local01, fp
11578     08 4E 85 F1 | 	sub	fp, #8
1157c     0C B6 BF FD | 	call	#_pop
11580     FF 26 02 F6 | 	mov	local01, result3
11584     0C 4E 05 F1 | 	add	fp, #12
11588     A7 FA 61 FC | 	wrlong	result1, fp
1158c     04 4E 05 F1 | 	add	fp, #4
11590     A7 FC 61 FC | 	wrlong	result2, fp
11594     04 4E 05 F1 | 	add	fp, #4
11598     A7 26 62 FC | 	wrlong	local01, fp
1159c     08 4E 85 F1 | 	sub	fp, #8
115a0     A7 12 02 F6 | 	mov	arg01, fp
115a4     0C 4E 85 F1 | 	sub	fp, #12
115a8     C4 B7 BF FD | 	call	#_converttoint
115ac     18 4E 05 F1 | 	add	fp, #24
115b0     A7 FA 61 FC | 	wrlong	result1, fp
115b4     18 4E 85 F1 | 	sub	fp, #24
115b8     A7 12 02 F6 | 	mov	arg01, fp
115bc     B0 B7 BF FD | 	call	#_converttoint
115c0     1C 4E 05 F1 | 	add	fp, #28
115c4     A7 FA 61 FC | 	wrlong	result1, fp
115c8                 | ' 
115c8                 | ' t1=pop() 'value
115c8                 | ' t2=pop() 
115c8                 | ' a=converttoint(t2) : v=converttoint(t1)
115c8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
115c8     04 4E 85 F1 | 	sub	fp, #4
115cc     A7 26 02 FB | 	rdlong	local01, fp
115d0     18 4E 85 F1 | 	sub	fp, #24
115d4     00 04 00 FF 
115d8     00 26 16 F2 | 	cmp	local01, ##524288 wc
115dc     1C 00 90 3D |  if_ae	jmp	#LR__1450
115e0     18 4E 05 F1 | 	add	fp, #24
115e4     A7 12 02 FB | 	rdlong	arg01, fp
115e8     04 4E 05 F1 | 	add	fp, #4
115ec     A7 14 02 FB | 	rdlong	arg02, fp
115f0     1C 4E 85 F1 | 	sub	fp, #28
115f4     09 15 52 FC | 	wrword	arg02, arg01
115f8     18 00 90 FD | 	jmp	#LR__1451
115fc                 | LR__1450
115fc     18 4E 05 F1 | 	add	fp, #24
11600     A7 12 02 FB | 	rdlong	arg01, fp
11604     04 4E 05 F1 | 	add	fp, #4
11608     A7 14 02 FB | 	rdlong	arg02, fp
1160c     1C 4E 85 F1 | 	sub	fp, #28
11610     44 F1 B0 FD | 	call	#_psdpoke
11614                 | LR__1451
11614     A7 F0 03 F6 | 	mov	ptra, fp
11618     B2 00 A0 FD | 	call	#popregs_
1161c                 | _do_dpoke_ret
1161c     2D 00 64 FD | 	ret
11620                 | 
11620                 | ' '-------------------- draw
11620                 | ' 
11620                 | ' sub do_draw
11620                 | _do_draw
11620     00 4A 05 F6 | 	mov	COUNT_, #0
11624     A8 00 A0 FD | 	call	#pushregs_
11628     20 F0 07 F1 | 	add	ptra, #32
1162c     5C B5 BF FD | 	call	#_pop
11630     FD 1A 02 F6 | 	mov	arg05, result1
11634     FE 18 02 F6 | 	mov	arg04, result2
11638     FF 16 02 F6 | 	mov	arg03, result3
1163c     0C 4E 05 F1 | 	add	fp, #12
11640     A7 1A 62 FC | 	wrlong	arg05, fp
11644     04 4E 05 F1 | 	add	fp, #4
11648     A7 18 62 FC | 	wrlong	arg04, fp
1164c     04 4E 05 F1 | 	add	fp, #4
11650     A7 16 62 FC | 	wrlong	arg03, fp
11654     14 4E 85 F1 | 	sub	fp, #20
11658     30 B5 BF FD | 	call	#_pop
1165c     FF 1A 02 F6 | 	mov	arg05, result3
11660     A7 FA 61 FC | 	wrlong	result1, fp
11664     04 4E 05 F1 | 	add	fp, #4
11668     A7 FC 61 FC | 	wrlong	result2, fp
1166c     04 4E 05 F1 | 	add	fp, #4
11670     A7 1A 62 FC | 	wrlong	arg05, fp
11674     08 4E 85 F1 | 	sub	fp, #8
11678     A7 12 02 F6 | 	mov	arg01, fp
1167c     F0 B6 BF FD | 	call	#_converttoint
11680     18 4E 05 F1 | 	add	fp, #24
11684     A7 FA 61 FC | 	wrlong	result1, fp
11688     0C 4E 85 F1 | 	sub	fp, #12
1168c     A7 12 02 F6 | 	mov	arg01, fp
11690     0C 4E 85 F1 | 	sub	fp, #12
11694     D8 B6 BF FD | 	call	#_converttoint
11698     1C 4E 05 F1 | 	add	fp, #28
1169c     A7 FA 61 FC | 	wrlong	result1, fp
116a0     37 00 00 FF 
116a4     2C E4 05 F1 | 	add	objptr, ##28204
116a8     F2 12 02 FB | 	rdlong	arg01, objptr
116ac     04 E4 05 F1 | 	add	objptr, #4
116b0     F2 14 02 FB | 	rdlong	arg02, objptr
116b4     04 4E 85 F1 | 	sub	fp, #4
116b8     A7 16 02 FB | 	rdlong	arg03, fp
116bc     FD 18 02 F6 | 	mov	arg04, result1
116c0     18 4E 85 F1 | 	sub	fp, #24
116c4     08 E4 85 F1 | 	sub	objptr, #8
116c8     F2 1A 02 FB | 	rdlong	arg05, objptr
116cc     37 00 00 FF 
116d0     28 E4 85 F1 | 	sub	objptr, ##28200
116d4     DC 01 B1 FD | 	call	#_hg010b_spin2_draw
116d8     18 4E 05 F1 | 	add	fp, #24
116dc     A7 1A 02 FB | 	rdlong	arg05, fp
116e0     37 00 00 FF 
116e4     2C E4 05 F1 | 	add	objptr, ##28204
116e8     F2 1A 62 FC | 	wrlong	arg05, objptr
116ec     04 4E 05 F1 | 	add	fp, #4
116f0     A7 1A 02 FB | 	rdlong	arg05, fp
116f4     1C 4E 85 F1 | 	sub	fp, #28
116f8     04 E4 05 F1 | 	add	objptr, #4
116fc     F2 1A 62 FC | 	wrlong	arg05, objptr
11700     37 00 00 FF 
11704     30 E4 85 F1 | 	sub	objptr, ##28208
11708     A7 F0 03 F6 | 	mov	ptra, fp
1170c     B2 00 A0 FD | 	call	#popregs_
11710                 | _do_draw_ret
11710     2D 00 64 FD | 	ret
11714                 | 
11714                 | ' 
11714                 | ' '-------------------- else
11714                 | ' 
11714                 | ' sub do_else
11714                 | _do_else
11714     4A 00 00 FF 
11718     7C E4 05 F1 | 	add	objptr, ##38012
1171c     F2 00 02 FB | 	rdlong	_var01, objptr
11720     01 00 86 F1 | 	sub	_var01, #1
11724     04 E4 05 F1 | 	add	objptr, #4
11728     F2 00 62 FC | 	wrlong	_var01, objptr
1172c     4A 00 00 FF 
11730     80 E4 85 F1 | 	sub	objptr, ##38016
11734                 | _do_else_ret
11734     2D 00 64 FD | 	ret
11738                 | 
11738                 | ' 
11738                 | ' '-------------------- end
11738                 | ' 
11738                 | ' sub do_end
11738                 | _do_end
11738     4A 00 00 FF 
1173c     7C E4 05 F1 | 	add	objptr, ##38012
11740     F2 00 02 FB | 	rdlong	_var01, objptr
11744     01 00 86 F1 | 	sub	_var01, #1
11748     04 E4 05 F1 | 	add	objptr, #4
1174c     F2 00 62 FC | 	wrlong	_var01, objptr
11750     06 00 00 FF 
11754     38 E4 05 F1 | 	add	objptr, ##3128
11758     FF FF BF FF 
1175c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11760     50 00 00 FF 
11764     B8 E4 85 F1 | 	sub	objptr, ##41144
11768                 | _do_end_ret
11768     2D 00 64 FD | 	ret
1176c                 | 
1176c                 | ' 
1176c                 | ' '-------------------- enter
1176c                 | ' 
1176c                 | ' sub do_enter
1176c                 | _do_enter
1176c     02 00 00 FF 
11770     D2 12 06 F6 | 	mov	arg01, ##1234
11774     A0 2E B0 FD | 	call	#_do_load
11778                 | _do_enter_ret
11778     2D 00 64 FD | 	ret
1177c                 | 
1177c                 | ' 
1177c                 | ' '------------------- error processing
1177c                 | ' 
1177c                 | ' sub do_error
1177c                 | _do_error
1177c     01 4A 05 F6 | 	mov	COUNT_, #1
11780     A8 00 A0 FD | 	call	#pushregs_
11784     4A 00 00 FF 
11788     80 E4 05 F1 | 	add	objptr, ##38016
1178c     F2 18 02 FB | 	rdlong	arg04, objptr
11790     0C 17 02 F6 | 	mov	arg03, arg04
11794     01 16 66 F0 | 	shl	arg03, #1
11798     0C 17 02 F1 | 	add	arg03, arg04
1179c     02 16 66 F0 | 	shl	arg03, #2
117a0     03 00 00 FF 
117a4     04 E4 85 F1 | 	sub	objptr, ##1540
117a8     F2 16 02 F1 | 	add	arg03, objptr
117ac     0B 27 02 FB | 	rdlong	local01, arg03
117b0                 | ' r=compiledline(lineptr_e).result.uresult
117b0                 | ' print "Error ";r;": ";errors$(r)
117b0     00 12 06 F6 | 	mov	arg01, #0
117b4     47 00 00 FF 
117b8     7C E4 85 F1 | 	sub	objptr, ##36476
117bc     7C 84 B1 FD | 	call	#__system___getiolock_0579
117c0     FD 12 02 F6 | 	mov	arg01, result1
117c4     4C 27 B1 FD | 	call	#__system___lockmem
117c8     A1 01 00 FF 
117cc     3C 15 06 F6 | 	mov	arg02, ##@LR__5742
117d0     00 12 06 F6 | 	mov	arg01, #0
117d4     00 16 06 F6 | 	mov	arg03, #0
117d8     2C 34 B1 FD | 	call	#__system___basic_print_string
117dc     00 12 06 F6 | 	mov	arg01, #0
117e0     13 15 02 F6 | 	mov	arg02, local01
117e4     00 16 06 F6 | 	mov	arg03, #0
117e8     0A 18 06 F6 | 	mov	arg04, #10
117ec     9C 34 B1 FD | 	call	#__system___basic_print_unsigned
117f0     A1 01 00 FF 
117f4     43 15 06 F6 | 	mov	arg02, ##@LR__5743
117f8     00 12 06 F6 | 	mov	arg01, #0
117fc     00 16 06 F6 | 	mov	arg03, #0
11800     04 34 B1 FD | 	call	#__system___basic_print_string
11804     02 26 66 F0 | 	shl	local01, #2
11808     45 00 00 FF 
1180c     7C E4 05 F1 | 	add	objptr, ##35452
11810     F2 26 02 F1 | 	add	local01, objptr
11814     13 15 02 FB | 	rdlong	arg02, local01
11818     00 12 06 F6 | 	mov	arg01, #0
1181c     00 16 06 F6 | 	mov	arg03, #0
11820     45 00 00 FF 
11824     7C E4 85 F1 | 	sub	objptr, ##35452
11828     DC 33 B1 FD | 	call	#__system___basic_print_string
1182c     00 12 06 F6 | 	mov	arg01, #0
11830     0A 14 06 F6 | 	mov	arg02, #10
11834     00 16 06 F6 | 	mov	arg03, #0
11838     74 33 B1 FD | 	call	#__system___basic_print_char
1183c     00 12 06 F6 | 	mov	arg01, #0
11840     F8 83 B1 FD | 	call	#__system___getiolock_0579
11844     FD 00 68 FC | 	wrlong	#0, result1
11848     A7 F0 03 F6 | 	mov	ptra, fp
1184c     B2 00 A0 FD | 	call	#popregs_
11850                 | _do_error_ret
11850     2D 00 64 FD | 	ret
11854                 | 
11854                 | ' 
11854                 | ' '-------------------- fcircle
11854                 | ' 
11854                 | ' sub do_fcircle
11854                 | _do_fcircle
11854     02 4A 05 F6 | 	mov	COUNT_, #2
11858     A8 00 A0 FD | 	call	#pushregs_
1185c     24 F0 07 F1 | 	add	ptra, #36
11860     28 B3 BF FD | 	call	#_pop
11864     FD 14 02 F6 | 	mov	arg02, result1
11868     FE 18 02 F6 | 	mov	arg04, result2
1186c     FF 16 02 F6 | 	mov	arg03, result3
11870     18 4E 05 F1 | 	add	fp, #24
11874     A7 14 62 FC | 	wrlong	arg02, fp
11878     04 4E 05 F1 | 	add	fp, #4
1187c     A7 18 62 FC | 	wrlong	arg04, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 16 62 FC | 	wrlong	arg03, fp
11888     20 4E 85 F1 | 	sub	fp, #32
1188c     FC B2 BF FD | 	call	#_pop
11890     FD 14 02 F6 | 	mov	arg02, result1
11894     FE 18 02 F6 | 	mov	arg04, result2
11898     FF 16 02 F6 | 	mov	arg03, result3
1189c     0C 4E 05 F1 | 	add	fp, #12
118a0     A7 14 62 FC | 	wrlong	arg02, fp
118a4     04 4E 05 F1 | 	add	fp, #4
118a8     A7 18 62 FC | 	wrlong	arg04, fp
118ac     04 4E 05 F1 | 	add	fp, #4
118b0     A7 16 62 FC | 	wrlong	arg03, fp
118b4     14 4E 85 F1 | 	sub	fp, #20
118b8     D0 B2 BF FD | 	call	#_pop
118bc     FF 14 02 F6 | 	mov	arg02, result3
118c0     A7 FA 61 FC | 	wrlong	result1, fp
118c4     04 4E 05 F1 | 	add	fp, #4
118c8     A7 FC 61 FC | 	wrlong	result2, fp
118cc     04 4E 05 F1 | 	add	fp, #4
118d0     A7 14 62 FC | 	wrlong	arg02, fp
118d4     08 4E 85 F1 | 	sub	fp, #8
118d8     A7 12 02 F6 | 	mov	arg01, fp
118dc     90 B4 BF FD | 	call	#_converttoint
118e0     FD 26 02 F6 | 	mov	local01, result1
118e4     0C 4E 05 F1 | 	add	fp, #12
118e8     A7 12 02 F6 | 	mov	arg01, fp
118ec     0C 4E 85 F1 | 	sub	fp, #12
118f0     7C B4 BF FD | 	call	#_converttoint
118f4     FD 28 02 F6 | 	mov	local02, result1
118f8     18 4E 05 F1 | 	add	fp, #24
118fc     A7 12 02 F6 | 	mov	arg01, fp
11900     18 4E 85 F1 | 	sub	fp, #24
11904     68 B4 BF FD | 	call	#_converttoint
11908     FD 16 02 F6 | 	mov	arg03, result1
1190c     37 00 00 FF 
11910     28 E4 05 F1 | 	add	objptr, ##28200
11914     F2 18 02 FB | 	rdlong	arg04, objptr
11918     37 00 00 FF 
1191c     28 E4 85 F1 | 	sub	objptr, ##28200
11920     13 13 02 F6 | 	mov	arg01, local01
11924     14 15 02 F6 | 	mov	arg02, local02
11928     0C 04 B1 FD | 	call	#_hg010b_spin2_fcircle
1192c     A7 F0 03 F6 | 	mov	ptra, fp
11930     B2 00 A0 FD | 	call	#popregs_
11934                 | _do_fcircle_ret
11934     2D 00 64 FD | 	ret
11938                 | 
11938                 | ' 
11938                 | ' '-------------------- fill
11938                 | ' 
11938                 | ' sub do_fill
11938                 | _do_fill
11938     03 4A 05 F6 | 	mov	COUNT_, #3
1193c     A8 00 A0 FD | 	call	#pushregs_
11940     30 F0 07 F1 | 	add	ptra, #48
11944     44 B2 BF FD | 	call	#_pop
11948     FD 16 02 F6 | 	mov	arg03, result1
1194c     FE 14 02 F6 | 	mov	arg02, result2
11950     FF 18 02 F6 | 	mov	arg04, result3
11954     24 4E 05 F1 | 	add	fp, #36
11958     A7 16 62 FC | 	wrlong	arg03, fp
1195c     04 4E 05 F1 | 	add	fp, #4
11960     A7 14 62 FC | 	wrlong	arg02, fp
11964     04 4E 05 F1 | 	add	fp, #4
11968     A7 18 62 FC | 	wrlong	arg04, fp
1196c     2C 4E 85 F1 | 	sub	fp, #44
11970     18 B2 BF FD | 	call	#_pop
11974     FD 16 02 F6 | 	mov	arg03, result1
11978     FE 14 02 F6 | 	mov	arg02, result2
1197c     FF 18 02 F6 | 	mov	arg04, result3
11980     18 4E 05 F1 | 	add	fp, #24
11984     A7 16 62 FC | 	wrlong	arg03, fp
11988     04 4E 05 F1 | 	add	fp, #4
1198c     A7 14 62 FC | 	wrlong	arg02, fp
11990     04 4E 05 F1 | 	add	fp, #4
11994     A7 18 62 FC | 	wrlong	arg04, fp
11998     20 4E 85 F1 | 	sub	fp, #32
1199c     EC B1 BF FD | 	call	#_pop
119a0     FD 16 02 F6 | 	mov	arg03, result1
119a4     FE 14 02 F6 | 	mov	arg02, result2
119a8     FF 18 02 F6 | 	mov	arg04, result3
119ac     0C 4E 05 F1 | 	add	fp, #12
119b0     A7 16 62 FC | 	wrlong	arg03, fp
119b4     04 4E 05 F1 | 	add	fp, #4
119b8     A7 14 62 FC | 	wrlong	arg02, fp
119bc     04 4E 05 F1 | 	add	fp, #4
119c0     A7 18 62 FC | 	wrlong	arg04, fp
119c4     14 4E 85 F1 | 	sub	fp, #20
119c8     C0 B1 BF FD | 	call	#_pop
119cc     FF 16 02 F6 | 	mov	arg03, result3
119d0     A7 FA 61 FC | 	wrlong	result1, fp
119d4     04 4E 05 F1 | 	add	fp, #4
119d8     A7 FC 61 FC | 	wrlong	result2, fp
119dc     04 4E 05 F1 | 	add	fp, #4
119e0     A7 16 62 FC | 	wrlong	arg03, fp
119e4     08 4E 85 F1 | 	sub	fp, #8
119e8     A7 12 02 F6 | 	mov	arg01, fp
119ec     80 B3 BF FD | 	call	#_converttoint
119f0     FD 26 02 F6 | 	mov	local01, result1
119f4     0C 4E 05 F1 | 	add	fp, #12
119f8     A7 12 02 F6 | 	mov	arg01, fp
119fc     0C 4E 85 F1 | 	sub	fp, #12
11a00     6C B3 BF FD | 	call	#_converttoint
11a04     FD 28 02 F6 | 	mov	local02, result1
11a08     18 4E 05 F1 | 	add	fp, #24
11a0c     A7 12 02 F6 | 	mov	arg01, fp
11a10     18 4E 85 F1 | 	sub	fp, #24
11a14     58 B3 BF FD | 	call	#_converttoint
11a18     FD 2A 02 F6 | 	mov	local03, result1
11a1c     24 4E 05 F1 | 	add	fp, #36
11a20     A7 12 02 F6 | 	mov	arg01, fp
11a24     24 4E 85 F1 | 	sub	fp, #36
11a28     44 B3 BF FD | 	call	#_converttoint
11a2c     FD 18 02 F6 | 	mov	arg04, result1
11a30     13 13 02 F6 | 	mov	arg01, local01
11a34     14 15 02 F6 | 	mov	arg02, local02
11a38     15 17 02 F6 | 	mov	arg03, local03
11a3c     64 00 B1 FD | 	call	#_hg010b_spin2_fill
11a40     A7 F0 03 F6 | 	mov	ptra, fp
11a44     B2 00 A0 FD | 	call	#popregs_
11a48                 | _do_fill_ret
11a48     2D 00 64 FD | 	ret
11a4c                 | 
11a4c                 | ' 
11a4c                 | ' '-------------------- font
11a4c                 | ' 
11a4c                 | ' sub do_font
11a4c                 | _do_font
11a4c     03 4A 05 F6 | 	mov	COUNT_, #3
11a50     A8 00 A0 FD | 	call	#pushregs_
11a54     34 B1 BF FD | 	call	#_pop
11a58     FD 26 02 F6 | 	mov	local01, result1
11a5c     FE 28 02 F6 | 	mov	local02, result2
11a60     FF 2A 02 F6 | 	mov	local03, result3
11a64                 | ' 
11a64                 | ' t1=pop() 
11a64                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11a64     1E 2A 0E F2 | 	cmp	local03, #30 wz
11a68     10 00 90 5D |  if_ne	jmp	#LR__1460
11a6c     13 13 02 F6 | 	mov	arg01, local01
11a70     00 14 06 F6 | 	mov	arg02, #0
11a74     DC 57 B1 FD | 	call	#__system___float_tointeger
11a78     FD 26 02 F6 | 	mov	local01, result1
11a7c                 | LR__1460
11a7c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11a7c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11a80     18 00 90 5D |  if_ne	jmp	#LR__1461
11a84     13 13 02 F6 | 	mov	arg01, local01
11a88     0C 5B B1 FD | 	call	#__system____builtin_atof
11a8c     FD 12 02 F6 | 	mov	arg01, result1
11a90     00 14 06 F6 | 	mov	arg02, #0
11a94     BC 57 B1 FD | 	call	#__system___float_tointeger
11a98     FD 26 02 F6 | 	mov	local01, result1
11a9c                 | LR__1461
11a9c     37 00 00 FF 
11aa0     40 E4 05 F1 | 	add	objptr, ##28224
11aa4     F2 26 62 FC | 	wrlong	local01, objptr
11aa8     37 00 00 FF 
11aac     40 E4 85 F1 | 	sub	objptr, ##28224
11ab0     02 26 66 F0 | 	shl	local01, #2
11ab4     13 13 02 F6 | 	mov	arg01, local01
11ab8     CC 06 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11abc     A7 F0 03 F6 | 	mov	ptra, fp
11ac0     B2 00 A0 FD | 	call	#popregs_
11ac4                 | _do_font_ret
11ac4     2D 00 64 FD | 	ret
11ac8                 | 
11ac8                 | ' 
11ac8                 | ' '-------------------- for
11ac8                 | ' 
11ac8                 | ' sub do_for()
11ac8                 | _do_for
11ac8     01 4A 05 F6 | 	mov	COUNT_, #1
11acc     A8 00 A0 FD | 	call	#pushregs_
11ad0     10 F0 07 F1 | 	add	ptra, #16
11ad4     50 00 00 FF 
11ad8     08 E5 05 F1 | 	add	objptr, ##41224
11adc     F2 12 02 FB | 	rdlong	arg01, objptr
11ae0     01 12 06 F1 | 	add	arg01, #1
11ae4     F2 12 62 FC | 	wrlong	arg01, objptr
11ae8     50 00 00 FF 
11aec     08 E5 85 F1 | 	sub	objptr, ##41224
11af0     98 B0 BF FD | 	call	#_pop
11af4     A7 FA 61 FC | 	wrlong	result1, fp
11af8     04 4E 05 F1 | 	add	fp, #4
11afc     A7 FC 61 FC | 	wrlong	result2, fp
11b00     04 4E 05 F1 | 	add	fp, #4
11b04     A7 FE 61 FC | 	wrlong	result3, fp
11b08     08 4E 85 F1 | 	sub	fp, #8
11b0c     50 00 00 FF 
11b10     08 E5 05 F1 | 	add	objptr, ##41224
11b14     F2 12 02 FB | 	rdlong	arg01, objptr
11b18     09 27 02 F6 | 	mov	local01, arg01
11b1c     02 26 66 F0 | 	shl	local01, #2
11b20     09 27 02 F1 | 	add	local01, arg01
11b24     02 26 66 F0 | 	shl	local01, #2
11b28     06 00 00 FF 
11b2c     70 E4 85 F1 | 	sub	objptr, ##3184
11b30     F2 26 02 F1 | 	add	local01, objptr
11b34     A7 12 02 FB | 	rdlong	arg01, fp
11b38     08 26 06 F1 | 	add	local01, #8
11b3c     13 13 62 FC | 	wrlong	arg01, local01
11b40     4A 00 00 FF 
11b44     98 E4 85 F1 | 	sub	objptr, ##38040
11b48     40 B0 BF FD | 	call	#_pop
11b4c     A7 FA 61 FC | 	wrlong	result1, fp
11b50     04 4E 05 F1 | 	add	fp, #4
11b54     A7 FC 61 FC | 	wrlong	result2, fp
11b58     04 4E 05 F1 | 	add	fp, #4
11b5c     A7 FE 61 FC | 	wrlong	result3, fp
11b60     08 4E 85 F1 | 	sub	fp, #8
11b64     50 00 00 FF 
11b68     08 E5 05 F1 | 	add	objptr, ##41224
11b6c     F2 12 02 FB | 	rdlong	arg01, objptr
11b70     09 27 02 F6 | 	mov	local01, arg01
11b74     02 26 66 F0 | 	shl	local01, #2
11b78     09 27 02 F1 | 	add	local01, arg01
11b7c     02 26 66 F0 | 	shl	local01, #2
11b80     06 00 00 FF 
11b84     70 E4 85 F1 | 	sub	objptr, ##3184
11b88     F2 26 02 F1 | 	add	local01, objptr
11b8c     A7 12 02 F6 | 	mov	arg01, fp
11b90     4A 00 00 FF 
11b94     98 E4 85 F1 | 	sub	objptr, ##38040
11b98     D4 B1 BF FD | 	call	#_converttoint
11b9c     FD 12 02 F6 | 	mov	arg01, result1
11ba0     0C 26 06 F1 | 	add	local01, #12
11ba4     13 13 62 FC | 	wrlong	arg01, local01
11ba8     E0 AF BF FD | 	call	#_pop
11bac     A7 FA 61 FC | 	wrlong	result1, fp
11bb0     04 4E 05 F1 | 	add	fp, #4
11bb4     A7 FC 61 FC | 	wrlong	result2, fp
11bb8     04 4E 05 F1 | 	add	fp, #4
11bbc     A7 FE 61 FC | 	wrlong	result3, fp
11bc0     08 4E 85 F1 | 	sub	fp, #8
11bc4     50 00 00 FF 
11bc8     08 E5 05 F1 | 	add	objptr, ##41224
11bcc     F2 12 02 FB | 	rdlong	arg01, objptr
11bd0     09 27 02 F6 | 	mov	local01, arg01
11bd4     02 26 66 F0 | 	shl	local01, #2
11bd8     09 27 02 F1 | 	add	local01, arg01
11bdc     02 26 66 F0 | 	shl	local01, #2
11be0     06 00 00 FF 
11be4     70 E4 85 F1 | 	sub	objptr, ##3184
11be8     F2 26 02 F1 | 	add	local01, objptr
11bec     A7 12 02 F6 | 	mov	arg01, fp
11bf0     4A 00 00 FF 
11bf4     98 E4 85 F1 | 	sub	objptr, ##38040
11bf8     74 B1 BF FD | 	call	#_converttoint
11bfc     10 26 06 F1 | 	add	local01, #16
11c00     13 FB 61 FC | 	wrlong	result1, local01
11c04                 | ' fortop+=1
11c04                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11c04                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11c04                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11c04                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11c04     4A 00 00 FF 
11c08     80 E4 05 F1 | 	add	objptr, ##38016
11c0c     F2 12 02 FB | 	rdlong	arg01, objptr
11c10     09 27 02 F6 | 	mov	local01, arg01
11c14     01 26 66 F0 | 	shl	local01, #1
11c18     09 27 02 F1 | 	add	local01, arg01
11c1c     02 26 66 F0 | 	shl	local01, #2
11c20     03 00 00 FF 
11c24     04 E4 85 F1 | 	sub	objptr, ##1540
11c28     F2 26 02 F1 | 	add	local01, objptr
11c2c     08 26 06 F1 | 	add	local01, #8
11c30     13 27 02 FB | 	rdlong	local01, local01
11c34     FE 27 0E F2 | 	cmp	local01, #510 wz
11c38     47 00 00 FF 
11c3c     7C E4 85 F1 | 	sub	objptr, ##36476
11c40     70 00 90 5D |  if_ne	jmp	#LR__1470
11c44     50 00 00 FF 
11c48     08 E5 05 F1 | 	add	objptr, ##41224
11c4c     F2 12 02 FB | 	rdlong	arg01, objptr
11c50     09 27 02 F6 | 	mov	local01, arg01
11c54     02 26 66 F0 | 	shl	local01, #2
11c58     09 27 02 F1 | 	add	local01, arg01
11c5c     02 26 66 F0 | 	shl	local01, #2
11c60     06 00 00 FF 
11c64     70 E4 85 F1 | 	sub	objptr, ##3184
11c68     F2 26 02 F1 | 	add	local01, objptr
11c6c     06 00 00 FF 
11c70     20 E4 05 F1 | 	add	objptr, ##3104
11c74     F2 12 02 FB | 	rdlong	arg01, objptr
11c78     13 13 62 FC | 	wrlong	arg01, local01
11c7c     50 E4 05 F1 | 	add	objptr, #80
11c80     F2 12 02 FB | 	rdlong	arg01, objptr
11c84     09 27 02 F6 | 	mov	local01, arg01
11c88     02 26 66 F0 | 	shl	local01, #2
11c8c     09 27 02 F1 | 	add	local01, arg01
11c90     02 26 66 F0 | 	shl	local01, #2
11c94     06 00 00 FF 
11c98     70 E4 85 F1 | 	sub	objptr, ##3184
11c9c     F2 26 02 F1 | 	add	local01, objptr
11ca0     04 26 06 F1 | 	add	local01, #4
11ca4     13 01 68 FC | 	wrlong	#0, local01
11ca8     4A 00 00 FF 
11cac     98 E4 85 F1 | 	sub	objptr, ##38040
11cb0     78 00 90 FD | 	jmp	#LR__1471
11cb4                 | LR__1470
11cb4     50 00 00 FF 
11cb8     08 E5 05 F1 | 	add	objptr, ##41224
11cbc     F2 12 02 FB | 	rdlong	arg01, objptr
11cc0     09 27 02 F6 | 	mov	local01, arg01
11cc4     02 26 66 F0 | 	shl	local01, #2
11cc8     09 27 02 F1 | 	add	local01, arg01
11ccc     02 26 66 F0 | 	shl	local01, #2
11cd0     06 00 00 FF 
11cd4     70 E4 85 F1 | 	sub	objptr, ##3184
11cd8     F2 26 02 F1 | 	add	local01, objptr
11cdc     06 00 00 FF 
11ce0     28 E4 05 F1 | 	add	objptr, ##3112
11ce4     F2 12 02 FB | 	rdlong	arg01, objptr
11ce8     13 13 62 FC | 	wrlong	arg01, local01
11cec     48 E4 05 F1 | 	add	objptr, #72
11cf0     F2 12 02 FB | 	rdlong	arg01, objptr
11cf4     09 27 02 F6 | 	mov	local01, arg01
11cf8     02 26 66 F0 | 	shl	local01, #2
11cfc     09 27 02 F1 | 	add	local01, arg01
11d00     02 26 66 F0 | 	shl	local01, #2
11d04     06 00 00 FF 
11d08     70 E4 85 F1 | 	sub	objptr, ##3184
11d0c     F2 26 02 F1 | 	add	local01, objptr
11d10     18 E4 85 F1 | 	sub	objptr, #24
11d14     F2 12 02 FB | 	rdlong	arg01, objptr
11d18     4A 00 00 FF 
11d1c     80 E4 85 F1 | 	sub	objptr, ##38016
11d20     01 12 06 F1 | 	add	arg01, #1
11d24     04 26 06 F1 | 	add	local01, #4
11d28     13 13 62 FC | 	wrlong	arg01, local01
11d2c                 | LR__1471
11d2c     A7 F0 03 F6 | 	mov	ptra, fp
11d30     B2 00 A0 FD | 	call	#popregs_
11d34                 | _do_for_ret
11d34     2D 00 64 FD | 	ret
11d38                 | 
11d38                 | ' 
11d38                 | ' '-------------------- frame
11d38                 | ' 
11d38                 | ' sub do_frame
11d38                 | _do_frame
11d38     03 4A 05 F6 | 	mov	COUNT_, #3
11d3c     A8 00 A0 FD | 	call	#pushregs_
11d40     30 F0 07 F1 | 	add	ptra, #48
11d44     44 AE BF FD | 	call	#_pop
11d48     FD 16 02 F6 | 	mov	arg03, result1
11d4c     FE 14 02 F6 | 	mov	arg02, result2
11d50     FF 1A 02 F6 | 	mov	arg05, result3
11d54     24 4E 05 F1 | 	add	fp, #36
11d58     A7 16 62 FC | 	wrlong	arg03, fp
11d5c     04 4E 05 F1 | 	add	fp, #4
11d60     A7 14 62 FC | 	wrlong	arg02, fp
11d64     04 4E 05 F1 | 	add	fp, #4
11d68     A7 1A 62 FC | 	wrlong	arg05, fp
11d6c     2C 4E 85 F1 | 	sub	fp, #44
11d70     18 AE BF FD | 	call	#_pop
11d74     FD 16 02 F6 | 	mov	arg03, result1
11d78     FE 14 02 F6 | 	mov	arg02, result2
11d7c     FF 1A 02 F6 | 	mov	arg05, result3
11d80     18 4E 05 F1 | 	add	fp, #24
11d84     A7 16 62 FC | 	wrlong	arg03, fp
11d88     04 4E 05 F1 | 	add	fp, #4
11d8c     A7 14 62 FC | 	wrlong	arg02, fp
11d90     04 4E 05 F1 | 	add	fp, #4
11d94     A7 1A 62 FC | 	wrlong	arg05, fp
11d98     20 4E 85 F1 | 	sub	fp, #32
11d9c     EC AD BF FD | 	call	#_pop
11da0     FD 16 02 F6 | 	mov	arg03, result1
11da4     FE 14 02 F6 | 	mov	arg02, result2
11da8     FF 1A 02 F6 | 	mov	arg05, result3
11dac     0C 4E 05 F1 | 	add	fp, #12
11db0     A7 16 62 FC | 	wrlong	arg03, fp
11db4     04 4E 05 F1 | 	add	fp, #4
11db8     A7 14 62 FC | 	wrlong	arg02, fp
11dbc     04 4E 05 F1 | 	add	fp, #4
11dc0     A7 1A 62 FC | 	wrlong	arg05, fp
11dc4     14 4E 85 F1 | 	sub	fp, #20
11dc8     C0 AD BF FD | 	call	#_pop
11dcc     FF 16 02 F6 | 	mov	arg03, result3
11dd0     A7 FA 61 FC | 	wrlong	result1, fp
11dd4     04 4E 05 F1 | 	add	fp, #4
11dd8     A7 FC 61 FC | 	wrlong	result2, fp
11ddc     04 4E 05 F1 | 	add	fp, #4
11de0     A7 16 62 FC | 	wrlong	arg03, fp
11de4     08 4E 85 F1 | 	sub	fp, #8
11de8     A7 12 02 F6 | 	mov	arg01, fp
11dec     80 AF BF FD | 	call	#_converttoint
11df0     FD 26 02 F6 | 	mov	local01, result1
11df4     0C 4E 05 F1 | 	add	fp, #12
11df8     A7 12 02 F6 | 	mov	arg01, fp
11dfc     0C 4E 85 F1 | 	sub	fp, #12
11e00     6C AF BF FD | 	call	#_converttoint
11e04     FD 28 02 F6 | 	mov	local02, result1
11e08     18 4E 05 F1 | 	add	fp, #24
11e0c     A7 12 02 F6 | 	mov	arg01, fp
11e10     18 4E 85 F1 | 	sub	fp, #24
11e14     58 AF BF FD | 	call	#_converttoint
11e18     FD 2A 02 F6 | 	mov	local03, result1
11e1c     24 4E 05 F1 | 	add	fp, #36
11e20     A7 12 02 F6 | 	mov	arg01, fp
11e24     24 4E 85 F1 | 	sub	fp, #36
11e28     44 AF BF FD | 	call	#_converttoint
11e2c     FD 18 02 F6 | 	mov	arg04, result1
11e30     37 00 00 FF 
11e34     28 E4 05 F1 | 	add	objptr, ##28200
11e38     F2 1A 02 FB | 	rdlong	arg05, objptr
11e3c     37 00 00 FF 
11e40     28 E4 85 F1 | 	sub	objptr, ##28200
11e44     13 13 02 F6 | 	mov	arg01, local01
11e48     14 15 02 F6 | 	mov	arg02, local02
11e4c     15 17 02 F6 | 	mov	arg03, local03
11e50     3C 01 B1 FD | 	call	#_hg010b_spin2_frame
11e54     A7 F0 03 F6 | 	mov	ptra, fp
11e58     B2 00 A0 FD | 	call	#popregs_
11e5c                 | _do_frame_ret
11e5c     2D 00 64 FD | 	ret
11e60                 | 
11e60                 | ' 
11e60                 | ' '-------------------- framebuf
11e60                 | ' 
11e60                 | ' sub do_framebuf
11e60                 | _do_framebuf
11e60     00 4A 05 F6 | 	mov	COUNT_, #0
11e64     A8 00 A0 FD | 	call	#pushregs_
11e68     0C F0 07 F1 | 	add	ptra, #12
11e6c     08 4E 05 F1 | 	add	fp, #8
11e70     A7 3A 68 FC | 	wrlong	#29, fp
11e74     F2 12 02 FB | 	rdlong	arg01, objptr
11e78     08 4E 85 F1 | 	sub	fp, #8
11e7c     A7 12 62 FC | 	wrlong	arg01, fp
11e80     A7 12 02 F6 | 	mov	arg01, fp
11e84     9C AD BF FD | 	call	#_push
11e88     A7 F0 03 F6 | 	mov	ptra, fp
11e8c     B2 00 A0 FD | 	call	#popregs_
11e90                 | _do_framebuf_ret
11e90     2D 00 64 FD | 	ret
11e94                 | 
11e94                 | ' '-------------------- fre
11e94                 | ' 
11e94                 | ' sub do_fre
11e94                 | _do_fre
11e94     01 4A 05 F6 | 	mov	COUNT_, #1
11e98     A8 00 A0 FD | 	call	#pushregs_
11e9c     0C F0 07 F1 | 	add	ptra, #12
11ea0     51 00 00 FF 
11ea4     AC E5 05 F1 | 	add	objptr, ##41900
11ea8     F2 12 02 FB | 	rdlong	arg01, objptr
11eac     0E 00 00 FF 
11eb0     50 E5 85 F1 | 	sub	objptr, ##7504
11eb4     F2 26 02 FB | 	rdlong	local01, objptr
11eb8     13 13 82 F1 | 	sub	arg01, local01
11ebc     0E 00 00 FF 
11ec0     C4 E5 05 F1 | 	add	objptr, ##7620
11ec4     F2 12 62 FC | 	wrlong	arg01, objptr
11ec8     08 4E 05 F1 | 	add	fp, #8
11ecc     A7 3A 68 FC | 	wrlong	#29, fp
11ed0     08 4E 85 F1 | 	sub	fp, #8
11ed4     F2 26 02 FB | 	rdlong	local01, objptr
11ed8     52 00 00 FF 
11edc     20 E4 85 F1 | 	sub	objptr, ##42016
11ee0     A7 26 62 FC | 	wrlong	local01, fp
11ee4     A7 12 02 F6 | 	mov	arg01, fp
11ee8     38 AD BF FD | 	call	#_push
11eec     A7 F0 03 F6 | 	mov	ptra, fp
11ef0     B2 00 A0 FD | 	call	#popregs_
11ef4                 | _do_fre_ret
11ef4     2D 00 64 FD | 	ret
11ef8                 | 
11ef8                 | ' 
11ef8                 | ' '-------------------- get
11ef8                 | ' 
11ef8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11ef8                 | _do_get
11ef8     09 4A 05 F6 | 	mov	COUNT_, #9
11efc     A8 00 A0 FD | 	call	#pushregs_
11f00     40 F0 07 F1 | 	add	ptra, #64
11f04     4A 00 00 FF 
11f08     80 E4 05 F1 | 	add	objptr, ##38016
11f0c     F2 1A 02 FB | 	rdlong	arg05, objptr
11f10     0D 19 02 F6 | 	mov	arg04, arg05
11f14     01 18 66 F0 | 	shl	arg04, #1
11f18     0D 19 02 F1 | 	add	arg04, arg05
11f1c     02 18 66 F0 | 	shl	arg04, #2
11f20     03 00 00 FF 
11f24     04 E4 85 F1 | 	sub	objptr, ##1540
11f28     F2 18 02 F1 | 	add	arg04, objptr
11f2c     0C 1B 02 FB | 	rdlong	arg05, arg04
11f30     A7 1A 62 FC | 	wrlong	arg05, fp
11f34                 | ' 
11f34                 | ' numpar=compiledline(lineptr_e).result.uresult
11f34                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11f34     04 1A 0E F2 | 	cmp	arg05, #4 wz
11f38     47 00 00 FF 
11f3c     7C E4 85 F1 | 	sub	objptr, ##36476
11f40     48 00 90 5D |  if_ne	jmp	#LR__1480
11f44     44 AC BF FD | 	call	#_pop
11f48     FF 1A 02 F6 | 	mov	arg05, result3
11f4c     1C 4E 05 F1 | 	add	fp, #28
11f50     A7 FA 61 FC | 	wrlong	result1, fp
11f54     04 4E 05 F1 | 	add	fp, #4
11f58     A7 FC 61 FC | 	wrlong	result2, fp
11f5c     04 4E 05 F1 | 	add	fp, #4
11f60     A7 1A 62 FC | 	wrlong	arg05, fp
11f64     08 4E 85 F1 | 	sub	fp, #8
11f68     A7 12 02 F6 | 	mov	arg01, fp
11f6c     1C 4E 85 F1 | 	sub	fp, #28
11f70     FC AD BF FD | 	call	#_converttoint
11f74     52 00 00 FF 
11f78     1C E4 05 F1 | 	add	objptr, ##42012
11f7c     F2 FA 61 FC | 	wrlong	result1, objptr
11f80     52 00 00 FF 
11f84     1C E4 85 F1 | 	sub	objptr, ##42012
11f88     18 00 90 FD | 	jmp	#LR__1481
11f8c                 | LR__1480
11f8c     52 00 00 FF 
11f90     1C E4 05 F1 | 	add	objptr, ##42012
11f94     FF FF FF FF 
11f98     F2 FE 6B FC | 	wrlong	##-1, objptr
11f9c     52 00 00 FF 
11fa0     1C E4 85 F1 | 	sub	objptr, ##42012
11fa4                 | LR__1481
11fa4                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11fa4     A7 16 02 FB | 	rdlong	arg03, fp
11fa8     03 16 56 F2 | 	cmps	arg03, #3 wc
11fac     40 00 90 CD |  if_b	jmp	#LR__1482
11fb0     D8 AB BF FD | 	call	#_pop
11fb4     FF 16 02 F6 | 	mov	arg03, result3
11fb8     1C 4E 05 F1 | 	add	fp, #28
11fbc     A7 FA 61 FC | 	wrlong	result1, fp
11fc0     04 4E 05 F1 | 	add	fp, #4
11fc4     A7 FC 61 FC | 	wrlong	result2, fp
11fc8     04 4E 05 F1 | 	add	fp, #4
11fcc     A7 16 62 FC | 	wrlong	arg03, fp
11fd0     08 4E 85 F1 | 	sub	fp, #8
11fd4     A7 12 02 F6 | 	mov	arg01, fp
11fd8     1C 4E 85 F1 | 	sub	fp, #28
11fdc     90 AD BF FD | 	call	#_converttoint
11fe0     08 4E 05 F1 | 	add	fp, #8
11fe4     A7 FA 61 FC | 	wrlong	result1, fp
11fe8     08 4E 85 F1 | 	sub	fp, #8
11fec     0C 00 90 FD | 	jmp	#LR__1483
11ff0                 | LR__1482
11ff0     08 4E 05 F1 | 	add	fp, #8
11ff4     A7 02 68 FC | 	wrlong	#1, fp
11ff8     08 4E 85 F1 | 	sub	fp, #8
11ffc                 | LR__1483
11ffc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
11ffc     A7 16 02 FB | 	rdlong	arg03, fp
12000     02 16 56 F2 | 	cmps	arg03, #2 wc
12004     3C 00 90 CD |  if_b	jmp	#LR__1484
12008     80 AB BF FD | 	call	#_pop
1200c     FF 16 02 F6 | 	mov	arg03, result3
12010     1C 4E 05 F1 | 	add	fp, #28
12014     A7 FA 61 FC | 	wrlong	result1, fp
12018     04 4E 05 F1 | 	add	fp, #4
1201c     A7 FC 61 FC | 	wrlong	result2, fp
12020     04 4E 05 F1 | 	add	fp, #4
12024     A7 16 62 FC | 	wrlong	arg03, fp
12028     08 4E 85 F1 | 	sub	fp, #8
1202c     A7 12 02 F6 | 	mov	arg01, fp
12030     1C 4E 85 F1 | 	sub	fp, #28
12034     38 AD BF FD | 	call	#_converttoint
12038     0C 4E 05 F1 | 	add	fp, #12
1203c     A7 FA 61 FC | 	wrlong	result1, fp
12040     0C 4E 85 F1 | 	sub	fp, #12
12044                 | LR__1484
12044     44 AB BF FD | 	call	#_pop
12048     FF 16 02 F6 | 	mov	arg03, result3
1204c     1C 4E 05 F1 | 	add	fp, #28
12050     A7 FA 61 FC | 	wrlong	result1, fp
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 FC 61 FC | 	wrlong	result2, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 16 62 FC | 	wrlong	arg03, fp
12064     08 4E 85 F1 | 	sub	fp, #8
12068     A7 12 02 F6 | 	mov	arg01, fp
1206c     1C 4E 85 F1 | 	sub	fp, #28
12070     FC AC BF FD | 	call	#_converttoint
12074     04 4E 05 F1 | 	add	fp, #4
12078     A7 FA 61 FC | 	wrlong	result1, fp
1207c     10 4E 05 F1 | 	add	fp, #16
12080     A7 16 02 FB | 	rdlong	arg03, fp
12084     14 4E 85 F1 | 	sub	fp, #20
12088     02 16 66 F0 | 	shl	arg03, #2
1208c     50 00 00 FF 
12090     C4 E4 05 F1 | 	add	objptr, ##41156
12094     F2 26 02 F6 | 	mov	local01, objptr
12098     F2 16 02 F1 | 	add	arg03, objptr
1209c     0B 01 68 FC | 	wrlong	#0, arg03
120a0                 | ' t1=pop() : channel=converttoint(t1)
120a0                 | ' getres(j)=0
120a0                 | ' if pos>=0 then
120a0     01 00 00 FF 
120a4     58 E5 05 F1 | 	add	objptr, ##856
120a8     F2 28 02 FB | 	rdlong	local02, objptr
120ac     52 00 00 FF 
120b0     1C E4 85 F1 | 	sub	objptr, ##42012
120b4     00 28 56 F2 | 	cmps	local02, #0 wc
120b8     F0 01 90 CD |  if_b	jmp	#LR__1491
120bc                 | '   for i=0 to  amount/1024
120bc     10 4E 05 F1 | 	add	fp, #16
120c0     A7 00 68 FC | 	wrlong	#0, fp
120c4     08 4E 85 F1 | 	sub	fp, #8
120c8     A7 2A 02 FB | 	rdlong	local03, fp
120cc     08 4E 85 F1 | 	sub	fp, #8
120d0     15 2D 52 F6 | 	abs	local04, local03 wc
120d4     0A 2C 46 F0 | 	shr	local04, #10
120d8     16 2D 82 F6 | 	negc	local04, local04
120dc     01 2C 06 F1 | 	add	local04, #1
120e0                 | LR__1485
120e0     10 4E 05 F1 | 	add	fp, #16
120e4     A7 2A 02 FB | 	rdlong	local03, fp
120e8     10 4E 85 F1 | 	sub	fp, #16
120ec     16 2B 52 F2 | 	cmps	local03, local04 wc
120f0     9C 03 90 3D |  if_ae	jmp	#LR__1499
120f4                 | '     get #channel,pos+1,block(0),amount,r
120f4     04 4E 05 F1 | 	add	fp, #4
120f8     A7 12 02 FB | 	rdlong	arg01, fp
120fc     52 00 00 FF 
12100     1C E4 05 F1 | 	add	objptr, ##42012
12104     F2 14 02 FB | 	rdlong	arg02, objptr
12108     01 14 06 F1 | 	add	arg02, #1
1210c     03 00 00 FF 
12110     68 E5 85 F1 | 	sub	objptr, ##1896
12114     F2 16 02 F6 | 	mov	arg03, objptr
12118     4E 00 00 FF 
1211c     B4 E4 85 F1 | 	sub	objptr, ##40116
12120     04 4E 05 F1 | 	add	fp, #4
12124     A7 18 02 FB | 	rdlong	arg04, fp
12128     08 4E 85 F1 | 	sub	fp, #8
1212c     01 1A 06 F6 | 	mov	arg05, #1
12130     50 2C B1 FD | 	call	#__system___basic_get
12134     18 4E 05 F1 | 	add	fp, #24
12138     A7 FA 61 FC | 	wrlong	result1, fp
1213c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     A7 28 02 FB | 	rdlong	local02, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     00 04 00 FF 
1214c     00 28 56 F2 | 	cmps	local02, ##524288 wc
12150     7C 00 90 3D |  if_ae	jmp	#LR__1487
12154     14 4E 05 F1 | 	add	fp, #20
12158     A7 00 68 FC | 	wrlong	#0, fp
1215c     04 4E 05 F1 | 	add	fp, #4
12160     A7 2E 02 FB | 	rdlong	local05, fp
12164     18 4E 85 F1 | 	sub	fp, #24
12168                 | LR__1486
12168     14 4E 05 F1 | 	add	fp, #20
1216c     A7 28 02 FB | 	rdlong	local02, fp
12170     14 4E 85 F1 | 	sub	fp, #20
12174     17 29 52 F2 | 	cmps	local02, local05 wc
12178     D8 00 90 3D |  if_ae	jmp	#LR__1490
1217c     0C 4E 05 F1 | 	add	fp, #12
12180     A7 12 02 FB | 	rdlong	arg01, fp
12184     04 4E 05 F1 | 	add	fp, #4
12188     A7 2A 02 FB | 	rdlong	local03, fp
1218c     0A 2A 66 F0 | 	shl	local03, #10
12190     15 13 02 F1 | 	add	arg01, local03
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 2A 02 FB | 	rdlong	local03, fp
1219c     15 13 02 F1 | 	add	arg01, local03
121a0     4E 00 00 FF 
121a4     B4 E4 05 F1 | 	add	objptr, ##40116
121a8     F2 2A 02 F1 | 	add	local03, objptr
121ac     15 15 C2 FA | 	rdbyte	arg02, local03
121b0     09 15 42 FC | 	wrbyte	arg02, arg01
121b4     4E 00 00 FF 
121b8     B4 E4 85 F1 | 	sub	objptr, ##40116
121bc     A7 2A 02 FB | 	rdlong	local03, fp
121c0     01 2A 06 F1 | 	add	local03, #1
121c4     A7 2A 62 FC | 	wrlong	local03, fp
121c8     14 4E 85 F1 | 	sub	fp, #20
121cc     98 FF 9F FD | 	jmp	#LR__1486
121d0                 | LR__1487
121d0     14 4E 05 F1 | 	add	fp, #20
121d4     A7 00 68 FC | 	wrlong	#0, fp
121d8     04 4E 05 F1 | 	add	fp, #4
121dc     A7 30 02 FB | 	rdlong	local06, fp
121e0     18 4E 85 F1 | 	sub	fp, #24
121e4                 | LR__1488
121e4     14 4E 05 F1 | 	add	fp, #20
121e8     A7 28 02 FB | 	rdlong	local02, fp
121ec     14 4E 85 F1 | 	sub	fp, #20
121f0     18 29 52 F2 | 	cmps	local02, local06 wc
121f4     5C 00 90 3D |  if_ae	jmp	#LR__1489
121f8     0C 4E 05 F1 | 	add	fp, #12
121fc     A7 12 02 FB | 	rdlong	arg01, fp
12200     04 4E 05 F1 | 	add	fp, #4
12204     A7 2E 02 FB | 	rdlong	local05, fp
12208     0A 2E 66 F0 | 	shl	local05, #10
1220c     17 13 02 F1 | 	add	arg01, local05
12210     04 4E 05 F1 | 	add	fp, #4
12214     A7 2E 02 FB | 	rdlong	local05, fp
12218     17 13 02 F1 | 	add	arg01, local05
1221c     14 4E 85 F1 | 	sub	fp, #20
12220     4E 00 00 FF 
12224     B4 E4 05 F1 | 	add	objptr, ##40116
12228     F2 2E 02 F1 | 	add	local05, objptr
1222c     17 15 C2 FA | 	rdbyte	arg02, local05
12230     4E 00 00 FF 
12234     B4 E4 85 F1 | 	sub	objptr, ##40116
12238     64 E5 B0 FD | 	call	#_pspoke
1223c     14 4E 05 F1 | 	add	fp, #20
12240     A7 2E 02 FB | 	rdlong	local05, fp
12244     01 2E 06 F1 | 	add	local05, #1
12248     A7 2E 62 FC | 	wrlong	local05, fp
1224c     14 4E 85 F1 | 	sub	fp, #20
12250     90 FF 9F FD | 	jmp	#LR__1488
12254                 | LR__1489
12254                 | LR__1490
12254     14 4E 05 F1 | 	add	fp, #20
12258     A7 30 02 FB | 	rdlong	local06, fp
1225c     18 2B 02 F6 | 	mov	local03, local06
12260     02 2A 66 F0 | 	shl	local03, #2
12264     50 00 00 FF 
12268     C4 E4 05 F1 | 	add	objptr, ##41156
1226c     F2 2A 02 F1 | 	add	local03, objptr
12270     02 30 66 F0 | 	shl	local06, #2
12274     F2 30 02 F1 | 	add	local06, objptr
12278     18 31 02 FB | 	rdlong	local06, local06
1227c     04 4E 05 F1 | 	add	fp, #4
12280     A7 2E 02 FB | 	rdlong	local05, fp
12284     17 31 02 F1 | 	add	local06, local05
12288     15 31 62 FC | 	wrlong	local06, local03
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     A7 30 02 FB | 	rdlong	local06, fp
12294     01 30 06 F1 | 	add	local06, #1
12298     A7 30 62 FC | 	wrlong	local06, fp
1229c     10 4E 85 F1 | 	sub	fp, #16
122a0     50 00 00 FF 
122a4     C4 E4 85 F1 | 	sub	objptr, ##41156
122a8     34 FE 9F FD | 	jmp	#LR__1485
122ac                 | LR__1491
122ac                 | '   for i=0 to  amount/1024
122ac     10 4E 05 F1 | 	add	fp, #16
122b0     A7 00 68 FC | 	wrlong	#0, fp
122b4     08 4E 85 F1 | 	sub	fp, #8
122b8     A7 2A 02 FB | 	rdlong	local03, fp
122bc     08 4E 85 F1 | 	sub	fp, #8
122c0     15 33 52 F6 | 	abs	local07, local03 wc
122c4     0A 32 46 F0 | 	shr	local07, #10
122c8     19 33 82 F6 | 	negc	local07, local07
122cc     01 32 06 F1 | 	add	local07, #1
122d0                 | LR__1492
122d0     10 4E 05 F1 | 	add	fp, #16
122d4     A7 2A 02 FB | 	rdlong	local03, fp
122d8     10 4E 85 F1 | 	sub	fp, #16
122dc     19 2B 52 F2 | 	cmps	local03, local07 wc
122e0     AC 01 90 3D |  if_ae	jmp	#LR__1498
122e4                 | '     get #channel,,block(0),amount,r
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 12 02 FB | 	rdlong	arg01, fp
122ec     4E 00 00 FF 
122f0     B4 E4 05 F1 | 	add	objptr, ##40116
122f4     F2 16 02 F6 | 	mov	arg03, objptr
122f8     4E 00 00 FF 
122fc     B4 E4 85 F1 | 	sub	objptr, ##40116
12300     04 4E 05 F1 | 	add	fp, #4
12304     A7 18 02 FB | 	rdlong	arg04, fp
12308     08 4E 85 F1 | 	sub	fp, #8
1230c     00 14 06 F6 | 	mov	arg02, #0
12310     01 1A 06 F6 | 	mov	arg05, #1
12314     6C 2A B1 FD | 	call	#__system___basic_get
12318     18 4E 05 F1 | 	add	fp, #24
1231c     A7 FA 61 FC | 	wrlong	result1, fp
12320                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12320     0C 4E 85 F1 | 	sub	fp, #12
12324     A7 28 02 FB | 	rdlong	local02, fp
12328     0C 4E 85 F1 | 	sub	fp, #12
1232c     00 04 00 FF 
12330     00 28 56 F2 | 	cmps	local02, ##524288 wc
12334     7C 00 90 3D |  if_ae	jmp	#LR__1494
12338     14 4E 05 F1 | 	add	fp, #20
1233c     A7 00 68 FC | 	wrlong	#0, fp
12340     04 4E 05 F1 | 	add	fp, #4
12344     A7 34 02 FB | 	rdlong	local08, fp
12348     18 4E 85 F1 | 	sub	fp, #24
1234c                 | LR__1493
1234c     14 4E 05 F1 | 	add	fp, #20
12350     A7 28 02 FB | 	rdlong	local02, fp
12354     14 4E 85 F1 | 	sub	fp, #20
12358     1A 29 52 F2 | 	cmps	local02, local08 wc
1235c     D8 00 90 3D |  if_ae	jmp	#LR__1497
12360     0C 4E 05 F1 | 	add	fp, #12
12364     A7 12 02 FB | 	rdlong	arg01, fp
12368     04 4E 05 F1 | 	add	fp, #4
1236c     A7 30 02 FB | 	rdlong	local06, fp
12370     0A 30 66 F0 | 	shl	local06, #10
12374     18 13 02 F1 | 	add	arg01, local06
12378     04 4E 05 F1 | 	add	fp, #4
1237c     A7 30 02 FB | 	rdlong	local06, fp
12380     18 13 02 F1 | 	add	arg01, local06
12384     4E 00 00 FF 
12388     B4 E4 05 F1 | 	add	objptr, ##40116
1238c     F2 30 02 F1 | 	add	local06, objptr
12390     18 15 C2 FA | 	rdbyte	arg02, local06
12394     09 15 42 FC | 	wrbyte	arg02, arg01
12398     4E 00 00 FF 
1239c     B4 E4 85 F1 | 	sub	objptr, ##40116
123a0     A7 30 02 FB | 	rdlong	local06, fp
123a4     01 30 06 F1 | 	add	local06, #1
123a8     A7 30 62 FC | 	wrlong	local06, fp
123ac     14 4E 85 F1 | 	sub	fp, #20
123b0     98 FF 9F FD | 	jmp	#LR__1493
123b4                 | LR__1494
123b4     14 4E 05 F1 | 	add	fp, #20
123b8     A7 00 68 FC | 	wrlong	#0, fp
123bc     04 4E 05 F1 | 	add	fp, #4
123c0     A7 36 02 FB | 	rdlong	local09, fp
123c4     18 4E 85 F1 | 	sub	fp, #24
123c8                 | LR__1495
123c8     14 4E 05 F1 | 	add	fp, #20
123cc     A7 28 02 FB | 	rdlong	local02, fp
123d0     14 4E 85 F1 | 	sub	fp, #20
123d4     1B 29 52 F2 | 	cmps	local02, local09 wc
123d8     5C 00 90 3D |  if_ae	jmp	#LR__1496
123dc     0C 4E 05 F1 | 	add	fp, #12
123e0     A7 12 02 FB | 	rdlong	arg01, fp
123e4     04 4E 05 F1 | 	add	fp, #4
123e8     A7 34 02 FB | 	rdlong	local08, fp
123ec     0A 34 66 F0 | 	shl	local08, #10
123f0     1A 13 02 F1 | 	add	arg01, local08
123f4     04 4E 05 F1 | 	add	fp, #4
123f8     A7 34 02 FB | 	rdlong	local08, fp
123fc     1A 13 02 F1 | 	add	arg01, local08
12400     14 4E 85 F1 | 	sub	fp, #20
12404     4E 00 00 FF 
12408     B4 E4 05 F1 | 	add	objptr, ##40116
1240c     F2 34 02 F1 | 	add	local08, objptr
12410     1A 15 C2 FA | 	rdbyte	arg02, local08
12414     4E 00 00 FF 
12418     B4 E4 85 F1 | 	sub	objptr, ##40116
1241c     80 E3 B0 FD | 	call	#_pspoke
12420     14 4E 05 F1 | 	add	fp, #20
12424     A7 34 02 FB | 	rdlong	local08, fp
12428     01 34 06 F1 | 	add	local08, #1
1242c     A7 34 62 FC | 	wrlong	local08, fp
12430     14 4E 85 F1 | 	sub	fp, #20
12434     90 FF 9F FD | 	jmp	#LR__1495
12438                 | LR__1496
12438                 | LR__1497
12438     14 4E 05 F1 | 	add	fp, #20
1243c     A7 36 02 FB | 	rdlong	local09, fp
12440     1B 31 02 F6 | 	mov	local06, local09
12444     02 30 66 F0 | 	shl	local06, #2
12448     50 00 00 FF 
1244c     C4 E4 05 F1 | 	add	objptr, ##41156
12450     F2 30 02 F1 | 	add	local06, objptr
12454     02 36 66 F0 | 	shl	local09, #2
12458     F2 36 02 F1 | 	add	local09, objptr
1245c     1B 37 02 FB | 	rdlong	local09, local09
12460     04 4E 05 F1 | 	add	fp, #4
12464     A7 34 02 FB | 	rdlong	local08, fp
12468     1A 37 02 F1 | 	add	local09, local08
1246c     18 37 62 FC | 	wrlong	local09, local06
12470     08 4E 85 F1 | 	sub	fp, #8
12474     A7 36 02 FB | 	rdlong	local09, fp
12478     01 36 06 F1 | 	add	local09, #1
1247c     A7 36 62 FC | 	wrlong	local09, fp
12480     10 4E 85 F1 | 	sub	fp, #16
12484     50 00 00 FF 
12488     C4 E4 85 F1 | 	sub	objptr, ##41156
1248c     40 FE 9F FD | 	jmp	#LR__1492
12490                 | LR__1498
12490                 | LR__1499
12490     A7 F0 03 F6 | 	mov	ptra, fp
12494     B2 00 A0 FD | 	call	#popregs_
12498                 | _do_get_ret
12498     2D 00 64 FD | 	ret
1249c                 | 
1249c                 | ' 
1249c                 | ' '-------------------- getenvsustain
1249c                 | ' 
1249c                 | ' sub do_getenvsustain
1249c                 | _do_getenvsustain
1249c     01 4A 05 F6 | 	mov	COUNT_, #1
124a0     A8 00 A0 FD | 	call	#pushregs_
124a4     10 F0 07 F1 | 	add	ptra, #16
124a8     4A 00 00 FF 
124ac     80 E4 05 F1 | 	add	objptr, ##38016
124b0     F2 26 02 FB | 	rdlong	local01, objptr
124b4     13 17 02 F6 | 	mov	arg03, local01
124b8     01 16 66 F0 | 	shl	arg03, #1
124bc     13 17 02 F1 | 	add	arg03, local01
124c0     02 16 66 F0 | 	shl	arg03, #2
124c4     03 00 00 FF 
124c8     04 E4 85 F1 | 	sub	objptr, ##1540
124cc     F2 16 02 F1 | 	add	arg03, objptr
124d0     0B 17 02 FB | 	rdlong	arg03, arg03
124d4     0C 4E 05 F1 | 	add	fp, #12
124d8     A7 16 62 FC | 	wrlong	arg03, fp
124dc                 | ' 
124dc                 | ' numpar=compiledline(lineptr_e).result.uresult
124dc                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
124dc     0C 4E 85 F1 | 	sub	fp, #12
124e0     02 16 16 F2 | 	cmp	arg03, #2 wc
124e4     47 00 00 FF 
124e8     7C E4 85 F1 | 	sub	objptr, ##36476
124ec     0C 4E 05 C1 |  if_b	add	fp, #12
124f0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
124f4     0C 4E 85 C1 |  if_b	sub	fp, #12
124f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
124fc     00 12 06 F6 | 	mov	arg01, #0
12500     38 77 B1 FD | 	call	#__system___getiolock_0579
12504     FD 12 02 F6 | 	mov	arg01, result1
12508     08 1A B1 FD | 	call	#__system___lockmem
1250c     A1 01 00 FF 
12510     46 15 06 F6 | 	mov	arg02, ##@LR__5744
12514     00 12 06 F6 | 	mov	arg01, #0
12518     00 16 06 F6 | 	mov	arg03, #0
1251c     E8 26 B1 FD | 	call	#__system___basic_print_string
12520     00 12 06 F6 | 	mov	arg01, #0
12524     14 77 B1 FD | 	call	#__system___getiolock_0579
12528     FD 00 68 FC | 	wrlong	#0, result1
1252c     27 12 06 F6 | 	mov	arg01, #39
12530     00 14 06 F6 | 	mov	arg02, #0
12534     38 E0 B0 FD | 	call	#_printerror
12538     64 00 90 FD | 	jmp	#LR__1501
1253c                 | LR__1500
1253c     4C A6 BF FD | 	call	#_pop
12540     FD 26 02 F6 | 	mov	local01, result1
12544     FE 16 02 F6 | 	mov	arg03, result2
12548     A7 26 62 FC | 	wrlong	local01, fp
1254c     04 4E 05 F1 | 	add	fp, #4
12550     A7 16 62 FC | 	wrlong	arg03, fp
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 FE 61 FC | 	wrlong	result3, fp
1255c     08 4E 85 F1 | 	sub	fp, #8
12560     A7 12 02 F6 | 	mov	arg01, fp
12564     08 A8 BF FD | 	call	#_converttoint
12568     FD 26 02 F6 | 	mov	local01, result1
1256c     01 26 66 F0 | 	shl	local01, #1
12570     51 00 00 FF 
12574     C8 E5 05 F1 | 	add	objptr, ##41928
12578     F2 26 02 F1 | 	add	local01, objptr
1257c     13 27 E2 FA | 	rdword	local01, local01
12580     A7 26 62 FC | 	wrlong	local01, fp
12584     08 4E 05 F1 | 	add	fp, #8
12588     A7 38 68 FC | 	wrlong	#28, fp
1258c     08 4E 85 F1 | 	sub	fp, #8
12590     A7 12 02 F6 | 	mov	arg01, fp
12594     51 00 00 FF 
12598     C8 E5 85 F1 | 	sub	objptr, ##41928
1259c     84 A6 BF FD | 	call	#_push
125a0                 | LR__1501
125a0     A7 F0 03 F6 | 	mov	ptra, fp
125a4     B2 00 A0 FD | 	call	#popregs_
125a8                 | _do_getenvsustain_ret
125a8     2D 00 64 FD | 	ret
125ac                 | 
125ac                 | ' 
125ac                 | ' '-------------------- getnotevalue
125ac                 | ' 
125ac                 | ' sub do_getnotevalue
125ac                 | _do_getnotevalue
125ac     01 4A 05 F6 | 	mov	COUNT_, #1
125b0     A8 00 A0 FD | 	call	#pushregs_
125b4     1C F0 07 F1 | 	add	ptra, #28
125b8     D0 A5 BF FD | 	call	#_pop
125bc     FF 14 02 F6 | 	mov	arg02, result3
125c0     10 4E 05 F1 | 	add	fp, #16
125c4     A7 FA 61 FC | 	wrlong	result1, fp
125c8     04 4E 05 F1 | 	add	fp, #4
125cc     A7 FC 61 FC | 	wrlong	result2, fp
125d0     04 4E 05 F1 | 	add	fp, #4
125d4     A7 14 62 FC | 	wrlong	arg02, fp
125d8     08 4E 85 F1 | 	sub	fp, #8
125dc     A7 12 02 F6 | 	mov	arg01, fp
125e0     10 4E 85 F1 | 	sub	fp, #16
125e4     88 A7 BF FD | 	call	#_converttoint
125e8     FD 14 52 F6 | 	abs	arg02, result1 wc
125ec     0C 14 16 FD | 	qdiv	arg02, #12
125f0     0C 4E 05 F1 | 	add	fp, #12
125f4     A7 FA 61 FC | 	wrlong	result1, fp
125f8     14 00 00 FF 
125fc     D8 E4 05 F1 | 	add	objptr, ##10456
12600     08 4E 85 F1 | 	sub	fp, #8
12604     19 14 62 FD | 	getqy	arg02
12608     0A 15 82 F6 | 	negc	arg02, arg02
1260c     02 14 66 F0 | 	shl	arg02, #2
12610     F2 14 02 F1 | 	add	arg02, objptr
12614     0A 15 02 FB | 	rdlong	arg02, arg02
12618     A7 14 62 FC | 	wrlong	arg02, fp
1261c     08 4E 05 F1 | 	add	fp, #8
12620     A7 14 02 FB | 	rdlong	arg02, fp
12624     0A 15 52 F6 | 	abs	arg02, arg02 wc
12628     0C 14 16 FD | 	qdiv	arg02, #12
1262c     0C 4E 85 F1 | 	sub	fp, #12
12630     14 00 00 FF 
12634     D8 E4 85 F1 | 	sub	objptr, ##10456
12638     18 14 62 FD | 	getqx	arg02
1263c     0A 13 82 F6 | 	negc	arg01, arg02
12640     09 13 52 F6 | 	abs	arg01, arg01 wc
12644     1F 26 C6 C9 |  if_b	decod	local01, #31
12648     00 26 06 36 |  if_ae	mov	local01, #0
1264c     38 43 B1 FD | 	call	#__system___float_fromuns
12650     13 FB 61 F5 | 	xor	result1, local01
12654     08 4E 05 F1 | 	add	fp, #8
12658     A7 FA 61 FC | 	wrlong	result1, fp
1265c     FD 14 02 F6 | 	mov	arg02, result1
12660     08 4E 85 F1 | 	sub	fp, #8
12664     1E 12 C6 F9 | 	decod	arg01, #30
12668     28 56 B1 FD | 	call	#__system____builtin_powf
1266c     FD 12 02 F6 | 	mov	arg01, result1
12670     04 4E 05 F1 | 	add	fp, #4
12674     A7 14 02 FB | 	rdlong	arg02, fp
12678     04 4E 85 F1 | 	sub	fp, #4
1267c     0C 47 B1 FD | 	call	#__system___float_mul
12680     A7 FA 61 FC | 	wrlong	result1, fp
12684     10 4E 05 F1 | 	add	fp, #16
12688     A7 FA 61 FC | 	wrlong	result1, fp
1268c     08 4E 05 F1 | 	add	fp, #8
12690     A7 3C 68 FC | 	wrlong	#30, fp
12694     08 4E 85 F1 | 	sub	fp, #8
12698     A7 12 02 F6 | 	mov	arg01, fp
1269c     10 4E 85 F1 | 	sub	fp, #16
126a0     80 A5 BF FD | 	call	#_push
126a4     A7 F0 03 F6 | 	mov	ptra, fp
126a8     B2 00 A0 FD | 	call	#popregs_
126ac                 | _do_getnotevalue_ret
126ac     2D 00 64 FD | 	ret
126b0                 | 
126b0                 | ' 
126b0                 | ' '-------------------- getpixel
126b0                 | ' 
126b0                 | ' sub do_getpixel
126b0                 | _do_getpixel
126b0     00 4A 05 F6 | 	mov	COUNT_, #0
126b4     A8 00 A0 FD | 	call	#pushregs_
126b8     24 F0 07 F1 | 	add	ptra, #36
126bc     4A 00 00 FF 
126c0     80 E4 05 F1 | 	add	objptr, ##38016
126c4     F2 16 02 FB | 	rdlong	arg03, objptr
126c8     0B 15 02 F6 | 	mov	arg02, arg03
126cc     01 14 66 F0 | 	shl	arg02, #1
126d0     0B 15 02 F1 | 	add	arg02, arg03
126d4     02 14 66 F0 | 	shl	arg02, #2
126d8     03 00 00 FF 
126dc     04 E4 85 F1 | 	sub	objptr, ##1540
126e0     F2 14 02 F1 | 	add	arg02, objptr
126e4     0A 17 02 FB | 	rdlong	arg03, arg02
126e8     18 4E 05 F1 | 	add	fp, #24
126ec     A7 16 62 FC | 	wrlong	arg03, fp
126f0                 | ' 
126f0                 | ' numpar=compiledline(lineptr_e).result.uresult
126f0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
126f0     18 4E 85 F1 | 	sub	fp, #24
126f4     02 16 0E F2 | 	cmp	arg03, #2 wz
126f8     47 00 00 FF 
126fc     7C E4 85 F1 | 	sub	objptr, ##36476
12700     40 00 90 AD |  if_e	jmp	#LR__1510
12704     00 12 06 F6 | 	mov	arg01, #0
12708     30 75 B1 FD | 	call	#__system___getiolock_0579
1270c     FD 12 02 F6 | 	mov	arg01, result1
12710     00 18 B1 FD | 	call	#__system___lockmem
12714     A1 01 00 FF 
12718     56 15 06 F6 | 	mov	arg02, ##@LR__5745
1271c     00 12 06 F6 | 	mov	arg01, #0
12720     00 16 06 F6 | 	mov	arg03, #0
12724     E0 24 B1 FD | 	call	#__system___basic_print_string
12728     00 12 06 F6 | 	mov	arg01, #0
1272c     0C 75 B1 FD | 	call	#__system___getiolock_0579
12730     FD 00 68 FC | 	wrlong	#0, result1
12734     27 12 06 F6 | 	mov	arg01, #39
12738     00 14 06 F6 | 	mov	arg02, #0
1273c     30 DE B0 FD | 	call	#_printerror
12740     B4 00 90 FD | 	jmp	#LR__1511
12744                 | LR__1510
12744     44 A4 BF FD | 	call	#_pop
12748     FD 16 02 F6 | 	mov	arg03, result1
1274c     FE 14 02 F6 | 	mov	arg02, result2
12750     FF 12 02 F6 | 	mov	arg01, result3
12754     0C 4E 05 F1 | 	add	fp, #12
12758     A7 16 62 FC | 	wrlong	arg03, fp
1275c     04 4E 05 F1 | 	add	fp, #4
12760     A7 14 62 FC | 	wrlong	arg02, fp
12764     04 4E 05 F1 | 	add	fp, #4
12768     A7 12 62 FC | 	wrlong	arg01, fp
1276c     14 4E 85 F1 | 	sub	fp, #20
12770     18 A4 BF FD | 	call	#_pop
12774     FF 16 02 F6 | 	mov	arg03, result3
12778     A7 FA 61 FC | 	wrlong	result1, fp
1277c     04 4E 05 F1 | 	add	fp, #4
12780     A7 FC 61 FC | 	wrlong	result2, fp
12784     04 4E 05 F1 | 	add	fp, #4
12788     A7 16 62 FC | 	wrlong	arg03, fp
1278c     08 4E 85 F1 | 	sub	fp, #8
12790     A7 12 02 F6 | 	mov	arg01, fp
12794     D8 A5 BF FD | 	call	#_converttoint
12798     1C 4E 05 F1 | 	add	fp, #28
1279c     A7 FA 61 FC | 	wrlong	result1, fp
127a0     10 4E 85 F1 | 	sub	fp, #16
127a4     A7 12 02 F6 | 	mov	arg01, fp
127a8     0C 4E 85 F1 | 	sub	fp, #12
127ac     C0 A5 BF FD | 	call	#_converttoint
127b0     FD 16 02 F6 | 	mov	arg03, result1
127b4     20 4E 05 F1 | 	add	fp, #32
127b8     A7 16 62 FC | 	wrlong	arg03, fp
127bc     F2 12 02 FB | 	rdlong	arg01, objptr
127c0     04 4E 85 F1 | 	sub	fp, #4
127c4     A7 FE 01 FB | 	rdlong	result3, fp
127c8     FF 12 02 F1 | 	add	arg01, result3
127cc     1C 4E 85 F1 | 	sub	fp, #28
127d0     0A 16 66 F0 | 	shl	arg03, #10
127d4     0B 13 02 F1 | 	add	arg01, arg03
127d8     0C E0 B0 FD | 	call	#_pspeek
127dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     08 4E 05 F1 | 	add	fp, #8
127e8     A7 3A 68 FC | 	wrlong	#29, fp
127ec     08 4E 85 F1 | 	sub	fp, #8
127f0     A7 12 02 F6 | 	mov	arg01, fp
127f4     2C A4 BF FD | 	call	#_push
127f8                 | LR__1511
127f8     A7 F0 03 F6 | 	mov	ptra, fp
127fc     B2 00 A0 FD | 	call	#popregs_
12800                 | _do_getpixel_ret
12800     2D 00 64 FD | 	ret
12804                 | 
12804                 | ' 
12804                 | ' '-------------------- gettime
12804                 | ' 
12804                 | ' sub do_gettime
12804                 | _do_gettime
12804     02 4A 05 F6 | 	mov	COUNT_, #2
12808     A8 00 A0 FD | 	call	#pushregs_
1280c     14 F0 07 F1 | 	add	ptra, #20
12810                 | ' 
12810                 | ' const asm 
12810     1A 26 72 FD | 	getct	local01 wc
12814     1A 28 62 FD | 	getct	local02
12818                 | ' return hi1, lo1
12818     14 FD 01 F6 | 	mov	result2, local02
1281c     A7 26 62 FC | 	wrlong	local01, fp
12820     04 4E 05 F1 | 	add	fp, #4
12824     A7 FC 61 FC | 	wrlong	result2, fp
12828     0C 4E 05 F1 | 	add	fp, #12
1282c     A7 3A 68 FC | 	wrlong	#29, fp
12830     0C 4E 85 F1 | 	sub	fp, #12
12834     A7 12 02 FB | 	rdlong	arg01, fp
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 12 62 FC | 	wrlong	arg01, fp
12840     08 4E 85 F1 | 	sub	fp, #8
12844     A7 12 02 FB | 	rdlong	arg01, fp
12848     0C 4E 05 F1 | 	add	fp, #12
1284c     A7 12 62 FC | 	wrlong	arg01, fp
12850     04 4E 85 F1 | 	sub	fp, #4
12854     A7 12 02 F6 | 	mov	arg01, fp
12858     08 4E 85 F1 | 	sub	fp, #8
1285c     C4 A3 BF FD | 	call	#_push
12860     A7 F0 03 F6 | 	mov	ptra, fp
12864     B2 00 A0 FD | 	call	#popregs_
12868                 | _do_gettime_ret
12868     2D 00 64 FD | 	ret
1286c                 | 
1286c                 | ' 
1286c                 | ' '-------------------- gosub
1286c                 | ' 
1286c                 | ' sub do_gosub()
1286c                 | _do_gosub
1286c     50 00 00 FF 
12870     0C E5 05 F1 | 	add	objptr, ##41228
12874     F2 00 02 FB | 	rdlong	_var01, objptr
12878     01 00 06 F1 | 	add	_var01, #1
1287c     F2 00 62 FC | 	wrlong	_var01, objptr
12880                 | ' gosubtop+=1
12880                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12880     06 00 00 FF 
12884     8C E4 85 F1 | 	sub	objptr, ##3212
12888     F2 00 02 FB | 	rdlong	_var01, objptr
1288c     01 00 06 F1 | 	add	_var01, #1
12890     00 03 02 F6 | 	mov	_var02, _var01
12894     01 02 66 F0 | 	shl	_var02, #1
12898     00 03 02 F1 | 	add	_var02, _var01
1289c     02 02 66 F0 | 	shl	_var02, #2
128a0     03 00 00 FF 
128a4     04 E4 85 F1 | 	sub	objptr, ##1540
128a8     F2 02 02 F1 | 	add	_var02, objptr
128ac     08 02 06 F1 | 	add	_var02, #8
128b0     01 03 02 FB | 	rdlong	_var02, _var02
128b4     FE 03 0E F2 | 	cmp	_var02, #510 wz
128b8     47 00 00 FF 
128bc     7C E4 85 F1 | 	sub	objptr, ##36476
128c0     58 00 90 5D |  if_ne	jmp	#LR__1520
128c4     50 00 00 FF 
128c8     0C E5 05 F1 | 	add	objptr, ##41228
128cc     F2 02 02 FB | 	rdlong	_var02, objptr
128d0     03 02 66 F0 | 	shl	_var02, #3
128d4     03 00 00 FF 
128d8     60 E5 85 F1 | 	sub	objptr, ##1888
128dc     F2 02 02 F1 | 	add	_var02, objptr
128e0     03 00 00 FF 
128e4     0C E5 05 F1 | 	add	objptr, ##1804
128e8     F2 00 02 FB | 	rdlong	_var01, objptr
128ec     01 01 62 FC | 	wrlong	_var01, _var02
128f0     54 E4 05 F1 | 	add	objptr, #84
128f4     F2 02 02 FB | 	rdlong	_var02, objptr
128f8     03 02 66 F0 | 	shl	_var02, #3
128fc     03 00 00 FF 
12900     60 E5 85 F1 | 	sub	objptr, ##1888
12904     F2 02 02 F1 | 	add	_var02, objptr
12908     04 02 06 F1 | 	add	_var02, #4
1290c     01 01 68 FC | 	wrlong	#0, _var02
12910     4C 00 00 FF 
12914     AC E5 85 F1 | 	sub	objptr, ##39340
12918     64 00 90 FD | 	jmp	#LR__1521
1291c                 | LR__1520
1291c     50 00 00 FF 
12920     0C E5 05 F1 | 	add	objptr, ##41228
12924     F2 02 02 FB | 	rdlong	_var02, objptr
12928     03 02 66 F0 | 	shl	_var02, #3
1292c     03 00 00 FF 
12930     60 E5 85 F1 | 	sub	objptr, ##1888
12934     F2 02 02 F1 | 	add	_var02, objptr
12938     03 00 00 FF 
1293c     14 E5 05 F1 | 	add	objptr, ##1812
12940     F2 00 02 FB | 	rdlong	_var01, objptr
12944     01 01 62 FC | 	wrlong	_var01, _var02
12948     4C E4 05 F1 | 	add	objptr, #76
1294c     F2 02 02 FB | 	rdlong	_var02, objptr
12950     03 02 66 F0 | 	shl	_var02, #3
12954     03 00 00 FF 
12958     60 E5 85 F1 | 	sub	objptr, ##1888
1295c     F2 02 02 F1 | 	add	_var02, objptr
12960     02 00 00 FF 
12964     2C E5 85 F1 | 	sub	objptr, ##1324
12968     F2 00 02 FB | 	rdlong	_var01, objptr
1296c     4A 00 00 FF 
12970     80 E4 85 F1 | 	sub	objptr, ##38016
12974     02 00 06 F1 | 	add	_var01, #2
12978     04 02 06 F1 | 	add	_var02, #4
1297c     01 01 62 FC | 	wrlong	_var01, _var02
12980                 | LR__1521
12980                 | _do_gosub_ret
12980     2D 00 64 FD | 	ret
12984                 | 
12984                 | ' 
12984                 | ' '--------------------- goto
12984                 | ' 
12984                 | ' '------- fast goto
12984                 | ' 
12984                 | ' sub do_fast_goto
12984                 | _do_fast_goto
12984     02 4A 05 F6 | 	mov	COUNT_, #2
12988     A8 00 A0 FD | 	call	#pushregs_
1298c                 | _do_fast_goto_enter
1298c     4A 00 00 FF 
12990     80 E4 05 F1 | 	add	objptr, ##38016
12994     F2 12 02 FB | 	rdlong	arg01, objptr
12998     09 27 02 F6 | 	mov	local01, arg01
1299c     01 26 66 F0 | 	shl	local01, #1
129a0     09 27 02 F1 | 	add	local01, arg01
129a4     02 26 66 F0 | 	shl	local01, #2
129a8     03 00 00 FF 
129ac     04 E4 85 F1 | 	sub	objptr, ##1540
129b0     F2 26 02 F1 | 	add	local01, objptr
129b4     13 29 02 FB | 	rdlong	local02, local01
129b8     14 13 02 F6 | 	mov	arg01, local02
129bc     47 00 00 FF 
129c0     7C E4 85 F1 | 	sub	objptr, ##36476
129c4     78 DE B0 FD | 	call	#_pslpeek
129c8     FD 12 02 F6 | 	mov	arg01, result1
129cc                 | ' 
129cc                 | ' testptr=compiledline(lineptr_e).result.uresult
129cc                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
129cc                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
129cc     4A 00 00 FF 
129d0     80 E4 05 F1 | 	add	objptr, ##38016
129d4     F2 FA 01 FB | 	rdlong	result1, objptr
129d8     FD 26 02 F6 | 	mov	local01, result1
129dc     01 26 66 F0 | 	shl	local01, #1
129e0     FD 26 02 F1 | 	add	local01, result1
129e4     02 26 66 F0 | 	shl	local01, #2
129e8     03 00 00 FF 
129ec     04 E4 85 F1 | 	sub	objptr, ##1540
129f0     F2 26 02 F1 | 	add	local01, objptr
129f4     04 26 06 F1 | 	add	local01, #4
129f8     13 27 02 FB | 	rdlong	local01, local01
129fc     13 13 0A F2 | 	cmp	arg01, local01 wz
12a00     47 00 00 FF 
12a04     7C E4 85 F1 | 	sub	objptr, ##36476
12a08     58 00 90 5D |  if_ne	jmp	#LR__1530
12a0c     50 00 00 FF 
12a10     B8 E4 05 F1 | 	add	objptr, ##41144
12a14     F2 28 62 FC | 	wrlong	local02, objptr
12a18     06 00 00 FF 
12a1c     3C E4 85 F1 | 	sub	objptr, ##3132
12a20     F2 28 02 FB | 	rdlong	local02, objptr
12a24     01 28 86 F1 | 	sub	local02, #1
12a28     04 E4 05 F1 | 	add	objptr, #4
12a2c     F2 28 62 FC | 	wrlong	local02, objptr
12a30                 | '   runptr=testptr
12a30                 | '   lineptr_e=lineptr-1
12a30                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12a30     06 00 00 FF 
12a34     84 E4 05 F1 | 	add	objptr, ##3204
12a38     F2 28 02 FB | 	rdlong	local02, objptr
12a3c     50 00 00 FF 
12a40     04 E5 85 F1 | 	sub	objptr, ##41220
12a44     FF FF 3F FF 
12a48     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12a4c     50 00 00 AF 
12a50     04 E5 05 A1 |  if_e	add	objptr, ##41220
12a54     F2 00 68 AC |  if_e	wrlong	#0, objptr
12a58     50 00 00 AF 
12a5c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12a60     04 00 90 FD | 	jmp	#LR__1531
12a64                 | LR__1530
12a64     0C 00 B0 FD | 	call	#_do_find_goto
12a68                 | LR__1531
12a68     A7 F0 03 F6 | 	mov	ptra, fp
12a6c     B2 00 A0 FD | 	call	#popregs_
12a70                 | _do_fast_goto_ret
12a70     2D 00 64 FD | 	ret
12a74                 | 
12a74                 | ' 
12a74                 | ' '------- find goto  
12a74                 | ' 
12a74                 | ' sub do_find_goto
12a74                 | _do_find_goto
12a74     03 4A 05 F6 | 	mov	COUNT_, #3
12a78     A8 00 A0 FD | 	call	#pushregs_
12a7c     24 F0 07 F1 | 	add	ptra, #36
12a80                 | _do_find_goto_enter
12a80     4A 00 00 FF 
12a84     80 E4 05 F1 | 	add	objptr, ##38016
12a88     F2 26 02 FB | 	rdlong	local01, objptr
12a8c     13 29 02 F6 | 	mov	local02, local01
12a90     01 28 66 F0 | 	shl	local02, #1
12a94     13 29 02 F1 | 	add	local02, local01
12a98     02 28 66 F0 | 	shl	local02, #2
12a9c     03 00 00 FF 
12aa0     04 E4 85 F1 | 	sub	objptr, ##1540
12aa4     F2 28 02 F1 | 	add	local02, objptr
12aa8     04 28 06 F1 | 	add	local02, #4
12aac     14 29 02 FB | 	rdlong	local02, local02
12ab0     A7 28 62 FC | 	wrlong	local02, fp
12ab4     03 00 00 FF 
12ab8     0C E4 05 F1 | 	add	objptr, ##1548
12abc     F2 2A 02 FB | 	rdlong	local03, objptr
12ac0     4A 00 00 FF 
12ac4     88 E4 85 F1 | 	sub	objptr, ##38024
12ac8     04 4E 05 F1 | 	add	fp, #4
12acc     A7 2A 62 FC | 	wrlong	local03, fp
12ad0     04 4E 85 F1 | 	sub	fp, #4
12ad4                 | ' 
12ad4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12ad4                 | ' gotoptr=programstart
12ad4                 | ' do
12ad4                 | LR__1540
12ad4     0C 4E 05 F1 | 	add	fp, #12
12ad8     A7 12 02 F6 | 	mov	arg01, fp
12adc     08 4E 85 F1 | 	sub	fp, #8
12ae0     A7 14 02 FB | 	rdlong	arg02, fp
12ae4     04 4E 85 F1 | 	sub	fp, #4
12ae8     18 16 06 F6 | 	mov	arg03, #24
12aec     0B 00 00 FF 
12af0     CC E4 05 F1 | 	add	objptr, ##5836
12af4     DC 07 B1 FD | 	call	#_psram_spin2_read1
12af8     0B 00 00 FF 
12afc     CC E4 85 F1 | 	sub	objptr, ##5836
12b00                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12b00                 | '   if gotoheader(0)<>$FFFFFFFF then
12b00     0C 4E 05 F1 | 	add	fp, #12
12b04     A7 2A 02 FB | 	rdlong	local03, fp
12b08     0C 4E 85 F1 | 	sub	fp, #12
12b0c     FF FF 7F FF 
12b10     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
12b14     24 00 90 AD |  if_e	jmp	#LR__1541
12b18     04 4E 05 F1 | 	add	fp, #4
12b1c     A7 2A 02 FB | 	rdlong	local03, fp
12b20     04 4E 05 F1 | 	add	fp, #4
12b24     A7 2A 62 FC | 	wrlong	local03, fp
12b28     18 4E 05 F1 | 	add	fp, #24
12b2c     A7 2A 02 FB | 	rdlong	local03, fp
12b30     1C 4E 85 F1 | 	sub	fp, #28
12b34     A7 2A 62 FC | 	wrlong	local03, fp
12b38     04 4E 85 F1 | 	sub	fp, #4
12b3c                 | LR__1541
12b3c     20 4E 05 F1 | 	add	fp, #32
12b40     A7 2A 02 FB | 	rdlong	local03, fp
12b44     20 4E 85 F1 | 	sub	fp, #32
12b48     FF FF 3F FF 
12b4c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12b50     0C 4E 05 51 |  if_ne	add	fp, #12
12b54     A7 26 02 5B |  if_ne	rdlong	local01, fp
12b58     0C 4E 85 51 |  if_ne	sub	fp, #12
12b5c     FF FF 7F 5F 
12b60     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12b64     18 00 90 AD |  if_e	jmp	#LR__1542
12b68     0C 4E 05 F1 | 	add	fp, #12
12b6c     A7 2A 02 FB | 	rdlong	local03, fp
12b70     0C 4E 85 F1 | 	sub	fp, #12
12b74     A7 28 02 FB | 	rdlong	local02, fp
12b78     14 2B 0A F2 | 	cmp	local03, local02 wz
12b7c     54 FF 9F 5D |  if_ne	jmp	#LR__1540
12b80                 | LR__1542
12b80                 | ' 
12b80                 | ' if gotoheader(0)=gotoline then
12b80     0C 4E 05 F1 | 	add	fp, #12
12b84     A7 2A 02 FB | 	rdlong	local03, fp
12b88     0C 4E 85 F1 | 	sub	fp, #12
12b8c     A7 26 02 FB | 	rdlong	local01, fp
12b90     13 2B 0A F2 | 	cmp	local03, local01 wz
12b94     D8 00 90 5D |  if_ne	jmp	#LR__1543
12b98     4A 00 00 FF 
12b9c     80 E4 05 F1 | 	add	objptr, ##38016
12ba0     F2 26 02 FB | 	rdlong	local01, objptr
12ba4     13 29 02 F6 | 	mov	local02, local01
12ba8     01 28 66 F0 | 	shl	local02, #1
12bac     13 29 02 F1 | 	add	local02, local01
12bb0     02 28 66 F0 | 	shl	local02, #2
12bb4     03 00 00 FF 
12bb8     04 E4 85 F1 | 	sub	objptr, ##1540
12bbc     F2 28 02 F1 | 	add	local02, objptr
12bc0     08 4E 05 F1 | 	add	fp, #8
12bc4     A7 2A 02 FB | 	rdlong	local03, fp
12bc8     14 2B 62 FC | 	wrlong	local03, local02
12bcc     03 00 00 FF 
12bd0     04 E4 05 F1 | 	add	objptr, ##1540
12bd4     F2 26 02 FB | 	rdlong	local01, objptr
12bd8     13 29 02 F6 | 	mov	local02, local01
12bdc     01 28 66 F0 | 	shl	local02, #1
12be0     13 29 02 F1 | 	add	local02, local01
12be4     02 28 66 F0 | 	shl	local02, #2
12be8     03 00 00 FF 
12bec     04 E4 85 F1 | 	sub	objptr, ##1540
12bf0     F2 28 02 F1 | 	add	local02, objptr
12bf4     08 28 06 F1 | 	add	local02, #8
12bf8     14 9D 68 FC | 	wrlong	#78, local02
12bfc     03 00 00 FF 
12c00     04 E4 05 F1 | 	add	objptr, ##1540
12c04     F2 28 02 FB | 	rdlong	local02, objptr
12c08     14 13 02 F6 | 	mov	arg01, local02
12c0c     01 12 66 F0 | 	shl	arg01, #1
12c10     14 13 02 F1 | 	add	arg01, local02
12c14     02 12 66 F0 | 	shl	arg01, #2
12c18     03 00 00 FF 
12c1c     04 E4 85 F1 | 	sub	objptr, ##1540
12c20     F2 12 02 F1 | 	add	arg01, objptr
12c24     09 00 00 FF 
12c28     44 E4 05 F1 | 	add	objptr, ##4676
12c2c     F2 14 02 FB | 	rdlong	arg02, objptr
12c30     02 2A 06 F6 | 	mov	local03, #2
12c34     14 2B 02 F1 | 	add	local03, local02
12c38     0B 00 00 FF 
12c3c     5C E4 85 F1 | 	sub	objptr, ##5724
12c40     F2 16 02 FB | 	rdlong	arg03, objptr
12c44     0B 2B 02 FD | 	qmul	local03, arg03
12c48     08 4E 85 F1 | 	sub	fp, #8
12c4c     39 00 00 FF 
12c50     98 E5 85 F1 | 	sub	objptr, ##29592
12c54     18 2A 62 FD | 	getqx	local03
12c58     15 15 02 F1 | 	add	arg02, local03
12c5c     10 07 B1 FD | 	call	#_psram_spin2_write
12c60     0B 00 00 FF 
12c64     CC E4 85 F1 | 	sub	objptr, ##5836
12c68     18 FD BF FD | 	call	#_do_fast_goto
12c6c     0C 00 90 FD | 	jmp	#LR__1544
12c70                 | LR__1543
12c70     26 12 06 F6 | 	mov	arg01, #38
12c74     00 14 06 F6 | 	mov	arg02, #0
12c78     F4 D8 B0 FD | 	call	#_printerror
12c7c                 | LR__1544
12c7c     A7 F0 03 F6 | 	mov	ptra, fp
12c80     B2 00 A0 FD | 	call	#popregs_
12c84                 | _do_find_goto_ret
12c84     2D 00 64 FD | 	ret
12c88                 | 
12c88                 | ' 
12c88                 | ' '------- slow goto  
12c88                 | ' 
12c88                 | ' sub do_slow_goto
12c88                 | _do_slow_goto
12c88     02 4A 05 F6 | 	mov	COUNT_, #2
12c8c     A8 00 A0 FD | 	call	#pushregs_
12c90     30 F0 07 F1 | 	add	ptra, #48
12c94     F4 9E BF FD | 	call	#_pop
12c98     FF 26 02 F6 | 	mov	local01, result3
12c9c     24 4E 05 F1 | 	add	fp, #36
12ca0     A7 FA 61 FC | 	wrlong	result1, fp
12ca4     04 4E 05 F1 | 	add	fp, #4
12ca8     A7 FC 61 FC | 	wrlong	result2, fp
12cac     04 4E 05 F1 | 	add	fp, #4
12cb0     A7 26 62 FC | 	wrlong	local01, fp
12cb4     08 4E 85 F1 | 	sub	fp, #8
12cb8     A7 12 02 F6 | 	mov	arg01, fp
12cbc     24 4E 85 F1 | 	sub	fp, #36
12cc0     AC A0 BF FD | 	call	#_converttoint
12cc4     A7 FA 61 FC | 	wrlong	result1, fp
12cc8     4A 00 00 FF 
12ccc     88 E4 05 F1 | 	add	objptr, ##38024
12cd0     F2 28 02 FB | 	rdlong	local02, objptr
12cd4     4A 00 00 FF 
12cd8     88 E4 85 F1 | 	sub	objptr, ##38024
12cdc     04 4E 05 F1 | 	add	fp, #4
12ce0     A7 28 62 FC | 	wrlong	local02, fp
12ce4     04 4E 85 F1 | 	sub	fp, #4
12ce8                 | ' 
12ce8                 | ' t1=pop() : gotoline=converttoint(t1)
12ce8                 | ' gotoptr=programstart
12ce8                 | ' do
12ce8                 | LR__1550
12ce8     0C 4E 05 F1 | 	add	fp, #12
12cec     A7 12 02 F6 | 	mov	arg01, fp
12cf0     08 4E 85 F1 | 	sub	fp, #8
12cf4     A7 14 02 FB | 	rdlong	arg02, fp
12cf8     04 4E 85 F1 | 	sub	fp, #4
12cfc     18 16 06 F6 | 	mov	arg03, #24
12d00     0B 00 00 FF 
12d04     CC E4 05 F1 | 	add	objptr, ##5836
12d08     C8 05 B1 FD | 	call	#_psram_spin2_read1
12d0c     0B 00 00 FF 
12d10     CC E4 85 F1 | 	sub	objptr, ##5836
12d14                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12d14                 | '   if gotoheader(0)<>$FFFFFFFF then
12d14     0C 4E 05 F1 | 	add	fp, #12
12d18     A7 28 02 FB | 	rdlong	local02, fp
12d1c     0C 4E 85 F1 | 	sub	fp, #12
12d20     FF FF 7F FF 
12d24     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12d28     24 00 90 AD |  if_e	jmp	#LR__1551
12d2c     04 4E 05 F1 | 	add	fp, #4
12d30     A7 28 02 FB | 	rdlong	local02, fp
12d34     04 4E 05 F1 | 	add	fp, #4
12d38     A7 28 62 FC | 	wrlong	local02, fp
12d3c     18 4E 05 F1 | 	add	fp, #24
12d40     A7 28 02 FB | 	rdlong	local02, fp
12d44     1C 4E 85 F1 | 	sub	fp, #28
12d48     A7 28 62 FC | 	wrlong	local02, fp
12d4c     04 4E 85 F1 | 	sub	fp, #4
12d50                 | LR__1551
12d50     20 4E 05 F1 | 	add	fp, #32
12d54     A7 28 02 FB | 	rdlong	local02, fp
12d58     20 4E 85 F1 | 	sub	fp, #32
12d5c     FF FF 3F FF 
12d60     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12d64     0C 4E 05 51 |  if_ne	add	fp, #12
12d68     A7 26 02 5B |  if_ne	rdlong	local01, fp
12d6c     0C 4E 85 51 |  if_ne	sub	fp, #12
12d70     FF FF 7F 5F 
12d74     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12d78     18 00 90 AD |  if_e	jmp	#LR__1552
12d7c     0C 4E 05 F1 | 	add	fp, #12
12d80     A7 28 02 FB | 	rdlong	local02, fp
12d84     0C 4E 85 F1 | 	sub	fp, #12
12d88     A7 16 02 FB | 	rdlong	arg03, fp
12d8c     0B 29 0A F2 | 	cmp	local02, arg03 wz
12d90     54 FF 9F 5D |  if_ne	jmp	#LR__1550
12d94                 | LR__1552
12d94                 | ' if gotoheader(0)=gotoline then  
12d94     0C 4E 05 F1 | 	add	fp, #12
12d98     A7 28 02 FB | 	rdlong	local02, fp
12d9c     0C 4E 85 F1 | 	sub	fp, #12
12da0     A7 26 02 FB | 	rdlong	local01, fp
12da4     13 29 0A F2 | 	cmp	local02, local01 wz
12da8     60 00 90 5D |  if_ne	jmp	#LR__1553
12dac     08 4E 05 F1 | 	add	fp, #8
12db0     A7 28 02 FB | 	rdlong	local02, fp
12db4     08 4E 85 F1 | 	sub	fp, #8
12db8     50 00 00 FF 
12dbc     B8 E4 05 F1 | 	add	objptr, ##41144
12dc0     F2 28 62 FC | 	wrlong	local02, objptr
12dc4     06 00 00 FF 
12dc8     3C E4 85 F1 | 	sub	objptr, ##3132
12dcc     F2 28 02 FB | 	rdlong	local02, objptr
12dd0     01 28 86 F1 | 	sub	local02, #1
12dd4     04 E4 05 F1 | 	add	objptr, #4
12dd8     F2 28 62 FC | 	wrlong	local02, objptr
12ddc                 | '    runptr=oldgotoptr
12ddc                 | '    lineptr_e=lineptr-1
12ddc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12ddc     06 00 00 FF 
12de0     84 E4 05 F1 | 	add	objptr, ##3204
12de4     F2 28 02 FB | 	rdlong	local02, objptr
12de8     50 00 00 FF 
12dec     04 E5 85 F1 | 	sub	objptr, ##41220
12df0     FF FF 3F FF 
12df4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12df8     50 00 00 AF 
12dfc     04 E5 05 A1 |  if_e	add	objptr, ##41220
12e00     F2 00 68 AC |  if_e	wrlong	#0, objptr
12e04     50 00 00 AF 
12e08     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12e0c                 | LR__1553
12e0c     A7 F0 03 F6 | 	mov	ptra, fp
12e10     B2 00 A0 FD | 	call	#popregs_
12e14                 | _do_slow_goto_ret
12e14     2D 00 64 FD | 	ret
12e18                 | 
12e18                 | ' 
12e18                 | ' ' ----------------  hex$
12e18                 | ' 
12e18                 | ' sub do_hex
12e18                 | _do_hex
12e18     01 4A 05 F6 | 	mov	COUNT_, #1
12e1c     A8 00 A0 FD | 	call	#pushregs_
12e20     18 F0 07 F1 | 	add	ptra, #24
12e24     4A 00 00 FF 
12e28     80 E4 05 F1 | 	add	objptr, ##38016
12e2c     F2 26 02 FB | 	rdlong	local01, objptr
12e30     13 17 02 F6 | 	mov	arg03, local01
12e34     01 16 66 F0 | 	shl	arg03, #1
12e38     13 17 02 F1 | 	add	arg03, local01
12e3c     02 16 66 F0 | 	shl	arg03, #2
12e40     03 00 00 FF 
12e44     04 E4 85 F1 | 	sub	objptr, ##1540
12e48     F2 16 02 F1 | 	add	arg03, objptr
12e4c     0B 17 02 FB | 	rdlong	arg03, arg03
12e50     0C 4E 05 F1 | 	add	fp, #12
12e54     A7 16 62 FC | 	wrlong	arg03, fp
12e58                 | ' 
12e58                 | ' numpar=compiledline(lineptr_e).result.uresult
12e58                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12e58     0C 4E 85 F1 | 	sub	fp, #12
12e5c     03 16 16 F2 | 	cmp	arg03, #3 wc
12e60     47 00 00 FF 
12e64     7C E4 85 F1 | 	sub	objptr, ##36476
12e68     0C 4E 05 C1 |  if_b	add	fp, #12
12e6c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12e70     0C 4E 85 C1 |  if_b	sub	fp, #12
12e74     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
12e78     00 12 06 F6 | 	mov	arg01, #0
12e7c     BC 6D B1 FD | 	call	#__system___getiolock_0579
12e80     FD 12 02 F6 | 	mov	arg01, result1
12e84     8C 10 B1 FD | 	call	#__system___lockmem
12e88     A1 01 00 FF 
12e8c     61 15 06 F6 | 	mov	arg02, ##@LR__5746
12e90     00 12 06 F6 | 	mov	arg01, #0
12e94     00 16 06 F6 | 	mov	arg03, #0
12e98     6C 1D B1 FD | 	call	#__system___basic_print_string
12e9c     00 12 06 F6 | 	mov	arg01, #0
12ea0     98 6D B1 FD | 	call	#__system___getiolock_0579
12ea4     FD 00 68 FC | 	wrlong	#0, result1
12ea8     27 12 06 F6 | 	mov	arg01, #39
12eac     00 14 06 F6 | 	mov	arg02, #0
12eb0     BC D6 B0 FD | 	call	#_printerror
12eb4     B8 00 90 FD | 	jmp	#LR__1563
12eb8                 | LR__1560
12eb8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12eb8     0C 4E 05 F1 | 	add	fp, #12
12ebc     A7 26 02 FB | 	rdlong	local01, fp
12ec0     0C 4E 85 F1 | 	sub	fp, #12
12ec4     02 26 0E F2 | 	cmp	local01, #2 wz
12ec8     38 00 90 5D |  if_ne	jmp	#LR__1561
12ecc     BC 9C BF FD | 	call	#_pop
12ed0     FF 26 02 F6 | 	mov	local01, result3
12ed4     A7 FA 61 FC | 	wrlong	result1, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 FC 61 FC | 	wrlong	result2, fp
12ee0     04 4E 05 F1 | 	add	fp, #4
12ee4     A7 26 62 FC | 	wrlong	local01, fp
12ee8     08 4E 85 F1 | 	sub	fp, #8
12eec     A7 12 02 F6 | 	mov	arg01, fp
12ef0     7C 9E BF FD | 	call	#_converttoint
12ef4     14 4E 05 F1 | 	add	fp, #20
12ef8     A7 FA 61 FC | 	wrlong	result1, fp
12efc     14 4E 85 F1 | 	sub	fp, #20
12f00     0C 00 90 FD | 	jmp	#LR__1562
12f04                 | LR__1561
12f04     14 4E 05 F1 | 	add	fp, #20
12f08     A7 10 68 FC | 	wrlong	#8, fp
12f0c     14 4E 85 F1 | 	sub	fp, #20
12f10                 | LR__1562
12f10     78 9C BF FD | 	call	#_pop
12f14     FF 26 02 F6 | 	mov	local01, result3
12f18     A7 FA 61 FC | 	wrlong	result1, fp
12f1c     04 4E 05 F1 | 	add	fp, #4
12f20     A7 FC 61 FC | 	wrlong	result2, fp
12f24     04 4E 05 F1 | 	add	fp, #4
12f28     A7 26 62 FC | 	wrlong	local01, fp
12f2c     08 4E 85 F1 | 	sub	fp, #8
12f30     A7 12 02 F6 | 	mov	arg01, fp
12f34     38 9E BF FD | 	call	#_converttoint
12f38     10 4E 05 F1 | 	add	fp, #16
12f3c     A7 FA 61 FC | 	wrlong	result1, fp
12f40     FD 12 02 F6 | 	mov	arg01, result1
12f44     04 4E 05 F1 | 	add	fp, #4
12f48     A7 14 02 FB | 	rdlong	arg02, fp
12f4c     14 4E 85 F1 | 	sub	fp, #20
12f50     10 16 06 F6 | 	mov	arg03, #16
12f54     8C 32 B1 FD | 	call	#__system__Number_S
12f58     A7 FA 61 FC | 	wrlong	result1, fp
12f5c     08 4E 05 F1 | 	add	fp, #8
12f60     A7 3E 68 FC | 	wrlong	#31, fp
12f64     08 4E 85 F1 | 	sub	fp, #8
12f68     A7 12 02 F6 | 	mov	arg01, fp
12f6c     B4 9C BF FD | 	call	#_push
12f70                 | LR__1563
12f70     A7 F0 03 F6 | 	mov	ptra, fp
12f74     B2 00 A0 FD | 	call	#popregs_
12f78                 | _do_hex_ret
12f78     2D 00 64 FD | 	ret
12f7c                 | 
12f7c                 | ' 
12f7c                 | ' ' ----------------  if
12f7c                 | ' 
12f7c                 | ' sub do_if
12f7c                 | _do_if
12f7c     05 4A 05 F6 | 	mov	COUNT_, #5
12f80     A8 00 A0 FD | 	call	#pushregs_
12f84     04 9C BF FD | 	call	#_pop
12f88     FD 26 0A F6 | 	mov	local01, result1 wz
12f8c     FE 28 02 F6 | 	mov	local02, result2
12f90     FF 2A 02 F6 | 	mov	local03, result3
12f94                 | ' t1=pop()
12f94                 | ' ' if uresult=0, jump over else
12f94                 | ' if t1.result.uresult = 0 then 
12f94     BC 00 90 5D |  if_ne	jmp	#LR__1572
12f98                 | '   for i=lineptr_e to lineptr-1
12f98     4A 00 00 FF 
12f9c     80 E4 05 F1 | 	add	objptr, ##38016
12fa0     F2 2C 02 FB | 	rdlong	local04, objptr
12fa4     04 E4 85 F1 | 	sub	objptr, #4
12fa8     F2 2E 02 FB | 	rdlong	local05, objptr
12fac     4A 00 00 FF 
12fb0     7C E4 85 F1 | 	sub	objptr, ##38012
12fb4                 | LR__1570
12fb4     17 2D 52 F2 | 	cmps	local04, local05 wc
12fb8     78 00 90 3D |  if_ae	jmp	#LR__1571
12fbc     16 FF 01 F6 | 	mov	result3, local04
12fc0     01 FE 65 F0 | 	shl	result3, #1
12fc4     16 FF 01 F1 | 	add	result3, local04
12fc8     02 FE 65 F0 | 	shl	result3, #2
12fcc     47 00 00 FF 
12fd0     7C E4 05 F1 | 	add	objptr, ##36476
12fd4     F2 FE 01 F1 | 	add	result3, objptr
12fd8     FF 26 02 FB | 	rdlong	local01, result3
12fdc     04 FE 05 F1 | 	add	result3, #4
12fe0     FF FC 01 FB | 	rdlong	result2, result3
12fe4     16 FF 01 F6 | 	mov	result3, local04
12fe8     01 FE 65 F0 | 	shl	result3, #1
12fec     16 FF 01 F1 | 	add	result3, local04
12ff0     02 FE 65 F0 | 	shl	result3, #2
12ff4     F2 FE 01 F1 | 	add	result3, objptr
12ff8     08 FE 05 F1 | 	add	result3, #8
12ffc     FF FE 01 FB | 	rdlong	result3, result3
13000     FE 28 02 F6 | 	mov	local02, result2
13004     FF 2A 02 F6 | 	mov	local03, result3
13008                 | '     t1=compiledline(i)
13008                 | '     if t1.result_type=token_else then lineptr_e=i : return
13008     5A 2A 0E F2 | 	cmp	local03, #90 wz
1300c     47 00 00 FF 
13010     7C E4 85 F1 | 	sub	objptr, ##36476
13014     4A 00 00 AF 
13018     80 E4 05 A1 |  if_e	add	objptr, ##38016
1301c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13020     4A 00 00 AF 
13024     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13028     28 00 90 AD |  if_e	jmp	#LR__1573
1302c     01 2C 06 F1 | 	add	local04, #1
13030     80 FF 9F FD | 	jmp	#LR__1570
13034                 | LR__1571
13034     4A 00 00 FF 
13038     7C E4 05 F1 | 	add	objptr, ##38012
1303c     F2 2E 02 FB | 	rdlong	local05, objptr
13040     01 2E 86 F1 | 	sub	local05, #1
13044     04 E4 05 F1 | 	add	objptr, #4
13048     F2 2E 62 FC | 	wrlong	local05, objptr
1304c     4A 00 00 FF 
13050     80 E4 85 F1 | 	sub	objptr, ##38016
13054                 | LR__1572
13054                 | LR__1573
13054     A7 F0 03 F6 | 	mov	ptra, fp
13058     B2 00 A0 FD | 	call	#popregs_
1305c                 | _do_if_ret
1305c     2D 00 64 FD | 	ret
13060                 | 
13060                 | ' 
13060                 | ' ' ----------------  inkey$
13060                 | ' 
13060                 | ' sub do_inkey
13060                 | _do_inkey
13060     02 4A 05 F6 | 	mov	COUNT_, #2
13064     A8 00 A0 FD | 	call	#pushregs_
13068     0C F0 07 F1 | 	add	ptra, #12
1306c     90 06 B1 FD | 	call	#_usbnew_spin2_get_key
13070     45 00 00 FF 
13074     74 E4 05 F1 | 	add	objptr, ##35444
13078     F2 FA 61 FC | 	wrlong	result1, objptr
1307c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
1307c     45 00 00 FF 
13080     74 E4 85 F1 | 	sub	objptr, ##35444
13084     00 FA 0D F2 | 	cmp	result1, #0 wz
13088     94 00 90 AD |  if_e	jmp	#LR__1581
1308c     45 00 00 FF 
13090     74 E4 05 F1 | 	add	objptr, ##35444
13094     F2 1C 02 FB | 	rdlong	arg06, objptr
13098     45 00 00 FF 
1309c     74 E4 85 F1 | 	sub	objptr, ##35444
130a0     00 00 40 FF 
130a4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
130a8     45 00 00 CF 
130ac     74 E4 05 C1 |  if_b	add	objptr, ##35444
130b0     F2 26 02 CB |  if_b	rdlong	local01, objptr
130b4     45 00 00 CF 
130b8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
130bc     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
130c0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
130c4     58 00 90 3D |  if_ae	jmp	#LR__1581
130c8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
130c8     50 00 00 FF 
130cc     14 E5 05 F1 | 	add	objptr, ##41236
130d0     F2 1C 02 FB | 	rdlong	arg06, objptr
130d4     50 00 00 FF 
130d8     14 E5 85 F1 | 	sub	objptr, ##41236
130dc     01 1C 0E F2 | 	cmp	arg06, #1 wz
130e0     3C 00 90 5D |  if_ne	jmp	#LR__1580
130e4     51 00 00 FF 
130e8     B8 E5 05 F1 | 	add	objptr, ##41912
130ec     F2 14 02 FB | 	rdlong	arg02, objptr
130f0     04 E4 85 F1 | 	sub	objptr, #4
130f4     F2 1A 02 FB | 	rdlong	arg05, objptr
130f8     07 12 06 F6 | 	mov	arg01, #7
130fc     56 00 00 FF 
13100     44 16 06 F6 | 	mov	arg03, ##44100
13104     0C 18 C6 F9 | 	decod	arg04, #12
13108     01 1C 66 F6 | 	neg	arg06, #1
1310c     46 00 00 FF 
13110     E8 E4 85 F1 | 	sub	objptr, ##36072
13114     8C 09 B1 FD | 	call	#_audio096_spin2_play
13118     0B 00 00 FF 
1311c     CC E4 85 F1 | 	sub	objptr, ##5836
13120                 | LR__1580
13120                 | LR__1581
13120                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13120     45 00 00 FF 
13124     74 E4 05 F1 | 	add	objptr, ##35444
13128     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1312c     45 00 00 FF 
13130     74 E4 85 F1 | 	sub	objptr, ##35444
13134     D4 01 90 AD |  if_e	jmp	#LR__1590
13138     45 00 00 FF 
1313c     74 E4 05 F1 | 	add	objptr, ##35444
13140     F2 1C 02 FB | 	rdlong	arg06, objptr
13144     45 00 00 FF 
13148     74 E4 85 F1 | 	sub	objptr, ##35444
1314c     00 00 40 FF 
13150     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13154     45 00 00 CF 
13158     74 E4 05 C1 |  if_b	add	objptr, ##35444
1315c     F2 26 02 CB |  if_b	rdlong	local01, objptr
13160     45 00 00 CF 
13164     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13168     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1316c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13170     98 01 90 3D |  if_ae	jmp	#LR__1590
13174                 | '   if leds and 2 = 2 then 
13174     51 00 00 FF 
13178     F0 E5 05 F1 | 	add	objptr, ##41968
1317c     F2 26 0A FB | 	rdlong	local01, objptr wz
13180     51 00 00 FF 
13184     F0 E5 85 F1 | 	sub	objptr, ##41968
13188     58 01 90 AD |  if_e	jmp	#LR__1589
1318c                 | '     if key>96 andalso key<123 then
1318c     45 00 00 FF 
13190     74 E4 05 F1 | 	add	objptr, ##35444
13194     F2 26 02 FB | 	rdlong	local01, objptr
13198     45 00 00 FF 
1319c     74 E4 85 F1 | 	sub	objptr, ##35444
131a0     61 26 16 F2 | 	cmp	local01, #97 wc
131a4     3C 00 90 CD |  if_b	jmp	#LR__1582
131a8     45 00 00 FF 
131ac     74 E4 05 F1 | 	add	objptr, ##35444
131b0     F2 26 02 FB | 	rdlong	local01, objptr
131b4     45 00 00 FF 
131b8     74 E4 85 F1 | 	sub	objptr, ##35444
131bc     7B 26 16 F2 | 	cmp	local01, #123 wc
131c0     20 00 90 3D |  if_ae	jmp	#LR__1582
131c4     45 00 00 FF 
131c8     74 E4 05 F1 | 	add	objptr, ##35444
131cc     F2 26 02 FB | 	rdlong	local01, objptr
131d0     20 26 86 F1 | 	sub	local01, #32
131d4     F2 26 62 FC | 	wrlong	local01, objptr
131d8     45 00 00 FF 
131dc     74 E4 85 F1 | 	sub	objptr, ##35444
131e0     00 01 90 FD | 	jmp	#LR__1588
131e4                 | LR__1582
131e4     45 00 00 FF 
131e8     74 E4 05 F1 | 	add	objptr, ##35444
131ec     F2 26 02 FB | 	rdlong	local01, objptr
131f0     45 00 00 FF 
131f4     74 E4 85 F1 | 	sub	objptr, ##35444
131f8     41 26 16 F2 | 	cmp	local01, #65 wc
131fc     3C 00 90 CD |  if_b	jmp	#LR__1583
13200     45 00 00 FF 
13204     74 E4 05 F1 | 	add	objptr, ##35444
13208     F2 26 02 FB | 	rdlong	local01, objptr
1320c     45 00 00 FF 
13210     74 E4 85 F1 | 	sub	objptr, ##35444
13214     5B 26 16 F2 | 	cmp	local01, #91 wc
13218     20 00 90 3D |  if_ae	jmp	#LR__1583
1321c     45 00 00 FF 
13220     74 E4 05 F1 | 	add	objptr, ##35444
13224     F2 26 02 FB | 	rdlong	local01, objptr
13228     20 26 06 F1 | 	add	local01, #32
1322c     F2 26 62 FC | 	wrlong	local01, objptr
13230     45 00 00 FF 
13234     74 E4 85 F1 | 	sub	objptr, ##35444
13238     A8 00 90 FD | 	jmp	#LR__1587
1323c                 | LR__1583
1323c     45 00 00 FF 
13240     74 E4 05 F1 | 	add	objptr, ##35444
13244     F2 26 02 FB | 	rdlong	local01, objptr
13248     45 00 00 FF 
1324c     74 E4 85 F1 | 	sub	objptr, ##35444
13250     17 26 16 F2 | 	cmp	local01, #23 wc
13254     3C 00 90 CD |  if_b	jmp	#LR__1584
13258     45 00 00 FF 
1325c     74 E4 05 F1 | 	add	objptr, ##35444
13260     F2 26 02 FB | 	rdlong	local01, objptr
13264     45 00 00 FF 
13268     74 E4 85 F1 | 	sub	objptr, ##35444
1326c     20 26 16 F2 | 	cmp	local01, #32 wc
13270     20 00 90 3D |  if_ae	jmp	#LR__1584
13274     45 00 00 FF 
13278     74 E4 05 F1 | 	add	objptr, ##35444
1327c     F2 26 02 FB | 	rdlong	local01, objptr
13280     09 26 86 F1 | 	sub	local01, #9
13284     F2 26 62 FC | 	wrlong	local01, objptr
13288     45 00 00 FF 
1328c     74 E4 85 F1 | 	sub	objptr, ##35444
13290     50 00 90 FD | 	jmp	#LR__1586
13294                 | LR__1584
13294     45 00 00 FF 
13298     74 E4 05 F1 | 	add	objptr, ##35444
1329c     F2 28 02 FB | 	rdlong	local02, objptr
132a0     45 00 00 FF 
132a4     74 E4 85 F1 | 	sub	objptr, ##35444
132a8     0E 28 16 F2 | 	cmp	local02, #14 wc
132ac     34 00 90 CD |  if_b	jmp	#LR__1585
132b0     45 00 00 FF 
132b4     74 E4 05 F1 | 	add	objptr, ##35444
132b8     F2 26 02 FB | 	rdlong	local01, objptr
132bc     45 00 00 FF 
132c0     74 E4 85 F1 | 	sub	objptr, ##35444
132c4     17 26 16 F2 | 	cmp	local01, #23 wc
132c8     51 00 00 CF 
132cc     F4 E5 05 C1 |  if_b	add	objptr, ##41972
132d0     F2 28 02 CB |  if_b	rdlong	local02, objptr
132d4     27 28 06 C1 |  if_b	add	local02, #39
132d8     F2 28 62 CC |  if_b	wrlong	local02, objptr
132dc     51 00 00 CF 
132e0     F4 E5 85 C1 |  if_b	sub	objptr, ##41972
132e4                 | LR__1585
132e4                 | LR__1586
132e4                 | LR__1587
132e4                 | LR__1588
132e4                 | LR__1589
132e4     45 00 00 FF 
132e8     74 E4 05 F1 | 	add	objptr, ##35444
132ec     F2 12 02 FB | 	rdlong	arg01, objptr
132f0     45 00 00 FF 
132f4     74 E4 85 F1 | 	sub	objptr, ##35444
132f8     F4 D5 B0 FD | 	call	#_scantochar
132fc     FD 12 02 F6 | 	mov	arg01, result1
13300     50 2E B1 FD | 	call	#__system__Chr_S
13304     A7 FA 61 FC | 	wrlong	result1, fp
13308     0C 00 90 FD | 	jmp	#LR__1591
1330c                 | LR__1590
1330c     A1 01 00 FF 
13310     68 29 06 F6 | 	mov	local02, ##@LR__5747
13314     A7 28 62 FC | 	wrlong	local02, fp
13318                 | LR__1591
13318     08 4E 05 F1 | 	add	fp, #8
1331c     A7 3E 68 FC | 	wrlong	#31, fp
13320     08 4E 85 F1 | 	sub	fp, #8
13324     A7 12 02 F6 | 	mov	arg01, fp
13328     F8 98 BF FD | 	call	#_push
1332c     A7 F0 03 F6 | 	mov	ptra, fp
13330     B2 00 A0 FD | 	call	#popregs_
13334                 | _do_inkey_ret
13334     2D 00 64 FD | 	ret
13338                 | 
13338                 | ' 
13338                 | ' ' ----------------  ink
13338                 | ' 
13338                 | ' sub do_ink
13338                 | _do_ink
13338     00 4A 05 F6 | 	mov	COUNT_, #0
1333c     A8 00 A0 FD | 	call	#pushregs_
13340     0C F0 07 F1 | 	add	ptra, #12
13344     44 98 BF FD | 	call	#_pop
13348     FF 14 02 F6 | 	mov	arg02, result3
1334c     A7 FA 61 FC | 	wrlong	result1, fp
13350     04 4E 05 F1 | 	add	fp, #4
13354     A7 FC 61 FC | 	wrlong	result2, fp
13358     04 4E 05 F1 | 	add	fp, #4
1335c     A7 14 62 FC | 	wrlong	arg02, fp
13360     08 4E 85 F1 | 	sub	fp, #8
13364     A7 12 02 F6 | 	mov	arg01, fp
13368     04 9A BF FD | 	call	#_converttoint
1336c     37 00 00 FF 
13370     3C E4 05 F1 | 	add	objptr, ##28220
13374     F2 FA 61 FC | 	wrlong	result1, objptr
13378     04 E4 85 F1 | 	sub	objptr, #4
1337c     F2 14 02 FB | 	rdlong	arg02, objptr
13380                 | ' 
13380                 | ' write_color:=ff
13380     36 00 00 FF 
13384     F7 E5 85 F1 | 	sub	objptr, ##28151
13388     F2 FA 61 FC | 	wrlong	result1, objptr
1338c                 | ' write_background:=bb
1338c     04 E4 05 F1 | 	add	objptr, #4
13390     F2 14 62 FC | 	wrlong	arg02, objptr
13394     36 00 00 FF 
13398     F7 E5 05 F1 | 	add	objptr, ##28151
1339c     F2 12 02 FB | 	rdlong	arg01, objptr
133a0     37 00 00 FF 
133a4     3C E4 85 F1 | 	sub	objptr, ##28220
133a8     98 DD B0 FD | 	call	#_hg010b_spin2_setcursorcolor
133ac     A7 F0 03 F6 | 	mov	ptra, fp
133b0     B2 00 A0 FD | 	call	#popregs_
133b4                 | _do_ink_ret
133b4     2D 00 64 FD | 	ret
133b8                 | 
133b8                 | ' 
133b8                 | ' ' ----------------  int
133b8                 | ' 
133b8                 | ' sub do_int
133b8                 | _do_int
133b8     02 4A 05 F6 | 	mov	COUNT_, #2
133bc     A8 00 A0 FD | 	call	#pushregs_
133c0     10 F0 07 F1 | 	add	ptra, #16
133c4     C4 97 BF FD | 	call	#_pop
133c8     FE 26 02 F6 | 	mov	local01, result2
133cc     FF 28 02 F6 | 	mov	local02, result3
133d0     A7 FA 61 FC | 	wrlong	result1, fp
133d4     04 4E 05 F1 | 	add	fp, #4
133d8     A7 26 62 FC | 	wrlong	local01, fp
133dc     04 4E 05 F1 | 	add	fp, #4
133e0     A7 28 62 FC | 	wrlong	local02, fp
133e4                 | ' 
133e4                 | ' t1=pop()
133e4                 | ' select case t1.result_type
133e4     08 4E 85 F1 | 	sub	fp, #8
133e8     1E 28 0E F2 | 	cmp	local02, #30 wz
133ec     14 00 90 AD |  if_e	jmp	#LR__1600
133f0     1F 28 0E F2 | 	cmp	local02, #31 wz
133f4     20 00 90 AD |  if_e	jmp	#LR__1601
133f8     2B 28 0E F2 | 	cmp	local02, #43 wz
133fc     34 00 90 AD |  if_e	jmp	#LR__1602
13400     50 00 90 FD | 	jmp	#LR__1603
13404                 | LR__1600
13404     A7 12 02 FB | 	rdlong	arg01, fp
13408     00 14 06 F6 | 	mov	arg02, #0
1340c     44 3E B1 FD | 	call	#__system___float_tointeger
13410     A7 FA 61 FC | 	wrlong	result1, fp
13414     3C 00 90 FD | 	jmp	#LR__1603
13418                 | LR__1601
13418     A7 12 02 FB | 	rdlong	arg01, fp
1341c     78 41 B1 FD | 	call	#__system____builtin_atof
13420     FD 12 02 F6 | 	mov	arg01, result1
13424     00 14 06 F6 | 	mov	arg02, #0
13428     28 3E B1 FD | 	call	#__system___float_tointeger
1342c     A7 FA 61 FC | 	wrlong	result1, fp
13430     20 00 90 FD | 	jmp	#LR__1603
13434                 | LR__1602
13434     A7 12 02 FB | 	rdlong	arg01, fp
13438     C8 98 BF FD | 	call	#_convertstring
1343c     FD 12 02 F6 | 	mov	arg01, result1
13440     54 41 B1 FD | 	call	#__system____builtin_atof
13444     FD 12 02 F6 | 	mov	arg01, result1
13448     00 14 06 F6 | 	mov	arg02, #0
1344c     04 3E B1 FD | 	call	#__system___float_tointeger
13450     A7 FA 61 FC | 	wrlong	result1, fp
13454                 | LR__1603
13454     08 4E 05 F1 | 	add	fp, #8
13458     A7 38 68 FC | 	wrlong	#28, fp
1345c     08 4E 85 F1 | 	sub	fp, #8
13460     A7 12 02 F6 | 	mov	arg01, fp
13464     BC 97 BF FD | 	call	#_push
13468     A7 F0 03 F6 | 	mov	ptra, fp
1346c     B2 00 A0 FD | 	call	#popregs_
13470                 | _do_int_ret
13470     2D 00 64 FD | 	ret
13474                 | 
13474                 | ' 
13474                 | ' ' ----------------  input
13474                 | ' 
13474                 | ' sub do_input
13474                 | _do_input
13474     11 4A 05 F6 | 	mov	COUNT_, #17
13478     A8 00 A0 FD | 	call	#pushregs_
1347c     50 F1 07 F1 | 	add	ptra, #336
13480     4A 00 00 FF 
13484     80 E4 05 F1 | 	add	objptr, ##38016
13488     F2 FE 01 FB | 	rdlong	result3, objptr
1348c     FF FC 01 F6 | 	mov	result2, result3
13490     01 FC 65 F0 | 	shl	result2, #1
13494     FF FC 01 F1 | 	add	result2, result3
13498     02 FC 65 F0 | 	shl	result2, #2
1349c     03 00 00 FF 
134a0     04 E4 85 F1 | 	sub	objptr, ##1540
134a4     F2 FC 01 F1 | 	add	result2, objptr
134a8     FE FC 01 FB | 	rdlong	result2, result2
134ac     08 4E 05 F1 | 	add	fp, #8
134b0     A7 FC 61 FC | 	wrlong	result2, fp
134b4                 | ' 
134b4                 | ' numpar=compiledline(lineptr_e).result.uresult
134b4                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
134b4     08 4E 85 F1 | 	sub	fp, #8
134b8     01 FC 15 F2 | 	cmp	result2, #1 wc
134bc     47 00 00 FF 
134c0     7C E4 85 F1 | 	sub	objptr, ##36476
134c4     14 00 90 CD |  if_b	jmp	#LR__1610
134c8     08 4E 05 F1 | 	add	fp, #8
134cc     A7 FC 01 FB | 	rdlong	result2, fp
134d0     08 4E 85 F1 | 	sub	fp, #8
134d4     41 FC 15 F2 | 	cmp	result2, #65 wc
134d8     50 00 90 CD |  if_b	jmp	#LR__1611
134dc                 | LR__1610
134dc     00 12 06 F6 | 	mov	arg01, #0
134e0     58 67 B1 FD | 	call	#__system___getiolock_0579
134e4     FD 12 02 F6 | 	mov	arg01, result1
134e8     28 0A B1 FD | 	call	#__system___lockmem
134ec     A1 01 00 FF 
134f0     69 15 06 F6 | 	mov	arg02, ##@LR__5748
134f4     00 12 06 F6 | 	mov	arg01, #0
134f8     00 16 06 F6 | 	mov	arg03, #0
134fc     08 17 B1 FD | 	call	#__system___basic_print_string
13500     00 12 06 F6 | 	mov	arg01, #0
13504     34 67 B1 FD | 	call	#__system___getiolock_0579
13508     FD 00 68 FC | 	wrlong	#0, result1
1350c     50 00 00 FF 
13510     F0 E4 05 F1 | 	add	objptr, ##41200
13514     F2 14 02 FB | 	rdlong	arg02, objptr
13518     50 00 00 FF 
1351c     F0 E4 85 F1 | 	sub	objptr, ##41200
13520     27 12 06 F6 | 	mov	arg01, #39
13524     48 D0 B0 FD | 	call	#_printerror
13528     44 0B 90 FD | 	jmp	#LR__1660
1352c                 | LR__1611
1352c     08 4E 05 F1 | 	add	fp, #8
13530     A7 FC 01 FB | 	rdlong	result2, fp
13534     01 FC 85 F1 | 	sub	result2, #1
13538     28 4F 05 F1 | 	add	fp, #296
1353c     A7 FC 61 FC | 	wrlong	result2, fp
13540     3C E4 05 F1 | 	add	objptr, #60
13544     F2 FC E1 FA | 	rdword	result2, objptr
13548     FE FC 51 F6 | 	abs	result2, result2 wc
1354c     01 FC 45 F0 | 	shr	result2, #1
13550     FE FC 81 F6 | 	negc	result2, result2
13554     0C 4E 05 F1 | 	add	fp, #12
13558     A7 FC 61 FC | 	wrlong	result2, fp
1355c     02 E4 05 F1 | 	add	objptr, #2
13560     F2 26 C2 FA | 	rdbyte	local01, objptr
13564     3E E4 85 F1 | 	sub	objptr, #62
13568     04 4E 05 F1 | 	add	fp, #4
1356c     A7 26 62 FC | 	wrlong	local01, fp
13570     40 4F 85 F1 | 	sub	fp, #320
13574                 | ' i=numpar-1
13574                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13574                 | ' do
13574                 | LR__1612
13574     8C D2 BE FD | 	call	#_edit
13578     A7 FA 61 FC | 	wrlong	result1, fp
1357c                 | ' 
1357c                 | '   line$=edit()
1357c                 | ' 
1357c                 | '   if v.cursor_y=cpy+1 then
1357c     3E E4 05 F1 | 	add	objptr, #62
13580     F2 26 C2 FA | 	rdbyte	local01, objptr
13584     3E E4 85 F1 | 	sub	objptr, #62
13588     40 4F 05 F1 | 	add	fp, #320
1358c     A7 16 02 FB | 	rdlong	arg03, fp
13590     40 4F 85 F1 | 	sub	fp, #320
13594     01 16 06 F1 | 	add	arg03, #1
13598     0B 27 0A F2 | 	cmp	local01, arg03 wz
1359c     6C 00 90 5D |  if_ne	jmp	#LR__1615
135a0     A7 26 02 FB | 	rdlong	local01, fp
135a4     13 13 02 F6 | 	mov	arg01, local01
135a8     09 29 02 F6 | 	mov	local02, arg01
135ac     97 06 48 FB | 	callpa	#(@LR__1614-@LR__1613)>>2,fcache_load_ptr_
135b0                 | LR__1613
135b0     14 FB C9 FA | 	rdbyte	result1, local02 wz
135b4     01 28 06 51 |  if_ne	add	local02, #1
135b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1613
135bc                 | LR__1614
135bc     09 29 82 F1 | 	sub	local02, arg01
135c0     14 15 02 F6 | 	mov	arg02, local02
135c4     3C 4F 05 F1 | 	add	fp, #316
135c8     A7 16 02 FB | 	rdlong	arg03, fp
135cc     3C 4F 85 F1 | 	sub	fp, #316
135d0     0B 15 82 F1 | 	sub	arg02, arg03
135d4     37 00 00 FF 
135d8     34 E4 05 F1 | 	add	objptr, ##28212
135dc     F2 16 02 FB | 	rdlong	arg03, objptr
135e0     37 00 00 FF 
135e4     34 E4 85 F1 | 	sub	objptr, ##28212
135e8     0B 15 02 F1 | 	add	arg02, arg03
135ec     13 13 02 F6 | 	mov	arg01, local01
135f0     24 2A B1 FD | 	call	#__system__Right_S
135f4     FD 12 02 F6 | 	mov	arg01, result1
135f8     24 2E B1 FD | 	call	#__system__RTrim_S
135fc     FD 12 02 F6 | 	mov	arg01, result1
13600     5C 2D B1 FD | 	call	#__system__LTrim_S
13604     A7 FA 61 FC | 	wrlong	result1, fp
13608     14 00 90 FD | 	jmp	#LR__1616
1360c                 | LR__1615
1360c     A7 12 02 FB | 	rdlong	arg01, fp
13610     0C 2E B1 FD | 	call	#__system__RTrim_S
13614     FD 12 02 F6 | 	mov	arg01, result1
13618     44 2D B1 FD | 	call	#__system__LTrim_S
1361c     A7 FA 61 FC | 	wrlong	result1, fp
13620                 | LR__1616
13620                 | '   do
13620                 | LR__1617
13620     A7 14 02 FB | 	rdlong	arg02, fp
13624     A1 01 00 FF 
13628     74 17 06 F6 | 	mov	arg03, ##@LR__5749
1362c     01 12 06 F6 | 	mov	arg01, #1
13630     A4 2E B1 FD | 	call	#__system__Instr
13634     0C 4E 05 F1 | 	add	fp, #12
13638     A7 FA 61 FC | 	wrlong	result1, fp
1363c                 | '    comma=instr(1,line$,",")  
1363c                 | '    if comma>0  then 
1363c     0C 4E 85 F1 | 	sub	fp, #12
13640     01 FA 15 F2 | 	cmp	result1, #1 wc
13644     68 00 90 CD |  if_b	jmp	#LR__1620
13648     A7 12 02 FB | 	rdlong	arg01, fp
1364c     0C 4E 05 F1 | 	add	fp, #12
13650     A7 14 02 FB | 	rdlong	arg02, fp
13654     0C 4E 85 F1 | 	sub	fp, #12
13658     01 14 86 F1 | 	sub	arg02, #1
1365c     30 29 B1 FD | 	call	#__system__Left_S
13660     04 4E 05 F1 | 	add	fp, #4
13664     A7 FA 61 FC | 	wrlong	result1, fp
13668     04 4E 85 F1 | 	sub	fp, #4
1366c     A7 26 02 FB | 	rdlong	local01, fp
13670     13 13 02 F6 | 	mov	arg01, local01
13674     09 29 02 F6 | 	mov	local02, arg01
13678     97 06 48 FB | 	callpa	#(@LR__1619-@LR__1618)>>2,fcache_load_ptr_
1367c                 | LR__1618
1367c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13680     01 28 06 51 |  if_ne	add	local02, #1
13684     F4 FF 9F 5D |  if_ne	jmp	#LR__1618
13688                 | LR__1619
13688     09 29 82 F1 | 	sub	local02, arg01
1368c     14 15 02 F6 | 	mov	arg02, local02
13690     0C 4E 05 F1 | 	add	fp, #12
13694     A7 16 02 FB | 	rdlong	arg03, fp
13698     0C 4E 85 F1 | 	sub	fp, #12
1369c     0B 15 82 F1 | 	sub	arg02, arg03
136a0     13 13 02 F6 | 	mov	arg01, local01
136a4     70 29 B1 FD | 	call	#__system__Right_S
136a8     A7 FA 61 FC | 	wrlong	result1, fp
136ac     28 00 90 FD | 	jmp	#LR__1621
136b0                 | LR__1620
136b0     A7 12 02 FB | 	rdlong	arg01, fp
136b4     68 2D B1 FD | 	call	#__system__RTrim_S
136b8     FD 12 02 F6 | 	mov	arg01, result1
136bc     A0 2C B1 FD | 	call	#__system__LTrim_S
136c0     04 4E 05 F1 | 	add	fp, #4
136c4     A7 FA 61 FC | 	wrlong	result1, fp
136c8     04 4E 85 F1 | 	sub	fp, #4
136cc     A1 01 00 FF 
136d0     76 27 06 F6 | 	mov	local01, ##@LR__5750
136d4     A7 26 62 FC | 	wrlong	local01, fp
136d8                 | LR__1621
136d8     30 4F 05 F1 | 	add	fp, #304
136dc     A7 26 02 FB | 	rdlong	local01, fp
136e0     02 26 66 F0 | 	shl	local01, #2
136e4     04 4F 85 F1 | 	sub	fp, #260
136e8     A7 26 02 F1 | 	add	local01, fp
136ec     28 4E 85 F1 | 	sub	fp, #40
136f0     A7 FA 01 FB | 	rdlong	result1, fp
136f4     13 FB 61 FC | 	wrlong	result1, local01
136f8     2C 4F 05 F1 | 	add	fp, #300
136fc     A7 26 02 FB | 	rdlong	local01, fp
13700     01 26 86 F1 | 	sub	local01, #1
13704     A7 26 62 FC | 	wrlong	local01, fp
13708     30 4F 85 F1 | 	sub	fp, #304
1370c     00 26 56 F2 | 	cmps	local01, #0 wc
13710     18 00 90 CD |  if_b	jmp	#LR__1622
13714     A7 12 02 FB | 	rdlong	arg01, fp
13718     A1 01 00 FF 
1371c     77 15 06 F6 | 	mov	arg02, ##@LR__5751
13720     18 08 B1 FD | 	call	#__system___string_cmp
13724     00 FA 0D F2 | 	cmp	result1, #0 wz
13728     F4 FE 9F 5D |  if_ne	jmp	#LR__1617
1372c                 | LR__1622
1372c     30 4F 05 F1 | 	add	fp, #304
13730     A7 26 02 FB | 	rdlong	local01, fp
13734     30 4F 85 F1 | 	sub	fp, #304
13738     00 26 56 F2 | 	cmps	local01, #0 wc
1373c     34 FE 9F 3D |  if_ae	jmp	#LR__1612
13740                 | ' 
13740                 | ' for i=0 to numpar-1
13740     30 4F 05 F1 | 	add	fp, #304
13744     A7 00 68 FC | 	wrlong	#0, fp
13748     28 4F 85 F1 | 	sub	fp, #296
1374c     A7 2A 02 FB | 	rdlong	local03, fp
13750     08 4E 85 F1 | 	sub	fp, #8
13754                 | LR__1623
13754     30 4F 05 F1 | 	add	fp, #304
13758     A7 2C 02 FB | 	rdlong	local04, fp
1375c     30 4F 85 F1 | 	sub	fp, #304
13760     16 27 02 F6 | 	mov	local01, local04
13764     15 27 52 F2 | 	cmps	local01, local03 wc
13768     04 09 90 3D |  if_ae	jmp	#LR__1659
1376c                 | ' 
1376c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1376c     30 4F 05 F1 | 	add	fp, #304
13770     A7 16 02 FB | 	rdlong	arg03, fp
13774     02 16 66 F0 | 	shl	arg03, #2
13778     04 4F 85 F1 | 	sub	fp, #260
1377c     A7 16 02 F1 | 	add	arg03, fp
13780     0B 13 02 FB | 	rdlong	arg01, arg03
13784     2C 4E 85 F1 | 	sub	fp, #44
13788     1C 2C BF FD | 	call	#_isnum
1378c     FD 2E 02 F6 | 	mov	local05, result1
13790     30 4F 05 F1 | 	add	fp, #304
13794     A7 16 02 FB | 	rdlong	arg03, fp
13798     02 16 66 F0 | 	shl	arg03, #2
1379c     04 4F 85 F1 | 	sub	fp, #260
137a0     A7 30 02 F6 | 	mov	local06, fp
137a4     A7 16 02 F1 | 	add	arg03, fp
137a8     0B 13 02 FB | 	rdlong	arg01, arg03
137ac     2C 4E 85 F1 | 	sub	fp, #44
137b0     E0 2F BF FD | 	call	#_isint
137b4     FD 2E 2A F5 | 	andn	local05, result1 wz
137b8     52 00 00 5F 
137bc     20 E4 05 51 |  if_ne	add	objptr, ##42016
137c0     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
137c4     52 00 00 5F 
137c8     20 E4 85 51 |  if_ne	sub	objptr, ##42016
137cc                 | '   if isint(args(i)) then r=result_int 
137cc     30 4F 05 F1 | 	add	fp, #304
137d0     A7 2E 02 FB | 	rdlong	local05, fp
137d4     02 2E 66 F0 | 	shl	local05, #2
137d8     04 4F 85 F1 | 	sub	fp, #260
137dc     A7 2E 02 F1 | 	add	local05, fp
137e0     17 13 02 FB | 	rdlong	arg01, local05
137e4     2C 4E 85 F1 | 	sub	fp, #44
137e8     A8 2F BF FD | 	call	#_isint
137ec     00 FA 0D F2 | 	cmp	result1, #0 wz
137f0     52 00 00 5F 
137f4     20 E4 05 51 |  if_ne	add	objptr, ##42016
137f8     F2 38 68 5C |  if_ne	wrlong	#28, objptr
137fc     52 00 00 5F 
13800     20 E4 85 51 |  if_ne	sub	objptr, ##42016
13804                 | '   if isdec(args(i)) then r=result_uint 
13804     30 4F 05 F1 | 	add	fp, #304
13808     A7 2E 02 FB | 	rdlong	local05, fp
1380c     02 2E 66 F0 | 	shl	local05, #2
13810     04 4F 85 F1 | 	sub	fp, #260
13814     A7 2E 02 F1 | 	add	local05, fp
13818     17 13 02 FB | 	rdlong	arg01, local05
1381c     2C 4E 85 F1 | 	sub	fp, #44
13820     14 32 BF FD | 	call	#_isdec
13824     00 FA 0D F2 | 	cmp	result1, #0 wz
13828     52 00 00 5F 
1382c     20 E4 05 51 |  if_ne	add	objptr, ##42016
13830     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13834     52 00 00 5F 
13838     20 E4 85 51 |  if_ne	sub	objptr, ##42016
1383c                 | '   if not isnum(args(i)) then 
1383c     30 4F 05 F1 | 	add	fp, #304
13840     A7 32 02 FB | 	rdlong	local07, fp
13844     19 35 02 F6 | 	mov	local08, local07
13848     02 34 66 F0 | 	shl	local08, #2
1384c     04 4F 85 F1 | 	sub	fp, #260
13850     A7 36 02 F6 | 	mov	local09, fp
13854     A7 34 02 F1 | 	add	local08, fp
13858     1A 13 02 FB | 	rdlong	arg01, local08
1385c     2C 4E 85 F1 | 	sub	fp, #44
13860     44 2B BF FD | 	call	#_isnum
13864     FD 2E 22 F6 | 	not	local05, result1
13868     00 2E 0E F2 | 	cmp	local05, #0 wz
1386c     44 01 90 AD |  if_e	jmp	#LR__1628
13870     52 00 00 FF 
13874     20 E4 05 F1 | 	add	objptr, ##42016
13878     F2 56 68 FC | 	wrlong	#43, objptr
1387c     52 00 00 FF 
13880     20 E4 85 F1 | 	sub	objptr, ##42016
13884     04 4E 05 F1 | 	add	fp, #4
13888     A7 12 02 FB | 	rdlong	arg01, fp
1388c     04 4E 85 F1 | 	sub	fp, #4
13890     09 29 02 F6 | 	mov	local02, arg01
13894     97 06 48 FB | 	callpa	#(@LR__1625-@LR__1624)>>2,fcache_load_ptr_
13898                 | LR__1624
13898     14 FB C9 FA | 	rdbyte	result1, local02 wz
1389c     01 28 06 51 |  if_ne	add	local02, #1
138a0     F4 FF 9F 5D |  if_ne	jmp	#LR__1624
138a4                 | LR__1625
138a4     09 29 82 F1 | 	sub	local02, arg01
138a8     14 33 02 F6 | 	mov	local07, local02
138ac     38 4F 05 F1 | 	add	fp, #312
138b0     A7 32 62 FC | 	wrlong	local07, fp
138b4     51 00 00 FF 
138b8     AC E5 05 F1 | 	add	objptr, ##41900
138bc     F2 12 02 FB | 	rdlong	arg01, objptr
138c0     19 13 82 F1 | 	sub	arg01, local07
138c4     04 12 86 F1 | 	sub	arg01, #4
138c8     03 12 26 F5 | 	andn	arg01, #3
138cc     F2 12 62 FC | 	wrlong	arg01, objptr
138d0     51 00 00 FF 
138d4     AC E5 85 F1 | 	sub	objptr, ##41900
138d8     A7 14 02 FB | 	rdlong	arg02, fp
138dc     38 4F 85 F1 | 	sub	fp, #312
138e0     2C CE B0 FD | 	call	#_pslpoke
138e4                 | '     pslpoke memtop,l
138e4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
138e4     34 4F 05 F1 | 	add	fp, #308
138e8     A7 02 68 FC | 	wrlong	#1, fp
138ec     04 4E 05 F1 | 	add	fp, #4
138f0     A7 38 02 FB | 	rdlong	local10, fp
138f4     38 4F 85 F1 | 	sub	fp, #312
138f8     01 38 06 F1 | 	add	local10, #1
138fc                 | LR__1626
138fc     34 4F 05 F1 | 	add	fp, #308
13900     A7 2E 02 FB | 	rdlong	local05, fp
13904     34 4F 85 F1 | 	sub	fp, #308
13908     1C 2F 52 F2 | 	cmps	local05, local10 wc
1390c     84 00 90 3D |  if_ae	jmp	#LR__1627
13910     51 00 00 FF 
13914     AC E5 05 F1 | 	add	objptr, ##41900
13918     F2 32 02 FB | 	rdlong	local07, objptr
1391c     51 00 00 FF 
13920     AC E5 85 F1 | 	sub	objptr, ##41900
13924     03 32 06 F1 | 	add	local07, #3
13928     34 4F 05 F1 | 	add	fp, #308
1392c     A7 3A 02 FB | 	rdlong	local11, fp
13930     1D 33 02 F1 | 	add	local07, local11
13934     04 4E 85 F1 | 	sub	fp, #4
13938     A7 3C 02 FB | 	rdlong	local12, fp
1393c     02 3C 66 F0 | 	shl	local12, #2
13940     04 4F 85 F1 | 	sub	fp, #260
13944     A7 3E 02 F6 | 	mov	local13, fp
13948     A7 3C 02 F1 | 	add	local12, fp
1394c     1E 13 02 FB | 	rdlong	arg01, local12
13950     2C 4E 85 F1 | 	sub	fp, #44
13954     01 40 06 F6 | 	mov	local14, #1
13958     1D 15 02 F6 | 	mov	arg02, local11
1395c     01 16 06 F6 | 	mov	arg03, #1
13960     44 27 B1 FD | 	call	#__system__Mid_S
13964     FD 14 C2 FA | 	rdbyte	arg02, result1
13968     19 13 02 F6 | 	mov	arg01, local07
1396c     30 CE B0 FD | 	call	#_pspoke
13970     34 4F 05 F1 | 	add	fp, #308
13974     A7 34 02 FB | 	rdlong	local08, fp
13978     1A 33 02 F6 | 	mov	local07, local08
1397c     1A 31 02 F6 | 	mov	local06, local08
13980     18 37 02 F6 | 	mov	local09, local06
13984     01 36 06 F1 | 	add	local09, #1
13988     A7 36 62 FC | 	wrlong	local09, fp
1398c     34 4F 85 F1 | 	sub	fp, #308
13990     68 FF 9F FD | 	jmp	#LR__1626
13994                 | LR__1627
13994     51 00 00 FF 
13998     AC E5 05 F1 | 	add	objptr, ##41900
1399c     F2 2E 02 FB | 	rdlong	local05, objptr
139a0     51 00 00 FF 
139a4     AC E5 85 F1 | 	sub	objptr, ##41900
139a8     10 4E 05 F1 | 	add	fp, #16
139ac     A7 2E 62 FC | 	wrlong	local05, fp
139b0     10 4E 85 F1 | 	sub	fp, #16
139b4                 | LR__1628
139b4     D4 91 BF FD | 	call	#_pop
139b8     FE 2E 02 F6 | 	mov	local05, result2
139bc     FF 42 02 F6 | 	mov	local15, result3
139c0     1C 4E 05 F1 | 	add	fp, #28
139c4     A7 FA 61 FC | 	wrlong	result1, fp
139c8     04 4E 05 F1 | 	add	fp, #4
139cc     A7 2E 62 FC | 	wrlong	local05, fp
139d0     04 4E 05 F1 | 	add	fp, #4
139d4     A7 42 62 FC | 	wrlong	local15, fp
139d8     04 4E 85 F1 | 	sub	fp, #4
139dc     A7 44 02 FB | 	rdlong	local16, fp
139e0     0C 4E 85 F1 | 	sub	fp, #12
139e4     A7 44 62 FC | 	wrlong	local16, fp
139e8                 | '   t1=pop() : vartype=t1.result.twowords(1)
139e8                 | '   select case vartype
139e8     14 4E 85 F1 | 	sub	fp, #20
139ec     22 47 0A F6 | 	mov	local17, local16 wz
139f0     64 00 90 AD |  if_e	jmp	#LR__1629
139f4     00 47 0E F2 | 	cmp	local17, #256 wz
139f8     6C 00 90 AD |  if_e	jmp	#LR__1630
139fc     01 47 0E F2 | 	cmp	local17, #257 wz
13a00     74 00 90 AD |  if_e	jmp	#LR__1631
13a04     02 47 0E F2 | 	cmp	local17, #258 wz
13a08     7C 00 90 AD |  if_e	jmp	#LR__1632
13a0c     03 47 0E F2 | 	cmp	local17, #259 wz
13a10     84 00 90 AD |  if_e	jmp	#LR__1633
13a14     04 47 0E F2 | 	cmp	local17, #260 wz
13a18     8C 00 90 AD |  if_e	jmp	#LR__1634
13a1c     05 47 0E F2 | 	cmp	local17, #261 wz
13a20     94 00 90 AD |  if_e	jmp	#LR__1635
13a24     06 47 0E F2 | 	cmp	local17, #262 wz
13a28     9C 00 90 AD |  if_e	jmp	#LR__1636
13a2c     07 47 0E F2 | 	cmp	local17, #263 wz
13a30     A4 00 90 AD |  if_e	jmp	#LR__1637
13a34     08 47 0E F2 | 	cmp	local17, #264 wz
13a38     AC 00 90 AD |  if_e	jmp	#LR__1638
13a3c     09 47 0E F2 | 	cmp	local17, #265 wz
13a40     B4 00 90 AD |  if_e	jmp	#LR__1639
13a44     0A 47 0E F2 | 	cmp	local17, #266 wz
13a48     BC 00 90 AD |  if_e	jmp	#LR__1640
13a4c     0B 47 0E F2 | 	cmp	local17, #267 wz
13a50     C4 00 90 AD |  if_e	jmp	#LR__1641
13a54     D0 00 90 FD | 	jmp	#LR__1642
13a58                 | LR__1629
13a58     18 4E 05 F1 | 	add	fp, #24
13a5c     A7 18 68 FC | 	wrlong	#12, fp
13a60     18 4E 85 F1 | 	sub	fp, #24
13a64     CC 00 90 FD | 	jmp	#LR__1643
13a68                 | LR__1630
13a68     18 4E 05 F1 | 	add	fp, #24
13a6c     A7 18 68 FC | 	wrlong	#12, fp
13a70     18 4E 85 F1 | 	sub	fp, #24
13a74     BC 00 90 FD | 	jmp	#LR__1643
13a78                 | LR__1631
13a78     18 4E 05 F1 | 	add	fp, #24
13a7c     A7 02 68 FC | 	wrlong	#1, fp
13a80     18 4E 85 F1 | 	sub	fp, #24
13a84     AC 00 90 FD | 	jmp	#LR__1643
13a88                 | LR__1632
13a88     18 4E 05 F1 | 	add	fp, #24
13a8c     A7 02 68 FC | 	wrlong	#1, fp
13a90     18 4E 85 F1 | 	sub	fp, #24
13a94     9C 00 90 FD | 	jmp	#LR__1643
13a98                 | LR__1633
13a98     18 4E 05 F1 | 	add	fp, #24
13a9c     A7 04 68 FC | 	wrlong	#2, fp
13aa0     18 4E 85 F1 | 	sub	fp, #24
13aa4     8C 00 90 FD | 	jmp	#LR__1643
13aa8                 | LR__1634
13aa8     18 4E 05 F1 | 	add	fp, #24
13aac     A7 04 68 FC | 	wrlong	#2, fp
13ab0     18 4E 85 F1 | 	sub	fp, #24
13ab4     7C 00 90 FD | 	jmp	#LR__1643
13ab8                 | LR__1635
13ab8     18 4E 05 F1 | 	add	fp, #24
13abc     A7 08 68 FC | 	wrlong	#4, fp
13ac0     18 4E 85 F1 | 	sub	fp, #24
13ac4     6C 00 90 FD | 	jmp	#LR__1643
13ac8                 | LR__1636
13ac8     18 4E 05 F1 | 	add	fp, #24
13acc     A7 08 68 FC | 	wrlong	#4, fp
13ad0     18 4E 85 F1 | 	sub	fp, #24
13ad4     5C 00 90 FD | 	jmp	#LR__1643
13ad8                 | LR__1637
13ad8     18 4E 05 F1 | 	add	fp, #24
13adc     A7 10 68 FC | 	wrlong	#8, fp
13ae0     18 4E 85 F1 | 	sub	fp, #24
13ae4     4C 00 90 FD | 	jmp	#LR__1643
13ae8                 | LR__1638
13ae8     18 4E 05 F1 | 	add	fp, #24
13aec     A7 10 68 FC | 	wrlong	#8, fp
13af0     18 4E 85 F1 | 	sub	fp, #24
13af4     3C 00 90 FD | 	jmp	#LR__1643
13af8                 | LR__1639
13af8     18 4E 05 F1 | 	add	fp, #24
13afc     A7 0C 68 FC | 	wrlong	#6, fp
13b00     18 4E 85 F1 | 	sub	fp, #24
13b04     2C 00 90 FD | 	jmp	#LR__1643
13b08                 | LR__1640
13b08     18 4E 05 F1 | 	add	fp, #24
13b0c     A7 10 68 FC | 	wrlong	#8, fp
13b10     18 4E 85 F1 | 	sub	fp, #24
13b14     1C 00 90 FD | 	jmp	#LR__1643
13b18                 | LR__1641
13b18     18 4E 05 F1 | 	add	fp, #24
13b1c     A7 0A 68 FC | 	wrlong	#5, fp
13b20     18 4E 85 F1 | 	sub	fp, #24
13b24     0C 00 90 FD | 	jmp	#LR__1643
13b28                 | LR__1642
13b28     18 4E 05 F1 | 	add	fp, #24
13b2c     A7 18 68 FC | 	wrlong	#12, fp
13b30     18 4E 85 F1 | 	sub	fp, #24
13b34                 | LR__1643
13b34                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13b34     18 4E 05 F1 | 	add	fp, #24
13b38     A7 44 02 FB | 	rdlong	local16, fp
13b3c     18 4E 85 F1 | 	sub	fp, #24
13b40     0C 44 0E F2 | 	cmp	local16, #12 wz
13b44     74 01 90 5D |  if_ne	jmp	#LR__1648
13b48     1C 4E 05 F1 | 	add	fp, #28
13b4c     A7 32 02 FB | 	rdlong	local07, fp
13b50     1C 4E 85 F1 | 	sub	fp, #28
13b54     00 04 00 FF 
13b58     00 32 16 F2 | 	cmp	local07, ##524288 wc
13b5c     5C 01 90 3D |  if_ae	jmp	#LR__1648
13b60                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13b60     52 00 00 FF 
13b64     20 E4 05 F1 | 	add	objptr, ##42016
13b68     F2 44 02 FB | 	rdlong	local16, objptr
13b6c     52 00 00 FF 
13b70     20 E4 85 F1 | 	sub	objptr, ##42016
13b74     1C 44 0E F2 | 	cmp	local16, #28 wz
13b78     38 00 90 5D |  if_ne	jmp	#LR__1644
13b7c     1C 4E 05 F1 | 	add	fp, #28
13b80     A7 44 02 FB | 	rdlong	local16, fp
13b84     14 4F 05 F1 | 	add	fp, #276
13b88     A7 32 02 FB | 	rdlong	local07, fp
13b8c     19 35 02 F6 | 	mov	local08, local07
13b90     02 34 66 F0 | 	shl	local08, #2
13b94     04 4F 85 F1 | 	sub	fp, #260
13b98     A7 36 02 F6 | 	mov	local09, fp
13b9c     A7 34 02 F1 | 	add	local08, fp
13ba0     1A 13 02 FB | 	rdlong	arg01, local08
13ba4     00 14 06 F6 | 	mov	arg02, #0
13ba8     2C 4E 85 F1 | 	sub	fp, #44
13bac     54 38 B1 FD | 	call	#__system____builtin_atoi
13bb0     22 FB 61 FC | 	wrlong	result1, local16
13bb4                 | LR__1644
13bb4                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13bb4     52 00 00 FF 
13bb8     20 E4 05 F1 | 	add	objptr, ##42016
13bbc     F2 44 02 FB | 	rdlong	local16, objptr
13bc0     52 00 00 FF 
13bc4     20 E4 85 F1 | 	sub	objptr, ##42016
13bc8     1D 44 0E F2 | 	cmp	local16, #29 wz
13bcc     38 00 90 5D |  if_ne	jmp	#LR__1645
13bd0     1C 4E 05 F1 | 	add	fp, #28
13bd4     A7 44 02 FB | 	rdlong	local16, fp
13bd8     14 4F 05 F1 | 	add	fp, #276
13bdc     A7 32 02 FB | 	rdlong	local07, fp
13be0     19 35 02 F6 | 	mov	local08, local07
13be4     02 34 66 F0 | 	shl	local08, #2
13be8     04 4F 85 F1 | 	sub	fp, #260
13bec     A7 36 02 F6 | 	mov	local09, fp
13bf0     A7 34 02 F1 | 	add	local08, fp
13bf4     1A 13 02 FB | 	rdlong	arg01, local08
13bf8     00 14 06 F6 | 	mov	arg02, #0
13bfc     2C 4E 85 F1 | 	sub	fp, #44
13c00     00 38 B1 FD | 	call	#__system____builtin_atoi
13c04     22 FB 61 FC | 	wrlong	result1, local16
13c08                 | LR__1645
13c08                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13c08     52 00 00 FF 
13c0c     20 E4 05 F1 | 	add	objptr, ##42016
13c10     F2 44 02 FB | 	rdlong	local16, objptr
13c14     52 00 00 FF 
13c18     20 E4 85 F1 | 	sub	objptr, ##42016
13c1c     1E 44 0E F2 | 	cmp	local16, #30 wz
13c20     3C 00 90 5D |  if_ne	jmp	#LR__1646
13c24     30 4F 05 F1 | 	add	fp, #304
13c28     A7 32 02 FB | 	rdlong	local07, fp
13c2c     02 32 66 F0 | 	shl	local07, #2
13c30     04 4F 85 F1 | 	sub	fp, #260
13c34     A7 34 02 F6 | 	mov	local08, fp
13c38     A7 32 02 F1 | 	add	local07, fp
13c3c     19 13 02 FB | 	rdlong	arg01, local07
13c40     2C 4E 85 F1 | 	sub	fp, #44
13c44     50 39 B1 FD | 	call	#__system____builtin_atof
13c48     28 4E 05 F1 | 	add	fp, #40
13c4c     A7 FA 61 FC | 	wrlong	result1, fp
13c50     0C 4E 85 F1 | 	sub	fp, #12
13c54     A7 44 02 FB | 	rdlong	local16, fp
13c58     1C 4E 85 F1 | 	sub	fp, #28
13c5c     22 FB 61 FC | 	wrlong	result1, local16
13c60                 | LR__1646
13c60                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13c60     52 00 00 FF 
13c64     20 E4 05 F1 | 	add	objptr, ##42016
13c68     F2 44 02 FB | 	rdlong	local16, objptr
13c6c     52 00 00 FF 
13c70     20 E4 85 F1 | 	sub	objptr, ##42016
13c74     2B 44 0E F2 | 	cmp	local16, #43 wz
13c78     18 00 90 5D |  if_ne	jmp	#LR__1647
13c7c     1C 4E 05 F1 | 	add	fp, #28
13c80     A7 12 02 FB | 	rdlong	arg01, fp
13c84     0C 4E 85 F1 | 	sub	fp, #12
13c88     A7 14 02 FB | 	rdlong	arg02, fp
13c8c     10 4E 85 F1 | 	sub	fp, #16
13c90     09 15 62 FC | 	wrlong	arg02, arg01
13c94                 | LR__1647
13c94     1C 4E 05 F1 | 	add	fp, #28
13c98     A7 12 02 FB | 	rdlong	arg01, fp
13c9c     1C 4E 85 F1 | 	sub	fp, #28
13ca0     08 12 06 F1 | 	add	arg01, #8
13ca4     52 00 00 FF 
13ca8     20 E4 05 F1 | 	add	objptr, ##42016
13cac     F2 14 02 FB | 	rdlong	arg02, objptr
13cb0     52 00 00 FF 
13cb4     20 E4 85 F1 | 	sub	objptr, ##42016
13cb8     09 15 62 FC | 	wrlong	arg02, arg01
13cbc                 | LR__1648
13cbc                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13cbc     18 4E 05 F1 | 	add	fp, #24
13cc0     A7 44 02 FB | 	rdlong	local16, fp
13cc4     18 4E 85 F1 | 	sub	fp, #24
13cc8     0C 44 0E F2 | 	cmp	local16, #12 wz
13ccc     94 01 90 5D |  if_ne	jmp	#LR__1653
13cd0     1C 4E 05 F1 | 	add	fp, #28
13cd4     A7 32 02 FB | 	rdlong	local07, fp
13cd8     1C 4E 85 F1 | 	sub	fp, #28
13cdc     00 04 00 FF 
13ce0     00 32 16 F2 | 	cmp	local07, ##524288 wc
13ce4     7C 01 90 CD |  if_b	jmp	#LR__1653
13ce8                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13ce8     52 00 00 FF 
13cec     20 E4 05 F1 | 	add	objptr, ##42016
13cf0     F2 44 02 FB | 	rdlong	local16, objptr
13cf4     52 00 00 FF 
13cf8     20 E4 85 F1 | 	sub	objptr, ##42016
13cfc     1C 44 0E F2 | 	cmp	local16, #28 wz
13d00     40 00 90 5D |  if_ne	jmp	#LR__1649
13d04     1C 4E 05 F1 | 	add	fp, #28
13d08     A7 44 02 FB | 	rdlong	local16, fp
13d0c     14 4F 05 F1 | 	add	fp, #276
13d10     A7 32 02 FB | 	rdlong	local07, fp
13d14     19 35 02 F6 | 	mov	local08, local07
13d18     02 34 66 F0 | 	shl	local08, #2
13d1c     04 4F 85 F1 | 	sub	fp, #260
13d20     A7 36 02 F6 | 	mov	local09, fp
13d24     A7 34 02 F1 | 	add	local08, fp
13d28     1A 13 02 FB | 	rdlong	arg01, local08
13d2c     00 14 06 F6 | 	mov	arg02, #0
13d30     2C 4E 85 F1 | 	sub	fp, #44
13d34     CC 36 B1 FD | 	call	#__system____builtin_atoi
13d38     FD 14 02 F6 | 	mov	arg02, result1
13d3c     22 13 02 F6 | 	mov	arg01, local16
13d40     CC C9 B0 FD | 	call	#_pslpoke
13d44                 | LR__1649
13d44                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13d44     52 00 00 FF 
13d48     20 E4 05 F1 | 	add	objptr, ##42016
13d4c     F2 44 02 FB | 	rdlong	local16, objptr
13d50     52 00 00 FF 
13d54     20 E4 85 F1 | 	sub	objptr, ##42016
13d58     1D 44 0E F2 | 	cmp	local16, #29 wz
13d5c     40 00 90 5D |  if_ne	jmp	#LR__1650
13d60     1C 4E 05 F1 | 	add	fp, #28
13d64     A7 44 02 FB | 	rdlong	local16, fp
13d68     14 4F 05 F1 | 	add	fp, #276
13d6c     A7 32 02 FB | 	rdlong	local07, fp
13d70     19 35 02 F6 | 	mov	local08, local07
13d74     02 34 66 F0 | 	shl	local08, #2
13d78     04 4F 85 F1 | 	sub	fp, #260
13d7c     A7 36 02 F6 | 	mov	local09, fp
13d80     A7 34 02 F1 | 	add	local08, fp
13d84     1A 13 02 FB | 	rdlong	arg01, local08
13d88     00 14 06 F6 | 	mov	arg02, #0
13d8c     2C 4E 85 F1 | 	sub	fp, #44
13d90     70 36 B1 FD | 	call	#__system____builtin_atoi
13d94     FD 14 02 F6 | 	mov	arg02, result1
13d98     22 13 02 F6 | 	mov	arg01, local16
13d9c     70 C9 B0 FD | 	call	#_pslpoke
13da0                 | LR__1650
13da0                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13da0     52 00 00 FF 
13da4     20 E4 05 F1 | 	add	objptr, ##42016
13da8     F2 44 02 FB | 	rdlong	local16, objptr
13dac     52 00 00 FF 
13db0     20 E4 85 F1 | 	sub	objptr, ##42016
13db4     1E 44 0E F2 | 	cmp	local16, #30 wz
13db8     4C 00 90 5D |  if_ne	jmp	#LR__1651
13dbc     30 4F 05 F1 | 	add	fp, #304
13dc0     A7 32 02 FB | 	rdlong	local07, fp
13dc4     02 32 66 F0 | 	shl	local07, #2
13dc8     04 4F 85 F1 | 	sub	fp, #260
13dcc     A7 34 02 F6 | 	mov	local08, fp
13dd0     A7 32 02 F1 | 	add	local07, fp
13dd4     19 13 02 FB | 	rdlong	arg01, local07
13dd8     2C 4E 85 F1 | 	sub	fp, #44
13ddc     B8 37 B1 FD | 	call	#__system____builtin_atof
13de0     28 4E 05 F1 | 	add	fp, #40
13de4     A7 FA 61 FC | 	wrlong	result1, fp
13de8     0C 4E 85 F1 | 	sub	fp, #12
13dec     A7 44 02 FB | 	rdlong	local16, fp
13df0     0C 4E 05 F1 | 	add	fp, #12
13df4     A7 12 02 F6 | 	mov	arg01, fp
13df8     28 4E 85 F1 | 	sub	fp, #40
13dfc     09 15 02 FB | 	rdlong	arg02, arg01
13e00     22 13 02 F6 | 	mov	arg01, local16
13e04     08 C9 B0 FD | 	call	#_pslpoke
13e08                 | LR__1651
13e08                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13e08     52 00 00 FF 
13e0c     20 E4 05 F1 | 	add	objptr, ##42016
13e10     F2 44 02 FB | 	rdlong	local16, objptr
13e14     52 00 00 FF 
13e18     20 E4 85 F1 | 	sub	objptr, ##42016
13e1c     2B 44 0E F2 | 	cmp	local16, #43 wz
13e20     18 00 90 5D |  if_ne	jmp	#LR__1652
13e24     1C 4E 05 F1 | 	add	fp, #28
13e28     A7 12 02 FB | 	rdlong	arg01, fp
13e2c     0C 4E 85 F1 | 	sub	fp, #12
13e30     A7 14 02 FB | 	rdlong	arg02, fp
13e34     10 4E 85 F1 | 	sub	fp, #16
13e38     D4 C8 B0 FD | 	call	#_pslpoke
13e3c                 | LR__1652
13e3c     1C 4E 05 F1 | 	add	fp, #28
13e40     A7 12 02 FB | 	rdlong	arg01, fp
13e44     1C 4E 85 F1 | 	sub	fp, #28
13e48     08 12 06 F1 | 	add	arg01, #8
13e4c     52 00 00 FF 
13e50     20 E4 05 F1 | 	add	objptr, ##42016
13e54     F2 14 02 FB | 	rdlong	arg02, objptr
13e58     52 00 00 FF 
13e5c     20 E4 85 F1 | 	sub	objptr, ##42016
13e60     AC C8 B0 FD | 	call	#_pslpoke
13e64                 | LR__1653
13e64                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13e64     18 4E 05 F1 | 	add	fp, #24
13e68     A7 44 02 FB | 	rdlong	local16, fp
13e6c     18 4E 85 F1 | 	sub	fp, #24
13e70     05 44 0E F2 | 	cmp	local16, #5 wz
13e74     52 00 00 AF 
13e78     20 E4 05 A1 |  if_e	add	objptr, ##42016
13e7c     F2 42 02 AB |  if_e	rdlong	local15, objptr
13e80     52 00 00 AF 
13e84     20 E4 85 A1 |  if_e	sub	objptr, ##42016
13e88     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13e8c     18 00 90 5D |  if_ne	jmp	#LR__1654
13e90     1C 4E 05 F1 | 	add	fp, #28
13e94     A7 12 02 FB | 	rdlong	arg01, fp
13e98     0C 4E 85 F1 | 	sub	fp, #12
13e9c     A7 14 02 FB | 	rdlong	arg02, fp
13ea0     10 4E 85 F1 | 	sub	fp, #16
13ea4     68 C8 B0 FD | 	call	#_pslpoke
13ea8                 | LR__1654
13ea8                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13ea8     18 4E 05 F1 | 	add	fp, #24
13eac     A7 44 02 FB | 	rdlong	local16, fp
13eb0     18 4E 85 F1 | 	sub	fp, #24
13eb4     04 44 0E F2 | 	cmp	local16, #4 wz
13eb8     54 00 90 5D |  if_ne	jmp	#LR__1655
13ebc     52 00 00 FF 
13ec0     20 E4 05 F1 | 	add	objptr, ##42016
13ec4     F2 42 02 FB | 	rdlong	local15, objptr
13ec8     52 00 00 FF 
13ecc     20 E4 85 F1 | 	sub	objptr, ##42016
13ed0     2B 42 0E F2 | 	cmp	local15, #43 wz
13ed4     38 00 90 AD |  if_e	jmp	#LR__1655
13ed8     1C 4E 05 F1 | 	add	fp, #28
13edc     A7 44 02 FB | 	rdlong	local16, fp
13ee0     14 4F 05 F1 | 	add	fp, #276
13ee4     A7 34 02 FB | 	rdlong	local08, fp
13ee8     02 34 66 F0 | 	shl	local08, #2
13eec     04 4F 85 F1 | 	sub	fp, #260
13ef0     A7 34 02 F1 | 	add	local08, fp
13ef4     1A 13 02 FB | 	rdlong	arg01, local08
13ef8     00 14 06 F6 | 	mov	arg02, #0
13efc     2C 4E 85 F1 | 	sub	fp, #44
13f00     00 35 B1 FD | 	call	#__system____builtin_atoi
13f04     FD 14 02 F6 | 	mov	arg02, result1
13f08     22 13 02 F6 | 	mov	arg01, local16
13f0c     00 C8 B0 FD | 	call	#_pslpoke
13f10                 | LR__1655
13f10                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13f10     18 4E 05 F1 | 	add	fp, #24
13f14     A7 44 02 FB | 	rdlong	local16, fp
13f18     18 4E 85 F1 | 	sub	fp, #24
13f1c     02 44 0E F2 | 	cmp	local16, #2 wz
13f20     54 00 90 5D |  if_ne	jmp	#LR__1656
13f24     52 00 00 FF 
13f28     20 E4 05 F1 | 	add	objptr, ##42016
13f2c     F2 42 02 FB | 	rdlong	local15, objptr
13f30     52 00 00 FF 
13f34     20 E4 85 F1 | 	sub	objptr, ##42016
13f38     2B 42 0E F2 | 	cmp	local15, #43 wz
13f3c     38 00 90 AD |  if_e	jmp	#LR__1656
13f40     1C 4E 05 F1 | 	add	fp, #28
13f44     A7 44 02 FB | 	rdlong	local16, fp
13f48     14 4F 05 F1 | 	add	fp, #276
13f4c     A7 34 02 FB | 	rdlong	local08, fp
13f50     02 34 66 F0 | 	shl	local08, #2
13f54     04 4F 85 F1 | 	sub	fp, #260
13f58     A7 34 02 F1 | 	add	local08, fp
13f5c     1A 13 02 FB | 	rdlong	arg01, local08
13f60     00 14 06 F6 | 	mov	arg02, #0
13f64     2C 4E 85 F1 | 	sub	fp, #44
13f68     98 34 B1 FD | 	call	#__system____builtin_atoi
13f6c     FD 14 02 F6 | 	mov	arg02, result1
13f70     22 13 02 F6 | 	mov	arg01, local16
13f74     E0 C7 B0 FD | 	call	#_psdpoke
13f78                 | LR__1656
13f78                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13f78     18 4E 05 F1 | 	add	fp, #24
13f7c     A7 44 02 FB | 	rdlong	local16, fp
13f80     18 4E 85 F1 | 	sub	fp, #24
13f84     01 44 0E F2 | 	cmp	local16, #1 wz
13f88     54 00 90 5D |  if_ne	jmp	#LR__1657
13f8c     52 00 00 FF 
13f90     20 E4 05 F1 | 	add	objptr, ##42016
13f94     F2 42 02 FB | 	rdlong	local15, objptr
13f98     52 00 00 FF 
13f9c     20 E4 85 F1 | 	sub	objptr, ##42016
13fa0     2B 42 0E F2 | 	cmp	local15, #43 wz
13fa4     38 00 90 AD |  if_e	jmp	#LR__1657
13fa8     1C 4E 05 F1 | 	add	fp, #28
13fac     A7 44 02 FB | 	rdlong	local16, fp
13fb0     14 4F 05 F1 | 	add	fp, #276
13fb4     A7 34 02 FB | 	rdlong	local08, fp
13fb8     02 34 66 F0 | 	shl	local08, #2
13fbc     04 4F 85 F1 | 	sub	fp, #260
13fc0     A7 34 02 F1 | 	add	local08, fp
13fc4     1A 13 02 FB | 	rdlong	arg01, local08
13fc8     00 14 06 F6 | 	mov	arg02, #0
13fcc     2C 4E 85 F1 | 	sub	fp, #44
13fd0     30 34 B1 FD | 	call	#__system____builtin_atoi
13fd4     FD 14 02 F6 | 	mov	arg02, result1
13fd8     22 13 02 F6 | 	mov	arg01, local16
13fdc     C0 C7 B0 FD | 	call	#_pspoke
13fe0                 | LR__1657
13fe0                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13fe0     18 4E 05 F1 | 	add	fp, #24
13fe4     A7 44 02 FB | 	rdlong	local16, fp
13fe8     18 4E 85 F1 | 	sub	fp, #24
13fec     06 44 0E F2 | 	cmp	local16, #6 wz
13ff0     64 00 90 5D |  if_ne	jmp	#LR__1658
13ff4     52 00 00 FF 
13ff8     20 E4 05 F1 | 	add	objptr, ##42016
13ffc     F2 42 02 FB | 	rdlong	local15, objptr
14000     52 00 00 FF 
14004     20 E4 85 F1 | 	sub	objptr, ##42016
14008     2B 42 0E F2 | 	cmp	local15, #43 wz
1400c     48 00 90 AD |  if_e	jmp	#LR__1658
14010     30 4F 05 F1 | 	add	fp, #304
14014     A7 32 02 FB | 	rdlong	local07, fp
14018     02 32 66 F0 | 	shl	local07, #2
1401c     04 4F 85 F1 | 	sub	fp, #260
14020     A7 32 02 F1 | 	add	local07, fp
14024     19 13 02 FB | 	rdlong	arg01, local07
14028     2C 4E 85 F1 | 	sub	fp, #44
1402c     68 35 B1 FD | 	call	#__system____builtin_atof
14030     28 4E 05 F1 | 	add	fp, #40
14034     A7 FA 61 FC | 	wrlong	result1, fp
14038     0C 4E 85 F1 | 	sub	fp, #12
1403c     A7 44 02 FB | 	rdlong	local16, fp
14040     0C 4E 05 F1 | 	add	fp, #12
14044     A7 12 02 F6 | 	mov	arg01, fp
14048     28 4E 85 F1 | 	sub	fp, #40
1404c     09 15 02 FB | 	rdlong	arg02, arg01
14050     22 13 02 F6 | 	mov	arg01, local16
14054     B8 C6 B0 FD | 	call	#_pslpoke
14058                 | LR__1658
14058     30 4F 05 F1 | 	add	fp, #304
1405c     A7 42 02 FB | 	rdlong	local15, fp
14060     01 42 06 F1 | 	add	local15, #1
14064     A7 42 62 FC | 	wrlong	local15, fp
14068     30 4F 85 F1 | 	sub	fp, #304
1406c     E4 F6 9F FD | 	jmp	#LR__1623
14070                 | LR__1659
14070                 | LR__1660
14070     A7 F0 03 F6 | 	mov	ptra, fp
14074     B2 00 A0 FD | 	call	#popregs_
14078                 | _do_input_ret
14078     2D 00 64 FD | 	ret
1407c                 | 
1407c                 | ' 
1407c                 | ' ' ----------------  left$
1407c                 | ' 
1407c                 | ' sub do_left
1407c                 | _do_left
1407c     00 4A 05 F6 | 	mov	COUNT_, #0
14080     A8 00 A0 FD | 	call	#pushregs_
14084     14 F0 07 F1 | 	add	ptra, #20
14088     4A 00 00 FF 
1408c     80 E4 05 F1 | 	add	objptr, ##38016
14090     F2 16 02 FB | 	rdlong	arg03, objptr
14094     0B 15 02 F6 | 	mov	arg02, arg03
14098     01 14 66 F0 | 	shl	arg02, #1
1409c     0B 15 02 F1 | 	add	arg02, arg03
140a0     02 14 66 F0 | 	shl	arg02, #2
140a4     03 00 00 FF 
140a8     04 E4 85 F1 | 	sub	objptr, ##1540
140ac     F2 14 02 F1 | 	add	arg02, objptr
140b0     0A 17 02 FB | 	rdlong	arg03, arg02
140b4     0C 4E 05 F1 | 	add	fp, #12
140b8     A7 16 62 FC | 	wrlong	arg03, fp
140bc                 | ' 
140bc                 | ' numpar=compiledline(lineptr_e).result.uresult
140bc                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
140bc     0C 4E 85 F1 | 	sub	fp, #12
140c0     02 16 0E F2 | 	cmp	arg03, #2 wz
140c4     47 00 00 FF 
140c8     7C E4 85 F1 | 	sub	objptr, ##36476
140cc     40 00 90 AD |  if_e	jmp	#LR__1670
140d0     00 12 06 F6 | 	mov	arg01, #0
140d4     64 5B B1 FD | 	call	#__system___getiolock_0579
140d8     FD 12 02 F6 | 	mov	arg01, result1
140dc     34 FE B0 FD | 	call	#__system___lockmem
140e0     A1 01 00 FF 
140e4     78 15 06 F6 | 	mov	arg02, ##@LR__5752
140e8     00 12 06 F6 | 	mov	arg01, #0
140ec     00 16 06 F6 | 	mov	arg03, #0
140f0     14 0B B1 FD | 	call	#__system___basic_print_string
140f4     00 12 06 F6 | 	mov	arg01, #0
140f8     40 5B B1 FD | 	call	#__system___getiolock_0579
140fc     FD 00 68 FC | 	wrlong	#0, result1
14100     27 12 06 F6 | 	mov	arg01, #39
14104     00 14 06 F6 | 	mov	arg02, #0
14108     64 C4 B0 FD | 	call	#_printerror
1410c     EC 00 90 FD | 	jmp	#LR__1673
14110                 | LR__1670
14110     78 8A BF FD | 	call	#_pop
14114     FF 16 02 F6 | 	mov	arg03, result3
14118     A7 FA 61 FC | 	wrlong	result1, fp
1411c     04 4E 05 F1 | 	add	fp, #4
14120     A7 FC 61 FC | 	wrlong	result2, fp
14124     04 4E 05 F1 | 	add	fp, #4
14128     A7 16 62 FC | 	wrlong	arg03, fp
1412c     08 4E 85 F1 | 	sub	fp, #8
14130     A7 12 02 F6 | 	mov	arg01, fp
14134     38 8C BF FD | 	call	#_converttoint
14138     FD 16 02 F6 | 	mov	arg03, result1
1413c     10 4E 05 F1 | 	add	fp, #16
14140     A7 16 62 FC | 	wrlong	arg03, fp
14144     10 4E 85 F1 | 	sub	fp, #16
14148     40 8A BF FD | 	call	#_pop
1414c     FF 16 02 F6 | 	mov	arg03, result3
14150     A7 FA 61 FC | 	wrlong	result1, fp
14154     04 4E 05 F1 | 	add	fp, #4
14158     A7 FC 61 FC | 	wrlong	result2, fp
1415c     04 4E 05 F1 | 	add	fp, #4
14160     A7 16 62 FC | 	wrlong	arg03, fp
14164                 | ' t1=pop() : arg=converttoint(t1)
14164                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14164     08 4E 85 F1 | 	sub	fp, #8
14168     2B 16 0E F2 | 	cmp	arg03, #43 wz
1416c     18 00 90 5D |  if_ne	jmp	#LR__1671
14170     A7 12 02 FB | 	rdlong	arg01, fp
14174     8C 8B BF FD | 	call	#_convertstring
14178     A7 FA 61 FC | 	wrlong	result1, fp
1417c     08 4E 05 F1 | 	add	fp, #8
14180     A7 3E 68 FC | 	wrlong	#31, fp
14184     08 4E 85 F1 | 	sub	fp, #8
14188                 | LR__1671
14188                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14188     08 4E 05 F1 | 	add	fp, #8
1418c     A7 16 02 FB | 	rdlong	arg03, fp
14190     08 4E 85 F1 | 	sub	fp, #8
14194     1F 16 0E F2 | 	cmp	arg03, #31 wz
14198     40 00 90 AD |  if_e	jmp	#LR__1672
1419c     00 12 06 F6 | 	mov	arg01, #0
141a0     98 5A B1 FD | 	call	#__system___getiolock_0579
141a4     FD 12 02 F6 | 	mov	arg01, result1
141a8     68 FD B0 FD | 	call	#__system___lockmem
141ac     A1 01 00 FF 
141b0     80 15 06 F6 | 	mov	arg02, ##@LR__5753
141b4     00 12 06 F6 | 	mov	arg01, #0
141b8     00 16 06 F6 | 	mov	arg03, #0
141bc     48 0A B1 FD | 	call	#__system___basic_print_string
141c0     00 12 06 F6 | 	mov	arg01, #0
141c4     74 5A B1 FD | 	call	#__system___getiolock_0579
141c8     FD 00 68 FC | 	wrlong	#0, result1
141cc     0F 12 06 F6 | 	mov	arg01, #15
141d0     00 14 06 F6 | 	mov	arg02, #0
141d4     98 C3 B0 FD | 	call	#_printerror
141d8     20 00 90 FD | 	jmp	#LR__1673
141dc                 | LR__1672
141dc     A7 12 02 FB | 	rdlong	arg01, fp
141e0     10 4E 05 F1 | 	add	fp, #16
141e4     A7 14 02 FB | 	rdlong	arg02, fp
141e8     10 4E 85 F1 | 	sub	fp, #16
141ec     A0 1D B1 FD | 	call	#__system__Left_S
141f0     A7 FA 61 FC | 	wrlong	result1, fp
141f4     A7 12 02 F6 | 	mov	arg01, fp
141f8     28 8A BF FD | 	call	#_push
141fc                 | LR__1673
141fc     A7 F0 03 F6 | 	mov	ptra, fp
14200     B2 00 A0 FD | 	call	#popregs_
14204                 | _do_left_ret
14204     2D 00 64 FD | 	ret
14208                 | 
14208                 | ' 
14208                 | ' ' ----------------  len
14208                 | ' 
14208                 | ' sub do_len
14208                 | _do_len
14208     02 4A 05 F6 | 	mov	COUNT_, #2
1420c     A8 00 A0 FD | 	call	#pushregs_
14210     14 F0 07 F1 | 	add	ptra, #20
14214     4A 00 00 FF 
14218     80 E4 05 F1 | 	add	objptr, ##38016
1421c     F2 26 02 FB | 	rdlong	local01, objptr
14220     13 17 02 F6 | 	mov	arg03, local01
14224     01 16 66 F0 | 	shl	arg03, #1
14228     13 17 02 F1 | 	add	arg03, local01
1422c     02 16 66 F0 | 	shl	arg03, #2
14230     03 00 00 FF 
14234     04 E4 85 F1 | 	sub	objptr, ##1540
14238     F2 16 02 F1 | 	add	arg03, objptr
1423c     0B 17 02 FB | 	rdlong	arg03, arg03
14240     0C 4E 05 F1 | 	add	fp, #12
14244     A7 16 62 FC | 	wrlong	arg03, fp
14248                 | ' 
14248                 | ' numpar=compiledline(lineptr_e).result.uresult
14248                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14248     0C 4E 85 F1 | 	sub	fp, #12
1424c     02 16 16 F2 | 	cmp	arg03, #2 wc
14250     47 00 00 FF 
14254     7C E4 85 F1 | 	sub	objptr, ##36476
14258     0C 4E 05 C1 |  if_b	add	fp, #12
1425c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14260     0C 4E 85 C1 |  if_b	sub	fp, #12
14264     40 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14268     00 12 06 F6 | 	mov	arg01, #0
1426c     CC 59 B1 FD | 	call	#__system___getiolock_0579
14270     FD 12 02 F6 | 	mov	arg01, result1
14274     9C FC B0 FD | 	call	#__system___lockmem
14278     A1 01 00 FF 
1427c     88 15 06 F6 | 	mov	arg02, ##@LR__5754
14280     00 12 06 F6 | 	mov	arg01, #0
14284     00 16 06 F6 | 	mov	arg03, #0
14288     7C 09 B1 FD | 	call	#__system___basic_print_string
1428c     00 12 06 F6 | 	mov	arg01, #0
14290     A8 59 B1 FD | 	call	#__system___getiolock_0579
14294     FD 00 68 FC | 	wrlong	#0, result1
14298     27 12 06 F6 | 	mov	arg01, #39
1429c     00 14 06 F6 | 	mov	arg02, #0
142a0     CC C2 B0 FD | 	call	#_printerror
142a4     C8 00 90 FD | 	jmp	#LR__1685
142a8                 | LR__1680
142a8     E0 88 BF FD | 	call	#_pop
142ac     FF 16 02 F6 | 	mov	arg03, result3
142b0     A7 FA 61 FC | 	wrlong	result1, fp
142b4     04 4E 05 F1 | 	add	fp, #4
142b8     A7 FC 61 FC | 	wrlong	result2, fp
142bc     04 4E 05 F1 | 	add	fp, #4
142c0     A7 16 62 FC | 	wrlong	arg03, fp
142c4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
142c4     08 4E 85 F1 | 	sub	fp, #8
142c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
142cc     18 00 90 5D |  if_ne	jmp	#LR__1681
142d0     A7 12 02 FB | 	rdlong	arg01, fp
142d4     2C 8A BF FD | 	call	#_convertstring
142d8     A7 FA 61 FC | 	wrlong	result1, fp
142dc     08 4E 05 F1 | 	add	fp, #8
142e0     A7 3E 68 FC | 	wrlong	#31, fp
142e4     08 4E 85 F1 | 	sub	fp, #8
142e8                 | LR__1681
142e8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
142e8     08 4E 05 F1 | 	add	fp, #8
142ec     A7 16 02 FB | 	rdlong	arg03, fp
142f0     08 4E 85 F1 | 	sub	fp, #8
142f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
142f8     40 00 90 AD |  if_e	jmp	#LR__1682
142fc     00 12 06 F6 | 	mov	arg01, #0
14300     38 59 B1 FD | 	call	#__system___getiolock_0579
14304     FD 12 02 F6 | 	mov	arg01, result1
14308     08 FC B0 FD | 	call	#__system___lockmem
1430c     A1 01 00 FF 
14310     8E 15 06 F6 | 	mov	arg02, ##@LR__5755
14314     00 12 06 F6 | 	mov	arg01, #0
14318     00 16 06 F6 | 	mov	arg03, #0
1431c     E8 08 B1 FD | 	call	#__system___basic_print_string
14320     00 12 06 F6 | 	mov	arg01, #0
14324     14 59 B1 FD | 	call	#__system___getiolock_0579
14328     FD 00 68 FC | 	wrlong	#0, result1
1432c     0F 12 06 F6 | 	mov	arg01, #15
14330     00 14 06 F6 | 	mov	arg02, #0
14334     38 C2 B0 FD | 	call	#_printerror
14338     34 00 90 FD | 	jmp	#LR__1685
1433c                 | LR__1682
1433c     A7 12 02 FB | 	rdlong	arg01, fp
14340     09 29 02 F6 | 	mov	local02, arg01
14344     97 06 48 FB | 	callpa	#(@LR__1684-@LR__1683)>>2,fcache_load_ptr_
14348                 | LR__1683
14348     14 FB C9 FA | 	rdbyte	result1, local02 wz
1434c     01 28 06 51 |  if_ne	add	local02, #1
14350     F4 FF 9F 5D |  if_ne	jmp	#LR__1683
14354                 | LR__1684
14354     09 29 82 F1 | 	sub	local02, arg01
14358     A7 28 62 FC | 	wrlong	local02, fp
1435c     08 4E 05 F1 | 	add	fp, #8
14360     A7 38 68 FC | 	wrlong	#28, fp
14364     08 4E 85 F1 | 	sub	fp, #8
14368     A7 12 02 F6 | 	mov	arg01, fp
1436c     B4 88 BF FD | 	call	#_push
14370                 | LR__1685
14370     A7 F0 03 F6 | 	mov	ptra, fp
14374     B2 00 A0 FD | 	call	#popregs_
14378                 | _do_len_ret
14378     2D 00 64 FD | 	ret
1437c                 | 
1437c                 | ' 
1437c                 | ' ' ----------------  list
1437c                 | ' 
1437c                 | ' sub do_list
1437c                 | _do_list
1437c     02 4A 05 F6 | 	mov	COUNT_, #2
14380     A8 00 A0 FD | 	call	#pushregs_
14384     B8 F0 07 F1 | 	add	ptra, #184
14388     04 4E 05 F1 | 	add	fp, #4
1438c     A7 00 68 FC | 	wrlong	#0, fp
14390     04 4E 05 F1 | 	add	fp, #4
14394     FF FF BF FF 
14398     A7 FE 6B FC | 	wrlong	##2147483647, fp
1439c     08 4E 85 F1 | 	sub	fp, #8
143a0     4A 00 00 FF 
143a4     80 E4 05 F1 | 	add	objptr, ##38016
143a8     F2 26 02 FB | 	rdlong	local01, objptr
143ac     13 17 02 F6 | 	mov	arg03, local01
143b0     01 16 66 F0 | 	shl	arg03, #1
143b4     13 17 02 F1 | 	add	arg03, local01
143b8     02 16 66 F0 | 	shl	arg03, #2
143bc     03 00 00 FF 
143c0     04 E4 85 F1 | 	sub	objptr, ##1540
143c4     F2 16 02 F1 | 	add	arg03, objptr
143c8     0B 17 02 FB | 	rdlong	arg03, arg03
143cc     A7 16 62 FC | 	wrlong	arg03, fp
143d0                 | ' 
143d0                 | ' startline=0 : endline=$7FFFFFFF
143d0                 | ' numpar=compiledline(lineptr_e).result.uresult
143d0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
143d0     01 16 0E F2 | 	cmp	arg03, #1 wz
143d4     47 00 00 FF 
143d8     7C E4 85 F1 | 	sub	objptr, ##36476
143dc     3C 00 90 5D |  if_ne	jmp	#LR__1690
143e0     A8 87 BF FD | 	call	#_pop
143e4     FF 26 02 F6 | 	mov	local01, result3
143e8     0C 4E 05 F1 | 	add	fp, #12
143ec     A7 FA 61 FC | 	wrlong	result1, fp
143f0     04 4E 05 F1 | 	add	fp, #4
143f4     A7 FC 61 FC | 	wrlong	result2, fp
143f8     04 4E 05 F1 | 	add	fp, #4
143fc     A7 26 62 FC | 	wrlong	local01, fp
14400     08 4E 85 F1 | 	sub	fp, #8
14404     A7 12 02 F6 | 	mov	arg01, fp
14408     0C 4E 85 F1 | 	sub	fp, #12
1440c     60 89 BF FD | 	call	#_converttoint
14410     04 4E 05 F1 | 	add	fp, #4
14414     A7 FA 61 FC | 	wrlong	result1, fp
14418     04 4E 85 F1 | 	sub	fp, #4
1441c                 | LR__1690
1441c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
1441c     A7 16 02 FB | 	rdlong	arg03, fp
14420     02 16 0E F2 | 	cmp	arg03, #2 wz
14424     7C 00 90 5D |  if_ne	jmp	#LR__1691
14428     60 87 BF FD | 	call	#_pop
1442c     FF 26 02 F6 | 	mov	local01, result3
14430     0C 4E 05 F1 | 	add	fp, #12
14434     A7 FA 61 FC | 	wrlong	result1, fp
14438     04 4E 05 F1 | 	add	fp, #4
1443c     A7 FC 61 FC | 	wrlong	result2, fp
14440     04 4E 05 F1 | 	add	fp, #4
14444     A7 26 62 FC | 	wrlong	local01, fp
14448     08 4E 85 F1 | 	sub	fp, #8
1444c     A7 12 02 F6 | 	mov	arg01, fp
14450     0C 4E 85 F1 | 	sub	fp, #12
14454     18 89 BF FD | 	call	#_converttoint
14458     FD 26 02 F6 | 	mov	local01, result1
1445c     08 4E 05 F1 | 	add	fp, #8
14460     A7 26 62 FC | 	wrlong	local01, fp
14464     08 4E 85 F1 | 	sub	fp, #8
14468     20 87 BF FD | 	call	#_pop
1446c     FF 26 02 F6 | 	mov	local01, result3
14470     0C 4E 05 F1 | 	add	fp, #12
14474     A7 FA 61 FC | 	wrlong	result1, fp
14478     04 4E 05 F1 | 	add	fp, #4
1447c     A7 FC 61 FC | 	wrlong	result2, fp
14480     04 4E 05 F1 | 	add	fp, #4
14484     A7 26 62 FC | 	wrlong	local01, fp
14488     08 4E 85 F1 | 	sub	fp, #8
1448c     A7 12 02 F6 | 	mov	arg01, fp
14490     0C 4E 85 F1 | 	sub	fp, #12
14494     D8 88 BF FD | 	call	#_converttoint
14498     04 4E 05 F1 | 	add	fp, #4
1449c     A7 FA 61 FC | 	wrlong	result1, fp
144a0     04 4E 85 F1 | 	sub	fp, #4
144a4                 | LR__1691
144a4                 | ' 
144a4                 | ' 
144a4                 | ' print
144a4     00 12 06 F6 | 	mov	arg01, #0
144a8     90 57 B1 FD | 	call	#__system___getiolock_0579
144ac     FD 12 02 F6 | 	mov	arg01, result1
144b0     60 FA B0 FD | 	call	#__system___lockmem
144b4     00 12 06 F6 | 	mov	arg01, #0
144b8     0A 14 06 F6 | 	mov	arg02, #10
144bc     00 16 06 F6 | 	mov	arg03, #0
144c0     EC 06 B1 FD | 	call	#__system___basic_print_char
144c4     00 12 06 F6 | 	mov	arg01, #0
144c8     70 57 B1 FD | 	call	#__system___getiolock_0579
144cc     FD 00 68 FC | 	wrlong	#0, result1
144d0     4A 00 00 FF 
144d4     88 E4 05 F1 | 	add	objptr, ##38024
144d8     F2 28 02 FB | 	rdlong	local02, objptr
144dc     07 00 00 FF 
144e0     A4 E5 05 F1 | 	add	objptr, ##4004
144e4     F2 28 62 FC | 	wrlong	local02, objptr
144e8     52 00 00 FF 
144ec     2C E4 85 F1 | 	sub	objptr, ##42028
144f0                 | ' do 
144f0                 | LR__1692
144f0     20 4E 05 F1 | 	add	fp, #32
144f4     A7 12 02 F6 | 	mov	arg01, fp
144f8     20 4E 85 F1 | 	sub	fp, #32
144fc     52 00 00 FF 
14500     2C E4 05 F1 | 	add	objptr, ##42028
14504     F2 14 02 FB | 	rdlong	arg02, objptr
14508     18 16 06 F6 | 	mov	arg03, #24
1450c     46 00 00 FF 
14510     60 E5 85 F1 | 	sub	objptr, ##36192
14514     BC ED B0 FD | 	call	#_psram_spin2_read1
14518     0B 00 00 FF 
1451c     CC E4 85 F1 | 	sub	objptr, ##5836
14520                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14520                 | '   
14520                 | '   if header(0)<> $FFFFFFFF then
14520     20 4E 05 F1 | 	add	fp, #32
14524     A7 28 02 FB | 	rdlong	local02, fp
14528     20 4E 85 F1 | 	sub	fp, #32
1452c     FF FF 7F FF 
14530     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14534     A8 00 90 AD |  if_e	jmp	#LR__1694
14538     38 4E 05 F1 | 	add	fp, #56
1453c     3F 16 06 F6 | 	mov	arg03, #63
14540     28 16 62 FD | 	setq	arg03
14544     A7 00 68 FC | 	wrlong	#0, fp
14548     A7 12 02 F6 | 	mov	arg01, fp
1454c     10 4E 85 F1 | 	sub	fp, #16
14550     A7 14 02 FB | 	rdlong	arg02, fp
14554     04 4E 05 F1 | 	add	fp, #4
14558     A7 16 02 FB | 	rdlong	arg03, fp
1455c     2C 4E 85 F1 | 	sub	fp, #44
14560     0B 00 00 FF 
14564     CC E4 05 F1 | 	add	objptr, ##5836
14568     68 ED B0 FD | 	call	#_psram_spin2_read1
1456c     0B 00 00 FF 
14570     CC E4 85 F1 | 	sub	objptr, ##5836
14574                 | '     longfill(linebuf,0,64)
14574                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14574                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14574     20 4E 05 F1 | 	add	fp, #32
14578     A7 28 02 FB | 	rdlong	local02, fp
1457c     1C 4E 85 F1 | 	sub	fp, #28
14580     A7 26 02 FB | 	rdlong	local01, fp
14584     04 4E 85 F1 | 	sub	fp, #4
14588     13 29 52 F2 | 	cmps	local02, local01 wc
1458c     30 00 90 CD |  if_b	jmp	#LR__1693
14590     20 4E 05 F1 | 	add	fp, #32
14594     A7 28 02 FB | 	rdlong	local02, fp
14598     18 4E 85 F1 | 	sub	fp, #24
1459c     A7 16 02 FB | 	rdlong	arg03, fp
145a0     08 4E 85 F1 | 	sub	fp, #8
145a4     0B 29 5A F2 | 	cmps	local02, arg03 wcz
145a8     14 00 90 1D |  if_a	jmp	#LR__1693
145ac     38 4E 05 F1 | 	add	fp, #56
145b0     A7 12 02 F6 | 	mov	arg01, fp
145b4     38 4E 85 F1 | 	sub	fp, #56
145b8                 | ' 
145b8                 | ' write(text)
145b8     DC E0 B0 FD | 	call	#_hg010b_spin2_write
145bc                 | ' crlf
145bc     D8 E5 B0 FD | 	call	#_hg010b_spin2_crlf
145c0                 | LR__1693
145c0     34 4E 05 F1 | 	add	fp, #52
145c4     A7 28 02 FB | 	rdlong	local02, fp
145c8     34 4E 85 F1 | 	sub	fp, #52
145cc     52 00 00 FF 
145d0     2C E4 05 F1 | 	add	objptr, ##42028
145d4     F2 28 62 FC | 	wrlong	local02, objptr
145d8     52 00 00 FF 
145dc     2C E4 85 F1 | 	sub	objptr, ##42028
145e0                 | LR__1694
145e0     34 4E 05 F1 | 	add	fp, #52
145e4     A7 28 02 FB | 	rdlong	local02, fp
145e8     34 4E 85 F1 | 	sub	fp, #52
145ec     FF FF 3F FF 
145f0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
145f4     20 4E 05 51 |  if_ne	add	fp, #32
145f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
145fc     20 4E 85 51 |  if_ne	sub	fp, #32
14600     FF FF 7F 5F 
14604     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14608     E4 FE 9F 5D |  if_ne	jmp	#LR__1692
1460c     A7 F0 03 F6 | 	mov	ptra, fp
14610     B2 00 A0 FD | 	call	#popregs_
14614                 | _do_list_ret
14614     2D 00 64 FD | 	ret
14618                 | 
14618                 | ' 
14618                 | ' '-------------------- load
14618                 | ' 
14618                 | ' sub do_load(amode=0 as integer)  
14618                 | _do_load
14618     01 4A 05 F6 | 	mov	COUNT_, #1
1461c     A8 00 A0 FD | 	call	#pushregs_
14620     AC F0 07 F1 | 	add	ptra, #172
14624     A7 12 62 FC | 	wrlong	arg01, fp
14628     51 00 00 FF 
1462c     E8 E5 05 F1 | 	add	objptr, ##41960
14630     F2 02 68 FC | 	wrlong	#1, objptr
14634     07 00 00 FF 
14638     68 E5 85 F1 | 	sub	objptr, ##3944
1463c     F2 14 02 FB | 	rdlong	arg02, objptr
14640     0A 13 02 F6 | 	mov	arg01, arg02
14644     01 12 66 F0 | 	shl	arg01, #1
14648     0A 13 02 F1 | 	add	arg01, arg02
1464c     02 12 66 F0 | 	shl	arg01, #2
14650     03 00 00 FF 
14654     04 E4 85 F1 | 	sub	objptr, ##1540
14658     F2 12 02 F1 | 	add	arg01, objptr
1465c     09 15 02 FB | 	rdlong	arg02, arg01
14660     1C 4E 05 F1 | 	add	fp, #28
14664     A7 14 62 FC | 	wrlong	arg02, fp
14668     8C 4E 05 F1 | 	add	fp, #140
1466c     A7 12 02 F6 | 	mov	arg01, fp
14670     47 00 00 FF 
14674     7C E4 85 F1 | 	sub	objptr, ##36476
14678     80 4E 85 F1 | 	sub	fp, #128
1467c     09 4F 61 FC | 	wrlong	fp, arg01
14680                 | ' 
14680                 | ' inload=1
14680                 | ' numpar=compiledline(lineptr_e).result.uresult
14680                 | ' lpoke varptr(line2$),varptr(line2)
14680                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14680     0C 4E 85 F1 | 	sub	fp, #12
14684     A7 26 02 FB | 	rdlong	local01, fp
14688     1C 4E 85 F1 | 	sub	fp, #28
1468c     01 26 56 F2 | 	cmps	local01, #1 wc
14690     24 00 90 CD |  if_b	jmp	#LR__1700
14694     F4 84 BF FD | 	call	#_pop
14698     04 4E 05 F1 | 	add	fp, #4
1469c     A7 FA 61 FC | 	wrlong	result1, fp
146a0     04 4E 05 F1 | 	add	fp, #4
146a4     A7 FC 61 FC | 	wrlong	result2, fp
146a8     04 4E 05 F1 | 	add	fp, #4
146ac     A7 FE 61 FC | 	wrlong	result3, fp
146b0     0C 4E 85 F1 | 	sub	fp, #12
146b4     28 00 90 FD | 	jmp	#LR__1701
146b8                 | LR__1700
146b8     51 00 00 FF 
146bc     D8 E5 05 F1 | 	add	objptr, ##41944
146c0     F2 26 02 FB | 	rdlong	local01, objptr
146c4     51 00 00 FF 
146c8     D8 E5 85 F1 | 	sub	objptr, ##41944
146cc     04 4E 05 F1 | 	add	fp, #4
146d0     A7 26 62 FC | 	wrlong	local01, fp
146d4     08 4E 05 F1 | 	add	fp, #8
146d8     A7 3E 68 FC | 	wrlong	#31, fp
146dc     0C 4E 85 F1 | 	sub	fp, #12
146e0                 | LR__1701
146e0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
146e0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
146e0     0C 4E 05 F1 | 	add	fp, #12
146e4     A7 26 02 FB | 	rdlong	local01, fp
146e8     0C 4E 85 F1 | 	sub	fp, #12
146ec     2B 26 0E F2 | 	cmp	local01, #43 wz
146f0     24 00 90 5D |  if_ne	jmp	#LR__1702
146f4     04 4E 05 F1 | 	add	fp, #4
146f8     A7 12 02 FB | 	rdlong	arg01, fp
146fc     04 4E 85 F1 | 	sub	fp, #4
14700     00 86 BF FD | 	call	#_convertstring
14704     04 4E 05 F1 | 	add	fp, #4
14708     A7 FA 61 FC | 	wrlong	result1, fp
1470c     08 4E 05 F1 | 	add	fp, #8
14710     A7 3E 68 FC | 	wrlong	#31, fp
14714     0C 4E 85 F1 | 	sub	fp, #12
14718                 | LR__1702
14718                 | ' if t1.result_type=result_string then
14718     0C 4E 05 F1 | 	add	fp, #12
1471c     A7 26 02 FB | 	rdlong	local01, fp
14720     0C 4E 85 F1 | 	sub	fp, #12
14724     1F 26 0E F2 | 	cmp	local01, #31 wz
14728     E0 02 90 5D |  if_ne	jmp	#LR__1708
1472c                 | '   if amode<>1234 then do_new
1472c     A7 26 02 FB | 	rdlong	local01, fp
14730     02 00 00 FF 
14734     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14738     08 0E B0 5D |  if_ne	call	#_do_new
1473c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1473c     04 4E 05 F1 | 	add	fp, #4
14740     A7 12 02 FB | 	rdlong	arg01, fp
14744     04 4E 85 F1 | 	sub	fp, #4
14748     A1 01 00 FF 
1474c     94 15 06 F6 | 	mov	arg02, ##@LR__5756
14750     E8 F7 B0 FD | 	call	#__system___string_cmp
14754     00 FA 0D F2 | 	cmp	result1, #0 wz
14758     24 00 90 5D |  if_ne	jmp	#LR__1703
1475c     51 00 00 FF 
14760     D8 E5 05 F1 | 	add	objptr, ##41944
14764     F2 26 02 FB | 	rdlong	local01, objptr
14768     51 00 00 FF 
1476c     D8 E5 85 F1 | 	sub	objptr, ##41944
14770     04 4E 05 F1 | 	add	fp, #4
14774     A7 26 62 FC | 	wrlong	local01, fp
14778     04 4E 85 F1 | 	sub	fp, #4
1477c     20 00 90 FD | 	jmp	#LR__1704
14780                 | LR__1703
14780     04 4E 05 F1 | 	add	fp, #4
14784     A7 26 02 FB | 	rdlong	local01, fp
14788     04 4E 85 F1 | 	sub	fp, #4
1478c     51 00 00 FF 
14790     D8 E5 05 F1 | 	add	objptr, ##41944
14794     F2 26 62 FC | 	wrlong	local01, objptr
14798     51 00 00 FF 
1479c     D8 E5 85 F1 | 	sub	objptr, ##41944
147a0                 | LR__1704
147a0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
147a0     09 12 06 F6 | 	mov	arg01, #9
147a4     C4 4A B1 FD | 	call	#__system__close
147a8     09 26 06 F6 | 	mov	local01, #9
147ac     4A 00 00 FF 
147b0     94 E4 05 F1 | 	add	objptr, ##38036
147b4     F2 12 02 FB | 	rdlong	arg01, objptr
147b8     4A 00 00 FF 
147bc     94 E4 85 F1 | 	sub	objptr, ##38036
147c0     A1 01 00 FF 
147c4     95 15 06 F6 | 	mov	arg02, ##@LR__5757
147c8     A4 F7 B0 FD | 	call	#__system___string_concat
147cc     FD 12 02 F6 | 	mov	arg01, result1
147d0     04 4E 05 F1 | 	add	fp, #4
147d4     A7 14 02 FB | 	rdlong	arg02, fp
147d8     04 4E 85 F1 | 	sub	fp, #4
147dc     90 F7 B0 FD | 	call	#__system___string_concat
147e0     FD 14 02 F6 | 	mov	arg02, result1
147e4     13 13 02 F6 | 	mov	arg01, local01
147e8     00 16 06 F6 | 	mov	arg03, #0
147ec     28 03 B1 FD | 	call	#__system___basic_open_string
147f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
147f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
147f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
147fc     14 4E 05 F1 | 	add	fp, #20
14800     A7 FA 61 FC | 	wrlong	result1, fp
14804                 | '   r=geterr() 
14804                 | '   if r then 
14804     14 4E 85 F1 | 	sub	fp, #20
14808     50 01 90 AD |  if_e	jmp	#LR__1706
1480c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
1480c     09 12 06 F6 | 	mov	arg01, #9
14810     58 4A B1 FD | 	call	#__system__close
14814     09 26 06 F6 | 	mov	local01, #9
14818     4A 00 00 FF 
1481c     94 E4 05 F1 | 	add	objptr, ##38036
14820     F2 12 02 FB | 	rdlong	arg01, objptr
14824     4A 00 00 FF 
14828     94 E4 85 F1 | 	sub	objptr, ##38036
1482c     A1 01 00 FF 
14830     97 15 06 F6 | 	mov	arg02, ##@LR__5758
14834     38 F7 B0 FD | 	call	#__system___string_concat
14838     FD 12 02 F6 | 	mov	arg01, result1
1483c     04 4E 05 F1 | 	add	fp, #4
14840     A7 14 02 FB | 	rdlong	arg02, fp
14844     04 4E 85 F1 | 	sub	fp, #4
14848     24 F7 B0 FD | 	call	#__system___string_concat
1484c     FD 12 02 F6 | 	mov	arg01, result1
14850     A1 01 00 FF 
14854     99 15 06 F6 | 	mov	arg02, ##@LR__5759
14858     14 F7 B0 FD | 	call	#__system___string_concat
1485c     FD 14 02 F6 | 	mov	arg02, result1
14860     13 13 02 F6 | 	mov	arg01, local01
14864     00 16 06 F6 | 	mov	arg03, #0
14868     AC 02 B1 FD | 	call	#__system___basic_open_string
1486c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14870     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14874     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14878     14 4E 05 F1 | 	add	fp, #20
1487c     A7 FA 61 FC | 	wrlong	result1, fp
14880                 | '     r=geterr() 
14880                 | '     if r then 
14880     14 4E 85 F1 | 	sub	fp, #20
14884     A0 00 90 AD |  if_e	jmp	#LR__1705
14888                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14888     00 12 06 F6 | 	mov	arg01, #0
1488c     AC 53 B1 FD | 	call	#__system___getiolock_0579
14890     FD 12 02 F6 | 	mov	arg01, result1
14894     7C F6 B0 FD | 	call	#__system___lockmem
14898     A1 01 00 FF 
1489c     9E 15 06 F6 | 	mov	arg02, ##@LR__5760
148a0     00 12 06 F6 | 	mov	arg01, #0
148a4     00 16 06 F6 | 	mov	arg03, #0
148a8     5C 03 B1 FD | 	call	#__system___basic_print_string
148ac     14 4E 05 F1 | 	add	fp, #20
148b0     A7 14 02 FB | 	rdlong	arg02, fp
148b4     14 4E 85 F1 | 	sub	fp, #20
148b8     00 12 06 F6 | 	mov	arg01, #0
148bc     00 16 06 F6 | 	mov	arg03, #0
148c0     0A 18 06 F6 | 	mov	arg04, #10
148c4     84 03 B1 FD | 	call	#__system___basic_print_integer
148c8     A1 01 00 FF 
148cc     AC 15 06 F6 | 	mov	arg02, ##@LR__5761
148d0     00 12 06 F6 | 	mov	arg01, #0
148d4     00 16 06 F6 | 	mov	arg03, #0
148d8     2C 03 B1 FD | 	call	#__system___basic_print_string
148dc     00 26 06 F6 | 	mov	local01, #0
148e0     14 4E 05 F1 | 	add	fp, #20
148e4     A7 12 02 FB | 	rdlong	arg01, fp
148e8     14 4E 85 F1 | 	sub	fp, #20
148ec     B0 1F B1 FD | 	call	#__system___strerror
148f0     FD 14 02 F6 | 	mov	arg02, result1
148f4     13 13 02 F6 | 	mov	arg01, local01
148f8     00 16 06 F6 | 	mov	arg03, #0
148fc     08 03 B1 FD | 	call	#__system___basic_print_string
14900     00 12 06 F6 | 	mov	arg01, #0
14904     0A 14 06 F6 | 	mov	arg02, #10
14908     00 16 06 F6 | 	mov	arg03, #0
1490c     A0 02 B1 FD | 	call	#__system___basic_print_char
14910     00 12 06 F6 | 	mov	arg01, #0
14914     24 53 B1 FD | 	call	#__system___getiolock_0579
14918     FD 00 68 FC | 	wrlong	#0, result1
1491c     09 12 06 F6 | 	mov	arg01, #9
14920     48 49 B1 FD | 	call	#__system__close
14924     94 01 90 FD | 	jmp	#LR__1710
14928                 | LR__1705
14928     51 00 00 FF 
1492c     D8 E5 05 F1 | 	add	objptr, ##41944
14930     F2 12 02 FB | 	rdlong	arg01, objptr
14934     51 00 00 FF 
14938     D8 E5 85 F1 | 	sub	objptr, ##41944
1493c     A1 01 00 FF 
14940     AF 15 06 F6 | 	mov	arg02, ##@LR__5762
14944     28 F6 B0 FD | 	call	#__system___string_concat
14948     51 00 00 FF 
1494c     D8 E5 05 F1 | 	add	objptr, ##41944
14950     F2 FA 61 FC | 	wrlong	result1, objptr
14954     51 00 00 FF 
14958     D8 E5 85 F1 | 	sub	objptr, ##41944
1495c                 | LR__1706
1495c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
1495c     09 12 06 F6 | 	mov	arg01, #9
14960     08 49 B1 FD | 	call	#__system__close
14964     09 26 06 F6 | 	mov	local01, #9
14968     4A 00 00 FF 
1496c     94 E4 05 F1 | 	add	objptr, ##38036
14970     F2 12 02 FB | 	rdlong	arg01, objptr
14974     4A 00 00 FF 
14978     94 E4 85 F1 | 	sub	objptr, ##38036
1497c     A1 01 00 FF 
14980     B4 15 06 F6 | 	mov	arg02, ##@LR__5763
14984     E8 F5 B0 FD | 	call	#__system___string_concat
14988     FD 12 02 F6 | 	mov	arg01, result1
1498c     51 00 00 FF 
14990     D8 E5 05 F1 | 	add	objptr, ##41944
14994     F2 14 02 FB | 	rdlong	arg02, objptr
14998     51 00 00 FF 
1499c     D8 E5 85 F1 | 	sub	objptr, ##41944
149a0     CC F5 B0 FD | 	call	#__system___string_concat
149a4     FD 14 02 F6 | 	mov	arg02, result1
149a8     13 13 02 F6 | 	mov	arg01, local01
149ac     00 16 06 F6 | 	mov	arg03, #0
149b0     64 01 B1 FD | 	call	#__system___basic_open_string
149b4                 | '   do
149b4                 | LR__1707
149b4     09 12 06 F6 | 	mov	arg01, #9
149b8     64 F7 B0 FD | 	call	#__system___basic_read_line
149bc     FD 26 02 F6 | 	mov	local01, result1
149c0     37 00 00 FF 
149c4     1C E4 05 F1 | 	add	objptr, ##28188
149c8     F2 26 62 FC | 	wrlong	local01, objptr
149cc     37 00 00 FF 
149d0     1C E4 85 F1 | 	sub	objptr, ##28188
149d4     70 CD BE FD | 	call	#_interpret
149d8     37 00 00 FF 
149dc     1C E4 05 F1 | 	add	objptr, ##28188
149e0     F2 12 02 FB | 	rdlong	arg01, objptr
149e4     37 00 00 FF 
149e8     1C E4 85 F1 | 	sub	objptr, ##28188
149ec     A1 01 00 FF 
149f0     B6 15 06 F6 | 	mov	arg02, ##@LR__5764
149f4     44 F5 B0 FD | 	call	#__system___string_cmp
149f8     00 FA 0D F2 | 	cmp	result1, #0 wz
149fc     B4 FF 9F 5D |  if_ne	jmp	#LR__1707
14a00                 | '   close #9   
14a00     09 12 06 F6 | 	mov	arg01, #9
14a04     64 48 B1 FD | 	call	#__system__close
14a08     0C 00 90 FD | 	jmp	#LR__1709
14a0c                 | LR__1708
14a0c     1E 12 06 F6 | 	mov	arg01, #30
14a10     00 14 06 F6 | 	mov	arg02, #0
14a14     58 BB B0 FD | 	call	#_printerror
14a18                 | LR__1709
14a18                 | ' print "Loaded ";currentdir$+"/"+loadname
14a18     00 12 06 F6 | 	mov	arg01, #0
14a1c     1C 52 B1 FD | 	call	#__system___getiolock_0579
14a20     FD 12 02 F6 | 	mov	arg01, result1
14a24     EC F4 B0 FD | 	call	#__system___lockmem
14a28     A1 01 00 FF 
14a2c     B7 15 06 F6 | 	mov	arg02, ##@LR__5765
14a30     00 12 06 F6 | 	mov	arg01, #0
14a34     00 16 06 F6 | 	mov	arg03, #0
14a38     CC 01 B1 FD | 	call	#__system___basic_print_string
14a3c     00 26 06 F6 | 	mov	local01, #0
14a40     4A 00 00 FF 
14a44     94 E4 05 F1 | 	add	objptr, ##38036
14a48     F2 12 02 FB | 	rdlong	arg01, objptr
14a4c     4A 00 00 FF 
14a50     94 E4 85 F1 | 	sub	objptr, ##38036
14a54     A1 01 00 FF 
14a58     BF 15 06 F6 | 	mov	arg02, ##@LR__5766
14a5c     10 F5 B0 FD | 	call	#__system___string_concat
14a60     FD 12 02 F6 | 	mov	arg01, result1
14a64     51 00 00 FF 
14a68     D8 E5 05 F1 | 	add	objptr, ##41944
14a6c     F2 14 02 FB | 	rdlong	arg02, objptr
14a70     51 00 00 FF 
14a74     D8 E5 85 F1 | 	sub	objptr, ##41944
14a78     F4 F4 B0 FD | 	call	#__system___string_concat
14a7c     FD 14 02 F6 | 	mov	arg02, result1
14a80     13 13 02 F6 | 	mov	arg01, local01
14a84     00 16 06 F6 | 	mov	arg03, #0
14a88     7C 01 B1 FD | 	call	#__system___basic_print_string
14a8c     00 12 06 F6 | 	mov	arg01, #0
14a90     0A 14 06 F6 | 	mov	arg02, #10
14a94     00 16 06 F6 | 	mov	arg03, #0
14a98     14 01 B1 FD | 	call	#__system___basic_print_char
14a9c     00 12 06 F6 | 	mov	arg01, #0
14aa0     98 51 B1 FD | 	call	#__system___getiolock_0579
14aa4     FD 00 68 FC | 	wrlong	#0, result1
14aa8     51 00 00 FF 
14aac     E8 E5 05 F1 | 	add	objptr, ##41960
14ab0     F2 00 68 FC | 	wrlong	#0, objptr
14ab4     51 00 00 FF 
14ab8     E8 E5 85 F1 | 	sub	objptr, ##41960
14abc                 | LR__1710
14abc     A7 F0 03 F6 | 	mov	ptra, fp
14ac0     B2 00 A0 FD | 	call	#popregs_
14ac4                 | _do_load_ret
14ac4     2D 00 64 FD | 	ret
14ac8                 | 
14ac8                 | ' 
14ac8                 | ' '-------------------- log
14ac8                 | ' 
14ac8                 | ' sub do_log
14ac8                 | _do_log
14ac8     01 4A 05 F6 | 	mov	COUNT_, #1
14acc     A8 00 A0 FD | 	call	#pushregs_
14ad0     14 F0 07 F1 | 	add	ptra, #20
14ad4     4A 00 00 FF 
14ad8     80 E4 05 F1 | 	add	objptr, ##38016
14adc     F2 26 02 FB | 	rdlong	local01, objptr
14ae0     13 17 02 F6 | 	mov	arg03, local01
14ae4     01 16 66 F0 | 	shl	arg03, #1
14ae8     13 17 02 F1 | 	add	arg03, local01
14aec     02 16 66 F0 | 	shl	arg03, #2
14af0     03 00 00 FF 
14af4     04 E4 85 F1 | 	sub	objptr, ##1540
14af8     F2 16 02 F1 | 	add	arg03, objptr
14afc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
14b00     0C 4E 05 F1 | 	add	fp, #12
14b04     A7 16 62 FC | 	wrlong	arg03, fp
14b08                 | ' 
14b08                 | ' numpar=compiledline(lineptr_e).result.uresult
14b08                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14b08     0C 4E 85 F1 | 	sub	fp, #12
14b0c     47 00 00 FF 
14b10     7C E4 85 F1 | 	sub	objptr, ##36476
14b14     0C 4E 05 51 |  if_ne	add	fp, #12
14b18     A7 26 02 5B |  if_ne	rdlong	local01, fp
14b1c     0C 4E 85 51 |  if_ne	sub	fp, #12
14b20     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14b24     40 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14b28     00 12 06 F6 | 	mov	arg01, #0
14b2c     0C 51 B1 FD | 	call	#__system___getiolock_0579
14b30     FD 12 02 F6 | 	mov	arg01, result1
14b34     DC F3 B0 FD | 	call	#__system___lockmem
14b38     A1 01 00 FF 
14b3c     C1 15 06 F6 | 	mov	arg02, ##@LR__5767
14b40     00 12 06 F6 | 	mov	arg01, #0
14b44     00 16 06 F6 | 	mov	arg03, #0
14b48     BC 00 B1 FD | 	call	#__system___basic_print_string
14b4c     00 12 06 F6 | 	mov	arg01, #0
14b50     E8 50 B1 FD | 	call	#__system___getiolock_0579
14b54     FD 00 68 FC | 	wrlong	#0, result1
14b58     27 12 06 F6 | 	mov	arg01, #39
14b5c     00 14 06 F6 | 	mov	arg02, #0
14b60     0C BA B0 FD | 	call	#_printerror
14b64     D0 00 90 FD | 	jmp	#LR__1723
14b68                 | LR__1720
14b68                 | ' if numpar=2 then 
14b68     0C 4E 05 F1 | 	add	fp, #12
14b6c     A7 26 02 FB | 	rdlong	local01, fp
14b70     0C 4E 85 F1 | 	sub	fp, #12
14b74     02 26 0E F2 | 	cmp	local01, #2 wz
14b78     48 00 90 5D |  if_ne	jmp	#LR__1721
14b7c     0C 80 BF FD | 	call	#_pop
14b80     FF 26 02 F6 | 	mov	local01, result3
14b84     A7 FA 61 FC | 	wrlong	result1, fp
14b88     04 4E 05 F1 | 	add	fp, #4
14b8c     A7 FC 61 FC | 	wrlong	result2, fp
14b90     04 4E 05 F1 | 	add	fp, #4
14b94     A7 26 62 FC | 	wrlong	local01, fp
14b98     08 4E 85 F1 | 	sub	fp, #8
14b9c     A7 12 02 F6 | 	mov	arg01, fp
14ba0     88 82 BF FD | 	call	#_converttofloat
14ba4     FD 14 02 F6 | 	mov	arg02, result1
14ba8     FC 16 20 FF 
14bac     54 12 06 F6 | 	mov	arg01, ##1076754516
14bb0     A8 31 B1 FD | 	call	#__system____builtin_logbase
14bb4     10 4E 05 F1 | 	add	fp, #16
14bb8     A7 FA 61 FC | 	wrlong	result1, fp
14bbc     10 4E 85 F1 | 	sub	fp, #16
14bc0     10 00 90 FD | 	jmp	#LR__1722
14bc4                 | LR__1721
14bc4     10 4E 05 F1 | 	add	fp, #16
14bc8     00 C0 9F FF 
14bcc     A7 00 68 FC | 	wrlong	##1065353216, fp
14bd0     10 4E 85 F1 | 	sub	fp, #16
14bd4                 | LR__1722
14bd4     B4 7F BF FD | 	call	#_pop
14bd8     FF 26 02 F6 | 	mov	local01, result3
14bdc     A7 FA 61 FC | 	wrlong	result1, fp
14be0     04 4E 05 F1 | 	add	fp, #4
14be4     A7 FC 61 FC | 	wrlong	result2, fp
14be8     04 4E 05 F1 | 	add	fp, #4
14bec     A7 26 62 FC | 	wrlong	local01, fp
14bf0     08 4E 85 F1 | 	sub	fp, #8
14bf4     A7 12 02 F6 | 	mov	arg01, fp
14bf8     30 82 BF FD | 	call	#_converttofloat
14bfc     FD 14 02 F6 | 	mov	arg02, result1
14c00     FC 16 20 FF 
14c04     54 12 06 F6 | 	mov	arg01, ##1076754516
14c08     50 31 B1 FD | 	call	#__system____builtin_logbase
14c0c     FD 12 02 F6 | 	mov	arg01, result1
14c10     10 4E 05 F1 | 	add	fp, #16
14c14     A7 14 02 FB | 	rdlong	arg02, fp
14c18     10 4E 85 F1 | 	sub	fp, #16
14c1c     70 23 B1 FD | 	call	#__system___float_div
14c20     A7 FA 61 FC | 	wrlong	result1, fp
14c24     08 4E 05 F1 | 	add	fp, #8
14c28     A7 3C 68 FC | 	wrlong	#30, fp
14c2c     08 4E 85 F1 | 	sub	fp, #8
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     EC 7F BF FD | 	call	#_push
14c38                 | LR__1723
14c38     A7 F0 03 F6 | 	mov	ptra, fp
14c3c     B2 00 A0 FD | 	call	#popregs_
14c40                 | _do_log_ret
14c40     2D 00 64 FD | 	ret
14c44                 | 
14c44                 | ' 
14c44                 | ' '-------------------- lpeek
14c44                 | ' 
14c44                 | ' sub do_lpeek
14c44                 | _do_lpeek
14c44     00 4A 05 F6 | 	mov	COUNT_, #0
14c48     A8 00 A0 FD | 	call	#pushregs_
14c4c     14 F0 07 F1 | 	add	ptra, #20
14c50     38 7F BF FD | 	call	#_pop
14c54     A7 FA 61 FC | 	wrlong	result1, fp
14c58     04 4E 05 F1 | 	add	fp, #4
14c5c     A7 FC 61 FC | 	wrlong	result2, fp
14c60     04 4E 05 F1 | 	add	fp, #4
14c64     A7 FE 61 FC | 	wrlong	result3, fp
14c68     08 4E 85 F1 | 	sub	fp, #8
14c6c     A7 12 02 F6 | 	mov	arg01, fp
14c70     FC 80 BF FD | 	call	#_converttoint
14c74     0C 4E 05 F1 | 	add	fp, #12
14c78     A7 FA 61 FC | 	wrlong	result1, fp
14c7c                 | ' 
14c7c                 | ' t1=pop()
14c7c                 | ' a=converttoint(t1)
14c7c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14c7c     0C 4E 85 F1 | 	sub	fp, #12
14c80     00 04 00 FF 
14c84     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14c88     1C 00 90 3D |  if_ae	jmp	#LR__1730
14c8c     0C 4E 05 F1 | 	add	fp, #12
14c90     A7 12 02 FB | 	rdlong	arg01, fp
14c94     09 FB 01 FB | 	rdlong	result1, arg01
14c98     04 4E 05 F1 | 	add	fp, #4
14c9c     A7 FA 61 FC | 	wrlong	result1, fp
14ca0     10 4E 85 F1 | 	sub	fp, #16
14ca4     1C 00 90 FD | 	jmp	#LR__1731
14ca8                 | LR__1730
14ca8     0C 4E 05 F1 | 	add	fp, #12
14cac     A7 12 02 FB | 	rdlong	arg01, fp
14cb0     0C 4E 85 F1 | 	sub	fp, #12
14cb4     88 BB B0 FD | 	call	#_pslpeek
14cb8     10 4E 05 F1 | 	add	fp, #16
14cbc     A7 FA 61 FC | 	wrlong	result1, fp
14cc0     10 4E 85 F1 | 	sub	fp, #16
14cc4                 | LR__1731
14cc4     08 4E 05 F1 | 	add	fp, #8
14cc8     A7 3A 68 FC | 	wrlong	#29, fp
14ccc     08 4E 05 F1 | 	add	fp, #8
14cd0     A7 12 02 FB | 	rdlong	arg01, fp
14cd4     10 4E 85 F1 | 	sub	fp, #16
14cd8     A7 12 62 FC | 	wrlong	arg01, fp
14cdc     A7 12 02 F6 | 	mov	arg01, fp
14ce0     40 7F BF FD | 	call	#_push
14ce4     A7 F0 03 F6 | 	mov	ptra, fp
14ce8     B2 00 A0 FD | 	call	#popregs_
14cec                 | _do_lpeek_ret
14cec     2D 00 64 FD | 	ret
14cf0                 | 
14cf0                 | ' 
14cf0                 | ' '-------------------- lpoke
14cf0                 | ' 
14cf0                 | ' sub do_lpoke
14cf0                 | _do_lpoke
14cf0     01 4A 05 F6 | 	mov	COUNT_, #1
14cf4     A8 00 A0 FD | 	call	#pushregs_
14cf8     20 F0 07 F1 | 	add	ptra, #32
14cfc     8C 7E BF FD | 	call	#_pop
14d00     FD 14 02 F6 | 	mov	arg02, result1
14d04     FE 12 02 F6 | 	mov	arg01, result2
14d08     FF 26 02 F6 | 	mov	local01, result3
14d0c     A7 14 62 FC | 	wrlong	arg02, fp
14d10     04 4E 05 F1 | 	add	fp, #4
14d14     A7 12 62 FC | 	wrlong	arg01, fp
14d18     04 4E 05 F1 | 	add	fp, #4
14d1c     A7 26 62 FC | 	wrlong	local01, fp
14d20     08 4E 85 F1 | 	sub	fp, #8
14d24     64 7E BF FD | 	call	#_pop
14d28     FF 26 02 F6 | 	mov	local01, result3
14d2c     0C 4E 05 F1 | 	add	fp, #12
14d30     A7 FA 61 FC | 	wrlong	result1, fp
14d34     04 4E 05 F1 | 	add	fp, #4
14d38     A7 FC 61 FC | 	wrlong	result2, fp
14d3c     04 4E 05 F1 | 	add	fp, #4
14d40     A7 26 62 FC | 	wrlong	local01, fp
14d44     08 4E 85 F1 | 	sub	fp, #8
14d48     A7 12 02 F6 | 	mov	arg01, fp
14d4c     0C 4E 85 F1 | 	sub	fp, #12
14d50     1C 80 BF FD | 	call	#_converttoint
14d54     18 4E 05 F1 | 	add	fp, #24
14d58     A7 FA 61 FC | 	wrlong	result1, fp
14d5c     18 4E 85 F1 | 	sub	fp, #24
14d60     A7 12 02 F6 | 	mov	arg01, fp
14d64     08 80 BF FD | 	call	#_converttoint
14d68     1C 4E 05 F1 | 	add	fp, #28
14d6c     A7 FA 61 FC | 	wrlong	result1, fp
14d70                 | ' 
14d70                 | ' t1=pop() 'value
14d70                 | ' t2=pop() 
14d70                 | ' a=converttoint(t2) : v=converttoint(t1)
14d70                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14d70     04 4E 85 F1 | 	sub	fp, #4
14d74     A7 26 02 FB | 	rdlong	local01, fp
14d78     18 4E 85 F1 | 	sub	fp, #24
14d7c     00 04 00 FF 
14d80     00 26 16 F2 | 	cmp	local01, ##524288 wc
14d84     1C 00 90 3D |  if_ae	jmp	#LR__1740
14d88     18 4E 05 F1 | 	add	fp, #24
14d8c     A7 12 02 FB | 	rdlong	arg01, fp
14d90     04 4E 05 F1 | 	add	fp, #4
14d94     A7 14 02 FB | 	rdlong	arg02, fp
14d98     1C 4E 85 F1 | 	sub	fp, #28
14d9c     09 15 62 FC | 	wrlong	arg02, arg01
14da0     18 00 90 FD | 	jmp	#LR__1741
14da4                 | LR__1740
14da4     18 4E 05 F1 | 	add	fp, #24
14da8     A7 12 02 FB | 	rdlong	arg01, fp
14dac     04 4E 05 F1 | 	add	fp, #4
14db0     A7 14 02 FB | 	rdlong	arg02, fp
14db4     1C 4E 85 F1 | 	sub	fp, #28
14db8     54 B9 B0 FD | 	call	#_pslpoke
14dbc                 | LR__1741
14dbc     A7 F0 03 F6 | 	mov	ptra, fp
14dc0     B2 00 A0 FD | 	call	#popregs_
14dc4                 | _do_lpoke_ret
14dc4     2D 00 64 FD | 	ret
14dc8                 | 
14dc8                 | ' 
14dc8                 | ' '-------------------- mid$
14dc8                 | ' 
14dc8                 | ' sub do_mid
14dc8                 | _do_mid
14dc8     00 4A 05 F6 | 	mov	COUNT_, #0
14dcc     A8 00 A0 FD | 	call	#pushregs_
14dd0     18 F0 07 F1 | 	add	ptra, #24
14dd4     4A 00 00 FF 
14dd8     80 E4 05 F1 | 	add	objptr, ##38016
14ddc     F2 16 02 FB | 	rdlong	arg03, objptr
14de0     0B 15 02 F6 | 	mov	arg02, arg03
14de4     01 14 66 F0 | 	shl	arg02, #1
14de8     0B 15 02 F1 | 	add	arg02, arg03
14dec     02 14 66 F0 | 	shl	arg02, #2
14df0     03 00 00 FF 
14df4     04 E4 85 F1 | 	sub	objptr, ##1540
14df8     F2 14 02 F1 | 	add	arg02, objptr
14dfc     0A 17 02 FB | 	rdlong	arg03, arg02
14e00     0C 4E 05 F1 | 	add	fp, #12
14e04     A7 16 62 FC | 	wrlong	arg03, fp
14e08                 | ' 
14e08                 | ' numpar=compiledline(lineptr_e).result.uresult
14e08                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14e08     0C 4E 85 F1 | 	sub	fp, #12
14e0c     03 16 0E F2 | 	cmp	arg03, #3 wz
14e10     47 00 00 FF 
14e14     7C E4 85 F1 | 	sub	objptr, ##36476
14e18     40 00 90 AD |  if_e	jmp	#LR__1750
14e1c     00 12 06 F6 | 	mov	arg01, #0
14e20     18 4E B1 FD | 	call	#__system___getiolock_0579
14e24     FD 12 02 F6 | 	mov	arg01, result1
14e28     E8 F0 B0 FD | 	call	#__system___lockmem
14e2c     A1 01 00 FF 
14e30     C7 15 06 F6 | 	mov	arg02, ##@LR__5768
14e34     00 12 06 F6 | 	mov	arg01, #0
14e38     00 16 06 F6 | 	mov	arg03, #0
14e3c     C8 FD B0 FD | 	call	#__system___basic_print_string
14e40     00 12 06 F6 | 	mov	arg01, #0
14e44     F4 4D B1 FD | 	call	#__system___getiolock_0579
14e48     FD 00 68 FC | 	wrlong	#0, result1
14e4c     27 12 06 F6 | 	mov	arg01, #39
14e50     00 14 06 F6 | 	mov	arg02, #0
14e54     18 B7 B0 FD | 	call	#_printerror
14e58     2C 01 90 FD | 	jmp	#LR__1753
14e5c                 | LR__1750
14e5c     2C 7D BF FD | 	call	#_pop
14e60     FF 16 02 F6 | 	mov	arg03, result3
14e64     A7 FA 61 FC | 	wrlong	result1, fp
14e68     04 4E 05 F1 | 	add	fp, #4
14e6c     A7 FC 61 FC | 	wrlong	result2, fp
14e70     04 4E 05 F1 | 	add	fp, #4
14e74     A7 16 62 FC | 	wrlong	arg03, fp
14e78     08 4E 85 F1 | 	sub	fp, #8
14e7c     A7 12 02 F6 | 	mov	arg01, fp
14e80     EC 7E BF FD | 	call	#_converttoint
14e84     FD 16 02 F6 | 	mov	arg03, result1
14e88     14 4E 05 F1 | 	add	fp, #20
14e8c     A7 16 62 FC | 	wrlong	arg03, fp
14e90     14 4E 85 F1 | 	sub	fp, #20
14e94     F4 7C BF FD | 	call	#_pop
14e98     FF 16 02 F6 | 	mov	arg03, result3
14e9c     A7 FA 61 FC | 	wrlong	result1, fp
14ea0     04 4E 05 F1 | 	add	fp, #4
14ea4     A7 FC 61 FC | 	wrlong	result2, fp
14ea8     04 4E 05 F1 | 	add	fp, #4
14eac     A7 16 62 FC | 	wrlong	arg03, fp
14eb0     08 4E 85 F1 | 	sub	fp, #8
14eb4     A7 12 02 F6 | 	mov	arg01, fp
14eb8     B4 7E BF FD | 	call	#_converttoint
14ebc     FD 16 02 F6 | 	mov	arg03, result1
14ec0     10 4E 05 F1 | 	add	fp, #16
14ec4     A7 16 62 FC | 	wrlong	arg03, fp
14ec8     10 4E 85 F1 | 	sub	fp, #16
14ecc     BC 7C BF FD | 	call	#_pop
14ed0     FF 16 02 F6 | 	mov	arg03, result3
14ed4     A7 FA 61 FC | 	wrlong	result1, fp
14ed8     04 4E 05 F1 | 	add	fp, #4
14edc     A7 FC 61 FC | 	wrlong	result2, fp
14ee0     04 4E 05 F1 | 	add	fp, #4
14ee4     A7 16 62 FC | 	wrlong	arg03, fp
14ee8                 | ' t1=pop() : arg2=converttoint(t1)
14ee8                 | ' t1=pop() : arg1=converttoint(t1)
14ee8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14ee8     08 4E 85 F1 | 	sub	fp, #8
14eec     2B 16 0E F2 | 	cmp	arg03, #43 wz
14ef0     18 00 90 5D |  if_ne	jmp	#LR__1751
14ef4     A7 12 02 FB | 	rdlong	arg01, fp
14ef8     08 7E BF FD | 	call	#_convertstring
14efc     A7 FA 61 FC | 	wrlong	result1, fp
14f00     08 4E 05 F1 | 	add	fp, #8
14f04     A7 3E 68 FC | 	wrlong	#31, fp
14f08     08 4E 85 F1 | 	sub	fp, #8
14f0c                 | LR__1751
14f0c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14f0c     08 4E 05 F1 | 	add	fp, #8
14f10     A7 16 02 FB | 	rdlong	arg03, fp
14f14     08 4E 85 F1 | 	sub	fp, #8
14f18     1F 16 0E F2 | 	cmp	arg03, #31 wz
14f1c     40 00 90 AD |  if_e	jmp	#LR__1752
14f20     00 12 06 F6 | 	mov	arg01, #0
14f24     14 4D B1 FD | 	call	#__system___getiolock_0579
14f28     FD 12 02 F6 | 	mov	arg01, result1
14f2c     E4 EF B0 FD | 	call	#__system___lockmem
14f30     A1 01 00 FF 
14f34     CE 15 06 F6 | 	mov	arg02, ##@LR__5769
14f38     00 12 06 F6 | 	mov	arg01, #0
14f3c     00 16 06 F6 | 	mov	arg03, #0
14f40     C4 FC B0 FD | 	call	#__system___basic_print_string
14f44     00 12 06 F6 | 	mov	arg01, #0
14f48     F0 4C B1 FD | 	call	#__system___getiolock_0579
14f4c     FD 00 68 FC | 	wrlong	#0, result1
14f50     0F 12 06 F6 | 	mov	arg01, #15
14f54     00 14 06 F6 | 	mov	arg02, #0
14f58     14 B6 B0 FD | 	call	#_printerror
14f5c     28 00 90 FD | 	jmp	#LR__1753
14f60                 | LR__1752
14f60     A7 12 02 FB | 	rdlong	arg01, fp
14f64     10 4E 05 F1 | 	add	fp, #16
14f68     A7 14 02 FB | 	rdlong	arg02, fp
14f6c     04 4E 05 F1 | 	add	fp, #4
14f70     A7 16 02 FB | 	rdlong	arg03, fp
14f74     14 4E 85 F1 | 	sub	fp, #20
14f78     2C 11 B1 FD | 	call	#__system__Mid_S
14f7c     A7 FA 61 FC | 	wrlong	result1, fp
14f80     A7 12 02 F6 | 	mov	arg01, fp
14f84     9C 7C BF FD | 	call	#_push
14f88                 | LR__1753
14f88     A7 F0 03 F6 | 	mov	ptra, fp
14f8c     B2 00 A0 FD | 	call	#popregs_
14f90                 | _do_mid_ret
14f90     2D 00 64 FD | 	ret
14f94                 | 
14f94                 | ' 
14f94                 | ' '-------------------- mkdir
14f94                 | ' 
14f94                 | ' sub do_mkdir
14f94                 | _do_mkdir
14f94     04 4A 05 F6 | 	mov	COUNT_, #4
14f98     A8 00 A0 FD | 	call	#pushregs_
14f9c     EC 7B BF FD | 	call	#_pop
14fa0     FE 18 02 F6 | 	mov	arg04, result2
14fa4     FF 16 02 F6 | 	mov	arg03, result3
14fa8     FD 26 02 F6 | 	mov	local01, result1
14fac     0C 29 02 F6 | 	mov	local02, arg04
14fb0     0B 2B 02 F6 | 	mov	local03, arg03
14fb4                 | ' 
14fb4                 | ' t1=pop()
14fb4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14fb4     2B 2A 0E F2 | 	cmp	local03, #43 wz
14fb8     10 00 90 5D |  if_ne	jmp	#LR__1760
14fbc     13 13 02 F6 | 	mov	arg01, local01
14fc0     40 7D BF FD | 	call	#_convertstring
14fc4     FD 26 02 F6 | 	mov	local01, result1
14fc8     1F 2A 06 F6 | 	mov	local03, #31
14fcc                 | LR__1760
14fcc                 | ' if t1.result_type<>result_string then printerror(15): return
14fcc     1F 2A 0E F2 | 	cmp	local03, #31 wz
14fd0     10 00 90 AD |  if_e	jmp	#LR__1761
14fd4     0F 12 06 F6 | 	mov	arg01, #15
14fd8     00 14 06 F6 | 	mov	arg02, #0
14fdc     90 B5 B0 FD | 	call	#_printerror
14fe0     64 00 90 FD | 	jmp	#LR__1763
14fe4                 | LR__1761
14fe4     13 13 02 F6 | 	mov	arg01, local01
14fe8     F8 17 B1 FD | 	call	#__system___mkdir
14fec     FD 2C 0A F6 | 	mov	local04, result1 wz
14ff0                 | ' filename$=t1.result.sresult
14ff0                 | ' err=mkdir(filename$)
14ff0                 | ' 'err=geterr() : 
14ff0                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14ff0     54 00 90 AD |  if_e	jmp	#LR__1762
14ff4     00 12 06 F6 | 	mov	arg01, #0
14ff8     40 4C B1 FD | 	call	#__system___getiolock_0579
14ffc     FD 12 02 F6 | 	mov	arg01, result1
15000     10 EF B0 FD | 	call	#__system___lockmem
15004     A1 01 00 FF 
15008     D5 15 06 F6 | 	mov	arg02, ##@LR__5770
1500c     00 12 06 F6 | 	mov	arg01, #0
15010     00 16 06 F6 | 	mov	arg03, #0
15014     F0 FB B0 FD | 	call	#__system___basic_print_string
15018     00 12 06 F6 | 	mov	arg01, #0
1501c     16 15 02 F6 | 	mov	arg02, local04
15020     00 16 06 F6 | 	mov	arg03, #0
15024     0A 18 06 F6 | 	mov	arg04, #10
15028     20 FC B0 FD | 	call	#__system___basic_print_integer
1502c     00 12 06 F6 | 	mov	arg01, #0
15030     0A 14 06 F6 | 	mov	arg02, #10
15034     00 16 06 F6 | 	mov	arg03, #0
15038     74 FB B0 FD | 	call	#__system___basic_print_char
1503c     00 12 06 F6 | 	mov	arg01, #0
15040     F8 4B B1 FD | 	call	#__system___getiolock_0579
15044     FD 00 68 FC | 	wrlong	#0, result1
15048                 | LR__1762
15048                 | LR__1763
15048     A7 F0 03 F6 | 	mov	ptra, fp
1504c     B2 00 A0 FD | 	call	#popregs_
15050                 | _do_mkdir_ret
15050     2D 00 64 FD | 	ret
15054                 | 
15054                 | ' 
15054                 | ' '-------------------- mode
15054                 | ' 
15054                 | ' sub do_mode
15054                 | _do_mode
15054     05 4A 05 F6 | 	mov	COUNT_, #5
15058     A8 00 A0 FD | 	call	#pushregs_
1505c     2C 7B BF FD | 	call	#_pop
15060     FD 26 02 F6 | 	mov	local01, result1
15064     FE 28 02 F6 | 	mov	local02, result2
15068     FF 2A 02 F6 | 	mov	local03, result3
1506c                 | ' t1=pop() 
1506c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1506c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15070     10 00 90 5D |  if_ne	jmp	#LR__1770
15074     13 13 02 F6 | 	mov	arg01, local01
15078     00 14 06 F6 | 	mov	arg02, #0
1507c     D4 21 B1 FD | 	call	#__system___float_tointeger
15080     FD 26 02 F6 | 	mov	local01, result1
15084                 | LR__1770
15084                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15084     1F 2A 0E F2 | 	cmp	local03, #31 wz
15088     18 00 90 5D |  if_ne	jmp	#LR__1771
1508c     13 13 02 F6 | 	mov	arg01, local01
15090     04 25 B1 FD | 	call	#__system____builtin_atof
15094     FD 12 02 F6 | 	mov	arg01, result1
15098     00 14 06 F6 | 	mov	arg02, #0
1509c     B4 21 B1 FD | 	call	#__system___float_tointeger
150a0     FD 26 02 F6 | 	mov	local01, result1
150a4                 | LR__1771
150a4                 | ' select case t1.result.iresult
150a4     13 2D 02 F6 | 	mov	local04, local01
150a8     05 2C 26 F3 | 	fle	local04, #5
150ac     30 2C 62 FD | 	jmprel	local04
150b0                 | LR__1772
150b0     14 00 90 FD | 	jmp	#LR__1773
150b4     A8 00 90 FD | 	jmp	#LR__1774
150b8     10 01 90 FD | 	jmp	#LR__1775
150bc     78 01 90 FD | 	jmp	#LR__1776
150c0     E0 01 90 FD | 	jmp	#LR__1777
150c4     70 02 90 FD | 	jmp	#LR__1778
150c8                 | LR__1773
150c8     37 00 00 FF 
150cc     40 E4 05 F1 | 	add	objptr, ##28224
150d0     F2 02 68 FC | 	wrlong	#1, objptr
150d4     04 E4 85 F1 | 	sub	objptr, #4
150d8     F2 34 69 FC | 	wrlong	#154, objptr
150dc     19 00 00 FF 
150e0     D8 E4 05 F1 | 	add	objptr, ##13016
150e4     F2 02 68 FC | 	wrlong	#1, objptr
150e8     19 00 00 FF 
150ec     DC E4 85 F1 | 	sub	objptr, ##13020
150f0     F2 26 69 FC | 	wrlong	#147, objptr
150f4     37 00 00 FF 
150f8     38 E4 85 F1 | 	sub	objptr, ##28216
150fc     04 12 06 F6 | 	mov	arg01, #4
15100     84 D0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15104     37 00 00 FF 
15108     3C E4 05 F1 | 	add	objptr, ##28220
1510c     F2 12 02 FB | 	rdlong	arg01, objptr
15110     04 E4 85 F1 | 	sub	objptr, #4
15114     F2 14 02 FB | 	rdlong	arg02, objptr
15118                 | ' 
15118                 | ' write_color:=ff
15118     36 00 00 FF 
1511c     F7 E5 85 F1 | 	sub	objptr, ##28151
15120     F2 12 62 FC | 	wrlong	arg01, objptr
15124                 | ' write_background:=bb
15124     04 E4 05 F1 | 	add	objptr, #4
15128     F2 14 62 FC | 	wrlong	arg02, objptr
1512c     01 00 00 FF 
15130     00 EA 05 F1 | 	add	ptr__dat__, ##512
15134     51 00 00 FF 
15138     73 E5 05 F1 | 	add	objptr, ##41843
1513c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15140     04 E4 85 F1 | 	sub	objptr, #4
15144     03 00 80 FF 
15148     F2 30 69 FC | 	wrlong	##1688, objptr
1514c     51 00 00 FF 
15150     B4 E5 85 F1 | 	sub	objptr, ##41908
15154     01 00 00 FF 
15158     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1515c     D8 01 90 FD | 	jmp	#LR__1778
15160                 | LR__1774
15160     37 00 00 FF 
15164     40 E4 05 F1 | 	add	objptr, ##28224
15168     F2 00 68 FC | 	wrlong	#0, objptr
1516c     04 E4 85 F1 | 	sub	objptr, #4
15170     F2 2E 68 FC | 	wrlong	#23, objptr
15174     19 00 00 FF 
15178     D8 E4 05 F1 | 	add	objptr, ##13016
1517c     F2 00 68 FC | 	wrlong	#0, objptr
15180     19 00 00 FF 
15184     DC E4 85 F1 | 	sub	objptr, ##13020
15188     F2 00 68 FC | 	wrlong	#0, objptr
1518c     37 00 00 FF 
15190     38 E4 85 F1 | 	sub	objptr, ##28216
15194     00 12 06 F6 | 	mov	arg01, #0
15198     EC CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
1519c     37 00 00 FF 
151a0     3C E4 05 F1 | 	add	objptr, ##28220
151a4     F2 12 02 FB | 	rdlong	arg01, objptr
151a8     04 E4 85 F1 | 	sub	objptr, #4
151ac     F2 14 02 FB | 	rdlong	arg02, objptr
151b0                 | ' 
151b0                 | ' write_color:=ff
151b0     36 00 00 FF 
151b4     F7 E5 85 F1 | 	sub	objptr, ##28151
151b8     F2 12 62 FC | 	wrlong	arg01, objptr
151bc                 | ' write_background:=bb
151bc     04 E4 05 F1 | 	add	objptr, #4
151c0     F2 14 62 FC | 	wrlong	arg02, objptr
151c4     45 E4 85 F1 | 	sub	objptr, #69
151c8     6C 01 90 FD | 	jmp	#LR__1778
151cc                 | LR__1775
151cc     37 00 00 FF 
151d0     40 E4 05 F1 | 	add	objptr, ##28224
151d4     F2 00 68 FC | 	wrlong	#0, objptr
151d8     04 E4 85 F1 | 	sub	objptr, #4
151dc     F2 6A 69 FC | 	wrlong	#181, objptr
151e0     19 00 00 FF 
151e4     D8 E4 05 F1 | 	add	objptr, ##13016
151e8     F2 00 68 FC | 	wrlong	#0, objptr
151ec     19 00 00 FF 
151f0     DC E4 85 F1 | 	sub	objptr, ##13020
151f4     F2 00 68 FC | 	wrlong	#0, objptr
151f8     37 00 00 FF 
151fc     38 E4 85 F1 | 	sub	objptr, ##28216
15200     00 12 06 F6 | 	mov	arg01, #0
15204     80 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
15208     37 00 00 FF 
1520c     3C E4 05 F1 | 	add	objptr, ##28220
15210     F2 12 02 FB | 	rdlong	arg01, objptr
15214     04 E4 85 F1 | 	sub	objptr, #4
15218     F2 14 02 FB | 	rdlong	arg02, objptr
1521c                 | ' 
1521c                 | ' write_color:=ff
1521c     36 00 00 FF 
15220     F7 E5 85 F1 | 	sub	objptr, ##28151
15224     F2 12 62 FC | 	wrlong	arg01, objptr
15228                 | ' write_background:=bb
15228     04 E4 05 F1 | 	add	objptr, #4
1522c     F2 14 62 FC | 	wrlong	arg02, objptr
15230     45 E4 85 F1 | 	sub	objptr, #69
15234     00 01 90 FD | 	jmp	#LR__1778
15238                 | LR__1776
15238     37 00 00 FF 
1523c     40 E4 05 F1 | 	add	objptr, ##28224
15240     F2 00 68 FC | 	wrlong	#0, objptr
15244     04 E4 85 F1 | 	sub	objptr, #4
15248     F2 1E 68 FC | 	wrlong	#15, objptr
1524c     19 00 00 FF 
15250     D8 E4 05 F1 | 	add	objptr, ##13016
15254     F2 00 68 FC | 	wrlong	#0, objptr
15258     19 00 00 FF 
1525c     DC E4 85 F1 | 	sub	objptr, ##13020
15260     F2 00 68 FC | 	wrlong	#0, objptr
15264     37 00 00 FF 
15268     38 E4 85 F1 | 	sub	objptr, ##28216
1526c     00 12 06 F6 | 	mov	arg01, #0
15270     14 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
15274     37 00 00 FF 
15278     3C E4 05 F1 | 	add	objptr, ##28220
1527c     F2 12 02 FB | 	rdlong	arg01, objptr
15280     04 E4 85 F1 | 	sub	objptr, #4
15284     F2 14 02 FB | 	rdlong	arg02, objptr
15288                 | ' 
15288                 | ' write_color:=ff
15288     36 00 00 FF 
1528c     F7 E5 85 F1 | 	sub	objptr, ##28151
15290     F2 12 62 FC | 	wrlong	arg01, objptr
15294                 | ' write_background:=bb
15294     04 E4 05 F1 | 	add	objptr, #4
15298     F2 14 62 FC | 	wrlong	arg02, objptr
1529c     45 E4 85 F1 | 	sub	objptr, #69
152a0     94 00 90 FD | 	jmp	#LR__1778
152a4                 | LR__1777
152a4     37 00 00 FF 
152a8     40 E4 05 F1 | 	add	objptr, ##28224
152ac     F2 02 68 FC | 	wrlong	#1, objptr
152b0     04 E4 85 F1 | 	sub	objptr, #4
152b4     F2 02 68 FC | 	wrlong	#1, objptr
152b8     19 00 00 FF 
152bc     D8 E4 05 F1 | 	add	objptr, ##13016
152c0     F2 02 68 FC | 	wrlong	#1, objptr
152c4     19 00 00 FF 
152c8     DC E4 85 F1 | 	sub	objptr, ##13020
152cc     F2 1C 68 FC | 	wrlong	#14, objptr
152d0     37 00 00 FF 
152d4     38 E4 85 F1 | 	sub	objptr, ##28216
152d8     04 12 06 F6 | 	mov	arg01, #4
152dc     A8 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
152e0     37 00 00 FF 
152e4     3C E4 05 F1 | 	add	objptr, ##28220
152e8     F2 12 02 FB | 	rdlong	arg01, objptr
152ec     04 E4 85 F1 | 	sub	objptr, #4
152f0     F2 14 02 FB | 	rdlong	arg02, objptr
152f4                 | ' 
152f4                 | ' write_color:=ff
152f4     36 00 00 FF 
152f8     F7 E5 85 F1 | 	sub	objptr, ##28151
152fc     F2 12 62 FC | 	wrlong	arg01, objptr
15300                 | ' write_background:=bb
15300     04 E4 05 F1 | 	add	objptr, #4
15304     F2 14 62 FC | 	wrlong	arg02, objptr
15308     07 00 00 FF 
1530c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15310     51 00 00 FF 
15314     73 E5 05 F1 | 	add	objptr, ##41843
15318     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1531c     04 E4 85 F1 | 	sub	objptr, #4
15320     03 00 80 FF 
15324     F2 30 69 FC | 	wrlong	##1688, objptr
15328     51 00 00 FF 
1532c     B4 E5 85 F1 | 	sub	objptr, ##41908
15330     07 00 00 FF 
15334     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15338                 | LR__1778
15338     51 00 00 FF 
1533c     B0 E5 05 F1 | 	add	objptr, ##41904
15340     F2 26 62 FC | 	wrlong	local01, objptr
15344     04 E4 85 F1 | 	sub	objptr, #4
15348     F2 12 02 FB | 	rdlong	arg01, objptr
1534c     0E 00 00 FF 
15350     50 E5 85 F1 | 	sub	objptr, ##7504
15354     F2 2E 02 FB | 	rdlong	local05, objptr
15358     43 00 00 FF 
1535c     5C E4 85 F1 | 	sub	objptr, ##34396
15360     17 13 82 F1 | 	sub	arg01, local05
15364     00 14 06 F6 | 	mov	arg02, #0
15368     0A 16 06 F6 | 	mov	arg03, #10
1536c     74 0E B1 FD | 	call	#__system__Number_S
15370     FD 12 02 F6 | 	mov	arg01, result1
15374     A1 01 00 FF 
15378     FE 15 06 F6 | 	mov	arg02, ##@LR__5771
1537c     F0 EB B0 FD | 	call	#__system___string_concat
15380     50 00 00 FF 
15384     10 E5 05 F1 | 	add	objptr, ##41232
15388     F2 FA 61 FC | 	wrlong	result1, objptr
1538c     19 00 00 FF 
15390     D4 E4 85 F1 | 	sub	objptr, ##13012
15394     F2 12 02 FB | 	rdlong	arg01, objptr
15398     04 E4 85 F1 | 	sub	objptr, #4
1539c     F2 14 02 FB | 	rdlong	arg02, objptr
153a0     37 00 00 FF 
153a4     38 E4 85 F1 | 	sub	objptr, ##28216
153a8     2C CF B0 FD | 	call	#_hg010b_spin2_cls
153ac     A2 01 00 FF 
153b0     10 12 06 F6 | 	mov	arg01, ##@LR__5772
153b4                 | ' 
153b4                 | ' write(text)
153b4     E0 D2 B0 FD | 	call	#_hg010b_spin2_write
153b8                 | ' crlf
153b8     DC D7 B0 FD | 	call	#_hg010b_spin2_crlf
153bc     18 00 00 FF 
153c0     40 EB 05 F1 | 	add	ptr__dat__, ##12608
153c4     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
153c8     18 00 00 FF 
153cc     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
153d0                 | ' 
153d0                 | ' write(text)
153d0     C4 D2 B0 FD | 	call	#_hg010b_spin2_write
153d4                 | ' crlf
153d4     C0 D7 B0 FD | 	call	#_hg010b_spin2_crlf
153d8     50 00 00 FF 
153dc     10 E5 05 F1 | 	add	objptr, ##41232
153e0     F2 12 02 FB | 	rdlong	arg01, objptr
153e4     50 00 00 FF 
153e8     10 E5 85 F1 | 	sub	objptr, ##41232
153ec                 | ' 
153ec                 | ' write(text)
153ec     A8 D2 B0 FD | 	call	#_hg010b_spin2_write
153f0                 | ' crlf
153f0     A4 D7 B0 FD | 	call	#_hg010b_spin2_crlf
153f4     A7 F0 03 F6 | 	mov	ptra, fp
153f8     B2 00 A0 FD | 	call	#popregs_
153fc                 | _do_mode_ret
153fc     2D 00 64 FD | 	ret
15400                 | 
15400                 | ' 
15400                 | ' '-------------------- mouse
15400                 | ' 
15400                 | ' sub do_mouse
15400                 | _do_mouse
15400     88 77 BF FD | 	call	#_pop
15404     00 FA 4D F2 | 	cmps	result1, #0 wz
15408                 | ' 
15408                 | ' t1=pop()
15408                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15408     14 00 90 5D |  if_ne	jmp	#LR__1780
1540c     10 12 06 F6 | 	mov	arg01, #16
15410     00 14 06 F6 | 	mov	arg02, #0
15414     00 16 06 F6 | 	mov	arg03, #0
15418     9C C1 B0 FD | 	call	#_hg010b_spin2_setspritesize
1541c     10 00 90 FD | 	jmp	#LR__1781
15420                 | LR__1780
15420     10 12 06 F6 | 	mov	arg01, #16
15424     20 14 06 F6 | 	mov	arg02, #32
15428     20 16 06 F6 | 	mov	arg03, #32
1542c     88 C1 B0 FD | 	call	#_hg010b_spin2_setspritesize
15430                 | LR__1781
15430                 | _do_mouse_ret
15430     2D 00 64 FD | 	ret
15434                 | 
15434                 | ' 
15434                 | ' '-------------------- mousek
15434                 | ' 
15434                 | ' sub do_mousek
15434                 | _do_mousek
15434     00 4A 05 F6 | 	mov	COUNT_, #0
15438     A8 00 A0 FD | 	call	#pushregs_
1543c     0C F0 07 F1 | 	add	ptra, #12
15440     08 4E 05 F1 | 	add	fp, #8
15444     A7 3A 68 FC | 	wrlong	#29, fp
15448     08 4E 85 F1 | 	sub	fp, #8
1544c     51 00 00 FF 
15450     28 E5 05 F1 | 	add	objptr, ##41768
15454     F2 12 02 FB | 	rdlong	arg01, objptr
15458     51 00 00 FF 
1545c     28 E5 85 F1 | 	sub	objptr, ##41768
15460     A7 12 62 FC | 	wrlong	arg01, fp
15464     A7 12 02 F6 | 	mov	arg01, fp
15468     B8 77 BF FD | 	call	#_push
1546c     A7 F0 03 F6 | 	mov	ptra, fp
15470     B2 00 A0 FD | 	call	#popregs_
15474                 | _do_mousek_ret
15474     2D 00 64 FD | 	ret
15478                 | 
15478                 | ' 
15478                 | ' '-------------------- mousew
15478                 | ' 
15478                 | ' sub do_mousew
15478                 | _do_mousew
15478     00 4A 05 F6 | 	mov	COUNT_, #0
1547c     A8 00 A0 FD | 	call	#pushregs_
15480     0C F0 07 F1 | 	add	ptra, #12
15484     08 4E 05 F1 | 	add	fp, #8
15488     A7 38 68 FC | 	wrlong	#28, fp
1548c     08 4E 85 F1 | 	sub	fp, #8
15490     51 00 00 FF 
15494     2C E5 05 F1 | 	add	objptr, ##41772
15498     F2 12 02 FB | 	rdlong	arg01, objptr
1549c     51 00 00 FF 
154a0     2C E5 85 F1 | 	sub	objptr, ##41772
154a4     A7 12 62 FC | 	wrlong	arg01, fp
154a8     A7 12 02 F6 | 	mov	arg01, fp
154ac     74 77 BF FD | 	call	#_push
154b0     A7 F0 03 F6 | 	mov	ptra, fp
154b4     B2 00 A0 FD | 	call	#popregs_
154b8                 | _do_mousew_ret
154b8     2D 00 64 FD | 	ret
154bc                 | 
154bc                 | ' 
154bc                 | ' '-------------------- mousex
154bc                 | ' 
154bc                 | ' sub do_mousex
154bc                 | _do_mousex
154bc     00 4A 05 F6 | 	mov	COUNT_, #0
154c0     A8 00 A0 FD | 	call	#pushregs_
154c4     0C F0 07 F1 | 	add	ptra, #12
154c8     08 4E 05 F1 | 	add	fp, #8
154cc     A7 3A 68 FC | 	wrlong	#29, fp
154d0     08 4E 85 F1 | 	sub	fp, #8
154d4     51 00 00 FF 
154d8     20 E5 05 F1 | 	add	objptr, ##41760
154dc     F2 12 02 FB | 	rdlong	arg01, objptr
154e0     51 00 00 FF 
154e4     20 E5 85 F1 | 	sub	objptr, ##41760
154e8     A7 12 62 FC | 	wrlong	arg01, fp
154ec     A7 12 02 F6 | 	mov	arg01, fp
154f0     30 77 BF FD | 	call	#_push
154f4     A7 F0 03 F6 | 	mov	ptra, fp
154f8     B2 00 A0 FD | 	call	#popregs_
154fc                 | _do_mousex_ret
154fc     2D 00 64 FD | 	ret
15500                 | 
15500                 | ' 
15500                 | ' '-------------------- mousey
15500                 | ' 
15500                 | ' sub do_mousey
15500                 | _do_mousey
15500     00 4A 05 F6 | 	mov	COUNT_, #0
15504     A8 00 A0 FD | 	call	#pushregs_
15508     0C F0 07 F1 | 	add	ptra, #12
1550c     08 4E 05 F1 | 	add	fp, #8
15510     A7 3A 68 FC | 	wrlong	#29, fp
15514     08 4E 85 F1 | 	sub	fp, #8
15518     51 00 00 FF 
1551c     24 E5 05 F1 | 	add	objptr, ##41764
15520     F2 12 02 FB | 	rdlong	arg01, objptr
15524     51 00 00 FF 
15528     24 E5 85 F1 | 	sub	objptr, ##41764
1552c     A7 12 62 FC | 	wrlong	arg01, fp
15530     A7 12 02 F6 | 	mov	arg01, fp
15534     EC 76 BF FD | 	call	#_push
15538     A7 F0 03 F6 | 	mov	ptra, fp
1553c     B2 00 A0 FD | 	call	#popregs_
15540                 | _do_mousey_ret
15540     2D 00 64 FD | 	ret
15544                 | 
15544                 | ' 
15544                 | ' '------------------ new
15544                 | ' 
15544                 | ' sub do_new
15544                 | _do_new
15544     03 4A 05 F6 | 	mov	COUNT_, #3
15548     A8 00 A0 FD | 	call	#pushregs_
1554c                 | ' 
1554c                 | ' if inrun=1 then inrun=2
1554c     50 00 00 FF 
15550     EC E4 05 F1 | 	add	objptr, ##41196
15554     F2 16 02 FB | 	rdlong	arg03, objptr
15558     50 00 00 FF 
1555c     EC E4 85 F1 | 	sub	objptr, ##41196
15560     01 16 0E F2 | 	cmp	arg03, #1 wz
15564     50 00 00 AF 
15568     EC E4 05 A1 |  if_e	add	objptr, ##41196
1556c     F2 04 68 AC |  if_e	wrlong	#2, objptr
15570     50 00 00 AF 
15574     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15578     13 12 C6 F9 | 	decod	arg01, #19
1557c     01 14 66 F6 | 	neg	arg02, #1
15580     8C B1 B0 FD | 	call	#_pslpoke
15584     35 00 00 FF 
15588     08 E4 05 F1 | 	add	objptr, ##27144
1558c     F2 00 68 FC | 	wrlong	#0, objptr
15590                 | ' pslpoke(memlo,$FFFFFFFF)
15590                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15590     00 26 06 F6 | 	mov	local01, #0
15594     20 00 00 FF 
15598     10 E4 85 F1 | 	sub	objptr, ##16400
1559c     97 1E 48 FB | 	callpa	#(@LR__1791-@LR__1790)>>2,fcache_load_ptr_
155a0                 | LR__1790
155a0     13 17 02 F6 | 	mov	arg03, local01
155a4     04 16 66 F0 | 	shl	arg03, #4
155a8     F2 16 02 F1 | 	add	arg03, objptr
155ac     A2 01 00 FF 
155b0     11 14 06 F6 | 	mov	arg02, ##@LR__5773
155b4     0B 15 62 FC | 	wrlong	arg02, arg03
155b8     13 29 02 F6 | 	mov	local02, local01
155bc     04 28 66 F0 | 	shl	local02, #4
155c0     F2 28 02 F1 | 	add	local02, objptr
155c4     0C 28 06 F1 | 	add	local02, #12
155c8     14 01 68 FC | 	wrlong	#0, local02
155cc     01 26 06 F1 | 	add	local01, #1
155d0     02 00 00 FF 
155d4     01 26 56 F2 | 	cmps	local01, ##1025 wc
155d8     C4 FF 9F CD |  if_b	jmp	#LR__1790
155dc                 | LR__1791
155dc     35 00 00 FF 
155e0     90 E4 05 F1 | 	add	objptr, ##27280
155e4     00 04 80 FF 
155e8     F2 00 68 FC | 	wrlong	##524288, objptr
155ec     06 00 00 FF 
155f0     30 E4 05 F1 | 	add	objptr, ##3120
155f4     00 04 80 FF 
155f8     F2 00 68 FC | 	wrlong	##524288, objptr
155fc     04 E4 05 F1 | 	add	objptr, #4
15600     00 04 80 FF 
15604     F2 00 68 FC | 	wrlong	##524288, objptr
15608     0D 00 00 FF 
1560c     64 E4 85 F1 | 	sub	objptr, ##6756
15610     F2 00 68 FC | 	wrlong	#0, objptr
15614     07 00 00 FF 
15618     24 E4 05 F1 | 	add	objptr, ##3620
1561c     F2 00 68 FC | 	wrlong	#0, objptr
15620     07 00 00 FF 
15624     20 E4 85 F1 | 	sub	objptr, ##3616
15628     00 04 80 FF 
1562c     F2 00 68 FC | 	wrlong	##524288, objptr
15630     07 00 00 FF 
15634     30 E4 05 F1 | 	add	objptr, ##3632
15638     F2 00 68 FC | 	wrlong	#0, objptr
1563c     04 E4 05 F1 | 	add	objptr, #4
15640     FF FF FF FF 
15644     F2 FE 6B FC | 	wrlong	##-1, objptr
15648     06 00 00 FF 
1564c     78 E4 05 F1 | 	add	objptr, ##3192
15650     F2 00 68 FC | 	wrlong	#0, objptr
15654     04 E4 05 F1 | 	add	objptr, #4
15658     F2 00 68 FC | 	wrlong	#0, objptr
1565c                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
1565c                 | ' stackpointer=0
1565c                 | ' lineptr=0 
1565c                 | ' programptr=memlo ': stringptr=0
1565c                 | ' 
1565c                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
1565c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
1565c     00 26 06 F6 | 	mov	local01, #0
15660     06 00 00 FF 
15664     74 E4 85 F1 | 	sub	objptr, ##3188
15668     97 16 48 FB | 	callpa	#(@LR__1793-@LR__1792)>>2,fcache_load_ptr_
1566c                 | LR__1792
1566c     13 29 02 F6 | 	mov	local02, local01
15670     02 28 66 F0 | 	shl	local02, #2
15674     13 29 02 F1 | 	add	local02, local01
15678     02 28 66 F0 | 	shl	local02, #2
1567c     F2 28 02 F1 | 	add	local02, objptr
15680     08 28 06 F1 | 	add	local02, #8
15684     FF FF FF FF 
15688     14 FF 6B FC | 	wrlong	##-1, local02
1568c     01 26 06 F1 | 	add	local01, #1
15690     41 26 56 F2 | 	cmps	local01, #65 wc
15694     D4 FF 9F CD |  if_b	jmp	#LR__1792
15698                 | LR__1793
15698     4A 00 00 FF 
1569c     98 E4 85 F1 | 	sub	objptr, ##38040
156a0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
156a0     00 26 06 F6 | 	mov	local01, #0
156a4                 | LR__1794
156a4     13 29 02 F6 | 	mov	local02, local01
156a8     02 28 66 F0 | 	shl	local02, #2
156ac     51 00 00 FF 
156b0     68 E5 05 F1 | 	add	objptr, ##41832
156b4     F2 28 02 F1 | 	add	local02, objptr
156b8     14 2B 0A FB | 	rdlong	local03, local02 wz
156bc     51 00 00 FF 
156c0     68 E5 85 F1 | 	sub	objptr, ##41832
156c4     34 00 90 AD |  if_e	jmp	#LR__1795
156c8     13 13 02 F6 | 	mov	arg01, local01
156cc     00 14 06 F6 | 	mov	arg02, #0
156d0     00 16 06 F6 | 	mov	arg03, #0
156d4     E0 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
156d8     13 29 02 F6 | 	mov	local02, local01
156dc     02 28 66 F0 | 	shl	local02, #2
156e0     51 00 00 FF 
156e4     68 E5 05 F1 | 	add	objptr, ##41832
156e8     F2 28 02 F1 | 	add	local02, objptr
156ec     14 13 02 FB | 	rdlong	arg01, local02
156f0     51 00 00 FF 
156f4     68 E5 85 F1 | 	sub	objptr, ##41832
156f8     F4 2A B1 FD | 	call	#__system___gc_free
156fc                 | LR__1795
156fc     01 26 06 F1 | 	add	local01, #1
15700     10 26 56 F2 | 	cmps	local01, #16 wc
15704     9C FF 9F CD |  if_b	jmp	#LR__1794
15708     51 00 00 FF 
1570c     BC E5 05 F1 | 	add	objptr, ##41916
15710     00 C0 9F FF 
15714     F2 00 68 FC | 	wrlong	##1065353216, objptr
15718     04 E4 05 F1 | 	add	objptr, #4
1571c     00 C0 9F FF 
15720     F2 00 68 FC | 	wrlong	##1065353216, objptr
15724     51 00 00 FF 
15728     BC E5 85 F1 | 	sub	objptr, ##41916
1572c     F2 2A 02 FB | 	rdlong	local03, objptr
15730     51 00 00 FF 
15734     A8 E5 05 F1 | 	add	objptr, ##41896
15738     F2 2A 62 FC | 	wrlong	local03, objptr
1573c     51 00 00 FF 
15740     AC E5 85 F1 | 	sub	objptr, ##41900
15744     11 12 06 F6 | 	mov	arg01, #17
15748     08 14 06 F6 | 	mov	arg02, #8
1574c     10 16 06 F6 | 	mov	arg03, #16
15750     64 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
15754     10 12 06 F6 | 	mov	arg01, #16
15758     20 14 06 F6 | 	mov	arg02, #32
1575c     20 16 06 F6 | 	mov	arg03, #32
15760     54 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
15764     A2 01 00 FF 
15768     12 2A 06 F6 | 	mov	local03, ##@LR__5774
1576c     51 00 00 FF 
15770     D8 E5 05 F1 | 	add	objptr, ##41944
15774     F2 2A 62 FC | 	wrlong	local03, objptr
15778     51 00 00 FF 
1577c     D8 E5 85 F1 | 	sub	objptr, ##41944
15780     F4 A1 B0 FD | 	call	#_init_audio
15784     A7 F0 03 F6 | 	mov	ptra, fp
15788     B2 00 A0 FD | 	call	#popregs_
1578c                 | _do_new_ret
1578c     2D 00 64 FD | 	ret
15790                 | 
15790                 | ' 
15790                 | ' '-------------------- next
15790                 | ' 
15790                 | ' sub do_next()
15790                 | _do_next
15790     04 4A 05 F6 | 	mov	COUNT_, #4
15794     A8 00 A0 FD | 	call	#pushregs_
15798     F0 73 BF FD | 	call	#_pop
1579c     FD 26 02 F6 | 	mov	local01, result1
157a0     FE 28 02 F6 | 	mov	local02, result2
157a4     FF 2A 02 F6 | 	mov	local03, result3
157a8                 | ' t1=pop() :varnum=t1.result.uresult
157a8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
157a8     50 00 00 FF 
157ac     08 E5 05 F1 | 	add	objptr, ##41224
157b0     F2 14 02 FB | 	rdlong	arg02, objptr
157b4     0A 13 02 F6 | 	mov	arg01, arg02
157b8     02 12 66 F0 | 	shl	arg01, #2
157bc     0A 13 02 F1 | 	add	arg01, arg02
157c0     02 12 66 F0 | 	shl	arg01, #2
157c4     06 00 00 FF 
157c8     70 E4 85 F1 | 	sub	objptr, ##3184
157cc     F2 12 02 F1 | 	add	arg01, objptr
157d0     08 12 06 F1 | 	add	arg01, #8
157d4     09 15 02 FB | 	rdlong	arg02, arg01
157d8     13 15 0A F2 | 	cmp	arg02, local01 wz
157dc     4A 00 00 FF 
157e0     98 E4 85 F1 | 	sub	objptr, ##38040
157e4     10 00 90 AD |  if_e	jmp	#LR__1800
157e8     25 12 06 F6 | 	mov	arg01, #37
157ec     00 14 06 F6 | 	mov	arg02, #0
157f0     7C AD B0 FD | 	call	#_printerror
157f4     54 03 90 FD | 	jmp	#LR__1807
157f8                 | LR__1800
157f8                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
157f8     13 15 02 F6 | 	mov	arg02, local01
157fc     04 14 66 F0 | 	shl	arg02, #4
15800     14 00 00 FF 
15804     F8 E5 05 F1 | 	add	objptr, ##10744
15808     F2 14 02 F1 | 	add	arg02, objptr
1580c     0C 14 06 F1 | 	add	arg02, #12
15810     0A 15 02 FB | 	rdlong	arg02, arg02
15814     1E 14 0E F2 | 	cmp	arg02, #30 wz
15818     14 00 00 FF 
1581c     F8 E5 85 F1 | 	sub	objptr, ##10744
15820     54 00 90 5D |  if_ne	jmp	#LR__1801
15824     13 15 02 F6 | 	mov	arg02, local01
15828     04 14 66 F0 | 	shl	arg02, #4
1582c     14 00 00 FF 
15830     F8 E5 05 F1 | 	add	objptr, ##10744
15834     F2 14 02 F1 | 	add	arg02, objptr
15838     0C 14 06 F1 | 	add	arg02, #12
1583c     0A 39 68 FC | 	wrlong	#28, arg02
15840     13 2D 02 F6 | 	mov	local04, local01
15844     04 2C 66 F0 | 	shl	local04, #4
15848     F2 2C 02 F1 | 	add	local04, objptr
1584c     13 15 02 F6 | 	mov	arg02, local01
15850     04 14 66 F0 | 	shl	arg02, #4
15854     F2 14 02 F1 | 	add	arg02, objptr
15858     04 14 06 F1 | 	add	arg02, #4
1585c     0A 13 02 FB | 	rdlong	arg01, arg02
15860     14 00 00 FF 
15864     F8 E5 85 F1 | 	sub	objptr, ##10744
15868     01 14 06 F6 | 	mov	arg02, #1
1586c     E4 19 B1 FD | 	call	#__system___float_tointeger
15870     04 2C 06 F1 | 	add	local04, #4
15874     16 FB 61 FC | 	wrlong	result1, local04
15878                 | LR__1801
15878     50 00 00 FF 
1587c     08 E5 05 F1 | 	add	objptr, ##41224
15880     F2 2C 02 FB | 	rdlong	local04, objptr
15884     16 15 02 F6 | 	mov	arg02, local04
15888     02 14 66 F0 | 	shl	arg02, #2
1588c     16 15 02 F1 | 	add	arg02, local04
15890     02 14 66 F0 | 	shl	arg02, #2
15894     06 00 00 FF 
15898     70 E4 85 F1 | 	sub	objptr, ##3184
1589c     F2 14 02 F1 | 	add	arg02, objptr
158a0     0C 14 06 F1 | 	add	arg02, #12
158a4     0A FF 01 FB | 	rdlong	result3, arg02
158a8     13 2D 02 F6 | 	mov	local04, local01
158ac     04 2C 66 F0 | 	shl	local04, #4
158b0     35 00 00 FF 
158b4     A0 E4 85 F1 | 	sub	objptr, ##27296
158b8     F2 2C 02 F1 | 	add	local04, objptr
158bc     13 15 02 F6 | 	mov	arg02, local01
158c0     04 14 66 F0 | 	shl	arg02, #4
158c4     F2 14 02 F1 | 	add	arg02, objptr
158c8     04 14 06 F1 | 	add	arg02, #4
158cc     0A 13 02 FB | 	rdlong	arg01, arg02
158d0     FF 12 02 F1 | 	add	arg01, result3
158d4     04 2C 06 F1 | 	add	local04, #4
158d8     16 13 62 FC | 	wrlong	arg01, local04
158dc                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
158dc                 | ' if fortable(fortop).stepval>=0 then
158dc     3B 00 00 FF 
158e0     10 E5 05 F1 | 	add	objptr, ##30480
158e4     F2 2C 02 FB | 	rdlong	local04, objptr
158e8     16 13 02 F6 | 	mov	arg01, local04
158ec     02 12 66 F0 | 	shl	arg01, #2
158f0     16 13 02 F1 | 	add	arg01, local04
158f4     02 12 66 F0 | 	shl	arg01, #2
158f8     06 00 00 FF 
158fc     70 E4 85 F1 | 	sub	objptr, ##3184
15900     F2 12 02 F1 | 	add	arg01, objptr
15904     0C 12 06 F1 | 	add	arg01, #12
15908     09 13 02 FB | 	rdlong	arg01, arg01
1590c     00 12 56 F2 | 	cmps	arg01, #0 wc
15910     4A 00 00 FF 
15914     98 E4 85 F1 | 	sub	objptr, ##38040
15918     78 00 90 CD |  if_b	jmp	#LR__1802
1591c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
1591c     04 26 66 F0 | 	shl	local01, #4
15920     14 00 00 FF 
15924     F8 E5 05 F1 | 	add	objptr, ##10744
15928     F2 26 02 F1 | 	add	local01, objptr
1592c     3B 00 00 FF 
15930     10 E5 05 F1 | 	add	objptr, ##30480
15934     F2 12 02 FB | 	rdlong	arg01, objptr
15938     09 2D 02 F6 | 	mov	local04, arg01
1593c     02 2C 66 F0 | 	shl	local04, #2
15940     09 2D 02 F1 | 	add	local04, arg01
15944     02 2C 66 F0 | 	shl	local04, #2
15948     06 00 00 FF 
1594c     70 E4 85 F1 | 	sub	objptr, ##3184
15950     F2 2C 02 F1 | 	add	local04, objptr
15954     04 26 06 F1 | 	add	local01, #4
15958     13 27 02 FB | 	rdlong	local01, local01
1595c     10 2C 06 F1 | 	add	local04, #16
15960     16 2D 02 FB | 	rdlong	local04, local04
15964     16 27 5A F2 | 	cmps	local01, local04 wcz
15968     4A 00 00 FF 
1596c     98 E4 85 F1 | 	sub	objptr, ##38040
15970     9C 00 90 ED |  if_be	jmp	#LR__1804
15974     50 00 00 FF 
15978     08 E5 05 F1 | 	add	objptr, ##41224
1597c     F2 2C 02 FB | 	rdlong	local04, objptr
15980     01 2C 86 F1 | 	sub	local04, #1
15984     F2 2C 62 FC | 	wrlong	local04, objptr
15988     50 00 00 FF 
1598c     08 E5 85 F1 | 	sub	objptr, ##41224
15990     B8 01 90 FD | 	jmp	#LR__1807
15994                 | LR__1802
15994                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
15994     13 2D 02 F6 | 	mov	local04, local01
15998     04 2C 66 F0 | 	shl	local04, #4
1599c     14 00 00 FF 
159a0     F8 E5 05 F1 | 	add	objptr, ##10744
159a4     F2 2C 02 F1 | 	add	local04, objptr
159a8     3B 00 00 FF 
159ac     10 E5 05 F1 | 	add	objptr, ##30480
159b0     F2 26 02 FB | 	rdlong	local01, objptr
159b4     13 13 02 F6 | 	mov	arg01, local01
159b8     02 12 66 F0 | 	shl	arg01, #2
159bc     13 13 02 F1 | 	add	arg01, local01
159c0     02 12 66 F0 | 	shl	arg01, #2
159c4     06 00 00 FF 
159c8     70 E4 85 F1 | 	sub	objptr, ##3184
159cc     F2 12 02 F1 | 	add	arg01, objptr
159d0     04 2C 06 F1 | 	add	local04, #4
159d4     16 2D 02 FB | 	rdlong	local04, local04
159d8     10 12 06 F1 | 	add	arg01, #16
159dc     09 13 02 FB | 	rdlong	arg01, arg01
159e0     09 2D 52 F2 | 	cmps	local04, arg01 wc
159e4     4A 00 00 FF 
159e8     98 E4 85 F1 | 	sub	objptr, ##38040
159ec     20 00 90 3D |  if_ae	jmp	#LR__1803
159f0     50 00 00 FF 
159f4     08 E5 05 F1 | 	add	objptr, ##41224
159f8     F2 2C 02 FB | 	rdlong	local04, objptr
159fc     01 2C 86 F1 | 	sub	local04, #1
15a00     F2 2C 62 FC | 	wrlong	local04, objptr
15a04     50 00 00 FF 
15a08     08 E5 85 F1 | 	sub	objptr, ##41224
15a0c     3C 01 90 FD | 	jmp	#LR__1807
15a10                 | LR__1803
15a10                 | LR__1804
15a10                 | ' ' if not returned, goto pointer 
15a10                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15a10     50 00 00 FF 
15a14     EC E4 05 F1 | 	add	objptr, ##41196
15a18     F2 2C 02 FB | 	rdlong	local04, objptr
15a1c     50 00 00 FF 
15a20     EC E4 85 F1 | 	sub	objptr, ##41196
15a24     01 2C 16 F2 | 	cmp	local04, #1 wc
15a28     DC 00 90 CD |  if_b	jmp	#LR__1805
15a2c     50 00 00 FF 
15a30     08 E5 05 F1 | 	add	objptr, ##41224
15a34     F2 2C 02 FB | 	rdlong	local04, objptr
15a38     16 27 02 F6 | 	mov	local01, local04
15a3c     02 26 66 F0 | 	shl	local01, #2
15a40     16 27 02 F1 | 	add	local01, local04
15a44     02 26 66 F0 | 	shl	local01, #2
15a48     06 00 00 FF 
15a4c     70 E4 85 F1 | 	sub	objptr, ##3184
15a50     F2 26 02 F1 | 	add	local01, objptr
15a54     06 00 00 FF 
15a58     20 E4 05 F1 | 	add	objptr, ##3104
15a5c     F2 2C 02 FB | 	rdlong	local04, objptr
15a60     50 00 00 FF 
15a64     B8 E4 85 F1 | 	sub	objptr, ##41144
15a68     13 27 02 FB | 	rdlong	local01, local01
15a6c     13 2D 0A F2 | 	cmp	local04, local01 wz
15a70     94 00 90 AD |  if_e	jmp	#LR__1805
15a74     50 00 00 FF 
15a78     08 E5 05 F1 | 	add	objptr, ##41224
15a7c     F2 2C 02 FB | 	rdlong	local04, objptr
15a80     16 27 02 F6 | 	mov	local01, local04
15a84     02 26 66 F0 | 	shl	local01, #2
15a88     16 27 02 F1 | 	add	local01, local04
15a8c     02 26 66 F0 | 	shl	local01, #2
15a90     06 00 00 FF 
15a94     70 E4 85 F1 | 	sub	objptr, ##3184
15a98     F2 26 02 F1 | 	add	local01, objptr
15a9c     13 27 02 FB | 	rdlong	local01, local01
15aa0     06 00 00 FF 
15aa4     20 E4 05 F1 | 	add	objptr, ##3104
15aa8     F2 26 62 FC | 	wrlong	local01, objptr
15aac     50 E4 05 F1 | 	add	objptr, #80
15ab0     F2 2C 02 FB | 	rdlong	local04, objptr
15ab4     16 27 02 F6 | 	mov	local01, local04
15ab8     02 26 66 F0 | 	shl	local01, #2
15abc     16 27 02 F1 | 	add	local01, local04
15ac0     02 26 66 F0 | 	shl	local01, #2
15ac4     06 00 00 FF 
15ac8     70 E4 85 F1 | 	sub	objptr, ##3184
15acc     F2 26 02 F1 | 	add	local01, objptr
15ad0     04 26 06 F1 | 	add	local01, #4
15ad4     13 27 02 FB | 	rdlong	local01, local01
15ad8     06 00 00 FF 
15adc     24 E4 05 F1 | 	add	objptr, ##3108
15ae0     F2 26 62 FC | 	wrlong	local01, objptr
15ae4     06 00 00 FF 
15ae8     40 E4 85 F1 | 	sub	objptr, ##3136
15aec     F2 2C 02 FB | 	rdlong	local04, objptr
15af0     01 2C 86 F1 | 	sub	local04, #1
15af4     04 E4 05 F1 | 	add	objptr, #4
15af8     F2 2C 62 FC | 	wrlong	local04, objptr
15afc     4A 00 00 FF 
15b00     80 E4 85 F1 | 	sub	objptr, ##38016
15b04     44 00 90 FD | 	jmp	#LR__1806
15b08                 | LR__1805
15b08     50 00 00 FF 
15b0c     08 E5 05 F1 | 	add	objptr, ##41224
15b10     F2 2C 02 FB | 	rdlong	local04, objptr
15b14     16 27 02 F6 | 	mov	local01, local04
15b18     02 26 66 F0 | 	shl	local01, #2
15b1c     16 27 02 F1 | 	add	local01, local04
15b20     02 26 66 F0 | 	shl	local01, #2
15b24     06 00 00 FF 
15b28     70 E4 85 F1 | 	sub	objptr, ##3184
15b2c     F2 26 02 F1 | 	add	local01, objptr
15b30     04 26 06 F1 | 	add	local01, #4
15b34     13 27 02 FB | 	rdlong	local01, local01
15b38     01 26 86 F1 | 	sub	local01, #1
15b3c     18 E4 85 F1 | 	sub	objptr, #24
15b40     F2 26 62 FC | 	wrlong	local01, objptr
15b44     4A 00 00 FF 
15b48     80 E4 85 F1 | 	sub	objptr, ##38016
15b4c                 | LR__1806
15b4c                 | LR__1807
15b4c     A7 F0 03 F6 | 	mov	ptra, fp
15b50     B2 00 A0 FD | 	call	#popregs_
15b54                 | _do_next_ret
15b54     2D 00 64 FD | 	ret
15b58                 | 
15b58                 | ' 
15b58                 | ' '-------------------- no command (print "Unknown command")
15b58                 | ' 
15b58                 | ' sub do_no_command
15b58                 | _do_no_command
15b58     50 00 00 FF 
15b5c     F0 E4 05 F1 | 	add	objptr, ##41200
15b60     F2 14 02 FB | 	rdlong	arg02, objptr
15b64     50 00 00 FF 
15b68     F0 E4 85 F1 | 	sub	objptr, ##41200
15b6c     17 12 06 F6 | 	mov	arg01, #23
15b70     FC A9 B0 FD | 	call	#_printerror
15b74                 | _do_no_command_ret
15b74     2D 00 64 FD | 	ret
15b78                 | 
15b78                 | ' 
15b78                 | ' '-------------------- nothing
15b78                 | ' 
15b78                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15b78                 | _do_nothing
15b78                 | _do_nothing_ret
15b78     2D 00 64 FD | 	ret
15b7c                 | 
15b7c                 | ' 
15b7c                 | ' '-------------------- on
15b7c                 | ' 
15b7c                 | ' sub do_on
15b7c                 | _do_on
15b7c     01 4A 05 F6 | 	mov	COUNT_, #1
15b80     A8 00 A0 FD | 	call	#pushregs_
15b84     18 F0 07 F1 | 	add	ptra, #24
15b88     4A 00 00 FF 
15b8c     80 E4 05 F1 | 	add	objptr, ##38016
15b90     F2 12 02 FB | 	rdlong	arg01, objptr
15b94     09 FD 01 F6 | 	mov	result2, arg01
15b98     01 FC 65 F0 | 	shl	result2, #1
15b9c     09 FD 01 F1 | 	add	result2, arg01
15ba0     02 FC 65 F0 | 	shl	result2, #2
15ba4     03 00 00 FF 
15ba8     04 E4 85 F1 | 	sub	objptr, ##1540
15bac     F2 FC 01 F1 | 	add	result2, objptr
15bb0     FE 12 02 FB | 	rdlong	arg01, result2
15bb4     14 4E 05 F1 | 	add	fp, #20
15bb8     A7 12 62 FC | 	wrlong	arg01, fp
15bbc     03 00 00 FF 
15bc0     04 E4 05 F1 | 	add	objptr, ##1540
15bc4     F2 12 02 FB | 	rdlong	arg01, objptr
15bc8     09 27 02 F6 | 	mov	local01, arg01
15bcc     01 26 66 F0 | 	shl	local01, #1
15bd0     09 27 02 F1 | 	add	local01, arg01
15bd4     02 26 66 F0 | 	shl	local01, #2
15bd8     03 00 00 FF 
15bdc     04 E4 85 F1 | 	sub	objptr, ##1540
15be0     F2 26 02 F1 | 	add	local01, objptr
15be4     04 26 06 F1 | 	add	local01, #4
15be8     13 27 02 FB | 	rdlong	local01, local01
15bec     08 4E 85 F1 | 	sub	fp, #8
15bf0     A7 26 62 FC | 	wrlong	local01, fp
15bf4     0C 4E 85 F1 | 	sub	fp, #12
15bf8     47 00 00 FF 
15bfc     7C E4 85 F1 | 	sub	objptr, ##36476
15c00     88 6F BF FD | 	call	#_pop
15c04     FF 26 02 F6 | 	mov	local01, result3
15c08     A7 FA 61 FC | 	wrlong	result1, fp
15c0c     04 4E 05 F1 | 	add	fp, #4
15c10     A7 FC 61 FC | 	wrlong	result2, fp
15c14     04 4E 05 F1 | 	add	fp, #4
15c18     A7 26 62 FC | 	wrlong	local01, fp
15c1c     08 4E 85 F1 | 	sub	fp, #8
15c20     A7 12 02 F6 | 	mov	arg01, fp
15c24     48 71 BF FD | 	call	#_converttoint
15c28     10 4E 05 F1 | 	add	fp, #16
15c2c     A7 FA 61 FC | 	wrlong	result1, fp
15c30                 | ' 
15c30                 | ' numpar=compiledline(lineptr_e).result.uresult
15c30                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15c30                 | ' t1=pop()
15c30                 | ' t=converttoint(t1)
15c30                 | ' if t<1 orelse t>numpar then return
15c30     10 4E 85 F1 | 	sub	fp, #16
15c34     01 FA 55 F2 | 	cmps	result1, #1 wc
15c38     58 00 90 CD |  if_b	jmp	#LR__1810
15c3c     10 4E 05 F1 | 	add	fp, #16
15c40     A7 26 02 FB | 	rdlong	local01, fp
15c44     04 4E 05 F1 | 	add	fp, #4
15c48     A7 12 02 FB | 	rdlong	arg01, fp
15c4c     14 4E 85 F1 | 	sub	fp, #20
15c50     09 27 5A F2 | 	cmps	local01, arg01 wcz
15c54     3C 00 90 1D |  if_a	jmp	#LR__1810
15c58     10 4E 05 F1 | 	add	fp, #16
15c5c     A7 26 02 FB | 	rdlong	local01, fp
15c60     01 26 86 F1 | 	sub	local01, #1
15c64     04 4E 85 F1 | 	sub	fp, #4
15c68     A7 12 02 FB | 	rdlong	arg01, fp
15c6c     13 13 02 FD | 	qmul	arg01, local01
15c70     4A 00 00 FF 
15c74     80 E4 05 F1 | 	add	objptr, ##38016
15c78     F2 26 02 FB | 	rdlong	local01, objptr
15c7c     0C 4E 85 F1 | 	sub	fp, #12
15c80     18 12 62 FD | 	getqx	arg01
15c84     09 27 02 F1 | 	add	local01, arg01
15c88     F2 26 62 FC | 	wrlong	local01, objptr
15c8c     4A 00 00 FF 
15c90     80 E4 85 F1 | 	sub	objptr, ##38016
15c94                 | LR__1810
15c94     A7 F0 03 F6 | 	mov	ptra, fp
15c98     B2 00 A0 FD | 	call	#popregs_
15c9c                 | _do_on_ret
15c9c     2D 00 64 FD | 	ret
15ca0                 | 
15ca0                 | ' 
15ca0                 | ' '-------------------- open
15ca0                 | ' 
15ca0                 | ' sub do_open
15ca0                 | _do_open
15ca0     02 4A 05 F6 | 	mov	COUNT_, #2
15ca4     A8 00 A0 FD | 	call	#pushregs_
15ca8     20 F0 07 F1 | 	add	ptra, #32
15cac     4A 00 00 FF 
15cb0     80 E4 05 F1 | 	add	objptr, ##38016
15cb4     F2 16 02 FB | 	rdlong	arg03, objptr
15cb8     0B 15 02 F6 | 	mov	arg02, arg03
15cbc     01 14 66 F0 | 	shl	arg02, #1
15cc0     0B 15 02 F1 | 	add	arg02, arg03
15cc4     02 14 66 F0 | 	shl	arg02, #2
15cc8     03 00 00 FF 
15ccc     04 E4 85 F1 | 	sub	objptr, ##1540
15cd0     F2 14 02 F1 | 	add	arg02, objptr
15cd4     0A 17 02 FB | 	rdlong	arg03, arg02
15cd8     10 4E 05 F1 | 	add	fp, #16
15cdc     A7 16 62 FC | 	wrlong	arg03, fp
15ce0     10 4E 85 F1 | 	sub	fp, #16
15ce4     47 00 00 FF 
15ce8     7C E4 85 F1 | 	sub	objptr, ##36476
15cec     9C 6E BF FD | 	call	#_pop
15cf0     FF 16 02 F6 | 	mov	arg03, result3
15cf4     A7 FA 61 FC | 	wrlong	result1, fp
15cf8     04 4E 05 F1 | 	add	fp, #4
15cfc     A7 FC 61 FC | 	wrlong	result2, fp
15d00     04 4E 05 F1 | 	add	fp, #4
15d04     A7 16 62 FC | 	wrlong	arg03, fp
15d08                 | ' 
15d08                 | ' numpar=compiledline(lineptr_e).result.uresult
15d08                 | ' 
15d08                 | ' t1=pop()
15d08                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15d08     08 4E 85 F1 | 	sub	fp, #8
15d0c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15d10     18 00 90 5D |  if_ne	jmp	#LR__1820
15d14     A7 12 02 FB | 	rdlong	arg01, fp
15d18     E8 6F BF FD | 	call	#_convertstring
15d1c     A7 FA 61 FC | 	wrlong	result1, fp
15d20     08 4E 05 F1 | 	add	fp, #8
15d24     A7 3E 68 FC | 	wrlong	#31, fp
15d28     08 4E 85 F1 | 	sub	fp, #8
15d2c                 | LR__1820
15d2c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15d2c     08 4E 05 F1 | 	add	fp, #8
15d30     A7 16 02 FB | 	rdlong	arg03, fp
15d34     08 4E 85 F1 | 	sub	fp, #8
15d38     1F 16 0E F2 | 	cmp	arg03, #31 wz
15d3c     44 00 90 AD |  if_e	jmp	#LR__1821
15d40     00 12 06 F6 | 	mov	arg01, #0
15d44     F4 3E B1 FD | 	call	#__system___getiolock_0579
15d48     FD 12 02 F6 | 	mov	arg01, result1
15d4c     C4 E1 B0 FD | 	call	#__system___lockmem
15d50     A2 01 00 FF 
15d54     1D 14 06 F6 | 	mov	arg02, ##@LR__5775
15d58     00 12 06 F6 | 	mov	arg01, #0
15d5c     00 16 06 F6 | 	mov	arg03, #0
15d60     A4 EE B0 FD | 	call	#__system___basic_print_string
15d64     00 12 06 F6 | 	mov	arg01, #0
15d68     0A 14 06 F6 | 	mov	arg02, #10
15d6c     00 16 06 F6 | 	mov	arg03, #0
15d70     3C EE B0 FD | 	call	#__system___basic_print_char
15d74     00 12 06 F6 | 	mov	arg01, #0
15d78     C0 3E B1 FD | 	call	#__system___getiolock_0579
15d7c     FD 00 68 FC | 	wrlong	#0, result1
15d80     28 02 90 FD | 	jmp	#LR__1832
15d84                 | LR__1821
15d84     A7 16 02 FB | 	rdlong	arg03, fp
15d88     0C 4E 05 F1 | 	add	fp, #12
15d8c     A7 16 62 FC | 	wrlong	arg03, fp
15d90     0C 4E 85 F1 | 	sub	fp, #12
15d94     F4 6D BF FD | 	call	#_pop
15d98     FF 16 02 F6 | 	mov	arg03, result3
15d9c     A7 FA 61 FC | 	wrlong	result1, fp
15da0     04 4E 05 F1 | 	add	fp, #4
15da4     A7 FC 61 FC | 	wrlong	result2, fp
15da8     04 4E 05 F1 | 	add	fp, #4
15dac     A7 16 62 FC | 	wrlong	arg03, fp
15db0                 | ' filename=t1.result.sresult
15db0                 | ' t1=pop()
15db0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15db0     08 4E 85 F1 | 	sub	fp, #8
15db4     2B 16 0E F2 | 	cmp	arg03, #43 wz
15db8     18 00 90 5D |  if_ne	jmp	#LR__1822
15dbc     A7 12 02 FB | 	rdlong	arg01, fp
15dc0     40 6F BF FD | 	call	#_convertstring
15dc4     A7 FA 61 FC | 	wrlong	result1, fp
15dc8     08 4E 05 F1 | 	add	fp, #8
15dcc     A7 3E 68 FC | 	wrlong	#31, fp
15dd0     08 4E 85 F1 | 	sub	fp, #8
15dd4                 | LR__1822
15dd4     14 4E 05 F1 | 	add	fp, #20
15dd8     A7 00 68 FC | 	wrlong	#0, fp
15ddc                 | ' mode=0
15ddc                 | ' if t1.result_type=result_string then
15ddc     0C 4E 85 F1 | 	sub	fp, #12
15de0     A7 14 02 FB | 	rdlong	arg02, fp
15de4     08 4E 85 F1 | 	sub	fp, #8
15de8     1F 14 0E F2 | 	cmp	arg02, #31 wz
15dec     64 00 90 5D |  if_ne	jmp	#LR__1823
15df0                 | '   if t1.result.sresult="read" then mode=1
15df0     A7 12 02 FB | 	rdlong	arg01, fp
15df4     A2 01 00 FF 
15df8     2F 14 06 F6 | 	mov	arg02, ##@LR__5776
15dfc     3C E1 B0 FD | 	call	#__system___string_cmp
15e00     00 FA 0D F2 | 	cmp	result1, #0 wz
15e04     14 4E 05 A1 |  if_e	add	fp, #20
15e08     A7 02 68 AC |  if_e	wrlong	#1, fp
15e0c     14 4E 85 A1 |  if_e	sub	fp, #20
15e10                 | '   if t1.result.sresult="write" then mode=2
15e10     A7 12 02 FB | 	rdlong	arg01, fp
15e14     A2 01 00 FF 
15e18     34 14 06 F6 | 	mov	arg02, ##@LR__5777
15e1c     1C E1 B0 FD | 	call	#__system___string_cmp
15e20     00 FA 0D F2 | 	cmp	result1, #0 wz
15e24     14 4E 05 A1 |  if_e	add	fp, #20
15e28     A7 04 68 AC |  if_e	wrlong	#2, fp
15e2c     14 4E 85 A1 |  if_e	sub	fp, #20
15e30                 | '   if t1.result.sresult="append" then mode=4
15e30     A7 12 02 FB | 	rdlong	arg01, fp
15e34     A2 01 00 FF 
15e38     3A 14 06 F6 | 	mov	arg02, ##@LR__5778
15e3c     FC E0 B0 FD | 	call	#__system___string_cmp
15e40     00 FA 0D F2 | 	cmp	result1, #0 wz
15e44     14 4E 05 A1 |  if_e	add	fp, #20
15e48     A7 08 68 AC |  if_e	wrlong	#4, fp
15e4c     14 4E 85 A1 |  if_e	sub	fp, #20
15e50     14 00 90 FD | 	jmp	#LR__1824
15e54                 | LR__1823
15e54     A7 12 02 F6 | 	mov	arg01, fp
15e58     14 6F BF FD | 	call	#_converttoint
15e5c     14 4E 05 F1 | 	add	fp, #20
15e60     A7 FA 61 FC | 	wrlong	result1, fp
15e64     14 4E 85 F1 | 	sub	fp, #20
15e68                 | LR__1824
15e68     20 6D BF FD | 	call	#_pop
15e6c     FF 16 02 F6 | 	mov	arg03, result3
15e70     A7 FA 61 FC | 	wrlong	result1, fp
15e74     04 4E 05 F1 | 	add	fp, #4
15e78     A7 FC 61 FC | 	wrlong	result2, fp
15e7c     04 4E 05 F1 | 	add	fp, #4
15e80     A7 16 62 FC | 	wrlong	arg03, fp
15e84                 | ' t1=pop()
15e84                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15e84     08 4E 85 F1 | 	sub	fp, #8
15e88     2C 16 0E F2 | 	cmp	arg03, #44 wz
15e8c     44 00 90 AD |  if_e	jmp	#LR__1825
15e90     00 12 06 F6 | 	mov	arg01, #0
15e94     A4 3D B1 FD | 	call	#__system___getiolock_0579
15e98     FD 12 02 F6 | 	mov	arg01, result1
15e9c     74 E0 B0 FD | 	call	#__system___lockmem
15ea0     A2 01 00 FF 
15ea4     41 14 06 F6 | 	mov	arg02, ##@LR__5779
15ea8     00 12 06 F6 | 	mov	arg01, #0
15eac     00 16 06 F6 | 	mov	arg03, #0
15eb0     54 ED B0 FD | 	call	#__system___basic_print_string
15eb4     00 12 06 F6 | 	mov	arg01, #0
15eb8     0A 14 06 F6 | 	mov	arg02, #10
15ebc     00 16 06 F6 | 	mov	arg03, #0
15ec0     EC EC B0 FD | 	call	#__system___basic_print_char
15ec4     00 12 06 F6 | 	mov	arg01, #0
15ec8     70 3D B1 FD | 	call	#__system___getiolock_0579
15ecc     FD 00 68 FC | 	wrlong	#0, result1
15ed0     D8 00 90 FD | 	jmp	#LR__1832
15ed4                 | LR__1825
15ed4     A7 26 02 FB | 	rdlong	local01, fp
15ed8     18 4E 05 F1 | 	add	fp, #24
15edc     A7 26 62 FC | 	wrlong	local01, fp
15ee0                 | ' channel  = t1.result.iresult
15ee0                 | ' select case  mode
15ee0     04 4E 85 F1 | 	sub	fp, #4
15ee4     A7 28 02 FB | 	rdlong	local02, fp
15ee8     14 4E 85 F1 | 	sub	fp, #20
15eec     01 28 86 F1 | 	sub	local02, #1
15ef0     04 28 26 F3 | 	fle	local02, #4
15ef4     30 28 62 FD | 	jmprel	local02
15ef8                 | LR__1826
15ef8     10 00 90 FD | 	jmp	#LR__1827
15efc     2C 00 90 FD | 	jmp	#LR__1828
15f00     68 00 90 FD | 	jmp	#LR__1830
15f04     44 00 90 FD | 	jmp	#LR__1829
15f08     60 00 90 FD | 	jmp	#LR__1830
15f0c                 | LR__1827
15f0c     18 4E 05 F1 | 	add	fp, #24
15f10     A7 12 02 FB | 	rdlong	arg01, fp
15f14     0C 4E 85 F1 | 	sub	fp, #12
15f18     A7 14 02 FB | 	rdlong	arg02, fp
15f1c     0C 4E 85 F1 | 	sub	fp, #12
15f20     00 16 06 F6 | 	mov	arg03, #0
15f24     F0 EB B0 FD | 	call	#__system___basic_open_string
15f28     80 00 90 FD | 	jmp	#LR__1831
15f2c                 | LR__1828
15f2c     18 4E 05 F1 | 	add	fp, #24
15f30     A7 12 02 FB | 	rdlong	arg01, fp
15f34     0C 4E 85 F1 | 	sub	fp, #12
15f38     A7 14 02 FB | 	rdlong	arg02, fp
15f3c     0C 4E 85 F1 | 	sub	fp, #12
15f40     0D 16 06 F6 | 	mov	arg03, #13
15f44     D0 EB B0 FD | 	call	#__system___basic_open_string
15f48     60 00 90 FD | 	jmp	#LR__1831
15f4c                 | LR__1829
15f4c     18 4E 05 F1 | 	add	fp, #24
15f50     A7 12 02 FB | 	rdlong	arg01, fp
15f54     0C 4E 85 F1 | 	sub	fp, #12
15f58     A7 14 02 FB | 	rdlong	arg02, fp
15f5c     0C 4E 85 F1 | 	sub	fp, #12
15f60     25 16 06 F6 | 	mov	arg03, #37
15f64     B0 EB B0 FD | 	call	#__system___basic_open_string
15f68     40 00 90 FD | 	jmp	#LR__1831
15f6c                 | LR__1830
15f6c     00 12 06 F6 | 	mov	arg01, #0
15f70     C8 3C B1 FD | 	call	#__system___getiolock_0579
15f74     FD 12 02 F6 | 	mov	arg01, result1
15f78     98 DF B0 FD | 	call	#__system___lockmem
15f7c     A2 01 00 FF 
15f80     53 14 06 F6 | 	mov	arg02, ##@LR__5780
15f84     00 12 06 F6 | 	mov	arg01, #0
15f88     00 16 06 F6 | 	mov	arg03, #0
15f8c     78 EC B0 FD | 	call	#__system___basic_print_string
15f90     00 12 06 F6 | 	mov	arg01, #0
15f94     0A 14 06 F6 | 	mov	arg02, #10
15f98     00 16 06 F6 | 	mov	arg03, #0
15f9c     10 EC B0 FD | 	call	#__system___basic_print_char
15fa0     00 12 06 F6 | 	mov	arg01, #0
15fa4     94 3C B1 FD | 	call	#__system___getiolock_0579
15fa8     FD 00 68 FC | 	wrlong	#0, result1
15fac                 | LR__1831
15fac                 | LR__1832
15fac     A7 F0 03 F6 | 	mov	ptra, fp
15fb0     B2 00 A0 FD | 	call	#popregs_
15fb4                 | _do_open_ret
15fb4     2D 00 64 FD | 	ret
15fb8                 | 
15fb8                 | ' 
15fb8                 | ' '-------------------- paper
15fb8                 | ' 
15fb8                 | ' sub do_paper
15fb8                 | _do_paper
15fb8     03 4A 05 F6 | 	mov	COUNT_, #3
15fbc     A8 00 A0 FD | 	call	#pushregs_
15fc0     C8 6B BF FD | 	call	#_pop
15fc4     FD 26 02 F6 | 	mov	local01, result1
15fc8     FE 28 02 F6 | 	mov	local02, result2
15fcc     FF 2A 02 F6 | 	mov	local03, result3
15fd0                 | ' t1=pop() 
15fd0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15fd0     1E 2A 0E F2 | 	cmp	local03, #30 wz
15fd4     10 00 90 5D |  if_ne	jmp	#LR__1840
15fd8     13 13 02 F6 | 	mov	arg01, local01
15fdc     00 14 06 F6 | 	mov	arg02, #0
15fe0     70 12 B1 FD | 	call	#__system___float_tointeger
15fe4     FD 26 02 F6 | 	mov	local01, result1
15fe8                 | LR__1840
15fe8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15fe8     1F 2A 0E F2 | 	cmp	local03, #31 wz
15fec     18 00 90 5D |  if_ne	jmp	#LR__1841
15ff0     13 13 02 F6 | 	mov	arg01, local01
15ff4     A0 15 B1 FD | 	call	#__system____builtin_atof
15ff8     FD 12 02 F6 | 	mov	arg01, result1
15ffc     00 14 06 F6 | 	mov	arg02, #0
16000     50 12 B1 FD | 	call	#__system___float_tointeger
16004     FD 26 02 F6 | 	mov	local01, result1
16008                 | LR__1841
16008     37 00 00 FF 
1600c     38 E4 05 F1 | 	add	objptr, ##28216
16010     F2 26 62 FC | 	wrlong	local01, objptr
16014     04 E4 05 F1 | 	add	objptr, #4
16018     F2 12 02 FB | 	rdlong	arg01, objptr
1601c                 | ' 
1601c                 | ' write_color:=ff
1601c     36 00 00 FF 
16020     FB E5 85 F1 | 	sub	objptr, ##28155
16024     F2 12 62 FC | 	wrlong	arg01, objptr
16028                 | ' write_background:=bb
16028     04 E4 05 F1 | 	add	objptr, #4
1602c     F2 26 62 FC | 	wrlong	local01, objptr
16030     45 E4 85 F1 | 	sub	objptr, #69
16034     A7 F0 03 F6 | 	mov	ptra, fp
16038     B2 00 A0 FD | 	call	#popregs_
1603c                 | _do_paper_ret
1603c     2D 00 64 FD | 	ret
16040                 | 
16040                 | ' 
16040                 | ' '-------------------- peek
16040                 | ' 
16040                 | ' sub do_peek
16040                 | _do_peek
16040     00 4A 05 F6 | 	mov	COUNT_, #0
16044     A8 00 A0 FD | 	call	#pushregs_
16048     14 F0 07 F1 | 	add	ptra, #20
1604c     3C 6B BF FD | 	call	#_pop
16050     A7 FA 61 FC | 	wrlong	result1, fp
16054     04 4E 05 F1 | 	add	fp, #4
16058     A7 FC 61 FC | 	wrlong	result2, fp
1605c     04 4E 05 F1 | 	add	fp, #4
16060     A7 FE 61 FC | 	wrlong	result3, fp
16064     08 4E 85 F1 | 	sub	fp, #8
16068     A7 12 02 F6 | 	mov	arg01, fp
1606c     00 6D BF FD | 	call	#_converttoint
16070     0C 4E 05 F1 | 	add	fp, #12
16074     A7 FA 61 FC | 	wrlong	result1, fp
16078                 | ' 
16078                 | ' t1=pop()
16078                 | ' a=converttoint(t1)
16078                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
16078     0C 4E 85 F1 | 	sub	fp, #12
1607c     00 04 00 FF 
16080     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16084     1C 00 90 3D |  if_ae	jmp	#LR__1850
16088     0C 4E 05 F1 | 	add	fp, #12
1608c     A7 12 02 FB | 	rdlong	arg01, fp
16090     09 FB C1 FA | 	rdbyte	result1, arg01
16094     04 4E 05 F1 | 	add	fp, #4
16098     A7 FA 61 FC | 	wrlong	result1, fp
1609c     10 4E 85 F1 | 	sub	fp, #16
160a0     20 00 90 FD | 	jmp	#LR__1851
160a4                 | LR__1850
160a4     0C 4E 05 F1 | 	add	fp, #12
160a8     A7 12 02 FB | 	rdlong	arg01, fp
160ac     0C 4E 85 F1 | 	sub	fp, #12
160b0     34 A7 B0 FD | 	call	#_pspeek
160b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
160b8     10 4E 05 F1 | 	add	fp, #16
160bc     A7 FA 61 FC | 	wrlong	result1, fp
160c0     10 4E 85 F1 | 	sub	fp, #16
160c4                 | LR__1851
160c4     08 4E 05 F1 | 	add	fp, #8
160c8     A7 3A 68 FC | 	wrlong	#29, fp
160cc     08 4E 05 F1 | 	add	fp, #8
160d0     A7 12 02 FB | 	rdlong	arg01, fp
160d4     10 4E 85 F1 | 	sub	fp, #16
160d8     A7 12 62 FC | 	wrlong	arg01, fp
160dc     A7 12 02 F6 | 	mov	arg01, fp
160e0     40 6B BF FD | 	call	#_push
160e4     A7 F0 03 F6 | 	mov	ptra, fp
160e8     B2 00 A0 FD | 	call	#popregs_
160ec                 | _do_peek_ret
160ec     2D 00 64 FD | 	ret
160f0                 | 
160f0                 | ' 
160f0                 | ' '-------------------- pinfloat
160f0                 | ' 
160f0                 | ' sub do_pinfloat
160f0                 | _do_pinfloat
160f0     00 4A 05 F6 | 	mov	COUNT_, #0
160f4     A8 00 A0 FD | 	call	#pushregs_
160f8     0C F0 07 F1 | 	add	ptra, #12
160fc     8C 6A BF FD | 	call	#_pop
16100     A7 FA 61 FC | 	wrlong	result1, fp
16104     04 4E 05 F1 | 	add	fp, #4
16108     A7 FC 61 FC | 	wrlong	result2, fp
1610c     04 4E 05 F1 | 	add	fp, #4
16110     A7 FE 61 FC | 	wrlong	result3, fp
16114     08 4E 85 F1 | 	sub	fp, #8
16118     A7 12 02 F6 | 	mov	arg01, fp
1611c     50 6C BF FD | 	call	#_converttoint
16120     50 FA 61 FD | 	fltl	result1
16124     A7 F0 03 F6 | 	mov	ptra, fp
16128     B2 00 A0 FD | 	call	#popregs_
1612c                 | _do_pinfloat_ret
1612c     2D 00 64 FD | 	ret
16130                 | 
16130                 | ' 
16130                 | ' '-------------------- pinhi
16130                 | ' 
16130                 | ' sub do_pinhi
16130                 | _do_pinhi
16130     00 4A 05 F6 | 	mov	COUNT_, #0
16134     A8 00 A0 FD | 	call	#pushregs_
16138     0C F0 07 F1 | 	add	ptra, #12
1613c     4C 6A BF FD | 	call	#_pop
16140     A7 FA 61 FC | 	wrlong	result1, fp
16144     04 4E 05 F1 | 	add	fp, #4
16148     A7 FC 61 FC | 	wrlong	result2, fp
1614c     04 4E 05 F1 | 	add	fp, #4
16150     A7 FE 61 FC | 	wrlong	result3, fp
16154     08 4E 85 F1 | 	sub	fp, #8
16158     A7 12 02 F6 | 	mov	arg01, fp
1615c     10 6C BF FD | 	call	#_converttoint
16160     59 FA 61 FD | 	drvh	result1
16164     A7 F0 03 F6 | 	mov	ptra, fp
16168     B2 00 A0 FD | 	call	#popregs_
1616c                 | _do_pinhi_ret
1616c     2D 00 64 FD | 	ret
16170                 | 
16170                 | ' 
16170                 | ' '-------------------- pinlo
16170                 | ' 
16170                 | ' sub do_pinlo
16170                 | _do_pinlo
16170     00 4A 05 F6 | 	mov	COUNT_, #0
16174     A8 00 A0 FD | 	call	#pushregs_
16178     0C F0 07 F1 | 	add	ptra, #12
1617c     0C 6A BF FD | 	call	#_pop
16180     A7 FA 61 FC | 	wrlong	result1, fp
16184     04 4E 05 F1 | 	add	fp, #4
16188     A7 FC 61 FC | 	wrlong	result2, fp
1618c     04 4E 05 F1 | 	add	fp, #4
16190     A7 FE 61 FC | 	wrlong	result3, fp
16194     08 4E 85 F1 | 	sub	fp, #8
16198     A7 12 02 F6 | 	mov	arg01, fp
1619c     D0 6B BF FD | 	call	#_converttoint
161a0     58 FA 61 FD | 	drvl	result1
161a4     A7 F0 03 F6 | 	mov	ptra, fp
161a8     B2 00 A0 FD | 	call	#popregs_
161ac                 | _do_pinlo_ret
161ac     2D 00 64 FD | 	ret
161b0                 | 
161b0                 | ' 
161b0                 | ' '-------------------- pinread
161b0                 | ' 
161b0                 | ' sub do_pinread
161b0                 | _do_pinread
161b0     00 4A 05 F6 | 	mov	COUNT_, #0
161b4     A8 00 A0 FD | 	call	#pushregs_
161b8     0C F0 07 F1 | 	add	ptra, #12
161bc     CC 69 BF FD | 	call	#_pop
161c0     A7 FA 61 FC | 	wrlong	result1, fp
161c4     04 4E 05 F1 | 	add	fp, #4
161c8     A7 FC 61 FC | 	wrlong	result2, fp
161cc     04 4E 05 F1 | 	add	fp, #4
161d0     A7 FE 61 FC | 	wrlong	result3, fp
161d4     08 4E 85 F1 | 	sub	fp, #8
161d8     A7 12 02 F6 | 	mov	arg01, fp
161dc     90 6B BF FD | 	call	#_converttoint
161e0     FD 12 02 F6 | 	mov	arg01, result1
161e4     20 12 CE F7 | 	test	arg01, #32 wz
161e8     FF FB 01 56 |  if_ne	mov	result1, inb
161ec     FE FB 01 A6 |  if_e	mov	result1, ina
161f0     09 FB 41 F0 | 	shr	result1, arg01
161f4     06 12 46 F0 | 	shr	arg01, #6
161f8     09 FB 41 F7 | 	zerox	result1, arg01
161fc     52 00 00 FF 
16200     20 E4 05 F1 | 	add	objptr, ##42016
16204     F2 FA 61 FC | 	wrlong	result1, objptr
16208     52 00 00 FF 
1620c     20 E4 85 F1 | 	sub	objptr, ##42016
16210     08 4E 05 F1 | 	add	fp, #8
16214     A7 3A 68 FC | 	wrlong	#29, fp
16218     08 4E 85 F1 | 	sub	fp, #8
1621c     A7 08 68 FC | 	wrlong	#4, fp
16220     A7 12 02 F6 | 	mov	arg01, fp
16224     FC 69 BF FD | 	call	#_push
16228     A7 F0 03 F6 | 	mov	ptra, fp
1622c     B2 00 A0 FD | 	call	#popregs_
16230                 | _do_pinread_ret
16230     2D 00 64 FD | 	ret
16234                 | 
16234                 | ' 
16234                 | ' '-------------------- pinstart
16234                 | ' 
16234                 | ' sub do_pinstart
16234                 | _do_pinstart
16234     03 4A 05 F6 | 	mov	COUNT_, #3
16238     A8 00 A0 FD | 	call	#pushregs_
1623c     30 F0 07 F1 | 	add	ptra, #48
16240     48 69 BF FD | 	call	#_pop
16244     FD 16 02 F6 | 	mov	arg03, result1
16248     FE 14 02 F6 | 	mov	arg02, result2
1624c     FF 18 02 F6 | 	mov	arg04, result3
16250     A7 16 62 FC | 	wrlong	arg03, fp
16254     04 4E 05 F1 | 	add	fp, #4
16258     A7 14 62 FC | 	wrlong	arg02, fp
1625c     04 4E 05 F1 | 	add	fp, #4
16260     A7 18 62 FC | 	wrlong	arg04, fp
16264     08 4E 85 F1 | 	sub	fp, #8
16268     20 69 BF FD | 	call	#_pop
1626c     FD 16 02 F6 | 	mov	arg03, result1
16270     FE 14 02 F6 | 	mov	arg02, result2
16274     FF 18 02 F6 | 	mov	arg04, result3
16278     0C 4E 05 F1 | 	add	fp, #12
1627c     A7 16 62 FC | 	wrlong	arg03, fp
16280     04 4E 05 F1 | 	add	fp, #4
16284     A7 14 62 FC | 	wrlong	arg02, fp
16288     04 4E 05 F1 | 	add	fp, #4
1628c     A7 18 62 FC | 	wrlong	arg04, fp
16290     14 4E 85 F1 | 	sub	fp, #20
16294     F4 68 BF FD | 	call	#_pop
16298     FD 16 02 F6 | 	mov	arg03, result1
1629c     FE 14 02 F6 | 	mov	arg02, result2
162a0     FF 18 02 F6 | 	mov	arg04, result3
162a4     18 4E 05 F1 | 	add	fp, #24
162a8     A7 16 62 FC | 	wrlong	arg03, fp
162ac     04 4E 05 F1 | 	add	fp, #4
162b0     A7 14 62 FC | 	wrlong	arg02, fp
162b4     04 4E 05 F1 | 	add	fp, #4
162b8     A7 18 62 FC | 	wrlong	arg04, fp
162bc     20 4E 85 F1 | 	sub	fp, #32
162c0     C8 68 BF FD | 	call	#_pop
162c4     FF 16 02 F6 | 	mov	arg03, result3
162c8     24 4E 05 F1 | 	add	fp, #36
162cc     A7 FA 61 FC | 	wrlong	result1, fp
162d0     04 4E 05 F1 | 	add	fp, #4
162d4     A7 FC 61 FC | 	wrlong	result2, fp
162d8     04 4E 05 F1 | 	add	fp, #4
162dc     A7 16 62 FC | 	wrlong	arg03, fp
162e0     08 4E 85 F1 | 	sub	fp, #8
162e4     A7 12 02 F6 | 	mov	arg01, fp
162e8     24 4E 85 F1 | 	sub	fp, #36
162ec     80 6A BF FD | 	call	#_converttoint
162f0     FD 26 02 F6 | 	mov	local01, result1
162f4     18 4E 05 F1 | 	add	fp, #24
162f8     A7 12 02 F6 | 	mov	arg01, fp
162fc     18 4E 85 F1 | 	sub	fp, #24
16300     6C 6A BF FD | 	call	#_converttoint
16304     FD 28 02 F6 | 	mov	local02, result1
16308     0C 4E 05 F1 | 	add	fp, #12
1630c     A7 12 02 F6 | 	mov	arg01, fp
16310     0C 4E 85 F1 | 	sub	fp, #12
16314     58 6A BF FD | 	call	#_converttoint
16318     FD 2A 02 F6 | 	mov	local03, result1
1631c     A7 12 02 F6 | 	mov	arg01, fp
16320     4C 6A BF FD | 	call	#_converttoint
16324     40 26 62 FD | 	dirl	local01
16328     13 29 02 FC | 	wrpin	local02, local01
1632c     13 2B 12 FC | 	wxpin	local03, local01
16330     13 FB 21 FC | 	wypin	result1, local01
16334     41 26 62 FD | 	dirh	local01
16338     A7 F0 03 F6 | 	mov	ptra, fp
1633c     B2 00 A0 FD | 	call	#popregs_
16340                 | _do_pinstart_ret
16340     2D 00 64 FD | 	ret
16344                 | 
16344                 | ' 
16344                 | ' '-------------------- pintoggle
16344                 | ' 
16344                 | ' sub do_pintoggle
16344                 | _do_pintoggle
16344     00 4A 05 F6 | 	mov	COUNT_, #0
16348     A8 00 A0 FD | 	call	#pushregs_
1634c     0C F0 07 F1 | 	add	ptra, #12
16350     38 68 BF FD | 	call	#_pop
16354     A7 FA 61 FC | 	wrlong	result1, fp
16358     04 4E 05 F1 | 	add	fp, #4
1635c     A7 FC 61 FC | 	wrlong	result2, fp
16360     04 4E 05 F1 | 	add	fp, #4
16364     A7 FE 61 FC | 	wrlong	result3, fp
16368     08 4E 85 F1 | 	sub	fp, #8
1636c     A7 12 02 F6 | 	mov	arg01, fp
16370     FC 69 BF FD | 	call	#_converttoint
16374     5F FA 61 FD | 	drvnot	result1
16378     A7 F0 03 F6 | 	mov	ptra, fp
1637c     B2 00 A0 FD | 	call	#popregs_
16380                 | _do_pintoggle_ret
16380     2D 00 64 FD | 	ret
16384                 | 
16384                 | ' 
16384                 | ' '-------------------- pinwrite
16384                 | ' 
16384                 | ' sub do_pinwrite
16384                 | _do_pinwrite
16384     01 4A 05 F6 | 	mov	COUNT_, #1
16388     A8 00 A0 FD | 	call	#pushregs_
1638c     18 F0 07 F1 | 	add	ptra, #24
16390     F8 67 BF FD | 	call	#_pop
16394     FD 14 02 F6 | 	mov	arg02, result1
16398     FE 12 02 F6 | 	mov	arg01, result2
1639c     FF 26 02 F6 | 	mov	local01, result3
163a0     A7 14 62 FC | 	wrlong	arg02, fp
163a4     04 4E 05 F1 | 	add	fp, #4
163a8     A7 12 62 FC | 	wrlong	arg01, fp
163ac     04 4E 05 F1 | 	add	fp, #4
163b0     A7 26 62 FC | 	wrlong	local01, fp
163b4     08 4E 85 F1 | 	sub	fp, #8
163b8     D0 67 BF FD | 	call	#_pop
163bc     FF 26 02 F6 | 	mov	local01, result3
163c0     0C 4E 05 F1 | 	add	fp, #12
163c4     A7 FA 61 FC | 	wrlong	result1, fp
163c8     04 4E 05 F1 | 	add	fp, #4
163cc     A7 FC 61 FC | 	wrlong	result2, fp
163d0     04 4E 05 F1 | 	add	fp, #4
163d4     A7 26 62 FC | 	wrlong	local01, fp
163d8     08 4E 85 F1 | 	sub	fp, #8
163dc     A7 12 02 F6 | 	mov	arg01, fp
163e0     0C 4E 85 F1 | 	sub	fp, #12
163e4     88 69 BF FD | 	call	#_converttoint
163e8     FD 26 02 F6 | 	mov	local01, result1
163ec     A7 12 02 F6 | 	mov	arg01, fp
163f0     7C 69 BF FD | 	call	#_converttoint
163f4     FD 14 02 F6 | 	mov	arg02, result1
163f8     13 13 02 F6 | 	mov	arg01, local01
163fc     C8 DC B0 FD | 	call	#__system___pinwrite
16400     A7 F0 03 F6 | 	mov	ptra, fp
16404     B2 00 A0 FD | 	call	#popregs_
16408                 | _do_pinwrite_ret
16408     2D 00 64 FD | 	ret
1640c                 | 
1640c                 | ' 
1640c                 | ' '-------------------- play
1640c                 | ' 
1640c                 | ' sub do_play
1640c                 | _do_play
1640c     08 4A 05 F6 | 	mov	COUNT_, #8
16410     A8 00 A0 FD | 	call	#pushregs_
16414     7C F0 07 F1 | 	add	ptra, #124
16418     68 4E 05 F1 | 	add	fp, #104
1641c     77 CC A1 FF 
16420     A7 7C 6B FC | 	wrlong	##1134096318, fp
16424                 | ' speed_coeff=305.873
16424                 | ' 
16424                 | ' for i=0 to 8 : params(i)=-2.0 : next i
16424     64 4E 85 F1 | 	sub	fp, #100
16428     A7 00 68 FC | 	wrlong	#0, fp
1642c     97 18 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
16430                 | LR__1860
16430     A7 16 02 FB | 	rdlong	arg03, fp
16434     02 16 66 F0 | 	shl	arg03, #2
16438     34 4E 05 F1 | 	add	fp, #52
1643c     A7 16 02 F1 | 	add	arg03, fp
16440     00 00 E0 FF 
16444     0B 01 68 FC | 	wrlong	##-1073741824, arg03
16448     34 4E 85 F1 | 	sub	fp, #52
1644c     A7 26 02 FB | 	rdlong	local01, fp
16450     01 26 06 F1 | 	add	local01, #1
16454     A7 26 62 FC | 	wrlong	local01, fp
16458     09 26 56 F2 | 	cmps	local01, #9 wc
1645c     D0 FF 9F CD |  if_b	jmp	#LR__1860
16460                 | LR__1861
16460     04 4E 85 F1 | 	sub	fp, #4
16464     4A 00 00 FF 
16468     80 E4 05 F1 | 	add	objptr, ##38016
1646c     F2 28 02 FB | 	rdlong	local02, objptr
16470     14 2B 02 F6 | 	mov	local03, local02
16474     01 2A 66 F0 | 	shl	local03, #1
16478     14 2B 02 F1 | 	add	local03, local02
1647c     02 2A 66 F0 | 	shl	local03, #2
16480     03 00 00 FF 
16484     04 E4 85 F1 | 	sub	objptr, ##1540
16488     F2 2A 02 F1 | 	add	local03, objptr
1648c     15 2D 02 FB | 	rdlong	local04, local03
16490     A7 2C 62 FC | 	wrlong	local04, fp
16494                 | ' numpar=compiledline(lineptr_e).result.uresult
16494                 | ' for i=numpar to 1 step -1 
16494     04 4E 05 F1 | 	add	fp, #4
16498     A7 2C 62 FC | 	wrlong	local04, fp
1649c     04 4E 85 F1 | 	sub	fp, #4
164a0     47 00 00 FF 
164a4     7C E4 85 F1 | 	sub	objptr, ##36476
164a8                 | LR__1862
164a8     E0 66 BF FD | 	call	#_pop
164ac     5C 4E 05 F1 | 	add	fp, #92
164b0     A7 FA 61 FC | 	wrlong	result1, fp
164b4     04 4E 05 F1 | 	add	fp, #4
164b8     A7 FC 61 FC | 	wrlong	result2, fp
164bc     04 4E 05 F1 | 	add	fp, #4
164c0     A7 FE 61 FC | 	wrlong	result3, fp
164c4     60 4E 85 F1 | 	sub	fp, #96
164c8     A7 2A 02 FB | 	rdlong	local03, fp
164cc     01 2A 86 F1 | 	sub	local03, #1
164d0     02 2A 66 F0 | 	shl	local03, #2
164d4     34 4E 05 F1 | 	add	fp, #52
164d8     A7 2A 02 F1 | 	add	local03, fp
164dc     24 4E 05 F1 | 	add	fp, #36
164e0     A7 2E 02 F6 | 	mov	local05, fp
164e4     17 13 02 F6 | 	mov	arg01, local05
164e8     5C 4E 85 F1 | 	sub	fp, #92
164ec     3C 69 BF FD | 	call	#_converttofloat
164f0     15 FB 61 FC | 	wrlong	result1, local03
164f4     04 4E 05 F1 | 	add	fp, #4
164f8     A7 26 02 FB | 	rdlong	local01, fp
164fc     01 26 86 F1 | 	sub	local01, #1
16500     A7 26 62 FC | 	wrlong	local01, fp
16504     04 4E 85 F1 | 	sub	fp, #4
16508     01 26 56 F2 | 	cmps	local01, #1 wc
1650c     98 FF 9F 3D |  if_ae	jmp	#LR__1862
16510                 | ' 
16510                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
16510     38 4E 05 F1 | 	add	fp, #56
16514     A7 12 02 FB | 	rdlong	arg01, fp
16518     38 4E 85 F1 | 	sub	fp, #56
1651c     00 14 06 F6 | 	mov	arg02, #0
16520     01 16 06 F6 | 	mov	arg03, #1
16524     98 0C B1 FD | 	call	#__system___float_cmp
16528     00 FA 55 F2 | 	cmps	result1, #0 wc
1652c     0C 4E 05 C1 |  if_b	add	fp, #12
16530     A7 00 68 CC |  if_b	wrlong	#0, fp
16534     0C 4E 85 C1 |  if_b	sub	fp, #12
16538     2C 00 90 CD |  if_b	jmp	#LR__1863
1653c     38 4E 05 F1 | 	add	fp, #56
16540     A7 12 02 FB | 	rdlong	arg01, fp
16544     38 4E 85 F1 | 	sub	fp, #56
16548     01 14 06 F6 | 	mov	arg02, #1
1654c     04 0D B1 FD | 	call	#__system___float_tointeger
16550     FD 26 52 F6 | 	abs	local01, result1 wc
16554     07 26 06 F5 | 	and	local01, #7
16558     13 27 82 F6 | 	negc	local01, local01
1655c     0C 4E 05 F1 | 	add	fp, #12
16560     A7 26 62 FC | 	wrlong	local01, fp
16564     0C 4E 85 F1 | 	sub	fp, #12
16568                 | LR__1863
16568                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
16568     3C 4E 05 F1 | 	add	fp, #60
1656c     A7 12 02 FB | 	rdlong	arg01, fp
16570     3C 4E 85 F1 | 	sub	fp, #60
16574     00 14 06 F6 | 	mov	arg02, #0
16578     01 16 06 F6 | 	mov	arg03, #1
1657c     40 0C B1 FD | 	call	#__system___float_cmp
16580     00 FA 55 F2 | 	cmps	result1, #0 wc
16584     40 00 90 3D |  if_ae	jmp	#LR__1864
16588     0C 4E 05 F1 | 	add	fp, #12
1658c     A7 28 02 FB | 	rdlong	local02, fp
16590     14 2B 02 F6 | 	mov	local03, local02
16594     01 2A 66 F0 | 	shl	local03, #1
16598     14 2B 02 F1 | 	add	local03, local02
1659c     03 2A 66 F0 | 	shl	local03, #3
165a0     14 00 00 FF 
165a4     38 E5 05 F1 | 	add	objptr, ##10552
165a8     F2 2A 02 F1 | 	add	local03, objptr
165ac     15 31 02 FB | 	rdlong	local06, local03
165b0     60 4E 05 F1 | 	add	fp, #96
165b4     A7 30 62 FC | 	wrlong	local06, fp
165b8     6C 4E 85 F1 | 	sub	fp, #108
165bc     14 00 00 FF 
165c0     38 E5 85 F1 | 	sub	objptr, ##10552
165c4     44 00 90 FD | 	jmp	#LR__1865
165c8                 | LR__1864
165c8     3C 4E 05 F1 | 	add	fp, #60
165cc     A7 2C 02 FB | 	rdlong	local04, fp
165d0     30 4E 05 F1 | 	add	fp, #48
165d4     A7 2C 62 FC | 	wrlong	local04, fp
165d8     60 4E 85 F1 | 	sub	fp, #96
165dc     A7 28 02 FB | 	rdlong	local02, fp
165e0     14 2B 02 F6 | 	mov	local03, local02
165e4     01 2A 66 F0 | 	shl	local03, #1
165e8     14 2B 02 F1 | 	add	local03, local02
165ec     03 2A 66 F0 | 	shl	local03, #3
165f0     14 00 00 FF 
165f4     38 E5 05 F1 | 	add	objptr, ##10552
165f8     F2 2A 02 F1 | 	add	local03, objptr
165fc     0C 4E 85 F1 | 	sub	fp, #12
16600     15 2D 62 FC | 	wrlong	local04, local03
16604     14 00 00 FF 
16608     38 E5 85 F1 | 	sub	objptr, ##10552
1660c                 | LR__1865
1660c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1660c     40 4E 05 F1 | 	add	fp, #64
16610     A7 12 02 FB | 	rdlong	arg01, fp
16614     40 4E 85 F1 | 	sub	fp, #64
16618     00 14 06 F6 | 	mov	arg02, #0
1661c     01 16 06 F6 | 	mov	arg03, #1
16620     9C 0B B1 FD | 	call	#__system___float_cmp
16624     00 FA 55 F2 | 	cmps	result1, #0 wc
16628     24 00 90 CD |  if_b	jmp	#LR__1866
1662c     40 4E 05 F1 | 	add	fp, #64
16630     A7 12 02 FB | 	rdlong	arg01, fp
16634     40 4E 85 F1 | 	sub	fp, #64
16638     20 0E 23 FF 
1663c     00 14 06 F6 | 	mov	arg02, ##1176256512
16640     01 16 66 F6 | 	neg	arg03, #1
16644     78 0B B1 FD | 	call	#__system___float_cmp
16648     01 FA 55 F2 | 	cmps	result1, #1 wc
1664c     48 00 90 CD |  if_b	jmp	#LR__1867
16650                 | LR__1866
16650     0C 4E 05 F1 | 	add	fp, #12
16654     A7 2A 02 FB | 	rdlong	local03, fp
16658     15 33 02 F6 | 	mov	local07, local03
1665c     01 32 66 F0 | 	shl	local07, #1
16660     15 33 02 F1 | 	add	local07, local03
16664     03 32 66 F0 | 	shl	local07, #3
16668     14 00 00 FF 
1666c     38 E5 05 F1 | 	add	objptr, ##10552
16670     F2 32 02 F1 | 	add	local07, objptr
16674     06 32 06 F1 | 	add	local07, #6
16678     19 2F E2 FA | 	rdword	local05, local07
1667c     17 2D 32 F9 | 	getword	local04, local05, #0
16680     1C 4E 05 F1 | 	add	fp, #28
16684     A7 2C 62 FC | 	wrlong	local04, fp
16688     28 4E 85 F1 | 	sub	fp, #40
1668c     14 00 00 FF 
16690     38 E5 85 F1 | 	sub	objptr, ##10552
16694     54 00 90 FD | 	jmp	#LR__1868
16698                 | LR__1867
16698     40 4E 05 F1 | 	add	fp, #64
1669c     A7 12 02 FB | 	rdlong	arg01, fp
166a0     40 4E 85 F1 | 	sub	fp, #64
166a4     01 14 06 F6 | 	mov	arg02, #1
166a8     A8 0B B1 FD | 	call	#__system___float_tointeger
166ac     28 4E 05 F1 | 	add	fp, #40
166b0     A7 FA 61 FC | 	wrlong	result1, fp
166b4     1C 4E 85 F1 | 	sub	fp, #28
166b8     A7 28 02 FB | 	rdlong	local02, fp
166bc     14 2B 02 F6 | 	mov	local03, local02
166c0     01 2A 66 F0 | 	shl	local03, #1
166c4     14 2B 02 F1 | 	add	local03, local02
166c8     03 2A 66 F0 | 	shl	local03, #3
166cc     14 00 00 FF 
166d0     38 E5 05 F1 | 	add	objptr, ##10552
166d4     F2 2A 02 F1 | 	add	local03, objptr
166d8     0C 4E 85 F1 | 	sub	fp, #12
166dc     06 2A 06 F1 | 	add	local03, #6
166e0     15 FB 51 FC | 	wrword	result1, local03
166e4     14 00 00 FF 
166e8     38 E5 85 F1 | 	sub	objptr, ##10552
166ec                 | LR__1868
166ec                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
166ec     44 4E 05 F1 | 	add	fp, #68
166f0     A7 12 02 FB | 	rdlong	arg01, fp
166f4     44 4E 85 F1 | 	sub	fp, #68
166f8     00 14 06 F6 | 	mov	arg02, #0
166fc     01 16 06 F6 | 	mov	arg03, #1
16700     BC 0A B1 FD | 	call	#__system___float_cmp
16704     00 FA 55 F2 | 	cmps	result1, #0 wc
16708     24 00 90 CD |  if_b	jmp	#LR__1869
1670c     44 4E 05 F1 | 	add	fp, #68
16710     A7 12 02 FB | 	rdlong	arg01, fp
16714     44 4E 85 F1 | 	sub	fp, #68
16718     89 C1 20 FF 
1671c     6F 14 06 F6 | 	mov	arg02, ##1099108975
16720     01 16 66 F6 | 	neg	arg03, #1
16724     98 0A B1 FD | 	call	#__system___float_cmp
16728     01 FA 55 F2 | 	cmps	result1, #1 wc
1672c     44 00 90 CD |  if_b	jmp	#LR__1870
16730                 | LR__1869
16730     0C 4E 05 F1 | 	add	fp, #12
16734     A7 28 02 FB | 	rdlong	local02, fp
16738     14 2B 02 F6 | 	mov	local03, local02
1673c     01 2A 66 F0 | 	shl	local03, #1
16740     14 2B 02 F1 | 	add	local03, local02
16744     03 2A 66 F0 | 	shl	local03, #3
16748     14 00 00 FF 
1674c     38 E5 05 F1 | 	add	objptr, ##10552
16750     F2 2A 02 F1 | 	add	local03, objptr
16754     0C 2A 06 F1 | 	add	local03, #12
16758     15 31 02 FB | 	rdlong	local06, local03
1675c     68 4E 05 F1 | 	add	fp, #104
16760     A7 30 62 FC | 	wrlong	local06, fp
16764     74 4E 85 F1 | 	sub	fp, #116
16768     14 00 00 FF 
1676c     38 E5 85 F1 | 	sub	objptr, ##10552
16770     48 00 90 FD | 	jmp	#LR__1871
16774                 | LR__1870
16774     44 4E 05 F1 | 	add	fp, #68
16778     A7 2C 02 FB | 	rdlong	local04, fp
1677c     30 4E 05 F1 | 	add	fp, #48
16780     A7 2C 62 FC | 	wrlong	local04, fp
16784     68 4E 85 F1 | 	sub	fp, #104
16788     A7 28 02 FB | 	rdlong	local02, fp
1678c     14 2B 02 F6 | 	mov	local03, local02
16790     01 2A 66 F0 | 	shl	local03, #1
16794     14 2B 02 F1 | 	add	local03, local02
16798     03 2A 66 F0 | 	shl	local03, #3
1679c     14 00 00 FF 
167a0     38 E5 05 F1 | 	add	objptr, ##10552
167a4     F2 2A 02 F1 | 	add	local03, objptr
167a8     0C 4E 85 F1 | 	sub	fp, #12
167ac     0C 2A 06 F1 | 	add	local03, #12
167b0     15 2D 62 FC | 	wrlong	local04, local03
167b4     14 00 00 FF 
167b8     38 E5 85 F1 | 	sub	objptr, ##10552
167bc                 | LR__1871
167bc                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
167bc     48 4E 05 F1 | 	add	fp, #72
167c0     A7 12 02 FB | 	rdlong	arg01, fp
167c4     48 4E 85 F1 | 	sub	fp, #72
167c8     00 14 06 F6 | 	mov	arg02, #0
167cc     01 16 06 F6 | 	mov	arg03, #1
167d0     EC 09 B1 FD | 	call	#__system___float_cmp
167d4     00 FA 55 F2 | 	cmps	result1, #0 wc
167d8     24 00 90 CD |  if_b	jmp	#LR__1872
167dc     48 4E 05 F1 | 	add	fp, #72
167e0     A7 12 02 FB | 	rdlong	arg01, fp
167e4     48 4E 85 F1 | 	sub	fp, #72
167e8     00 00 21 FF 
167ec     00 14 06 F6 | 	mov	arg02, ##1107296256
167f0     01 16 66 F6 | 	neg	arg03, #1
167f4     C8 09 B1 FD | 	call	#__system___float_cmp
167f8     01 FA 55 F2 | 	cmps	result1, #1 wc
167fc     48 00 90 CD |  if_b	jmp	#LR__1873
16800                 | LR__1872
16800     0C 4E 05 F1 | 	add	fp, #12
16804     A7 2A 02 FB | 	rdlong	local03, fp
16808     15 33 02 F6 | 	mov	local07, local03
1680c     01 32 66 F0 | 	shl	local07, #1
16810     15 33 02 F1 | 	add	local07, local03
16814     03 32 66 F0 | 	shl	local07, #3
16818     14 00 00 FF 
1681c     38 E5 05 F1 | 	add	objptr, ##10552
16820     F2 32 02 F1 | 	add	local07, objptr
16824     04 32 06 F1 | 	add	local07, #4
16828     19 2F C2 FA | 	rdbyte	local05, local07
1682c     17 2D E2 F8 | 	getbyte	local04, local05, #0
16830     14 4E 05 F1 | 	add	fp, #20
16834     A7 2C 62 FC | 	wrlong	local04, fp
16838     20 4E 85 F1 | 	sub	fp, #32
1683c     14 00 00 FF 
16840     38 E5 85 F1 | 	sub	objptr, ##10552
16844     54 00 90 FD | 	jmp	#LR__1874
16848                 | LR__1873
16848     48 4E 05 F1 | 	add	fp, #72
1684c     A7 12 02 FB | 	rdlong	arg01, fp
16850     48 4E 85 F1 | 	sub	fp, #72
16854     01 14 06 F6 | 	mov	arg02, #1
16858     F8 09 B1 FD | 	call	#__system___float_tointeger
1685c     20 4E 05 F1 | 	add	fp, #32
16860     A7 FA 61 FC | 	wrlong	result1, fp
16864     14 4E 85 F1 | 	sub	fp, #20
16868     A7 28 02 FB | 	rdlong	local02, fp
1686c     14 2B 02 F6 | 	mov	local03, local02
16870     01 2A 66 F0 | 	shl	local03, #1
16874     14 2B 02 F1 | 	add	local03, local02
16878     03 2A 66 F0 | 	shl	local03, #3
1687c     14 00 00 FF 
16880     38 E5 05 F1 | 	add	objptr, ##10552
16884     F2 2A 02 F1 | 	add	local03, objptr
16888     0C 4E 85 F1 | 	sub	fp, #12
1688c     04 2A 06 F1 | 	add	local03, #4
16890     15 FB 41 FC | 	wrbyte	result1, local03
16894     14 00 00 FF 
16898     38 E5 85 F1 | 	sub	objptr, ##10552
1689c                 | LR__1874
1689c                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
1689c     4C 4E 05 F1 | 	add	fp, #76
168a0     A7 12 02 FB | 	rdlong	arg01, fp
168a4     4C 4E 85 F1 | 	sub	fp, #76
168a8     00 14 06 F6 | 	mov	arg02, #0
168ac     01 16 06 F6 | 	mov	arg03, #1
168b0     0C 09 B1 FD | 	call	#__system___float_cmp
168b4     00 FA 55 F2 | 	cmps	result1, #0 wc
168b8     24 00 90 CD |  if_b	jmp	#LR__1875
168bc     4C 4E 05 F1 | 	add	fp, #76
168c0     A7 12 02 FB | 	rdlong	arg01, fp
168c4     4C 4E 85 F1 | 	sub	fp, #76
168c8     00 80 20 FF 
168cc     00 14 06 F6 | 	mov	arg02, ##1090519040
168d0     01 16 66 F6 | 	neg	arg03, #1
168d4     E8 08 B1 FD | 	call	#__system___float_cmp
168d8     01 FA 55 F2 | 	cmps	result1, #1 wc
168dc     48 00 90 CD |  if_b	jmp	#LR__1876
168e0                 | LR__1875
168e0     0C 4E 05 F1 | 	add	fp, #12
168e4     A7 2A 02 FB | 	rdlong	local03, fp
168e8     15 33 02 F6 | 	mov	local07, local03
168ec     01 32 66 F0 | 	shl	local07, #1
168f0     15 33 02 F1 | 	add	local07, local03
168f4     03 32 66 F0 | 	shl	local07, #3
168f8     14 00 00 FF 
168fc     38 E5 05 F1 | 	add	objptr, ##10552
16900     F2 32 02 F1 | 	add	local07, objptr
16904     05 32 06 F1 | 	add	local07, #5
16908     19 2F C2 FA | 	rdbyte	local05, local07
1690c     17 2D E2 F8 | 	getbyte	local04, local05, #0
16910     18 4E 05 F1 | 	add	fp, #24
16914     A7 2C 62 FC | 	wrlong	local04, fp
16918     24 4E 85 F1 | 	sub	fp, #36
1691c     14 00 00 FF 
16920     38 E5 85 F1 | 	sub	objptr, ##10552
16924     54 00 90 FD | 	jmp	#LR__1877
16928                 | LR__1876
16928     4C 4E 05 F1 | 	add	fp, #76
1692c     A7 12 02 FB | 	rdlong	arg01, fp
16930     4C 4E 85 F1 | 	sub	fp, #76
16934     01 14 06 F6 | 	mov	arg02, #1
16938     18 09 B1 FD | 	call	#__system___float_tointeger
1693c     24 4E 05 F1 | 	add	fp, #36
16940     A7 FA 61 FC | 	wrlong	result1, fp
16944     18 4E 85 F1 | 	sub	fp, #24
16948     A7 28 02 FB | 	rdlong	local02, fp
1694c     14 2B 02 F6 | 	mov	local03, local02
16950     01 2A 66 F0 | 	shl	local03, #1
16954     14 2B 02 F1 | 	add	local03, local02
16958     03 2A 66 F0 | 	shl	local03, #3
1695c     14 00 00 FF 
16960     38 E5 05 F1 | 	add	objptr, ##10552
16964     F2 2A 02 F1 | 	add	local03, objptr
16968     0C 4E 85 F1 | 	sub	fp, #12
1696c     05 2A 06 F1 | 	add	local03, #5
16970     15 FB 41 FC | 	wrbyte	result1, local03
16974     14 00 00 FF 
16978     38 E5 85 F1 | 	sub	objptr, ##10552
1697c                 | LR__1877
1697c                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
1697c     50 4E 05 F1 | 	add	fp, #80
16980     A7 12 02 FB | 	rdlong	arg01, fp
16984     50 4E 85 F1 | 	sub	fp, #80
16988     00 14 06 F6 | 	mov	arg02, #0
1698c     01 16 06 F6 | 	mov	arg03, #1
16990     2C 08 B1 FD | 	call	#__system___float_cmp
16994     00 FA 55 F2 | 	cmps	result1, #0 wc
16998     24 00 90 CD |  if_b	jmp	#LR__1878
1699c     50 4E 05 F1 | 	add	fp, #80
169a0     A7 12 02 FB | 	rdlong	arg01, fp
169a4     50 4E 85 F1 | 	sub	fp, #80
169a8     00 3D 22 FF 
169ac     00 14 06 F6 | 	mov	arg02, ##1148846080
169b0     01 16 66 F6 | 	neg	arg03, #1
169b4     08 08 B1 FD | 	call	#__system___float_cmp
169b8     01 FA 55 F2 | 	cmps	result1, #1 wc
169bc     44 00 90 CD |  if_b	jmp	#LR__1879
169c0                 | LR__1878
169c0     0C 4E 05 F1 | 	add	fp, #12
169c4     A7 28 02 FB | 	rdlong	local02, fp
169c8     14 2B 02 F6 | 	mov	local03, local02
169cc     01 2A 66 F0 | 	shl	local03, #1
169d0     14 2B 02 F1 | 	add	local03, local02
169d4     03 2A 66 F0 | 	shl	local03, #3
169d8     14 00 00 FF 
169dc     38 E5 05 F1 | 	add	objptr, ##10552
169e0     F2 2A 02 F1 | 	add	local03, objptr
169e4     08 2A 06 F1 | 	add	local03, #8
169e8     15 31 02 FB | 	rdlong	local06, local03
169ec     6C 4E 05 F1 | 	add	fp, #108
169f0     A7 30 62 FC | 	wrlong	local06, fp
169f4     78 4E 85 F1 | 	sub	fp, #120
169f8     14 00 00 FF 
169fc     38 E5 85 F1 | 	sub	objptr, ##10552
16a00     48 00 90 FD | 	jmp	#LR__1880
16a04                 | LR__1879
16a04     50 4E 05 F1 | 	add	fp, #80
16a08     A7 30 02 FB | 	rdlong	local06, fp
16a0c     28 4E 05 F1 | 	add	fp, #40
16a10     A7 30 62 FC | 	wrlong	local06, fp
16a14     6C 4E 85 F1 | 	sub	fp, #108
16a18     A7 28 02 FB | 	rdlong	local02, fp
16a1c     14 2B 02 F6 | 	mov	local03, local02
16a20     01 2A 66 F0 | 	shl	local03, #1
16a24     14 2B 02 F1 | 	add	local03, local02
16a28     03 2A 66 F0 | 	shl	local03, #3
16a2c     14 00 00 FF 
16a30     38 E5 05 F1 | 	add	objptr, ##10552
16a34     F2 2A 02 F1 | 	add	local03, objptr
16a38     0C 4E 85 F1 | 	sub	fp, #12
16a3c     08 2A 06 F1 | 	add	local03, #8
16a40     15 31 62 FC | 	wrlong	local06, local03
16a44     14 00 00 FF 
16a48     38 E5 85 F1 | 	sub	objptr, ##10552
16a4c                 | LR__1880
16a4c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
16a4c     54 4E 05 F1 | 	add	fp, #84
16a50     A7 12 02 FB | 	rdlong	arg01, fp
16a54     54 4E 85 F1 | 	sub	fp, #84
16a58     00 C0 5F FF 
16a5c     00 14 06 F6 | 	mov	arg02, ##-1082130432
16a60     01 16 06 F6 | 	mov	arg03, #1
16a64     58 07 B1 FD | 	call	#__system___float_cmp
16a68     00 FA 55 F2 | 	cmps	result1, #0 wc
16a6c     24 00 90 CD |  if_b	jmp	#LR__1881
16a70     54 4E 05 F1 | 	add	fp, #84
16a74     A7 12 02 FB | 	rdlong	arg01, fp
16a78     54 4E 85 F1 | 	sub	fp, #84
16a7c     00 C0 1F FF 
16a80     00 14 06 F6 | 	mov	arg02, ##1065353216
16a84     01 16 66 F6 | 	neg	arg03, #1
16a88     34 07 B1 FD | 	call	#__system___float_cmp
16a8c     01 FA 55 F2 | 	cmps	result1, #1 wc
16a90     44 00 90 CD |  if_b	jmp	#LR__1882
16a94                 | LR__1881
16a94     0C 4E 05 F1 | 	add	fp, #12
16a98     A7 28 02 FB | 	rdlong	local02, fp
16a9c     14 2B 02 F6 | 	mov	local03, local02
16aa0     01 2A 66 F0 | 	shl	local03, #1
16aa4     14 2B 02 F1 | 	add	local03, local02
16aa8     03 2A 66 F0 | 	shl	local03, #3
16aac     14 00 00 FF 
16ab0     38 E5 05 F1 | 	add	objptr, ##10552
16ab4     F2 2A 02 F1 | 	add	local03, objptr
16ab8     10 2A 06 F1 | 	add	local03, #16
16abc     15 31 02 FB | 	rdlong	local06, local03
16ac0     64 4E 05 F1 | 	add	fp, #100
16ac4     A7 30 62 FC | 	wrlong	local06, fp
16ac8     70 4E 85 F1 | 	sub	fp, #112
16acc     14 00 00 FF 
16ad0     38 E5 85 F1 | 	sub	objptr, ##10552
16ad4     48 00 90 FD | 	jmp	#LR__1883
16ad8                 | LR__1882
16ad8     54 4E 05 F1 | 	add	fp, #84
16adc     A7 30 02 FB | 	rdlong	local06, fp
16ae0     1C 4E 05 F1 | 	add	fp, #28
16ae4     A7 30 62 FC | 	wrlong	local06, fp
16ae8     64 4E 85 F1 | 	sub	fp, #100
16aec     A7 28 02 FB | 	rdlong	local02, fp
16af0     14 2B 02 F6 | 	mov	local03, local02
16af4     01 2A 66 F0 | 	shl	local03, #1
16af8     14 2B 02 F1 | 	add	local03, local02
16afc     03 2A 66 F0 | 	shl	local03, #3
16b00     14 00 00 FF 
16b04     38 E5 05 F1 | 	add	objptr, ##10552
16b08     F2 2A 02 F1 | 	add	local03, objptr
16b0c     0C 4E 85 F1 | 	sub	fp, #12
16b10     10 2A 06 F1 | 	add	local03, #16
16b14     15 31 62 FC | 	wrlong	local06, local03
16b18     14 00 00 FF 
16b1c     38 E5 85 F1 | 	sub	objptr, ##10552
16b20                 | LR__1883
16b20                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
16b20     58 4E 05 F1 | 	add	fp, #88
16b24     A7 12 02 FB | 	rdlong	arg01, fp
16b28     58 4E 85 F1 | 	sub	fp, #88
16b2c     00 14 06 F6 | 	mov	arg02, #0
16b30     01 16 06 F6 | 	mov	arg03, #1
16b34     88 06 B1 FD | 	call	#__system___float_cmp
16b38     00 FA 55 F2 | 	cmps	result1, #0 wc
16b3c     24 00 90 CD |  if_b	jmp	#LR__1884
16b40     58 4E 05 F1 | 	add	fp, #88
16b44     A7 12 02 FB | 	rdlong	arg01, fp
16b48     58 4E 85 F1 | 	sub	fp, #88
16b4c     80 BF 21 FF 
16b50     00 14 06 F6 | 	mov	arg02, ##1132396544
16b54     01 16 66 F6 | 	neg	arg03, #1
16b58     64 06 B1 FD | 	call	#__system___float_cmp
16b5c     01 FA 55 F2 | 	cmps	result1, #1 wc
16b60     44 00 90 CD |  if_b	jmp	#LR__1885
16b64                 | LR__1884
16b64     0C 4E 05 F1 | 	add	fp, #12
16b68     A7 2A 02 FB | 	rdlong	local03, fp
16b6c     15 33 02 F6 | 	mov	local07, local03
16b70     01 32 66 F0 | 	shl	local07, #1
16b74     15 33 02 F1 | 	add	local07, local03
16b78     03 32 66 F0 | 	shl	local07, #3
16b7c     14 00 00 FF 
16b80     38 E5 05 F1 | 	add	objptr, ##10552
16b84     F2 32 02 F1 | 	add	local07, objptr
16b88     14 32 06 F1 | 	add	local07, #20
16b8c     19 2D E2 FA | 	rdword	local04, local07
16b90     20 4E 05 F1 | 	add	fp, #32
16b94     A7 2C 62 FC | 	wrlong	local04, fp
16b98     2C 4E 85 F1 | 	sub	fp, #44
16b9c     14 00 00 FF 
16ba0     38 E5 85 F1 | 	sub	objptr, ##10552
16ba4     54 00 90 FD | 	jmp	#LR__1886
16ba8                 | LR__1885
16ba8     58 4E 05 F1 | 	add	fp, #88
16bac     A7 12 02 FB | 	rdlong	arg01, fp
16bb0     58 4E 85 F1 | 	sub	fp, #88
16bb4     01 14 06 F6 | 	mov	arg02, #1
16bb8     98 06 B1 FD | 	call	#__system___float_tointeger
16bbc     2C 4E 05 F1 | 	add	fp, #44
16bc0     A7 FA 61 FC | 	wrlong	result1, fp
16bc4     20 4E 85 F1 | 	sub	fp, #32
16bc8     A7 28 02 FB | 	rdlong	local02, fp
16bcc     14 2B 02 F6 | 	mov	local03, local02
16bd0     01 2A 66 F0 | 	shl	local03, #1
16bd4     14 2B 02 F1 | 	add	local03, local02
16bd8     03 2A 66 F0 | 	shl	local03, #3
16bdc     14 00 00 FF 
16be0     38 E5 05 F1 | 	add	objptr, ##10552
16be4     F2 2A 02 F1 | 	add	local03, objptr
16be8     0C 4E 85 F1 | 	sub	fp, #12
16bec     14 2A 06 F1 | 	add	local03, #20
16bf0     15 FB 51 FC | 	wrword	result1, local03
16bf4     14 00 00 FF 
16bf8     38 E5 85 F1 | 	sub	objptr, ##10552
16bfc                 | LR__1886
16bfc     6C 4E 05 F1 | 	add	fp, #108
16c00     A7 14 02 FB | 	rdlong	arg02, fp
16c04     6C 4E 85 F1 | 	sub	fp, #108
16c08     FC 16 20 FF 
16c0c     54 12 06 F6 | 	mov	arg01, ##1076754516
16c10     48 11 B1 FD | 	call	#__system____builtin_logbase
16c14     FD 2C 02 F6 | 	mov	local04, result1
16c18     1E 14 C6 F9 | 	decod	arg02, #30
16c1c     FC 16 20 FF 
16c20     54 12 06 F6 | 	mov	arg01, ##1076754516
16c24     34 11 B1 FD | 	call	#__system____builtin_logbase
16c28     FD 14 02 F6 | 	mov	arg02, result1
16c2c     16 13 02 F6 | 	mov	arg01, local04
16c30     5C 03 B1 FD | 	call	#__system___float_div
16c34     FD 12 02 F6 | 	mov	arg01, result1
16c38     00 14 06 F6 | 	mov	arg02, #0
16c3c     14 06 B1 FD | 	call	#__system___float_tointeger
16c40     30 4E 05 F1 | 	add	fp, #48
16c44     A7 FA 61 FC | 	wrlong	result1, fp
16c48     1E 2C C6 F9 | 	decod	local04, #30
16c4c     FD 12 02 F6 | 	mov	arg01, result1
16c50     30 4E 85 F1 | 	sub	fp, #48
16c54     05 12 06 F1 | 	add	arg01, #5
16c58     09 13 52 F6 | 	abs	arg01, arg01 wc
16c5c     1F 34 C6 C9 |  if_b	decod	local08, #31
16c60     00 34 06 36 |  if_ae	mov	local08, #0
16c64     20 FD B0 FD | 	call	#__system___float_fromuns
16c68     1A FB 61 F5 | 	xor	result1, local08
16c6c     FD 14 02 F6 | 	mov	arg02, result1
16c70     16 13 02 F6 | 	mov	arg01, local04
16c74     1C 10 B1 FD | 	call	#__system____builtin_powf
16c78     FD 12 02 F6 | 	mov	arg01, result1
16c7c     01 14 06 F6 | 	mov	arg02, #1
16c80     D0 05 B1 FD | 	call	#__system___float_tointeger
16c84     10 4E 05 F1 | 	add	fp, #16
16c88     A7 FA 61 FC | 	wrlong	result1, fp
16c8c                 | ' skip=round(2^(lfreq+5))
16c8c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
16c8c     10 4E 85 F1 | 	sub	fp, #16
16c90     40 00 00 FF 
16c94     01 FA 55 F2 | 	cmps	result1, ##32769 wc
16c98     30 00 90 CD |  if_b	jmp	#LR__1887
16c9c     10 4E 05 F1 | 	add	fp, #16
16ca0     A7 26 02 FB | 	rdlong	local01, fp
16ca4     13 2D 52 F6 | 	abs	local04, local01 wc
16ca8     0F 2C 46 F0 | 	shr	local04, #15
16cac     16 2D 82 F6 | 	negc	local04, local04
16cb0     0C 4E 85 F1 | 	sub	fp, #12
16cb4     A7 2C 62 FC | 	wrlong	local04, fp
16cb8     0C 4E 05 F1 | 	add	fp, #12
16cbc     40 00 80 FF 
16cc0     A7 00 68 FC | 	wrlong	##32768, fp
16cc4     10 4E 85 F1 | 	sub	fp, #16
16cc8     0C 00 90 FD | 	jmp	#LR__1888
16ccc                 | LR__1887
16ccc     04 4E 05 F1 | 	add	fp, #4
16cd0     A7 02 68 FC | 	wrlong	#1, fp
16cd4     04 4E 85 F1 | 	sub	fp, #4
16cd8                 | LR__1888
16cd8     6C 4E 05 F1 | 	add	fp, #108
16cdc     A7 14 02 FB | 	rdlong	arg02, fp
16ce0     6C 4E 85 F1 | 	sub	fp, #108
16ce4     3E 2C 25 FF 
16ce8     3C 12 06 F6 | 	mov	arg01, ##1247312956
16cec     A0 02 B1 FD | 	call	#__system___float_div
16cf0     FD 2C 02 F6 | 	mov	local04, result1
16cf4     04 4E 05 F1 | 	add	fp, #4
16cf8     A7 12 02 FB | 	rdlong	arg01, fp
16cfc     04 4E 85 F1 | 	sub	fp, #4
16d00     09 13 52 F6 | 	abs	arg01, arg01 wc
16d04     1F 34 C6 C9 |  if_b	decod	local08, #31
16d08     00 34 06 36 |  if_ae	mov	local08, #0
16d0c     78 FC B0 FD | 	call	#__system___float_fromuns
16d10     1A FB 61 F5 | 	xor	result1, local08
16d14     FD 26 02 F6 | 	mov	local01, result1
16d18     1E 28 C6 F9 | 	decod	local02, #30
16d1c     0D 12 06 F6 | 	mov	arg01, #13
16d20     30 4E 05 F1 | 	add	fp, #48
16d24     A7 30 02 FB | 	rdlong	local06, fp
16d28     30 4E 85 F1 | 	sub	fp, #48
16d2c     18 13 82 F1 | 	sub	arg01, local06
16d30     09 13 52 F6 | 	abs	arg01, arg01 wc
16d34     1F 34 C6 C9 |  if_b	decod	local08, #31
16d38     00 34 06 36 |  if_ae	mov	local08, #0
16d3c     48 FC B0 FD | 	call	#__system___float_fromuns
16d40     1A FB 61 F5 | 	xor	result1, local08
16d44     FD 14 02 F6 | 	mov	arg02, result1
16d48     14 13 02 F6 | 	mov	arg01, local02
16d4c     44 0F B1 FD | 	call	#__system____builtin_powf
16d50     FD 14 02 F6 | 	mov	arg02, result1
16d54     13 13 02 F6 | 	mov	arg01, local01
16d58     30 00 B1 FD | 	call	#__system___float_mul
16d5c     FD 14 02 F6 | 	mov	arg02, result1
16d60     16 13 02 F6 | 	mov	arg01, local04
16d64     28 02 B1 FD | 	call	#__system___float_div
16d68     FD 12 02 F6 | 	mov	arg01, result1
16d6c     01 14 06 F6 | 	mov	arg02, #1
16d70     E0 04 B1 FD | 	call	#__system___float_tointeger
16d74     34 4E 05 F1 | 	add	fp, #52
16d78     A7 FA 61 FC | 	wrlong	result1, fp
16d7c     34 4E 05 F1 | 	add	fp, #52
16d80     A7 12 02 FB | 	rdlong	arg01, fp
16d84     10 4E 05 F1 | 	add	fp, #16
16d88     A7 14 02 FB | 	rdlong	arg02, fp
16d8c     78 4E 85 F1 | 	sub	fp, #120
16d90     FC 01 B1 FD | 	call	#__system___float_div
16d94     FD 12 02 F6 | 	mov	arg01, result1
16d98     01 14 06 F6 | 	mov	arg02, #1
16d9c     B4 04 B1 FD | 	call	#__system___float_tointeger
16da0     FD 2C 02 F6 | 	mov	local04, result1
16da4     14 4E 05 F1 | 	add	fp, #20
16da8     A7 2C 62 FC | 	wrlong	local04, fp
16dac     5C 4E 05 F1 | 	add	fp, #92
16db0     A7 14 02 FB | 	rdlong	arg02, fp
16db4     70 4E 85 F1 | 	sub	fp, #112
16db8     00 00 23 FF 
16dbc     00 12 06 F6 | 	mov	arg01, ##1174405120
16dc0     C8 FF B0 FD | 	call	#__system___float_mul
16dc4     FD 12 02 F6 | 	mov	arg01, result1
16dc8     01 14 06 F6 | 	mov	arg02, #1
16dcc     84 04 B1 FD | 	call	#__system___float_tointeger
16dd0     0D 2C C6 F9 | 	decod	local04, #13
16dd4     FD 2C 02 F1 | 	add	local04, result1
16dd8     18 4E 05 F1 | 	add	fp, #24
16ddc     A7 2C 62 FC | 	wrlong	local04, fp
16de0     5C 4E 05 F1 | 	add	fp, #92
16de4     A7 14 02 FB | 	rdlong	arg02, fp
16de8     74 4E 85 F1 | 	sub	fp, #116
16dec     00 3D 22 FF 
16df0     00 12 06 F6 | 	mov	arg01, ##1148846080
16df4     94 FF B0 FD | 	call	#__system___float_mul
16df8     FD 12 02 F6 | 	mov	arg01, result1
16dfc     01 14 06 F6 | 	mov	arg02, #1
16e00     50 04 B1 FD | 	call	#__system___float_tointeger
16e04     1C 4E 05 F1 | 	add	fp, #28
16e08     A7 FA 61 FC | 	wrlong	result1, fp
16e0c     37 00 00 FF 
16e10     10 E4 05 F1 | 	add	objptr, ##28176
16e14     F2 2C 02 FB | 	rdlong	local04, objptr
16e18     37 00 00 FF 
16e1c     10 E4 85 F1 | 	sub	objptr, ##28176
16e20     10 4E 85 F1 | 	sub	fp, #16
16e24     A7 28 02 FB | 	rdlong	local02, fp
16e28     06 28 66 F0 | 	shl	local02, #6
16e2c     14 2D 02 F1 | 	add	local04, local02
16e30     04 4E 85 F1 | 	sub	fp, #4
16e34     A7 2C 62 FC | 	wrlong	local04, fp
16e38                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
16e38                 | ' speed=round(speed_coeff/slen)
16e38                 | ' ipan=8192+round(8192*pan)
16e38                 | ' ivol=round(1000.0*vol)
16e38                 | ' base2=base+64*channel
16e38                 | ' if wave <32 then 
16e38     18 4E 05 F1 | 	add	fp, #24
16e3c     A7 2C 02 FB | 	rdlong	local04, fp
16e40     20 4E 85 F1 | 	sub	fp, #32
16e44     20 2C 56 F2 | 	cmps	local04, #32 wc
16e48     2C 00 90 3D |  if_ae	jmp	#LR__1889
16e4c     08 4E 05 F1 | 	add	fp, #8
16e50     A7 12 02 FB | 	rdlong	arg01, fp
16e54     08 12 06 F1 | 	add	arg01, #8
16e58     18 4E 05 F1 | 	add	fp, #24
16e5c     A7 14 02 FB | 	rdlong	arg02, fp
16e60     20 4E 85 F1 | 	sub	fp, #32
16e64     0B 14 66 F0 | 	shl	arg02, #11
16e68     00 00 60 FF 
16e6c     00 14 06 F1 | 	add	arg02, ##-1073741824
16e70     09 15 62 FC | 	wrlong	arg02, arg01
16e74     18 00 90 FD | 	jmp	#LR__1890
16e78                 | LR__1889
16e78     08 4E 05 F1 | 	add	fp, #8
16e7c     A7 12 02 FB | 	rdlong	arg01, fp
16e80     08 4E 85 F1 | 	sub	fp, #8
16e84     08 12 06 F1 | 	add	arg01, #8
16e88     00 00 E4 FF 
16e8c     09 01 68 FC | 	wrlong	##-939524096, arg01
16e90                 | LR__1890
16e90     08 4E 05 F1 | 	add	fp, #8
16e94     A7 12 02 FB | 	rdlong	arg01, fp
16e98     10 12 06 F1 | 	add	arg01, #16
16e9c     04 00 80 FF 
16ea0     09 01 68 FC | 	wrlong	##2048, arg01
16ea4     A7 12 02 FB | 	rdlong	arg01, fp
16ea8     0C 12 06 F1 | 	add	arg01, #12
16eac     09 01 68 FC | 	wrlong	#0, arg01
16eb0     A7 12 02 FB | 	rdlong	arg01, fp
16eb4     14 12 06 F1 | 	add	arg01, #20
16eb8     14 4E 05 F1 | 	add	fp, #20
16ebc     A7 14 02 FB | 	rdlong	arg02, fp
16ec0     09 15 52 FC | 	wrword	arg02, arg01
16ec4     14 4E 85 F1 | 	sub	fp, #20
16ec8     A7 12 02 FB | 	rdlong	arg01, fp
16ecc     16 12 06 F1 | 	add	arg01, #22
16ed0     10 4E 05 F1 | 	add	fp, #16
16ed4     A7 14 02 FB | 	rdlong	arg02, fp
16ed8     09 15 52 FC | 	wrword	arg02, arg01
16edc                 | ' lpoke base2+16,2048
16edc                 | ' lpoke base2+12,0
16edc                 | ' dpoke base2+20,ivol 
16edc                 | ' dpoke base2+22,ipan 
16edc                 | ' if wave<32 then
16edc     08 4E 05 F1 | 	add	fp, #8
16ee0     A7 2C 02 FB | 	rdlong	local04, fp
16ee4     20 4E 85 F1 | 	sub	fp, #32
16ee8     20 2C 56 F2 | 	cmps	local04, #32 wc
16eec     38 00 90 3D |  if_ae	jmp	#LR__1891
16ef0     08 4E 05 F1 | 	add	fp, #8
16ef4     A7 12 02 FB | 	rdlong	arg01, fp
16ef8     18 12 06 F1 | 	add	arg01, #24
16efc     2C 4E 05 F1 | 	add	fp, #44
16f00     A7 14 02 FB | 	rdlong	arg02, fp
16f04     09 15 52 FC | 	wrword	arg02, arg01
16f08     2C 4E 85 F1 | 	sub	fp, #44
16f0c     A7 12 02 FB | 	rdlong	arg01, fp
16f10     1A 12 06 F1 | 	add	arg01, #26
16f14     08 4E 05 F1 | 	add	fp, #8
16f18     A7 14 02 FB | 	rdlong	arg02, fp
16f1c     10 4E 85 F1 | 	sub	fp, #16
16f20     09 15 52 FC | 	wrword	arg02, arg01
16f24     48 00 90 FD | 	jmp	#LR__1892
16f28                 | LR__1891
16f28     08 4E 05 F1 | 	add	fp, #8
16f2c     A7 2C 02 FB | 	rdlong	local04, fp
16f30     18 2C 06 F1 | 	add	local04, #24
16f34     64 4E 05 F1 | 	add	fp, #100
16f38     A7 14 02 FB | 	rdlong	arg02, fp
16f3c     6C 4E 85 F1 | 	sub	fp, #108
16f40     3E 2C 25 FF 
16f44     3C 12 06 F6 | 	mov	arg01, ##1247312956
16f48     44 00 B1 FD | 	call	#__system___float_div
16f4c     FD 12 02 F6 | 	mov	arg01, result1
16f50     01 14 06 F6 | 	mov	arg02, #1
16f54     FC 02 B1 FD | 	call	#__system___float_tointeger
16f58     16 FB 51 FC | 	wrword	result1, local04
16f5c     08 4E 05 F1 | 	add	fp, #8
16f60     A7 12 02 FB | 	rdlong	arg01, fp
16f64     08 4E 85 F1 | 	sub	fp, #8
16f68     1A 12 06 F1 | 	add	arg01, #26
16f6c     09 01 5A FC | 	wrword	#256, arg01
16f70                 | LR__1892
16f70     08 4E 05 F1 | 	add	fp, #8
16f74     A7 12 02 FB | 	rdlong	arg01, fp
16f78     1C 12 06 F1 | 	add	arg01, #28
16f7c     09 01 68 FC | 	wrlong	#0, arg01
16f80     A7 12 02 FB | 	rdlong	arg01, fp
16f84     20 12 06 F1 | 	add	arg01, #32
16f88     09 01 68 FC | 	wrlong	#0, arg01
16f8c                 | ' lpoke base2+28,$0000_0000
16f8c                 | ' lpoke base2+32,0 
16f8c                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
16f8c     1C 4E 05 F1 | 	add	fp, #28
16f90     A7 2C 02 FB | 	rdlong	local04, fp
16f94     24 4E 85 F1 | 	sub	fp, #36
16f98     08 2C 0E F2 | 	cmp	local04, #8 wz
16f9c     18 00 90 5D |  if_ne	jmp	#LR__1893
16fa0     08 4E 05 F1 | 	add	fp, #8
16fa4     A7 12 02 FB | 	rdlong	arg01, fp
16fa8     08 4E 85 F1 | 	sub	fp, #8
16fac     24 12 06 F1 | 	add	arg01, #36
16fb0     09 01 68 FC | 	wrlong	#0, arg01
16fb4     34 00 90 FD | 	jmp	#LR__1894
16fb8                 | LR__1893
16fb8     08 4E 05 F1 | 	add	fp, #8
16fbc     A7 12 02 FB | 	rdlong	arg01, fp
16fc0     24 12 06 F1 | 	add	arg01, #36
16fc4     1C 4E 05 F1 | 	add	fp, #28
16fc8     A7 14 02 FB | 	rdlong	arg02, fp
16fcc     24 4E 85 F1 | 	sub	fp, #36
16fd0     09 14 66 F0 | 	shl	arg02, #9
16fd4     0C 00 00 FF 
16fd8     D8 E4 05 F1 | 	add	objptr, ##6360
16fdc     F2 14 02 F1 | 	add	arg02, objptr
16fe0     0C 00 00 FF 
16fe4     D8 E4 85 F1 | 	sub	objptr, ##6360
16fe8     09 15 62 FC | 	wrlong	arg02, arg01
16fec                 | LR__1894
16fec     08 4E 05 F1 | 	add	fp, #8
16ff0     A7 12 02 FB | 	rdlong	arg01, fp
16ff4     28 12 06 F1 | 	add	arg01, #40
16ff8     0C 4E 05 F1 | 	add	fp, #12
16ffc     A7 14 02 FB | 	rdlong	arg02, fp
17000     09 15 62 FC | 	wrlong	arg02, arg01
17004     0C 4E 85 F1 | 	sub	fp, #12
17008     A7 12 02 FB | 	rdlong	arg01, fp
1700c     2C 12 06 F1 | 	add	arg01, #44
17010     24 4E 05 F1 | 	add	fp, #36
17014     A7 14 02 FB | 	rdlong	arg02, fp
17018     09 15 62 FC | 	wrlong	arg02, arg01
1701c                 | ' lpoke base2+40,speed 
1701c                 | ' lpoke base2+44,sus 
1701c                 | ' if delay>0 then waitms(delay) 
1701c     04 4E 85 F1 | 	sub	fp, #4
17020     A7 2C 02 FB | 	rdlong	local04, fp
17024     28 4E 85 F1 | 	sub	fp, #40
17028     01 2C 56 F2 | 	cmps	local04, #1 wc
1702c     28 4E 05 31 |  if_ae	add	fp, #40
17030     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17034     28 4E 85 31 |  if_ae	sub	fp, #40
17038     CC D1 B0 3D |  if_ae	call	#__system___waitms
1703c     A7 F0 03 F6 | 	mov	ptra, fp
17040     B2 00 A0 FD | 	call	#popregs_
17044                 | _do_play_ret
17044     2D 00 64 FD | 	ret
17048                 | 
17048                 | ' 
17048                 | ' '-------------------- plot
17048                 | ' 
17048                 | ' sub do_plot
17048                 | _do_plot
17048     00 4A 05 F6 | 	mov	COUNT_, #0
1704c     A8 00 A0 FD | 	call	#pushregs_
17050     20 F0 07 F1 | 	add	ptra, #32
17054     34 5B BF FD | 	call	#_pop
17058     FD 16 02 F6 | 	mov	arg03, result1
1705c     FE 14 02 F6 | 	mov	arg02, result2
17060     FF 12 02 F6 | 	mov	arg01, result3
17064     0C 4E 05 F1 | 	add	fp, #12
17068     A7 16 62 FC | 	wrlong	arg03, fp
1706c     04 4E 05 F1 | 	add	fp, #4
17070     A7 14 62 FC | 	wrlong	arg02, fp
17074     04 4E 05 F1 | 	add	fp, #4
17078     A7 12 62 FC | 	wrlong	arg01, fp
1707c     14 4E 85 F1 | 	sub	fp, #20
17080     08 5B BF FD | 	call	#_pop
17084     FF 16 02 F6 | 	mov	arg03, result3
17088     A7 FA 61 FC | 	wrlong	result1, fp
1708c     04 4E 05 F1 | 	add	fp, #4
17090     A7 FC 61 FC | 	wrlong	result2, fp
17094     04 4E 05 F1 | 	add	fp, #4
17098     A7 16 62 FC | 	wrlong	arg03, fp
1709c     08 4E 85 F1 | 	sub	fp, #8
170a0     A7 12 02 F6 | 	mov	arg01, fp
170a4     C8 5C BF FD | 	call	#_converttoint
170a8     18 4E 05 F1 | 	add	fp, #24
170ac     A7 FA 61 FC | 	wrlong	result1, fp
170b0     0C 4E 85 F1 | 	sub	fp, #12
170b4     A7 12 02 F6 | 	mov	arg01, fp
170b8     0C 4E 85 F1 | 	sub	fp, #12
170bc     B0 5C BF FD | 	call	#_converttoint
170c0     1C 4E 05 F1 | 	add	fp, #28
170c4     A7 FA 61 FC | 	wrlong	result1, fp
170c8     04 4E 85 F1 | 	sub	fp, #4
170cc     A7 16 02 FB | 	rdlong	arg03, fp
170d0     37 00 00 FF 
170d4     2C E4 05 F1 | 	add	objptr, ##28204
170d8     F2 16 62 FC | 	wrlong	arg03, objptr
170dc     04 4E 05 F1 | 	add	fp, #4
170e0     A7 14 02 FB | 	rdlong	arg02, fp
170e4     1C 4E 85 F1 | 	sub	fp, #28
170e8     04 E4 05 F1 | 	add	objptr, #4
170ec     F2 14 62 FC | 	wrlong	arg02, objptr
170f0     04 E4 85 F1 | 	sub	objptr, #4
170f4     F2 12 02 FB | 	rdlong	arg01, objptr
170f8     04 E4 85 F1 | 	sub	objptr, #4
170fc     F2 16 02 FB | 	rdlong	arg03, objptr
17100     37 00 00 FF 
17104     28 E4 85 F1 | 	sub	objptr, ##28200
17108     F8 A4 B0 FD | 	call	#_hg010b_spin2_putpixel
1710c     A7 F0 03 F6 | 	mov	ptra, fp
17110     B2 00 A0 FD | 	call	#popregs_
17114                 | _do_plot_ret
17114     2D 00 64 FD | 	ret
17118                 | 
17118                 | ' 
17118                 | ' '-------------------- poke
17118                 | ' 
17118                 | ' sub do_poke
17118                 | _do_poke
17118     01 4A 05 F6 | 	mov	COUNT_, #1
1711c     A8 00 A0 FD | 	call	#pushregs_
17120     20 F0 07 F1 | 	add	ptra, #32
17124     64 5A BF FD | 	call	#_pop
17128     FD 14 02 F6 | 	mov	arg02, result1
1712c     FE 12 02 F6 | 	mov	arg01, result2
17130     FF 26 02 F6 | 	mov	local01, result3
17134     A7 14 62 FC | 	wrlong	arg02, fp
17138     04 4E 05 F1 | 	add	fp, #4
1713c     A7 12 62 FC | 	wrlong	arg01, fp
17140     04 4E 05 F1 | 	add	fp, #4
17144     A7 26 62 FC | 	wrlong	local01, fp
17148     08 4E 85 F1 | 	sub	fp, #8
1714c     3C 5A BF FD | 	call	#_pop
17150     FF 26 02 F6 | 	mov	local01, result3
17154     0C 4E 05 F1 | 	add	fp, #12
17158     A7 FA 61 FC | 	wrlong	result1, fp
1715c     04 4E 05 F1 | 	add	fp, #4
17160     A7 FC 61 FC | 	wrlong	result2, fp
17164     04 4E 05 F1 | 	add	fp, #4
17168     A7 26 62 FC | 	wrlong	local01, fp
1716c     08 4E 85 F1 | 	sub	fp, #8
17170     A7 12 02 F6 | 	mov	arg01, fp
17174     0C 4E 85 F1 | 	sub	fp, #12
17178     F4 5B BF FD | 	call	#_converttoint
1717c     18 4E 05 F1 | 	add	fp, #24
17180     A7 FA 61 FC | 	wrlong	result1, fp
17184     18 4E 85 F1 | 	sub	fp, #24
17188     A7 12 02 F6 | 	mov	arg01, fp
1718c     E0 5B BF FD | 	call	#_converttoint
17190     1C 4E 05 F1 | 	add	fp, #28
17194     A7 FA 61 FC | 	wrlong	result1, fp
17198                 | ' t1=pop() 'value
17198                 | ' t2=pop() 
17198                 | ' a=converttoint(t2) : v=converttoint(t1)
17198                 | ' if a<$80000 then poke a,v else pspoke a,v
17198     04 4E 85 F1 | 	sub	fp, #4
1719c     A7 26 02 FB | 	rdlong	local01, fp
171a0     18 4E 85 F1 | 	sub	fp, #24
171a4     00 04 00 FF 
171a8     00 26 16 F2 | 	cmp	local01, ##524288 wc
171ac     1C 00 90 3D |  if_ae	jmp	#LR__1900
171b0     18 4E 05 F1 | 	add	fp, #24
171b4     A7 12 02 FB | 	rdlong	arg01, fp
171b8     04 4E 05 F1 | 	add	fp, #4
171bc     A7 14 02 FB | 	rdlong	arg02, fp
171c0     1C 4E 85 F1 | 	sub	fp, #28
171c4     09 15 42 FC | 	wrbyte	arg02, arg01
171c8     18 00 90 FD | 	jmp	#LR__1901
171cc                 | LR__1900
171cc     18 4E 05 F1 | 	add	fp, #24
171d0     A7 12 02 FB | 	rdlong	arg01, fp
171d4     04 4E 05 F1 | 	add	fp, #4
171d8     A7 14 02 FB | 	rdlong	arg02, fp
171dc     1C 4E 85 F1 | 	sub	fp, #28
171e0     BC 95 B0 FD | 	call	#_pspoke
171e4                 | LR__1901
171e4     A7 F0 03 F6 | 	mov	ptra, fp
171e8     B2 00 A0 FD | 	call	#popregs_
171ec                 | _do_poke_ret
171ec     2D 00 64 FD | 	ret
171f0                 | 
171f0                 | ' 
171f0                 | ' '-------------------- pop
171f0                 | ' 
171f0                 | ' sub do_pop()
171f0                 | _do_pop
171f0                 | ' if gosubtop>0 then  gosubtop -=1 
171f0     50 00 00 FF 
171f4     0C E5 05 F1 | 	add	objptr, ##41228
171f8     F2 00 02 FB | 	rdlong	_var01, objptr
171fc     50 00 00 FF 
17200     0C E5 85 F1 | 	sub	objptr, ##41228
17204     01 00 56 F2 | 	cmps	_var01, #1 wc
17208     50 00 00 3F 
1720c     0C E5 05 31 |  if_ae	add	objptr, ##41228
17210     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
17214     01 00 86 31 |  if_ae	sub	_var01, #1
17218     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
1721c     50 00 00 3F 
17220     0C E5 85 31 |  if_ae	sub	objptr, ##41228
17224                 | _do_pop_ret
17224     2D 00 64 FD | 	ret
17228                 | 
17228                 | ' 
17228                 | ' '-------------------- position
17228                 | ' 
17228                 | ' sub do_position
17228                 | _do_position
17228     01 4A 05 F6 | 	mov	COUNT_, #1
1722c     A8 00 A0 FD | 	call	#pushregs_
17230     18 F0 07 F1 | 	add	ptra, #24
17234     54 59 BF FD | 	call	#_pop
17238     FD 14 02 F6 | 	mov	arg02, result1
1723c     FE 12 02 F6 | 	mov	arg01, result2
17240     FF 26 02 F6 | 	mov	local01, result3
17244     A7 14 62 FC | 	wrlong	arg02, fp
17248     04 4E 05 F1 | 	add	fp, #4
1724c     A7 12 62 FC | 	wrlong	arg01, fp
17250     04 4E 05 F1 | 	add	fp, #4
17254     A7 26 62 FC | 	wrlong	local01, fp
17258     08 4E 85 F1 | 	sub	fp, #8
1725c     2C 59 BF FD | 	call	#_pop
17260     FF 26 02 F6 | 	mov	local01, result3
17264     0C 4E 05 F1 | 	add	fp, #12
17268     A7 FA 61 FC | 	wrlong	result1, fp
1726c     04 4E 05 F1 | 	add	fp, #4
17270     A7 FC 61 FC | 	wrlong	result2, fp
17274     04 4E 05 F1 | 	add	fp, #4
17278     A7 26 62 FC | 	wrlong	local01, fp
1727c     08 4E 85 F1 | 	sub	fp, #8
17280     A7 12 02 F6 | 	mov	arg01, fp
17284     0C 4E 85 F1 | 	sub	fp, #12
17288     E4 5A BF FD | 	call	#_converttoint
1728c     FD 26 02 F6 | 	mov	local01, result1
17290     A7 12 02 F6 | 	mov	arg01, fp
17294     D8 5A BF FD | 	call	#_converttoint
17298     FD 14 02 F6 | 	mov	arg02, result1
1729c     13 13 02 F6 | 	mov	arg01, local01
172a0     24 AF B0 FD | 	call	#_hg010b_spin2_setcursorpos
172a4     A7 F0 03 F6 | 	mov	ptra, fp
172a8     B2 00 A0 FD | 	call	#popregs_
172ac                 | _do_position_ret
172ac     2D 00 64 FD | 	ret
172b0                 | 
172b0                 | ' 
172b0                 | ' '-------------------- print
172b0                 | ' 
172b0                 | ' sub do_print  
172b0                 | _do_print
172b0     0B 4A 05 F6 | 	mov	COUNT_, #11
172b4     A8 00 A0 FD | 	call	#pushregs_
172b8     00 2C 06 F6 | 	mov	local04, #0
172bc     CC 58 BF FD | 	call	#_pop
172c0     FD 2E 02 F6 | 	mov	local05, result1
172c4     FE 30 02 F6 | 	mov	local06, result2
172c8     FF 32 02 F6 | 	mov	local07, result3
172cc     17 27 02 F6 | 	mov	local01, local05
172d0     18 29 02 F6 | 	mov	local02, local06
172d4     19 2B 02 F6 | 	mov	local03, local07
172d8                 | '  
172d8                 | ' r=0
172d8                 | ' t1=pop() 
172d8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
172d8     21 2A 0E F2 | 	cmp	local03, #33 wz
172dc     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
172e0     20 00 90 5D |  if_ne	jmp	#LR__1910
172e4     15 2D 02 F6 | 	mov	local04, local03
172e8     A0 58 BF FD | 	call	#_pop
172ec     FD 2E 02 F6 | 	mov	local05, result1
172f0     FE 30 02 F6 | 	mov	local06, result2
172f4     FF 32 02 F6 | 	mov	local07, result3
172f8     17 27 02 F6 | 	mov	local01, local05
172fc     18 29 02 F6 | 	mov	local02, local06
17300     19 2B 02 F6 | 	mov	local03, local07
17304                 | LR__1910
17304                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17304     20 2A 0E F2 | 	cmp	local03, #32 wz
17308     15 2D 02 A6 |  if_e	mov	local04, local03
1730c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
1730c     FF 2A 0E F2 | 	cmp	local03, #255 wz
17310     10 00 90 5D |  if_ne	jmp	#LR__1911
17314     13 13 02 F6 | 	mov	arg01, local01
17318     00 14 06 F6 | 	mov	arg02, #0
1731c     50 92 B0 FD | 	call	#_printerror
17320     D4 04 90 FD | 	jmp	#LR__1930
17324                 | LR__1911
17324                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
17324     2B 2A 0E F2 | 	cmp	local03, #43 wz
17328     14 00 90 5D |  if_ne	jmp	#LR__1912
1732c     13 13 02 F6 | 	mov	arg01, local01
17330     D0 59 BF FD | 	call	#_convertstring
17334     FD 2E 02 F6 | 	mov	local05, result1
17338     17 27 02 F6 | 	mov	local01, local05
1733c     1F 2A 06 F6 | 	mov	local03, #31
17340                 | LR__1912
17340                 | ' 
17340                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
17340     2C 2A 0E F2 | 	cmp	local03, #44 wz
17344     80 00 90 5D |  if_ne	jmp	#LR__1913
17348     00 12 06 F6 | 	mov	arg01, #0
1734c     EC 28 B1 FD | 	call	#__system___getiolock_0579
17350     FD 12 02 F6 | 	mov	arg01, result1
17354     BC CB B0 FD | 	call	#__system___lockmem
17358     A2 01 00 FF 
1735c     66 14 06 F6 | 	mov	arg02, ##@LR__5781
17360     00 12 06 F6 | 	mov	arg01, #0
17364     00 16 06 F6 | 	mov	arg03, #0
17368     9C D8 B0 FD | 	call	#__system___basic_print_string
1736c     0A 34 06 F6 | 	mov	local08, #10
17370     00 12 06 F6 | 	mov	arg01, #0
17374     13 15 02 F6 | 	mov	arg02, local01
17378     00 16 06 F6 | 	mov	arg03, #0
1737c     0A 18 06 F6 | 	mov	arg04, #10
17380     C8 D8 B0 FD | 	call	#__system___basic_print_integer
17384     FD 36 02 F6 | 	mov	local09, result1
17388     00 12 06 F6 | 	mov	arg01, #0
1738c     0A 14 06 F6 | 	mov	arg02, #10
17390     00 16 06 F6 | 	mov	arg03, #0
17394     18 D8 B0 FD | 	call	#__system___basic_print_char
17398     01 38 06 F6 | 	mov	local10, #1
1739c     00 12 06 F6 | 	mov	arg01, #0
173a0     98 28 B1 FD | 	call	#__system___getiolock_0579
173a4     FD 00 68 FC | 	wrlong	#0, result1
173a8     00 3A 06 F6 | 	mov	local11, #0
173ac     DC 57 BF FD | 	call	#_pop
173b0     FD 2E 02 F6 | 	mov	local05, result1
173b4     FE 30 02 F6 | 	mov	local06, result2
173b8     FF 32 02 F6 | 	mov	local07, result3
173bc     17 27 02 F6 | 	mov	local01, local05
173c0     18 29 02 F6 | 	mov	local02, local06
173c4     19 2B 02 F6 | 	mov	local03, local07
173c8                 | LR__1913
173c8                 | ' 
173c8                 | ' if r=print_mod_comma  then
173c8     21 2C 0E F2 | 	cmp	local04, #33 wz
173cc     AC 01 90 5D |  if_ne	jmp	#LR__1918
173d0                 | '   if t1.result_type=result_int then print t1.result.iresult,
173d0     1C 2A 0E F2 | 	cmp	local03, #28 wz
173d4     64 00 90 5D |  if_ne	jmp	#LR__1914
173d8     00 12 06 F6 | 	mov	arg01, #0
173dc     5C 28 B1 FD | 	call	#__system___getiolock_0579
173e0     FD 12 02 F6 | 	mov	arg01, result1
173e4     2C CB B0 FD | 	call	#__system___lockmem
173e8     00 30 06 F6 | 	mov	local06, #0
173ec     00 12 06 F6 | 	mov	arg01, #0
173f0     13 15 02 F6 | 	mov	arg02, local01
173f4     00 16 06 F6 | 	mov	arg03, #0
173f8     0A 18 06 F6 | 	mov	arg04, #10
173fc     4C D8 B0 FD | 	call	#__system___basic_print_integer
17400     FD 32 02 F6 | 	mov	local07, result1
17404     18 2F 02 F6 | 	mov	local05, local06
17408     19 2F 02 F1 | 	add	local05, local07
1740c     00 3A 06 F6 | 	mov	local11, #0
17410     00 12 06 F6 | 	mov	arg01, #0
17414     09 14 06 F6 | 	mov	arg02, #9
17418     00 16 06 F6 | 	mov	arg03, #0
1741c     90 D7 B0 FD | 	call	#__system___basic_print_char
17420     FD 36 02 F6 | 	mov	local09, result1
17424     FD 2E 02 F1 | 	add	local05, result1
17428     00 12 06 F6 | 	mov	arg01, #0
1742c     0C 28 B1 FD | 	call	#__system___getiolock_0579
17430     FD 00 68 FC | 	wrlong	#0, result1
17434     00 FA 05 F6 | 	mov	result1, #0
17438     00 38 06 F6 | 	mov	local10, #0
1743c                 | LR__1914
1743c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1743c     1D 2A 0E F2 | 	cmp	local03, #29 wz
17440     64 00 90 5D |  if_ne	jmp	#LR__1915
17444     00 12 06 F6 | 	mov	arg01, #0
17448     F0 27 B1 FD | 	call	#__system___getiolock_0579
1744c     FD 12 02 F6 | 	mov	arg01, result1
17450     C0 CA B0 FD | 	call	#__system___lockmem
17454     00 30 06 F6 | 	mov	local06, #0
17458     00 12 06 F6 | 	mov	arg01, #0
1745c     13 15 02 F6 | 	mov	arg02, local01
17460     00 16 06 F6 | 	mov	arg03, #0
17464     0A 18 06 F6 | 	mov	arg04, #10
17468     20 D8 B0 FD | 	call	#__system___basic_print_unsigned
1746c     FD 32 02 F6 | 	mov	local07, result1
17470     18 2F 02 F6 | 	mov	local05, local06
17474     19 2F 02 F1 | 	add	local05, local07
17478     00 3A 06 F6 | 	mov	local11, #0
1747c     00 12 06 F6 | 	mov	arg01, #0
17480     09 14 06 F6 | 	mov	arg02, #9
17484     00 16 06 F6 | 	mov	arg03, #0
17488     24 D7 B0 FD | 	call	#__system___basic_print_char
1748c     FD 36 02 F6 | 	mov	local09, result1
17490     FD 2E 02 F1 | 	add	local05, result1
17494     00 12 06 F6 | 	mov	arg01, #0
17498     A0 27 B1 FD | 	call	#__system___getiolock_0579
1749c     FD 00 68 FC | 	wrlong	#0, result1
174a0     00 FA 05 F6 | 	mov	result1, #0
174a4     00 38 06 F6 | 	mov	local10, #0
174a8                 | LR__1915
174a8                 | '   if t1.result_type=result_float then print t1.result.fresult,
174a8     1E 2A 0E F2 | 	cmp	local03, #30 wz
174ac     64 00 90 5D |  if_ne	jmp	#LR__1916
174b0     00 12 06 F6 | 	mov	arg01, #0
174b4     84 27 B1 FD | 	call	#__system___getiolock_0579
174b8     FD 12 02 F6 | 	mov	arg01, result1
174bc     54 CA B0 FD | 	call	#__system___lockmem
174c0     00 30 06 F6 | 	mov	local06, #0
174c4     00 12 06 F6 | 	mov	arg01, #0
174c8     13 15 02 F6 | 	mov	arg02, local01
174cc     00 16 06 F6 | 	mov	arg03, #0
174d0     23 18 06 F6 | 	mov	arg04, #35
174d4     CC FE B0 FD | 	call	#__system___basic_print_float
174d8     FD 32 02 F6 | 	mov	local07, result1
174dc     18 2F 02 F6 | 	mov	local05, local06
174e0     19 2F 02 F1 | 	add	local05, local07
174e4     00 3A 06 F6 | 	mov	local11, #0
174e8     00 12 06 F6 | 	mov	arg01, #0
174ec     09 14 06 F6 | 	mov	arg02, #9
174f0     00 16 06 F6 | 	mov	arg03, #0
174f4     B8 D6 B0 FD | 	call	#__system___basic_print_char
174f8     FD 36 02 F6 | 	mov	local09, result1
174fc     FD 2E 02 F1 | 	add	local05, result1
17500     00 12 06 F6 | 	mov	arg01, #0
17504     34 27 B1 FD | 	call	#__system___getiolock_0579
17508     FD 00 68 FC | 	wrlong	#0, result1
1750c     00 FA 05 F6 | 	mov	result1, #0
17510     00 38 06 F6 | 	mov	local10, #0
17514                 | LR__1916
17514                 | '   if t1.result_type=result_string then print t1.result.sresult,
17514     1F 2A 0E F2 | 	cmp	local03, #31 wz
17518     60 00 90 5D |  if_ne	jmp	#LR__1917
1751c     00 12 06 F6 | 	mov	arg01, #0
17520     18 27 B1 FD | 	call	#__system___getiolock_0579
17524     FD 12 02 F6 | 	mov	arg01, result1
17528     E8 C9 B0 FD | 	call	#__system___lockmem
1752c     00 30 06 F6 | 	mov	local06, #0
17530     00 12 06 F6 | 	mov	arg01, #0
17534     13 15 02 F6 | 	mov	arg02, local01
17538     00 16 06 F6 | 	mov	arg03, #0
1753c     C8 D6 B0 FD | 	call	#__system___basic_print_string
17540     FD 32 02 F6 | 	mov	local07, result1
17544     18 2F 02 F6 | 	mov	local05, local06
17548     19 2F 02 F1 | 	add	local05, local07
1754c     00 3A 06 F6 | 	mov	local11, #0
17550     00 12 06 F6 | 	mov	arg01, #0
17554     09 14 06 F6 | 	mov	arg02, #9
17558     00 16 06 F6 | 	mov	arg03, #0
1755c     50 D6 B0 FD | 	call	#__system___basic_print_char
17560     FD 36 02 F6 | 	mov	local09, result1
17564     FD 2E 02 F1 | 	add	local05, result1
17568     00 12 06 F6 | 	mov	arg01, #0
1756c     CC 26 B1 FD | 	call	#__system___getiolock_0579
17570     FD 00 68 FC | 	wrlong	#0, result1
17574     00 FA 05 F6 | 	mov	result1, #0
17578     00 38 06 F6 | 	mov	local10, #0
1757c                 | LR__1917
1757c                 | LR__1918
1757c                 | ' if r=print_mod_semicolon then 
1757c     22 2C 0E F2 | 	cmp	local04, #34 wz
17580     1C 01 90 5D |  if_ne	jmp	#LR__1923
17584                 | '   if t1.result_type=result_int then print t1.result.iresult;
17584     1C 2A 0E F2 | 	cmp	local03, #28 wz
17588     50 00 90 5D |  if_ne	jmp	#LR__1919
1758c     00 12 06 F6 | 	mov	arg01, #0
17590     A8 26 B1 FD | 	call	#__system___getiolock_0579
17594     FD 12 02 F6 | 	mov	arg01, result1
17598     78 C9 B0 FD | 	call	#__system___lockmem
1759c     00 30 06 F6 | 	mov	local06, #0
175a0     00 38 06 F6 | 	mov	local10, #0
175a4     0A 3A 06 F6 | 	mov	local11, #10
175a8     00 12 06 F6 | 	mov	arg01, #0
175ac     13 15 02 F6 | 	mov	arg02, local01
175b0     00 16 06 F6 | 	mov	arg03, #0
175b4     0A 18 06 F6 | 	mov	arg04, #10
175b8     90 D6 B0 FD | 	call	#__system___basic_print_integer
175bc     FD 32 02 F6 | 	mov	local07, result1
175c0     18 2F 02 F6 | 	mov	local05, local06
175c4     19 2F 02 F1 | 	add	local05, local07
175c8     00 12 06 F6 | 	mov	arg01, #0
175cc     6C 26 B1 FD | 	call	#__system___getiolock_0579
175d0     FD 00 68 FC | 	wrlong	#0, result1
175d4     00 FA 05 F6 | 	mov	result1, #0
175d8     00 36 06 F6 | 	mov	local09, #0
175dc                 | LR__1919
175dc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
175dc     1D 2A 0E F2 | 	cmp	local03, #29 wz
175e0     50 00 90 5D |  if_ne	jmp	#LR__1920
175e4     00 12 06 F6 | 	mov	arg01, #0
175e8     50 26 B1 FD | 	call	#__system___getiolock_0579
175ec     FD 12 02 F6 | 	mov	arg01, result1
175f0     20 C9 B0 FD | 	call	#__system___lockmem
175f4     00 30 06 F6 | 	mov	local06, #0
175f8     00 38 06 F6 | 	mov	local10, #0
175fc     0A 3A 06 F6 | 	mov	local11, #10
17600     00 12 06 F6 | 	mov	arg01, #0
17604     13 15 02 F6 | 	mov	arg02, local01
17608     00 16 06 F6 | 	mov	arg03, #0
1760c     0A 18 06 F6 | 	mov	arg04, #10
17610     78 D6 B0 FD | 	call	#__system___basic_print_unsigned
17614     FD 32 02 F6 | 	mov	local07, result1
17618     18 2F 02 F6 | 	mov	local05, local06
1761c     19 2F 02 F1 | 	add	local05, local07
17620     00 12 06 F6 | 	mov	arg01, #0
17624     14 26 B1 FD | 	call	#__system___getiolock_0579
17628     FD 00 68 FC | 	wrlong	#0, result1
1762c     00 FA 05 F6 | 	mov	result1, #0
17630     00 36 06 F6 | 	mov	local09, #0
17634                 | LR__1920
17634                 | '   if t1.result_type=result_float then print t1.result.fresult;
17634     1E 2A 0E F2 | 	cmp	local03, #30 wz
17638     30 00 90 5D |  if_ne	jmp	#LR__1921
1763c     00 12 06 F6 | 	mov	arg01, #0
17640     F8 25 B1 FD | 	call	#__system___getiolock_0579
17644     FD 12 02 F6 | 	mov	arg01, result1
17648     C8 C8 B0 FD | 	call	#__system___lockmem
1764c     00 12 06 F6 | 	mov	arg01, #0
17650     13 15 02 F6 | 	mov	arg02, local01
17654     00 16 06 F6 | 	mov	arg03, #0
17658     23 18 06 F6 | 	mov	arg04, #35
1765c     44 FD B0 FD | 	call	#__system___basic_print_float
17660     00 12 06 F6 | 	mov	arg01, #0
17664     D4 25 B1 FD | 	call	#__system___getiolock_0579
17668     FD 00 68 FC | 	wrlong	#0, result1
1766c                 | LR__1921
1766c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1766c     1F 2A 0E F2 | 	cmp	local03, #31 wz
17670     2C 00 90 5D |  if_ne	jmp	#LR__1922
17674     00 12 06 F6 | 	mov	arg01, #0
17678     C0 25 B1 FD | 	call	#__system___getiolock_0579
1767c     FD 12 02 F6 | 	mov	arg01, result1
17680     90 C8 B0 FD | 	call	#__system___lockmem
17684     00 12 06 F6 | 	mov	arg01, #0
17688     13 15 02 F6 | 	mov	arg02, local01
1768c     00 16 06 F6 | 	mov	arg03, #0
17690     74 D5 B0 FD | 	call	#__system___basic_print_string
17694     00 12 06 F6 | 	mov	arg01, #0
17698     A0 25 B1 FD | 	call	#__system___getiolock_0579
1769c     FD 00 68 FC | 	wrlong	#0, result1
176a0                 | LR__1922
176a0                 | LR__1923
176a0                 | ' if r=0 then 
176a0     00 2C 0E F2 | 	cmp	local04, #0 wz
176a4     1C 01 90 5D |  if_ne	jmp	#LR__1928
176a8                 | '   if t1.result_type=result_int then print t1.result.iresult
176a8     1C 2A 0E F2 | 	cmp	local03, #28 wz
176ac     40 00 90 5D |  if_ne	jmp	#LR__1924
176b0     00 12 06 F6 | 	mov	arg01, #0
176b4     84 25 B1 FD | 	call	#__system___getiolock_0579
176b8     FD 12 02 F6 | 	mov	arg01, result1
176bc     54 C8 B0 FD | 	call	#__system___lockmem
176c0     00 12 06 F6 | 	mov	arg01, #0
176c4     13 15 02 F6 | 	mov	arg02, local01
176c8     00 16 06 F6 | 	mov	arg03, #0
176cc     0A 18 06 F6 | 	mov	arg04, #10
176d0     78 D5 B0 FD | 	call	#__system___basic_print_integer
176d4     00 12 06 F6 | 	mov	arg01, #0
176d8     0A 14 06 F6 | 	mov	arg02, #10
176dc     00 16 06 F6 | 	mov	arg03, #0
176e0     CC D4 B0 FD | 	call	#__system___basic_print_char
176e4     00 12 06 F6 | 	mov	arg01, #0
176e8     50 25 B1 FD | 	call	#__system___getiolock_0579
176ec     FD 00 68 FC | 	wrlong	#0, result1
176f0                 | LR__1924
176f0                 | '   if t1.result_type=result_uint then print t1.result.uresult
176f0     1D 2A 0E F2 | 	cmp	local03, #29 wz
176f4     40 00 90 5D |  if_ne	jmp	#LR__1925
176f8     00 12 06 F6 | 	mov	arg01, #0
176fc     3C 25 B1 FD | 	call	#__system___getiolock_0579
17700     FD 12 02 F6 | 	mov	arg01, result1
17704     0C C8 B0 FD | 	call	#__system___lockmem
17708     00 12 06 F6 | 	mov	arg01, #0
1770c     13 15 02 F6 | 	mov	arg02, local01
17710     00 16 06 F6 | 	mov	arg03, #0
17714     0A 18 06 F6 | 	mov	arg04, #10
17718     70 D5 B0 FD | 	call	#__system___basic_print_unsigned
1771c     00 12 06 F6 | 	mov	arg01, #0
17720     0A 14 06 F6 | 	mov	arg02, #10
17724     00 16 06 F6 | 	mov	arg03, #0
17728     84 D4 B0 FD | 	call	#__system___basic_print_char
1772c     00 12 06 F6 | 	mov	arg01, #0
17730     08 25 B1 FD | 	call	#__system___getiolock_0579
17734     FD 00 68 FC | 	wrlong	#0, result1
17738                 | LR__1925
17738                 | '   if t1.result_type=result_float then print t1.result.fresult
17738     1E 2A 0E F2 | 	cmp	local03, #30 wz
1773c     40 00 90 5D |  if_ne	jmp	#LR__1926
17740     00 12 06 F6 | 	mov	arg01, #0
17744     F4 24 B1 FD | 	call	#__system___getiolock_0579
17748     FD 12 02 F6 | 	mov	arg01, result1
1774c     C4 C7 B0 FD | 	call	#__system___lockmem
17750     00 12 06 F6 | 	mov	arg01, #0
17754     13 15 02 F6 | 	mov	arg02, local01
17758     00 16 06 F6 | 	mov	arg03, #0
1775c     23 18 06 F6 | 	mov	arg04, #35
17760     40 FC B0 FD | 	call	#__system___basic_print_float
17764     00 12 06 F6 | 	mov	arg01, #0
17768     0A 14 06 F6 | 	mov	arg02, #10
1776c     00 16 06 F6 | 	mov	arg03, #0
17770     3C D4 B0 FD | 	call	#__system___basic_print_char
17774     00 12 06 F6 | 	mov	arg01, #0
17778     C0 24 B1 FD | 	call	#__system___getiolock_0579
1777c     FD 00 68 FC | 	wrlong	#0, result1
17780                 | LR__1926
17780                 | '   if t1.result_type=result_string then print t1.result.sresult
17780     1F 2A 0E F2 | 	cmp	local03, #31 wz
17784     3C 00 90 5D |  if_ne	jmp	#LR__1927
17788     00 12 06 F6 | 	mov	arg01, #0
1778c     AC 24 B1 FD | 	call	#__system___getiolock_0579
17790     FD 12 02 F6 | 	mov	arg01, result1
17794     7C C7 B0 FD | 	call	#__system___lockmem
17798     00 12 06 F6 | 	mov	arg01, #0
1779c     13 15 02 F6 | 	mov	arg02, local01
177a0     00 16 06 F6 | 	mov	arg03, #0
177a4     60 D4 B0 FD | 	call	#__system___basic_print_string
177a8     00 12 06 F6 | 	mov	arg01, #0
177ac     0A 14 06 F6 | 	mov	arg02, #10
177b0     00 16 06 F6 | 	mov	arg03, #0
177b4     F8 D3 B0 FD | 	call	#__system___basic_print_char
177b8     00 12 06 F6 | 	mov	arg01, #0
177bc     7C 24 B1 FD | 	call	#__system___getiolock_0579
177c0     FD 00 68 FC | 	wrlong	#0, result1
177c4                 | LR__1927
177c4                 | LR__1928
177c4                 | ' if r=print_mod_empty then print
177c4     20 2C 0E F2 | 	cmp	local04, #32 wz
177c8     2C 00 90 5D |  if_ne	jmp	#LR__1929
177cc     00 12 06 F6 | 	mov	arg01, #0
177d0     68 24 B1 FD | 	call	#__system___getiolock_0579
177d4     FD 12 02 F6 | 	mov	arg01, result1
177d8     38 C7 B0 FD | 	call	#__system___lockmem
177dc     00 12 06 F6 | 	mov	arg01, #0
177e0     0A 14 06 F6 | 	mov	arg02, #10
177e4     00 16 06 F6 | 	mov	arg03, #0
177e8     C4 D3 B0 FD | 	call	#__system___basic_print_char
177ec     00 12 06 F6 | 	mov	arg01, #0
177f0     48 24 B1 FD | 	call	#__system___getiolock_0579
177f4     FD 00 68 FC | 	wrlong	#0, result1
177f8                 | LR__1929
177f8                 | LR__1930
177f8     A7 F0 03 F6 | 	mov	ptra, fp
177fc     B2 00 A0 FD | 	call	#popregs_
17800                 | _do_print_ret
17800     2D 00 64 FD | 	ret
17804                 | 
17804                 | ' 
17804                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
17804                 | ' 
17804                 | ' sub do_push
17804                 | _do_push
17804                 | ' if stackpointer<maxstack then 
17804     43 00 00 FF 
17808     58 E4 05 F1 | 	add	objptr, ##34392
1780c     F2 00 02 FB | 	rdlong	_var01, objptr
17810     43 00 00 FF 
17814     58 E4 85 F1 | 	sub	objptr, ##34392
17818     01 00 00 FF 
1781c     00 00 56 F2 | 	cmps	_var01, ##512 wc
17820     F8 00 90 3D |  if_ae	jmp	#LR__1940
17824     4A 00 00 FF 
17828     80 E4 05 F1 | 	add	objptr, ##38016
1782c     F2 02 02 FB | 	rdlong	_var02, objptr
17830     01 05 02 F6 | 	mov	_var03, _var02
17834     01 04 66 F0 | 	shl	_var03, #1
17838     01 05 02 F1 | 	add	_var03, _var02
1783c     02 04 66 F0 | 	shl	_var03, #2
17840     03 00 00 FF 
17844     04 E4 85 F1 | 	sub	objptr, ##1540
17848     F2 04 02 F1 | 	add	_var03, objptr
1784c     02 01 02 FB | 	rdlong	_var01, _var03
17850     04 04 06 F1 | 	add	_var03, #4
17854     02 07 02 FB | 	rdlong	_var04, _var03
17858     01 05 02 F6 | 	mov	_var03, _var02
1785c     01 04 66 F0 | 	shl	_var03, #1
17860     01 05 02 F1 | 	add	_var03, _var02
17864     02 04 66 F0 | 	shl	_var03, #2
17868     F2 04 02 F1 | 	add	_var03, objptr
1786c     08 04 06 F1 | 	add	_var03, #8
17870     02 03 02 FB | 	rdlong	_var02, _var03
17874     04 00 00 FF 
17878     24 E4 85 F1 | 	sub	objptr, ##2084
1787c     F2 04 02 FB | 	rdlong	_var03, objptr
17880     02 09 02 F6 | 	mov	_var05, _var03
17884     01 08 66 F0 | 	shl	_var05, #1
17888     02 09 02 F1 | 	add	_var05, _var03
1788c     02 08 66 F0 | 	shl	_var05, #2
17890     0C 00 00 FF 
17894     0C E4 85 F1 | 	sub	objptr, ##6156
17898     F2 08 02 F1 | 	add	_var05, objptr
1789c     04 01 62 FC | 	wrlong	_var01, _var05
178a0     0C 00 00 FF 
178a4     0C E4 05 F1 | 	add	objptr, ##6156
178a8     F2 08 02 FB | 	rdlong	_var05, objptr
178ac     04 05 02 F6 | 	mov	_var03, _var05
178b0     01 04 66 F0 | 	shl	_var03, #1
178b4     04 05 02 F1 | 	add	_var03, _var05
178b8     02 04 66 F0 | 	shl	_var03, #2
178bc     0C 00 00 FF 
178c0     0C E4 85 F1 | 	sub	objptr, ##6156
178c4     F2 04 02 F1 | 	add	_var03, objptr
178c8     04 04 06 F1 | 	add	_var03, #4
178cc     02 07 62 FC | 	wrlong	_var04, _var03
178d0     0C 00 00 FF 
178d4     0C E4 05 F1 | 	add	objptr, ##6156
178d8     F2 08 02 FB | 	rdlong	_var05, objptr
178dc     04 07 02 F6 | 	mov	_var04, _var05
178e0     01 06 66 F0 | 	shl	_var04, #1
178e4     04 07 02 F1 | 	add	_var04, _var05
178e8     02 06 66 F0 | 	shl	_var04, #2
178ec     0C 00 00 FF 
178f0     0C E4 85 F1 | 	sub	objptr, ##6156
178f4     F2 06 02 F1 | 	add	_var04, objptr
178f8     08 06 06 F1 | 	add	_var04, #8
178fc     03 03 62 FC | 	wrlong	_var02, _var04
17900     0C 00 00 FF 
17904     0C E4 05 F1 | 	add	objptr, ##6156
17908     F2 00 02 FB | 	rdlong	_var01, objptr
1790c     01 00 06 F1 | 	add	_var01, #1
17910     F2 00 62 FC | 	wrlong	_var01, objptr
17914     43 00 00 FF 
17918     58 E4 85 F1 | 	sub	objptr, ##34392
1791c                 | LR__1940
1791c                 | _do_push_ret
1791c     2D 00 64 FD | 	ret
17920                 | 
17920                 | ' 
17920                 | ' '-------------------- put
17920                 | ' 
17920                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
17920                 | _do_put
17920     03 4A 05 F6 | 	mov	COUNT_, #3
17924     A8 00 A0 FD | 	call	#pushregs_
17928     28 F0 07 F1 | 	add	ptra, #40
1792c     4A 00 00 FF 
17930     80 E4 05 F1 | 	add	objptr, ##38016
17934     F2 1A 02 FB | 	rdlong	arg05, objptr
17938     0D 19 02 F6 | 	mov	arg04, arg05
1793c     01 18 66 F0 | 	shl	arg04, #1
17940     0D 19 02 F1 | 	add	arg04, arg05
17944     02 18 66 F0 | 	shl	arg04, #2
17948     03 00 00 FF 
1794c     04 E4 85 F1 | 	sub	objptr, ##1540
17950     F2 18 02 F1 | 	add	arg04, objptr
17954     0C 1B 02 FB | 	rdlong	arg05, arg04
17958     A7 1A 62 FC | 	wrlong	arg05, fp
1795c                 | ' 
1795c                 | ' numpar=compiledline(lineptr_e).result.uresult
1795c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1795c     04 1A 0E F2 | 	cmp	arg05, #4 wz
17960     47 00 00 FF 
17964     7C E4 85 F1 | 	sub	objptr, ##36476
17968     48 00 90 5D |  if_ne	jmp	#LR__1950
1796c     1C 52 BF FD | 	call	#_pop
17970     FF 1A 02 F6 | 	mov	arg05, result3
17974     1C 4E 05 F1 | 	add	fp, #28
17978     A7 FA 61 FC | 	wrlong	result1, fp
1797c     04 4E 05 F1 | 	add	fp, #4
17980     A7 FC 61 FC | 	wrlong	result2, fp
17984     04 4E 05 F1 | 	add	fp, #4
17988     A7 1A 62 FC | 	wrlong	arg05, fp
1798c     08 4E 85 F1 | 	sub	fp, #8
17990     A7 12 02 F6 | 	mov	arg01, fp
17994     1C 4E 85 F1 | 	sub	fp, #28
17998     D4 53 BF FD | 	call	#_converttoint
1799c     52 00 00 FF 
179a0     1C E4 05 F1 | 	add	objptr, ##42012
179a4     F2 FA 61 FC | 	wrlong	result1, objptr
179a8     52 00 00 FF 
179ac     1C E4 85 F1 | 	sub	objptr, ##42012
179b0     18 00 90 FD | 	jmp	#LR__1951
179b4                 | LR__1950
179b4     52 00 00 FF 
179b8     1C E4 05 F1 | 	add	objptr, ##42012
179bc     FF FF FF FF 
179c0     F2 FE 6B FC | 	wrlong	##-1, objptr
179c4     52 00 00 FF 
179c8     1C E4 85 F1 | 	sub	objptr, ##42012
179cc                 | LR__1951
179cc                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
179cc     A7 1A 02 FB | 	rdlong	arg05, fp
179d0     03 1A 56 F2 | 	cmps	arg05, #3 wc
179d4     40 00 90 CD |  if_b	jmp	#LR__1952
179d8     B0 51 BF FD | 	call	#_pop
179dc     FF 1A 02 F6 | 	mov	arg05, result3
179e0     1C 4E 05 F1 | 	add	fp, #28
179e4     A7 FA 61 FC | 	wrlong	result1, fp
179e8     04 4E 05 F1 | 	add	fp, #4
179ec     A7 FC 61 FC | 	wrlong	result2, fp
179f0     04 4E 05 F1 | 	add	fp, #4
179f4     A7 1A 62 FC | 	wrlong	arg05, fp
179f8     08 4E 85 F1 | 	sub	fp, #8
179fc     A7 12 02 F6 | 	mov	arg01, fp
17a00     1C 4E 85 F1 | 	sub	fp, #28
17a04     68 53 BF FD | 	call	#_converttoint
17a08     08 4E 05 F1 | 	add	fp, #8
17a0c     A7 FA 61 FC | 	wrlong	result1, fp
17a10     08 4E 85 F1 | 	sub	fp, #8
17a14     0C 00 90 FD | 	jmp	#LR__1953
17a18                 | LR__1952
17a18     08 4E 05 F1 | 	add	fp, #8
17a1c     A7 02 68 FC | 	wrlong	#1, fp
17a20     08 4E 85 F1 | 	sub	fp, #8
17a24                 | LR__1953
17a24                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
17a24     A7 18 02 FB | 	rdlong	arg04, fp
17a28     02 18 56 F2 | 	cmps	arg04, #2 wc
17a2c     3C 00 90 CD |  if_b	jmp	#LR__1954
17a30     58 51 BF FD | 	call	#_pop
17a34     FF 18 02 F6 | 	mov	arg04, result3
17a38     1C 4E 05 F1 | 	add	fp, #28
17a3c     A7 FA 61 FC | 	wrlong	result1, fp
17a40     04 4E 05 F1 | 	add	fp, #4
17a44     A7 FC 61 FC | 	wrlong	result2, fp
17a48     04 4E 05 F1 | 	add	fp, #4
17a4c     A7 18 62 FC | 	wrlong	arg04, fp
17a50     08 4E 85 F1 | 	sub	fp, #8
17a54     A7 12 02 F6 | 	mov	arg01, fp
17a58     1C 4E 85 F1 | 	sub	fp, #28
17a5c     10 53 BF FD | 	call	#_converttoint
17a60     0C 4E 05 F1 | 	add	fp, #12
17a64     A7 FA 61 FC | 	wrlong	result1, fp
17a68     0C 4E 85 F1 | 	sub	fp, #12
17a6c                 | LR__1954
17a6c     1C 51 BF FD | 	call	#_pop
17a70     FF 18 02 F6 | 	mov	arg04, result3
17a74     1C 4E 05 F1 | 	add	fp, #28
17a78     A7 FA 61 FC | 	wrlong	result1, fp
17a7c     04 4E 05 F1 | 	add	fp, #4
17a80     A7 FC 61 FC | 	wrlong	result2, fp
17a84     04 4E 05 F1 | 	add	fp, #4
17a88     A7 18 62 FC | 	wrlong	arg04, fp
17a8c     08 4E 85 F1 | 	sub	fp, #8
17a90     A7 12 02 F6 | 	mov	arg01, fp
17a94     1C 4E 85 F1 | 	sub	fp, #28
17a98     D4 52 BF FD | 	call	#_converttoint
17a9c     04 4E 05 F1 | 	add	fp, #4
17aa0     A7 FA 61 FC | 	wrlong	result1, fp
17aa4     10 4E 05 F1 | 	add	fp, #16
17aa8     A7 26 02 FB | 	rdlong	local01, fp
17aac     14 4E 85 F1 | 	sub	fp, #20
17ab0     02 26 66 F0 | 	shl	local01, #2
17ab4     50 00 00 FF 
17ab8     C4 E4 05 F1 | 	add	objptr, ##41156
17abc     F2 26 02 F1 | 	add	local01, objptr
17ac0     13 01 68 FC | 	wrlong	#0, local01
17ac4                 | ' t1=pop() : channel=converttoint(t1)
17ac4                 | ' getres(j)=0
17ac4                 | ' if pos>=0 then
17ac4     01 00 00 FF 
17ac8     58 E5 05 F1 | 	add	objptr, ##856
17acc     F2 28 02 FB | 	rdlong	local02, objptr
17ad0     52 00 00 FF 
17ad4     1C E4 85 F1 | 	sub	objptr, ##42012
17ad8     00 28 56 F2 | 	cmps	local02, #0 wc
17adc     C0 01 90 CD |  if_b	jmp	#LR__1960
17ae0     10 4E 05 F1 | 	add	fp, #16
17ae4     A7 00 68 FC | 	wrlong	#0, fp
17ae8     10 4E 85 F1 | 	sub	fp, #16
17aec                 | '    i=0: do
17aec                 | LR__1955
17aec     14 4E 05 F1 | 	add	fp, #20
17af0     A7 00 68 FC | 	wrlong	#0, fp
17af4     14 4E 85 F1 | 	sub	fp, #20
17af8                 | '    j=0: do    
17af8                 | LR__1956
17af8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17af8     0C 4E 05 F1 | 	add	fp, #12
17afc     A7 28 02 FB | 	rdlong	local02, fp
17b00     0C 4E 85 F1 | 	sub	fp, #12
17b04     00 04 00 FF 
17b08     00 28 56 F2 | 	cmps	local02, ##524288 wc
17b0c     4C 00 90 3D |  if_ae	jmp	#LR__1957
17b10     14 4E 05 F1 | 	add	fp, #20
17b14     A7 28 02 FB | 	rdlong	local02, fp
17b18     14 27 02 F6 | 	mov	local01, local02
17b1c     4E 00 00 FF 
17b20     B4 E4 05 F1 | 	add	objptr, ##40116
17b24     F2 26 02 F1 | 	add	local01, objptr
17b28     08 4E 85 F1 | 	sub	fp, #8
17b2c     A7 12 02 FB | 	rdlong	arg01, fp
17b30     04 4E 05 F1 | 	add	fp, #4
17b34     A7 18 02 FB | 	rdlong	arg04, fp
17b38     0A 18 66 F0 | 	shl	arg04, #10
17b3c     0C 13 02 F1 | 	add	arg01, arg04
17b40     10 4E 85 F1 | 	sub	fp, #16
17b44     14 13 02 F1 | 	add	arg01, local02
17b48     09 FB C1 FA | 	rdbyte	result1, arg01
17b4c     4E 00 00 FF 
17b50     B4 E4 85 F1 | 	sub	objptr, ##40116
17b54     13 FB 41 FC | 	wrbyte	result1, local01
17b58     48 00 90 FD | 	jmp	#LR__1958
17b5c                 | LR__1957
17b5c     14 4E 05 F1 | 	add	fp, #20
17b60     A7 28 02 FB | 	rdlong	local02, fp
17b64     14 27 02 F6 | 	mov	local01, local02
17b68     4E 00 00 FF 
17b6c     B4 E4 05 F1 | 	add	objptr, ##40116
17b70     F2 26 02 F1 | 	add	local01, objptr
17b74     08 4E 85 F1 | 	sub	fp, #8
17b78     A7 12 02 FB | 	rdlong	arg01, fp
17b7c     04 4E 05 F1 | 	add	fp, #4
17b80     A7 18 02 FB | 	rdlong	arg04, fp
17b84     0A 18 66 F0 | 	shl	arg04, #10
17b88     0C 13 02 F1 | 	add	arg01, arg04
17b8c     10 4E 85 F1 | 	sub	fp, #16
17b90     14 13 02 F1 | 	add	arg01, local02
17b94     4E 00 00 FF 
17b98     B4 E4 85 F1 | 	sub	objptr, ##40116
17b9c     48 8C B0 FD | 	call	#_pspeek
17ba0     13 FB 41 FC | 	wrbyte	result1, local01
17ba4                 | LR__1958
17ba4     14 4E 05 F1 | 	add	fp, #20
17ba8     A7 28 02 FB | 	rdlong	local02, fp
17bac     01 28 06 F1 | 	add	local02, #1
17bb0     A7 28 62 FC | 	wrlong	local02, fp
17bb4     14 4E 85 F1 | 	sub	fp, #20
17bb8     02 00 00 FF 
17bbc     00 28 56 F2 | 	cmps	local02, ##1024 wc
17bc0     2C 00 90 3D |  if_ae	jmp	#LR__1959
17bc4     10 4E 05 F1 | 	add	fp, #16
17bc8     A7 26 02 FB | 	rdlong	local01, fp
17bcc     0A 26 66 F0 | 	shl	local01, #10
17bd0     04 4E 05 F1 | 	add	fp, #4
17bd4     A7 28 02 FB | 	rdlong	local02, fp
17bd8     14 27 02 F1 | 	add	local01, local02
17bdc     0C 4E 85 F1 | 	sub	fp, #12
17be0     A7 28 02 FB | 	rdlong	local02, fp
17be4     08 4E 85 F1 | 	sub	fp, #8
17be8     14 27 5A F2 | 	cmps	local01, local02 wcz
17bec     08 FF 9F ED |  if_be	jmp	#LR__1956
17bf0                 | LR__1959
17bf0                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
17bf0     04 4E 05 F1 | 	add	fp, #4
17bf4     A7 12 02 FB | 	rdlong	arg01, fp
17bf8     52 00 00 FF 
17bfc     1C E4 05 F1 | 	add	objptr, ##42012
17c00     F2 14 02 FB | 	rdlong	arg02, objptr
17c04     01 14 06 F1 | 	add	arg02, #1
17c08     03 00 00 FF 
17c0c     68 E5 85 F1 | 	sub	objptr, ##1896
17c10     F2 16 02 F6 | 	mov	arg03, objptr
17c14     4E 00 00 FF 
17c18     B4 E4 85 F1 | 	sub	objptr, ##40116
17c1c     04 4E 05 F1 | 	add	fp, #4
17c20     A7 18 02 FB | 	rdlong	arg04, fp
17c24     08 4E 85 F1 | 	sub	fp, #8
17c28     01 1A 06 F6 | 	mov	arg05, #1
17c2c     E8 D0 B0 FD | 	call	#__system___basic_put
17c30     18 4E 05 F1 | 	add	fp, #24
17c34     A7 FA 61 FC | 	wrlong	result1, fp
17c38     14 4E 85 F1 | 	sub	fp, #20
17c3c     A7 26 02 FB | 	rdlong	local01, fp
17c40     02 26 66 F0 | 	shl	local01, #2
17c44     50 00 00 FF 
17c48     C4 E4 05 F1 | 	add	objptr, ##41156
17c4c     F2 26 02 F1 | 	add	local01, objptr
17c50     13 FB 61 FC | 	wrlong	result1, local01
17c54                 | '    if 1024*i+j>amount then exit loop
17c54     0C 4E 05 F1 | 	add	fp, #12
17c58     A7 28 02 FB | 	rdlong	local02, fp
17c5c     0A 28 66 F0 | 	shl	local02, #10
17c60     04 4E 05 F1 | 	add	fp, #4
17c64     A7 26 02 FB | 	rdlong	local01, fp
17c68     13 29 02 F1 | 	add	local02, local01
17c6c     0C 4E 85 F1 | 	sub	fp, #12
17c70     A7 26 02 FB | 	rdlong	local01, fp
17c74     08 4E 85 F1 | 	sub	fp, #8
17c78     13 29 5A F2 | 	cmps	local02, local01 wcz
17c7c     50 00 00 FF 
17c80     C4 E4 85 F1 | 	sub	objptr, ##41156
17c84     CC 01 90 1D |  if_a	jmp	#LR__1967
17c88     10 4E 05 F1 | 	add	fp, #16
17c8c     A7 28 02 FB | 	rdlong	local02, fp
17c90     01 28 06 F1 | 	add	local02, #1
17c94     A7 28 62 FC | 	wrlong	local02, fp
17c98     10 4E 85 F1 | 	sub	fp, #16
17c9c     4C FE 9F FD | 	jmp	#LR__1955
17ca0                 | LR__1960
17ca0     10 4E 05 F1 | 	add	fp, #16
17ca4     A7 00 68 FC | 	wrlong	#0, fp
17ca8     10 4E 85 F1 | 	sub	fp, #16
17cac                 | '    i=0: do
17cac                 | LR__1961
17cac     14 4E 05 F1 | 	add	fp, #20
17cb0     A7 00 68 FC | 	wrlong	#0, fp
17cb4     14 4E 85 F1 | 	sub	fp, #20
17cb8                 | '    j=0: do  
17cb8                 | LR__1962
17cb8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17cb8     0C 4E 05 F1 | 	add	fp, #12
17cbc     A7 28 02 FB | 	rdlong	local02, fp
17cc0     0C 4E 85 F1 | 	sub	fp, #12
17cc4     00 04 00 FF 
17cc8     00 28 56 F2 | 	cmps	local02, ##524288 wc
17ccc     4C 00 90 3D |  if_ae	jmp	#LR__1963
17cd0     14 4E 05 F1 | 	add	fp, #20
17cd4     A7 28 02 FB | 	rdlong	local02, fp
17cd8     14 27 02 F6 | 	mov	local01, local02
17cdc     4E 00 00 FF 
17ce0     B4 E4 05 F1 | 	add	objptr, ##40116
17ce4     F2 26 02 F1 | 	add	local01, objptr
17ce8     08 4E 85 F1 | 	sub	fp, #8
17cec     A7 12 02 FB | 	rdlong	arg01, fp
17cf0     04 4E 05 F1 | 	add	fp, #4
17cf4     A7 18 02 FB | 	rdlong	arg04, fp
17cf8     0A 18 66 F0 | 	shl	arg04, #10
17cfc     0C 13 02 F1 | 	add	arg01, arg04
17d00     10 4E 85 F1 | 	sub	fp, #16
17d04     14 13 02 F1 | 	add	arg01, local02
17d08     09 FB C1 FA | 	rdbyte	result1, arg01
17d0c     4E 00 00 FF 
17d10     B4 E4 85 F1 | 	sub	objptr, ##40116
17d14     13 FB 41 FC | 	wrbyte	result1, local01
17d18     48 00 90 FD | 	jmp	#LR__1964
17d1c                 | LR__1963
17d1c     14 4E 05 F1 | 	add	fp, #20
17d20     A7 28 02 FB | 	rdlong	local02, fp
17d24     14 27 02 F6 | 	mov	local01, local02
17d28     4E 00 00 FF 
17d2c     B4 E4 05 F1 | 	add	objptr, ##40116
17d30     F2 26 02 F1 | 	add	local01, objptr
17d34     08 4E 85 F1 | 	sub	fp, #8
17d38     A7 12 02 FB | 	rdlong	arg01, fp
17d3c     04 4E 05 F1 | 	add	fp, #4
17d40     A7 18 02 FB | 	rdlong	arg04, fp
17d44     0A 18 66 F0 | 	shl	arg04, #10
17d48     0C 13 02 F1 | 	add	arg01, arg04
17d4c     10 4E 85 F1 | 	sub	fp, #16
17d50     14 13 02 F1 | 	add	arg01, local02
17d54     4E 00 00 FF 
17d58     B4 E4 85 F1 | 	sub	objptr, ##40116
17d5c     88 8A B0 FD | 	call	#_pspeek
17d60     13 FB 41 FC | 	wrbyte	result1, local01
17d64                 | LR__1964
17d64     14 4E 05 F1 | 	add	fp, #20
17d68     A7 28 02 FB | 	rdlong	local02, fp
17d6c     01 28 06 F1 | 	add	local02, #1
17d70     A7 28 62 FC | 	wrlong	local02, fp
17d74     14 4E 85 F1 | 	sub	fp, #20
17d78     02 00 00 FF 
17d7c     00 28 56 F2 | 	cmps	local02, ##1024 wc
17d80     2C 00 90 3D |  if_ae	jmp	#LR__1965
17d84     10 4E 05 F1 | 	add	fp, #16
17d88     A7 26 02 FB | 	rdlong	local01, fp
17d8c     0A 26 66 F0 | 	shl	local01, #10
17d90     04 4E 05 F1 | 	add	fp, #4
17d94     A7 28 02 FB | 	rdlong	local02, fp
17d98     14 27 02 F1 | 	add	local01, local02
17d9c     0C 4E 85 F1 | 	sub	fp, #12
17da0     A7 28 02 FB | 	rdlong	local02, fp
17da4     08 4E 85 F1 | 	sub	fp, #8
17da8     14 27 5A F2 | 	cmps	local01, local02 wcz
17dac     08 FF 9F ED |  if_be	jmp	#LR__1962
17db0                 | LR__1965
17db0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
17db0     04 4E 05 F1 | 	add	fp, #4
17db4     A7 12 02 FB | 	rdlong	arg01, fp
17db8     4E 00 00 FF 
17dbc     B4 E4 05 F1 | 	add	objptr, ##40116
17dc0     F2 16 02 F6 | 	mov	arg03, objptr
17dc4     4E 00 00 FF 
17dc8     B4 E4 85 F1 | 	sub	objptr, ##40116
17dcc     04 4E 05 F1 | 	add	fp, #4
17dd0     A7 18 02 FB | 	rdlong	arg04, fp
17dd4     08 4E 85 F1 | 	sub	fp, #8
17dd8     00 14 06 F6 | 	mov	arg02, #0
17ddc     01 1A 06 F6 | 	mov	arg05, #1
17de0     34 CF B0 FD | 	call	#__system___basic_put
17de4     18 4E 05 F1 | 	add	fp, #24
17de8     A7 FA 61 FC | 	wrlong	result1, fp
17dec     14 4E 85 F1 | 	sub	fp, #20
17df0     A7 26 02 FB | 	rdlong	local01, fp
17df4     02 26 66 F0 | 	shl	local01, #2
17df8     50 00 00 FF 
17dfc     C4 E4 05 F1 | 	add	objptr, ##41156
17e00     F2 26 02 F1 | 	add	local01, objptr
17e04     13 FB 61 FC | 	wrlong	result1, local01
17e08                 | '    if 1024*i+j>amount then exit loop
17e08     0C 4E 05 F1 | 	add	fp, #12
17e0c     A7 28 02 FB | 	rdlong	local02, fp
17e10     0A 28 66 F0 | 	shl	local02, #10
17e14     04 4E 05 F1 | 	add	fp, #4
17e18     A7 26 02 FB | 	rdlong	local01, fp
17e1c     13 29 02 F1 | 	add	local02, local01
17e20     0C 4E 85 F1 | 	sub	fp, #12
17e24     A7 2A 02 FB | 	rdlong	local03, fp
17e28     08 4E 85 F1 | 	sub	fp, #8
17e2c     15 29 5A F2 | 	cmps	local02, local03 wcz
17e30     50 00 00 FF 
17e34     C4 E4 85 F1 | 	sub	objptr, ##41156
17e38     18 00 90 1D |  if_a	jmp	#LR__1966
17e3c     10 4E 05 F1 | 	add	fp, #16
17e40     A7 28 02 FB | 	rdlong	local02, fp
17e44     01 28 06 F1 | 	add	local02, #1
17e48     A7 28 62 FC | 	wrlong	local02, fp
17e4c     10 4E 85 F1 | 	sub	fp, #16
17e50     58 FE 9F FD | 	jmp	#LR__1961
17e54                 | LR__1966
17e54                 | LR__1967
17e54     A7 F0 03 F6 | 	mov	ptra, fp
17e58     B2 00 A0 FD | 	call	#popregs_
17e5c                 | _do_put_ret
17e5c     2D 00 64 FD | 	ret
17e60                 | 
17e60                 | ' 
17e60                 | ' '-------------------- rad
17e60                 | ' 
17e60                 | ' sub do_rad
17e60                 | _do_rad
17e60     51 00 00 FF 
17e64     BC E5 05 F1 | 	add	objptr, ##41916
17e68     00 C0 9F FF 
17e6c     F2 00 68 FC | 	wrlong	##1065353216, objptr
17e70     04 E4 05 F1 | 	add	objptr, #4
17e74     00 C0 9F FF 
17e78     F2 00 68 FC | 	wrlong	##1065353216, objptr
17e7c     51 00 00 FF 
17e80     C0 E5 85 F1 | 	sub	objptr, ##41920
17e84                 | _do_rad_ret
17e84     2D 00 64 FD | 	ret
17e88                 | 
17e88                 | ' 
17e88                 | ' '-------------------- rdpin
17e88                 | ' 
17e88                 | ' sub do_rdpin
17e88                 | _do_rdpin
17e88     00 4A 05 F6 | 	mov	COUNT_, #0
17e8c     A8 00 A0 FD | 	call	#pushregs_
17e90     0C F0 07 F1 | 	add	ptra, #12
17e94     F4 4C BF FD | 	call	#_pop
17e98     A7 FA 61 FC | 	wrlong	result1, fp
17e9c     04 4E 05 F1 | 	add	fp, #4
17ea0     A7 FC 61 FC | 	wrlong	result2, fp
17ea4     04 4E 05 F1 | 	add	fp, #4
17ea8     A7 FE 61 FC | 	wrlong	result3, fp
17eac     08 4E 85 F1 | 	sub	fp, #8
17eb0     A7 12 02 F6 | 	mov	arg01, fp
17eb4     B8 4E BF FD | 	call	#_converttoint
17eb8     FD FA 89 FA | 	rdpin	result1, result1
17ebc     52 00 00 FF 
17ec0     20 E4 05 F1 | 	add	objptr, ##42016
17ec4     F2 FA 61 FC | 	wrlong	result1, objptr
17ec8     52 00 00 FF 
17ecc     20 E4 85 F1 | 	sub	objptr, ##42016
17ed0     08 4E 05 F1 | 	add	fp, #8
17ed4     A7 3A 68 FC | 	wrlong	#29, fp
17ed8     08 4E 85 F1 | 	sub	fp, #8
17edc     A7 08 68 FC | 	wrlong	#4, fp
17ee0     A7 12 02 F6 | 	mov	arg01, fp
17ee4     3C 4D BF FD | 	call	#_push
17ee8     A7 F0 03 F6 | 	mov	ptra, fp
17eec     B2 00 A0 FD | 	call	#popregs_
17ef0                 | _do_rdpin_ret
17ef0     2D 00 64 FD | 	ret
17ef4                 | 
17ef4                 | ' 
17ef4                 | ' ' ----------------  read
17ef4                 | ' 
17ef4                 | ' sub do_read
17ef4                 | _do_read
17ef4                 | _do_read_ret
17ef4     2D 00 64 FD | 	ret
17ef8                 | 
17ef8                 | ' 
17ef8                 | ' '------------------- release
17ef8                 | ' 
17ef8                 | ' sub do_release
17ef8                 | _do_release
17ef8     00 4A 05 F6 | 	mov	COUNT_, #0
17efc     A8 00 A0 FD | 	call	#pushregs_
17f00     10 F0 07 F1 | 	add	ptra, #16
17f04     84 4C BF FD | 	call	#_pop
17f08     FF 14 02 F6 | 	mov	arg02, result3
17f0c     A7 FA 61 FC | 	wrlong	result1, fp
17f10     04 4E 05 F1 | 	add	fp, #4
17f14     A7 FC 61 FC | 	wrlong	result2, fp
17f18     04 4E 05 F1 | 	add	fp, #4
17f1c     A7 14 62 FC | 	wrlong	arg02, fp
17f20     08 4E 85 F1 | 	sub	fp, #8
17f24     A7 12 02 F6 | 	mov	arg01, fp
17f28     44 4E BF FD | 	call	#_converttoint
17f2c     0C 4E 05 F1 | 	add	fp, #12
17f30     A7 FA 61 FC | 	wrlong	result1, fp
17f34                 | ' 
17f34                 | ' t1=pop()
17f34                 | ' channel=converttoint(t1)
17f34                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
17f34     0C 4E 85 F1 | 	sub	fp, #12
17f38     00 FA 55 F2 | 	cmps	result1, #0 wc
17f3c     44 00 90 CD |  if_b	jmp	#LR__1970
17f40     0C 4E 05 F1 | 	add	fp, #12
17f44     A7 14 02 FB | 	rdlong	arg02, fp
17f48     0C 4E 85 F1 | 	sub	fp, #12
17f4c     08 14 56 F2 | 	cmps	arg02, #8 wc
17f50     30 00 90 3D |  if_ae	jmp	#LR__1970
17f54     37 00 00 FF 
17f58     10 E4 05 F1 | 	add	objptr, ##28176
17f5c     F2 12 02 FB | 	rdlong	arg01, objptr
17f60     37 00 00 FF 
17f64     10 E4 85 F1 | 	sub	objptr, ##28176
17f68     0C 4E 05 F1 | 	add	fp, #12
17f6c     A7 14 02 FB | 	rdlong	arg02, fp
17f70     0C 4E 85 F1 | 	sub	fp, #12
17f74     06 14 66 F0 | 	shl	arg02, #6
17f78     0A 13 02 F1 | 	add	arg01, arg02
17f7c     2C 12 06 F1 | 	add	arg01, #44
17f80     09 FF 69 FC | 	wrlong	#255, arg01
17f84                 | LR__1970
17f84     A7 F0 03 F6 | 	mov	ptra, fp
17f88     B2 00 A0 FD | 	call	#popregs_
17f8c                 | _do_release_ret
17f8c     2D 00 64 FD | 	ret
17f90                 | 
17f90                 | ' 
17f90                 | ' '------------------- restore
17f90                 | ' 
17f90                 | ' sub do_restore()
17f90                 | _do_restore
17f90                 | _do_restore_ret
17f90     2D 00 64 FD | 	ret
17f94                 | 
17f94                 | ' 
17f94                 | ' '------------------- return
17f94                 | ' 
17f94                 | ' sub do_return()
17f94                 | _do_return
17f94                 | ' if gosubtop>0 then
17f94     50 00 00 FF 
17f98     0C E5 05 F1 | 	add	objptr, ##41228
17f9c     F2 00 02 FB | 	rdlong	_var01, objptr
17fa0     50 00 00 FF 
17fa4     0C E5 85 F1 | 	sub	objptr, ##41228
17fa8     01 00 56 F2 | 	cmps	_var01, #1 wc
17fac     8C 00 90 CD |  if_b	jmp	#LR__1980
17fb0     50 00 00 FF 
17fb4     0C E5 05 F1 | 	add	objptr, ##41228
17fb8     F2 00 02 FB | 	rdlong	_var01, objptr
17fbc     03 00 66 F0 | 	shl	_var01, #3
17fc0     03 00 00 FF 
17fc4     60 E5 85 F1 | 	sub	objptr, ##1888
17fc8     F2 00 02 F1 | 	add	_var01, objptr
17fcc     00 01 02 FB | 	rdlong	_var01, _var01
17fd0     03 00 00 FF 
17fd4     0C E5 05 F1 | 	add	objptr, ##1804
17fd8     F2 00 62 FC | 	wrlong	_var01, objptr
17fdc     54 E4 05 F1 | 	add	objptr, #84
17fe0     F2 00 02 FB | 	rdlong	_var01, objptr
17fe4     03 00 66 F0 | 	shl	_var01, #3
17fe8     03 00 00 FF 
17fec     60 E5 85 F1 | 	sub	objptr, ##1888
17ff0     F2 00 02 F1 | 	add	_var01, objptr
17ff4     04 00 06 F1 | 	add	_var01, #4
17ff8     00 01 02 FB | 	rdlong	_var01, _var01
17ffc     03 00 00 FF 
18000     10 E5 05 F1 | 	add	objptr, ##1808
18004     F2 00 62 FC | 	wrlong	_var01, objptr
18008     06 00 00 FF 
1800c     40 E4 85 F1 | 	sub	objptr, ##3136
18010     F2 00 02 FB | 	rdlong	_var01, objptr
18014     01 00 86 F1 | 	sub	_var01, #1
18018     04 E4 05 F1 | 	add	objptr, #4
1801c     F2 00 62 FC | 	wrlong	_var01, objptr
18020     06 00 00 FF 
18024     8C E4 05 F1 | 	add	objptr, ##3212
18028     F2 00 02 FB | 	rdlong	_var01, objptr
1802c     01 00 86 F1 | 	sub	_var01, #1
18030     F2 00 62 FC | 	wrlong	_var01, objptr
18034     50 00 00 FF 
18038     0C E5 85 F1 | 	sub	objptr, ##41228
1803c                 | LR__1980
1803c                 | _do_return_ret
1803c     2D 00 64 FD | 	ret
18040                 | 
18040                 | ' 
18040                 | ' '------------------- right$
18040                 | ' 
18040                 | ' sub do_right
18040                 | _do_right
18040     00 4A 05 F6 | 	mov	COUNT_, #0
18044     A8 00 A0 FD | 	call	#pushregs_
18048     14 F0 07 F1 | 	add	ptra, #20
1804c     4A 00 00 FF 
18050     80 E4 05 F1 | 	add	objptr, ##38016
18054     F2 16 02 FB | 	rdlong	arg03, objptr
18058     0B 15 02 F6 | 	mov	arg02, arg03
1805c     01 14 66 F0 | 	shl	arg02, #1
18060     0B 15 02 F1 | 	add	arg02, arg03
18064     02 14 66 F0 | 	shl	arg02, #2
18068     03 00 00 FF 
1806c     04 E4 85 F1 | 	sub	objptr, ##1540
18070     F2 14 02 F1 | 	add	arg02, objptr
18074     0A 17 02 FB | 	rdlong	arg03, arg02
18078     0C 4E 05 F1 | 	add	fp, #12
1807c     A7 16 62 FC | 	wrlong	arg03, fp
18080                 | ' 
18080                 | ' numpar=compiledline(lineptr_e).result.uresult
18080                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
18080     0C 4E 85 F1 | 	sub	fp, #12
18084     02 16 0E F2 | 	cmp	arg03, #2 wz
18088     47 00 00 FF 
1808c     7C E4 85 F1 | 	sub	objptr, ##36476
18090     40 00 90 AD |  if_e	jmp	#LR__1990
18094     00 12 06 F6 | 	mov	arg01, #0
18098     A0 1B B1 FD | 	call	#__system___getiolock_0579
1809c     FD 12 02 F6 | 	mov	arg01, result1
180a0     70 BE B0 FD | 	call	#__system___lockmem
180a4     A2 01 00 FF 
180a8     8D 14 06 F6 | 	mov	arg02, ##@LR__5782
180ac     00 12 06 F6 | 	mov	arg01, #0
180b0     00 16 06 F6 | 	mov	arg03, #0
180b4     50 CB B0 FD | 	call	#__system___basic_print_string
180b8     00 12 06 F6 | 	mov	arg01, #0
180bc     7C 1B B1 FD | 	call	#__system___getiolock_0579
180c0     FD 00 68 FC | 	wrlong	#0, result1
180c4     27 12 06 F6 | 	mov	arg01, #39
180c8     00 14 06 F6 | 	mov	arg02, #0
180cc     A0 84 B0 FD | 	call	#_printerror
180d0     EC 00 90 FD | 	jmp	#LR__1993
180d4                 | LR__1990
180d4     B4 4A BF FD | 	call	#_pop
180d8     FF 16 02 F6 | 	mov	arg03, result3
180dc     A7 FA 61 FC | 	wrlong	result1, fp
180e0     04 4E 05 F1 | 	add	fp, #4
180e4     A7 FC 61 FC | 	wrlong	result2, fp
180e8     04 4E 05 F1 | 	add	fp, #4
180ec     A7 16 62 FC | 	wrlong	arg03, fp
180f0     08 4E 85 F1 | 	sub	fp, #8
180f4     A7 12 02 F6 | 	mov	arg01, fp
180f8     74 4C BF FD | 	call	#_converttoint
180fc     FD 16 02 F6 | 	mov	arg03, result1
18100     10 4E 05 F1 | 	add	fp, #16
18104     A7 16 62 FC | 	wrlong	arg03, fp
18108     10 4E 85 F1 | 	sub	fp, #16
1810c     7C 4A BF FD | 	call	#_pop
18110     FF 16 02 F6 | 	mov	arg03, result3
18114     A7 FA 61 FC | 	wrlong	result1, fp
18118     04 4E 05 F1 | 	add	fp, #4
1811c     A7 FC 61 FC | 	wrlong	result2, fp
18120     04 4E 05 F1 | 	add	fp, #4
18124     A7 16 62 FC | 	wrlong	arg03, fp
18128                 | ' t1=pop() : arg=converttoint(t1)
18128                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
18128     08 4E 85 F1 | 	sub	fp, #8
1812c     2B 16 0E F2 | 	cmp	arg03, #43 wz
18130     18 00 90 5D |  if_ne	jmp	#LR__1991
18134     A7 12 02 FB | 	rdlong	arg01, fp
18138     C8 4B BF FD | 	call	#_convertstring
1813c     A7 FA 61 FC | 	wrlong	result1, fp
18140     08 4E 05 F1 | 	add	fp, #8
18144     A7 3E 68 FC | 	wrlong	#31, fp
18148     08 4E 85 F1 | 	sub	fp, #8
1814c                 | LR__1991
1814c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1814c     08 4E 05 F1 | 	add	fp, #8
18150     A7 16 02 FB | 	rdlong	arg03, fp
18154     08 4E 85 F1 | 	sub	fp, #8
18158     1F 16 0E F2 | 	cmp	arg03, #31 wz
1815c     40 00 90 AD |  if_e	jmp	#LR__1992
18160     00 12 06 F6 | 	mov	arg01, #0
18164     D4 1A B1 FD | 	call	#__system___getiolock_0579
18168     FD 12 02 F6 | 	mov	arg01, result1
1816c     A4 BD B0 FD | 	call	#__system___lockmem
18170     A2 01 00 FF 
18174     96 14 06 F6 | 	mov	arg02, ##@LR__5783
18178     00 12 06 F6 | 	mov	arg01, #0
1817c     00 16 06 F6 | 	mov	arg03, #0
18180     84 CA B0 FD | 	call	#__system___basic_print_string
18184     00 12 06 F6 | 	mov	arg01, #0
18188     B0 1A B1 FD | 	call	#__system___getiolock_0579
1818c     FD 00 68 FC | 	wrlong	#0, result1
18190     0F 12 06 F6 | 	mov	arg01, #15
18194     00 14 06 F6 | 	mov	arg02, #0
18198     D4 83 B0 FD | 	call	#_printerror
1819c     20 00 90 FD | 	jmp	#LR__1993
181a0                 | LR__1992
181a0     A7 12 02 FB | 	rdlong	arg01, fp
181a4     10 4E 05 F1 | 	add	fp, #16
181a8     A7 14 02 FB | 	rdlong	arg02, fp
181ac     10 4E 85 F1 | 	sub	fp, #16
181b0     64 DE B0 FD | 	call	#__system__Right_S
181b4     A7 FA 61 FC | 	wrlong	result1, fp
181b8     A7 12 02 F6 | 	mov	arg01, fp
181bc     64 4A BF FD | 	call	#_push
181c0                 | LR__1993
181c0     A7 F0 03 F6 | 	mov	ptra, fp
181c4     B2 00 A0 FD | 	call	#popregs_
181c8                 | _do_right_ret
181c8     2D 00 64 FD | 	ret
181cc                 | 
181cc                 | ' 
181cc                 | ' '------------------- rnd
181cc                 | ' 
181cc                 | ' sub do_rnd
181cc                 | _do_rnd
181cc     01 4A 05 F6 | 	mov	COUNT_, #1
181d0     A8 00 A0 FD | 	call	#pushregs_
181d4     10 F0 07 F1 | 	add	ptra, #16
181d8     4A 00 00 FF 
181dc     80 E4 05 F1 | 	add	objptr, ##38016
181e0     F2 26 02 FB | 	rdlong	local01, objptr
181e4     13 17 02 F6 | 	mov	arg03, local01
181e8     01 16 66 F0 | 	shl	arg03, #1
181ec     13 17 02 F1 | 	add	arg03, local01
181f0     02 16 66 F0 | 	shl	arg03, #2
181f4     03 00 00 FF 
181f8     04 E4 85 F1 | 	sub	objptr, ##1540
181fc     F2 16 02 F1 | 	add	arg03, objptr
18200     0B 17 02 FB | 	rdlong	arg03, arg03
18204     0C 4E 05 F1 | 	add	fp, #12
18208     A7 16 62 FC | 	wrlong	arg03, fp
1820c                 | ' 
1820c                 | ' numpar=compiledline(lineptr_e).result.uresult
1820c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1820c     0C 4E 85 F1 | 	sub	fp, #12
18210     02 16 16 F2 | 	cmp	arg03, #2 wc
18214     47 00 00 FF 
18218     7C E4 85 F1 | 	sub	objptr, ##36476
1821c     40 00 90 CD |  if_b	jmp	#LR__2000
18220     00 12 06 F6 | 	mov	arg01, #0
18224     14 1A B1 FD | 	call	#__system___getiolock_0579
18228     FD 12 02 F6 | 	mov	arg01, result1
1822c     E4 BC B0 FD | 	call	#__system___lockmem
18230     A2 01 00 FF 
18234     9F 14 06 F6 | 	mov	arg02, ##@LR__5784
18238     00 12 06 F6 | 	mov	arg01, #0
1823c     00 16 06 F6 | 	mov	arg03, #0
18240     C4 C9 B0 FD | 	call	#__system___basic_print_string
18244     00 12 06 F6 | 	mov	arg01, #0
18248     F0 19 B1 FD | 	call	#__system___getiolock_0579
1824c     FD 00 68 FC | 	wrlong	#0, result1
18250     27 12 06 F6 | 	mov	arg01, #39
18254     00 14 06 F6 | 	mov	arg02, #0
18258     14 83 B0 FD | 	call	#_printerror
1825c     30 01 90 FD | 	jmp	#LR__2007
18260                 | LR__2000
18260                 | ' if numpar=0 then
18260     0C 4E 05 F1 | 	add	fp, #12
18264     A7 FE 09 FB | 	rdlong	result3, fp wz
18268     0C 4E 85 F1 | 	sub	fp, #12
1826c     20 00 90 5D |  if_ne	jmp	#LR__2001
18270     08 4E 05 F1 | 	add	fp, #8
18274     A7 3A 68 FC | 	wrlong	#29, fp
18278     08 4E 85 F1 | 	sub	fp, #8
1827c     1B FA 61 FD | 	getrnd	result1
18280     A7 FA 61 FC | 	wrlong	result1, fp
18284     A7 12 02 F6 | 	mov	arg01, fp
18288     98 49 BF FD | 	call	#_push
1828c     00 01 90 FD | 	jmp	#LR__2006
18290                 | LR__2001
18290     F8 48 BF FD | 	call	#_pop
18294     A7 FA 61 FC | 	wrlong	result1, fp
18298     04 4E 05 F1 | 	add	fp, #4
1829c     A7 FC 61 FC | 	wrlong	result2, fp
182a0     04 4E 05 F1 | 	add	fp, #4
182a4     A7 FE 61 FC | 	wrlong	result3, fp
182a8                 | '   t1=pop()
182a8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
182a8     08 4E 85 F1 | 	sub	fp, #8
182ac     1C FE 0D F2 | 	cmp	result3, #28 wz
182b0     08 4E 05 51 |  if_ne	add	fp, #8
182b4     A7 26 02 5B |  if_ne	rdlong	local01, fp
182b8     08 4E 85 51 |  if_ne	sub	fp, #8
182bc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
182c0     2C 00 90 5D |  if_ne	jmp	#LR__2002
182c4     1B FA 61 FD | 	getrnd	result1
182c8     A7 26 02 FB | 	rdlong	local01, fp
182cc     13 FB 11 FD | 	qdiv	result1, local01
182d0     A7 12 02 F6 | 	mov	arg01, fp
182d4     19 26 62 FD | 	getqy	local01
182d8     A7 26 62 FC | 	wrlong	local01, fp
182dc     08 4E 05 F1 | 	add	fp, #8
182e0     A7 3A 68 FC | 	wrlong	#29, fp
182e4     08 4E 85 F1 | 	sub	fp, #8
182e8     38 49 BF FD | 	call	#_push
182ec     A0 00 90 FD | 	jmp	#LR__2005
182f0                 | LR__2002
182f0     08 4E 05 F1 | 	add	fp, #8
182f4     A7 26 02 FB | 	rdlong	local01, fp
182f8     08 4E 85 F1 | 	sub	fp, #8
182fc     1E 26 0E F2 | 	cmp	local01, #30 wz
18300     48 00 90 5D |  if_ne	jmp	#LR__2003
18304     A7 12 02 FB | 	rdlong	arg01, fp
18308     00 C0 24 FF 
1830c     00 14 06 F6 | 	mov	arg02, ##1233125376
18310     7C EC B0 FD | 	call	#__system___float_div
18314     FD 26 02 F6 | 	mov	local01, result1
18318     1B 12 62 FD | 	getrnd	arg01
1831c     74 13 06 F4 | 	bitl	arg01, #372
18320     64 E6 B0 FD | 	call	#__system___float_fromuns
18324     FD 14 02 F6 | 	mov	arg02, result1
18328     13 13 02 F6 | 	mov	arg01, local01
1832c     5C EA B0 FD | 	call	#__system___float_mul
18330     A7 FA 61 FC | 	wrlong	result1, fp
18334     08 4E 05 F1 | 	add	fp, #8
18338     A7 3C 68 FC | 	wrlong	#30, fp
1833c     08 4E 85 F1 | 	sub	fp, #8
18340     A7 12 02 F6 | 	mov	arg01, fp
18344     DC 48 BF FD | 	call	#_push
18348     44 00 90 FD | 	jmp	#LR__2004
1834c                 | LR__2003
1834c                 | '     print "rnd: "; : printerror(40) 
1834c     00 12 06 F6 | 	mov	arg01, #0
18350     E8 18 B1 FD | 	call	#__system___getiolock_0579
18354     FD 12 02 F6 | 	mov	arg01, result1
18358     B8 BB B0 FD | 	call	#__system___lockmem
1835c     A2 01 00 FF 
18360     A5 14 06 F6 | 	mov	arg02, ##@LR__5785
18364     00 12 06 F6 | 	mov	arg01, #0
18368     00 16 06 F6 | 	mov	arg03, #0
1836c     98 C8 B0 FD | 	call	#__system___basic_print_string
18370     00 12 06 F6 | 	mov	arg01, #0
18374     C4 18 B1 FD | 	call	#__system___getiolock_0579
18378     FD 00 68 FC | 	wrlong	#0, result1
1837c     28 12 06 F6 | 	mov	arg01, #40
18380     00 14 06 F6 | 	mov	arg02, #0
18384     E8 81 B0 FD | 	call	#_printerror
18388     A7 12 02 F6 | 	mov	arg01, fp
1838c     94 48 BF FD | 	call	#_push
18390                 | LR__2004
18390                 | LR__2005
18390                 | LR__2006
18390                 | LR__2007
18390     A7 F0 03 F6 | 	mov	ptra, fp
18394     B2 00 A0 FD | 	call	#popregs_
18398                 | _do_rnd_ret
18398     2D 00 64 FD | 	ret
1839c                 | 
1839c                 | ' 
1839c                 | ' '-------------------- round
1839c                 | ' 
1839c                 | ' sub do_round
1839c                 | _do_round
1839c     00 4A 05 F6 | 	mov	COUNT_, #0
183a0     A8 00 A0 FD | 	call	#pushregs_
183a4     0C F0 07 F1 | 	add	ptra, #12
183a8     E0 47 BF FD | 	call	#_pop
183ac     A7 FA 61 FC | 	wrlong	result1, fp
183b0     04 4E 05 F1 | 	add	fp, #4
183b4     A7 FC 61 FC | 	wrlong	result2, fp
183b8     04 4E 05 F1 | 	add	fp, #4
183bc     A7 FE 61 FC | 	wrlong	result3, fp
183c0     08 4E 85 F1 | 	sub	fp, #8
183c4     A7 12 02 F6 | 	mov	arg01, fp
183c8     A4 49 BF FD | 	call	#_converttoint
183cc     A7 FA 61 FC | 	wrlong	result1, fp
183d0     08 4E 05 F1 | 	add	fp, #8
183d4     A7 38 68 FC | 	wrlong	#28, fp
183d8     08 4E 85 F1 | 	sub	fp, #8
183dc     A7 12 02 F6 | 	mov	arg01, fp
183e0     40 48 BF FD | 	call	#_push
183e4     A7 F0 03 F6 | 	mov	ptra, fp
183e8     B2 00 A0 FD | 	call	#popregs_
183ec                 | _do_round_ret
183ec     2D 00 64 FD | 	ret
183f0                 | 
183f0                 | ' 
183f0                 | ' '-------------------- rqpin
183f0                 | ' 
183f0                 | ' sub do_rqpin
183f0                 | _do_rqpin
183f0     00 4A 05 F6 | 	mov	COUNT_, #0
183f4     A8 00 A0 FD | 	call	#pushregs_
183f8     0C F0 07 F1 | 	add	ptra, #12
183fc     8C 47 BF FD | 	call	#_pop
18400     A7 FA 61 FC | 	wrlong	result1, fp
18404     04 4E 05 F1 | 	add	fp, #4
18408     A7 FC 61 FC | 	wrlong	result2, fp
1840c     04 4E 05 F1 | 	add	fp, #4
18410     A7 FE 61 FC | 	wrlong	result3, fp
18414     08 4E 85 F1 | 	sub	fp, #8
18418     A7 12 02 F6 | 	mov	arg01, fp
1841c     50 49 BF FD | 	call	#_converttoint
18420     FD 12 02 F6 | 	mov	arg01, result1
18424     00 FA 05 F6 | 	mov	result1, #0
18428     09 FB 81 FA | 	rqpin	result1, arg01
1842c     52 00 00 FF 
18430     20 E4 05 F1 | 	add	objptr, ##42016
18434     F2 FA 61 FC | 	wrlong	result1, objptr
18438     52 00 00 FF 
1843c     20 E4 85 F1 | 	sub	objptr, ##42016
18440     08 4E 05 F1 | 	add	fp, #8
18444     A7 3A 68 FC | 	wrlong	#29, fp
18448     08 4E 85 F1 | 	sub	fp, #8
1844c     A7 08 68 FC | 	wrlong	#4, fp
18450     A7 12 02 F6 | 	mov	arg01, fp
18454     CC 47 BF FD | 	call	#_push
18458     A7 F0 03 F6 | 	mov	ptra, fp
1845c     B2 00 A0 FD | 	call	#popregs_
18460                 | _do_rqpin_ret
18460     2D 00 64 FD | 	ret
18464                 | 
18464                 | ' 
18464                 | ' ' ------------------ run
18464                 | ' 
18464                 | ' sub do_run
18464                 | _do_run
18464     04 4A 05 F6 | 	mov	COUNT_, #4
18468     A8 00 A0 FD | 	call	#pushregs_
1846c     4A 00 00 FF 
18470     80 E4 05 F1 | 	add	objptr, ##38016
18474     F2 26 02 FB | 	rdlong	local01, objptr
18478     06 00 00 FF 
1847c     38 E4 05 F1 | 	add	objptr, ##3128
18480     F2 28 02 FB | 	rdlong	local02, objptr
18484     04 E4 05 F1 | 	add	objptr, #4
18488     F2 2A 02 FB | 	rdlong	local03, objptr
1848c     13 19 02 F6 | 	mov	arg04, local01
18490     0C 17 02 F6 | 	mov	arg03, arg04
18494     01 16 66 F0 | 	shl	arg03, #1
18498     0C 17 02 F1 | 	add	arg03, arg04
1849c     02 16 66 F0 | 	shl	arg03, #2
184a0     09 00 00 FF 
184a4     40 E4 85 F1 | 	sub	objptr, ##4672
184a8     F2 16 02 F1 | 	add	arg03, objptr
184ac     0B 15 02 FB | 	rdlong	arg02, arg03
184b0                 | ' 
184b0                 | ' r_lineptr_e=lineptr_e
184b0                 | ' r_runptr=runptr
184b0                 | ' r_runptr2=runptr2
184b0                 | ' 
184b0                 | ' numpar=compiledline(lineptr_e).result.uresult
184b0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
184b0     01 14 0E F2 | 	cmp	arg02, #1 wz
184b4     47 00 00 FF 
184b8     7C E4 85 F1 | 	sub	objptr, ##36476
184bc     00 12 06 A6 |  if_e	mov	arg01, #0
184c0     54 C1 BF AD |  if_e	call	#_do_load
184c4     4A 00 00 FF 
184c8     88 E4 05 F1 | 	add	objptr, ##38024
184cc     F2 18 02 FB | 	rdlong	arg04, objptr
184d0     06 00 00 FF 
184d4     30 E4 05 F1 | 	add	objptr, ##3120
184d8     F2 18 62 FC | 	wrlong	arg04, objptr
184dc     04 E4 05 F1 | 	add	objptr, #4
184e0     F2 00 68 FC | 	wrlong	#0, objptr
184e4     04 E4 05 F1 | 	add	objptr, #4
184e8     FF FF FF FF 
184ec     F2 FE 6B FC | 	wrlong	##-1, objptr
184f0                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
184f0                 | ' if inrun>0 then 
184f0     2C E4 05 F1 | 	add	objptr, #44
184f4     F2 18 02 FB | 	rdlong	arg04, objptr
184f8     50 00 00 FF 
184fc     EC E4 85 F1 | 	sub	objptr, ##41196
18500     01 18 16 F2 | 	cmp	arg04, #1 wc
18504     30 00 90 CD |  if_b	jmp	#LR__2010
18508     50 00 00 FF 
1850c     F0 E4 05 F1 | 	add	objptr, ##41200
18510     F2 12 02 F6 | 	mov	arg01, objptr
18514     38 E4 85 F1 | 	sub	objptr, #56
18518     F2 14 02 FB | 	rdlong	arg02, objptr
1851c     18 16 06 F6 | 	mov	arg03, #24
18520     44 00 00 FF 
18524     EC E5 85 F1 | 	sub	objptr, ##35308
18528     A8 AD B0 FD | 	call	#_psram_spin2_read1
1852c     0B 00 00 FF 
18530     CC E4 85 F1 | 	sub	objptr, ##5836
18534                 | '   psram.read1(varptr(runheader),runptr,24)  
18534                 | '   return
18534     0C 03 90 FD | 	jmp	#LR__2017
18538                 | LR__2010
18538     50 00 00 FF 
1853c     EC E4 05 F1 | 	add	objptr, ##41196
18540     F2 02 68 FC | 	wrlong	#1, objptr
18544     04 E4 05 F1 | 	add	objptr, #4
18548     F2 12 02 F6 | 	mov	arg01, objptr
1854c     38 E4 85 F1 | 	sub	objptr, #56
18550     F2 14 02 FB | 	rdlong	arg02, objptr
18554     18 16 06 F6 | 	mov	arg03, #24
18558     44 00 00 FF 
1855c     EC E5 85 F1 | 	sub	objptr, ##35308
18560     70 AD B0 FD | 	call	#_psram_spin2_read1
18564                 | ' inrun=1
18564                 | ' psram.read1(varptr(runheader),runptr,24) 
18564                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
18564     45 00 00 FF 
18568     24 E4 05 F1 | 	add	objptr, ##35364
1856c     F2 2C 02 FB | 	rdlong	local04, objptr
18570     50 00 00 FF 
18574     F0 E4 85 F1 | 	sub	objptr, ##41200
18578     FF FF 7F FF 
1857c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
18580     50 00 00 AF 
18584     EC E4 05 A1 |  if_e	add	objptr, ##41196
18588     F2 00 68 AC |  if_e	wrlong	#0, objptr
1858c     50 00 00 AF 
18590     EC E4 85 A1 |  if_e	sub	objptr, ##41196
18594     AC 02 90 AD |  if_e	jmp	#LR__2017
18598                 | ' do 
18598                 | LR__2011
18598                 | '   if runptr<>oldrunptr then
18598     50 00 00 FF 
1859c     B8 E4 05 F1 | 	add	objptr, ##41144
185a0     F2 2C 02 FB | 	rdlong	local04, objptr
185a4     08 E4 05 F1 | 	add	objptr, #8
185a8     F2 18 02 FB | 	rdlong	arg04, objptr
185ac     50 00 00 FF 
185b0     C0 E4 85 F1 | 	sub	objptr, ##41152
185b4     0C 2D 0A F2 | 	cmp	local04, arg04 wz
185b8     CC 00 90 AD |  if_e	jmp	#LR__2012
185bc     50 00 00 FF 
185c0     F0 E4 05 F1 | 	add	objptr, ##41200
185c4     F2 12 02 F6 | 	mov	arg01, objptr
185c8     38 E4 85 F1 | 	sub	objptr, #56
185cc     F2 14 02 FB | 	rdlong	arg02, objptr
185d0     18 16 06 F6 | 	mov	arg03, #24
185d4     44 00 00 FF 
185d8     EC E5 85 F1 | 	sub	objptr, ##35308
185dc     F4 AC B0 FD | 	call	#_psram_spin2_read1
185e0     3B 00 00 FF 
185e4     B0 E5 05 F1 | 	add	objptr, ##30640
185e8     F2 12 02 F6 | 	mov	arg01, objptr
185ec     09 00 00 FF 
185f0     3C E4 05 F1 | 	add	objptr, ##4668
185f4     F2 14 02 FB | 	rdlong	arg02, objptr
185f8     0B 00 00 FF 
185fc     54 E4 85 F1 | 	sub	objptr, ##5716
18600     F2 2C 02 FB | 	rdlong	local04, objptr
18604     01 2C 66 F0 | 	shl	local04, #1
18608     16 15 02 F1 | 	add	arg02, local04
1860c     0B 00 00 FF 
18610     94 E4 05 F1 | 	add	objptr, ##5780
18614     F2 16 02 FB | 	rdlong	arg03, objptr
18618     40 E4 85 F1 | 	sub	objptr, #64
1861c     F2 2C 02 FB | 	rdlong	local04, objptr
18620     16 17 82 F1 | 	sub	arg03, local04
18624     44 00 00 FF 
18628     EC E5 85 F1 | 	sub	objptr, ##35308
1862c     A4 AC B0 FD | 	call	#_psram_spin2_read1
18630     45 00 00 FF 
18634     2C E4 05 F1 | 	add	objptr, ##35372
18638     F2 2C 02 FB | 	rdlong	local04, objptr
1863c     40 E4 85 F1 | 	sub	objptr, #64
18640     F2 14 02 FB | 	rdlong	arg02, objptr
18644     0A 2D 82 F1 | 	sub	local04, arg02
18648     0B 00 00 FF 
1864c     54 E4 85 F1 | 	sub	objptr, ##5716
18650     F2 14 02 FB | 	rdlong	arg02, objptr
18654     0A 2D 12 FD | 	qdiv	local04, arg02
18658     05 00 00 FF 
1865c     18 E4 05 F1 | 	add	objptr, ##2584
18660     18 2C 62 FD | 	getqx	local04
18664     03 2C 86 F1 | 	sub	local04, #3
18668     F2 2C 62 FC | 	wrlong	local04, objptr
1866c     06 00 00 FF 
18670     3C E4 05 F1 | 	add	objptr, ##3132
18674     F2 2C 02 FB | 	rdlong	local04, objptr
18678     08 E4 05 F1 | 	add	objptr, #8
1867c     F2 2C 62 FC | 	wrlong	local04, objptr
18680     50 00 00 FF 
18684     C0 E4 85 F1 | 	sub	objptr, ##41152
18688                 | LR__2012
18688     50 00 00 FF 
1868c     04 E5 05 F1 | 	add	objptr, ##41220
18690     F2 2C 02 FB | 	rdlong	local04, objptr
18694     4C E4 85 F1 | 	sub	objptr, #76
18698     F2 2C 62 FC | 	wrlong	local04, objptr
1869c     04 E4 05 F1 | 	add	objptr, #4
186a0     F2 12 02 FB | 	rdlong	arg01, objptr
186a4     50 00 00 FF 
186a8     BC E4 85 F1 | 	sub	objptr, ##41148
186ac     D8 43 BF FD | 	call	#_execute_line
186b0     50 00 00 FF 
186b4     BC E4 05 F1 | 	add	objptr, ##41148
186b8     F2 FA 61 FC | 	wrlong	result1, objptr
186bc     04 E4 85 F1 | 	sub	objptr, #4
186c0     F2 2C 02 FB | 	rdlong	local04, objptr
186c4     50 00 00 FF 
186c8     B8 E4 85 F1 | 	sub	objptr, ##41144
186cc     FF FF 3F FF 
186d0     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
186d4     4C 00 90 AD |  if_e	jmp	#LR__2015
186d8     E0 12 06 F6 | 	mov	arg01, #224
186dc     84 AF B0 FD | 	call	#_usbnew_spin2_keystate
186e0     00 FA 0D F2 | 	cmp	result1, #0 wz
186e4     10 00 90 5D |  if_ne	jmp	#LR__2013
186e8     E4 12 06 F6 | 	mov	arg01, #228
186ec     74 AF B0 FD | 	call	#_usbnew_spin2_keystate
186f0     00 FA 0D F2 | 	cmp	result1, #0 wz
186f4     10 00 90 AD |  if_e	jmp	#LR__2014
186f8                 | LR__2013
186f8     06 12 06 F6 | 	mov	arg01, #6
186fc     64 AF B0 FD | 	call	#_usbnew_spin2_keystate
18700     00 FA 0D F2 | 	cmp	result1, #0 wz
18704     1C 00 90 5D |  if_ne	jmp	#LR__2015
18708                 | LR__2014
18708     50 00 00 FF 
1870c     EC E4 05 F1 | 	add	objptr, ##41196
18710     F2 2C 02 FB | 	rdlong	local04, objptr
18714     50 00 00 FF 
18718     EC E4 85 F1 | 	sub	objptr, ##41196
1871c     02 2C 0E F2 | 	cmp	local04, #2 wz
18720     74 FE 9F 5D |  if_ne	jmp	#LR__2011
18724                 | LR__2015
18724                 | '   ''do whatever kbm.peek_latest_key()=$106 
18724                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
18724     50 00 00 FF 
18728     B8 E4 05 F1 | 	add	objptr, ##41144
1872c     F2 2C 02 FB | 	rdlong	local04, objptr
18730     50 00 00 FF 
18734     B8 E4 85 F1 | 	sub	objptr, ##41144
18738     FF FF 3F FF 
1873c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
18740     AC 00 90 AD |  if_e	jmp	#LR__2016
18744     50 00 00 FF 
18748     EC E4 05 F1 | 	add	objptr, ##41196
1874c     F2 2C 02 FB | 	rdlong	local04, objptr
18750     50 00 00 FF 
18754     EC E4 85 F1 | 	sub	objptr, ##41196
18758     01 2C 0E F2 | 	cmp	local04, #1 wz
1875c     90 00 90 5D |  if_ne	jmp	#LR__2016
18760                 | '   print: print "Stopped at line ";runheader(0) 
18760     00 12 06 F6 | 	mov	arg01, #0
18764     D4 14 B1 FD | 	call	#__system___getiolock_0579
18768     FD 12 02 F6 | 	mov	arg01, result1
1876c     A4 B7 B0 FD | 	call	#__system___lockmem
18770     00 12 06 F6 | 	mov	arg01, #0
18774     0A 14 06 F6 | 	mov	arg02, #10
18778     00 16 06 F6 | 	mov	arg03, #0
1877c     30 C4 B0 FD | 	call	#__system___basic_print_char
18780     00 12 06 F6 | 	mov	arg01, #0
18784     B4 14 B1 FD | 	call	#__system___getiolock_0579
18788     FD 00 68 FC | 	wrlong	#0, result1
1878c     00 12 06 F6 | 	mov	arg01, #0
18790     A8 14 B1 FD | 	call	#__system___getiolock_0579
18794     FD 12 02 F6 | 	mov	arg01, result1
18798     78 B7 B0 FD | 	call	#__system___lockmem
1879c     A2 01 00 FF 
187a0     AB 14 06 F6 | 	mov	arg02, ##@LR__5786
187a4     00 12 06 F6 | 	mov	arg01, #0
187a8     00 16 06 F6 | 	mov	arg03, #0
187ac     58 C4 B0 FD | 	call	#__system___basic_print_string
187b0     50 00 00 FF 
187b4     F0 E4 05 F1 | 	add	objptr, ##41200
187b8     F2 14 02 FB | 	rdlong	arg02, objptr
187bc     50 00 00 FF 
187c0     F0 E4 85 F1 | 	sub	objptr, ##41200
187c4     00 12 06 F6 | 	mov	arg01, #0
187c8     00 16 06 F6 | 	mov	arg03, #0
187cc     0A 18 06 F6 | 	mov	arg04, #10
187d0     B8 C4 B0 FD | 	call	#__system___basic_print_unsigned
187d4     00 12 06 F6 | 	mov	arg01, #0
187d8     0A 14 06 F6 | 	mov	arg02, #10
187dc     00 16 06 F6 | 	mov	arg03, #0
187e0     CC C3 B0 FD | 	call	#__system___basic_print_char
187e4     00 12 06 F6 | 	mov	arg01, #0
187e8     50 14 B1 FD | 	call	#__system___getiolock_0579
187ec     FD 00 68 FC | 	wrlong	#0, result1
187f0                 | LR__2016
187f0     50 00 00 FF 
187f4     EC E4 05 F1 | 	add	objptr, ##41196
187f8     F2 00 68 FC | 	wrlong	#0, objptr
187fc     06 00 00 FF 
18800     6C E4 85 F1 | 	sub	objptr, ##3180
18804     F2 26 62 FC | 	wrlong	local01, objptr
18808     06 00 00 FF 
1880c     38 E4 05 F1 | 	add	objptr, ##3128
18810     F2 28 62 FC | 	wrlong	local02, objptr
18814     04 E4 05 F1 | 	add	objptr, #4
18818     F2 2A 62 FC | 	wrlong	local03, objptr
1881c     50 00 00 FF 
18820     BC E4 85 F1 | 	sub	objptr, ##41148
18824     11 12 06 F6 | 	mov	arg01, #17
18828     08 14 06 F6 | 	mov	arg02, #8
1882c     10 16 06 F6 | 	mov	arg03, #16
18830     84 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
18834     10 12 06 F6 | 	mov	arg01, #16
18838     20 14 06 F6 | 	mov	arg02, #32
1883c     20 16 06 F6 | 	mov	arg03, #32
18840     74 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
18844                 | LR__2017
18844     A7 F0 03 F6 | 	mov	ptra, fp
18848     B2 00 A0 FD | 	call	#popregs_
1884c                 | _do_run_ret
1884c     2D 00 64 FD | 	ret
18850                 | 
18850                 | ' 
18850                 | ' ' ------------------ save
18850                 | ' 
18850                 | ' sub do_save                        
18850                 | _do_save
18850     04 4A 05 F6 | 	mov	COUNT_, #4
18854     A8 00 A0 FD | 	call	#pushregs_
18858     B8 F0 07 F1 | 	add	ptra, #184
1885c     4A 00 00 FF 
18860     80 E4 05 F1 | 	add	objptr, ##38016
18864     F2 26 02 FB | 	rdlong	local01, objptr
18868     13 29 02 F6 | 	mov	local02, local01
1886c     01 28 66 F0 | 	shl	local02, #1
18870     13 29 02 F1 | 	add	local02, local01
18874     02 28 66 F0 | 	shl	local02, #2
18878     03 00 00 FF 
1887c     04 E4 85 F1 | 	sub	objptr, ##1540
18880     F2 28 02 F1 | 	add	local02, objptr
18884     14 2B 02 FB | 	rdlong	local03, local02
18888     10 4E 05 F1 | 	add	fp, #16
1888c     A7 2A 62 FC | 	wrlong	local03, fp
18890                 | ' 
18890                 | ' numpar=compiledline(lineptr_e).result.uresult
18890                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
18890     10 4E 85 F1 | 	sub	fp, #16
18894     01 2A 56 F2 | 	cmps	local03, #1 wc
18898     47 00 00 FF 
1889c     7C E4 85 F1 | 	sub	objptr, ##36476
188a0     20 00 90 CD |  if_b	jmp	#LR__2020
188a4     E4 42 BF FD | 	call	#_pop
188a8     A7 FA 61 FC | 	wrlong	result1, fp
188ac     04 4E 05 F1 | 	add	fp, #4
188b0     A7 FC 61 FC | 	wrlong	result2, fp
188b4     04 4E 05 F1 | 	add	fp, #4
188b8     A7 FE 61 FC | 	wrlong	result3, fp
188bc     08 4E 85 F1 | 	sub	fp, #8
188c0     24 00 90 FD | 	jmp	#LR__2021
188c4                 | LR__2020
188c4     51 00 00 FF 
188c8     D8 E5 05 F1 | 	add	objptr, ##41944
188cc     F2 2A 02 FB | 	rdlong	local03, objptr
188d0     51 00 00 FF 
188d4     D8 E5 85 F1 | 	sub	objptr, ##41944
188d8     A7 2A 62 FC | 	wrlong	local03, fp
188dc     08 4E 05 F1 | 	add	fp, #8
188e0     A7 3E 68 FC | 	wrlong	#31, fp
188e4     08 4E 85 F1 | 	sub	fp, #8
188e8                 | LR__2021
188e8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
188e8     4A 00 00 FF 
188ec     88 E4 05 F1 | 	add	objptr, ##38024
188f0     F2 12 02 FB | 	rdlong	arg01, objptr
188f4     4A 00 00 FF 
188f8     88 E4 85 F1 | 	sub	objptr, ##38024
188fc     40 7F B0 FD | 	call	#_pslpeek
18900     FF FF 7F FF 
18904     FF FB 0D F2 | 	cmp	result1, ##-1 wz
18908     10 00 90 5D |  if_ne	jmp	#LR__2022
1890c     1B 12 06 F6 | 	mov	arg01, #27
18910     00 14 06 F6 | 	mov	arg02, #0
18914     58 7C B0 FD | 	call	#_printerror
18918     CC 02 90 FD | 	jmp	#LR__2028
1891c                 | LR__2022
1891c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1891c     08 4E 05 F1 | 	add	fp, #8
18920     A7 2A 02 FB | 	rdlong	local03, fp
18924     08 4E 85 F1 | 	sub	fp, #8
18928     2B 2A 0E F2 | 	cmp	local03, #43 wz
1892c     18 00 90 5D |  if_ne	jmp	#LR__2023
18930     A7 12 02 FB | 	rdlong	arg01, fp
18934     CC 43 BF FD | 	call	#_convertstring
18938     A7 FA 61 FC | 	wrlong	result1, fp
1893c     08 4E 05 F1 | 	add	fp, #8
18940     A7 3E 68 FC | 	wrlong	#31, fp
18944     08 4E 85 F1 | 	sub	fp, #8
18948                 | LR__2023
18948                 | ' if t1.result_type=result_string then
18948     08 4E 05 F1 | 	add	fp, #8
1894c     A7 2A 02 FB | 	rdlong	local03, fp
18950     08 4E 85 F1 | 	sub	fp, #8
18954     1F 2A 0E F2 | 	cmp	local03, #31 wz
18958     8C 02 90 5D |  if_ne	jmp	#LR__2027
1895c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1895c     A7 12 02 FB | 	rdlong	arg01, fp
18960     A2 01 00 FF 
18964     BC 14 06 F6 | 	mov	arg02, ##@LR__5787
18968     D0 B5 B0 FD | 	call	#__system___string_cmp
1896c     00 FA 0D F2 | 	cmp	result1, #0 wz
18970     51 00 00 AF 
18974     D8 E5 05 A1 |  if_e	add	objptr, ##41944
18978     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1897c     A7 2A 62 AC |  if_e	wrlong	local03, fp
18980     51 00 00 AF 
18984     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
18988     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1898c     51 00 00 5F 
18990     D8 E5 05 51 |  if_ne	add	objptr, ##41944
18994     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
18998     51 00 00 5F 
1899c     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
189a0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
189a0     09 12 06 F6 | 	mov	arg01, #9
189a4     C4 08 B1 FD | 	call	#__system__close
189a8     09 2A 06 F6 | 	mov	local03, #9
189ac     4A 00 00 FF 
189b0     94 E4 05 F1 | 	add	objptr, ##38036
189b4     F2 12 02 FB | 	rdlong	arg01, objptr
189b8     4A 00 00 FF 
189bc     94 E4 85 F1 | 	sub	objptr, ##38036
189c0     A2 01 00 FF 
189c4     BD 14 06 F6 | 	mov	arg02, ##@LR__5788
189c8     A4 B5 B0 FD | 	call	#__system___string_concat
189cc     FD 12 02 F6 | 	mov	arg01, result1
189d0     A7 14 02 FB | 	rdlong	arg02, fp
189d4     98 B5 B0 FD | 	call	#__system___string_concat
189d8     FD 14 02 F6 | 	mov	arg02, result1
189dc     15 13 02 F6 | 	mov	arg01, local03
189e0     0D 16 06 F6 | 	mov	arg03, #13
189e4     30 C1 B0 FD | 	call	#__system___basic_open_string
189e8     4A 00 00 FF 
189ec     88 E4 05 F1 | 	add	objptr, ##38024
189f0     F2 2A 02 FB | 	rdlong	local03, objptr
189f4     4A 00 00 FF 
189f8     88 E4 85 F1 | 	sub	objptr, ##38024
189fc     B0 4E 05 F1 | 	add	fp, #176
18a00     A7 2A 62 FC | 	wrlong	local03, fp
18a04     B0 4E 85 F1 | 	sub	fp, #176
18a08                 | '   saveptr=programstart
18a08                 | '   do
18a08                 | LR__2024
18a08     14 4E 05 F1 | 	add	fp, #20
18a0c     A7 12 02 F6 | 	mov	arg01, fp
18a10     9C 4E 05 F1 | 	add	fp, #156
18a14     A7 14 02 FB | 	rdlong	arg02, fp
18a18     B0 4E 85 F1 | 	sub	fp, #176
18a1c     18 16 06 F6 | 	mov	arg03, #24
18a20     0B 00 00 FF 
18a24     CC E4 05 F1 | 	add	objptr, ##5836
18a28     A8 A8 B0 FD | 	call	#_psram_spin2_read1
18a2c     2C 4E 05 F1 | 	add	fp, #44
18a30     A7 12 02 F6 | 	mov	arg01, fp
18a34     10 4E 85 F1 | 	sub	fp, #16
18a38     A7 14 02 FB | 	rdlong	arg02, fp
18a3c     04 4E 05 F1 | 	add	fp, #4
18a40     A7 16 02 FB | 	rdlong	arg03, fp
18a44     20 4E 85 F1 | 	sub	fp, #32
18a48     88 A8 B0 FD | 	call	#_psram_spin2_read1
18a4c     0B 00 00 FF 
18a50     CC E4 85 F1 | 	sub	objptr, ##5836
18a54     A2 01 00 FF 
18a58     BF 2A 06 F6 | 	mov	local03, ##@LR__5789
18a5c     AC 4E 05 F1 | 	add	fp, #172
18a60     A7 2A 62 FC | 	wrlong	local03, fp
18a64                 | '     psram.read1(varptr(header(0)),saveptr,24)
18a64                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
18a64                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
18a64     A0 4E 85 F1 | 	sub	fp, #160
18a68     A7 02 68 FC | 	wrlong	#1, fp
18a6c     14 4E 05 F1 | 	add	fp, #20
18a70     A7 2C 02 FB | 	rdlong	local04, fp
18a74     20 4E 85 F1 | 	sub	fp, #32
18a78     01 2C 06 F1 | 	add	local04, #1
18a7c                 | LR__2025
18a7c     0C 4E 05 F1 | 	add	fp, #12
18a80     A7 2A 02 FB | 	rdlong	local03, fp
18a84     0C 4E 85 F1 | 	sub	fp, #12
18a88     16 2B 52 F2 | 	cmps	local03, local04 wc
18a8c     54 00 90 3D |  if_ae	jmp	#LR__2026
18a90     AC 4E 05 F1 | 	add	fp, #172
18a94     A7 26 02 FB | 	rdlong	local01, fp
18a98     A0 4E 85 F1 | 	sub	fp, #160
18a9c     A7 2A 02 FB | 	rdlong	local03, fp
18aa0     01 2A 86 F1 | 	sub	local03, #1
18aa4     20 4E 05 F1 | 	add	fp, #32
18aa8     A7 2A 02 F1 | 	add	local03, fp
18aac     15 13 C2 FA | 	rdbyte	arg01, local03
18ab0     2C 4E 85 F1 | 	sub	fp, #44
18ab4     9C D6 B0 FD | 	call	#__system__Chr_S
18ab8     FD 14 02 F6 | 	mov	arg02, result1
18abc     13 13 02 F6 | 	mov	arg01, local01
18ac0     AC B4 B0 FD | 	call	#__system___string_concat
18ac4     AC 4E 05 F1 | 	add	fp, #172
18ac8     A7 FA 61 FC | 	wrlong	result1, fp
18acc     A0 4E 85 F1 | 	sub	fp, #160
18ad0     A7 2A 02 FB | 	rdlong	local03, fp
18ad4     01 2A 06 F1 | 	add	local03, #1
18ad8     A7 2A 62 FC | 	wrlong	local03, fp
18adc     0C 4E 85 F1 | 	sub	fp, #12
18ae0     98 FF 9F FD | 	jmp	#LR__2025
18ae4                 | LR__2026
18ae4                 | '     print #9, saveline$
18ae4     09 12 06 F6 | 	mov	arg01, #9
18ae8     50 11 B1 FD | 	call	#__system___getiolock_0579
18aec     FD 12 02 F6 | 	mov	arg01, result1
18af0     20 B4 B0 FD | 	call	#__system___lockmem
18af4     AC 4E 05 F1 | 	add	fp, #172
18af8     A7 14 02 FB | 	rdlong	arg02, fp
18afc     AC 4E 85 F1 | 	sub	fp, #172
18b00     09 12 06 F6 | 	mov	arg01, #9
18b04     00 16 06 F6 | 	mov	arg03, #0
18b08     FC C0 B0 FD | 	call	#__system___basic_print_string
18b0c     09 12 06 F6 | 	mov	arg01, #9
18b10     0A 14 06 F6 | 	mov	arg02, #10
18b14     00 16 06 F6 | 	mov	arg03, #0
18b18     94 C0 B0 FD | 	call	#__system___basic_print_char
18b1c     09 12 06 F6 | 	mov	arg01, #9
18b20     18 11 B1 FD | 	call	#__system___getiolock_0579
18b24     FD 00 68 FC | 	wrlong	#0, result1
18b28     28 4E 05 F1 | 	add	fp, #40
18b2c     A7 2A 02 FB | 	rdlong	local03, fp
18b30     88 4E 05 F1 | 	add	fp, #136
18b34     A7 2A 62 FC | 	wrlong	local03, fp
18b38     88 4E 85 F1 | 	sub	fp, #136
18b3c     A7 2A 02 FB | 	rdlong	local03, fp
18b40     28 4E 85 F1 | 	sub	fp, #40
18b44     FF FF 3F FF 
18b48     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
18b4c     B8 FE 9F 5D |  if_ne	jmp	#LR__2024
18b50                 | '   close #9  
18b50     09 12 06 F6 | 	mov	arg01, #9
18b54     14 07 B1 FD | 	call	#__system__close
18b58                 | '   print "Saved as ";currentdir$+"/"+loadname
18b58     00 12 06 F6 | 	mov	arg01, #0
18b5c     DC 10 B1 FD | 	call	#__system___getiolock_0579
18b60     FD 12 02 F6 | 	mov	arg01, result1
18b64     AC B3 B0 FD | 	call	#__system___lockmem
18b68     A2 01 00 FF 
18b6c     C0 14 06 F6 | 	mov	arg02, ##@LR__5790
18b70     00 12 06 F6 | 	mov	arg01, #0
18b74     00 16 06 F6 | 	mov	arg03, #0
18b78     8C C0 B0 FD | 	call	#__system___basic_print_string
18b7c     00 28 06 F6 | 	mov	local02, #0
18b80     4A 00 00 FF 
18b84     94 E4 05 F1 | 	add	objptr, ##38036
18b88     F2 12 02 FB | 	rdlong	arg01, objptr
18b8c     4A 00 00 FF 
18b90     94 E4 85 F1 | 	sub	objptr, ##38036
18b94     A2 01 00 FF 
18b98     CA 14 06 F6 | 	mov	arg02, ##@LR__5791
18b9c     D0 B3 B0 FD | 	call	#__system___string_concat
18ba0     FD 12 02 F6 | 	mov	arg01, result1
18ba4     51 00 00 FF 
18ba8     D8 E5 05 F1 | 	add	objptr, ##41944
18bac     F2 14 02 FB | 	rdlong	arg02, objptr
18bb0     51 00 00 FF 
18bb4     D8 E5 85 F1 | 	sub	objptr, ##41944
18bb8     B4 B3 B0 FD | 	call	#__system___string_concat
18bbc     FD 14 02 F6 | 	mov	arg02, result1
18bc0     14 13 02 F6 | 	mov	arg01, local02
18bc4     00 16 06 F6 | 	mov	arg03, #0
18bc8     3C C0 B0 FD | 	call	#__system___basic_print_string
18bcc     00 12 06 F6 | 	mov	arg01, #0
18bd0     0A 14 06 F6 | 	mov	arg02, #10
18bd4     00 16 06 F6 | 	mov	arg03, #0
18bd8     D4 BF B0 FD | 	call	#__system___basic_print_char
18bdc     00 12 06 F6 | 	mov	arg01, #0
18be0     58 10 B1 FD | 	call	#__system___getiolock_0579
18be4     FD 00 68 FC | 	wrlong	#0, result1
18be8                 | LR__2027
18be8                 | LR__2028
18be8     A7 F0 03 F6 | 	mov	ptra, fp
18bec     B2 00 A0 FD | 	call	#popregs_
18bf0                 | _do_save_ret
18bf0     2D 00 64 FD | 	ret
18bf4                 | 
18bf4                 | ' 
18bf4                 | ' ' ------------------ setdelay
18bf4                 | ' 
18bf4                 | ' sub do_setdelay
18bf4                 | _do_setdelay
18bf4     02 4A 05 F6 | 	mov	COUNT_, #2
18bf8     A8 00 A0 FD | 	call	#pushregs_
18bfc     18 F0 07 F1 | 	add	ptra, #24
18c00     88 3F BF FD | 	call	#_pop
18c04     FD 12 02 F6 | 	mov	arg01, result1
18c08     FE 26 02 F6 | 	mov	local01, result2
18c0c     FF 28 02 F6 | 	mov	local02, result3
18c10     A7 12 62 FC | 	wrlong	arg01, fp
18c14     04 4E 05 F1 | 	add	fp, #4
18c18     A7 26 62 FC | 	wrlong	local01, fp
18c1c     04 4E 05 F1 | 	add	fp, #4
18c20     A7 28 62 FC | 	wrlong	local02, fp
18c24     08 4E 85 F1 | 	sub	fp, #8
18c28     60 3F BF FD | 	call	#_pop
18c2c     FD 28 02 F6 | 	mov	local02, result1
18c30     0C 4E 05 F1 | 	add	fp, #12
18c34     A7 28 62 FC | 	wrlong	local02, fp
18c38     04 4E 05 F1 | 	add	fp, #4
18c3c     A7 FC 61 FC | 	wrlong	result2, fp
18c40     04 4E 05 F1 | 	add	fp, #4
18c44     A7 FE 61 FC | 	wrlong	result3, fp
18c48     08 4E 85 F1 | 	sub	fp, #8
18c4c     A7 12 02 F6 | 	mov	arg01, fp
18c50     0C 4E 85 F1 | 	sub	fp, #12
18c54     18 41 BF FD | 	call	#_converttoint
18c58     FD 28 02 F6 | 	mov	local02, result1
18c5c     14 27 02 F6 | 	mov	local01, local02
18c60     01 26 66 F0 | 	shl	local01, #1
18c64     14 27 02 F1 | 	add	local01, local02
18c68     03 26 66 F0 | 	shl	local01, #3
18c6c     14 00 00 FF 
18c70     38 E5 05 F1 | 	add	objptr, ##10552
18c74     F2 26 02 F1 | 	add	local01, objptr
18c78     A7 12 02 F6 | 	mov	arg01, fp
18c7c     14 00 00 FF 
18c80     38 E5 85 F1 | 	sub	objptr, ##10552
18c84     E8 40 BF FD | 	call	#_converttoint
18c88     06 26 06 F1 | 	add	local01, #6
18c8c     13 FB 51 FC | 	wrword	result1, local01
18c90     A7 F0 03 F6 | 	mov	ptra, fp
18c94     B2 00 A0 FD | 	call	#popregs_
18c98                 | _do_setdelay_ret
18c98     2D 00 64 FD | 	ret
18c9c                 | 
18c9c                 | ' 
18c9c                 | ' ' ------------------ setenv
18c9c                 | ' 
18c9c                 | ' sub do_setenv
18c9c                 | _do_setenv
18c9c     02 4A 05 F6 | 	mov	COUNT_, #2
18ca0     A8 00 A0 FD | 	call	#pushregs_
18ca4     18 F0 07 F1 | 	add	ptra, #24
18ca8     E0 3E BF FD | 	call	#_pop
18cac     FD 12 02 F6 | 	mov	arg01, result1
18cb0     FE 26 02 F6 | 	mov	local01, result2
18cb4     FF 28 02 F6 | 	mov	local02, result3
18cb8     A7 12 62 FC | 	wrlong	arg01, fp
18cbc     04 4E 05 F1 | 	add	fp, #4
18cc0     A7 26 62 FC | 	wrlong	local01, fp
18cc4     04 4E 05 F1 | 	add	fp, #4
18cc8     A7 28 62 FC | 	wrlong	local02, fp
18ccc     08 4E 85 F1 | 	sub	fp, #8
18cd0     B8 3E BF FD | 	call	#_pop
18cd4     FD 28 02 F6 | 	mov	local02, result1
18cd8     0C 4E 05 F1 | 	add	fp, #12
18cdc     A7 28 62 FC | 	wrlong	local02, fp
18ce0     04 4E 05 F1 | 	add	fp, #4
18ce4     A7 FC 61 FC | 	wrlong	result2, fp
18ce8     04 4E 05 F1 | 	add	fp, #4
18cec     A7 FE 61 FC | 	wrlong	result3, fp
18cf0     08 4E 85 F1 | 	sub	fp, #8
18cf4     A7 12 02 F6 | 	mov	arg01, fp
18cf8     0C 4E 85 F1 | 	sub	fp, #12
18cfc     70 40 BF FD | 	call	#_converttoint
18d00     FD 28 02 F6 | 	mov	local02, result1
18d04     14 27 02 F6 | 	mov	local01, local02
18d08     01 26 66 F0 | 	shl	local01, #1
18d0c     14 27 02 F1 | 	add	local01, local02
18d10     03 26 66 F0 | 	shl	local01, #3
18d14     14 00 00 FF 
18d18     38 E5 05 F1 | 	add	objptr, ##10552
18d1c     F2 26 02 F1 | 	add	local01, objptr
18d20     A7 12 02 F6 | 	mov	arg01, fp
18d24     14 00 00 FF 
18d28     38 E5 85 F1 | 	sub	objptr, ##10552
18d2c     40 40 BF FD | 	call	#_converttoint
18d30     05 26 06 F1 | 	add	local01, #5
18d34     13 FB 41 FC | 	wrbyte	result1, local01
18d38     A7 F0 03 F6 | 	mov	ptra, fp
18d3c     B2 00 A0 FD | 	call	#popregs_
18d40                 | _do_setenv_ret
18d40     2D 00 64 FD | 	ret
18d44                 | 
18d44                 | ' 
18d44                 | ' ' ------------------ setlen
18d44                 | ' 
18d44                 | ' sub do_setlen
18d44                 | _do_setlen
18d44     02 4A 05 F6 | 	mov	COUNT_, #2
18d48     A8 00 A0 FD | 	call	#pushregs_
18d4c     18 F0 07 F1 | 	add	ptra, #24
18d50     38 3E BF FD | 	call	#_pop
18d54     FD 12 02 F6 | 	mov	arg01, result1
18d58     FE 26 02 F6 | 	mov	local01, result2
18d5c     FF 28 02 F6 | 	mov	local02, result3
18d60     A7 12 62 FC | 	wrlong	arg01, fp
18d64     04 4E 05 F1 | 	add	fp, #4
18d68     A7 26 62 FC | 	wrlong	local01, fp
18d6c     04 4E 05 F1 | 	add	fp, #4
18d70     A7 28 62 FC | 	wrlong	local02, fp
18d74     08 4E 85 F1 | 	sub	fp, #8
18d78     10 3E BF FD | 	call	#_pop
18d7c     FD 28 02 F6 | 	mov	local02, result1
18d80     0C 4E 05 F1 | 	add	fp, #12
18d84     A7 28 62 FC | 	wrlong	local02, fp
18d88     04 4E 05 F1 | 	add	fp, #4
18d8c     A7 FC 61 FC | 	wrlong	result2, fp
18d90     04 4E 05 F1 | 	add	fp, #4
18d94     A7 FE 61 FC | 	wrlong	result3, fp
18d98     08 4E 85 F1 | 	sub	fp, #8
18d9c     A7 12 02 F6 | 	mov	arg01, fp
18da0     0C 4E 85 F1 | 	sub	fp, #12
18da4     C8 3F BF FD | 	call	#_converttoint
18da8     FD 28 02 F6 | 	mov	local02, result1
18dac     14 27 02 F6 | 	mov	local01, local02
18db0     01 26 66 F0 | 	shl	local01, #1
18db4     14 27 02 F1 | 	add	local01, local02
18db8     03 26 66 F0 | 	shl	local01, #3
18dbc     14 00 00 FF 
18dc0     38 E5 05 F1 | 	add	objptr, ##10552
18dc4     F2 26 02 F1 | 	add	local01, objptr
18dc8     A7 12 02 F6 | 	mov	arg01, fp
18dcc     14 00 00 FF 
18dd0     38 E5 85 F1 | 	sub	objptr, ##10552
18dd4     54 40 BF FD | 	call	#_converttofloat
18dd8     08 26 06 F1 | 	add	local01, #8
18ddc     13 FB 61 FC | 	wrlong	result1, local01
18de0     A7 F0 03 F6 | 	mov	ptra, fp
18de4     B2 00 A0 FD | 	call	#popregs_
18de8                 | _do_setlen_ret
18de8     2D 00 64 FD | 	ret
18dec                 | 
18dec                 | ' 
18dec                 | ' ' ------------------ setpan
18dec                 | ' 
18dec                 | ' sub do_setpan
18dec                 | _do_setpan
18dec     02 4A 05 F6 | 	mov	COUNT_, #2
18df0     A8 00 A0 FD | 	call	#pushregs_
18df4     18 F0 07 F1 | 	add	ptra, #24
18df8     90 3D BF FD | 	call	#_pop
18dfc     FD 12 02 F6 | 	mov	arg01, result1
18e00     FE 26 02 F6 | 	mov	local01, result2
18e04     FF 28 02 F6 | 	mov	local02, result3
18e08     A7 12 62 FC | 	wrlong	arg01, fp
18e0c     04 4E 05 F1 | 	add	fp, #4
18e10     A7 26 62 FC | 	wrlong	local01, fp
18e14     04 4E 05 F1 | 	add	fp, #4
18e18     A7 28 62 FC | 	wrlong	local02, fp
18e1c     08 4E 85 F1 | 	sub	fp, #8
18e20     68 3D BF FD | 	call	#_pop
18e24     FD 28 02 F6 | 	mov	local02, result1
18e28     0C 4E 05 F1 | 	add	fp, #12
18e2c     A7 28 62 FC | 	wrlong	local02, fp
18e30     04 4E 05 F1 | 	add	fp, #4
18e34     A7 FC 61 FC | 	wrlong	result2, fp
18e38     04 4E 05 F1 | 	add	fp, #4
18e3c     A7 FE 61 FC | 	wrlong	result3, fp
18e40     08 4E 85 F1 | 	sub	fp, #8
18e44     A7 12 02 F6 | 	mov	arg01, fp
18e48     0C 4E 85 F1 | 	sub	fp, #12
18e4c     20 3F BF FD | 	call	#_converttoint
18e50     FD 28 02 F6 | 	mov	local02, result1
18e54     14 27 02 F6 | 	mov	local01, local02
18e58     01 26 66 F0 | 	shl	local01, #1
18e5c     14 27 02 F1 | 	add	local01, local02
18e60     03 26 66 F0 | 	shl	local01, #3
18e64     14 00 00 FF 
18e68     38 E5 05 F1 | 	add	objptr, ##10552
18e6c     F2 26 02 F1 | 	add	local01, objptr
18e70     A7 12 02 F6 | 	mov	arg01, fp
18e74     14 00 00 FF 
18e78     38 E5 85 F1 | 	sub	objptr, ##10552
18e7c     AC 3F BF FD | 	call	#_converttofloat
18e80     10 26 06 F1 | 	add	local01, #16
18e84     13 FB 61 FC | 	wrlong	result1, local01
18e88     A7 F0 03 F6 | 	mov	ptra, fp
18e8c     B2 00 A0 FD | 	call	#popregs_
18e90                 | _do_setpan_ret
18e90     2D 00 64 FD | 	ret
18e94                 | 
18e94                 | ' 
18e94                 | ' ' ------------------ setsustain
18e94                 | ' 
18e94                 | ' sub do_setsustain
18e94                 | _do_setsustain
18e94     02 4A 05 F6 | 	mov	COUNT_, #2
18e98     A8 00 A0 FD | 	call	#pushregs_
18e9c     18 F0 07 F1 | 	add	ptra, #24
18ea0     E8 3C BF FD | 	call	#_pop
18ea4     FD 12 02 F6 | 	mov	arg01, result1
18ea8     FE 26 02 F6 | 	mov	local01, result2
18eac     FF 28 02 F6 | 	mov	local02, result3
18eb0     A7 12 62 FC | 	wrlong	arg01, fp
18eb4     04 4E 05 F1 | 	add	fp, #4
18eb8     A7 26 62 FC | 	wrlong	local01, fp
18ebc     04 4E 05 F1 | 	add	fp, #4
18ec0     A7 28 62 FC | 	wrlong	local02, fp
18ec4     08 4E 85 F1 | 	sub	fp, #8
18ec8     C0 3C BF FD | 	call	#_pop
18ecc     FD 28 02 F6 | 	mov	local02, result1
18ed0     0C 4E 05 F1 | 	add	fp, #12
18ed4     A7 28 62 FC | 	wrlong	local02, fp
18ed8     04 4E 05 F1 | 	add	fp, #4
18edc     A7 FC 61 FC | 	wrlong	result2, fp
18ee0     04 4E 05 F1 | 	add	fp, #4
18ee4     A7 FE 61 FC | 	wrlong	result3, fp
18ee8     08 4E 85 F1 | 	sub	fp, #8
18eec     A7 12 02 F6 | 	mov	arg01, fp
18ef0     0C 4E 85 F1 | 	sub	fp, #12
18ef4     78 3E BF FD | 	call	#_converttoint
18ef8     FD 28 02 F6 | 	mov	local02, result1
18efc     14 27 02 F6 | 	mov	local01, local02
18f00     01 26 66 F0 | 	shl	local01, #1
18f04     14 27 02 F1 | 	add	local01, local02
18f08     03 26 66 F0 | 	shl	local01, #3
18f0c     14 00 00 FF 
18f10     38 E5 05 F1 | 	add	objptr, ##10552
18f14     F2 26 02 F1 | 	add	local01, objptr
18f18     A7 12 02 F6 | 	mov	arg01, fp
18f1c     14 00 00 FF 
18f20     38 E5 85 F1 | 	sub	objptr, ##10552
18f24     48 3E BF FD | 	call	#_converttoint
18f28     14 26 06 F1 | 	add	local01, #20
18f2c     13 FB 51 FC | 	wrword	result1, local01
18f30     A7 F0 03 F6 | 	mov	ptra, fp
18f34     B2 00 A0 FD | 	call	#popregs_
18f38                 | _do_setsustain_ret
18f38     2D 00 64 FD | 	ret
18f3c                 | 
18f3c                 | ' 
18f3c                 | ' ' ------------------ setvol
18f3c                 | ' 
18f3c                 | ' sub do_setvol
18f3c                 | _do_setvol
18f3c     02 4A 05 F6 | 	mov	COUNT_, #2
18f40     A8 00 A0 FD | 	call	#pushregs_
18f44     18 F0 07 F1 | 	add	ptra, #24
18f48     40 3C BF FD | 	call	#_pop
18f4c     FD 12 02 F6 | 	mov	arg01, result1
18f50     FE 26 02 F6 | 	mov	local01, result2
18f54     FF 28 02 F6 | 	mov	local02, result3
18f58     A7 12 62 FC | 	wrlong	arg01, fp
18f5c     04 4E 05 F1 | 	add	fp, #4
18f60     A7 26 62 FC | 	wrlong	local01, fp
18f64     04 4E 05 F1 | 	add	fp, #4
18f68     A7 28 62 FC | 	wrlong	local02, fp
18f6c     08 4E 85 F1 | 	sub	fp, #8
18f70     18 3C BF FD | 	call	#_pop
18f74     FD 28 02 F6 | 	mov	local02, result1
18f78     0C 4E 05 F1 | 	add	fp, #12
18f7c     A7 28 62 FC | 	wrlong	local02, fp
18f80     04 4E 05 F1 | 	add	fp, #4
18f84     A7 FC 61 FC | 	wrlong	result2, fp
18f88     04 4E 05 F1 | 	add	fp, #4
18f8c     A7 FE 61 FC | 	wrlong	result3, fp
18f90     08 4E 85 F1 | 	sub	fp, #8
18f94     A7 12 02 F6 | 	mov	arg01, fp
18f98     0C 4E 85 F1 | 	sub	fp, #12
18f9c     D0 3D BF FD | 	call	#_converttoint
18fa0     FD 28 02 F6 | 	mov	local02, result1
18fa4     14 27 02 F6 | 	mov	local01, local02
18fa8     01 26 66 F0 | 	shl	local01, #1
18fac     14 27 02 F1 | 	add	local01, local02
18fb0     03 26 66 F0 | 	shl	local01, #3
18fb4     14 00 00 FF 
18fb8     38 E5 05 F1 | 	add	objptr, ##10552
18fbc     F2 26 02 F1 | 	add	local01, objptr
18fc0     A7 12 02 F6 | 	mov	arg01, fp
18fc4     14 00 00 FF 
18fc8     38 E5 85 F1 | 	sub	objptr, ##10552
18fcc     5C 3E BF FD | 	call	#_converttofloat
18fd0     0C 26 06 F1 | 	add	local01, #12
18fd4     13 FB 61 FC | 	wrlong	result1, local01
18fd8     A7 F0 03 F6 | 	mov	ptra, fp
18fdc     B2 00 A0 FD | 	call	#popregs_
18fe0                 | _do_setvol_ret
18fe0     2D 00 64 FD | 	ret
18fe4                 | 
18fe4                 | ' 
18fe4                 | ' ' ------------------ setwave
18fe4                 | ' 
18fe4                 | ' sub do_setwave
18fe4                 | _do_setwave
18fe4     02 4A 05 F6 | 	mov	COUNT_, #2
18fe8     A8 00 A0 FD | 	call	#pushregs_
18fec     18 F0 07 F1 | 	add	ptra, #24
18ff0     98 3B BF FD | 	call	#_pop
18ff4     FD 12 02 F6 | 	mov	arg01, result1
18ff8     FE 26 02 F6 | 	mov	local01, result2
18ffc     FF 28 02 F6 | 	mov	local02, result3
19000     A7 12 62 FC | 	wrlong	arg01, fp
19004     04 4E 05 F1 | 	add	fp, #4
19008     A7 26 62 FC | 	wrlong	local01, fp
1900c     04 4E 05 F1 | 	add	fp, #4
19010     A7 28 62 FC | 	wrlong	local02, fp
19014     08 4E 85 F1 | 	sub	fp, #8
19018     70 3B BF FD | 	call	#_pop
1901c     FD 28 02 F6 | 	mov	local02, result1
19020     0C 4E 05 F1 | 	add	fp, #12
19024     A7 28 62 FC | 	wrlong	local02, fp
19028     04 4E 05 F1 | 	add	fp, #4
1902c     A7 FC 61 FC | 	wrlong	result2, fp
19030     04 4E 05 F1 | 	add	fp, #4
19034     A7 FE 61 FC | 	wrlong	result3, fp
19038     08 4E 85 F1 | 	sub	fp, #8
1903c     A7 12 02 F6 | 	mov	arg01, fp
19040     0C 4E 85 F1 | 	sub	fp, #12
19044     28 3D BF FD | 	call	#_converttoint
19048     FD 28 02 F6 | 	mov	local02, result1
1904c     14 27 02 F6 | 	mov	local01, local02
19050     01 26 66 F0 | 	shl	local01, #1
19054     14 27 02 F1 | 	add	local01, local02
19058     03 26 66 F0 | 	shl	local01, #3
1905c     14 00 00 FF 
19060     38 E5 05 F1 | 	add	objptr, ##10552
19064     F2 26 02 F1 | 	add	local01, objptr
19068     A7 12 02 F6 | 	mov	arg01, fp
1906c     14 00 00 FF 
19070     38 E5 85 F1 | 	sub	objptr, ##10552
19074     F8 3C BF FD | 	call	#_converttoint
19078     04 26 06 F1 | 	add	local01, #4
1907c     13 FB 41 FC | 	wrbyte	result1, local01
19080     A7 F0 03 F6 | 	mov	ptra, fp
19084     B2 00 A0 FD | 	call	#popregs_
19088                 | _do_setwave_ret
19088     2D 00 64 FD | 	ret
1908c                 | 
1908c                 | ' 
1908c                 | ' ' ------------------ shutup
1908c                 | ' 
1908c                 | ' sub do_shutup
1908c                 | _do_shutup
1908c     03 4A 05 F6 | 	mov	COUNT_, #3
19090     A8 00 A0 FD | 	call	#pushregs_
19094     18 F0 07 F1 | 	add	ptra, #24
19098     4A 00 00 FF 
1909c     80 E4 05 F1 | 	add	objptr, ##38016
190a0     F2 26 02 FB | 	rdlong	local01, objptr
190a4     13 29 02 F6 | 	mov	local02, local01
190a8     01 28 66 F0 | 	shl	local02, #1
190ac     13 29 02 F1 | 	add	local02, local01
190b0     02 28 66 F0 | 	shl	local02, #2
190b4     03 00 00 FF 
190b8     04 E4 85 F1 | 	sub	objptr, ##1540
190bc     F2 28 02 F1 | 	add	local02, objptr
190c0     14 2B 0A FB | 	rdlong	local03, local02 wz
190c4     14 4E 05 F1 | 	add	fp, #20
190c8     A7 2A 62 FC | 	wrlong	local03, fp
190cc                 | ' 
190cc                 | ' numpar=compiledline(lineptr_e).result.uresult
190cc                 | ' if numpar=0 then
190cc     14 4E 85 F1 | 	sub	fp, #20
190d0     47 00 00 FF 
190d4     7C E4 85 F1 | 	sub	objptr, ##36476
190d8     50 00 90 5D |  if_ne	jmp	#LR__2032
190dc                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
190dc     10 4E 05 F1 | 	add	fp, #16
190e0     A7 00 68 FC | 	wrlong	#0, fp
190e4     37 00 00 FF 
190e8     10 E4 05 F1 | 	add	objptr, ##28176
190ec     97 16 48 FB | 	callpa	#(@LR__2031-@LR__2030)>>2,fcache_load_ptr_
190f0                 | LR__2030
190f0     F2 12 02 FB | 	rdlong	arg01, objptr
190f4     A7 2A 02 FB | 	rdlong	local03, fp
190f8     06 2A 66 F0 | 	shl	local03, #6
190fc     15 13 02 F1 | 	add	arg01, local03
19100     14 12 06 F1 | 	add	arg01, #20
19104     09 01 58 FC | 	wrword	#0, arg01
19108     A7 2A 02 FB | 	rdlong	local03, fp
1910c     01 2A 06 F1 | 	add	local03, #1
19110     A7 2A 62 FC | 	wrlong	local03, fp
19114     08 2A 56 F2 | 	cmps	local03, #8 wc
19118     D4 FF 9F CD |  if_b	jmp	#LR__2030
1911c                 | LR__2031
1911c     37 00 00 FF 
19120     10 E4 85 F1 | 	sub	objptr, ##28176
19124     10 4E 85 F1 | 	sub	fp, #16
19128     64 00 90 FD | 	jmp	#LR__2033
1912c                 | LR__2032
1912c     5C 3A BF FD | 	call	#_pop
19130     FF 26 02 F6 | 	mov	local01, result3
19134     A7 FA 61 FC | 	wrlong	result1, fp
19138     04 4E 05 F1 | 	add	fp, #4
1913c     A7 FC 61 FC | 	wrlong	result2, fp
19140     04 4E 05 F1 | 	add	fp, #4
19144     A7 26 62 FC | 	wrlong	local01, fp
19148     08 4E 85 F1 | 	sub	fp, #8
1914c     A7 12 02 F6 | 	mov	arg01, fp
19150     1C 3C BF FD | 	call	#_converttoint
19154     FD 2A 52 F6 | 	abs	local03, result1 wc
19158     07 2A 06 F5 | 	and	local03, #7
1915c     15 29 82 F6 | 	negc	local02, local03
19160     0C 4E 05 F1 | 	add	fp, #12
19164     A7 28 62 FC | 	wrlong	local02, fp
19168     37 00 00 FF 
1916c     10 E4 05 F1 | 	add	objptr, ##28176
19170     F2 12 02 FB | 	rdlong	arg01, objptr
19174     37 00 00 FF 
19178     10 E4 85 F1 | 	sub	objptr, ##28176
1917c     0C 4E 85 F1 | 	sub	fp, #12
19180     06 28 66 F0 | 	shl	local02, #6
19184     14 13 02 F1 | 	add	arg01, local02
19188     14 12 06 F1 | 	add	arg01, #20
1918c     09 01 58 FC | 	wrword	#0, arg01
19190                 | LR__2033
19190     A7 F0 03 F6 | 	mov	ptra, fp
19194     B2 00 A0 FD | 	call	#popregs_
19198                 | _do_shutup_ret
19198     2D 00 64 FD | 	ret
1919c                 | 
1919c                 | ' 
1919c                 | ' ' ------------------ sin
1919c                 | ' 
1919c                 | ' sub do_sin
1919c                 | _do_sin
1919c     01 4A 05 F6 | 	mov	COUNT_, #1
191a0     A8 00 A0 FD | 	call	#pushregs_
191a4     10 F0 07 F1 | 	add	ptra, #16
191a8     4A 00 00 FF 
191ac     80 E4 05 F1 | 	add	objptr, ##38016
191b0     F2 26 02 FB | 	rdlong	local01, objptr
191b4     13 17 02 F6 | 	mov	arg03, local01
191b8     01 16 66 F0 | 	shl	arg03, #1
191bc     13 17 02 F1 | 	add	arg03, local01
191c0     02 16 66 F0 | 	shl	arg03, #2
191c4     03 00 00 FF 
191c8     04 E4 85 F1 | 	sub	objptr, ##1540
191cc     F2 16 02 F1 | 	add	arg03, objptr
191d0     0B 17 02 FB | 	rdlong	arg03, arg03
191d4     0C 4E 05 F1 | 	add	fp, #12
191d8     A7 16 62 FC | 	wrlong	arg03, fp
191dc                 | ' 
191dc                 | ' numpar=compiledline(lineptr_e).result.uresult
191dc                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
191dc     0C 4E 85 F1 | 	sub	fp, #12
191e0     02 16 16 F2 | 	cmp	arg03, #2 wc
191e4     47 00 00 FF 
191e8     7C E4 85 F1 | 	sub	objptr, ##36476
191ec     0C 4E 05 C1 |  if_b	add	fp, #12
191f0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
191f4     0C 4E 85 C1 |  if_b	sub	fp, #12
191f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2040
191fc     00 12 06 F6 | 	mov	arg01, #0
19200     38 0A B1 FD | 	call	#__system___getiolock_0579
19204     FD 12 02 F6 | 	mov	arg01, result1
19208     08 AD B0 FD | 	call	#__system___lockmem
1920c     A2 01 00 FF 
19210     CC 14 06 F6 | 	mov	arg02, ##@LR__5792
19214     00 12 06 F6 | 	mov	arg01, #0
19218     00 16 06 F6 | 	mov	arg03, #0
1921c     E8 B9 B0 FD | 	call	#__system___basic_print_string
19220     00 12 06 F6 | 	mov	arg01, #0
19224     14 0A B1 FD | 	call	#__system___getiolock_0579
19228     FD 00 68 FC | 	wrlong	#0, result1
1922c     27 12 06 F6 | 	mov	arg01, #39
19230     00 14 06 F6 | 	mov	arg02, #0
19234     38 73 B0 FD | 	call	#_printerror
19238     64 00 90 FD | 	jmp	#LR__2041
1923c                 | LR__2040
1923c     4C 39 BF FD | 	call	#_pop
19240     A7 FA 61 FC | 	wrlong	result1, fp
19244     04 4E 05 F1 | 	add	fp, #4
19248     A7 FC 61 FC | 	wrlong	result2, fp
1924c     04 4E 05 F1 | 	add	fp, #4
19250     A7 FE 61 FC | 	wrlong	result3, fp
19254     08 4E 85 F1 | 	sub	fp, #8
19258     51 00 00 FF 
1925c     BC E5 05 F1 | 	add	objptr, ##41916
19260     F2 26 02 FB | 	rdlong	local01, objptr
19264     51 00 00 FF 
19268     BC E5 85 F1 | 	sub	objptr, ##41916
1926c     A7 12 02 F6 | 	mov	arg01, fp
19270     B8 3B BF FD | 	call	#_converttofloat
19274     FD 14 02 F6 | 	mov	arg02, result1
19278     13 13 02 F6 | 	mov	arg01, local01
1927c     0C DB B0 FD | 	call	#__system___float_mul
19280     FD 12 02 F6 | 	mov	arg01, result1
19284     64 E4 B0 FD | 	call	#__system____builtin_sinf
19288     A7 FA 61 FC | 	wrlong	result1, fp
1928c     08 4E 05 F1 | 	add	fp, #8
19290     A7 3C 68 FC | 	wrlong	#30, fp
19294     08 4E 85 F1 | 	sub	fp, #8
19298     A7 12 02 F6 | 	mov	arg01, fp
1929c     84 39 BF FD | 	call	#_push
192a0                 | LR__2041
192a0     A7 F0 03 F6 | 	mov	ptra, fp
192a4     B2 00 A0 FD | 	call	#popregs_
192a8                 | _do_sin_ret
192a8     2D 00 64 FD | 	ret
192ac                 | 
192ac                 | ' 
192ac                 | ' ' ------------------ skip
192ac                 | ' ' A helper token for on-gosub: skips the rest of gosubs
192ac                 | ' 
192ac                 | ' sub do_skip
192ac                 | _do_skip
192ac     4A 00 00 FF 
192b0     80 E4 05 F1 | 	add	objptr, ##38016
192b4     F2 00 02 FB | 	rdlong	_var01, objptr
192b8     00 03 02 F6 | 	mov	_var02, _var01
192bc     01 02 66 F0 | 	shl	_var02, #1
192c0     00 03 02 F1 | 	add	_var02, _var01
192c4     02 02 66 F0 | 	shl	_var02, #2
192c8     03 00 00 FF 
192cc     04 E4 85 F1 | 	sub	objptr, ##1540
192d0     F2 02 02 F1 | 	add	_var02, objptr
192d4     01 03 02 FB | 	rdlong	_var02, _var02
192d8     01 02 86 F1 | 	sub	_var02, #1
192dc     03 00 00 FF 
192e0     04 E4 05 F1 | 	add	objptr, ##1540
192e4     F2 02 62 FC | 	wrlong	_var02, objptr
192e8     4A 00 00 FF 
192ec     80 E4 85 F1 | 	sub	objptr, ##38016
192f0                 | _do_skip_ret
192f0     2D 00 64 FD | 	ret
192f4                 | 
192f4                 | ' 
192f4                 | ' ' ------------------ sprite
192f4                 | ' 
192f4                 | ' sub do_sprite
192f4                 | _do_sprite
192f4     00 4A 05 F6 | 	mov	COUNT_, #0
192f8     A8 00 A0 FD | 	call	#pushregs_
192fc     30 F0 07 F1 | 	add	ptra, #48
19300     88 38 BF FD | 	call	#_pop
19304     FD 16 02 F6 | 	mov	arg03, result1
19308     FE 14 02 F6 | 	mov	arg02, result2
1930c     FF 12 02 F6 | 	mov	arg01, result3
19310     18 4E 05 F1 | 	add	fp, #24
19314     A7 16 62 FC | 	wrlong	arg03, fp
19318     04 4E 05 F1 | 	add	fp, #4
1931c     A7 14 62 FC | 	wrlong	arg02, fp
19320     04 4E 05 F1 | 	add	fp, #4
19324     A7 12 62 FC | 	wrlong	arg01, fp
19328     20 4E 85 F1 | 	sub	fp, #32
1932c     5C 38 BF FD | 	call	#_pop
19330     FD 16 02 F6 | 	mov	arg03, result1
19334     FE 14 02 F6 | 	mov	arg02, result2
19338     FF 12 02 F6 | 	mov	arg01, result3
1933c     0C 4E 05 F1 | 	add	fp, #12
19340     A7 16 62 FC | 	wrlong	arg03, fp
19344     04 4E 05 F1 | 	add	fp, #4
19348     A7 14 62 FC | 	wrlong	arg02, fp
1934c     04 4E 05 F1 | 	add	fp, #4
19350     A7 12 62 FC | 	wrlong	arg01, fp
19354     14 4E 85 F1 | 	sub	fp, #20
19358     30 38 BF FD | 	call	#_pop
1935c     FF 16 02 F6 | 	mov	arg03, result3
19360     A7 FA 61 FC | 	wrlong	result1, fp
19364     04 4E 05 F1 | 	add	fp, #4
19368     A7 FC 61 FC | 	wrlong	result2, fp
1936c     04 4E 05 F1 | 	add	fp, #4
19370     A7 16 62 FC | 	wrlong	arg03, fp
19374     08 4E 85 F1 | 	sub	fp, #8
19378     A7 12 02 F6 | 	mov	arg01, fp
1937c     F0 39 BF FD | 	call	#_converttoint
19380     24 4E 05 F1 | 	add	fp, #36
19384     A7 FA 61 FC | 	wrlong	result1, fp
19388     18 4E 85 F1 | 	sub	fp, #24
1938c     A7 12 02 F6 | 	mov	arg01, fp
19390     0C 4E 85 F1 | 	sub	fp, #12
19394     D8 39 BF FD | 	call	#_converttoint
19398     28 4E 05 F1 | 	add	fp, #40
1939c     A7 FA 61 FC | 	wrlong	result1, fp
193a0     10 4E 85 F1 | 	sub	fp, #16
193a4     A7 12 02 F6 | 	mov	arg01, fp
193a8     18 4E 85 F1 | 	sub	fp, #24
193ac     C0 39 BF FD | 	call	#_converttoint
193b0     2C 4E 05 F1 | 	add	fp, #44
193b4     A7 FA 61 FC | 	wrlong	result1, fp
193b8     08 4E 85 F1 | 	sub	fp, #8
193bc     A7 12 02 FB | 	rdlong	arg01, fp
193c0     04 4E 05 F1 | 	add	fp, #4
193c4     A7 14 02 FB | 	rdlong	arg02, fp
193c8     FD 16 02 F6 | 	mov	arg03, result1
193cc     28 4E 85 F1 | 	sub	fp, #40
193d0     7C 81 B0 FD | 	call	#_hg010b_spin2_setspritepos
193d4     A7 F0 03 F6 | 	mov	ptra, fp
193d8     B2 00 A0 FD | 	call	#popregs_
193dc                 | _do_sprite_ret
193dc     2D 00 64 FD | 	ret
193e0                 | 
193e0                 | ' 
193e0                 | ' ' ------------------ sqr
193e0                 | ' 
193e0                 | ' sub do_sqr
193e0                 | _do_sqr
193e0     01 4A 05 F6 | 	mov	COUNT_, #1
193e4     A8 00 A0 FD | 	call	#pushregs_
193e8     10 F0 07 F1 | 	add	ptra, #16
193ec     4A 00 00 FF 
193f0     80 E4 05 F1 | 	add	objptr, ##38016
193f4     F2 26 02 FB | 	rdlong	local01, objptr
193f8     13 17 02 F6 | 	mov	arg03, local01
193fc     01 16 66 F0 | 	shl	arg03, #1
19400     13 17 02 F1 | 	add	arg03, local01
19404     02 16 66 F0 | 	shl	arg03, #2
19408     03 00 00 FF 
1940c     04 E4 85 F1 | 	sub	objptr, ##1540
19410     F2 16 02 F1 | 	add	arg03, objptr
19414     0B 17 02 FB | 	rdlong	arg03, arg03
19418     0C 4E 05 F1 | 	add	fp, #12
1941c     A7 16 62 FC | 	wrlong	arg03, fp
19420                 | ' 
19420                 | ' numpar=compiledline(lineptr_e).result.uresult
19420                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
19420     0C 4E 85 F1 | 	sub	fp, #12
19424     02 16 16 F2 | 	cmp	arg03, #2 wc
19428     47 00 00 FF 
1942c     7C E4 85 F1 | 	sub	objptr, ##36476
19430     0C 4E 05 C1 |  if_b	add	fp, #12
19434     A7 26 0A CB |  if_b	rdlong	local01, fp wz
19438     0C 4E 85 C1 |  if_b	sub	fp, #12
1943c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2050
19440     00 12 06 F6 | 	mov	arg01, #0
19444     F4 07 B1 FD | 	call	#__system___getiolock_0579
19448     FD 12 02 F6 | 	mov	arg01, result1
1944c     C4 AA B0 FD | 	call	#__system___lockmem
19450     A2 01 00 FF 
19454     D2 14 06 F6 | 	mov	arg02, ##@LR__5793
19458     00 12 06 F6 | 	mov	arg01, #0
1945c     00 16 06 F6 | 	mov	arg03, #0
19460     A4 B7 B0 FD | 	call	#__system___basic_print_string
19464     00 12 06 F6 | 	mov	arg01, #0
19468     D0 07 B1 FD | 	call	#__system___getiolock_0579
1946c     FD 00 68 FC | 	wrlong	#0, result1
19470     27 12 06 F6 | 	mov	arg01, #39
19474     00 14 06 F6 | 	mov	arg02, #0
19478     F4 70 B0 FD | 	call	#_printerror
1947c     48 00 90 FD | 	jmp	#LR__2051
19480                 | LR__2050
19480     08 37 BF FD | 	call	#_pop
19484     FF 26 02 F6 | 	mov	local01, result3
19488     A7 FA 61 FC | 	wrlong	result1, fp
1948c     04 4E 05 F1 | 	add	fp, #4
19490     A7 FC 61 FC | 	wrlong	result2, fp
19494     04 4E 05 F1 | 	add	fp, #4
19498     A7 26 62 FC | 	wrlong	local01, fp
1949c     08 4E 85 F1 | 	sub	fp, #8
194a0     A7 12 02 F6 | 	mov	arg01, fp
194a4     84 39 BF FD | 	call	#_converttofloat
194a8     FD 12 02 F6 | 	mov	arg01, result1
194ac     04 D8 B0 FD | 	call	#__system___float_sqrt
194b0     A7 FA 61 FC | 	wrlong	result1, fp
194b4     08 4E 05 F1 | 	add	fp, #8
194b8     A7 3C 68 FC | 	wrlong	#30, fp
194bc     08 4E 85 F1 | 	sub	fp, #8
194c0     A7 12 02 F6 | 	mov	arg01, fp
194c4     5C 37 BF FD | 	call	#_push
194c8                 | LR__2051
194c8     A7 F0 03 F6 | 	mov	ptra, fp
194cc     B2 00 A0 FD | 	call	#popregs_
194d0                 | _do_sqr_ret
194d0     2D 00 64 FD | 	ret
194d4                 | 
194d4                 | ' 
194d4                 | ' ' ------------------ stick
194d4                 | ' 
194d4                 | ' sub do_stick
194d4                 | _do_stick
194d4     01 4A 05 F6 | 	mov	COUNT_, #1
194d8     A8 00 A0 FD | 	call	#pushregs_
194dc     10 F0 07 F1 | 	add	ptra, #16
194e0     4A 00 00 FF 
194e4     80 E4 05 F1 | 	add	objptr, ##38016
194e8     F2 26 02 FB | 	rdlong	local01, objptr
194ec     13 17 02 F6 | 	mov	arg03, local01
194f0     01 16 66 F0 | 	shl	arg03, #1
194f4     13 17 02 F1 | 	add	arg03, local01
194f8     02 16 66 F0 | 	shl	arg03, #2
194fc     03 00 00 FF 
19500     04 E4 85 F1 | 	sub	objptr, ##1540
19504     F2 16 02 F1 | 	add	arg03, objptr
19508     0B 17 02 FB | 	rdlong	arg03, arg03
1950c     0C 4E 05 F1 | 	add	fp, #12
19510     A7 16 62 FC | 	wrlong	arg03, fp
19514                 | ' 
19514                 | ' numpar=compiledline(lineptr_e).result.uresult
19514                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
19514     0C 4E 85 F1 | 	sub	fp, #12
19518     02 16 16 F2 | 	cmp	arg03, #2 wc
1951c     47 00 00 FF 
19520     7C E4 85 F1 | 	sub	objptr, ##36476
19524     40 00 90 CD |  if_b	jmp	#LR__2060
19528     00 12 06 F6 | 	mov	arg01, #0
1952c     0C 07 B1 FD | 	call	#__system___getiolock_0579
19530     FD 12 02 F6 | 	mov	arg01, result1
19534     DC A9 B0 FD | 	call	#__system___lockmem
19538     A2 01 00 FF 
1953c     D8 14 06 F6 | 	mov	arg02, ##@LR__5794
19540     00 12 06 F6 | 	mov	arg01, #0
19544     00 16 06 F6 | 	mov	arg03, #0
19548     BC B6 B0 FD | 	call	#__system___basic_print_string
1954c     00 12 06 F6 | 	mov	arg01, #0
19550     E8 06 B1 FD | 	call	#__system___getiolock_0579
19554     FD 00 68 FC | 	wrlong	#0, result1
19558     27 12 06 F6 | 	mov	arg01, #39
1955c     00 14 06 F6 | 	mov	arg02, #0
19560     0C 70 B0 FD | 	call	#_printerror
19564     F0 00 90 FD | 	jmp	#LR__2064
19568                 | LR__2060
19568                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
19568     0C 4E 05 F1 | 	add	fp, #12
1956c     A7 FE 09 FB | 	rdlong	result3, fp wz
19570     0C 4E 85 F1 | 	sub	fp, #12
19574     30 00 90 5D |  if_ne	jmp	#LR__2061
19578     51 00 00 FF 
1957c     30 E5 05 F1 | 	add	objptr, ##41776
19580     F2 26 02 FB | 	rdlong	local01, objptr
19584     51 00 00 FF 
19588     30 E5 85 F1 | 	sub	objptr, ##41776
1958c     A7 26 62 FC | 	wrlong	local01, fp
19590     08 4E 05 F1 | 	add	fp, #8
19594     A7 3A 68 FC | 	wrlong	#29, fp
19598     08 4E 85 F1 | 	sub	fp, #8
1959c     A7 12 02 F6 | 	mov	arg01, fp
195a0     80 36 BF FD | 	call	#_push
195a4     B0 00 90 FD | 	jmp	#LR__2064
195a8                 | LR__2061
195a8     E0 35 BF FD | 	call	#_pop
195ac     A7 FA 61 FC | 	wrlong	result1, fp
195b0     04 4E 05 F1 | 	add	fp, #4
195b4     A7 FC 61 FC | 	wrlong	result2, fp
195b8     04 4E 05 F1 | 	add	fp, #4
195bc     A7 FE 61 FC | 	wrlong	result3, fp
195c0                 | ' t1=pop()
195c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
195c0     08 4E 85 F1 | 	sub	fp, #8
195c4     1C FE 0D F2 | 	cmp	result3, #28 wz
195c8     08 4E 05 51 |  if_ne	add	fp, #8
195cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
195d0     08 4E 85 51 |  if_ne	sub	fp, #8
195d4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
195d8     70 00 90 5D |  if_ne	jmp	#LR__2063
195dc     A7 26 02 FB | 	rdlong	local01, fp
195e0     52 00 00 FF 
195e4     18 E4 05 F1 | 	add	objptr, ##42008
195e8     F2 26 62 FC | 	wrlong	local01, objptr
195ec                 | '   q=t1.result.uresult
195ec                 | '   if q<7 then 
195ec     52 00 00 FF 
195f0     18 E4 85 F1 | 	sub	objptr, ##42008
195f4     07 26 56 F2 | 	cmps	local01, #7 wc
195f8     40 00 90 3D |  if_ae	jmp	#LR__2062
195fc     52 00 00 FF 
19600     18 E4 05 F1 | 	add	objptr, ##42008
19604     F2 26 02 FB | 	rdlong	local01, objptr
19608     02 26 66 F0 | 	shl	local01, #2
1960c     E8 E4 85 F1 | 	sub	objptr, #232
19610     F2 26 02 F1 | 	add	local01, objptr
19614     13 27 02 FB | 	rdlong	local01, local01
19618     A7 26 62 FC | 	wrlong	local01, fp
1961c     08 4E 05 F1 | 	add	fp, #8
19620     A7 3A 68 FC | 	wrlong	#29, fp
19624     08 4E 85 F1 | 	sub	fp, #8
19628     A7 12 02 F6 | 	mov	arg01, fp
1962c     51 00 00 FF 
19630     30 E5 85 F1 | 	sub	objptr, ##41776
19634     EC 35 BF FD | 	call	#_push
19638                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
19638     1C 00 90 FD | 	jmp	#LR__2064
1963c                 | LR__2062
1963c     29 12 06 F6 | 	mov	arg01, #41
19640     00 14 06 F6 | 	mov	arg02, #0
19644     28 6F B0 FD | 	call	#_printerror
19648                 | '      printerror(41) : return
19648     0C 00 90 FD | 	jmp	#LR__2064
1964c                 | LR__2063
1964c     29 12 06 F6 | 	mov	arg01, #41
19650     00 14 06 F6 | 	mov	arg02, #0
19654     18 6F B0 FD | 	call	#_printerror
19658                 | LR__2064
19658     A7 F0 03 F6 | 	mov	ptra, fp
1965c     B2 00 A0 FD | 	call	#popregs_
19660                 | _do_stick_ret
19660     2D 00 64 FD | 	ret
19664                 | 
19664                 | ' 
19664                 | ' ' ------------------ strig
19664                 | ' 
19664                 | ' sub do_strig
19664                 | _do_strig
19664     01 4A 05 F6 | 	mov	COUNT_, #1
19668     A8 00 A0 FD | 	call	#pushregs_
1966c     10 F0 07 F1 | 	add	ptra, #16
19670     4A 00 00 FF 
19674     80 E4 05 F1 | 	add	objptr, ##38016
19678     F2 26 02 FB | 	rdlong	local01, objptr
1967c     13 17 02 F6 | 	mov	arg03, local01
19680     01 16 66 F0 | 	shl	arg03, #1
19684     13 17 02 F1 | 	add	arg03, local01
19688     02 16 66 F0 | 	shl	arg03, #2
1968c     03 00 00 FF 
19690     04 E4 85 F1 | 	sub	objptr, ##1540
19694     F2 16 02 F1 | 	add	arg03, objptr
19698     0B 17 02 FB | 	rdlong	arg03, arg03
1969c     0C 4E 05 F1 | 	add	fp, #12
196a0     A7 16 62 FC | 	wrlong	arg03, fp
196a4                 | ' 
196a4                 | ' numpar=compiledline(lineptr_e).result.uresult
196a4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
196a4     0C 4E 85 F1 | 	sub	fp, #12
196a8     02 16 16 F2 | 	cmp	arg03, #2 wc
196ac     47 00 00 FF 
196b0     7C E4 85 F1 | 	sub	objptr, ##36476
196b4     40 00 90 CD |  if_b	jmp	#LR__2070
196b8     00 12 06 F6 | 	mov	arg01, #0
196bc     7C 05 B1 FD | 	call	#__system___getiolock_0579
196c0     FD 12 02 F6 | 	mov	arg01, result1
196c4     4C A8 B0 FD | 	call	#__system___lockmem
196c8     A2 01 00 FF 
196cc     E0 14 06 F6 | 	mov	arg02, ##@LR__5795
196d0     00 12 06 F6 | 	mov	arg01, #0
196d4     00 16 06 F6 | 	mov	arg03, #0
196d8     2C B5 B0 FD | 	call	#__system___basic_print_string
196dc     00 12 06 F6 | 	mov	arg01, #0
196e0     58 05 B1 FD | 	call	#__system___getiolock_0579
196e4     FD 00 68 FC | 	wrlong	#0, result1
196e8     27 12 06 F6 | 	mov	arg01, #39
196ec     00 14 06 F6 | 	mov	arg02, #0
196f0     7C 6E B0 FD | 	call	#_printerror
196f4     F0 00 90 FD | 	jmp	#LR__2074
196f8                 | LR__2070
196f8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
196f8     0C 4E 05 F1 | 	add	fp, #12
196fc     A7 FE 09 FB | 	rdlong	result3, fp wz
19700     0C 4E 85 F1 | 	sub	fp, #12
19704     30 00 90 5D |  if_ne	jmp	#LR__2071
19708     51 00 00 FF 
1970c     4C E5 05 F1 | 	add	objptr, ##41804
19710     F2 26 02 FB | 	rdlong	local01, objptr
19714     51 00 00 FF 
19718     4C E5 85 F1 | 	sub	objptr, ##41804
1971c     A7 26 62 FC | 	wrlong	local01, fp
19720     08 4E 05 F1 | 	add	fp, #8
19724     A7 3A 68 FC | 	wrlong	#29, fp
19728     08 4E 85 F1 | 	sub	fp, #8
1972c     A7 12 02 F6 | 	mov	arg01, fp
19730     F0 34 BF FD | 	call	#_push
19734     B0 00 90 FD | 	jmp	#LR__2074
19738                 | LR__2071
19738     50 34 BF FD | 	call	#_pop
1973c     A7 FA 61 FC | 	wrlong	result1, fp
19740     04 4E 05 F1 | 	add	fp, #4
19744     A7 FC 61 FC | 	wrlong	result2, fp
19748     04 4E 05 F1 | 	add	fp, #4
1974c     A7 FE 61 FC | 	wrlong	result3, fp
19750                 | ' t1=pop()
19750                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
19750     08 4E 85 F1 | 	sub	fp, #8
19754     1C FE 0D F2 | 	cmp	result3, #28 wz
19758     08 4E 05 51 |  if_ne	add	fp, #8
1975c     A7 26 02 5B |  if_ne	rdlong	local01, fp
19760     08 4E 85 51 |  if_ne	sub	fp, #8
19764     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
19768     70 00 90 5D |  if_ne	jmp	#LR__2073
1976c     A7 26 02 FB | 	rdlong	local01, fp
19770     52 00 00 FF 
19774     18 E4 05 F1 | 	add	objptr, ##42008
19778     F2 26 62 FC | 	wrlong	local01, objptr
1977c                 | '   q=t1.result.uresult
1977c                 | '   if q<7 then 
1977c     52 00 00 FF 
19780     18 E4 85 F1 | 	sub	objptr, ##42008
19784     07 26 56 F2 | 	cmps	local01, #7 wc
19788     40 00 90 3D |  if_ae	jmp	#LR__2072
1978c     52 00 00 FF 
19790     18 E4 05 F1 | 	add	objptr, ##42008
19794     F2 26 02 FB | 	rdlong	local01, objptr
19798     02 26 66 F0 | 	shl	local01, #2
1979c     CC E4 85 F1 | 	sub	objptr, #204
197a0     F2 26 02 F1 | 	add	local01, objptr
197a4     13 27 02 FB | 	rdlong	local01, local01
197a8     A7 26 62 FC | 	wrlong	local01, fp
197ac     08 4E 05 F1 | 	add	fp, #8
197b0     A7 3A 68 FC | 	wrlong	#29, fp
197b4     08 4E 85 F1 | 	sub	fp, #8
197b8     A7 12 02 F6 | 	mov	arg01, fp
197bc     51 00 00 FF 
197c0     4C E5 85 F1 | 	sub	objptr, ##41804
197c4     5C 34 BF FD | 	call	#_push
197c8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
197c8     1C 00 90 FD | 	jmp	#LR__2074
197cc                 | LR__2072
197cc     29 12 06 F6 | 	mov	arg01, #41
197d0     00 14 06 F6 | 	mov	arg02, #0
197d4     98 6D B0 FD | 	call	#_printerror
197d8                 | '      printerror(41) : return
197d8     0C 00 90 FD | 	jmp	#LR__2074
197dc                 | LR__2073
197dc     29 12 06 F6 | 	mov	arg01, #41
197e0     00 14 06 F6 | 	mov	arg02, #0
197e4     88 6D B0 FD | 	call	#_printerror
197e8                 | LR__2074
197e8     A7 F0 03 F6 | 	mov	ptra, fp
197ec     B2 00 A0 FD | 	call	#popregs_
197f0                 | _do_strig_ret
197f0     2D 00 64 FD | 	ret
197f4                 | 
197f4                 | ' 
197f4                 | ' ' ------------------ tan
197f4                 | ' 
197f4                 | ' sub do_tan
197f4                 | _do_tan
197f4     01 4A 05 F6 | 	mov	COUNT_, #1
197f8     A8 00 A0 FD | 	call	#pushregs_
197fc     10 F0 07 F1 | 	add	ptra, #16
19800     4A 00 00 FF 
19804     80 E4 05 F1 | 	add	objptr, ##38016
19808     F2 26 02 FB | 	rdlong	local01, objptr
1980c     13 17 02 F6 | 	mov	arg03, local01
19810     01 16 66 F0 | 	shl	arg03, #1
19814     13 17 02 F1 | 	add	arg03, local01
19818     02 16 66 F0 | 	shl	arg03, #2
1981c     03 00 00 FF 
19820     04 E4 85 F1 | 	sub	objptr, ##1540
19824     F2 16 02 F1 | 	add	arg03, objptr
19828     0B 17 02 FB | 	rdlong	arg03, arg03
1982c     0C 4E 05 F1 | 	add	fp, #12
19830     A7 16 62 FC | 	wrlong	arg03, fp
19834                 | ' 
19834                 | ' numpar=compiledline(lineptr_e).result.uresult
19834                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
19834     0C 4E 85 F1 | 	sub	fp, #12
19838     02 16 16 F2 | 	cmp	arg03, #2 wc
1983c     47 00 00 FF 
19840     7C E4 85 F1 | 	sub	objptr, ##36476
19844     0C 4E 05 C1 |  if_b	add	fp, #12
19848     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1984c     0C 4E 85 C1 |  if_b	sub	fp, #12
19850     40 00 90 4D |  if_c_and_nz	jmp	#LR__2080
19854     00 12 06 F6 | 	mov	arg01, #0
19858     E0 03 B1 FD | 	call	#__system___getiolock_0579
1985c     FD 12 02 F6 | 	mov	arg01, result1
19860     B0 A6 B0 FD | 	call	#__system___lockmem
19864     A2 01 00 FF 
19868     E8 14 06 F6 | 	mov	arg02, ##@LR__5796
1986c     00 12 06 F6 | 	mov	arg01, #0
19870     00 16 06 F6 | 	mov	arg03, #0
19874     90 B3 B0 FD | 	call	#__system___basic_print_string
19878     00 12 06 F6 | 	mov	arg01, #0
1987c     BC 03 B1 FD | 	call	#__system___getiolock_0579
19880     FD 00 68 FC | 	wrlong	#0, result1
19884     27 12 06 F6 | 	mov	arg01, #39
19888     00 14 06 F6 | 	mov	arg02, #0
1988c     E0 6C B0 FD | 	call	#_printerror
19890     64 00 90 FD | 	jmp	#LR__2081
19894                 | LR__2080
19894     F4 32 BF FD | 	call	#_pop
19898     A7 FA 61 FC | 	wrlong	result1, fp
1989c     04 4E 05 F1 | 	add	fp, #4
198a0     A7 FC 61 FC | 	wrlong	result2, fp
198a4     04 4E 05 F1 | 	add	fp, #4
198a8     A7 FE 61 FC | 	wrlong	result3, fp
198ac     08 4E 85 F1 | 	sub	fp, #8
198b0     51 00 00 FF 
198b4     BC E5 05 F1 | 	add	objptr, ##41916
198b8     F2 26 02 FB | 	rdlong	local01, objptr
198bc     51 00 00 FF 
198c0     BC E5 85 F1 | 	sub	objptr, ##41916
198c4     A7 12 02 F6 | 	mov	arg01, fp
198c8     60 35 BF FD | 	call	#_converttofloat
198cc     FD 14 02 F6 | 	mov	arg02, result1
198d0     13 13 02 F6 | 	mov	arg01, local01
198d4     B4 D4 B0 FD | 	call	#__system___float_mul
198d8     FD 12 02 F6 | 	mov	arg01, result1
198dc     58 DF B0 FD | 	call	#__system____builtin_tanf
198e0     A7 FA 61 FC | 	wrlong	result1, fp
198e4     08 4E 05 F1 | 	add	fp, #8
198e8     A7 3C 68 FC | 	wrlong	#30, fp
198ec     08 4E 85 F1 | 	sub	fp, #8
198f0     A7 12 02 F6 | 	mov	arg01, fp
198f4     2C 33 BF FD | 	call	#_push
198f8                 | LR__2081
198f8     A7 F0 03 F6 | 	mov	ptra, fp
198fc     B2 00 A0 FD | 	call	#popregs_
19900                 | _do_tan_ret
19900     2D 00 64 FD | 	ret
19904                 | 
19904                 | ' 
19904                 | ' ' ------------------ val
19904                 | ' 
19904                 | ' sub do_val
19904                 | _do_val
19904     03 4A 05 F6 | 	mov	COUNT_, #3
19908     A8 00 A0 FD | 	call	#pushregs_
1990c     20 F0 07 F1 | 	add	ptra, #32
19910     4A 00 00 FF 
19914     80 E4 05 F1 | 	add	objptr, ##38016
19918     F2 16 02 FB | 	rdlong	arg03, objptr
1991c     0B 27 02 F6 | 	mov	local01, arg03
19920     01 26 66 F0 | 	shl	local01, #1
19924     0B 27 02 F1 | 	add	local01, arg03
19928     02 26 66 F0 | 	shl	local01, #2
1992c     03 00 00 FF 
19930     04 E4 85 F1 | 	sub	objptr, ##1540
19934     F2 26 02 F1 | 	add	local01, objptr
19938     13 17 02 FB | 	rdlong	arg03, local01
1993c     0C 4E 05 F1 | 	add	fp, #12
19940     A7 16 62 FC | 	wrlong	arg03, fp
19944                 | ' 
19944                 | ' numpar=compiledline(lineptr_e).result.uresult
19944                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
19944     0C 4E 85 F1 | 	sub	fp, #12
19948     02 16 16 F2 | 	cmp	arg03, #2 wc
1994c     47 00 00 FF 
19950     7C E4 85 F1 | 	sub	objptr, ##36476
19954     0C 4E 05 C1 |  if_b	add	fp, #12
19958     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1995c     0C 4E 85 C1 |  if_b	sub	fp, #12
19960     40 00 90 4D |  if_c_and_nz	jmp	#LR__2090
19964     00 12 06 F6 | 	mov	arg01, #0
19968     D0 02 B1 FD | 	call	#__system___getiolock_0579
1996c     FD 12 02 F6 | 	mov	arg01, result1
19970     A0 A5 B0 FD | 	call	#__system___lockmem
19974     A2 01 00 FF 
19978     EE 14 06 F6 | 	mov	arg02, ##@LR__5797
1997c     00 12 06 F6 | 	mov	arg01, #0
19980     00 16 06 F6 | 	mov	arg03, #0
19984     80 B2 B0 FD | 	call	#__system___basic_print_string
19988     00 12 06 F6 | 	mov	arg01, #0
1998c     AC 02 B1 FD | 	call	#__system___getiolock_0579
19990     FD 00 68 FC | 	wrlong	#0, result1
19994     27 12 06 F6 | 	mov	arg01, #39
19998     00 14 06 F6 | 	mov	arg02, #0
1999c     D0 6B B0 FD | 	call	#_printerror
199a0     60 02 90 FD | 	jmp	#LR__2103
199a4                 | LR__2090
199a4     E4 31 BF FD | 	call	#_pop
199a8     FF 16 02 F6 | 	mov	arg03, result3
199ac     A7 FA 61 FC | 	wrlong	result1, fp
199b0     04 4E 05 F1 | 	add	fp, #4
199b4     A7 FC 61 FC | 	wrlong	result2, fp
199b8     04 4E 05 F1 | 	add	fp, #4
199bc     A7 16 62 FC | 	wrlong	arg03, fp
199c0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
199c0     08 4E 85 F1 | 	sub	fp, #8
199c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
199c8     18 00 90 5D |  if_ne	jmp	#LR__2091
199cc     A7 12 02 FB | 	rdlong	arg01, fp
199d0     30 33 BF FD | 	call	#_convertstring
199d4     A7 FA 61 FC | 	wrlong	result1, fp
199d8     08 4E 05 F1 | 	add	fp, #8
199dc     A7 3E 68 FC | 	wrlong	#31, fp
199e0     08 4E 85 F1 | 	sub	fp, #8
199e4                 | LR__2091
199e4                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
199e4     08 4E 05 F1 | 	add	fp, #8
199e8     A7 16 02 FB | 	rdlong	arg03, fp
199ec     08 4E 85 F1 | 	sub	fp, #8
199f0     1F 16 0E F2 | 	cmp	arg03, #31 wz
199f4     40 00 90 AD |  if_e	jmp	#LR__2092
199f8     00 12 06 F6 | 	mov	arg01, #0
199fc     3C 02 B1 FD | 	call	#__system___getiolock_0579
19a00     FD 12 02 F6 | 	mov	arg01, result1
19a04     0C A5 B0 FD | 	call	#__system___lockmem
19a08     A2 01 00 FF 
19a0c     F4 14 06 F6 | 	mov	arg02, ##@LR__5798
19a10     00 12 06 F6 | 	mov	arg01, #0
19a14     00 16 06 F6 | 	mov	arg03, #0
19a18     EC B1 B0 FD | 	call	#__system___basic_print_string
19a1c     00 12 06 F6 | 	mov	arg01, #0
19a20     18 02 B1 FD | 	call	#__system___getiolock_0579
19a24     FD 00 68 FC | 	wrlong	#0, result1
19a28     0F 12 06 F6 | 	mov	arg01, #15
19a2c     00 14 06 F6 | 	mov	arg02, #0
19a30     3C 6B B0 FD | 	call	#_printerror
19a34     CC 01 90 FD | 	jmp	#LR__2103
19a38                 | LR__2092
19a38                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
19a38     A7 12 02 FB | 	rdlong	arg01, fp
19a3c     01 14 06 F6 | 	mov	arg02, #1
19a40     4C C5 B0 FD | 	call	#__system__Left_S
19a44     FD 12 02 F6 | 	mov	arg01, result1
19a48     A2 01 00 FF 
19a4c     FA 14 06 F6 | 	mov	arg02, ##@LR__5799
19a50     E8 A4 B0 FD | 	call	#__system___string_cmp
19a54     00 FA 0D F2 | 	cmp	result1, #0 wz
19a58     48 00 90 5D |  if_ne	jmp	#LR__2095
19a5c     A2 01 00 FF 
19a60     FC 26 06 F6 | 	mov	local01, ##@LR__5800
19a64     A7 16 02 FB | 	rdlong	arg03, fp
19a68     0B 13 02 F6 | 	mov	arg01, arg03
19a6c     09 29 02 F6 | 	mov	local02, arg01
19a70     97 06 48 FB | 	callpa	#(@LR__2094-@LR__2093)>>2,fcache_load_ptr_
19a74                 | LR__2093
19a74     14 FB C9 FA | 	rdbyte	result1, local02 wz
19a78     01 28 06 51 |  if_ne	add	local02, #1
19a7c     F4 FF 9F 5D |  if_ne	jmp	#LR__2093
19a80                 | LR__2094
19a80     09 29 82 F1 | 	sub	local02, arg01
19a84     14 15 02 F6 | 	mov	arg02, local02
19a88     01 14 86 F1 | 	sub	arg02, #1
19a8c     0B 13 02 F6 | 	mov	arg01, arg03
19a90     84 C5 B0 FD | 	call	#__system__Right_S
19a94     FD 14 02 F6 | 	mov	arg02, result1
19a98     13 13 02 F6 | 	mov	arg01, local01
19a9c     D0 A4 B0 FD | 	call	#__system___string_concat
19aa0     A7 FA 61 FC | 	wrlong	result1, fp
19aa4                 | LR__2095
19aa4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
19aa4     A7 12 02 FB | 	rdlong	arg01, fp
19aa8     01 14 06 F6 | 	mov	arg02, #1
19aac     E0 C4 B0 FD | 	call	#__system__Left_S
19ab0     FD 12 02 F6 | 	mov	arg01, result1
19ab4     A2 01 00 FF 
19ab8     FF 14 06 F6 | 	mov	arg02, ##@LR__5801
19abc     7C A4 B0 FD | 	call	#__system___string_cmp
19ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
19ac4     48 00 90 5D |  if_ne	jmp	#LR__2098
19ac8     A2 01 00 FF 
19acc     01 27 06 F6 | 	mov	local01, ##@LR__5802
19ad0     A7 16 02 FB | 	rdlong	arg03, fp
19ad4     0B 13 02 F6 | 	mov	arg01, arg03
19ad8     09 29 02 F6 | 	mov	local02, arg01
19adc     97 06 48 FB | 	callpa	#(@LR__2097-@LR__2096)>>2,fcache_load_ptr_
19ae0                 | LR__2096
19ae0     14 FB C9 FA | 	rdbyte	result1, local02 wz
19ae4     01 28 06 51 |  if_ne	add	local02, #1
19ae8     F4 FF 9F 5D |  if_ne	jmp	#LR__2096
19aec                 | LR__2097
19aec     09 29 82 F1 | 	sub	local02, arg01
19af0     14 15 02 F6 | 	mov	arg02, local02
19af4     01 14 86 F1 | 	sub	arg02, #1
19af8     0B 13 02 F6 | 	mov	arg01, arg03
19afc     18 C5 B0 FD | 	call	#__system__Right_S
19b00     FD 14 02 F6 | 	mov	arg02, result1
19b04     13 13 02 F6 | 	mov	arg01, local01
19b08     64 A4 B0 FD | 	call	#__system___string_concat
19b0c     A7 FA 61 FC | 	wrlong	result1, fp
19b10                 | LR__2098
19b10     A7 12 02 FB | 	rdlong	arg01, fp
19b14     80 DA B0 FD | 	call	#__system____builtin_atof
19b18     1C 4E 05 F1 | 	add	fp, #28
19b1c     A7 FA 61 FC | 	wrlong	result1, fp
19b20     1C 4E 85 F1 | 	sub	fp, #28
19b24     A7 12 02 FB | 	rdlong	arg01, fp
19b28     00 14 06 F6 | 	mov	arg02, #0
19b2c     D4 D8 B0 FD | 	call	#__system____builtin_atoi
19b30     18 4E 05 F1 | 	add	fp, #24
19b34     A7 FA 61 FC | 	wrlong	result1, fp
19b38                 | ' fval=val(t1.result.sresult)
19b38                 | ' ival=val%(t1.result.sresult)
19b38                 | ' if fval=ival then
19b38     04 4E 05 F1 | 	add	fp, #4
19b3c     A7 26 02 FB | 	rdlong	local01, fp
19b40     1C 4E 85 F1 | 	sub	fp, #28
19b44     FD 12 52 F6 | 	abs	arg01, result1 wc
19b48     1F 2A C6 C9 |  if_b	decod	local03, #31
19b4c     00 2A 06 36 |  if_ae	mov	local03, #0
19b50     34 CE B0 FD | 	call	#__system___float_fromuns
19b54     15 FB 61 F5 | 	xor	result1, local03
19b58     FD 14 02 F6 | 	mov	arg02, result1
19b5c     13 13 02 F6 | 	mov	arg01, local01
19b60     01 16 06 F6 | 	mov	arg03, #1
19b64     58 D6 B0 FD | 	call	#__system___float_cmp
19b68     00 FA 0D F2 | 	cmp	result1, #0 wz
19b6c     20 00 90 5D |  if_ne	jmp	#LR__2099
19b70     18 4E 05 F1 | 	add	fp, #24
19b74     A7 26 02 FB | 	rdlong	local01, fp
19b78     18 4E 85 F1 | 	sub	fp, #24
19b7c     A7 26 62 FC | 	wrlong	local01, fp
19b80     08 4E 05 F1 | 	add	fp, #8
19b84     A7 38 68 FC | 	wrlong	#28, fp
19b88     08 4E 85 F1 | 	sub	fp, #8
19b8c     6C 00 90 FD | 	jmp	#LR__2102
19b90                 | LR__2099
19b90                 | '   if fval=0 andalso ival<>0 then
19b90     1C 4E 05 F1 | 	add	fp, #28
19b94     A7 12 02 FB | 	rdlong	arg01, fp
19b98     1C 4E 85 F1 | 	sub	fp, #28
19b9c     00 14 06 F6 | 	mov	arg02, #0
19ba0     01 16 06 F6 | 	mov	arg03, #1
19ba4     18 D6 B0 FD | 	call	#__system___float_cmp
19ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
19bac     30 00 90 5D |  if_ne	jmp	#LR__2100
19bb0     18 4E 05 F1 | 	add	fp, #24
19bb4     A7 26 0A FB | 	rdlong	local01, fp wz
19bb8     18 4E 85 F1 | 	sub	fp, #24
19bbc     20 00 90 AD |  if_e	jmp	#LR__2100
19bc0     18 4E 05 F1 | 	add	fp, #24
19bc4     A7 26 02 FB | 	rdlong	local01, fp
19bc8     18 4E 85 F1 | 	sub	fp, #24
19bcc     A7 26 62 FC | 	wrlong	local01, fp
19bd0     08 4E 05 F1 | 	add	fp, #8
19bd4     A7 38 68 FC | 	wrlong	#28, fp
19bd8     08 4E 85 F1 | 	sub	fp, #8
19bdc     1C 00 90 FD | 	jmp	#LR__2101
19be0                 | LR__2100
19be0     1C 4E 05 F1 | 	add	fp, #28
19be4     A7 26 02 FB | 	rdlong	local01, fp
19be8     1C 4E 85 F1 | 	sub	fp, #28
19bec     A7 26 62 FC | 	wrlong	local01, fp
19bf0     08 4E 05 F1 | 	add	fp, #8
19bf4     A7 3C 68 FC | 	wrlong	#30, fp
19bf8     08 4E 85 F1 | 	sub	fp, #8
19bfc                 | LR__2101
19bfc                 | LR__2102
19bfc     A7 12 02 F6 | 	mov	arg01, fp
19c00     20 30 BF FD | 	call	#_push
19c04                 | LR__2103
19c04     A7 F0 03 F6 | 	mov	ptra, fp
19c08     B2 00 A0 FD | 	call	#popregs_
19c0c                 | _do_val_ret
19c0c     2D 00 64 FD | 	ret
19c10                 | 
19c10                 | ' 
19c10                 | ' ' ------------------ waitclock
19c10                 | ' 
19c10                 | ' sub do_waitclock
19c10                 | _do_waitclock
19c10     51 00 00 FF 
19c14     A8 E5 05 F1 | 	add	objptr, ##41896
19c18     F2 00 02 FB | 	rdlong	_var01, objptr
19c1c                 | ' c=hkcnt
19c1c                 | ' do: loop until hkcnt<>c
19c1c                 | LR__2110
19c1c     F2 02 02 FB | 	rdlong	_var02, objptr
19c20     00 03 0A F2 | 	cmp	_var02, _var01 wz
19c24     F4 FF 9F AD |  if_e	jmp	#LR__2110
19c28     51 00 00 FF 
19c2c     A8 E5 85 F1 | 	sub	objptr, ##41896
19c30                 | _do_waitclock_ret
19c30     2D 00 64 FD | 	ret
19c34                 | 
19c34                 | ' 
19c34                 | ' ' ------------------ waitms
19c34                 | ' 
19c34                 | ' sub do_waitms
19c34                 | _do_waitms
19c34     01 4A 05 F6 | 	mov	COUNT_, #1
19c38     A8 00 A0 FD | 	call	#pushregs_
19c3c     18 F0 07 F1 | 	add	ptra, #24
19c40     48 2F BF FD | 	call	#_pop
19c44     A7 FA 61 FC | 	wrlong	result1, fp
19c48     04 4E 05 F1 | 	add	fp, #4
19c4c     A7 FC 61 FC | 	wrlong	result2, fp
19c50     04 4E 05 F1 | 	add	fp, #4
19c54     A7 FE 61 FC | 	wrlong	result3, fp
19c58     08 4E 85 F1 | 	sub	fp, #8
19c5c     A7 12 02 F6 | 	mov	arg01, fp
19c60     0C 31 BF FD | 	call	#_converttoint
19c64     0C 4E 05 F1 | 	add	fp, #12
19c68     A7 FA 61 FC | 	wrlong	result1, fp
19c6c                 | ' 
19c6c                 | ' t1=pop()  
19c6c                 | ' t=converttoint(t1)
19c6c                 | ' if t<0 then return
19c6c     0C 4E 85 F1 | 	sub	fp, #12
19c70     00 FA 55 F2 | 	cmps	result1, #0 wc
19c74     E4 00 90 CD |  if_b	jmp	#LR__2126
19c78                 | ' if t < 1000 then 
19c78     0C 4E 05 F1 | 	add	fp, #12
19c7c     A7 12 02 FB | 	rdlong	arg01, fp
19c80     0C 4E 85 F1 | 	sub	fp, #12
19c84     01 00 00 FF 
19c88     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
19c8c     14 00 90 3D |  if_ae	jmp	#LR__2120
19c90     0C 4E 05 F1 | 	add	fp, #12
19c94     A7 12 02 FB | 	rdlong	arg01, fp
19c98     0C 4E 85 F1 | 	sub	fp, #12
19c9c     68 A5 B0 FD | 	call	#__system___waitms
19ca0     B8 00 90 FD | 	jmp	#LR__2125
19ca4                 | LR__2120
19ca4     10 4E 05 F1 | 	add	fp, #16
19ca8     A7 02 68 FC | 	wrlong	#1, fp
19cac     04 4E 85 F1 | 	sub	fp, #4
19cb0     A7 12 02 FB | 	rdlong	arg01, fp
19cb4     09 13 52 F6 | 	abs	arg01, arg01 wc
19cb8     01 00 00 FF 
19cbc     E8 13 16 FD | 	qdiv	arg01, ##1000
19cc0                 | '   for i=1 to t/1000
19cc0     0C 4E 85 F1 | 	sub	fp, #12
19cc4     18 26 62 FD | 	getqx	local01
19cc8     13 27 82 F6 | 	negc	local01, local01
19ccc     01 26 06 F1 | 	add	local01, #1
19cd0                 | LR__2121
19cd0     10 4E 05 F1 | 	add	fp, #16
19cd4     A7 12 02 FB | 	rdlong	arg01, fp
19cd8     10 4E 85 F1 | 	sub	fp, #16
19cdc     13 13 52 F2 | 	cmps	arg01, local01 wc
19ce0     54 00 90 3D |  if_ae	jmp	#LR__2124
19ce4     01 00 00 FF 
19ce8     E8 13 06 F6 | 	mov	arg01, ##1000
19cec     18 A5 B0 FD | 	call	#__system___waitms
19cf0                 | '     waitms(1000)
19cf0                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
19cf0     E0 12 06 F6 | 	mov	arg01, #224
19cf4     6C 99 B0 FD | 	call	#_usbnew_spin2_keystate
19cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
19cfc     10 00 90 5D |  if_ne	jmp	#LR__2122
19d00     E4 12 06 F6 | 	mov	arg01, #228
19d04     5C 99 B0 FD | 	call	#_usbnew_spin2_keystate
19d08     00 FA 0D F2 | 	cmp	result1, #0 wz
19d0c     10 00 90 AD |  if_e	jmp	#LR__2123
19d10                 | LR__2122
19d10     06 12 06 F6 | 	mov	arg01, #6
19d14     4C 99 B0 FD | 	call	#_usbnew_spin2_keystate
19d18     00 FA 0D F2 | 	cmp	result1, #0 wz
19d1c     3C 00 90 5D |  if_ne	jmp	#LR__2126
19d20                 | LR__2123
19d20     10 4E 05 F1 | 	add	fp, #16
19d24     A7 12 02 FB | 	rdlong	arg01, fp
19d28     01 12 06 F1 | 	add	arg01, #1
19d2c     A7 12 62 FC | 	wrlong	arg01, fp
19d30     10 4E 85 F1 | 	sub	fp, #16
19d34     98 FF 9F FD | 	jmp	#LR__2121
19d38                 | LR__2124
19d38     0C 4E 05 F1 | 	add	fp, #12
19d3c     A7 26 02 FB | 	rdlong	local01, fp
19d40     13 27 52 F6 | 	abs	local01, local01 wc
19d44     01 00 00 FF 
19d48     E8 27 16 FD | 	qdiv	local01, ##1000
19d4c     0C 4E 85 F1 | 	sub	fp, #12
19d50     19 26 62 FD | 	getqy	local01
19d54     13 13 82 F6 | 	negc	arg01, local01
19d58     AC A4 B0 FD | 	call	#__system___waitms
19d5c                 | LR__2125
19d5c                 | LR__2126
19d5c     A7 F0 03 F6 | 	mov	ptra, fp
19d60     B2 00 A0 FD | 	call	#popregs_
19d64                 | _do_waitms_ret
19d64     2D 00 64 FD | 	ret
19d68                 | 
19d68                 | ' 
19d68                 | ' ' ------------------ waitvbl
19d68                 | ' 
19d68                 | ' sub do_waitvbl
19d68                 | _do_waitvbl
19d68     01 12 06 F6 | 	mov	arg01, #1
19d6c     F8 84 B0 FD | 	call	#_hg010b_spin2_waitvbl
19d70                 | _do_waitvbl_ret
19d70     2D 00 64 FD | 	ret
19d74                 | 
19d74                 | ' 
19d74                 | ' ' ------------------ wrpin
19d74                 | ' 
19d74                 | ' sub do_wrpin
19d74                 | _do_wrpin
19d74     01 4A 05 F6 | 	mov	COUNT_, #1
19d78     A8 00 A0 FD | 	call	#pushregs_
19d7c     18 F0 07 F1 | 	add	ptra, #24
19d80     08 2E BF FD | 	call	#_pop
19d84     FD 14 02 F6 | 	mov	arg02, result1
19d88     FE 12 02 F6 | 	mov	arg01, result2
19d8c     FF 26 02 F6 | 	mov	local01, result3
19d90     A7 14 62 FC | 	wrlong	arg02, fp
19d94     04 4E 05 F1 | 	add	fp, #4
19d98     A7 12 62 FC | 	wrlong	arg01, fp
19d9c     04 4E 05 F1 | 	add	fp, #4
19da0     A7 26 62 FC | 	wrlong	local01, fp
19da4     08 4E 85 F1 | 	sub	fp, #8
19da8     E0 2D BF FD | 	call	#_pop
19dac     FF 26 02 F6 | 	mov	local01, result3
19db0     0C 4E 05 F1 | 	add	fp, #12
19db4     A7 FA 61 FC | 	wrlong	result1, fp
19db8     04 4E 05 F1 | 	add	fp, #4
19dbc     A7 FC 61 FC | 	wrlong	result2, fp
19dc0     04 4E 05 F1 | 	add	fp, #4
19dc4     A7 26 62 FC | 	wrlong	local01, fp
19dc8     08 4E 85 F1 | 	sub	fp, #8
19dcc     A7 12 02 F6 | 	mov	arg01, fp
19dd0     0C 4E 85 F1 | 	sub	fp, #12
19dd4     98 2F BF FD | 	call	#_converttoint
19dd8     FD 26 02 F6 | 	mov	local01, result1
19ddc     A7 12 02 F6 | 	mov	arg01, fp
19de0     8C 2F BF FD | 	call	#_converttoint
19de4     13 FB 01 FC | 	wrpin	result1, local01
19de8     A7 F0 03 F6 | 	mov	ptra, fp
19dec     B2 00 A0 FD | 	call	#popregs_
19df0                 | _do_wrpin_ret
19df0     2D 00 64 FD | 	ret
19df4                 | 
19df4                 | ' 
19df4                 | ' ' ------------------ wxpin
19df4                 | ' 
19df4                 | ' sub do_wxpin
19df4                 | _do_wxpin
19df4     01 4A 05 F6 | 	mov	COUNT_, #1
19df8     A8 00 A0 FD | 	call	#pushregs_
19dfc     18 F0 07 F1 | 	add	ptra, #24
19e00     88 2D BF FD | 	call	#_pop
19e04     FD 14 02 F6 | 	mov	arg02, result1
19e08     FE 12 02 F6 | 	mov	arg01, result2
19e0c     FF 26 02 F6 | 	mov	local01, result3
19e10     A7 14 62 FC | 	wrlong	arg02, fp
19e14     04 4E 05 F1 | 	add	fp, #4
19e18     A7 12 62 FC | 	wrlong	arg01, fp
19e1c     04 4E 05 F1 | 	add	fp, #4
19e20     A7 26 62 FC | 	wrlong	local01, fp
19e24     08 4E 85 F1 | 	sub	fp, #8
19e28     60 2D BF FD | 	call	#_pop
19e2c     FF 26 02 F6 | 	mov	local01, result3
19e30     0C 4E 05 F1 | 	add	fp, #12
19e34     A7 FA 61 FC | 	wrlong	result1, fp
19e38     04 4E 05 F1 | 	add	fp, #4
19e3c     A7 FC 61 FC | 	wrlong	result2, fp
19e40     04 4E 05 F1 | 	add	fp, #4
19e44     A7 26 62 FC | 	wrlong	local01, fp
19e48     08 4E 85 F1 | 	sub	fp, #8
19e4c     A7 12 02 F6 | 	mov	arg01, fp
19e50     0C 4E 85 F1 | 	sub	fp, #12
19e54     18 2F BF FD | 	call	#_converttoint
19e58     FD 26 02 F6 | 	mov	local01, result1
19e5c     A7 12 02 F6 | 	mov	arg01, fp
19e60     0C 2F BF FD | 	call	#_converttoint
19e64     13 FB 11 FC | 	wxpin	result1, local01
19e68     A7 F0 03 F6 | 	mov	ptra, fp
19e6c     B2 00 A0 FD | 	call	#popregs_
19e70                 | _do_wxpin_ret
19e70     2D 00 64 FD | 	ret
19e74                 | 
19e74                 | ' 
19e74                 | ' ' ------------------ wypin
19e74                 | ' 
19e74                 | ' sub do_wypin
19e74                 | _do_wypin
19e74     01 4A 05 F6 | 	mov	COUNT_, #1
19e78     A8 00 A0 FD | 	call	#pushregs_
19e7c     18 F0 07 F1 | 	add	ptra, #24
19e80     08 2D BF FD | 	call	#_pop
19e84     FD 14 02 F6 | 	mov	arg02, result1
19e88     FE 12 02 F6 | 	mov	arg01, result2
19e8c     FF 26 02 F6 | 	mov	local01, result3
19e90     A7 14 62 FC | 	wrlong	arg02, fp
19e94     04 4E 05 F1 | 	add	fp, #4
19e98     A7 12 62 FC | 	wrlong	arg01, fp
19e9c     04 4E 05 F1 | 	add	fp, #4
19ea0     A7 26 62 FC | 	wrlong	local01, fp
19ea4     08 4E 85 F1 | 	sub	fp, #8
19ea8     E0 2C BF FD | 	call	#_pop
19eac     FF 26 02 F6 | 	mov	local01, result3
19eb0     0C 4E 05 F1 | 	add	fp, #12
19eb4     A7 FA 61 FC | 	wrlong	result1, fp
19eb8     04 4E 05 F1 | 	add	fp, #4
19ebc     A7 FC 61 FC | 	wrlong	result2, fp
19ec0     04 4E 05 F1 | 	add	fp, #4
19ec4     A7 26 62 FC | 	wrlong	local01, fp
19ec8     08 4E 85 F1 | 	sub	fp, #8
19ecc     A7 12 02 F6 | 	mov	arg01, fp
19ed0     0C 4E 85 F1 | 	sub	fp, #12
19ed4     98 2E BF FD | 	call	#_converttoint
19ed8     FD 26 02 F6 | 	mov	local01, result1
19edc     A7 12 02 F6 | 	mov	arg01, fp
19ee0     8C 2E BF FD | 	call	#_converttoint
19ee4     13 FB 21 FC | 	wypin	result1, local01
19ee8     A7 F0 03 F6 | 	mov	ptra, fp
19eec     B2 00 A0 FD | 	call	#popregs_
19ef0                 | _do_wypin_ret
19ef0     2D 00 64 FD | 	ret
19ef4                 | 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
19ef4                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
19ef4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' '------------------ Assign
19ef4                 | ' 
19ef4                 | ' sub do_assign
19ef4                 | _do_assign
19ef4     05 4A 05 F6 | 	mov	COUNT_, #5
19ef8     A8 00 A0 FD | 	call	#pushregs_
19efc     44 F0 07 F1 | 	add	ptra, #68
19f00     4A 00 00 FF 
19f04     80 E4 05 F1 | 	add	objptr, ##38016
19f08     F2 16 02 FB | 	rdlong	arg03, objptr
19f0c     0B 15 02 F6 | 	mov	arg02, arg03
19f10     01 14 66 F0 | 	shl	arg02, #1
19f14     0B 15 02 F1 | 	add	arg02, arg03
19f18     02 14 66 F0 | 	shl	arg02, #2
19f1c     03 00 00 FF 
19f20     04 E4 85 F1 | 	sub	objptr, ##1540
19f24     F2 14 02 F1 | 	add	arg02, objptr
19f28     0A 15 02 FB | 	rdlong	arg02, arg02
19f2c     18 4E 05 F1 | 	add	fp, #24
19f30     A7 14 62 FC | 	wrlong	arg02, fp
19f34                 | ' 
19f34                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
19f34                 | ' if variables(varnum).vartype<array_no_type then 
19f34     18 4E 85 F1 | 	sub	fp, #24
19f38     04 14 66 F0 | 	shl	arg02, #4
19f3c     32 00 00 FF 
19f40     84 E4 85 F1 | 	sub	objptr, ##25732
19f44     F2 14 02 F1 | 	add	arg02, objptr
19f48     0C 14 06 F1 | 	add	arg02, #12
19f4c     0A 17 02 FB | 	rdlong	arg03, arg02
19f50     00 17 16 F2 | 	cmp	arg03, #256 wc
19f54     14 00 00 FF 
19f58     F8 E5 85 F1 | 	sub	objptr, ##10744
19f5c     18 01 90 3D |  if_ae	jmp	#LR__2130
19f60     28 2C BF FD | 	call	#_pop
19f64     A7 FA 61 FC | 	wrlong	result1, fp
19f68     04 4E 05 F1 | 	add	fp, #4
19f6c     A7 FC 61 FC | 	wrlong	result2, fp
19f70     04 4E 05 F1 | 	add	fp, #4
19f74     A7 FE 61 FC | 	wrlong	result3, fp
19f78     08 4E 85 F1 | 	sub	fp, #8
19f7c     A7 16 02 FB | 	rdlong	arg03, fp
19f80     04 4E 05 F1 | 	add	fp, #4
19f84     A7 14 02 FB | 	rdlong	arg02, fp
19f88     14 4E 05 F1 | 	add	fp, #20
19f8c     A7 12 02 FB | 	rdlong	arg01, fp
19f90     04 12 66 F0 | 	shl	arg01, #4
19f94     14 00 00 FF 
19f98     F8 E5 05 F1 | 	add	objptr, ##10744
19f9c     F2 12 02 F1 | 	add	arg01, objptr
19fa0     04 12 06 F1 | 	add	arg01, #4
19fa4     09 17 62 FC | 	wrlong	arg03, arg01
19fa8     A7 16 02 FB | 	rdlong	arg03, fp
19fac     04 16 66 F0 | 	shl	arg03, #4
19fb0     F2 16 02 F1 | 	add	arg03, objptr
19fb4     08 16 06 F1 | 	add	arg03, #8
19fb8     0B 15 62 FC | 	wrlong	arg02, arg03
19fbc     A7 16 02 FB | 	rdlong	arg03, fp
19fc0     04 16 66 F0 | 	shl	arg03, #4
19fc4     F2 16 02 F1 | 	add	arg03, objptr
19fc8     10 4E 85 F1 | 	sub	fp, #16
19fcc     A7 14 02 FB | 	rdlong	arg02, fp
19fd0     0C 16 06 F1 | 	add	arg03, #12
19fd4     0B 15 62 FC | 	wrlong	arg02, arg03
19fd8                 | '   t1=pop() 
19fd8                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
19fd8                 | '   if variables(varnum).vartype<>result_string2 then return
19fd8     10 4E 05 F1 | 	add	fp, #16
19fdc     A7 16 02 FB | 	rdlong	arg03, fp
19fe0     18 4E 85 F1 | 	sub	fp, #24
19fe4     04 16 66 F0 | 	shl	arg03, #4
19fe8     F2 16 02 F1 | 	add	arg03, objptr
19fec     0C 16 06 F1 | 	add	arg03, #12
19ff0     0B 17 02 FB | 	rdlong	arg03, arg03
19ff4     2B 16 0E F2 | 	cmp	arg03, #43 wz
19ff8     14 00 00 FF 
19ffc     F8 E5 85 F1 | 	sub	objptr, ##10744
1a000     EC 04 90 5D |  if_ne	jmp	#LR__2153
1a004     18 4E 05 F1 | 	add	fp, #24
1a008     A7 16 02 FB | 	rdlong	arg03, fp
1a00c     0B 27 02 F6 | 	mov	local01, arg03
1a010     04 26 66 F0 | 	shl	local01, #4
1a014     14 00 00 FF 
1a018     F8 E5 05 F1 | 	add	objptr, ##10744
1a01c     F2 26 02 F1 | 	add	local01, objptr
1a020     18 4E 85 F1 | 	sub	fp, #24
1a024     04 16 66 F0 | 	shl	arg03, #4
1a028     F2 16 02 F1 | 	add	arg03, objptr
1a02c     04 16 06 F1 | 	add	arg03, #4
1a030     0B 13 02 FB | 	rdlong	arg01, arg03
1a034     14 00 00 FF 
1a038     F8 E5 85 F1 | 	sub	objptr, ##10744
1a03c     C4 2C BF FD | 	call	#_convertstring
1a040     04 26 06 F1 | 	add	local01, #4
1a044     13 FB 61 FC | 	wrlong	result1, local01
1a048     18 4E 05 F1 | 	add	fp, #24
1a04c     A7 26 02 FB | 	rdlong	local01, fp
1a050     18 4E 85 F1 | 	sub	fp, #24
1a054     04 26 66 F0 | 	shl	local01, #4
1a058     14 00 00 FF 
1a05c     F8 E5 05 F1 | 	add	objptr, ##10744
1a060     F2 26 02 F1 | 	add	local01, objptr
1a064     0C 26 06 F1 | 	add	local01, #12
1a068     13 3F 68 FC | 	wrlong	#31, local01
1a06c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1a06c                 | '   variables(varnum).vartype=result_string
1a06c                 | '   return
1a06c     14 00 00 FF 
1a070     F8 E5 85 F1 | 	sub	objptr, ##10744
1a074     78 04 90 FD | 	jmp	#LR__2153
1a078                 | LR__2130
1a078                 | ' for i=0 to 2 : arrid(i)=0 : next i
1a078     1C 4E 05 F1 | 	add	fp, #28
1a07c     A7 00 68 FC | 	wrlong	#0, fp
1a080     97 16 48 FB | 	callpa	#(@LR__2132-@LR__2131)>>2,fcache_load_ptr_
1a084                 | LR__2131
1a084     A7 26 02 FB | 	rdlong	local01, fp
1a088     02 26 66 F0 | 	shl	local01, #2
1a08c     18 4E 05 F1 | 	add	fp, #24
1a090     A7 26 02 F1 | 	add	local01, fp
1a094     13 01 68 FC | 	wrlong	#0, local01
1a098     18 4E 85 F1 | 	sub	fp, #24
1a09c     A7 26 02 FB | 	rdlong	local01, fp
1a0a0     01 26 06 F1 | 	add	local01, #1
1a0a4     A7 26 62 FC | 	wrlong	local01, fp
1a0a8     03 26 16 F2 | 	cmp	local01, #3 wc
1a0ac     D4 FF 9F CD |  if_b	jmp	#LR__2131
1a0b0                 | LR__2132
1a0b0     4A 00 00 FF 
1a0b4     80 E4 05 F1 | 	add	objptr, ##38016
1a0b8     F2 16 02 FB | 	rdlong	arg03, objptr
1a0bc     0B 27 02 F6 | 	mov	local01, arg03
1a0c0     01 26 66 F0 | 	shl	local01, #1
1a0c4     0B 27 02 F1 | 	add	local01, arg03
1a0c8     02 26 66 F0 | 	shl	local01, #2
1a0cc     03 00 00 FF 
1a0d0     04 E4 85 F1 | 	sub	objptr, ##1540
1a0d4     F2 26 02 F1 | 	add	local01, objptr
1a0d8     04 26 06 F1 | 	add	local01, #4
1a0dc     13 29 02 FB | 	rdlong	local02, local01
1a0e0     04 4E 05 F1 | 	add	fp, #4
1a0e4     A7 28 62 FC | 	wrlong	local02, fp
1a0e8     20 4E 85 F1 | 	sub	fp, #32
1a0ec     47 00 00 FF 
1a0f0     7C E4 85 F1 | 	sub	objptr, ##36476
1a0f4     94 2A BF FD | 	call	#_pop
1a0f8     A7 FA 61 FC | 	wrlong	result1, fp
1a0fc     04 4E 05 F1 | 	add	fp, #4
1a100     A7 FC 61 FC | 	wrlong	result2, fp
1a104     04 4E 05 F1 | 	add	fp, #4
1a108     A7 FE 61 FC | 	wrlong	result3, fp
1a10c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1a10c                 | ' t1=pop() ' var value
1a10c                 | ' if numpar>0 then
1a10c     18 4E 05 F1 | 	add	fp, #24
1a110     A7 2A 02 FB | 	rdlong	local03, fp
1a114     20 4E 85 F1 | 	sub	fp, #32
1a118     01 2A 16 F2 | 	cmp	local03, #1 wc
1a11c     78 00 90 CD |  if_b	jmp	#LR__2135
1a120                 | '   for i=numpar to 1 step -1
1a120     20 4E 05 F1 | 	add	fp, #32
1a124     A7 2C 0A FB | 	rdlong	local04, fp wz
1a128     04 4E 85 F1 | 	sub	fp, #4
1a12c     A7 2C 62 FC | 	wrlong	local04, fp
1a130     1C 4E 85 F1 | 	sub	fp, #28
1a134     60 00 90 AD |  if_e	jmp	#LR__2134
1a138                 | LR__2133
1a138     50 2A BF FD | 	call	#_pop
1a13c     0C 4E 05 F1 | 	add	fp, #12
1a140     A7 FA 61 FC | 	wrlong	result1, fp
1a144     04 4E 05 F1 | 	add	fp, #4
1a148     A7 FC 61 FC | 	wrlong	result2, fp
1a14c     04 4E 05 F1 | 	add	fp, #4
1a150     A7 FE 61 FC | 	wrlong	result3, fp
1a154     08 4E 05 F1 | 	add	fp, #8
1a158     A7 2A 02 FB | 	rdlong	local03, fp
1a15c     01 2A 86 F1 | 	sub	local03, #1
1a160     02 2A 66 F0 | 	shl	local03, #2
1a164     18 4E 05 F1 | 	add	fp, #24
1a168     A7 2A 02 F1 | 	add	local03, fp
1a16c     28 4E 85 F1 | 	sub	fp, #40
1a170     A7 12 02 F6 | 	mov	arg01, fp
1a174     0C 4E 85 F1 | 	sub	fp, #12
1a178     F4 2B BF FD | 	call	#_converttoint
1a17c     15 FB 61 FC | 	wrlong	result1, local03
1a180     1C 4E 05 F1 | 	add	fp, #28
1a184     A7 2C 02 FB | 	rdlong	local04, fp
1a188     01 2C 8E F1 | 	sub	local04, #1 wz
1a18c     A7 2C 62 FC | 	wrlong	local04, fp
1a190     1C 4E 85 F1 | 	sub	fp, #28
1a194     A0 FF 9F 5D |  if_ne	jmp	#LR__2133
1a198                 | LR__2134
1a198                 | LR__2135
1a198     18 4E 05 F1 | 	add	fp, #24
1a19c     A7 26 02 FB | 	rdlong	local01, fp
1a1a0     04 26 66 F0 | 	shl	local01, #4
1a1a4     14 00 00 FF 
1a1a8     F8 E5 05 F1 | 	add	objptr, ##10744
1a1ac     F2 26 02 F1 | 	add	local01, objptr
1a1b0     04 26 06 F1 | 	add	local01, #4
1a1b4     13 13 02 FB | 	rdlong	arg01, local01
1a1b8     0C 4E 05 F1 | 	add	fp, #12
1a1bc     A7 12 62 FC | 	wrlong	arg01, fp
1a1c0     24 4E 85 F1 | 	sub	fp, #36
1a1c4     14 00 00 FF 
1a1c8     F8 E5 85 F1 | 	sub	objptr, ##10744
1a1cc     70 66 B0 FD | 	call	#_pslpeek
1a1d0     FD 2C 32 F9 | 	getword	local04, result1, #0
1a1d4     28 4E 05 F1 | 	add	fp, #40
1a1d8     A7 2C 62 FC | 	wrlong	local04, fp
1a1dc     04 4E 85 F1 | 	sub	fp, #4
1a1e0     A7 12 02 FB | 	rdlong	arg01, fp
1a1e4     24 4E 85 F1 | 	sub	fp, #36
1a1e8     02 12 06 F1 | 	add	arg01, #2
1a1ec     F8 65 B0 FD | 	call	#_pspeek
1a1f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a1f4     2C 4E 05 F1 | 	add	fp, #44
1a1f8     A7 FA 61 FC | 	wrlong	result1, fp
1a1fc                 | ' esize=pspeek(arrptr+2)
1a1fc                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1a1fc     08 4E 85 F1 | 	sub	fp, #8
1a200     A7 12 02 FB | 	rdlong	arg01, fp
1a204     24 4E 85 F1 | 	sub	fp, #36
1a208     04 12 06 F1 | 	add	arg01, #4
1a20c     30 66 B0 FD | 	call	#_pslpeek
1a210     FD 2C 02 F6 | 	mov	local04, result1
1a214     34 4E 05 F1 | 	add	fp, #52
1a218     A7 26 02 FB | 	rdlong	local01, fp
1a21c     34 4E 85 F1 | 	sub	fp, #52
1a220     16 27 12 F2 | 	cmp	local01, local04 wc
1a224     54 00 90 3D |  if_ae	jmp	#LR__2136
1a228     24 4E 05 F1 | 	add	fp, #36
1a22c     A7 12 02 FB | 	rdlong	arg01, fp
1a230     24 4E 85 F1 | 	sub	fp, #36
1a234     08 12 06 F1 | 	add	arg01, #8
1a238     04 66 B0 FD | 	call	#_pslpeek
1a23c     FD 26 02 F6 | 	mov	local01, result1
1a240     38 4E 05 F1 | 	add	fp, #56
1a244     A7 2C 02 FB | 	rdlong	local04, fp
1a248     38 4E 85 F1 | 	sub	fp, #56
1a24c     13 2D 12 F2 | 	cmp	local04, local01 wc
1a250     28 00 90 3D |  if_ae	jmp	#LR__2136
1a254     24 4E 05 F1 | 	add	fp, #36
1a258     A7 12 02 FB | 	rdlong	arg01, fp
1a25c     24 4E 85 F1 | 	sub	fp, #36
1a260     0C 12 06 F1 | 	add	arg01, #12
1a264     D8 65 B0 FD | 	call	#_pslpeek
1a268     3C 4E 05 F1 | 	add	fp, #60
1a26c     A7 2C 02 FB | 	rdlong	local04, fp
1a270     3C 4E 85 F1 | 	sub	fp, #60
1a274     FD 2C 12 F2 | 	cmp	local04, result1 wc
1a278     10 00 90 CD |  if_b	jmp	#LR__2137
1a27c                 | LR__2136
1a27c     31 12 06 F6 | 	mov	arg01, #49
1a280     00 14 06 F6 | 	mov	arg02, #0
1a284     E8 62 B0 FD | 	call	#_printerror
1a288     64 02 90 FD | 	jmp	#LR__2153
1a28c                 | LR__2137
1a28c     24 4E 05 F1 | 	add	fp, #36
1a290     A7 12 02 FB | 	rdlong	arg01, fp
1a294     09 2D 02 F6 | 	mov	local04, arg01
1a298     10 2C 06 F1 | 	add	local04, #16
1a29c     24 4E 85 F1 | 	sub	fp, #36
1a2a0     04 12 06 F1 | 	add	arg01, #4
1a2a4     98 65 B0 FD | 	call	#_pslpeek
1a2a8     FD 26 02 F6 | 	mov	local01, result1
1a2ac     38 4E 05 F1 | 	add	fp, #56
1a2b0     A7 28 02 FB | 	rdlong	local02, fp
1a2b4     14 27 02 FD | 	qmul	local01, local02
1a2b8     04 4E 85 F1 | 	sub	fp, #4
1a2bc     A7 2A 02 FB | 	rdlong	local03, fp
1a2c0     10 4E 85 F1 | 	sub	fp, #16
1a2c4     A7 12 02 FB | 	rdlong	arg01, fp
1a2c8     24 4E 85 F1 | 	sub	fp, #36
1a2cc     08 12 06 F1 | 	add	arg01, #8
1a2d0     18 28 62 FD | 	getqx	local02
1a2d4     14 2B 02 F1 | 	add	local03, local02
1a2d8     64 65 B0 FD | 	call	#_pslpeek
1a2dc     FD 28 02 F6 | 	mov	local02, result1
1a2e0     24 4E 05 F1 | 	add	fp, #36
1a2e4     A7 12 02 FB | 	rdlong	arg01, fp
1a2e8     24 4E 85 F1 | 	sub	fp, #36
1a2ec     04 12 06 F1 | 	add	arg01, #4
1a2f0     4C 65 B0 FD | 	call	#_pslpeek
1a2f4     FD 28 02 FD | 	qmul	local02, result1
1a2f8     3C 4E 05 F1 | 	add	fp, #60
1a2fc     A7 28 02 FB | 	rdlong	local02, fp
1a300     18 26 62 FD | 	getqx	local01
1a304     14 27 02 FD | 	qmul	local01, local02
1a308     10 4E 85 F1 | 	sub	fp, #16
1a30c     A7 28 02 FB | 	rdlong	local02, fp
1a310     18 26 62 FD | 	getqx	local01
1a314     13 2B 02 F1 | 	add	local03, local01
1a318     15 29 02 FD | 	qmul	local02, local03
1a31c     04 4E 05 F1 | 	add	fp, #4
1a320                 | ' 
1a320                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1a320                 | ' select case arrtype
1a320     18 2A 62 FD | 	getqx	local03
1a324     15 2D 02 F1 | 	add	local04, local03
1a328     A7 2C 62 FC | 	wrlong	local04, fp
1a32c     08 4E 85 F1 | 	sub	fp, #8
1a330     A7 2E 02 FB | 	rdlong	local05, fp
1a334     28 4E 85 F1 | 	sub	fp, #40
1a338     00 2F 86 F1 | 	sub	local05, #256
1a33c     0C 2E 26 F3 | 	fle	local05, #12
1a340     30 2E 62 FD | 	jmprel	local05
1a344                 | LR__2138
1a344     30 00 90 FD | 	jmp	#LR__2139
1a348     58 00 90 FD | 	jmp	#LR__2140
1a34c     6C 00 90 FD | 	jmp	#LR__2141
1a350     80 00 90 FD | 	jmp	#LR__2142
1a354     B0 00 90 FD | 	jmp	#LR__2143
1a358     E0 00 90 FD | 	jmp	#LR__2144
1a35c     F4 00 90 FD | 	jmp	#LR__2145
1a360     08 01 90 FD | 	jmp	#LR__2146
1a364     1C 01 90 FD | 	jmp	#LR__2147
1a368     30 01 90 FD | 	jmp	#LR__2148
1a36c     44 01 90 FD | 	jmp	#LR__2149
1a370     58 01 90 FD | 	jmp	#LR__2150
1a374     6C 01 90 FD | 	jmp	#LR__2151
1a378                 | LR__2139
1a378     A7 12 02 F6 | 	mov	arg01, fp
1a37c     30 4E 05 F1 | 	add	fp, #48
1a380     A7 14 02 FB | 	rdlong	arg02, fp
1a384     30 4E 85 F1 | 	sub	fp, #48
1a388     0C 16 06 F6 | 	mov	arg03, #12
1a38c     0B 00 00 FF 
1a390     CC E4 05 F1 | 	add	objptr, ##5836
1a394     D8 8F B0 FD | 	call	#_psram_spin2_write
1a398     0B 00 00 FF 
1a39c     CC E4 85 F1 | 	sub	objptr, ##5836
1a3a0     4C 01 90 FD | 	jmp	#LR__2152
1a3a4                 | LR__2140
1a3a4     30 4E 05 F1 | 	add	fp, #48
1a3a8     A7 12 02 FB | 	rdlong	arg01, fp
1a3ac     30 4E 85 F1 | 	sub	fp, #48
1a3b0     A7 14 02 FB | 	rdlong	arg02, fp
1a3b4     E8 63 B0 FD | 	call	#_pspoke
1a3b8     34 01 90 FD | 	jmp	#LR__2152
1a3bc                 | LR__2141
1a3bc     30 4E 05 F1 | 	add	fp, #48
1a3c0     A7 12 02 FB | 	rdlong	arg01, fp
1a3c4     30 4E 85 F1 | 	sub	fp, #48
1a3c8     A7 14 02 FB | 	rdlong	arg02, fp
1a3cc     D0 63 B0 FD | 	call	#_pspoke
1a3d0     1C 01 90 FD | 	jmp	#LR__2152
1a3d4                 | LR__2142
1a3d4     30 4E 05 F1 | 	add	fp, #48
1a3d8     A7 12 02 FB | 	rdlong	arg01, fp
1a3dc     30 4E 85 F1 | 	sub	fp, #48
1a3e0     A7 14 02 FB | 	rdlong	arg02, fp
1a3e4     B8 63 B0 FD | 	call	#_pspoke
1a3e8     30 4E 05 F1 | 	add	fp, #48
1a3ec     A7 12 02 FB | 	rdlong	arg01, fp
1a3f0     30 4E 85 F1 | 	sub	fp, #48
1a3f4     01 12 06 F1 | 	add	arg01, #1
1a3f8     A7 14 02 FB | 	rdlong	arg02, fp
1a3fc     08 14 46 F0 | 	shr	arg02, #8
1a400     9C 63 B0 FD | 	call	#_pspoke
1a404     E8 00 90 FD | 	jmp	#LR__2152
1a408                 | LR__2143
1a408     30 4E 05 F1 | 	add	fp, #48
1a40c     A7 12 02 FB | 	rdlong	arg01, fp
1a410     30 4E 85 F1 | 	sub	fp, #48
1a414     A7 14 02 FB | 	rdlong	arg02, fp
1a418     84 63 B0 FD | 	call	#_pspoke
1a41c     30 4E 05 F1 | 	add	fp, #48
1a420     A7 12 02 FB | 	rdlong	arg01, fp
1a424     30 4E 85 F1 | 	sub	fp, #48
1a428     01 12 06 F1 | 	add	arg01, #1
1a42c     A7 14 02 FB | 	rdlong	arg02, fp
1a430     08 14 46 F0 | 	shr	arg02, #8
1a434     68 63 B0 FD | 	call	#_pspoke
1a438     B4 00 90 FD | 	jmp	#LR__2152
1a43c                 | LR__2144
1a43c     30 4E 05 F1 | 	add	fp, #48
1a440     A7 12 02 FB | 	rdlong	arg01, fp
1a444     30 4E 85 F1 | 	sub	fp, #48
1a448     A7 14 02 FB | 	rdlong	arg02, fp
1a44c     C0 62 B0 FD | 	call	#_pslpoke
1a450     9C 00 90 FD | 	jmp	#LR__2152
1a454                 | LR__2145
1a454     30 4E 05 F1 | 	add	fp, #48
1a458     A7 12 02 FB | 	rdlong	arg01, fp
1a45c     30 4E 85 F1 | 	sub	fp, #48
1a460     A7 14 02 FB | 	rdlong	arg02, fp
1a464     A8 62 B0 FD | 	call	#_pslpoke
1a468     84 00 90 FD | 	jmp	#LR__2152
1a46c                 | LR__2146
1a46c     30 4E 05 F1 | 	add	fp, #48
1a470     A7 12 02 FB | 	rdlong	arg01, fp
1a474     30 4E 85 F1 | 	sub	fp, #48
1a478     A7 14 02 FB | 	rdlong	arg02, fp
1a47c     90 62 B0 FD | 	call	#_pslpoke
1a480     6C 00 90 FD | 	jmp	#LR__2152
1a484                 | LR__2147
1a484     30 4E 05 F1 | 	add	fp, #48
1a488     A7 12 02 FB | 	rdlong	arg01, fp
1a48c     30 4E 85 F1 | 	sub	fp, #48
1a490     A7 14 02 FB | 	rdlong	arg02, fp
1a494     78 62 B0 FD | 	call	#_pslpoke
1a498     54 00 90 FD | 	jmp	#LR__2152
1a49c                 | LR__2148
1a49c     30 4E 05 F1 | 	add	fp, #48
1a4a0     A7 12 02 FB | 	rdlong	arg01, fp
1a4a4     30 4E 85 F1 | 	sub	fp, #48
1a4a8     A7 14 02 FB | 	rdlong	arg02, fp
1a4ac     60 62 B0 FD | 	call	#_pslpoke
1a4b0     3C 00 90 FD | 	jmp	#LR__2152
1a4b4                 | LR__2149
1a4b4     30 4E 05 F1 | 	add	fp, #48
1a4b8     A7 12 02 FB | 	rdlong	arg01, fp
1a4bc     30 4E 85 F1 | 	sub	fp, #48
1a4c0     A7 14 02 FB | 	rdlong	arg02, fp
1a4c4     48 62 B0 FD | 	call	#_pslpoke
1a4c8     24 00 90 FD | 	jmp	#LR__2152
1a4cc                 | LR__2150
1a4cc     30 4E 05 F1 | 	add	fp, #48
1a4d0     A7 12 02 FB | 	rdlong	arg01, fp
1a4d4     30 4E 85 F1 | 	sub	fp, #48
1a4d8     A7 14 02 FB | 	rdlong	arg02, fp
1a4dc     30 62 B0 FD | 	call	#_pslpoke
1a4e0     0C 00 90 FD | 	jmp	#LR__2152
1a4e4                 | LR__2151
1a4e4     32 12 06 F6 | 	mov	arg01, #50
1a4e8     00 14 06 F6 | 	mov	arg02, #0
1a4ec     80 60 B0 FD | 	call	#_printerror
1a4f0                 | LR__2152
1a4f0                 | LR__2153
1a4f0     A7 F0 03 F6 | 	mov	ptra, fp
1a4f4     B2 00 A0 FD | 	call	#popregs_
1a4f8                 | _do_assign_ret
1a4f8     2D 00 64 FD | 	ret
1a4fc                 | 
1a4fc                 | ' 
1a4fc                 | ' 
1a4fc                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1a4fc                 | ' 
1a4fc                 | ' sub do_getvar
1a4fc                 | _do_getvar
1a4fc     04 4A 05 F6 | 	mov	COUNT_, #4
1a500     A8 00 A0 FD | 	call	#pushregs_
1a504     3C F0 07 F1 | 	add	ptra, #60
1a508                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1a508     4A 00 00 FF 
1a50c     80 E4 05 F1 | 	add	objptr, ##38016
1a510     F2 26 02 FB | 	rdlong	local01, objptr
1a514     13 17 02 F6 | 	mov	arg03, local01
1a518     01 16 66 F0 | 	shl	arg03, #1
1a51c     13 17 02 F1 | 	add	arg03, local01
1a520     02 16 66 F0 | 	shl	arg03, #2
1a524     03 00 00 FF 
1a528     04 E4 85 F1 | 	sub	objptr, ##1540
1a52c     F2 16 02 F1 | 	add	arg03, objptr
1a530     04 16 06 F1 | 	add	arg03, #4
1a534     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1a538     47 00 00 FF 
1a53c     7C E4 85 F1 | 	sub	objptr, ##36476
1a540     C4 00 90 5D |  if_ne	jmp	#LR__2161
1a544     4A 00 00 FF 
1a548     80 E4 05 F1 | 	add	objptr, ##38016
1a54c     F2 26 02 FB | 	rdlong	local01, objptr
1a550     13 13 02 F6 | 	mov	arg01, local01
1a554     01 12 66 F0 | 	shl	arg01, #1
1a558     13 13 02 F1 | 	add	arg01, local01
1a55c     02 12 66 F0 | 	shl	arg01, #2
1a560     03 00 00 FF 
1a564     04 E4 85 F1 | 	sub	objptr, ##1540
1a568     F2 12 02 F1 | 	add	arg01, objptr
1a56c     09 27 02 FB | 	rdlong	local01, arg01
1a570     04 26 66 F0 | 	shl	local01, #4
1a574     32 00 00 FF 
1a578     84 E4 85 F1 | 	sub	objptr, ##25732
1a57c     F2 26 02 F1 | 	add	local01, objptr
1a580     04 26 06 F1 | 	add	local01, #4
1a584     13 13 02 FB | 	rdlong	arg01, local01
1a588     04 26 06 F1 | 	add	local01, #4
1a58c     13 27 02 FB | 	rdlong	local01, local01
1a590     A7 12 62 FC | 	wrlong	arg01, fp
1a594     04 4E 05 F1 | 	add	fp, #4
1a598     A7 26 62 FC | 	wrlong	local01, fp
1a59c     35 00 00 FF 
1a5a0     88 E4 05 F1 | 	add	objptr, ##27272
1a5a4     F2 26 02 FB | 	rdlong	local01, objptr
1a5a8     13 13 02 F6 | 	mov	arg01, local01
1a5ac     01 12 66 F0 | 	shl	arg01, #1
1a5b0     13 13 02 F1 | 	add	arg01, local01
1a5b4     02 12 66 F0 | 	shl	arg01, #2
1a5b8     03 00 00 FF 
1a5bc     04 E4 85 F1 | 	sub	objptr, ##1540
1a5c0     F2 12 02 F1 | 	add	arg01, objptr
1a5c4     09 27 02 FB | 	rdlong	local01, arg01
1a5c8     04 26 66 F0 | 	shl	local01, #4
1a5cc     32 00 00 FF 
1a5d0     84 E4 85 F1 | 	sub	objptr, ##25732
1a5d4     F2 26 02 F1 | 	add	local01, objptr
1a5d8     0C 26 06 F1 | 	add	local01, #12
1a5dc     13 27 02 FB | 	rdlong	local01, local01
1a5e0     04 4E 05 F1 | 	add	fp, #4
1a5e4     A7 26 62 FC | 	wrlong	local01, fp
1a5e8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1a5e8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1a5e8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1a5e8     08 4E 85 F1 | 	sub	fp, #8
1a5ec     00 27 16 F2 | 	cmp	local01, #256 wc
1a5f0     14 00 00 FF 
1a5f4     F8 E5 85 F1 | 	sub	objptr, ##10744
1a5f8     0C 00 90 3D |  if_ae	jmp	#LR__2160
1a5fc     A7 12 02 F6 | 	mov	arg01, fp
1a600     20 26 BF FD | 	call	#_push
1a604     A0 04 90 FD | 	jmp	#LR__2182
1a608                 | LR__2160
1a608                 | LR__2161
1a608     4A 00 00 FF 
1a60c     80 E4 05 F1 | 	add	objptr, ##38016
1a610     F2 16 02 FB | 	rdlong	arg03, objptr
1a614     0B 15 02 F6 | 	mov	arg02, arg03
1a618     01 14 66 F0 | 	shl	arg02, #1
1a61c     0B 15 02 F1 | 	add	arg02, arg03
1a620     02 14 66 F0 | 	shl	arg02, #2
1a624     03 00 00 FF 
1a628     04 E4 85 F1 | 	sub	objptr, ##1540
1a62c     F2 14 02 F1 | 	add	arg02, objptr
1a630     0A 17 02 FB | 	rdlong	arg03, arg02
1a634     04 16 66 F0 | 	shl	arg03, #4
1a638     32 00 00 FF 
1a63c     84 E4 85 F1 | 	sub	objptr, ##25732
1a640     F2 16 02 F1 | 	add	arg03, objptr
1a644     04 16 06 F1 | 	add	arg03, #4
1a648     0B 13 02 FB | 	rdlong	arg01, arg03
1a64c     0C 4E 05 F1 | 	add	fp, #12
1a650     A7 12 62 FC | 	wrlong	arg01, fp
1a654     0C 4E 85 F1 | 	sub	fp, #12
1a658     14 00 00 FF 
1a65c     F8 E5 85 F1 | 	sub	objptr, ##10744
1a660     DC 61 B0 FD | 	call	#_pslpeek
1a664     FD FA 31 F9 | 	getword	result1, result1, #0
1a668     10 4E 05 F1 | 	add	fp, #16
1a66c     A7 FA 61 FC | 	wrlong	result1, fp
1a670     4A 00 00 FF 
1a674     80 E4 05 F1 | 	add	objptr, ##38016
1a678     F2 16 02 FB | 	rdlong	arg03, objptr
1a67c     0B 15 02 F6 | 	mov	arg02, arg03
1a680     01 14 66 F0 | 	shl	arg02, #1
1a684     0B 15 02 F1 | 	add	arg02, arg03
1a688     02 14 66 F0 | 	shl	arg02, #2
1a68c     03 00 00 FF 
1a690     04 E4 85 F1 | 	sub	objptr, ##1540
1a694     F2 14 02 F1 | 	add	arg02, objptr
1a698     04 14 06 F1 | 	add	arg02, #4
1a69c     0A 17 02 FB | 	rdlong	arg03, arg02
1a6a0     04 4E 05 F1 | 	add	fp, #4
1a6a4     A7 16 62 FC | 	wrlong	arg03, fp
1a6a8     08 4E 85 F1 | 	sub	fp, #8
1a6ac     A7 12 02 FB | 	rdlong	arg01, fp
1a6b0     0C 4E 85 F1 | 	sub	fp, #12
1a6b4     02 12 06 F1 | 	add	arg01, #2
1a6b8     47 00 00 FF 
1a6bc     7C E4 85 F1 | 	sub	objptr, ##36476
1a6c0     24 61 B0 FD | 	call	#_pspeek
1a6c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a6c8     18 4E 05 F1 | 	add	fp, #24
1a6cc     A7 FA 61 FC | 	wrlong	result1, fp
1a6d0     0C 4E 85 F1 | 	sub	fp, #12
1a6d4     A7 12 02 FB | 	rdlong	arg01, fp
1a6d8     0C 4E 85 F1 | 	sub	fp, #12
1a6dc     04 12 06 F1 | 	add	arg01, #4
1a6e0     5C 61 B0 FD | 	call	#_pslpeek
1a6e4     1C 4E 05 F1 | 	add	fp, #28
1a6e8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ec     10 4E 85 F1 | 	sub	fp, #16
1a6f0     A7 12 02 FB | 	rdlong	arg01, fp
1a6f4     0C 4E 85 F1 | 	sub	fp, #12
1a6f8     08 12 06 F1 | 	add	arg01, #8
1a6fc     40 61 B0 FD | 	call	#_pslpeek
1a700     20 4E 05 F1 | 	add	fp, #32
1a704     A7 FA 61 FC | 	wrlong	result1, fp
1a708     14 4E 85 F1 | 	sub	fp, #20
1a70c     A7 12 02 FB | 	rdlong	arg01, fp
1a710     0C 4E 85 F1 | 	sub	fp, #12
1a714     0C 12 06 F1 | 	add	arg01, #12
1a718     24 61 B0 FD | 	call	#_pslpeek
1a71c     24 4E 05 F1 | 	add	fp, #36
1a720     A7 FA 61 FC | 	wrlong	result1, fp
1a724                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1a724                 | ' esize=pspeek(arrptr+2)
1a724                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1a724                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1a724                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1a724                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1a724     10 4E 85 F1 | 	sub	fp, #16
1a728     A7 16 02 FB | 	rdlong	arg03, fp
1a72c     14 4E 85 F1 | 	sub	fp, #20
1a730     03 16 16 F2 | 	cmp	arg03, #3 wc
1a734     38 00 90 CD |  if_b	jmp	#LR__2162
1a738     50 24 BF FD | 	call	#_pop
1a73c     FF 16 02 F6 | 	mov	arg03, result3
1a740     A7 FA 61 FC | 	wrlong	result1, fp
1a744     04 4E 05 F1 | 	add	fp, #4
1a748     A7 FC 61 FC | 	wrlong	result2, fp
1a74c     04 4E 05 F1 | 	add	fp, #4
1a750     A7 16 62 FC | 	wrlong	arg03, fp
1a754     08 4E 85 F1 | 	sub	fp, #8
1a758     A7 12 02 F6 | 	mov	arg01, fp
1a75c     10 26 BF FD | 	call	#_converttoint
1a760     30 4E 05 F1 | 	add	fp, #48
1a764     A7 FA 61 FC | 	wrlong	result1, fp
1a768     30 4E 85 F1 | 	sub	fp, #48
1a76c     0C 00 90 FD | 	jmp	#LR__2163
1a770                 | LR__2162
1a770     30 4E 05 F1 | 	add	fp, #48
1a774     A7 00 68 FC | 	wrlong	#0, fp
1a778     30 4E 85 F1 | 	sub	fp, #48
1a77c                 | LR__2163
1a77c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1a77c     14 4E 05 F1 | 	add	fp, #20
1a780     A7 16 02 FB | 	rdlong	arg03, fp
1a784     14 4E 85 F1 | 	sub	fp, #20
1a788     02 16 16 F2 | 	cmp	arg03, #2 wc
1a78c     38 00 90 CD |  if_b	jmp	#LR__2164
1a790     F8 23 BF FD | 	call	#_pop
1a794     FF 16 02 F6 | 	mov	arg03, result3
1a798     A7 FA 61 FC | 	wrlong	result1, fp
1a79c     04 4E 05 F1 | 	add	fp, #4
1a7a0     A7 FC 61 FC | 	wrlong	result2, fp
1a7a4     04 4E 05 F1 | 	add	fp, #4
1a7a8     A7 16 62 FC | 	wrlong	arg03, fp
1a7ac     08 4E 85 F1 | 	sub	fp, #8
1a7b0     A7 12 02 F6 | 	mov	arg01, fp
1a7b4     B8 25 BF FD | 	call	#_converttoint
1a7b8     2C 4E 05 F1 | 	add	fp, #44
1a7bc     A7 FA 61 FC | 	wrlong	result1, fp
1a7c0     2C 4E 85 F1 | 	sub	fp, #44
1a7c4     0C 00 90 FD | 	jmp	#LR__2165
1a7c8                 | LR__2164
1a7c8     2C 4E 05 F1 | 	add	fp, #44
1a7cc     A7 00 68 FC | 	wrlong	#0, fp
1a7d0     2C 4E 85 F1 | 	sub	fp, #44
1a7d4                 | LR__2165
1a7d4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1a7d4     14 4E 05 F1 | 	add	fp, #20
1a7d8     A7 16 02 FB | 	rdlong	arg03, fp
1a7dc     14 4E 85 F1 | 	sub	fp, #20
1a7e0     01 16 16 F2 | 	cmp	arg03, #1 wc
1a7e4     38 00 90 CD |  if_b	jmp	#LR__2166
1a7e8     A0 23 BF FD | 	call	#_pop
1a7ec     FF 16 02 F6 | 	mov	arg03, result3
1a7f0     A7 FA 61 FC | 	wrlong	result1, fp
1a7f4     04 4E 05 F1 | 	add	fp, #4
1a7f8     A7 FC 61 FC | 	wrlong	result2, fp
1a7fc     04 4E 05 F1 | 	add	fp, #4
1a800     A7 16 62 FC | 	wrlong	arg03, fp
1a804     08 4E 85 F1 | 	sub	fp, #8
1a808     A7 12 02 F6 | 	mov	arg01, fp
1a80c     60 25 BF FD | 	call	#_converttoint
1a810     28 4E 05 F1 | 	add	fp, #40
1a814     A7 FA 61 FC | 	wrlong	result1, fp
1a818     28 4E 85 F1 | 	sub	fp, #40
1a81c     0C 00 90 FD | 	jmp	#LR__2167
1a820                 | LR__2166
1a820     28 4E 05 F1 | 	add	fp, #40
1a824     A7 00 68 FC | 	wrlong	#0, fp
1a828     28 4E 85 F1 | 	sub	fp, #40
1a82c                 | LR__2167
1a82c     0C 4E 05 F1 | 	add	fp, #12
1a830     A7 28 02 FB | 	rdlong	local02, fp
1a834     1C 4E 05 F1 | 	add	fp, #28
1a838     A7 2A 02 FB | 	rdlong	local03, fp
1a83c     04 4E 05 F1 | 	add	fp, #4
1a840     A7 FC 01 FB | 	rdlong	result2, fp
1a844     10 4E 85 F1 | 	sub	fp, #16
1a848     A7 FE 01 FB | 	rdlong	result3, fp
1a84c     FF FC 01 FD | 	qmul	result2, result3
1a850     10 28 06 F1 | 	add	local02, #16
1a854     14 4E 05 F1 | 	add	fp, #20
1a858     A7 FC 01 FB | 	rdlong	result2, fp
1a85c     18 FA 61 FD | 	getqx	result1
1a860     FF FC 01 FD | 	qmul	result2, result3
1a864     FD 2A 02 F1 | 	add	local03, result1
1a868     10 4E 85 F1 | 	sub	fp, #16
1a86c     A7 FE 01 FB | 	rdlong	result3, fp
1a870     18 FC 61 FD | 	getqx	result2
1a874     FF FC 01 FD | 	qmul	result2, result3
1a878     08 4E 85 F1 | 	sub	fp, #8
1a87c     A7 FE 01 FB | 	rdlong	result3, fp
1a880     18 FC 61 FD | 	getqx	result2
1a884     FE 2A 02 F1 | 	add	local03, result2
1a888     FF 2A 02 FD | 	qmul	local03, result3
1a88c     1C 4E 05 F1 | 	add	fp, #28
1a890                 | ' 
1a890                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1a890                 | ' 
1a890                 | ' select case vartype
1a890     18 FC 61 FD | 	getqx	result2
1a894     FE 28 02 F1 | 	add	local02, result2
1a898     A7 28 62 FC | 	wrlong	local02, fp
1a89c     24 4E 85 F1 | 	sub	fp, #36
1a8a0     A7 2C 02 FB | 	rdlong	local04, fp
1a8a4     10 4E 85 F1 | 	sub	fp, #16
1a8a8     00 2D 86 F1 | 	sub	local04, #256
1a8ac     0C 2C 26 F3 | 	fle	local04, #12
1a8b0     30 2C 62 FD | 	jmprel	local04
1a8b4                 | LR__2168
1a8b4     30 00 90 FD | 	jmp	#LR__2169
1a8b8     58 00 90 FD | 	jmp	#LR__2170
1a8bc     8C 00 90 FD | 	jmp	#LR__2171
1a8c0     AC 00 90 FD | 	jmp	#LR__2172
1a8c4     E8 00 90 FD | 	jmp	#LR__2173
1a8c8     08 01 90 FD | 	jmp	#LR__2174
1a8cc     24 01 90 FD | 	jmp	#LR__2175
1a8d0     40 01 90 FD | 	jmp	#LR__2176
1a8d4     50 01 90 FD | 	jmp	#LR__2177
1a8d8     60 01 90 FD | 	jmp	#LR__2178
1a8dc     7C 01 90 FD | 	jmp	#LR__2179
1a8e0     8C 01 90 FD | 	jmp	#LR__2180
1a8e4     B8 01 90 FD | 	jmp	#LR__2181
1a8e8                 | LR__2169
1a8e8     A7 12 02 F6 | 	mov	arg01, fp
1a8ec     34 4E 05 F1 | 	add	fp, #52
1a8f0     A7 14 02 FB | 	rdlong	arg02, fp
1a8f4     34 4E 85 F1 | 	sub	fp, #52
1a8f8     0C 16 06 F6 | 	mov	arg03, #12
1a8fc     0B 00 00 FF 
1a900     CC E4 05 F1 | 	add	objptr, ##5836
1a904     CC 89 B0 FD | 	call	#_psram_spin2_read1
1a908     0B 00 00 FF 
1a90c     CC E4 85 F1 | 	sub	objptr, ##5836
1a910     8C 01 90 FD | 	jmp	#LR__2181
1a914                 | LR__2170
1a914     08 4E 05 F1 | 	add	fp, #8
1a918     A7 38 68 FC | 	wrlong	#28, fp
1a91c     2C 4E 05 F1 | 	add	fp, #44
1a920     A7 12 02 FB | 	rdlong	arg01, fp
1a924     34 4E 85 F1 | 	sub	fp, #52
1a928     BC 5E B0 FD | 	call	#_pspeek
1a92c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a930     A7 FA 61 FC | 	wrlong	result1, fp
1a934     80 FA 15 F2 | 	cmp	result1, #128 wc
1a938     00 27 66 36 |  if_ae	neg	local01, #256
1a93c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1a940     15 27 42 35 |  if_ae	or	local01, local03
1a944     A7 26 62 3C |  if_ae	wrlong	local01, fp
1a948     54 01 90 FD | 	jmp	#LR__2181
1a94c                 | LR__2171
1a94c     08 4E 05 F1 | 	add	fp, #8
1a950     A7 3A 68 FC | 	wrlong	#29, fp
1a954     2C 4E 05 F1 | 	add	fp, #44
1a958     A7 12 02 FB | 	rdlong	arg01, fp
1a95c     34 4E 85 F1 | 	sub	fp, #52
1a960     84 5E B0 FD | 	call	#_pspeek
1a964     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a968     A7 FA 61 FC | 	wrlong	result1, fp
1a96c     30 01 90 FD | 	jmp	#LR__2181
1a970                 | LR__2172
1a970     08 4E 05 F1 | 	add	fp, #8
1a974     A7 38 68 FC | 	wrlong	#28, fp
1a978     2C 4E 05 F1 | 	add	fp, #44
1a97c     A7 12 02 FB | 	rdlong	arg01, fp
1a980     34 4E 85 F1 | 	sub	fp, #52
1a984     B8 5E B0 FD | 	call	#_pslpeek
1a988     FD FA 31 F9 | 	getword	result1, result1, #0
1a98c     A7 FA 61 FC | 	wrlong	result1, fp
1a990     40 00 00 FF 
1a994     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1a998     FF 7F 00 3F 
1a99c     00 27 06 36 |  if_ae	mov	local01, ##16776960
1a9a0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1a9a4     15 27 42 35 |  if_ae	or	local01, local03
1a9a8     A7 26 62 3C |  if_ae	wrlong	local01, fp
1a9ac     F0 00 90 FD | 	jmp	#LR__2181
1a9b0                 | LR__2173
1a9b0     08 4E 05 F1 | 	add	fp, #8
1a9b4     A7 3A 68 FC | 	wrlong	#29, fp
1a9b8     2C 4E 05 F1 | 	add	fp, #44
1a9bc     A7 12 02 FB | 	rdlong	arg01, fp
1a9c0     34 4E 85 F1 | 	sub	fp, #52
1a9c4     78 5E B0 FD | 	call	#_pslpeek
1a9c8     FD FA 31 F9 | 	getword	result1, result1, #0
1a9cc     A7 FA 61 FC | 	wrlong	result1, fp
1a9d0     CC 00 90 FD | 	jmp	#LR__2181
1a9d4                 | LR__2174
1a9d4     08 4E 05 F1 | 	add	fp, #8
1a9d8     A7 38 68 FC | 	wrlong	#28, fp
1a9dc     2C 4E 05 F1 | 	add	fp, #44
1a9e0     A7 12 02 FB | 	rdlong	arg01, fp
1a9e4     34 4E 85 F1 | 	sub	fp, #52
1a9e8     54 5E B0 FD | 	call	#_pslpeek
1a9ec     A7 FA 61 FC | 	wrlong	result1, fp
1a9f0     AC 00 90 FD | 	jmp	#LR__2181
1a9f4                 | LR__2175
1a9f4     08 4E 05 F1 | 	add	fp, #8
1a9f8     A7 3A 68 FC | 	wrlong	#29, fp
1a9fc     2C 4E 05 F1 | 	add	fp, #44
1aa00     A7 12 02 FB | 	rdlong	arg01, fp
1aa04     34 4E 85 F1 | 	sub	fp, #52
1aa08     34 5E B0 FD | 	call	#_pslpeek
1aa0c     A7 FA 61 FC | 	wrlong	result1, fp
1aa10     8C 00 90 FD | 	jmp	#LR__2181
1aa14                 | LR__2176
1aa14     08 4E 05 F1 | 	add	fp, #8
1aa18     A7 FE 69 FC | 	wrlong	#255, fp
1aa1c     08 4E 85 F1 | 	sub	fp, #8
1aa20     A7 60 68 FC | 	wrlong	#48, fp
1aa24     78 00 90 FD | 	jmp	#LR__2181
1aa28                 | LR__2177
1aa28     08 4E 05 F1 | 	add	fp, #8
1aa2c     A7 FE 69 FC | 	wrlong	#255, fp
1aa30     08 4E 85 F1 | 	sub	fp, #8
1aa34     A7 60 68 FC | 	wrlong	#48, fp
1aa38     64 00 90 FD | 	jmp	#LR__2181
1aa3c                 | LR__2178
1aa3c     08 4E 05 F1 | 	add	fp, #8
1aa40     A7 3C 68 FC | 	wrlong	#30, fp
1aa44     2C 4E 05 F1 | 	add	fp, #44
1aa48     A7 12 02 FB | 	rdlong	arg01, fp
1aa4c     34 4E 85 F1 | 	sub	fp, #52
1aa50     EC 5D B0 FD | 	call	#_pslpeek
1aa54     A7 FA 61 FC | 	wrlong	result1, fp
1aa58     44 00 90 FD | 	jmp	#LR__2181
1aa5c                 | LR__2179
1aa5c     08 4E 05 F1 | 	add	fp, #8
1aa60     A7 FE 69 FC | 	wrlong	#255, fp
1aa64     08 4E 85 F1 | 	sub	fp, #8
1aa68     A7 60 68 FC | 	wrlong	#48, fp
1aa6c     30 00 90 FD | 	jmp	#LR__2181
1aa70                 | LR__2180
1aa70     08 4E 05 F1 | 	add	fp, #8
1aa74     A7 3E 68 FC | 	wrlong	#31, fp
1aa78     2C 4E 05 F1 | 	add	fp, #44
1aa7c     A7 12 02 FB | 	rdlong	arg01, fp
1aa80     34 4E 85 F1 | 	sub	fp, #52
1aa84     B8 5D B0 FD | 	call	#_pslpeek
1aa88     A7 FA 61 FC | 	wrlong	result1, fp
1aa8c     00 04 00 FF 
1aa90     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1aa94     08 4E 05 31 |  if_ae	add	fp, #8
1aa98     A7 56 68 3C |  if_ae	wrlong	#43, fp
1aa9c     08 4E 85 31 |  if_ae	sub	fp, #8
1aaa0                 | LR__2181
1aaa0     A7 12 02 F6 | 	mov	arg01, fp
1aaa4     7C 21 BF FD | 	call	#_push
1aaa8                 | LR__2182
1aaa8     A7 F0 03 F6 | 	mov	ptra, fp
1aaac     B2 00 A0 FD | 	call	#popregs_
1aab0                 | _do_getvar_ret
1aab0     2D 00 64 FD | 	ret
1aab4                 | 
1aab4                 | ' 
1aab4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1aab4                 | ' 
1aab4                 | ' sub do_getaddr
1aab4                 | _do_getaddr
1aab4     01 4A 05 F6 | 	mov	COUNT_, #1
1aab8     A8 00 A0 FD | 	call	#pushregs_
1aabc     38 F0 07 F1 | 	add	ptra, #56
1aac0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1aac0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1aac0     4A 00 00 FF 
1aac4     80 E4 05 F1 | 	add	objptr, ##38016
1aac8     F2 12 02 FB | 	rdlong	arg01, objptr
1aacc     09 FD 01 F6 | 	mov	result2, arg01
1aad0     01 FC 65 F0 | 	shl	result2, #1
1aad4     09 FD 01 F1 | 	add	result2, arg01
1aad8     02 FC 65 F0 | 	shl	result2, #2
1aadc     03 00 00 FF 
1aae0     04 E4 85 F1 | 	sub	objptr, ##1540
1aae4     F2 FC 01 F1 | 	add	result2, objptr
1aae8     04 FC 05 F1 | 	add	result2, #4
1aaec     FE FC 09 FB | 	rdlong	result2, result2 wz
1aaf0     47 00 00 FF 
1aaf4     7C E4 85 F1 | 	sub	objptr, ##36476
1aaf8     10 01 90 5D |  if_ne	jmp	#LR__2190
1aafc     4A 00 00 FF 
1ab00     80 E4 05 F1 | 	add	objptr, ##38016
1ab04     F2 12 02 FB | 	rdlong	arg01, objptr
1ab08     09 FD 01 F6 | 	mov	result2, arg01
1ab0c     01 FC 65 F0 | 	shl	result2, #1
1ab10     09 FD 01 F1 | 	add	result2, arg01
1ab14     02 FC 65 F0 | 	shl	result2, #2
1ab18     03 00 00 FF 
1ab1c     04 E4 85 F1 | 	sub	objptr, ##1540
1ab20     F2 FC 01 F1 | 	add	result2, objptr
1ab24     FE 12 02 FB | 	rdlong	arg01, result2
1ab28     04 12 66 F0 | 	shl	arg01, #4
1ab2c     32 00 00 FF 
1ab30     84 E4 85 F1 | 	sub	objptr, ##25732
1ab34     F2 12 02 F1 | 	add	arg01, objptr
1ab38     0C 12 06 F1 | 	add	arg01, #12
1ab3c     09 13 02 FB | 	rdlong	arg01, arg01
1ab40     08 4E 05 F1 | 	add	fp, #8
1ab44     A7 12 62 FC | 	wrlong	arg01, fp
1ab48                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ab48                 | '    if t1.result_type>=array_no_type then goto 2200
1ab48     08 4E 85 F1 | 	sub	fp, #8
1ab4c     00 13 16 F2 | 	cmp	arg01, #256 wc
1ab50     14 00 00 FF 
1ab54     F8 E5 85 F1 | 	sub	objptr, ##10744
1ab58     B0 00 90 3D |  if_ae	jmp	#LR__2191
1ab5c     4A 00 00 FF 
1ab60     80 E4 05 F1 | 	add	objptr, ##38016
1ab64     F2 12 02 FB | 	rdlong	arg01, objptr
1ab68     09 FF 01 F6 | 	mov	result3, arg01
1ab6c     01 FE 65 F0 | 	shl	result3, #1
1ab70     09 FF 01 F1 | 	add	result3, arg01
1ab74     02 FE 65 F0 | 	shl	result3, #2
1ab78     03 00 00 FF 
1ab7c     04 E4 85 F1 | 	sub	objptr, ##1540
1ab80     F2 FE 01 F1 | 	add	result3, objptr
1ab84     FF FA 01 FB | 	rdlong	result1, result3
1ab88     04 FA 65 F0 | 	shl	result1, #4
1ab8c     32 00 00 FF 
1ab90     84 E4 85 F1 | 	sub	objptr, ##25732
1ab94     F2 FA 01 F1 | 	add	result1, objptr
1ab98     04 FA 05 F1 | 	add	result1, #4
1ab9c     A7 FA 61 FC | 	wrlong	result1, fp
1aba0     35 00 00 FF 
1aba4     88 E4 05 F1 | 	add	objptr, ##27272
1aba8     F2 FE 01 FB | 	rdlong	result3, objptr
1abac     FF 12 02 F6 | 	mov	arg01, result3
1abb0     01 12 66 F0 | 	shl	arg01, #1
1abb4     FF 12 02 F1 | 	add	arg01, result3
1abb8     02 12 66 F0 | 	shl	arg01, #2
1abbc     03 00 00 FF 
1abc0     04 E4 85 F1 | 	sub	objptr, ##1540
1abc4     F2 12 02 F1 | 	add	arg01, objptr
1abc8     09 13 02 FB | 	rdlong	arg01, arg01
1abcc     04 12 66 F0 | 	shl	arg01, #4
1abd0     32 00 00 FF 
1abd4     84 E4 85 F1 | 	sub	objptr, ##25732
1abd8     F2 12 02 F1 | 	add	arg01, objptr
1abdc     0C 12 06 F1 | 	add	arg01, #12
1abe0     09 13 02 FB | 	rdlong	arg01, arg01
1abe4     04 4E 05 F1 | 	add	fp, #4
1abe8     A7 12 62 FC | 	wrlong	arg01, fp
1abec     04 4E 05 F1 | 	add	fp, #4
1abf0     A7 3A 68 FC | 	wrlong	#29, fp
1abf4     08 4E 85 F1 | 	sub	fp, #8
1abf8     A7 12 02 F6 | 	mov	arg01, fp
1abfc     14 00 00 FF 
1ac00     F8 E5 85 F1 | 	sub	objptr, ##10744
1ac04     1C 20 BF FD | 	call	#_push
1ac08                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1ac08                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1ac08                 | '   t1.result_type=result_uint
1ac08                 | '   push t1 : return
1ac08     2C 03 90 FD | 	jmp	#LR__2200
1ac0c                 | LR__2190
1ac0c                 | LR__2191
1ac0c     4A 00 00 FF 
1ac10     80 E4 05 F1 | 	add	objptr, ##38016
1ac14     F2 FE 01 FB | 	rdlong	result3, objptr
1ac18     FF FC 01 F6 | 	mov	result2, result3
1ac1c     01 FC 65 F0 | 	shl	result2, #1
1ac20     FF FC 01 F1 | 	add	result2, result3
1ac24     02 FC 65 F0 | 	shl	result2, #2
1ac28     03 00 00 FF 
1ac2c     04 E4 85 F1 | 	sub	objptr, ##1540
1ac30     F2 FC 01 F1 | 	add	result2, objptr
1ac34     FE FE 01 FB | 	rdlong	result3, result2
1ac38     04 FE 65 F0 | 	shl	result3, #4
1ac3c     32 00 00 FF 
1ac40     84 E4 85 F1 | 	sub	objptr, ##25732
1ac44     F2 FE 01 F1 | 	add	result3, objptr
1ac48     04 FE 05 F1 | 	add	result3, #4
1ac4c     FF FE 01 FB | 	rdlong	result3, result3
1ac50     0C 4E 05 F1 | 	add	fp, #12
1ac54     A7 FE 61 FC | 	wrlong	result3, fp
1ac58     35 00 00 FF 
1ac5c     88 E4 05 F1 | 	add	objptr, ##27272
1ac60     F2 FE 01 FB | 	rdlong	result3, objptr
1ac64     FF 12 02 F6 | 	mov	arg01, result3
1ac68     01 12 66 F0 | 	shl	arg01, #1
1ac6c     FF 12 02 F1 | 	add	arg01, result3
1ac70     02 12 66 F0 | 	shl	arg01, #2
1ac74     03 00 00 FF 
1ac78     04 E4 85 F1 | 	sub	objptr, ##1540
1ac7c     F2 12 02 F1 | 	add	arg01, objptr
1ac80     09 13 02 FB | 	rdlong	arg01, arg01
1ac84     04 12 66 F0 | 	shl	arg01, #4
1ac88     32 00 00 FF 
1ac8c     84 E4 85 F1 | 	sub	objptr, ##25732
1ac90     F2 12 02 F1 | 	add	arg01, objptr
1ac94     0C 12 06 F1 | 	add	arg01, #12
1ac98     09 13 02 FB | 	rdlong	arg01, arg01
1ac9c     08 4E 85 F1 | 	sub	fp, #8
1aca0     A7 12 62 FC | 	wrlong	arg01, fp
1aca4     08 4E 05 F1 | 	add	fp, #8
1aca8     A7 12 02 FB | 	rdlong	arg01, fp
1acac     0C 4E 85 F1 | 	sub	fp, #12
1acb0     14 00 00 FF 
1acb4     F8 E5 85 F1 | 	sub	objptr, ##10744
1acb8     84 5B B0 FD | 	call	#_pslpeek
1acbc     FD FA 31 F9 | 	getword	result1, result1, #0
1acc0     10 4E 05 F1 | 	add	fp, #16
1acc4     A7 FA 61 FC | 	wrlong	result1, fp
1acc8     4A 00 00 FF 
1accc     80 E4 05 F1 | 	add	objptr, ##38016
1acd0     F2 FE 01 FB | 	rdlong	result3, objptr
1acd4     FF 12 02 F6 | 	mov	arg01, result3
1acd8     01 12 66 F0 | 	shl	arg01, #1
1acdc     FF 12 02 F1 | 	add	arg01, result3
1ace0     02 12 66 F0 | 	shl	arg01, #2
1ace4     03 00 00 FF 
1ace8     04 E4 85 F1 | 	sub	objptr, ##1540
1acec     F2 12 02 F1 | 	add	arg01, objptr
1acf0     04 12 06 F1 | 	add	arg01, #4
1acf4     09 13 02 FB | 	rdlong	arg01, arg01
1acf8     04 4E 05 F1 | 	add	fp, #4
1acfc     A7 12 62 FC | 	wrlong	arg01, fp
1ad00     08 4E 85 F1 | 	sub	fp, #8
1ad04     A7 12 02 FB | 	rdlong	arg01, fp
1ad08     0C 4E 85 F1 | 	sub	fp, #12
1ad0c     02 12 06 F1 | 	add	arg01, #2
1ad10     47 00 00 FF 
1ad14     7C E4 85 F1 | 	sub	objptr, ##36476
1ad18     CC 5A B0 FD | 	call	#_pspeek
1ad1c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ad20     18 4E 05 F1 | 	add	fp, #24
1ad24     A7 FA 61 FC | 	wrlong	result1, fp
1ad28     0C 4E 85 F1 | 	sub	fp, #12
1ad2c     A7 12 02 FB | 	rdlong	arg01, fp
1ad30     0C 4E 85 F1 | 	sub	fp, #12
1ad34     04 12 06 F1 | 	add	arg01, #4
1ad38     04 5B B0 FD | 	call	#_pslpeek
1ad3c     1C 4E 05 F1 | 	add	fp, #28
1ad40     A7 FA 61 FC | 	wrlong	result1, fp
1ad44     10 4E 85 F1 | 	sub	fp, #16
1ad48     A7 12 02 FB | 	rdlong	arg01, fp
1ad4c     0C 4E 85 F1 | 	sub	fp, #12
1ad50     08 12 06 F1 | 	add	arg01, #8
1ad54     E8 5A B0 FD | 	call	#_pslpeek
1ad58     20 4E 05 F1 | 	add	fp, #32
1ad5c     A7 FA 61 FC | 	wrlong	result1, fp
1ad60     14 4E 85 F1 | 	sub	fp, #20
1ad64     A7 12 02 FB | 	rdlong	arg01, fp
1ad68     0C 4E 85 F1 | 	sub	fp, #12
1ad6c     0C 12 06 F1 | 	add	arg01, #12
1ad70     CC 5A B0 FD | 	call	#_pslpeek
1ad74     24 4E 05 F1 | 	add	fp, #36
1ad78     A7 FA 61 FC | 	wrlong	result1, fp
1ad7c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1ad7c                 | ' esize=pspeek(arrptr+2)
1ad7c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1ad7c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1ad7c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1ad7c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1ad7c     10 4E 85 F1 | 	sub	fp, #16
1ad80     A7 12 02 FB | 	rdlong	arg01, fp
1ad84     14 4E 85 F1 | 	sub	fp, #20
1ad88     03 12 16 F2 | 	cmp	arg01, #3 wc
1ad8c     34 00 90 CD |  if_b	jmp	#LR__2192
1ad90     F8 1D BF FD | 	call	#_pop
1ad94     A7 FA 61 FC | 	wrlong	result1, fp
1ad98     04 4E 05 F1 | 	add	fp, #4
1ad9c     A7 FC 61 FC | 	wrlong	result2, fp
1ada0     04 4E 05 F1 | 	add	fp, #4
1ada4     A7 FE 61 FC | 	wrlong	result3, fp
1ada8     08 4E 85 F1 | 	sub	fp, #8
1adac     A7 12 02 F6 | 	mov	arg01, fp
1adb0     BC 1F BF FD | 	call	#_converttoint
1adb4     30 4E 05 F1 | 	add	fp, #48
1adb8     A7 FA 61 FC | 	wrlong	result1, fp
1adbc     30 4E 85 F1 | 	sub	fp, #48
1adc0     0C 00 90 FD | 	jmp	#LR__2193
1adc4                 | LR__2192
1adc4     30 4E 05 F1 | 	add	fp, #48
1adc8     A7 00 68 FC | 	wrlong	#0, fp
1adcc     30 4E 85 F1 | 	sub	fp, #48
1add0                 | LR__2193
1add0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1add0     14 4E 05 F1 | 	add	fp, #20
1add4     A7 12 02 FB | 	rdlong	arg01, fp
1add8     14 4E 85 F1 | 	sub	fp, #20
1addc     02 12 16 F2 | 	cmp	arg01, #2 wc
1ade0     34 00 90 CD |  if_b	jmp	#LR__2194
1ade4     A4 1D BF FD | 	call	#_pop
1ade8     A7 FA 61 FC | 	wrlong	result1, fp
1adec     04 4E 05 F1 | 	add	fp, #4
1adf0     A7 FC 61 FC | 	wrlong	result2, fp
1adf4     04 4E 05 F1 | 	add	fp, #4
1adf8     A7 FE 61 FC | 	wrlong	result3, fp
1adfc     08 4E 85 F1 | 	sub	fp, #8
1ae00     A7 12 02 F6 | 	mov	arg01, fp
1ae04     68 1F BF FD | 	call	#_converttoint
1ae08     2C 4E 05 F1 | 	add	fp, #44
1ae0c     A7 FA 61 FC | 	wrlong	result1, fp
1ae10     2C 4E 85 F1 | 	sub	fp, #44
1ae14     0C 00 90 FD | 	jmp	#LR__2195
1ae18                 | LR__2194
1ae18     2C 4E 05 F1 | 	add	fp, #44
1ae1c     A7 00 68 FC | 	wrlong	#0, fp
1ae20     2C 4E 85 F1 | 	sub	fp, #44
1ae24                 | LR__2195
1ae24                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1ae24     14 4E 05 F1 | 	add	fp, #20
1ae28     A7 12 02 FB | 	rdlong	arg01, fp
1ae2c     14 4E 85 F1 | 	sub	fp, #20
1ae30     01 12 16 F2 | 	cmp	arg01, #1 wc
1ae34     34 00 90 CD |  if_b	jmp	#LR__2196
1ae38     50 1D BF FD | 	call	#_pop
1ae3c     A7 FA 61 FC | 	wrlong	result1, fp
1ae40     04 4E 05 F1 | 	add	fp, #4
1ae44     A7 FC 61 FC | 	wrlong	result2, fp
1ae48     04 4E 05 F1 | 	add	fp, #4
1ae4c     A7 FE 61 FC | 	wrlong	result3, fp
1ae50     08 4E 85 F1 | 	sub	fp, #8
1ae54     A7 12 02 F6 | 	mov	arg01, fp
1ae58     14 1F BF FD | 	call	#_converttoint
1ae5c     28 4E 05 F1 | 	add	fp, #40
1ae60     A7 FA 61 FC | 	wrlong	result1, fp
1ae64     28 4E 85 F1 | 	sub	fp, #40
1ae68     0C 00 90 FD | 	jmp	#LR__2197
1ae6c                 | LR__2196
1ae6c     28 4E 05 F1 | 	add	fp, #40
1ae70     A7 00 68 FC | 	wrlong	#0, fp
1ae74     28 4E 85 F1 | 	sub	fp, #40
1ae78                 | LR__2197
1ae78                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1ae78                 | ' if numpar>0 then
1ae78     14 4E 05 F1 | 	add	fp, #20
1ae7c     A7 FE 01 FB | 	rdlong	result3, fp
1ae80     14 4E 85 F1 | 	sub	fp, #20
1ae84     01 FE 15 F2 | 	cmp	result3, #1 wc
1ae88     8C 00 90 CD |  if_b	jmp	#LR__2198
1ae8c     0C 4E 05 F1 | 	add	fp, #12
1ae90     A7 FC 01 FB | 	rdlong	result2, fp
1ae94     1C 4E 05 F1 | 	add	fp, #28
1ae98     A7 FE 01 FB | 	rdlong	result3, fp
1ae9c     04 4E 05 F1 | 	add	fp, #4
1aea0     A7 12 02 FB | 	rdlong	arg01, fp
1aea4     10 4E 85 F1 | 	sub	fp, #16
1aea8     A7 FA 01 FB | 	rdlong	result1, fp
1aeac     FD 12 02 FD | 	qmul	arg01, result1
1aeb0     10 FC 05 F1 | 	add	result2, #16
1aeb4     14 4E 05 F1 | 	add	fp, #20
1aeb8     A7 26 02 FB | 	rdlong	local01, fp
1aebc     18 12 62 FD | 	getqx	arg01
1aec0     FD 26 02 FD | 	qmul	local01, result1
1aec4     09 FF 01 F1 | 	add	result3, arg01
1aec8     10 4E 85 F1 | 	sub	fp, #16
1aecc     A7 26 02 FB | 	rdlong	local01, fp
1aed0     18 FA 61 FD | 	getqx	result1
1aed4     13 FB 01 FD | 	qmul	result1, local01
1aed8     08 4E 85 F1 | 	sub	fp, #8
1aedc     A7 26 02 FB | 	rdlong	local01, fp
1aee0     18 FA 61 FD | 	getqx	result1
1aee4     FD FE 01 F1 | 	add	result3, result1
1aee8     13 FF 01 FD | 	qmul	result3, local01
1aeec     1C 4E 05 F1 | 	add	fp, #28
1aef0     18 26 62 FD | 	getqx	local01
1aef4     13 FD 01 F1 | 	add	result2, local01
1aef8     A7 FC 61 FC | 	wrlong	result2, fp
1aefc     2C 4E 85 F1 | 	sub	fp, #44
1af00     A7 3A 68 FC | 	wrlong	#29, fp
1af04     2C 4E 05 F1 | 	add	fp, #44
1af08     A7 26 02 FB | 	rdlong	local01, fp
1af0c     34 4E 85 F1 | 	sub	fp, #52
1af10     A7 26 62 FC | 	wrlong	local01, fp
1af14     18 00 90 FD | 	jmp	#LR__2199
1af18                 | LR__2198
1af18     08 4E 05 F1 | 	add	fp, #8
1af1c     A7 3A 68 FC | 	wrlong	#29, fp
1af20     04 4E 05 F1 | 	add	fp, #4
1af24     A7 26 02 FB | 	rdlong	local01, fp
1af28     0C 4E 85 F1 | 	sub	fp, #12
1af2c     A7 26 62 FC | 	wrlong	local01, fp
1af30                 | LR__2199
1af30     A7 12 02 F6 | 	mov	arg01, fp
1af34     EC 1C BF FD | 	call	#_push
1af38                 | LR__2200
1af38     A7 F0 03 F6 | 	mov	ptra, fp
1af3c     B2 00 A0 FD | 	call	#popregs_
1af40                 | _do_getaddr_ret
1af40     2D 00 64 FD | 	ret
1af44                 | 
1af44                 | ' 
1af44                 | ' 
1af44                 | ' 
1af44                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1af44                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1af44                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1af44                 | ' 
1af44                 | ' '--------------------------------- AND 
1af44                 | ' 
1af44                 | ' sub do_and 
1af44                 | _do_and
1af44     03 4A 05 F6 | 	mov	COUNT_, #3
1af48     A8 00 A0 FD | 	call	#pushregs_
1af4c     18 F0 07 F1 | 	add	ptra, #24
1af50     38 1C BF FD | 	call	#_pop
1af54     FD 12 02 F6 | 	mov	arg01, result1
1af58     FE 26 02 F6 | 	mov	local01, result2
1af5c     FF 28 02 F6 | 	mov	local02, result3
1af60     0C 4E 05 F1 | 	add	fp, #12
1af64     A7 12 62 FC | 	wrlong	arg01, fp
1af68     04 4E 05 F1 | 	add	fp, #4
1af6c     A7 26 62 FC | 	wrlong	local01, fp
1af70     04 4E 05 F1 | 	add	fp, #4
1af74     A7 28 62 FC | 	wrlong	local02, fp
1af78     14 4E 85 F1 | 	sub	fp, #20
1af7c     0C 1C BF FD | 	call	#_pop
1af80     FF 2A 02 F6 | 	mov	local03, result3
1af84     A7 FA 61 FC | 	wrlong	result1, fp
1af88     04 4E 05 F1 | 	add	fp, #4
1af8c     A7 FC 61 FC | 	wrlong	result2, fp
1af90     04 4E 05 F1 | 	add	fp, #4
1af94     A7 2A 62 FC | 	wrlong	local03, fp
1af98                 | ' 
1af98                 | ' t2=pop()
1af98                 | ' t1=pop()
1af98                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1af98     08 4E 85 F1 | 	sub	fp, #8
1af9c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1afa0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1afa4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1afa8     08 4E 05 A1 |  if_e	add	fp, #8
1afac     A7 3A 68 AC |  if_e	wrlong	#29, fp
1afb0     08 4E 85 A1 |  if_e	sub	fp, #8
1afb4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1afb4     14 4E 05 F1 | 	add	fp, #20
1afb8     A7 2A 02 FB | 	rdlong	local03, fp
1afbc     14 4E 85 F1 | 	sub	fp, #20
1afc0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1afc4     18 00 90 5D |  if_ne	jmp	#LR__2210
1afc8     0C 4E 05 F1 | 	add	fp, #12
1afcc     A7 2A 02 FB | 	rdlong	local03, fp
1afd0     A7 2A 62 FC | 	wrlong	local03, fp
1afd4     08 4E 05 F1 | 	add	fp, #8
1afd8     A7 3A 68 FC | 	wrlong	#29, fp
1afdc     14 4E 85 F1 | 	sub	fp, #20
1afe0                 | LR__2210
1afe0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1afe0     08 4E 05 F1 | 	add	fp, #8
1afe4     A7 2A 02 FB | 	rdlong	local03, fp
1afe8     08 4E 85 F1 | 	sub	fp, #8
1afec     1F 2A 0E F2 | 	cmp	local03, #31 wz
1aff0     14 4E 05 51 |  if_ne	add	fp, #20
1aff4     A7 28 02 5B |  if_ne	rdlong	local02, fp
1aff8     14 4E 85 51 |  if_ne	sub	fp, #20
1affc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1b000     08 4E 05 51 |  if_ne	add	fp, #8
1b004     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b008     08 4E 85 51 |  if_ne	sub	fp, #8
1b00c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1b010     14 4E 05 51 |  if_ne	add	fp, #20
1b014     14 4E 85 51 |  if_ne	sub	fp, #20
1b018     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1b01c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b020     08 4E 05 A1 |  if_e	add	fp, #8
1b024     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b028     08 4E 85 A1 |  if_e	sub	fp, #8
1b02c     18 00 90 AD |  if_e	jmp	#LR__2211
1b030     A7 2A 02 FB | 	rdlong	local03, fp
1b034     0C 4E 05 F1 | 	add	fp, #12
1b038     A7 26 02 FB | 	rdlong	local01, fp
1b03c     0C 4E 85 F1 | 	sub	fp, #12
1b040     13 2B 02 F5 | 	and	local03, local01
1b044     A7 2A 62 FC | 	wrlong	local03, fp
1b048                 | LR__2211
1b048     A7 12 02 F6 | 	mov	arg01, fp
1b04c     D4 1B BF FD | 	call	#_push
1b050     A7 F0 03 F6 | 	mov	ptra, fp
1b054     B2 00 A0 FD | 	call	#popregs_
1b058                 | _do_and_ret
1b058     2D 00 64 FD | 	ret
1b05c                 | 
1b05c                 | ' 
1b05c                 | ' '--------------------------------- DIV (integer divide)
1b05c                 | ' 
1b05c                 | ' sub do_div 
1b05c                 | _do_div
1b05c     01 4A 05 F6 | 	mov	COUNT_, #1
1b060     A8 00 A0 FD | 	call	#pushregs_
1b064     18 F0 07 F1 | 	add	ptra, #24
1b068     20 1B BF FD | 	call	#_pop
1b06c     FD 8A 02 F6 | 	mov	muldivb_, result1
1b070     FE 88 02 F6 | 	mov	muldiva_, result2
1b074     FF 26 02 F6 | 	mov	local01, result3
1b078     0C 4E 05 F1 | 	add	fp, #12
1b07c     A7 8A 62 FC | 	wrlong	muldivb_, fp
1b080     04 4E 05 F1 | 	add	fp, #4
1b084     A7 88 62 FC | 	wrlong	muldiva_, fp
1b088     04 4E 05 F1 | 	add	fp, #4
1b08c     A7 26 62 FC | 	wrlong	local01, fp
1b090     14 4E 85 F1 | 	sub	fp, #20
1b094     F4 1A BF FD | 	call	#_pop
1b098     A7 FA 61 FC | 	wrlong	result1, fp
1b09c     04 4E 05 F1 | 	add	fp, #4
1b0a0     A7 FC 61 FC | 	wrlong	result2, fp
1b0a4     04 4E 05 F1 | 	add	fp, #4
1b0a8     A7 FE 61 FC | 	wrlong	result3, fp
1b0ac                 | ' 
1b0ac                 | ' t2=pop()
1b0ac                 | ' t1=pop()
1b0ac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1b0ac     08 4E 85 F1 | 	sub	fp, #8
1b0b0     1F FE 0D F2 | 	cmp	result3, #31 wz
1b0b4     14 4E 05 51 |  if_ne	add	fp, #20
1b0b8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1b0bc     14 4E 85 51 |  if_ne	sub	fp, #20
1b0c0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1b0c4     A7 14 68 AC |  if_e	wrlong	#10, fp
1b0c8     08 4E 05 A1 |  if_e	add	fp, #8
1b0cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b0d0     08 4E 85 A1 |  if_e	sub	fp, #8
1b0d4     90 01 90 AD |  if_e	jmp	#LR__2226
1b0d8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1b0d8     08 4E 05 F1 | 	add	fp, #8
1b0dc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0e0     08 4E 85 F1 | 	sub	fp, #8
1b0e4     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b0e8     1C 00 90 5D |  if_ne	jmp	#LR__2220
1b0ec     08 4E 05 F1 | 	add	fp, #8
1b0f0     A7 38 68 FC | 	wrlong	#28, fp
1b0f4     08 4E 85 F1 | 	sub	fp, #8
1b0f8     A7 12 02 FB | 	rdlong	arg01, fp
1b0fc     00 14 06 F6 | 	mov	arg02, #0
1b100     50 C1 B0 FD | 	call	#__system___float_tointeger
1b104     A7 FA 61 FC | 	wrlong	result1, fp
1b108                 | LR__2220
1b108                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1b108     14 4E 05 F1 | 	add	fp, #20
1b10c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b110     14 4E 85 F1 | 	sub	fp, #20
1b114     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b118     28 00 90 5D |  if_ne	jmp	#LR__2221
1b11c     14 4E 05 F1 | 	add	fp, #20
1b120     A7 38 68 FC | 	wrlong	#28, fp
1b124     08 4E 85 F1 | 	sub	fp, #8
1b128     A7 12 02 FB | 	rdlong	arg01, fp
1b12c     0C 4E 85 F1 | 	sub	fp, #12
1b130     00 14 06 F6 | 	mov	arg02, #0
1b134     1C C1 B0 FD | 	call	#__system___float_tointeger
1b138     0C 4E 05 F1 | 	add	fp, #12
1b13c     A7 FA 61 FC | 	wrlong	result1, fp
1b140     0C 4E 85 F1 | 	sub	fp, #12
1b144                 | LR__2221
1b144                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1b144     08 4E 05 F1 | 	add	fp, #8
1b148     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b14c     08 4E 85 F1 | 	sub	fp, #8
1b150     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b154     14 4E 05 A1 |  if_e	add	fp, #20
1b158     A7 26 02 AB |  if_e	rdlong	local01, fp
1b15c     14 4E 85 A1 |  if_e	sub	fp, #20
1b160     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b164     20 00 90 5D |  if_ne	jmp	#LR__2222
1b168     0C 4E 05 F1 | 	add	fp, #12
1b16c     A7 26 02 FB | 	rdlong	local01, fp
1b170     0C 4E 85 F1 | 	sub	fp, #12
1b174     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b178     13 8B 12 FD | 	qdiv	muldivb_, local01
1b17c     18 26 62 FD | 	getqx	local01
1b180     A7 26 62 FC | 	wrlong	local01, fp
1b184     E0 00 90 FD | 	jmp	#LR__2226
1b188                 | LR__2222
1b188                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1b188     08 4E 05 F1 | 	add	fp, #8
1b18c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b190     08 4E 85 F1 | 	sub	fp, #8
1b194     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b198     14 4E 05 A1 |  if_e	add	fp, #20
1b19c     A7 26 02 AB |  if_e	rdlong	local01, fp
1b1a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b1a4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b1a8     2C 00 90 5D |  if_ne	jmp	#LR__2223
1b1ac     0C 4E 05 F1 | 	add	fp, #12
1b1b0     A7 26 02 FB | 	rdlong	local01, fp
1b1b4     0C 4E 85 F1 | 	sub	fp, #12
1b1b8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b1bc     13 8B 12 FD | 	qdiv	muldivb_, local01
1b1c0     18 26 62 FD | 	getqx	local01
1b1c4     A7 26 62 FC | 	wrlong	local01, fp
1b1c8     08 4E 05 F1 | 	add	fp, #8
1b1cc     A7 38 68 FC | 	wrlong	#28, fp
1b1d0     08 4E 85 F1 | 	sub	fp, #8
1b1d4     90 00 90 FD | 	jmp	#LR__2226
1b1d8                 | LR__2223
1b1d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1b1d8     08 4E 05 F1 | 	add	fp, #8
1b1dc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b1e0     08 4E 85 F1 | 	sub	fp, #8
1b1e4     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b1e8     14 4E 05 A1 |  if_e	add	fp, #20
1b1ec     A7 26 02 AB |  if_e	rdlong	local01, fp
1b1f0     14 4E 85 A1 |  if_e	sub	fp, #20
1b1f4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b1f8     1C 00 90 5D |  if_ne	jmp	#LR__2224
1b1fc     A7 88 02 FB | 	rdlong	muldiva_, fp
1b200     0C 4E 05 F1 | 	add	fp, #12
1b204     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b208     0C 4E 85 F1 | 	sub	fp, #12
1b20c     BA 00 A0 FD | 	call	#divide_
1b210     A7 8A 62 FC | 	wrlong	muldivb_, fp
1b214     50 00 90 FD | 	jmp	#LR__2226
1b218                 | LR__2224
1b218                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1b218     08 4E 05 F1 | 	add	fp, #8
1b21c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b220     08 4E 85 F1 | 	sub	fp, #8
1b224     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b228     14 4E 05 A1 |  if_e	add	fp, #20
1b22c     A7 26 02 AB |  if_e	rdlong	local01, fp
1b230     14 4E 85 A1 |  if_e	sub	fp, #20
1b234     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b238     1C 00 90 5D |  if_ne	jmp	#LR__2225
1b23c     A7 88 02 FB | 	rdlong	muldiva_, fp
1b240     0C 4E 05 F1 | 	add	fp, #12
1b244     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b248     0C 4E 85 F1 | 	sub	fp, #12
1b24c     BA 00 A0 FD | 	call	#divide_
1b250     A7 8A 62 FC | 	wrlong	muldivb_, fp
1b254     10 00 90 FD | 	jmp	#LR__2226
1b258                 | LR__2225
1b258     A7 16 68 FC | 	wrlong	#11, fp
1b25c     08 4E 05 F1 | 	add	fp, #8
1b260     A7 FE 69 FC | 	wrlong	#255, fp
1b264     08 4E 85 F1 | 	sub	fp, #8
1b268                 | LR__2226
1b268     A7 12 02 F6 | 	mov	arg01, fp
1b26c     B4 19 BF FD | 	call	#_push
1b270     A7 F0 03 F6 | 	mov	ptra, fp
1b274     B2 00 A0 FD | 	call	#popregs_
1b278                 | _do_div_ret
1b278     2D 00 64 FD | 	ret
1b27c                 | 
1b27c                 | ' 
1b27c                 | ' '--------------------------------- equal (=)
1b27c                 | ' 
1b27c                 | ' sub do_eq
1b27c                 | _do_eq
1b27c     05 4A 05 F6 | 	mov	COUNT_, #5
1b280     A8 00 A0 FD | 	call	#pushregs_
1b284     18 F0 07 F1 | 	add	ptra, #24
1b288     00 19 BF FD | 	call	#_pop
1b28c     FD 26 02 F6 | 	mov	local01, result1
1b290     FE 28 02 F6 | 	mov	local02, result2
1b294     FF 2A 02 F6 | 	mov	local03, result3
1b298     0C 4E 05 F1 | 	add	fp, #12
1b29c     A7 26 62 FC | 	wrlong	local01, fp
1b2a0     04 4E 05 F1 | 	add	fp, #4
1b2a4     A7 28 62 FC | 	wrlong	local02, fp
1b2a8     04 4E 05 F1 | 	add	fp, #4
1b2ac     A7 2A 62 FC | 	wrlong	local03, fp
1b2b0     14 4E 85 F1 | 	sub	fp, #20
1b2b4     D4 18 BF FD | 	call	#_pop
1b2b8     FF 2A 02 F6 | 	mov	local03, result3
1b2bc     A7 FA 61 FC | 	wrlong	result1, fp
1b2c0     04 4E 05 F1 | 	add	fp, #4
1b2c4     A7 FC 61 FC | 	wrlong	result2, fp
1b2c8     04 4E 05 F1 | 	add	fp, #4
1b2cc     A7 2A 62 FC | 	wrlong	local03, fp
1b2d0                 | ' 
1b2d0                 | ' t2=pop()
1b2d0                 | ' t1=pop()
1b2d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1b2d0     08 4E 85 F1 | 	sub	fp, #8
1b2d4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b2d8     14 4E 05 A1 |  if_e	add	fp, #20
1b2dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b2e0     14 4E 85 A1 |  if_e	sub	fp, #20
1b2e4     16 2B 02 A6 |  if_e	mov	local03, local04
1b2e8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b2ec     28 00 90 5D |  if_ne	jmp	#LR__2230
1b2f0     00 26 06 F6 | 	mov	local01, #0
1b2f4     A7 12 02 FB | 	rdlong	arg01, fp
1b2f8     0C 4E 05 F1 | 	add	fp, #12
1b2fc     A7 14 02 FB | 	rdlong	arg02, fp
1b300     0C 4E 85 F1 | 	sub	fp, #12
1b304     34 8C B0 FD | 	call	#__system___string_cmp
1b308     00 FA 0D F2 | 	cmp	result1, #0 wz
1b30c     00 26 26 A6 |  if_e	not	local01, #0
1b310     A7 26 62 FC | 	wrlong	local01, fp
1b314     20 04 90 FD | 	jmp	#LR__2243
1b318                 | LR__2230
1b318                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1b318     08 4E 05 F1 | 	add	fp, #8
1b31c     A7 26 02 FB | 	rdlong	local01, fp
1b320     08 4E 85 F1 | 	sub	fp, #8
1b324     1E 26 0E F2 | 	cmp	local01, #30 wz
1b328     14 4E 05 A1 |  if_e	add	fp, #20
1b32c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b330     14 4E 85 A1 |  if_e	sub	fp, #20
1b334     16 2B 02 A6 |  if_e	mov	local03, local04
1b338     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b33c     2C 00 90 5D |  if_ne	jmp	#LR__2231
1b340     00 26 06 F6 | 	mov	local01, #0
1b344     A7 12 02 FB | 	rdlong	arg01, fp
1b348     0C 4E 05 F1 | 	add	fp, #12
1b34c     A7 14 02 FB | 	rdlong	arg02, fp
1b350     0C 4E 85 F1 | 	sub	fp, #12
1b354     01 16 06 F6 | 	mov	arg03, #1
1b358     64 BE B0 FD | 	call	#__system___float_cmp
1b35c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b360     00 26 26 A6 |  if_e	not	local01, #0
1b364     A7 26 62 FC | 	wrlong	local01, fp
1b368     CC 03 90 FD | 	jmp	#LR__2243
1b36c                 | LR__2231
1b36c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1b36c     08 4E 05 F1 | 	add	fp, #8
1b370     A7 26 02 FB | 	rdlong	local01, fp
1b374     08 4E 85 F1 | 	sub	fp, #8
1b378     1E 26 0E F2 | 	cmp	local01, #30 wz
1b37c     14 4E 05 A1 |  if_e	add	fp, #20
1b380     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b384     14 4E 85 A1 |  if_e	sub	fp, #20
1b388     16 2B 02 A6 |  if_e	mov	local03, local04
1b38c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b390     48 00 90 5D |  if_ne	jmp	#LR__2232
1b394     00 26 06 F6 | 	mov	local01, #0
1b398     A7 28 02 FB | 	rdlong	local02, fp
1b39c     0C 4E 05 F1 | 	add	fp, #12
1b3a0     A7 12 02 FB | 	rdlong	arg01, fp
1b3a4     0C 4E 85 F1 | 	sub	fp, #12
1b3a8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b3ac     1F 2E C6 C9 |  if_b	decod	local05, #31
1b3b0     00 2E 06 36 |  if_ae	mov	local05, #0
1b3b4     D0 B5 B0 FD | 	call	#__system___float_fromuns
1b3b8     17 FB 61 F5 | 	xor	result1, local05
1b3bc     FD 14 02 F6 | 	mov	arg02, result1
1b3c0     14 13 02 F6 | 	mov	arg01, local02
1b3c4     01 16 06 F6 | 	mov	arg03, #1
1b3c8     F4 BD B0 FD | 	call	#__system___float_cmp
1b3cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3d0     00 26 26 A6 |  if_e	not	local01, #0
1b3d4     A7 26 62 FC | 	wrlong	local01, fp
1b3d8     5C 03 90 FD | 	jmp	#LR__2243
1b3dc                 | LR__2232
1b3dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1b3dc     08 4E 05 F1 | 	add	fp, #8
1b3e0     A7 26 02 FB | 	rdlong	local01, fp
1b3e4     08 4E 85 F1 | 	sub	fp, #8
1b3e8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b3ec     14 4E 05 A1 |  if_e	add	fp, #20
1b3f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b3f4     14 4E 85 A1 |  if_e	sub	fp, #20
1b3f8     16 2B 02 A6 |  if_e	mov	local03, local04
1b3fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b400     38 00 90 5D |  if_ne	jmp	#LR__2233
1b404     00 26 06 F6 | 	mov	local01, #0
1b408     A7 28 02 FB | 	rdlong	local02, fp
1b40c     0C 4E 05 F1 | 	add	fp, #12
1b410     A7 12 02 FB | 	rdlong	arg01, fp
1b414     0C 4E 85 F1 | 	sub	fp, #12
1b418     6C B5 B0 FD | 	call	#__system___float_fromuns
1b41c     FD 14 02 F6 | 	mov	arg02, result1
1b420     14 13 02 F6 | 	mov	arg01, local02
1b424     01 16 06 F6 | 	mov	arg03, #1
1b428     94 BD B0 FD | 	call	#__system___float_cmp
1b42c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b430     00 26 26 A6 |  if_e	not	local01, #0
1b434     A7 26 62 FC | 	wrlong	local01, fp
1b438     FC 02 90 FD | 	jmp	#LR__2243
1b43c                 | LR__2233
1b43c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1b43c     08 4E 05 F1 | 	add	fp, #8
1b440     A7 26 02 FB | 	rdlong	local01, fp
1b444     08 4E 85 F1 | 	sub	fp, #8
1b448     1C 26 0E F2 | 	cmp	local01, #28 wz
1b44c     14 4E 05 A1 |  if_e	add	fp, #20
1b450     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b454     14 4E 85 A1 |  if_e	sub	fp, #20
1b458     16 2B 02 A6 |  if_e	mov	local03, local04
1b45c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b460     44 00 90 5D |  if_ne	jmp	#LR__2234
1b464     00 26 06 F6 | 	mov	local01, #0
1b468     A7 12 02 FB | 	rdlong	arg01, fp
1b46c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b470     1F 2E C6 C9 |  if_b	decod	local05, #31
1b474     00 2E 06 36 |  if_ae	mov	local05, #0
1b478     0C B5 B0 FD | 	call	#__system___float_fromuns
1b47c     17 FB 61 F5 | 	xor	result1, local05
1b480     FD 12 02 F6 | 	mov	arg01, result1
1b484     0C 4E 05 F1 | 	add	fp, #12
1b488     A7 14 02 FB | 	rdlong	arg02, fp
1b48c     0C 4E 85 F1 | 	sub	fp, #12
1b490     01 16 06 F6 | 	mov	arg03, #1
1b494     28 BD B0 FD | 	call	#__system___float_cmp
1b498     00 FA 0D F2 | 	cmp	result1, #0 wz
1b49c     00 26 26 A6 |  if_e	not	local01, #0
1b4a0     A7 26 62 FC | 	wrlong	local01, fp
1b4a4     90 02 90 FD | 	jmp	#LR__2243
1b4a8                 | LR__2234
1b4a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1b4a8     08 4E 05 F1 | 	add	fp, #8
1b4ac     A7 26 02 FB | 	rdlong	local01, fp
1b4b0     08 4E 85 F1 | 	sub	fp, #8
1b4b4     1C 26 0E F2 | 	cmp	local01, #28 wz
1b4b8     14 4E 05 A1 |  if_e	add	fp, #20
1b4bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b4c0     14 4E 85 A1 |  if_e	sub	fp, #20
1b4c4     16 2B 02 A6 |  if_e	mov	local03, local04
1b4c8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b4cc     24 00 90 5D |  if_ne	jmp	#LR__2235
1b4d0     00 26 06 F6 | 	mov	local01, #0
1b4d4     A7 28 02 FB | 	rdlong	local02, fp
1b4d8     0C 4E 05 F1 | 	add	fp, #12
1b4dc     A7 2A 02 FB | 	rdlong	local03, fp
1b4e0     0C 4E 85 F1 | 	sub	fp, #12
1b4e4     15 29 0A F2 | 	cmp	local02, local03 wz
1b4e8     01 26 66 A6 |  if_e	neg	local01, #1
1b4ec     A7 26 62 FC | 	wrlong	local01, fp
1b4f0     44 02 90 FD | 	jmp	#LR__2243
1b4f4                 | LR__2235
1b4f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1b4f4     08 4E 05 F1 | 	add	fp, #8
1b4f8     A7 26 02 FB | 	rdlong	local01, fp
1b4fc     08 4E 85 F1 | 	sub	fp, #8
1b500     1C 26 0E F2 | 	cmp	local01, #28 wz
1b504     14 4E 05 A1 |  if_e	add	fp, #20
1b508     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b50c     14 4E 85 A1 |  if_e	sub	fp, #20
1b510     16 2B 02 A6 |  if_e	mov	local03, local04
1b514     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b518     24 00 90 5D |  if_ne	jmp	#LR__2236
1b51c     00 26 06 F6 | 	mov	local01, #0
1b520     A7 28 02 FB | 	rdlong	local02, fp
1b524     0C 4E 05 F1 | 	add	fp, #12
1b528     A7 2A 02 FB | 	rdlong	local03, fp
1b52c     0C 4E 85 F1 | 	sub	fp, #12
1b530     15 29 0A F2 | 	cmp	local02, local03 wz
1b534     01 26 66 A6 |  if_e	neg	local01, #1
1b538     A7 26 62 FC | 	wrlong	local01, fp
1b53c     F8 01 90 FD | 	jmp	#LR__2243
1b540                 | LR__2236
1b540                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1b540     08 4E 05 F1 | 	add	fp, #8
1b544     A7 26 02 FB | 	rdlong	local01, fp
1b548     08 4E 85 F1 | 	sub	fp, #8
1b54c     1D 26 0E F2 | 	cmp	local01, #29 wz
1b550     14 4E 05 A1 |  if_e	add	fp, #20
1b554     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b558     14 4E 85 A1 |  if_e	sub	fp, #20
1b55c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1b560     34 00 90 5D |  if_ne	jmp	#LR__2237
1b564     00 26 06 F6 | 	mov	local01, #0
1b568     A7 12 02 FB | 	rdlong	arg01, fp
1b56c     18 B4 B0 FD | 	call	#__system___float_fromuns
1b570     FD 12 02 F6 | 	mov	arg01, result1
1b574     0C 4E 05 F1 | 	add	fp, #12
1b578     A7 14 02 FB | 	rdlong	arg02, fp
1b57c     0C 4E 85 F1 | 	sub	fp, #12
1b580     01 16 06 F6 | 	mov	arg03, #1
1b584     38 BC B0 FD | 	call	#__system___float_cmp
1b588     00 FA 0D F2 | 	cmp	result1, #0 wz
1b58c     00 26 26 A6 |  if_e	not	local01, #0
1b590     A7 26 62 FC | 	wrlong	local01, fp
1b594     A0 01 90 FD | 	jmp	#LR__2243
1b598                 | LR__2237
1b598                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1b598     08 4E 05 F1 | 	add	fp, #8
1b59c     A7 26 02 FB | 	rdlong	local01, fp
1b5a0     08 4E 85 F1 | 	sub	fp, #8
1b5a4     1D 26 0E F2 | 	cmp	local01, #29 wz
1b5a8     14 4E 05 A1 |  if_e	add	fp, #20
1b5ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b5b0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b5b8     24 00 90 5D |  if_ne	jmp	#LR__2238
1b5bc     00 26 06 F6 | 	mov	local01, #0
1b5c0     A7 28 02 FB | 	rdlong	local02, fp
1b5c4     0C 4E 05 F1 | 	add	fp, #12
1b5c8     A7 2A 02 FB | 	rdlong	local03, fp
1b5cc     0C 4E 85 F1 | 	sub	fp, #12
1b5d0     15 29 0A F2 | 	cmp	local02, local03 wz
1b5d4     01 26 66 A6 |  if_e	neg	local01, #1
1b5d8     A7 26 62 FC | 	wrlong	local01, fp
1b5dc     58 01 90 FD | 	jmp	#LR__2243
1b5e0                 | LR__2238
1b5e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1b5e0     08 4E 05 F1 | 	add	fp, #8
1b5e4     A7 26 02 FB | 	rdlong	local01, fp
1b5e8     08 4E 85 F1 | 	sub	fp, #8
1b5ec     1D 26 0E F2 | 	cmp	local01, #29 wz
1b5f0     14 4E 05 A1 |  if_e	add	fp, #20
1b5f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b5f8     14 4E 85 A1 |  if_e	sub	fp, #20
1b5fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b600     24 00 90 5D |  if_ne	jmp	#LR__2239
1b604     00 26 06 F6 | 	mov	local01, #0
1b608     A7 28 02 FB | 	rdlong	local02, fp
1b60c     0C 4E 05 F1 | 	add	fp, #12
1b610     A7 2A 02 FB | 	rdlong	local03, fp
1b614     0C 4E 85 F1 | 	sub	fp, #12
1b618     15 29 0A F2 | 	cmp	local02, local03 wz
1b61c     01 26 66 A6 |  if_e	neg	local01, #1
1b620     A7 26 62 FC | 	wrlong	local01, fp
1b624     10 01 90 FD | 	jmp	#LR__2243
1b628                 | LR__2239
1b628                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1b628     08 4E 05 F1 | 	add	fp, #8
1b62c     A7 26 02 FB | 	rdlong	local01, fp
1b630     08 4E 85 F1 | 	sub	fp, #8
1b634     2B 26 0E F2 | 	cmp	local01, #43 wz
1b638     14 4E 05 A1 |  if_e	add	fp, #20
1b63c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b640     14 4E 85 A1 |  if_e	sub	fp, #20
1b644     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b648     30 00 90 5D |  if_ne	jmp	#LR__2240
1b64c     00 26 06 F6 | 	mov	local01, #0
1b650     A7 12 02 FB | 	rdlong	arg01, fp
1b654     AC 16 BF FD | 	call	#_convertstring
1b658     FD 12 02 F6 | 	mov	arg01, result1
1b65c     0C 4E 05 F1 | 	add	fp, #12
1b660     A7 14 02 FB | 	rdlong	arg02, fp
1b664     0C 4E 85 F1 | 	sub	fp, #12
1b668     D0 88 B0 FD | 	call	#__system___string_cmp
1b66c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b670     00 26 26 A6 |  if_e	not	local01, #0
1b674     A7 26 62 FC | 	wrlong	local01, fp
1b678     BC 00 90 FD | 	jmp	#LR__2243
1b67c                 | LR__2240
1b67c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1b67c     08 4E 05 F1 | 	add	fp, #8
1b680     A7 26 02 FB | 	rdlong	local01, fp
1b684     08 4E 85 F1 | 	sub	fp, #8
1b688     1F 26 0E F2 | 	cmp	local01, #31 wz
1b68c     14 4E 05 A1 |  if_e	add	fp, #20
1b690     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b694     14 4E 85 A1 |  if_e	sub	fp, #20
1b698     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b69c     34 00 90 5D |  if_ne	jmp	#LR__2241
1b6a0     00 26 06 F6 | 	mov	local01, #0
1b6a4     A7 28 02 FB | 	rdlong	local02, fp
1b6a8     0C 4E 05 F1 | 	add	fp, #12
1b6ac     A7 12 02 FB | 	rdlong	arg01, fp
1b6b0     0C 4E 85 F1 | 	sub	fp, #12
1b6b4     4C 16 BF FD | 	call	#_convertstring
1b6b8     FD 14 02 F6 | 	mov	arg02, result1
1b6bc     14 13 02 F6 | 	mov	arg01, local02
1b6c0     78 88 B0 FD | 	call	#__system___string_cmp
1b6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6c8     00 26 26 A6 |  if_e	not	local01, #0
1b6cc     A7 26 62 FC | 	wrlong	local01, fp
1b6d0     64 00 90 FD | 	jmp	#LR__2243
1b6d4                 | LR__2241
1b6d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1b6d4     08 4E 05 F1 | 	add	fp, #8
1b6d8     A7 26 02 FB | 	rdlong	local01, fp
1b6dc     08 4E 85 F1 | 	sub	fp, #8
1b6e0     2B 26 0E F2 | 	cmp	local01, #43 wz
1b6e4     14 4E 05 A1 |  if_e	add	fp, #20
1b6e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b6ec     14 4E 85 A1 |  if_e	sub	fp, #20
1b6f0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b6f4     3C 00 90 5D |  if_ne	jmp	#LR__2242
1b6f8     00 26 06 F6 | 	mov	local01, #0
1b6fc     A7 12 02 FB | 	rdlong	arg01, fp
1b700     00 16 BF FD | 	call	#_convertstring
1b704     FD 28 02 F6 | 	mov	local02, result1
1b708     0C 4E 05 F1 | 	add	fp, #12
1b70c     A7 12 02 FB | 	rdlong	arg01, fp
1b710     0C 4E 85 F1 | 	sub	fp, #12
1b714     EC 15 BF FD | 	call	#_convertstring
1b718     FD 14 02 F6 | 	mov	arg02, result1
1b71c     14 13 02 F6 | 	mov	arg01, local02
1b720     18 88 B0 FD | 	call	#__system___string_cmp
1b724     00 FA 0D F2 | 	cmp	result1, #0 wz
1b728     00 26 26 A6 |  if_e	not	local01, #0
1b72c     A7 26 62 FC | 	wrlong	local01, fp
1b730     04 00 90 FD | 	jmp	#LR__2243
1b734                 | LR__2242
1b734     A7 00 68 FC | 	wrlong	#0, fp
1b738                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1b738                 | LR__2243
1b738     08 4E 05 F1 | 	add	fp, #8
1b73c     A7 38 68 FC | 	wrlong	#28, fp
1b740     08 4E 85 F1 | 	sub	fp, #8
1b744     A7 12 02 F6 | 	mov	arg01, fp
1b748     D8 14 BF FD | 	call	#_push
1b74c     A7 F0 03 F6 | 	mov	ptra, fp
1b750     B2 00 A0 FD | 	call	#popregs_
1b754                 | _do_eq_ret
1b754     2D 00 64 FD | 	ret
1b758                 | 
1b758                 | ' 
1b758                 | ' '--------------------------------- fdiv (/) - float divide
1b758                 | ' 
1b758                 | ' sub do_fdiv 
1b758                 | _do_fdiv
1b758     02 4A 05 F6 | 	mov	COUNT_, #2
1b75c     A8 00 A0 FD | 	call	#pushregs_
1b760     18 F0 07 F1 | 	add	ptra, #24
1b764     24 14 BF FD | 	call	#_pop
1b768     FD 14 02 F6 | 	mov	arg02, result1
1b76c     FE 12 02 F6 | 	mov	arg01, result2
1b770     FF 26 02 F6 | 	mov	local01, result3
1b774     0C 4E 05 F1 | 	add	fp, #12
1b778     A7 14 62 FC | 	wrlong	arg02, fp
1b77c     04 4E 05 F1 | 	add	fp, #4
1b780     A7 12 62 FC | 	wrlong	arg01, fp
1b784     04 4E 05 F1 | 	add	fp, #4
1b788     A7 26 62 FC | 	wrlong	local01, fp
1b78c     14 4E 85 F1 | 	sub	fp, #20
1b790     F8 13 BF FD | 	call	#_pop
1b794     A7 FA 61 FC | 	wrlong	result1, fp
1b798     04 4E 05 F1 | 	add	fp, #4
1b79c     A7 FC 61 FC | 	wrlong	result2, fp
1b7a0     04 4E 05 F1 | 	add	fp, #4
1b7a4     A7 FE 61 FC | 	wrlong	result3, fp
1b7a8                 | ' 
1b7a8                 | ' t2=pop()
1b7a8                 | ' t1=pop()
1b7a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1b7a8     08 4E 85 F1 | 	sub	fp, #8
1b7ac     1F FE 0D F2 | 	cmp	result3, #31 wz
1b7b0     14 4E 05 51 |  if_ne	add	fp, #20
1b7b4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b7b8     14 4E 85 51 |  if_ne	sub	fp, #20
1b7bc     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1b7c0     A7 14 68 AC |  if_e	wrlong	#10, fp
1b7c4     08 4E 05 A1 |  if_e	add	fp, #8
1b7c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b7cc     08 4E 85 A1 |  if_e	sub	fp, #8
1b7d0     38 01 90 AD |  if_e	jmp	#LR__2255
1b7d4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1b7d4     08 4E 05 F1 | 	add	fp, #8
1b7d8     A7 14 02 FB | 	rdlong	arg02, fp
1b7dc     08 4E 85 F1 | 	sub	fp, #8
1b7e0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b7e4     28 00 90 5D |  if_ne	jmp	#LR__2250
1b7e8     08 4E 05 F1 | 	add	fp, #8
1b7ec     A7 3C 68 FC | 	wrlong	#30, fp
1b7f0     08 4E 85 F1 | 	sub	fp, #8
1b7f4     A7 12 02 FB | 	rdlong	arg01, fp
1b7f8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b7fc     1F 28 C6 C9 |  if_b	decod	local02, #31
1b800     00 28 06 36 |  if_ae	mov	local02, #0
1b804     80 B1 B0 FD | 	call	#__system___float_fromuns
1b808     14 FB 61 F5 | 	xor	result1, local02
1b80c     A7 FA 61 FC | 	wrlong	result1, fp
1b810                 | LR__2250
1b810                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1b810     08 4E 05 F1 | 	add	fp, #8
1b814     A7 14 02 FB | 	rdlong	arg02, fp
1b818     08 4E 85 F1 | 	sub	fp, #8
1b81c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b820     18 00 90 5D |  if_ne	jmp	#LR__2251
1b824     08 4E 05 F1 | 	add	fp, #8
1b828     A7 3C 68 FC | 	wrlong	#30, fp
1b82c     08 4E 85 F1 | 	sub	fp, #8
1b830     A7 12 02 FB | 	rdlong	arg01, fp
1b834     50 B1 B0 FD | 	call	#__system___float_fromuns
1b838     A7 FA 61 FC | 	wrlong	result1, fp
1b83c                 | LR__2251
1b83c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1b83c     14 4E 05 F1 | 	add	fp, #20
1b840     A7 14 02 FB | 	rdlong	arg02, fp
1b844     14 4E 85 F1 | 	sub	fp, #20
1b848     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b84c     34 00 90 5D |  if_ne	jmp	#LR__2252
1b850     14 4E 05 F1 | 	add	fp, #20
1b854     A7 3C 68 FC | 	wrlong	#30, fp
1b858     08 4E 85 F1 | 	sub	fp, #8
1b85c     A7 12 02 FB | 	rdlong	arg01, fp
1b860     0C 4E 85 F1 | 	sub	fp, #12
1b864     09 13 52 F6 | 	abs	arg01, arg01 wc
1b868     1F 28 C6 C9 |  if_b	decod	local02, #31
1b86c     00 28 06 36 |  if_ae	mov	local02, #0
1b870     14 B1 B0 FD | 	call	#__system___float_fromuns
1b874     14 FB 61 F5 | 	xor	result1, local02
1b878     0C 4E 05 F1 | 	add	fp, #12
1b87c     A7 FA 61 FC | 	wrlong	result1, fp
1b880     0C 4E 85 F1 | 	sub	fp, #12
1b884                 | LR__2252
1b884                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1b884     14 4E 05 F1 | 	add	fp, #20
1b888     A7 14 02 FB | 	rdlong	arg02, fp
1b88c     14 4E 85 F1 | 	sub	fp, #20
1b890     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b894     24 00 90 5D |  if_ne	jmp	#LR__2253
1b898     14 4E 05 F1 | 	add	fp, #20
1b89c     A7 3C 68 FC | 	wrlong	#30, fp
1b8a0     08 4E 85 F1 | 	sub	fp, #8
1b8a4     A7 12 02 FB | 	rdlong	arg01, fp
1b8a8     0C 4E 85 F1 | 	sub	fp, #12
1b8ac     D8 B0 B0 FD | 	call	#__system___float_fromuns
1b8b0     0C 4E 05 F1 | 	add	fp, #12
1b8b4     A7 FA 61 FC | 	wrlong	result1, fp
1b8b8     0C 4E 85 F1 | 	sub	fp, #12
1b8bc                 | LR__2253
1b8bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1b8bc     08 4E 05 F1 | 	add	fp, #8
1b8c0     A7 14 02 FB | 	rdlong	arg02, fp
1b8c4     08 4E 85 F1 | 	sub	fp, #8
1b8c8     1E 14 0E F2 | 	cmp	arg02, #30 wz
1b8cc     14 4E 05 A1 |  if_e	add	fp, #20
1b8d0     A7 26 02 AB |  if_e	rdlong	local01, fp
1b8d4     14 4E 85 A1 |  if_e	sub	fp, #20
1b8d8     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1b8dc     1C 00 90 5D |  if_ne	jmp	#LR__2254
1b8e0     A7 12 02 FB | 	rdlong	arg01, fp
1b8e4     0C 4E 05 F1 | 	add	fp, #12
1b8e8     A7 14 02 FB | 	rdlong	arg02, fp
1b8ec     0C 4E 85 F1 | 	sub	fp, #12
1b8f0     9C B6 B0 FD | 	call	#__system___float_div
1b8f4     A7 FA 61 FC | 	wrlong	result1, fp
1b8f8     10 00 90 FD | 	jmp	#LR__2255
1b8fc                 | LR__2254
1b8fc     A7 16 68 FC | 	wrlong	#11, fp
1b900     08 4E 05 F1 | 	add	fp, #8
1b904     A7 FE 69 FC | 	wrlong	#255, fp
1b908     08 4E 85 F1 | 	sub	fp, #8
1b90c                 | LR__2255
1b90c     A7 12 02 F6 | 	mov	arg01, fp
1b910     10 13 BF FD | 	call	#_push
1b914     A7 F0 03 F6 | 	mov	ptra, fp
1b918     B2 00 A0 FD | 	call	#popregs_
1b91c                 | _do_fdiv_ret
1b91c     2D 00 64 FD | 	ret
1b920                 | 
1b920                 | ' 
1b920                 | ' '--------------------------------- greater or equal (>=)
1b920                 | ' 
1b920                 | ' sub do_ge
1b920                 | _do_ge
1b920     05 4A 05 F6 | 	mov	COUNT_, #5
1b924     A8 00 A0 FD | 	call	#pushregs_
1b928     18 F0 07 F1 | 	add	ptra, #24
1b92c     5C 12 BF FD | 	call	#_pop
1b930     FD 26 02 F6 | 	mov	local01, result1
1b934     FE 28 02 F6 | 	mov	local02, result2
1b938     FF 2A 02 F6 | 	mov	local03, result3
1b93c     0C 4E 05 F1 | 	add	fp, #12
1b940     A7 26 62 FC | 	wrlong	local01, fp
1b944     04 4E 05 F1 | 	add	fp, #4
1b948     A7 28 62 FC | 	wrlong	local02, fp
1b94c     04 4E 05 F1 | 	add	fp, #4
1b950     A7 2A 62 FC | 	wrlong	local03, fp
1b954     14 4E 85 F1 | 	sub	fp, #20
1b958     30 12 BF FD | 	call	#_pop
1b95c     FF 2A 02 F6 | 	mov	local03, result3
1b960     A7 FA 61 FC | 	wrlong	result1, fp
1b964     04 4E 05 F1 | 	add	fp, #4
1b968     A7 FC 61 FC | 	wrlong	result2, fp
1b96c     04 4E 05 F1 | 	add	fp, #4
1b970     A7 2A 62 FC | 	wrlong	local03, fp
1b974                 | ' 
1b974                 | ' t2=pop()
1b974                 | ' t1=pop()
1b974                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1b974     08 4E 85 F1 | 	sub	fp, #8
1b978     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b97c     14 4E 05 A1 |  if_e	add	fp, #20
1b980     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b984     14 4E 85 A1 |  if_e	sub	fp, #20
1b988     16 2B 02 A6 |  if_e	mov	local03, local04
1b98c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b990     28 00 90 5D |  if_ne	jmp	#LR__2260
1b994     00 26 06 F6 | 	mov	local01, #0
1b998     A7 12 02 FB | 	rdlong	arg01, fp
1b99c     0C 4E 05 F1 | 	add	fp, #12
1b9a0     A7 14 02 FB | 	rdlong	arg02, fp
1b9a4     0C 4E 85 F1 | 	sub	fp, #12
1b9a8     90 85 B0 FD | 	call	#__system___string_cmp
1b9ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1b9b0     00 26 26 36 |  if_ae	not	local01, #0
1b9b4     A7 26 62 FC | 	wrlong	local01, fp
1b9b8     24 04 90 FD | 	jmp	#LR__2273
1b9bc                 | LR__2260
1b9bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1b9bc     08 4E 05 F1 | 	add	fp, #8
1b9c0     A7 26 02 FB | 	rdlong	local01, fp
1b9c4     08 4E 85 F1 | 	sub	fp, #8
1b9c8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b9cc     14 4E 05 A1 |  if_e	add	fp, #20
1b9d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b9d4     14 4E 85 A1 |  if_e	sub	fp, #20
1b9d8     16 2B 02 A6 |  if_e	mov	local03, local04
1b9dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b9e0     2C 00 90 5D |  if_ne	jmp	#LR__2261
1b9e4     00 26 06 F6 | 	mov	local01, #0
1b9e8     A7 12 02 FB | 	rdlong	arg01, fp
1b9ec     0C 4E 05 F1 | 	add	fp, #12
1b9f0     A7 14 02 FB | 	rdlong	arg02, fp
1b9f4     0C 4E 85 F1 | 	sub	fp, #12
1b9f8     01 16 66 F6 | 	neg	arg03, #1
1b9fc     C0 B7 B0 FD | 	call	#__system___float_cmp
1ba00     00 FA 55 F2 | 	cmps	result1, #0 wc
1ba04     00 26 26 36 |  if_ae	not	local01, #0
1ba08     A7 26 62 FC | 	wrlong	local01, fp
1ba0c     D0 03 90 FD | 	jmp	#LR__2273
1ba10                 | LR__2261
1ba10                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ba10     08 4E 05 F1 | 	add	fp, #8
1ba14     A7 26 02 FB | 	rdlong	local01, fp
1ba18     08 4E 85 F1 | 	sub	fp, #8
1ba1c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ba20     14 4E 05 A1 |  if_e	add	fp, #20
1ba24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba28     14 4E 85 A1 |  if_e	sub	fp, #20
1ba2c     16 2B 02 A6 |  if_e	mov	local03, local04
1ba30     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ba34     48 00 90 5D |  if_ne	jmp	#LR__2262
1ba38     00 26 06 F6 | 	mov	local01, #0
1ba3c     A7 28 02 FB | 	rdlong	local02, fp
1ba40     0C 4E 05 F1 | 	add	fp, #12
1ba44     A7 12 02 FB | 	rdlong	arg01, fp
1ba48     0C 4E 85 F1 | 	sub	fp, #12
1ba4c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ba50     1F 2E C6 C9 |  if_b	decod	local05, #31
1ba54     00 2E 06 36 |  if_ae	mov	local05, #0
1ba58     2C AF B0 FD | 	call	#__system___float_fromuns
1ba5c     17 FB 61 F5 | 	xor	result1, local05
1ba60     FD 14 02 F6 | 	mov	arg02, result1
1ba64     14 13 02 F6 | 	mov	arg01, local02
1ba68     01 16 66 F6 | 	neg	arg03, #1
1ba6c     50 B7 B0 FD | 	call	#__system___float_cmp
1ba70     00 FA 55 F2 | 	cmps	result1, #0 wc
1ba74     00 26 26 36 |  if_ae	not	local01, #0
1ba78     A7 26 62 FC | 	wrlong	local01, fp
1ba7c     60 03 90 FD | 	jmp	#LR__2273
1ba80                 | LR__2262
1ba80                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1ba80     08 4E 05 F1 | 	add	fp, #8
1ba84     A7 26 02 FB | 	rdlong	local01, fp
1ba88     08 4E 85 F1 | 	sub	fp, #8
1ba8c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ba90     14 4E 05 A1 |  if_e	add	fp, #20
1ba94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba98     14 4E 85 A1 |  if_e	sub	fp, #20
1ba9c     16 2B 02 A6 |  if_e	mov	local03, local04
1baa0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1baa4     38 00 90 5D |  if_ne	jmp	#LR__2263
1baa8     00 26 06 F6 | 	mov	local01, #0
1baac     A7 28 02 FB | 	rdlong	local02, fp
1bab0     0C 4E 05 F1 | 	add	fp, #12
1bab4     A7 12 02 FB | 	rdlong	arg01, fp
1bab8     0C 4E 85 F1 | 	sub	fp, #12
1babc     C8 AE B0 FD | 	call	#__system___float_fromuns
1bac0     FD 14 02 F6 | 	mov	arg02, result1
1bac4     14 13 02 F6 | 	mov	arg01, local02
1bac8     01 16 66 F6 | 	neg	arg03, #1
1bacc     F0 B6 B0 FD | 	call	#__system___float_cmp
1bad0     00 FA 55 F2 | 	cmps	result1, #0 wc
1bad4     00 26 26 36 |  if_ae	not	local01, #0
1bad8     A7 26 62 FC | 	wrlong	local01, fp
1badc     00 03 90 FD | 	jmp	#LR__2273
1bae0                 | LR__2263
1bae0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1bae0     08 4E 05 F1 | 	add	fp, #8
1bae4     A7 26 02 FB | 	rdlong	local01, fp
1bae8     08 4E 85 F1 | 	sub	fp, #8
1baec     1C 26 0E F2 | 	cmp	local01, #28 wz
1baf0     14 4E 05 A1 |  if_e	add	fp, #20
1baf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1baf8     14 4E 85 A1 |  if_e	sub	fp, #20
1bafc     16 2B 02 A6 |  if_e	mov	local03, local04
1bb00     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bb04     44 00 90 5D |  if_ne	jmp	#LR__2264
1bb08     00 26 06 F6 | 	mov	local01, #0
1bb0c     A7 12 02 FB | 	rdlong	arg01, fp
1bb10     09 13 52 F6 | 	abs	arg01, arg01 wc
1bb14     1F 2E C6 C9 |  if_b	decod	local05, #31
1bb18     00 2E 06 36 |  if_ae	mov	local05, #0
1bb1c     68 AE B0 FD | 	call	#__system___float_fromuns
1bb20     17 FB 61 F5 | 	xor	result1, local05
1bb24     FD 12 02 F6 | 	mov	arg01, result1
1bb28     0C 4E 05 F1 | 	add	fp, #12
1bb2c     A7 14 02 FB | 	rdlong	arg02, fp
1bb30     0C 4E 85 F1 | 	sub	fp, #12
1bb34     01 16 66 F6 | 	neg	arg03, #1
1bb38     84 B6 B0 FD | 	call	#__system___float_cmp
1bb3c     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb40     00 26 26 36 |  if_ae	not	local01, #0
1bb44     A7 26 62 FC | 	wrlong	local01, fp
1bb48     94 02 90 FD | 	jmp	#LR__2273
1bb4c                 | LR__2264
1bb4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1bb4c     08 4E 05 F1 | 	add	fp, #8
1bb50     A7 26 02 FB | 	rdlong	local01, fp
1bb54     08 4E 85 F1 | 	sub	fp, #8
1bb58     1C 26 0E F2 | 	cmp	local01, #28 wz
1bb5c     14 4E 05 A1 |  if_e	add	fp, #20
1bb60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb64     14 4E 85 A1 |  if_e	sub	fp, #20
1bb68     16 2B 02 A6 |  if_e	mov	local03, local04
1bb6c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bb70     24 00 90 5D |  if_ne	jmp	#LR__2265
1bb74     00 26 06 F6 | 	mov	local01, #0
1bb78     A7 28 02 FB | 	rdlong	local02, fp
1bb7c     0C 4E 05 F1 | 	add	fp, #12
1bb80     A7 2A 02 FB | 	rdlong	local03, fp
1bb84     0C 4E 85 F1 | 	sub	fp, #12
1bb88     15 29 52 F2 | 	cmps	local02, local03 wc
1bb8c     01 26 66 36 |  if_ae	neg	local01, #1
1bb90     A7 26 62 FC | 	wrlong	local01, fp
1bb94     48 02 90 FD | 	jmp	#LR__2273
1bb98                 | LR__2265
1bb98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1bb98     08 4E 05 F1 | 	add	fp, #8
1bb9c     A7 26 02 FB | 	rdlong	local01, fp
1bba0     08 4E 85 F1 | 	sub	fp, #8
1bba4     1C 26 0E F2 | 	cmp	local01, #28 wz
1bba8     14 4E 05 A1 |  if_e	add	fp, #20
1bbac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bbb0     14 4E 85 A1 |  if_e	sub	fp, #20
1bbb4     16 2B 02 A6 |  if_e	mov	local03, local04
1bbb8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bbbc     24 00 90 5D |  if_ne	jmp	#LR__2266
1bbc0     00 26 06 F6 | 	mov	local01, #0
1bbc4     A7 28 02 FB | 	rdlong	local02, fp
1bbc8     0C 4E 05 F1 | 	add	fp, #12
1bbcc     A7 2A 02 FB | 	rdlong	local03, fp
1bbd0     0C 4E 85 F1 | 	sub	fp, #12
1bbd4     15 29 52 F2 | 	cmps	local02, local03 wc
1bbd8     01 26 66 36 |  if_ae	neg	local01, #1
1bbdc     A7 26 62 FC | 	wrlong	local01, fp
1bbe0     FC 01 90 FD | 	jmp	#LR__2273
1bbe4                 | LR__2266
1bbe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1bbe4     08 4E 05 F1 | 	add	fp, #8
1bbe8     A7 26 02 FB | 	rdlong	local01, fp
1bbec     08 4E 85 F1 | 	sub	fp, #8
1bbf0     1D 26 0E F2 | 	cmp	local01, #29 wz
1bbf4     14 4E 05 A1 |  if_e	add	fp, #20
1bbf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bbfc     14 4E 85 A1 |  if_e	sub	fp, #20
1bc00     16 2B 02 A6 |  if_e	mov	local03, local04
1bc04     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bc08     34 00 90 5D |  if_ne	jmp	#LR__2267
1bc0c     00 26 06 F6 | 	mov	local01, #0
1bc10     A7 12 02 FB | 	rdlong	arg01, fp
1bc14     70 AD B0 FD | 	call	#__system___float_fromuns
1bc18     FD 12 02 F6 | 	mov	arg01, result1
1bc1c     0C 4E 05 F1 | 	add	fp, #12
1bc20     A7 14 02 FB | 	rdlong	arg02, fp
1bc24     0C 4E 85 F1 | 	sub	fp, #12
1bc28     01 16 66 F6 | 	neg	arg03, #1
1bc2c     90 B5 B0 FD | 	call	#__system___float_cmp
1bc30     00 FA 55 F2 | 	cmps	result1, #0 wc
1bc34     00 26 26 36 |  if_ae	not	local01, #0
1bc38     A7 26 62 FC | 	wrlong	local01, fp
1bc3c     A0 01 90 FD | 	jmp	#LR__2273
1bc40                 | LR__2267
1bc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1bc40     08 4E 05 F1 | 	add	fp, #8
1bc44     A7 26 02 FB | 	rdlong	local01, fp
1bc48     08 4E 85 F1 | 	sub	fp, #8
1bc4c     1D 26 0E F2 | 	cmp	local01, #29 wz
1bc50     14 4E 05 A1 |  if_e	add	fp, #20
1bc54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bc58     14 4E 85 A1 |  if_e	sub	fp, #20
1bc5c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1bc60     24 00 90 5D |  if_ne	jmp	#LR__2268
1bc64     00 26 06 F6 | 	mov	local01, #0
1bc68     A7 28 02 FB | 	rdlong	local02, fp
1bc6c     0C 4E 05 F1 | 	add	fp, #12
1bc70     A7 2A 02 FB | 	rdlong	local03, fp
1bc74     0C 4E 85 F1 | 	sub	fp, #12
1bc78     15 29 52 F2 | 	cmps	local02, local03 wc
1bc7c     01 26 66 36 |  if_ae	neg	local01, #1
1bc80     A7 26 62 FC | 	wrlong	local01, fp
1bc84     58 01 90 FD | 	jmp	#LR__2273
1bc88                 | LR__2268
1bc88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1bc88     08 4E 05 F1 | 	add	fp, #8
1bc8c     A7 26 02 FB | 	rdlong	local01, fp
1bc90     08 4E 85 F1 | 	sub	fp, #8
1bc94     1D 26 0E F2 | 	cmp	local01, #29 wz
1bc98     14 4E 05 A1 |  if_e	add	fp, #20
1bc9c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bca0     14 4E 85 A1 |  if_e	sub	fp, #20
1bca4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bca8     24 00 90 5D |  if_ne	jmp	#LR__2269
1bcac     00 26 06 F6 | 	mov	local01, #0
1bcb0     A7 28 02 FB | 	rdlong	local02, fp
1bcb4     0C 4E 05 F1 | 	add	fp, #12
1bcb8     A7 2A 02 FB | 	rdlong	local03, fp
1bcbc     0C 4E 85 F1 | 	sub	fp, #12
1bcc0     15 29 12 F2 | 	cmp	local02, local03 wc
1bcc4     01 26 66 36 |  if_ae	neg	local01, #1
1bcc8     A7 26 62 FC | 	wrlong	local01, fp
1bccc     10 01 90 FD | 	jmp	#LR__2273
1bcd0                 | LR__2269
1bcd0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1bcd0     08 4E 05 F1 | 	add	fp, #8
1bcd4     A7 26 02 FB | 	rdlong	local01, fp
1bcd8     08 4E 85 F1 | 	sub	fp, #8
1bcdc     2B 26 0E F2 | 	cmp	local01, #43 wz
1bce0     14 4E 05 A1 |  if_e	add	fp, #20
1bce4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bce8     14 4E 85 A1 |  if_e	sub	fp, #20
1bcec     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bcf0     30 00 90 5D |  if_ne	jmp	#LR__2270
1bcf4     00 26 06 F6 | 	mov	local01, #0
1bcf8     A7 12 02 FB | 	rdlong	arg01, fp
1bcfc     04 10 BF FD | 	call	#_convertstring
1bd00     FD 12 02 F6 | 	mov	arg01, result1
1bd04     0C 4E 05 F1 | 	add	fp, #12
1bd08     A7 14 02 FB | 	rdlong	arg02, fp
1bd0c     0C 4E 85 F1 | 	sub	fp, #12
1bd10     28 82 B0 FD | 	call	#__system___string_cmp
1bd14     00 FA 55 F2 | 	cmps	result1, #0 wc
1bd18     00 26 26 36 |  if_ae	not	local01, #0
1bd1c     A7 26 62 FC | 	wrlong	local01, fp
1bd20     BC 00 90 FD | 	jmp	#LR__2273
1bd24                 | LR__2270
1bd24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1bd24     08 4E 05 F1 | 	add	fp, #8
1bd28     A7 26 02 FB | 	rdlong	local01, fp
1bd2c     08 4E 85 F1 | 	sub	fp, #8
1bd30     1F 26 0E F2 | 	cmp	local01, #31 wz
1bd34     14 4E 05 A1 |  if_e	add	fp, #20
1bd38     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bd3c     14 4E 85 A1 |  if_e	sub	fp, #20
1bd40     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bd44     34 00 90 5D |  if_ne	jmp	#LR__2271
1bd48     00 26 06 F6 | 	mov	local01, #0
1bd4c     A7 28 02 FB | 	rdlong	local02, fp
1bd50     0C 4E 05 F1 | 	add	fp, #12
1bd54     A7 12 02 FB | 	rdlong	arg01, fp
1bd58     0C 4E 85 F1 | 	sub	fp, #12
1bd5c     A4 0F BF FD | 	call	#_convertstring
1bd60     FD 14 02 F6 | 	mov	arg02, result1
1bd64     14 13 02 F6 | 	mov	arg01, local02
1bd68     D0 81 B0 FD | 	call	#__system___string_cmp
1bd6c     00 FA 55 F2 | 	cmps	result1, #0 wc
1bd70     00 26 26 36 |  if_ae	not	local01, #0
1bd74     A7 26 62 FC | 	wrlong	local01, fp
1bd78     64 00 90 FD | 	jmp	#LR__2273
1bd7c                 | LR__2271
1bd7c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1bd7c     08 4E 05 F1 | 	add	fp, #8
1bd80     A7 26 02 FB | 	rdlong	local01, fp
1bd84     08 4E 85 F1 | 	sub	fp, #8
1bd88     2B 26 0E F2 | 	cmp	local01, #43 wz
1bd8c     14 4E 05 A1 |  if_e	add	fp, #20
1bd90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bd94     14 4E 85 A1 |  if_e	sub	fp, #20
1bd98     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bd9c     3C 00 90 5D |  if_ne	jmp	#LR__2272
1bda0     00 26 06 F6 | 	mov	local01, #0
1bda4     A7 12 02 FB | 	rdlong	arg01, fp
1bda8     58 0F BF FD | 	call	#_convertstring
1bdac     FD 28 02 F6 | 	mov	local02, result1
1bdb0     0C 4E 05 F1 | 	add	fp, #12
1bdb4     A7 12 02 FB | 	rdlong	arg01, fp
1bdb8     0C 4E 85 F1 | 	sub	fp, #12
1bdbc     44 0F BF FD | 	call	#_convertstring
1bdc0     FD 14 02 F6 | 	mov	arg02, result1
1bdc4     14 13 02 F6 | 	mov	arg01, local02
1bdc8     70 81 B0 FD | 	call	#__system___string_cmp
1bdcc     00 FA 55 F2 | 	cmps	result1, #0 wc
1bdd0     00 26 26 36 |  if_ae	not	local01, #0
1bdd4     A7 26 62 FC | 	wrlong	local01, fp
1bdd8     04 00 90 FD | 	jmp	#LR__2273
1bddc                 | LR__2272
1bddc     A7 00 68 FC | 	wrlong	#0, fp
1bde0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1bde0                 | LR__2273
1bde0     08 4E 05 F1 | 	add	fp, #8
1bde4     A7 38 68 FC | 	wrlong	#28, fp
1bde8     08 4E 85 F1 | 	sub	fp, #8
1bdec                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1bdec     A7 26 0A FB | 	rdlong	local01, fp wz
1bdf0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1bdf4     A7 12 02 F6 | 	mov	arg01, fp
1bdf8     28 0E BF FD | 	call	#_push
1bdfc     A7 F0 03 F6 | 	mov	ptra, fp
1be00     B2 00 A0 FD | 	call	#popregs_
1be04                 | _do_ge_ret
1be04     2D 00 64 FD | 	ret
1be08                 | 
1be08                 | ' 
1be08                 | ' '--------------------------------- greater than (>)
1be08                 | ' 
1be08                 | ' sub do_gt
1be08                 | _do_gt
1be08     05 4A 05 F6 | 	mov	COUNT_, #5
1be0c     A8 00 A0 FD | 	call	#pushregs_
1be10     18 F0 07 F1 | 	add	ptra, #24
1be14     74 0D BF FD | 	call	#_pop
1be18     FD 26 02 F6 | 	mov	local01, result1
1be1c     FE 28 02 F6 | 	mov	local02, result2
1be20     FF 2A 02 F6 | 	mov	local03, result3
1be24     0C 4E 05 F1 | 	add	fp, #12
1be28     A7 26 62 FC | 	wrlong	local01, fp
1be2c     04 4E 05 F1 | 	add	fp, #4
1be30     A7 28 62 FC | 	wrlong	local02, fp
1be34     04 4E 05 F1 | 	add	fp, #4
1be38     A7 2A 62 FC | 	wrlong	local03, fp
1be3c     14 4E 85 F1 | 	sub	fp, #20
1be40     48 0D BF FD | 	call	#_pop
1be44     FF 2A 02 F6 | 	mov	local03, result3
1be48     A7 FA 61 FC | 	wrlong	result1, fp
1be4c     04 4E 05 F1 | 	add	fp, #4
1be50     A7 FC 61 FC | 	wrlong	result2, fp
1be54     04 4E 05 F1 | 	add	fp, #4
1be58     A7 2A 62 FC | 	wrlong	local03, fp
1be5c                 | ' 
1be5c                 | ' t2=pop()
1be5c                 | ' t1=pop()
1be5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1be5c     08 4E 85 F1 | 	sub	fp, #8
1be60     1F 2A 0E F2 | 	cmp	local03, #31 wz
1be64     14 4E 05 A1 |  if_e	add	fp, #20
1be68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1be6c     14 4E 85 A1 |  if_e	sub	fp, #20
1be70     16 2B 02 A6 |  if_e	mov	local03, local04
1be74     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1be78     28 00 90 5D |  if_ne	jmp	#LR__2280
1be7c     00 26 06 F6 | 	mov	local01, #0
1be80     A7 12 02 FB | 	rdlong	arg01, fp
1be84     0C 4E 05 F1 | 	add	fp, #12
1be88     A7 14 02 FB | 	rdlong	arg02, fp
1be8c     0C 4E 85 F1 | 	sub	fp, #12
1be90     A8 80 B0 FD | 	call	#__system___string_cmp
1be94     01 FA 55 F2 | 	cmps	result1, #1 wc
1be98     00 26 26 36 |  if_ae	not	local01, #0
1be9c     A7 26 62 FC | 	wrlong	local01, fp
1bea0     20 04 90 FD | 	jmp	#LR__2293
1bea4                 | LR__2280
1bea4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1bea4     08 4E 05 F1 | 	add	fp, #8
1bea8     A7 26 02 FB | 	rdlong	local01, fp
1beac     08 4E 85 F1 | 	sub	fp, #8
1beb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1beb4     14 4E 05 A1 |  if_e	add	fp, #20
1beb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bebc     14 4E 85 A1 |  if_e	sub	fp, #20
1bec0     16 2B 02 A6 |  if_e	mov	local03, local04
1bec4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bec8     2C 00 90 5D |  if_ne	jmp	#LR__2281
1becc     00 26 06 F6 | 	mov	local01, #0
1bed0     A7 12 02 FB | 	rdlong	arg01, fp
1bed4     0C 4E 05 F1 | 	add	fp, #12
1bed8     A7 14 02 FB | 	rdlong	arg02, fp
1bedc     0C 4E 85 F1 | 	sub	fp, #12
1bee0     01 16 66 F6 | 	neg	arg03, #1
1bee4     D8 B2 B0 FD | 	call	#__system___float_cmp
1bee8     01 FA 55 F2 | 	cmps	result1, #1 wc
1beec     00 26 26 36 |  if_ae	not	local01, #0
1bef0     A7 26 62 FC | 	wrlong	local01, fp
1bef4     CC 03 90 FD | 	jmp	#LR__2293
1bef8                 | LR__2281
1bef8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1bef8     08 4E 05 F1 | 	add	fp, #8
1befc     A7 26 02 FB | 	rdlong	local01, fp
1bf00     08 4E 85 F1 | 	sub	fp, #8
1bf04     1E 26 0E F2 | 	cmp	local01, #30 wz
1bf08     14 4E 05 A1 |  if_e	add	fp, #20
1bf0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf10     14 4E 85 A1 |  if_e	sub	fp, #20
1bf14     16 2B 02 A6 |  if_e	mov	local03, local04
1bf18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bf1c     48 00 90 5D |  if_ne	jmp	#LR__2282
1bf20     00 26 06 F6 | 	mov	local01, #0
1bf24     A7 28 02 FB | 	rdlong	local02, fp
1bf28     0C 4E 05 F1 | 	add	fp, #12
1bf2c     A7 12 02 FB | 	rdlong	arg01, fp
1bf30     0C 4E 85 F1 | 	sub	fp, #12
1bf34     09 13 52 F6 | 	abs	arg01, arg01 wc
1bf38     1F 2E C6 C9 |  if_b	decod	local05, #31
1bf3c     00 2E 06 36 |  if_ae	mov	local05, #0
1bf40     44 AA B0 FD | 	call	#__system___float_fromuns
1bf44     17 FB 61 F5 | 	xor	result1, local05
1bf48     FD 14 02 F6 | 	mov	arg02, result1
1bf4c     14 13 02 F6 | 	mov	arg01, local02
1bf50     01 16 66 F6 | 	neg	arg03, #1
1bf54     68 B2 B0 FD | 	call	#__system___float_cmp
1bf58     01 FA 55 F2 | 	cmps	result1, #1 wc
1bf5c     00 26 26 36 |  if_ae	not	local01, #0
1bf60     A7 26 62 FC | 	wrlong	local01, fp
1bf64     5C 03 90 FD | 	jmp	#LR__2293
1bf68                 | LR__2282
1bf68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1bf68     08 4E 05 F1 | 	add	fp, #8
1bf6c     A7 26 02 FB | 	rdlong	local01, fp
1bf70     08 4E 85 F1 | 	sub	fp, #8
1bf74     1E 26 0E F2 | 	cmp	local01, #30 wz
1bf78     14 4E 05 A1 |  if_e	add	fp, #20
1bf7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf80     14 4E 85 A1 |  if_e	sub	fp, #20
1bf84     16 2B 02 A6 |  if_e	mov	local03, local04
1bf88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bf8c     38 00 90 5D |  if_ne	jmp	#LR__2283
1bf90     00 26 06 F6 | 	mov	local01, #0
1bf94     A7 28 02 FB | 	rdlong	local02, fp
1bf98     0C 4E 05 F1 | 	add	fp, #12
1bf9c     A7 12 02 FB | 	rdlong	arg01, fp
1bfa0     0C 4E 85 F1 | 	sub	fp, #12
1bfa4     E0 A9 B0 FD | 	call	#__system___float_fromuns
1bfa8     FD 14 02 F6 | 	mov	arg02, result1
1bfac     14 13 02 F6 | 	mov	arg01, local02
1bfb0     01 16 66 F6 | 	neg	arg03, #1
1bfb4     08 B2 B0 FD | 	call	#__system___float_cmp
1bfb8     01 FA 55 F2 | 	cmps	result1, #1 wc
1bfbc     00 26 26 36 |  if_ae	not	local01, #0
1bfc0     A7 26 62 FC | 	wrlong	local01, fp
1bfc4     FC 02 90 FD | 	jmp	#LR__2293
1bfc8                 | LR__2283
1bfc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1bfc8     08 4E 05 F1 | 	add	fp, #8
1bfcc     A7 26 02 FB | 	rdlong	local01, fp
1bfd0     08 4E 85 F1 | 	sub	fp, #8
1bfd4     1C 26 0E F2 | 	cmp	local01, #28 wz
1bfd8     14 4E 05 A1 |  if_e	add	fp, #20
1bfdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bfe0     14 4E 85 A1 |  if_e	sub	fp, #20
1bfe4     16 2B 02 A6 |  if_e	mov	local03, local04
1bfe8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bfec     44 00 90 5D |  if_ne	jmp	#LR__2284
1bff0     00 26 06 F6 | 	mov	local01, #0
1bff4     A7 12 02 FB | 	rdlong	arg01, fp
1bff8     09 13 52 F6 | 	abs	arg01, arg01 wc
1bffc     1F 2E C6 C9 |  if_b	decod	local05, #31
1c000     00 2E 06 36 |  if_ae	mov	local05, #0
1c004     80 A9 B0 FD | 	call	#__system___float_fromuns
1c008     17 FB 61 F5 | 	xor	result1, local05
1c00c     FD 12 02 F6 | 	mov	arg01, result1
1c010     0C 4E 05 F1 | 	add	fp, #12
1c014     A7 14 02 FB | 	rdlong	arg02, fp
1c018     0C 4E 85 F1 | 	sub	fp, #12
1c01c     01 16 66 F6 | 	neg	arg03, #1
1c020     9C B1 B0 FD | 	call	#__system___float_cmp
1c024     01 FA 55 F2 | 	cmps	result1, #1 wc
1c028     00 26 26 36 |  if_ae	not	local01, #0
1c02c     A7 26 62 FC | 	wrlong	local01, fp
1c030     90 02 90 FD | 	jmp	#LR__2293
1c034                 | LR__2284
1c034                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1c034     08 4E 05 F1 | 	add	fp, #8
1c038     A7 26 02 FB | 	rdlong	local01, fp
1c03c     08 4E 85 F1 | 	sub	fp, #8
1c040     1C 26 0E F2 | 	cmp	local01, #28 wz
1c044     14 4E 05 A1 |  if_e	add	fp, #20
1c048     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c04c     14 4E 85 A1 |  if_e	sub	fp, #20
1c050     16 2B 02 A6 |  if_e	mov	local03, local04
1c054     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c058     24 00 90 5D |  if_ne	jmp	#LR__2285
1c05c     00 26 06 F6 | 	mov	local01, #0
1c060     A7 28 02 FB | 	rdlong	local02, fp
1c064     0C 4E 05 F1 | 	add	fp, #12
1c068     A7 2A 02 FB | 	rdlong	local03, fp
1c06c     0C 4E 85 F1 | 	sub	fp, #12
1c070     15 29 5A F2 | 	cmps	local02, local03 wcz
1c074     01 26 66 16 |  if_a	neg	local01, #1
1c078     A7 26 62 FC | 	wrlong	local01, fp
1c07c     44 02 90 FD | 	jmp	#LR__2293
1c080                 | LR__2285
1c080                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1c080     08 4E 05 F1 | 	add	fp, #8
1c084     A7 26 02 FB | 	rdlong	local01, fp
1c088     08 4E 85 F1 | 	sub	fp, #8
1c08c     1C 26 0E F2 | 	cmp	local01, #28 wz
1c090     14 4E 05 A1 |  if_e	add	fp, #20
1c094     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c098     14 4E 85 A1 |  if_e	sub	fp, #20
1c09c     16 2B 02 A6 |  if_e	mov	local03, local04
1c0a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c0a4     24 00 90 5D |  if_ne	jmp	#LR__2286
1c0a8     00 26 06 F6 | 	mov	local01, #0
1c0ac     A7 28 02 FB | 	rdlong	local02, fp
1c0b0     0C 4E 05 F1 | 	add	fp, #12
1c0b4     A7 2A 02 FB | 	rdlong	local03, fp
1c0b8     0C 4E 85 F1 | 	sub	fp, #12
1c0bc     15 29 5A F2 | 	cmps	local02, local03 wcz
1c0c0     01 26 66 16 |  if_a	neg	local01, #1
1c0c4     A7 26 62 FC | 	wrlong	local01, fp
1c0c8     F8 01 90 FD | 	jmp	#LR__2293
1c0cc                 | LR__2286
1c0cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1c0cc     08 4E 05 F1 | 	add	fp, #8
1c0d0     A7 26 02 FB | 	rdlong	local01, fp
1c0d4     08 4E 85 F1 | 	sub	fp, #8
1c0d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1c0dc     14 4E 05 A1 |  if_e	add	fp, #20
1c0e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c0e4     14 4E 85 A1 |  if_e	sub	fp, #20
1c0e8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c0ec     34 00 90 5D |  if_ne	jmp	#LR__2287
1c0f0     00 26 06 F6 | 	mov	local01, #0
1c0f4     A7 12 02 FB | 	rdlong	arg01, fp
1c0f8     8C A8 B0 FD | 	call	#__system___float_fromuns
1c0fc     FD 12 02 F6 | 	mov	arg01, result1
1c100     0C 4E 05 F1 | 	add	fp, #12
1c104     A7 14 02 FB | 	rdlong	arg02, fp
1c108     0C 4E 85 F1 | 	sub	fp, #12
1c10c     01 16 66 F6 | 	neg	arg03, #1
1c110     AC B0 B0 FD | 	call	#__system___float_cmp
1c114     01 FA 55 F2 | 	cmps	result1, #1 wc
1c118     00 26 26 36 |  if_ae	not	local01, #0
1c11c     A7 26 62 FC | 	wrlong	local01, fp
1c120     A0 01 90 FD | 	jmp	#LR__2293
1c124                 | LR__2287
1c124                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1c124     08 4E 05 F1 | 	add	fp, #8
1c128     A7 26 02 FB | 	rdlong	local01, fp
1c12c     08 4E 85 F1 | 	sub	fp, #8
1c130     1D 26 0E F2 | 	cmp	local01, #29 wz
1c134     14 4E 05 A1 |  if_e	add	fp, #20
1c138     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c13c     14 4E 85 A1 |  if_e	sub	fp, #20
1c140     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c144     24 00 90 5D |  if_ne	jmp	#LR__2288
1c148     00 26 06 F6 | 	mov	local01, #0
1c14c     A7 28 02 FB | 	rdlong	local02, fp
1c150     0C 4E 05 F1 | 	add	fp, #12
1c154     A7 2A 02 FB | 	rdlong	local03, fp
1c158     0C 4E 85 F1 | 	sub	fp, #12
1c15c     15 29 5A F2 | 	cmps	local02, local03 wcz
1c160     01 26 66 16 |  if_a	neg	local01, #1
1c164     A7 26 62 FC | 	wrlong	local01, fp
1c168     58 01 90 FD | 	jmp	#LR__2293
1c16c                 | LR__2288
1c16c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1c16c     08 4E 05 F1 | 	add	fp, #8
1c170     A7 26 02 FB | 	rdlong	local01, fp
1c174     08 4E 85 F1 | 	sub	fp, #8
1c178     1D 26 0E F2 | 	cmp	local01, #29 wz
1c17c     14 4E 05 A1 |  if_e	add	fp, #20
1c180     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c184     14 4E 85 A1 |  if_e	sub	fp, #20
1c188     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c18c     24 00 90 5D |  if_ne	jmp	#LR__2289
1c190     00 26 06 F6 | 	mov	local01, #0
1c194     A7 28 02 FB | 	rdlong	local02, fp
1c198     0C 4E 05 F1 | 	add	fp, #12
1c19c     A7 2A 02 FB | 	rdlong	local03, fp
1c1a0     0C 4E 85 F1 | 	sub	fp, #12
1c1a4     15 29 1A F2 | 	cmp	local02, local03 wcz
1c1a8     01 26 66 16 |  if_a	neg	local01, #1
1c1ac     A7 26 62 FC | 	wrlong	local01, fp
1c1b0     10 01 90 FD | 	jmp	#LR__2293
1c1b4                 | LR__2289
1c1b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1c1b4     08 4E 05 F1 | 	add	fp, #8
1c1b8     A7 26 02 FB | 	rdlong	local01, fp
1c1bc     08 4E 85 F1 | 	sub	fp, #8
1c1c0     2B 26 0E F2 | 	cmp	local01, #43 wz
1c1c4     14 4E 05 A1 |  if_e	add	fp, #20
1c1c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c1cc     14 4E 85 A1 |  if_e	sub	fp, #20
1c1d0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c1d4     30 00 90 5D |  if_ne	jmp	#LR__2290
1c1d8     00 26 06 F6 | 	mov	local01, #0
1c1dc     A7 12 02 FB | 	rdlong	arg01, fp
1c1e0     20 0B BF FD | 	call	#_convertstring
1c1e4     FD 12 02 F6 | 	mov	arg01, result1
1c1e8     0C 4E 05 F1 | 	add	fp, #12
1c1ec     A7 14 02 FB | 	rdlong	arg02, fp
1c1f0     0C 4E 85 F1 | 	sub	fp, #12
1c1f4     44 7D B0 FD | 	call	#__system___string_cmp
1c1f8     01 FA 55 F2 | 	cmps	result1, #1 wc
1c1fc     00 26 26 36 |  if_ae	not	local01, #0
1c200     A7 26 62 FC | 	wrlong	local01, fp
1c204     BC 00 90 FD | 	jmp	#LR__2293
1c208                 | LR__2290
1c208                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1c208     08 4E 05 F1 | 	add	fp, #8
1c20c     A7 26 02 FB | 	rdlong	local01, fp
1c210     08 4E 85 F1 | 	sub	fp, #8
1c214     1F 26 0E F2 | 	cmp	local01, #31 wz
1c218     14 4E 05 A1 |  if_e	add	fp, #20
1c21c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c220     14 4E 85 A1 |  if_e	sub	fp, #20
1c224     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c228     34 00 90 5D |  if_ne	jmp	#LR__2291
1c22c     00 26 06 F6 | 	mov	local01, #0
1c230     A7 28 02 FB | 	rdlong	local02, fp
1c234     0C 4E 05 F1 | 	add	fp, #12
1c238     A7 12 02 FB | 	rdlong	arg01, fp
1c23c     0C 4E 85 F1 | 	sub	fp, #12
1c240     C0 0A BF FD | 	call	#_convertstring
1c244     FD 14 02 F6 | 	mov	arg02, result1
1c248     14 13 02 F6 | 	mov	arg01, local02
1c24c     EC 7C B0 FD | 	call	#__system___string_cmp
1c250     01 FA 55 F2 | 	cmps	result1, #1 wc
1c254     00 26 26 36 |  if_ae	not	local01, #0
1c258     A7 26 62 FC | 	wrlong	local01, fp
1c25c     64 00 90 FD | 	jmp	#LR__2293
1c260                 | LR__2291
1c260                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1c260     08 4E 05 F1 | 	add	fp, #8
1c264     A7 26 02 FB | 	rdlong	local01, fp
1c268     08 4E 85 F1 | 	sub	fp, #8
1c26c     2B 26 0E F2 | 	cmp	local01, #43 wz
1c270     14 4E 05 A1 |  if_e	add	fp, #20
1c274     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c278     14 4E 85 A1 |  if_e	sub	fp, #20
1c27c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c280     3C 00 90 5D |  if_ne	jmp	#LR__2292
1c284     00 26 06 F6 | 	mov	local01, #0
1c288     A7 12 02 FB | 	rdlong	arg01, fp
1c28c     74 0A BF FD | 	call	#_convertstring
1c290     FD 28 02 F6 | 	mov	local02, result1
1c294     0C 4E 05 F1 | 	add	fp, #12
1c298     A7 12 02 FB | 	rdlong	arg01, fp
1c29c     0C 4E 85 F1 | 	sub	fp, #12
1c2a0     60 0A BF FD | 	call	#_convertstring
1c2a4     FD 14 02 F6 | 	mov	arg02, result1
1c2a8     14 13 02 F6 | 	mov	arg01, local02
1c2ac     8C 7C B0 FD | 	call	#__system___string_cmp
1c2b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1c2b4     00 26 26 36 |  if_ae	not	local01, #0
1c2b8     A7 26 62 FC | 	wrlong	local01, fp
1c2bc     04 00 90 FD | 	jmp	#LR__2293
1c2c0                 | LR__2292
1c2c0     A7 00 68 FC | 	wrlong	#0, fp
1c2c4                 | LR__2293
1c2c4     08 4E 05 F1 | 	add	fp, #8
1c2c8     A7 38 68 FC | 	wrlong	#28, fp
1c2cc     08 4E 85 F1 | 	sub	fp, #8
1c2d0                 | ' t1.result.uresult=0
1c2d0                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c2d0     A7 26 0A FB | 	rdlong	local01, fp wz
1c2d4     A7 02 68 5C |  if_ne	wrlong	#1, fp
1c2d8     A7 12 02 F6 | 	mov	arg01, fp
1c2dc     44 09 BF FD | 	call	#_push
1c2e0     A7 F0 03 F6 | 	mov	ptra, fp
1c2e4     B2 00 A0 FD | 	call	#popregs_
1c2e8                 | _do_gt_ret
1c2e8     2D 00 64 FD | 	ret
1c2ec                 | 
1c2ec                 | ' 
1c2ec                 | ' '--------------------------------- less or equal (<=)
1c2ec                 | ' 
1c2ec                 | ' sub do_le
1c2ec                 | _do_le
1c2ec     05 4A 05 F6 | 	mov	COUNT_, #5
1c2f0     A8 00 A0 FD | 	call	#pushregs_
1c2f4     18 F0 07 F1 | 	add	ptra, #24
1c2f8     90 08 BF FD | 	call	#_pop
1c2fc     FD 26 02 F6 | 	mov	local01, result1
1c300     FE 28 02 F6 | 	mov	local02, result2
1c304     FF 2A 02 F6 | 	mov	local03, result3
1c308     0C 4E 05 F1 | 	add	fp, #12
1c30c     A7 26 62 FC | 	wrlong	local01, fp
1c310     04 4E 05 F1 | 	add	fp, #4
1c314     A7 28 62 FC | 	wrlong	local02, fp
1c318     04 4E 05 F1 | 	add	fp, #4
1c31c     A7 2A 62 FC | 	wrlong	local03, fp
1c320     14 4E 85 F1 | 	sub	fp, #20
1c324     64 08 BF FD | 	call	#_pop
1c328     FF 2A 02 F6 | 	mov	local03, result3
1c32c     A7 FA 61 FC | 	wrlong	result1, fp
1c330     04 4E 05 F1 | 	add	fp, #4
1c334     A7 FC 61 FC | 	wrlong	result2, fp
1c338     04 4E 05 F1 | 	add	fp, #4
1c33c     A7 2A 62 FC | 	wrlong	local03, fp
1c340                 | ' 
1c340                 | ' t2=pop()
1c340                 | ' t1=pop()
1c340                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1c340     08 4E 85 F1 | 	sub	fp, #8
1c344     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c348     14 4E 05 A1 |  if_e	add	fp, #20
1c34c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c350     14 4E 85 A1 |  if_e	sub	fp, #20
1c354     16 2B 02 A6 |  if_e	mov	local03, local04
1c358     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c35c     28 00 90 5D |  if_ne	jmp	#LR__2300
1c360     00 26 06 F6 | 	mov	local01, #0
1c364     A7 12 02 FB | 	rdlong	arg01, fp
1c368     0C 4E 05 F1 | 	add	fp, #12
1c36c     A7 14 02 FB | 	rdlong	arg02, fp
1c370     0C 4E 85 F1 | 	sub	fp, #12
1c374     C4 7B B0 FD | 	call	#__system___string_cmp
1c378     01 FA 55 F2 | 	cmps	result1, #1 wc
1c37c     00 26 26 C6 |  if_b	not	local01, #0
1c380     A7 26 62 FC | 	wrlong	local01, fp
1c384     20 04 90 FD | 	jmp	#LR__2313
1c388                 | LR__2300
1c388                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1c388     08 4E 05 F1 | 	add	fp, #8
1c38c     A7 26 02 FB | 	rdlong	local01, fp
1c390     08 4E 85 F1 | 	sub	fp, #8
1c394     1E 26 0E F2 | 	cmp	local01, #30 wz
1c398     14 4E 05 A1 |  if_e	add	fp, #20
1c39c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3a0     14 4E 85 A1 |  if_e	sub	fp, #20
1c3a4     16 2B 02 A6 |  if_e	mov	local03, local04
1c3a8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c3ac     2C 00 90 5D |  if_ne	jmp	#LR__2301
1c3b0     00 26 06 F6 | 	mov	local01, #0
1c3b4     A7 12 02 FB | 	rdlong	arg01, fp
1c3b8     0C 4E 05 F1 | 	add	fp, #12
1c3bc     A7 14 02 FB | 	rdlong	arg02, fp
1c3c0     0C 4E 85 F1 | 	sub	fp, #12
1c3c4     01 16 06 F6 | 	mov	arg03, #1
1c3c8     F4 AD B0 FD | 	call	#__system___float_cmp
1c3cc     01 FA 55 F2 | 	cmps	result1, #1 wc
1c3d0     00 26 26 C6 |  if_b	not	local01, #0
1c3d4     A7 26 62 FC | 	wrlong	local01, fp
1c3d8     CC 03 90 FD | 	jmp	#LR__2313
1c3dc                 | LR__2301
1c3dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1c3dc     08 4E 05 F1 | 	add	fp, #8
1c3e0     A7 26 02 FB | 	rdlong	local01, fp
1c3e4     08 4E 85 F1 | 	sub	fp, #8
1c3e8     1E 26 0E F2 | 	cmp	local01, #30 wz
1c3ec     14 4E 05 A1 |  if_e	add	fp, #20
1c3f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3f4     14 4E 85 A1 |  if_e	sub	fp, #20
1c3f8     16 2B 02 A6 |  if_e	mov	local03, local04
1c3fc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c400     48 00 90 5D |  if_ne	jmp	#LR__2302
1c404     00 26 06 F6 | 	mov	local01, #0
1c408     A7 28 02 FB | 	rdlong	local02, fp
1c40c     0C 4E 05 F1 | 	add	fp, #12
1c410     A7 12 02 FB | 	rdlong	arg01, fp
1c414     0C 4E 85 F1 | 	sub	fp, #12
1c418     09 13 52 F6 | 	abs	arg01, arg01 wc
1c41c     1F 2E C6 C9 |  if_b	decod	local05, #31
1c420     00 2E 06 36 |  if_ae	mov	local05, #0
1c424     60 A5 B0 FD | 	call	#__system___float_fromuns
1c428     17 FB 61 F5 | 	xor	result1, local05
1c42c     FD 14 02 F6 | 	mov	arg02, result1
1c430     14 13 02 F6 | 	mov	arg01, local02
1c434     01 16 06 F6 | 	mov	arg03, #1
1c438     84 AD B0 FD | 	call	#__system___float_cmp
1c43c     01 FA 55 F2 | 	cmps	result1, #1 wc
1c440     00 26 26 C6 |  if_b	not	local01, #0
1c444     A7 26 62 FC | 	wrlong	local01, fp
1c448     5C 03 90 FD | 	jmp	#LR__2313
1c44c                 | LR__2302
1c44c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1c44c     08 4E 05 F1 | 	add	fp, #8
1c450     A7 26 02 FB | 	rdlong	local01, fp
1c454     08 4E 85 F1 | 	sub	fp, #8
1c458     1E 26 0E F2 | 	cmp	local01, #30 wz
1c45c     14 4E 05 A1 |  if_e	add	fp, #20
1c460     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c464     14 4E 85 A1 |  if_e	sub	fp, #20
1c468     16 2B 02 A6 |  if_e	mov	local03, local04
1c46c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c470     38 00 90 5D |  if_ne	jmp	#LR__2303
1c474     00 26 06 F6 | 	mov	local01, #0
1c478     A7 28 02 FB | 	rdlong	local02, fp
1c47c     0C 4E 05 F1 | 	add	fp, #12
1c480     A7 12 02 FB | 	rdlong	arg01, fp
1c484     0C 4E 85 F1 | 	sub	fp, #12
1c488     FC A4 B0 FD | 	call	#__system___float_fromuns
1c48c     FD 14 02 F6 | 	mov	arg02, result1
1c490     14 13 02 F6 | 	mov	arg01, local02
1c494     01 16 06 F6 | 	mov	arg03, #1
1c498     24 AD B0 FD | 	call	#__system___float_cmp
1c49c     01 FA 55 F2 | 	cmps	result1, #1 wc
1c4a0     00 26 26 C6 |  if_b	not	local01, #0
1c4a4     A7 26 62 FC | 	wrlong	local01, fp
1c4a8     FC 02 90 FD | 	jmp	#LR__2313
1c4ac                 | LR__2303
1c4ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1c4ac     08 4E 05 F1 | 	add	fp, #8
1c4b0     A7 26 02 FB | 	rdlong	local01, fp
1c4b4     08 4E 85 F1 | 	sub	fp, #8
1c4b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1c4bc     14 4E 05 A1 |  if_e	add	fp, #20
1c4c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c4c4     14 4E 85 A1 |  if_e	sub	fp, #20
1c4c8     16 2B 02 A6 |  if_e	mov	local03, local04
1c4cc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c4d0     44 00 90 5D |  if_ne	jmp	#LR__2304
1c4d4     00 26 06 F6 | 	mov	local01, #0
1c4d8     A7 12 02 FB | 	rdlong	arg01, fp
1c4dc     09 13 52 F6 | 	abs	arg01, arg01 wc
1c4e0     1F 2E C6 C9 |  if_b	decod	local05, #31
1c4e4     00 2E 06 36 |  if_ae	mov	local05, #0
1c4e8     9C A4 B0 FD | 	call	#__system___float_fromuns
1c4ec     17 FB 61 F5 | 	xor	result1, local05
1c4f0     FD 12 02 F6 | 	mov	arg01, result1
1c4f4     0C 4E 05 F1 | 	add	fp, #12
1c4f8     A7 14 02 FB | 	rdlong	arg02, fp
1c4fc     0C 4E 85 F1 | 	sub	fp, #12
1c500     01 16 06 F6 | 	mov	arg03, #1
1c504     B8 AC B0 FD | 	call	#__system___float_cmp
1c508     01 FA 55 F2 | 	cmps	result1, #1 wc
1c50c     00 26 26 C6 |  if_b	not	local01, #0
1c510     A7 26 62 FC | 	wrlong	local01, fp
1c514     90 02 90 FD | 	jmp	#LR__2313
1c518                 | LR__2304
1c518                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1c518     08 4E 05 F1 | 	add	fp, #8
1c51c     A7 26 02 FB | 	rdlong	local01, fp
1c520     08 4E 85 F1 | 	sub	fp, #8
1c524     1C 26 0E F2 | 	cmp	local01, #28 wz
1c528     14 4E 05 A1 |  if_e	add	fp, #20
1c52c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c530     14 4E 85 A1 |  if_e	sub	fp, #20
1c534     16 2B 02 A6 |  if_e	mov	local03, local04
1c538     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c53c     24 00 90 5D |  if_ne	jmp	#LR__2305
1c540     00 26 06 F6 | 	mov	local01, #0
1c544     A7 28 02 FB | 	rdlong	local02, fp
1c548     0C 4E 05 F1 | 	add	fp, #12
1c54c     A7 2A 02 FB | 	rdlong	local03, fp
1c550     0C 4E 85 F1 | 	sub	fp, #12
1c554     15 29 5A F2 | 	cmps	local02, local03 wcz
1c558     01 26 66 E6 |  if_be	neg	local01, #1
1c55c     A7 26 62 FC | 	wrlong	local01, fp
1c560     44 02 90 FD | 	jmp	#LR__2313
1c564                 | LR__2305
1c564                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1c564     08 4E 05 F1 | 	add	fp, #8
1c568     A7 26 02 FB | 	rdlong	local01, fp
1c56c     08 4E 85 F1 | 	sub	fp, #8
1c570     1C 26 0E F2 | 	cmp	local01, #28 wz
1c574     14 4E 05 A1 |  if_e	add	fp, #20
1c578     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c57c     14 4E 85 A1 |  if_e	sub	fp, #20
1c580     16 2B 02 A6 |  if_e	mov	local03, local04
1c584     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c588     24 00 90 5D |  if_ne	jmp	#LR__2306
1c58c     00 26 06 F6 | 	mov	local01, #0
1c590     A7 28 02 FB | 	rdlong	local02, fp
1c594     0C 4E 05 F1 | 	add	fp, #12
1c598     A7 2A 02 FB | 	rdlong	local03, fp
1c59c     0C 4E 85 F1 | 	sub	fp, #12
1c5a0     15 29 5A F2 | 	cmps	local02, local03 wcz
1c5a4     01 26 66 E6 |  if_be	neg	local01, #1
1c5a8     A7 26 62 FC | 	wrlong	local01, fp
1c5ac     F8 01 90 FD | 	jmp	#LR__2313
1c5b0                 | LR__2306
1c5b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1c5b0     08 4E 05 F1 | 	add	fp, #8
1c5b4     A7 26 02 FB | 	rdlong	local01, fp
1c5b8     08 4E 85 F1 | 	sub	fp, #8
1c5bc     1D 26 0E F2 | 	cmp	local01, #29 wz
1c5c0     14 4E 05 A1 |  if_e	add	fp, #20
1c5c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c5c8     14 4E 85 A1 |  if_e	sub	fp, #20
1c5cc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c5d0     34 00 90 5D |  if_ne	jmp	#LR__2307
1c5d4     00 26 06 F6 | 	mov	local01, #0
1c5d8     A7 12 02 FB | 	rdlong	arg01, fp
1c5dc     A8 A3 B0 FD | 	call	#__system___float_fromuns
1c5e0     FD 12 02 F6 | 	mov	arg01, result1
1c5e4     0C 4E 05 F1 | 	add	fp, #12
1c5e8     A7 14 02 FB | 	rdlong	arg02, fp
1c5ec     0C 4E 85 F1 | 	sub	fp, #12
1c5f0     01 16 06 F6 | 	mov	arg03, #1
1c5f4     C8 AB B0 FD | 	call	#__system___float_cmp
1c5f8     01 FA 55 F2 | 	cmps	result1, #1 wc
1c5fc     00 26 26 C6 |  if_b	not	local01, #0
1c600     A7 26 62 FC | 	wrlong	local01, fp
1c604     A0 01 90 FD | 	jmp	#LR__2313
1c608                 | LR__2307
1c608                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1c608     08 4E 05 F1 | 	add	fp, #8
1c60c     A7 26 02 FB | 	rdlong	local01, fp
1c610     08 4E 85 F1 | 	sub	fp, #8
1c614     1D 26 0E F2 | 	cmp	local01, #29 wz
1c618     14 4E 05 A1 |  if_e	add	fp, #20
1c61c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c620     14 4E 85 A1 |  if_e	sub	fp, #20
1c624     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c628     24 00 90 5D |  if_ne	jmp	#LR__2308
1c62c     00 26 06 F6 | 	mov	local01, #0
1c630     A7 28 02 FB | 	rdlong	local02, fp
1c634     0C 4E 05 F1 | 	add	fp, #12
1c638     A7 2A 02 FB | 	rdlong	local03, fp
1c63c     0C 4E 85 F1 | 	sub	fp, #12
1c640     15 29 5A F2 | 	cmps	local02, local03 wcz
1c644     01 26 66 E6 |  if_be	neg	local01, #1
1c648     A7 26 62 FC | 	wrlong	local01, fp
1c64c     58 01 90 FD | 	jmp	#LR__2313
1c650                 | LR__2308
1c650                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1c650     08 4E 05 F1 | 	add	fp, #8
1c654     A7 26 02 FB | 	rdlong	local01, fp
1c658     08 4E 85 F1 | 	sub	fp, #8
1c65c     1D 26 0E F2 | 	cmp	local01, #29 wz
1c660     14 4E 05 A1 |  if_e	add	fp, #20
1c664     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c668     14 4E 85 A1 |  if_e	sub	fp, #20
1c66c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c670     24 00 90 5D |  if_ne	jmp	#LR__2309
1c674     00 26 06 F6 | 	mov	local01, #0
1c678     A7 28 02 FB | 	rdlong	local02, fp
1c67c     0C 4E 05 F1 | 	add	fp, #12
1c680     A7 2A 02 FB | 	rdlong	local03, fp
1c684     0C 4E 85 F1 | 	sub	fp, #12
1c688     15 29 1A F2 | 	cmp	local02, local03 wcz
1c68c     01 26 66 E6 |  if_be	neg	local01, #1
1c690     A7 26 62 FC | 	wrlong	local01, fp
1c694     10 01 90 FD | 	jmp	#LR__2313
1c698                 | LR__2309
1c698                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1c698     08 4E 05 F1 | 	add	fp, #8
1c69c     A7 26 02 FB | 	rdlong	local01, fp
1c6a0     08 4E 85 F1 | 	sub	fp, #8
1c6a4     2B 26 0E F2 | 	cmp	local01, #43 wz
1c6a8     14 4E 05 A1 |  if_e	add	fp, #20
1c6ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1c6b4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c6b8     30 00 90 5D |  if_ne	jmp	#LR__2310
1c6bc     00 26 06 F6 | 	mov	local01, #0
1c6c0     A7 12 02 FB | 	rdlong	arg01, fp
1c6c4     3C 06 BF FD | 	call	#_convertstring
1c6c8     FD 12 02 F6 | 	mov	arg01, result1
1c6cc     0C 4E 05 F1 | 	add	fp, #12
1c6d0     A7 14 02 FB | 	rdlong	arg02, fp
1c6d4     0C 4E 85 F1 | 	sub	fp, #12
1c6d8     60 78 B0 FD | 	call	#__system___string_cmp
1c6dc     01 FA 55 F2 | 	cmps	result1, #1 wc
1c6e0     00 26 26 C6 |  if_b	not	local01, #0
1c6e4     A7 26 62 FC | 	wrlong	local01, fp
1c6e8     BC 00 90 FD | 	jmp	#LR__2313
1c6ec                 | LR__2310
1c6ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1c6ec     08 4E 05 F1 | 	add	fp, #8
1c6f0     A7 26 02 FB | 	rdlong	local01, fp
1c6f4     08 4E 85 F1 | 	sub	fp, #8
1c6f8     1F 26 0E F2 | 	cmp	local01, #31 wz
1c6fc     14 4E 05 A1 |  if_e	add	fp, #20
1c700     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c704     14 4E 85 A1 |  if_e	sub	fp, #20
1c708     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c70c     34 00 90 5D |  if_ne	jmp	#LR__2311
1c710     00 26 06 F6 | 	mov	local01, #0
1c714     A7 28 02 FB | 	rdlong	local02, fp
1c718     0C 4E 05 F1 | 	add	fp, #12
1c71c     A7 12 02 FB | 	rdlong	arg01, fp
1c720     0C 4E 85 F1 | 	sub	fp, #12
1c724     DC 05 BF FD | 	call	#_convertstring
1c728     FD 14 02 F6 | 	mov	arg02, result1
1c72c     14 13 02 F6 | 	mov	arg01, local02
1c730     08 78 B0 FD | 	call	#__system___string_cmp
1c734     01 FA 55 F2 | 	cmps	result1, #1 wc
1c738     00 26 26 C6 |  if_b	not	local01, #0
1c73c     A7 26 62 FC | 	wrlong	local01, fp
1c740     64 00 90 FD | 	jmp	#LR__2313
1c744                 | LR__2311
1c744                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1c744     08 4E 05 F1 | 	add	fp, #8
1c748     A7 26 02 FB | 	rdlong	local01, fp
1c74c     08 4E 85 F1 | 	sub	fp, #8
1c750     2B 26 0E F2 | 	cmp	local01, #43 wz
1c754     14 4E 05 A1 |  if_e	add	fp, #20
1c758     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c75c     14 4E 85 A1 |  if_e	sub	fp, #20
1c760     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c764     3C 00 90 5D |  if_ne	jmp	#LR__2312
1c768     00 26 06 F6 | 	mov	local01, #0
1c76c     A7 12 02 FB | 	rdlong	arg01, fp
1c770     90 05 BF FD | 	call	#_convertstring
1c774     FD 28 02 F6 | 	mov	local02, result1
1c778     0C 4E 05 F1 | 	add	fp, #12
1c77c     A7 12 02 FB | 	rdlong	arg01, fp
1c780     0C 4E 85 F1 | 	sub	fp, #12
1c784     7C 05 BF FD | 	call	#_convertstring
1c788     FD 14 02 F6 | 	mov	arg02, result1
1c78c     14 13 02 F6 | 	mov	arg01, local02
1c790     A8 77 B0 FD | 	call	#__system___string_cmp
1c794     01 FA 55 F2 | 	cmps	result1, #1 wc
1c798     00 26 26 C6 |  if_b	not	local01, #0
1c79c     A7 26 62 FC | 	wrlong	local01, fp
1c7a0     04 00 90 FD | 	jmp	#LR__2313
1c7a4                 | LR__2312
1c7a4     A7 00 68 FC | 	wrlong	#0, fp
1c7a8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c7a8                 | LR__2313
1c7a8     08 4E 05 F1 | 	add	fp, #8
1c7ac     A7 38 68 FC | 	wrlong	#28, fp
1c7b0     08 4E 85 F1 | 	sub	fp, #8
1c7b4     A7 12 02 F6 | 	mov	arg01, fp
1c7b8     68 04 BF FD | 	call	#_push
1c7bc     A7 F0 03 F6 | 	mov	ptra, fp
1c7c0     B2 00 A0 FD | 	call	#popregs_
1c7c4                 | _do_le_ret
1c7c4     2D 00 64 FD | 	ret
1c7c8                 | 
1c7c8                 | ' 
1c7c8                 | ' '--------------------------------- less than (<)
1c7c8                 | ' 
1c7c8                 | ' sub do_lt
1c7c8                 | _do_lt
1c7c8     05 4A 05 F6 | 	mov	COUNT_, #5
1c7cc     A8 00 A0 FD | 	call	#pushregs_
1c7d0     18 F0 07 F1 | 	add	ptra, #24
1c7d4     B4 03 BF FD | 	call	#_pop
1c7d8     FD 26 02 F6 | 	mov	local01, result1
1c7dc     FE 28 02 F6 | 	mov	local02, result2
1c7e0     FF 2A 02 F6 | 	mov	local03, result3
1c7e4     0C 4E 05 F1 | 	add	fp, #12
1c7e8     A7 26 62 FC | 	wrlong	local01, fp
1c7ec     04 4E 05 F1 | 	add	fp, #4
1c7f0     A7 28 62 FC | 	wrlong	local02, fp
1c7f4     04 4E 05 F1 | 	add	fp, #4
1c7f8     A7 2A 62 FC | 	wrlong	local03, fp
1c7fc     14 4E 85 F1 | 	sub	fp, #20
1c800     88 03 BF FD | 	call	#_pop
1c804     FF 2A 02 F6 | 	mov	local03, result3
1c808     A7 FA 61 FC | 	wrlong	result1, fp
1c80c     04 4E 05 F1 | 	add	fp, #4
1c810     A7 FC 61 FC | 	wrlong	result2, fp
1c814     04 4E 05 F1 | 	add	fp, #4
1c818     A7 2A 62 FC | 	wrlong	local03, fp
1c81c                 | ' 
1c81c                 | ' t2=pop()
1c81c                 | ' t1=pop()
1c81c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1c81c     08 4E 85 F1 | 	sub	fp, #8
1c820     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c824     14 4E 05 A1 |  if_e	add	fp, #20
1c828     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c82c     14 4E 85 A1 |  if_e	sub	fp, #20
1c830     16 2B 02 A6 |  if_e	mov	local03, local04
1c834     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c838     28 00 90 5D |  if_ne	jmp	#LR__2320
1c83c     00 26 06 F6 | 	mov	local01, #0
1c840     A7 12 02 FB | 	rdlong	arg01, fp
1c844     0C 4E 05 F1 | 	add	fp, #12
1c848     A7 14 02 FB | 	rdlong	arg02, fp
1c84c     0C 4E 85 F1 | 	sub	fp, #12
1c850     E8 76 B0 FD | 	call	#__system___string_cmp
1c854     00 FA 55 F2 | 	cmps	result1, #0 wc
1c858     00 26 26 C6 |  if_b	not	local01, #0
1c85c     A7 26 62 FC | 	wrlong	local01, fp
1c860     10 04 90 FD | 	jmp	#LR__2333
1c864                 | LR__2320
1c864                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1c864     08 4E 05 F1 | 	add	fp, #8
1c868     A7 26 02 FB | 	rdlong	local01, fp
1c86c     08 4E 85 F1 | 	sub	fp, #8
1c870     1E 26 0E F2 | 	cmp	local01, #30 wz
1c874     14 4E 05 A1 |  if_e	add	fp, #20
1c878     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c87c     14 4E 85 A1 |  if_e	sub	fp, #20
1c880     16 2B 02 A6 |  if_e	mov	local03, local04
1c884     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c888     2C 00 90 5D |  if_ne	jmp	#LR__2321
1c88c     00 26 06 F6 | 	mov	local01, #0
1c890     A7 12 02 FB | 	rdlong	arg01, fp
1c894     0C 4E 05 F1 | 	add	fp, #12
1c898     A7 14 02 FB | 	rdlong	arg02, fp
1c89c     0C 4E 85 F1 | 	sub	fp, #12
1c8a0     01 16 06 F6 | 	mov	arg03, #1
1c8a4     18 A9 B0 FD | 	call	#__system___float_cmp
1c8a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c8ac     00 26 26 C6 |  if_b	not	local01, #0
1c8b0     A7 26 62 FC | 	wrlong	local01, fp
1c8b4     BC 03 90 FD | 	jmp	#LR__2333
1c8b8                 | LR__2321
1c8b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1c8b8     08 4E 05 F1 | 	add	fp, #8
1c8bc     A7 26 02 FB | 	rdlong	local01, fp
1c8c0     08 4E 85 F1 | 	sub	fp, #8
1c8c4     1E 26 0E F2 | 	cmp	local01, #30 wz
1c8c8     14 4E 05 A1 |  if_e	add	fp, #20
1c8cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c8d0     14 4E 85 A1 |  if_e	sub	fp, #20
1c8d4     16 2B 02 A6 |  if_e	mov	local03, local04
1c8d8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c8dc     48 00 90 5D |  if_ne	jmp	#LR__2322
1c8e0     00 26 06 F6 | 	mov	local01, #0
1c8e4     A7 28 02 FB | 	rdlong	local02, fp
1c8e8     0C 4E 05 F1 | 	add	fp, #12
1c8ec     A7 12 02 FB | 	rdlong	arg01, fp
1c8f0     0C 4E 85 F1 | 	sub	fp, #12
1c8f4     09 13 52 F6 | 	abs	arg01, arg01 wc
1c8f8     1F 2E C6 C9 |  if_b	decod	local05, #31
1c8fc     00 2E 06 36 |  if_ae	mov	local05, #0
1c900     84 A0 B0 FD | 	call	#__system___float_fromuns
1c904     17 FB 61 F5 | 	xor	result1, local05
1c908     FD 14 02 F6 | 	mov	arg02, result1
1c90c     14 13 02 F6 | 	mov	arg01, local02
1c910     01 16 06 F6 | 	mov	arg03, #1
1c914     A8 A8 B0 FD | 	call	#__system___float_cmp
1c918     00 FA 55 F2 | 	cmps	result1, #0 wc
1c91c     00 26 26 C6 |  if_b	not	local01, #0
1c920     A7 26 62 FC | 	wrlong	local01, fp
1c924     4C 03 90 FD | 	jmp	#LR__2333
1c928                 | LR__2322
1c928                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1c928     08 4E 05 F1 | 	add	fp, #8
1c92c     A7 26 02 FB | 	rdlong	local01, fp
1c930     08 4E 85 F1 | 	sub	fp, #8
1c934     1E 26 0E F2 | 	cmp	local01, #30 wz
1c938     14 4E 05 A1 |  if_e	add	fp, #20
1c93c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c940     14 4E 85 A1 |  if_e	sub	fp, #20
1c944     16 2B 02 A6 |  if_e	mov	local03, local04
1c948     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c94c     38 00 90 5D |  if_ne	jmp	#LR__2323
1c950     00 26 06 F6 | 	mov	local01, #0
1c954     A7 28 02 FB | 	rdlong	local02, fp
1c958     0C 4E 05 F1 | 	add	fp, #12
1c95c     A7 12 02 FB | 	rdlong	arg01, fp
1c960     0C 4E 85 F1 | 	sub	fp, #12
1c964     20 A0 B0 FD | 	call	#__system___float_fromuns
1c968     FD 14 02 F6 | 	mov	arg02, result1
1c96c     14 13 02 F6 | 	mov	arg01, local02
1c970     01 16 06 F6 | 	mov	arg03, #1
1c974     48 A8 B0 FD | 	call	#__system___float_cmp
1c978     00 FA 55 F2 | 	cmps	result1, #0 wc
1c97c     00 26 26 C6 |  if_b	not	local01, #0
1c980     A7 26 62 FC | 	wrlong	local01, fp
1c984     EC 02 90 FD | 	jmp	#LR__2333
1c988                 | LR__2323
1c988                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1c988     08 4E 05 F1 | 	add	fp, #8
1c98c     A7 26 02 FB | 	rdlong	local01, fp
1c990     08 4E 85 F1 | 	sub	fp, #8
1c994     1C 26 0E F2 | 	cmp	local01, #28 wz
1c998     14 4E 05 A1 |  if_e	add	fp, #20
1c99c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c9a0     14 4E 85 A1 |  if_e	sub	fp, #20
1c9a4     16 2B 02 A6 |  if_e	mov	local03, local04
1c9a8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c9ac     44 00 90 5D |  if_ne	jmp	#LR__2324
1c9b0     00 26 06 F6 | 	mov	local01, #0
1c9b4     A7 12 02 FB | 	rdlong	arg01, fp
1c9b8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c9bc     1F 2E C6 C9 |  if_b	decod	local05, #31
1c9c0     00 2E 06 36 |  if_ae	mov	local05, #0
1c9c4     C0 9F B0 FD | 	call	#__system___float_fromuns
1c9c8     17 FB 61 F5 | 	xor	result1, local05
1c9cc     FD 12 02 F6 | 	mov	arg01, result1
1c9d0     0C 4E 05 F1 | 	add	fp, #12
1c9d4     A7 14 02 FB | 	rdlong	arg02, fp
1c9d8     0C 4E 85 F1 | 	sub	fp, #12
1c9dc     01 16 06 F6 | 	mov	arg03, #1
1c9e0     DC A7 B0 FD | 	call	#__system___float_cmp
1c9e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1c9e8     00 26 26 C6 |  if_b	not	local01, #0
1c9ec     A7 26 62 FC | 	wrlong	local01, fp
1c9f0     80 02 90 FD | 	jmp	#LR__2333
1c9f4                 | LR__2324
1c9f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1c9f4     08 4E 05 F1 | 	add	fp, #8
1c9f8     A7 26 02 FB | 	rdlong	local01, fp
1c9fc     08 4E 85 F1 | 	sub	fp, #8
1ca00     1C 26 0E F2 | 	cmp	local01, #28 wz
1ca04     14 4E 05 A1 |  if_e	add	fp, #20
1ca08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca0c     14 4E 85 A1 |  if_e	sub	fp, #20
1ca10     16 2B 02 A6 |  if_e	mov	local03, local04
1ca14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ca18     20 00 90 5D |  if_ne	jmp	#LR__2325
1ca1c     A7 28 02 FB | 	rdlong	local02, fp
1ca20     0C 4E 05 F1 | 	add	fp, #12
1ca24     A7 2A 02 FB | 	rdlong	local03, fp
1ca28     0C 4E 85 F1 | 	sub	fp, #12
1ca2c     15 29 52 F2 | 	cmps	local02, local03 wc
1ca30     13 27 A2 F1 | 	subx	local01, local01
1ca34     A7 26 62 FC | 	wrlong	local01, fp
1ca38     38 02 90 FD | 	jmp	#LR__2333
1ca3c                 | LR__2325
1ca3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1ca3c     08 4E 05 F1 | 	add	fp, #8
1ca40     A7 26 02 FB | 	rdlong	local01, fp
1ca44     08 4E 85 F1 | 	sub	fp, #8
1ca48     1C 26 0E F2 | 	cmp	local01, #28 wz
1ca4c     14 4E 05 A1 |  if_e	add	fp, #20
1ca50     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca54     14 4E 85 A1 |  if_e	sub	fp, #20
1ca58     16 2B 02 A6 |  if_e	mov	local03, local04
1ca5c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ca60     20 00 90 5D |  if_ne	jmp	#LR__2326
1ca64     A7 28 02 FB | 	rdlong	local02, fp
1ca68     0C 4E 05 F1 | 	add	fp, #12
1ca6c     A7 2A 02 FB | 	rdlong	local03, fp
1ca70     0C 4E 85 F1 | 	sub	fp, #12
1ca74     15 29 52 F2 | 	cmps	local02, local03 wc
1ca78     13 27 A2 F1 | 	subx	local01, local01
1ca7c     A7 26 62 FC | 	wrlong	local01, fp
1ca80     F0 01 90 FD | 	jmp	#LR__2333
1ca84                 | LR__2326
1ca84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1ca84     08 4E 05 F1 | 	add	fp, #8
1ca88     A7 26 02 FB | 	rdlong	local01, fp
1ca8c     08 4E 85 F1 | 	sub	fp, #8
1ca90     1D 26 0E F2 | 	cmp	local01, #29 wz
1ca94     14 4E 05 A1 |  if_e	add	fp, #20
1ca98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca9c     14 4E 85 A1 |  if_e	sub	fp, #20
1caa0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1caa4     34 00 90 5D |  if_ne	jmp	#LR__2327
1caa8     00 26 06 F6 | 	mov	local01, #0
1caac     A7 12 02 FB | 	rdlong	arg01, fp
1cab0     D4 9E B0 FD | 	call	#__system___float_fromuns
1cab4     FD 12 02 F6 | 	mov	arg01, result1
1cab8     0C 4E 05 F1 | 	add	fp, #12
1cabc     A7 14 02 FB | 	rdlong	arg02, fp
1cac0     0C 4E 85 F1 | 	sub	fp, #12
1cac4     01 16 06 F6 | 	mov	arg03, #1
1cac8     F4 A6 B0 FD | 	call	#__system___float_cmp
1cacc     00 FA 55 F2 | 	cmps	result1, #0 wc
1cad0     00 26 26 C6 |  if_b	not	local01, #0
1cad4     A7 26 62 FC | 	wrlong	local01, fp
1cad8     98 01 90 FD | 	jmp	#LR__2333
1cadc                 | LR__2327
1cadc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1cadc     08 4E 05 F1 | 	add	fp, #8
1cae0     A7 26 02 FB | 	rdlong	local01, fp
1cae4     08 4E 85 F1 | 	sub	fp, #8
1cae8     1D 26 0E F2 | 	cmp	local01, #29 wz
1caec     14 4E 05 A1 |  if_e	add	fp, #20
1caf0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1caf4     14 4E 85 A1 |  if_e	sub	fp, #20
1caf8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cafc     20 00 90 5D |  if_ne	jmp	#LR__2328
1cb00     A7 28 02 FB | 	rdlong	local02, fp
1cb04     0C 4E 05 F1 | 	add	fp, #12
1cb08     A7 2A 02 FB | 	rdlong	local03, fp
1cb0c     0C 4E 85 F1 | 	sub	fp, #12
1cb10     15 29 52 F2 | 	cmps	local02, local03 wc
1cb14     13 27 A2 F1 | 	subx	local01, local01
1cb18     A7 26 62 FC | 	wrlong	local01, fp
1cb1c     54 01 90 FD | 	jmp	#LR__2333
1cb20                 | LR__2328
1cb20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1cb20     08 4E 05 F1 | 	add	fp, #8
1cb24     A7 26 02 FB | 	rdlong	local01, fp
1cb28     08 4E 85 F1 | 	sub	fp, #8
1cb2c     1D 26 0E F2 | 	cmp	local01, #29 wz
1cb30     14 4E 05 A1 |  if_e	add	fp, #20
1cb34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cb38     14 4E 85 A1 |  if_e	sub	fp, #20
1cb3c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cb40     20 00 90 5D |  if_ne	jmp	#LR__2329
1cb44     A7 28 02 FB | 	rdlong	local02, fp
1cb48     0C 4E 05 F1 | 	add	fp, #12
1cb4c     A7 2A 02 FB | 	rdlong	local03, fp
1cb50     0C 4E 85 F1 | 	sub	fp, #12
1cb54     15 29 12 F2 | 	cmp	local02, local03 wc
1cb58     13 27 A2 F1 | 	subx	local01, local01
1cb5c     A7 26 62 FC | 	wrlong	local01, fp
1cb60     10 01 90 FD | 	jmp	#LR__2333
1cb64                 | LR__2329
1cb64                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1cb64     08 4E 05 F1 | 	add	fp, #8
1cb68     A7 26 02 FB | 	rdlong	local01, fp
1cb6c     08 4E 85 F1 | 	sub	fp, #8
1cb70     2B 26 0E F2 | 	cmp	local01, #43 wz
1cb74     14 4E 05 A1 |  if_e	add	fp, #20
1cb78     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cb7c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb80     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cb84     30 00 90 5D |  if_ne	jmp	#LR__2330
1cb88     00 26 06 F6 | 	mov	local01, #0
1cb8c     A7 12 02 FB | 	rdlong	arg01, fp
1cb90     70 01 BF FD | 	call	#_convertstring
1cb94     FD 12 02 F6 | 	mov	arg01, result1
1cb98     0C 4E 05 F1 | 	add	fp, #12
1cb9c     A7 14 02 FB | 	rdlong	arg02, fp
1cba0     0C 4E 85 F1 | 	sub	fp, #12
1cba4     94 73 B0 FD | 	call	#__system___string_cmp
1cba8     00 FA 55 F2 | 	cmps	result1, #0 wc
1cbac     00 26 26 C6 |  if_b	not	local01, #0
1cbb0     A7 26 62 FC | 	wrlong	local01, fp
1cbb4     BC 00 90 FD | 	jmp	#LR__2333
1cbb8                 | LR__2330
1cbb8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1cbb8     08 4E 05 F1 | 	add	fp, #8
1cbbc     A7 26 02 FB | 	rdlong	local01, fp
1cbc0     08 4E 85 F1 | 	sub	fp, #8
1cbc4     1F 26 0E F2 | 	cmp	local01, #31 wz
1cbc8     14 4E 05 A1 |  if_e	add	fp, #20
1cbcc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cbd0     14 4E 85 A1 |  if_e	sub	fp, #20
1cbd4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1cbd8     34 00 90 5D |  if_ne	jmp	#LR__2331
1cbdc     00 26 06 F6 | 	mov	local01, #0
1cbe0     A7 28 02 FB | 	rdlong	local02, fp
1cbe4     0C 4E 05 F1 | 	add	fp, #12
1cbe8     A7 12 02 FB | 	rdlong	arg01, fp
1cbec     0C 4E 85 F1 | 	sub	fp, #12
1cbf0     10 01 BF FD | 	call	#_convertstring
1cbf4     FD 14 02 F6 | 	mov	arg02, result1
1cbf8     14 13 02 F6 | 	mov	arg01, local02
1cbfc     3C 73 B0 FD | 	call	#__system___string_cmp
1cc00     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc04     00 26 26 C6 |  if_b	not	local01, #0
1cc08     A7 26 62 FC | 	wrlong	local01, fp
1cc0c     64 00 90 FD | 	jmp	#LR__2333
1cc10                 | LR__2331
1cc10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1cc10     08 4E 05 F1 | 	add	fp, #8
1cc14     A7 26 02 FB | 	rdlong	local01, fp
1cc18     08 4E 85 F1 | 	sub	fp, #8
1cc1c     2B 26 0E F2 | 	cmp	local01, #43 wz
1cc20     14 4E 05 A1 |  if_e	add	fp, #20
1cc24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cc28     14 4E 85 A1 |  if_e	sub	fp, #20
1cc2c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1cc30     3C 00 90 5D |  if_ne	jmp	#LR__2332
1cc34     00 26 06 F6 | 	mov	local01, #0
1cc38     A7 12 02 FB | 	rdlong	arg01, fp
1cc3c     C4 00 BF FD | 	call	#_convertstring
1cc40     FD 28 02 F6 | 	mov	local02, result1
1cc44     0C 4E 05 F1 | 	add	fp, #12
1cc48     A7 12 02 FB | 	rdlong	arg01, fp
1cc4c     0C 4E 85 F1 | 	sub	fp, #12
1cc50     B0 00 BF FD | 	call	#_convertstring
1cc54     FD 14 02 F6 | 	mov	arg02, result1
1cc58     14 13 02 F6 | 	mov	arg01, local02
1cc5c     DC 72 B0 FD | 	call	#__system___string_cmp
1cc60     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc64     00 26 26 C6 |  if_b	not	local01, #0
1cc68     A7 26 62 FC | 	wrlong	local01, fp
1cc6c     04 00 90 FD | 	jmp	#LR__2333
1cc70                 | LR__2332
1cc70     A7 00 68 FC | 	wrlong	#0, fp
1cc74                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cc74                 | LR__2333
1cc74     08 4E 05 F1 | 	add	fp, #8
1cc78     A7 38 68 FC | 	wrlong	#28, fp
1cc7c     08 4E 85 F1 | 	sub	fp, #8
1cc80     A7 12 02 F6 | 	mov	arg01, fp
1cc84     9C FF BE FD | 	call	#_push
1cc88     A7 F0 03 F6 | 	mov	ptra, fp
1cc8c     B2 00 A0 FD | 	call	#popregs_
1cc90                 | _do_lt_ret
1cc90     2D 00 64 FD | 	ret
1cc94                 | 
1cc94                 | ' 
1cc94                 | ' '--------------------------------- minus (-)
1cc94                 | ' 
1cc94                 | ' sub do_minus
1cc94                 | _do_minus
1cc94     05 4A 05 F6 | 	mov	COUNT_, #5
1cc98     A8 00 A0 FD | 	call	#pushregs_
1cc9c     18 F0 07 F1 | 	add	ptra, #24
1cca0     E8 FE BE FD | 	call	#_pop
1cca4     FD 26 02 F6 | 	mov	local01, result1
1cca8     FE 28 02 F6 | 	mov	local02, result2
1ccac     FF 2A 02 F6 | 	mov	local03, result3
1ccb0     0C 4E 05 F1 | 	add	fp, #12
1ccb4     A7 26 62 FC | 	wrlong	local01, fp
1ccb8     04 4E 05 F1 | 	add	fp, #4
1ccbc     A7 28 62 FC | 	wrlong	local02, fp
1ccc0     04 4E 05 F1 | 	add	fp, #4
1ccc4     A7 2A 62 FC | 	wrlong	local03, fp
1ccc8     14 4E 85 F1 | 	sub	fp, #20
1cccc     BC FE BE FD | 	call	#_pop
1ccd0     FF 2A 02 F6 | 	mov	local03, result3
1ccd4     A7 FA 61 FC | 	wrlong	result1, fp
1ccd8     04 4E 05 F1 | 	add	fp, #4
1ccdc     A7 FC 61 FC | 	wrlong	result2, fp
1cce0     04 4E 05 F1 | 	add	fp, #4
1cce4     A7 2A 62 FC | 	wrlong	local03, fp
1cce8                 | ' 
1cce8                 | ' t2=pop()
1cce8                 | ' t1=pop()
1cce8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1cce8     08 4E 85 F1 | 	sub	fp, #8
1ccec     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ccf0     14 4E 05 A1 |  if_e	add	fp, #20
1ccf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ccf8     14 4E 85 A1 |  if_e	sub	fp, #20
1ccfc     16 2B 02 A6 |  if_e	mov	local03, local04
1cd00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cd04     5C 00 90 5D |  if_ne	jmp	#LR__2341
1cd08                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1cd08     0C 4E 05 F1 | 	add	fp, #12
1cd0c     A7 26 02 FB | 	rdlong	local01, fp
1cd10     0C 4E 85 F1 | 	sub	fp, #12
1cd14     A7 2A 02 FB | 	rdlong	local03, fp
1cd18     15 27 12 F2 | 	cmp	local01, local03 wc
1cd1c     1C 00 90 3D |  if_ae	jmp	#LR__2340
1cd20     A7 26 02 FB | 	rdlong	local01, fp
1cd24     0C 4E 05 F1 | 	add	fp, #12
1cd28     A7 28 02 FB | 	rdlong	local02, fp
1cd2c     0C 4E 85 F1 | 	sub	fp, #12
1cd30     14 27 82 F1 | 	sub	local01, local02
1cd34     A7 26 62 FC | 	wrlong	local01, fp
1cd38     F4 02 90 FD | 	jmp	#LR__2350
1cd3c                 | LR__2340
1cd3c     A7 26 02 FB | 	rdlong	local01, fp
1cd40     0C 4E 05 F1 | 	add	fp, #12
1cd44     A7 28 02 FB | 	rdlong	local02, fp
1cd48     0C 4E 85 F1 | 	sub	fp, #12
1cd4c     14 27 82 F1 | 	sub	local01, local02
1cd50     A7 26 62 FC | 	wrlong	local01, fp
1cd54     08 4E 05 F1 | 	add	fp, #8
1cd58     A7 38 68 FC | 	wrlong	#28, fp
1cd5c     08 4E 85 F1 | 	sub	fp, #8
1cd60     CC 02 90 FD | 	jmp	#LR__2350
1cd64                 | LR__2341
1cd64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1cd64     08 4E 05 F1 | 	add	fp, #8
1cd68     A7 26 02 FB | 	rdlong	local01, fp
1cd6c     08 4E 85 F1 | 	sub	fp, #8
1cd70     1D 26 0E F2 | 	cmp	local01, #29 wz
1cd74     14 4E 05 A1 |  if_e	add	fp, #20
1cd78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cd7c     14 4E 85 A1 |  if_e	sub	fp, #20
1cd80     16 2B 02 A6 |  if_e	mov	local03, local04
1cd84     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cd88     28 00 90 5D |  if_ne	jmp	#LR__2342
1cd8c     A7 26 02 FB | 	rdlong	local01, fp
1cd90     0C 4E 05 F1 | 	add	fp, #12
1cd94     A7 28 02 FB | 	rdlong	local02, fp
1cd98     0C 4E 85 F1 | 	sub	fp, #12
1cd9c     14 27 82 F1 | 	sub	local01, local02
1cda0     A7 26 62 FC | 	wrlong	local01, fp
1cda4     08 4E 05 F1 | 	add	fp, #8
1cda8     A7 38 68 FC | 	wrlong	#28, fp
1cdac     08 4E 85 F1 | 	sub	fp, #8
1cdb0     7C 02 90 FD | 	jmp	#LR__2350
1cdb4                 | LR__2342
1cdb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1cdb4     08 4E 05 F1 | 	add	fp, #8
1cdb8     A7 26 02 FB | 	rdlong	local01, fp
1cdbc     08 4E 85 F1 | 	sub	fp, #8
1cdc0     1D 26 0E F2 | 	cmp	local01, #29 wz
1cdc4     14 4E 05 A1 |  if_e	add	fp, #20
1cdc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cdcc     14 4E 85 A1 |  if_e	sub	fp, #20
1cdd0     16 2B 02 A6 |  if_e	mov	local03, local04
1cdd4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cdd8     34 00 90 5D |  if_ne	jmp	#LR__2343
1cddc     A7 12 02 FB | 	rdlong	arg01, fp
1cde0     A4 9B B0 FD | 	call	#__system___float_fromuns
1cde4     FD 12 02 F6 | 	mov	arg01, result1
1cde8     0C 4E 05 F1 | 	add	fp, #12
1cdec     A7 14 02 FB | 	rdlong	arg02, fp
1cdf0     0C 4E 85 F1 | 	sub	fp, #12
1cdf4     1F 14 E6 F4 | 	bitnot	arg02, #31
1cdf8     C0 9B B0 FD | 	call	#__system___float_add
1cdfc     A7 FA 61 FC | 	wrlong	result1, fp
1ce00     08 4E 05 F1 | 	add	fp, #8
1ce04     A7 3C 68 FC | 	wrlong	#30, fp
1ce08     08 4E 85 F1 | 	sub	fp, #8
1ce0c     20 02 90 FD | 	jmp	#LR__2350
1ce10                 | LR__2343
1ce10                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1ce10     08 4E 05 F1 | 	add	fp, #8
1ce14     A7 26 02 FB | 	rdlong	local01, fp
1ce18     08 4E 85 F1 | 	sub	fp, #8
1ce1c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ce20     14 4E 05 A1 |  if_e	add	fp, #20
1ce24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce28     14 4E 85 A1 |  if_e	sub	fp, #20
1ce2c     16 2B 02 A6 |  if_e	mov	local03, local04
1ce30     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ce34     1C 00 90 5D |  if_ne	jmp	#LR__2344
1ce38     A7 26 02 FB | 	rdlong	local01, fp
1ce3c     0C 4E 05 F1 | 	add	fp, #12
1ce40     A7 28 02 FB | 	rdlong	local02, fp
1ce44     0C 4E 85 F1 | 	sub	fp, #12
1ce48     14 27 82 F1 | 	sub	local01, local02
1ce4c     A7 26 62 FC | 	wrlong	local01, fp
1ce50     DC 01 90 FD | 	jmp	#LR__2350
1ce54                 | LR__2344
1ce54                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1ce54     08 4E 05 F1 | 	add	fp, #8
1ce58     A7 26 02 FB | 	rdlong	local01, fp
1ce5c     08 4E 85 F1 | 	sub	fp, #8
1ce60     1C 26 0E F2 | 	cmp	local01, #28 wz
1ce64     14 4E 05 A1 |  if_e	add	fp, #20
1ce68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce6c     14 4E 85 A1 |  if_e	sub	fp, #20
1ce70     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ce74     1C 00 90 5D |  if_ne	jmp	#LR__2345
1ce78     A7 26 02 FB | 	rdlong	local01, fp
1ce7c     0C 4E 05 F1 | 	add	fp, #12
1ce80     A7 28 02 FB | 	rdlong	local02, fp
1ce84     0C 4E 85 F1 | 	sub	fp, #12
1ce88     14 27 82 F1 | 	sub	local01, local02
1ce8c     A7 26 62 FC | 	wrlong	local01, fp
1ce90     9C 01 90 FD | 	jmp	#LR__2350
1ce94                 | LR__2345
1ce94                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ce94     08 4E 05 F1 | 	add	fp, #8
1ce98     A7 26 02 FB | 	rdlong	local01, fp
1ce9c     08 4E 85 F1 | 	sub	fp, #8
1cea0     1C 26 0E F2 | 	cmp	local01, #28 wz
1cea4     14 4E 05 A1 |  if_e	add	fp, #20
1cea8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ceac     14 4E 85 A1 |  if_e	sub	fp, #20
1ceb0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ceb4     44 00 90 5D |  if_ne	jmp	#LR__2346
1ceb8     A7 12 02 FB | 	rdlong	arg01, fp
1cebc     09 13 52 F6 | 	abs	arg01, arg01 wc
1cec0     1F 2E C6 C9 |  if_b	decod	local05, #31
1cec4     00 2E 06 36 |  if_ae	mov	local05, #0
1cec8     BC 9A B0 FD | 	call	#__system___float_fromuns
1cecc     17 FB 61 F5 | 	xor	result1, local05
1ced0     FD 12 02 F6 | 	mov	arg01, result1
1ced4     0C 4E 05 F1 | 	add	fp, #12
1ced8     A7 14 02 FB | 	rdlong	arg02, fp
1cedc     0C 4E 85 F1 | 	sub	fp, #12
1cee0     1F 14 E6 F4 | 	bitnot	arg02, #31
1cee4     D4 9A B0 FD | 	call	#__system___float_add
1cee8     A7 FA 61 FC | 	wrlong	result1, fp
1ceec     08 4E 05 F1 | 	add	fp, #8
1cef0     A7 3C 68 FC | 	wrlong	#30, fp
1cef4     08 4E 85 F1 | 	sub	fp, #8
1cef8     34 01 90 FD | 	jmp	#LR__2350
1cefc                 | LR__2346
1cefc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1cefc     08 4E 05 F1 | 	add	fp, #8
1cf00     A7 26 02 FB | 	rdlong	local01, fp
1cf04     08 4E 85 F1 | 	sub	fp, #8
1cf08     1E 26 0E F2 | 	cmp	local01, #30 wz
1cf0c     14 4E 05 A1 |  if_e	add	fp, #20
1cf10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cf14     14 4E 85 A1 |  if_e	sub	fp, #20
1cf18     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cf1c     2C 00 90 5D |  if_ne	jmp	#LR__2347
1cf20     A7 26 02 FB | 	rdlong	local01, fp
1cf24     0C 4E 05 F1 | 	add	fp, #12
1cf28     A7 12 02 FB | 	rdlong	arg01, fp
1cf2c     0C 4E 85 F1 | 	sub	fp, #12
1cf30     54 9A B0 FD | 	call	#__system___float_fromuns
1cf34     FD 14 02 F6 | 	mov	arg02, result1
1cf38     13 13 02 F6 | 	mov	arg01, local01
1cf3c     1F 14 E6 F4 | 	bitnot	arg02, #31
1cf40     78 9A B0 FD | 	call	#__system___float_add
1cf44     A7 FA 61 FC | 	wrlong	result1, fp
1cf48     E4 00 90 FD | 	jmp	#LR__2350
1cf4c                 | LR__2347
1cf4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1cf4c     08 4E 05 F1 | 	add	fp, #8
1cf50     A7 26 02 FB | 	rdlong	local01, fp
1cf54     08 4E 85 F1 | 	sub	fp, #8
1cf58     1E 26 0E F2 | 	cmp	local01, #30 wz
1cf5c     14 4E 05 A1 |  if_e	add	fp, #20
1cf60     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cf64     14 4E 85 A1 |  if_e	sub	fp, #20
1cf68     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cf6c     3C 00 90 5D |  if_ne	jmp	#LR__2348
1cf70     A7 26 02 FB | 	rdlong	local01, fp
1cf74     0C 4E 05 F1 | 	add	fp, #12
1cf78     A7 12 02 FB | 	rdlong	arg01, fp
1cf7c     0C 4E 85 F1 | 	sub	fp, #12
1cf80     09 13 52 F6 | 	abs	arg01, arg01 wc
1cf84     1F 2E C6 C9 |  if_b	decod	local05, #31
1cf88     00 2E 06 36 |  if_ae	mov	local05, #0
1cf8c     F8 99 B0 FD | 	call	#__system___float_fromuns
1cf90     17 FB 61 F5 | 	xor	result1, local05
1cf94     FD 14 02 F6 | 	mov	arg02, result1
1cf98     13 13 02 F6 | 	mov	arg01, local01
1cf9c     1F 14 E6 F4 | 	bitnot	arg02, #31
1cfa0     18 9A B0 FD | 	call	#__system___float_add
1cfa4     A7 FA 61 FC | 	wrlong	result1, fp
1cfa8     84 00 90 FD | 	jmp	#LR__2350
1cfac                 | LR__2348
1cfac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1cfac     08 4E 05 F1 | 	add	fp, #8
1cfb0     A7 26 02 FB | 	rdlong	local01, fp
1cfb4     08 4E 85 F1 | 	sub	fp, #8
1cfb8     1E 26 0E F2 | 	cmp	local01, #30 wz
1cfbc     14 4E 05 A1 |  if_e	add	fp, #20
1cfc0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cfc4     14 4E 85 A1 |  if_e	sub	fp, #20
1cfc8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cfcc     20 00 90 5D |  if_ne	jmp	#LR__2349
1cfd0     A7 12 02 FB | 	rdlong	arg01, fp
1cfd4     0C 4E 05 F1 | 	add	fp, #12
1cfd8     A7 14 02 FB | 	rdlong	arg02, fp
1cfdc     0C 4E 85 F1 | 	sub	fp, #12
1cfe0     1F 14 E6 F4 | 	bitnot	arg02, #31
1cfe4     D4 99 B0 FD | 	call	#__system___float_add
1cfe8     A7 FA 61 FC | 	wrlong	result1, fp
1cfec     40 00 90 FD | 	jmp	#LR__2350
1cff0                 | LR__2349
1cff0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1cff0     08 4E 05 F1 | 	add	fp, #8
1cff4     A7 26 02 FB | 	rdlong	local01, fp
1cff8     08 4E 85 F1 | 	sub	fp, #8
1cffc     1F 26 0E F2 | 	cmp	local01, #31 wz
1d000     14 4E 05 51 |  if_ne	add	fp, #20
1d004     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d008     14 4E 85 51 |  if_ne	sub	fp, #20
1d00c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1d010     A7 06 68 AC |  if_e	wrlong	#3, fp
1d014     08 4E 05 A1 |  if_e	add	fp, #8
1d018     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d01c     08 4E 85 A1 |  if_e	sub	fp, #8
1d020     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1d024     08 4E 05 51 |  if_ne	add	fp, #8
1d028     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1d02c     08 4E 85 51 |  if_ne	sub	fp, #8
1d030                 | LR__2350
1d030     A7 12 02 F6 | 	mov	arg01, fp
1d034     EC FB BE FD | 	call	#_push
1d038     A7 F0 03 F6 | 	mov	ptra, fp
1d03c     B2 00 A0 FD | 	call	#popregs_
1d040                 | _do_minus_ret
1d040     2D 00 64 FD | 	ret
1d044                 | 
1d044                 | ' 
1d044                 | ' '--------------------------------- negative (-), one argument negative
1d044                 | ' 
1d044                 | ' sub do_negative
1d044                 | _do_negative
1d044     02 4A 05 F6 | 	mov	COUNT_, #2
1d048     A8 00 A0 FD | 	call	#pushregs_
1d04c     0C F0 07 F1 | 	add	ptra, #12
1d050     38 FB BE FD | 	call	#_pop
1d054     FF 26 02 F6 | 	mov	local01, result3
1d058     A7 FA 61 FC | 	wrlong	result1, fp
1d05c     04 4E 05 F1 | 	add	fp, #4
1d060     A7 FC 61 FC | 	wrlong	result2, fp
1d064     04 4E 05 F1 | 	add	fp, #4
1d068     A7 26 62 FC | 	wrlong	local01, fp
1d06c                 | ' 
1d06c                 | ' t1=pop()
1d06c                 | ' if t1.result_type=result_int then 
1d06c     08 4E 85 F1 | 	sub	fp, #8
1d070     1C 26 0E F2 | 	cmp	local01, #28 wz
1d074     A7 28 02 AB |  if_e	rdlong	local02, fp
1d078     14 27 62 A6 |  if_e	neg	local01, local02
1d07c     A7 26 62 AC |  if_e	wrlong	local01, fp
1d080     5C 00 90 AD |  if_e	jmp	#LR__2362
1d084     08 4E 05 F1 | 	add	fp, #8
1d088     A7 26 02 FB | 	rdlong	local01, fp
1d08c     08 4E 85 F1 | 	sub	fp, #8
1d090     1D 26 0E F2 | 	cmp	local01, #29 wz
1d094     1C 00 90 5D |  if_ne	jmp	#LR__2360
1d098     A7 28 02 FB | 	rdlong	local02, fp
1d09c     14 27 62 F6 | 	neg	local01, local02
1d0a0     A7 26 62 FC | 	wrlong	local01, fp
1d0a4     08 4E 05 F1 | 	add	fp, #8
1d0a8     A7 38 68 FC | 	wrlong	#28, fp
1d0ac     08 4E 85 F1 | 	sub	fp, #8
1d0b0     2C 00 90 FD | 	jmp	#LR__2361
1d0b4                 | LR__2360
1d0b4     08 4E 05 F1 | 	add	fp, #8
1d0b8     A7 26 02 FB | 	rdlong	local01, fp
1d0bc     08 4E 85 F1 | 	sub	fp, #8
1d0c0     1E 26 0E F2 | 	cmp	local01, #30 wz
1d0c4     A7 FA 01 AB |  if_e	rdlong	result1, fp
1d0c8     1F FA E5 A4 |  if_e	bitnot	result1, #31
1d0cc     A7 FA 61 AC |  if_e	wrlong	result1, fp
1d0d0     08 4E 05 51 |  if_ne	add	fp, #8
1d0d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1d0d8     08 4E 85 51 |  if_ne	sub	fp, #8
1d0dc     A7 50 68 5C |  if_ne	wrlong	#40, fp
1d0e0                 | LR__2361
1d0e0                 | LR__2362
1d0e0     A7 12 02 F6 | 	mov	arg01, fp
1d0e4     3C FB BE FD | 	call	#_push
1d0e8     A7 F0 03 F6 | 	mov	ptra, fp
1d0ec     B2 00 A0 FD | 	call	#popregs_
1d0f0                 | _do_negative_ret
1d0f0     2D 00 64 FD | 	ret
1d0f4                 | 
1d0f4                 | ' 
1d0f4                 | ' '--------------------------------- MOD (modulo)
1d0f4                 | ' 
1d0f4                 | ' sub do_mod 
1d0f4                 | _do_mod
1d0f4     01 4A 05 F6 | 	mov	COUNT_, #1
1d0f8     A8 00 A0 FD | 	call	#pushregs_
1d0fc     18 F0 07 F1 | 	add	ptra, #24
1d100     88 FA BE FD | 	call	#_pop
1d104     FD 8A 02 F6 | 	mov	muldivb_, result1
1d108     FE 88 02 F6 | 	mov	muldiva_, result2
1d10c     FF 26 02 F6 | 	mov	local01, result3
1d110     0C 4E 05 F1 | 	add	fp, #12
1d114     A7 8A 62 FC | 	wrlong	muldivb_, fp
1d118     04 4E 05 F1 | 	add	fp, #4
1d11c     A7 88 62 FC | 	wrlong	muldiva_, fp
1d120     04 4E 05 F1 | 	add	fp, #4
1d124     A7 26 62 FC | 	wrlong	local01, fp
1d128     14 4E 85 F1 | 	sub	fp, #20
1d12c     5C FA BE FD | 	call	#_pop
1d130     A7 FA 61 FC | 	wrlong	result1, fp
1d134     04 4E 05 F1 | 	add	fp, #4
1d138     A7 FC 61 FC | 	wrlong	result2, fp
1d13c     04 4E 05 F1 | 	add	fp, #4
1d140     A7 FE 61 FC | 	wrlong	result3, fp
1d144                 | ' 
1d144                 | ' t2=pop()
1d144                 | ' t1=pop()
1d144                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1d144     08 4E 85 F1 | 	sub	fp, #8
1d148     1F FE 0D F2 | 	cmp	result3, #31 wz
1d14c     14 4E 05 51 |  if_ne	add	fp, #20
1d150     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1d154     14 4E 85 51 |  if_ne	sub	fp, #20
1d158     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1d15c     A7 14 68 AC |  if_e	wrlong	#10, fp
1d160     08 4E 05 A1 |  if_e	add	fp, #8
1d164     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d168     08 4E 85 A1 |  if_e	sub	fp, #8
1d16c     90 01 90 AD |  if_e	jmp	#LR__2376
1d170                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1d170     08 4E 05 F1 | 	add	fp, #8
1d174     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d178     08 4E 85 F1 | 	sub	fp, #8
1d17c     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1d180     1C 00 90 5D |  if_ne	jmp	#LR__2370
1d184     08 4E 05 F1 | 	add	fp, #8
1d188     A7 38 68 FC | 	wrlong	#28, fp
1d18c     08 4E 85 F1 | 	sub	fp, #8
1d190     A7 12 02 FB | 	rdlong	arg01, fp
1d194     00 14 06 F6 | 	mov	arg02, #0
1d198     B8 A0 B0 FD | 	call	#__system___float_tointeger
1d19c     A7 FA 61 FC | 	wrlong	result1, fp
1d1a0                 | LR__2370
1d1a0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d1a0     14 4E 05 F1 | 	add	fp, #20
1d1a4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d1a8     14 4E 85 F1 | 	sub	fp, #20
1d1ac     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1d1b0     28 00 90 5D |  if_ne	jmp	#LR__2371
1d1b4     14 4E 05 F1 | 	add	fp, #20
1d1b8     A7 38 68 FC | 	wrlong	#28, fp
1d1bc     08 4E 85 F1 | 	sub	fp, #8
1d1c0     A7 12 02 FB | 	rdlong	arg01, fp
1d1c4     0C 4E 85 F1 | 	sub	fp, #12
1d1c8     00 14 06 F6 | 	mov	arg02, #0
1d1cc     84 A0 B0 FD | 	call	#__system___float_tointeger
1d1d0     0C 4E 05 F1 | 	add	fp, #12
1d1d4     A7 FA 61 FC | 	wrlong	result1, fp
1d1d8     0C 4E 85 F1 | 	sub	fp, #12
1d1dc                 | LR__2371
1d1dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1d1dc     08 4E 05 F1 | 	add	fp, #8
1d1e0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d1e4     08 4E 85 F1 | 	sub	fp, #8
1d1e8     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d1ec     14 4E 05 A1 |  if_e	add	fp, #20
1d1f0     A7 26 02 AB |  if_e	rdlong	local01, fp
1d1f4     14 4E 85 A1 |  if_e	sub	fp, #20
1d1f8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d1fc     20 00 90 5D |  if_ne	jmp	#LR__2372
1d200     0C 4E 05 F1 | 	add	fp, #12
1d204     A7 26 02 FB | 	rdlong	local01, fp
1d208     0C 4E 85 F1 | 	sub	fp, #12
1d20c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d210     13 8B 12 FD | 	qdiv	muldivb_, local01
1d214     19 26 62 FD | 	getqy	local01
1d218     A7 26 62 FC | 	wrlong	local01, fp
1d21c     E0 00 90 FD | 	jmp	#LR__2376
1d220                 | LR__2372
1d220                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1d220     08 4E 05 F1 | 	add	fp, #8
1d224     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d228     08 4E 85 F1 | 	sub	fp, #8
1d22c     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d230     14 4E 05 A1 |  if_e	add	fp, #20
1d234     A7 26 02 AB |  if_e	rdlong	local01, fp
1d238     14 4E 85 A1 |  if_e	sub	fp, #20
1d23c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d240     2C 00 90 5D |  if_ne	jmp	#LR__2373
1d244     0C 4E 05 F1 | 	add	fp, #12
1d248     A7 26 02 FB | 	rdlong	local01, fp
1d24c     0C 4E 85 F1 | 	sub	fp, #12
1d250     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d254     13 8B 12 FD | 	qdiv	muldivb_, local01
1d258     19 26 62 FD | 	getqy	local01
1d25c     A7 26 62 FC | 	wrlong	local01, fp
1d260     08 4E 05 F1 | 	add	fp, #8
1d264     A7 38 68 FC | 	wrlong	#28, fp
1d268     08 4E 85 F1 | 	sub	fp, #8
1d26c     90 00 90 FD | 	jmp	#LR__2376
1d270                 | LR__2373
1d270                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1d270     08 4E 05 F1 | 	add	fp, #8
1d274     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d278     08 4E 85 F1 | 	sub	fp, #8
1d27c     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d280     14 4E 05 A1 |  if_e	add	fp, #20
1d284     A7 26 02 AB |  if_e	rdlong	local01, fp
1d288     14 4E 85 A1 |  if_e	sub	fp, #20
1d28c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d290     1C 00 90 5D |  if_ne	jmp	#LR__2374
1d294     A7 88 02 FB | 	rdlong	muldiva_, fp
1d298     0C 4E 05 F1 | 	add	fp, #12
1d29c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d2a0     0C 4E 85 F1 | 	sub	fp, #12
1d2a4     BA 00 A0 FD | 	call	#divide_
1d2a8     A7 88 62 FC | 	wrlong	muldiva_, fp
1d2ac     50 00 90 FD | 	jmp	#LR__2376
1d2b0                 | LR__2374
1d2b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1d2b0     08 4E 05 F1 | 	add	fp, #8
1d2b4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d2b8     08 4E 85 F1 | 	sub	fp, #8
1d2bc     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d2c0     14 4E 05 A1 |  if_e	add	fp, #20
1d2c4     A7 26 02 AB |  if_e	rdlong	local01, fp
1d2c8     14 4E 85 A1 |  if_e	sub	fp, #20
1d2cc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d2d0     1C 00 90 5D |  if_ne	jmp	#LR__2375
1d2d4     A7 88 02 FB | 	rdlong	muldiva_, fp
1d2d8     0C 4E 05 F1 | 	add	fp, #12
1d2dc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d2e0     0C 4E 85 F1 | 	sub	fp, #12
1d2e4     BA 00 A0 FD | 	call	#divide_
1d2e8     A7 88 62 FC | 	wrlong	muldiva_, fp
1d2ec     10 00 90 FD | 	jmp	#LR__2376
1d2f0                 | LR__2375
1d2f0     A7 16 68 FC | 	wrlong	#11, fp
1d2f4     08 4E 05 F1 | 	add	fp, #8
1d2f8     A7 FE 69 FC | 	wrlong	#255, fp
1d2fc     08 4E 85 F1 | 	sub	fp, #8
1d300                 | LR__2376
1d300     A7 12 02 F6 | 	mov	arg01, fp
1d304     1C F9 BE FD | 	call	#_push
1d308     A7 F0 03 F6 | 	mov	ptra, fp
1d30c     B2 00 A0 FD | 	call	#popregs_
1d310                 | _do_mod_ret
1d310     2D 00 64 FD | 	ret
1d314                 | 
1d314                 | ' 
1d314                 | ' '--------------------------------- mul (*)
1d314                 | ' 
1d314                 | ' sub do_mul
1d314                 | _do_mul
1d314     05 4A 05 F6 | 	mov	COUNT_, #5
1d318     A8 00 A0 FD | 	call	#pushregs_
1d31c     18 F0 07 F1 | 	add	ptra, #24
1d320     68 F8 BE FD | 	call	#_pop
1d324     FD 26 02 F6 | 	mov	local01, result1
1d328     FE 28 02 F6 | 	mov	local02, result2
1d32c     FF 2A 02 F6 | 	mov	local03, result3
1d330     0C 4E 05 F1 | 	add	fp, #12
1d334     A7 26 62 FC | 	wrlong	local01, fp
1d338     04 4E 05 F1 | 	add	fp, #4
1d33c     A7 28 62 FC | 	wrlong	local02, fp
1d340     04 4E 05 F1 | 	add	fp, #4
1d344     A7 2A 62 FC | 	wrlong	local03, fp
1d348     14 4E 85 F1 | 	sub	fp, #20
1d34c     3C F8 BE FD | 	call	#_pop
1d350     FF 2A 02 F6 | 	mov	local03, result3
1d354     A7 FA 61 FC | 	wrlong	result1, fp
1d358     04 4E 05 F1 | 	add	fp, #4
1d35c     A7 FC 61 FC | 	wrlong	result2, fp
1d360     04 4E 05 F1 | 	add	fp, #4
1d364     A7 2A 62 FC | 	wrlong	local03, fp
1d368                 | ' 
1d368                 | ' t2=pop()
1d368                 | ' t1=pop()
1d368                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1d368     08 4E 85 F1 | 	sub	fp, #8
1d36c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1d370     14 4E 05 A1 |  if_e	add	fp, #20
1d374     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d378     14 4E 85 A1 |  if_e	sub	fp, #20
1d37c     16 2B 02 A6 |  if_e	mov	local03, local04
1d380     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d384     20 00 90 5D |  if_ne	jmp	#LR__2380
1d388     A7 28 02 FB | 	rdlong	local02, fp
1d38c     0C 4E 05 F1 | 	add	fp, #12
1d390     A7 2A 02 FB | 	rdlong	local03, fp
1d394     15 29 02 FD | 	qmul	local02, local03
1d398     0C 4E 85 F1 | 	sub	fp, #12
1d39c     18 26 62 FD | 	getqx	local01
1d3a0     A7 26 62 FC | 	wrlong	local01, fp
1d3a4     C4 02 90 FD | 	jmp	#LR__2389
1d3a8                 | LR__2380
1d3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1d3a8     08 4E 05 F1 | 	add	fp, #8
1d3ac     A7 26 02 FB | 	rdlong	local01, fp
1d3b0     08 4E 85 F1 | 	sub	fp, #8
1d3b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1d3b8     14 4E 05 A1 |  if_e	add	fp, #20
1d3bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1d3c4     16 2B 02 A6 |  if_e	mov	local03, local04
1d3c8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d3cc     2C 00 90 5D |  if_ne	jmp	#LR__2381
1d3d0     A7 28 02 FB | 	rdlong	local02, fp
1d3d4     0C 4E 05 F1 | 	add	fp, #12
1d3d8     A7 2A 02 FB | 	rdlong	local03, fp
1d3dc     15 29 02 FD | 	qmul	local02, local03
1d3e0     0C 4E 85 F1 | 	sub	fp, #12
1d3e4     18 26 62 FD | 	getqx	local01
1d3e8     A7 26 62 FC | 	wrlong	local01, fp
1d3ec     08 4E 05 F1 | 	add	fp, #8
1d3f0     A7 38 68 FC | 	wrlong	#28, fp
1d3f4     08 4E 85 F1 | 	sub	fp, #8
1d3f8     70 02 90 FD | 	jmp	#LR__2389
1d3fc                 | LR__2381
1d3fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1d3fc     08 4E 05 F1 | 	add	fp, #8
1d400     A7 26 02 FB | 	rdlong	local01, fp
1d404     08 4E 85 F1 | 	sub	fp, #8
1d408     1D 26 0E F2 | 	cmp	local01, #29 wz
1d40c     14 4E 05 A1 |  if_e	add	fp, #20
1d410     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d414     14 4E 85 A1 |  if_e	sub	fp, #20
1d418     16 2B 02 A6 |  if_e	mov	local03, local04
1d41c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d420     30 00 90 5D |  if_ne	jmp	#LR__2382
1d424     A7 12 02 FB | 	rdlong	arg01, fp
1d428     5C 95 B0 FD | 	call	#__system___float_fromuns
1d42c     FD 12 02 F6 | 	mov	arg01, result1
1d430     0C 4E 05 F1 | 	add	fp, #12
1d434     A7 14 02 FB | 	rdlong	arg02, fp
1d438     0C 4E 85 F1 | 	sub	fp, #12
1d43c     4C 99 B0 FD | 	call	#__system___float_mul
1d440     A7 FA 61 FC | 	wrlong	result1, fp
1d444     08 4E 05 F1 | 	add	fp, #8
1d448     A7 3C 68 FC | 	wrlong	#30, fp
1d44c     08 4E 85 F1 | 	sub	fp, #8
1d450     18 02 90 FD | 	jmp	#LR__2389
1d454                 | LR__2382
1d454                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1d454     08 4E 05 F1 | 	add	fp, #8
1d458     A7 26 02 FB | 	rdlong	local01, fp
1d45c     08 4E 85 F1 | 	sub	fp, #8
1d460     1C 26 0E F2 | 	cmp	local01, #28 wz
1d464     14 4E 05 A1 |  if_e	add	fp, #20
1d468     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d46c     14 4E 85 A1 |  if_e	sub	fp, #20
1d470     16 2B 02 A6 |  if_e	mov	local03, local04
1d474     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d478     20 00 90 5D |  if_ne	jmp	#LR__2383
1d47c     A7 28 02 FB | 	rdlong	local02, fp
1d480     0C 4E 05 F1 | 	add	fp, #12
1d484     A7 2A 02 FB | 	rdlong	local03, fp
1d488     15 29 02 FD | 	qmul	local02, local03
1d48c     0C 4E 85 F1 | 	sub	fp, #12
1d490     18 26 62 FD | 	getqx	local01
1d494     A7 26 62 FC | 	wrlong	local01, fp
1d498     D0 01 90 FD | 	jmp	#LR__2389
1d49c                 | LR__2383
1d49c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1d49c     08 4E 05 F1 | 	add	fp, #8
1d4a0     A7 26 02 FB | 	rdlong	local01, fp
1d4a4     08 4E 85 F1 | 	sub	fp, #8
1d4a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1d4ac     14 4E 05 A1 |  if_e	add	fp, #20
1d4b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d4b4     14 4E 85 A1 |  if_e	sub	fp, #20
1d4b8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1d4bc     20 00 90 5D |  if_ne	jmp	#LR__2384
1d4c0     A7 28 02 FB | 	rdlong	local02, fp
1d4c4     0C 4E 05 F1 | 	add	fp, #12
1d4c8     A7 2A 02 FB | 	rdlong	local03, fp
1d4cc     15 29 02 FD | 	qmul	local02, local03
1d4d0     0C 4E 85 F1 | 	sub	fp, #12
1d4d4     18 26 62 FD | 	getqx	local01
1d4d8     A7 26 62 FC | 	wrlong	local01, fp
1d4dc     8C 01 90 FD | 	jmp	#LR__2389
1d4e0                 | LR__2384
1d4e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1d4e0     08 4E 05 F1 | 	add	fp, #8
1d4e4     A7 26 02 FB | 	rdlong	local01, fp
1d4e8     08 4E 85 F1 | 	sub	fp, #8
1d4ec     1C 26 0E F2 | 	cmp	local01, #28 wz
1d4f0     14 4E 05 A1 |  if_e	add	fp, #20
1d4f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d4f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d4fc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d500     40 00 90 5D |  if_ne	jmp	#LR__2385
1d504     A7 12 02 FB | 	rdlong	arg01, fp
1d508     09 13 52 F6 | 	abs	arg01, arg01 wc
1d50c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d510     00 2E 06 36 |  if_ae	mov	local05, #0
1d514     70 94 B0 FD | 	call	#__system___float_fromuns
1d518     17 FB 61 F5 | 	xor	result1, local05
1d51c     FD 12 02 F6 | 	mov	arg01, result1
1d520     0C 4E 05 F1 | 	add	fp, #12
1d524     A7 14 02 FB | 	rdlong	arg02, fp
1d528     0C 4E 85 F1 | 	sub	fp, #12
1d52c     5C 98 B0 FD | 	call	#__system___float_mul
1d530     A7 FA 61 FC | 	wrlong	result1, fp
1d534     08 4E 05 F1 | 	add	fp, #8
1d538     A7 3C 68 FC | 	wrlong	#30, fp
1d53c     08 4E 85 F1 | 	sub	fp, #8
1d540     28 01 90 FD | 	jmp	#LR__2389
1d544                 | LR__2385
1d544                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1d544     08 4E 05 F1 | 	add	fp, #8
1d548     A7 26 02 FB | 	rdlong	local01, fp
1d54c     08 4E 85 F1 | 	sub	fp, #8
1d550     1E 26 0E F2 | 	cmp	local01, #30 wz
1d554     14 4E 05 A1 |  if_e	add	fp, #20
1d558     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d55c     14 4E 85 A1 |  if_e	sub	fp, #20
1d560     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d564     28 00 90 5D |  if_ne	jmp	#LR__2386
1d568     A7 26 02 FB | 	rdlong	local01, fp
1d56c     0C 4E 05 F1 | 	add	fp, #12
1d570     A7 12 02 FB | 	rdlong	arg01, fp
1d574     0C 4E 85 F1 | 	sub	fp, #12
1d578     0C 94 B0 FD | 	call	#__system___float_fromuns
1d57c     FD 14 02 F6 | 	mov	arg02, result1
1d580     13 13 02 F6 | 	mov	arg01, local01
1d584     04 98 B0 FD | 	call	#__system___float_mul
1d588     A7 FA 61 FC | 	wrlong	result1, fp
1d58c     DC 00 90 FD | 	jmp	#LR__2389
1d590                 | LR__2386
1d590                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1d590     08 4E 05 F1 | 	add	fp, #8
1d594     A7 26 02 FB | 	rdlong	local01, fp
1d598     08 4E 85 F1 | 	sub	fp, #8
1d59c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d5a0     14 4E 05 A1 |  if_e	add	fp, #20
1d5a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5a8     14 4E 85 A1 |  if_e	sub	fp, #20
1d5ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d5b0     38 00 90 5D |  if_ne	jmp	#LR__2387
1d5b4     A7 26 02 FB | 	rdlong	local01, fp
1d5b8     0C 4E 05 F1 | 	add	fp, #12
1d5bc     A7 12 02 FB | 	rdlong	arg01, fp
1d5c0     0C 4E 85 F1 | 	sub	fp, #12
1d5c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1d5c8     1F 2E C6 C9 |  if_b	decod	local05, #31
1d5cc     00 2E 06 36 |  if_ae	mov	local05, #0
1d5d0     B4 93 B0 FD | 	call	#__system___float_fromuns
1d5d4     17 FB 61 F5 | 	xor	result1, local05
1d5d8     FD 14 02 F6 | 	mov	arg02, result1
1d5dc     13 13 02 F6 | 	mov	arg01, local01
1d5e0     A8 97 B0 FD | 	call	#__system___float_mul
1d5e4     A7 FA 61 FC | 	wrlong	result1, fp
1d5e8     80 00 90 FD | 	jmp	#LR__2389
1d5ec                 | LR__2387
1d5ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1d5ec     08 4E 05 F1 | 	add	fp, #8
1d5f0     A7 26 02 FB | 	rdlong	local01, fp
1d5f4     08 4E 85 F1 | 	sub	fp, #8
1d5f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1d5fc     14 4E 05 A1 |  if_e	add	fp, #20
1d600     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d604     14 4E 85 A1 |  if_e	sub	fp, #20
1d608     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d60c     1C 00 90 5D |  if_ne	jmp	#LR__2388
1d610     A7 12 02 FB | 	rdlong	arg01, fp
1d614     0C 4E 05 F1 | 	add	fp, #12
1d618     A7 14 02 FB | 	rdlong	arg02, fp
1d61c     0C 4E 85 F1 | 	sub	fp, #12
1d620     68 97 B0 FD | 	call	#__system___float_mul
1d624     A7 FA 61 FC | 	wrlong	result1, fp
1d628     40 00 90 FD | 	jmp	#LR__2389
1d62c                 | LR__2388
1d62c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1d62c     08 4E 05 F1 | 	add	fp, #8
1d630     A7 26 02 FB | 	rdlong	local01, fp
1d634     08 4E 85 F1 | 	sub	fp, #8
1d638     1F 26 0E F2 | 	cmp	local01, #31 wz
1d63c     14 4E 05 51 |  if_ne	add	fp, #20
1d640     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d644     14 4E 85 51 |  if_ne	sub	fp, #20
1d648     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1d64c     A7 10 68 AC |  if_e	wrlong	#8, fp
1d650     08 4E 05 A1 |  if_e	add	fp, #8
1d654     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d658     08 4E 85 A1 |  if_e	sub	fp, #8
1d65c     A7 12 68 5C |  if_ne	wrlong	#9, fp
1d660     08 4E 05 51 |  if_ne	add	fp, #8
1d664     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1d668     08 4E 85 51 |  if_ne	sub	fp, #8
1d66c                 | LR__2389
1d66c     A7 12 02 F6 | 	mov	arg01, fp
1d670     B0 F5 BE FD | 	call	#_push
1d674     A7 F0 03 F6 | 	mov	ptra, fp
1d678     B2 00 A0 FD | 	call	#popregs_
1d67c                 | _do_mul_ret
1d67c     2D 00 64 FD | 	ret
1d680                 | 
1d680                 | ' 
1d680                 | ' '--------------------------------- not equal (<>)
1d680                 | ' 
1d680                 | ' sub do_ne
1d680                 | _do_ne
1d680     05 4A 05 F6 | 	mov	COUNT_, #5
1d684     A8 00 A0 FD | 	call	#pushregs_
1d688     18 F0 07 F1 | 	add	ptra, #24
1d68c     FC F4 BE FD | 	call	#_pop
1d690     FD 26 02 F6 | 	mov	local01, result1
1d694     FE 28 02 F6 | 	mov	local02, result2
1d698     FF 2A 02 F6 | 	mov	local03, result3
1d69c     0C 4E 05 F1 | 	add	fp, #12
1d6a0     A7 26 62 FC | 	wrlong	local01, fp
1d6a4     04 4E 05 F1 | 	add	fp, #4
1d6a8     A7 28 62 FC | 	wrlong	local02, fp
1d6ac     04 4E 05 F1 | 	add	fp, #4
1d6b0     A7 2A 62 FC | 	wrlong	local03, fp
1d6b4     14 4E 85 F1 | 	sub	fp, #20
1d6b8     D0 F4 BE FD | 	call	#_pop
1d6bc     FF 2A 02 F6 | 	mov	local03, result3
1d6c0     A7 FA 61 FC | 	wrlong	result1, fp
1d6c4     04 4E 05 F1 | 	add	fp, #4
1d6c8     A7 FC 61 FC | 	wrlong	result2, fp
1d6cc     04 4E 05 F1 | 	add	fp, #4
1d6d0     A7 2A 62 FC | 	wrlong	local03, fp
1d6d4                 | ' 
1d6d4                 | ' t2=pop()
1d6d4                 | ' t1=pop()
1d6d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1d6d4     08 4E 85 F1 | 	sub	fp, #8
1d6d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d6dc     14 4E 05 A1 |  if_e	add	fp, #20
1d6e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d6e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d6e8     16 2B 02 A6 |  if_e	mov	local03, local04
1d6ec     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d6f0     28 00 90 5D |  if_ne	jmp	#LR__2390
1d6f4     00 26 06 F6 | 	mov	local01, #0
1d6f8     A7 12 02 FB | 	rdlong	arg01, fp
1d6fc     0C 4E 05 F1 | 	add	fp, #12
1d700     A7 14 02 FB | 	rdlong	arg02, fp
1d704     0C 4E 85 F1 | 	sub	fp, #12
1d708     30 68 B0 FD | 	call	#__system___string_cmp
1d70c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d710     00 26 26 56 |  if_ne	not	local01, #0
1d714     A7 26 62 FC | 	wrlong	local01, fp
1d718     20 04 90 FD | 	jmp	#LR__2403
1d71c                 | LR__2390
1d71c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1d71c     08 4E 05 F1 | 	add	fp, #8
1d720     A7 26 02 FB | 	rdlong	local01, fp
1d724     08 4E 85 F1 | 	sub	fp, #8
1d728     1E 26 0E F2 | 	cmp	local01, #30 wz
1d72c     14 4E 05 A1 |  if_e	add	fp, #20
1d730     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d734     14 4E 85 A1 |  if_e	sub	fp, #20
1d738     16 2B 02 A6 |  if_e	mov	local03, local04
1d73c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d740     2C 00 90 5D |  if_ne	jmp	#LR__2391
1d744     00 26 06 F6 | 	mov	local01, #0
1d748     A7 12 02 FB | 	rdlong	arg01, fp
1d74c     0C 4E 05 F1 | 	add	fp, #12
1d750     A7 14 02 FB | 	rdlong	arg02, fp
1d754     0C 4E 85 F1 | 	sub	fp, #12
1d758     01 16 06 F6 | 	mov	arg03, #1
1d75c     60 9A B0 FD | 	call	#__system___float_cmp
1d760     00 FA 0D F2 | 	cmp	result1, #0 wz
1d764     00 26 26 56 |  if_ne	not	local01, #0
1d768     A7 26 62 FC | 	wrlong	local01, fp
1d76c     CC 03 90 FD | 	jmp	#LR__2403
1d770                 | LR__2391
1d770                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1d770     08 4E 05 F1 | 	add	fp, #8
1d774     A7 26 02 FB | 	rdlong	local01, fp
1d778     08 4E 85 F1 | 	sub	fp, #8
1d77c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d780     14 4E 05 A1 |  if_e	add	fp, #20
1d784     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d788     14 4E 85 A1 |  if_e	sub	fp, #20
1d78c     16 2B 02 A6 |  if_e	mov	local03, local04
1d790     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d794     48 00 90 5D |  if_ne	jmp	#LR__2392
1d798     00 26 06 F6 | 	mov	local01, #0
1d79c     A7 28 02 FB | 	rdlong	local02, fp
1d7a0     0C 4E 05 F1 | 	add	fp, #12
1d7a4     A7 12 02 FB | 	rdlong	arg01, fp
1d7a8     0C 4E 85 F1 | 	sub	fp, #12
1d7ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1d7b0     1F 2E C6 C9 |  if_b	decod	local05, #31
1d7b4     00 2E 06 36 |  if_ae	mov	local05, #0
1d7b8     CC 91 B0 FD | 	call	#__system___float_fromuns
1d7bc     17 FB 61 F5 | 	xor	result1, local05
1d7c0     FD 14 02 F6 | 	mov	arg02, result1
1d7c4     14 13 02 F6 | 	mov	arg01, local02
1d7c8     01 16 06 F6 | 	mov	arg03, #1
1d7cc     F0 99 B0 FD | 	call	#__system___float_cmp
1d7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d7d4     00 26 26 56 |  if_ne	not	local01, #0
1d7d8     A7 26 62 FC | 	wrlong	local01, fp
1d7dc     5C 03 90 FD | 	jmp	#LR__2403
1d7e0                 | LR__2392
1d7e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1d7e0     08 4E 05 F1 | 	add	fp, #8
1d7e4     A7 26 02 FB | 	rdlong	local01, fp
1d7e8     08 4E 85 F1 | 	sub	fp, #8
1d7ec     1E 26 0E F2 | 	cmp	local01, #30 wz
1d7f0     14 4E 05 A1 |  if_e	add	fp, #20
1d7f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d7f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d7fc     16 2B 02 A6 |  if_e	mov	local03, local04
1d800     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d804     38 00 90 5D |  if_ne	jmp	#LR__2393
1d808     00 26 06 F6 | 	mov	local01, #0
1d80c     A7 28 02 FB | 	rdlong	local02, fp
1d810     0C 4E 05 F1 | 	add	fp, #12
1d814     A7 12 02 FB | 	rdlong	arg01, fp
1d818     0C 4E 85 F1 | 	sub	fp, #12
1d81c     68 91 B0 FD | 	call	#__system___float_fromuns
1d820     FD 14 02 F6 | 	mov	arg02, result1
1d824     14 13 02 F6 | 	mov	arg01, local02
1d828     01 16 06 F6 | 	mov	arg03, #1
1d82c     90 99 B0 FD | 	call	#__system___float_cmp
1d830     00 FA 0D F2 | 	cmp	result1, #0 wz
1d834     00 26 26 56 |  if_ne	not	local01, #0
1d838     A7 26 62 FC | 	wrlong	local01, fp
1d83c     FC 02 90 FD | 	jmp	#LR__2403
1d840                 | LR__2393
1d840                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1d840     08 4E 05 F1 | 	add	fp, #8
1d844     A7 26 02 FB | 	rdlong	local01, fp
1d848     08 4E 85 F1 | 	sub	fp, #8
1d84c     1C 26 0E F2 | 	cmp	local01, #28 wz
1d850     14 4E 05 A1 |  if_e	add	fp, #20
1d854     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d858     14 4E 85 A1 |  if_e	sub	fp, #20
1d85c     16 2B 02 A6 |  if_e	mov	local03, local04
1d860     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d864     44 00 90 5D |  if_ne	jmp	#LR__2394
1d868     00 26 06 F6 | 	mov	local01, #0
1d86c     A7 12 02 FB | 	rdlong	arg01, fp
1d870     09 13 52 F6 | 	abs	arg01, arg01 wc
1d874     1F 2E C6 C9 |  if_b	decod	local05, #31
1d878     00 2E 06 36 |  if_ae	mov	local05, #0
1d87c     08 91 B0 FD | 	call	#__system___float_fromuns
1d880     17 FB 61 F5 | 	xor	result1, local05
1d884     FD 12 02 F6 | 	mov	arg01, result1
1d888     0C 4E 05 F1 | 	add	fp, #12
1d88c     A7 14 02 FB | 	rdlong	arg02, fp
1d890     0C 4E 85 F1 | 	sub	fp, #12
1d894     01 16 06 F6 | 	mov	arg03, #1
1d898     24 99 B0 FD | 	call	#__system___float_cmp
1d89c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d8a0     00 26 26 56 |  if_ne	not	local01, #0
1d8a4     A7 26 62 FC | 	wrlong	local01, fp
1d8a8     90 02 90 FD | 	jmp	#LR__2403
1d8ac                 | LR__2394
1d8ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1d8ac     08 4E 05 F1 | 	add	fp, #8
1d8b0     A7 26 02 FB | 	rdlong	local01, fp
1d8b4     08 4E 85 F1 | 	sub	fp, #8
1d8b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1d8bc     14 4E 05 A1 |  if_e	add	fp, #20
1d8c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d8c4     14 4E 85 A1 |  if_e	sub	fp, #20
1d8c8     16 2B 02 A6 |  if_e	mov	local03, local04
1d8cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d8d0     24 00 90 5D |  if_ne	jmp	#LR__2395
1d8d4     00 26 06 F6 | 	mov	local01, #0
1d8d8     A7 28 02 FB | 	rdlong	local02, fp
1d8dc     0C 4E 05 F1 | 	add	fp, #12
1d8e0     A7 2A 02 FB | 	rdlong	local03, fp
1d8e4     0C 4E 85 F1 | 	sub	fp, #12
1d8e8     15 29 0A F2 | 	cmp	local02, local03 wz
1d8ec     01 26 66 56 |  if_ne	neg	local01, #1
1d8f0     A7 26 62 FC | 	wrlong	local01, fp
1d8f4     44 02 90 FD | 	jmp	#LR__2403
1d8f8                 | LR__2395
1d8f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1d8f8     08 4E 05 F1 | 	add	fp, #8
1d8fc     A7 26 02 FB | 	rdlong	local01, fp
1d900     08 4E 85 F1 | 	sub	fp, #8
1d904     1C 26 0E F2 | 	cmp	local01, #28 wz
1d908     14 4E 05 A1 |  if_e	add	fp, #20
1d90c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d910     14 4E 85 A1 |  if_e	sub	fp, #20
1d914     16 2B 02 A6 |  if_e	mov	local03, local04
1d918     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d91c     24 00 90 5D |  if_ne	jmp	#LR__2396
1d920     00 26 06 F6 | 	mov	local01, #0
1d924     A7 28 02 FB | 	rdlong	local02, fp
1d928     0C 4E 05 F1 | 	add	fp, #12
1d92c     A7 2A 02 FB | 	rdlong	local03, fp
1d930     0C 4E 85 F1 | 	sub	fp, #12
1d934     15 29 0A F2 | 	cmp	local02, local03 wz
1d938     01 26 66 56 |  if_ne	neg	local01, #1
1d93c     A7 26 62 FC | 	wrlong	local01, fp
1d940     F8 01 90 FD | 	jmp	#LR__2403
1d944                 | LR__2396
1d944                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1d944     08 4E 05 F1 | 	add	fp, #8
1d948     A7 26 02 FB | 	rdlong	local01, fp
1d94c     08 4E 85 F1 | 	sub	fp, #8
1d950     1D 26 0E F2 | 	cmp	local01, #29 wz
1d954     14 4E 05 A1 |  if_e	add	fp, #20
1d958     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d95c     14 4E 85 A1 |  if_e	sub	fp, #20
1d960     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d964     34 00 90 5D |  if_ne	jmp	#LR__2397
1d968     00 26 06 F6 | 	mov	local01, #0
1d96c     A7 12 02 FB | 	rdlong	arg01, fp
1d970     14 90 B0 FD | 	call	#__system___float_fromuns
1d974     FD 12 02 F6 | 	mov	arg01, result1
1d978     0C 4E 05 F1 | 	add	fp, #12
1d97c     A7 14 02 FB | 	rdlong	arg02, fp
1d980     0C 4E 85 F1 | 	sub	fp, #12
1d984     01 16 06 F6 | 	mov	arg03, #1
1d988     34 98 B0 FD | 	call	#__system___float_cmp
1d98c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d990     00 26 26 56 |  if_ne	not	local01, #0
1d994     A7 26 62 FC | 	wrlong	local01, fp
1d998     A0 01 90 FD | 	jmp	#LR__2403
1d99c                 | LR__2397
1d99c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1d99c     08 4E 05 F1 | 	add	fp, #8
1d9a0     A7 26 02 FB | 	rdlong	local01, fp
1d9a4     08 4E 85 F1 | 	sub	fp, #8
1d9a8     1D 26 0E F2 | 	cmp	local01, #29 wz
1d9ac     14 4E 05 A1 |  if_e	add	fp, #20
1d9b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d9b4     14 4E 85 A1 |  if_e	sub	fp, #20
1d9b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d9bc     24 00 90 5D |  if_ne	jmp	#LR__2398
1d9c0     00 26 06 F6 | 	mov	local01, #0
1d9c4     A7 28 02 FB | 	rdlong	local02, fp
1d9c8     0C 4E 05 F1 | 	add	fp, #12
1d9cc     A7 2A 02 FB | 	rdlong	local03, fp
1d9d0     0C 4E 85 F1 | 	sub	fp, #12
1d9d4     15 29 0A F2 | 	cmp	local02, local03 wz
1d9d8     01 26 66 56 |  if_ne	neg	local01, #1
1d9dc     A7 26 62 FC | 	wrlong	local01, fp
1d9e0     58 01 90 FD | 	jmp	#LR__2403
1d9e4                 | LR__2398
1d9e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1d9e4     08 4E 05 F1 | 	add	fp, #8
1d9e8     A7 26 02 FB | 	rdlong	local01, fp
1d9ec     08 4E 85 F1 | 	sub	fp, #8
1d9f0     1D 26 0E F2 | 	cmp	local01, #29 wz
1d9f4     14 4E 05 A1 |  if_e	add	fp, #20
1d9f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d9fc     14 4E 85 A1 |  if_e	sub	fp, #20
1da00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1da04     24 00 90 5D |  if_ne	jmp	#LR__2399
1da08     00 26 06 F6 | 	mov	local01, #0
1da0c     A7 28 02 FB | 	rdlong	local02, fp
1da10     0C 4E 05 F1 | 	add	fp, #12
1da14     A7 2A 02 FB | 	rdlong	local03, fp
1da18     0C 4E 85 F1 | 	sub	fp, #12
1da1c     15 29 0A F2 | 	cmp	local02, local03 wz
1da20     01 26 66 56 |  if_ne	neg	local01, #1
1da24     A7 26 62 FC | 	wrlong	local01, fp
1da28     10 01 90 FD | 	jmp	#LR__2403
1da2c                 | LR__2399
1da2c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1da2c     08 4E 05 F1 | 	add	fp, #8
1da30     A7 26 02 FB | 	rdlong	local01, fp
1da34     08 4E 85 F1 | 	sub	fp, #8
1da38     2B 26 0E F2 | 	cmp	local01, #43 wz
1da3c     14 4E 05 A1 |  if_e	add	fp, #20
1da40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1da44     14 4E 85 A1 |  if_e	sub	fp, #20
1da48     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1da4c     30 00 90 5D |  if_ne	jmp	#LR__2400
1da50     00 26 06 F6 | 	mov	local01, #0
1da54     A7 12 02 FB | 	rdlong	arg01, fp
1da58     A8 F2 BE FD | 	call	#_convertstring
1da5c     FD 12 02 F6 | 	mov	arg01, result1
1da60     0C 4E 05 F1 | 	add	fp, #12
1da64     A7 14 02 FB | 	rdlong	arg02, fp
1da68     0C 4E 85 F1 | 	sub	fp, #12
1da6c     CC 64 B0 FD | 	call	#__system___string_cmp
1da70     00 FA 0D F2 | 	cmp	result1, #0 wz
1da74     00 26 26 56 |  if_ne	not	local01, #0
1da78     A7 26 62 FC | 	wrlong	local01, fp
1da7c     BC 00 90 FD | 	jmp	#LR__2403
1da80                 | LR__2400
1da80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1da80     08 4E 05 F1 | 	add	fp, #8
1da84     A7 26 02 FB | 	rdlong	local01, fp
1da88     08 4E 85 F1 | 	sub	fp, #8
1da8c     1F 26 0E F2 | 	cmp	local01, #31 wz
1da90     14 4E 05 A1 |  if_e	add	fp, #20
1da94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1da98     14 4E 85 A1 |  if_e	sub	fp, #20
1da9c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1daa0     34 00 90 5D |  if_ne	jmp	#LR__2401
1daa4     00 26 06 F6 | 	mov	local01, #0
1daa8     A7 28 02 FB | 	rdlong	local02, fp
1daac     0C 4E 05 F1 | 	add	fp, #12
1dab0     A7 12 02 FB | 	rdlong	arg01, fp
1dab4     0C 4E 85 F1 | 	sub	fp, #12
1dab8     48 F2 BE FD | 	call	#_convertstring
1dabc     FD 14 02 F6 | 	mov	arg02, result1
1dac0     14 13 02 F6 | 	mov	arg01, local02
1dac4     74 64 B0 FD | 	call	#__system___string_cmp
1dac8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dacc     00 26 26 56 |  if_ne	not	local01, #0
1dad0     A7 26 62 FC | 	wrlong	local01, fp
1dad4     64 00 90 FD | 	jmp	#LR__2403
1dad8                 | LR__2401
1dad8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1dad8     08 4E 05 F1 | 	add	fp, #8
1dadc     A7 26 02 FB | 	rdlong	local01, fp
1dae0     08 4E 85 F1 | 	sub	fp, #8
1dae4     2B 26 0E F2 | 	cmp	local01, #43 wz
1dae8     14 4E 05 A1 |  if_e	add	fp, #20
1daec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1daf0     14 4E 85 A1 |  if_e	sub	fp, #20
1daf4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1daf8     3C 00 90 5D |  if_ne	jmp	#LR__2402
1dafc     00 26 06 F6 | 	mov	local01, #0
1db00     A7 12 02 FB | 	rdlong	arg01, fp
1db04     FC F1 BE FD | 	call	#_convertstring
1db08     FD 28 02 F6 | 	mov	local02, result1
1db0c     0C 4E 05 F1 | 	add	fp, #12
1db10     A7 12 02 FB | 	rdlong	arg01, fp
1db14     0C 4E 85 F1 | 	sub	fp, #12
1db18     E8 F1 BE FD | 	call	#_convertstring
1db1c     FD 14 02 F6 | 	mov	arg02, result1
1db20     14 13 02 F6 | 	mov	arg01, local02
1db24     14 64 B0 FD | 	call	#__system___string_cmp
1db28     00 FA 0D F2 | 	cmp	result1, #0 wz
1db2c     00 26 26 56 |  if_ne	not	local01, #0
1db30     A7 26 62 FC | 	wrlong	local01, fp
1db34     04 00 90 FD | 	jmp	#LR__2403
1db38                 | LR__2402
1db38     A7 00 68 FC | 	wrlong	#0, fp
1db3c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1db3c                 | LR__2403
1db3c     08 4E 05 F1 | 	add	fp, #8
1db40     A7 38 68 FC | 	wrlong	#28, fp
1db44     08 4E 85 F1 | 	sub	fp, #8
1db48     A7 12 02 F6 | 	mov	arg01, fp
1db4c     D4 F0 BE FD | 	call	#_push
1db50     A7 F0 03 F6 | 	mov	ptra, fp
1db54     B2 00 A0 FD | 	call	#popregs_
1db58                 | _do_ne_ret
1db58     2D 00 64 FD | 	ret
1db5c                 | 
1db5c                 | ' 
1db5c                 | ' '--------------------------------- OR
1db5c                 | ' 
1db5c                 | ' sub do_or 
1db5c                 | _do_or
1db5c     03 4A 05 F6 | 	mov	COUNT_, #3
1db60     A8 00 A0 FD | 	call	#pushregs_
1db64     18 F0 07 F1 | 	add	ptra, #24
1db68     20 F0 BE FD | 	call	#_pop
1db6c     FD 12 02 F6 | 	mov	arg01, result1
1db70     FE 26 02 F6 | 	mov	local01, result2
1db74     FF 28 02 F6 | 	mov	local02, result3
1db78     0C 4E 05 F1 | 	add	fp, #12
1db7c     A7 12 62 FC | 	wrlong	arg01, fp
1db80     04 4E 05 F1 | 	add	fp, #4
1db84     A7 26 62 FC | 	wrlong	local01, fp
1db88     04 4E 05 F1 | 	add	fp, #4
1db8c     A7 28 62 FC | 	wrlong	local02, fp
1db90     14 4E 85 F1 | 	sub	fp, #20
1db94     F4 EF BE FD | 	call	#_pop
1db98     FF 2A 02 F6 | 	mov	local03, result3
1db9c     A7 FA 61 FC | 	wrlong	result1, fp
1dba0     04 4E 05 F1 | 	add	fp, #4
1dba4     A7 FC 61 FC | 	wrlong	result2, fp
1dba8     04 4E 05 F1 | 	add	fp, #4
1dbac     A7 2A 62 FC | 	wrlong	local03, fp
1dbb0                 | ' 
1dbb0                 | ' t2=pop()
1dbb0                 | ' t1=pop()
1dbb0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1dbb0     08 4E 85 F1 | 	sub	fp, #8
1dbb4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1dbb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbbc     A7 2A 62 AC |  if_e	wrlong	local03, fp
1dbc0     08 4E 05 A1 |  if_e	add	fp, #8
1dbc4     A7 3A 68 AC |  if_e	wrlong	#29, fp
1dbc8     08 4E 85 A1 |  if_e	sub	fp, #8
1dbcc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1dbcc     14 4E 05 F1 | 	add	fp, #20
1dbd0     A7 2A 02 FB | 	rdlong	local03, fp
1dbd4     14 4E 85 F1 | 	sub	fp, #20
1dbd8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1dbdc     18 00 90 5D |  if_ne	jmp	#LR__2410
1dbe0     0C 4E 05 F1 | 	add	fp, #12
1dbe4     A7 2A 02 FB | 	rdlong	local03, fp
1dbe8     A7 2A 62 FC | 	wrlong	local03, fp
1dbec     08 4E 05 F1 | 	add	fp, #8
1dbf0     A7 3A 68 FC | 	wrlong	#29, fp
1dbf4     14 4E 85 F1 | 	sub	fp, #20
1dbf8                 | LR__2410
1dbf8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1dbf8     08 4E 05 F1 | 	add	fp, #8
1dbfc     A7 2A 02 FB | 	rdlong	local03, fp
1dc00     08 4E 85 F1 | 	sub	fp, #8
1dc04     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dc08     14 4E 05 51 |  if_ne	add	fp, #20
1dc0c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1dc10     14 4E 85 51 |  if_ne	sub	fp, #20
1dc14     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1dc18     08 4E 05 51 |  if_ne	add	fp, #8
1dc1c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1dc20     08 4E 85 51 |  if_ne	sub	fp, #8
1dc24     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1dc28     14 4E 05 51 |  if_ne	add	fp, #20
1dc2c     14 4E 85 51 |  if_ne	sub	fp, #20
1dc30     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1dc34     A7 0C 68 AC |  if_e	wrlong	#6, fp
1dc38     08 4E 05 A1 |  if_e	add	fp, #8
1dc3c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1dc40     08 4E 85 A1 |  if_e	sub	fp, #8
1dc44     18 00 90 AD |  if_e	jmp	#LR__2411
1dc48     A7 2A 02 FB | 	rdlong	local03, fp
1dc4c     0C 4E 05 F1 | 	add	fp, #12
1dc50     A7 26 02 FB | 	rdlong	local01, fp
1dc54     0C 4E 85 F1 | 	sub	fp, #12
1dc58     13 2B 42 F5 | 	or	local03, local01
1dc5c     A7 2A 62 FC | 	wrlong	local03, fp
1dc60                 | LR__2411
1dc60     A7 12 02 F6 | 	mov	arg01, fp
1dc64     BC EF BE FD | 	call	#_push
1dc68     A7 F0 03 F6 | 	mov	ptra, fp
1dc6c     B2 00 A0 FD | 	call	#popregs_
1dc70                 | _do_or_ret
1dc70     2D 00 64 FD | 	ret
1dc74                 | 
1dc74                 | ' 
1dc74                 | ' '--------------------------------- plus (+)
1dc74                 | ' 
1dc74                 | ' sub do_plus 
1dc74                 | _do_plus
1dc74     05 4A 05 F6 | 	mov	COUNT_, #5
1dc78     A8 00 A0 FD | 	call	#pushregs_
1dc7c     18 F0 07 F1 | 	add	ptra, #24
1dc80     08 EF BE FD | 	call	#_pop
1dc84     FD 26 02 F6 | 	mov	local01, result1
1dc88     FE 28 02 F6 | 	mov	local02, result2
1dc8c     FF 2A 02 F6 | 	mov	local03, result3
1dc90     0C 4E 05 F1 | 	add	fp, #12
1dc94     A7 26 62 FC | 	wrlong	local01, fp
1dc98     04 4E 05 F1 | 	add	fp, #4
1dc9c     A7 28 62 FC | 	wrlong	local02, fp
1dca0     04 4E 05 F1 | 	add	fp, #4
1dca4     A7 2A 62 FC | 	wrlong	local03, fp
1dca8     14 4E 85 F1 | 	sub	fp, #20
1dcac     DC EE BE FD | 	call	#_pop
1dcb0     FF 2A 02 F6 | 	mov	local03, result3
1dcb4     A7 FA 61 FC | 	wrlong	result1, fp
1dcb8     04 4E 05 F1 | 	add	fp, #4
1dcbc     A7 FC 61 FC | 	wrlong	result2, fp
1dcc0     04 4E 05 F1 | 	add	fp, #4
1dcc4     A7 2A 62 FC | 	wrlong	local03, fp
1dcc8                 | ' 
1dcc8                 | ' t2=pop()
1dcc8                 | ' t1=pop()
1dcc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1dcc8     08 4E 85 F1 | 	sub	fp, #8
1dccc     1D 2A 0E F2 | 	cmp	local03, #29 wz
1dcd0     14 4E 05 A1 |  if_e	add	fp, #20
1dcd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcd8     14 4E 85 A1 |  if_e	sub	fp, #20
1dcdc     16 2B 02 A6 |  if_e	mov	local03, local04
1dce0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dce4     1C 00 90 5D |  if_ne	jmp	#LR__2420
1dce8     A7 26 02 FB | 	rdlong	local01, fp
1dcec     0C 4E 05 F1 | 	add	fp, #12
1dcf0     A7 28 02 FB | 	rdlong	local02, fp
1dcf4     0C 4E 85 F1 | 	sub	fp, #12
1dcf8     14 27 02 F1 | 	add	local01, local02
1dcfc     A7 26 62 FC | 	wrlong	local01, fp
1dd00     48 04 90 FD | 	jmp	#LR__2435
1dd04                 | LR__2420
1dd04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1dd04     08 4E 05 F1 | 	add	fp, #8
1dd08     A7 26 02 FB | 	rdlong	local01, fp
1dd0c     08 4E 85 F1 | 	sub	fp, #8
1dd10     1D 26 0E F2 | 	cmp	local01, #29 wz
1dd14     14 4E 05 A1 |  if_e	add	fp, #20
1dd18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd1c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd20     16 2B 02 A6 |  if_e	mov	local03, local04
1dd24     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd28     28 00 90 5D |  if_ne	jmp	#LR__2421
1dd2c     A7 26 02 FB | 	rdlong	local01, fp
1dd30     0C 4E 05 F1 | 	add	fp, #12
1dd34     A7 28 02 FB | 	rdlong	local02, fp
1dd38     0C 4E 85 F1 | 	sub	fp, #12
1dd3c     14 27 02 F1 | 	add	local01, local02
1dd40     A7 26 62 FC | 	wrlong	local01, fp
1dd44     08 4E 05 F1 | 	add	fp, #8
1dd48     A7 38 68 FC | 	wrlong	#28, fp
1dd4c     08 4E 85 F1 | 	sub	fp, #8
1dd50     F8 03 90 FD | 	jmp	#LR__2435
1dd54                 | LR__2421
1dd54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1dd54     08 4E 05 F1 | 	add	fp, #8
1dd58     A7 26 02 FB | 	rdlong	local01, fp
1dd5c     08 4E 85 F1 | 	sub	fp, #8
1dd60     1D 26 0E F2 | 	cmp	local01, #29 wz
1dd64     14 4E 05 A1 |  if_e	add	fp, #20
1dd68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd6c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd70     16 2B 02 A6 |  if_e	mov	local03, local04
1dd74     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dd78     30 00 90 5D |  if_ne	jmp	#LR__2422
1dd7c     A7 12 02 FB | 	rdlong	arg01, fp
1dd80     04 8C B0 FD | 	call	#__system___float_fromuns
1dd84     FD 12 02 F6 | 	mov	arg01, result1
1dd88     0C 4E 05 F1 | 	add	fp, #12
1dd8c     A7 14 02 FB | 	rdlong	arg02, fp
1dd90     0C 4E 85 F1 | 	sub	fp, #12
1dd94     24 8C B0 FD | 	call	#__system___float_add
1dd98     A7 FA 61 FC | 	wrlong	result1, fp
1dd9c     08 4E 05 F1 | 	add	fp, #8
1dda0     A7 3C 68 FC | 	wrlong	#30, fp
1dda4     08 4E 85 F1 | 	sub	fp, #8
1dda8     A0 03 90 FD | 	jmp	#LR__2435
1ddac                 | LR__2422
1ddac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ddac     08 4E 05 F1 | 	add	fp, #8
1ddb0     A7 26 02 FB | 	rdlong	local01, fp
1ddb4     08 4E 85 F1 | 	sub	fp, #8
1ddb8     1C 26 0E F2 | 	cmp	local01, #28 wz
1ddbc     14 4E 05 A1 |  if_e	add	fp, #20
1ddc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddc4     14 4E 85 A1 |  if_e	sub	fp, #20
1ddc8     16 2B 02 A6 |  if_e	mov	local03, local04
1ddcc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ddd0     1C 00 90 5D |  if_ne	jmp	#LR__2423
1ddd4     A7 26 02 FB | 	rdlong	local01, fp
1ddd8     0C 4E 05 F1 | 	add	fp, #12
1dddc     A7 28 02 FB | 	rdlong	local02, fp
1dde0     0C 4E 85 F1 | 	sub	fp, #12
1dde4     14 27 02 F1 | 	add	local01, local02
1dde8     A7 26 62 FC | 	wrlong	local01, fp
1ddec     5C 03 90 FD | 	jmp	#LR__2435
1ddf0                 | LR__2423
1ddf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1ddf0     08 4E 05 F1 | 	add	fp, #8
1ddf4     A7 26 02 FB | 	rdlong	local01, fp
1ddf8     08 4E 85 F1 | 	sub	fp, #8
1ddfc     1C 26 0E F2 | 	cmp	local01, #28 wz
1de00     14 4E 05 A1 |  if_e	add	fp, #20
1de04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de08     14 4E 85 A1 |  if_e	sub	fp, #20
1de0c     16 2B 02 A6 |  if_e	mov	local03, local04
1de10     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1de14     1C 00 90 5D |  if_ne	jmp	#LR__2424
1de18     A7 26 02 FB | 	rdlong	local01, fp
1de1c     0C 4E 05 F1 | 	add	fp, #12
1de20     A7 28 02 FB | 	rdlong	local02, fp
1de24     0C 4E 85 F1 | 	sub	fp, #12
1de28     14 27 02 F1 | 	add	local01, local02
1de2c     A7 26 62 FC | 	wrlong	local01, fp
1de30     18 03 90 FD | 	jmp	#LR__2435
1de34                 | LR__2424
1de34                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1de34     08 4E 05 F1 | 	add	fp, #8
1de38     A7 26 02 FB | 	rdlong	local01, fp
1de3c     08 4E 85 F1 | 	sub	fp, #8
1de40     1C 26 0E F2 | 	cmp	local01, #28 wz
1de44     14 4E 05 A1 |  if_e	add	fp, #20
1de48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de4c     14 4E 85 A1 |  if_e	sub	fp, #20
1de50     16 2B 02 A6 |  if_e	mov	local03, local04
1de54     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1de58     40 00 90 5D |  if_ne	jmp	#LR__2425
1de5c     A7 12 02 FB | 	rdlong	arg01, fp
1de60     09 13 52 F6 | 	abs	arg01, arg01 wc
1de64     1F 2E C6 C9 |  if_b	decod	local05, #31
1de68     00 2E 06 36 |  if_ae	mov	local05, #0
1de6c     18 8B B0 FD | 	call	#__system___float_fromuns
1de70     17 FB 61 F5 | 	xor	result1, local05
1de74     FD 12 02 F6 | 	mov	arg01, result1
1de78     0C 4E 05 F1 | 	add	fp, #12
1de7c     A7 14 02 FB | 	rdlong	arg02, fp
1de80     0C 4E 85 F1 | 	sub	fp, #12
1de84     34 8B B0 FD | 	call	#__system___float_add
1de88     A7 FA 61 FC | 	wrlong	result1, fp
1de8c     08 4E 05 F1 | 	add	fp, #8
1de90     A7 3C 68 FC | 	wrlong	#30, fp
1de94     08 4E 85 F1 | 	sub	fp, #8
1de98     B0 02 90 FD | 	jmp	#LR__2435
1de9c                 | LR__2425
1de9c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1de9c     08 4E 05 F1 | 	add	fp, #8
1dea0     A7 26 02 FB | 	rdlong	local01, fp
1dea4     08 4E 85 F1 | 	sub	fp, #8
1dea8     1E 26 0E F2 | 	cmp	local01, #30 wz
1deac     14 4E 05 A1 |  if_e	add	fp, #20
1deb0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1deb4     14 4E 85 A1 |  if_e	sub	fp, #20
1deb8     16 2B 02 A6 |  if_e	mov	local03, local04
1debc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dec0     28 00 90 5D |  if_ne	jmp	#LR__2426
1dec4     A7 26 02 FB | 	rdlong	local01, fp
1dec8     0C 4E 05 F1 | 	add	fp, #12
1decc     A7 12 02 FB | 	rdlong	arg01, fp
1ded0     0C 4E 85 F1 | 	sub	fp, #12
1ded4     B0 8A B0 FD | 	call	#__system___float_fromuns
1ded8     FD 14 02 F6 | 	mov	arg02, result1
1dedc     13 13 02 F6 | 	mov	arg01, local01
1dee0     D8 8A B0 FD | 	call	#__system___float_add
1dee4     A7 FA 61 FC | 	wrlong	result1, fp
1dee8     60 02 90 FD | 	jmp	#LR__2435
1deec                 | LR__2426
1deec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1deec     08 4E 05 F1 | 	add	fp, #8
1def0     A7 26 02 FB | 	rdlong	local01, fp
1def4     08 4E 85 F1 | 	sub	fp, #8
1def8     1E 26 0E F2 | 	cmp	local01, #30 wz
1defc     14 4E 05 A1 |  if_e	add	fp, #20
1df00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df04     14 4E 85 A1 |  if_e	sub	fp, #20
1df08     16 2B 02 A6 |  if_e	mov	local03, local04
1df0c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1df10     38 00 90 5D |  if_ne	jmp	#LR__2427
1df14     A7 26 02 FB | 	rdlong	local01, fp
1df18     0C 4E 05 F1 | 	add	fp, #12
1df1c     A7 12 02 FB | 	rdlong	arg01, fp
1df20     0C 4E 85 F1 | 	sub	fp, #12
1df24     09 13 52 F6 | 	abs	arg01, arg01 wc
1df28     1F 2E C6 C9 |  if_b	decod	local05, #31
1df2c     00 2E 06 36 |  if_ae	mov	local05, #0
1df30     54 8A B0 FD | 	call	#__system___float_fromuns
1df34     17 FB 61 F5 | 	xor	result1, local05
1df38     FD 14 02 F6 | 	mov	arg02, result1
1df3c     13 13 02 F6 | 	mov	arg01, local01
1df40     78 8A B0 FD | 	call	#__system___float_add
1df44     A7 FA 61 FC | 	wrlong	result1, fp
1df48     00 02 90 FD | 	jmp	#LR__2435
1df4c                 | LR__2427
1df4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1df4c     08 4E 05 F1 | 	add	fp, #8
1df50     A7 26 02 FB | 	rdlong	local01, fp
1df54     08 4E 85 F1 | 	sub	fp, #8
1df58     1E 26 0E F2 | 	cmp	local01, #30 wz
1df5c     14 4E 05 A1 |  if_e	add	fp, #20
1df60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df64     14 4E 85 A1 |  if_e	sub	fp, #20
1df68     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1df6c     1C 00 90 5D |  if_ne	jmp	#LR__2428
1df70     A7 12 02 FB | 	rdlong	arg01, fp
1df74     0C 4E 05 F1 | 	add	fp, #12
1df78     A7 14 02 FB | 	rdlong	arg02, fp
1df7c     0C 4E 85 F1 | 	sub	fp, #12
1df80     38 8A B0 FD | 	call	#__system___float_add
1df84     A7 FA 61 FC | 	wrlong	result1, fp
1df88     C0 01 90 FD | 	jmp	#LR__2435
1df8c                 | LR__2428
1df8c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1df8c     08 4E 05 F1 | 	add	fp, #8
1df90     A7 26 02 FB | 	rdlong	local01, fp
1df94     08 4E 85 F1 | 	sub	fp, #8
1df98     1F 26 0E F2 | 	cmp	local01, #31 wz
1df9c     24 00 90 5D |  if_ne	jmp	#LR__2429
1dfa0     14 4E 05 F1 | 	add	fp, #20
1dfa4     A7 2A 02 FB | 	rdlong	local03, fp
1dfa8     14 4E 85 F1 | 	sub	fp, #20
1dfac     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dfb0     A7 04 68 5C |  if_ne	wrlong	#2, fp
1dfb4     08 4E 05 51 |  if_ne	add	fp, #8
1dfb8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1dfbc     08 4E 85 51 |  if_ne	sub	fp, #8
1dfc0     88 01 90 5D |  if_ne	jmp	#LR__2435
1dfc4                 | LR__2429
1dfc4                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1dfc4     14 4E 05 F1 | 	add	fp, #20
1dfc8     A7 26 02 FB | 	rdlong	local01, fp
1dfcc     14 4E 85 F1 | 	sub	fp, #20
1dfd0     1F 26 0E F2 | 	cmp	local01, #31 wz
1dfd4     24 00 90 5D |  if_ne	jmp	#LR__2430
1dfd8     08 4E 05 F1 | 	add	fp, #8
1dfdc     A7 2A 02 FB | 	rdlong	local03, fp
1dfe0     08 4E 85 F1 | 	sub	fp, #8
1dfe4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dfe8     A7 04 68 5C |  if_ne	wrlong	#2, fp
1dfec     08 4E 05 51 |  if_ne	add	fp, #8
1dff0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1dff4     08 4E 85 51 |  if_ne	sub	fp, #8
1dff8     50 01 90 5D |  if_ne	jmp	#LR__2435
1dffc                 | LR__2430
1dffc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1dffc     08 4E 05 F1 | 	add	fp, #8
1e000     A7 26 02 FB | 	rdlong	local01, fp
1e004     08 4E 85 F1 | 	sub	fp, #8
1e008     1F 26 0E F2 | 	cmp	local01, #31 wz
1e00c     14 4E 05 A1 |  if_e	add	fp, #20
1e010     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e014     14 4E 85 A1 |  if_e	sub	fp, #20
1e018     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e01c     1C 00 90 5D |  if_ne	jmp	#LR__2431
1e020     A7 12 02 FB | 	rdlong	arg01, fp
1e024     0C 4E 05 F1 | 	add	fp, #12
1e028     A7 14 02 FB | 	rdlong	arg02, fp
1e02c     0C 4E 85 F1 | 	sub	fp, #12
1e030     3C 5F B0 FD | 	call	#__system___string_concat
1e034     A7 FA 61 FC | 	wrlong	result1, fp
1e038     10 01 90 FD | 	jmp	#LR__2435
1e03c                 | LR__2431
1e03c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1e03c     08 4E 05 F1 | 	add	fp, #8
1e040     A7 26 02 FB | 	rdlong	local01, fp
1e044     08 4E 85 F1 | 	sub	fp, #8
1e048     2B 26 0E F2 | 	cmp	local01, #43 wz
1e04c     14 4E 05 A1 |  if_e	add	fp, #20
1e050     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e054     14 4E 85 A1 |  if_e	sub	fp, #20
1e058     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e05c     30 00 90 5D |  if_ne	jmp	#LR__2432
1e060     A7 12 02 FB | 	rdlong	arg01, fp
1e064     9C EC BE FD | 	call	#_convertstring
1e068     FD 12 02 F6 | 	mov	arg01, result1
1e06c     0C 4E 05 F1 | 	add	fp, #12
1e070     A7 14 02 FB | 	rdlong	arg02, fp
1e074     0C 4E 85 F1 | 	sub	fp, #12
1e078     F4 5E B0 FD | 	call	#__system___string_concat
1e07c     A7 FA 61 FC | 	wrlong	result1, fp
1e080     08 4E 05 F1 | 	add	fp, #8
1e084     A7 3E 68 FC | 	wrlong	#31, fp
1e088     08 4E 85 F1 | 	sub	fp, #8
1e08c     BC 00 90 FD | 	jmp	#LR__2435
1e090                 | LR__2432
1e090                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1e090     08 4E 05 F1 | 	add	fp, #8
1e094     A7 26 02 FB | 	rdlong	local01, fp
1e098     08 4E 85 F1 | 	sub	fp, #8
1e09c     1F 26 0E F2 | 	cmp	local01, #31 wz
1e0a0     14 4E 05 A1 |  if_e	add	fp, #20
1e0a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0a8     14 4E 85 A1 |  if_e	sub	fp, #20
1e0ac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e0b0     28 00 90 5D |  if_ne	jmp	#LR__2433
1e0b4     A7 26 02 FB | 	rdlong	local01, fp
1e0b8     0C 4E 05 F1 | 	add	fp, #12
1e0bc     A7 12 02 FB | 	rdlong	arg01, fp
1e0c0     0C 4E 85 F1 | 	sub	fp, #12
1e0c4     3C EC BE FD | 	call	#_convertstring
1e0c8     FD 14 02 F6 | 	mov	arg02, result1
1e0cc     13 13 02 F6 | 	mov	arg01, local01
1e0d0     9C 5E B0 FD | 	call	#__system___string_concat
1e0d4     A7 FA 61 FC | 	wrlong	result1, fp
1e0d8     70 00 90 FD | 	jmp	#LR__2435
1e0dc                 | LR__2433
1e0dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1e0dc     08 4E 05 F1 | 	add	fp, #8
1e0e0     A7 26 02 FB | 	rdlong	local01, fp
1e0e4     08 4E 85 F1 | 	sub	fp, #8
1e0e8     2B 26 0E F2 | 	cmp	local01, #43 wz
1e0ec     14 4E 05 A1 |  if_e	add	fp, #20
1e0f0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0f4     14 4E 85 A1 |  if_e	sub	fp, #20
1e0f8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e0fc     3C 00 90 5D |  if_ne	jmp	#LR__2434
1e100     A7 12 02 FB | 	rdlong	arg01, fp
1e104     FC EB BE FD | 	call	#_convertstring
1e108     FD 26 02 F6 | 	mov	local01, result1
1e10c     0C 4E 05 F1 | 	add	fp, #12
1e110     A7 12 02 FB | 	rdlong	arg01, fp
1e114     0C 4E 85 F1 | 	sub	fp, #12
1e118     E8 EB BE FD | 	call	#_convertstring
1e11c     FD 14 02 F6 | 	mov	arg02, result1
1e120     13 13 02 F6 | 	mov	arg01, local01
1e124     48 5E B0 FD | 	call	#__system___string_concat
1e128     A7 FA 61 FC | 	wrlong	result1, fp
1e12c     08 4E 05 F1 | 	add	fp, #8
1e130     A7 3E 68 FC | 	wrlong	#31, fp
1e134     08 4E 85 F1 | 	sub	fp, #8
1e138     10 00 90 FD | 	jmp	#LR__2435
1e13c                 | LR__2434
1e13c     A7 08 68 FC | 	wrlong	#4, fp
1e140     08 4E 05 F1 | 	add	fp, #8
1e144     A7 FE 69 FC | 	wrlong	#255, fp
1e148     08 4E 85 F1 | 	sub	fp, #8
1e14c                 | LR__2435
1e14c     A7 12 02 F6 | 	mov	arg01, fp
1e150     D0 EA BE FD | 	call	#_push
1e154     A7 F0 03 F6 | 	mov	ptra, fp
1e158     B2 00 A0 FD | 	call	#popregs_
1e15c                 | _do_plus_ret
1e15c     2D 00 64 FD | 	ret
1e160                 | 
1e160                 | ' 
1e160                 | ' '--------------------------------- power (^)
1e160                 | ' 
1e160                 | ' sub do_power 
1e160                 | _do_power
1e160     02 4A 05 F6 | 	mov	COUNT_, #2
1e164     A8 00 A0 FD | 	call	#pushregs_
1e168     18 F0 07 F1 | 	add	ptra, #24
1e16c     1C EA BE FD | 	call	#_pop
1e170     FD 14 02 F6 | 	mov	arg02, result1
1e174     FE 12 02 F6 | 	mov	arg01, result2
1e178     FF 26 02 F6 | 	mov	local01, result3
1e17c     0C 4E 05 F1 | 	add	fp, #12
1e180     A7 14 62 FC | 	wrlong	arg02, fp
1e184     04 4E 05 F1 | 	add	fp, #4
1e188     A7 12 62 FC | 	wrlong	arg01, fp
1e18c     04 4E 05 F1 | 	add	fp, #4
1e190     A7 26 62 FC | 	wrlong	local01, fp
1e194     14 4E 85 F1 | 	sub	fp, #20
1e198     F0 E9 BE FD | 	call	#_pop
1e19c     A7 FA 61 FC | 	wrlong	result1, fp
1e1a0     04 4E 05 F1 | 	add	fp, #4
1e1a4     A7 FC 61 FC | 	wrlong	result2, fp
1e1a8     04 4E 05 F1 | 	add	fp, #4
1e1ac     A7 FE 61 FC | 	wrlong	result3, fp
1e1b0                 | ' 
1e1b0                 | ' t2=pop()
1e1b0                 | ' t1=pop()
1e1b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1e1b0     08 4E 85 F1 | 	sub	fp, #8
1e1b4     1F FE 0D F2 | 	cmp	result3, #31 wz
1e1b8     14 4E 05 51 |  if_ne	add	fp, #20
1e1bc     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e1c0     14 4E 85 51 |  if_ne	sub	fp, #20
1e1c4     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e1c8     A7 18 68 AC |  if_e	wrlong	#12, fp
1e1cc     08 4E 05 A1 |  if_e	add	fp, #8
1e1d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e1d4     08 4E 85 A1 |  if_e	sub	fp, #8
1e1d8     38 01 90 AD |  if_e	jmp	#LR__2445
1e1dc                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e1dc     08 4E 05 F1 | 	add	fp, #8
1e1e0     A7 14 02 FB | 	rdlong	arg02, fp
1e1e4     08 4E 85 F1 | 	sub	fp, #8
1e1e8     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e1ec     28 00 90 5D |  if_ne	jmp	#LR__2440
1e1f0     08 4E 05 F1 | 	add	fp, #8
1e1f4     A7 3C 68 FC | 	wrlong	#30, fp
1e1f8     08 4E 85 F1 | 	sub	fp, #8
1e1fc     A7 12 02 FB | 	rdlong	arg01, fp
1e200     09 13 52 F6 | 	abs	arg01, arg01 wc
1e204     1F 28 C6 C9 |  if_b	decod	local02, #31
1e208     00 28 06 36 |  if_ae	mov	local02, #0
1e20c     78 87 B0 FD | 	call	#__system___float_fromuns
1e210     14 FB 61 F5 | 	xor	result1, local02
1e214     A7 FA 61 FC | 	wrlong	result1, fp
1e218                 | LR__2440
1e218                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1e218     08 4E 05 F1 | 	add	fp, #8
1e21c     A7 14 02 FB | 	rdlong	arg02, fp
1e220     08 4E 85 F1 | 	sub	fp, #8
1e224     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e228     18 00 90 5D |  if_ne	jmp	#LR__2441
1e22c     08 4E 05 F1 | 	add	fp, #8
1e230     A7 3C 68 FC | 	wrlong	#30, fp
1e234     08 4E 85 F1 | 	sub	fp, #8
1e238     A7 12 02 FB | 	rdlong	arg01, fp
1e23c     48 87 B0 FD | 	call	#__system___float_fromuns
1e240     A7 FA 61 FC | 	wrlong	result1, fp
1e244                 | LR__2441
1e244                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e244     14 4E 05 F1 | 	add	fp, #20
1e248     A7 14 02 FB | 	rdlong	arg02, fp
1e24c     14 4E 85 F1 | 	sub	fp, #20
1e250     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e254     34 00 90 5D |  if_ne	jmp	#LR__2442
1e258     14 4E 05 F1 | 	add	fp, #20
1e25c     A7 3C 68 FC | 	wrlong	#30, fp
1e260     08 4E 85 F1 | 	sub	fp, #8
1e264     A7 12 02 FB | 	rdlong	arg01, fp
1e268     0C 4E 85 F1 | 	sub	fp, #12
1e26c     09 13 52 F6 | 	abs	arg01, arg01 wc
1e270     1F 28 C6 C9 |  if_b	decod	local02, #31
1e274     00 28 06 36 |  if_ae	mov	local02, #0
1e278     0C 87 B0 FD | 	call	#__system___float_fromuns
1e27c     14 FB 61 F5 | 	xor	result1, local02
1e280     0C 4E 05 F1 | 	add	fp, #12
1e284     A7 FA 61 FC | 	wrlong	result1, fp
1e288     0C 4E 85 F1 | 	sub	fp, #12
1e28c                 | LR__2442
1e28c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e28c     14 4E 05 F1 | 	add	fp, #20
1e290     A7 14 02 FB | 	rdlong	arg02, fp
1e294     14 4E 85 F1 | 	sub	fp, #20
1e298     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e29c     24 00 90 5D |  if_ne	jmp	#LR__2443
1e2a0     14 4E 05 F1 | 	add	fp, #20
1e2a4     A7 3C 68 FC | 	wrlong	#30, fp
1e2a8     08 4E 85 F1 | 	sub	fp, #8
1e2ac     A7 12 02 FB | 	rdlong	arg01, fp
1e2b0     0C 4E 85 F1 | 	sub	fp, #12
1e2b4     D0 86 B0 FD | 	call	#__system___float_fromuns
1e2b8     0C 4E 05 F1 | 	add	fp, #12
1e2bc     A7 FA 61 FC | 	wrlong	result1, fp
1e2c0     0C 4E 85 F1 | 	sub	fp, #12
1e2c4                 | LR__2443
1e2c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1e2c4     08 4E 05 F1 | 	add	fp, #8
1e2c8     A7 14 02 FB | 	rdlong	arg02, fp
1e2cc     08 4E 85 F1 | 	sub	fp, #8
1e2d0     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e2d4     14 4E 05 A1 |  if_e	add	fp, #20
1e2d8     A7 26 02 AB |  if_e	rdlong	local01, fp
1e2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1e2e0     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e2e4     1C 00 90 5D |  if_ne	jmp	#LR__2444
1e2e8     A7 12 02 FB | 	rdlong	arg01, fp
1e2ec     0C 4E 05 F1 | 	add	fp, #12
1e2f0     A7 14 02 FB | 	rdlong	arg02, fp
1e2f4     0C 4E 85 F1 | 	sub	fp, #12
1e2f8     98 99 B0 FD | 	call	#__system____builtin_powf
1e2fc     A7 FA 61 FC | 	wrlong	result1, fp
1e300     10 00 90 FD | 	jmp	#LR__2445
1e304                 | LR__2444
1e304     A7 1A 68 FC | 	wrlong	#13, fp
1e308     08 4E 05 F1 | 	add	fp, #8
1e30c     A7 FE 69 FC | 	wrlong	#255, fp
1e310     08 4E 85 F1 | 	sub	fp, #8
1e314                 | LR__2445
1e314     A7 12 02 F6 | 	mov	arg01, fp
1e318     08 E9 BE FD | 	call	#_push
1e31c     A7 F0 03 F6 | 	mov	ptra, fp
1e320     B2 00 A0 FD | 	call	#popregs_
1e324                 | _do_power_ret
1e324     2D 00 64 FD | 	ret
1e328                 | 
1e328                 | ' 
1e328                 | ' '--------------------------------- SHL
1e328                 | ' 
1e328                 | ' sub do_shl 
1e328                 | _do_shl
1e328     03 4A 05 F6 | 	mov	COUNT_, #3
1e32c     A8 00 A0 FD | 	call	#pushregs_
1e330     18 F0 07 F1 | 	add	ptra, #24
1e334     54 E8 BE FD | 	call	#_pop
1e338     FD 12 02 F6 | 	mov	arg01, result1
1e33c     FE 26 02 F6 | 	mov	local01, result2
1e340     FF 28 02 F6 | 	mov	local02, result3
1e344     0C 4E 05 F1 | 	add	fp, #12
1e348     A7 12 62 FC | 	wrlong	arg01, fp
1e34c     04 4E 05 F1 | 	add	fp, #4
1e350     A7 26 62 FC | 	wrlong	local01, fp
1e354     04 4E 05 F1 | 	add	fp, #4
1e358     A7 28 62 FC | 	wrlong	local02, fp
1e35c     14 4E 85 F1 | 	sub	fp, #20
1e360     28 E8 BE FD | 	call	#_pop
1e364     FF 2A 02 F6 | 	mov	local03, result3
1e368     A7 FA 61 FC | 	wrlong	result1, fp
1e36c     04 4E 05 F1 | 	add	fp, #4
1e370     A7 FC 61 FC | 	wrlong	result2, fp
1e374     04 4E 05 F1 | 	add	fp, #4
1e378     A7 2A 62 FC | 	wrlong	local03, fp
1e37c                 | ' 
1e37c                 | ' t2=pop()
1e37c                 | ' t1=pop()
1e37c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e37c     08 4E 85 F1 | 	sub	fp, #8
1e380     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e384     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e388     A7 2A 62 AC |  if_e	wrlong	local03, fp
1e38c     08 4E 05 A1 |  if_e	add	fp, #8
1e390     A7 3A 68 AC |  if_e	wrlong	#29, fp
1e394     08 4E 85 A1 |  if_e	sub	fp, #8
1e398                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e398     14 4E 05 F1 | 	add	fp, #20
1e39c     A7 2A 02 FB | 	rdlong	local03, fp
1e3a0     14 4E 85 F1 | 	sub	fp, #20
1e3a4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e3a8     18 00 90 5D |  if_ne	jmp	#LR__2450
1e3ac     0C 4E 05 F1 | 	add	fp, #12
1e3b0     A7 2A 02 FB | 	rdlong	local03, fp
1e3b4     A7 2A 62 FC | 	wrlong	local03, fp
1e3b8     08 4E 05 F1 | 	add	fp, #8
1e3bc     A7 3A 68 FC | 	wrlong	#29, fp
1e3c0     14 4E 85 F1 | 	sub	fp, #20
1e3c4                 | LR__2450
1e3c4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1e3c4     08 4E 05 F1 | 	add	fp, #8
1e3c8     A7 2A 02 FB | 	rdlong	local03, fp
1e3cc     08 4E 85 F1 | 	sub	fp, #8
1e3d0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e3d4     14 4E 05 51 |  if_ne	add	fp, #20
1e3d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
1e3dc     14 4E 85 51 |  if_ne	sub	fp, #20
1e3e0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1e3e4     08 4E 05 51 |  if_ne	add	fp, #8
1e3e8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e3ec     08 4E 85 51 |  if_ne	sub	fp, #8
1e3f0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1e3f4     14 4E 05 51 |  if_ne	add	fp, #20
1e3f8     14 4E 85 51 |  if_ne	sub	fp, #20
1e3fc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1e400     A7 0C 68 AC |  if_e	wrlong	#6, fp
1e404     08 4E 05 A1 |  if_e	add	fp, #8
1e408     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e40c     08 4E 85 A1 |  if_e	sub	fp, #8
1e410     18 00 90 AD |  if_e	jmp	#LR__2451
1e414     A7 2A 02 FB | 	rdlong	local03, fp
1e418     0C 4E 05 F1 | 	add	fp, #12
1e41c     A7 26 02 FB | 	rdlong	local01, fp
1e420     0C 4E 85 F1 | 	sub	fp, #12
1e424     13 2B 62 F0 | 	shl	local03, local01
1e428     A7 2A 62 FC | 	wrlong	local03, fp
1e42c                 | LR__2451
1e42c     A7 12 02 F6 | 	mov	arg01, fp
1e430     F0 E7 BE FD | 	call	#_push
1e434     A7 F0 03 F6 | 	mov	ptra, fp
1e438     B2 00 A0 FD | 	call	#popregs_
1e43c                 | _do_shl_ret
1e43c     2D 00 64 FD | 	ret
1e440                 | 
1e440                 | ' 
1e440                 | ' '--------------------------------- SHR
1e440                 | ' 
1e440                 | ' sub do_shr 
1e440                 | _do_shr
1e440     03 4A 05 F6 | 	mov	COUNT_, #3
1e444     A8 00 A0 FD | 	call	#pushregs_
1e448     18 F0 07 F1 | 	add	ptra, #24
1e44c     3C E7 BE FD | 	call	#_pop
1e450     FD 12 02 F6 | 	mov	arg01, result1
1e454     FE 26 02 F6 | 	mov	local01, result2
1e458     FF 28 02 F6 | 	mov	local02, result3
1e45c     0C 4E 05 F1 | 	add	fp, #12
1e460     A7 12 62 FC | 	wrlong	arg01, fp
1e464     04 4E 05 F1 | 	add	fp, #4
1e468     A7 26 62 FC | 	wrlong	local01, fp
1e46c     04 4E 05 F1 | 	add	fp, #4
1e470     A7 28 62 FC | 	wrlong	local02, fp
1e474     14 4E 85 F1 | 	sub	fp, #20
1e478     10 E7 BE FD | 	call	#_pop
1e47c     FF 2A 02 F6 | 	mov	local03, result3
1e480     A7 FA 61 FC | 	wrlong	result1, fp
1e484     04 4E 05 F1 | 	add	fp, #4
1e488     A7 FC 61 FC | 	wrlong	result2, fp
1e48c     04 4E 05 F1 | 	add	fp, #4
1e490     A7 2A 62 FC | 	wrlong	local03, fp
1e494                 | ' 
1e494                 | ' t2=pop()
1e494                 | ' t1=pop()
1e494                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e494     08 4E 85 F1 | 	sub	fp, #8
1e498     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e49c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4a0     A7 2A 62 AC |  if_e	wrlong	local03, fp
1e4a4     08 4E 05 A1 |  if_e	add	fp, #8
1e4a8     A7 3A 68 AC |  if_e	wrlong	#29, fp
1e4ac     08 4E 85 A1 |  if_e	sub	fp, #8
1e4b0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e4b0     14 4E 05 F1 | 	add	fp, #20
1e4b4     A7 2A 02 FB | 	rdlong	local03, fp
1e4b8     14 4E 85 F1 | 	sub	fp, #20
1e4bc     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e4c0     18 00 90 5D |  if_ne	jmp	#LR__2460
1e4c4     0C 4E 05 F1 | 	add	fp, #12
1e4c8     A7 2A 02 FB | 	rdlong	local03, fp
1e4cc     A7 2A 62 FC | 	wrlong	local03, fp
1e4d0     08 4E 05 F1 | 	add	fp, #8
1e4d4     A7 3A 68 FC | 	wrlong	#29, fp
1e4d8     14 4E 85 F1 | 	sub	fp, #20
1e4dc                 | LR__2460
1e4dc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1e4dc     08 4E 05 F1 | 	add	fp, #8
1e4e0     A7 2A 02 FB | 	rdlong	local03, fp
1e4e4     08 4E 85 F1 | 	sub	fp, #8
1e4e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e4ec     14 4E 05 51 |  if_ne	add	fp, #20
1e4f0     A7 28 02 5B |  if_ne	rdlong	local02, fp
1e4f4     14 4E 85 51 |  if_ne	sub	fp, #20
1e4f8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1e4fc     08 4E 05 51 |  if_ne	add	fp, #8
1e500     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e504     08 4E 85 51 |  if_ne	sub	fp, #8
1e508     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1e50c     14 4E 05 51 |  if_ne	add	fp, #20
1e510     14 4E 85 51 |  if_ne	sub	fp, #20
1e514     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1e518     A7 0C 68 AC |  if_e	wrlong	#6, fp
1e51c     08 4E 05 A1 |  if_e	add	fp, #8
1e520     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e524     08 4E 85 A1 |  if_e	sub	fp, #8
1e528     18 00 90 AD |  if_e	jmp	#LR__2461
1e52c     A7 2A 02 FB | 	rdlong	local03, fp
1e530     0C 4E 05 F1 | 	add	fp, #12
1e534     A7 26 02 FB | 	rdlong	local01, fp
1e538     0C 4E 85 F1 | 	sub	fp, #12
1e53c     13 2B 42 F0 | 	shr	local03, local01
1e540     A7 2A 62 FC | 	wrlong	local03, fp
1e544                 | LR__2461
1e544     A7 12 02 F6 | 	mov	arg01, fp
1e548     D8 E6 BE FD | 	call	#_push
1e54c     A7 F0 03 F6 | 	mov	ptra, fp
1e550     B2 00 A0 FD | 	call	#popregs_
1e554                 | _do_shr_ret
1e554     2D 00 64 FD | 	ret
1e558                 | 
1e558                 | ' 
1e558                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1e558                 | ' 
1e558                 | ' ''----------------------------------------------------------------------------------------------------
1e558                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1e558                 | ' ''----------------------------------------------------------------------------------------------------
1e558                 | ' 
1e558                 | ' ''--------------------------- Command function pointers
1e558                 | ' 
1e558                 | ' sub init_commands
1e558                 | _init_commands
1e558                 | ' 
1e558                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1e558     00 00 06 F6 | 	mov	_var01, #0
1e55c     97 16 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1e560                 | LR__2470
1e560     00 FB 01 F6 | 	mov	result1, _var01
1e564     02 FA 65 F0 | 	shl	result1, #2
1e568     43 00 00 FF 
1e56c     60 E4 05 F1 | 	add	objptr, ##34400
1e570     F2 FA 01 F1 | 	add	result1, objptr
1e574     43 00 00 FF 
1e578     60 E4 85 F1 | 	sub	objptr, ##34400
1e57c     FD E4 61 FC | 	wrlong	objptr, result1
1e580     01 00 06 F1 | 	add	_var01, #1
1e584     00 01 56 F2 | 	cmps	_var01, #256 wc
1e588     D4 FF 9F CD |  if_b	jmp	#LR__2470
1e58c                 | LR__2471
1e58c     F2 FA 01 F6 | 	mov	result1, objptr
1e590     14 FA 25 F4 | 	bith	result1, #20
1e594     43 00 00 FF 
1e598     64 E4 05 F1 | 	add	objptr, ##34404
1e59c     F2 FA 61 FC | 	wrlong	result1, objptr
1e5a0     43 00 00 FF 
1e5a4     64 E4 85 F1 | 	sub	objptr, ##34404
1e5a8     F2 FA 01 F6 | 	mov	result1, objptr
1e5ac     15 FA 25 F4 | 	bith	result1, #21
1e5b0     43 00 00 FF 
1e5b4     68 E4 05 F1 | 	add	objptr, ##34408
1e5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1e5bc     43 00 00 FF 
1e5c0     68 E4 85 F1 | 	sub	objptr, ##34408
1e5c4     F2 FA 01 F6 | 	mov	result1, objptr
1e5c8     34 FA 25 F4 | 	bith	result1, #52
1e5cc     43 00 00 FF 
1e5d0     6C E4 05 F1 | 	add	objptr, ##34412
1e5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e5d8     43 00 00 FF 
1e5dc     6C E4 85 F1 | 	sub	objptr, ##34412
1e5e0     F2 FA 01 F6 | 	mov	result1, objptr
1e5e4     16 FA 25 F4 | 	bith	result1, #22
1e5e8     43 00 00 FF 
1e5ec     74 E4 05 F1 | 	add	objptr, ##34420
1e5f0     F2 FA 61 FC | 	wrlong	result1, objptr
1e5f4     43 00 00 FF 
1e5f8     74 E4 85 F1 | 	sub	objptr, ##34420
1e5fc     F2 FA 01 F6 | 	mov	result1, objptr
1e600     00 28 00 FF 
1e604     00 FA 45 F5 | 	or	result1, ##5242880
1e608     43 00 00 FF 
1e60c     78 E4 05 F1 | 	add	objptr, ##34424
1e610     F2 FA 61 FC | 	wrlong	result1, objptr
1e614     43 00 00 FF 
1e618     78 E4 85 F1 | 	sub	objptr, ##34424
1e61c     F2 FA 01 F6 | 	mov	result1, objptr
1e620     35 FA 25 F4 | 	bith	result1, #53
1e624     43 00 00 FF 
1e628     7C E4 05 F1 | 	add	objptr, ##34428
1e62c     F2 FA 61 FC | 	wrlong	result1, objptr
1e630     43 00 00 FF 
1e634     7C E4 85 F1 | 	sub	objptr, ##34428
1e638     F2 FA 01 F6 | 	mov	result1, objptr
1e63c     54 FA 25 F4 | 	bith	result1, #84
1e640     43 00 00 FF 
1e644     80 E4 05 F1 | 	add	objptr, ##34432
1e648     F2 FA 61 FC | 	wrlong	result1, objptr
1e64c     43 00 00 FF 
1e650     80 E4 85 F1 | 	sub	objptr, ##34432
1e654     F2 FA 01 F6 | 	mov	result1, objptr
1e658     17 FA 25 F4 | 	bith	result1, #23
1e65c     43 00 00 FF 
1e660     84 E4 05 F1 | 	add	objptr, ##34436
1e664     F2 FA 61 FC | 	wrlong	result1, objptr
1e668     43 00 00 FF 
1e66c     84 E4 85 F1 | 	sub	objptr, ##34436
1e670     F2 FA 01 F6 | 	mov	result1, objptr
1e674     00 48 00 FF 
1e678     00 FA 45 F5 | 	or	result1, ##9437184
1e67c     43 00 00 FF 
1e680     88 E4 05 F1 | 	add	objptr, ##34440
1e684     F2 FA 61 FC | 	wrlong	result1, objptr
1e688     43 00 00 FF 
1e68c     88 E4 85 F1 | 	sub	objptr, ##34440
1e690     F2 FA 01 F6 | 	mov	result1, objptr
1e694     00 50 00 FF 
1e698     00 FA 45 F5 | 	or	result1, ##10485760
1e69c     43 00 00 FF 
1e6a0     8C E4 05 F1 | 	add	objptr, ##34444
1e6a4     F2 FA 61 FC | 	wrlong	result1, objptr
1e6a8     43 00 00 FF 
1e6ac     8C E4 85 F1 | 	sub	objptr, ##34444
1e6b0     F2 FA 01 F6 | 	mov	result1, objptr
1e6b4     00 58 00 FF 
1e6b8     00 FA 45 F5 | 	or	result1, ##11534336
1e6bc     43 00 00 FF 
1e6c0     90 E4 05 F1 | 	add	objptr, ##34448
1e6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1e6c8     43 00 00 FF 
1e6cc     90 E4 85 F1 | 	sub	objptr, ##34448
1e6d0     F2 FA 01 F6 | 	mov	result1, objptr
1e6d4     36 FA 25 F4 | 	bith	result1, #54
1e6d8     43 00 00 FF 
1e6dc     A4 E4 05 F1 | 	add	objptr, ##34468
1e6e0     F2 FA 61 FC | 	wrlong	result1, objptr
1e6e4     43 00 00 FF 
1e6e8     A4 E4 85 F1 | 	sub	objptr, ##34468
1e6ec     F2 FA 01 F6 | 	mov	result1, objptr
1e6f0     00 68 00 FF 
1e6f4     00 FA 45 F5 | 	or	result1, ##13631488
1e6f8     43 00 00 FF 
1e6fc     D4 E4 05 F1 | 	add	objptr, ##34516
1e700     F2 FA 61 FC | 	wrlong	result1, objptr
1e704     43 00 00 FF 
1e708     D4 E4 85 F1 | 	sub	objptr, ##34516
1e70c     F2 FA 01 F6 | 	mov	result1, objptr
1e710     00 68 00 FF 
1e714     00 FA 45 F5 | 	or	result1, ##13631488
1e718     43 00 00 FF 
1e71c     D0 E4 05 F1 | 	add	objptr, ##34512
1e720     F2 FA 61 FC | 	wrlong	result1, objptr
1e724     43 00 00 FF 
1e728     D0 E4 85 F1 | 	sub	objptr, ##34512
1e72c     F2 FA 01 F6 | 	mov	result1, objptr
1e730     00 68 00 FF 
1e734     00 FA 45 F5 | 	or	result1, ##13631488
1e738     43 00 00 FF 
1e73c     D8 E4 05 F1 | 	add	objptr, ##34520
1e740     F2 FA 61 FC | 	wrlong	result1, objptr
1e744     43 00 00 FF 
1e748     D8 E4 85 F1 | 	sub	objptr, ##34520
1e74c     F2 FA 01 F6 | 	mov	result1, objptr
1e750     00 68 00 FF 
1e754     00 FA 45 F5 | 	or	result1, ##13631488
1e758     43 00 00 FF 
1e75c     DC E4 05 F1 | 	add	objptr, ##34524
1e760     F2 FA 61 FC | 	wrlong	result1, objptr
1e764     43 00 00 FF 
1e768     DC E4 85 F1 | 	sub	objptr, ##34524
1e76c     F2 FA 01 F6 | 	mov	result1, objptr
1e770     00 68 00 FF 
1e774     00 FA 45 F5 | 	or	result1, ##13631488
1e778     43 00 00 FF 
1e77c     0C E5 05 F1 | 	add	objptr, ##34572
1e780     F2 FA 61 FC | 	wrlong	result1, objptr
1e784     43 00 00 FF 
1e788     0C E5 85 F1 | 	sub	objptr, ##34572
1e78c     F2 FA 01 F6 | 	mov	result1, objptr
1e790     55 FA 25 F4 | 	bith	result1, #85
1e794     43 00 00 FF 
1e798     BC E4 05 F1 | 	add	objptr, ##34492
1e79c     F2 FA 61 FC | 	wrlong	result1, objptr
1e7a0     43 00 00 FF 
1e7a4     BC E4 85 F1 | 	sub	objptr, ##34492
1e7a8     F2 FA 01 F6 | 	mov	result1, objptr
1e7ac     00 68 00 FF 
1e7b0     00 FA 45 F5 | 	or	result1, ##13631488
1e7b4     43 00 00 FF 
1e7b8     10 E5 05 F1 | 	add	objptr, ##34576
1e7bc     F2 FA 61 FC | 	wrlong	result1, objptr
1e7c0     43 00 00 FF 
1e7c4     10 E5 85 F1 | 	sub	objptr, ##34576
1e7c8     F2 FA 01 F6 | 	mov	result1, objptr
1e7cc     00 68 00 FF 
1e7d0     00 FA 45 F5 | 	or	result1, ##13631488
1e7d4     43 00 00 FF 
1e7d8     E0 E4 05 F1 | 	add	objptr, ##34528
1e7dc     F2 FA 61 FC | 	wrlong	result1, objptr
1e7e0     43 00 00 FF 
1e7e4     E0 E4 85 F1 | 	sub	objptr, ##34528
1e7e8     F2 FA 01 F6 | 	mov	result1, objptr
1e7ec     00 68 00 FF 
1e7f0     00 FA 45 F5 | 	or	result1, ##13631488
1e7f4     43 00 00 FF 
1e7f8     E4 E4 05 F1 | 	add	objptr, ##34532
1e7fc     F2 FA 61 FC | 	wrlong	result1, objptr
1e800     43 00 00 FF 
1e804     E4 E4 85 F1 | 	sub	objptr, ##34532
1e808     F2 FA 01 F6 | 	mov	result1, objptr
1e80c     00 68 00 FF 
1e810     00 FA 45 F5 | 	or	result1, ##13631488
1e814     43 00 00 FF 
1e818     E8 E4 05 F1 | 	add	objptr, ##34536
1e81c     F2 FA 61 FC | 	wrlong	result1, objptr
1e820     43 00 00 FF 
1e824     E8 E4 85 F1 | 	sub	objptr, ##34536
1e828     F2 FA 01 F6 | 	mov	result1, objptr
1e82c     74 FA 25 F4 | 	bith	result1, #116
1e830     43 00 00 FF 
1e834     60 E5 05 F1 | 	add	objptr, ##34656
1e838     F2 FA 61 FC | 	wrlong	result1, objptr
1e83c     43 00 00 FF 
1e840     60 E5 85 F1 | 	sub	objptr, ##34656
1e844     F2 FA 01 F6 | 	mov	result1, objptr
1e848     18 FA 25 F4 | 	bith	result1, #24
1e84c     43 00 00 FF 
1e850     64 E5 05 F1 | 	add	objptr, ##34660
1e854     F2 FA 61 FC | 	wrlong	result1, objptr
1e858     43 00 00 FF 
1e85c     64 E5 85 F1 | 	sub	objptr, ##34660
1e860     F2 FA 01 F6 | 	mov	result1, objptr
1e864     00 88 00 FF 
1e868     00 FA 45 F5 | 	or	result1, ##17825792
1e86c     43 00 00 FF 
1e870     68 E5 05 F1 | 	add	objptr, ##34664
1e874     F2 FA 61 FC | 	wrlong	result1, objptr
1e878     43 00 00 FF 
1e87c     68 E5 85 F1 | 	sub	objptr, ##34664
1e880     F2 FA 01 F6 | 	mov	result1, objptr
1e884     00 90 00 FF 
1e888     00 FA 45 F5 | 	or	result1, ##18874368
1e88c     43 00 00 FF 
1e890     6C E5 05 F1 | 	add	objptr, ##34668
1e894     F2 FA 61 FC | 	wrlong	result1, objptr
1e898     43 00 00 FF 
1e89c     6C E5 85 F1 | 	sub	objptr, ##34668
1e8a0     F2 FA 01 F6 | 	mov	result1, objptr
1e8a4     00 98 00 FF 
1e8a8     00 FA 45 F5 | 	or	result1, ##19922944
1e8ac     43 00 00 FF 
1e8b0     70 E5 05 F1 | 	add	objptr, ##34672
1e8b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8b8     43 00 00 FF 
1e8bc     70 E5 85 F1 | 	sub	objptr, ##34672
1e8c0     F2 FA 01 F6 | 	mov	result1, objptr
1e8c4     00 A0 00 FF 
1e8c8     00 FA 45 F5 | 	or	result1, ##20971520
1e8cc     43 00 00 FF 
1e8d0     74 E5 05 F1 | 	add	objptr, ##34676
1e8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8d8     43 00 00 FF 
1e8dc     74 E5 85 F1 | 	sub	objptr, ##34676
1e8e0     F2 FA 01 F6 | 	mov	result1, objptr
1e8e4     00 A8 00 FF 
1e8e8     00 FA 45 F5 | 	or	result1, ##22020096
1e8ec     43 00 00 FF 
1e8f0     78 E5 05 F1 | 	add	objptr, ##34680
1e8f4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8f8     43 00 00 FF 
1e8fc     78 E5 85 F1 | 	sub	objptr, ##34680
1e900     F2 FA 01 F6 | 	mov	result1, objptr
1e904     00 B0 00 FF 
1e908     00 FA 45 F5 | 	or	result1, ##23068672
1e90c     43 00 00 FF 
1e910     7C E5 05 F1 | 	add	objptr, ##34684
1e914     F2 FA 61 FC | 	wrlong	result1, objptr
1e918     43 00 00 FF 
1e91c     7C E5 85 F1 | 	sub	objptr, ##34684
1e920     F2 FA 01 F6 | 	mov	result1, objptr
1e924     00 B8 00 FF 
1e928     00 FA 45 F5 | 	or	result1, ##24117248
1e92c     43 00 00 FF 
1e930     80 E5 05 F1 | 	add	objptr, ##34688
1e934     F2 FA 61 FC | 	wrlong	result1, objptr
1e938     43 00 00 FF 
1e93c     80 E5 85 F1 | 	sub	objptr, ##34688
1e940     F2 FA 01 F6 | 	mov	result1, objptr
1e944     37 FA 25 F4 | 	bith	result1, #55
1e948     43 00 00 FF 
1e94c     84 E5 05 F1 | 	add	objptr, ##34692
1e950     F2 FA 61 FC | 	wrlong	result1, objptr
1e954     43 00 00 FF 
1e958     84 E5 85 F1 | 	sub	objptr, ##34692
1e95c     F2 FA 01 F6 | 	mov	result1, objptr
1e960     00 C8 00 FF 
1e964     00 FA 45 F5 | 	or	result1, ##26214400
1e968     43 00 00 FF 
1e96c     88 E5 05 F1 | 	add	objptr, ##34696
1e970     F2 FA 61 FC | 	wrlong	result1, objptr
1e974     43 00 00 FF 
1e978     88 E5 85 F1 | 	sub	objptr, ##34696
1e97c     F2 FA 01 F6 | 	mov	result1, objptr
1e980     00 D0 00 FF 
1e984     00 FA 45 F5 | 	or	result1, ##27262976
1e988     43 00 00 FF 
1e98c     8C E5 05 F1 | 	add	objptr, ##34700
1e990     F2 FA 61 FC | 	wrlong	result1, objptr
1e994     43 00 00 FF 
1e998     8C E5 85 F1 | 	sub	objptr, ##34700
1e99c     F2 FA 01 F6 | 	mov	result1, objptr
1e9a0     00 D8 00 FF 
1e9a4     00 FA 45 F5 | 	or	result1, ##28311552
1e9a8     43 00 00 FF 
1e9ac     90 E5 05 F1 | 	add	objptr, ##34704
1e9b0     F2 FA 61 FC | 	wrlong	result1, objptr
1e9b4     43 00 00 FF 
1e9b8     90 E5 85 F1 | 	sub	objptr, ##34704
1e9bc     F2 FA 01 F6 | 	mov	result1, objptr
1e9c0     56 FA 25 F4 | 	bith	result1, #86
1e9c4     43 00 00 FF 
1e9c8     94 E5 05 F1 | 	add	objptr, ##34708
1e9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1e9d0     43 00 00 FF 
1e9d4     94 E5 85 F1 | 	sub	objptr, ##34708
1e9d8     F2 FA 01 F6 | 	mov	result1, objptr
1e9dc     00 E8 00 FF 
1e9e0     00 FA 45 F5 | 	or	result1, ##30408704
1e9e4     45 00 00 FF 
1e9e8     5C E4 05 F1 | 	add	objptr, ##35420
1e9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1e9f0     45 00 00 FF 
1e9f4     5C E4 85 F1 | 	sub	objptr, ##35420
1e9f8     F2 FA 01 F6 | 	mov	result1, objptr
1e9fc     75 FA 25 F4 | 	bith	result1, #117
1ea00     43 00 00 FF 
1ea04     98 E5 05 F1 | 	add	objptr, ##34712
1ea08     F2 FA 61 FC | 	wrlong	result1, objptr
1ea0c     43 00 00 FF 
1ea10     98 E5 85 F1 | 	sub	objptr, ##34712
1ea14     F2 FA 01 F6 | 	mov	result1, objptr
1ea18     94 FA 25 F4 | 	bith	result1, #148
1ea1c     43 00 00 FF 
1ea20     AC E5 05 F1 | 	add	objptr, ##34732
1ea24     F2 FA 61 FC | 	wrlong	result1, objptr
1ea28     43 00 00 FF 
1ea2c     AC E5 85 F1 | 	sub	objptr, ##34732
1ea30     F2 FA 01 F6 | 	mov	result1, objptr
1ea34     19 FA 25 F4 | 	bith	result1, #25
1ea38     43 00 00 FF 
1ea3c     9C E5 05 F1 | 	add	objptr, ##34716
1ea40     F2 FA 61 FC | 	wrlong	result1, objptr
1ea44     43 00 00 FF 
1ea48     9C E5 85 F1 | 	sub	objptr, ##34716
1ea4c     F2 FA 01 F6 | 	mov	result1, objptr
1ea50     00 08 01 FF 
1ea54     00 FA 45 F5 | 	or	result1, ##34603008
1ea58     43 00 00 FF 
1ea5c     B8 E4 05 F1 | 	add	objptr, ##34488
1ea60     F2 FA 61 FC | 	wrlong	result1, objptr
1ea64     43 00 00 FF 
1ea68     B8 E4 85 F1 | 	sub	objptr, ##34488
1ea6c     F2 FA 01 F6 | 	mov	result1, objptr
1ea70     00 10 01 FF 
1ea74     00 FA 45 F5 | 	or	result1, ##35651584
1ea78     43 00 00 FF 
1ea7c     A0 E5 05 F1 | 	add	objptr, ##34720
1ea80     F2 FA 61 FC | 	wrlong	result1, objptr
1ea84     43 00 00 FF 
1ea88     A0 E5 85 F1 | 	sub	objptr, ##34720
1ea8c     F2 FA 01 F6 | 	mov	result1, objptr
1ea90     00 18 01 FF 
1ea94     00 FA 45 F5 | 	or	result1, ##36700160
1ea98     43 00 00 FF 
1ea9c     A4 E5 05 F1 | 	add	objptr, ##34724
1eaa0     F2 FA 61 FC | 	wrlong	result1, objptr
1eaa4     43 00 00 FF 
1eaa8     A4 E5 85 F1 | 	sub	objptr, ##34724
1eaac     F2 FA 01 F6 | 	mov	result1, objptr
1eab0     00 20 01 FF 
1eab4     00 FA 45 F5 | 	or	result1, ##37748736
1eab8     43 00 00 FF 
1eabc     A8 E5 05 F1 | 	add	objptr, ##34728
1eac0     F2 FA 61 FC | 	wrlong	result1, objptr
1eac4     43 00 00 FF 
1eac8     A8 E5 85 F1 | 	sub	objptr, ##34728
1eacc     F2 FA 01 F6 | 	mov	result1, objptr
1ead0     00 28 01 FF 
1ead4     00 FA 45 F5 | 	or	result1, ##38797312
1ead8     43 00 00 FF 
1eadc     B4 E5 05 F1 | 	add	objptr, ##34740
1eae0     F2 FA 61 FC | 	wrlong	result1, objptr
1eae4     43 00 00 FF 
1eae8     B4 E5 85 F1 | 	sub	objptr, ##34740
1eaec     F2 FA 01 F6 | 	mov	result1, objptr
1eaf0     00 30 01 FF 
1eaf4     00 FA 45 F5 | 	or	result1, ##39845888
1eaf8     43 00 00 FF 
1eafc     B8 E5 05 F1 | 	add	objptr, ##34744
1eb00     F2 FA 61 FC | 	wrlong	result1, objptr
1eb04     43 00 00 FF 
1eb08     B8 E5 85 F1 | 	sub	objptr, ##34744
1eb0c     F2 FA 01 F6 | 	mov	result1, objptr
1eb10     00 38 01 FF 
1eb14     00 FA 45 F5 | 	or	result1, ##40894464
1eb18     43 00 00 FF 
1eb1c     BC E5 05 F1 | 	add	objptr, ##34748
1eb20     F2 FA 61 FC | 	wrlong	result1, objptr
1eb24     43 00 00 FF 
1eb28     BC E5 85 F1 | 	sub	objptr, ##34748
1eb2c     F2 FA 01 F6 | 	mov	result1, objptr
1eb30     00 40 01 FF 
1eb34     00 FA 45 F5 | 	or	result1, ##41943040
1eb38     43 00 00 FF 
1eb3c     C0 E5 05 F1 | 	add	objptr, ##34752
1eb40     F2 FA 61 FC | 	wrlong	result1, objptr
1eb44     43 00 00 FF 
1eb48     C0 E5 85 F1 | 	sub	objptr, ##34752
1eb4c     F2 FA 01 F6 | 	mov	result1, objptr
1eb50     00 48 01 FF 
1eb54     00 FA 45 F5 | 	or	result1, ##42991616
1eb58     43 00 00 FF 
1eb5c     C8 E5 05 F1 | 	add	objptr, ##34760
1eb60     F2 FA 61 FC | 	wrlong	result1, objptr
1eb64     43 00 00 FF 
1eb68     C8 E5 85 F1 | 	sub	objptr, ##34760
1eb6c     F2 FA 01 F6 | 	mov	result1, objptr
1eb70     00 08 01 FF 
1eb74     00 FA 45 F5 | 	or	result1, ##34603008
1eb78     43 00 00 FF 
1eb7c     CC E5 05 F1 | 	add	objptr, ##34764
1eb80     F2 FA 61 FC | 	wrlong	result1, objptr
1eb84     43 00 00 FF 
1eb88     CC E5 85 F1 | 	sub	objptr, ##34764
1eb8c     F2 FA 01 F6 | 	mov	result1, objptr
1eb90     00 50 01 FF 
1eb94     00 FA 45 F5 | 	or	result1, ##44040192
1eb98     43 00 00 FF 
1eb9c     CC E4 05 F1 | 	add	objptr, ##34508
1eba0     F2 FA 61 FC | 	wrlong	result1, objptr
1eba4     43 00 00 FF 
1eba8     CC E4 85 F1 | 	sub	objptr, ##34508
1ebac     F2 FA 01 F6 | 	mov	result1, objptr
1ebb0     00 58 01 FF 
1ebb4     00 FA 45 F5 | 	or	result1, ##45088768
1ebb8     43 00 00 FF 
1ebbc     FC E4 05 F1 | 	add	objptr, ##34556
1ebc0     F2 FA 61 FC | 	wrlong	result1, objptr
1ebc4     43 00 00 FF 
1ebc8     FC E4 85 F1 | 	sub	objptr, ##34556
1ebcc     F2 FA 01 F6 | 	mov	result1, objptr
1ebd0     00 60 01 FF 
1ebd4     00 FA 45 F5 | 	or	result1, ##46137344
1ebd8     43 00 00 FF 
1ebdc     F8 E4 05 F1 | 	add	objptr, ##34552
1ebe0     F2 FA 61 FC | 	wrlong	result1, objptr
1ebe4     43 00 00 FF 
1ebe8     F8 E4 85 F1 | 	sub	objptr, ##34552
1ebec     F2 FA 01 F6 | 	mov	result1, objptr
1ebf0     00 68 01 FF 
1ebf4     00 FA 45 F5 | 	or	result1, ##47185920
1ebf8     43 00 00 FF 
1ebfc     9C E4 05 F1 | 	add	objptr, ##34460
1ec00     F2 FA 61 FC | 	wrlong	result1, objptr
1ec04     43 00 00 FF 
1ec08     9C E4 85 F1 | 	sub	objptr, ##34460
1ec0c     F2 FA 01 F6 | 	mov	result1, objptr
1ec10     00 70 01 FF 
1ec14     00 FA 45 F5 | 	or	result1, ##48234496
1ec18     43 00 00 FF 
1ec1c     A0 E4 05 F1 | 	add	objptr, ##34464
1ec20     F2 FA 61 FC | 	wrlong	result1, objptr
1ec24     43 00 00 FF 
1ec28     A0 E4 85 F1 | 	sub	objptr, ##34464
1ec2c     F2 FA 01 F6 | 	mov	result1, objptr
1ec30     00 78 01 FF 
1ec34     00 FA 45 F5 | 	or	result1, ##49283072
1ec38     43 00 00 FF 
1ec3c     08 E5 05 F1 | 	add	objptr, ##34568
1ec40     F2 FA 61 FC | 	wrlong	result1, objptr
1ec44     43 00 00 FF 
1ec48     08 E5 85 F1 | 	sub	objptr, ##34568
1ec4c     F2 FA 01 F6 | 	mov	result1, objptr
1ec50     38 FA 25 F4 | 	bith	result1, #56
1ec54     43 00 00 FF 
1ec58     B0 E5 05 F1 | 	add	objptr, ##34736
1ec5c     F2 FA 61 FC | 	wrlong	result1, objptr
1ec60     43 00 00 FF 
1ec64     B0 E5 85 F1 | 	sub	objptr, ##34736
1ec68     F2 FA 01 F6 | 	mov	result1, objptr
1ec6c     00 88 01 FF 
1ec70     00 FA 45 F5 | 	or	result1, ##51380224
1ec74     43 00 00 FF 
1ec78     C4 E5 05 F1 | 	add	objptr, ##34756
1ec7c     F2 FA 61 FC | 	wrlong	result1, objptr
1ec80     43 00 00 FF 
1ec84     C4 E5 85 F1 | 	sub	objptr, ##34756
1ec88     F2 FA 01 F6 | 	mov	result1, objptr
1ec8c     00 90 01 FF 
1ec90     00 FA 45 F5 | 	or	result1, ##52428800
1ec94     43 00 00 FF 
1ec98     D0 E5 05 F1 | 	add	objptr, ##34768
1ec9c     F2 FA 61 FC | 	wrlong	result1, objptr
1eca0     43 00 00 FF 
1eca4     D0 E5 85 F1 | 	sub	objptr, ##34768
1eca8     F2 FA 01 F6 | 	mov	result1, objptr
1ecac     00 98 01 FF 
1ecb0     00 FA 45 F5 | 	or	result1, ##53477376
1ecb4     43 00 00 FF 
1ecb8     D4 E5 05 F1 | 	add	objptr, ##34772
1ecbc     F2 FA 61 FC | 	wrlong	result1, objptr
1ecc0     43 00 00 FF 
1ecc4     D4 E5 85 F1 | 	sub	objptr, ##34772
1ecc8     F2 FA 01 F6 | 	mov	result1, objptr
1eccc     00 A0 01 FF 
1ecd0     00 FA 45 F5 | 	or	result1, ##54525952
1ecd4     43 00 00 FF 
1ecd8     D8 E5 05 F1 | 	add	objptr, ##34776
1ecdc     F2 FA 61 FC | 	wrlong	result1, objptr
1ece0     43 00 00 FF 
1ece4     D8 E5 85 F1 | 	sub	objptr, ##34776
1ece8     F2 FA 01 F6 | 	mov	result1, objptr
1ecec     00 A8 01 FF 
1ecf0     00 FA 45 F5 | 	or	result1, ##55574528
1ecf4     43 00 00 FF 
1ecf8     DC E5 05 F1 | 	add	objptr, ##34780
1ecfc     F2 FA 61 FC | 	wrlong	result1, objptr
1ed00     43 00 00 FF 
1ed04     DC E5 85 F1 | 	sub	objptr, ##34780
1ed08     F2 FA 01 F6 | 	mov	result1, objptr
1ed0c     00 B0 01 FF 
1ed10     00 FA 45 F5 | 	or	result1, ##56623104
1ed14     43 00 00 FF 
1ed18     E0 E5 05 F1 | 	add	objptr, ##34784
1ed1c     F2 FA 61 FC | 	wrlong	result1, objptr
1ed20     43 00 00 FF 
1ed24     E0 E5 85 F1 | 	sub	objptr, ##34784
1ed28     F2 FA 01 F6 | 	mov	result1, objptr
1ed2c     00 B8 01 FF 
1ed30     00 FA 45 F5 | 	or	result1, ##57671680
1ed34     43 00 00 FF 
1ed38     E4 E5 05 F1 | 	add	objptr, ##34788
1ed3c     F2 FA 61 FC | 	wrlong	result1, objptr
1ed40     43 00 00 FF 
1ed44     E4 E5 85 F1 | 	sub	objptr, ##34788
1ed48     F2 FA 01 F6 | 	mov	result1, objptr
1ed4c     94 FA 25 F4 | 	bith	result1, #148
1ed50     43 00 00 FF 
1ed54     AC E5 05 F1 | 	add	objptr, ##34732
1ed58     F2 FA 61 FC | 	wrlong	result1, objptr
1ed5c     43 00 00 FF 
1ed60     AC E5 85 F1 | 	sub	objptr, ##34732
1ed64     F2 FA 01 F6 | 	mov	result1, objptr
1ed68     57 FA 25 F4 | 	bith	result1, #87
1ed6c     43 00 00 FF 
1ed70     EC E5 05 F1 | 	add	objptr, ##34796
1ed74     F2 FA 61 FC | 	wrlong	result1, objptr
1ed78     43 00 00 FF 
1ed7c     EC E5 85 F1 | 	sub	objptr, ##34796
1ed80     F2 FA 01 F6 | 	mov	result1, objptr
1ed84     00 C8 01 FF 
1ed88     00 FA 45 F5 | 	or	result1, ##59768832
1ed8c     43 00 00 FF 
1ed90     E8 E5 05 F1 | 	add	objptr, ##34792
1ed94     F2 FA 61 FC | 	wrlong	result1, objptr
1ed98     43 00 00 FF 
1ed9c     E8 E5 85 F1 | 	sub	objptr, ##34792
1eda0     F2 FA 01 F6 | 	mov	result1, objptr
1eda4     00 D0 01 FF 
1eda8     00 FA 45 F5 | 	or	result1, ##60817408
1edac     44 00 00 FF 
1edb0     00 E4 05 F1 | 	add	objptr, ##34816
1edb4     F2 FA 61 FC | 	wrlong	result1, objptr
1edb8     44 00 00 FF 
1edbc     00 E4 85 F1 | 	sub	objptr, ##34816
1edc0     F2 FA 01 F6 | 	mov	result1, objptr
1edc4     00 D8 01 FF 
1edc8     00 FA 45 F5 | 	or	result1, ##61865984
1edcc     44 00 00 FF 
1edd0     04 E4 05 F1 | 	add	objptr, ##34820
1edd4     F2 FA 61 FC | 	wrlong	result1, objptr
1edd8     44 00 00 FF 
1eddc     04 E4 85 F1 | 	sub	objptr, ##34820
1ede0     F2 FA 01 F6 | 	mov	result1, objptr
1ede4     76 FA 25 F4 | 	bith	result1, #118
1ede8     43 00 00 FF 
1edec     F0 E5 05 F1 | 	add	objptr, ##34800
1edf0     F2 FA 61 FC | 	wrlong	result1, objptr
1edf4     43 00 00 FF 
1edf8     F0 E5 85 F1 | 	sub	objptr, ##34800
1edfc     F2 FA 01 F6 | 	mov	result1, objptr
1ee00     00 E8 01 FF 
1ee04     00 FA 45 F5 | 	or	result1, ##63963136
1ee08     43 00 00 FF 
1ee0c     F4 E5 05 F1 | 	add	objptr, ##34804
1ee10     F2 FA 61 FC | 	wrlong	result1, objptr
1ee14     43 00 00 FF 
1ee18     F4 E5 85 F1 | 	sub	objptr, ##34804
1ee1c     F2 FA 01 F6 | 	mov	result1, objptr
1ee20     95 FA 25 F4 | 	bith	result1, #149
1ee24     43 00 00 FF 
1ee28     F8 E5 05 F1 | 	add	objptr, ##34808
1ee2c     F2 FA 61 FC | 	wrlong	result1, objptr
1ee30     43 00 00 FF 
1ee34     F8 E5 85 F1 | 	sub	objptr, ##34808
1ee38     F2 FA 01 F6 | 	mov	result1, objptr
1ee3c     B4 FA 25 F4 | 	bith	result1, #180
1ee40     43 00 00 FF 
1ee44     FC E5 05 F1 | 	add	objptr, ##34812
1ee48     F2 FA 61 FC | 	wrlong	result1, objptr
1ee4c     43 00 00 FF 
1ee50     FC E5 85 F1 | 	sub	objptr, ##34812
1ee54     F2 FA 01 F6 | 	mov	result1, objptr
1ee58     1A FA 25 F4 | 	bith	result1, #26
1ee5c     44 00 00 FF 
1ee60     0C E4 05 F1 | 	add	objptr, ##34828
1ee64     F2 FA 61 FC | 	wrlong	result1, objptr
1ee68     44 00 00 FF 
1ee6c     0C E4 85 F1 | 	sub	objptr, ##34828
1ee70     F2 FA 01 F6 | 	mov	result1, objptr
1ee74     00 08 02 FF 
1ee78     00 FA 45 F5 | 	or	result1, ##68157440
1ee7c     44 00 00 FF 
1ee80     08 E4 05 F1 | 	add	objptr, ##34824
1ee84     F2 FA 61 FC | 	wrlong	result1, objptr
1ee88     44 00 00 FF 
1ee8c     08 E4 85 F1 | 	sub	objptr, ##34824
1ee90     F2 FA 01 F6 | 	mov	result1, objptr
1ee94     00 10 02 FF 
1ee98     00 FA 45 F5 | 	or	result1, ##69206016
1ee9c     44 00 00 FF 
1eea0     18 E4 05 F1 | 	add	objptr, ##34840
1eea4     F2 FA 61 FC | 	wrlong	result1, objptr
1eea8     44 00 00 FF 
1eeac     18 E4 85 F1 | 	sub	objptr, ##34840
1eeb0     F2 FA 01 F6 | 	mov	result1, objptr
1eeb4     00 18 02 FF 
1eeb8     00 FA 45 F5 | 	or	result1, ##70254592
1eebc     44 00 00 FF 
1eec0     14 E4 05 F1 | 	add	objptr, ##34836
1eec4     F2 FA 61 FC | 	wrlong	result1, objptr
1eec8     44 00 00 FF 
1eecc     14 E4 85 F1 | 	sub	objptr, ##34836
1eed0     F2 FA 01 F6 | 	mov	result1, objptr
1eed4     00 20 02 FF 
1eed8     00 FA 45 F5 | 	or	result1, ##71303168
1eedc     44 00 00 FF 
1eee0     10 E4 05 F1 | 	add	objptr, ##34832
1eee4     F2 FA 61 FC | 	wrlong	result1, objptr
1eee8     44 00 00 FF 
1eeec     10 E4 85 F1 | 	sub	objptr, ##34832
1eef0     F2 FA 01 F6 | 	mov	result1, objptr
1eef4     00 28 02 FF 
1eef8     00 FA 45 F5 | 	or	result1, ##72351744
1eefc     44 00 00 FF 
1ef00     1C E4 05 F1 | 	add	objptr, ##34844
1ef04     F2 FA 61 FC | 	wrlong	result1, objptr
1ef08     44 00 00 FF 
1ef0c     1C E4 85 F1 | 	sub	objptr, ##34844
1ef10     F2 FA 01 F6 | 	mov	result1, objptr
1ef14     00 30 02 FF 
1ef18     00 FA 45 F5 | 	or	result1, ##73400320
1ef1c     44 00 00 FF 
1ef20     20 E4 05 F1 | 	add	objptr, ##34848
1ef24     F2 FA 61 FC | 	wrlong	result1, objptr
1ef28     44 00 00 FF 
1ef2c     20 E4 85 F1 | 	sub	objptr, ##34848
1ef30     F2 FA 01 F6 | 	mov	result1, objptr
1ef34     00 38 02 FF 
1ef38     00 FA 45 F5 | 	or	result1, ##74448896
1ef3c     43 00 00 FF 
1ef40     B4 E4 05 F1 | 	add	objptr, ##34484
1ef44     F2 FA 61 FC | 	wrlong	result1, objptr
1ef48     43 00 00 FF 
1ef4c     B4 E4 85 F1 | 	sub	objptr, ##34484
1ef50     F2 FA 01 F6 | 	mov	result1, objptr
1ef54     00 40 02 FF 
1ef58     00 FA 45 F5 | 	or	result1, ##75497472
1ef5c     44 00 00 FF 
1ef60     38 E4 05 F1 | 	add	objptr, ##34872
1ef64     F2 FA 61 FC | 	wrlong	result1, objptr
1ef68     44 00 00 FF 
1ef6c     38 E4 85 F1 | 	sub	objptr, ##34872
1ef70     F2 FA 01 F6 | 	mov	result1, objptr
1ef74     00 48 02 FF 
1ef78     00 FA 45 F5 | 	or	result1, ##76546048
1ef7c     44 00 00 FF 
1ef80     48 E4 05 F1 | 	add	objptr, ##34888
1ef84     F2 FA 61 FC | 	wrlong	result1, objptr
1ef88     44 00 00 FF 
1ef8c     48 E4 85 F1 | 	sub	objptr, ##34888
1ef90     F2 FA 01 F6 | 	mov	result1, objptr
1ef94     00 50 02 FF 
1ef98     00 FA 45 F5 | 	or	result1, ##77594624
1ef9c     44 00 00 FF 
1efa0     4C E4 05 F1 | 	add	objptr, ##34892
1efa4     F2 FA 61 FC | 	wrlong	result1, objptr
1efa8     44 00 00 FF 
1efac     4C E4 85 F1 | 	sub	objptr, ##34892
1efb0     F2 FA 01 F6 | 	mov	result1, objptr
1efb4     00 58 02 FF 
1efb8     00 FA 45 F5 | 	or	result1, ##78643200
1efbc     44 00 00 FF 
1efc0     44 E4 05 F1 | 	add	objptr, ##34884
1efc4     F2 FA 61 FC | 	wrlong	result1, objptr
1efc8     44 00 00 FF 
1efcc     44 E4 85 F1 | 	sub	objptr, ##34884
1efd0     F2 FA 01 F6 | 	mov	result1, objptr
1efd4     00 60 02 FF 
1efd8     00 FA 45 F5 | 	or	result1, ##79691776
1efdc     44 00 00 FF 
1efe0     3C E4 05 F1 | 	add	objptr, ##34876
1efe4     F2 FA 61 FC | 	wrlong	result1, objptr
1efe8     44 00 00 FF 
1efec     3C E4 85 F1 | 	sub	objptr, ##34876
1eff0     F2 FA 01 F6 | 	mov	result1, objptr
1eff4     00 68 02 FF 
1eff8     00 FA 45 F5 | 	or	result1, ##80740352
1effc     44 00 00 FF 
1f000     40 E4 05 F1 | 	add	objptr, ##34880
1f004     F2 FA 61 FC | 	wrlong	result1, objptr
1f008     44 00 00 FF 
1f00c     40 E4 85 F1 | 	sub	objptr, ##34880
1f010     F2 FA 01 F6 | 	mov	result1, objptr
1f014     00 70 02 FF 
1f018     00 FA 45 F5 | 	or	result1, ##81788928
1f01c     44 00 00 FF 
1f020     50 E4 05 F1 | 	add	objptr, ##34896
1f024     F2 FA 61 FC | 	wrlong	result1, objptr
1f028     44 00 00 FF 
1f02c     50 E4 85 F1 | 	sub	objptr, ##34896
1f030     F2 FA 01 F6 | 	mov	result1, objptr
1f034     00 78 02 FF 
1f038     00 FA 45 F5 | 	or	result1, ##82837504
1f03c     44 00 00 FF 
1f040     54 E4 05 F1 | 	add	objptr, ##34900
1f044     F2 FA 61 FC | 	wrlong	result1, objptr
1f048     44 00 00 FF 
1f04c     54 E4 85 F1 | 	sub	objptr, ##34900
1f050     F2 FA 01 F6 | 	mov	result1, objptr
1f054     00 80 02 FF 
1f058     00 FA 45 F5 | 	or	result1, ##83886080
1f05c     44 00 00 FF 
1f060     58 E4 05 F1 | 	add	objptr, ##34904
1f064     F2 FA 61 FC | 	wrlong	result1, objptr
1f068     44 00 00 FF 
1f06c     58 E4 85 F1 | 	sub	objptr, ##34904
1f070     F2 FA 01 F6 | 	mov	result1, objptr
1f074     00 88 02 FF 
1f078     00 FA 45 F5 | 	or	result1, ##84934656
1f07c     44 00 00 FF 
1f080     5C E4 05 F1 | 	add	objptr, ##34908
1f084     F2 FA 61 FC | 	wrlong	result1, objptr
1f088     44 00 00 FF 
1f08c     5C E4 85 F1 | 	sub	objptr, ##34908
1f090     F2 FA 01 F6 | 	mov	result1, objptr
1f094     00 90 02 FF 
1f098     00 FA 45 F5 | 	or	result1, ##85983232
1f09c     44 00 00 FF 
1f0a0     60 E4 05 F1 | 	add	objptr, ##34912
1f0a4     F2 FA 61 FC | 	wrlong	result1, objptr
1f0a8     44 00 00 FF 
1f0ac     60 E4 85 F1 | 	sub	objptr, ##34912
1f0b0     F2 FA 01 F6 | 	mov	result1, objptr
1f0b4     00 98 02 FF 
1f0b8     00 FA 45 F5 | 	or	result1, ##87031808
1f0bc     44 00 00 FF 
1f0c0     64 E4 05 F1 | 	add	objptr, ##34916
1f0c4     F2 FA 61 FC | 	wrlong	result1, objptr
1f0c8     44 00 00 FF 
1f0cc     64 E4 85 F1 | 	sub	objptr, ##34916
1f0d0     F2 FA 01 F6 | 	mov	result1, objptr
1f0d4     00 A0 02 FF 
1f0d8     00 FA 45 F5 | 	or	result1, ##88080384
1f0dc     44 00 00 FF 
1f0e0     68 E4 05 F1 | 	add	objptr, ##34920
1f0e4     F2 FA 61 FC | 	wrlong	result1, objptr
1f0e8     44 00 00 FF 
1f0ec     68 E4 85 F1 | 	sub	objptr, ##34920
1f0f0     F2 FA 01 F6 | 	mov	result1, objptr
1f0f4     00 A8 02 FF 
1f0f8     00 FA 45 F5 | 	or	result1, ##89128960
1f0fc     44 00 00 FF 
1f100     6C E4 05 F1 | 	add	objptr, ##34924
1f104     F2 FA 61 FC | 	wrlong	result1, objptr
1f108     44 00 00 FF 
1f10c     6C E4 85 F1 | 	sub	objptr, ##34924
1f110     F2 FA 01 F6 | 	mov	result1, objptr
1f114     00 B0 02 FF 
1f118     00 FA 45 F5 | 	or	result1, ##90177536
1f11c     44 00 00 FF 
1f120     78 E4 05 F1 | 	add	objptr, ##34936
1f124     F2 FA 61 FC | 	wrlong	result1, objptr
1f128     44 00 00 FF 
1f12c     78 E4 85 F1 | 	sub	objptr, ##34936
1f130     F2 FA 01 F6 | 	mov	result1, objptr
1f134     00 B8 02 FF 
1f138     00 FA 45 F5 | 	or	result1, ##91226112
1f13c     44 00 00 FF 
1f140     70 E4 05 F1 | 	add	objptr, ##34928
1f144     F2 FA 61 FC | 	wrlong	result1, objptr
1f148     44 00 00 FF 
1f14c     70 E4 85 F1 | 	sub	objptr, ##34928
1f150     F2 FA 01 F6 | 	mov	result1, objptr
1f154     00 C0 02 FF 
1f158     00 FA 45 F5 | 	or	result1, ##92274688
1f15c     44 00 00 FF 
1f160     74 E4 05 F1 | 	add	objptr, ##34932
1f164     F2 FA 61 FC | 	wrlong	result1, objptr
1f168     44 00 00 FF 
1f16c     74 E4 85 F1 | 	sub	objptr, ##34932
1f170     F2 FA 01 F6 | 	mov	result1, objptr
1f174     00 C8 02 FF 
1f178     00 FA 45 F5 | 	or	result1, ##93323264
1f17c     44 00 00 FF 
1f180     7C E4 05 F1 | 	add	objptr, ##34940
1f184     F2 FA 61 FC | 	wrlong	result1, objptr
1f188     44 00 00 FF 
1f18c     7C E4 85 F1 | 	sub	objptr, ##34940
1f190     F2 FA 01 F6 | 	mov	result1, objptr
1f194     00 D0 02 FF 
1f198     00 FA 45 F5 | 	or	result1, ##94371840
1f19c     44 00 00 FF 
1f1a0     24 E4 05 F1 | 	add	objptr, ##34852
1f1a4     F2 FA 61 FC | 	wrlong	result1, objptr
1f1a8     44 00 00 FF 
1f1ac     24 E4 85 F1 | 	sub	objptr, ##34852
1f1b0     F2 FA 01 F6 | 	mov	result1, objptr
1f1b4     00 D8 02 FF 
1f1b8     00 FA 45 F5 | 	or	result1, ##95420416
1f1bc     44 00 00 FF 
1f1c0     2C E4 05 F1 | 	add	objptr, ##34860
1f1c4     F2 FA 61 FC | 	wrlong	result1, objptr
1f1c8     44 00 00 FF 
1f1cc     2C E4 85 F1 | 	sub	objptr, ##34860
1f1d0     F2 FA 01 F6 | 	mov	result1, objptr
1f1d4     00 E0 02 FF 
1f1d8     00 FA 45 F5 | 	or	result1, ##96468992
1f1dc     44 00 00 FF 
1f1e0     30 E4 05 F1 | 	add	objptr, ##34864
1f1e4     F2 FA 61 FC | 	wrlong	result1, objptr
1f1e8     44 00 00 FF 
1f1ec     30 E4 85 F1 | 	sub	objptr, ##34864
1f1f0     F2 FA 01 F6 | 	mov	result1, objptr
1f1f4     00 E8 02 FF 
1f1f8     00 FA 45 F5 | 	or	result1, ##97517568
1f1fc     44 00 00 FF 
1f200     80 E4 05 F1 | 	add	objptr, ##34944
1f204     F2 FA 61 FC | 	wrlong	result1, objptr
1f208     44 00 00 FF 
1f20c     80 E4 85 F1 | 	sub	objptr, ##34944
1f210     F2 FA 01 F6 | 	mov	result1, objptr
1f214     00 F0 02 FF 
1f218     00 FA 45 F5 | 	or	result1, ##98566144
1f21c     44 00 00 FF 
1f220     84 E4 05 F1 | 	add	objptr, ##34948
1f224     F2 FA 61 FC | 	wrlong	result1, objptr
1f228     44 00 00 FF 
1f22c     84 E4 85 F1 | 	sub	objptr, ##34948
1f230     F2 FA 01 F6 | 	mov	result1, objptr
1f234     00 F8 02 FF 
1f238     00 FA 45 F5 | 	or	result1, ##99614720
1f23c     44 00 00 FF 
1f240     88 E4 05 F1 | 	add	objptr, ##34952
1f244     F2 FA 61 FC | 	wrlong	result1, objptr
1f248     44 00 00 FF 
1f24c     88 E4 85 F1 | 	sub	objptr, ##34952
1f250     F2 FA 01 F6 | 	mov	result1, objptr
1f254     39 FA 25 F4 | 	bith	result1, #57
1f258     44 00 00 FF 
1f25c     34 E4 05 F1 | 	add	objptr, ##34868
1f260     F2 FA 61 FC | 	wrlong	result1, objptr
1f264     44 00 00 FF 
1f268     34 E4 85 F1 | 	sub	objptr, ##34868
1f26c     F2 FA 01 F6 | 	mov	result1, objptr
1f270     00 08 03 FF 
1f274     00 FA 45 F5 | 	or	result1, ##101711872
1f278     44 00 00 FF 
1f27c     98 E4 05 F1 | 	add	objptr, ##34968
1f280     F2 FA 61 FC | 	wrlong	result1, objptr
1f284     44 00 00 FF 
1f288     98 E4 85 F1 | 	sub	objptr, ##34968
1f28c     F2 FA 01 F6 | 	mov	result1, objptr
1f290     00 10 03 FF 
1f294     00 FA 45 F5 | 	or	result1, ##102760448
1f298     44 00 00 FF 
1f29c     A0 E4 05 F1 | 	add	objptr, ##34976
1f2a0     F2 FA 61 FC | 	wrlong	result1, objptr
1f2a4     44 00 00 FF 
1f2a8     A0 E4 85 F1 | 	sub	objptr, ##34976
1f2ac     F2 FA 01 F6 | 	mov	result1, objptr
1f2b0     00 18 03 FF 
1f2b4     00 FA 45 F5 | 	or	result1, ##103809024
1f2b8     44 00 00 FF 
1f2bc     94 E4 05 F1 | 	add	objptr, ##34964
1f2c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f2c4     44 00 00 FF 
1f2c8     94 E4 85 F1 | 	sub	objptr, ##34964
1f2cc     F2 FA 01 F6 | 	mov	result1, objptr
1f2d0     00 20 03 FF 
1f2d4     00 FA 45 F5 | 	or	result1, ##104857600
1f2d8     44 00 00 FF 
1f2dc     90 E4 05 F1 | 	add	objptr, ##34960
1f2e0     F2 FA 61 FC | 	wrlong	result1, objptr
1f2e4     44 00 00 FF 
1f2e8     90 E4 85 F1 | 	sub	objptr, ##34960
1f2ec     F2 FA 01 F6 | 	mov	result1, objptr
1f2f0     00 28 03 FF 
1f2f4     00 FA 45 F5 | 	or	result1, ##105906176
1f2f8     44 00 00 FF 
1f2fc     8C E4 05 F1 | 	add	objptr, ##34956
1f300     F2 FA 61 FC | 	wrlong	result1, objptr
1f304     44 00 00 FF 
1f308     8C E4 85 F1 | 	sub	objptr, ##34956
1f30c     F2 FA 01 F6 | 	mov	result1, objptr
1f310     00 30 03 FF 
1f314     00 FA 45 F5 | 	or	result1, ##106954752
1f318     44 00 00 FF 
1f31c     9C E4 05 F1 | 	add	objptr, ##34972
1f320     F2 FA 61 FC | 	wrlong	result1, objptr
1f324     44 00 00 FF 
1f328     9C E4 85 F1 | 	sub	objptr, ##34972
1f32c     F2 FA 01 F6 | 	mov	result1, objptr
1f330     00 38 03 FF 
1f334     00 FA 45 F5 | 	or	result1, ##108003328
1f338     44 00 00 FF 
1f33c     A4 E4 05 F1 | 	add	objptr, ##34980
1f340     F2 FA 61 FC | 	wrlong	result1, objptr
1f344     44 00 00 FF 
1f348     A4 E4 85 F1 | 	sub	objptr, ##34980
1f34c     F2 FA 01 F6 | 	mov	result1, objptr
1f350     00 40 03 FF 
1f354     00 FA 45 F5 | 	or	result1, ##109051904
1f358     44 00 00 FF 
1f35c     A8 E4 05 F1 | 	add	objptr, ##34984
1f360     F2 FA 61 FC | 	wrlong	result1, objptr
1f364     44 00 00 FF 
1f368     A8 E4 85 F1 | 	sub	objptr, ##34984
1f36c     F2 FA 01 F6 | 	mov	result1, objptr
1f370     00 48 03 FF 
1f374     00 FA 45 F5 | 	or	result1, ##110100480
1f378     44 00 00 FF 
1f37c     AC E4 05 F1 | 	add	objptr, ##34988
1f380     F2 FA 61 FC | 	wrlong	result1, objptr
1f384     44 00 00 FF 
1f388     AC E4 85 F1 | 	sub	objptr, ##34988
1f38c     F2 FA 01 F6 | 	mov	result1, objptr
1f390     00 50 03 FF 
1f394     00 FA 45 F5 | 	or	result1, ##111149056
1f398     44 00 00 FF 
1f39c     B4 E4 05 F1 | 	add	objptr, ##34996
1f3a0     F2 FA 61 FC | 	wrlong	result1, objptr
1f3a4     44 00 00 FF 
1f3a8     B4 E4 85 F1 | 	sub	objptr, ##34996
1f3ac     F2 FA 01 F6 | 	mov	result1, objptr
1f3b0     00 58 03 FF 
1f3b4     00 FA 45 F5 | 	or	result1, ##112197632
1f3b8     44 00 00 FF 
1f3bc     B8 E4 05 F1 | 	add	objptr, ##35000
1f3c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f3c4     44 00 00 FF 
1f3c8     B8 E4 85 F1 | 	sub	objptr, ##35000
1f3cc     F2 FA 01 F6 | 	mov	result1, objptr
1f3d0     00 60 03 FF 
1f3d4     00 FA 45 F5 | 	or	result1, ##113246208
1f3d8     44 00 00 FF 
1f3dc     BC E4 05 F1 | 	add	objptr, ##35004
1f3e0     F2 FA 61 FC | 	wrlong	result1, objptr
1f3e4     44 00 00 FF 
1f3e8     BC E4 85 F1 | 	sub	objptr, ##35004
1f3ec     F2 FA 01 F6 | 	mov	result1, objptr
1f3f0     00 68 03 FF 
1f3f4     00 FA 45 F5 | 	or	result1, ##114294784
1f3f8     44 00 00 FF 
1f3fc     C0 E4 05 F1 | 	add	objptr, ##35008
1f400     F2 FA 61 FC | 	wrlong	result1, objptr
1f404     44 00 00 FF 
1f408     C0 E4 85 F1 | 	sub	objptr, ##35008
1f40c     F2 FA 01 F6 | 	mov	result1, objptr
1f410     00 70 03 FF 
1f414     00 FA 45 F5 | 	or	result1, ##115343360
1f418     44 00 00 FF 
1f41c     C4 E4 05 F1 | 	add	objptr, ##35012
1f420     F2 FA 61 FC | 	wrlong	result1, objptr
1f424     44 00 00 FF 
1f428     C4 E4 85 F1 | 	sub	objptr, ##35012
1f42c     F2 FA 01 F6 | 	mov	result1, objptr
1f430     00 78 03 FF 
1f434     00 FA 45 F5 | 	or	result1, ##116391936
1f438     44 00 00 FF 
1f43c     C8 E4 05 F1 | 	add	objptr, ##35016
1f440     F2 FA 61 FC | 	wrlong	result1, objptr
1f444     44 00 00 FF 
1f448     C8 E4 85 F1 | 	sub	objptr, ##35016
1f44c     F2 FA 01 F6 | 	mov	result1, objptr
1f450     00 08 01 FF 
1f454     00 FA 45 F5 | 	or	result1, ##34603008
1f458     44 00 00 FF 
1f45c     CC E4 05 F1 | 	add	objptr, ##35020
1f460     F2 FA 61 FC | 	wrlong	result1, objptr
1f464     44 00 00 FF 
1f468     CC E4 85 F1 | 	sub	objptr, ##35020
1f46c     F2 FA 01 F6 | 	mov	result1, objptr
1f470     58 FA 25 F4 | 	bith	result1, #88
1f474     44 00 00 FF 
1f478     D0 E4 05 F1 | 	add	objptr, ##35024
1f47c     F2 FA 61 FC | 	wrlong	result1, objptr
1f480     44 00 00 FF 
1f484     D0 E4 85 F1 | 	sub	objptr, ##35024
1f488     F2 FA 01 F6 | 	mov	result1, objptr
1f48c     00 88 03 FF 
1f490     00 FA 45 F5 | 	or	result1, ##118489088
1f494     44 00 00 FF 
1f498     B0 E4 05 F1 | 	add	objptr, ##34992
1f49c     F2 FA 61 FC | 	wrlong	result1, objptr
1f4a0     44 00 00 FF 
1f4a4     B0 E4 85 F1 | 	sub	objptr, ##34992
1f4a8     F2 FA 01 F6 | 	mov	result1, objptr
1f4ac     00 90 03 FF 
1f4b0     00 FA 45 F5 | 	or	result1, ##119537664
1f4b4     43 00 00 FF 
1f4b8     A8 E4 05 F1 | 	add	objptr, ##34472
1f4bc     F2 FA 61 FC | 	wrlong	result1, objptr
1f4c0     43 00 00 FF 
1f4c4     A8 E4 85 F1 | 	sub	objptr, ##34472
1f4c8     F2 FA 01 F6 | 	mov	result1, objptr
1f4cc     00 98 03 FF 
1f4d0     00 FA 45 F5 | 	or	result1, ##120586240
1f4d4     44 00 00 FF 
1f4d8     D4 E4 05 F1 | 	add	objptr, ##35028
1f4dc     F2 FA 61 FC | 	wrlong	result1, objptr
1f4e0     44 00 00 FF 
1f4e4     D4 E4 85 F1 | 	sub	objptr, ##35028
1f4e8     F2 FA 01 F6 | 	mov	result1, objptr
1f4ec     00 A0 03 FF 
1f4f0     00 FA 45 F5 | 	or	result1, ##121634816
1f4f4     44 00 00 FF 
1f4f8     D8 E4 05 F1 | 	add	objptr, ##35032
1f4fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f500     44 00 00 FF 
1f504     D8 E4 85 F1 | 	sub	objptr, ##35032
1f508     F2 FA 01 F6 | 	mov	result1, objptr
1f50c     00 A8 03 FF 
1f510     00 FA 45 F5 | 	or	result1, ##122683392
1f514     44 00 00 FF 
1f518     EC E4 05 F1 | 	add	objptr, ##35052
1f51c     F2 FA 61 FC | 	wrlong	result1, objptr
1f520     44 00 00 FF 
1f524     EC E4 85 F1 | 	sub	objptr, ##35052
1f528     F2 FA 01 F6 | 	mov	result1, objptr
1f52c     00 B0 03 FF 
1f530     00 FA 45 F5 | 	or	result1, ##123731968
1f534     44 00 00 FF 
1f538     E8 E4 05 F1 | 	add	objptr, ##35048
1f53c     F2 FA 61 FC | 	wrlong	result1, objptr
1f540     44 00 00 FF 
1f544     E8 E4 85 F1 | 	sub	objptr, ##35048
1f548     F2 FA 01 F6 | 	mov	result1, objptr
1f54c     00 B8 03 FF 
1f550     00 FA 45 F5 | 	or	result1, ##124780544
1f554     44 00 00 FF 
1f558     E0 E4 05 F1 | 	add	objptr, ##35040
1f55c     F2 FA 61 FC | 	wrlong	result1, objptr
1f560     44 00 00 FF 
1f564     E0 E4 85 F1 | 	sub	objptr, ##35040
1f568     F2 FA 01 F6 | 	mov	result1, objptr
1f56c     77 FA 25 F4 | 	bith	result1, #119
1f570     44 00 00 FF 
1f574     DC E4 05 F1 | 	add	objptr, ##35036
1f578     F2 FA 61 FC | 	wrlong	result1, objptr
1f57c     44 00 00 FF 
1f580     DC E4 85 F1 | 	sub	objptr, ##35036
1f584     F2 FA 01 F6 | 	mov	result1, objptr
1f588     00 C8 03 FF 
1f58c     00 FA 45 F5 | 	or	result1, ##126877696
1f590     44 00 00 FF 
1f594     FC E4 05 F1 | 	add	objptr, ##35068
1f598     F2 FA 61 FC | 	wrlong	result1, objptr
1f59c     44 00 00 FF 
1f5a0     FC E4 85 F1 | 	sub	objptr, ##35068
1f5a4     F2 FA 01 F6 | 	mov	result1, objptr
1f5a8     00 D0 03 FF 
1f5ac     00 FA 45 F5 | 	or	result1, ##127926272
1f5b0     44 00 00 FF 
1f5b4     F0 E4 05 F1 | 	add	objptr, ##35056
1f5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1f5bc     44 00 00 FF 
1f5c0     F0 E4 85 F1 | 	sub	objptr, ##35056
1f5c4     F2 FA 01 F6 | 	mov	result1, objptr
1f5c8     00 D8 03 FF 
1f5cc     00 FA 45 F5 | 	or	result1, ##128974848
1f5d0     44 00 00 FF 
1f5d4     F4 E4 05 F1 | 	add	objptr, ##35060
1f5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1f5dc     44 00 00 FF 
1f5e0     F4 E4 85 F1 | 	sub	objptr, ##35060
1f5e4     F2 FA 01 F6 | 	mov	result1, objptr
1f5e8     96 FA 25 F4 | 	bith	result1, #150
1f5ec     44 00 00 FF 
1f5f0     F8 E4 05 F1 | 	add	objptr, ##35064
1f5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1f5f8     44 00 00 FF 
1f5fc     F8 E4 85 F1 | 	sub	objptr, ##35064
1f600     F2 FA 01 F6 | 	mov	result1, objptr
1f604     00 E8 03 FF 
1f608     00 FA 45 F5 | 	or	result1, ##131072000
1f60c     44 00 00 FF 
1f610     00 E5 05 F1 | 	add	objptr, ##35072
1f614     F2 FA 61 FC | 	wrlong	result1, objptr
1f618     44 00 00 FF 
1f61c     00 E5 85 F1 | 	sub	objptr, ##35072
1f620     F2 FA 01 F6 | 	mov	result1, objptr
1f624     B5 FA 25 F4 | 	bith	result1, #181
1f628     44 00 00 FF 
1f62c     04 E5 05 F1 | 	add	objptr, ##35076
1f630     F2 FA 61 FC | 	wrlong	result1, objptr
1f634     44 00 00 FF 
1f638     04 E5 85 F1 | 	sub	objptr, ##35076
1f63c     F2 FA 01 F6 | 	mov	result1, objptr
1f640     D4 FA 25 F4 | 	bith	result1, #212
1f644     44 00 00 FF 
1f648     08 E5 05 F1 | 	add	objptr, ##35080
1f64c     F2 FA 61 FC | 	wrlong	result1, objptr
1f650     44 00 00 FF 
1f654     08 E5 85 F1 | 	sub	objptr, ##35080
1f658     F2 FA 01 F6 | 	mov	result1, objptr
1f65c     1B FA 25 F4 | 	bith	result1, #27
1f660     44 00 00 FF 
1f664     0C E5 05 F1 | 	add	objptr, ##35084
1f668     F2 FA 61 FC | 	wrlong	result1, objptr
1f66c     44 00 00 FF 
1f670     0C E5 85 F1 | 	sub	objptr, ##35084
1f674     F2 FA 01 F6 | 	mov	result1, objptr
1f678     00 08 04 FF 
1f67c     00 FA 45 F5 | 	or	result1, ##135266304
1f680     44 00 00 FF 
1f684     10 E5 05 F1 | 	add	objptr, ##35088
1f688     F2 FA 61 FC | 	wrlong	result1, objptr
1f68c     44 00 00 FF 
1f690     10 E5 85 F1 | 	sub	objptr, ##35088
1f694     F2 FA 01 F6 | 	mov	result1, objptr
1f698     00 10 04 FF 
1f69c     00 FA 45 F5 | 	or	result1, ##136314880
1f6a0     44 00 00 FF 
1f6a4     14 E5 05 F1 | 	add	objptr, ##35092
1f6a8     F2 FA 61 FC | 	wrlong	result1, objptr
1f6ac     44 00 00 FF 
1f6b0     14 E5 85 F1 | 	sub	objptr, ##35092
1f6b4     F2 FA 01 F6 | 	mov	result1, objptr
1f6b8     00 18 04 FF 
1f6bc     00 FA 45 F5 | 	or	result1, ##137363456
1f6c0     44 00 00 FF 
1f6c4     1C E5 05 F1 | 	add	objptr, ##35100
1f6c8     F2 FA 61 FC | 	wrlong	result1, objptr
1f6cc     44 00 00 FF 
1f6d0     1C E5 85 F1 | 	sub	objptr, ##35100
1f6d4     F2 FA 01 F6 | 	mov	result1, objptr
1f6d8     00 20 04 FF 
1f6dc     00 FA 45 F5 | 	or	result1, ##138412032
1f6e0     44 00 00 FF 
1f6e4     20 E5 05 F1 | 	add	objptr, ##35104
1f6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1f6ec     44 00 00 FF 
1f6f0     20 E5 85 F1 | 	sub	objptr, ##35104
1f6f4     F2 FA 01 F6 | 	mov	result1, objptr
1f6f8     00 28 04 FF 
1f6fc     00 FA 45 F5 | 	or	result1, ##139460608
1f700     44 00 00 FF 
1f704     24 E5 05 F1 | 	add	objptr, ##35108
1f708     F2 FA 61 FC | 	wrlong	result1, objptr
1f70c     44 00 00 FF 
1f710     24 E5 85 F1 | 	sub	objptr, ##35108
1f714     F2 FA 01 F6 | 	mov	result1, objptr
1f718     00 30 04 FF 
1f71c     00 FA 45 F5 | 	or	result1, ##140509184
1f720     44 00 00 FF 
1f724     18 E5 05 F1 | 	add	objptr, ##35096
1f728     F2 FA 61 FC | 	wrlong	result1, objptr
1f72c     44 00 00 FF 
1f730     18 E5 85 F1 | 	sub	objptr, ##35096
1f734     F2 FA 01 F6 | 	mov	result1, objptr
1f738     00 38 04 FF 
1f73c     00 FA 45 F5 | 	or	result1, ##141557760
1f740     44 00 00 FF 
1f744     28 E5 05 F1 | 	add	objptr, ##35112
1f748     F2 FA 61 FC | 	wrlong	result1, objptr
1f74c     44 00 00 FF 
1f750     28 E5 85 F1 | 	sub	objptr, ##35112
1f754     F2 FA 01 F6 | 	mov	result1, objptr
1f758     00 40 04 FF 
1f75c     00 FA 45 F5 | 	or	result1, ##142606336
1f760     44 00 00 FF 
1f764     5C E5 05 F1 | 	add	objptr, ##35164
1f768     F2 FA 61 FC | 	wrlong	result1, objptr
1f76c     44 00 00 FF 
1f770     5C E5 85 F1 | 	sub	objptr, ##35164
1f774     F2 FA 01 F6 | 	mov	result1, objptr
1f778     00 48 04 FF 
1f77c     00 FA 45 F5 | 	or	result1, ##143654912
1f780     44 00 00 FF 
1f784     54 E5 05 F1 | 	add	objptr, ##35156
1f788     F2 FA 61 FC | 	wrlong	result1, objptr
1f78c     44 00 00 FF 
1f790     54 E5 85 F1 | 	sub	objptr, ##35156
1f794     F2 FA 01 F6 | 	mov	result1, objptr
1f798     00 50 04 FF 
1f79c     00 FA 45 F5 | 	or	result1, ##144703488
1f7a0     44 00 00 FF 
1f7a4     2C E5 05 F1 | 	add	objptr, ##35116
1f7a8     F2 FA 61 FC | 	wrlong	result1, objptr
1f7ac     44 00 00 FF 
1f7b0     2C E5 85 F1 | 	sub	objptr, ##35116
1f7b4     F2 FA 01 F6 | 	mov	result1, objptr
1f7b8     00 58 04 FF 
1f7bc     00 FA 45 F5 | 	or	result1, ##145752064
1f7c0     44 00 00 FF 
1f7c4     30 E5 05 F1 | 	add	objptr, ##35120
1f7c8     F2 FA 61 FC | 	wrlong	result1, objptr
1f7cc     44 00 00 FF 
1f7d0     30 E5 85 F1 | 	sub	objptr, ##35120
1f7d4     F2 FA 01 F6 | 	mov	result1, objptr
1f7d8     00 60 04 FF 
1f7dc     00 FA 45 F5 | 	or	result1, ##146800640
1f7e0     44 00 00 FF 
1f7e4     4C E5 05 F1 | 	add	objptr, ##35148
1f7e8     F2 FA 61 FC | 	wrlong	result1, objptr
1f7ec     44 00 00 FF 
1f7f0     4C E5 85 F1 | 	sub	objptr, ##35148
1f7f4     F2 FA 01 F6 | 	mov	result1, objptr
1f7f8     00 68 04 FF 
1f7fc     00 FA 45 F5 | 	or	result1, ##147849216
1f800     44 00 00 FF 
1f804     50 E5 05 F1 | 	add	objptr, ##35152
1f808     F2 FA 61 FC | 	wrlong	result1, objptr
1f80c     44 00 00 FF 
1f810     50 E5 85 F1 | 	sub	objptr, ##35152
1f814     F2 FA 01 F6 | 	mov	result1, objptr
1f818     00 70 04 FF 
1f81c     00 FA 45 F5 | 	or	result1, ##148897792
1f820     44 00 00 FF 
1f824     6C E5 05 F1 | 	add	objptr, ##35180
1f828     F2 FA 61 FC | 	wrlong	result1, objptr
1f82c     44 00 00 FF 
1f830     6C E5 85 F1 | 	sub	objptr, ##35180
1f834     F2 FA 01 F6 | 	mov	result1, objptr
1f838     00 78 04 FF 
1f83c     00 FA 45 F5 | 	or	result1, ##149946368
1f840     44 00 00 FF 
1f844     68 E5 05 F1 | 	add	objptr, ##35176
1f848     F2 FA 61 FC | 	wrlong	result1, objptr
1f84c     44 00 00 FF 
1f850     68 E5 85 F1 | 	sub	objptr, ##35176
1f854     F2 FA 01 F6 | 	mov	result1, objptr
1f858     00 80 04 FF 
1f85c     00 FA 45 F5 | 	or	result1, ##150994944
1f860     44 00 00 FF 
1f864     78 E5 05 F1 | 	add	objptr, ##35192
1f868     F2 FA 61 FC | 	wrlong	result1, objptr
1f86c     44 00 00 FF 
1f870     78 E5 85 F1 | 	sub	objptr, ##35192
1f874     F2 FA 01 F6 | 	mov	result1, objptr
1f878     00 88 04 FF 
1f87c     00 FA 45 F5 | 	or	result1, ##152043520
1f880     44 00 00 FF 
1f884     44 E5 05 F1 | 	add	objptr, ##35140
1f888     F2 FA 61 FC | 	wrlong	result1, objptr
1f88c     44 00 00 FF 
1f890     44 E5 85 F1 | 	sub	objptr, ##35140
1f894     F2 FA 01 F6 | 	mov	result1, objptr
1f898     00 90 04 FF 
1f89c     00 FA 45 F5 | 	or	result1, ##153092096
1f8a0     44 00 00 FF 
1f8a4     74 E5 05 F1 | 	add	objptr, ##35188
1f8a8     F2 FA 61 FC | 	wrlong	result1, objptr
1f8ac     44 00 00 FF 
1f8b0     74 E5 85 F1 | 	sub	objptr, ##35188
1f8b4     F2 FA 01 F6 | 	mov	result1, objptr
1f8b8     00 98 04 FF 
1f8bc     00 FA 45 F5 | 	or	result1, ##154140672
1f8c0     44 00 00 FF 
1f8c4     64 E5 05 F1 | 	add	objptr, ##35172
1f8c8     F2 FA 61 FC | 	wrlong	result1, objptr
1f8cc     44 00 00 FF 
1f8d0     64 E5 85 F1 | 	sub	objptr, ##35172
1f8d4     F2 FA 01 F6 | 	mov	result1, objptr
1f8d8     00 A0 04 FF 
1f8dc     00 FA 45 F5 | 	or	result1, ##155189248
1f8e0     43 00 00 FF 
1f8e4     14 E5 05 F1 | 	add	objptr, ##34580
1f8e8     F2 FA 61 FC | 	wrlong	result1, objptr
1f8ec     43 00 00 FF 
1f8f0     14 E5 85 F1 | 	sub	objptr, ##34580
1f8f4     F2 FA 01 F6 | 	mov	result1, objptr
1f8f8     00 A8 04 FF 
1f8fc     00 FA 45 F5 | 	or	result1, ##156237824
1f900     44 00 00 FF 
1f904     34 E5 05 F1 | 	add	objptr, ##35124
1f908     F2 FA 61 FC | 	wrlong	result1, objptr
1f90c     44 00 00 FF 
1f910     34 E5 85 F1 | 	sub	objptr, ##35124
1f914     F2 FA 01 F6 | 	mov	result1, objptr
1f918     00 08 01 FF 
1f91c     00 FA 45 F5 | 	or	result1, ##34603008
1f920     44 00 00 FF 
1f924     3C E5 05 F1 | 	add	objptr, ##35132
1f928     F2 FA 61 FC | 	wrlong	result1, objptr
1f92c     44 00 00 FF 
1f930     3C E5 85 F1 | 	sub	objptr, ##35132
1f934     F2 FA 01 F6 | 	mov	result1, objptr
1f938     00 B0 04 FF 
1f93c     00 FA 45 F5 | 	or	result1, ##157286400
1f940     44 00 00 FF 
1f944     38 E5 05 F1 | 	add	objptr, ##35128
1f948     F2 FA 61 FC | 	wrlong	result1, objptr
1f94c     44 00 00 FF 
1f950     38 E5 85 F1 | 	sub	objptr, ##35128
1f954     F2 FA 01 F6 | 	mov	result1, objptr
1f958     00 B8 04 FF 
1f95c     00 FA 45 F5 | 	or	result1, ##158334976
1f960     44 00 00 FF 
1f964     7C E5 05 F1 | 	add	objptr, ##35196
1f968     F2 FA 61 FC | 	wrlong	result1, objptr
1f96c     44 00 00 FF 
1f970     7C E5 85 F1 | 	sub	objptr, ##35196
1f974                 | _init_commands_ret
1f974     2D 00 64 FD | 	ret
1f978                 | 
1f978                 | ' 
1f978                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1f978                 | ' 
1f978                 | ' sub init_audio
1f978                 | _init_audio
1f978     06 4A 05 F6 | 	mov	COUNT_, #6
1f97c     A8 00 A0 FD | 	call	#pushregs_
1f980     00 C0 1F FF 
1f984     00 26 06 F6 | 	mov	local01, ##1065353216
1f988                 | ' 
1f988                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1f988     00 28 06 F6 | 	mov	local02, #0
1f98c                 | LR__2480
1f98c     14 2B 02 F6 | 	mov	local03, local02
1f990     01 2A 66 F0 | 	shl	local03, #1
1f994     58 7F 23 FF 
1f998     00 2C 06 F6 | 	mov	local04, ##1191096320
1f99c     14 13 52 F6 | 	abs	arg01, local02 wc
1f9a0     1F 2E C6 C9 |  if_b	decod	local05, #31
1f9a4     00 2E 06 36 |  if_ae	mov	local05, #0
1f9a8     DC 6F B0 FD | 	call	#__system___float_fromuns
1f9ac     17 FB 61 F5 | 	xor	result1, local05
1f9b0     FD 12 02 F6 | 	mov	arg01, result1
1f9b4     87 24 20 FF 
1f9b8     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f9bc     CC 73 B0 FD | 	call	#__system___float_mul
1f9c0     FD 12 02 F6 | 	mov	arg01, result1
1f9c4     00 00 22 FF 
1f9c8     00 14 06 F6 | 	mov	arg02, ##1140850688
1f9cc     C0 75 B0 FD | 	call	#__system___float_div
1f9d0     FD 12 02 F6 | 	mov	arg01, result1
1f9d4     14 7D B0 FD | 	call	#__system____builtin_sinf
1f9d8     FD 14 02 F6 | 	mov	arg02, result1
1f9dc     16 13 02 F6 | 	mov	arg01, local04
1f9e0     A8 73 B0 FD | 	call	#__system___float_mul
1f9e4     FD 12 02 F6 | 	mov	arg01, result1
1f9e8     01 14 06 F6 | 	mov	arg02, #1
1f9ec     64 78 B0 FD | 	call	#__system___float_tointeger
1f9f0     FD 14 02 F6 | 	mov	arg02, result1
1f9f4     15 13 02 F6 | 	mov	arg01, local03
1f9f8     5C 0D B0 FD | 	call	#_psdpoke
1f9fc     01 28 06 F1 | 	add	local02, #1
1fa00     02 00 00 FF 
1fa04     00 28 56 F2 | 	cmps	local02, ##1024 wc
1fa08     80 FF 9F CD |  if_b	jmp	#LR__2480
1fa0c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1fa0c     00 28 06 F6 | 	mov	local02, #0
1fa10                 | LR__2481
1fa10     14 15 02 F6 | 	mov	arg02, local02
1fa14     01 14 66 F0 | 	shl	arg02, #1
1fa18     0B 12 C6 F9 | 	decod	arg01, #11
1fa1c     0A 13 02 F1 | 	add	arg01, arg02
1fa20     14 2D 02 F6 | 	mov	local04, local02
1fa24     07 2C 66 F0 | 	shl	local04, #7
1fa28     14 2D 82 F1 | 	sub	local04, local02
1fa2c     C0 FF 7F FF 
1fa30     00 15 06 F6 | 	mov	arg02, ##-32512
1fa34     16 15 02 F1 | 	add	arg02, local04
1fa38     1C 0D B0 FD | 	call	#_psdpoke
1fa3c     09 2C C6 F9 | 	decod	local04, #9
1fa40     14 2D 02 F1 | 	add	local04, local02
1fa44     01 2C 66 F0 | 	shl	local04, #1
1fa48     0B 12 C6 F9 | 	decod	arg01, #11
1fa4c     16 13 02 F1 | 	add	arg01, local04
1fa50     14 2F 02 F6 | 	mov	local05, local02
1fa54     07 2E 66 F0 | 	shl	local05, #7
1fa58     14 2F 82 F1 | 	sub	local05, local02
1fa5c     3F 00 00 FF 
1fa60     00 15 06 F6 | 	mov	arg02, ##32512
1fa64     17 15 82 F1 | 	sub	arg02, local05
1fa68     EC 0C B0 FD | 	call	#_psdpoke
1fa6c     01 28 06 F1 | 	add	local02, #1
1fa70     01 00 00 FF 
1fa74     00 28 56 F2 | 	cmps	local02, ##512 wc
1fa78     94 FF 9F CD |  if_b	jmp	#LR__2481
1fa7c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1fa7c     00 28 06 F6 | 	mov	local02, #0
1fa80                 | LR__2482
1fa80     14 2F 02 F6 | 	mov	local05, local02
1fa84     01 2E 66 F0 | 	shl	local05, #1
1fa88     0C 12 C6 F9 | 	decod	arg01, #12
1fa8c     17 13 02 F1 | 	add	arg01, local05
1fa90     14 2F 02 F6 | 	mov	local05, local02
1fa94     06 2E 66 F0 | 	shl	local05, #6
1fa98     14 2F 82 F1 | 	sub	local05, local02
1fa9c     C1 FF 7F FF 
1faa0     00 14 06 F6 | 	mov	arg02, ##-32256
1faa4     17 15 02 F1 | 	add	arg02, local05
1faa8     AC 0C B0 FD | 	call	#_psdpoke
1faac     01 28 06 F1 | 	add	local02, #1
1fab0     02 00 00 FF 
1fab4     00 28 56 F2 | 	cmps	local02, ##1024 wc
1fab8     C4 FF 9F CD |  if_b	jmp	#LR__2482
1fabc                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1fabc     00 28 06 F6 | 	mov	local02, #0
1fac0                 | LR__2483
1fac0     14 2F 02 F6 | 	mov	local05, local02
1fac4     01 2E 66 F0 | 	shl	local05, #1
1fac8     0C 00 00 FF 
1facc     00 12 06 F6 | 	mov	arg01, ##6144
1fad0     17 13 02 F1 | 	add	arg01, local05
1fad4     C0 FF 7F FF 
1fad8     A8 14 06 F6 | 	mov	arg02, ##-32600
1fadc     78 0C B0 FD | 	call	#_psdpoke
1fae0     01 28 06 F1 | 	add	local02, #1
1fae4     80 28 56 F2 | 	cmps	local02, #128 wc
1fae8     D4 FF 9F CD |  if_b	jmp	#LR__2483
1faec     80 28 06 F6 | 	mov	local02, #128
1faf0                 | LR__2484
1faf0     14 2F 02 F6 | 	mov	local05, local02
1faf4     01 2E 66 F0 | 	shl	local05, #1
1faf8     0C 00 00 FF 
1fafc     00 12 06 F6 | 	mov	arg01, ##6144
1fb00     17 13 02 F1 | 	add	arg01, local05
1fb04     3F 00 00 FF 
1fb08     58 15 06 F6 | 	mov	arg02, ##32600
1fb0c     48 0C B0 FD | 	call	#_psdpoke
1fb10     01 28 06 F1 | 	add	local02, #1
1fb14     02 00 00 FF 
1fb18     00 28 16 F2 | 	cmp	local02, ##1024 wc
1fb1c     D0 FF 9F CD |  if_b	jmp	#LR__2484
1fb20                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1fb20     00 28 06 F6 | 	mov	local02, #0
1fb24                 | LR__2485
1fb24     14 2F 02 F6 | 	mov	local05, local02
1fb28     01 2E 66 F0 | 	shl	local05, #1
1fb2c     0D 12 C6 F9 | 	decod	arg01, #13
1fb30     17 13 02 F1 | 	add	arg01, local05
1fb34     C0 FF 7F FF 
1fb38     A8 14 06 F6 | 	mov	arg02, ##-32600
1fb3c     18 0C B0 FD | 	call	#_psdpoke
1fb40     01 28 06 F1 | 	add	local02, #1
1fb44     01 00 00 FF 
1fb48     00 28 56 F2 | 	cmps	local02, ##512 wc
1fb4c     D4 FF 9F CD |  if_b	jmp	#LR__2485
1fb50     09 28 C6 F9 | 	decod	local02, #9
1fb54                 | LR__2486
1fb54     14 2F 02 F6 | 	mov	local05, local02
1fb58     01 2E 66 F0 | 	shl	local05, #1
1fb5c     0D 12 C6 F9 | 	decod	arg01, #13
1fb60     17 13 02 F1 | 	add	arg01, local05
1fb64     3F 00 00 FF 
1fb68     58 15 06 F6 | 	mov	arg02, ##32600
1fb6c     E8 0B B0 FD | 	call	#_psdpoke
1fb70     01 28 06 F1 | 	add	local02, #1
1fb74     02 00 00 FF 
1fb78     00 28 16 F2 | 	cmp	local02, ##1024 wc
1fb7c     D4 FF 9F CD |  if_b	jmp	#LR__2486
1fb80                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1fb80     00 28 06 F6 | 	mov	local02, #0
1fb84                 | LR__2487
1fb84     14 2F 02 F6 | 	mov	local05, local02
1fb88     01 2E 66 F0 | 	shl	local05, #1
1fb8c     14 00 00 FF 
1fb90     00 12 06 F6 | 	mov	arg01, ##10240
1fb94     17 13 02 F1 | 	add	arg01, local05
1fb98     C0 FF 7F FF 
1fb9c     A8 14 06 F6 | 	mov	arg02, ##-32600
1fba0     B4 0B B0 FD | 	call	#_psdpoke
1fba4     01 28 06 F1 | 	add	local02, #1
1fba8     00 29 56 F2 | 	cmps	local02, #256 wc
1fbac     D4 FF 9F CD |  if_b	jmp	#LR__2487
1fbb0     00 29 06 F6 | 	mov	local02, #256
1fbb4                 | LR__2488
1fbb4     14 2F 02 F6 | 	mov	local05, local02
1fbb8     01 2E 66 F0 | 	shl	local05, #1
1fbbc     14 00 00 FF 
1fbc0     00 12 06 F6 | 	mov	arg01, ##10240
1fbc4     17 13 02 F1 | 	add	arg01, local05
1fbc8     3F 00 00 FF 
1fbcc     58 15 06 F6 | 	mov	arg02, ##32600
1fbd0     84 0B B0 FD | 	call	#_psdpoke
1fbd4     01 28 06 F1 | 	add	local02, #1
1fbd8     02 00 00 FF 
1fbdc     00 28 16 F2 | 	cmp	local02, ##1024 wc
1fbe0     D0 FF 9F CD |  if_b	jmp	#LR__2488
1fbe4                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1fbe4     18 00 00 FF 
1fbe8     00 28 06 F6 | 	mov	local02, ##12288
1fbec                 | LR__2489
1fbec     14 13 02 F6 | 	mov	arg01, local02
1fbf0     00 14 06 F6 | 	mov	arg02, #0
1fbf4     18 0B B0 FD | 	call	#_pslpoke
1fbf8     04 28 06 F1 | 	add	local02, #4
1fbfc     77 00 00 FF 
1fc00     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1fc04     E4 FF 9F CD |  if_b	jmp	#LR__2489
1fc08                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1fc08     00 28 06 F6 | 	mov	local02, #0
1fc0c                 | LR__2490
1fc0c     14 2F 02 F6 | 	mov	local05, local02
1fc10     01 2E 66 F0 | 	shl	local05, #1
1fc14     78 00 00 FF 
1fc18     00 2A 06 F6 | 	mov	local03, ##61440
1fc1c     17 2B 02 F1 | 	add	local03, local05
1fc20     12 00 00 FF 
1fc24     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1fc28     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1fc2c     12 00 00 FF 
1fc30     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1fc34     10 12 06 F1 | 	add	arg01, #16
1fc38     14 15 02 F6 | 	mov	arg02, local02
1fc3c     01 14 66 F0 | 	shl	arg02, #1
1fc40     0A 13 02 F1 | 	add	arg01, arg02
1fc44     09 15 E2 FA | 	rdword	arg02, arg01
1fc48     15 13 02 F6 | 	mov	arg01, local03
1fc4c     08 0B B0 FD | 	call	#_psdpoke
1fc50     01 28 06 F1 | 	add	local02, #1
1fc54     02 00 00 FF 
1fc58     00 28 56 F2 | 	cmps	local02, ##1024 wc
1fc5c     AC FF 9F CD |  if_b	jmp	#LR__2490
1fc60                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1fc60     00 28 06 F6 | 	mov	local02, #0
1fc64                 | LR__2491
1fc64     14 2F 02 F6 | 	mov	local05, local02
1fc68     01 2E 66 F0 | 	shl	local05, #1
1fc6c     7C 00 00 FF 
1fc70     00 2A 06 F6 | 	mov	local03, ##63488
1fc74     17 2B 02 F1 | 	add	local03, local05
1fc78     0E 00 00 FF 
1fc7c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1fc80     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1fc84     0E 00 00 FF 
1fc88     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1fc8c     10 12 06 F1 | 	add	arg01, #16
1fc90     14 15 02 F6 | 	mov	arg02, local02
1fc94     01 14 66 F0 | 	shl	arg02, #1
1fc98     0A 13 02 F1 | 	add	arg01, arg02
1fc9c     09 15 E2 FA | 	rdword	arg02, arg01
1fca0     15 13 02 F6 | 	mov	arg01, local03
1fca4     B0 0A B0 FD | 	call	#_psdpoke
1fca8     01 28 06 F1 | 	add	local02, #1
1fcac     02 00 00 FF 
1fcb0     00 28 56 F2 | 	cmps	local02, ##1024 wc
1fcb4     AC FF 9F CD |  if_b	jmp	#LR__2491
1fcb8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1fcb8     00 28 06 F6 | 	mov	local02, #0
1fcbc     0C 00 00 FF 
1fcc0     D8 E4 05 F1 | 	add	objptr, ##6360
1fcc4     97 18 48 FB | 	callpa	#(@LR__2493-@LR__2492)>>2,fcache_load_ptr_
1fcc8                 | LR__2492
1fcc8     14 2F 02 F6 | 	mov	local05, local02
1fccc     01 2E 66 F0 | 	shl	local05, #1
1fcd0     F2 2E 02 F1 | 	add	local05, objptr
1fcd4     14 2B 02 F6 | 	mov	local03, local02
1fcd8     08 2A 66 F0 | 	shl	local03, #8
1fcdc     7F 00 00 FF 
1fce0     00 31 06 F6 | 	mov	local06, ##65280
1fce4     15 31 82 F1 | 	sub	local06, local03
1fce8     17 31 52 FC | 	wrword	local06, local05
1fcec     01 28 06 F1 | 	add	local02, #1
1fcf0     00 29 56 F2 | 	cmps	local02, #256 wc
1fcf4     D0 FF 9F CD |  if_b	jmp	#LR__2492
1fcf8                 | LR__2493
1fcf8     0C 00 00 FF 
1fcfc     D8 E4 85 F1 | 	sub	objptr, ##6360
1fd00                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1fd00     00 28 06 F6 | 	mov	local02, #0
1fd04                 | LR__2494
1fd04     14 2F 02 F6 | 	mov	local05, local02
1fd08     01 2E 66 F0 | 	shl	local05, #1
1fd0c     0D 00 00 FF 
1fd10     D8 E4 05 F1 | 	add	objptr, ##6872
1fd14     F2 2E 02 F1 | 	add	local05, objptr
1fd18     80 BF 23 FF 
1fd1c     00 12 06 F6 | 	mov	arg01, ##1199505408
1fd20     13 15 02 F6 | 	mov	arg02, local01
1fd24     0D 00 00 FF 
1fd28     D8 E4 85 F1 | 	sub	objptr, ##6872
1fd2c     5C 70 B0 FD | 	call	#__system___float_mul
1fd30     FD 12 02 F6 | 	mov	arg01, result1
1fd34     01 14 06 F6 | 	mov	arg02, #1
1fd38     18 75 B0 FD | 	call	#__system___float_tointeger
1fd3c     17 FB 51 FC | 	wrword	result1, local05
1fd40     13 13 02 F6 | 	mov	arg01, local01
1fd44     CC BC 1F FF 
1fd48     9A 15 06 F6 | 	mov	arg02, ##1064933786
1fd4c     3C 70 B0 FD | 	call	#__system___float_mul
1fd50     FD 26 02 F6 | 	mov	local01, result1
1fd54     01 28 06 F1 | 	add	local02, #1
1fd58     00 29 56 F2 | 	cmps	local02, #256 wc
1fd5c     A4 FF 9F CD |  if_b	jmp	#LR__2494
1fd60     0E 00 00 FF 
1fd64     D6 E4 05 F1 | 	add	objptr, ##7382
1fd68     F2 00 58 FC | 	wrword	#0, objptr
1fd6c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1fd6c     00 28 06 F6 | 	mov	local02, #0
1fd70     02 E4 05 F1 | 	add	objptr, #2
1fd74     97 10 48 FB | 	callpa	#(@LR__2496-@LR__2495)>>2,fcache_load_ptr_
1fd78                 | LR__2495
1fd78     14 2F 02 F6 | 	mov	local05, local02
1fd7c     01 2E 66 F0 | 	shl	local05, #1
1fd80     F2 2E 02 F1 | 	add	local05, objptr
1fd84     7F 00 80 FF 
1fd88     17 01 5A FC | 	wrword	##65280, local05
1fd8c     01 28 06 F1 | 	add	local02, #1
1fd90     FF 28 56 F2 | 	cmps	local02, #255 wc
1fd94     E0 FF 9F CD |  if_b	jmp	#LR__2495
1fd98                 | LR__2496
1fd98     FE E5 05 F1 | 	add	objptr, #510
1fd9c     F2 00 58 FC | 	wrword	#0, objptr
1fda0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1fda0     00 28 06 F6 | 	mov	local02, #0
1fda4     02 E4 05 F1 | 	add	objptr, #2
1fda8     97 52 48 FB | 	callpa	#(@LR__2501-@LR__2497)>>2,fcache_load_ptr_
1fdac                 | LR__2497
1fdac     14 2F 02 F6 | 	mov	local05, local02
1fdb0     01 2E 66 F0 | 	shl	local05, #1
1fdb4     F2 2E 02 F1 | 	add	local05, objptr
1fdb8     14 31 02 F6 | 	mov	local06, local02
1fdbc     0C 30 66 F0 | 	shl	local06, #12
1fdc0     17 31 52 FC | 	wrword	local06, local05
1fdc4     01 28 06 F1 | 	add	local02, #1
1fdc8     10 28 56 F2 | 	cmps	local02, #16 wc
1fdcc     DC FF 9F CD |  if_b	jmp	#LR__2497
1fdd0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1fdd0     10 28 06 F6 | 	mov	local02, #16
1fdd4                 | LR__2498
1fdd4     14 2F 02 F6 | 	mov	local05, local02
1fdd8     01 2E 66 F0 | 	shl	local05, #1
1fddc     F2 2E 02 F1 | 	add	local05, objptr
1fde0     7F 00 80 FF 
1fde4     17 01 5A FC | 	wrword	##65280, local05
1fde8     01 28 06 F1 | 	add	local02, #1
1fdec     F0 28 16 F2 | 	cmp	local02, #240 wc
1fdf0     E0 FF 9F CD |  if_b	jmp	#LR__2498
1fdf4                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1fdf4     F0 28 06 F6 | 	mov	local02, #240
1fdf8                 | LR__2499
1fdf8     14 2F 02 F6 | 	mov	local05, local02
1fdfc     01 2E 66 F0 | 	shl	local05, #1
1fe00     F2 2E 02 F1 | 	add	local05, objptr
1fe04     FF 2A 06 F6 | 	mov	local03, #255
1fe08     14 2B 82 F1 | 	sub	local03, local02
1fe0c     0C 2A 66 F0 | 	shl	local03, #12
1fe10     17 2B 52 FC | 	wrword	local03, local05
1fe14     01 28 06 F1 | 	add	local02, #1
1fe18     00 29 16 F2 | 	cmp	local02, #256 wc
1fe1c     D8 FF 9F CD |  if_b	jmp	#LR__2499
1fe20                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1fe20     00 28 06 F6 | 	mov	local02, #0
1fe24     01 00 00 FF 
1fe28     00 E4 05 F1 | 	add	objptr, ##512
1fe2c                 | LR__2500
1fe2c     14 2F 02 F6 | 	mov	local05, local02
1fe30     01 2E 66 F0 | 	shl	local05, #1
1fe34     F2 2E 02 F1 | 	add	local05, objptr
1fe38     14 31 02 F6 | 	mov	local06, local02
1fe3c     08 30 66 F0 | 	shl	local06, #8
1fe40     17 31 52 FC | 	wrword	local06, local05
1fe44     01 28 06 F1 | 	add	local02, #1
1fe48     00 29 56 F2 | 	cmps	local02, #256 wc
1fe4c     DC FF 9F CD |  if_b	jmp	#LR__2500
1fe50                 | LR__2501
1fe50     FE E5 05 F1 | 	add	objptr, #510
1fe54     F2 00 58 FC | 	wrword	#0, objptr
1fe58                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1fe58     00 28 06 F6 | 	mov	local02, #0
1fe5c     02 E4 05 F1 | 	add	objptr, #2
1fe60     97 6A 48 FB | 	callpa	#(@LR__2506-@LR__2502)>>2,fcache_load_ptr_
1fe64                 | LR__2502
1fe64     14 2F 02 F6 | 	mov	local05, local02
1fe68     01 2E 66 F0 | 	shl	local05, #1
1fe6c     F2 2E 02 F1 | 	add	local05, objptr
1fe70     14 31 02 F6 | 	mov	local06, local02
1fe74     04 30 66 F0 | 	shl	local06, #4
1fe78     14 31 02 F1 | 	add	local06, local02
1fe7c     04 30 66 F0 | 	shl	local06, #4
1fe80     17 31 52 FC | 	wrword	local06, local05
1fe84     01 28 06 F1 | 	add	local02, #1
1fe88     F0 28 56 F2 | 	cmps	local02, #240 wc
1fe8c     D4 FF 9F CD |  if_b	jmp	#LR__2502
1fe90     F0 28 06 F6 | 	mov	local02, #240
1fe94                 | LR__2503
1fe94     14 2F 02 F6 | 	mov	local05, local02
1fe98     01 2E 66 F0 | 	shl	local05, #1
1fe9c     F2 2E 02 F1 | 	add	local05, objptr
1fea0     FF 2A 06 F6 | 	mov	local03, #255
1fea4     14 2B 82 F1 | 	sub	local03, local02
1fea8     0C 2A 66 F0 | 	shl	local03, #12
1feac     17 2B 52 FC | 	wrword	local03, local05
1feb0     01 28 06 F1 | 	add	local02, #1
1feb4     00 29 16 F2 | 	cmp	local02, #256 wc
1feb8     D8 FF 9F CD |  if_b	jmp	#LR__2503
1febc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1febc     00 28 06 F6 | 	mov	local02, #0
1fec0     01 00 00 FF 
1fec4     00 E4 05 F1 | 	add	objptr, ##512
1fec8                 | LR__2504
1fec8     14 2F 02 F6 | 	mov	local05, local02
1fecc     01 2E 66 F0 | 	shl	local05, #1
1fed0     F2 2E 02 F1 | 	add	local05, objptr
1fed4     14 31 02 F6 | 	mov	local06, local02
1fed8     09 30 66 F0 | 	shl	local06, #9
1fedc     17 31 52 FC | 	wrword	local06, local05
1fee0     FF 2E 06 F6 | 	mov	local05, #255
1fee4     14 2F 82 F1 | 	sub	local05, local02
1fee8     01 2E 66 F0 | 	shl	local05, #1
1feec     F2 2E 02 F1 | 	add	local05, objptr
1fef0     14 31 02 F6 | 	mov	local06, local02
1fef4     09 30 66 F0 | 	shl	local06, #9
1fef8     17 31 52 FC | 	wrword	local06, local05
1fefc     01 28 06 F1 | 	add	local02, #1
1ff00     80 28 56 F2 | 	cmps	local02, #128 wc
1ff04     C0 FF 9F CD |  if_b	jmp	#LR__2504
1ff08                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1ff08     00 28 06 F6 | 	mov	local02, #0
1ff0c     01 00 00 FF 
1ff10     00 E4 05 F1 | 	add	objptr, ##512
1ff14                 | LR__2505
1ff14     14 2F 02 F6 | 	mov	local05, local02
1ff18     01 2E 66 F0 | 	shl	local05, #1
1ff1c     F2 2E 02 F1 | 	add	local05, objptr
1ff20     14 31 02 F6 | 	mov	local06, local02
1ff24     0D 30 66 F0 | 	shl	local06, #13
1ff28     17 31 52 FC | 	wrword	local06, local05
1ff2c     01 28 06 F1 | 	add	local02, #1
1ff30     08 28 56 F2 | 	cmps	local02, #8 wc
1ff34     DC FF 9F CD |  if_b	jmp	#LR__2505
1ff38                 | LR__2506
1ff38                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1ff38     08 28 06 F6 | 	mov	local02, #8
1ff3c     97 42 48 FB | 	callpa	#(@LR__2510-@LR__2507)>>2,fcache_load_ptr_
1ff40                 | LR__2507
1ff40     14 2F 02 F6 | 	mov	local05, local02
1ff44     01 2E 66 F0 | 	shl	local05, #1
1ff48     F2 2E 02 F1 | 	add	local05, objptr
1ff4c     14 27 02 F6 | 	mov	local01, local02
1ff50     08 26 86 F1 | 	sub	local01, #8
1ff54     0B 26 66 F0 | 	shl	local01, #11
1ff58     7F 00 00 FF 
1ff5c     00 31 06 F6 | 	mov	local06, ##65280
1ff60     13 31 82 F1 | 	sub	local06, local01
1ff64     17 31 52 FC | 	wrword	local06, local05
1ff68     01 28 06 F1 | 	add	local02, #1
1ff6c     18 28 16 F2 | 	cmp	local02, #24 wc
1ff70     CC FF 9F CD |  if_b	jmp	#LR__2507
1ff74                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1ff74     18 28 06 F6 | 	mov	local02, #24
1ff78                 | LR__2508
1ff78     14 2F 02 F6 | 	mov	local05, local02
1ff7c     01 2E 66 F0 | 	shl	local05, #1
1ff80     F2 2E 02 F1 | 	add	local05, objptr
1ff84     40 00 80 FF 
1ff88     17 01 58 FC | 	wrword	##32768, local05
1ff8c     01 28 06 F1 | 	add	local02, #1
1ff90     81 28 16 F2 | 	cmp	local02, #129 wc
1ff94     E0 FF 9F CD |  if_b	jmp	#LR__2508
1ff98                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1ff98     81 28 06 F6 | 	mov	local02, #129
1ff9c                 | LR__2509
1ff9c     14 2F 02 F6 | 	mov	local05, local02
1ffa0     01 2E 66 F0 | 	shl	local05, #1
1ffa4     F2 2E 02 F1 | 	add	local05, objptr
1ffa8     FF 2A 06 F6 | 	mov	local03, #255
1ffac     14 2B 82 F1 | 	sub	local03, local02
1ffb0     08 2A 66 F0 | 	shl	local03, #8
1ffb4     17 2B 52 FC | 	wrword	local03, local05
1ffb8     01 28 06 F1 | 	add	local02, #1
1ffbc     00 29 16 F2 | 	cmp	local02, #256 wc
1ffc0     D8 FF 9F CD |  if_b	jmp	#LR__2509
1ffc4                 | LR__2510
1ffc4     3E 00 00 FF 
1ffc8     FE E4 05 F1 | 	add	objptr, ##31998
1ffcc     F2 00 59 FC | 	wrword	#128, objptr
1ffd0     51 00 00 FF 
1ffd4     D6 E5 85 F1 | 	sub	objptr, ##41942
1ffd8                 | ' for i=0 to 7
1ffd8     00 28 06 F6 | 	mov	local02, #0
1ffdc     97 8E 48 FB | 	callpa	#(@LR__2512-@LR__2511)>>2,fcache_load_ptr_
1ffe0                 | LR__2511
1ffe0     14 2F 02 F6 | 	mov	local05, local02
1ffe4     01 2E 66 F0 | 	shl	local05, #1
1ffe8     14 2F 02 F1 | 	add	local05, local02
1ffec     03 2E 66 F0 | 	shl	local05, #3
1fff0     14 00 00 FF 
1fff4     38 E5 05 F1 | 	add	objptr, ##10552
1fff8     F2 2E 02 F1 | 	add	local05, objptr
1fffc     00 EE A1 FF 
20000     17 01 68 FC | 	wrlong	##1138491392, local05
20004     14 2F 02 F6 | 	mov	local05, local02
20008     01 2E 66 F0 | 	shl	local05, #1
2000c     14 2F 02 F1 | 	add	local05, local02
20010     03 2E 66 F0 | 	shl	local05, #3
20014     F2 2E 02 F1 | 	add	local05, objptr
20018     04 2E 06 F1 | 	add	local05, #4
2001c     17 29 42 FC | 	wrbyte	local02, local05
20020     14 2F 02 F6 | 	mov	local05, local02
20024     01 2E 66 F0 | 	shl	local05, #1
20028     14 2F 02 F1 | 	add	local05, local02
2002c     03 2E 66 F0 | 	shl	local05, #3
20030     F2 2E 02 F1 | 	add	local05, objptr
20034     05 2E 06 F1 | 	add	local05, #5
20038     17 29 42 FC | 	wrbyte	local02, local05
2003c     14 2F 02 F6 | 	mov	local05, local02
20040     01 2E 66 F0 | 	shl	local05, #1
20044     14 2F 02 F1 | 	add	local05, local02
20048     03 2E 66 F0 | 	shl	local05, #3
2004c     F2 2E 02 F1 | 	add	local05, objptr
20050     06 2E 06 F1 | 	add	local05, #6
20054     17 01 58 FC | 	wrword	#0, local05
20058     14 2F 02 F6 | 	mov	local05, local02
2005c     01 2E 66 F0 | 	shl	local05, #1
20060     14 2F 02 F1 | 	add	local05, local02
20064     03 2E 66 F0 | 	shl	local05, #3
20068     F2 2E 02 F1 | 	add	local05, objptr
2006c     08 2E 06 F1 | 	add	local05, #8
20070     00 C0 9F FF 
20074     17 01 68 FC | 	wrlong	##1065353216, local05
20078     14 2F 02 F6 | 	mov	local05, local02
2007c     01 2E 66 F0 | 	shl	local05, #1
20080     14 2F 02 F1 | 	add	local05, local02
20084     03 2E 66 F0 | 	shl	local05, #3
20088     F2 2E 02 F1 | 	add	local05, objptr
2008c     0C 2E 06 F1 | 	add	local05, #12
20090     00 40 A0 FF 
20094     17 01 68 FC | 	wrlong	##1082130432, local05
20098     14 2F 02 F6 | 	mov	local05, local02
2009c     01 2E 66 F0 | 	shl	local05, #1
200a0     14 2F 02 F1 | 	add	local05, local02
200a4     03 2E 66 F0 | 	shl	local05, #3
200a8     F2 2E 02 F1 | 	add	local05, objptr
200ac     10 2E 06 F1 | 	add	local05, #16
200b0     17 01 68 FC | 	wrlong	#0, local05
200b4     14 2F 02 F6 | 	mov	local05, local02
200b8     01 2E 66 F0 | 	shl	local05, #1
200bc     14 2F 02 F1 | 	add	local05, local02
200c0     03 2E 66 F0 | 	shl	local05, #3
200c4     F2 2E 02 F1 | 	add	local05, objptr
200c8     14 2E 06 F1 | 	add	local05, #20
200cc     17 FF 59 FC | 	wrword	#255, local05
200d0     14 2F 02 F6 | 	mov	local05, local02
200d4     01 2E 66 F0 | 	shl	local05, #1
200d8     3D 00 00 FF 
200dc     90 E4 05 F1 | 	add	objptr, ##31376
200e0     F2 2E 02 F1 | 	add	local05, objptr
200e4     17 FF 59 FC | 	wrword	#255, local05
200e8     01 28 06 F1 | 	add	local02, #1
200ec     08 28 56 F2 | 	cmps	local02, #8 wc
200f0     51 00 00 FF 
200f4     C8 E5 85 F1 | 	sub	objptr, ##41928
200f8     E4 FE 9F CD |  if_b	jmp	#LR__2511
200fc                 | LR__2512
200fc     00 6E 20 FF 
20100     00 30 06 F6 | 	mov	local06, ##1088159744
20104                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
20104     03 2E 06 F6 | 	mov	local05, #3
20108                 | LR__2513
20108     18 13 02 F6 | 	mov	arg01, local06
2010c     CE C3 1F FF 
20110     7D 14 06 F6 | 	mov	arg02, ##1065852029
20114     74 6C B0 FD | 	call	#__system___float_mul
20118     FD 30 02 F6 | 	mov	local06, result1
2011c     FA 2F 6E FB | 	djnz	local05, #LR__2513
20120     00 28 06 F6 | 	mov	local02, #0
20124                 | LR__2514
20124     14 2D 02 F6 | 	mov	local04, local02
20128     02 2C 66 F0 | 	shl	local04, #2
2012c     14 00 00 FF 
20130     D8 E4 05 F1 | 	add	objptr, ##10456
20134     F2 2C 02 F1 | 	add	local04, objptr
20138     16 31 62 FC | 	wrlong	local06, local04
2013c     18 13 02 F6 | 	mov	arg01, local06
20140     CE C3 1F FF 
20144     7D 14 06 F6 | 	mov	arg02, ##1065852029
20148     14 00 00 FF 
2014c     D8 E4 85 F1 | 	sub	objptr, ##10456
20150     38 6C B0 FD | 	call	#__system___float_mul
20154     FD 30 02 F6 | 	mov	local06, result1
20158     01 28 06 F1 | 	add	local02, #1
2015c     0C 28 56 F2 | 	cmps	local02, #12 wc
20160     C0 FF 9F CD |  if_b	jmp	#LR__2514
20164     14 00 00 FF 
20168     08 E5 05 F1 | 	add	objptr, ##10504
2016c     F2 50 6B FC | 	wrlong	#424, objptr
20170     04 E4 05 F1 | 	add	objptr, #4
20174     F2 20 6B FC | 	wrlong	#400, objptr
20178     04 E4 05 F1 | 	add	objptr, #4
2017c     F2 F2 6A FC | 	wrlong	#377, objptr
20180     04 E4 05 F1 | 	add	objptr, #4
20184     F2 C8 6A FC | 	wrlong	#356, objptr
20188     04 E4 05 F1 | 	add	objptr, #4
2018c     F2 A0 6A FC | 	wrlong	#336, objptr
20190     04 E4 05 F1 | 	add	objptr, #4
20194     F2 7A 6A FC | 	wrlong	#317, objptr
20198     04 E4 05 F1 | 	add	objptr, #4
2019c     F2 58 6A FC | 	wrlong	#300, objptr
201a0     04 E4 05 F1 | 	add	objptr, #4
201a4     F2 36 6A FC | 	wrlong	#283, objptr
201a8     04 E4 05 F1 | 	add	objptr, #4
201ac     F2 16 6A FC | 	wrlong	#267, objptr
201b0     04 E4 05 F1 | 	add	objptr, #4
201b4     F2 F8 69 FC | 	wrlong	#252, objptr
201b8     04 E4 05 F1 | 	add	objptr, #4
201bc     F2 DC 69 FC | 	wrlong	#238, objptr
201c0     04 E4 05 F1 | 	add	objptr, #4
201c4     F2 C0 69 FC | 	wrlong	#224, objptr
201c8     3D 00 00 FF 
201cc     A2 E4 05 F1 | 	add	objptr, ##31394
201d0     F2 00 59 FC | 	wrword	#128, objptr
201d4     02 E4 85 F1 | 	sub	objptr, #2
201d8     F2 00 59 FC | 	wrword	#128, objptr
201dc     51 00 00 FF 
201e0     D4 E5 85 F1 | 	sub	objptr, ##41940
201e4     A7 F0 03 F6 | 	mov	ptra, fp
201e8     B2 00 A0 FD | 	call	#popregs_
201ec                 | _init_audio_ret
201ec     2D 00 64 FD | 	ret
201f0                 | 
201f0                 | ' 
201f0                 | ' '------------------- Error messages
201f0                 | ' 
201f0                 | ' sub init_error_strings
201f0                 | _init_error_strings
201f0     A2 01 00 FF 
201f4     04 01 06 F6 | 	mov	_var01, ##@LR__5803
201f8     45 00 00 FF 
201fc     7C E4 05 F1 | 	add	objptr, ##35452
20200     F2 00 62 FC | 	wrlong	_var01, objptr
20204     A2 01 00 FF 
20208     05 01 06 F6 | 	mov	_var01, ##@LR__5804
2020c     04 E4 05 F1 | 	add	objptr, #4
20210     F2 00 62 FC | 	wrlong	_var01, objptr
20214     A2 01 00 FF 
20218     29 01 06 F6 | 	mov	_var01, ##@LR__5805
2021c     04 E4 05 F1 | 	add	objptr, #4
20220     F2 00 62 FC | 	wrlong	_var01, objptr
20224     A2 01 00 FF 
20228     49 01 06 F6 | 	mov	_var01, ##@LR__5806
2022c     04 E4 05 F1 | 	add	objptr, #4
20230     F2 00 62 FC | 	wrlong	_var01, objptr
20234     A2 01 00 FF 
20238     62 01 06 F6 | 	mov	_var01, ##@LR__5807
2023c     04 E4 05 F1 | 	add	objptr, #4
20240     F2 00 62 FC | 	wrlong	_var01, objptr
20244     A2 01 00 FF 
20248     7D 01 06 F6 | 	mov	_var01, ##@LR__5808
2024c     04 E4 05 F1 | 	add	objptr, #4
20250     F2 00 62 FC | 	wrlong	_var01, objptr
20254     A2 01 00 FF 
20258     9E 01 06 F6 | 	mov	_var01, ##@LR__5809
2025c     04 E4 05 F1 | 	add	objptr, #4
20260     F2 00 62 FC | 	wrlong	_var01, objptr
20264     A2 01 00 FF 
20268     CB 01 06 F6 | 	mov	_var01, ##@LR__5810
2026c     04 E4 05 F1 | 	add	objptr, #4
20270     F2 00 62 FC | 	wrlong	_var01, objptr
20274     A2 01 00 FF 
20278     F5 01 06 F6 | 	mov	_var01, ##@LR__5811
2027c     04 E4 05 F1 | 	add	objptr, #4
20280     F2 00 62 FC | 	wrlong	_var01, objptr
20284     A3 01 00 FF 
20288     0D 00 06 F6 | 	mov	_var01, ##@LR__5812
2028c     04 E4 05 F1 | 	add	objptr, #4
20290     F2 00 62 FC | 	wrlong	_var01, objptr
20294     A3 01 00 FF 
20298     2D 00 06 F6 | 	mov	_var01, ##@LR__5813
2029c     04 E4 05 F1 | 	add	objptr, #4
202a0     F2 00 62 FC | 	wrlong	_var01, objptr
202a4     A3 01 00 FF 
202a8     43 00 06 F6 | 	mov	_var01, ##@LR__5814
202ac     04 E4 05 F1 | 	add	objptr, #4
202b0     F2 00 62 FC | 	wrlong	_var01, objptr
202b4     A3 01 00 FF 
202b8     60 00 06 F6 | 	mov	_var01, ##@LR__5815
202bc     04 E4 05 F1 | 	add	objptr, #4
202c0     F2 00 62 FC | 	wrlong	_var01, objptr
202c4     A3 01 00 FF 
202c8     83 00 06 F6 | 	mov	_var01, ##@LR__5816
202cc     04 E4 05 F1 | 	add	objptr, #4
202d0     F2 00 62 FC | 	wrlong	_var01, objptr
202d4     A3 01 00 FF 
202d8     A9 00 06 F6 | 	mov	_var01, ##@LR__5817
202dc     04 E4 05 F1 | 	add	objptr, #4
202e0     F2 00 62 FC | 	wrlong	_var01, objptr
202e4     A3 01 00 FF 
202e8     C4 00 06 F6 | 	mov	_var01, ##@LR__5818
202ec     04 E4 05 F1 | 	add	objptr, #4
202f0     F2 00 62 FC | 	wrlong	_var01, objptr
202f4     A3 01 00 FF 
202f8     D4 00 06 F6 | 	mov	_var01, ##@LR__5819
202fc     04 E4 05 F1 | 	add	objptr, #4
20300     F2 00 62 FC | 	wrlong	_var01, objptr
20304     A3 01 00 FF 
20308     E3 00 06 F6 | 	mov	_var01, ##@LR__5820
2030c     04 E4 05 F1 | 	add	objptr, #4
20310     F2 00 62 FC | 	wrlong	_var01, objptr
20314     A3 01 00 FF 
20318     FD 00 06 F6 | 	mov	_var01, ##@LR__5821
2031c     04 E4 05 F1 | 	add	objptr, #4
20320     F2 00 62 FC | 	wrlong	_var01, objptr
20324     A3 01 00 FF 
20328     0E 01 06 F6 | 	mov	_var01, ##@LR__5822
2032c     04 E4 05 F1 | 	add	objptr, #4
20330     F2 00 62 FC | 	wrlong	_var01, objptr
20334     A3 01 00 FF 
20338     25 01 06 F6 | 	mov	_var01, ##@LR__5823
2033c     04 E4 05 F1 | 	add	objptr, #4
20340     F2 00 62 FC | 	wrlong	_var01, objptr
20344     A3 01 00 FF 
20348     38 01 06 F6 | 	mov	_var01, ##@LR__5824
2034c     04 E4 05 F1 | 	add	objptr, #4
20350     F2 00 62 FC | 	wrlong	_var01, objptr
20354     A3 01 00 FF 
20358     47 01 06 F6 | 	mov	_var01, ##@LR__5825
2035c     04 E4 05 F1 | 	add	objptr, #4
20360     F2 00 62 FC | 	wrlong	_var01, objptr
20364     A3 01 00 FF 
20368     63 01 06 F6 | 	mov	_var01, ##@LR__5826
2036c     04 E4 05 F1 | 	add	objptr, #4
20370     F2 00 62 FC | 	wrlong	_var01, objptr
20374     A3 01 00 FF 
20378     73 01 06 F6 | 	mov	_var01, ##@LR__5827
2037c     04 E4 05 F1 | 	add	objptr, #4
20380     F2 00 62 FC | 	wrlong	_var01, objptr
20384     A3 01 00 FF 
20388     83 01 06 F6 | 	mov	_var01, ##@LR__5828
2038c     04 E4 05 F1 | 	add	objptr, #4
20390     F2 00 62 FC | 	wrlong	_var01, objptr
20394     A3 01 00 FF 
20398     B6 01 06 F6 | 	mov	_var01, ##@LR__5829
2039c     04 E4 05 F1 | 	add	objptr, #4
203a0     F2 00 62 FC | 	wrlong	_var01, objptr
203a4     A3 01 00 FF 
203a8     D1 01 06 F6 | 	mov	_var01, ##@LR__5830
203ac     04 E4 05 F1 | 	add	objptr, #4
203b0     F2 00 62 FC | 	wrlong	_var01, objptr
203b4     A3 01 00 FF 
203b8     E6 01 06 F6 | 	mov	_var01, ##@LR__5831
203bc     04 E4 05 F1 | 	add	objptr, #4
203c0     F2 00 62 FC | 	wrlong	_var01, objptr
203c4     A3 01 00 FF 
203c8     F2 01 06 F6 | 	mov	_var01, ##@LR__5832
203cc     04 E4 05 F1 | 	add	objptr, #4
203d0     F2 00 62 FC | 	wrlong	_var01, objptr
203d4     A4 01 00 FF 
203d8     03 00 06 F6 | 	mov	_var01, ##@LR__5833
203dc     04 E4 05 F1 | 	add	objptr, #4
203e0     F2 00 62 FC | 	wrlong	_var01, objptr
203e4     A4 01 00 FF 
203e8     13 00 06 F6 | 	mov	_var01, ##@LR__5834
203ec     04 E4 05 F1 | 	add	objptr, #4
203f0     F2 00 62 FC | 	wrlong	_var01, objptr
203f4     A4 01 00 FF 
203f8     2E 00 06 F6 | 	mov	_var01, ##@LR__5835
203fc     04 E4 05 F1 | 	add	objptr, #4
20400     F2 00 62 FC | 	wrlong	_var01, objptr
20404     A4 01 00 FF 
20408     3E 00 06 F6 | 	mov	_var01, ##@LR__5836
2040c     04 E4 05 F1 | 	add	objptr, #4
20410     F2 00 62 FC | 	wrlong	_var01, objptr
20414     A4 01 00 FF 
20418     4C 00 06 F6 | 	mov	_var01, ##@LR__5837
2041c     04 E4 05 F1 | 	add	objptr, #4
20420     F2 00 62 FC | 	wrlong	_var01, objptr
20424     A4 01 00 FF 
20428     66 00 06 F6 | 	mov	_var01, ##@LR__5838
2042c     04 E4 05 F1 | 	add	objptr, #4
20430     F2 00 62 FC | 	wrlong	_var01, objptr
20434     A4 01 00 FF 
20438     99 00 06 F6 | 	mov	_var01, ##@LR__5839
2043c     04 E4 05 F1 | 	add	objptr, #4
20440     F2 00 62 FC | 	wrlong	_var01, objptr
20444     A4 01 00 FF 
20448     B1 00 06 F6 | 	mov	_var01, ##@LR__5840
2044c     04 E4 05 F1 | 	add	objptr, #4
20450     F2 00 62 FC | 	wrlong	_var01, objptr
20454     A4 01 00 FF 
20458     CC 00 06 F6 | 	mov	_var01, ##@LR__5841
2045c     04 E4 05 F1 | 	add	objptr, #4
20460     F2 00 62 FC | 	wrlong	_var01, objptr
20464     A4 01 00 FF 
20468     E9 00 06 F6 | 	mov	_var01, ##@LR__5842
2046c     04 E4 05 F1 | 	add	objptr, #4
20470     F2 00 62 FC | 	wrlong	_var01, objptr
20474     A4 01 00 FF 
20478     02 01 06 F6 | 	mov	_var01, ##@LR__5843
2047c     04 E4 05 F1 | 	add	objptr, #4
20480     F2 00 62 FC | 	wrlong	_var01, objptr
20484     A4 01 00 FF 
20488     21 01 06 F6 | 	mov	_var01, ##@LR__5844
2048c     04 E4 05 F1 | 	add	objptr, #4
20490     F2 00 62 FC | 	wrlong	_var01, objptr
20494     A4 01 00 FF 
20498     2F 01 06 F6 | 	mov	_var01, ##@LR__5845
2049c     04 E4 05 F1 | 	add	objptr, #4
204a0     F2 00 62 FC | 	wrlong	_var01, objptr
204a4     A4 01 00 FF 
204a8     5C 01 06 F6 | 	mov	_var01, ##@LR__5846
204ac     04 E4 05 F1 | 	add	objptr, #4
204b0     F2 00 62 FC | 	wrlong	_var01, objptr
204b4     A4 01 00 FF 
204b8     69 01 06 F6 | 	mov	_var01, ##@LR__5847
204bc     04 E4 05 F1 | 	add	objptr, #4
204c0     F2 00 62 FC | 	wrlong	_var01, objptr
204c4     A4 01 00 FF 
204c8     7D 01 06 F6 | 	mov	_var01, ##@LR__5848
204cc     04 E4 05 F1 | 	add	objptr, #4
204d0     F2 00 62 FC | 	wrlong	_var01, objptr
204d4     A4 01 00 FF 
204d8     A1 01 06 F6 | 	mov	_var01, ##@LR__5849
204dc     04 E4 05 F1 | 	add	objptr, #4
204e0     F2 00 62 FC | 	wrlong	_var01, objptr
204e4     A4 01 00 FF 
204e8     B8 01 06 F6 | 	mov	_var01, ##@LR__5850
204ec     04 E4 05 F1 | 	add	objptr, #4
204f0     F2 00 62 FC | 	wrlong	_var01, objptr
204f4     A4 01 00 FF 
204f8     CB 01 06 F6 | 	mov	_var01, ##@LR__5851
204fc     04 E4 05 F1 | 	add	objptr, #4
20500     F2 00 62 FC | 	wrlong	_var01, objptr
20504     A4 01 00 FF 
20508     E2 01 06 F6 | 	mov	_var01, ##@LR__5852
2050c     04 E4 05 F1 | 	add	objptr, #4
20510     F2 00 62 FC | 	wrlong	_var01, objptr
20514     A4 01 00 FF 
20518     FB 01 06 F6 | 	mov	_var01, ##@LR__5853
2051c     04 E4 05 F1 | 	add	objptr, #4
20520     F2 00 62 FC | 	wrlong	_var01, objptr
20524     A5 01 00 FF 
20528     1D 00 06 F6 | 	mov	_var01, ##@LR__5854
2052c     04 E4 05 F1 | 	add	objptr, #4
20530     F2 00 62 FC | 	wrlong	_var01, objptr
20534     A5 01 00 FF 
20538     30 00 06 F6 | 	mov	_var01, ##@LR__5855
2053c     04 E4 05 F1 | 	add	objptr, #4
20540     F2 00 62 FC | 	wrlong	_var01, objptr
20544     A5 01 00 FF 
20548     40 00 06 F6 | 	mov	_var01, ##@LR__5856
2054c     04 E4 05 F1 | 	add	objptr, #4
20550     F2 00 62 FC | 	wrlong	_var01, objptr
20554     A5 01 00 FF 
20558     58 00 06 F6 | 	mov	_var01, ##@LR__5857
2055c     04 E4 05 F1 | 	add	objptr, #4
20560     F2 00 62 FC | 	wrlong	_var01, objptr
20564     45 00 00 FF 
20568     54 E5 85 F1 | 	sub	objptr, ##35668
2056c                 | _init_error_strings_ret
2056c     2D 00 64 FD | 	ret
20570                 | 
20570                 | '         
20570                 | ' sub printerror(err as integer, linenum=0 as integer)
20570                 | _printerror
20570     02 4A 05 F6 | 	mov	COUNT_, #2
20574     A8 00 A0 FD | 	call	#pushregs_
20578     09 27 02 F6 | 	mov	local01, arg01
2057c     0A 29 02 F6 | 	mov	local02, arg02
20580     A5 01 00 FF 
20584     6F 12 06 F6 | 	mov	arg01, ##@LR__5858
20588     0C 21 B0 FD | 	call	#_hg010b_spin2_write
2058c     13 13 02 F6 | 	mov	arg01, local01
20590     A8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
20594     FD 12 02 F6 | 	mov	arg01, result1
20598     FC 20 B0 FD | 	call	#_hg010b_spin2_write
2059c     A5 01 00 FF 
205a0     76 12 06 F6 | 	mov	arg01, ##@LR__5859
205a4     F0 20 B0 FD | 	call	#_hg010b_spin2_write
205a8     02 26 66 F0 | 	shl	local01, #2
205ac     45 00 00 FF 
205b0     7C E4 05 F1 | 	add	objptr, ##35452
205b4     F2 26 02 F1 | 	add	local01, objptr
205b8     13 13 02 FB | 	rdlong	arg01, local01
205bc     45 00 00 FF 
205c0     7C E4 85 F1 | 	sub	objptr, ##35452
205c4     D0 20 B0 FD | 	call	#_hg010b_spin2_write
205c8                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
205c8                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
205c8     01 28 56 F2 | 	cmps	local02, #1 wc
205cc     24 00 90 CD |  if_b	jmp	#LR__2520
205d0     A5 01 00 FF 
205d4     7A 12 06 F6 | 	mov	arg01, ##@LR__5860
205d8     BC 20 B0 FD | 	call	#_hg010b_spin2_write
205dc     14 13 02 F6 | 	mov	arg01, local02
205e0     58 26 B0 FD | 	call	#_hg010b_spin2_inttostr
205e4     FD 12 02 F6 | 	mov	arg01, result1
205e8                 | ' 
205e8                 | ' write(text)
205e8     AC 20 B0 FD | 	call	#_hg010b_spin2_write
205ec                 | ' crlf
205ec     A8 25 B0 FD | 	call	#_hg010b_spin2_crlf
205f0     10 00 90 FD | 	jmp	#LR__2521
205f4                 | LR__2520
205f4     A5 01 00 FF 
205f8     84 12 06 F6 | 	mov	arg01, ##@LR__5861
205fc                 | ' 
205fc                 | ' write(text)
205fc     98 20 B0 FD | 	call	#_hg010b_spin2_write
20600                 | ' crlf
20600     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
20604                 | LR__2521
20604     A7 F0 03 F6 | 	mov	ptra, fp
20608     B2 00 A0 FD | 	call	#popregs_
2060c                 | _printerror_ret
2060c     2D 00 64 FD | 	ret
20610                 | 
20610                 | ' 
20610                 | ' '' ------------------------------- Hardware start/stop/initialization 
20610                 | ' 
20610                 | ' sub startpsram
20610                 | _startpsram
20610     00 12 06 F6 | 	mov	arg01, #0
20614     0A 14 C6 F9 | 	decod	arg02, #10
20618     0B 16 06 F6 | 	mov	arg03, #11
2061c     07 18 06 F6 | 	mov	arg04, #7
20620     0B 00 00 FF 
20624     CC E4 05 F1 | 	add	objptr, ##5836
20628     7C 2A B0 FD | 	call	#_psram_spin2_startx
2062c     2B 00 00 FF 
20630     3C E5 05 F1 | 	add	objptr, ##22332
20634     F2 FA 61 FC | 	wrlong	result1, objptr
20638                 | '     return $7FF00 + cog*12
20638     0C E4 05 F1 | 	add	objptr, #12
2063c     FF 03 80 FF 
20640     F2 00 6A FC | 	wrlong	##524032, objptr
20644     37 00 00 FF 
20648     14 E4 85 F1 | 	sub	objptr, ##28180
2064c                 | _startpsram_ret
2064c     2D 00 64 FD | 	ret
20650                 | 
20650                 | ' 
20650                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
20650                 | _startvideo
20650     01 4A 05 F6 | 	mov	COUNT_, #1
20654     A8 00 A0 FD | 	call	#pushregs_
20658     37 00 00 FF 
2065c     14 E4 05 F1 | 	add	objptr, ##28180
20660     F2 18 02 FB | 	rdlong	arg04, objptr
20664     37 00 00 FF 
20668     14 E4 85 F1 | 	sub	objptr, ##28180
2066c     0A 13 02 F6 | 	mov	arg01, arg02
20670     0C 15 02 F6 | 	mov	arg02, arg04
20674     18 08 B0 FD | 	call	#_hg010b_spin2_start
20678     37 00 00 FF 
2067c     00 E4 05 F1 | 	add	objptr, ##28160
20680     F2 FA 61 FC | 	wrlong	result1, objptr
20684                 | ' 
20684                 | ' videocog=v.start(pin,mbox)
20684                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
20684     00 26 06 F6 | 	mov	local01, #0
20688     2B 00 00 FF 
2068c     34 E5 85 F1 | 	sub	objptr, ##22324
20690                 | LR__2530
20690     13 13 02 F6 | 	mov	arg01, local01
20694     00 28 00 FF 
20698     00 14 06 F6 | 	mov	arg02, ##5242880
2069c     60 2E B0 FD | 	call	#_psram_spin2_setQos
206a0     01 26 06 F1 | 	add	local01, #1
206a4     08 26 56 F2 | 	cmps	local01, #8 wc
206a8     E4 FF 9F CD |  if_b	jmp	#LR__2530
206ac     2B 00 00 FF 
206b0     34 E5 05 F1 | 	add	objptr, ##22324
206b4     F2 12 02 FB | 	rdlong	arg01, objptr
206b8     7A 00 02 FF 
206bc     00 14 06 F6 | 	mov	arg02, ##67171328
206c0     2B 00 00 FF 
206c4     34 E5 85 F1 | 	sub	objptr, ##22324
206c8     34 2E B0 FD | 	call	#_psram_spin2_setQos
206cc     0B 00 00 FF 
206d0     CC E4 85 F1 | 	sub	objptr, ##5836
206d4                 | ' psram.setQoS(videocog, $0400f400) 
206d4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
206d4     F2 14 02 F6 | 	mov	arg02, objptr
206d8     00 C0 04 FF 
206dc     00 14 46 F5 | 	or	arg02, ##159383552
206e0     00 16 06 F6 | 	mov	arg03, #0
206e4     00 18 06 F6 | 	mov	arg04, #0
206e8     00 12 06 F6 | 	mov	arg01, #0
206ec     CC 42 B0 FD | 	call	#__system___basic_open
206f0                 | ' return videocog
206f0     37 00 00 FF 
206f4     00 E4 05 F1 | 	add	objptr, ##28160
206f8     F2 FA 01 FB | 	rdlong	result1, objptr
206fc     37 00 00 FF 
20700     00 E4 85 F1 | 	sub	objptr, ##28160
20704     A7 F0 03 F6 | 	mov	ptra, fp
20708     B2 00 A0 FD | 	call	#popregs_
2070c                 | _startvideo_ret
2070c     2D 00 64 FD | 	ret
20710                 | 
20710                 | ' 
20710                 | ' 
20710                 | ' 
20710                 | ' '' ------------------------------- Convenient psram peek/poke
20710                 | ' 
20710                 | ' sub pslpoke(addr as ulong,value as ulong)
20710                 | _pslpoke
20710     00 4A 05 F6 | 	mov	COUNT_, #0
20714     A8 00 A0 FD | 	call	#pushregs_
20718     08 F0 07 F1 | 	add	ptra, #8
2071c     A7 12 62 FC | 	wrlong	arg01, fp
20720     04 4E 05 F1 | 	add	fp, #4
20724     A7 14 62 FC | 	wrlong	arg02, fp
20728     A7 12 02 F6 | 	mov	arg01, fp
2072c     04 4E 85 F1 | 	sub	fp, #4
20730     A7 14 02 FB | 	rdlong	arg02, fp
20734     04 16 06 F6 | 	mov	arg03, #4
20738     0B 00 00 FF 
2073c     CC E4 05 F1 | 	add	objptr, ##5836
20740     2C 2C B0 FD | 	call	#_psram_spin2_write
20744     0B 00 00 FF 
20748     CC E4 85 F1 | 	sub	objptr, ##5836
2074c     A7 F0 03 F6 | 	mov	ptra, fp
20750     B2 00 A0 FD | 	call	#popregs_
20754                 | _pslpoke_ret
20754     2D 00 64 FD | 	ret
20758                 | 
20758                 | ' 
20758                 | ' sub psdpoke(addr as ulong,value as ulong)
20758                 | _psdpoke
20758     00 4A 05 F6 | 	mov	COUNT_, #0
2075c     A8 00 A0 FD | 	call	#pushregs_
20760     08 F0 07 F1 | 	add	ptra, #8
20764     A7 12 62 FC | 	wrlong	arg01, fp
20768     04 4E 05 F1 | 	add	fp, #4
2076c     A7 14 62 FC | 	wrlong	arg02, fp
20770     A7 12 02 F6 | 	mov	arg01, fp
20774     04 4E 85 F1 | 	sub	fp, #4
20778     A7 14 02 FB | 	rdlong	arg02, fp
2077c     02 16 06 F6 | 	mov	arg03, #2
20780     0B 00 00 FF 
20784     CC E4 05 F1 | 	add	objptr, ##5836
20788     E4 2B B0 FD | 	call	#_psram_spin2_write
2078c     0B 00 00 FF 
20790     CC E4 85 F1 | 	sub	objptr, ##5836
20794     A7 F0 03 F6 | 	mov	ptra, fp
20798     B2 00 A0 FD | 	call	#popregs_
2079c                 | _psdpoke_ret
2079c     2D 00 64 FD | 	ret
207a0                 | 
207a0                 | ' 
207a0                 | ' sub pspoke(addr as ulong,value as ulong)
207a0                 | _pspoke
207a0     00 4A 05 F6 | 	mov	COUNT_, #0
207a4     A8 00 A0 FD | 	call	#pushregs_
207a8     08 F0 07 F1 | 	add	ptra, #8
207ac     A7 12 62 FC | 	wrlong	arg01, fp
207b0     04 4E 05 F1 | 	add	fp, #4
207b4     A7 14 62 FC | 	wrlong	arg02, fp
207b8     A7 12 02 F6 | 	mov	arg01, fp
207bc     04 4E 85 F1 | 	sub	fp, #4
207c0     A7 14 02 FB | 	rdlong	arg02, fp
207c4     01 16 06 F6 | 	mov	arg03, #1
207c8     0B 00 00 FF 
207cc     CC E4 05 F1 | 	add	objptr, ##5836
207d0     9C 2B B0 FD | 	call	#_psram_spin2_write
207d4     0B 00 00 FF 
207d8     CC E4 85 F1 | 	sub	objptr, ##5836
207dc     A7 F0 03 F6 | 	mov	ptra, fp
207e0     B2 00 A0 FD | 	call	#popregs_
207e4                 | _pspoke_ret
207e4     2D 00 64 FD | 	ret
207e8                 | 
207e8                 | ' 
207e8                 | ' function pspeek(adr as ulong) as ubyte
207e8                 | _pspeek
207e8     00 4A 05 F6 | 	mov	COUNT_, #0
207ec     A8 00 A0 FD | 	call	#pushregs_
207f0     0C F0 07 F1 | 	add	ptra, #12
207f4     04 4E 05 F1 | 	add	fp, #4
207f8     A7 12 62 FC | 	wrlong	arg01, fp
207fc     04 4E 05 F1 | 	add	fp, #4
20800     A7 12 02 F6 | 	mov	arg01, fp
20804     04 4E 85 F1 | 	sub	fp, #4
20808     A7 14 02 FB | 	rdlong	arg02, fp
2080c     04 4E 85 F1 | 	sub	fp, #4
20810     01 16 06 F6 | 	mov	arg03, #1
20814     0B 00 00 FF 
20818     CC E4 05 F1 | 	add	objptr, ##5836
2081c     B4 2A B0 FD | 	call	#_psram_spin2_read1
20820     0B 00 00 FF 
20824     CC E4 85 F1 | 	sub	objptr, ##5836
20828                 | ' psram.read1(varptr(res),adr,1)
20828                 | ' return res
20828     08 4E 05 F1 | 	add	fp, #8
2082c     A7 FA C1 FA | 	rdbyte	result1, fp
20830     08 4E 85 F1 | 	sub	fp, #8
20834     A7 F0 03 F6 | 	mov	ptra, fp
20838     B2 00 A0 FD | 	call	#popregs_
2083c                 | _pspeek_ret
2083c     2D 00 64 FD | 	ret
20840                 | 
20840                 | ' 
20840                 | ' function pslpeek(adr as ulong) as ulong
20840                 | _pslpeek
20840     00 4A 05 F6 | 	mov	COUNT_, #0
20844     A8 00 A0 FD | 	call	#pushregs_
20848     0C F0 07 F1 | 	add	ptra, #12
2084c     04 4E 05 F1 | 	add	fp, #4
20850     A7 12 62 FC | 	wrlong	arg01, fp
20854     04 4E 05 F1 | 	add	fp, #4
20858     A7 12 02 F6 | 	mov	arg01, fp
2085c     04 4E 85 F1 | 	sub	fp, #4
20860     A7 14 02 FB | 	rdlong	arg02, fp
20864     04 4E 85 F1 | 	sub	fp, #4
20868     04 16 06 F6 | 	mov	arg03, #4
2086c     0B 00 00 FF 
20870     CC E4 05 F1 | 	add	objptr, ##5836
20874     5C 2A B0 FD | 	call	#_psram_spin2_read1
20878     0B 00 00 FF 
2087c     CC E4 85 F1 | 	sub	objptr, ##5836
20880                 | ' psram.read1(varptr(res),adr,4)
20880                 | ' return res
20880     08 4E 05 F1 | 	add	fp, #8
20884     A7 FA 01 FB | 	rdlong	result1, fp
20888     08 4E 85 F1 | 	sub	fp, #8
2088c     A7 F0 03 F6 | 	mov	ptra, fp
20890     B2 00 A0 FD | 	call	#popregs_
20894                 | _pslpeek_ret
20894     2D 00 64 FD | 	ret
20898                 | 
20898                 | ' 
20898                 | ' function psdpeek(adr as ulong) as ulong
20898                 | _psdpeek
20898     00 4A 05 F6 | 	mov	COUNT_, #0
2089c     A8 00 A0 FD | 	call	#pushregs_
208a0     0C F0 07 F1 | 	add	ptra, #12
208a4     04 4E 05 F1 | 	add	fp, #4
208a8     A7 12 62 FC | 	wrlong	arg01, fp
208ac     04 4E 05 F1 | 	add	fp, #4
208b0     A7 12 02 F6 | 	mov	arg01, fp
208b4     04 4E 85 F1 | 	sub	fp, #4
208b8     A7 14 02 FB | 	rdlong	arg02, fp
208bc     04 4E 85 F1 | 	sub	fp, #4
208c0     02 16 06 F6 | 	mov	arg03, #2
208c4     0B 00 00 FF 
208c8     CC E4 05 F1 | 	add	objptr, ##5836
208cc     04 2A B0 FD | 	call	#_psram_spin2_read1
208d0     0B 00 00 FF 
208d4     CC E4 85 F1 | 	sub	objptr, ##5836
208d8                 | ' psram.read1(varptr(res),adr,2)
208d8                 | ' return res
208d8     08 4E 05 F1 | 	add	fp, #8
208dc     A7 FA E1 FA | 	rdword	result1, fp
208e0     08 4E 85 F1 | 	sub	fp, #8
208e4     A7 F0 03 F6 | 	mov	ptra, fp
208e8     B2 00 A0 FD | 	call	#popregs_
208ec                 | _psdpeek_ret
208ec     2D 00 64 FD | 	ret
208f0                 | 
208f0                 | ' 
208f0                 | ' '' ------------------------------- USB keyboard scan to char translator
208f0                 | ' 
208f0                 | ' function scantochar(key)
208f0                 | _scantochar
208f0                 | ' 
208f0                 | ' select case (key shr 8) and 255
208f0     09 01 02 F6 | 	mov	_var01, arg01
208f4     08 00 C6 F0 | 	sar	_var01, #8
208f8     FF 00 0E F5 | 	and	_var01, #255 wz
208fc     24 00 90 AD |  if_e	jmp	#LR__2540
20900     02 00 0E F2 | 	cmp	_var01, #2 wz
20904     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
20908     30 00 90 AD |  if_e	jmp	#LR__2541
2090c     40 00 0E F2 | 	cmp	_var01, #64 wz
20910     44 00 90 AD |  if_e	jmp	#LR__2542
20914     42 00 0E F2 | 	cmp	_var01, #66 wz
20918     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
2091c     70 00 90 5D |  if_ne	jmp	#LR__2544
20920     50 00 90 FD | 	jmp	#LR__2543
20924                 | LR__2540
20924     09 FB 01 F6 | 	mov	result1, arg01
20928     7F FA 05 F5 | 	and	result1, #127
2092c     02 FA 65 F0 | 	shl	result1, #2
20930     F5 FA 01 F1 | 	add	result1, ptr__dat__
20934     FD FA C1 FA | 	rdbyte	result1, result1
20938     54 00 90 FD | 	jmp	#_scantochar_ret
2093c                 | LR__2541
2093c     09 FB 01 F6 | 	mov	result1, arg01
20940     7F FA 05 F5 | 	and	result1, #127
20944     02 FA 65 F0 | 	shl	result1, #2
20948     01 FA 05 F1 | 	add	result1, #1
2094c     F5 FA 01 F1 | 	add	result1, ptr__dat__
20950     FD FA C1 FA | 	rdbyte	result1, result1
20954     38 00 90 FD | 	jmp	#_scantochar_ret
20958                 | LR__2542
20958     09 FB 01 F6 | 	mov	result1, arg01
2095c     7F FA 05 F5 | 	and	result1, #127
20960     02 FA 65 F0 | 	shl	result1, #2
20964     02 FA 05 F1 | 	add	result1, #2
20968     F5 FA 01 F1 | 	add	result1, ptr__dat__
2096c     FD FA C1 FA | 	rdbyte	result1, result1
20970     1C 00 90 FD | 	jmp	#_scantochar_ret
20974                 | LR__2543
20974     09 FB 01 F6 | 	mov	result1, arg01
20978     7F FA 05 F5 | 	and	result1, #127
2097c     02 FA 65 F0 | 	shl	result1, #2
20980     03 FA 05 F1 | 	add	result1, #3
20984     F5 FA 01 F1 | 	add	result1, ptr__dat__
20988     FD FA C1 FA | 	rdbyte	result1, result1
2098c     00 00 90 FD | 	jmp	#_scantochar_ret
20990                 | LR__2544
20990                 | _scantochar_ret
20990     2D 00 64 FD | 	ret
20994                 | 
20994                 | _program
20994     01 4A 05 F6 | 	mov	COUNT_, #1
20998     A8 00 A0 FD | 	call	#pushregs_
2099c     70 FC BF FD | 	call	#_startpsram
209a0     40 12 06 F6 | 	mov	arg01, #64
209a4     00 14 06 F6 | 	mov	arg02, #0
209a8     00 16 06 F6 | 	mov	arg03, #0
209ac     A0 FC BF FD | 	call	#_startvideo
209b0     37 00 00 FF 
209b4     14 E4 05 F1 | 	add	objptr, ##28180
209b8     F2 12 02 FB | 	rdlong	arg01, objptr
209bc     00 14 06 F6 | 	mov	arg02, #0
209c0     FB 03 00 FF 
209c4     00 17 06 F6 | 	mov	arg03, ##521984
209c8     2B 00 00 FF 
209cc     48 E5 85 F1 | 	sub	objptr, ##22344
209d0     DC 2E B0 FD | 	call	#_audio096_spin2_start
209d4     FE 16 02 F6 | 	mov	arg03, result2
209d8     2B 00 00 FF 
209dc     30 E5 05 F1 | 	add	objptr, ##22320
209e0     F2 FA 61 FC | 	wrlong	result1, objptr
209e4     14 E4 05 F1 | 	add	objptr, #20
209e8     F2 16 62 FC | 	wrlong	arg03, objptr
209ec     37 00 00 FF 
209f0     10 E4 85 F1 | 	sub	objptr, ##28176
209f4     32 12 06 F6 | 	mov	arg01, #50
209f8     0C 38 B0 FD | 	call	#__system___waitms
209fc     37 00 00 FF 
20a00     10 E4 05 F1 | 	add	objptr, ##28176
20a04     F2 12 02 FB | 	rdlong	arg01, objptr
20a08     37 00 00 FF 
20a0c     10 E4 85 F1 | 	sub	objptr, ##28176
20a10     14 12 06 F1 | 	add	arg01, #20
20a14     20 00 80 FF 
20a18     09 01 58 FC | 	wrword	##16384, arg01
20a1c     E8 2B B0 FD | 	call	#_usbnew_spin2_start
20a20     37 00 00 FF 
20a24     04 E4 05 F1 | 	add	objptr, ##28164
20a28     F2 FA 61 FC | 	wrlong	result1, objptr
20a2c                 | '   mouse_limits[0] := xlim
20a2c     0F 00 00 FF 
20a30     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
20a34     01 00 80 FF 
20a38     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
20a3c                 | '   mouse_limits[1] := ylim
20a3c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20a40     01 00 80 FF 
20a44     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
20a48     36 00 00 FF 
20a4c     F3 E4 85 F1 | 	sub	objptr, ##27891
20a50     F2 12 02 F6 | 	mov	arg01, objptr
20a54     11 E5 85 F1 | 	sub	objptr, #273
20a58     C4 12 06 F1 | 	add	arg01, #196
20a5c                 | '   mouse_outptr := ptr
20a5c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20a60     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
20a64     0F 00 00 FF 
20a68     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20a6c     16 00 00 FF 
20a70     CA EA 05 F1 | 	add	ptr__dat__, ##11466
20a74     F5 14 02 F6 | 	mov	arg02, ptr__dat__
20a78     16 00 00 FF 
20a7c     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
20a80     10 12 06 F6 | 	mov	arg01, #16
20a84     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
20a88     10 12 06 F6 | 	mov	arg01, #16
20a8c     20 14 06 F6 | 	mov	arg02, #32
20a90     20 16 06 F6 | 	mov	arg03, #32
20a94     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
20a98     09 12 C6 F9 | 	decod	arg01, #9
20a9c     2C 15 06 F6 | 	mov	arg02, #300
20aa0     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
20aa4     F2 16 02 F6 | 	mov	arg03, objptr
20aa8     50 00 00 FF 
20aac     1C E5 05 F1 | 	add	objptr, ##41244
20ab0     F2 14 02 F6 | 	mov	arg02, objptr
20ab4     0A 17 62 FC | 	wrlong	arg03, arg02
20ab8     04 14 06 F1 | 	add	arg02, #4
20abc     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
20ac0     EF 14 02 F6 | 	mov	arg02, entryptr__
20ac4     1E FA 05 F6 | 	mov	result1, #30
20ac8     28 E4 61 FD | 	setq	objptr
20acc     0A FB F1 FC | 	coginit	result1, arg02 wc
20ad0     01 FA 65 C6 |  if_b	neg	result1, #1
20ad4     04 E4 85 F1 | 	sub	objptr, #4
20ad8     F2 FA 61 FC | 	wrlong	result1, objptr
20adc     01 00 00 FF 
20ae0     90 E4 05 F1 | 	add	objptr, ##656
20ae4     F2 00 68 FC | 	wrlong	#0, objptr
20ae8     1A 00 00 FF 
20aec     74 E5 85 F1 | 	sub	objptr, ##13684
20af0     F2 04 68 FC | 	wrlong	#2, objptr
20af4     04 E4 05 F1 | 	add	objptr, #4
20af8     F2 26 69 FC | 	wrlong	#147, objptr
20afc     04 E4 05 F1 | 	add	objptr, #4
20b00     F2 34 69 FC | 	wrlong	#154, objptr
20b04     04 E4 05 F1 | 	add	objptr, #4
20b08     F2 08 68 FC | 	wrlong	#4, objptr
20b0c     04 E4 85 F1 | 	sub	objptr, #4
20b10     F2 16 02 FB | 	rdlong	arg03, objptr
20b14     14 E4 85 F1 | 	sub	objptr, #20
20b18     F2 16 62 FC | 	wrlong	arg03, objptr
20b1c     04 E4 05 F1 | 	add	objptr, #4
20b20     F2 00 68 FC | 	wrlong	#0, objptr
20b24     04 E4 05 F1 | 	add	objptr, #4
20b28     F2 00 68 FC | 	wrlong	#0, objptr
20b2c     19 00 00 FF 
20b30     E4 E4 05 F1 | 	add	objptr, ##13028
20b34     F2 02 68 FC | 	wrlong	#1, objptr
20b38     01 00 00 FF 
20b3c     9C E4 05 F1 | 	add	objptr, ##668
20b40     F2 00 68 FC | 	wrlong	#0, objptr
20b44     01 00 00 FF 
20b48     00 EA 05 F1 | 	add	ptr__dat__, ##512
20b4c     08 E4 05 F1 | 	add	objptr, #8
20b50     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
20b54     04 E4 85 F1 | 	sub	objptr, #4
20b58     03 00 80 FF 
20b5c     F2 3C 69 FC | 	wrlong	##1694, objptr
20b60     0C 00 00 FF 
20b64     50 E5 85 F1 | 	sub	objptr, ##6480
20b68     F2 18 68 FC | 	wrlong	#12, objptr
20b6c     45 00 00 FF 
20b70     64 E4 85 F1 | 	sub	objptr, ##35428
20b74     01 00 00 FF 
20b78     00 EA 85 F1 | 	sub	ptr__dat__, ##512
20b7c     D8 D9 BF FD | 	call	#_init_commands
20b80     6C F6 BF FD | 	call	#_init_error_strings
20b84     F0 ED BF FD | 	call	#_init_audio
20b88     B8 49 BF FD | 	call	#_do_new
20b8c     37 00 00 FF 
20b90     3C E4 05 F1 | 	add	objptr, ##28220
20b94     F2 12 02 FB | 	rdlong	arg01, objptr
20b98     04 E4 85 F1 | 	sub	objptr, #4
20b9c     F2 14 02 FB | 	rdlong	arg02, objptr
20ba0     37 00 00 FF 
20ba4     38 E4 85 F1 | 	sub	objptr, ##28216
20ba8     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
20bac     37 00 00 FF 
20bb0     40 E4 05 F1 | 	add	objptr, ##28224
20bb4     F2 12 02 FB | 	rdlong	arg01, objptr
20bb8     37 00 00 FF 
20bbc     40 E4 85 F1 | 	sub	objptr, ##28224
20bc0     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
20bc4                 | ' 
20bc4                 | ' leading_spaces:=amount
20bc4     01 00 00 FF 
20bc8     B6 E4 05 F1 | 	add	objptr, ##694
20bcc     F2 04 68 FC | 	wrlong	#2, objptr
20bd0     01 00 00 FF 
20bd4     B6 E4 85 F1 | 	sub	objptr, ##694
20bd8     A5 01 00 FF 
20bdc     85 26 06 F6 | 	mov	local01, ##@LR__5862
20be0     3D 12 06 F6 | 	mov	arg01, #61
20be4     3C 14 06 F6 | 	mov	arg02, #60
20be8     3B 16 06 F6 | 	mov	arg03, #59
20bec     3A 18 06 F6 | 	mov	arg04, #58
20bf0     A4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
20bf4     FD 14 02 F6 | 	mov	arg02, result1
20bf8     13 13 02 F6 | 	mov	arg01, local01
20bfc     E0 36 B0 FD | 	call	#__system___mount
20c00     A5 01 00 FF 
20c04     89 12 06 F6 | 	mov	arg01, ##@LR__5863
20c08     94 39 B0 FD | 	call	#__system___chdir
20c0c     A5 01 00 FF 
20c10     91 26 06 F6 | 	mov	local01, ##@LR__5864
20c14     4A 00 00 FF 
20c18     94 E4 05 F1 | 	add	objptr, ##38036
20c1c     F2 26 62 FC | 	wrlong	local01, objptr
20c20     13 00 00 FF 
20c24     60 E4 85 F1 | 	sub	objptr, ##9824
20c28     F2 12 02 FB | 	rdlong	arg01, objptr
20c2c     37 00 00 FF 
20c30     34 E4 85 F1 | 	sub	objptr, ##28212
20c34     01 12 66 F0 | 	shl	arg01, #1
20c38     01 14 06 F6 | 	mov	arg02, #1
20c3c     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
20c40                 | ' init_commands
20c40                 | ' init_error_strings
20c40                 | ' init_audio
20c40                 | ' do_new
20c40                 | ' cls(ink, paper)
20c40                 | ' v.setfontfamily(font) 				' use ST Mono font
20c40                 | ' v.setleadingspaces(2)
20c40                 | ' mount "/sd", _vfs_open_sdcard()
20c40                 | ' chdir "/sd/bas"
20c40                 | ' currentdir$="/sd/bas"
20c40                 | ' position 2*editor_spaces,1 : print ver$
20c40     00 12 06 F6 | 	mov	arg01, #0
20c44     F4 8F B0 FD | 	call	#__system___getiolock_0579
20c48     FD 12 02 F6 | 	mov	arg01, result1
20c4c     C4 32 B0 FD | 	call	#__system___lockmem
20c50     18 00 00 FF 
20c54     40 EB 05 F1 | 	add	ptr__dat__, ##12608
20c58     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
20c5c     18 00 00 FF 
20c60     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
20c64     00 12 06 F6 | 	mov	arg01, #0
20c68     00 16 06 F6 | 	mov	arg03, #0
20c6c     98 3F B0 FD | 	call	#__system___basic_print_string
20c70     00 12 06 F6 | 	mov	arg01, #0
20c74     0A 14 06 F6 | 	mov	arg02, #10
20c78     00 16 06 F6 | 	mov	arg03, #0
20c7c     30 3F B0 FD | 	call	#__system___basic_print_char
20c80     00 12 06 F6 | 	mov	arg01, #0
20c84     B4 8F B0 FD | 	call	#__system___getiolock_0579
20c88     FD 00 68 FC | 	wrlong	#0, result1
20c8c     51 00 00 FF 
20c90     AC E5 05 F1 | 	add	objptr, ##41900
20c94     F2 12 02 FB | 	rdlong	arg01, objptr
20c98     0E 00 00 FF 
20c9c     50 E5 85 F1 | 	sub	objptr, ##7504
20ca0     F2 26 02 FB | 	rdlong	local01, objptr
20ca4     43 00 00 FF 
20ca8     5C E4 85 F1 | 	sub	objptr, ##34396
20cac     13 13 82 F1 | 	sub	arg01, local01
20cb0     00 14 06 F6 | 	mov	arg02, #0
20cb4     0A 16 06 F6 | 	mov	arg03, #10
20cb8     28 55 B0 FD | 	call	#__system__Number_S
20cbc     FD 12 02 F6 | 	mov	arg01, result1
20cc0     A5 01 00 FF 
20cc4     99 14 06 F6 | 	mov	arg02, ##@LR__5865
20cc8     A4 32 B0 FD | 	call	#__system___string_concat
20ccc     FD 26 02 F6 | 	mov	local01, result1
20cd0     50 00 00 FF 
20cd4     10 E5 05 F1 | 	add	objptr, ##41232
20cd8     F2 26 62 FC | 	wrlong	local01, objptr
20cdc     50 00 00 FF 
20ce0     10 E5 85 F1 | 	sub	objptr, ##41232
20ce4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
20ce4     00 12 06 F6 | 	mov	arg01, #0
20ce8     50 8F B0 FD | 	call	#__system___getiolock_0579
20cec     FD 12 02 F6 | 	mov	arg01, result1
20cf0     20 32 B0 FD | 	call	#__system___lockmem
20cf4     50 00 00 FF 
20cf8     10 E5 05 F1 | 	add	objptr, ##41232
20cfc     F2 14 02 FB | 	rdlong	arg02, objptr
20d00     50 00 00 FF 
20d04     10 E5 85 F1 | 	sub	objptr, ##41232
20d08     00 12 06 F6 | 	mov	arg01, #0
20d0c     00 16 06 F6 | 	mov	arg03, #0
20d10     F4 3E B0 FD | 	call	#__system___basic_print_string
20d14     00 12 06 F6 | 	mov	arg01, #0
20d18     0A 14 06 F6 | 	mov	arg02, #10
20d1c     00 16 06 F6 | 	mov	arg03, #0
20d20     8C 3E B0 FD | 	call	#__system___basic_print_char
20d24     00 12 06 F6 | 	mov	arg01, #0
20d28     10 8F B0 FD | 	call	#__system___getiolock_0579
20d2c     FD 00 68 FC | 	wrlong	#0, result1
20d30     37 00 00 FF 
20d34     34 E4 05 F1 | 	add	objptr, ##28212
20d38     F2 12 02 FB | 	rdlong	arg01, objptr
20d3c     37 00 00 FF 
20d40     34 E4 85 F1 | 	sub	objptr, ##28212
20d44     01 12 66 F0 | 	shl	arg01, #1
20d48     04 14 06 F6 | 	mov	arg02, #4
20d4c     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
20d50                 | ' position 2*editor_spaces,4 : print "Ready"
20d50     00 12 06 F6 | 	mov	arg01, #0
20d54     E4 8E B0 FD | 	call	#__system___getiolock_0579
20d58     FD 12 02 F6 | 	mov	arg01, result1
20d5c     B4 31 B0 FD | 	call	#__system___lockmem
20d60     A5 01 00 FF 
20d64     AB 14 06 F6 | 	mov	arg02, ##@LR__5866
20d68     00 12 06 F6 | 	mov	arg01, #0
20d6c     00 16 06 F6 | 	mov	arg03, #0
20d70     94 3E B0 FD | 	call	#__system___basic_print_string
20d74     00 12 06 F6 | 	mov	arg01, #0
20d78     0A 14 06 F6 | 	mov	arg02, #10
20d7c     00 16 06 F6 | 	mov	arg03, #0
20d80     2C 3E B0 FD | 	call	#__system___basic_print_char
20d84     00 12 06 F6 | 	mov	arg01, #0
20d88     B0 8E B0 FD | 	call	#__system___getiolock_0579
20d8c     FD 00 68 FC | 	wrlong	#0, result1
20d90     00 14 06 F6 | 	mov	arg02, #0
20d94     01 14 D6 F7 | 	test	arg02, #1 wc
20d98     5A 4C 64 FD | 	drvc	#38
20d9c     01 14 D6 F7 | 	test	arg02, #1 wc
20da0     5A 4E 64 FD | 	drvc	#39
20da4     A5 01 00 FF 
20da8     B1 26 06 F6 | 	mov	local01, ##@LR__5867
20dac     51 00 00 FF 
20db0     D8 E5 05 F1 | 	add	objptr, ##41944
20db4     F2 26 62 FC | 	wrlong	local01, objptr
20db8     04 E4 05 F1 | 	add	objptr, #4
20dbc     FF FF FF FF 
20dc0     F2 FE 6B FC | 	wrlong	##-1, objptr
20dc4     0C E4 05 F1 | 	add	objptr, #12
20dc8     F2 00 68 FC | 	wrlong	#0, objptr
20dcc     51 00 00 FF 
20dd0     E8 E5 85 F1 | 	sub	objptr, ##41960
20dd4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
20dd4                 | ' loadname="noname.bas"
20dd4                 | ' do_insert=-1
20dd4                 | ' inload=0
20dd4                 | ' 
20dd4                 | ' open "/sd/bas/autorun.bas" for input as #9
20dd4     A5 01 00 FF 
20dd8     BC 14 06 F6 | 	mov	arg02, ##@LR__5868
20ddc     09 12 06 F6 | 	mov	arg01, #9
20de0     00 16 06 F6 | 	mov	arg03, #0
20de4     30 3D B0 FD | 	call	#__system___basic_open_string
20de8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20dec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20df0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20df4     51 00 00 FF 
20df8     EC E5 05 F1 | 	add	objptr, ##41964
20dfc     F2 FA 61 FC | 	wrlong	result1, objptr
20e00     51 00 00 FF 
20e04     EC E5 85 F1 | 	sub	objptr, ##41964
20e08                 | ' err=geterr()
20e08                 | ' close #9
20e08     09 12 06 F6 | 	mov	arg01, #9
20e0c     5C 84 B0 FD | 	call	#__system__close
20e10                 | ' if err=0 then line$="run autorun.bas" : interpret
20e10     51 00 00 FF 
20e14     EC E5 05 F1 | 	add	objptr, ##41964
20e18     F2 26 0A FB | 	rdlong	local01, objptr wz
20e1c     51 00 00 FF 
20e20     EC E5 85 F1 | 	sub	objptr, ##41964
20e24     A5 01 00 AF 
20e28     D0 26 06 A6 |  if_e	mov	local01, ##@LR__5869
20e2c     37 00 00 AF 
20e30     1C E4 05 A1 |  if_e	add	objptr, ##28188
20e34     F2 26 62 AC |  if_e	wrlong	local01, objptr
20e38     37 00 00 AF 
20e3c     1C E4 85 A1 |  if_e	sub	objptr, ##28188
20e40     04 09 BE AD |  if_e	call	#_interpret
20e44                 | ' 
20e44                 | ' 
20e44                 | ' '-------------------------------------------------------------------------------------------------------- 
20e44                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
20e44                 | ' '--------------------------------------------------------------------------------------------------------
20e44                 | ' 
20e44                 | ' do
20e44                 | LR__2550
20e44     BC F9 BD FD | 	call	#_edit
20e48     FD 26 02 F6 | 	mov	local01, result1
20e4c     37 00 00 FF 
20e50     1C E4 05 F1 | 	add	objptr, ##28188
20e54     F2 26 62 FC | 	wrlong	local01, objptr
20e58     37 00 00 FF 
20e5c     1C E4 85 F1 | 	sub	objptr, ##28188
20e60     E4 08 BE FD | 	call	#_interpret
20e64     A5 01 00 FF 
20e68     E0 26 06 F6 | 	mov	local01, ##@LR__5870
20e6c     37 00 00 FF 
20e70     1C E4 05 F1 | 	add	objptr, ##28188
20e74     F2 26 62 FC | 	wrlong	local01, objptr
20e78     37 00 00 FF 
20e7c     1C E4 85 F1 | 	sub	objptr, ##28188
20e80     C0 FF 9F FD | 	jmp	#LR__2550
20e84     A7 F0 03 F6 | 	mov	ptra, fp
20e88     B2 00 A0 FD | 	call	#popregs_
20e8c                 | _program_ret
20e8c     2D 00 64 FD | 	ret
20e90                 | 
20e90                 | ' '' this is not a main program.
20e90                 | ' 
20e90                 | ' '****************************************************************************************************************
20e90                 | ' '                                                                                                             	*
20e90                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
20e90                 | ' '                                                                                                            	*
20e90                 | ' ' base - HDMI base pin												*
20e90                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
20e90                 | ' '														*
20e90                 | ' '														*
20e90                 | ' '****************************************************************************************************************
20e90                 | ' 
20e90                 | ' pub start(base,mb):result |i
20e90                 | _hg010b_spin2_start
20e90                 | ' 
20e90                 | ' '--------------------------- initialize pointers and variables
20e90                 | ' 
20e90                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
20e90     34 E4 05 F1 | 	add	objptr, #52
20e94     F2 FA 01 F6 | 	mov	result1, objptr
20e98     28 E4 85 F1 | 	sub	objptr, #40
20e9c     F2 FA 61 FC | 	wrlong	result1, objptr
20ea0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
20ea0                 | ' hdmibase:=base							' HDMI base pin, 8*n
20ea0     18 E4 05 F1 | 	add	objptr, #24
20ea4     F2 12 62 FC | 	wrlong	arg01, objptr
20ea8                 | ' mailbox_ptr:=mb		
20ea8     04 E4 05 F1 | 	add	objptr, #4
20eac     F2 14 62 FC | 	wrlong	arg02, objptr
20eb0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
20eb0     C1 E5 05 F1 | 	add	objptr, #449
20eb4     F2 14 62 FC | 	wrlong	arg02, objptr
20eb8                 | ' sprite_ptr:=@spr1ptr
20eb8     D8 E4 85 F1 | 	sub	objptr, #216
20ebc     F2 FA 01 F6 | 	mov	result1, objptr
20ec0     E5 E4 85 F1 | 	sub	objptr, #229
20ec4     F2 FA 61 FC | 	wrlong	result1, objptr
20ec8                 | ' 
20ec8                 | ' 		'
20ec8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
20ec8     E5 E4 05 F1 | 	add	objptr, #229
20ecc     F2 FA 01 FB | 	rdlong	result1, objptr
20ed0     D0 FA 05 F1 | 	add	result1, #208
20ed4     FD 10 58 FC | 	wrword	#8, result1
20ed8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
20ed8     F2 16 02 FB | 	rdlong	arg03, objptr
20edc     D2 16 06 F1 | 	add	arg03, #210
20ee0     0B 21 58 FC | 	wrword	#16, arg03
20ee4                 | ' leading_spaces:=0				'
20ee4     A5 E5 05 F1 | 	add	objptr, #421
20ee8     F2 00 68 FC | 	wrlong	#0, objptr
20eec                 | ' 
20eec                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
20eec     99 E4 85 F1 | 	sub	objptr, #153
20ef0     00 00 A0 FF 
20ef4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
20ef8                 | ' emptydl[1]:=0
20ef8     04 E4 05 F1 | 	add	objptr, #4
20efc     F2 00 68 FC | 	wrlong	#0, objptr
20f00                 | ' 
20f00                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
20f00                 | ' 
20f00                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
20f00     28 E5 85 F1 | 	sub	objptr, #296
20f04     F2 02 68 FC | 	wrlong	#1, objptr
20f08                 | ' if s_debug<>0
20f08                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
20f08     20 00 80 FF 
20f0c     F2 00 68 FC | 	wrlong	##16384, objptr
20f10     F9 E4 85 F1 | 	sub	objptr, #249
20f14                 | ' setmode()							' set the mode, see below
20f14     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
20f18                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
20f18     49 E4 05 F1 | 	add	objptr, #73
20f1c     F2 FA 01 F6 | 	mov	result1, objptr
20f20     35 E4 85 F1 | 	sub	objptr, #53
20f24     F2 FA 61 FC | 	wrlong	result1, objptr
20f28                 | ' cursor_ptr:=@cursor_x						
20f28     28 E4 05 F1 | 	add	objptr, #40
20f2c     F2 16 02 F6 | 	mov	arg03, objptr
20f30     2C E4 85 F1 | 	sub	objptr, #44
20f34     F2 16 62 FC | 	wrlong	arg03, objptr
20f38                 | ' fontnum:=0  							' start with a PC type font 
20f38     55 E4 05 F1 | 	add	objptr, #85
20f3c     F2 00 68 FC | 	wrlong	#0, objptr
20f40                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
20f40     1C E4 05 F1 | 	add	objptr, #28
20f44     F2 12 02 F6 | 	mov	arg01, objptr
20f48     81 E4 85 F1 | 	sub	objptr, #129
20f4c     10 00 00 FF 
20f50     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
20f54     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
20f58     10 00 00 FF 
20f5c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
20f60     10 16 06 F6 | 	mov	arg03, #16
20f64     CC 2E B0 FD | 	call	#__system____builtin_memmove
20f68                 | ' leading_spaces:=0
20f68     01 00 00 FF 
20f6c     B6 E4 05 F1 | 	add	objptr, ##694
20f70     F2 00 68 FC | 	wrlong	#0, objptr
20f74     01 00 00 FF 
20f78     B6 E4 85 F1 | 	sub	objptr, ##694
20f7c                 | ' '---------------------------- initialize a cursor (MSDOS type)
20f7c                 | ' 
20f7c                 | ' initcursor(154)
20f7c     9A 12 06 F6 | 	mov	arg01, #154
20f80     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
20f84                 | ' 
20f84                 | ' '---------------------------- start the cog
20f84                 | ' 
20f84                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
20f84     10 00 00 FF 
20f88     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
20f8c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
20f90     10 00 00 FF 
20f94     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
20f98     14 E4 05 F1 | 	add	objptr, #20
20f9c     10 FA 05 F6 | 	mov	result1, #16
20fa0     28 E4 61 FD | 	setq	objptr
20fa4     0A FB F1 FC | 	coginit	result1, arg02 wc
20fa8     01 FA 65 C6 |  if_b	neg	result1, #1
20fac     1C E4 05 F1 | 	add	objptr, #28
20fb0     F2 FA 61 FC | 	wrlong	result1, objptr
20fb4     30 E4 85 F1 | 	sub	objptr, #48
20fb8                 | ' waitms(40)							' wait for stabilize
20fb8     28 12 06 F6 | 	mov	arg01, #40
20fbc     48 32 B0 FD | 	call	#__system___waitms
20fc0                 | ' return cog							' return the driver's cog #
20fc0     30 E4 05 F1 | 	add	objptr, #48
20fc4     F2 FA 01 FB | 	rdlong	result1, objptr
20fc8     30 E4 85 F1 | 	sub	objptr, #48
20fcc                 | _hg010b_spin2_start_ret
20fcc     2D 00 64 FD | 	ret
20fd0                 | 
20fd0                 | ' 
20fd0                 | ' 
20fd0                 | ' '**************************************************************************************************************** 
20fd0                 | ' '                                                                                                             	*
20fd0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
20fd0                 | ' '  Mode number - see start() above or bits below								*
20fd0                 | ' '                                                                                                             	*
20fd0                 | ' '****************************************************************************************************************
20fd0                 | ' 
20fd0                 | ' '---------------------------- initialize a cursor (MSDOS type)
20fd0                 | ' pub initcursor(color) |i
20fd0                 | _hg010b_spin2_initcursor
20fd0     03 4A 05 F6 | 	mov	COUNT_, #3
20fd4     A8 00 A0 FD | 	call	#pushregs_
20fd8     09 27 02 F6 | 	mov	local01, arg01
20fdc                 | ' 
20fdc                 | ' cursor_x:=0							' place the cursor at 0:0
20fdc     3C E4 05 F1 | 	add	objptr, #60
20fe0     F2 00 58 FC | 	wrword	#0, objptr
20fe4                 | ' cursor_y:=0
20fe4     02 E4 05 F1 | 	add	objptr, #2
20fe8     F2 00 48 FC | 	wrbyte	#0, objptr
20fec                 | ' repeat i from 0 to 111
20fec     00 28 06 F6 | 	mov	local02, #0
20ff0     F8 E5 05 F1 | 	add	objptr, #504
20ff4     97 1A 48 FB | 	callpa	#(@LR__2562-@LR__2560)>>2,fcache_load_ptr_
20ff8                 | LR__2560
20ff8                 | '   cursor[i]:=0
20ff8     14 2B 02 F6 | 	mov	local03, local02
20ffc     F2 2A 02 F1 | 	add	local03, objptr
21000     15 01 48 FC | 	wrbyte	#0, local03
21004     01 28 06 F1 | 	add	local02, #1
21008     70 28 56 F2 | 	cmps	local02, #112 wc
2100c     E8 FF 9F CD |  if_b	jmp	#LR__2560
21010                 | ' repeat i from 112 to 127
21010     70 28 06 F6 | 	mov	local02, #112
21014                 | LR__2561
21014                 | '   cursor[i]:=color  
21014     14 2B 02 F6 | 	mov	local03, local02
21018     F2 2A 02 F1 | 	add	local03, objptr
2101c     15 27 42 FC | 	wrbyte	local01, local03
21020     01 28 06 F1 | 	add	local02, #1
21024     80 28 16 F2 | 	cmp	local02, #128 wc
21028     E8 FF 9F CD |  if_b	jmp	#LR__2561
2102c                 | LR__2562
2102c                 | ' 'repeat i from 0 to 127
2102c                 | ' '  if ((i/8)//2)
2102c                 | ' '    cursor[i]:=15
2102c                 | ' '  else
2102c                 | ' '    cursor[i]:=0
2102c                 | ' '  if i>=120    
2102c                 | ' '    cursor[i]:=40
2102c                 | ' setspriteptr(17,@cursor)
2102c     F2 14 02 F6 | 	mov	arg02, objptr
21030     01 00 00 FF 
21034     36 E4 85 F1 | 	sub	objptr, ##566
21038     11 12 06 F6 | 	mov	arg01, #17
2103c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
21040                 | ' setspritesize(17,8,16)
21040     11 12 06 F6 | 	mov	arg01, #17
21044     08 14 06 F6 | 	mov	arg02, #8
21048     10 16 06 F6 | 	mov	arg03, #16
2104c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
21050                 | ' setspritepos(17,0,0)
21050     11 12 06 F6 | 	mov	arg01, #17
21054     00 14 06 F6 | 	mov	arg02, #0
21058     00 16 06 F6 | 	mov	arg03, #0
2105c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
21060                 | ' cursorshape:=14
21060     0B 00 00 FF 
21064     C6 E4 05 F1 | 	add	objptr, ##5830
21068     F2 1C 68 FC | 	wrlong	#14, objptr
2106c                 | ' cursorcolor:=color
2106c     04 E4 85 F1 | 	sub	objptr, #4
21070     F2 26 62 FC | 	wrlong	local01, objptr
21074     0B 00 00 FF 
21078     C2 E4 85 F1 | 	sub	objptr, ##5826
2107c     A7 F0 03 F6 | 	mov	ptra, fp
21080     B2 00 A0 FD | 	call	#popregs_
21084                 | _hg010b_spin2_initcursor_ret
21084     2D 00 64 FD | 	ret
21088                 | 
21088                 | ' 
21088                 | ' pub setcursorshape(shape) | i
21088                 | _hg010b_spin2_setcursorshape
21088                 | ' 
21088                 | ' cursorshape:=shape
21088     0B 00 00 FF 
2108c     C6 E4 05 F1 | 	add	objptr, ##5830
21090     F2 12 62 FC | 	wrlong	arg01, objptr
21094                 | ' repeat i from 0 to (8*cursorshape)-1
21094     00 00 06 F6 | 	mov	_var01, #0
21098     09 03 02 F6 | 	mov	_var02, arg01
2109c     03 02 66 F0 | 	shl	_var02, #3
210a0     01 02 86 F1 | 	sub	_var02, #1
210a4     00 02 56 F2 | 	cmps	_var02, #0 wc
210a8     01 04 86 F6 | 	negc	_var03, #1
210ac     02 07 02 F6 | 	mov	_var04, _var03
210b0     02 03 02 F1 | 	add	_var02, _var03
210b4     0A 00 00 FF 
210b8     90 E4 85 F1 | 	sub	objptr, ##5264
210bc     97 0C 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
210c0                 | LR__2570
210c0                 | '   cursor[i]:=0
210c0     00 05 02 F6 | 	mov	_var03, _var01
210c4     F2 04 02 F1 | 	add	_var03, objptr
210c8     02 01 48 FC | 	wrbyte	#0, _var03
210cc     03 01 02 F1 | 	add	_var01, _var04
210d0     01 01 0A F2 | 	cmp	_var01, _var02 wz
210d4     E8 FF 9F 5D |  if_ne	jmp	#LR__2570
210d8                 | LR__2571
210d8                 | ' repeat i from 8*cursorshape to 127
210d8     0A 00 00 FF 
210dc     90 E4 05 F1 | 	add	objptr, ##5264
210e0     F2 06 02 FB | 	rdlong	_var04, objptr
210e4     03 01 02 F6 | 	mov	_var01, _var04
210e8     03 00 66 F0 | 	shl	_var01, #3
210ec     0B 00 00 FF 
210f0     C6 E4 85 F1 | 	sub	objptr, ##5830
210f4     03 06 66 F0 | 	shl	_var04, #3
210f8     80 06 56 F2 | 	cmps	_var04, #128 wc
210fc     01 04 A6 F6 | 	negnc	_var03, #1
21100     7F 02 06 F6 | 	mov	_var02, #127
21104     02 03 02 F1 | 	add	_var02, _var03
21108     97 1A 48 FB | 	callpa	#(@LR__2573-@LR__2572)>>2,fcache_load_ptr_
2110c                 | LR__2572
2110c                 | '   cursor[i]:=cursorcolor
2110c     00 07 02 F6 | 	mov	_var04, _var01
21110     01 00 00 FF 
21114     36 E4 05 F1 | 	add	objptr, ##566
21118     F2 06 02 F1 | 	add	_var04, objptr
2111c     0A 00 00 FF 
21120     8C E4 05 F1 | 	add	objptr, ##5260
21124     F2 12 02 FB | 	rdlong	arg01, objptr
21128     0B 00 00 FF 
2112c     C2 E4 85 F1 | 	sub	objptr, ##5826
21130     03 13 42 FC | 	wrbyte	arg01, _var04
21134     02 01 02 F1 | 	add	_var01, _var03
21138     01 01 0A F2 | 	cmp	_var01, _var02 wz
2113c     CC FF 9F 5D |  if_ne	jmp	#LR__2572
21140                 | LR__2573
21140                 | _hg010b_spin2_setcursorshape_ret
21140     2D 00 64 FD | 	ret
21144                 | 
21144                 | ' 
21144                 | ' pub setcursorcolor(color) | i
21144                 | _hg010b_spin2_setcursorcolor
21144                 | ' 
21144                 | ' cursorcolor:=color
21144     0B 00 00 FF 
21148     C2 E4 05 F1 | 	add	objptr, ##5826
2114c     F2 12 62 FC | 	wrlong	arg01, objptr
21150                 | ' repeat i from 0 to (8*cursorshape)-1
21150     00 12 06 F6 | 	mov	arg01, #0
21154     04 E4 05 F1 | 	add	objptr, #4
21158     F2 00 02 FB | 	rdlong	_var01, objptr
2115c     03 00 66 F0 | 	shl	_var01, #3
21160     01 00 86 F1 | 	sub	_var01, #1
21164     00 00 56 F2 | 	cmps	_var01, #0 wc
21168     01 02 86 F6 | 	negc	_var02, #1
2116c     01 05 02 F6 | 	mov	_var03, _var02
21170     01 01 02 F1 | 	add	_var01, _var02
21174     0A 00 00 FF 
21178     90 E4 85 F1 | 	sub	objptr, ##5264
2117c     97 0C 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
21180                 | LR__2580
21180                 | '   cursor[i]:=0
21180     09 03 02 F6 | 	mov	_var02, arg01
21184     F2 02 02 F1 | 	add	_var02, objptr
21188     01 01 48 FC | 	wrbyte	#0, _var02
2118c     02 13 02 F1 | 	add	arg01, _var03
21190     00 13 0A F2 | 	cmp	arg01, _var01 wz
21194     E8 FF 9F 5D |  if_ne	jmp	#LR__2580
21198                 | LR__2581
21198                 | ' repeat i from 8*cursorshape to 127
21198     0A 00 00 FF 
2119c     90 E4 05 F1 | 	add	objptr, ##5264
211a0     F2 04 02 FB | 	rdlong	_var03, objptr
211a4     02 13 02 F6 | 	mov	arg01, _var03
211a8     03 12 66 F0 | 	shl	arg01, #3
211ac     0B 00 00 FF 
211b0     C6 E4 85 F1 | 	sub	objptr, ##5830
211b4     03 04 66 F0 | 	shl	_var03, #3
211b8     80 04 56 F2 | 	cmps	_var03, #128 wc
211bc     01 02 A6 F6 | 	negnc	_var02, #1
211c0     7F 00 06 F6 | 	mov	_var01, #127
211c4     01 01 02 F1 | 	add	_var01, _var02
211c8     97 1A 48 FB | 	callpa	#(@LR__2583-@LR__2582)>>2,fcache_load_ptr_
211cc                 | LR__2582
211cc                 | '   cursor[i]:=cursorcolor
211cc     09 05 02 F6 | 	mov	_var03, arg01
211d0     01 00 00 FF 
211d4     36 E4 05 F1 | 	add	objptr, ##566
211d8     F2 04 02 F1 | 	add	_var03, objptr
211dc     0A 00 00 FF 
211e0     8C E4 05 F1 | 	add	objptr, ##5260
211e4     F2 06 02 FB | 	rdlong	_var04, objptr
211e8     0B 00 00 FF 
211ec     C2 E4 85 F1 | 	sub	objptr, ##5826
211f0     02 07 42 FC | 	wrbyte	_var04, _var03
211f4     01 13 02 F1 | 	add	arg01, _var02
211f8     00 13 0A F2 | 	cmp	arg01, _var01 wz
211fc     CC FF 9F 5D |  if_ne	jmp	#LR__2582
21200                 | LR__2583
21200                 | _hg010b_spin2_setcursorcolor_ret
21200     2D 00 64 FD | 	ret
21204                 | 
21204                 | '   
21204                 | '   
21204                 | '   
21204                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21204                 | _hg010b_spin2_setmode
21204     02 4A 05 F6 | 	mov	COUNT_, #2
21208     A8 00 A0 FD | 	call	#pushregs_
2120c                 | ' 
2120c                 | ' 
2120c                 | ' dl_ptr:=@emptydl[0]
2120c     01 00 00 FF 
21210     1D E4 05 F1 | 	add	objptr, ##541
21214     F2 1A 02 F6 | 	mov	arg05, objptr
21218     FD E5 85 F1 | 	sub	objptr, #509
2121c     F2 1A 62 FC | 	wrlong	arg05, objptr
21220                 | ' 
21220                 | ' if cog>0 
21220     10 E4 05 F1 | 	add	objptr, #16
21224     F2 1A 02 FB | 	rdlong	arg05, objptr
21228     30 E4 85 F1 | 	sub	objptr, #48
2122c     01 1A 56 F2 | 	cmps	arg05, #1 wc
21230                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21230     01 12 06 36 |  if_ae	mov	arg01, #1
21234     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21238                 | ' xres:=1024
21238     01 00 00 FF 
2123c     26 E4 05 F1 | 	add	objptr, ##550
21240     02 00 80 FF 
21244     F2 00 68 FC | 	wrlong	##1024, objptr
21248                 | ' yres:=600
21248     04 E4 05 F1 | 	add	objptr, #4
2124c     01 00 80 FF 
21250     F2 B0 68 FC | 	wrlong	##600, objptr
21254                 | ' ppl:=(timings[3])
21254     10 00 00 FF 
21258     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
2125c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21260     51 E5 85 F1 | 	sub	objptr, #337
21264     F2 1A 62 FC | 	wrlong	arg05, objptr
21268                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21268     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
2126c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21270     01 26 66 F0 | 	shl	local01, #1
21274     80 E4 85 F1 | 	sub	objptr, #128
21278     F2 26 62 FC | 	wrlong	local01, objptr
2127c                 | ' cpl1:=cpl '' todo remove
2127c     04 E4 05 F1 | 	add	objptr, #4
21280     F2 26 62 FC | 	wrlong	local01, objptr
21284                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21284     02 00 00 FF 
21288     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
2128c     41 E4 85 F1 | 	sub	objptr, #65
21290     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21294                 | ' repeat i from 0 to 3
21294     00 28 06 F6 | 	mov	local02, #0
21298     02 00 00 FF 
2129c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
212a0     08 E4 05 F1 | 	add	objptr, #8
212a4     97 20 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
212a8                 | LR__2590
212a8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
212a8     14 27 02 F6 | 	mov	local01, local02
212ac     02 26 66 F0 | 	shl	local01, #2
212b0     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
212b4     F2 1A 02 FB | 	rdlong	arg05, objptr
212b8     11 1A 66 F0 | 	shl	arg05, #17
212bc     13 27 02 FB | 	rdlong	local01, local01
212c0     0D 27 02 F1 | 	add	local01, arg05
212c4     80 40 38 FF 
212c8     00 26 06 F1 | 	add	local01, ##1887502336
212cc     14 1B 02 F6 | 	mov	arg05, local02
212d0     02 1A 66 F0 | 	shl	arg05, #2
212d4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
212d8     0D 27 62 FC | 	wrlong	local01, arg05
212dc     01 28 06 F1 | 	add	local02, #1
212e0     04 28 56 F2 | 	cmps	local02, #4 wc
212e4     C0 FF 9F CD |  if_b	jmp	#LR__2590
212e8                 | LR__2591
212e8     24 E4 85 F1 | 	sub	objptr, #36
212ec                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
212ec     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
212f0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
212f4     14 26 66 FC | 	wrlong	local01, #20
212f8                 | ' hubset(timings[10])
212f8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
212fc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
21300     10 00 00 FF 
21304     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
21308     00 12 62 FD | 	hubset	arg01
2130c                 | ' waitms(1)                                                   	' wait for stabilization
2130c     01 12 06 F6 | 	mov	arg01, #1
21310     F4 2E B0 FD | 	call	#__system___waitms
21314     10 00 00 FF 
21318     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
2131c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21320     61 E4 05 F1 | 	add	objptr, #97
21324     F2 28 62 FC | 	wrlong	local02, objptr
21328     14 27 52 F6 | 	abs	local01, local02 wc
2132c     04 26 46 F0 | 	shr	local01, #4
21330     13 27 82 F6 | 	negc	local01, local01
21334     9C E4 05 F1 | 	add	objptr, #156
21338     F2 26 62 FC | 	wrlong	local01, objptr
2133c     A4 E4 85 F1 | 	sub	objptr, #164
21340     F2 28 02 FB | 	rdlong	local02, objptr
21344     08 E4 05 F1 | 	add	objptr, #8
21348     F2 26 02 FB | 	rdlong	local01, objptr
2134c     13 29 02 FD | 	qmul	local02, local01
21350                 | ' lines:=timings[11]
21350                 | ' t_lines:=lines/16
21350                 | ' buflen:=cpl*lines						' framebuffer length in longs
21350     29 E4 85 F1 | 	sub	objptr, #41
21354     19 26 C6 F9 | 	decod	local01, #25
21358     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
2135c     18 28 62 FD | 	getqx	local02
21360     F2 28 62 FC | 	wrlong	local02, objptr
21364     38 E4 85 F1 | 	sub	objptr, #56
21368     02 28 66 F0 | 	shl	local02, #2
2136c     14 27 82 F1 | 	sub	local01, local02
21370     F2 26 62 FC | 	wrlong	local01, objptr
21374     FD E4 05 F1 | 	add	objptr, #253
21378     F2 28 02 FB | 	rdlong	local02, objptr
2137c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21380     0D 29 02 FD | 	qmul	local02, arg05
21384                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21384                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21384     F9 E4 85 F1 | 	sub	objptr, #249
21388                 | ' mode_ptr:=@timings						' set pointers to timings
21388     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
2138c                 | ' graphmode:=1024+512+192+48							' det global variable
2138c                 | ' makedl(graphmode)							' make a DL for the mode
2138c     03 00 00 FF 
21390     F0 12 06 F6 | 	mov	arg01, ##1776
21394     18 28 62 FD | 	getqx	local02
21398     14 27 82 F1 | 	sub	local01, local02
2139c     F2 26 62 FC | 	wrlong	local01, objptr
213a0     14 E4 05 F1 | 	add	objptr, #20
213a4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
213a8     79 E4 05 F1 | 	add	objptr, #121
213ac     03 00 80 FF 
213b0     F2 E0 69 FC | 	wrlong	##1776, objptr
213b4     91 E4 85 F1 | 	sub	objptr, #145
213b8     10 00 00 FF 
213bc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
213c0     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
213c4                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
213c4     F2 26 02 FB | 	rdlong	local01, objptr
213c8     DD E4 05 F1 | 	add	objptr, #221
213cc     F2 26 62 FC | 	wrlong	local01, objptr
213d0                 | ' s_font_ptr:=font_ptr
213d0     D5 E4 85 F1 | 	sub	objptr, #213
213d4     F2 26 02 FB | 	rdlong	local01, objptr
213d8     D9 E4 05 F1 | 	add	objptr, #217
213dc     F2 26 62 FC | 	wrlong	local01, objptr
213e0                 | ' s_lines:=lines
213e0     80 E4 85 F1 | 	sub	objptr, #128
213e4     F2 26 02 FB | 	rdlong	local01, objptr
213e8     84 E4 05 F1 | 	add	objptr, #132
213ec     F2 26 62 FC | 	wrlong	local01, objptr
213f0                 | ' s_buflen:=buflen
213f0     AD E4 85 F1 | 	sub	objptr, #173
213f4     F2 26 02 FB | 	rdlong	local01, objptr
213f8     B5 E4 05 F1 | 	add	objptr, #181
213fc     F2 26 62 FC | 	wrlong	local01, objptr
21400                 | ' s_cpl:=cpl
21400     94 E4 85 F1 | 	sub	objptr, #148
21404     F2 26 02 FB | 	rdlong	local01, objptr
21408     90 E4 05 F1 | 	add	objptr, #144
2140c     F2 26 62 FC | 	wrlong	local01, objptr
21410                 | ' s_cpl1:=cpl
21410     90 E4 85 F1 | 	sub	objptr, #144
21414     F2 26 02 FB | 	rdlong	local01, objptr
21418     98 E4 05 F1 | 	add	objptr, #152
2141c     F2 26 62 FC | 	wrlong	local01, objptr
21420                 | ' st_lines:=t_lines
21420     0C E4 05 F1 | 	add	objptr, #12
21424     F2 26 02 FB | 	rdlong	local01, objptr
21428     04 E4 05 F1 | 	add	objptr, #4
2142c     F2 26 62 FC | 	wrlong	local01, objptr
21430                 | ' ppl:=ppl/xzoom  
21430     28 E4 85 F1 | 	sub	objptr, #40
21434     F2 88 02 FB | 	rdlong	muldiva_, objptr
21438     2C E4 05 F1 | 	add	objptr, #44
2143c     F2 8A 02 FB | 	rdlong	muldivb_, objptr
21440     05 E5 85 F1 | 	sub	objptr, #261
21444     BA 00 A0 FD | 	call	#divide_
21448     D9 E4 05 F1 | 	add	objptr, #217
2144c     F2 8A 62 FC | 	wrlong	muldivb_, objptr
21450                 | ' s_ppl:=ppl
21450     1C E4 05 F1 | 	add	objptr, #28
21454     F2 8A 62 FC | 	wrlong	muldivb_, objptr
21458     F5 E4 85 F1 | 	sub	objptr, #245
2145c                 | ' waitms(20)							' wait 
2145c     14 12 06 F6 | 	mov	arg01, #20
21460     A4 2D B0 FD | 	call	#__system___waitms
21464                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21464     04 E4 05 F1 | 	add	objptr, #4
21468     F2 12 02 FB | 	rdlong	arg01, objptr
2146c     04 E4 85 F1 | 	sub	objptr, #4
21470     F2 16 02 FB | 	rdlong	arg03, objptr
21474     09 17 82 F1 | 	sub	arg03, arg01
21478     20 14 06 F6 | 	mov	arg02, #32
2147c     00 18 06 F6 | 	mov	arg04, #0
21480     01 1A 06 F6 | 	mov	arg05, #1
21484     0B 00 00 FF 
21488     CC E4 05 F1 | 	add	objptr, ##5836
2148c     7C 1F B0 FD | 	call	#_psram_spin2_fill
21490     0B 00 00 FF 
21494     CC E4 85 F1 | 	sub	objptr, ##5836
21498     A7 F0 03 F6 | 	mov	ptra, fp
2149c     B2 00 A0 FD | 	call	#popregs_
214a0                 | _hg010b_spin2_setmode_ret
214a0     2D 00 64 FD | 	ret
214a4                 | 
214a4                 | ' 
214a4                 | ' '****************************************************************************************************************
214a4                 | ' '                                                                                                             	*
214a4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
214a4                 | ' '                                                                                                             	*
214a4                 | ' '****************************************************************************************************************
214a4                 | ' 
214a4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
214a4                 | _hg010b_spin2_makedl
214a4                 | ' 
214a4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
214a4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
214a4                 | ' repeat i from 0 to 11                                                           ' clear DL
214a4     00 00 06 F6 | 	mov	_var01, #0
214a8     ED E5 05 F1 | 	add	objptr, #493
214ac     97 0E 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
214b0                 | LR__2600
214b0                 | '   displaylist[i]:=0 
214b0     00 03 02 F6 | 	mov	_var02, _var01
214b4     02 02 66 F0 | 	shl	_var02, #2
214b8     F2 02 02 F1 | 	add	_var02, objptr
214bc     01 01 68 FC | 	wrlong	#0, _var02
214c0     01 00 06 F1 | 	add	_var01, #1
214c4     0C 00 56 F2 | 	cmps	_var01, #12 wc
214c8     E4 FF 9F CD |  if_b	jmp	#LR__2600
214cc                 | LR__2601
214cc                 | '                         ' 
214cc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
214cc     8C E5 85 F1 | 	sub	objptr, #396
214d0     F2 02 02 FB | 	rdlong	_var02, objptr
214d4     14 02 66 F0 | 	shl	_var02, #20
214d8     01 02 06 F1 | 	add	_var02, #1
214dc     04 E4 85 F1 | 	sub	objptr, #4
214e0     F2 00 02 FB | 	rdlong	_var01, objptr
214e4     02 00 66 F0 | 	shl	_var01, #2
214e8     04 00 66 F0 | 	shl	_var01, #4
214ec     00 03 02 F1 | 	add	_var02, _var01
214f0     90 E5 05 F1 | 	add	objptr, #400
214f4     F2 02 62 FC | 	wrlong	_var02, objptr
214f8     ED E5 85 F1 | 	sub	objptr, #493
214fc                 | ' displaylist[1]:=buf_ptr<<4+%10  
214fc     F2 02 02 FB | 	rdlong	_var02, objptr
21500     04 02 66 F0 | 	shl	_var02, #4
21504     02 02 06 F1 | 	add	_var02, #2
21508     F1 E5 05 F1 | 	add	objptr, #497
2150c     F2 02 62 FC | 	wrlong	_var02, objptr
21510                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21510     04 E4 85 F1 | 	sub	objptr, #4
21514     F2 02 02 F6 | 	mov	_var02, objptr
21518     CD E5 85 F1 | 	sub	objptr, #461
2151c     F2 02 62 FC | 	wrlong	_var02, objptr
21520     20 E4 85 F1 | 	sub	objptr, #32
21524                 | _hg010b_spin2_makedl_ret
21524     2D 00 64 FD | 	ret
21528                 | 
21528                 | ' 
21528                 | ' 
21528                 | ' '****************************************************************************************************************
21528                 | ' '                                                                        					*
21528                 | ' '  Graphic primitives                                                    					*
21528                 | ' '                                                                        					*
21528                 | ' '****************************************************************************************************************
21528                 | ' 
21528                 | ' pub setspriteptr(num,ptr)
21528                 | _hg010b_spin2_setspriteptr
21528                 | ' long[@spr1ptr+12*num]:=ptr
21528     11 E5 05 F1 | 	add	objptr, #273
2152c     F2 00 02 F6 | 	mov	_var01, objptr
21530     09 03 02 F6 | 	mov	_var02, arg01
21534     01 02 66 F0 | 	shl	_var02, #1
21538     09 03 02 F1 | 	add	_var02, arg01
2153c     02 02 66 F0 | 	shl	_var02, #2
21540     01 01 02 F1 | 	add	_var01, _var02
21544     00 15 62 FC | 	wrlong	arg02, _var01
21548     11 E5 85 F1 | 	sub	objptr, #273
2154c                 | _hg010b_spin2_setspriteptr_ret
2154c     2D 00 64 FD | 	ret
21550                 | 
21550                 | ' 
21550                 | ' pub setspritepos(num,x,y)
21550                 | _hg010b_spin2_setspritepos
21550                 | ' if y>601
21550     01 00 00 FF 
21554     5A 16 56 F2 | 	cmps	arg03, ##602 wc
21558                 | '   y:=601
21558     01 00 00 3F 
2155c     59 16 06 36 |  if_ae	mov	arg03, ##601
21560                 | ' if x>1024
21560     02 00 00 FF 
21564     01 14 56 F2 | 	cmps	arg02, ##1025 wc
21568                 | '   x:=1024
21568     0A 14 C6 39 |  if_ae	decod	arg02, #10
2156c                 | ' word[@spr1ptr+12*num+4]:=x
2156c     11 E5 05 F1 | 	add	objptr, #273
21570     F2 00 02 F6 | 	mov	_var01, objptr
21574     09 03 02 F6 | 	mov	_var02, arg01
21578     01 02 66 F0 | 	shl	_var02, #1
2157c     09 03 02 F1 | 	add	_var02, arg01
21580     02 02 66 F0 | 	shl	_var02, #2
21584     01 01 02 F1 | 	add	_var01, _var02
21588     04 00 06 F1 | 	add	_var01, #4
2158c     00 15 52 FC | 	wrword	arg02, _var01
21590                 | ' word[@spr1ptr+12*num+6]:=y
21590     F2 00 02 F6 | 	mov	_var01, objptr
21594     09 03 02 F6 | 	mov	_var02, arg01
21598     01 02 66 F0 | 	shl	_var02, #1
2159c     09 03 02 F1 | 	add	_var02, arg01
215a0     02 02 66 F0 | 	shl	_var02, #2
215a4     01 01 02 F1 | 	add	_var01, _var02
215a8     06 00 06 F1 | 	add	_var01, #6
215ac     00 17 52 FC | 	wrword	arg03, _var01
215b0     11 E5 85 F1 | 	sub	objptr, #273
215b4                 | _hg010b_spin2_setspritepos_ret
215b4     2D 00 64 FD | 	ret
215b8                 | 
215b8                 | ' 
215b8                 | ' pub setspritesize(num,w,h)
215b8                 | _hg010b_spin2_setspritesize
215b8                 | ' word[@spr1ptr+12*num+8]:=w
215b8     11 E5 05 F1 | 	add	objptr, #273
215bc     F2 00 02 F6 | 	mov	_var01, objptr
215c0     09 03 02 F6 | 	mov	_var02, arg01
215c4     01 02 66 F0 | 	shl	_var02, #1
215c8     09 03 02 F1 | 	add	_var02, arg01
215cc     02 02 66 F0 | 	shl	_var02, #2
215d0     01 01 02 F1 | 	add	_var01, _var02
215d4     08 00 06 F1 | 	add	_var01, #8
215d8     00 15 52 FC | 	wrword	arg02, _var01
215dc                 | ' word[@spr1ptr+12*num+10]:=h
215dc     F2 00 02 F6 | 	mov	_var01, objptr
215e0     09 03 02 F6 | 	mov	_var02, arg01
215e4     01 02 66 F0 | 	shl	_var02, #1
215e8     09 03 02 F1 | 	add	_var02, arg01
215ec     02 02 66 F0 | 	shl	_var02, #2
215f0     01 01 02 F1 | 	add	_var01, _var02
215f4     0A 00 06 F1 | 	add	_var01, #10
215f8     00 17 52 FC | 	wrword	arg03, _var01
215fc     11 E5 85 F1 | 	sub	objptr, #273
21600                 | _hg010b_spin2_setspritesize_ret
21600     2D 00 64 FD | 	ret
21604                 | 
21604                 | ' 
21604                 | ' 
21604                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
21604                 | ' 
21604                 | ' 
21604                 | ' pub putpixel(x,y,c)
21604                 | _hg010b_spin2_putpixel
21604     04 4A 05 F6 | 	mov	COUNT_, #4
21608     A8 00 A0 FD | 	call	#pushregs_
2160c     09 27 02 F6 | 	mov	local01, arg01
21610                 | ' 
21610                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
21610     00 28 06 F6 | 	mov	local02, #0
21614     00 26 56 F2 | 	cmps	local01, #0 wc
21618     01 28 66 36 |  if_ae	neg	local02, #1
2161c     E9 E4 05 F1 | 	add	objptr, #233
21620     F2 1A 02 FB | 	rdlong	arg05, objptr
21624     02 1A 66 F0 | 	shl	arg05, #2
21628     0D 27 52 F2 | 	cmps	local01, arg05 wc
2162c     15 2B A2 F1 | 	subx	local03, local03
21630     15 29 02 F5 | 	and	local02, local03
21634     00 2A 06 F6 | 	mov	local03, #0
21638     00 14 56 F2 | 	cmps	arg02, #0 wc
2163c     01 2A 66 36 |  if_ae	neg	local03, #1
21640     15 29 02 F5 | 	and	local02, local03
21644     04 E4 85 F1 | 	sub	objptr, #4
21648     F2 2A 02 FB | 	rdlong	local03, objptr
2164c     E5 E4 85 F1 | 	sub	objptr, #229
21650     15 15 52 F2 | 	cmps	arg02, local03 wc
21654     16 2D A2 F1 | 	subx	local04, local04
21658     16 29 CA F7 | 	test	local02, local04 wz
2165c     48 00 90 AD |  if_e	jmp	#LR__2610
21660     DD E4 05 F1 | 	add	objptr, #221
21664     F2 12 02 FB | 	rdlong	arg01, objptr
21668     14 E4 05 F1 | 	add	objptr, #20
2166c     F2 2C 02 FB | 	rdlong	local04, objptr
21670     02 2C 66 F0 | 	shl	local04, #2
21674     0A 2D 02 FD | 	qmul	local04, arg02
21678                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21678     0B 15 02 F6 | 	mov	arg02, arg03
2167c     01 16 06 F6 | 	mov	arg03, #1
21680     00 18 06 F6 | 	mov	arg04, #0
21684     01 1A 06 F6 | 	mov	arg05, #1
21688     0A 00 00 FF 
2168c     DB E5 05 F1 | 	add	objptr, ##5595
21690     18 2C 62 FD | 	getqx	local04
21694     13 2D 02 F1 | 	add	local04, local01
21698     16 13 02 F1 | 	add	arg01, local04
2169c     6C 1D B0 FD | 	call	#_psram_spin2_fill
216a0     0B 00 00 FF 
216a4     CC E4 85 F1 | 	sub	objptr, ##5836
216a8                 | LR__2610
216a8     A7 F0 03 F6 | 	mov	ptra, fp
216ac     B2 00 A0 FD | 	call	#popregs_
216b0                 | _hg010b_spin2_putpixel_ret
216b0     2D 00 64 FD | 	ret
216b4                 | 
216b4                 | ' 
216b4                 | ' pub putpixel2(x,y,c)
216b4                 | _hg010b_spin2_putpixel2
216b4     02 4A 05 F6 | 	mov	COUNT_, #2
216b8     A8 00 A0 FD | 	call	#pushregs_
216bc     DD E4 05 F1 | 	add	objptr, #221
216c0     F2 26 02 FB | 	rdlong	local01, objptr
216c4     14 E4 05 F1 | 	add	objptr, #20
216c8     F2 1A 02 FB | 	rdlong	arg05, objptr
216cc     02 1A 66 F0 | 	shl	arg05, #2
216d0     0A 1B 02 FD | 	qmul	arg05, arg02
216d4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
216d4     0B 15 02 F6 | 	mov	arg02, arg03
216d8     01 16 06 F6 | 	mov	arg03, #1
216dc     00 18 06 F6 | 	mov	arg04, #0
216e0     01 1A 06 F6 | 	mov	arg05, #1
216e4     0A 00 00 FF 
216e8     DB E5 05 F1 | 	add	objptr, ##5595
216ec     18 28 62 FD | 	getqx	local02
216f0     09 29 02 F1 | 	add	local02, arg01
216f4     14 27 02 F1 | 	add	local01, local02
216f8     13 13 02 F6 | 	mov	arg01, local01
216fc     0C 1D B0 FD | 	call	#_psram_spin2_fill
21700     0B 00 00 FF 
21704     CC E4 85 F1 | 	sub	objptr, ##5836
21708     A7 F0 03 F6 | 	mov	ptra, fp
2170c     B2 00 A0 FD | 	call	#popregs_
21710                 | _hg010b_spin2_putpixel2_ret
21710     2D 00 64 FD | 	ret
21714                 | 
21714                 | ' 
21714                 | ' pub getpixel2(x,y): c 
21714                 | _hg010b_spin2_getpixel2
21714     02 4A 05 F6 | 	mov	COUNT_, #2
21718     A8 00 A0 FD | 	call	#pushregs_
2171c     0C F0 07 F1 | 	add	ptra, #12
21720     04 4E 05 F1 | 	add	fp, #4
21724     A7 12 62 FC | 	wrlong	arg01, fp
21728     04 4E 05 F1 | 	add	fp, #4
2172c     A7 14 62 FC | 	wrlong	arg02, fp
21730     08 4E 85 F1 | 	sub	fp, #8
21734     A7 00 68 FC | 	wrlong	#0, fp
21738     A7 12 02 F6 | 	mov	arg01, fp
2173c     DD E4 05 F1 | 	add	objptr, #221
21740     F2 14 02 FB | 	rdlong	arg02, objptr
21744     14 E4 05 F1 | 	add	objptr, #20
21748     F2 16 02 FB | 	rdlong	arg03, objptr
2174c     02 16 66 F0 | 	shl	arg03, #2
21750     08 4E 05 F1 | 	add	fp, #8
21754     A7 FA 01 FB | 	rdlong	result1, fp
21758     FD 16 02 FD | 	qmul	arg03, result1
2175c                 | ' 
2175c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
2175c     04 4E 85 F1 | 	sub	fp, #4
21760     A7 26 02 FB | 	rdlong	local01, fp
21764     04 4E 85 F1 | 	sub	fp, #4
21768     01 16 06 F6 | 	mov	arg03, #1
2176c     0A 00 00 FF 
21770     DB E5 05 F1 | 	add	objptr, ##5595
21774     18 28 62 FD | 	getqx	local02
21778     13 29 02 F1 | 	add	local02, local01
2177c     14 15 02 F1 | 	add	arg02, local02
21780     50 1B B0 FD | 	call	#_psram_spin2_read1
21784     0B 00 00 FF 
21788     CC E4 85 F1 | 	sub	objptr, ##5836
2178c                 | ' return c
2178c     A7 FA 01 FB | 	rdlong	result1, fp
21790     A7 F0 03 F6 | 	mov	ptra, fp
21794     B2 00 A0 FD | 	call	#popregs_
21798                 | _hg010b_spin2_getpixel2_ret
21798     2D 00 64 FD | 	ret
2179c                 | 
2179c                 | '   
2179c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
2179c                 | ' 
2179c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
2179c                 | _hg010b_spin2_fastline
2179c     02 4A 05 F6 | 	mov	COUNT_, #2
217a0     A8 00 A0 FD | 	call	#pushregs_
217a4     09 27 02 F6 | 	mov	local01, arg01
217a8     0A 29 02 F6 | 	mov	local02, arg02
217ac                 | ' 
217ac                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
217ac     00 16 56 F2 | 	cmps	arg03, #0 wc
217b0     F4 00 90 CD |  if_b	jmp	#LR__2620
217b4     01 00 00 FF 
217b8     2A E4 05 F1 | 	add	objptr, ##554
217bc     F2 1A 02 FB | 	rdlong	arg05, objptr
217c0     01 00 00 FF 
217c4     2A E4 85 F1 | 	sub	objptr, ##554
217c8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
217cc     D8 00 90 3D |  if_ae	jmp	#LR__2620
217d0     00 26 56 F2 | 	cmps	local01, #0 wc
217d4     00 28 56 C2 |  if_b	cmps	local02, #0 wc
217d8     CC 00 90 CD |  if_b	jmp	#LR__2620
217dc     01 00 00 FF 
217e0     26 E4 05 F1 | 	add	objptr, ##550
217e4     F2 1A 02 FB | 	rdlong	arg05, objptr
217e8     01 00 00 FF 
217ec     26 E4 85 F1 | 	sub	objptr, ##550
217f0     0D 27 5A F2 | 	cmps	local01, arg05 wcz
217f4     01 00 00 1F 
217f8     26 E4 05 11 |  if_a	add	objptr, ##550
217fc     F2 12 02 1B |  if_a	rdlong	arg01, objptr
21800     01 00 00 1F 
21804     26 E4 85 11 |  if_a	sub	objptr, ##550
21808     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
2180c                 | '   return
2180c     98 00 90 1D |  if_a	jmp	#LR__2620
21810     14 27 5A F2 | 	cmps	local01, local02 wcz
21814     13 1B 02 16 |  if_a	mov	arg05, local01
21818     14 27 02 16 |  if_a	mov	local01, local02
2181c     0D 29 02 16 |  if_a	mov	local02, arg05
21820     00 26 56 F2 | 	cmps	local01, #0 wc
21824     00 26 06 C6 |  if_b	mov	local01, #0
21828     01 00 00 FF 
2182c     26 E4 05 F1 | 	add	objptr, ##550
21830     F2 1A 02 FB | 	rdlong	arg05, objptr
21834     01 00 00 FF 
21838     26 E4 85 F1 | 	sub	objptr, ##550
2183c     0D 29 52 F2 | 	cmps	local02, arg05 wc
21840     01 00 00 3F 
21844     26 E4 05 31 |  if_ae	add	objptr, ##550
21848     F2 28 02 3B |  if_ae	rdlong	local02, objptr
2184c     01 00 00 3F 
21850     26 E4 85 31 |  if_ae	sub	objptr, ##550
21854     DD E4 05 F1 | 	add	objptr, #221
21858     F2 12 02 FB | 	rdlong	arg01, objptr
2185c     14 E4 05 F1 | 	add	objptr, #20
21860     F2 1A 02 FB | 	rdlong	arg05, objptr
21864     02 1A 66 F0 | 	shl	arg05, #2
21868     0B 1B 02 FD | 	qmul	arg05, arg03
2186c                 | ' if x1>x2
2186c                 | '   x1,x2:=x2,x1
2186c                 | ' if x1<0 
2186c                 | '   x1:=0
2186c                 | ' if x2>=xres
2186c                 | '   x2:=xres-1  
2186c     01 28 86 31 |  if_ae	sub	local02, #1
21870                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
21870     01 16 06 F6 | 	mov	arg03, #1
21874     14 17 02 F1 | 	add	arg03, local02
21878     13 17 82 F1 | 	sub	arg03, local01
2187c     0C 15 02 F6 | 	mov	arg02, arg04
21880     00 18 06 F6 | 	mov	arg04, #0
21884     01 1A 06 F6 | 	mov	arg05, #1
21888     0A 00 00 FF 
2188c     DB E5 05 F1 | 	add	objptr, ##5595
21890     18 28 62 FD | 	getqx	local02
21894     13 29 02 F1 | 	add	local02, local01
21898     14 13 02 F1 | 	add	arg01, local02
2189c     6C 1B B0 FD | 	call	#_psram_spin2_fill
218a0     0B 00 00 FF 
218a4     CC E4 85 F1 | 	sub	objptr, ##5836
218a8                 | LR__2620
218a8     A7 F0 03 F6 | 	mov	ptra, fp
218ac     B2 00 A0 FD | 	call	#popregs_
218b0                 | _hg010b_spin2_fastline_ret
218b0     2D 00 64 FD | 	ret
218b4                 | 
218b4                 | ' 
218b4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
218b4                 | _hg010b_spin2_draw
218b4     0E 4A 05 F6 | 	mov	COUNT_, #14
218b8     A8 00 A0 FD | 	call	#pushregs_
218bc     09 27 02 F6 | 	mov	local01, arg01
218c0     0A 29 02 F6 | 	mov	local02, arg02
218c4     0B 2B 02 F6 | 	mov	local03, arg03
218c8     0C 2D 02 F6 | 	mov	local04, arg04
218cc     0D 2F 02 F6 | 	mov	local05, arg05
218d0                 | ' 
218d0                 | ' if (y1==y2)
218d0     16 29 0A F2 | 	cmp	local02, local04 wz
218d4     18 00 90 5D |  if_ne	jmp	#LR__2630
218d8                 | '   fastline(x1,x2,y1,c)
218d8     13 13 02 F6 | 	mov	arg01, local01
218dc     15 15 02 F6 | 	mov	arg02, local03
218e0     14 17 02 F6 | 	mov	arg03, local02
218e4     17 19 02 F6 | 	mov	arg04, local05
218e8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
218ec     F8 00 90 FD | 	jmp	#LR__2636
218f0                 | LR__2630
218f0                 | ' else  
218f0                 | '   x:=x1
218f0     13 31 02 F6 | 	mov	local06, local01
218f4                 | '   y:=y1
218f4     14 33 02 F6 | 	mov	local07, local02
218f8                 | ' 
218f8                 | '   if (x1<x2) 
218f8     15 27 52 F2 | 	cmps	local01, local03 wc
218fc                 | '     xi:=1
218fc     01 34 06 C6 |  if_b	mov	local08, #1
21900                 | '     dx:=x2-x1
21900     15 37 02 C6 |  if_b	mov	local09, local03
21904     13 37 82 C1 |  if_b	sub	local09, local01
21908                 | '   else
21908                 | '     xi:=-1
21908     01 34 66 36 |  if_ae	neg	local08, #1
2190c                 | '     dx:=x1-x2
2190c     15 27 82 31 |  if_ae	sub	local01, local03
21910     13 37 02 36 |  if_ae	mov	local09, local01
21914                 | '   
21914                 | '   if (y1<y2) 
21914     16 29 52 F2 | 	cmps	local02, local04 wc
21918                 | '     yi:=1
21918     01 38 06 C6 |  if_b	mov	local10, #1
2191c                 | '     dy:=y2-y1
2191c     16 3B 02 C6 |  if_b	mov	local11, local04
21920     14 3B 82 C1 |  if_b	sub	local11, local02
21924                 | '   else
21924                 | '     yi:=-1
21924     01 38 66 36 |  if_ae	neg	local10, #1
21928                 | '     dy:=y1-y2
21928     16 29 82 31 |  if_ae	sub	local02, local04
2192c     14 3B 02 36 |  if_ae	mov	local11, local02
21930                 | ' 
21930                 | '   putpixel(x,y,c)
21930     17 17 02 F6 | 	mov	arg03, local05
21934     18 13 02 F6 | 	mov	arg01, local06
21938     19 15 02 F6 | 	mov	arg02, local07
2193c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
21940                 | ' 
21940                 | '   if (dx>dy)
21940     1D 37 5A F2 | 	cmps	local09, local11 wcz
21944     50 00 90 ED |  if_be	jmp	#LR__2632
21948                 | '     ai:=(dy-dx)*2
21948     1D 3D 02 F6 | 	mov	local12, local11
2194c     1B 3D 82 F1 | 	sub	local12, local09
21950     01 3C 66 F0 | 	shl	local12, #1
21954                 | '     bi:=dy*2
21954     01 3A 66 F0 | 	shl	local11, #1
21958     1D 3F 02 F6 | 	mov	local13, local11
2195c                 | '     d:= bi-dx
2195c     1F 41 02 F6 | 	mov	local14, local13
21960     1B 41 82 F1 | 	sub	local14, local09
21964                 | '     repeat while (x<>x2) 
21964                 | LR__2631
21964     15 31 0A F2 | 	cmp	local06, local03 wz
21968     7C 00 90 AD |  if_e	jmp	#LR__2635
2196c                 | '       if (d>=0) 
2196c     00 40 56 F2 | 	cmps	local14, #0 wc
21970                 | '         x+=xi
21970     1A 31 02 31 |  if_ae	add	local06, local08
21974                 | '         y+=yi
21974     1C 33 02 31 |  if_ae	add	local07, local10
21978                 | '         d+=ai
21978     1E 41 02 31 |  if_ae	add	local14, local12
2197c                 | '       else
2197c                 | '         d+=bi
2197c     1F 41 02 C1 |  if_b	add	local14, local13
21980                 | '         x+=xi
21980     1A 31 02 C1 |  if_b	add	local06, local08
21984                 | '       putpixel(x,y,c)
21984     18 13 02 F6 | 	mov	arg01, local06
21988     19 15 02 F6 | 	mov	arg02, local07
2198c     17 17 02 F6 | 	mov	arg03, local05
21990     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
21994     CC FF 9F FD | 	jmp	#LR__2631
21998                 | LR__2632
21998                 | '   else
21998                 | '     ai:=(dx-dy)*2
21998     1B 3D 02 F6 | 	mov	local12, local09
2199c     1D 3D 82 F1 | 	sub	local12, local11
219a0     01 3C 66 F0 | 	shl	local12, #1
219a4                 | '     bi:=dx*2
219a4     01 36 66 F0 | 	shl	local09, #1
219a8     1B 3F 02 F6 | 	mov	local13, local09
219ac                 | '     d:=bi-dy
219ac     1F 41 02 F6 | 	mov	local14, local13
219b0     1D 41 82 F1 | 	sub	local14, local11
219b4                 | '     repeat while (y<>y2)
219b4                 | LR__2633
219b4     16 33 0A F2 | 	cmp	local07, local04 wz
219b8     2C 00 90 AD |  if_e	jmp	#LR__2634
219bc                 | '       if (d>=0)
219bc     00 40 56 F2 | 	cmps	local14, #0 wc
219c0                 | '         x+=xi
219c0     1A 31 02 31 |  if_ae	add	local06, local08
219c4                 | '         y+=yi
219c4     1C 33 02 31 |  if_ae	add	local07, local10
219c8                 | '         d+=ai
219c8     1E 41 02 31 |  if_ae	add	local14, local12
219cc                 | '       else
219cc                 | '         d+=bi
219cc     1F 41 02 C1 |  if_b	add	local14, local13
219d0                 | '         y+=yi
219d0     1C 33 02 C1 |  if_b	add	local07, local10
219d4                 | '       putpixel(x, y,c)
219d4     18 13 02 F6 | 	mov	arg01, local06
219d8     19 15 02 F6 | 	mov	arg02, local07
219dc     17 17 02 F6 | 	mov	arg03, local05
219e0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
219e4     CC FF 9F FD | 	jmp	#LR__2633
219e8                 | LR__2634
219e8                 | LR__2635
219e8                 | LR__2636
219e8     A7 F0 03 F6 | 	mov	ptra, fp
219ec     B2 00 A0 FD | 	call	#popregs_
219f0                 | _hg010b_spin2_draw_ret
219f0     2D 00 64 FD | 	ret
219f4                 | 
219f4                 | '  
219f4                 | ' pub fillpush(val) 
219f4                 | _hg010b_spin2_fillpush
219f4                 | ' fillstack[fillptr]:=val
219f4     0B 00 00 FF 
219f8     BA E4 05 F1 | 	add	objptr, ##5818
219fc     F2 00 02 FB | 	rdlong	_var01, objptr
21a00     02 00 66 F0 | 	shl	_var01, #2
21a04     0A 00 00 FF 
21a08     00 E4 85 F1 | 	sub	objptr, ##5120
21a0c     F2 00 02 F1 | 	add	_var01, objptr
21a10     00 13 62 FC | 	wrlong	arg01, _var01
21a14                 | ' fillptr+=1   
21a14     0A 00 00 FF 
21a18     00 E4 05 F1 | 	add	objptr, ##5120
21a1c     F2 00 02 FB | 	rdlong	_var01, objptr
21a20     01 00 06 F1 | 	add	_var01, #1
21a24     F2 00 62 FC | 	wrlong	_var01, objptr
21a28     0B 00 00 FF 
21a2c     BA E4 85 F1 | 	sub	objptr, ##5818
21a30                 | _hg010b_spin2_fillpush_ret
21a30     2D 00 64 FD | 	ret
21a34                 | 
21a34                 | ' 
21a34                 | '     
21a34                 | ' pub fillpop() : val
21a34                 | _hg010b_spin2_fillpop
21a34                 | ' 
21a34                 | ' fillptr-=1
21a34     0B 00 00 FF 
21a38     BA E4 05 F1 | 	add	objptr, ##5818
21a3c     F2 FA 01 FB | 	rdlong	result1, objptr
21a40     01 FA 85 F1 | 	sub	result1, #1
21a44     F2 FA 61 FC | 	wrlong	result1, objptr
21a48                 | ' if fillptr<0
21a48     0B 00 00 FF 
21a4c     BA E4 85 F1 | 	sub	objptr, ##5818
21a50     00 FA 55 F2 | 	cmps	result1, #0 wc
21a54                 | '   fillptr:=0
21a54     0B 00 00 CF 
21a58     BA E4 05 C1 |  if_b	add	objptr, ##5818
21a5c     F2 00 68 CC |  if_b	wrlong	#0, objptr
21a60     0B 00 00 CF 
21a64     BA E4 85 C1 |  if_b	sub	objptr, ##5818
21a68                 | '   val:=-12345
21a68     E7 FF 7F CF 
21a6c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
21a70     28 00 90 CD |  if_b	jmp	#LR__2640
21a74                 | ' else 
21a74                 | '   val:=fillstack[fillptr]
21a74     0B 00 00 FF 
21a78     BA E4 05 F1 | 	add	objptr, ##5818
21a7c     F2 00 02 FB | 	rdlong	_var01, objptr
21a80     02 00 66 F0 | 	shl	_var01, #2
21a84     0A 00 00 FF 
21a88     00 E4 85 F1 | 	sub	objptr, ##5120
21a8c     F2 00 02 F1 | 	add	_var01, objptr
21a90     00 01 02 FB | 	rdlong	_var01, _var01
21a94     01 00 00 FF 
21a98     BA E4 85 F1 | 	sub	objptr, ##698
21a9c                 | LR__2640
21a9c                 | ' return val
21a9c     00 FB 01 F6 | 	mov	result1, _var01
21aa0                 | _hg010b_spin2_fillpop_ret
21aa0     2D 00 64 FD | 	ret
21aa4                 | 
21aa4                 | ' 
21aa4                 | '       
21aa4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
21aa4                 | _hg010b_spin2_fill
21aa4     0B 4A 05 F6 | 	mov	COUNT_, #11
21aa8     A8 00 A0 FD | 	call	#pushregs_
21aac                 | ' 
21aac                 | ' newcolor:=newcolor & 255
21aac     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
21ab0                 | ' oldcolor:=oldcolor & 255
21ab0     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
21ab4                 | ' 
21ab4                 | ' if (oldcolor == newcolor) 
21ab4     13 29 0A F2 | 	cmp	local02, local01 wz
21ab8                 | '   return
21ab8     70 02 90 AD |  if_e	jmp	#LR__2659
21abc                 | ' 
21abc                 | ' fillptr:=0
21abc     0B 00 00 FF 
21ac0     BA E4 05 F1 | 	add	objptr, ##5818
21ac4     F2 00 68 FC | 	wrlong	#0, objptr
21ac8                 | ' fillmax:=0
21ac8     04 E4 05 F1 | 	add	objptr, #4
21acc     F2 00 68 FC | 	wrlong	#0, objptr
21ad0     0B 00 00 FF 
21ad4     BE E4 85 F1 | 	sub	objptr, ##5822
21ad8                 | ' fillpush(x)
21ad8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
21adc                 | ' fillpush(y)
21adc     0A 13 02 F6 | 	mov	arg01, arg02
21ae0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
21ae4                 | ' y:=fillpop()
21ae4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
21ae8     FD 2A 02 F6 | 	mov	local03, result1
21aec                 | ' x:=fillpop()
21aec     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
21af0     FD 2C 02 F6 | 	mov	local04, result1
21af4                 | ' 'pinhigh(38)
21af4                 | ' repeat while (x>-1)       
21af4                 | LR__2650
21af4     00 2C 56 F2 | 	cmps	local04, #0 wc
21af8     30 02 90 CD |  if_b	jmp	#LR__2658
21afc                 | '  ' pintoggle(39)
21afc                 | '   x1 := x
21afc     16 2F 02 F6 | 	mov	local05, local04
21b00                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
21b00                 | LR__2651
21b00     00 30 06 F6 | 	mov	local06, #0
21b04     00 32 06 F6 | 	mov	local07, #0
21b08     00 2E 56 F2 | 	cmps	local05, #0 wc
21b0c     01 32 66 36 |  if_ae	neg	local07, #1
21b10     00 32 0E F2 | 	cmp	local07, #0 wz
21b14     00 30 26 56 |  if_ne	not	local06, #0
21b18     00 34 06 F6 | 	mov	local08, #0
21b1c     00 36 06 F6 | 	mov	local09, #0
21b20     15 15 02 F6 | 	mov	arg02, local03
21b24     17 13 02 F6 | 	mov	arg01, local05
21b28     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
21b2c     14 FB 09 F2 | 	cmp	result1, local02 wz
21b30     00 36 26 A6 |  if_e	not	local09, #0
21b34     00 36 0E F2 | 	cmp	local09, #0 wz
21b38     00 34 26 56 |  if_ne	not	local08, #0
21b3c     1A 31 CA F7 | 	test	local06, local08 wz
21b40                 | '     x1--
21b40     01 2E 86 51 |  if_ne	sub	local05, #1
21b44     B8 FF 9F 5D |  if_ne	jmp	#LR__2651
21b48                 | '   x1++
21b48     01 2E 06 F1 | 	add	local05, #1
21b4c                 | '   spanabove := 0
21b4c     00 38 06 F6 | 	mov	local10, #0
21b50                 | '   spanbelow := 0
21b50     00 3A 06 F6 | 	mov	local11, #0
21b54                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
21b54                 | LR__2652
21b54     00 30 06 F6 | 	mov	local06, #0
21b58     02 00 00 FF 
21b5c     00 2E 56 F2 | 	cmps	local05, ##1024 wc
21b60     00 30 26 C6 |  if_b	not	local06, #0
21b64     00 34 06 F6 | 	mov	local08, #0
21b68     00 36 06 F6 | 	mov	local09, #0
21b6c     15 15 02 F6 | 	mov	arg02, local03
21b70     17 13 02 F6 | 	mov	arg01, local05
21b74     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
21b78     14 FB 09 F2 | 	cmp	result1, local02 wz
21b7c     00 36 26 A6 |  if_e	not	local09, #0
21b80     00 36 0E F2 | 	cmp	local09, #0 wz
21b84     00 34 26 56 |  if_ne	not	local08, #0
21b88     1A 31 CA F7 | 	test	local06, local08 wz
21b8c     88 01 90 AD |  if_e	jmp	#LR__2657
21b90                 | '     putpixel2 (x1,y, newcolor & 255)
21b90     13 17 E2 F8 | 	getbyte	arg03, local01, #0
21b94     17 13 02 F6 | 	mov	arg01, local05
21b98     15 15 02 F6 | 	mov	arg02, local03
21b9c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
21ba0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
21ba0     00 30 06 F6 | 	mov	local06, #0
21ba4     00 32 06 F6 | 	mov	local07, #0
21ba8     00 38 0E F2 | 	cmp	local10, #0 wz
21bac     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
21bb0     01 32 66 26 |  if_nc_and_z	neg	local07, #1
21bb4     00 32 0E F2 | 	cmp	local07, #0 wz
21bb8     00 30 26 56 |  if_ne	not	local06, #0
21bbc     00 34 06 F6 | 	mov	local08, #0
21bc0     00 36 06 F6 | 	mov	local09, #0
21bc4     15 15 02 F6 | 	mov	arg02, local03
21bc8     01 14 86 F1 | 	sub	arg02, #1
21bcc     17 13 02 F6 | 	mov	arg01, local05
21bd0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
21bd4     14 FB 09 F2 | 	cmp	result1, local02 wz
21bd8     00 36 26 A6 |  if_e	not	local09, #0
21bdc     00 36 0E F2 | 	cmp	local09, #0 wz
21be0     00 34 26 56 |  if_ne	not	local08, #0
21be4     1A 31 CA F7 | 	test	local06, local08 wz
21be8     1C 00 90 AD |  if_e	jmp	#LR__2653
21bec                 | '       fillpush(x1)
21bec     17 13 02 F6 | 	mov	arg01, local05
21bf0     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
21bf4                 | '       fillpush(y-1)
21bf4     15 13 02 F6 | 	mov	arg01, local03
21bf8     01 12 86 F1 | 	sub	arg01, #1
21bfc     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
21c00                 | '       spanabove := 1 
21c00     01 38 06 F6 | 	mov	local10, #1
21c04     4C 00 90 FD | 	jmp	#LR__2654
21c08                 | LR__2653
21c08                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
21c08     00 30 06 F6 | 	mov	local06, #0
21c0c     00 32 06 F6 | 	mov	local07, #0
21c10     00 38 0E F2 | 	cmp	local10, #0 wz
21c14     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
21c18     01 32 66 16 |  if_a	neg	local07, #1
21c1c     00 32 0E F2 | 	cmp	local07, #0 wz
21c20     00 30 26 56 |  if_ne	not	local06, #0
21c24     00 34 06 F6 | 	mov	local08, #0
21c28     00 36 06 F6 | 	mov	local09, #0
21c2c     15 15 02 F6 | 	mov	arg02, local03
21c30     01 14 86 F1 | 	sub	arg02, #1
21c34     17 13 02 F6 | 	mov	arg01, local05
21c38     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
21c3c     14 FB 09 F2 | 	cmp	result1, local02 wz
21c40     00 36 26 56 |  if_ne	not	local09, #0
21c44     00 36 0E F2 | 	cmp	local09, #0 wz
21c48     00 34 26 56 |  if_ne	not	local08, #0
21c4c     1A 31 CA F7 | 	test	local06, local08 wz
21c50                 | '       spanabove := 0 
21c50     00 38 06 56 |  if_ne	mov	local10, #0
21c54                 | LR__2654
21c54                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
21c54     00 30 06 F6 | 	mov	local06, #0
21c58     00 32 06 F6 | 	mov	local07, #0
21c5c     00 3A 0E F2 | 	cmp	local11, #0 wz
21c60     01 00 00 AF 
21c64     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
21c68     01 32 66 86 |  if_c_and_z	neg	local07, #1
21c6c     00 32 0E F2 | 	cmp	local07, #0 wz
21c70     00 30 26 56 |  if_ne	not	local06, #0
21c74     00 34 06 F6 | 	mov	local08, #0
21c78     00 36 06 F6 | 	mov	local09, #0
21c7c     15 15 02 F6 | 	mov	arg02, local03
21c80     01 14 06 F1 | 	add	arg02, #1
21c84     17 13 02 F6 | 	mov	arg01, local05
21c88     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
21c8c     14 FB 09 F2 | 	cmp	result1, local02 wz
21c90     00 36 26 A6 |  if_e	not	local09, #0
21c94     00 36 0E F2 | 	cmp	local09, #0 wz
21c98     00 34 26 56 |  if_ne	not	local08, #0
21c9c     1A 31 CA F7 | 	test	local06, local08 wz
21ca0     1C 00 90 AD |  if_e	jmp	#LR__2655
21ca4                 | '       fillpush(x1)
21ca4     17 13 02 F6 | 	mov	arg01, local05
21ca8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
21cac                 | '       fillpush(y + 1)
21cac     15 13 02 F6 | 	mov	arg01, local03
21cb0     01 12 06 F1 | 	add	arg01, #1
21cb4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
21cb8                 | '       spanBelow := 1
21cb8     01 3A 06 F6 | 	mov	local11, #1
21cbc     50 00 90 FD | 	jmp	#LR__2656
21cc0                 | LR__2655
21cc0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
21cc0     00 30 06 F6 | 	mov	local06, #0
21cc4     00 32 06 F6 | 	mov	local07, #0
21cc8     00 3A 0E F2 | 	cmp	local11, #0 wz
21ccc     01 00 00 5F 
21cd0     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
21cd4     01 32 66 46 |  if_c_and_nz	neg	local07, #1
21cd8     00 32 0E F2 | 	cmp	local07, #0 wz
21cdc     00 30 26 56 |  if_ne	not	local06, #0
21ce0     00 34 06 F6 | 	mov	local08, #0
21ce4     00 36 06 F6 | 	mov	local09, #0
21ce8     15 15 02 F6 | 	mov	arg02, local03
21cec     01 14 06 F1 | 	add	arg02, #1
21cf0     17 13 02 F6 | 	mov	arg01, local05
21cf4     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
21cf8     14 FB 09 F2 | 	cmp	result1, local02 wz
21cfc     00 36 26 56 |  if_ne	not	local09, #0
21d00     00 36 0E F2 | 	cmp	local09, #0 wz
21d04     00 34 26 56 |  if_ne	not	local08, #0
21d08     1A 31 CA F7 | 	test	local06, local08 wz
21d0c                 | '       spanbelow := 0
21d0c     00 3A 06 56 |  if_ne	mov	local11, #0
21d10                 | LR__2656
21d10                 | '     x1++
21d10     01 2E 06 F1 | 	add	local05, #1
21d14     3C FE 9F FD | 	jmp	#LR__2652
21d18                 | LR__2657
21d18                 | '   y:=fillpop()
21d18     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
21d1c     FD 2A 02 F6 | 	mov	local03, result1
21d20                 | '   x:=fillpop()
21d20     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
21d24     FD 2C 02 F6 | 	mov	local04, result1
21d28     C8 FD 9F FD | 	jmp	#LR__2650
21d2c                 | LR__2658
21d2c                 | LR__2659
21d2c     A7 F0 03 F6 | 	mov	ptra, fp
21d30     B2 00 A0 FD | 	call	#popregs_
21d34                 | _hg010b_spin2_fill_ret
21d34     2D 00 64 FD | 	ret
21d38                 | 
21d38                 | ' 'pinlow(38)    
21d38                 | ' 
21d38                 | ' '-- A filled circle -----------------------------------------------------
21d38                 | ' 
21d38                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
21d38                 | _hg010b_spin2_fcircle
21d38     08 4A 05 F6 | 	mov	COUNT_, #8
21d3c     A8 00 A0 FD | 	call	#pushregs_
21d40     0B 27 02 F6 | 	mov	local01, arg03
21d44     FF FF 7F FF 
21d48     FE 27 06 FD | 	qmul	local01, ##-2
21d4c     09 29 02 F6 | 	mov	local02, arg01
21d50     0A 2B 02 F6 | 	mov	local03, arg02
21d54     0C 2D 02 F6 | 	mov	local04, arg04
21d58                 | ' 
21d58                 | ' d:=5-4*r
21d58     13 19 02 F6 | 	mov	arg04, local01
21d5c     02 18 66 F0 | 	shl	arg04, #2
21d60     05 2E 06 F6 | 	mov	local05, #5
21d64     0C 2F 82 F1 | 	sub	local05, arg04
21d68                 | ' x:=0
21d68     00 30 06 F6 | 	mov	local06, #0
21d6c                 | ' y:=r
21d6c                 | ' da:=(-2*r+5)*4
21d6c                 | ' db:=3*4
21d6c     0C 32 06 F6 | 	mov	local07, #12
21d70                 | ' repeat while (x<=y) 
21d70     18 34 62 FD | 	getqx	local08
21d74     05 34 06 F1 | 	add	local08, #5
21d78     02 34 66 F0 | 	shl	local08, #2
21d7c                 | LR__2660
21d7c     13 31 5A F2 | 	cmps	local06, local01 wcz
21d80     B4 00 90 1D |  if_a	jmp	#LR__2662
21d84                 | '   fastline(x0-x,x0+x,y0-y,c)
21d84     14 13 02 F6 | 	mov	arg01, local02
21d88     18 13 82 F1 | 	sub	arg01, local06
21d8c     14 15 02 F6 | 	mov	arg02, local02
21d90     18 15 02 F1 | 	add	arg02, local06
21d94     15 17 02 F6 | 	mov	arg03, local03
21d98     13 17 82 F1 | 	sub	arg03, local01
21d9c     16 19 02 F6 | 	mov	arg04, local04
21da0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
21da4                 | '   fastline(x0-x,x0+x,y0+y,c)
21da4     14 13 02 F6 | 	mov	arg01, local02
21da8     18 13 82 F1 | 	sub	arg01, local06
21dac     14 15 02 F6 | 	mov	arg02, local02
21db0     18 15 02 F1 | 	add	arg02, local06
21db4     15 17 02 F6 | 	mov	arg03, local03
21db8     13 17 02 F1 | 	add	arg03, local01
21dbc     16 19 02 F6 | 	mov	arg04, local04
21dc0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
21dc4                 | '   fastline(x0-y,x0+y,y0-x,c)
21dc4     14 13 02 F6 | 	mov	arg01, local02
21dc8     13 13 82 F1 | 	sub	arg01, local01
21dcc     14 15 02 F6 | 	mov	arg02, local02
21dd0     13 15 02 F1 | 	add	arg02, local01
21dd4     15 17 02 F6 | 	mov	arg03, local03
21dd8     18 17 82 F1 | 	sub	arg03, local06
21ddc     16 19 02 F6 | 	mov	arg04, local04
21de0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
21de4                 | '   fastline(x0-y,x0+y,y0+x,c)
21de4     14 13 02 F6 | 	mov	arg01, local02
21de8     13 13 82 F1 | 	sub	arg01, local01
21dec     14 15 02 F6 | 	mov	arg02, local02
21df0     13 15 02 F1 | 	add	arg02, local01
21df4     15 17 02 F6 | 	mov	arg03, local03
21df8     18 17 02 F1 | 	add	arg03, local06
21dfc     16 19 02 F6 | 	mov	arg04, local04
21e00     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
21e04                 | '   if d>0 
21e04     01 2E 56 F2 | 	cmps	local05, #1 wc
21e08     18 00 90 CD |  if_b	jmp	#LR__2661
21e0c                 | '     d+=da
21e0c     1A 2F 02 F1 | 	add	local05, local08
21e10                 | '     y-=1
21e10     01 26 86 F1 | 	sub	local01, #1
21e14                 | '     x+=1
21e14     01 30 06 F1 | 	add	local06, #1
21e18                 | '     da+=4*4
21e18     10 34 06 F1 | 	add	local08, #16
21e1c                 | '     db+=2*4
21e1c     08 32 06 F1 | 	add	local07, #8
21e20     58 FF 9F FD | 	jmp	#LR__2660
21e24                 | LR__2661
21e24                 | '   else
21e24                 | '     d+=db
21e24     19 2F 02 F1 | 	add	local05, local07
21e28                 | '     x+=1
21e28     01 30 06 F1 | 	add	local06, #1
21e2c                 | '     da+=2*4
21e2c     08 34 06 F1 | 	add	local08, #8
21e30                 | '     db+=2*4
21e30     08 32 06 F1 | 	add	local07, #8
21e34     44 FF 9F FD | 	jmp	#LR__2660
21e38                 | LR__2662
21e38     A7 F0 03 F6 | 	mov	ptra, fp
21e3c     B2 00 A0 FD | 	call	#popregs_
21e40                 | _hg010b_spin2_fcircle_ret
21e40     2D 00 64 FD | 	ret
21e44                 | 
21e44                 | '  
21e44                 | ' '-- A circle ------------------------------------------------------------ 
21e44                 | '  
21e44                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
21e44                 | _hg010b_spin2_circle
21e44     08 4A 05 F6 | 	mov	COUNT_, #8
21e48     A8 00 A0 FD | 	call	#pushregs_
21e4c     0B 27 02 F6 | 	mov	local01, arg03
21e50     FF FF 7F FF 
21e54     FE 27 06 FD | 	qmul	local01, ##-2
21e58     09 29 02 F6 | 	mov	local02, arg01
21e5c     0A 2B 02 F6 | 	mov	local03, arg02
21e60     0C 2D 02 F6 | 	mov	local04, arg04
21e64                 | ' 
21e64                 | '  
21e64                 | ' d:=5-4*r
21e64     13 19 02 F6 | 	mov	arg04, local01
21e68     02 18 66 F0 | 	shl	arg04, #2
21e6c     05 2E 06 F6 | 	mov	local05, #5
21e70     0C 2F 82 F1 | 	sub	local05, arg04
21e74                 | ' x:=0
21e74     00 30 06 F6 | 	mov	local06, #0
21e78                 | ' y:=r
21e78                 | ' da:=(-2*r+5)*4
21e78                 | ' db:=3*4
21e78     0C 32 06 F6 | 	mov	local07, #12
21e7c                 | ' repeat while (x<=y) 
21e7c     18 34 62 FD | 	getqx	local08
21e80     05 34 06 F1 | 	add	local08, #5
21e84     02 34 66 F0 | 	shl	local08, #2
21e88                 | LR__2670
21e88     13 31 5A F2 | 	cmps	local06, local01 wcz
21e8c     F4 00 90 1D |  if_a	jmp	#LR__2672
21e90                 | '   putpixel(x0-x,y0-y,c)
21e90     14 13 02 F6 | 	mov	arg01, local02
21e94     18 13 82 F1 | 	sub	arg01, local06
21e98     15 15 02 F6 | 	mov	arg02, local03
21e9c     13 15 82 F1 | 	sub	arg02, local01
21ea0     16 17 02 F6 | 	mov	arg03, local04
21ea4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
21ea8                 | '   putpixel(x0-x,y0+y,c)
21ea8     14 13 02 F6 | 	mov	arg01, local02
21eac     18 13 82 F1 | 	sub	arg01, local06
21eb0     15 15 02 F6 | 	mov	arg02, local03
21eb4     13 15 02 F1 | 	add	arg02, local01
21eb8     16 17 02 F6 | 	mov	arg03, local04
21ebc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
21ec0                 | '   putpixel(x0+x,y0-y,c)
21ec0     14 13 02 F6 | 	mov	arg01, local02
21ec4     18 13 02 F1 | 	add	arg01, local06
21ec8     15 15 02 F6 | 	mov	arg02, local03
21ecc     13 15 82 F1 | 	sub	arg02, local01
21ed0     16 17 02 F6 | 	mov	arg03, local04
21ed4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
21ed8                 | '   putpixel(x0+x,y0+y,c)
21ed8     14 13 02 F6 | 	mov	arg01, local02
21edc     18 13 02 F1 | 	add	arg01, local06
21ee0     15 15 02 F6 | 	mov	arg02, local03
21ee4     13 15 02 F1 | 	add	arg02, local01
21ee8     16 17 02 F6 | 	mov	arg03, local04
21eec     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
21ef0                 | '   putpixel(x0-y,y0-x,c)
21ef0     14 13 02 F6 | 	mov	arg01, local02
21ef4     13 13 82 F1 | 	sub	arg01, local01
21ef8     15 15 02 F6 | 	mov	arg02, local03
21efc     18 15 82 F1 | 	sub	arg02, local06
21f00     16 17 02 F6 | 	mov	arg03, local04
21f04     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
21f08                 | '   putpixel(x0-y,y0+x,c)
21f08     14 13 02 F6 | 	mov	arg01, local02
21f0c     13 13 82 F1 | 	sub	arg01, local01
21f10     15 15 02 F6 | 	mov	arg02, local03
21f14     18 15 02 F1 | 	add	arg02, local06
21f18     16 17 02 F6 | 	mov	arg03, local04
21f1c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
21f20                 | '   putpixel(x0+y,y0-x,c)
21f20     14 13 02 F6 | 	mov	arg01, local02
21f24     13 13 02 F1 | 	add	arg01, local01
21f28     15 15 02 F6 | 	mov	arg02, local03
21f2c     18 15 82 F1 | 	sub	arg02, local06
21f30     16 17 02 F6 | 	mov	arg03, local04
21f34     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
21f38                 | '   putpixel(x0+y,y0+x,c)
21f38     14 13 02 F6 | 	mov	arg01, local02
21f3c     13 13 02 F1 | 	add	arg01, local01
21f40     15 15 02 F6 | 	mov	arg02, local03
21f44     18 15 02 F1 | 	add	arg02, local06
21f48     16 17 02 F6 | 	mov	arg03, local04
21f4c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
21f50                 | '   if d>0 
21f50     01 2E 56 F2 | 	cmps	local05, #1 wc
21f54     18 00 90 CD |  if_b	jmp	#LR__2671
21f58                 | '     d+=da
21f58     1A 2F 02 F1 | 	add	local05, local08
21f5c                 | '     y-=1
21f5c     01 26 86 F1 | 	sub	local01, #1
21f60                 | '     x+=1
21f60     01 30 06 F1 | 	add	local06, #1
21f64                 | '     da+=4*4
21f64     10 34 06 F1 | 	add	local08, #16
21f68                 | '     db+=2*4
21f68     08 32 06 F1 | 	add	local07, #8
21f6c     18 FF 9F FD | 	jmp	#LR__2670
21f70                 | LR__2671
21f70                 | '   else
21f70                 | '     d+=db
21f70     19 2F 02 F1 | 	add	local05, local07
21f74                 | '     x+=1
21f74     01 30 06 F1 | 	add	local06, #1
21f78                 | '     da+=2*4
21f78     08 34 06 F1 | 	add	local08, #8
21f7c                 | '     db+=2*4
21f7c     08 32 06 F1 | 	add	local07, #8
21f80     04 FF 9F FD | 	jmp	#LR__2670
21f84                 | LR__2672
21f84     A7 F0 03 F6 | 	mov	ptra, fp
21f88     B2 00 A0 FD | 	call	#popregs_
21f8c                 | _hg010b_spin2_circle_ret
21f8c     2D 00 64 FD | 	ret
21f90                 | 
21f90                 | '     
21f90                 | ' '-- A frame (an empty rectangle) ---------------------------------------
21f90                 | ' 
21f90                 | ' pub frame(x1,y1,x2,y2,c)
21f90                 | _hg010b_spin2_frame
21f90     05 4A 05 F6 | 	mov	COUNT_, #5
21f94     A8 00 A0 FD | 	call	#pushregs_
21f98     09 27 02 F6 | 	mov	local01, arg01
21f9c     0A 29 02 F6 | 	mov	local02, arg02
21fa0     0B 2B 02 F6 | 	mov	local03, arg03
21fa4     0C 2D 02 F6 | 	mov	local04, arg04
21fa8     0D 2F 02 F6 | 	mov	local05, arg05
21fac                 | ' 
21fac                 | ' fastline(x1,x2,y1,c)
21fac     13 13 02 F6 | 	mov	arg01, local01
21fb0     15 15 02 F6 | 	mov	arg02, local03
21fb4     14 17 02 F6 | 	mov	arg03, local02
21fb8     17 19 02 F6 | 	mov	arg04, local05
21fbc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
21fc0                 | ' fastline(x1,x2,y2,c)
21fc0     13 13 02 F6 | 	mov	arg01, local01
21fc4     15 15 02 F6 | 	mov	arg02, local03
21fc8     16 17 02 F6 | 	mov	arg03, local04
21fcc     17 19 02 F6 | 	mov	arg04, local05
21fd0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
21fd4                 | ' line(x1,y1,x1,y2,c)
21fd4     13 13 02 F6 | 	mov	arg01, local01
21fd8     14 15 02 F6 | 	mov	arg02, local02
21fdc     13 17 02 F6 | 	mov	arg03, local01
21fe0     16 19 02 F6 | 	mov	arg04, local04
21fe4     17 1B 02 F6 | 	mov	arg05, local05
21fe8                 | ' draw(x1,y1,x2,y2,c)
21fe8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
21fec                 | ' line(x2,y1,x2,y2,c)
21fec     15 13 02 F6 | 	mov	arg01, local03
21ff0     14 15 02 F6 | 	mov	arg02, local02
21ff4     15 17 02 F6 | 	mov	arg03, local03
21ff8     16 19 02 F6 | 	mov	arg04, local04
21ffc     17 1B 02 F6 | 	mov	arg05, local05
22000                 | ' draw(x1,y1,x2,y2,c)
22000     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
22004     A7 F0 03 F6 | 	mov	ptra, fp
22008     B2 00 A0 FD | 	call	#popregs_
2200c                 | _hg010b_spin2_frame_ret
2200c     2D 00 64 FD | 	ret
22010                 | 
22010                 | ' 
22010                 | ' '-- A box (a filled rectangle) ----------------------------------------
22010                 | ' 
22010                 | ' pub box(x1,y1,x2,y2,c) |yy
22010                 | _hg010b_spin2_box
22010     06 4A 05 F6 | 	mov	COUNT_, #6
22014     A8 00 A0 FD | 	call	#pushregs_
22018     09 27 02 F6 | 	mov	local01, arg01
2201c     0A 29 02 F6 | 	mov	local02, arg02
22020     0B 2B 02 F6 | 	mov	local03, arg03
22024     0C 2D 02 F6 | 	mov	local04, arg04
22028     0D 2F 02 F6 | 	mov	local05, arg05
2202c                 | ' 
2202c                 | ' repeat yy from y1 to y2
2202c     14 2D 52 F2 | 	cmps	local04, local02 wc
22030     01 30 86 F6 | 	negc	local06, #1
22034     18 2D 02 F1 | 	add	local04, local06
22038                 | LR__2680
22038                 | '   fastline(x1,x2,yy,c)
22038     13 13 02 F6 | 	mov	arg01, local01
2203c     15 15 02 F6 | 	mov	arg02, local03
22040     17 19 02 F6 | 	mov	arg04, local05
22044     14 17 02 F6 | 	mov	arg03, local02
22048     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
2204c     18 29 02 F1 | 	add	local02, local06
22050     16 29 0A F2 | 	cmp	local02, local04 wz
22054     E0 FF 9F 5D |  if_ne	jmp	#LR__2680
22058     A7 F0 03 F6 | 	mov	ptra, fp
2205c     B2 00 A0 FD | 	call	#popregs_
22060                 | _hg010b_spin2_box_ret
22060     2D 00 64 FD | 	ret
22064                 | 
22064                 | '       
22064                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
22064                 | _hg010b_spin2_putcharxycgf
22064                 | ' 
22064                 | '  
22064                 | ' repeat yy from 0 to 15
22064     00 00 06 F6 | 	mov	_var01, #0
22068     97 8C 48 FB | 	callpa	#(@LR__2692-@LR__2690)>>2,fcache_load_ptr_
2206c                 | LR__2690
2206c                 | ' 
2206c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
2206c     95 E4 05 F1 | 	add	objptr, #149
22070     F2 02 02 FB | 	rdlong	_var02, objptr
22074     0A 02 66 F0 | 	shl	_var02, #10
22078     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
2207c     01 05 02 F1 | 	add	_var03, _var02
22080     0B 03 02 F6 | 	mov	_var02, arg03
22084     04 02 66 F0 | 	shl	_var02, #4
22088     01 05 02 F1 | 	add	_var03, _var02
2208c     00 05 02 F1 | 	add	_var03, _var01
22090     02 05 C2 FA | 	rdbyte	_var03, _var03
22094                 | '   asm
22094     00 04 0E F4 | 	testb	_var03, #0 wz
22098     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
2209c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
220a0     01 04 0E F4 | 	testb	_var03, #1 wz
220a4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
220a8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
220ac     02 04 0E F4 | 	testb	_var03, #2 wz
220b0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
220b4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
220b8     03 04 0E F4 | 	testb	_var03, #3 wz
220bc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
220c0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
220c4     04 04 0E F4 | 	testb	_var03, #4 wz
220c8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
220cc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
220d0     05 04 0E F4 | 	testb	_var03, #5 wz
220d4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
220d8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
220dc     06 04 0E F4 | 	testb	_var03, #6 wz
220e0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
220e4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
220e8     07 04 0E F4 | 	testb	_var03, #7 wz
220ec     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
220f0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
220f4                 | '   
220f4                 | '   ccc[0]:=c1
220f4     99 E5 05 F1 | 	add	objptr, #409
220f8     F2 06 62 FC | 	wrlong	_var04, objptr
220fc                 | '   ccc[1]:=c2 
220fc     04 E4 05 F1 | 	add	objptr, #4
22100     F2 08 62 FC | 	wrlong	_var05, objptr
22104                 | '   long[mailbox0][2]:=8
22104     49 E4 85 F1 | 	sub	objptr, #73
22108     F2 04 02 FB | 	rdlong	_var03, objptr
2210c     08 04 06 F1 | 	add	_var03, #8
22110     02 11 68 FC | 	wrlong	#8, _var03
22114                 | '   long[mailbox0][1]:=@ccc
22114     45 E4 05 F1 | 	add	objptr, #69
22118     F2 04 02 F6 | 	mov	_var03, objptr
2211c     45 E4 85 F1 | 	sub	objptr, #69
22120     F2 02 02 FB | 	rdlong	_var02, objptr
22124     04 02 06 F1 | 	add	_var02, #4
22128     01 05 62 FC | 	wrlong	_var03, _var02
2212c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
2212c     0C E5 85 F1 | 	sub	objptr, #268
22130     F2 04 02 FB | 	rdlong	_var03, objptr
22134     0A 03 02 F6 | 	mov	_var02, arg02
22138     00 03 02 F1 | 	add	_var02, _var01
2213c     0A 02 66 F0 | 	shl	_var02, #10
22140     09 0B 02 F6 | 	mov	_var06, arg01
22144     02 0A 66 F0 | 	shl	_var06, #2
22148     05 03 02 F1 | 	add	_var02, _var06
2214c     01 05 02 F1 | 	add	_var03, _var02
22150     00 00 78 FF 
22154     00 04 06 F1 | 	add	_var03, ##-268435456
22158     0C E5 05 F1 | 	add	objptr, #268
2215c     F2 0A 02 FB | 	rdlong	_var06, objptr
22160     05 05 62 FC | 	wrlong	_var03, _var06
22164                 | '   repeat
22164                 | LR__2691
22164     F2 04 02 FB | 	rdlong	_var03, objptr
22168     02 03 02 FB | 	rdlong	_var02, _var03
2216c     00 02 56 F2 | 	cmps	_var02, #0 wc
22170     F0 FF 9F CD |  if_b	jmp	#LR__2691
22174     E9 E5 85 F1 | 	sub	objptr, #489
22178     01 00 06 F1 | 	add	_var01, #1
2217c     10 00 56 F2 | 	cmps	_var01, #16 wc
22180     E8 FE 9F CD |  if_b	jmp	#LR__2690
22184                 | LR__2692
22184                 | _hg010b_spin2_putcharxycgf_ret
22184     2D 00 64 FD | 	ret
22188                 | 
22188                 | ' 
22188                 | ' 
22188                 | ' '**********************************************************************r***
22188                 | ' '                                                                        *
22188                 | ' ' Font related functions                                                 *
22188                 | ' '                                                                        *
22188                 | ' '*************************************************************************
22188                 | ' 
22188                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
22188                 | ' 
22188                 | ' pub setfontfamily(afontnum)
22188                 | _hg010b_spin2_setfontfamily
22188                 | ' 
22188                 | ' font_family:=afontnum
22188     95 E4 05 F1 | 	add	objptr, #149
2218c     F2 12 62 FC | 	wrlong	arg01, objptr
22190     95 E4 85 F1 | 	sub	objptr, #149
22194                 | ' 'if afontnum==8
22194                 | ' '  font_ptr:=@amiga_font
22194                 | ' 
22194                 | ' if afontnum==4
22194     04 12 0E F2 | 	cmp	arg01, #4 wz
22198                 | '   font_ptr:=@st_font
22198     08 00 00 AF 
2219c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
221a0     08 E4 05 A1 |  if_e	add	objptr, #8
221a4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
221a8     08 E4 85 A1 |  if_e	sub	objptr, #8
221ac     08 00 00 AF 
221b0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
221b4                 | ' if afontnum==0
221b4     00 12 0E F2 | 	cmp	arg01, #0 wz
221b8                 | '   font_ptr:=@vga_font
221b8     08 E4 05 A1 |  if_e	add	objptr, #8
221bc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
221c0     08 E4 85 A1 |  if_e	sub	objptr, #8
221c4                 | _hg010b_spin2_setfontfamily_ret
221c4     2D 00 64 FD | 	ret
221c8                 | 
221c8                 | ' 
221c8                 | ' '*************************************************************************
221c8                 | ' '                                                                        *
221c8                 | ' '  Cursor functions                                                      *
221c8                 | ' '                                                                        *
221c8                 | ' '*************************************************************************
221c8                 | ' 
221c8                 | ' 
221c8                 | ' pub setcursorpos(x,y)
221c8                 | _hg010b_spin2_setcursorpos
221c8                 | ' 
221c8                 | ' ''---------- Set the (x,y) position of cursor
221c8                 | ' 
221c8                 | ' cursor_x:=x
221c8     3C E4 05 F1 | 	add	objptr, #60
221cc     F2 12 52 FC | 	wrword	arg01, objptr
221d0                 | ' cursor_y:=y
221d0     02 E4 05 F1 | 	add	objptr, #2
221d4     F2 14 42 FC | 	wrbyte	arg02, objptr
221d8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
221d8     02 E4 85 F1 | 	sub	objptr, #2
221dc     F2 14 E2 FA | 	rdword	arg02, objptr
221e0     02 14 66 F0 | 	shl	arg02, #2
221e4     02 E4 05 F1 | 	add	objptr, #2
221e8     F2 16 C2 FA | 	rdbyte	arg03, objptr
221ec     3E E4 85 F1 | 	sub	objptr, #62
221f0     04 16 66 F0 | 	shl	arg03, #4
221f4     04 16 06 F1 | 	add	arg03, #4
221f8     11 12 06 F6 | 	mov	arg01, #17
221fc     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22200                 | _hg010b_spin2_setcursorpos_ret
22200     2D 00 64 FD | 	ret
22204                 | 
22204                 | ' 
22204                 | ' pub setcursorx(x)
22204                 | _hg010b_spin2_setcursorx
22204                 | ' cursor_x:=x
22204     3C E4 05 F1 | 	add	objptr, #60
22208     F2 12 52 FC | 	wrword	arg01, objptr
2220c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2220c     F2 14 E2 FA | 	rdword	arg02, objptr
22210     02 14 66 F0 | 	shl	arg02, #2
22214     02 E4 05 F1 | 	add	objptr, #2
22218     F2 16 C2 FA | 	rdbyte	arg03, objptr
2221c     3E E4 85 F1 | 	sub	objptr, #62
22220     04 16 66 F0 | 	shl	arg03, #4
22224     04 16 06 F1 | 	add	arg03, #4
22228     11 12 06 F6 | 	mov	arg01, #17
2222c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22230                 | _hg010b_spin2_setcursorx_ret
22230     2D 00 64 FD | 	ret
22234                 | 
22234                 | ' 
22234                 | ' pub setcursory(y) 
22234                 | _hg010b_spin2_setcursory
22234                 | ' cursor_y:=y
22234     3E E4 05 F1 | 	add	objptr, #62
22238     F2 12 42 FC | 	wrbyte	arg01, objptr
2223c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
2223c     02 E4 85 F1 | 	sub	objptr, #2
22240     F2 14 E2 FA | 	rdword	arg02, objptr
22244     02 14 66 F0 | 	shl	arg02, #2
22248     02 E4 05 F1 | 	add	objptr, #2
2224c     F2 16 C2 FA | 	rdbyte	arg03, objptr
22250     3E E4 85 F1 | 	sub	objptr, #62
22254     04 16 66 F0 | 	shl	arg03, #4
22258     04 16 06 F1 | 	add	arg03, #4
2225c     11 12 06 F6 | 	mov	arg01, #17
22260     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22264                 | _hg010b_spin2_setcursory_ret
22264     2D 00 64 FD | 	ret
22268                 | 
22268                 | ' 
22268                 | ' '*************************************************************************
22268                 | ' '                                                                        *
22268                 | ' '  VBlank functions                                                      *
22268                 | ' '                                                                        *
22268                 | ' '*************************************************************************
22268                 | ' 
22268                 | ' pub waitvbl(amount) | i
22268                 | _hg010b_spin2_waitvbl
22268     03 4A 05 F6 | 	mov	COUNT_, #3
2226c     A8 00 A0 FD | 	call	#pushregs_
22270     09 27 02 F6 | 	mov	local01, arg01
22274                 | ' 
22274                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22274                 | ' 
22274                 | ' repeat i from 1 to amount
22274     01 28 06 F6 | 	mov	local02, #1
22278     01 26 56 F2 | 	cmps	local01, #1 wc
2227c     01 2A 86 F6 | 	negc	local03, #1
22280     15 27 02 F1 | 	add	local01, local03
22284                 | LR__2700
22284                 | '   repeat until vblank==0
22284                 | LR__2701
22284     49 E4 05 F1 | 	add	objptr, #73
22288     F2 12 0A FB | 	rdlong	arg01, objptr wz
2228c     49 E4 85 F1 | 	sub	objptr, #73
22290     0C 00 90 AD |  if_e	jmp	#LR__2702
22294                 | '     waitus(100)
22294     64 12 06 F6 | 	mov	arg01, #100
22298     D8 1F B0 FD | 	call	#__system___waitus
2229c     E4 FF 9F FD | 	jmp	#LR__2701
222a0                 | LR__2702
222a0                 | '   repeat until vblank==1
222a0                 | LR__2703
222a0     49 E4 05 F1 | 	add	objptr, #73
222a4     F2 12 02 FB | 	rdlong	arg01, objptr
222a8     49 E4 85 F1 | 	sub	objptr, #73
222ac     01 12 0E F2 | 	cmp	arg01, #1 wz
222b0     0C 00 90 AD |  if_e	jmp	#LR__2704
222b4                 | '     waitus(100)
222b4     64 12 06 F6 | 	mov	arg01, #100
222b8     B8 1F B0 FD | 	call	#__system___waitus
222bc     E0 FF 9F FD | 	jmp	#LR__2703
222c0                 | LR__2704
222c0     15 29 02 F1 | 	add	local02, local03
222c4     13 29 0A F2 | 	cmp	local02, local01 wz
222c8     B8 FF 9F 5D |  if_ne	jmp	#LR__2700
222cc     A7 F0 03 F6 | 	mov	ptra, fp
222d0     B2 00 A0 FD | 	call	#popregs_
222d4                 | _hg010b_spin2_waitvbl_ret
222d4     2D 00 64 FD | 	ret
222d8                 | 
222d8                 | ' 
222d8                 | ' 
222d8                 | ' pub cls(fc,bc)   :c,i
222d8                 | _hg010b_spin2_cls
222d8     02 4A 05 F6 | 	mov	COUNT_, #2
222dc     A8 00 A0 FD | 	call	#pushregs_
222e0     09 27 02 F6 | 	mov	local01, arg01
222e4     0A 29 02 F6 | 	mov	local02, arg02
222e8                 | ' 
222e8                 | ' c:=bc
222e8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
222e8     DD E4 05 F1 | 	add	objptr, #221
222ec     F2 12 02 FB | 	rdlong	arg01, objptr
222f0     A5 E4 85 F1 | 	sub	objptr, #165
222f4     F2 16 02 FB | 	rdlong	arg03, objptr
222f8     02 16 66 F0 | 	shl	arg03, #2
222fc     14 15 02 F6 | 	mov	arg02, local02
22300     00 18 06 F6 | 	mov	arg04, #0
22304     01 1A 06 F6 | 	mov	arg05, #1
22308     0B 00 00 FF 
2230c     94 E4 05 F1 | 	add	objptr, ##5780
22310     F8 10 B0 FD | 	call	#_psram_spin2_fill
22314                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22314     0B 00 00 FF 
22318     C8 E4 85 F1 | 	sub	objptr, ##5832
2231c     F2 12 02 FB | 	rdlong	arg01, objptr
22320     04 E4 85 F1 | 	sub	objptr, #4
22324     F2 16 02 FB | 	rdlong	arg03, objptr
22328     09 17 82 F1 | 	sub	arg03, arg01
2232c     20 14 06 F6 | 	mov	arg02, #32
22330     00 18 06 F6 | 	mov	arg04, #0
22334     01 1A 06 F6 | 	mov	arg05, #1
22338     0B 00 00 FF 
2233c     CC E4 05 F1 | 	add	objptr, ##5836
22340     C8 10 B0 FD | 	call	#_psram_spin2_fill
22344                 | ' setwritecolors(fc,bc)
22344                 | ' 
22344                 | ' write_color:=ff
22344     0B 00 00 FF 
22348     8B E4 85 F1 | 	sub	objptr, ##5771
2234c     F2 26 62 FC | 	wrlong	local01, objptr
22350                 | ' write_background:=bb
22350     04 E4 05 F1 | 	add	objptr, #4
22354     F2 28 62 FC | 	wrlong	local02, objptr
22358                 | ' cursor_x:=0
22358     09 E4 85 F1 | 	sub	objptr, #9
2235c     F2 00 58 FC | 	wrword	#0, objptr
22360                 | ' cursor_y:=0
22360     02 E4 05 F1 | 	add	objptr, #2
22364     F2 00 48 FC | 	wrbyte	#0, objptr
22368                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22368     02 E4 85 F1 | 	sub	objptr, #2
2236c     F2 14 E2 FA | 	rdword	arg02, objptr
22370     02 14 66 F0 | 	shl	arg02, #2
22374     02 E4 05 F1 | 	add	objptr, #2
22378     F2 16 C2 FA | 	rdbyte	arg03, objptr
2237c     3E E4 85 F1 | 	sub	objptr, #62
22380     04 16 66 F0 | 	shl	arg03, #4
22384     04 16 06 F1 | 	add	arg03, #4
22388     11 12 06 F6 | 	mov	arg01, #17
2238c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22390                 | ' setcursorcolor(fc)
22390     13 13 02 F6 | 	mov	arg01, local01
22394     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22398     14 FB 01 F6 | 	mov	result1, local02
2239c     00 FC 05 F6 | 	mov	result2, #0
223a0     A7 F0 03 F6 | 	mov	ptra, fp
223a4     B2 00 A0 FD | 	call	#popregs_
223a8                 | _hg010b_spin2_cls_ret
223a8     2D 00 64 FD | 	ret
223ac                 | 
223ac                 | ' 
223ac                 | ' ''---------- Output a char at the cursor position, move the cursor 
223ac                 | ' 
223ac                 | ' pub putchar(achar) | c,x,y,l,newcpl
223ac                 | _hg010b_spin2_putchar
223ac     02 4A 05 F6 | 	mov	COUNT_, #2
223b0     A8 00 A0 FD | 	call	#pushregs_
223b4     09 27 02 F6 | 	mov	local01, arg01
223b8                 | ' 
223b8                 | ' if achar==10
223b8     0A 26 0E F2 | 	cmp	local01, #10 wz
223bc                 | '   crlf()
223bc     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
223c0                 | ' if achar==9
223c0     09 26 0E F2 | 	cmp	local01, #9 wz
223c4     18 00 90 5D |  if_ne	jmp	#LR__2710
223c8                 | '   cursor_x:=(cursor_x& %11110000)+16
223c8     3C E4 05 F1 | 	add	objptr, #60
223cc     F2 16 E2 FA | 	rdword	arg03, objptr
223d0     F0 16 06 F5 | 	and	arg03, #240
223d4     10 16 06 F1 | 	add	arg03, #16
223d8     F2 16 52 FC | 	wrword	arg03, objptr
223dc     3C E4 85 F1 | 	sub	objptr, #60
223e0                 | LR__2710
223e0                 | '   
223e0                 | ' if (achar<>9) && (achar<>10) 
223e0     09 26 0E F2 | 	cmp	local01, #9 wz
223e4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
223e8     A8 00 90 AD |  if_e	jmp	#LR__2711
223ec                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
223ec     3C E4 05 F1 | 	add	objptr, #60
223f0     F2 12 E2 FA | 	rdword	arg01, objptr
223f4     02 E4 05 F1 | 	add	objptr, #2
223f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
223fc     04 14 66 F0 | 	shl	arg02, #4
22400     04 14 06 F1 | 	add	arg02, #4
22404     03 E4 05 F1 | 	add	objptr, #3
22408     F2 18 02 FB | 	rdlong	arg04, objptr
2240c     04 E4 05 F1 | 	add	objptr, #4
22410     F2 1A 02 FB | 	rdlong	arg05, objptr
22414     45 E4 85 F1 | 	sub	objptr, #69
22418     13 17 02 F6 | 	mov	arg03, local01
2241c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
22420     04 E4 05 F1 | 	add	objptr, #4
22424     F2 12 02 FB | 	rdlong	arg01, objptr
22428     10 00 00 FF 
2242c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22430     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22434     3A E4 05 F1 | 	add	objptr, #58
22438     F2 1A C2 FA | 	rdbyte	arg05, objptr
2243c     0D 17 02 FD | 	qmul	arg03, arg05
22440                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22440     10 00 00 FF 
22444     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
22448     02 E4 85 F1 | 	sub	objptr, #2
2244c     F2 28 E2 FA | 	rdword	local02, objptr
22450     01 28 46 F0 | 	shr	local02, #1
22454     13 15 02 F6 | 	mov	arg02, local01
22458     01 16 06 F6 | 	mov	arg03, #1
2245c     00 18 06 F6 | 	mov	arg04, #0
22460     01 1A 06 F6 | 	mov	arg05, #1
22464     0B 00 00 FF 
22468     90 E4 05 F1 | 	add	objptr, ##5776
2246c     18 26 62 FD | 	getqx	local01
22470     14 27 02 F1 | 	add	local01, local02
22474     13 13 02 F1 | 	add	arg01, local01
22478     90 0F B0 FD | 	call	#_psram_spin2_fill
2247c                 | '   cursor_x+=2
2247c     0B 00 00 FF 
22480     90 E4 85 F1 | 	sub	objptr, ##5776
22484     F2 28 E2 FA | 	rdword	local02, objptr
22488     02 28 06 F1 | 	add	local02, #2
2248c     F2 28 52 FC | 	wrword	local02, objptr
22490     3C E4 85 F1 | 	sub	objptr, #60
22494                 | LR__2711
22494                 | ' 
22494                 | ' if cursor_x>=256
22494     3C E4 05 F1 | 	add	objptr, #60
22498     F2 28 E2 FA | 	rdword	local02, objptr
2249c     3C E4 85 F1 | 	sub	objptr, #60
224a0     00 29 56 F2 | 	cmps	local02, #256 wc
224a4     64 00 90 CD |  if_b	jmp	#LR__2713
224a8                 | '   cursor_x:=0
224a8     3C E4 05 F1 | 	add	objptr, #60
224ac     F2 00 58 FC | 	wrword	#0, objptr
224b0                 | '   cursor_y+=1
224b0     02 E4 05 F1 | 	add	objptr, #2
224b4     F2 28 C2 FA | 	rdbyte	local02, objptr
224b8     01 28 06 F1 | 	add	local02, #1
224bc     F2 28 42 FC | 	wrbyte	local02, objptr
224c0                 | '   if cursor_y>st_lines-1
224c0     C3 E4 05 F1 | 	add	objptr, #195
224c4     F2 28 02 FB | 	rdlong	local02, objptr
224c8     01 28 86 F1 | 	sub	local02, #1
224cc     C3 E4 85 F1 | 	sub	objptr, #195
224d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
224d4     3E E4 85 F1 | 	sub	objptr, #62
224d8     14 17 5A F2 | 	cmps	arg03, local02 wcz
224dc     2C 00 90 ED |  if_be	jmp	#LR__2712
224e0                 | '     scrollup2()
224e0     00 12 06 F6 | 	mov	arg01, #0
224e4     01 00 00 FF 
224e8     58 14 06 F6 | 	mov	arg02, ##600
224ec     10 16 06 F6 | 	mov	arg03, #16
224f0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
224f4                 | '     cursor_y:=st_lines-1
224f4     01 E5 05 F1 | 	add	objptr, #257
224f8     F2 28 02 FB | 	rdlong	local02, objptr
224fc     01 28 86 F1 | 	sub	local02, #1
22500     C3 E4 85 F1 | 	sub	objptr, #195
22504     F2 28 42 FC | 	wrbyte	local02, objptr
22508     3E E4 85 F1 | 	sub	objptr, #62
2250c                 | LR__2712
2250c                 | LR__2713
2250c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2250c     3C E4 05 F1 | 	add	objptr, #60
22510     F2 14 E2 FA | 	rdword	arg02, objptr
22514     02 14 66 F0 | 	shl	arg02, #2
22518     02 E4 05 F1 | 	add	objptr, #2
2251c     F2 16 C2 FA | 	rdbyte	arg03, objptr
22520     3E E4 85 F1 | 	sub	objptr, #62
22524     04 16 66 F0 | 	shl	arg03, #4
22528     04 16 06 F1 | 	add	arg03, #4
2252c     11 12 06 F6 | 	mov	arg01, #17
22530     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
22534     A7 F0 03 F6 | 	mov	ptra, fp
22538     B2 00 A0 FD | 	call	#popregs_
2253c                 | _hg010b_spin2_putchar_ret
2253c     2D 00 64 FD | 	ret
22540                 | 
22540                 | '     
22540                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
22540                 | ' 
22540                 | ' pub putchar2(achar) | c,x,y,l,newcpl
22540                 | _hg010b_spin2_putchar2
22540     02 4A 05 F6 | 	mov	COUNT_, #2
22544     A8 00 A0 FD | 	call	#pushregs_
22548     09 27 02 F6 | 	mov	local01, arg01
2254c                 | ' 
2254c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2254c     3C E4 05 F1 | 	add	objptr, #60
22550     F2 12 E2 FA | 	rdword	arg01, objptr
22554     02 E4 05 F1 | 	add	objptr, #2
22558     F2 14 C2 FA | 	rdbyte	arg02, objptr
2255c     04 14 66 F0 | 	shl	arg02, #4
22560     04 14 06 F1 | 	add	arg02, #4
22564     03 E4 05 F1 | 	add	objptr, #3
22568     F2 18 02 FB | 	rdlong	arg04, objptr
2256c     04 E4 05 F1 | 	add	objptr, #4
22570     F2 1A 02 FB | 	rdlong	arg05, objptr
22574     45 E4 85 F1 | 	sub	objptr, #69
22578     13 17 02 F6 | 	mov	arg03, local01
2257c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
22580     04 E4 05 F1 | 	add	objptr, #4
22584     F2 12 02 FB | 	rdlong	arg01, objptr
22588     10 00 00 FF 
2258c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22590     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22594     3A E4 05 F1 | 	add	objptr, #58
22598     F2 1A C2 FA | 	rdbyte	arg05, objptr
2259c     0D 17 02 FD | 	qmul	arg03, arg05
225a0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
225a0     10 00 00 FF 
225a4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
225a8     02 E4 85 F1 | 	sub	objptr, #2
225ac     F2 28 E2 FA | 	rdword	local02, objptr
225b0     01 28 46 F0 | 	shr	local02, #1
225b4     13 15 02 F6 | 	mov	arg02, local01
225b8     01 16 06 F6 | 	mov	arg03, #1
225bc     00 18 06 F6 | 	mov	arg04, #0
225c0     01 1A 06 F6 | 	mov	arg05, #1
225c4     0B 00 00 FF 
225c8     90 E4 05 F1 | 	add	objptr, ##5776
225cc     18 26 62 FD | 	getqx	local01
225d0     14 27 02 F1 | 	add	local01, local02
225d4     13 13 02 F1 | 	add	arg01, local01
225d8     30 0E B0 FD | 	call	#_psram_spin2_fill
225dc                 | ' 
225dc                 | ' cursor_x+=2
225dc     0B 00 00 FF 
225e0     90 E4 85 F1 | 	sub	objptr, ##5776
225e4     F2 28 E2 FA | 	rdword	local02, objptr
225e8     02 28 06 F1 | 	add	local02, #2
225ec     F2 28 52 FC | 	wrword	local02, objptr
225f0                 | ' if cursor_x>=256
225f0     F2 28 E2 FA | 	rdword	local02, objptr
225f4     3C E4 85 F1 | 	sub	objptr, #60
225f8     00 29 56 F2 | 	cmps	local02, #256 wc
225fc     64 00 90 CD |  if_b	jmp	#LR__2721
22600                 | '   cursor_x:=0
22600     3C E4 05 F1 | 	add	objptr, #60
22604     F2 00 58 FC | 	wrword	#0, objptr
22608                 | '   cursor_y+=1
22608     02 E4 05 F1 | 	add	objptr, #2
2260c     F2 28 C2 FA | 	rdbyte	local02, objptr
22610     01 28 06 F1 | 	add	local02, #1
22614     F2 28 42 FC | 	wrbyte	local02, objptr
22618                 | '   if cursor_y>st_lines-1
22618     C3 E4 05 F1 | 	add	objptr, #195
2261c     F2 28 02 FB | 	rdlong	local02, objptr
22620     01 28 86 F1 | 	sub	local02, #1
22624     C3 E4 85 F1 | 	sub	objptr, #195
22628     F2 16 C2 FA | 	rdbyte	arg03, objptr
2262c     3E E4 85 F1 | 	sub	objptr, #62
22630     14 17 5A F2 | 	cmps	arg03, local02 wcz
22634     2C 00 90 ED |  if_be	jmp	#LR__2720
22638                 | '     scrollup2()
22638     00 12 06 F6 | 	mov	arg01, #0
2263c     01 00 00 FF 
22640     58 14 06 F6 | 	mov	arg02, ##600
22644     10 16 06 F6 | 	mov	arg03, #16
22648     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2264c                 | '     cursor_y:=st_lines-1
2264c     01 E5 05 F1 | 	add	objptr, #257
22650     F2 28 02 FB | 	rdlong	local02, objptr
22654     01 28 86 F1 | 	sub	local02, #1
22658     C3 E4 85 F1 | 	sub	objptr, #195
2265c     F2 28 42 FC | 	wrbyte	local02, objptr
22660     3E E4 85 F1 | 	sub	objptr, #62
22664                 | LR__2720
22664                 | LR__2721
22664                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
22664     3C E4 05 F1 | 	add	objptr, #60
22668     F2 14 E2 FA | 	rdword	arg02, objptr
2266c     02 14 66 F0 | 	shl	arg02, #2
22670     02 E4 05 F1 | 	add	objptr, #2
22674     F2 16 C2 FA | 	rdbyte	arg03, objptr
22678     3E E4 85 F1 | 	sub	objptr, #62
2267c     04 16 66 F0 | 	shl	arg03, #4
22680     04 16 06 F1 | 	add	arg03, #4
22684     11 12 06 F6 | 	mov	arg01, #17
22688     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2268c     A7 F0 03 F6 | 	mov	ptra, fp
22690     B2 00 A0 FD | 	call	#popregs_
22694                 | _hg010b_spin2_putchar2_ret
22694     2D 00 64 FD | 	ret
22698                 | 
22698                 | ' ''--------- Output a string at the cursor position, move the cursor  
22698                 | ' 
22698                 | ' pub write(text) | iii,c,ncx,ncy
22698                 | _hg010b_spin2_write
22698     04 4A 05 F6 | 	mov	COUNT_, #4
2269c     A8 00 A0 FD | 	call	#pushregs_
226a0     09 27 02 F6 | 	mov	local01, arg01
226a4                 | ' 
226a4                 | ' repeat iii from 0 to strsize(text)-1
226a4     00 28 06 F6 | 	mov	local02, #0
226a8     13 13 02 F6 | 	mov	arg01, local01
226ac     09 2B 02 F6 | 	mov	local03, arg01
226b0     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
226b4                 | LR__2730
226b4     15 FB C9 FA | 	rdbyte	result1, local03 wz
226b8     01 2A 06 51 |  if_ne	add	local03, #1
226bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2730
226c0                 | LR__2731
226c0     09 2B 82 F1 | 	sub	local03, arg01
226c4     01 2A 86 F1 | 	sub	local03, #1
226c8     00 2A 56 F2 | 	cmps	local03, #0 wc
226cc     01 2C 86 F6 | 	negc	local04, #1
226d0     16 2B 02 F1 | 	add	local03, local04
226d4                 | LR__2732
226d4                 | '   putchar2(byte[text+iii])
226d4     13 13 02 F6 | 	mov	arg01, local01
226d8     14 13 02 F1 | 	add	arg01, local02
226dc     09 13 C2 FA | 	rdbyte	arg01, arg01
226e0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
226e4     16 29 02 F1 | 	add	local02, local04
226e8     15 29 0A F2 | 	cmp	local02, local03 wz
226ec     E4 FF 9F 5D |  if_ne	jmp	#LR__2732
226f0     A7 F0 03 F6 | 	mov	ptra, fp
226f4     B2 00 A0 FD | 	call	#popregs_
226f8                 | _hg010b_spin2_write_ret
226f8     2D 00 64 FD | 	ret
226fc                 | 
226fc                 | '    
226fc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
226fc                 | ' 
226fc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
226fc                 | _hg010b_spin2_scrollup2
226fc     03 4A 05 F6 | 	mov	COUNT_, #3
22700     A8 00 A0 FD | 	call	#pushregs_
22704                 | ' 	
22704                 | ' repeat i from 4 to 579 
22704     04 26 06 F6 | 	mov	local01, #4
22708                 | LR__2740
22708     F9 E4 05 F1 | 	add	objptr, #249
2270c     F2 1A 02 FB | 	rdlong	arg05, objptr
22710     1C E4 85 F1 | 	sub	objptr, #28
22714     F2 14 02 FB | 	rdlong	arg02, objptr
22718     13 19 02 F6 | 	mov	arg04, local01
2271c     10 18 06 F1 | 	add	arg04, #16
22720     02 18 66 F0 | 	shl	arg04, #2
22724     14 E4 05 F1 | 	add	objptr, #20
22728     F2 16 02 FB | 	rdlong	arg03, objptr
2272c     0B 19 02 FD | 	qmul	arg04, arg03
22730                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22730     F6 03 00 FF 
22734     00 12 06 F6 | 	mov	arg01, ##519168
22738     0D 13 82 F1 | 	sub	arg01, arg05
2273c     02 16 66 F0 | 	shl	arg03, #2
22740     0A 00 00 FF 
22744     DB E5 05 F1 | 	add	objptr, ##5595
22748     18 1A 62 FD | 	getqx	arg05
2274c     0D 15 02 F1 | 	add	arg02, arg05
22750     80 0B B0 FD | 	call	#_psram_spin2_read1
22754     0A 00 00 FF 
22758     D3 E5 85 F1 | 	sub	objptr, ##5587
2275c     F2 1A 02 FB | 	rdlong	arg05, objptr
22760     1C E4 85 F1 | 	sub	objptr, #28
22764     F2 14 02 FB | 	rdlong	arg02, objptr
22768     13 19 02 F6 | 	mov	arg04, local01
2276c     02 18 66 F0 | 	shl	arg04, #2
22770     14 E4 05 F1 | 	add	objptr, #20
22774     F2 16 02 FB | 	rdlong	arg03, objptr
22778     0B 19 02 FD | 	qmul	arg04, arg03
2277c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2277c     F6 03 00 FF 
22780     00 12 06 F6 | 	mov	arg01, ##519168
22784     0D 13 82 F1 | 	sub	arg01, arg05
22788     02 16 66 F0 | 	shl	arg03, #2
2278c     0A 00 00 FF 
22790     DB E5 05 F1 | 	add	objptr, ##5595
22794     18 1A 62 FD | 	getqx	arg05
22798     0D 15 02 F1 | 	add	arg02, arg05
2279c     D0 0B B0 FD | 	call	#_psram_spin2_write
227a0     0B 00 00 FF 
227a4     CC E4 85 F1 | 	sub	objptr, ##5836
227a8     01 26 06 F1 | 	add	local01, #1
227ac     01 00 00 FF 
227b0     44 26 16 F2 | 	cmp	local01, ##580 wc
227b4     50 FF 9F CD |  if_b	jmp	#LR__2740
227b8                 | ' 
227b8                 | ' repeat i from 580 to 599
227b8     01 00 00 FF 
227bc     44 26 06 F6 | 	mov	local01, ##580
227c0                 | LR__2741
227c0                 | '    fastline(0,1023,i,write_background)   
227c0     45 E4 05 F1 | 	add	objptr, #69
227c4     F2 18 02 FB | 	rdlong	arg04, objptr
227c8     45 E4 85 F1 | 	sub	objptr, #69
227cc     00 12 06 F6 | 	mov	arg01, #0
227d0     09 14 CE F9 | 	bmask	arg02, #9
227d4     13 17 02 F6 | 	mov	arg03, local01
227d8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
227dc     01 26 06 F1 | 	add	local01, #1
227e0     01 00 00 FF 
227e4     58 26 16 F2 | 	cmp	local01, ##600 wc
227e8     D4 FF 9F CD |  if_b	jmp	#LR__2741
227ec                 | ' repeat i from 0 to 3
227ec     00 26 06 F6 | 	mov	local01, #0
227f0                 | LR__2742
227f0                 | '    fastline(0,1023,i,write_background)      
227f0     45 E4 05 F1 | 	add	objptr, #69
227f4     F2 18 02 FB | 	rdlong	arg04, objptr
227f8     45 E4 85 F1 | 	sub	objptr, #69
227fc     00 12 06 F6 | 	mov	arg01, #0
22800     09 14 CE F9 | 	bmask	arg02, #9
22804     13 17 02 F6 | 	mov	arg03, local01
22808     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2280c     01 26 06 F1 | 	add	local01, #1
22810     04 26 56 F2 | 	cmps	local01, #4 wc
22814     D8 FF 9F CD |  if_b	jmp	#LR__2742
22818                 | ' 
22818                 | ' repeat i from 0 to 35
22818     00 26 06 F6 | 	mov	local01, #0
2281c                 | LR__2743
2281c     13 1B 02 F6 | 	mov	arg05, local01
22820     01 1A 06 F1 | 	add	arg05, #1
22824     10 00 00 FF 
22828     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2282c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22830     0B 1B 02 FD | 	qmul	arg05, arg03
22834                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
22834     F6 03 00 FF 
22838     00 12 06 F6 | 	mov	arg01, ##519168
2283c     F9 E4 05 F1 | 	add	objptr, #249
22840     F2 1A 02 FB | 	rdlong	arg05, objptr
22844     0D 13 82 F1 | 	sub	arg01, arg05
22848     F5 E4 85 F1 | 	sub	objptr, #245
2284c     F2 14 02 FB | 	rdlong	arg02, objptr
22850     10 00 00 FF 
22854     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
22858     0B 00 00 FF 
2285c     C8 E4 05 F1 | 	add	objptr, ##5832
22860     18 1A 62 FD | 	getqx	arg05
22864     0D 15 02 F1 | 	add	arg02, arg05
22868     68 0A B0 FD | 	call	#_psram_spin2_read1
2286c     10 00 00 FF 
22870     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22874     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22878     0B 27 02 FD | 	qmul	local01, arg03
2287c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2287c     F6 03 00 FF 
22880     00 12 06 F6 | 	mov	arg01, ##519168
22884     0A 00 00 FF 
22888     D3 E5 85 F1 | 	sub	objptr, ##5587
2288c     F2 1A 02 FB | 	rdlong	arg05, objptr
22890     0D 13 82 F1 | 	sub	arg01, arg05
22894     F5 E4 85 F1 | 	sub	objptr, #245
22898     F2 14 02 FB | 	rdlong	arg02, objptr
2289c     10 00 00 FF 
228a0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
228a4     0B 00 00 FF 
228a8     C8 E4 05 F1 | 	add	objptr, ##5832
228ac     18 1A 62 FD | 	getqx	arg05
228b0     0D 15 02 F1 | 	add	arg02, arg05
228b4     B8 0A B0 FD | 	call	#_psram_spin2_write
228b8     0B 00 00 FF 
228bc     CC E4 85 F1 | 	sub	objptr, ##5836
228c0     01 26 06 F1 | 	add	local01, #1
228c4     24 26 56 F2 | 	cmps	local01, #36 wc
228c8     50 FF 9F CD |  if_b	jmp	#LR__2743
228cc                 | ' repeat i from 0 to timings[7]-1
228cc     00 26 06 F6 | 	mov	local01, #0
228d0     10 00 00 FF 
228d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
228d8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
228dc     10 00 00 FF 
228e0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
228e4     01 28 86 F1 | 	sub	local02, #1
228e8     00 28 56 F2 | 	cmps	local02, #0 wc
228ec     01 2A 86 F6 | 	negc	local03, #1
228f0     15 29 02 F1 | 	add	local02, local03
228f4                 | LR__2744
228f4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
228f4     04 E4 05 F1 | 	add	objptr, #4
228f8     F2 12 02 FB | 	rdlong	arg01, objptr
228fc     10 00 00 FF 
22900     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22904     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22908     10 00 00 FF 
2290c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
22910     0D 19 02 F6 | 	mov	arg04, arg05
22914     03 18 66 F0 | 	shl	arg04, #3
22918     0D 19 02 F1 | 	add	arg04, arg05
2291c     02 18 66 F0 | 	shl	arg04, #2
22920     13 19 02 F1 | 	add	arg04, local01
22924     0C 13 02 F1 | 	add	arg01, arg04
22928     20 14 06 F6 | 	mov	arg02, #32
2292c     01 16 06 F6 | 	mov	arg03, #1
22930     00 18 06 F6 | 	mov	arg04, #0
22934     01 1A 06 F6 | 	mov	arg05, #1
22938     0B 00 00 FF 
2293c     C8 E4 05 F1 | 	add	objptr, ##5832
22940     C8 0A B0 FD | 	call	#_psram_spin2_fill
22944     0B 00 00 FF 
22948     CC E4 85 F1 | 	sub	objptr, ##5836
2294c     15 27 02 F1 | 	add	local01, local03
22950     14 27 0A F2 | 	cmp	local01, local02 wz
22954     9C FF 9F 5D |  if_ne	jmp	#LR__2744
22958     A7 F0 03 F6 | 	mov	ptra, fp
2295c     B2 00 A0 FD | 	call	#popregs_
22960                 | _hg010b_spin2_scrollup2_ret
22960     2D 00 64 FD | 	ret
22964                 | 
22964                 | '  
22964                 | ' ''----------- Scroll the screen one line down 
22964                 | ' 
22964                 | ' pub scrolldown(start=0) | i
22964                 | _hg010b_spin2_scrolldown
22964     05 4A 05 F6 | 	mov	COUNT_, #5
22968     A8 00 A0 FD | 	call	#pushregs_
2296c     09 27 02 F6 | 	mov	local01, arg01
22970                 | ' 
22970                 | ' repeat i from 579 to (start*16)+4
22970     01 00 00 FF 
22974     43 28 06 F6 | 	mov	local02, ##579
22978     13 2B 02 F6 | 	mov	local03, local01
2297c     04 2A 66 F0 | 	shl	local03, #4
22980     04 2A 06 F1 | 	add	local03, #4
22984     01 00 00 FF 
22988     43 2A 56 F2 | 	cmps	local03, ##579 wc
2298c     01 2C 86 F6 | 	negc	local04, #1
22990     16 2F 02 F6 | 	mov	local05, local04
22994     16 2B 02 F1 | 	add	local03, local04
22998                 | LR__2750
22998     F9 E4 05 F1 | 	add	objptr, #249
2299c     F2 2C 02 FB | 	rdlong	local04, objptr
229a0     1C E4 85 F1 | 	sub	objptr, #28
229a4     F2 14 02 FB | 	rdlong	arg02, objptr
229a8     14 1B 02 F6 | 	mov	arg05, local02
229ac     02 1A 66 F0 | 	shl	arg05, #2
229b0     14 E4 05 F1 | 	add	objptr, #20
229b4     F2 16 02 FB | 	rdlong	arg03, objptr
229b8     0B 1B 02 FD | 	qmul	arg05, arg03
229bc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
229bc     F6 03 00 FF 
229c0     00 12 06 F6 | 	mov	arg01, ##519168
229c4     16 13 82 F1 | 	sub	arg01, local04
229c8     02 16 66 F0 | 	shl	arg03, #2
229cc     0A 00 00 FF 
229d0     DB E5 05 F1 | 	add	objptr, ##5595
229d4     18 2C 62 FD | 	getqx	local04
229d8     16 15 02 F1 | 	add	arg02, local04
229dc     F4 08 B0 FD | 	call	#_psram_spin2_read1
229e0     0A 00 00 FF 
229e4     D3 E5 85 F1 | 	sub	objptr, ##5587
229e8     F2 2C 02 FB | 	rdlong	local04, objptr
229ec     1C E4 85 F1 | 	sub	objptr, #28
229f0     F2 14 02 FB | 	rdlong	arg02, objptr
229f4     14 1B 02 F6 | 	mov	arg05, local02
229f8     10 1A 06 F1 | 	add	arg05, #16
229fc     02 1A 66 F0 | 	shl	arg05, #2
22a00     14 E4 05 F1 | 	add	objptr, #20
22a04     F2 16 02 FB | 	rdlong	arg03, objptr
22a08     0B 1B 02 FD | 	qmul	arg05, arg03
22a0c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22a0c     F6 03 00 FF 
22a10     00 12 06 F6 | 	mov	arg01, ##519168
22a14     16 13 82 F1 | 	sub	arg01, local04
22a18     02 16 66 F0 | 	shl	arg03, #2
22a1c     0A 00 00 FF 
22a20     DB E5 05 F1 | 	add	objptr, ##5595
22a24     18 2C 62 FD | 	getqx	local04
22a28     16 15 02 F1 | 	add	arg02, local04
22a2c     40 09 B0 FD | 	call	#_psram_spin2_write
22a30     0B 00 00 FF 
22a34     CC E4 85 F1 | 	sub	objptr, ##5836
22a38     17 29 02 F1 | 	add	local02, local05
22a3c     15 29 0A F2 | 	cmp	local02, local03 wz
22a40     54 FF 9F 5D |  if_ne	jmp	#LR__2750
22a44                 | ' 
22a44                 | ' repeat i from (start*16)+4 to (start*16)+19
22a44     13 29 02 F6 | 	mov	local02, local01
22a48     04 28 66 F0 | 	shl	local02, #4
22a4c     04 28 06 F1 | 	add	local02, #4
22a50     13 2F 02 F6 | 	mov	local05, local01
22a54     04 2E 66 F0 | 	shl	local05, #4
22a58     13 2E 06 F1 | 	add	local05, #19
22a5c     13 2D 02 F6 | 	mov	local04, local01
22a60     04 2C 66 F0 | 	shl	local04, #4
22a64     04 2C 06 F1 | 	add	local04, #4
22a68     16 2F 52 F2 | 	cmps	local05, local04 wc
22a6c     01 2C 86 F6 | 	negc	local04, #1
22a70     16 2B 02 F6 | 	mov	local03, local04
22a74     16 2F 02 F1 | 	add	local05, local04
22a78                 | LR__2751
22a78                 | '    fastline(0,1023,i,write_background)    
22a78     45 E4 05 F1 | 	add	objptr, #69
22a7c     F2 18 02 FB | 	rdlong	arg04, objptr
22a80     45 E4 85 F1 | 	sub	objptr, #69
22a84     00 12 06 F6 | 	mov	arg01, #0
22a88     09 14 CE F9 | 	bmask	arg02, #9
22a8c     14 17 02 F6 | 	mov	arg03, local02
22a90     08 ED BF FD | 	call	#_hg010b_spin2_fastline
22a94     15 29 02 F1 | 	add	local02, local03
22a98     17 29 0A F2 | 	cmp	local02, local05 wz
22a9c     D8 FF 9F 5D |  if_ne	jmp	#LR__2751
22aa0                 | '    
22aa0                 | ' repeat i from 35 to start
22aa0     23 28 06 F6 | 	mov	local02, #35
22aa4     23 26 56 F2 | 	cmps	local01, #35 wc
22aa8     01 2C 86 F6 | 	negc	local04, #1
22aac     13 2F 02 F6 | 	mov	local05, local01
22ab0     16 2F 02 F1 | 	add	local05, local04
22ab4                 | LR__2752
22ab4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
22ab4     F6 03 00 FF 
22ab8     00 12 06 F6 | 	mov	arg01, ##519168
22abc     F9 E4 05 F1 | 	add	objptr, #249
22ac0     F2 2A 02 FB | 	rdlong	local03, objptr
22ac4     15 13 82 F1 | 	sub	arg01, local03
22ac8     F5 E4 85 F1 | 	sub	objptr, #245
22acc     F2 14 02 FB | 	rdlong	arg02, objptr
22ad0     14 2B 02 F6 | 	mov	local03, local02
22ad4     07 2A 66 F0 | 	shl	local03, #7
22ad8     15 15 02 F1 | 	add	arg02, local03
22adc     80 16 06 F6 | 	mov	arg03, #128
22ae0     0B 00 00 FF 
22ae4     C8 E4 05 F1 | 	add	objptr, ##5832
22ae8     E8 07 B0 FD | 	call	#_psram_spin2_read1
22aec                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
22aec     F6 03 00 FF 
22af0     00 12 06 F6 | 	mov	arg01, ##519168
22af4     0A 00 00 FF 
22af8     D3 E5 85 F1 | 	sub	objptr, ##5587
22afc     F2 2A 02 FB | 	rdlong	local03, objptr
22b00     15 13 82 F1 | 	sub	arg01, local03
22b04     F5 E4 85 F1 | 	sub	objptr, #245
22b08     F2 14 02 FB | 	rdlong	arg02, objptr
22b0c     14 2B 02 F6 | 	mov	local03, local02
22b10     01 2A 06 F1 | 	add	local03, #1
22b14     07 2A 66 F0 | 	shl	local03, #7
22b18     15 15 02 F1 | 	add	arg02, local03
22b1c     80 16 06 F6 | 	mov	arg03, #128
22b20     0B 00 00 FF 
22b24     C8 E4 05 F1 | 	add	objptr, ##5832
22b28     44 08 B0 FD | 	call	#_psram_spin2_write
22b2c     0B 00 00 FF 
22b30     CC E4 85 F1 | 	sub	objptr, ##5836
22b34     16 29 02 F1 | 	add	local02, local04
22b38     17 29 0A F2 | 	cmp	local02, local05 wz
22b3c     74 FF 9F 5D |  if_ne	jmp	#LR__2752
22b40                 | ' repeat i from 0 to 127
22b40     00 28 06 F6 | 	mov	local02, #0
22b44                 | LR__2753
22b44                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
22b44     04 E4 05 F1 | 	add	objptr, #4
22b48     F2 12 02 FB | 	rdlong	arg01, objptr
22b4c     13 2F 02 F6 | 	mov	local05, local01
22b50     07 2E 66 F0 | 	shl	local05, #7
22b54     17 13 02 F1 | 	add	arg01, local05
22b58     14 13 02 F1 | 	add	arg01, local02
22b5c     20 14 06 F6 | 	mov	arg02, #32
22b60     01 16 06 F6 | 	mov	arg03, #1
22b64     00 18 06 F6 | 	mov	arg04, #0
22b68     01 1A 06 F6 | 	mov	arg05, #1
22b6c     0B 00 00 FF 
22b70     C8 E4 05 F1 | 	add	objptr, ##5832
22b74     94 08 B0 FD | 	call	#_psram_spin2_fill
22b78     0B 00 00 FF 
22b7c     CC E4 85 F1 | 	sub	objptr, ##5836
22b80     01 28 06 F1 | 	add	local02, #1
22b84     80 28 56 F2 | 	cmps	local02, #128 wc
22b88     B8 FF 9F CD |  if_b	jmp	#LR__2753
22b8c     A7 F0 03 F6 | 	mov	ptra, fp
22b90     B2 00 A0 FD | 	call	#popregs_
22b94                 | _hg010b_spin2_scrolldown_ret
22b94     2D 00 64 FD | 	ret
22b98                 | 
22b98                 | ' 
22b98                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
22b98                 | ' 
22b98                 | ' pub crlf()
22b98                 | _hg010b_spin2_crlf
22b98                 | ' 
22b98                 | ' cursor_x:=leading_spaces*2
22b98     01 00 00 FF 
22b9c     B6 E4 05 F1 | 	add	objptr, ##694
22ba0     F2 16 02 FB | 	rdlong	arg03, objptr
22ba4     01 16 66 F0 | 	shl	arg03, #1
22ba8     01 00 00 FF 
22bac     7A E4 85 F1 | 	sub	objptr, ##634
22bb0     F2 16 52 FC | 	wrword	arg03, objptr
22bb4                 | ' cursor_y+=1
22bb4     02 E4 05 F1 | 	add	objptr, #2
22bb8     F2 16 C2 FA | 	rdbyte	arg03, objptr
22bbc     01 16 06 F1 | 	add	arg03, #1
22bc0     F2 16 42 FC | 	wrbyte	arg03, objptr
22bc4                 | ' if cursor_y>st_lines-1
22bc4     C3 E4 05 F1 | 	add	objptr, #195
22bc8     F2 16 02 FB | 	rdlong	arg03, objptr
22bcc     01 16 86 F1 | 	sub	arg03, #1
22bd0     C3 E4 85 F1 | 	sub	objptr, #195
22bd4     F2 14 C2 FA | 	rdbyte	arg02, objptr
22bd8     3E E4 85 F1 | 	sub	objptr, #62
22bdc     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
22be0     2C 00 90 ED |  if_be	jmp	#LR__2760
22be4                 | '   scrollup2()
22be4     00 12 06 F6 | 	mov	arg01, #0
22be8     01 00 00 FF 
22bec     58 14 06 F6 | 	mov	arg02, ##600
22bf0     10 16 06 F6 | 	mov	arg03, #16
22bf4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
22bf8                 | '   cursor_y:=st_lines-1
22bf8     01 E5 05 F1 | 	add	objptr, #257
22bfc     F2 16 02 FB | 	rdlong	arg03, objptr
22c00     01 16 86 F1 | 	sub	arg03, #1
22c04     C3 E4 85 F1 | 	sub	objptr, #195
22c08     F2 16 42 FC | 	wrbyte	arg03, objptr
22c0c     3E E4 85 F1 | 	sub	objptr, #62
22c10                 | LR__2760
22c10                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
22c10     3C E4 05 F1 | 	add	objptr, #60
22c14     F2 14 E2 FA | 	rdword	arg02, objptr
22c18     02 14 66 F0 | 	shl	arg02, #2
22c1c     02 E4 05 F1 | 	add	objptr, #2
22c20     F2 16 C2 FA | 	rdbyte	arg03, objptr
22c24     3E E4 85 F1 | 	sub	objptr, #62
22c28     04 16 66 F0 | 	shl	arg03, #4
22c2c     04 16 06 F1 | 	add	arg03, #4
22c30     11 12 06 F6 | 	mov	arg01, #17
22c34     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
22c38                 | _hg010b_spin2_crlf_ret
22c38     2D 00 64 FD | 	ret
22c3c                 | 
22c3c                 | ' 
22c3c                 | ' 
22c3c                 | ' '*************************************************************************
22c3c                 | ' '                                                                        *
22c3c                 | ' '  Conversions                                                           *
22c3c                 | ' '                                                                        *
22c3c                 | ' '*************************************************************************
22c3c                 | ' 
22c3c                 | ' ''---------- Convert a integer to dec string, return a pointer
22c3c                 | ' 
22c3c                 | ' pub inttostr(i):result |q,pos,k,j
22c3c                 | _hg010b_spin2_inttostr
22c3c     03 4A 05 F6 | 	mov	COUNT_, #3
22c40     A8 00 A0 FD | 	call	#pushregs_
22c44     09 27 0A F6 | 	mov	local01, arg01 wz
22c48                 | ' 
22c48                 | ' j:=i
22c48                 | ' pos:=10
22c48     0A 28 06 F6 | 	mov	local02, #10
22c4c                 | ' k:=0
22c4c     00 2A 06 F6 | 	mov	local03, #0
22c50                 | ' 
22c50                 | ' if (j==0)
22c50     18 00 90 5D |  if_ne	jmp	#LR__2770
22c54                 | '   n_string[0]:=48
22c54     4D E4 05 F1 | 	add	objptr, #77
22c58     F2 60 48 FC | 	wrbyte	#48, objptr
22c5c                 | '   n_string[1]:=0
22c5c     01 E4 05 F1 | 	add	objptr, #1
22c60     F2 00 48 FC | 	wrbyte	#0, objptr
22c64     4E E4 85 F1 | 	sub	objptr, #78
22c68     C4 00 90 FD | 	jmp	#LR__2777
22c6c                 | LR__2770
22c6c                 | ' 
22c6c                 | ' else
22c6c                 | '   if (j<0)
22c6c     13 27 52 F6 | 	abs	local01, local01 wc
22c70                 | '     j:=0-j
22c70                 | '     k:=45
22c70     2D 2A 06 C6 |  if_b	mov	local03, #45
22c74                 | ' 
22c74                 | '   n_string[11]:=0
22c74     58 E4 05 F1 | 	add	objptr, #88
22c78     F2 00 48 FC | 	wrbyte	#0, objptr
22c7c     58 E4 85 F1 | 	sub	objptr, #88
22c80     97 24 48 FB | 	callpa	#(@LR__2772-@LR__2771)>>2,fcache_load_ptr_
22c84                 | '   repeat while (pos>-1)
22c84                 | LR__2771
22c84     00 28 56 F2 | 	cmps	local02, #0 wc
22c88     40 00 90 CD |  if_b	jmp	#LR__2773
22c8c     13 FB 51 F6 | 	abs	result1, local01 wc
22c90     0A FA 15 FD | 	qdiv	result1, #10
22c94                 | '     q:=j//10
22c94     19 FA 61 FD | 	getqy	result1
22c98     FD FA 81 F6 | 	negc	result1, result1
22c9c     13 27 52 F6 | 	abs	local01, local01 wc
22ca0     0A 26 16 FD | 	qdiv	local01, #10
22ca4                 | '     q:=48+q
22ca4     30 FA 05 F1 | 	add	result1, #48
22ca8                 | '     n_string[pos]:=q
22ca8     14 27 02 F6 | 	mov	local01, local02
22cac     4D E4 05 F1 | 	add	objptr, #77
22cb0     F2 26 02 F1 | 	add	local01, objptr
22cb4     13 FB 41 FC | 	wrbyte	result1, local01
22cb8                 | '     j:=j/10
22cb8     4D E4 85 F1 | 	sub	objptr, #77
22cbc                 | '     pos-=1
22cbc     01 28 86 F1 | 	sub	local02, #1
22cc0     18 26 62 FD | 	getqx	local01
22cc4     13 27 82 F6 | 	negc	local01, local01
22cc8     B8 FF 9F FD | 	jmp	#LR__2771
22ccc                 | LR__2772
22ccc                 | LR__2773
22ccc                 | '   repeat while n_string[0]==48
22ccc                 | LR__2774
22ccc     4D E4 05 F1 | 	add	objptr, #77
22cd0     F2 16 C2 FA | 	rdbyte	arg03, objptr
22cd4     4D E4 85 F1 | 	sub	objptr, #77
22cd8     30 16 0E F2 | 	cmp	arg03, #48 wz
22cdc     20 00 90 5D |  if_ne	jmp	#LR__2775
22ce0                 | '     bytemove(@n_string,@n_string+1,12)
22ce0     4D E4 05 F1 | 	add	objptr, #77
22ce4     F2 12 02 F6 | 	mov	arg01, objptr
22ce8     F2 14 02 F6 | 	mov	arg02, objptr
22cec     4D E4 85 F1 | 	sub	objptr, #77
22cf0     01 14 06 F1 | 	add	arg02, #1
22cf4     0C 16 06 F6 | 	mov	arg03, #12
22cf8     38 11 B0 FD | 	call	#__system____builtin_memmove
22cfc     CC FF 9F FD | 	jmp	#LR__2774
22d00                 | LR__2775
22d00                 | ' 
22d00                 | '   if k==45
22d00     2D 2A 0E F2 | 	cmp	local03, #45 wz
22d04     28 00 90 5D |  if_ne	jmp	#LR__2776
22d08                 | '      bytemove(@n_string+1,@n_string,12)
22d08     4D E4 05 F1 | 	add	objptr, #77
22d0c     F2 12 02 F6 | 	mov	arg01, objptr
22d10     01 12 06 F1 | 	add	arg01, #1
22d14     F2 14 02 F6 | 	mov	arg02, objptr
22d18     4D E4 85 F1 | 	sub	objptr, #77
22d1c     0C 16 06 F6 | 	mov	arg03, #12
22d20     10 11 B0 FD | 	call	#__system____builtin_memmove
22d24                 | '      n_string[0]:=k
22d24     4D E4 05 F1 | 	add	objptr, #77
22d28     F2 2A 42 FC | 	wrbyte	local03, objptr
22d2c     4D E4 85 F1 | 	sub	objptr, #77
22d30                 | LR__2776
22d30                 | LR__2777
22d30                 | ' 
22d30                 | ' q:=@n_string
22d30     4D E4 05 F1 | 	add	objptr, #77
22d34     F2 FA 01 F6 | 	mov	result1, objptr
22d38     4D E4 85 F1 | 	sub	objptr, #77
22d3c                 | ' return q
22d3c     A7 F0 03 F6 | 	mov	ptra, fp
22d40     B2 00 A0 FD | 	call	#popregs_
22d44                 | _hg010b_spin2_inttostr_ret
22d44     2D 00 64 FD | 	ret
22d48                 | 
22d48                 | ' 
22d48                 | ' '**********************************************************************************
22d48                 | ' '
22d48                 | ' '        Blitting
22d48                 | ' '
22d48                 | ' '**********************************************************************************
22d48                 | ' 
22d48                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
22d48                 | _hg010b_spin2_blit
22d48     18 4A 05 F6 | 	mov	COUNT_, #24
22d4c     A8 00 A0 FD | 	call	#pushregs_
22d50     09 27 02 F6 | 	mov	local01, arg01
22d54     0A 29 02 F6 | 	mov	local02, arg02
22d58     0B 2B 02 F6 | 	mov	local03, arg03
22d5c     0C 2D 02 F6 | 	mov	local04, arg04
22d60     0D 2F 02 F6 | 	mov	local05, arg05
22d64     0E 31 02 F6 | 	mov	local06, arg06
22d68     0F 33 02 F6 | 	mov	local07, arg07
22d6c     10 35 02 F6 | 	mov	local08, arg08
22d70     11 37 02 F6 | 	mov	local09, arg09
22d74     12 39 02 F6 | 	mov	local10, arg10
22d78                 | ' 
22d78                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
22d78     00 04 00 FF 
22d7c     00 26 56 F2 | 	cmps	local01, ##524288 wc
22d80     00 04 00 3F 
22d84     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
22d88     7C 01 90 CD |  if_b	jmp	#LR__2784
22d8c     16 29 5A F2 | 	cmps	local02, local04 wcz
22d90     14 3B 02 16 |  if_a	mov	local11, local02
22d94     16 29 02 16 |  if_a	mov	local02, local04
22d98     1D 2D 02 16 |  if_a	mov	local04, local11
22d9c     17 2B 5A F2 | 	cmps	local03, local05 wcz
22da0     15 3B 02 16 |  if_a	mov	local11, local03
22da4     17 2B 02 16 |  if_a	mov	local03, local05
22da8     18 2B 02 FD | 	qmul	local03, local06
22dac                 | '   if x1a>x2a
22dac                 | '     x1a,x2a:=x2a,x1a
22dac                 | '   if y1a>y2a
22dac                 | '     y1a,y2a:=y2a,y1a  
22dac     1D 2F 02 16 |  if_a	mov	local05, local11
22db0                 | ' 
22db0                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
22db0     19 3D 02 F6 | 	mov	local12, local07
22db4     14 3D 02 F1 | 	add	local12, local02
22db8     18 3A 62 FD | 	getqx	local11
22dbc     1C 37 02 FD | 	qmul	local09, local10
22dc0     1D 3D 02 F1 | 	add	local12, local11
22dc4     13 3F 02 F6 | 	mov	local13, local01
22dc8     1A 3F 02 F1 | 	add	local13, local08
22dcc     18 3A 62 FD | 	getqx	local11
22dd0     1D 3F 02 F1 | 	add	local13, local11
22dd4     1F 3D 5A F2 | 	cmps	local12, local13 wcz
22dd8     98 00 90 ED |  if_be	jmp	#LR__2781
22ddc                 | '     repeat y from y1a to y2a
22ddc     15 41 02 F6 | 	mov	local14, local03
22de0     15 2F 52 F2 | 	cmps	local05, local03 wc
22de4     01 42 86 F6 | 	negc	local15, #1
22de8     17 45 02 F6 | 	mov	local16, local05
22dec     21 45 02 F1 | 	add	local16, local15
22df0     0B 00 00 FF 
22df4     CC E4 05 F1 | 	add	objptr, ##5836
22df8                 | LR__2780
22df8     18 41 02 FD | 	qmul	local14, local06
22dfc                 | '   '    writeln(string("I am here"))
22dfc                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
22dfc     13 15 02 F6 | 	mov	arg02, local01
22e00     16 17 02 F6 | 	mov	arg03, local04
22e04     14 17 82 F1 | 	sub	arg03, local02
22e08     01 16 06 F1 | 	add	arg03, #1
22e0c     F6 03 00 FF 
22e10     00 12 06 F6 | 	mov	arg01, ##519168
22e14     18 3E 62 FD | 	getqx	local13
22e18     1F 15 02 F1 | 	add	arg02, local13
22e1c     14 15 02 F1 | 	add	arg02, local02
22e20     B0 04 B0 FD | 	call	#_psram_spin2_read1
22e24     1B 3F 02 F6 | 	mov	local13, local09
22e28     15 3F 82 F1 | 	sub	local13, local03
22e2c     20 3F 02 F1 | 	add	local13, local14
22e30     1C 3F 02 FD | 	qmul	local13, local10
22e34                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
22e34     19 15 02 F6 | 	mov	arg02, local07
22e38     16 17 02 F6 | 	mov	arg03, local04
22e3c     14 17 82 F1 | 	sub	arg03, local02
22e40     01 16 06 F1 | 	add	arg03, #1
22e44     F6 03 00 FF 
22e48     00 12 06 F6 | 	mov	arg01, ##519168
22e4c     18 3E 62 FD | 	getqx	local13
22e50     1F 15 02 F1 | 	add	arg02, local13
22e54     1A 15 02 F1 | 	add	arg02, local08
22e58     14 05 B0 FD | 	call	#_psram_spin2_write
22e5c     21 41 02 F1 | 	add	local14, local15
22e60     22 41 0A F2 | 	cmp	local14, local16 wz
22e64     90 FF 9F 5D |  if_ne	jmp	#LR__2780
22e68     0B 00 00 FF 
22e6c     CC E4 85 F1 | 	sub	objptr, ##5836
22e70     94 00 90 FD | 	jmp	#LR__2783
22e74                 | LR__2781
22e74                 | '   else
22e74                 | '     repeat y from y2a to y1a
22e74     17 41 02 F6 | 	mov	local14, local05
22e78     17 2B 52 F2 | 	cmps	local03, local05 wc
22e7c     01 46 86 F6 | 	negc	local17, #1
22e80     15 49 02 F6 | 	mov	local18, local03
22e84     23 49 02 F1 | 	add	local18, local17
22e88     0B 00 00 FF 
22e8c     CC E4 05 F1 | 	add	objptr, ##5836
22e90                 | LR__2782
22e90     18 41 02 FD | 	qmul	local14, local06
22e94                 | '  '     writeln(string("I am there"))
22e94                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
22e94     13 15 02 F6 | 	mov	arg02, local01
22e98     16 17 02 F6 | 	mov	arg03, local04
22e9c     14 17 82 F1 | 	sub	arg03, local02
22ea0     01 16 06 F1 | 	add	arg03, #1
22ea4     F6 03 00 FF 
22ea8     00 12 06 F6 | 	mov	arg01, ##519168
22eac     18 44 62 FD | 	getqx	local16
22eb0     22 15 02 F1 | 	add	arg02, local16
22eb4     14 15 02 F1 | 	add	arg02, local02
22eb8     18 04 B0 FD | 	call	#_psram_spin2_read1
22ebc     1B 45 02 F6 | 	mov	local16, local09
22ec0     15 45 82 F1 | 	sub	local16, local03
22ec4     20 45 02 F1 | 	add	local16, local14
22ec8     1C 45 02 FD | 	qmul	local16, local10
22ecc                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
22ecc     19 15 02 F6 | 	mov	arg02, local07
22ed0     16 17 02 F6 | 	mov	arg03, local04
22ed4     14 17 82 F1 | 	sub	arg03, local02
22ed8     01 16 06 F1 | 	add	arg03, #1
22edc     F6 03 00 FF 
22ee0     00 12 06 F6 | 	mov	arg01, ##519168
22ee4     18 44 62 FD | 	getqx	local16
22ee8     22 15 02 F1 | 	add	arg02, local16
22eec     1A 15 02 F1 | 	add	arg02, local08
22ef0     7C 04 B0 FD | 	call	#_psram_spin2_write
22ef4     23 41 02 F1 | 	add	local14, local17
22ef8     24 41 0A F2 | 	cmp	local14, local18 wz
22efc     90 FF 9F 5D |  if_ne	jmp	#LR__2782
22f00     0B 00 00 FF 
22f04     CC E4 85 F1 | 	sub	objptr, ##5836
22f08                 | LR__2783
22f08                 | LR__2784
22f08                 | '     
22f08                 | ' if ((f>=$80000) && (t<$80000)) 
22f08     00 04 00 FF 
22f0c     00 26 56 F2 | 	cmps	local01, ##524288 wc
22f10     80 00 90 CD |  if_b	jmp	#LR__2786
22f14     00 04 00 FF 
22f18     00 32 56 F2 | 	cmps	local07, ##524288 wc
22f1c     74 00 90 3D |  if_ae	jmp	#LR__2786
22f20                 | '   repeat y from y1a to y2a
22f20     15 41 02 F6 | 	mov	local14, local03
22f24     15 2F 52 F2 | 	cmps	local05, local03 wc
22f28     01 4A 86 F6 | 	negc	local19, #1
22f2c     17 4D 02 F6 | 	mov	local20, local05
22f30     25 4D 02 F1 | 	add	local20, local19
22f34     0B 00 00 FF 
22f38     CC E4 05 F1 | 	add	objptr, ##5836
22f3c                 | LR__2785
22f3c     1B 49 02 F6 | 	mov	local18, local09
22f40     15 49 82 F1 | 	sub	local18, local03
22f44     20 49 02 F1 | 	add	local18, local14
22f48     1C 49 02 FD | 	qmul	local18, local10
22f4c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
22f4c     19 13 02 F6 | 	mov	arg01, local07
22f50     18 48 62 FD | 	getqx	local18
22f54     18 41 02 FD | 	qmul	local14, local06
22f58     24 13 02 F1 | 	add	arg01, local18
22f5c     1A 13 02 F1 | 	add	arg01, local08
22f60     13 15 02 F6 | 	mov	arg02, local01
22f64     16 17 02 F6 | 	mov	arg03, local04
22f68     14 17 82 F1 | 	sub	arg03, local02
22f6c     01 16 06 F1 | 	add	arg03, #1
22f70     18 48 62 FD | 	getqx	local18
22f74     24 15 02 F1 | 	add	arg02, local18
22f78     14 15 02 F1 | 	add	arg02, local02
22f7c     54 03 B0 FD | 	call	#_psram_spin2_read1
22f80     25 41 02 F1 | 	add	local14, local19
22f84     26 41 0A F2 | 	cmp	local14, local20 wz
22f88     B0 FF 9F 5D |  if_ne	jmp	#LR__2785
22f8c     0B 00 00 FF 
22f90     CC E4 85 F1 | 	sub	objptr, ##5836
22f94                 | LR__2786
22f94                 | '     
22f94                 | ' if ((f<$80000) && (t>=$80000)) 
22f94     00 04 00 FF 
22f98     00 26 56 F2 | 	cmps	local01, ##524288 wc
22f9c     84 00 90 3D |  if_ae	jmp	#LR__2788
22fa0     00 04 00 FF 
22fa4     00 32 56 F2 | 	cmps	local07, ##524288 wc
22fa8     78 00 90 CD |  if_b	jmp	#LR__2788
22fac                 | '   t:=t & $FFFFFFF
22fac     7C 32 06 F4 | 	bitl	local07, #124
22fb0                 | '   repeat y from y1a to y2a
22fb0     15 41 02 F6 | 	mov	local14, local03
22fb4     15 2F 52 F2 | 	cmps	local05, local03 wc
22fb8     01 4E 86 F6 | 	negc	local21, #1
22fbc     17 51 02 F6 | 	mov	local22, local05
22fc0     27 51 02 F1 | 	add	local22, local21
22fc4     0B 00 00 FF 
22fc8     CC E4 05 F1 | 	add	objptr, ##5836
22fcc                 | LR__2787
22fcc     18 41 02 FD | 	qmul	local14, local06
22fd0                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
22fd0     13 13 02 F6 | 	mov	arg01, local01
22fd4     1B 4D 02 F6 | 	mov	local20, local09
22fd8     15 4D 82 F1 | 	sub	local20, local03
22fdc     20 4D 02 F1 | 	add	local20, local14
22fe0     18 4A 62 FD | 	getqx	local19
22fe4     1C 4D 02 FD | 	qmul	local20, local10
22fe8     25 13 02 F1 | 	add	arg01, local19
22fec     14 13 02 F1 | 	add	arg01, local02
22ff0     19 15 02 F6 | 	mov	arg02, local07
22ff4     16 17 02 F6 | 	mov	arg03, local04
22ff8     14 17 82 F1 | 	sub	arg03, local02
22ffc     01 16 06 F1 | 	add	arg03, #1
23000     18 4C 62 FD | 	getqx	local20
23004     26 15 02 F1 | 	add	arg02, local20
23008     1A 15 02 F1 | 	add	arg02, local08
2300c     60 03 B0 FD | 	call	#_psram_spin2_write
23010     27 41 02 F1 | 	add	local14, local21
23014     28 41 0A F2 | 	cmp	local14, local22 wz
23018     B0 FF 9F 5D |  if_ne	jmp	#LR__2787
2301c     0B 00 00 FF 
23020     CC E4 85 F1 | 	sub	objptr, ##5836
23024                 | LR__2788
23024                 | '     
23024                 | ' if ((f<$80000) && (t<$80000)) 
23024     00 04 00 FF 
23028     00 26 56 F2 | 	cmps	local01, ##524288 wc
2302c     00 04 00 CF 
23030     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
23034     64 00 90 3D |  if_ae	jmp	#LR__2790
23038                 | '   repeat y from y1a to y2a
23038     15 41 02 F6 | 	mov	local14, local03
2303c     15 2F 52 F2 | 	cmps	local05, local03 wc
23040     01 52 86 F6 | 	negc	local23, #1
23044     17 55 02 F6 | 	mov	local24, local05
23048     29 55 02 F1 | 	add	local24, local23
2304c                 | LR__2789
2304c     18 41 02 FD | 	qmul	local14, local06
23050                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
23050     13 13 02 F6 | 	mov	arg01, local01
23054     1B 51 02 F6 | 	mov	local22, local09
23058     15 51 82 F1 | 	sub	local22, local03
2305c     20 51 02 F1 | 	add	local22, local14
23060     18 4E 62 FD | 	getqx	local21
23064     1C 51 02 FD | 	qmul	local22, local10
23068     27 13 02 F1 | 	add	arg01, local21
2306c     14 13 02 F1 | 	add	arg01, local02
23070     19 15 02 F6 | 	mov	arg02, local07
23074     16 17 02 F6 | 	mov	arg03, local04
23078     14 17 82 F1 | 	sub	arg03, local02
2307c     01 16 06 F1 | 	add	arg03, #1
23080     18 50 62 FD | 	getqx	local22
23084     28 15 02 F1 | 	add	arg02, local22
23088     1A 15 02 F1 | 	add	arg02, local08
2308c     A4 0D B0 FD | 	call	#__system____builtin_memmove
23090     29 41 02 F1 | 	add	local14, local23
23094     2A 41 0A F2 | 	cmp	local14, local24 wz
23098     B0 FF 9F 5D |  if_ne	jmp	#LR__2789
2309c                 | LR__2790
2309c     A7 F0 03 F6 | 	mov	ptra, fp
230a0     B2 00 A0 FD | 	call	#popregs_
230a4                 | _hg010b_spin2_blit_ret
230a4     2D 00 64 FD | 	ret
230a8                 | 
230a8                 | ' 
230a8                 | ' '..............................................................................
230a8                 | ' 
230a8                 | ' {{
230a8                 | ' }}
230a8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
230a8                 | _psram_spin2_startx
230a8     04 4A 05 F6 | 	mov	COUNT_, #4
230ac     A8 00 A0 FD | 	call	#pushregs_
230b0     09 27 02 F6 | 	mov	local01, arg01
230b4     0B 29 02 F6 | 	mov	local02, arg03
230b8     0C 2B 02 F6 | 	mov	local03, arg04
230bc                 | '     stop() ' restart driver if required
230bc     54 01 B0 FD | 	call	#_psram_spin2_stop
230c0     00 26 0E F2 | 	cmp	local01, #0 wz
230c4     14 26 06 AB |  if_e	rdlong	local01, #20
230c8     13 15 52 F6 | 	abs	arg02, local01 wc
230cc     A1 07 00 FF 
230d0     40 14 16 FD | 	qdiv	arg02, ##1000000
230d4                 | ' 
230d4                 | '     ' use current frequency if none specified
230d4                 | ' 
230d4                 | '     if freq == 0 
230d4                 | '         freq := clkfreq 
230d4                 | ' 
230d4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
230d4                 | ' 
230d4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
230d4                 | '     if burst < 0
230d4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
230d4     18 14 62 FD | 	getqx	arg02
230d8     0A 19 82 F6 | 	negc	arg04, arg02
230dc     03 18 66 F0 | 	shl	arg04, #3
230e0     84 18 86 F1 | 	sub	arg04, #132
230e4     04 18 46 F0 | 	shr	arg04, #4
230e8     04 18 66 F0 | 	shl	arg04, #4
230ec     00 18 56 F2 | 	cmps	arg04, #0 wc
230f0     0E FA 65 C6 |  if_b	neg	result1, #14
230f4     10 01 90 CD |  if_b	jmp	#LR__2803
230f8                 | ' 
230f8                 | '     ' compute the input delay
230f8                 | ' 
230f8                 | '     if delay <= 0
230f8     01 28 56 F2 | 	cmps	local02, #1 wc
230fc     10 00 90 3D |  if_ae	jmp	#LR__2800
23100                 | '         delay := lookupDelay(freq)
23100     13 13 02 F6 | 	mov	arg01, local01
23104     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
23108     FD 28 02 F6 | 	mov	local02, result1
2310c     04 00 90 FD | 	jmp	#LR__2801
23110                 | LR__2800
23110                 | '     else
23110                 | '         delay <#= $f ' limit to 15
23110     0F 28 66 F3 | 	fles	local02, #15
23114                 | LR__2801
23114                 | ' 
23114                 | '     ' create our lock
23114                 | ' 
23114                 | '     driverlock := LOCKNEW()  
23114     00 FA 05 F6 | 	mov	result1, #0
23118     04 FA 61 FD | 	locknew	result1
2311c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
23120     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
23124                 | '     if driverlock == -1
23124     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
23128     FF FF 7F FF 
2312c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
23130                 | '         return ERR_NO_LOCK
23130     1A FA 65 A6 |  if_e	neg	result1, #26
23134     D0 00 90 AD |  if_e	jmp	#LR__2803
23138                 | ' 
23138                 | '     ' patch in the proper data and HUB addresses to the startup structure
23138                 | ' 
23138                 | '     long[@startupData][0]:=clkfreq
23138     14 26 06 FB | 	rdlong	local01, #20
2313c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
23140     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
23144                 | ' '    long[@startupData][1]:=$1000_0000
23144                 | '     long[@startupData][5]:=@deviceData
23144     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
23148     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2314c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
23150     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
23154     14 14 06 F1 | 	add	arg02, #20
23158     0A 27 62 FC | 	wrlong	local01, arg02
2315c                 | '     long[@startupData][6]:=@qosData
2315c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
23160     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23164     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
23168     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
2316c     18 14 06 F1 | 	add	arg02, #24
23170     0A 27 62 FC | 	wrlong	local01, arg02
23174                 | '     long[@startupData][7]:=$7FF00
23174     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
23178     1C 26 06 F1 | 	add	local01, #28
2317c     FF 03 80 FF 
23180     13 01 6A FC | 	wrlong	##524032, local01
23184                 | ' 
23184                 | '     ' setup some default bank and QoS parameter values
23184                 | ' 
23184                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
23184     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
23188     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
2318c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
23190     10 18 66 F0 | 	shl	arg04, #16
23194     0C 28 66 F0 | 	shl	local02, #12
23198     14 19 42 F5 | 	or	arg04, local02
2319c     18 18 46 F5 | 	or	arg04, #24
231a0     0C 15 02 F6 | 	mov	arg02, arg04
231a4     02 16 06 F6 | 	mov	arg03, #2
231a8     A0 00 A0 FD | 	call	#\builtin_longfill_
231ac                 | '     longfill(@qosData, $FFFF0000, 8)
231ac     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
231b0     07 16 06 F6 | 	mov	arg03, #7
231b4     28 16 62 FD | 	setq	arg03
231b8     80 FF FF FF 
231bc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
231c0                 | ' 
231c0                 | '     ' get the address of the PSRAM memory driver so we can start it
231c0                 | ' 
231c0                 | '     driverAddr:= driver.getDriverAddr()
231c0                 | '     return @driver_start
231c0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
231c4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
231c8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
231cc                 | ' 
231cc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
231cc                 | ' 
231cc                 | '     if desiredcog < 0
231cc     00 2A 56 F2 | 	cmps	local03, #0 wc
231d0                 | '         desiredcog := NEWCOG
231d0     10 2A 06 C6 |  if_b	mov	local03, #16
231d4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
231d4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
231d8     15 2D 02 F6 | 	mov	local04, local03
231dc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
231e0     0A 2D F2 FC | 	coginit	local04, arg02 wc
231e4     01 2C 66 C6 |  if_b	neg	local04, #1
231e8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
231ec     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
231f0                 | '     repeat until long[@startupData] == 0 
231f0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
231f4                 | LR__2802
231f4     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
231f8     F8 FF 9F 5D |  if_ne	jmp	#LR__2802
231fc                 | ' 
231fc                 | '     return drivercog
231fc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
23200     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23204     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23208                 | LR__2803
23208     A7 F0 03 F6 | 	mov	ptra, fp
2320c     B2 00 A0 FD | 	call	#popregs_
23210                 | _psram_spin2_startx_ret
23210     2D 00 64 FD | 	ret
23214                 | 
23214                 | ' 
23214                 | ' '..............................................................................
23214                 | ' 
23214                 | ' {{
23214                 | ' }}
23214                 | ' PUB stop() : i
23214                 | _psram_spin2_stop
23214     00 00 06 F6 | 	mov	_var01, #0
23218                 | '     if drivercog <> -1
23218     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2321c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23220     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23224     FF FF 7F FF 
23228     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
2322c     70 00 90 AD |  if_e	jmp	#LR__2813
23230                 | '         cogstop(drivercog) ' a rather brutal stop
23230     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23234     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23238     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2323c     03 12 62 FD | 	cogstop	arg01
23240     97 26 48 FB | 	callpa	#(@LR__2812-@LR__2810)>>2,fcache_load_ptr_
23244                 | '         repeat i from 0 to 7
23244                 | LR__2810
23244                 | '             if long[$7FF00][i*3] < 0
23244     00 FB 01 F6 | 	mov	result1, _var01
23248     01 FA 65 F0 | 	shl	result1, #1
2324c     00 FB 01 F1 | 	add	result1, _var01
23250     02 FA 65 F0 | 	shl	result1, #2
23254     FF 03 00 FF 
23258     00 FB 05 F1 | 	add	result1, ##524032
2325c     FD FA 01 FB | 	rdlong	result1, result1
23260     00 FA 55 F2 | 	cmps	result1, #0 wc
23264     1C 00 90 3D |  if_ae	jmp	#LR__2811
23268                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
23268     00 FB 01 F6 | 	mov	result1, _var01
2326c     01 FA 65 F0 | 	shl	result1, #1
23270     00 FB 01 F1 | 	add	result1, _var01
23274     02 FA 65 F0 | 	shl	result1, #2
23278     FF 03 00 FF 
2327c     00 FB 05 F1 | 	add	result1, ##524032
23280     FD 20 68 FC | 	wrlong	#16, result1
23284                 | LR__2811
23284     01 00 06 F1 | 	add	_var01, #1
23288     08 00 56 F2 | 	cmps	_var01, #8 wc
2328c     B4 FF 9F CD |  if_b	jmp	#LR__2810
23290                 | LR__2812
23290                 | '         drivercog := -1
23290     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23294     FF FF FF FF 
23298     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2329c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
232a0                 | LR__2813
232a0                 | '     if driverlock <> -1
232a0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
232a4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
232a8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
232ac     FF FF 7F FF 
232b0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
232b4                 | '         LOCKRET(driverlock)
232b4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
232b8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
232bc     05 12 62 5D |  if_ne	lockret	arg01
232c0                 | '         driverlock := -1
232c0     FF FF FF 5F 
232c4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
232c8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
232cc     00 FB 01 F6 | 	mov	result1, _var01
232d0                 | _psram_spin2_stop_ret
232d0     2D 00 64 FD | 	ret
232d4                 | 
232d4                 | ' 
232d4                 | ' '..............................................................................
232d4                 | ' 
232d4                 | ' {{
232d4                 | ' }}
232d4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
232d4                 | _psram_spin2_read1
232d4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
232d4                 | '     if drivercog == -1 ' driver must be running
232d4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
232d8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
232dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
232e0     FF FF 7F FF 
232e4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
232e8                 | '         return ERR_INACTIVE
232e8     0F FA 65 A6 |  if_e	neg	result1, #15
232ec     7C 00 90 AD |  if_e	jmp	#LR__2821
232f0                 | '     if count == 0 ' don't even bother reading
232f0     00 16 0E F2 | 	cmp	arg03, #0 wz
232f4                 | '         return 0
232f4     00 FA 05 A6 |  if_e	mov	result1, #0
232f8     70 00 90 AD |  if_e	jmp	#LR__2821
232fc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
232fc     00 FA 05 F6 | 	mov	result1, #0
23300     01 FA 61 FD | 	cogid	result1
23304     FD 00 02 F6 | 	mov	_var01, result1
23308     01 00 66 F0 | 	shl	_var01, #1
2330c     FD 00 02 F1 | 	add	_var01, result1
23310     02 00 66 F0 | 	shl	_var01, #2
23314     FF 03 00 FF 
23318     00 03 06 F6 | 	mov	_var02, ##524032
2331c     00 03 02 F1 | 	add	_var02, _var01
23320                 | '     if long[mailbox] < 0
23320     01 01 02 FB | 	rdlong	_var01, _var02
23324     00 00 56 F2 | 	cmps	_var01, #0 wc
23328                 | '         return ERR_MAILBOX_BUSY
23328     1C FA 65 C6 |  if_b	neg	result1, #28
2332c     3C 00 90 CD |  if_b	jmp	#LR__2821
23330                 | '     long[mailbox][2] := count
23330     08 02 06 F1 | 	add	_var02, #8
23334     01 17 62 FC | 	wrlong	arg03, _var02
23338                 | '     long[mailbox][1] := dstHubAddr
23338     04 02 86 F1 | 	sub	_var02, #4
2333c     01 13 62 FC | 	wrlong	arg01, _var02
23340     04 02 86 F1 | 	sub	_var02, #4
23344                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23344     0A 05 02 F6 | 	mov	_var03, arg02
23348     D9 04 06 F4 | 	bitl	_var03, #217
2334c     00 00 58 FF 
23350     00 00 06 F6 | 	mov	_var01, ##-1342177280
23354     02 01 02 F1 | 	add	_var01, _var03
23358     01 01 62 FC | 	wrlong	_var01, _var02
2335c                 | '     repeat
2335c                 | LR__2820
2335c                 | '         result := long[mailbox]    
2335c     01 05 02 FB | 	rdlong	_var03, _var02
23360     00 04 56 F2 | 	cmps	_var03, #0 wc
23364     F4 FF 9F CD |  if_b	jmp	#LR__2820
23368                 | '     while result < 0   
23368                 | '     return -result                       'return success or error
23368     02 FB 61 F6 | 	neg	result1, _var03
2336c                 | LR__2821
2336c                 | _psram_spin2_read1_ret
2336c     2D 00 64 FD | 	ret
23370                 | 
23370                 | ' 
23370                 | ' '..............................................................................
23370                 | ' 
23370                 | ' {{
23370                 | ' }}
23370                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23370                 | _psram_spin2_write
23370                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23370                 | '     if drivercog == -1 ' driver must be running
23370     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23374     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23378     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2337c     FF FF 7F FF 
23380     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
23384                 | '         return ERR_INACTIVE
23384     0F FA 65 A6 |  if_e	neg	result1, #15
23388     7C 00 90 AD |  if_e	jmp	#LR__2831
2338c                 | '     if count == 0 ' don't even bother writing
2338c     00 16 0E F2 | 	cmp	arg03, #0 wz
23390                 | '         return 0
23390     00 FA 05 A6 |  if_e	mov	result1, #0
23394     70 00 90 AD |  if_e	jmp	#LR__2831
23398                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23398     00 FA 05 F6 | 	mov	result1, #0
2339c     01 FA 61 FD | 	cogid	result1
233a0     FD 00 02 F6 | 	mov	_var01, result1
233a4     01 00 66 F0 | 	shl	_var01, #1
233a8     FD 00 02 F1 | 	add	_var01, result1
233ac     02 00 66 F0 | 	shl	_var01, #2
233b0     FF 03 00 FF 
233b4     00 03 06 F6 | 	mov	_var02, ##524032
233b8     00 03 02 F1 | 	add	_var02, _var01
233bc                 | '     if long[mailbox] < 0
233bc     01 01 02 FB | 	rdlong	_var01, _var02
233c0     00 00 56 F2 | 	cmps	_var01, #0 wc
233c4                 | '         return ERR_MAILBOX_BUSY
233c4     1C FA 65 C6 |  if_b	neg	result1, #28
233c8     3C 00 90 CD |  if_b	jmp	#LR__2831
233cc                 | '     long[mailbox][2] := count
233cc     08 02 06 F1 | 	add	_var02, #8
233d0     01 17 62 FC | 	wrlong	arg03, _var02
233d4                 | '     long[mailbox][1] := srcHubAddr
233d4     04 02 86 F1 | 	sub	_var02, #4
233d8     01 13 62 FC | 	wrlong	arg01, _var02
233dc     04 02 86 F1 | 	sub	_var02, #4
233e0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
233e0     0A 05 02 F6 | 	mov	_var03, arg02
233e4     D9 04 06 F4 | 	bitl	_var03, #217
233e8     00 00 78 FF 
233ec     00 00 06 F6 | 	mov	_var01, ##-268435456
233f0     02 01 02 F1 | 	add	_var01, _var03
233f4     01 01 62 FC | 	wrlong	_var01, _var02
233f8                 | '     repeat
233f8                 | LR__2830
233f8                 | '         result := long[mailbox]    
233f8     01 05 02 FB | 	rdlong	_var03, _var02
233fc     00 04 56 F2 | 	cmps	_var03, #0 wc
23400     F4 FF 9F CD |  if_b	jmp	#LR__2830
23404                 | '     while result < 0   
23404                 | '     return -result                       'return success or error
23404     02 FB 61 F6 | 	neg	result1, _var03
23408                 | LR__2831
23408                 | _psram_spin2_write_ret
23408     2D 00 64 FD | 	ret
2340c                 | 
2340c                 | ' 
2340c                 | ' ' generalized fill
2340c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
2340c                 | _psram_spin2_fill
2340c     09 01 02 F6 | 	mov	_var01, arg01
23410     0A 03 02 F6 | 	mov	_var02, arg02
23414     0B 05 02 F6 | 	mov	_var03, arg03
23418     0D 07 02 F6 | 	mov	_var04, arg05
2341c                 | '     case datasize 
2341c     01 06 86 F1 | 	sub	_var04, #1
23420     04 06 26 F3 | 	fle	_var04, #4
23424     30 06 62 FD | 	jmprel	_var04
23428                 | LR__2840
23428     10 00 90 FD | 	jmp	#LR__2841
2342c     18 00 90 FD | 	jmp	#LR__2842
23430     2C 00 90 FD | 	jmp	#LR__2844
23434     1C 00 90 FD | 	jmp	#LR__2843
23438     24 00 90 FD | 	jmp	#LR__2844
2343c                 | LR__2841
2343c                 | '         1: req := driver.R_WRITEBYTE
2343c     00 00 60 FF 
23440     00 08 06 F6 | 	mov	_var05, ##-1073741824
23444     20 00 90 FD | 	jmp	#LR__2845
23448                 | LR__2842
23448                 | '         2: req := driver.R_WRITEWORD
23448     00 00 68 FF 
2344c     00 08 06 F6 | 	mov	_var05, ##-805306368
23450     14 00 90 FD | 	jmp	#LR__2845
23454                 | LR__2843
23454                 | '         4: req := driver.R_WRITELONG
23454     00 00 70 FF 
23458     00 08 06 F6 | 	mov	_var05, ##-536870912
2345c     08 00 90 FD | 	jmp	#LR__2845
23460                 | LR__2844
23460                 | '         other : return ERR_INVALID
23460     06 FA 65 F6 | 	neg	result1, #6
23464     94 00 90 FD | 	jmp	#LR__2847
23468                 | LR__2845
23468                 | '     if count == 0   ' nothing to do
23468     00 04 0E F2 | 	cmp	_var03, #0 wz
2346c                 | '         return 0
2346c     00 FA 05 A6 |  if_e	mov	result1, #0
23470     88 00 90 AD |  if_e	jmp	#LR__2847
23474                 | '     if drivercog == -1
23474     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23478     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2347c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23480     FF FF 7F FF 
23484     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
23488                 | '         return ERR_INACTIVE
23488     0F FA 65 A6 |  if_e	neg	result1, #15
2348c     6C 00 90 AD |  if_e	jmp	#LR__2847
23490                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23490     00 FA 05 F6 | 	mov	result1, #0
23494     01 FA 61 FD | 	cogid	result1
23498     FD 06 02 F6 | 	mov	_var04, result1
2349c     01 06 66 F0 | 	shl	_var04, #1
234a0     FD 06 02 F1 | 	add	_var04, result1
234a4     02 06 66 F0 | 	shl	_var04, #2
234a8     FF 03 00 FF 
234ac     00 0B 06 F6 | 	mov	_var06, ##524032
234b0     03 0B 02 F1 | 	add	_var06, _var04
234b4                 | '     if long[mailbox] < 0
234b4     05 07 02 FB | 	rdlong	_var04, _var06
234b8     00 06 56 F2 | 	cmps	_var04, #0 wc
234bc                 | '         return ERR_MAILBOX_BUSY
234bc     1C FA 65 C6 |  if_b	neg	result1, #28
234c0     38 00 90 CD |  if_b	jmp	#LR__2847
234c4                 | '     long[mailbox][2] := count
234c4     08 0A 06 F1 | 	add	_var06, #8
234c8     05 05 62 FC | 	wrlong	_var03, _var06
234cc                 | '     long[mailbox][1] := pattern
234cc     04 0A 86 F1 | 	sub	_var06, #4
234d0     05 03 62 FC | 	wrlong	_var02, _var06
234d4     04 0A 86 F1 | 	sub	_var06, #4
234d8                 | '     long[mailbox] := req + (addr & $1ffffff)
234d8     04 0D 02 F6 | 	mov	_var07, _var05
234dc     00 0F 02 F6 | 	mov	_var08, _var01
234e0     D9 0E 06 F4 | 	bitl	_var08, #217
234e4     07 0D 02 F1 | 	add	_var07, _var08
234e8     05 0D 62 FC | 	wrlong	_var07, _var06
234ec                 | '     repeat
234ec                 | LR__2846
234ec                 | '         r := long[mailbox]
234ec     05 0F 02 FB | 	rdlong	_var08, _var06
234f0     00 0E 56 F2 | 	cmps	_var08, #0 wc
234f4     F4 FF 9F CD |  if_b	jmp	#LR__2846
234f8                 | '     while r < 0
234f8                 | '     return -r                  ' return 0 for success or negated error code
234f8     07 FB 61 F6 | 	neg	result1, _var08
234fc                 | LR__2847
234fc                 | _psram_spin2_fill_ret
234fc     2D 00 64 FD | 	ret
23500                 | 
23500                 | ' 
23500                 | ' '..............................................................................
23500                 | ' 
23500                 | ' {{
23500                 | ' }}
23500                 | ' PUB setQos(cog, qos) : result | mailbox
23500                 | _psram_spin2_setQos
23500     09 01 02 F6 | 	mov	_var01, arg01
23504                 | '     if drivercog == -1 ' driver must be running
23504     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23508     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2350c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23510     FF FF 7F FF 
23514     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
23518                 | '         return ERR_INACTIVE
23518     0F FA 65 A6 |  if_e	neg	result1, #15
2351c     9C 00 90 AD |  if_e	jmp	#LR__2854
23520                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23520     00 00 56 F2 | 	cmps	_var01, #0 wc
23524     08 00 90 CD |  if_b	jmp	#LR__2850
23528     08 00 56 F2 | 	cmps	_var01, #8 wc
2352c     08 00 90 CD |  if_b	jmp	#LR__2851
23530                 | LR__2850
23530                 | '         return ERR_INVALID
23530     06 FA 65 F6 | 	neg	result1, #6
23534     84 00 90 FD | 	jmp	#LR__2854
23538                 | LR__2851
23538                 | '     long[@qosData][cog] := qos & !$1ff
23538     FF 15 26 F5 | 	andn	arg02, #511
2353c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
23540     02 00 66 F0 | 	shl	_var01, #2
23544     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
23548     00 15 62 FC | 	wrlong	arg02, _var01
2354c                 | '     mailbox := $7FF00 + drivercog*12
2354c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
23550     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
23554     02 07 02 F6 | 	mov	_var04, _var03
23558     01 06 66 F0 | 	shl	_var04, #1
2355c     02 07 02 F1 | 	add	_var04, _var03
23560     02 06 66 F0 | 	shl	_var04, #2
23564     FF 03 00 FF 
23568     00 09 06 F6 | 	mov	_var05, ##524032
2356c     03 09 02 F1 | 	add	_var05, _var04
23570                 | '     repeat until LOCKTRY(driverlock)
23570     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
23574                 | LR__2852
23574     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23578     06 12 72 FD | 	locktry	arg01 wc
2357c     F4 FF 9F 3D |  if_ae	jmp	#LR__2852
23580     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
23584                 | '     long[mailbox] := driver.R_CONFIG + cogid()
23584     00 06 06 F6 | 	mov	_var04, #0
23588     01 06 62 FD | 	cogid	_var04
2358c     00 00 78 FF 
23590     00 02 06 F6 | 	mov	_var02, ##-268435456
23594     03 03 02 F1 | 	add	_var02, _var04
23598     04 03 62 FC | 	wrlong	_var02, _var05
2359c                 | '     repeat while long[mailbox] < 0
2359c                 | LR__2853
2359c     04 03 02 FB | 	rdlong	_var02, _var05
235a0     00 02 56 F2 | 	cmps	_var02, #0 wc
235a4     F4 FF 9F CD |  if_b	jmp	#LR__2853
235a8                 | '     LOCKREL(driverlock)
235a8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
235ac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
235b0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
235b4     07 12 72 FD | 	lockrel	arg01 wc
235b8     00 FA 05 F6 | 	mov	result1, #0
235bc                 | LR__2854
235bc                 | _psram_spin2_setQos_ret
235bc     2D 00 64 FD | 	ret
235c0                 | 
235c0                 | ' 
235c0                 | ' '..............................................................................
235c0                 | ' 
235c0                 | ' {{
235c0                 | ' }}
235c0                 | ' PRI lookupDelay(freq) : delay | profile
235c0                 | _psram_spin2_lookupDelay
235c0                 | '     profile := @delayTable
235c0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
235c4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
235c8                 | '     delay := long[profile][0]
235c8     00 03 02 FB | 	rdlong	_var02, _var01
235cc                 | '     repeat while long[profile][1] 
235cc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
235d0     97 16 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
235d4                 | LR__2860
235d4     04 00 06 F1 | 	add	_var01, #4
235d8     00 FB 09 FB | 	rdlong	result1, _var01 wz
235dc     04 00 86 F1 | 	sub	_var01, #4
235e0     1C 00 90 AD |  if_e	jmp	#LR__2862
235e4                 | '         if freq +< long[profile][1] 
235e4     04 00 06 F1 | 	add	_var01, #4
235e8     00 FB 01 FB | 	rdlong	result1, _var01
235ec     04 00 86 F1 | 	sub	_var01, #4
235f0     FD 12 12 F2 | 	cmp	arg01, result1 wc
235f4                 | '             quit
235f4                 | '         profile += 4
235f4     04 00 06 31 |  if_ae	add	_var01, #4
235f8                 | '         delay++
235f8     01 02 06 31 |  if_ae	add	_var02, #1
235fc     D4 FF 9F 3D |  if_ae	jmp	#LR__2860
23600                 | LR__2861
23600                 | LR__2862
23600     01 FB 01 F6 | 	mov	result1, _var02
23604                 | _psram_spin2_lookupDelay_ret
23604     2D 00 64 FD | 	ret
23608                 | 
23608                 | ' 
23608                 | ' PUB start() : r
23608                 | _usbnew_spin2_start
23608     00 00 06 F6 | 	mov	_var01, #0
2360c                 | '   ifnot driver_cog
2360c     15 00 00 FF 
23610     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
23614     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
23618     15 00 00 FF 
2361c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
23620     38 00 90 5D |  if_ne	jmp	#LR__2870
23624                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
23624     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
23628     10 00 06 F6 | 	mov	_var01, #16
2362c     00 16 06 F6 | 	mov	arg03, #0
23630     28 16 62 FD | 	setq	arg03
23634     0A 01 F2 FC | 	coginit	_var01, arg02 wc
23638     01 00 66 C6 |  if_b	neg	_var01, #1
2363c                 | '     if r >= 0
2363c     00 00 56 F2 | 	cmps	_var01, #0 wc
23640                 | '       driver_cog := r+1
23640     00 03 02 36 |  if_ae	mov	_var02, _var01
23644     01 02 06 31 |  if_ae	add	_var02, #1
23648     15 00 00 3F 
2364c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
23650     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
23654     15 00 00 3F 
23658     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
2365c                 | LR__2870
2365c     00 FB 01 F6 | 	mov	result1, _var01
23660                 | _usbnew_spin2_start_ret
23660     2D 00 64 FD | 	ret
23664                 | 
23664                 | '     '' (Always enabled)
23664                 | ' 
23664                 | ' '' Get current pressed state of a keyboard key
23664                 | ' PUB keystate(key) : r | buf[2],tmp
23664                 | _usbnew_spin2_keystate
23664     00 04 06 F6 | 	mov	_var03, #0
23668                 | '   if key >= $E0 && key < $E8
23668     E0 12 56 F2 | 	cmps	arg01, #224 wc
2366c     34 00 90 CD |  if_b	jmp	#LR__2880
23670     E8 12 56 F2 | 	cmps	arg01, #232 wc
23674     2C 00 90 3D |  if_ae	jmp	#LR__2880
23678                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
23678     00 FA 05 F6 | 	mov	result1, #0
2367c     13 00 00 FF 
23680     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
23684     09 07 02 F6 | 	mov	_var04, arg01
23688     E0 06 86 F1 | 	sub	_var04, #224
2368c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
23690     03 09 4A F0 | 	shr	_var05, _var04 wz
23694     13 00 00 FF 
23698     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2369c     01 FA 65 56 |  if_ne	neg	result1, #1
236a0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
236a4                 | LR__2880
236a4                 | '   else
236a4                 | '     '' Do this in inline ASM to ensure atomicity
236a4                 | '     tmp := @hkbd_report
236a4     13 00 00 FF 
236a8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
236ac     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
236b0                 | '     org
236b0     13 00 00 FF 
236b4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
236b8     97 1E 48 FB | 	callpa	#(@LR__2882-@LR__2881)>>2,fcache_load_ptr_
236bc                 | LR__2881
236bc 000             | 	org	0
236bc 000 28 02 64 FD | 	setq	#1
236c0 001 04 01 02 FB | 	rdlong	_var01, _var05
236c4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
236c8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
236cc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
236d0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
236d4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
236d8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
236dc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
236e0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
236e4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
236e8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
236ec 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
236f0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
236f4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
236f8 00f             | LR__2882
236f8                 | 	orgh
236f8     02 FB 01 F6 | 	mov	result1, _var03
236fc                 | _usbnew_spin2_keystate_ret
236fc     2D 00 64 FD | 	ret
23700                 | 
23700                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
23700                 | ' 
23700                 | ' '' Return key event from buffer if there is one
23700                 | ' PUB get_key() : r | tail
23700                 | _usbnew_spin2_get_key
23700                 | '   tail := keyq_tail
23700     0F 00 00 FF 
23704     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
23708     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2370c                 | '   if keyq_head == tail
2370c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23710     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
23714     0F 00 00 FF 
23718     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2371c     00 03 0A F2 | 	cmp	_var02, _var01 wz
23720                 | '     return 0 ' No event
23720     00 FA 05 A6 |  if_e	mov	result1, #0
23724     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
23728                 | '   r := keyq_data[tail]
23728     00 03 02 F6 | 	mov	_var02, _var01
2372c     02 02 66 F0 | 	shl	_var02, #2
23730     0F 00 00 FF 
23734     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
23738     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2373c     01 FB 01 FB | 	rdlong	result1, _var02
23740                 | '   if ++tail == KEYQUEUE_SIZE
23740     01 00 06 F1 | 	add	_var01, #1
23744     80 00 0E F2 | 	cmp	_var01, #128 wz
23748                 | '     tail := 0
23748     00 00 06 A6 |  if_e	mov	_var01, #0
2374c                 | '   keyq_tail := tail
2374c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23750     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
23754     0F 00 00 FF 
23758     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
2375c                 | _usbnew_spin2_get_key_ret
2375c     2D 00 64 FD | 	ret
23760                 | 
23760                 | ' 
23760                 | ' '' Emulate mouse movement
23760                 | ' PUB mouse_move(x,y)
23760                 | _usbnew_spin2_mouse_move
23760     02 4A 05 F6 | 	mov	COUNT_, #2
23764     A8 00 A0 FD | 	call	#pushregs_
23768     09 27 02 F6 | 	mov	local01, arg01
2376c     0A 29 02 F6 | 	mov	local02, arg02
23770                 | '   mouse_lock := 1
23770     14 00 00 FF 
23774     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
23778     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2377c     14 00 00 FF 
23780     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
23784                 | '   waitus(2) ' hope driver is now done
23784     02 12 06 F6 | 	mov	arg01, #2
23788     E8 0A B0 FD | 	call	#__system___waitus
2378c                 | '   mouse_xacc := x
2378c     14 00 00 FF 
23790     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
23794     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
23798                 | '   mouse_yacc := y
23798     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2379c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
237a0                 | '   if mouse_outptr
237a0     04 00 00 FF 
237a4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
237a8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
237ac     0F 00 00 FF 
237b0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
237b4     24 00 90 AD |  if_e	jmp	#LR__2890
237b8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
237b8     10 28 66 F0 | 	shl	local02, #16
237bc     13 27 32 F9 | 	getword	local01, local01, #0
237c0     13 29 42 F5 | 	or	local02, local01
237c4     0F 00 00 FF 
237c8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
237cc     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
237d0     0F 00 00 FF 
237d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
237d8     13 29 62 FC | 	wrlong	local02, local01
237dc                 | LR__2890
237dc                 | '   mouse_lock := 0
237dc     14 00 00 FF 
237e0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
237e4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
237e8     14 00 00 FF 
237ec     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
237f0     A7 F0 03 F6 | 	mov	ptra, fp
237f4     B2 00 A0 FD | 	call	#popregs_
237f8                 | _usbnew_spin2_mouse_move_ret
237f8     2D 00 64 FD | 	ret
237fc                 | 
237fc                 | '     '' Set HAVE_HIDPAD to enable.
237fc                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
237fc                 | ' 
237fc                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
237fc                 | ' PUB hidpad_id(dev) : r
237fc                 | _usbnew_spin2_hidpad_id
237fc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
237fc     13 00 00 FF 
23800     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
23804     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23808     09 01 02 F6 | 	mov	_var01, arg01
2380c     03 00 66 F0 | 	shl	_var01, #3
23810     09 01 82 F1 | 	sub	_var01, arg01
23814     02 00 66 F0 | 	shl	_var01, #2
23818     00 FB 01 F1 | 	add	result1, _var01
2381c     FD FA 01 FB | 	rdlong	result1, result1
23820     13 00 00 FF 
23824     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
23828                 | _usbnew_spin2_hidpad_id_ret
23828     2D 00 64 FD | 	ret
2382c                 | 
2382c                 | ' 
2382c                 | ' '' Get all button states for a device
2382c                 | ' PUB hidpad_buttons(dev) : r 
2382c                 | _usbnew_spin2_hidpad_buttons
2382c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2382c     13 00 00 FF 
23830     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
23834     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23838     09 01 02 F6 | 	mov	_var01, arg01
2383c     03 00 66 F0 | 	shl	_var01, #3
23840     09 01 82 F1 | 	sub	_var01, arg01
23844     02 00 66 F0 | 	shl	_var01, #2
23848     00 FB 01 F1 | 	add	result1, _var01
2384c     14 FA 05 F1 | 	add	result1, #20
23850     FD FA 01 FB | 	rdlong	result1, result1
23854     13 00 00 FF 
23858     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2385c                 | _usbnew_spin2_hidpad_buttons_ret
2385c     2D 00 64 FD | 	ret
23860                 | 
23860                 | ' 
23860                 | ' '' Get state of an axis (normalized between -32768 and 32767)
23860                 | ' PUB hidpad_axis(dev,axnum) : r
23860                 | _usbnew_spin2_hidpad_axis
23860                 | '   if axnum +>= 6
23860     06 14 16 F2 | 	cmp	arg02, #6 wc
23864                 | '     return 0
23864     00 FA 05 36 |  if_ae	mov	result1, #0
23868     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2386c                 | '   else 
2386c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2386c     13 00 00 FF 
23870     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
23874     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23878     09 01 02 F6 | 	mov	_var01, arg01
2387c     03 00 66 F0 | 	shl	_var01, #3
23880     09 01 82 F1 | 	sub	_var01, arg01
23884     02 00 66 F0 | 	shl	_var01, #2
23888     00 FB 01 F1 | 	add	result1, _var01
2388c     04 00 06 F6 | 	mov	_var01, #4
23890     0A 01 02 F1 | 	add	_var01, arg02
23894     01 00 66 F0 | 	shl	_var01, #1
23898     FD 00 02 F1 | 	add	_var01, result1
2389c     00 FB E1 FA | 	rdword	result1, _var01
238a0     0F FA 65 F7 | 	signx	result1, #15
238a4     13 00 00 FF 
238a8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
238ac                 | _usbnew_spin2_hidpad_axis_ret
238ac     2D 00 64 FD | 	ret
238b0                 | 
238b0                 | ' 
238b0                 | ' 
238b0                 | ' '--------------------------------------------------------------
238b0                 | ' '---------- Init the variables, start the cog. ----------------
238b0                 | ' '--------------------------------------------------------------
238b0                 | ' 
238b0                 | ' pub start(mbox,scope,cache) :cog,base | iii
238b0                 | _audio096_spin2_start
238b0     04 4A 05 F6 | 	mov	COUNT_, #4
238b4     A8 00 A0 FD | 	call	#pushregs_
238b8     09 27 02 F6 | 	mov	local01, arg01
238bc                 | ' 
238bc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
238bc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
238bc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
238bc                 | ' 
238bc                 | ' mailboxaddr:=mbox 
238bc     F2 26 62 FC | 	wrlong	local01, objptr
238c0                 | ' scope_ptr:=scope
238c0     04 E4 05 F1 | 	add	objptr, #4
238c4     F2 14 62 FC | 	wrlong	arg02, objptr
238c8                 | ' cache_ptr:=cache
238c8     04 E4 05 F1 | 	add	objptr, #4
238cc     F2 16 62 FC | 	wrlong	arg03, objptr
238d0                 | ' base:=@channel1[0]
238d0     04 E4 05 F1 | 	add	objptr, #4
238d4     F2 28 02 F6 | 	mov	local02, objptr
238d8                 | ' long[$40]:=mbox
238d8     40 26 66 FC | 	wrlong	local01, #64
238dc                 | ' repeat iii from 0 to 7
238dc     00 2A 06 F6 | 	mov	local03, #0
238e0     02 00 00 FF 
238e4     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
238e8     0C E4 85 F1 | 	sub	objptr, #12
238ec     97 BC 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
238f0                 | LR__2900
238f0                 | '   long[base+64*iii]:=0
238f0     14 27 02 F6 | 	mov	local01, local02
238f4     15 FD 01 F6 | 	mov	result2, local03
238f8     06 FC 65 F0 | 	shl	result2, #6
238fc     FE 26 02 F1 | 	add	local01, result2
23900     13 01 68 FC | 	wrlong	#0, local01
23904                 | '   long[base+64*iii+4]:=0
23904     14 27 02 F6 | 	mov	local01, local02
23908     15 FD 01 F6 | 	mov	result2, local03
2390c     06 FC 65 F0 | 	shl	result2, #6
23910     FE 26 02 F1 | 	add	local01, result2
23914     04 26 06 F1 | 	add	local01, #4
23918     13 01 68 FC | 	wrlong	#0, local01
2391c                 | '   long[base+64*iii+12]:=0
2391c     14 2D 02 F6 | 	mov	local04, local02
23920     15 27 02 F6 | 	mov	local01, local03
23924     06 26 66 F0 | 	shl	local01, #6
23928     13 2D 02 F1 | 	add	local04, local01
2392c     0C 2C 06 F1 | 	add	local04, #12
23930     16 01 68 FC | 	wrlong	#0, local04
23934                 | '   long[base+64*iii+16]:=2 
23934     14 2D 02 F6 | 	mov	local04, local02
23938     15 27 02 F6 | 	mov	local01, local03
2393c     06 26 66 F0 | 	shl	local01, #6
23940     13 2D 02 F1 | 	add	local04, local01
23944     10 2C 06 F1 | 	add	local04, #16
23948     16 05 68 FC | 	wrlong	#2, local04
2394c                 | '   word[base+64*iii+20]:=0
2394c     14 2D 02 F6 | 	mov	local04, local02
23950     15 27 02 F6 | 	mov	local01, local03
23954     06 26 66 F0 | 	shl	local01, #6
23958     13 2D 02 F1 | 	add	local04, local01
2395c     14 2C 06 F1 | 	add	local04, #20
23960     16 01 58 FC | 	wrword	#0, local04
23964                 | '   word[base+64*iii+22]:=8192
23964     14 2D 02 F6 | 	mov	local04, local02
23968     15 27 02 F6 | 	mov	local01, local03
2396c     06 26 66 F0 | 	shl	local01, #6
23970     13 2D 02 F1 | 	add	local04, local01
23974     16 2C 06 F1 | 	add	local04, #22
23978     10 00 80 FF 
2397c     16 01 58 FC | 	wrword	##8192, local04
23980                 | '   word[base+64*iii+24]:=4000+2*iii
23980     15 2D 02 F6 | 	mov	local04, local03
23984     01 2C 66 F0 | 	shl	local04, #1
23988     07 00 00 FF 
2398c     A0 27 06 F6 | 	mov	local01, ##4000
23990     16 27 02 F1 | 	add	local01, local04
23994     14 2D 02 F6 | 	mov	local04, local02
23998     15 FD 01 F6 | 	mov	result2, local03
2399c     06 FC 65 F0 | 	shl	result2, #6
239a0     FE 2C 02 F1 | 	add	local04, result2
239a4     18 2C 06 F1 | 	add	local04, #24
239a8     16 27 52 FC | 	wrword	local01, local04
239ac                 | '   word[base+64*iii+26]:=2
239ac     14 2D 02 F6 | 	mov	local04, local02
239b0     15 27 02 F6 | 	mov	local01, local03
239b4     06 26 66 F0 | 	shl	local01, #6
239b8     13 2D 02 F1 | 	add	local04, local01
239bc     1A 2C 06 F1 | 	add	local04, #26
239c0     16 05 58 FC | 	wrword	#2, local04
239c4                 | '   long [base+64*iii+8]:=@null | $C0000000
239c4     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
239c8     3E 26 26 F4 | 	bith	local01, #62
239cc     14 2D 02 F6 | 	mov	local04, local02
239d0     15 17 02 F6 | 	mov	arg03, local03
239d4     06 16 66 F0 | 	shl	arg03, #6
239d8     0B 2D 02 F1 | 	add	local04, arg03
239dc     08 2C 06 F1 | 	add	local04, #8
239e0     16 27 62 FC | 	wrlong	local01, local04
239e4                 | '   long[base+64*iii+32]:=0
239e4     14 2D 02 F6 | 	mov	local04, local02
239e8     15 27 02 F6 | 	mov	local01, local03
239ec     06 26 66 F0 | 	shl	local01, #6
239f0     13 2D 02 F1 | 	add	local04, local01
239f4     20 2C 06 F1 | 	add	local04, #32
239f8     16 01 68 FC | 	wrlong	#0, local04
239fc                 | '   long[base+64*iii+36]:=0
239fc     14 2D 02 F6 | 	mov	local04, local02
23a00     15 27 02 F6 | 	mov	local01, local03
23a04     06 26 66 F0 | 	shl	local01, #6
23a08     13 2D 02 F1 | 	add	local04, local01
23a0c     24 2C 06 F1 | 	add	local04, #36
23a10     16 01 68 FC | 	wrlong	#0, local04
23a14                 | '   long[base+64*iii+40]:=0
23a14     14 2D 02 F6 | 	mov	local04, local02
23a18     15 27 02 F6 | 	mov	local01, local03
23a1c     06 26 66 F0 | 	shl	local01, #6
23a20     13 2D 02 F1 | 	add	local04, local01
23a24     28 2C 06 F1 | 	add	local04, #40
23a28     16 01 68 FC | 	wrlong	#0, local04
23a2c                 | '   long[base+64*iii+44]:=0
23a2c     14 2D 02 F6 | 	mov	local04, local02
23a30     15 27 02 F6 | 	mov	local01, local03
23a34     06 26 66 F0 | 	shl	local01, #6
23a38     13 2D 02 F1 | 	add	local04, local01
23a3c     2C 2C 06 F1 | 	add	local04, #44
23a40     16 01 68 FC | 	wrlong	#0, local04
23a44                 | '   long[base+64*iii+28]:=0
23a44     14 2D 02 F6 | 	mov	local04, local02
23a48     15 27 02 F6 | 	mov	local01, local03
23a4c     06 26 66 F0 | 	shl	local01, #6
23a50     13 2D 02 F1 | 	add	local04, local01
23a54     1C 2C 06 F1 | 	add	local04, #28
23a58     16 01 68 FC | 	wrlong	#0, local04
23a5c     01 2A 06 F1 | 	add	local03, #1
23a60     08 2A 56 F2 | 	cmps	local03, #8 wc
23a64     88 FE 9F CD |  if_b	jmp	#LR__2900
23a68                 | LR__2901
23a68     02 00 00 FF 
23a6c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
23a70                 | '   
23a70                 | ' cog:=coginit(16,@audio,@mailboxaddr)
23a70     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
23a74     F2 16 02 F6 | 	mov	arg03, objptr
23a78     10 2C 06 F6 | 	mov	local04, #16
23a7c     28 16 62 FD | 	setq	arg03
23a80     0A 2D F2 FC | 	coginit	local04, arg02 wc
23a84     01 2C 66 C6 |  if_b	neg	local04, #1
23a88                 | ' waitms(100)
23a88     64 12 06 F6 | 	mov	arg01, #100
23a8c     78 07 B0 FD | 	call	#__system___waitms
23a90                 | ' return cog,base
23a90     14 FD 01 F6 | 	mov	result2, local02
23a94     16 FB 01 F6 | 	mov	result1, local04
23a98     A7 F0 03 F6 | 	mov	ptra, fp
23a9c     B2 00 A0 FD | 	call	#popregs_
23aa0                 | _audio096_spin2_start_ret
23aa0     2D 00 64 FD | 	ret
23aa4                 | 
23aa4                 | ' 
23aa4                 | ' ' a simple play procedure to not poke everything. 
23aa4                 | ' 
23aa4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
23aa4                 | _audio096_spin2_play
23aa4     0C E4 05 F1 | 	add	objptr, #12
23aa8     F2 00 02 F6 | 	mov	_var01, objptr
23aac     06 12 66 F0 | 	shl	arg01, #6
23ab0     09 01 02 F1 | 	add	_var01, arg01
23ab4     00 13 02 F6 | 	mov	arg01, _var01
23ab8     0C 12 06 F1 | 	add	arg01, #12
23abc     09 1B 62 FC | 	wrlong	arg05, arg01
23ac0     00 1C 56 F2 | 	cmps	arg06, #0 wc
23ac4     00 13 02 36 |  if_ae	mov	arg01, _var01
23ac8     10 12 06 31 |  if_ae	add	arg01, #16
23acc     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
23ad0     02 1A 06 C1 |  if_b	add	arg05, #2
23ad4     00 13 02 C6 |  if_b	mov	arg01, _var01
23ad8     10 12 06 C1 |  if_b	add	arg01, #16
23adc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
23ae0     0B 13 52 F6 | 	abs	arg01, arg03 wc
23ae4     0F 1B 80 FF 
23ae8     09 1F 1A FD | 	qdiv	##3546895, arg01
23aec                 | ' 
23aec                 | ' base2:=@channel1[0]+64*channel
23aec                 | ' 
23aec                 | ' 
23aec                 | ' long[base2+12]:= len
23aec                 | ' if loop >=0 
23aec                 | '   long[base2+16]:= loop
23aec     0C E4 85 F1 | 	sub	objptr, #12
23af0                 | ' else
23af0                 | '   long[base2+16]:= len+2
23af0                 | ' word[base2+20]:=vol
23af0     00 13 02 F6 | 	mov	arg01, _var01
23af4     14 12 06 F1 | 	add	arg01, #20
23af8     09 19 52 FC | 	wrword	arg04, arg01
23afc                 | ' word[base2+24]:= 3546895/splfreq 
23afc     00 19 02 F6 | 	mov	arg04, _var01
23b00     18 18 06 F1 | 	add	arg04, #24
23b04                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
23b04                 | ' long[base2+28]:=$40000000    
23b04                 | ' long[base2+32]:=0    
23b04                 | ' long[base2+36]:=0    
23b04                 | ' long[base2+40]:=0    
23b04                 | ' long[base2+44]:=0    
23b04                 | ' long[base2+8]:=sample+$C0000000     
23b04     00 00 60 FF 
23b08     00 14 06 F1 | 	add	arg02, ##-1073741824
23b0c     18 12 62 FD | 	getqx	arg01
23b10     09 13 82 F6 | 	negc	arg01, arg01
23b14     0C 13 52 FC | 	wrword	arg01, arg04
23b18     00 13 02 F6 | 	mov	arg01, _var01
23b1c     1A 12 06 F1 | 	add	arg01, #26
23b20     09 01 5A FC | 	wrword	#256, arg01
23b24     00 13 02 F6 | 	mov	arg01, _var01
23b28     1C 12 06 F1 | 	add	arg01, #28
23b2c     00 00 A0 FF 
23b30     09 01 68 FC | 	wrlong	##1073741824, arg01
23b34     00 13 02 F6 | 	mov	arg01, _var01
23b38     20 12 06 F1 | 	add	arg01, #32
23b3c     09 01 68 FC | 	wrlong	#0, arg01
23b40     00 13 02 F6 | 	mov	arg01, _var01
23b44     24 12 06 F1 | 	add	arg01, #36
23b48     09 01 68 FC | 	wrlong	#0, arg01
23b4c     00 13 02 F6 | 	mov	arg01, _var01
23b50     28 12 06 F1 | 	add	arg01, #40
23b54     09 01 68 FC | 	wrlong	#0, arg01
23b58     00 13 02 F6 | 	mov	arg01, _var01
23b5c     2C 12 06 F1 | 	add	arg01, #44
23b60     09 01 68 FC | 	wrlong	#0, arg01
23b64     08 00 06 F1 | 	add	_var01, #8
23b68     00 15 62 FC | 	wrlong	arg02, _var01
23b6c                 | _audio096_spin2_play_ret
23b6c     2D 00 64 FD | 	ret
23b70                 | 
23b70                 | ' 
23b70                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
23b70                 | _audio096_spin2_play8
23b70                 | ' 
23b70                 | ' base2:=@channel1[0]+64*channel
23b70     0C E4 05 F1 | 	add	objptr, #12
23b74     F2 00 02 F6 | 	mov	_var01, objptr
23b78     06 12 66 F0 | 	shl	arg01, #6
23b7c     09 01 02 F1 | 	add	_var01, arg01
23b80                 | ' long[base2]:=0
23b80     00 01 68 FC | 	wrlong	#0, _var01
23b84                 | ' long[base2+8]:=sample+$40000000 
23b84     00 00 20 FF 
23b88     00 14 06 F1 | 	add	arg02, ##1073741824
23b8c     00 13 02 F6 | 	mov	arg01, _var01
23b90     08 12 06 F1 | 	add	arg01, #8
23b94     09 15 62 FC | 	wrlong	arg02, arg01
23b98                 | ' if loop>=0
23b98     00 1C 56 F2 | 	cmps	arg06, #0 wc
23b9c     0C E4 85 F1 | 	sub	objptr, #12
23ba0     1C 00 90 CD |  if_b	jmp	#LR__2910
23ba4                 | '   long[base2+12]:=loop
23ba4     00 15 02 F6 | 	mov	arg02, _var01
23ba8     0C 14 06 F1 | 	add	arg02, #12
23bac     0A 1D 62 FC | 	wrlong	arg06, arg02
23bb0                 | '   long[base2+16]:= len
23bb0     00 1D 02 F6 | 	mov	arg06, _var01
23bb4     10 1C 06 F1 | 	add	arg06, #16
23bb8     0E 1B 62 FC | 	wrlong	arg05, arg06
23bbc     1C 00 90 FD | 	jmp	#LR__2911
23bc0                 | LR__2910
23bc0                 | ' else
23bc0                 | '   long[base2+12]:= len
23bc0     00 1D 02 F6 | 	mov	arg06, _var01
23bc4     0C 1C 06 F1 | 	add	arg06, #12
23bc8     0E 1B 62 FC | 	wrlong	arg05, arg06
23bcc                 | '   long[base2+16]:= len+1
23bcc     01 1A 06 F1 | 	add	arg05, #1
23bd0     00 13 02 F6 | 	mov	arg01, _var01
23bd4     10 12 06 F1 | 	add	arg01, #16
23bd8     09 1B 62 FC | 	wrlong	arg05, arg01
23bdc                 | LR__2911
23bdc     0B 17 52 F6 | 	abs	arg03, arg03 wc
23be0     0F 1B 80 FF 
23be4     0B 1F 1A FD | 	qdiv	##3546895, arg03
23be8                 | ' word[base2+20]:=vol
23be8     00 17 02 F6 | 	mov	arg03, _var01
23bec     14 16 06 F1 | 	add	arg03, #20
23bf0     0B 19 52 FC | 	wrword	arg04, arg03
23bf4                 | ' word[base2+24]:= 3546895 /splfreq 
23bf4     00 13 02 F6 | 	mov	arg01, _var01
23bf8     18 12 06 F1 | 	add	arg01, #24
23bfc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
23bfc     1A 00 06 F1 | 	add	_var01, #26
23c00     18 18 62 FD | 	getqx	arg04
23c04     0C 19 82 F6 | 	negc	arg04, arg04
23c08     09 19 52 FC | 	wrword	arg04, arg01
23c0c     00 01 5A FC | 	wrword	#256, _var01
23c10                 | _audio096_spin2_play8_ret
23c10     2D 00 64 FD | 	ret
23c14                 | 
23c14                 | ' 'long[base2+28]:=$40000000
23c14                 | ' 
23c14                 | '     
23c14                 | ' pub stop(channel) 'silence it
23c14                 | _audio096_spin2_stop
23c14                 | ' 
23c14                 | ' word[@channel1[0]+64*channel+20]:=0
23c14     0C E4 05 F1 | 	add	objptr, #12
23c18     F2 00 02 F6 | 	mov	_var01, objptr
23c1c     09 03 02 F6 | 	mov	_var02, arg01
23c20     06 02 66 F0 | 	shl	_var02, #6
23c24     01 01 02 F1 | 	add	_var01, _var02
23c28     14 00 06 F1 | 	add	_var01, #20
23c2c     00 01 58 FC | 	wrword	#0, _var01
23c30                 | ' word[@channel1[0]+64*channel+20]:=0
23c30     F2 00 02 F6 | 	mov	_var01, objptr
23c34     06 12 66 F0 | 	shl	arg01, #6
23c38     09 01 02 F1 | 	add	_var01, arg01
23c3c     14 00 06 F1 | 	add	_var01, #20
23c40     00 01 58 FC | 	wrword	#0, _var01
23c44     0C E4 85 F1 | 	sub	objptr, #12
23c48                 | _audio096_spin2_stop_ret
23c48     2D 00 64 FD | 	ret
23c4c                 | hubexit
23c4c     81 00 80 FD | 	jmp	#cogexit
23c50                 | 
23c50                 | __system___setbaud
23c50     14 88 06 FB | 	rdlong	muldiva_, #20
23c54     09 8B 02 F6 | 	mov	muldivb_, arg01
23c58     BA 00 A0 FD | 	call	#divide_
23c5c     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
23c60                 | LR__2920
23c60     3E FA 9D FA | 	rdpin	result1, #62 wc
23c64     FE FC A1 F1 | 	subx	result2, result2
23c68     F4 FF 9F CD |  if_b	jmp	#LR__2920
23c6c                 | LR__2921
23c6c     40 7C 64 FD | 	dirl	#62
23c70     40 7E 64 FD | 	dirl	#63
23c74     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
23c78     10 8A 66 F0 | 	shl	muldivb_, #16
23c7c     07 14 06 F6 | 	mov	arg02, #7
23c80     45 15 02 F1 | 	add	arg02, muldivb_
23c84     3E F8 0C FC | 	wrpin	#124, #62
23c88     3E 14 16 FC | 	wxpin	arg02, #62
23c8c     3F 7C 0C FC | 	wrpin	#62, #63
23c90     14 14 06 F1 | 	add	arg02, #20
23c94     3F 14 16 FC | 	wxpin	arg02, #63
23c98     41 7C 64 FD | 	dirh	#62
23c9c     41 7E 64 FD | 	dirh	#63
23ca0                 | __system___setbaud_ret
23ca0     2D 00 64 FD | 	ret
23ca4                 | 
23ca4                 | __system___txraw
23ca4     01 4A 05 F6 | 	mov	COUNT_, #1
23ca8     A8 00 A0 FD | 	call	#pushregs_
23cac     09 27 02 F6 | 	mov	local01, arg01
23cb0     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
23cb4                 | LR__2930
23cb4     3E FA 9D FA | 	rdpin	result1, #62 wc
23cb8     FE FC A1 F1 | 	subx	result2, result2
23cbc     F4 FF 9F CD |  if_b	jmp	#LR__2930
23cc0                 | LR__2931
23cc0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
23cc4     C2 01 00 AF 
23cc8     00 12 06 A6 |  if_e	mov	arg01, ##230400
23ccc     80 FF BF AD |  if_e	call	#__system___setbaud
23cd0     58 7C 64 FD | 	drvl	#62
23cd4     3E 26 26 FC | 	wypin	local01, #62
23cd8     01 FA 05 F6 | 	mov	result1, #1
23cdc     A7 F0 03 F6 | 	mov	ptra, fp
23ce0     B2 00 A0 FD | 	call	#popregs_
23ce4                 | __system___txraw_ret
23ce4     2D 00 64 FD | 	ret
23ce8                 | 
23ce8                 | __system___rxraw
23ce8     0D 4A 05 F6 | 	mov	COUNT_, #13
23cec     A8 00 A0 FD | 	call	#pushregs_
23cf0     09 27 02 F6 | 	mov	local01, arg01
23cf4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
23cf8     C2 01 00 AF 
23cfc     00 12 06 A6 |  if_e	mov	arg01, ##230400
23d00     4C FF BF AD |  if_e	call	#__system___setbaud
23d04     00 26 0E F2 | 	cmp	local01, #0 wz
23d08     20 00 90 AD |  if_e	jmp	#LR__2940
23d0c     14 2A 06 FB | 	rdlong	local03, #20
23d10     0A 2A 46 F0 | 	shr	local03, #10
23d14     15 27 02 FD | 	qmul	local01, local03
23d18     1A FA 61 FD | 	getct	result1
23d1c     18 2C 62 FD | 	getqx	local04
23d20     16 FB 01 F1 | 	add	result1, local04
23d24     FD 2E 02 F6 | 	mov	local05, result1
23d28     04 00 90 FD | 	jmp	#LR__2941
23d2c                 | LR__2940
23d2c     00 2E 06 F6 | 	mov	local05, #0
23d30                 | LR__2941
23d30     01 30 66 F6 | 	neg	local06, #1
23d34     3F 32 06 F6 | 	mov	local07, #63
23d38     00 34 06 F6 | 	mov	local08, #0
23d3c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23d40     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
23d44     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
23d48                 | LR__2942
23d48     08 36 16 F4 | 	testb	local09, #8 wc
23d4c     09 36 76 F4 | 	testbn	local09, #9 andc
23d50     0A 36 46 F0 | 	shr	local09, #10
23d54     01 34 06 C6 |  if_b	mov	local08, #1
23d58     40 7E 6C 3D |  if_ae	testp	#63 wz
23d5c     01 34 06 26 |  if_nc_and_z	mov	local08, #1
23d60     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
23d64     04 36 46 20 |  if_nc_and_z	shr	local09, #4
23d68                 | LR__2943
23d68     00 28 06 F6 | 	mov	local02, #0
23d6c     00 34 0E F2 | 	cmp	local08, #0 wz
23d70     01 28 66 56 |  if_ne	neg	local02, #1
23d74     00 38 06 F6 | 	mov	local10, #0
23d78     00 2A 06 F6 | 	mov	local03, #0
23d7c     00 26 0E F2 | 	cmp	local01, #0 wz
23d80     01 2A 66 56 |  if_ne	neg	local03, #1
23d84     00 2C 06 F6 | 	mov	local04, #0
23d88     00 3A 06 F6 | 	mov	local11, #0
23d8c     17 3D 02 F6 | 	mov	local12, local05
23d90     1A FA 61 FD | 	getct	result1
23d94     FD 3E 02 F6 | 	mov	local13, result1
23d98     1F 3D 82 F1 | 	sub	local12, local13
23d9c     00 3C 56 F2 | 	cmps	local12, #0 wc
23da0     00 3A 26 C6 |  if_b	not	local11, #0
23da4     00 3A 0E F2 | 	cmp	local11, #0 wz
23da8     00 2C 26 56 |  if_ne	not	local04, #0
23dac     16 2B CA F7 | 	test	local03, local04 wz
23db0     00 38 26 56 |  if_ne	not	local10, #0
23db4     1C 29 4A F5 | 	or	local02, local10 wz
23db8     8C FF 9F AD |  if_e	jmp	#LR__2942
23dbc     00 34 0E F2 | 	cmp	local08, #0 wz
23dc0     1B 31 02 56 |  if_ne	mov	local06, local09
23dc4     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
23dc8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23dcc     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
23dd0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
23dd4     18 FB 01 F6 | 	mov	result1, local06
23dd8     A7 F0 03 F6 | 	mov	ptra, fp
23ddc     B2 00 A0 FD | 	call	#popregs_
23de0                 | __system___rxraw_ret
23de0     2D 00 64 FD | 	ret
23de4                 | 
23de4                 | __system___getus
23de4     1A FC 71 FD | 	getct	result2 wc
23de8     1A 00 62 FD | 	getct	_var01
23dec     10 E6 05 F1 | 	add	ptr___system__dat__, #16
23df0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
23df4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
23df8     20 00 90 5D |  if_ne	jmp	#LR__2950
23dfc     14 02 06 FB | 	rdlong	_var02, #20
23e00     A1 07 00 FF 
23e04     40 02 16 FD | 	qdiv	_var02, ##1000000
23e08     10 E6 05 F1 | 	add	ptr___system__dat__, #16
23e0c     18 FA 61 FD | 	getqx	result1
23e10     FD 02 02 F6 | 	mov	_var02, result1
23e14     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
23e18     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
23e1c                 | LR__2950
23e1c     01 FD 11 FD | 	qdiv	result2, _var02
23e20     19 FC 61 FD | 	getqy	result2
23e24     28 FC 61 FD | 	setq	result2
23e28     01 01 12 FD | 	qdiv	_var01, _var02
23e2c     18 FA 61 FD | 	getqx	result1
23e30                 | __system___getus_ret
23e30     2D 00 64 FD | 	ret
23e34                 | 
23e34                 | __system____builtin_memmove
23e34     09 01 02 F6 | 	mov	_var01, arg01
23e38     0A 13 52 F2 | 	cmps	arg01, arg02 wc
23e3c     10 00 90 CD |  if_b	jmp	#LR__2960
23e40     0A 03 02 F6 | 	mov	_var02, arg02
23e44     0B 03 02 F1 | 	add	_var02, arg03
23e48     01 13 52 F2 | 	cmps	arg01, _var02 wc
23e4c     48 00 90 CD |  if_b	jmp	#LR__2966
23e50                 | LR__2960
23e50     0B 05 02 F6 | 	mov	_var03, arg03
23e54     02 04 4E F0 | 	shr	_var03, #2 wz
23e58     18 00 90 AD |  if_e	jmp	#LR__2965
23e5c     97 0A 48 FB | 	callpa	#(@LR__2963-@LR__2961)>>2,fcache_load_ptr_
23e60                 | LR__2961
23e60     02 09 D8 FC | 	rep	@LR__2964, _var03
23e64                 | LR__2962
23e64     0A 05 02 FB | 	rdlong	_var03, arg02
23e68     09 05 62 FC | 	wrlong	_var03, arg01
23e6c     04 12 06 F1 | 	add	arg01, #4
23e70     04 14 06 F1 | 	add	arg02, #4
23e74                 | LR__2963
23e74                 | LR__2964
23e74                 | LR__2965
23e74     02 16 CE F7 | 	test	arg03, #2 wz
23e78     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
23e7c     09 03 52 5C |  if_ne	wrword	_var02, arg01
23e80     02 12 06 51 |  if_ne	add	arg01, #2
23e84     02 14 06 51 |  if_ne	add	arg02, #2
23e88     01 16 CE F7 | 	test	arg03, #1 wz
23e8c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
23e90     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
23e94     28 00 90 FD | 	jmp	#LR__2972
23e98                 | LR__2966
23e98     0B 13 02 F1 | 	add	arg01, arg03
23e9c     0B 15 02 F1 | 	add	arg02, arg03
23ea0     0B 07 0A F6 | 	mov	_var04, arg03 wz
23ea4     18 00 90 AD |  if_e	jmp	#LR__2971
23ea8     97 0A 48 FB | 	callpa	#(@LR__2969-@LR__2967)>>2,fcache_load_ptr_
23eac                 | LR__2967
23eac     03 09 D8 FC | 	rep	@LR__2970, _var04
23eb0                 | LR__2968
23eb0     01 12 86 F1 | 	sub	arg01, #1
23eb4     01 14 86 F1 | 	sub	arg02, #1
23eb8     0A 03 C2 FA | 	rdbyte	_var02, arg02
23ebc     09 03 42 FC | 	wrbyte	_var02, arg01
23ec0                 | LR__2969
23ec0                 | LR__2970
23ec0                 | LR__2971
23ec0                 | LR__2972
23ec0     00 FB 01 F6 | 	mov	result1, _var01
23ec4                 | __system____builtin_memmove_ret
23ec4     2D 00 64 FD | 	ret
23ec8                 | 
23ec8                 | __system____builtin_strcpy
23ec8     09 01 02 F6 | 	mov	_var01, arg01
23ecc     97 0A 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
23ed0                 | LR__2980
23ed0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
23ed4     09 FB 41 FC | 	wrbyte	result1, arg01
23ed8     01 14 06 F1 | 	add	arg02, #1
23edc     01 12 06 F1 | 	add	arg01, #1
23ee0     EC FF 9F 5D |  if_ne	jmp	#LR__2980
23ee4                 | LR__2981
23ee4     00 FB 01 F6 | 	mov	result1, _var01
23ee8                 | __system____builtin_strcpy_ret
23ee8     2D 00 64 FD | 	ret
23eec                 | 
23eec                 | __system____topofstack
23eec     00 4A 05 F6 | 	mov	COUNT_, #0
23ef0     A8 00 A0 FD | 	call	#pushregs_
23ef4     08 F0 07 F1 | 	add	ptra, #8
23ef8     04 4E 05 F1 | 	add	fp, #4
23efc     A7 12 62 FC | 	wrlong	arg01, fp
23f00     A7 FA 01 F6 | 	mov	result1, fp
23f04     04 4E 85 F1 | 	sub	fp, #4
23f08     A7 F0 03 F6 | 	mov	ptra, fp
23f0c     B2 00 A0 FD | 	call	#popregs_
23f10                 | __system____topofstack_ret
23f10     2D 00 64 FD | 	ret
23f14                 | 
23f14                 | __system___lockmem
23f14     00 FA 05 F6 | 	mov	result1, #0
23f18     01 FA 61 FD | 	cogid	result1
23f1c     00 FB 05 F1 | 	add	result1, #256
23f20                 | LR__2990
23f20     09 01 0A FB | 	rdlong	_var01, arg01 wz
23f24     09 FB 61 AC |  if_e	wrlong	result1, arg01
23f28     09 01 02 AB |  if_e	rdlong	_var01, arg01
23f2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
23f30     FD 00 0A F2 | 	cmp	_var01, result1 wz
23f34     E8 FF 9F 5D |  if_ne	jmp	#LR__2990
23f38                 | __system___lockmem_ret
23f38     2D 00 64 FD | 	ret
23f3c                 | 
23f3c                 | __system___string_cmp
23f3c     97 14 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
23f40                 | LR__3000
23f40     09 01 C2 FA | 	rdbyte	_var01, arg01
23f44     0A 03 C2 FA | 	rdbyte	_var02, arg02
23f48     00 05 02 F6 | 	mov	_var03, _var01
23f4c     01 05 8A F1 | 	sub	_var03, _var02 wz
23f50     01 12 06 F1 | 	add	arg01, #1
23f54     01 14 06 F1 | 	add	arg02, #1
23f58     0C 00 90 5D |  if_ne	jmp	#LR__3002
23f5c     00 00 0E F2 | 	cmp	_var01, #0 wz
23f60     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
23f64     D8 FF 9F 5D |  if_ne	jmp	#LR__3000
23f68                 | LR__3001
23f68                 | LR__3002
23f68     02 FB 01 F6 | 	mov	result1, _var03
23f6c                 | __system___string_cmp_ret
23f6c     2D 00 64 FD | 	ret
23f70                 | 
23f70                 | __system___string_concat
23f70     05 4A 05 F6 | 	mov	COUNT_, #5
23f74     A8 00 A0 FD | 	call	#pushregs_
23f78     09 27 02 F6 | 	mov	local01, arg01
23f7c     0A 29 02 F6 | 	mov	local02, arg02
23f80     13 13 02 F6 | 	mov	arg01, local01
23f84     09 2B 02 F6 | 	mov	local03, arg01
23f88     97 06 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
23f8c                 | LR__3010
23f8c     15 FB C9 FA | 	rdbyte	result1, local03 wz
23f90     01 2A 06 51 |  if_ne	add	local03, #1
23f94     F4 FF 9F 5D |  if_ne	jmp	#LR__3010
23f98                 | LR__3011
23f98     09 2B 82 F1 | 	sub	local03, arg01
23f9c     15 2D 02 F6 | 	mov	local04, local03
23fa0     14 13 02 F6 | 	mov	arg01, local02
23fa4     09 2B 02 F6 | 	mov	local03, arg01
23fa8     97 06 48 FB | 	callpa	#(@LR__3013-@LR__3012)>>2,fcache_load_ptr_
23fac                 | LR__3012
23fac     15 FB C9 FA | 	rdbyte	result1, local03 wz
23fb0     01 2A 06 51 |  if_ne	add	local03, #1
23fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__3012
23fb8                 | LR__3013
23fb8     09 2B 82 F1 | 	sub	local03, arg01
23fbc     16 13 02 F6 | 	mov	arg01, local04
23fc0     15 13 02 F1 | 	add	arg01, local03
23fc4     01 12 06 F1 | 	add	arg01, #1
23fc8     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
23fcc     FD 2E 0A F6 | 	mov	local05, result1 wz
23fd0     28 00 90 AD |  if_e	jmp	#LR__3014
23fd4     17 13 02 F6 | 	mov	arg01, local05
23fd8     13 15 02 F6 | 	mov	arg02, local01
23fdc     16 17 02 F6 | 	mov	arg03, local04
23fe0     50 FE BF FD | 	call	#__system____builtin_memmove
23fe4     17 13 02 F6 | 	mov	arg01, local05
23fe8     16 13 02 F1 | 	add	arg01, local04
23fec     01 2A 06 F1 | 	add	local03, #1
23ff0     14 15 02 F6 | 	mov	arg02, local02
23ff4     15 17 02 F6 | 	mov	arg03, local03
23ff8     38 FE BF FD | 	call	#__system____builtin_memmove
23ffc                 | LR__3014
23ffc     17 FB 01 F6 | 	mov	result1, local05
24000     A7 F0 03 F6 | 	mov	ptra, fp
24004     B2 00 A0 FD | 	call	#popregs_
24008                 | __system___string_concat_ret
24008     2D 00 64 FD | 	ret
2400c                 | 
2400c                 | __system___tx
2400c     02 4A 05 F6 | 	mov	COUNT_, #2
24010     A8 00 A0 FD | 	call	#pushregs_
24014     09 27 02 F6 | 	mov	local01, arg01
24018     0A 26 0E F2 | 	cmp	local01, #10 wz
2401c     18 00 90 5D |  if_ne	jmp	#LR__3020
24020     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24024     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
24028     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2402c     02 28 CE F7 | 	test	local02, #2 wz
24030     0D 12 06 56 |  if_ne	mov	arg01, #13
24034     6C FC BF 5D |  if_ne	call	#__system___txraw
24038                 | LR__3020
24038     13 13 02 F6 | 	mov	arg01, local01
2403c     64 FC BF FD | 	call	#__system___txraw
24040     A7 F0 03 F6 | 	mov	ptra, fp
24044     B2 00 A0 FD | 	call	#popregs_
24048                 | __system___tx_ret
24048     2D 00 64 FD | 	ret
2404c                 | 
2404c                 | __system___rx
2404c     01 4A 05 F6 | 	mov	COUNT_, #1
24050     A8 00 A0 FD | 	call	#pushregs_
24054                 | LR__3030
24054     00 12 06 F6 | 	mov	arg01, #0
24058     8C FC BF FD | 	call	#__system___rxraw
2405c     FD 26 02 F6 | 	mov	local01, result1
24060     FF FF 7F FF 
24064     FF 27 0E F2 | 	cmp	local01, ##-1 wz
24068     E8 FF 9F AD |  if_e	jmp	#LR__3030
2406c     0D 26 0E F2 | 	cmp	local01, #13 wz
24070     14 00 90 5D |  if_ne	jmp	#LR__3031
24074     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24078     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2407c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24080     02 FA CD F7 | 	test	result1, #2 wz
24084     0A 26 06 56 |  if_ne	mov	local01, #10
24088                 | LR__3031
24088     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2408c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
24090     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24094     01 12 CE F7 | 	test	arg01, #1 wz
24098     1C 00 90 AD |  if_e	jmp	#LR__3034
2409c     7F 26 0E F2 | 	cmp	local01, #127 wz
240a0     0C 00 90 5D |  if_ne	jmp	#LR__3032
240a4     08 12 06 F6 | 	mov	arg01, #8
240a8     60 FF BF FD | 	call	#__system___tx
240ac     08 00 90 FD | 	jmp	#LR__3033
240b0                 | LR__3032
240b0     13 13 02 F6 | 	mov	arg01, local01
240b4     54 FF BF FD | 	call	#__system___tx
240b8                 | LR__3033
240b8                 | LR__3034
240b8     13 FB 01 F6 | 	mov	result1, local01
240bc     A7 F0 03 F6 | 	mov	ptra, fp
240c0     B2 00 A0 FD | 	call	#popregs_
240c4                 | __system___rx_ret
240c4     2D 00 64 FD | 	ret
240c8                 | 
240c8                 | __system___pinwrite
240c8     09 01 02 F6 | 	mov	_var01, arg01
240cc     1F 00 06 F5 | 	and	_var01, #31
240d0     20 12 CE F7 | 	test	arg01, #32 wz
240d4     06 12 46 F0 | 	shr	arg01, #6
240d8     09 13 CA F9 | 	bmask	arg01, arg01
240dc     00 13 62 F0 | 	shl	arg01, _var01
240e0     00 15 62 F0 | 	shl	arg02, _var01
240e4     1C 00 90 AD |  if_e	jmp	#LR__3040
240e8     09 F7 43 F5 | 	or	dirb, arg01
240ec     FD 01 02 F6 | 	mov	_var01, outb
240f0     09 01 22 F5 | 	andn	_var01, arg01
240f4     09 15 02 F5 | 	and	arg02, arg01
240f8     0A 01 42 F5 | 	or	_var01, arg02
240fc     00 FB 03 F6 | 	mov	outb, _var01
24100     18 00 90 FD | 	jmp	#LR__3041
24104                 | LR__3040
24104     09 F5 43 F5 | 	or	dira, arg01
24108     FC 01 02 F6 | 	mov	_var01, outa
2410c     09 01 22 F5 | 	andn	_var01, arg01
24110     09 15 02 F5 | 	and	arg02, arg01
24114     0A 01 42 F5 | 	or	_var01, arg02
24118     00 F9 03 F6 | 	mov	outa, _var01
2411c                 | LR__3041
2411c                 | __system___pinwrite_ret
2411c     2D 00 64 FD | 	ret
24120                 | 
24120                 | __system___basic_read_line
24120     06 4A 05 F6 | 	mov	COUNT_, #6
24124     A8 00 A0 FD | 	call	#pushregs_
24128     09 27 02 F6 | 	mov	local01, arg01
2412c     00 28 06 F6 | 	mov	local02, #0
24130     18 2A 06 F6 | 	mov	local03, #24
24134     00 2C 06 F6 | 	mov	local04, #0
24138     18 12 06 F6 | 	mov	arg01, #24
2413c     74 3F B0 FD | 	call	#__system___gc_alloc_managed
24140     FD 2E 0A F6 | 	mov	local05, result1 wz
24144     17 FB 01 A6 |  if_e	mov	result1, local05
24148     B0 00 90 AD |  if_e	jmp	#LR__3053
2414c                 | LR__3050
2414c     13 13 02 F6 | 	mov	arg01, local01
24150     78 0B B0 FD | 	call	#__system___basic_get_char
24154     FD 30 02 F6 | 	mov	local06, result1
24158     01 30 56 F2 | 	cmps	local06, #1 wc
2415c     8C 00 90 CD |  if_b	jmp	#LR__3052
24160     0A 30 0E F2 | 	cmp	local06, #10 wz
24164     10 00 90 5D |  if_ne	jmp	#LR__3051
24168     00 2C 0E F2 | 	cmp	local04, #0 wz
2416c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
24170     01 28 86 11 |  if_a	sub	local02, #1
24174     74 00 90 FD | 	jmp	#LR__3052
24178                 | LR__3051
24178     0D 30 0E F2 | 	cmp	local06, #13 wz
2417c     01 2C 06 A6 |  if_e	mov	local04, #1
24180     00 2C 06 56 |  if_ne	mov	local04, #0
24184     08 30 0E F2 | 	cmp	local06, #8 wz
24188     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
2418c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
24190     01 28 86 21 |  if_nc_and_z	sub	local02, #1
24194     B4 FF 9F AD |  if_e	jmp	#LR__3050
24198     17 17 02 F6 | 	mov	arg03, local05
2419c     14 17 02 F1 | 	add	arg03, local02
241a0     0B 31 42 FC | 	wrbyte	local06, arg03
241a4     01 28 06 F1 | 	add	local02, #1
241a8     15 29 0A F2 | 	cmp	local02, local03 wz
241ac     9C FF 9F 5D |  if_ne	jmp	#LR__3050
241b0     15 13 02 F6 | 	mov	arg01, local03
241b4     20 12 06 F1 | 	add	arg01, #32
241b8     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
241bc     FD 30 0A F6 | 	mov	local06, result1 wz
241c0     18 FB 01 A6 |  if_e	mov	result1, local06
241c4     34 00 90 AD |  if_e	jmp	#LR__3053
241c8     18 13 02 F6 | 	mov	arg01, local06
241cc     17 15 02 F6 | 	mov	arg02, local05
241d0     15 17 02 F6 | 	mov	arg03, local03
241d4     5C FC BF FD | 	call	#__system____builtin_memmove
241d8     20 2A 06 F1 | 	add	local03, #32
241dc     17 13 02 F6 | 	mov	arg01, local05
241e0     0C 40 B0 FD | 	call	#__system___gc_free
241e4     18 2F 02 F6 | 	mov	local05, local06
241e8     60 FF 9F FD | 	jmp	#LR__3050
241ec                 | LR__3052
241ec     17 31 02 F6 | 	mov	local06, local05
241f0     14 31 02 F1 | 	add	local06, local02
241f4     18 01 48 FC | 	wrbyte	#0, local06
241f8     17 FB 01 F6 | 	mov	result1, local05
241fc                 | LR__3053
241fc     A7 F0 03 F6 | 	mov	ptra, fp
24200     B2 00 A0 FD | 	call	#popregs_
24204                 | __system___basic_read_line_ret
24204     2D 00 64 FD | 	ret
24208                 | 
24208                 | __system___waitms
24208     09 01 02 F6 | 	mov	_var01, arg01
2420c     1A 02 62 FD | 	getct	_var02
24210     14 04 06 FB | 	rdlong	_var03, #20
24214     97 14 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
24218                 | LR__3060
24218     01 00 00 FF 
2421c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
24220     1C 00 90 CD |  if_b	jmp	#LR__3062
24224     02 03 02 F1 | 	add	_var02, _var03
24228     01 13 02 F6 | 	mov	arg01, _var02
2422c     00 12 66 FA | 	addct1	arg01, #0
24230     24 22 60 FD | 	waitct1
24234     01 00 00 FF 
24238     E8 01 86 F1 | 	sub	_var01, ##1000
2423c     D8 FF 9F FD | 	jmp	#LR__3060
24240                 | LR__3061
24240                 | LR__3062
24240     01 00 56 F2 | 	cmps	_var01, #1 wc
24244     28 00 90 CD |  if_b	jmp	#LR__3063
24248     02 01 02 FD | 	qmul	_var01, _var03
2424c     01 00 00 FF 
24250     E8 17 06 F6 | 	mov	arg03, ##1000
24254     19 FA 61 FD | 	getqy	result1
24258     18 12 62 FD | 	getqx	arg01
2425c     28 FA 61 FD | 	setq	result1
24260     0B 13 12 FD | 	qdiv	arg01, arg03
24264     18 12 62 FD | 	getqx	arg01
24268     01 13 62 FA | 	addct1	arg01, _var02
2426c     24 22 60 FD | 	waitct1
24270                 | LR__3063
24270                 | __system___waitms_ret
24270     2D 00 64 FD | 	ret
24274                 | 
24274                 | __system___waitus
24274     09 01 02 F6 | 	mov	_var01, arg01
24278     1A 02 62 FD | 	getct	_var02
2427c     14 04 06 FB | 	rdlong	_var03, #20
24280     97 14 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
24284                 | LR__3070
24284     A1 07 00 FF 
24288     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2428c     1C 00 90 CD |  if_b	jmp	#LR__3072
24290     02 03 02 F1 | 	add	_var02, _var03
24294     01 13 02 F6 | 	mov	arg01, _var02
24298     00 12 66 FA | 	addct1	arg01, #0
2429c     24 22 60 FD | 	waitct1
242a0     A1 07 00 FF 
242a4     40 00 86 F1 | 	sub	_var01, ##1000000
242a8     D8 FF 9F FD | 	jmp	#LR__3070
242ac                 | LR__3071
242ac                 | LR__3072
242ac     01 00 56 F2 | 	cmps	_var01, #1 wc
242b0     28 00 90 CD |  if_b	jmp	#LR__3073
242b4     02 01 02 FD | 	qmul	_var01, _var03
242b8     A1 07 00 FF 
242bc     40 16 06 F6 | 	mov	arg03, ##1000000
242c0     19 FA 61 FD | 	getqy	result1
242c4     18 12 62 FD | 	getqx	arg01
242c8     28 FA 61 FD | 	setq	result1
242cc     0B 13 12 FD | 	qdiv	arg01, arg03
242d0     18 FA 61 FD | 	getqx	result1
242d4     FD 02 62 FA | 	addct1	_var02, result1
242d8     24 22 60 FD | 	waitct1
242dc                 | LR__3073
242dc                 | __system___waitus_ret
242dc     2D 00 64 FD | 	ret
242e0                 | 
242e0                 | __system___mount
242e0     0B 4A 05 F6 | 	mov	COUNT_, #11
242e4     A8 00 A0 FD | 	call	#pushregs_
242e8     09 27 02 F6 | 	mov	local01, arg01
242ec     0A 29 0A F6 | 	mov	local02, arg02 wz
242f0     01 2A 66 F6 | 	neg	local03, #1
242f4     01 FA 65 A6 |  if_e	neg	result1, #1
242f8     98 02 90 AD |  if_e	jmp	#LR__3095
242fc     13 FB C1 FA | 	rdbyte	result1, local01
24300     2F FA 0D F2 | 	cmp	result1, #47 wz
24304     28 00 90 5D |  if_ne	jmp	#LR__3082
24308     13 13 02 F6 | 	mov	arg01, local01
2430c     09 2D 02 F6 | 	mov	local04, arg01
24310     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
24314                 | LR__3080
24314     16 FB C9 FA | 	rdbyte	result1, local04 wz
24318     01 2C 06 51 |  if_ne	add	local04, #1
2431c     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
24320                 | LR__3081
24320     09 2D 82 F1 | 	sub	local04, arg01
24324     16 FB 01 F6 | 	mov	result1, local04
24328     10 FA 55 F2 | 	cmps	result1, #16 wc
2432c     14 00 90 CD |  if_b	jmp	#LR__3083
24330                 | LR__3082
24330     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24334     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24338     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2433c     01 FA 65 F6 | 	neg	result1, #1
24340     50 02 90 FD | 	jmp	#LR__3095
24344                 | LR__3083
24344     00 2E 06 F6 | 	mov	local05, #0
24348                 | LR__3084
24348     04 2E 56 F2 | 	cmps	local05, #4 wc
2434c     B0 00 90 3D |  if_ae	jmp	#LR__3089
24350     17 13 02 F6 | 	mov	arg01, local05
24354     02 12 66 F0 | 	shl	arg01, #2
24358     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2435c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
24360     09 FB 09 FB | 	rdlong	result1, arg01 wz
24364     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24368     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
2436c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
24370     84 00 90 8D |  if_c_and_z	jmp	#LR__3088
24374     17 13 02 F6 | 	mov	arg01, local05
24378     02 12 66 F0 | 	shl	arg01, #2
2437c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24380     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
24384     09 13 02 FB | 	rdlong	arg01, arg01
24388     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2438c     09 2D 02 F6 | 	mov	local04, arg01
24390     97 06 48 FB | 	callpa	#(@LR__3086-@LR__3085)>>2,fcache_load_ptr_
24394                 | LR__3085
24394     16 FB C9 FA | 	rdbyte	result1, local04 wz
24398     01 2C 06 51 |  if_ne	add	local04, #1
2439c     F4 FF 9F 5D |  if_ne	jmp	#LR__3085
243a0                 | LR__3086
243a0     09 2D 82 F1 | 	sub	local04, arg01
243a4     16 31 02 F6 | 	mov	local06, local04
243a8     18 13 02 F6 | 	mov	arg01, local06
243ac     13 13 02 F1 | 	add	arg01, local01
243b0     09 FB C1 FA | 	rdbyte	result1, arg01
243b4     2F FA 0D F2 | 	cmp	result1, #47 wz
243b8     18 33 02 56 |  if_ne	mov	local07, local06
243bc     13 33 02 51 |  if_ne	add	local07, local01
243c0     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
243c4     30 00 90 5D |  if_ne	jmp	#LR__3087
243c8     17 17 02 F6 | 	mov	arg03, local05
243cc     02 16 66 F0 | 	shl	arg03, #2
243d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
243d4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
243d8     0B 15 02 FB | 	rdlong	arg02, arg03
243dc     13 13 02 F6 | 	mov	arg01, local01
243e0     18 17 02 F6 | 	mov	arg03, local06
243e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
243e8     48 51 B0 FD | 	call	#__system__strncmp
243ec     00 FA 0D F2 | 	cmp	result1, #0 wz
243f0     17 2B 02 A6 |  if_e	mov	local03, local05
243f4     08 00 90 AD |  if_e	jmp	#LR__3089
243f8                 | LR__3087
243f8                 | LR__3088
243f8     01 2E 06 F1 | 	add	local05, #1
243fc     48 FF 9F FD | 	jmp	#LR__3084
24400                 | LR__3089
24400     FF FF 7F FF 
24404     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
24408     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2440c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24410     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24414     01 FA 65 A6 |  if_e	neg	result1, #1
24418     78 01 90 AD |  if_e	jmp	#LR__3095
2441c     15 2F 02 F6 | 	mov	local05, local03
24420     17 33 02 F6 | 	mov	local07, local05
24424     02 32 66 F0 | 	shl	local07, #2
24428     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2442c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
24430     19 31 0A FB | 	rdlong	local06, local07 wz
24434     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
24438     58 00 90 AD |  if_e	jmp	#LR__3090
2443c     4C 30 06 F1 | 	add	local06, #76
24440     18 33 0A FB | 	rdlong	local07, local06 wz
24444     4C 30 86 F1 | 	sub	local06, #76
24448     48 00 90 AD |  if_e	jmp	#LR__3090
2444c     4C 30 06 F1 | 	add	local06, #76
24450     18 33 02 FB | 	rdlong	local07, local06
24454     19 2B 02 F6 | 	mov	local03, local07
24458     13 32 46 F7 | 	zerox	local07, #19
2445c     14 2A 46 F0 | 	shr	local03, #20
24460     02 2A 66 F0 | 	shl	local03, #2
24464     ED 2A 02 F1 | 	add	local03, __methods__
24468     15 2B 02 FB | 	rdlong	local03, local03
2446c     17 31 02 F6 | 	mov	local06, local05
24470     02 30 66 F0 | 	shl	local06, #2
24474     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24478     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2447c     18 13 02 FB | 	rdlong	arg01, local06
24480     F2 30 02 F6 | 	mov	local06, objptr
24484     19 E5 01 F6 | 	mov	objptr, local07
24488     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2448c     2D 2A 62 FD | 	call	local03
24490     18 E5 01 F6 | 	mov	objptr, local06
24494                 | LR__3090
24494     17 35 02 F6 | 	mov	local08, local05
24498     02 34 66 F0 | 	shl	local08, #2
2449c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
244a0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
244a4     1A 29 62 FC | 	wrlong	local02, local08
244a8     00 28 0E F2 | 	cmp	local02, #0 wz
244ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
244b0     18 00 90 5D |  if_ne	jmp	#LR__3091
244b4     02 2E 66 F0 | 	shl	local05, #2
244b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
244bc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
244c0     17 01 68 FC | 	wrlong	#0, local05
244c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
244c8     C4 00 90 FD | 	jmp	#LR__3094
244cc                 | LR__3091
244cc     17 37 02 F6 | 	mov	local09, local05
244d0     04 36 66 F0 | 	shl	local09, #4
244d4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
244d8     F3 36 02 F1 | 	add	local09, ptr___system__dat__
244dc     1B 13 02 F6 | 	mov	arg01, local09
244e0     13 15 02 F6 | 	mov	arg02, local01
244e4     10 16 06 F6 | 	mov	arg03, #16
244e8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
244ec     98 4F B0 FD | 	call	#__system__strncpy
244f0     48 28 06 F1 | 	add	local02, #72
244f4     14 35 0A FB | 	rdlong	local08, local02 wz
244f8     48 28 86 F1 | 	sub	local02, #72
244fc     7C 00 90 AD |  if_e	jmp	#LR__3093
24500     48 28 06 F1 | 	add	local02, #72
24504     14 35 02 FB | 	rdlong	local08, local02
24508     1A 39 02 F6 | 	mov	local10, local08
2450c     13 34 46 F7 | 	zerox	local08, #19
24510     14 38 46 F0 | 	shr	local10, #20
24514     02 38 66 F0 | 	shl	local10, #2
24518     ED 38 02 F1 | 	add	local10, __methods__
2451c     1C 39 02 FB | 	rdlong	local10, local10
24520     1B 13 02 F6 | 	mov	arg01, local09
24524     F2 3A 02 F6 | 	mov	local11, objptr
24528     1A E5 01 F6 | 	mov	objptr, local08
2452c     2D 38 62 FD | 	call	local10
24530     1D E5 01 F6 | 	mov	objptr, local11
24534     FD 12 0A F6 | 	mov	arg01, result1 wz
24538     40 00 90 AD |  if_e	jmp	#LR__3092
2453c     17 35 02 F6 | 	mov	local08, local05
24540     02 34 66 F0 | 	shl	local08, #2
24544     74 E6 05 F1 | 	add	ptr___system__dat__, #116
24548     F3 34 02 F1 | 	add	local08, ptr___system__dat__
2454c     1A 01 68 FC | 	wrlong	#0, local08
24550     02 2E 66 F0 | 	shl	local05, #2
24554     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24558     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2455c     17 01 68 FC | 	wrlong	#0, local05
24560     09 13 6A F6 | 	neg	arg01, arg01 wz
24564     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
24568     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2456c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24570     01 FA 65 56 |  if_ne	neg	result1, #1
24574     00 FA 05 A6 |  if_e	mov	result1, #0
24578     18 00 90 FD | 	jmp	#LR__3095
2457c                 | LR__3092
2457c                 | LR__3093
2457c     02 2E 66 F0 | 	shl	local05, #2
24580     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24584     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
24588     17 37 62 FC | 	wrlong	local09, local05
2458c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24590                 | LR__3094
24590     00 FA 05 F6 | 	mov	result1, #0
24594                 | LR__3095
24594     A7 F0 03 F6 | 	mov	ptra, fp
24598     B2 00 A0 FD | 	call	#popregs_
2459c                 | __system___mount_ret
2459c     2D 00 64 FD | 	ret
245a0                 | 
245a0                 | __system___chdir
245a0     00 4A 05 F6 | 	mov	COUNT_, #0
245a4     A8 00 A0 FD | 	call	#pushregs_
245a8     40 F0 07 F1 | 	add	ptra, #64
245ac     04 4E 05 F1 | 	add	fp, #4
245b0     A7 12 62 FC | 	wrlong	arg01, fp
245b4     04 4E 05 F1 | 	add	fp, #4
245b8     A7 14 02 F6 | 	mov	arg02, fp
245bc     08 4E 85 F1 | 	sub	fp, #8
245c0     68 4B B0 FD | 	call	#__system__stat
245c4     3C 4E 05 F1 | 	add	fp, #60
245c8     A7 FA 61 FC | 	wrlong	result1, fp
245cc     3C 4E 85 F1 | 	sub	fp, #60
245d0     00 FA 0D F2 | 	cmp	result1, #0 wz
245d4     3C 4E 05 51 |  if_ne	add	fp, #60
245d8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
245dc     3C 4E 85 51 |  if_ne	sub	fp, #60
245e0     BC 00 90 5D |  if_ne	jmp	#LR__3102
245e4     10 4E 05 F1 | 	add	fp, #16
245e8     A7 12 02 FB | 	rdlong	arg01, fp
245ec     10 4E 85 F1 | 	sub	fp, #16
245f0     78 00 00 FF 
245f4     00 12 06 F5 | 	and	arg01, ##61440
245f8     08 00 00 FF 
245fc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
24600     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
24604     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
24608     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2460c     01 FA 65 56 |  if_ne	neg	result1, #1
24610     8C 00 90 5D |  if_ne	jmp	#LR__3102
24614     04 4E 05 F1 | 	add	fp, #4
24618     A7 16 02 FB | 	rdlong	arg03, fp
2461c     04 4E 85 F1 | 	sub	fp, #4
24620     0B 17 C2 FA | 	rdbyte	arg03, arg03
24624     2F 16 0E F2 | 	cmp	arg03, #47 wz
24628     24 00 90 5D |  if_ne	jmp	#LR__3100
2462c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
24630     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24634     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24638     04 4E 05 F1 | 	add	fp, #4
2463c     A7 14 02 FB | 	rdlong	arg02, fp
24640     04 4E 85 F1 | 	sub	fp, #4
24644     00 17 06 F6 | 	mov	arg03, #256
24648     3C 4E B0 FD | 	call	#__system__strncpy
2464c     4C 00 90 FD | 	jmp	#LR__3101
24650                 | LR__3100
24650     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24654     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24658     38 4E 05 F1 | 	add	fp, #56
2465c     A7 12 62 FC | 	wrlong	arg01, fp
24660     38 4E 85 F1 | 	sub	fp, #56
24664     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
24668     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2466c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24670     00 17 06 F6 | 	mov	arg03, #256
24674     10 4E B0 FD | 	call	#__system__strncpy
24678     38 4E 05 F1 | 	add	fp, #56
2467c     A7 12 02 FB | 	rdlong	arg01, fp
24680     34 4E 85 F1 | 	sub	fp, #52
24684     A7 14 02 FB | 	rdlong	arg02, fp
24688     04 4E 85 F1 | 	sub	fp, #4
2468c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
24690     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
24694     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24698     10 00 B0 FD | 	call	#__system____getvfsforfile
2469c                 | LR__3101
2469c     00 FA 05 F6 | 	mov	result1, #0
246a0                 | LR__3102
246a0     A7 F0 03 F6 | 	mov	ptra, fp
246a4     B2 00 A0 FD | 	call	#popregs_
246a8                 | __system___chdir_ret
246a8     2D 00 64 FD | 	ret
246ac                 | 
246ac                 | __system____getvfsforfile
246ac     0E 4A 05 F6 | 	mov	COUNT_, #14
246b0     A8 00 A0 FD | 	call	#pushregs_
246b4     09 27 02 F6 | 	mov	local01, arg01
246b8     0A 29 02 F6 | 	mov	local02, arg02
246bc     0B 2B 02 F6 | 	mov	local03, arg03
246c0     97 10 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
246c4                 | LR__3110
246c4     14 FB C1 FA | 	rdbyte	result1, local02
246c8     2F FA 0D F2 | 	cmp	result1, #47 wz
246cc     01 28 06 A1 |  if_e	add	local02, #1
246d0     14 2D C2 AA |  if_e	rdbyte	local04, local02
246d4     01 28 86 A1 |  if_e	sub	local02, #1
246d8     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
246dc     01 28 06 A1 |  if_e	add	local02, #1
246e0     E0 FF 9F AD |  if_e	jmp	#LR__3110
246e4                 | LR__3111
246e4     14 2D C2 FA | 	rdbyte	local04, local02
246e8     2F 2C 0E F2 | 	cmp	local04, #47 wz
246ec     14 00 90 5D |  if_ne	jmp	#LR__3112
246f0     13 13 02 F6 | 	mov	arg01, local01
246f4     14 15 02 F6 | 	mov	arg02, local02
246f8     00 17 06 F6 | 	mov	arg03, #256
246fc     88 4D B0 FD | 	call	#__system__strncpy
24700     7C 00 90 FD | 	jmp	#LR__3114
24704                 | LR__3112
24704     84 E6 05 F1 | 	add	ptr___system__dat__, #132
24708     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2470c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24710     13 13 02 F6 | 	mov	arg01, local01
24714     00 17 06 F6 | 	mov	arg03, #256
24718     6C 4D B0 FD | 	call	#__system__strncpy
2471c     14 2D CA FA | 	rdbyte	local04, local02 wz
24720     5C 00 90 AD |  if_e	jmp	#LR__3113
24724     14 2D C2 FA | 	rdbyte	local04, local02
24728     2E 2C 0E F2 | 	cmp	local04, #46 wz
2472c     01 28 06 A1 |  if_e	add	local02, #1
24730     14 2F C2 AA |  if_e	rdbyte	local05, local02
24734     01 28 86 A1 |  if_e	sub	local02, #1
24738     17 31 02 A6 |  if_e	mov	local06, local05
2473c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
24740     3C 00 90 AD |  if_e	jmp	#LR__3113
24744     13 2F C2 FA | 	rdbyte	local05, local01
24748     2F 2E 0E F2 | 	cmp	local05, #47 wz
2474c     01 26 06 A1 |  if_e	add	local01, #1
24750     13 2D C2 AA |  if_e	rdbyte	local04, local01
24754     01 26 86 A1 |  if_e	sub	local01, #1
24758     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
2475c     9D 01 00 5F 
24760     20 14 06 56 |  if_ne	mov	arg02, ##@LR__5240
24764     13 13 02 56 |  if_ne	mov	arg01, local01
24768     00 17 06 56 |  if_ne	mov	arg03, #256
2476c     64 4D B0 5D |  if_ne	call	#__system__strncat
24770     13 13 02 F6 | 	mov	arg01, local01
24774     14 15 02 F6 | 	mov	arg02, local02
24778     00 17 06 F6 | 	mov	arg03, #256
2477c     54 4D B0 FD | 	call	#__system__strncat
24780                 | LR__3113
24780                 | LR__3114
24780     13 13 02 F6 | 	mov	arg01, local01
24784     0C 4F B0 FD | 	call	#__system___normalizeName
24788     13 2D CA FA | 	rdbyte	local04, local01 wz
2478c     1C 00 90 AD |  if_e	jmp	#LR__3115
24790     13 2D C2 FA | 	rdbyte	local04, local01
24794     2F 2C 0E F2 | 	cmp	local04, #47 wz
24798     01 26 06 A1 |  if_e	add	local01, #1
2479c     13 31 C2 AA |  if_e	rdbyte	local06, local01
247a0     01 26 86 A1 |  if_e	sub	local01, #1
247a4     00 30 4E A2 |  if_e	cmps	local06, #0 wz
247a8     18 00 90 5D |  if_ne	jmp	#LR__3116
247ac                 | LR__3115
247ac     01 00 00 FF 
247b0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
247b4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
247b8     01 00 00 FF 
247bc     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
247c0     EC 01 90 FD | 	jmp	#LR__3130
247c4                 | LR__3116
247c4     00 32 06 F6 | 	mov	local07, #0
247c8                 | LR__3117
247c8     04 32 56 F2 | 	cmps	local07, #4 wc
247cc     CC 01 90 3D |  if_ae	jmp	#LR__3129
247d0     19 31 02 F6 | 	mov	local06, local07
247d4     02 30 66 F0 | 	shl	local06, #2
247d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
247dc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
247e0     18 31 0A FB | 	rdlong	local06, local06 wz
247e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
247e8     A8 01 90 AD |  if_e	jmp	#LR__3128
247ec     19 2D 02 F6 | 	mov	local04, local07
247f0     02 2C 66 F0 | 	shl	local04, #2
247f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
247f8     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
247fc     16 13 02 FB | 	rdlong	arg01, local04
24800     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24804     09 35 02 F6 | 	mov	local08, arg01
24808     97 06 48 FB | 	callpa	#(@LR__3119-@LR__3118)>>2,fcache_load_ptr_
2480c                 | LR__3118
2480c     1A FB C9 FA | 	rdbyte	result1, local08 wz
24810     01 34 06 51 |  if_ne	add	local08, #1
24814     F4 FF 9F 5D |  if_ne	jmp	#LR__3118
24818                 | LR__3119
24818     09 35 82 F1 | 	sub	local08, arg01
2481c     1A 37 02 F6 | 	mov	local09, local08
24820     1B 2D 02 F6 | 	mov	local04, local09
24824     13 2D 02 F1 | 	add	local04, local01
24828     16 31 C2 FA | 	rdbyte	local06, local04
2482c     2F 30 0E F2 | 	cmp	local06, #47 wz
24830     1B 39 02 56 |  if_ne	mov	local10, local09
24834     13 39 02 51 |  if_ne	add	local10, local01
24838     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
2483c     54 01 90 5D |  if_ne	jmp	#LR__3127
24840     19 17 02 F6 | 	mov	arg03, local07
24844     02 16 66 F0 | 	shl	arg03, #2
24848     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2484c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
24850     0B 15 02 FB | 	rdlong	arg02, arg03
24854     1B 17 02 F6 | 	mov	arg03, local09
24858     13 13 02 F6 | 	mov	arg01, local01
2485c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24860     D0 4C B0 FD | 	call	#__system__strncmp
24864     00 FA 4D F2 | 	cmps	result1, #0 wz
24868     28 01 90 5D |  if_ne	jmp	#LR__3127
2486c     19 3B 02 F6 | 	mov	local11, local07
24870     02 3A 66 F0 | 	shl	local11, #2
24874     74 E6 05 F1 | 	add	ptr___system__dat__, #116
24878     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
2487c     1D 3D 02 FB | 	rdlong	local12, local11
24880     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
24884     97 22 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
24888                 | LR__3120
24888     1B 31 02 F6 | 	mov	local06, local09
2488c     01 30 06 F1 | 	add	local06, #1
24890     13 31 02 F1 | 	add	local06, local01
24894     18 3B C2 FA | 	rdbyte	local11, local06
24898     2E 3A 0E F2 | 	cmp	local11, #46 wz
2489c     2C 00 90 5D |  if_ne	jmp	#LR__3122
248a0     1B 3B 02 F6 | 	mov	local11, local09
248a4     02 3A 06 F1 | 	add	local11, #2
248a8     13 3B 02 F1 | 	add	local11, local01
248ac     1D 39 C2 FA | 	rdbyte	local10, local11
248b0     2F 38 0E F2 | 	cmp	local10, #47 wz
248b4     1B 3F 02 56 |  if_ne	mov	local13, local09
248b8     02 3E 06 51 |  if_ne	add	local13, #2
248bc     13 3F 02 51 |  if_ne	add	local13, local01
248c0     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
248c4     01 36 06 A1 |  if_e	add	local09, #1
248c8     BC FF 9F AD |  if_e	jmp	#LR__3120
248cc                 | LR__3121
248cc                 | LR__3122
248cc     00 2A 0E F2 | 	cmp	local03, #0 wz
248d0     15 13 02 56 |  if_ne	mov	arg01, local03
248d4     13 15 02 56 |  if_ne	mov	arg02, local01
248d8     00 17 06 56 |  if_ne	mov	arg03, #256
248dc     A8 4B B0 5D |  if_ne	call	#__system__strncpy
248e0     13 15 02 F6 | 	mov	arg02, local01
248e4     1B 15 02 F1 | 	add	arg02, local09
248e8     01 14 06 F1 | 	add	arg02, #1
248ec     13 13 02 F6 | 	mov	arg01, local01
248f0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
248f4     13 13 02 F6 | 	mov	arg01, local01
248f8     09 35 02 F6 | 	mov	local08, arg01
248fc     97 06 48 FB | 	callpa	#(@LR__3124-@LR__3123)>>2,fcache_load_ptr_
24900                 | LR__3123
24900     1A FB C9 FA | 	rdbyte	result1, local08 wz
24904     01 34 06 51 |  if_ne	add	local08, #1
24908     F4 FF 9F 5D |  if_ne	jmp	#LR__3123
2490c                 | LR__3124
2490c     09 35 82 F1 | 	sub	local08, arg01
24910     1A 37 02 F6 | 	mov	local09, local08
24914                 | LR__3125
24914     01 36 56 F2 | 	cmps	local09, #1 wc
24918     70 00 90 CD |  if_b	jmp	#LR__3126
2491c     1B 2D 02 F6 | 	mov	local04, local09
24920     13 2D 02 F1 | 	add	local04, local01
24924     16 3B C2 FA | 	rdbyte	local11, local04
24928     2F 3A 0E F2 | 	cmp	local11, #47 wz
2492c     1B 3B 02 A6 |  if_e	mov	local11, local09
24930     13 3B 02 A1 |  if_e	add	local11, local01
24934     1D 01 48 AC |  if_e	wrbyte	#0, local11
24938     01 36 86 A1 |  if_e	sub	local09, #1
2493c     D4 FF 9F AD |  if_e	jmp	#LR__3125
24940     1B 2D 02 F6 | 	mov	local04, local09
24944     13 2D 02 F1 | 	add	local04, local01
24948     16 3B C2 FA | 	rdbyte	local11, local04
2494c     2E 3A 0E F2 | 	cmp	local11, #46 wz
24950     38 00 90 5D |  if_ne	jmp	#LR__3126
24954     02 36 56 F2 | 	cmps	local09, #2 wc
24958     30 00 90 CD |  if_b	jmp	#LR__3126
2495c     1B 41 02 F6 | 	mov	local14, local09
24960     01 40 86 F1 | 	sub	local14, #1
24964     13 41 02 F1 | 	add	local14, local01
24968     20 2F C2 FA | 	rdbyte	local05, local14
2496c     2F 2E 0E F2 | 	cmp	local05, #47 wz
24970     18 00 90 5D |  if_ne	jmp	#LR__3126
24974     1B 2D 02 F6 | 	mov	local04, local09
24978     01 2C 86 F1 | 	sub	local04, #1
2497c     13 2D 02 F1 | 	add	local04, local01
24980     16 01 48 FC | 	wrbyte	#0, local04
24984     02 36 86 F1 | 	sub	local09, #2
24988     88 FF 9F FD | 	jmp	#LR__3125
2498c                 | LR__3126
2498c     1E FB 01 F6 | 	mov	result1, local12
24990     1C 00 90 FD | 	jmp	#LR__3130
24994                 | LR__3127
24994                 | LR__3128
24994     01 32 06 F1 | 	add	local07, #1
24998     2C FE 9F FD | 	jmp	#LR__3117
2499c                 | LR__3129
2499c     02 00 00 FF 
249a0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
249a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
249a8     02 00 00 FF 
249ac     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
249b0                 | LR__3130
249b0     A7 F0 03 F6 | 	mov	ptra, fp
249b4     B2 00 A0 FD | 	call	#popregs_
249b8                 | __system____getvfsforfile_ret
249b8     2D 00 64 FD | 	ret
249bc                 | 
249bc                 | __system___basic_open
249bc     05 4A 05 F6 | 	mov	COUNT_, #5
249c0     A8 00 A0 FD | 	call	#pushregs_
249c4     0A 27 02 F6 | 	mov	local01, arg02
249c8     0B 29 02 F6 | 	mov	local02, arg03
249cc     0C 2B 02 F6 | 	mov	local03, arg04
249d0     00 2C 06 F6 | 	mov	local04, #0
249d4     88 4A B0 FD | 	call	#__system____getftab
249d8     FD 2E 0A F6 | 	mov	local05, result1 wz
249dc     18 00 90 5D |  if_ne	jmp	#LR__3140
249e0     EE 12 02 F6 | 	mov	arg01, abortchain
249e4     0C 14 06 F6 | 	mov	arg02, #12
249e8     01 16 06 F6 | 	mov	arg03, #1
249ec     DA 00 A0 FD | 	call	#__longjmp
249f0     01 FA 65 F6 | 	neg	result1, #1
249f4     14 01 90 FD | 	jmp	#LR__3149
249f8                 | LR__3140
249f8     08 2E 06 F1 | 	add	local05, #8
249fc     17 FB 09 FB | 	rdlong	result1, local05 wz
24a00     08 2E 86 F1 | 	sub	local05, #8
24a04     17 13 02 56 |  if_ne	mov	arg01, local05
24a08     A8 41 B0 5D |  if_ne	call	#__system___closeraw
24a0c     00 26 0E F2 | 	cmp	local01, #0 wz
24a10     00 28 0E A2 |  if_e	cmp	local02, #0 wz
24a14     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
24a18     3C 00 90 AD |  if_e	jmp	#LR__3142
24a1c     0C 12 06 F6 | 	mov	arg01, #12
24a20     90 36 B0 FD | 	call	#__system___gc_alloc_managed
24a24     FD 2C 0A F6 | 	mov	local04, result1 wz
24a28     18 00 90 5D |  if_ne	jmp	#LR__3141
24a2c     EE 12 02 F6 | 	mov	arg01, abortchain
24a30     07 14 06 F6 | 	mov	arg02, #7
24a34     01 16 06 F6 | 	mov	arg03, #1
24a38     DA 00 A0 FD | 	call	#__longjmp
24a3c     01 FA 65 F6 | 	neg	result1, #1
24a40     C8 00 90 FD | 	jmp	#LR__3149
24a44                 | LR__3141
24a44     16 01 68 FC | 	wrlong	#0, local04
24a48     04 2C 06 F1 | 	add	local04, #4
24a4c     16 01 68 FC | 	wrlong	#0, local04
24a50     04 2C 86 F1 | 	sub	local04, #4
24a54     17 2D 62 FC | 	wrlong	local04, local05
24a58                 | LR__3142
24a58     00 26 0E F2 | 	cmp	local01, #0 wz
24a5c     20 00 90 AD |  if_e	jmp	#LR__3143
24a60     16 27 62 FC | 	wrlong	local01, local04
24a64     16 FB 01 F6 | 	mov	result1, local04
24a68     00 C8 04 FF 
24a6c     00 FA 45 F5 | 	or	result1, ##160432128
24a70     1C 2E 06 F1 | 	add	local05, #28
24a74     17 FB 61 FC | 	wrlong	result1, local05
24a78     1C 2E 86 F1 | 	sub	local05, #28
24a7c     0C 00 90 FD | 	jmp	#LR__3144
24a80                 | LR__3143
24a80     1C 2E 06 F1 | 	add	local05, #28
24a84     17 01 68 FC | 	wrlong	#0, local05
24a88     1C 2E 86 F1 | 	sub	local05, #28
24a8c                 | LR__3144
24a8c     00 28 0E F2 | 	cmp	local02, #0 wz
24a90     28 00 90 AD |  if_e	jmp	#LR__3145
24a94     04 2C 06 F1 | 	add	local04, #4
24a98     16 29 62 FC | 	wrlong	local02, local04
24a9c     04 2C 86 F1 | 	sub	local04, #4
24aa0     16 FB 01 F6 | 	mov	result1, local04
24aa4     00 D0 04 FF 
24aa8     00 FA 45 F5 | 	or	result1, ##161480704
24aac     20 2E 06 F1 | 	add	local05, #32
24ab0     17 FB 61 FC | 	wrlong	result1, local05
24ab4     20 2E 86 F1 | 	sub	local05, #32
24ab8     0C 00 90 FD | 	jmp	#LR__3146
24abc                 | LR__3145
24abc     20 2E 06 F1 | 	add	local05, #32
24ac0     17 01 68 FC | 	wrlong	#0, local05
24ac4     20 2E 86 F1 | 	sub	local05, #32
24ac8                 | LR__3146
24ac8     00 2A 0E F2 | 	cmp	local03, #0 wz
24acc     24 00 90 AD |  if_e	jmp	#LR__3147
24ad0     08 2C 06 F1 | 	add	local04, #8
24ad4     16 2B 62 FC | 	wrlong	local03, local04
24ad8     08 2C 86 F1 | 	sub	local04, #8
24adc     00 D8 04 FF 
24ae0     00 2C 46 F5 | 	or	local04, ##162529280
24ae4     24 2E 06 F1 | 	add	local05, #36
24ae8     17 2D 62 FC | 	wrlong	local04, local05
24aec     24 2E 86 F1 | 	sub	local05, #36
24af0     0C 00 90 FD | 	jmp	#LR__3148
24af4                 | LR__3147
24af4     24 2E 06 F1 | 	add	local05, #36
24af8     17 01 68 FC | 	wrlong	#0, local05
24afc     24 2E 86 F1 | 	sub	local05, #36
24b00                 | LR__3148
24b00     08 2E 06 F1 | 	add	local05, #8
24b04     17 0F 68 FC | 	wrlong	#7, local05
24b08     00 FA 05 F6 | 	mov	result1, #0
24b0c                 | LR__3149
24b0c     A7 F0 03 F6 | 	mov	ptra, fp
24b10     B2 00 A0 FD | 	call	#popregs_
24b14                 | __system___basic_open_ret
24b14     2D 00 64 FD | 	ret
24b18                 | 
24b18                 | __system___basic_open_string
24b18     04 4A 05 F6 | 	mov	COUNT_, #4
24b1c     A8 00 A0 FD | 	call	#pushregs_
24b20     0A 27 02 F6 | 	mov	local01, arg02
24b24     0B 29 02 F6 | 	mov	local02, arg03
24b28     34 49 B0 FD | 	call	#__system____getftab
24b2c     FD 2A 0A F6 | 	mov	local03, result1 wz
24b30     18 00 90 5D |  if_ne	jmp	#LR__3150
24b34     EE 12 02 F6 | 	mov	arg01, abortchain
24b38     0C 14 06 F6 | 	mov	arg02, #12
24b3c     01 16 06 F6 | 	mov	arg03, #1
24b40     DA 00 A0 FD | 	call	#__longjmp
24b44     01 FA 65 F6 | 	neg	result1, #1
24b48     58 00 90 FD | 	jmp	#LR__3152
24b4c                 | LR__3150
24b4c     08 2A 06 F1 | 	add	local03, #8
24b50     15 19 0A FB | 	rdlong	arg04, local03 wz
24b54     08 2A 86 F1 | 	sub	local03, #8
24b58     15 13 02 56 |  if_ne	mov	arg01, local03
24b5c     54 40 B0 5D |  if_ne	call	#__system___closeraw
24b60     13 15 02 F6 | 	mov	arg02, local01
24b64     14 17 02 F6 | 	mov	arg03, local02
24b68     15 13 02 F6 | 	mov	arg01, local03
24b6c     B6 19 06 F6 | 	mov	arg04, #438
24b70     3C 3D B0 FD | 	call	#__system___openraw
24b74     FD 2C 02 F6 | 	mov	local04, result1
24b78     00 2C 56 F2 | 	cmps	local04, #0 wc
24b7c     20 00 90 3D |  if_ae	jmp	#LR__3151
24b80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24b84     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
24b88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24b8c     EE 12 02 F6 | 	mov	arg01, abortchain
24b90     01 16 06 F6 | 	mov	arg03, #1
24b94     DA 00 A0 FD | 	call	#__longjmp
24b98     01 FA 65 F6 | 	neg	result1, #1
24b9c     04 00 90 FD | 	jmp	#LR__3152
24ba0                 | LR__3151
24ba0     16 FB 01 F6 | 	mov	result1, local04
24ba4                 | LR__3152
24ba4     A7 F0 03 F6 | 	mov	ptra, fp
24ba8     B2 00 A0 FD | 	call	#popregs_
24bac                 | __system___basic_open_string_ret
24bac     2D 00 64 FD | 	ret
24bb0                 | 
24bb0                 | __system___basic_print_char
24bb0     03 4A 05 F6 | 	mov	COUNT_, #3
24bb4     A8 00 A0 FD | 	call	#pushregs_
24bb8     0A 27 02 F6 | 	mov	local01, arg02
24bbc     F4 4F B0 FD | 	call	#__system___gettxfunc
24bc0     FD 28 0A F6 | 	mov	local02, result1 wz
24bc4     00 FA 05 A6 |  if_e	mov	result1, #0
24bc8     30 00 90 AD |  if_e	jmp	#LR__3160
24bcc     14 2B 02 F6 | 	mov	local03, local02
24bd0     13 28 46 F7 | 	zerox	local02, #19
24bd4     14 2A 46 F0 | 	shr	local03, #20
24bd8     02 2A 66 F0 | 	shl	local03, #2
24bdc     ED 2A 02 F1 | 	add	local03, __methods__
24be0     15 2B 02 FB | 	rdlong	local03, local03
24be4     13 13 02 F6 | 	mov	arg01, local01
24be8     F2 26 02 F6 | 	mov	local01, objptr
24bec     14 E5 01 F6 | 	mov	objptr, local02
24bf0     2D 2A 62 FD | 	call	local03
24bf4     13 E5 01 F6 | 	mov	objptr, local01
24bf8     01 FA 05 F6 | 	mov	result1, #1
24bfc                 | LR__3160
24bfc     A7 F0 03 F6 | 	mov	ptra, fp
24c00     B2 00 A0 FD | 	call	#popregs_
24c04                 | __system___basic_print_char_ret
24c04     2D 00 64 FD | 	ret
24c08                 | 
24c08                 | __system___basic_print_string
24c08     03 4A 05 F6 | 	mov	COUNT_, #3
24c0c     A8 00 A0 FD | 	call	#pushregs_
24c10     0A 27 02 F6 | 	mov	local01, arg02
24c14     0B 29 02 F6 | 	mov	local02, arg03
24c18     98 4F B0 FD | 	call	#__system___gettxfunc
24c1c     FD 2A 0A F6 | 	mov	local03, result1 wz
24c20     00 FA 05 A6 |  if_e	mov	result1, #0
24c24     18 00 90 AD |  if_e	jmp	#LR__3170
24c28     00 26 0E F2 | 	cmp	local01, #0 wz
24c2c     00 FA 05 A6 |  if_e	mov	result1, #0
24c30     15 13 02 56 |  if_ne	mov	arg01, local03
24c34     14 15 02 56 |  if_ne	mov	arg02, local02
24c38     13 17 02 56 |  if_ne	mov	arg03, local01
24c3c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
24c40                 | LR__3170
24c40     A7 F0 03 F6 | 	mov	ptra, fp
24c44     B2 00 A0 FD | 	call	#popregs_
24c48                 | __system___basic_print_string_ret
24c48     2D 00 64 FD | 	ret
24c4c                 | 
24c4c                 | __system___basic_print_integer
24c4c     04 4A 05 F6 | 	mov	COUNT_, #4
24c50     A8 00 A0 FD | 	call	#pushregs_
24c54     0A 27 02 F6 | 	mov	local01, arg02
24c58     0B 29 02 F6 | 	mov	local02, arg03
24c5c     0C 2B 02 F6 | 	mov	local03, arg04
24c60     50 4F B0 FD | 	call	#__system___gettxfunc
24c64     FD 2C 0A F6 | 	mov	local04, result1 wz
24c68     00 FA 05 A6 |  if_e	mov	result1, #0
24c6c     16 13 02 56 |  if_ne	mov	arg01, local04
24c70     14 15 02 56 |  if_ne	mov	arg02, local02
24c74     13 17 02 56 |  if_ne	mov	arg03, local01
24c78     15 19 02 56 |  if_ne	mov	arg04, local03
24c7c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
24c80     A7 F0 03 F6 | 	mov	ptra, fp
24c84     B2 00 A0 FD | 	call	#popregs_
24c88                 | __system___basic_print_integer_ret
24c88     2D 00 64 FD | 	ret
24c8c                 | 
24c8c                 | __system___basic_print_unsigned
24c8c     03 4A 05 F6 | 	mov	COUNT_, #3
24c90     A8 00 A0 FD | 	call	#pushregs_
24c94     0A 27 02 F6 | 	mov	local01, arg02
24c98     0B 29 02 F6 | 	mov	local02, arg03
24c9c     0C 2B 02 F6 | 	mov	local03, arg04
24ca0     10 4F B0 FD | 	call	#__system___gettxfunc
24ca4     FD 12 0A F6 | 	mov	arg01, result1 wz
24ca8     00 FA 05 A6 |  if_e	mov	result1, #0
24cac     3A 28 26 54 |  if_ne	bith	local02, #58
24cb0     14 15 02 56 |  if_ne	mov	arg02, local02
24cb4     13 17 02 56 |  if_ne	mov	arg03, local01
24cb8     15 19 02 56 |  if_ne	mov	arg04, local03
24cbc     74 02 B0 5D |  if_ne	call	#__system___fmtnum
24cc0     A7 F0 03 F6 | 	mov	ptra, fp
24cc4     B2 00 A0 FD | 	call	#popregs_
24cc8                 | __system___basic_print_unsigned_ret
24cc8     2D 00 64 FD | 	ret
24ccc                 | 
24ccc                 | __system___basic_get_char
24ccc     03 4A 05 F6 | 	mov	COUNT_, #3
24cd0     A8 00 A0 FD | 	call	#pushregs_
24cd4     20 4F B0 FD | 	call	#__system___getrxfunc
24cd8     FD 26 0A F6 | 	mov	local01, result1 wz
24cdc     01 FA 65 A6 |  if_e	neg	result1, #1
24ce0     28 00 90 AD |  if_e	jmp	#LR__3180
24ce4     13 29 02 F6 | 	mov	local02, local01
24ce8     13 26 46 F7 | 	zerox	local01, #19
24cec     14 28 46 F0 | 	shr	local02, #20
24cf0     02 28 66 F0 | 	shl	local02, #2
24cf4     ED 28 02 F1 | 	add	local02, __methods__
24cf8     14 29 02 FB | 	rdlong	local02, local02
24cfc     F2 2A 02 F6 | 	mov	local03, objptr
24d00     13 E5 01 F6 | 	mov	objptr, local01
24d04     2D 28 62 FD | 	call	local02
24d08     15 E5 01 F6 | 	mov	objptr, local03
24d0c                 | LR__3180
24d0c     A7 F0 03 F6 | 	mov	ptra, fp
24d10     B2 00 A0 FD | 	call	#popregs_
24d14                 | __system___basic_get_char_ret
24d14     2D 00 64 FD | 	ret
24d18                 | 
24d18                 | __system___basic_put
24d18     04 4A 05 F6 | 	mov	COUNT_, #4
24d1c     A8 00 A0 FD | 	call	#pushregs_
24d20     0D 27 02 F6 | 	mov	local01, arg05
24d24     13 19 02 FD | 	qmul	arg04, local01
24d28     09 29 02 F6 | 	mov	local02, arg01
24d2c     0B 2B 02 F6 | 	mov	local03, arg03
24d30     00 14 0E F2 | 	cmp	arg02, #0 wz
24d34     01 14 86 51 |  if_ne	sub	arg02, #1
24d38     14 13 02 56 |  if_ne	mov	arg01, local02
24d3c     00 16 06 56 |  if_ne	mov	arg03, #0
24d40     18 2C 62 FD | 	getqx	local04
24d44     60 45 B0 5D |  if_ne	call	#__system__lseek
24d48     15 15 02 F6 | 	mov	arg02, local03
24d4c     16 17 02 F6 | 	mov	arg03, local04
24d50     14 13 02 F6 | 	mov	arg01, local02
24d54     9C 44 B0 FD | 	call	#__system__write
24d58     FD 2C 02 F6 | 	mov	local04, result1
24d5c     01 2C 56 F2 | 	cmps	local04, #1 wc
24d60     10 00 90 CD |  if_b	jmp	#LR__3190
24d64     16 89 02 F6 | 	mov	muldiva_, local04
24d68     13 8B 02 F6 | 	mov	muldivb_, local01
24d6c     BA 00 A0 FD | 	call	#divide_
24d70     45 2D 02 F6 | 	mov	local04, muldivb_
24d74                 | LR__3190
24d74     16 FB 01 F6 | 	mov	result1, local04
24d78     A7 F0 03 F6 | 	mov	ptra, fp
24d7c     B2 00 A0 FD | 	call	#popregs_
24d80                 | __system___basic_put_ret
24d80     2D 00 64 FD | 	ret
24d84                 | 
24d84                 | __system___basic_get
24d84     04 4A 05 F6 | 	mov	COUNT_, #4
24d88     A8 00 A0 FD | 	call	#pushregs_
24d8c     0D 27 02 F6 | 	mov	local01, arg05
24d90     13 19 02 FD | 	qmul	arg04, local01
24d94     09 29 02 F6 | 	mov	local02, arg01
24d98     0B 2B 02 F6 | 	mov	local03, arg03
24d9c     00 14 0E F2 | 	cmp	arg02, #0 wz
24da0     01 14 86 51 |  if_ne	sub	arg02, #1
24da4     14 13 02 56 |  if_ne	mov	arg01, local02
24da8     00 16 06 56 |  if_ne	mov	arg03, #0
24dac     18 2C 62 FD | 	getqx	local04
24db0     F4 44 B0 5D |  if_ne	call	#__system__lseek
24db4     15 15 02 F6 | 	mov	arg02, local03
24db8     16 17 02 F6 | 	mov	arg03, local04
24dbc     14 13 02 F6 | 	mov	arg01, local02
24dc0     6C 44 B0 FD | 	call	#__system__read
24dc4     FD 2C 02 F6 | 	mov	local04, result1
24dc8     01 2C 56 F2 | 	cmps	local04, #1 wc
24dcc     10 00 90 CD |  if_b	jmp	#LR__3200
24dd0     16 89 02 F6 | 	mov	muldiva_, local04
24dd4     13 8B 02 F6 | 	mov	muldivb_, local01
24dd8     BA 00 A0 FD | 	call	#divide_
24ddc     45 2D 02 F6 | 	mov	local04, muldivb_
24de0                 | LR__3200
24de0     16 FB 01 F6 | 	mov	result1, local04
24de4     A7 F0 03 F6 | 	mov	ptra, fp
24de8     B2 00 A0 FD | 	call	#popregs_
24dec                 | __system___basic_get_ret
24dec     2D 00 64 FD | 	ret
24df0                 | 
24df0                 | __system___fmtchar
24df0     00 4A 05 F6 | 	mov	COUNT_, #0
24df4     A8 00 A0 FD | 	call	#pushregs_
24df8     10 F0 07 F1 | 	add	ptra, #16
24dfc     04 4E 05 F1 | 	add	fp, #4
24e00     A7 12 62 FC | 	wrlong	arg01, fp
24e04     04 4E 05 F1 | 	add	fp, #4
24e08     A7 14 62 FC | 	wrlong	arg02, fp
24e0c     04 4E 05 F1 | 	add	fp, #4
24e10     A7 16 62 FC | 	wrlong	arg03, fp
24e14     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
24e18     A7 16 62 FC | 	wrlong	arg03, fp
24e1c     08 4E 85 F1 | 	sub	fp, #8
24e20     A7 12 02 FB | 	rdlong	arg01, fp
24e24     04 4E 05 F1 | 	add	fp, #4
24e28     A7 14 02 FB | 	rdlong	arg02, fp
24e2c     04 4E 05 F1 | 	add	fp, #4
24e30     A7 16 02 F6 | 	mov	arg03, fp
24e34     0C 4E 85 F1 | 	sub	fp, #12
24e38     0C 00 B0 FD | 	call	#__system___fmtstr
24e3c     A7 F0 03 F6 | 	mov	ptra, fp
24e40     B2 00 A0 FD | 	call	#popregs_
24e44                 | __system___fmtchar_ret
24e44     2D 00 64 FD | 	ret
24e48                 | 
24e48                 | __system___fmtstr
24e48     09 4A 05 F6 | 	mov	COUNT_, #9
24e4c     A8 00 A0 FD | 	call	#pushregs_
24e50     09 27 02 F6 | 	mov	local01, arg01
24e54     0A 29 02 F6 | 	mov	local02, arg02
24e58     0B 2B 02 F6 | 	mov	local03, arg03
24e5c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
24e60     15 13 02 F6 | 	mov	arg01, local03
24e64     09 2D 02 F6 | 	mov	local04, arg01
24e68     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
24e6c                 | LR__3210
24e6c     16 FB C9 FA | 	rdbyte	result1, local04 wz
24e70     01 2C 06 51 |  if_ne	add	local04, #1
24e74     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
24e78                 | LR__3211
24e78     09 2D 82 F1 | 	sub	local04, arg01
24e7c     00 18 0E F2 | 	cmp	arg04, #0 wz
24e80     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
24e84     14 15 02 F6 | 	mov	arg02, local02
24e88     16 17 02 F6 | 	mov	arg03, local04
24e8c     13 13 02 F6 | 	mov	arg01, local01
24e90     02 18 06 F6 | 	mov	arg04, #2
24e94     BC 49 B0 FD | 	call	#__system___fmtpad
24e98     FD 2E 02 F6 | 	mov	local05, result1
24e9c     00 2E 56 F2 | 	cmps	local05, #0 wc
24ea0     17 FB 01 C6 |  if_b	mov	result1, local05
24ea4     80 00 90 CD |  if_b	jmp	#LR__3214
24ea8     01 2C 56 F2 | 	cmps	local04, #1 wc
24eac     50 00 90 CD |  if_b	jmp	#LR__3213
24eb0     16 31 02 F6 | 	mov	local06, local04
24eb4                 | LR__3212
24eb4     13 33 02 F6 | 	mov	local07, local01
24eb8     13 35 02 F6 | 	mov	local08, local01
24ebc     13 32 46 F7 | 	zerox	local07, #19
24ec0     14 34 46 F0 | 	shr	local08, #20
24ec4     02 34 66 F0 | 	shl	local08, #2
24ec8     ED 34 02 F1 | 	add	local08, __methods__
24ecc     1A 35 02 FB | 	rdlong	local08, local08
24ed0     15 13 C2 FA | 	rdbyte	arg01, local03
24ed4     F2 36 02 F6 | 	mov	local09, objptr
24ed8     19 E5 01 F6 | 	mov	objptr, local07
24edc     01 2A 06 F1 | 	add	local03, #1
24ee0     2D 34 62 FD | 	call	local08
24ee4     1B E5 01 F6 | 	mov	objptr, local09
24ee8     FD 36 02 F6 | 	mov	local09, result1
24eec     00 36 56 F2 | 	cmps	local09, #0 wc
24ef0     1B FB 01 C6 |  if_b	mov	result1, local09
24ef4     30 00 90 CD |  if_b	jmp	#LR__3214
24ef8     1B 2F 02 F1 | 	add	local05, local09
24efc     ED 31 6E FB | 	djnz	local06, #LR__3212
24f00                 | LR__3213
24f00     14 15 02 F6 | 	mov	arg02, local02
24f04     16 17 02 F6 | 	mov	arg03, local04
24f08     13 13 02 F6 | 	mov	arg01, local01
24f0c     01 18 06 F6 | 	mov	arg04, #1
24f10     40 49 B0 FD | 	call	#__system___fmtpad
24f14     FD 36 02 F6 | 	mov	local09, result1
24f18     00 36 56 F2 | 	cmps	local09, #0 wc
24f1c     1B FB 01 C6 |  if_b	mov	result1, local09
24f20     1B 2F 02 31 |  if_ae	add	local05, local09
24f24     17 FB 01 36 |  if_ae	mov	result1, local05
24f28                 | LR__3214
24f28     A7 F0 03 F6 | 	mov	ptra, fp
24f2c     B2 00 A0 FD | 	call	#popregs_
24f30                 | __system___fmtstr_ret
24f30     2D 00 64 FD | 	ret
24f34                 | 
24f34                 | __system___fmtnum
24f34     0B 4A 05 F6 | 	mov	COUNT_, #11
24f38     A8 00 A0 FD | 	call	#pushregs_
24f3c     09 27 02 F6 | 	mov	local01, arg01
24f40     0A 29 02 F6 | 	mov	local02, arg02
24f44     0B 2B 02 F6 | 	mov	local03, arg03
24f48     0C 2D 02 F6 | 	mov	local04, arg04
24f4c     F8 2F 02 F6 | 	mov	local05, ptra
24f50     17 31 02 F6 | 	mov	local06, local05
24f54     00 32 06 F6 | 	mov	local07, #0
24f58     14 35 02 F6 | 	mov	local08, local02
24f5c     10 34 46 F0 | 	shr	local08, #16
24f60     3F 34 06 F5 | 	and	local08, #63
24f64     14 37 E2 F8 | 	getbyte	local09, local02, #0
24f68     14 39 02 F6 | 	mov	local10, local02
24f6c     1A 38 46 F0 | 	shr	local10, #26
24f70     03 38 06 F5 | 	and	local10, #3
24f74     1C 3B 02 F6 | 	mov	local11, local10
24f78     01 34 56 F2 | 	cmps	local08, #1 wc
24f7c     44 F0 07 F1 | 	add	ptra, #68
24f80     01 34 86 31 |  if_ae	sub	local08, #1
24f84     41 36 56 F2 | 	cmps	local09, #65 wc
24f88     00 36 0E C2 |  if_b	cmp	local09, #0 wz
24f8c     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
24f90     03 3A 0E F2 | 	cmp	local11, #3 wz
24f94     00 3A 06 A6 |  if_e	mov	local11, #0
24f98     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
24f9c     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
24fa0     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
24fa4     00 3A 0E F2 | 	cmp	local11, #0 wz
24fa8     4C 00 90 AD |  if_e	jmp	#LR__3223
24fac     01 32 06 F6 | 	mov	local07, #1
24fb0     1B 35 0A F2 | 	cmp	local08, local09 wz
24fb4     18 00 90 5D |  if_ne	jmp	#LR__3221
24fb8     05 34 6E FB | 	djnz	local08, #LR__3220
24fbc     13 13 02 F6 | 	mov	arg01, local01
24fc0     14 15 02 F6 | 	mov	arg02, local02
24fc4     23 16 06 F6 | 	mov	arg03, #35
24fc8     24 FE BF FD | 	call	#__system___fmtchar
24fcc     88 00 90 FD | 	jmp	#LR__3227
24fd0                 | LR__3220
24fd0                 | LR__3221
24fd0     02 3A 0E F2 | 	cmp	local11, #2 wz
24fd4     18 39 02 A6 |  if_e	mov	local10, local06
24fd8     01 30 06 A1 |  if_e	add	local06, #1
24fdc     1C 41 48 AC |  if_e	wrbyte	#32, local10
24fe0     14 00 90 AD |  if_e	jmp	#LR__3222
24fe4     04 3A 0E F2 | 	cmp	local11, #4 wz
24fe8     18 5B 48 AC |  if_e	wrbyte	#45, local06
24fec     01 30 06 A1 |  if_e	add	local06, #1
24ff0     18 57 48 5C |  if_ne	wrbyte	#43, local06
24ff4     01 30 06 51 |  if_ne	add	local06, #1
24ff8                 | LR__3222
24ff8                 | LR__3223
24ff8     18 13 02 F6 | 	mov	arg01, local06
24ffc     15 15 02 F6 | 	mov	arg02, local03
25000     16 17 02 F6 | 	mov	arg03, local04
25004     1A 19 02 F6 | 	mov	arg04, local08
25008     00 1A 06 F6 | 	mov	arg05, #0
2500c     1D 28 2E F4 | 	testbn	local02, #29 wz
25010     01 1A 06 56 |  if_ne	mov	arg05, #1
25014     04 49 B0 FD | 	call	#__system___uitoa
25018     FD 32 02 F1 | 	add	local07, result1
2501c     1B 33 5A F2 | 	cmps	local07, local09 wcz
25020     24 00 90 ED |  if_be	jmp	#LR__3226
25024     97 0E 48 FB | 	callpa	#(@LR__3225-@LR__3224)>>2,fcache_load_ptr_
25028                 | LR__3224
25028     1B 39 02 F6 | 	mov	local10, local09
2502c     01 38 56 F2 | 	cmps	local10, #1 wc
25030     01 36 86 F1 | 	sub	local09, #1
25034     18 39 02 36 |  if_ae	mov	local10, local06
25038     01 30 06 31 |  if_ae	add	local06, #1
2503c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
25040     E4 FF 9F 3D |  if_ae	jmp	#LR__3224
25044                 | LR__3225
25044     18 01 48 FC | 	wrbyte	#0, local06
25048                 | LR__3226
25048     13 13 02 F6 | 	mov	arg01, local01
2504c     14 15 02 F6 | 	mov	arg02, local02
25050     17 17 02 F6 | 	mov	arg03, local05
25054     F0 FD BF FD | 	call	#__system___fmtstr
25058                 | LR__3227
25058     A7 F0 03 F6 | 	mov	ptra, fp
2505c     B2 00 A0 FD | 	call	#popregs_
25060                 | __system___fmtnum_ret
25060     2D 00 64 FD | 	ret
25064                 | 
25064                 | __system___fmtfloat
25064     10 4A 05 F6 | 	mov	COUNT_, #16
25068     A8 00 A0 FD | 	call	#pushregs_
2506c     24 F1 07 F1 | 	add	ptra, #292
25070     04 4E 05 F1 | 	add	fp, #4
25074     A7 12 62 FC | 	wrlong	arg01, fp
25078     04 4E 05 F1 | 	add	fp, #4
2507c     A7 14 62 FC | 	wrlong	arg02, fp
25080     04 4E 05 F1 | 	add	fp, #4
25084     A7 16 62 FC | 	wrlong	arg03, fp
25088     04 4E 05 F1 | 	add	fp, #4
2508c     A7 18 62 FC | 	wrlong	arg04, fp
25090     0C 4E 05 F1 | 	add	fp, #12
25094     A7 14 68 FC | 	wrlong	#10, fp
25098     08 4E 05 F1 | 	add	fp, #8
2509c     A7 00 68 FC | 	wrlong	#0, fp
250a0     08 4E 05 F1 | 	add	fp, #8
250a4     A7 00 68 FC | 	wrlong	#0, fp
250a8     08 4E 05 F1 | 	add	fp, #8
250ac     A7 00 68 FC | 	wrlong	#0, fp
250b0     04 4E 05 F1 | 	add	fp, #4
250b4     A7 04 68 FC | 	wrlong	#2, fp
250b8     04 4E 05 F1 | 	add	fp, #4
250bc     A7 00 68 FC | 	wrlong	#0, fp
250c0     04 4E 05 F1 | 	add	fp, #4
250c4     A7 00 68 FC | 	wrlong	#0, fp
250c8     04 4E 05 F1 | 	add	fp, #4
250cc     A7 00 68 FC | 	wrlong	#0, fp
250d0     04 4E 05 F1 | 	add	fp, #4
250d4     A7 00 68 FC | 	wrlong	#0, fp
250d8     18 4E 05 F1 | 	add	fp, #24
250dc     A7 00 68 FC | 	wrlong	#0, fp
250e0     68 4E 05 F1 | 	add	fp, #104
250e4     A7 26 02 F6 | 	mov	local01, fp
250e8     08 4E 85 F1 | 	sub	fp, #8
250ec     A7 26 62 FC | 	wrlong	local01, fp
250f0     04 4E 05 F1 | 	add	fp, #4
250f4     A7 26 62 FC | 	wrlong	local01, fp
250f8     BC 4E 85 F1 | 	sub	fp, #188
250fc     A7 26 02 FB | 	rdlong	local01, fp
25100     10 26 46 F0 | 	shr	local01, #16
25104     3F 26 06 F5 | 	and	local01, #63
25108     B0 4E 05 F1 | 	add	fp, #176
2510c     A7 26 62 FC | 	wrlong	local01, fp
25110     B0 4E 85 F1 | 	sub	fp, #176
25114     A7 26 02 FB | 	rdlong	local01, fp
25118     1C 26 46 F0 | 	shr	local01, #28
2511c     01 26 06 F5 | 	and	local01, #1
25120     08 4F 05 F1 | 	add	fp, #264
25124     A7 26 62 FC | 	wrlong	local01, fp
25128     58 4E 85 F1 | 	sub	fp, #88
2512c     A7 26 0A FB | 	rdlong	local01, fp wz
25130     B8 4E 85 F1 | 	sub	fp, #184
25134     3C 00 90 5D |  if_ne	jmp	#LR__3231
25138     10 4E 05 F1 | 	add	fp, #16
2513c     A7 26 02 FB | 	rdlong	local01, fp
25140     10 4E 85 F1 | 	sub	fp, #16
25144     61 26 0E F2 | 	cmp	local01, #97 wz
25148     18 00 90 5D |  if_ne	jmp	#LR__3230
2514c     B8 4E 05 F1 | 	add	fp, #184
25150     A7 1A 68 FC | 	wrlong	#13, fp
25154     84 4E 85 F1 | 	sub	fp, #132
25158     A7 02 68 FC | 	wrlong	#1, fp
2515c     34 4E 85 F1 | 	sub	fp, #52
25160     24 00 90 FD | 	jmp	#LR__3232
25164                 | LR__3230
25164     B8 4E 05 F1 | 	add	fp, #184
25168     A7 0C 68 FC | 	wrlong	#6, fp
2516c     B8 4E 85 F1 | 	sub	fp, #184
25170     14 00 90 FD | 	jmp	#LR__3232
25174                 | LR__3231
25174     B8 4E 05 F1 | 	add	fp, #184
25178     A7 26 02 FB | 	rdlong	local01, fp
2517c     01 26 86 F1 | 	sub	local01, #1
25180     A7 26 62 FC | 	wrlong	local01, fp
25184     B8 4E 85 F1 | 	sub	fp, #184
25188                 | LR__3232
25188     08 4E 05 F1 | 	add	fp, #8
2518c     A7 26 02 FB | 	rdlong	local01, fp
25190     16 26 46 F0 | 	shr	local01, #22
25194     03 26 06 F5 | 	and	local01, #3
25198     04 4F 05 F1 | 	add	fp, #260
2519c     A7 26 62 FC | 	wrlong	local01, fp
251a0     04 4F 85 F1 | 	sub	fp, #260
251a4     A7 26 02 FB | 	rdlong	local01, fp
251a8     1D 26 46 F0 | 	shr	local01, #29
251ac     01 26 06 F5 | 	and	local01, #1
251b0     B4 4E 05 F1 | 	add	fp, #180
251b4     A7 26 62 FC | 	wrlong	local01, fp
251b8     B4 4E 85 F1 | 	sub	fp, #180
251bc     A7 26 02 FB | 	rdlong	local01, fp
251c0     13 27 EA F8 | 	getbyte	local01, local01, #1
251c4     60 4E 05 F1 | 	add	fp, #96
251c8     A7 26 62 FC | 	wrlong	local01, fp
251cc     60 4E 85 F1 | 	sub	fp, #96
251d0     A7 26 02 FB | 	rdlong	local01, fp
251d4     13 27 E2 F8 | 	getbyte	local01, local01, #0
251d8     64 4E 05 F1 | 	add	fp, #100
251dc     A7 26 62 FC | 	wrlong	local01, fp
251e0     00 26 06 F6 | 	mov	local01, #0
251e4     5C 4E 85 F1 | 	sub	fp, #92
251e8     A7 1A 02 FB | 	rdlong	arg05, fp
251ec     65 1A 0E F2 | 	cmp	arg05, #101 wz
251f0     01 26 06 A6 |  if_e	mov	local01, #1
251f4     14 4E 05 F1 | 	add	fp, #20
251f8     A7 26 62 FC | 	wrlong	local01, fp
251fc     98 4E 05 F1 | 	add	fp, #152
25200     A7 28 0A FB | 	rdlong	local02, fp wz
25204     45 26 06 56 |  if_ne	mov	local01, #69
25208     65 26 06 A6 |  if_e	mov	local01, #101
2520c     8C 4E 85 F1 | 	sub	fp, #140
25210     A7 26 62 FC | 	wrlong	local01, fp
25214     20 4E 85 F1 | 	sub	fp, #32
25218     A7 26 02 FB | 	rdlong	local01, fp
2521c     10 4E 85 F1 | 	sub	fp, #16
25220     61 26 0E F2 | 	cmp	local01, #97 wz
25224     4C 00 90 5D |  if_ne	jmp	#LR__3233
25228     24 4E 05 F1 | 	add	fp, #36
2522c     A7 02 68 FC | 	wrlong	#1, fp
25230     98 4E 05 F1 | 	add	fp, #152
25234     A7 28 0A FB | 	rdlong	local02, fp wz
25238     50 26 06 56 |  if_ne	mov	local01, #80
2523c     70 26 06 A6 |  if_e	mov	local01, #112
25240     8C 4E 85 F1 | 	sub	fp, #140
25244     A7 26 62 FC | 	wrlong	local01, fp
25248     14 4E 85 F1 | 	sub	fp, #20
2524c     A7 04 68 FC | 	wrlong	#2, fp
25250     1C 4E 05 F1 | 	add	fp, #28
25254     A7 02 68 FC | 	wrlong	#1, fp
25258     84 4E 05 F1 | 	add	fp, #132
2525c     A7 28 0A FB | 	rdlong	local02, fp wz
25260     58 26 06 56 |  if_ne	mov	local01, #88
25264     78 26 06 A6 |  if_e	mov	local01, #120
25268     7C 4E 85 F1 | 	sub	fp, #124
2526c     A7 26 62 FC | 	wrlong	local01, fp
25270     40 4E 85 F1 | 	sub	fp, #64
25274                 | LR__3233
25274     10 4E 05 F1 | 	add	fp, #16
25278     A7 26 02 FB | 	rdlong	local01, fp
2527c     10 4E 85 F1 | 	sub	fp, #16
25280     23 26 0E F2 | 	cmp	local01, #35 wz
25284     3C 00 90 5D |  if_ne	jmp	#LR__3236
25288     48 4E 05 F1 | 	add	fp, #72
2528c     A7 02 68 FC | 	wrlong	#1, fp
25290     C8 4E 05 F1 | 	add	fp, #200
25294     A7 26 0A FB | 	rdlong	local01, fp wz
25298     10 4F 85 F1 | 	sub	fp, #272
2529c     18 00 90 AD |  if_e	jmp	#LR__3234
252a0     10 4E 05 F1 | 	add	fp, #16
252a4     A7 CC 68 FC | 	wrlong	#102, fp
252a8     00 4F 05 F1 | 	add	fp, #256
252ac     A7 00 68 FC | 	wrlong	#0, fp
252b0     10 4F 85 F1 | 	sub	fp, #272
252b4     0C 00 90 FD | 	jmp	#LR__3235
252b8                 | LR__3234
252b8     10 4F 05 F1 | 	add	fp, #272
252bc     A7 02 68 FC | 	wrlong	#1, fp
252c0     10 4F 85 F1 | 	sub	fp, #272
252c4                 | LR__3235
252c4                 | LR__3236
252c4     08 4E 05 F1 | 	add	fp, #8
252c8     A7 26 02 FB | 	rdlong	local01, fp
252cc     1A 26 46 F0 | 	shr	local01, #26
252d0     03 26 06 F5 | 	and	local01, #3
252d4     5C 4E 05 F1 | 	add	fp, #92
252d8     A7 26 62 FC | 	wrlong	local01, fp
252dc     58 4E 85 F1 | 	sub	fp, #88
252e0     A7 FA 01 FB | 	rdlong	result1, fp
252e4     0C 4E 85 F1 | 	sub	fp, #12
252e8     1F FA 4D F0 | 	shr	result1, #31 wz
252ec     20 00 90 AD |  if_e	jmp	#LR__3237
252f0     2C 4E 05 F1 | 	add	fp, #44
252f4     A7 5A 68 FC | 	wrlong	#45, fp
252f8     20 4E 85 F1 | 	sub	fp, #32
252fc     A7 FA 01 FB | 	rdlong	result1, fp
25300     1F FA E5 F4 | 	bitnot	result1, #31
25304     A7 FA 61 FC | 	wrlong	result1, fp
25308     0C 4E 85 F1 | 	sub	fp, #12
2530c     3C 00 90 FD | 	jmp	#LR__3239
25310                 | LR__3237
25310     64 4E 05 F1 | 	add	fp, #100
25314     A7 26 02 FB | 	rdlong	local01, fp
25318     64 4E 85 F1 | 	sub	fp, #100
2531c     01 26 0E F2 | 	cmp	local01, #1 wz
25320     2C 4E 05 A1 |  if_e	add	fp, #44
25324     A7 56 68 AC |  if_e	wrlong	#43, fp
25328     2C 4E 85 A1 |  if_e	sub	fp, #44
2532c     1C 00 90 AD |  if_e	jmp	#LR__3238
25330     64 4E 05 F1 | 	add	fp, #100
25334     A7 26 02 FB | 	rdlong	local01, fp
25338     64 4E 85 F1 | 	sub	fp, #100
2533c     02 26 0E F2 | 	cmp	local01, #2 wz
25340     2C 4E 05 A1 |  if_e	add	fp, #44
25344     A7 40 68 AC |  if_e	wrlong	#32, fp
25348     2C 4E 85 A1 |  if_e	sub	fp, #44
2534c                 | LR__3238
2534c                 | LR__3239
2534c     08 4E 05 F1 | 	add	fp, #8
25350     A7 26 02 FB | 	rdlong	local01, fp
25354     18 26 46 F0 | 	shr	local01, #24
25358     03 26 06 F5 | 	and	local01, #3
2535c     3C 4E 05 F1 | 	add	fp, #60
25360     A7 26 62 FC | 	wrlong	local01, fp
25364     00 26 06 F6 | 	mov	local01, #0
25368     18 4E 85 F1 | 	sub	fp, #24
2536c     A7 2A 0A FB | 	rdlong	local03, fp wz
25370     2C 4E 85 F1 | 	sub	fp, #44
25374     18 00 90 5D |  if_ne	jmp	#LR__3240
25378     1C 4E 05 F1 | 	add	fp, #28
2537c     A7 2C 02 FB | 	rdlong	local04, fp
25380     1C 4E 85 F1 | 	sub	fp, #28
25384     16 2F 02 F6 | 	mov	local05, local04
25388     0A 2E 0E F2 | 	cmp	local05, #10 wz
2538c     04 00 90 AD |  if_e	jmp	#LR__3241
25390                 | LR__3240
25390     01 26 66 F5 | 	xor	local01, #1
25394                 | LR__3241
25394     3C 4E 05 F1 | 	add	fp, #60
25398     A7 26 62 FC | 	wrlong	local01, fp
2539c     3C 4E 85 F1 | 	sub	fp, #60
253a0     00 26 0E F2 | 	cmp	local01, #0 wz
253a4     0C 01 90 AD |  if_e	jmp	#LR__3243
253a8     44 4E 05 F1 | 	add	fp, #68
253ac     A7 2E 02 FB | 	rdlong	local05, fp
253b0     44 4E 85 F1 | 	sub	fp, #68
253b4     17 2B 02 F6 | 	mov	local03, local05
253b8     02 2A 0E F2 | 	cmp	local03, #2 wz
253bc     F4 00 90 5D |  if_ne	jmp	#LR__3243
253c0     0C 4F 05 F1 | 	add	fp, #268
253c4     A7 30 02 FB | 	rdlong	local06, fp
253c8     0C 4F 85 F1 | 	sub	fp, #268
253cc     18 2D 02 F6 | 	mov	local04, local06
253d0     02 2C 0E F2 | 	cmp	local04, #2 wz
253d4     DC 00 90 AD |  if_e	jmp	#LR__3243
253d8     C0 4E 05 F1 | 	add	fp, #192
253dc     A7 12 02 FB | 	rdlong	arg01, fp
253e0     94 4E 85 F1 | 	sub	fp, #148
253e4     A7 14 02 FB | 	rdlong	arg02, fp
253e8     14 4E 05 F1 | 	add	fp, #20
253ec     A7 16 02 FB | 	rdlong	arg03, fp
253f0     40 4E 85 F1 | 	sub	fp, #64
253f4     8C 47 B0 FD | 	call	#__system__emitsign_0539
253f8     14 4F 05 F1 | 	add	fp, #276
253fc     A7 FA 61 FC | 	wrlong	result1, fp
25400     14 4F 85 F1 | 	sub	fp, #276
25404     00 FA 55 F2 | 	cmps	result1, #0 wc
25408     14 4F 05 C1 |  if_b	add	fp, #276
2540c     A7 FA 01 CB |  if_b	rdlong	result1, fp
25410     14 4F 85 C1 |  if_b	sub	fp, #276
25414     6C 0B 90 CD |  if_b	jmp	#LR__3293
25418     C0 4E 05 F1 | 	add	fp, #192
2541c     A7 26 02 FB | 	rdlong	local01, fp
25420     54 4E 05 F1 | 	add	fp, #84
25424     A7 2E 02 FB | 	rdlong	local05, fp
25428     17 2B 02 F6 | 	mov	local03, local05
2542c     17 27 02 F1 | 	add	local01, local05
25430     54 4E 85 F1 | 	sub	fp, #84
25434     A7 26 62 FC | 	wrlong	local01, fp
25438     58 4E 85 F1 | 	sub	fp, #88
2543c     A7 26 0A FB | 	rdlong	local01, fp wz
25440     68 4E 85 F1 | 	sub	fp, #104
25444     60 00 90 AD |  if_e	jmp	#LR__3242
25448     68 4E 05 F1 | 	add	fp, #104
2544c     A7 26 02 FB | 	rdlong	local01, fp
25450     AC 4E 05 F1 | 	add	fp, #172
25454     A7 2A 02 FB | 	rdlong	local03, fp
25458     15 27 82 F1 | 	sub	local01, local03
2545c     AC 4E 85 F1 | 	sub	fp, #172
25460     A7 26 62 FC | 	wrlong	local01, fp
25464     68 4E 85 F1 | 	sub	fp, #104
25468     00 26 56 F2 | 	cmps	local01, #0 wc
2546c     68 4E 05 C1 |  if_b	add	fp, #104
25470     A7 00 68 CC |  if_b	wrlong	#0, fp
25474     68 4E 85 C1 |  if_b	sub	fp, #104
25478     08 4E 05 F1 | 	add	fp, #8
2547c     A7 26 02 FB | 	rdlong	local01, fp
25480     E8 26 06 F4 | 	bitl	local01, #232
25484     A7 26 62 FC | 	wrlong	local01, fp
25488     60 4E 05 F1 | 	add	fp, #96
2548c     A7 2E 02 FB | 	rdlong	local05, fp
25490     17 2B 02 F6 | 	mov	local03, local05
25494     08 2A 66 F0 | 	shl	local03, #8
25498     15 27 42 F5 | 	or	local01, local03
2549c     60 4E 85 F1 | 	sub	fp, #96
254a0     A7 26 62 FC | 	wrlong	local01, fp
254a4     08 4E 85 F1 | 	sub	fp, #8
254a8                 | LR__3242
254a8     3C 4E 05 F1 | 	add	fp, #60
254ac     A7 00 68 FC | 	wrlong	#0, fp
254b0     3C 4E 85 F1 | 	sub	fp, #60
254b4                 | LR__3243
254b4     0C 4E 05 F1 | 	add	fp, #12
254b8     A7 12 02 FB | 	rdlong	arg01, fp
254bc     0C 4E 85 F1 | 	sub	fp, #12
254c0     EC 21 B0 FD | 	call	#__system____builtin_ilogb
254c4     FF FF 3F FF 
254c8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
254cc     50 00 90 5D |  if_ne	jmp	#LR__3245
254d0     2C 4E 05 F1 | 	add	fp, #44
254d4     A7 26 0A FB | 	rdlong	local01, fp wz
254d8     2C 4E 85 F1 | 	sub	fp, #44
254dc     24 00 90 AD |  if_e	jmp	#LR__3244
254e0     C0 4E 05 F1 | 	add	fp, #192
254e4     A7 28 02 FB | 	rdlong	local02, fp
254e8     14 2B 02 F6 | 	mov	local03, local02
254ec     01 2A 06 F1 | 	add	local03, #1
254f0     A7 2A 62 FC | 	wrlong	local03, fp
254f4     94 4E 85 F1 | 	sub	fp, #148
254f8     A7 2C 02 FB | 	rdlong	local04, fp
254fc     2C 4E 85 F1 | 	sub	fp, #44
25500     14 2D 42 FC | 	wrbyte	local04, local02
25504                 | LR__3244
25504     C0 4E 05 F1 | 	add	fp, #192
25508     A7 12 02 FB | 	rdlong	arg01, fp
2550c     C0 4E 85 F1 | 	sub	fp, #192
25510     9D 01 00 FF 
25514     22 14 06 F6 | 	mov	arg02, ##@LR__5241
25518     AC E9 BF FD | 	call	#__system____builtin_strcpy
2551c     A4 08 90 FD | 	jmp	#LR__3281
25520                 | LR__3245
25520     0C 4E 05 F1 | 	add	fp, #12
25524     A7 28 02 FB | 	rdlong	local02, fp
25528     0C 4E 85 F1 | 	sub	fp, #12
2552c     14 13 02 F6 | 	mov	arg01, local02
25530     7C 21 B0 FD | 	call	#__system____builtin_ilogb
25534     00 00 40 FF 
25538     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2553c     50 00 90 5D |  if_ne	jmp	#LR__3247
25540     2C 4E 05 F1 | 	add	fp, #44
25544     A7 26 0A FB | 	rdlong	local01, fp wz
25548     2C 4E 85 F1 | 	sub	fp, #44
2554c     24 00 90 AD |  if_e	jmp	#LR__3246
25550     C0 4E 05 F1 | 	add	fp, #192
25554     A7 28 02 FB | 	rdlong	local02, fp
25558     14 2B 02 F6 | 	mov	local03, local02
2555c     01 2A 06 F1 | 	add	local03, #1
25560     A7 2A 62 FC | 	wrlong	local03, fp
25564     94 4E 85 F1 | 	sub	fp, #148
25568     A7 2C 02 FB | 	rdlong	local04, fp
2556c     2C 4E 85 F1 | 	sub	fp, #44
25570     14 2D 42 FC | 	wrbyte	local04, local02
25574                 | LR__3246
25574     C0 4E 05 F1 | 	add	fp, #192
25578     A7 12 02 FB | 	rdlong	arg01, fp
2557c     C0 4E 85 F1 | 	sub	fp, #192
25580     9D 01 00 FF 
25584     26 14 06 F6 | 	mov	arg02, ##@LR__5242
25588     3C E9 BF FD | 	call	#__system____builtin_strcpy
2558c     34 08 90 FD | 	jmp	#LR__3281
25590                 | LR__3247
25590     10 4E 05 F1 | 	add	fp, #16
25594     A7 26 02 FB | 	rdlong	local01, fp
25598     10 4E 85 F1 | 	sub	fp, #16
2559c     67 26 0E F2 | 	cmp	local01, #103 wz
255a0     10 4E 05 51 |  if_ne	add	fp, #16
255a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
255a8     10 4E 85 51 |  if_ne	sub	fp, #16
255ac     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
255b0     94 01 90 5D |  if_ne	jmp	#LR__3252
255b4     0C 4E 05 F1 | 	add	fp, #12
255b8     A7 12 02 FB | 	rdlong	arg01, fp
255bc     08 4E 05 F1 | 	add	fp, #8
255c0     A7 14 02 F6 | 	mov	arg02, fp
255c4     0C 4E 05 F1 | 	add	fp, #12
255c8     A7 16 02 F6 | 	mov	arg03, fp
255cc     98 4E 05 F1 | 	add	fp, #152
255d0     A7 18 02 FB | 	rdlong	arg04, fp
255d4     9C 4E 85 F1 | 	sub	fp, #156
255d8     A7 1A 02 FB | 	rdlong	arg05, fp
255dc     1C 4E 85 F1 | 	sub	fp, #28
255e0     AC 43 B0 FD | 	call	#__system__disassemble_0537
255e4     10 4E 05 F1 | 	add	fp, #16
255e8     A7 26 02 FB | 	rdlong	local01, fp
255ec     10 4E 85 F1 | 	sub	fp, #16
255f0     23 26 0E F2 | 	cmp	local01, #35 wz
255f4     A0 00 90 5D |  if_ne	jmp	#LR__3249
255f8     20 4E 05 F1 | 	add	fp, #32
255fc     A7 26 02 FB | 	rdlong	local01, fp
25600     98 4E 05 F1 | 	add	fp, #152
25604     A7 2A 02 FB | 	rdlong	local03, fp
25608     B8 4E 85 F1 | 	sub	fp, #184
2560c     15 27 5A F2 | 	cmps	local01, local03 wcz
25610     24 4E 05 11 |  if_a	add	fp, #36
25614     A7 02 68 1C |  if_a	wrlong	#1, fp
25618     24 4E 85 11 |  if_a	sub	fp, #36
2561c     A4 01 90 1D |  if_a	jmp	#LR__3255
25620     20 4E 05 F1 | 	add	fp, #32
25624     A7 26 02 FB | 	rdlong	local01, fp
25628     20 4E 85 F1 | 	sub	fp, #32
2562c     00 26 56 F2 | 	cmps	local01, #0 wc
25630     2C 00 90 3D |  if_ae	jmp	#LR__3248
25634     B8 4E 05 F1 | 	add	fp, #184
25638     A7 26 02 FB | 	rdlong	local01, fp
2563c     13 27 62 F6 | 	neg	local01, local01
25640     98 4E 85 F1 | 	sub	fp, #152
25644     A7 2A 02 FB | 	rdlong	local03, fp
25648     20 4E 85 F1 | 	sub	fp, #32
2564c     13 2B 5A F2 | 	cmps	local03, local01 wcz
25650     24 4E 05 E1 |  if_be	add	fp, #36
25654     A7 02 68 EC |  if_be	wrlong	#1, fp
25658     24 4E 85 E1 |  if_be	sub	fp, #36
2565c     64 01 90 FD | 	jmp	#LR__3255
25660                 | LR__3248
25660     20 4E 05 F1 | 	add	fp, #32
25664     A7 26 02 FB | 	rdlong	local01, fp
25668     20 4E 85 F1 | 	sub	fp, #32
2566c     01 26 56 F2 | 	cmps	local01, #1 wc
25670     50 01 90 CD |  if_b	jmp	#LR__3255
25674     B8 4E 05 F1 | 	add	fp, #184
25678     A7 26 02 FB | 	rdlong	local01, fp
2567c     98 4E 85 F1 | 	sub	fp, #152
25680     A7 2A 02 FB | 	rdlong	local03, fp
25684     15 27 82 F1 | 	sub	local01, local03
25688     98 4E 05 F1 | 	add	fp, #152
2568c     A7 26 62 FC | 	wrlong	local01, fp
25690     B8 4E 85 F1 | 	sub	fp, #184
25694     2C 01 90 FD | 	jmp	#LR__3255
25698                 | LR__3249
25698     00 26 06 F6 | 	mov	local01, #0
2569c     08 4E 05 F1 | 	add	fp, #8
256a0     A7 28 02 FB | 	rdlong	local02, fp
256a4     1C 28 46 F0 | 	shr	local02, #28
256a8     01 28 0E F5 | 	and	local02, #1 wz
256ac     01 26 06 A6 |  if_e	mov	local01, #1
256b0     2C 4E 05 F1 | 	add	fp, #44
256b4     A7 26 62 FC | 	wrlong	local01, fp
256b8     14 4E 85 F1 | 	sub	fp, #20
256bc     A7 26 02 FB | 	rdlong	local01, fp
256c0     98 4E 05 F1 | 	add	fp, #152
256c4     A7 2A 02 FB | 	rdlong	local03, fp
256c8     B8 4E 85 F1 | 	sub	fp, #184
256cc     15 27 52 F2 | 	cmps	local01, local03 wc
256d0     18 00 90 3D |  if_ae	jmp	#LR__3250
256d4     20 4E 05 F1 | 	add	fp, #32
256d8     A7 2C 02 FB | 	rdlong	local04, fp
256dc     20 4E 85 F1 | 	sub	fp, #32
256e0     FF FF 7F FF 
256e4     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
256e8     10 00 90 3D |  if_ae	jmp	#LR__3251
256ec                 | LR__3250
256ec     24 4E 05 F1 | 	add	fp, #36
256f0     A7 02 68 FC | 	wrlong	#1, fp
256f4     24 4E 85 F1 | 	sub	fp, #36
256f8     C8 00 90 FD | 	jmp	#LR__3255
256fc                 | LR__3251
256fc     B8 4E 05 F1 | 	add	fp, #184
25700     A7 2C 02 FB | 	rdlong	local04, fp
25704     98 4E 85 F1 | 	sub	fp, #152
25708     A7 2A 02 FB | 	rdlong	local03, fp
2570c     15 2D 82 F1 | 	sub	local04, local03
25710     98 4E 05 F1 | 	add	fp, #152
25714     A7 2C 62 FC | 	wrlong	local04, fp
25718     AC 4E 85 F1 | 	sub	fp, #172
2571c     A7 12 02 FB | 	rdlong	arg01, fp
25720     08 4E 05 F1 | 	add	fp, #8
25724     A7 14 02 F6 | 	mov	arg02, fp
25728     0C 4E 05 F1 | 	add	fp, #12
2572c     A7 16 02 F6 | 	mov	arg03, fp
25730     16 19 62 F6 | 	neg	arg04, local04
25734     04 4E 85 F1 | 	sub	fp, #4
25738     A7 1A 02 FB | 	rdlong	arg05, fp
2573c     1C 4E 85 F1 | 	sub	fp, #28
25740     4C 42 B0 FD | 	call	#__system__disassemble_0537
25744     7C 00 90 FD | 	jmp	#LR__3255
25748                 | LR__3252
25748     24 4E 05 F1 | 	add	fp, #36
2574c     A7 26 0A FB | 	rdlong	local01, fp wz
25750     24 4E 85 F1 | 	sub	fp, #36
25754     34 00 90 AD |  if_e	jmp	#LR__3253
25758     0C 4E 05 F1 | 	add	fp, #12
2575c     A7 12 02 FB | 	rdlong	arg01, fp
25760     08 4E 05 F1 | 	add	fp, #8
25764     A7 14 02 F6 | 	mov	arg02, fp
25768     0C 4E 05 F1 | 	add	fp, #12
2576c     A7 16 02 F6 | 	mov	arg03, fp
25770     98 4E 05 F1 | 	add	fp, #152
25774     A7 18 02 FB | 	rdlong	arg04, fp
25778     9C 4E 85 F1 | 	sub	fp, #156
2577c     A7 1A 02 FB | 	rdlong	arg05, fp
25780     1C 4E 85 F1 | 	sub	fp, #28
25784     08 42 B0 FD | 	call	#__system__disassemble_0537
25788     38 00 90 FD | 	jmp	#LR__3254
2578c                 | LR__3253
2578c     0C 4E 05 F1 | 	add	fp, #12
25790     A7 12 02 FB | 	rdlong	arg01, fp
25794     08 4E 05 F1 | 	add	fp, #8
25798     A7 14 02 F6 | 	mov	arg02, fp
2579c     0C 4E 05 F1 | 	add	fp, #12
257a0     A7 16 02 F6 | 	mov	arg03, fp
257a4     98 4E 05 F1 | 	add	fp, #152
257a8     A7 2C 02 FB | 	rdlong	local04, fp
257ac     01 2C 06 F1 | 	add	local04, #1
257b0     16 19 62 F6 | 	neg	arg04, local04
257b4     9C 4E 85 F1 | 	sub	fp, #156
257b8     A7 1A 02 FB | 	rdlong	arg05, fp
257bc     1C 4E 85 F1 | 	sub	fp, #28
257c0     CC 41 B0 FD | 	call	#__system__disassemble_0537
257c4                 | LR__3254
257c4                 | LR__3255
257c4     1C 4E 05 F1 | 	add	fp, #28
257c8     A7 26 02 FB | 	rdlong	local01, fp
257cc     1C 4E 85 F1 | 	sub	fp, #28
257d0     02 26 0E F2 | 	cmp	local01, #2 wz
257d4     4C 00 90 5D |  if_ne	jmp	#LR__3258
257d8     1C 4E 05 F1 | 	add	fp, #28
257dc     A7 20 68 FC | 	wrlong	#16, fp
257e0     1C 4E 85 F1 | 	sub	fp, #28
257e4                 | LR__3256
257e4     14 4E 05 F1 | 	add	fp, #20
257e8     A7 26 0A FB | 	rdlong	local01, fp wz
257ec     14 4E 85 F1 | 	sub	fp, #20
257f0     30 00 90 AD |  if_e	jmp	#LR__3257
257f4     14 4E 05 F1 | 	add	fp, #20
257f8     A7 2A 02 FB | 	rdlong	local03, fp
257fc     14 4E 85 F1 | 	sub	fp, #20
25800     00 80 00 FF 
25804     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
25808     18 00 90 3D |  if_ae	jmp	#LR__3257
2580c     14 4E 05 F1 | 	add	fp, #20
25810     A7 26 02 FB | 	rdlong	local01, fp
25814     01 26 66 F0 | 	shl	local01, #1
25818     A7 26 62 FC | 	wrlong	local01, fp
2581c     14 4E 85 F1 | 	sub	fp, #20
25820     C0 FF 9F FD | 	jmp	#LR__3256
25824                 | LR__3257
25824                 | LR__3258
25824     70 4E 05 F1 | 	add	fp, #112
25828     A7 12 02 F6 | 	mov	arg01, fp
2582c     5C 4E 85 F1 | 	sub	fp, #92
25830     A7 14 02 FB | 	rdlong	arg02, fp
25834     08 4E 05 F1 | 	add	fp, #8
25838     A7 16 02 FB | 	rdlong	arg03, fp
2583c     A0 4E 05 F1 | 	add	fp, #160
25840     A7 1A 02 FB | 	rdlong	arg05, fp
25844     BC 4E 85 F1 | 	sub	fp, #188
25848     01 18 06 F6 | 	mov	arg04, #1
2584c     CC 40 B0 FD | 	call	#__system___uitoa
25850     58 4E 05 F1 | 	add	fp, #88
25854     A7 FA 61 FC | 	wrlong	result1, fp
25858     38 4E 85 F1 | 	sub	fp, #56
2585c     A7 26 02 FB | 	rdlong	local01, fp
25860     20 4E 85 F1 | 	sub	fp, #32
25864     00 26 56 F2 | 	cmps	local01, #0 wc
25868     50 00 90 3D |  if_ae	jmp	#LR__3259
2586c     60 4E 05 F1 | 	add	fp, #96
25870     A7 5A 68 FC | 	wrlong	#45, fp
25874     50 4E 05 F1 | 	add	fp, #80
25878     A7 12 02 F6 | 	mov	arg01, fp
2587c     90 4E 85 F1 | 	sub	fp, #144
25880     A7 2A 02 FB | 	rdlong	local03, fp
25884     15 15 62 F6 | 	neg	arg02, local03
25888     18 4E 05 F1 | 	add	fp, #24
2588c     A7 18 02 FB | 	rdlong	arg04, fp
25890     84 4E 05 F1 | 	add	fp, #132
25894     A7 30 02 FB | 	rdlong	local06, fp
25898     BC 4E 85 F1 | 	sub	fp, #188
2589c     18 2D 02 F6 | 	mov	local04, local06
258a0     0A 16 06 F6 | 	mov	arg03, #10
258a4     16 1B 02 F6 | 	mov	arg05, local04
258a8     70 40 B0 FD | 	call	#__system___uitoa
258ac     5C 4E 05 F1 | 	add	fp, #92
258b0     A7 FA 61 FC | 	wrlong	result1, fp
258b4     5C 4E 85 F1 | 	sub	fp, #92
258b8     48 00 90 FD | 	jmp	#LR__3260
258bc                 | LR__3259
258bc     60 4E 05 F1 | 	add	fp, #96
258c0     A7 56 68 FC | 	wrlong	#43, fp
258c4     50 4E 05 F1 | 	add	fp, #80
258c8     A7 12 02 F6 | 	mov	arg01, fp
258cc     90 4E 85 F1 | 	sub	fp, #144
258d0     A7 14 02 FB | 	rdlong	arg02, fp
258d4     18 4E 05 F1 | 	add	fp, #24
258d8     A7 18 02 FB | 	rdlong	arg04, fp
258dc     84 4E 05 F1 | 	add	fp, #132
258e0     A7 30 02 FB | 	rdlong	local06, fp
258e4     BC 4E 85 F1 | 	sub	fp, #188
258e8     18 2D 02 F6 | 	mov	local04, local06
258ec     0A 16 06 F6 | 	mov	arg03, #10
258f0     16 1B 02 F6 | 	mov	arg05, local04
258f4     24 40 B0 FD | 	call	#__system___uitoa
258f8     5C 4E 05 F1 | 	add	fp, #92
258fc     A7 FA 61 FC | 	wrlong	result1, fp
25900     5C 4E 85 F1 | 	sub	fp, #92
25904                 | LR__3260
25904     24 4E 05 F1 | 	add	fp, #36
25908     A7 26 0A FB | 	rdlong	local01, fp wz
2590c     24 4E 85 F1 | 	sub	fp, #36
25910     2C 00 90 AD |  if_e	jmp	#LR__3261
25914     50 4E 05 F1 | 	add	fp, #80
25918     A7 00 68 FC | 	wrlong	#0, fp
2591c     04 4E 85 F1 | 	sub	fp, #4
25920     A7 00 68 FC | 	wrlong	#0, fp
25924     6C 4E 05 F1 | 	add	fp, #108
25928     A7 26 02 FB | 	rdlong	local01, fp
2592c     01 26 06 F1 | 	add	local01, #1
25930     64 4E 85 F1 | 	sub	fp, #100
25934     A7 26 62 FC | 	wrlong	local01, fp
25938     54 4E 85 F1 | 	sub	fp, #84
2593c     88 00 90 FD | 	jmp	#LR__3264
25940                 | LR__3261
25940     20 4E 05 F1 | 	add	fp, #32
25944     A7 26 02 FB | 	rdlong	local01, fp
25948     20 4E 85 F1 | 	sub	fp, #32
2594c     00 26 56 F2 | 	cmps	local01, #0 wc
25950     40 00 90 3D |  if_ae	jmp	#LR__3262
25954     20 4E 05 F1 | 	add	fp, #32
25958     A7 28 02 FB | 	rdlong	local02, fp
2595c     30 4E 05 F1 | 	add	fp, #48
25960     A7 28 62 FC | 	wrlong	local02, fp
25964     04 4E 85 F1 | 	sub	fp, #4
25968     A7 28 62 FC | 	wrlong	local02, fp
2596c     2C 4E 85 F1 | 	sub	fp, #44
25970     A7 26 02 FB | 	rdlong	local01, fp
25974     98 4E 05 F1 | 	add	fp, #152
25978     A7 2A 02 FB | 	rdlong	local03, fp
2597c     15 27 02 F1 | 	add	local01, local03
25980     01 26 06 F1 | 	add	local01, #1
25984     64 4E 85 F1 | 	sub	fp, #100
25988     A7 26 62 FC | 	wrlong	local01, fp
2598c     54 4E 85 F1 | 	sub	fp, #84
25990     34 00 90 FD | 	jmp	#LR__3263
25994                 | LR__3262
25994     4C 4E 05 F1 | 	add	fp, #76
25998     A7 00 68 FC | 	wrlong	#0, fp
2599c     2C 4E 85 F1 | 	sub	fp, #44
259a0     A7 26 02 FB | 	rdlong	local01, fp
259a4     30 4E 05 F1 | 	add	fp, #48
259a8     A7 26 62 FC | 	wrlong	local01, fp
259ac     68 4E 05 F1 | 	add	fp, #104
259b0     A7 2A 02 FB | 	rdlong	local03, fp
259b4     15 27 02 F1 | 	add	local01, local03
259b8     01 26 06 F1 | 	add	local01, #1
259bc     64 4E 85 F1 | 	sub	fp, #100
259c0     A7 26 62 FC | 	wrlong	local01, fp
259c4     54 4E 85 F1 | 	sub	fp, #84
259c8                 | LR__3263
259c8                 | LR__3264
259c8     54 4E 05 F1 | 	add	fp, #84
259cc     A7 26 02 FB | 	rdlong	local01, fp
259d0     08 4E 85 F1 | 	sub	fp, #8
259d4     A7 2A 02 FB | 	rdlong	local03, fp
259d8     15 27 82 F1 | 	sub	local01, local03
259dc     01 26 06 F1 | 	add	local01, #1
259e0     24 4E 85 F1 | 	sub	fp, #36
259e4     A7 26 62 FC | 	wrlong	local01, fp
259e8     04 4E 05 F1 | 	add	fp, #4
259ec     A7 26 0A FB | 	rdlong	local01, fp wz
259f0     2C 4E 85 F1 | 	sub	fp, #44
259f4     28 4E 05 51 |  if_ne	add	fp, #40
259f8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
259fc     01 2A 06 51 |  if_ne	add	local03, #1
25a00     A7 2A 62 5C |  if_ne	wrlong	local03, fp
25a04     28 4E 85 51 |  if_ne	sub	fp, #40
25a08     1C 4E 05 F1 | 	add	fp, #28
25a0c     A7 26 02 FB | 	rdlong	local01, fp
25a10     1C 4E 85 F1 | 	sub	fp, #28
25a14     10 26 0E F2 | 	cmp	local01, #16 wz
25a18     28 4E 05 A1 |  if_e	add	fp, #40
25a1c     A7 26 02 AB |  if_e	rdlong	local01, fp
25a20     02 26 06 A1 |  if_e	add	local01, #2
25a24     A7 26 62 AC |  if_e	wrlong	local01, fp
25a28     28 4E 85 A1 |  if_e	sub	fp, #40
25a2c     24 4E 05 F1 | 	add	fp, #36
25a30     A7 26 0A FB | 	rdlong	local01, fp wz
25a34     24 4E 85 F1 | 	sub	fp, #36
25a38     28 00 90 AD |  if_e	jmp	#LR__3265
25a3c     28 4E 05 F1 | 	add	fp, #40
25a40     A7 26 02 FB | 	rdlong	local01, fp
25a44     02 2A 06 F6 | 	mov	local03, #2
25a48     34 4E 05 F1 | 	add	fp, #52
25a4c     A7 2E 02 FB | 	rdlong	local05, fp
25a50     17 2B 02 F1 | 	add	local03, local05
25a54     15 27 02 F1 | 	add	local01, local03
25a58     34 4E 85 F1 | 	sub	fp, #52
25a5c     A7 26 62 FC | 	wrlong	local01, fp
25a60     28 4E 85 F1 | 	sub	fp, #40
25a64                 | LR__3265
25a64     28 4E 05 F1 | 	add	fp, #40
25a68     A7 26 02 FB | 	rdlong	local01, fp
25a6c     28 4E 85 F1 | 	sub	fp, #40
25a70     41 26 56 F2 | 	cmps	local01, #65 wc
25a74     01 FA 65 36 |  if_ae	neg	result1, #1
25a78     08 05 90 3D |  if_ae	jmp	#LR__3293
25a7c     3C 4E 05 F1 | 	add	fp, #60
25a80     A7 26 0A FB | 	rdlong	local01, fp wz
25a84     3C 4E 85 F1 | 	sub	fp, #60
25a88     60 00 90 AD |  if_e	jmp	#LR__3266
25a8c     C0 4E 05 F1 | 	add	fp, #192
25a90     A7 12 02 FB | 	rdlong	arg01, fp
25a94     94 4E 85 F1 | 	sub	fp, #148
25a98     A7 14 02 FB | 	rdlong	arg02, fp
25a9c     14 4E 05 F1 | 	add	fp, #20
25aa0     A7 16 02 FB | 	rdlong	arg03, fp
25aa4     40 4E 85 F1 | 	sub	fp, #64
25aa8     D8 40 B0 FD | 	call	#__system__emitsign_0539
25aac     18 4F 05 F1 | 	add	fp, #280
25ab0     A7 FA 61 FC | 	wrlong	result1, fp
25ab4     18 4F 85 F1 | 	sub	fp, #280
25ab8     00 FA 55 F2 | 	cmps	result1, #0 wc
25abc     18 4F 05 C1 |  if_b	add	fp, #280
25ac0     A7 FA 01 CB |  if_b	rdlong	result1, fp
25ac4     18 4F 85 C1 |  if_b	sub	fp, #280
25ac8     B8 04 90 CD |  if_b	jmp	#LR__3293
25acc     C0 4E 05 F1 | 	add	fp, #192
25ad0     A7 26 02 FB | 	rdlong	local01, fp
25ad4     58 4E 05 F1 | 	add	fp, #88
25ad8     A7 2A 02 FB | 	rdlong	local03, fp
25adc     15 27 02 F1 | 	add	local01, local03
25ae0     58 4E 85 F1 | 	sub	fp, #88
25ae4     A7 26 62 FC | 	wrlong	local01, fp
25ae8     C0 4E 85 F1 | 	sub	fp, #192
25aec                 | LR__3266
25aec     4C 4E 05 F1 | 	add	fp, #76
25af0     A7 26 02 FB | 	rdlong	local01, fp
25af4     34 4E 85 F1 | 	sub	fp, #52
25af8     A7 26 62 FC | 	wrlong	local01, fp
25afc     18 4E 85 F1 | 	sub	fp, #24
25b00     97 9E 48 FB | 	callpa	#(@LR__3272-@LR__3267)>>2,fcache_load_ptr_
25b04                 | LR__3267
25b04     18 4E 05 F1 | 	add	fp, #24
25b08     A7 28 02 FB | 	rdlong	local02, fp
25b0c     3C 4E 05 F1 | 	add	fp, #60
25b10     A7 2E 02 FB | 	rdlong	local05, fp
25b14     54 4E 85 F1 | 	sub	fp, #84
25b18     17 29 52 F2 | 	cmps	local02, local05 wc
25b1c     20 01 90 3D |  if_ae	jmp	#LR__3273
25b20     18 4E 05 F1 | 	add	fp, #24
25b24     A7 30 02 FB | 	rdlong	local06, fp
25b28     18 4E 85 F1 | 	sub	fp, #24
25b2c     00 30 56 F2 | 	cmps	local06, #0 wc
25b30     58 00 90 CD |  if_b	jmp	#LR__3268
25b34     18 4E 05 F1 | 	add	fp, #24
25b38     A7 30 02 FB | 	rdlong	local06, fp
25b3c     40 4E 05 F1 | 	add	fp, #64
25b40     A7 32 02 FB | 	rdlong	local07, fp
25b44     58 4E 85 F1 | 	sub	fp, #88
25b48     19 31 52 F2 | 	cmps	local06, local07 wc
25b4c     3C 00 90 3D |  if_ae	jmp	#LR__3268
25b50     C0 4E 05 F1 | 	add	fp, #192
25b54     A7 34 02 FB | 	rdlong	local08, fp
25b58     1A 33 02 F6 | 	mov	local07, local08
25b5c     01 32 06 F1 | 	add	local07, #1
25b60     A7 32 62 FC | 	wrlong	local07, fp
25b64     A8 4E 85 F1 | 	sub	fp, #168
25b68     A7 32 02 FB | 	rdlong	local07, fp
25b6c     19 37 02 F6 | 	mov	local09, local07
25b70     58 4E 05 F1 | 	add	fp, #88
25b74     A7 38 02 F6 | 	mov	local10, fp
25b78     A7 36 02 F1 | 	add	local09, fp
25b7c     1B 3B C2 FA | 	rdbyte	local11, local09
25b80     1A 3B 42 FC | 	wrbyte	local11, local08
25b84     70 4E 85 F1 | 	sub	fp, #112
25b88     20 00 90 FD | 	jmp	#LR__3269
25b8c                 | LR__3268
25b8c     C0 4E 05 F1 | 	add	fp, #192
25b90     A7 34 02 FB | 	rdlong	local08, fp
25b94     1A 37 02 F6 | 	mov	local09, local08
25b98     01 36 06 F1 | 	add	local09, #1
25b9c     A7 36 62 FC | 	wrlong	local09, fp
25ba0     C0 4E 85 F1 | 	sub	fp, #192
25ba4     30 36 06 F6 | 	mov	local09, #48
25ba8     1A 61 48 FC | 	wrbyte	#48, local08
25bac                 | LR__3269
25bac     18 4E 05 F1 | 	add	fp, #24
25bb0     A7 30 02 FB | 	rdlong	local06, fp
25bb4     38 4E 05 F1 | 	add	fp, #56
25bb8     A7 3C 02 FB | 	rdlong	local12, fp
25bbc     50 4E 85 F1 | 	sub	fp, #80
25bc0     1E 31 0A F2 | 	cmp	local06, local12 wz
25bc4     5C 00 90 5D |  if_ne	jmp	#LR__3271
25bc8     10 4F 05 F1 | 	add	fp, #272
25bcc     A7 32 02 FB | 	rdlong	local07, fp
25bd0     10 4F 85 F1 | 	sub	fp, #272
25bd4     19 37 0A F6 | 	mov	local09, local07 wz
25bd8     28 00 90 5D |  if_ne	jmp	#LR__3270
25bdc     54 4E 05 F1 | 	add	fp, #84
25be0     A7 3A 02 FB | 	rdlong	local11, fp
25be4     1D 39 02 F6 | 	mov	local10, local11
25be8     01 38 86 F1 | 	sub	local10, #1
25bec     3C 4E 85 F1 | 	sub	fp, #60
25bf0     A7 3E 02 FB | 	rdlong	local13, fp
25bf4     18 4E 85 F1 | 	sub	fp, #24
25bf8     1F 41 02 F6 | 	mov	local14, local13
25bfc     1C 41 52 F2 | 	cmps	local14, local10 wc
25c00     20 00 90 3D |  if_ae	jmp	#LR__3271
25c04                 | LR__3270
25c04     C0 4E 05 F1 | 	add	fp, #192
25c08     A7 34 02 FB | 	rdlong	local08, fp
25c0c     1A 3D 02 F6 | 	mov	local12, local08
25c10     01 3C 06 F1 | 	add	local12, #1
25c14     A7 3C 62 FC | 	wrlong	local12, fp
25c18     C0 4E 85 F1 | 	sub	fp, #192
25c1c     2E 36 06 F6 | 	mov	local09, #46
25c20     1A 5D 48 FC | 	wrbyte	#46, local08
25c24                 | LR__3271
25c24     18 4E 05 F1 | 	add	fp, #24
25c28     A7 42 02 FB | 	rdlong	local15, fp
25c2c     21 3D 02 F6 | 	mov	local12, local15
25c30     01 3C 06 F1 | 	add	local12, #1
25c34     A7 3C 62 FC | 	wrlong	local12, fp
25c38     18 4E 85 F1 | 	sub	fp, #24
25c3c     C4 FE 9F FD | 	jmp	#LR__3267
25c40                 | LR__3272
25c40                 | LR__3273
25c40     34 4E 05 F1 | 	add	fp, #52
25c44     A7 26 0A FB | 	rdlong	local01, fp wz
25c48     34 4E 85 F1 | 	sub	fp, #52
25c4c     A0 00 90 AD |  if_e	jmp	#LR__3277
25c50     C0 4E 05 F1 | 	add	fp, #192
25c54     A7 26 02 FB | 	rdlong	local01, fp
25c58     01 26 86 F1 | 	sub	local01, #1
25c5c     A7 26 62 FC | 	wrlong	local01, fp
25c60     C0 4E 85 F1 | 	sub	fp, #192
25c64     97 26 48 FB | 	callpa	#(@LR__3275-@LR__3274)>>2,fcache_load_ptr_
25c68                 | LR__3274
25c68     C0 4E 05 F1 | 	add	fp, #192
25c6c     A7 26 02 FB | 	rdlong	local01, fp
25c70     04 4E 05 F1 | 	add	fp, #4
25c74     A7 2A 02 FB | 	rdlong	local03, fp
25c78     C4 4E 85 F1 | 	sub	fp, #196
25c7c     15 27 5A F2 | 	cmps	local01, local03 wcz
25c80     30 00 90 ED |  if_be	jmp	#LR__3276
25c84     C0 4E 05 F1 | 	add	fp, #192
25c88     A7 30 02 FB | 	rdlong	local06, fp
25c8c     C0 4E 85 F1 | 	sub	fp, #192
25c90     18 2D C2 FA | 	rdbyte	local04, local06
25c94     30 2C 0E F2 | 	cmp	local04, #48 wz
25c98     18 00 90 5D |  if_ne	jmp	#LR__3276
25c9c     C0 4E 05 F1 | 	add	fp, #192
25ca0     A7 26 02 FB | 	rdlong	local01, fp
25ca4     01 26 86 F1 | 	sub	local01, #1
25ca8     A7 26 62 FC | 	wrlong	local01, fp
25cac     C0 4E 85 F1 | 	sub	fp, #192
25cb0     B4 FF 9F FD | 	jmp	#LR__3274
25cb4                 | LR__3275
25cb4                 | LR__3276
25cb4     C0 4E 05 F1 | 	add	fp, #192
25cb8     A7 28 02 FB | 	rdlong	local02, fp
25cbc     C0 4E 85 F1 | 	sub	fp, #192
25cc0     14 27 C2 FA | 	rdbyte	local01, local02
25cc4     2E 26 0E F2 | 	cmp	local01, #46 wz
25cc8     C0 4E 05 A1 |  if_e	add	fp, #192
25ccc     A7 26 02 AB |  if_e	rdlong	local01, fp
25cd0     01 26 86 A1 |  if_e	sub	local01, #1
25cd4     A7 26 62 AC |  if_e	wrlong	local01, fp
25cd8     C0 4E 85 A1 |  if_e	sub	fp, #192
25cdc     C0 4E 05 F1 | 	add	fp, #192
25ce0     A7 2A 02 FB | 	rdlong	local03, fp
25ce4     01 2A 06 F1 | 	add	local03, #1
25ce8     A7 2A 62 FC | 	wrlong	local03, fp
25cec     C0 4E 85 F1 | 	sub	fp, #192
25cf0                 | LR__3277
25cf0     24 4E 05 F1 | 	add	fp, #36
25cf4     A7 26 0A FB | 	rdlong	local01, fp wz
25cf8     24 4E 85 F1 | 	sub	fp, #36
25cfc     B4 00 90 AD |  if_e	jmp	#LR__3280
25d00     C0 4E 05 F1 | 	add	fp, #192
25d04     A7 28 02 FB | 	rdlong	local02, fp
25d08     14 2B 02 F6 | 	mov	local03, local02
25d0c     01 2A 06 F1 | 	add	local03, #1
25d10     A7 2A 62 FC | 	wrlong	local03, fp
25d14     90 4E 85 F1 | 	sub	fp, #144
25d18     A7 2C 02 FB | 	rdlong	local04, fp
25d1c     14 2D 42 FC | 	wrbyte	local04, local02
25d20     90 4E 05 F1 | 	add	fp, #144
25d24     A7 28 02 FB | 	rdlong	local02, fp
25d28     14 2B 02 F6 | 	mov	local03, local02
25d2c     01 2A 06 F1 | 	add	local03, #1
25d30     A7 2A 62 FC | 	wrlong	local03, fp
25d34     60 4E 85 F1 | 	sub	fp, #96
25d38     A7 2C 02 FB | 	rdlong	local04, fp
25d3c     14 2D 42 FC | 	wrbyte	local04, local02
25d40     48 4E 85 F1 | 	sub	fp, #72
25d44     A7 00 68 FC | 	wrlong	#0, fp
25d48     18 4E 85 F1 | 	sub	fp, #24
25d4c                 | LR__3278
25d4c     18 4E 05 F1 | 	add	fp, #24
25d50     A7 28 02 FB | 	rdlong	local02, fp
25d54     44 4E 05 F1 | 	add	fp, #68
25d58     A7 2E 02 FB | 	rdlong	local05, fp
25d5c     5C 4E 85 F1 | 	sub	fp, #92
25d60     17 29 52 F2 | 	cmps	local02, local05 wc
25d64     4C 00 90 3D |  if_ae	jmp	#LR__3279
25d68     C0 4E 05 F1 | 	add	fp, #192
25d6c     A7 34 02 FB | 	rdlong	local08, fp
25d70     1A 3D 02 F6 | 	mov	local12, local08
25d74     01 3C 06 F1 | 	add	local12, #1
25d78     A7 3C 62 FC | 	wrlong	local12, fp
25d7c     A8 4E 85 F1 | 	sub	fp, #168
25d80     A7 32 02 FB | 	rdlong	local07, fp
25d84     19 37 02 F6 | 	mov	local09, local07
25d88     98 4E 05 F1 | 	add	fp, #152
25d8c     A7 38 02 F6 | 	mov	local10, fp
25d90     A7 36 02 F1 | 	add	local09, fp
25d94     1B 3B C2 FA | 	rdbyte	local11, local09
25d98     1A 3B 42 FC | 	wrbyte	local11, local08
25d9c     98 4E 85 F1 | 	sub	fp, #152
25da0     A7 3C 02 FB | 	rdlong	local12, fp
25da4     01 3C 06 F1 | 	add	local12, #1
25da8     A7 3C 62 FC | 	wrlong	local12, fp
25dac     18 4E 85 F1 | 	sub	fp, #24
25db0     98 FF 9F FD | 	jmp	#LR__3278
25db4                 | LR__3279
25db4                 | LR__3280
25db4     C0 4E 05 F1 | 	add	fp, #192
25db8     A7 26 02 FB | 	rdlong	local01, fp
25dbc     C0 4E 85 F1 | 	sub	fp, #192
25dc0     13 01 48 FC | 	wrbyte	#0, local01
25dc4                 | LR__3281
25dc4     6C 4E 05 F1 | 	add	fp, #108
25dc8     A7 26 0A FB | 	rdlong	local01, fp wz
25dcc     6C 4E 85 F1 | 	sub	fp, #108
25dd0     90 01 90 AD |  if_e	jmp	#LR__3292
25dd4     48 4E 05 F1 | 	add	fp, #72
25dd8     A7 2A 0A FB | 	rdlong	local03, fp wz
25ddc     48 4E 85 F1 | 	sub	fp, #72
25de0     80 01 90 AD |  if_e	jmp	#LR__3292
25de4     C4 4E 05 F1 | 	add	fp, #196
25de8     A7 12 02 FB | 	rdlong	arg01, fp
25dec     C4 4E 85 F1 | 	sub	fp, #196
25df0     09 45 02 F6 | 	mov	local16, arg01
25df4     97 06 48 FB | 	callpa	#(@LR__3283-@LR__3282)>>2,fcache_load_ptr_
25df8                 | LR__3282
25df8     22 FB C9 FA | 	rdbyte	result1, local16 wz
25dfc     01 44 06 51 |  if_ne	add	local16, #1
25e00     F4 FF 9F 5D |  if_ne	jmp	#LR__3282
25e04                 | LR__3283
25e04     09 45 82 F1 | 	sub	local16, arg01
25e08     22 2D 02 F6 | 	mov	local04, local16
25e0c     6C 4E 05 F1 | 	add	fp, #108
25e10     A7 30 02 FB | 	rdlong	local06, fp
25e14     6C 4E 85 F1 | 	sub	fp, #108
25e18     18 2D 5A F2 | 	cmps	local04, local06 wcz
25e1c     44 01 90 ED |  if_be	jmp	#LR__3292
25e20     C4 4E 05 F1 | 	add	fp, #196
25e24     A7 26 02 FB | 	rdlong	local01, fp
25e28     5C 4E 05 F1 | 	add	fp, #92
25e2c     A7 26 62 FC | 	wrlong	local01, fp
25e30     FC 4E 85 F1 | 	sub	fp, #252
25e34     A7 26 0A FB | 	rdlong	local01, fp wz
25e38     24 4E 85 F1 | 	sub	fp, #36
25e3c     20 00 90 AD |  if_e	jmp	#LR__3284
25e40     B8 4E 05 F1 | 	add	fp, #184
25e44     A7 00 68 FC | 	wrlong	#0, fp
25e48     4C 4E 85 F1 | 	sub	fp, #76
25e4c     A7 26 02 FB | 	rdlong	local01, fp
25e50     B0 4E 05 F1 | 	add	fp, #176
25e54     A7 26 62 FC | 	wrlong	local01, fp
25e58     1C 4F 85 F1 | 	sub	fp, #284
25e5c     24 00 90 FD | 	jmp	#LR__3285
25e60                 | LR__3284
25e60     6C 4E 05 F1 | 	add	fp, #108
25e64     A7 26 02 FB | 	rdlong	local01, fp
25e68     01 26 86 F1 | 	sub	local01, #1
25e6c     4C 4E 05 F1 | 	add	fp, #76
25e70     A7 2A 02 FB | 	rdlong	local03, fp
25e74     15 27 82 F1 | 	sub	local01, local03
25e78     64 4E 05 F1 | 	add	fp, #100
25e7c     A7 26 62 FC | 	wrlong	local01, fp
25e80     1C 4F 85 F1 | 	sub	fp, #284
25e84                 | LR__3285
25e84     97 20 48 FB | 	callpa	#(@LR__3287-@LR__3286)>>2,fcache_load_ptr_
25e88                 | LR__3286
25e88     1C 4F 05 F1 | 	add	fp, #284
25e8c     A7 26 0A FB | 	rdlong	local01, fp wz
25e90     1C 4F 85 F1 | 	sub	fp, #284
25e94     30 00 90 AD |  if_e	jmp	#LR__3288
25e98     20 4F 05 F1 | 	add	fp, #288
25e9c     A7 28 02 FB | 	rdlong	local02, fp
25ea0     14 2B 02 F6 | 	mov	local03, local02
25ea4     01 2A 06 F1 | 	add	local03, #1
25ea8     A7 2A 62 FC | 	wrlong	local03, fp
25eac     14 55 48 FC | 	wrbyte	#42, local02
25eb0     04 4E 85 F1 | 	sub	fp, #4
25eb4     A7 26 02 FB | 	rdlong	local01, fp
25eb8     01 26 86 F1 | 	sub	local01, #1
25ebc     A7 26 62 FC | 	wrlong	local01, fp
25ec0     1C 4F 85 F1 | 	sub	fp, #284
25ec4     C0 FF 9F FD | 	jmp	#LR__3286
25ec8                 | LR__3287
25ec8                 | LR__3288
25ec8     B8 4E 05 F1 | 	add	fp, #184
25ecc     A7 26 0A FB | 	rdlong	local01, fp wz
25ed0     B8 4E 85 F1 | 	sub	fp, #184
25ed4     70 00 90 AD |  if_e	jmp	#LR__3291
25ed8     20 4F 05 F1 | 	add	fp, #288
25edc     A7 28 02 FB | 	rdlong	local02, fp
25ee0     14 2B 02 F6 | 	mov	local03, local02
25ee4     01 2A 06 F1 | 	add	local03, #1
25ee8     A7 2A 62 FC | 	wrlong	local03, fp
25eec     14 5D 48 FC | 	wrbyte	#46, local02
25ef0     04 4E 85 F1 | 	sub	fp, #4
25ef4     A7 00 68 FC | 	wrlong	#0, fp
25ef8     1C 4F 85 F1 | 	sub	fp, #284
25efc                 | LR__3289
25efc     1C 4F 05 F1 | 	add	fp, #284
25f00     A7 28 02 FB | 	rdlong	local02, fp
25f04     64 4E 85 F1 | 	sub	fp, #100
25f08     A7 2E 02 FB | 	rdlong	local05, fp
25f0c     B8 4E 85 F1 | 	sub	fp, #184
25f10     17 29 52 F2 | 	cmps	local02, local05 wc
25f14     30 00 90 3D |  if_ae	jmp	#LR__3290
25f18     20 4F 05 F1 | 	add	fp, #288
25f1c     A7 34 02 FB | 	rdlong	local08, fp
25f20     1A 3D 02 F6 | 	mov	local12, local08
25f24     01 3C 06 F1 | 	add	local12, #1
25f28     A7 3C 62 FC | 	wrlong	local12, fp
25f2c     1A 55 48 FC | 	wrbyte	#42, local08
25f30     04 4E 85 F1 | 	sub	fp, #4
25f34     A7 3C 02 FB | 	rdlong	local12, fp
25f38     01 3C 06 F1 | 	add	local12, #1
25f3c     A7 3C 62 FC | 	wrlong	local12, fp
25f40     1C 4F 85 F1 | 	sub	fp, #284
25f44     B4 FF 9F FD | 	jmp	#LR__3289
25f48                 | LR__3290
25f48                 | LR__3291
25f48     20 4F 05 F1 | 	add	fp, #288
25f4c     A7 28 02 FB | 	rdlong	local02, fp
25f50     14 2B 02 F6 | 	mov	local03, local02
25f54     01 2A 06 F1 | 	add	local03, #1
25f58     A7 2A 62 FC | 	wrlong	local03, fp
25f5c     20 4F 85 F1 | 	sub	fp, #288
25f60     14 01 48 FC | 	wrbyte	#0, local02
25f64                 | LR__3292
25f64     04 4E 05 F1 | 	add	fp, #4
25f68     A7 12 02 FB | 	rdlong	arg01, fp
25f6c     04 4E 05 F1 | 	add	fp, #4
25f70     A7 14 02 FB | 	rdlong	arg02, fp
25f74     BC 4E 05 F1 | 	add	fp, #188
25f78     A7 16 02 FB | 	rdlong	arg03, fp
25f7c     C4 4E 85 F1 | 	sub	fp, #196
25f80     C4 EE BF FD | 	call	#__system___fmtstr
25f84                 | LR__3293
25f84     A7 F0 03 F6 | 	mov	ptra, fp
25f88     B2 00 A0 FD | 	call	#popregs_
25f8c                 | __system___fmtfloat_ret
25f8c     2D 00 64 FD | 	ret
25f90                 | 
25f90                 | __system__Left_S
25f90     04 4A 05 F6 | 	mov	COUNT_, #4
25f94     A8 00 A0 FD | 	call	#pushregs_
25f98     09 27 02 F6 | 	mov	local01, arg01
25f9c     0A 29 02 F6 | 	mov	local02, arg02
25fa0     01 28 56 F2 | 	cmps	local02, #1 wc
25fa4     9D 01 00 CF 
25fa8     2A FA 05 C6 |  if_b	mov	result1, ##@LR__5243
25fac     5C 00 90 CD |  if_b	jmp	#LR__3303
25fb0     13 13 02 F6 | 	mov	arg01, local01
25fb4     09 2B 02 F6 | 	mov	local03, arg01
25fb8     97 06 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
25fbc                 | LR__3300
25fbc     15 FB C9 FA | 	rdbyte	result1, local03 wz
25fc0     01 2A 06 51 |  if_ne	add	local03, #1
25fc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3300
25fc8                 | LR__3301
25fc8     09 2B 82 F1 | 	sub	local03, arg01
25fcc     15 FB 01 F6 | 	mov	result1, local03
25fd0     14 FB 59 F2 | 	cmps	result1, local02 wcz
25fd4     13 FB 01 E6 |  if_be	mov	result1, local01
25fd8     30 00 90 ED |  if_be	jmp	#LR__3303
25fdc     14 13 02 F6 | 	mov	arg01, local02
25fe0     02 12 06 F1 | 	add	arg01, #2
25fe4     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
25fe8     FD 2C 0A F6 | 	mov	local04, result1 wz
25fec     18 00 90 AD |  if_e	jmp	#LR__3302
25ff0     16 13 02 F6 | 	mov	arg01, local04
25ff4     13 15 02 F6 | 	mov	arg02, local01
25ff8     14 17 02 F6 | 	mov	arg03, local02
25ffc     34 DE BF FD | 	call	#__system____builtin_memmove
26000     16 29 02 F1 | 	add	local02, local04
26004     14 01 48 FC | 	wrbyte	#0, local02
26008                 | LR__3302
26008     16 FB 01 F6 | 	mov	result1, local04
2600c                 | LR__3303
2600c     A7 F0 03 F6 | 	mov	ptra, fp
26010     B2 00 A0 FD | 	call	#popregs_
26014                 | __system__Left_S_ret
26014     2D 00 64 FD | 	ret
26018                 | 
26018                 | __system__Right_S
26018     05 4A 05 F6 | 	mov	COUNT_, #5
2601c     A8 00 A0 FD | 	call	#pushregs_
26020     09 27 02 F6 | 	mov	local01, arg01
26024     0A 29 02 F6 | 	mov	local02, arg02
26028     01 28 56 F2 | 	cmps	local02, #1 wc
2602c     9D 01 00 CF 
26030     2B FA 05 C6 |  if_b	mov	result1, ##@LR__5244
26034     64 00 90 CD |  if_b	jmp	#LR__3313
26038     13 13 02 F6 | 	mov	arg01, local01
2603c     09 2B 02 F6 | 	mov	local03, arg01
26040     97 06 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
26044                 | LR__3310
26044     15 FB C9 FA | 	rdbyte	result1, local03 wz
26048     01 2A 06 51 |  if_ne	add	local03, #1
2604c     F4 FF 9F 5D |  if_ne	jmp	#LR__3310
26050                 | LR__3311
26050     09 2B 82 F1 | 	sub	local03, arg01
26054     15 FB 01 F6 | 	mov	result1, local03
26058     FD 2C 02 F6 | 	mov	local04, result1
2605c     14 2D 5A F2 | 	cmps	local04, local02 wcz
26060     13 FB 01 E6 |  if_be	mov	result1, local01
26064     34 00 90 ED |  if_be	jmp	#LR__3313
26068     14 13 02 F6 | 	mov	arg01, local02
2606c     02 12 06 F1 | 	add	arg01, #2
26070     40 20 B0 FD | 	call	#__system___gc_alloc_managed
26074     FD 2E 0A F6 | 	mov	local05, result1 wz
26078     1C 00 90 AD |  if_e	jmp	#LR__3312
2607c     14 2D 82 F1 | 	sub	local04, local02
26080     13 2D 02 F1 | 	add	local04, local01
26084     01 28 06 F1 | 	add	local02, #1
26088     17 13 02 F6 | 	mov	arg01, local05
2608c     16 15 02 F6 | 	mov	arg02, local04
26090     14 17 02 F6 | 	mov	arg03, local02
26094     9C DD BF FD | 	call	#__system____builtin_memmove
26098                 | LR__3312
26098     17 FB 01 F6 | 	mov	result1, local05
2609c                 | LR__3313
2609c     A7 F0 03 F6 | 	mov	ptra, fp
260a0     B2 00 A0 FD | 	call	#popregs_
260a4                 | __system__Right_S_ret
260a4     2D 00 64 FD | 	ret
260a8                 | 
260a8                 | __system__Mid_S
260a8     05 4A 05 F6 | 	mov	COUNT_, #5
260ac     A8 00 A0 FD | 	call	#pushregs_
260b0     09 27 02 F6 | 	mov	local01, arg01
260b4     0A 29 02 F6 | 	mov	local02, arg02
260b8     01 16 56 F2 | 	cmps	arg03, #1 wc
260bc     9D 01 00 CF 
260c0     2C FA 05 C6 |  if_b	mov	result1, ##@LR__5245
260c4     80 00 90 CD |  if_b	jmp	#LR__3323
260c8     01 28 86 F1 | 	sub	local02, #1
260cc     00 28 56 F3 | 	fges	local02, #0 wc
260d0     13 13 02 F6 | 	mov	arg01, local01
260d4     09 2B 02 F6 | 	mov	local03, arg01
260d8     97 06 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
260dc                 | LR__3320
260dc     15 FB C9 FA | 	rdbyte	result1, local03 wz
260e0     01 2A 06 51 |  if_ne	add	local03, #1
260e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3320
260e8                 | LR__3321
260e8     09 2B 82 F1 | 	sub	local03, arg01
260ec     15 FB 01 F6 | 	mov	result1, local03
260f0     FD 14 02 F6 | 	mov	arg02, result1
260f4     14 15 52 F2 | 	cmps	arg02, local02 wc
260f8     9D 01 00 CF 
260fc     2D FA 05 C6 |  if_b	mov	result1, ##@LR__5246
26100     44 00 90 CD |  if_b	jmp	#LR__3323
26104     0A 2D 02 F6 | 	mov	local04, arg02
26108     14 2D 82 F1 | 	sub	local04, local02
2610c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
26110     0B 2D 02 16 |  if_a	mov	local04, arg03
26114     16 13 02 F6 | 	mov	arg01, local04
26118     02 12 06 F1 | 	add	arg01, #2
2611c     94 1F B0 FD | 	call	#__system___gc_alloc_managed
26120     FD 2E 0A F6 | 	mov	local05, result1 wz
26124     1C 00 90 AD |  if_e	jmp	#LR__3322
26128     13 29 02 F1 | 	add	local02, local01
2612c     17 13 02 F6 | 	mov	arg01, local05
26130     14 15 02 F6 | 	mov	arg02, local02
26134     16 17 02 F6 | 	mov	arg03, local04
26138     F8 DC BF FD | 	call	#__system____builtin_memmove
2613c     17 2D 02 F1 | 	add	local04, local05
26140     16 01 48 FC | 	wrbyte	#0, local04
26144                 | LR__3322
26144     17 FB 01 F6 | 	mov	result1, local05
26148                 | LR__3323
26148     A7 F0 03 F6 | 	mov	ptra, fp
2614c     B2 00 A0 FD | 	call	#popregs_
26150                 | __system__Mid_S_ret
26150     2D 00 64 FD | 	ret
26154                 | 
26154                 | __system__Chr_S
26154     01 4A 05 F6 | 	mov	COUNT_, #1
26158     A8 00 A0 FD | 	call	#pushregs_
2615c     09 27 02 F6 | 	mov	local01, arg01
26160     03 12 06 F6 | 	mov	arg01, #3
26164     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
26168     00 FA 4D F2 | 	cmps	result1, #0 wz
2616c     FD 26 42 5C |  if_ne	wrbyte	local01, result1
26170     01 FA 05 51 |  if_ne	add	result1, #1
26174     FD 00 48 5C |  if_ne	wrbyte	#0, result1
26178     01 FA 85 51 |  if_ne	sub	result1, #1
2617c     A7 F0 03 F6 | 	mov	ptra, fp
26180     B2 00 A0 FD | 	call	#popregs_
26184                 | __system__Chr_S_ret
26184     2D 00 64 FD | 	ret
26188                 | 
26188                 | __system__str_S
26188     02 4A 05 F6 | 	mov	COUNT_, #2
2618c     A8 00 A0 FD | 	call	#pushregs_
26190     09 27 02 F6 | 	mov	local01, arg01
26194     10 12 06 F6 | 	mov	arg01, #16
26198     18 1F B0 FD | 	call	#__system___gc_alloc_managed
2619c     FD 28 0A F6 | 	mov	local02, result1 wz
261a0     30 00 90 AD |  if_e	jmp	#LR__3330
261a4     F8 13 02 F6 | 	mov	arg01, ptra
261a8     08 F0 07 F1 | 	add	ptra, #8
261ac     09 29 62 FC | 	wrlong	local02, arg01
261b0     04 12 06 F1 | 	add	arg01, #4
261b4     09 01 68 FC | 	wrlong	#0, arg01
261b8     04 12 86 F1 | 	sub	arg01, #4
261bc     00 F0 04 FF 
261c0     00 12 46 F5 | 	or	arg01, ##165675008
261c4     00 14 06 F6 | 	mov	arg02, #0
261c8     13 17 02 F6 | 	mov	arg03, local01
261cc     67 18 06 F6 | 	mov	arg04, #103
261d0     90 EE BF FD | 	call	#__system___fmtfloat
261d4                 | LR__3330
261d4     14 FB 01 F6 | 	mov	result1, local02
261d8     A7 F0 03 F6 | 	mov	ptra, fp
261dc     B2 00 A0 FD | 	call	#popregs_
261e0                 | __system__str_S_ret
261e0     2D 00 64 FD | 	ret
261e4                 | 
261e4                 | __system__Number_S
261e4     08 4A 05 F6 | 	mov	COUNT_, #8
261e8     A8 00 A0 FD | 	call	#pushregs_
261ec     09 27 02 F6 | 	mov	local01, arg01
261f0     0A 29 0A F6 | 	mov	local02, arg02 wz
261f4     0B 2B 02 F6 | 	mov	local03, arg03
261f8     3C 00 90 5D |  if_ne	jmp	#LR__3342
261fc     01 28 06 F6 | 	mov	local02, #1
26200     15 2D 02 F6 | 	mov	local04, local03
26204     01 2E 06 F6 | 	mov	local05, #1
26208     97 16 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
2620c                 | LR__3340
2620c     00 30 06 F6 | 	mov	local06, #0
26210     13 2D 1A F2 | 	cmp	local04, local01 wcz
26214     01 30 66 E6 |  if_be	neg	local06, #1
26218     16 2F 12 F2 | 	cmp	local05, local04 wc
2621c     19 33 A2 F1 | 	subx	local07, local07
26220     19 31 CA F7 | 	test	local06, local07 wz
26224     15 2D 02 5D |  if_ne	qmul	local04, local03
26228     16 2F 02 56 |  if_ne	mov	local05, local04
2622c     01 28 06 51 |  if_ne	add	local02, #1
26230     18 2C 62 5D |  if_ne	getqx	local04
26234     D4 FF 9F 5D |  if_ne	jmp	#LR__3340
26238                 | LR__3341
26238                 | LR__3342
26238     20 28 36 F3 | 	fle	local02, #32 wc
2623c     14 13 02 F6 | 	mov	arg01, local02
26240     02 12 06 F1 | 	add	arg01, #2
26244     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
26248     FD 30 02 F6 | 	mov	local06, result1
2624c     14 33 02 F6 | 	mov	local07, local02
26250     18 33 02 F1 | 	add	local07, local06
26254     19 01 48 FC | 	wrbyte	#0, local07
26258     97 1A 48 FB | 	callpa	#(@LR__3344-@LR__3343)>>2,fcache_load_ptr_
2625c                 | LR__3343
2625c     01 28 16 F2 | 	cmp	local02, #1 wc
26260     2C 00 90 CD |  if_b	jmp	#LR__3345
26264     15 27 12 FD | 	qdiv	local01, local03
26268     01 28 86 F1 | 	sub	local02, #1
2626c     14 33 02 F6 | 	mov	local07, local02
26270     18 33 02 F1 | 	add	local07, local06
26274     19 34 62 FD | 	getqy	local08
26278     0A 34 16 F2 | 	cmp	local08, #10 wc
2627c     30 34 06 C1 |  if_b	add	local08, #48
26280     37 34 06 31 |  if_ae	add	local08, #55
26284     19 35 42 FC | 	wrbyte	local08, local07
26288     18 26 62 FD | 	getqx	local01
2628c     CC FF 9F FD | 	jmp	#LR__3343
26290                 | LR__3344
26290                 | LR__3345
26290     18 FB 01 F6 | 	mov	result1, local06
26294     A7 F0 03 F6 | 	mov	ptra, fp
26298     B2 00 A0 FD | 	call	#popregs_
2629c                 | __system__Number_S_ret
2629c     2D 00 64 FD | 	ret
262a0                 | 
262a0                 | __system__LCase_S
262a0     07 4A 05 F6 | 	mov	COUNT_, #7
262a4     A8 00 A0 FD | 	call	#pushregs_
262a8     09 27 02 F6 | 	mov	local01, arg01
262ac     09 29 02 F6 | 	mov	local02, arg01
262b0     97 06 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
262b4                 | LR__3350
262b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
262b8     01 28 06 51 |  if_ne	add	local02, #1
262bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3350
262c0                 | LR__3351
262c0     09 29 82 F1 | 	sub	local02, arg01
262c4     14 FB 01 F6 | 	mov	result1, local02
262c8     FD 28 0A F6 | 	mov	local02, result1 wz
262cc     9D 01 00 AF 
262d0     2E FA 05 A6 |  if_e	mov	result1, ##@LR__5247
262d4     7C 00 90 AD |  if_e	jmp	#LR__3357
262d8     14 13 02 F6 | 	mov	arg01, local02
262dc     02 12 06 F1 | 	add	arg01, #2
262e0     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
262e4     FD 2A 0A F6 | 	mov	local03, result1 wz
262e8     64 00 90 AD |  if_e	jmp	#LR__3356
262ec     01 2C 66 F6 | 	neg	local04, #1
262f0     97 26 48 FB | 	callpa	#(@LR__3355-@LR__3352)>>2,fcache_load_ptr_
262f4                 | LR__3352
262f4     01 2C 06 F1 | 	add	local04, #1
262f8     16 2F 02 F6 | 	mov	local05, local04
262fc     13 2F 02 F1 | 	add	local05, local01
26300     17 31 C2 FA | 	rdbyte	local06, local05
26304     41 30 56 F2 | 	cmps	local06, #65 wc
26308     18 00 90 CD |  if_b	jmp	#LR__3353
2630c     5B 30 56 F2 | 	cmps	local06, #91 wc
26310     16 33 02 C6 |  if_b	mov	local07, local04
26314     15 33 02 C1 |  if_b	add	local07, local03
26318     20 30 06 C1 |  if_b	add	local06, #32
2631c     19 31 42 CC |  if_b	wrbyte	local06, local07
26320     0C 00 90 CD |  if_b	jmp	#LR__3354
26324                 | LR__3353
26324     16 33 02 F6 | 	mov	local07, local04
26328     15 33 02 F1 | 	add	local07, local03
2632c     19 31 42 FC | 	wrbyte	local06, local07
26330                 | LR__3354
26330     14 31 02 F6 | 	mov	local06, local02
26334     01 30 86 F1 | 	sub	local06, #1
26338     18 2D 0A F2 | 	cmp	local04, local06 wz
2633c     B4 FF 9F 5D |  if_ne	jmp	#LR__3352
26340                 | LR__3355
26340     15 29 02 F1 | 	add	local02, local03
26344     14 01 48 FC | 	wrbyte	#0, local02
26348     15 FB 01 F6 | 	mov	result1, local03
2634c     04 00 90 FD | 	jmp	#LR__3357
26350                 | LR__3356
26350     15 FB 01 F6 | 	mov	result1, local03
26354                 | LR__3357
26354     A7 F0 03 F6 | 	mov	ptra, fp
26358     B2 00 A0 FD | 	call	#popregs_
2635c                 | __system__LCase_S_ret
2635c     2D 00 64 FD | 	ret
26360                 | 
26360                 | __system__LTrim_S
26360     05 4A 05 F6 | 	mov	COUNT_, #5
26364     A8 00 A0 FD | 	call	#pushregs_
26368     09 27 02 F6 | 	mov	local01, arg01
2636c     09 29 02 F6 | 	mov	local02, arg01
26370     97 06 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
26374                 | LR__3360
26374     14 FB C9 FA | 	rdbyte	result1, local02 wz
26378     01 28 06 51 |  if_ne	add	local02, #1
2637c     F4 FF 9F 5D |  if_ne	jmp	#LR__3360
26380                 | LR__3361
26380     09 29 82 F1 | 	sub	local02, arg01
26384     14 FB 01 F6 | 	mov	result1, local02
26388     FD 28 0A F6 | 	mov	local02, result1 wz
2638c     9D 01 00 AF 
26390     2F FA 05 A6 |  if_e	mov	result1, ##@LR__5248
26394     7C 00 90 AD |  if_e	jmp	#LR__3366
26398     00 2A 06 F6 | 	mov	local03, #0
2639c     14 2D 02 F6 | 	mov	local04, local02
263a0                 | LR__3362
263a0     16 2B 52 F2 | 	cmps	local03, local04 wc
263a4     68 00 90 3D |  if_ae	jmp	#LR__3365
263a8     15 17 02 F6 | 	mov	arg03, local03
263ac     13 17 02 F1 | 	add	arg03, local01
263b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
263b4     20 16 0E F2 | 	cmp	arg03, #32 wz
263b8     4C 00 90 AD |  if_e	jmp	#LR__3364
263bc     14 13 02 F6 | 	mov	arg01, local02
263c0     15 13 82 F1 | 	sub	arg01, local03
263c4     02 12 06 F1 | 	add	arg01, #2
263c8     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
263cc     FD 2E 0A F6 | 	mov	local05, result1 wz
263d0     2C 00 90 AD |  if_e	jmp	#LR__3363
263d4     15 15 02 F6 | 	mov	arg02, local03
263d8     13 15 02 F1 | 	add	arg02, local01
263dc     14 17 02 F6 | 	mov	arg03, local02
263e0     15 17 82 F1 | 	sub	arg03, local03
263e4     17 13 02 F6 | 	mov	arg01, local05
263e8     48 DA BF FD | 	call	#__system____builtin_memmove
263ec     15 29 82 F1 | 	sub	local02, local03
263f0     17 29 02 F1 | 	add	local02, local05
263f4     14 01 48 FC | 	wrbyte	#0, local02
263f8     17 FB 01 F6 | 	mov	result1, local05
263fc     14 00 90 FD | 	jmp	#LR__3366
26400                 | LR__3363
26400     17 FB 01 F6 | 	mov	result1, local05
26404     0C 00 90 FD | 	jmp	#LR__3366
26408                 | LR__3364
26408     01 2A 06 F1 | 	add	local03, #1
2640c     90 FF 9F FD | 	jmp	#LR__3362
26410                 | LR__3365
26410     13 FB 01 F6 | 	mov	result1, local01
26414                 | LR__3366
26414     A7 F0 03 F6 | 	mov	ptra, fp
26418     B2 00 A0 FD | 	call	#popregs_
2641c                 | __system__LTrim_S_ret
2641c     2D 00 64 FD | 	ret
26420                 | 
26420                 | __system__RTrim_S
26420     04 4A 05 F6 | 	mov	COUNT_, #4
26424     A8 00 A0 FD | 	call	#pushregs_
26428     09 27 02 F6 | 	mov	local01, arg01
2642c     09 29 02 F6 | 	mov	local02, arg01
26430     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
26434                 | LR__3370
26434     14 FB C9 FA | 	rdbyte	result1, local02 wz
26438     01 28 06 51 |  if_ne	add	local02, #1
2643c     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
26440                 | LR__3371
26440     09 29 82 F1 | 	sub	local02, arg01
26444     14 FB 01 F6 | 	mov	result1, local02
26448     FD 28 0A F6 | 	mov	local02, result1 wz
2644c     9D 01 00 AF 
26450     30 FA 05 A6 |  if_e	mov	result1, ##@LR__5249
26454     74 00 90 AD |  if_e	jmp	#LR__3375
26458     14 2B 02 F6 | 	mov	local03, local02
2645c     01 2A 86 F1 | 	sub	local03, #1
26460                 | LR__3372
26460     15 15 02 F6 | 	mov	arg02, local03
26464     13 15 02 F1 | 	add	arg02, local01
26468     0A 29 C2 FA | 	rdbyte	local02, arg02
2646c     20 28 0E F2 | 	cmp	local02, #32 wz
26470     44 00 90 AD |  if_e	jmp	#LR__3374
26474     15 13 02 F6 | 	mov	arg01, local03
26478     02 12 06 F1 | 	add	arg01, #2
2647c     34 1C B0 FD | 	call	#__system___gc_alloc_managed
26480     FD 2C 0A F6 | 	mov	local04, result1 wz
26484     28 00 90 AD |  if_e	jmp	#LR__3373
26488     15 17 02 F6 | 	mov	arg03, local03
2648c     01 16 06 F1 | 	add	arg03, #1
26490     16 13 02 F6 | 	mov	arg01, local04
26494     13 15 02 F6 | 	mov	arg02, local01
26498     98 D9 BF FD | 	call	#__system____builtin_memmove
2649c     01 2A 06 F1 | 	add	local03, #1
264a0     16 2B 02 F1 | 	add	local03, local04
264a4     15 01 48 FC | 	wrbyte	#0, local03
264a8     16 FB 01 F6 | 	mov	result1, local04
264ac     1C 00 90 FD | 	jmp	#LR__3375
264b0                 | LR__3373
264b0     16 FB 01 F6 | 	mov	result1, local04
264b4     14 00 90 FD | 	jmp	#LR__3375
264b8                 | LR__3374
264b8     01 2A 86 F1 | 	sub	local03, #1
264bc     00 2A 56 F2 | 	cmps	local03, #0 wc
264c0     9C FF 9F 3D |  if_ae	jmp	#LR__3372
264c4     9D 01 00 FF 
264c8     31 FA 05 F6 | 	mov	result1, ##@LR__5250
264cc                 | LR__3375
264cc     A7 F0 03 F6 | 	mov	ptra, fp
264d0     B2 00 A0 FD | 	call	#popregs_
264d4                 | __system__RTrim_S_ret
264d4     2D 00 64 FD | 	ret
264d8                 | 
264d8                 | __system__Instr
264d8     07 4A 05 F6 | 	mov	COUNT_, #7
264dc     A8 00 A0 FD | 	call	#pushregs_
264e0     09 27 02 F6 | 	mov	local01, arg01
264e4     0A 29 02 F6 | 	mov	local02, arg02
264e8     0B 2B 02 F6 | 	mov	local03, arg03
264ec     15 13 02 F6 | 	mov	arg01, local03
264f0     09 2D 02 F6 | 	mov	local04, arg01
264f4     97 06 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
264f8                 | LR__3380
264f8     16 FB C9 FA | 	rdbyte	result1, local04 wz
264fc     01 2C 06 51 |  if_ne	add	local04, #1
26500     F4 FF 9F 5D |  if_ne	jmp	#LR__3380
26504                 | LR__3381
26504     09 2D 82 F1 | 	sub	local04, arg01
26508     16 2F 02 F6 | 	mov	local05, local04
2650c     14 13 02 F6 | 	mov	arg01, local02
26510     09 2D 02 F6 | 	mov	local04, arg01
26514     97 06 48 FB | 	callpa	#(@LR__3383-@LR__3382)>>2,fcache_load_ptr_
26518                 | LR__3382
26518     16 FB C9 FA | 	rdbyte	result1, local04 wz
2651c     01 2C 06 51 |  if_ne	add	local04, #1
26520     F4 FF 9F 5D |  if_ne	jmp	#LR__3382
26524                 | LR__3383
26524     09 2D 82 F1 | 	sub	local04, arg01
26528     16 FB 01 F6 | 	mov	result1, local04
2652c     FD 18 0A F6 | 	mov	arg04, result1 wz
26530     00 FA 05 A6 |  if_e	mov	result1, #0
26534     98 00 90 AD |  if_e	jmp	#LR__3387
26538     00 2E 0E F2 | 	cmp	local05, #0 wz
2653c     00 FA 05 A6 |  if_e	mov	result1, #0
26540     8C 00 90 AD |  if_e	jmp	#LR__3387
26544     0C 27 5A F2 | 	cmps	local01, arg04 wcz
26548     00 FA 05 16 |  if_a	mov	result1, #0
2654c     80 00 90 1D |  if_a	jmp	#LR__3387
26550     01 26 56 F2 | 	cmps	local01, #1 wc
26554     01 26 06 C6 |  if_b	mov	local01, #1
26558     15 31 C2 FA | 	rdbyte	local06, local03
2655c     01 2E 0E F2 | 	cmp	local05, #1 wz
26560     18 00 90 5D |  if_ne	jmp	#LR__3384
26564     14 13 02 F6 | 	mov	arg01, local02
26568     18 15 02 F6 | 	mov	arg02, local06
2656c     13 17 02 F6 | 	mov	arg03, local01
26570     00 18 06 F6 | 	mov	arg04, #0
26574     14 37 B0 FD | 	call	#__system____ScanForChar
26578     54 00 90 FD | 	jmp	#LR__3387
2657c                 | LR__3384
2657c     13 33 02 F6 | 	mov	local07, local01
26580                 | LR__3385
26580     14 13 02 F6 | 	mov	arg01, local02
26584     18 15 02 F6 | 	mov	arg02, local06
26588     19 17 02 F6 | 	mov	arg03, local07
2658c     00 18 06 F6 | 	mov	arg04, #0
26590     F8 36 B0 FD | 	call	#__system____ScanForChar
26594     FD 32 0A F6 | 	mov	local07, result1 wz
26598     30 00 90 AD |  if_e	jmp	#LR__3386
2659c     17 17 02 F6 | 	mov	arg03, local05
265a0     14 13 02 F6 | 	mov	arg01, local02
265a4     19 15 02 F6 | 	mov	arg02, local07
265a8     FC FA BF FD | 	call	#__system__Mid_S
265ac     FD 12 02 F6 | 	mov	arg01, result1
265b0     15 15 02 F6 | 	mov	arg02, local03
265b4     84 D9 BF FD | 	call	#__system___string_cmp
265b8     00 FA 0D F2 | 	cmp	result1, #0 wz
265bc     19 FB 01 A6 |  if_e	mov	result1, local07
265c0     0C 00 90 AD |  if_e	jmp	#LR__3387
265c4     17 33 02 F1 | 	add	local07, local05
265c8     B4 FF 9F FD | 	jmp	#LR__3385
265cc                 | LR__3386
265cc     00 FA 05 F6 | 	mov	result1, #0
265d0                 | LR__3387
265d0     A7 F0 03 F6 | 	mov	ptra, fp
265d4     B2 00 A0 FD | 	call	#popregs_
265d8                 | __system__Instr_ret
265d8     2D 00 64 FD | 	ret
265dc                 | 
265dc                 | __system__InstrRev
265dc     07 4A 05 F6 | 	mov	COUNT_, #7
265e0     A8 00 A0 FD | 	call	#pushregs_
265e4     09 27 02 F6 | 	mov	local01, arg01
265e8     0A 29 02 F6 | 	mov	local02, arg02
265ec     0B 2B 02 F6 | 	mov	local03, arg03
265f0     15 13 02 F6 | 	mov	arg01, local03
265f4     09 2D 02 F6 | 	mov	local04, arg01
265f8     97 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
265fc                 | LR__3390
265fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
26600     01 2C 06 51 |  if_ne	add	local04, #1
26604     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
26608                 | LR__3391
26608     09 2D 82 F1 | 	sub	local04, arg01
2660c     16 2F 02 F6 | 	mov	local05, local04
26610     14 13 02 F6 | 	mov	arg01, local02
26614     09 2D 02 F6 | 	mov	local04, arg01
26618     97 06 48 FB | 	callpa	#(@LR__3393-@LR__3392)>>2,fcache_load_ptr_
2661c                 | LR__3392
2661c     16 FB C9 FA | 	rdbyte	result1, local04 wz
26620     01 2C 06 51 |  if_ne	add	local04, #1
26624     F4 FF 9F 5D |  if_ne	jmp	#LR__3392
26628                 | LR__3393
26628     09 2D 82 F1 | 	sub	local04, arg01
2662c     16 FB 01 F6 | 	mov	result1, local04
26630     FD 18 0A F6 | 	mov	arg04, result1 wz
26634     00 FA 05 A6 |  if_e	mov	result1, #0
26638     98 00 90 AD |  if_e	jmp	#LR__3397
2663c     00 2E 0E F2 | 	cmp	local05, #0 wz
26640     00 FA 05 A6 |  if_e	mov	result1, #0
26644     8C 00 90 AD |  if_e	jmp	#LR__3397
26648     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2664c     0C 27 02 16 |  if_a	mov	local01, arg04
26650     01 26 56 F2 | 	cmps	local01, #1 wc
26654     01 26 06 C6 |  if_b	mov	local01, #1
26658     15 31 C2 FA | 	rdbyte	local06, local03
2665c     01 2E 0E F2 | 	cmp	local05, #1 wz
26660     18 00 90 5D |  if_ne	jmp	#LR__3394
26664     14 13 02 F6 | 	mov	arg01, local02
26668     18 15 02 F6 | 	mov	arg02, local06
2666c     13 17 02 F6 | 	mov	arg03, local01
26670     01 18 06 F6 | 	mov	arg04, #1
26674     14 36 B0 FD | 	call	#__system____ScanForChar
26678     58 00 90 FD | 	jmp	#LR__3397
2667c                 | LR__3394
2667c     17 33 02 F6 | 	mov	local07, local05
26680     01 32 86 F1 | 	sub	local07, #1
26684                 | LR__3395
26684     14 13 02 F6 | 	mov	arg01, local02
26688     18 15 02 F6 | 	mov	arg02, local06
2668c     19 17 02 F6 | 	mov	arg03, local07
26690     01 18 06 F6 | 	mov	arg04, #1
26694     F4 35 B0 FD | 	call	#__system____ScanForChar
26698     FD 32 0A F6 | 	mov	local07, result1 wz
2669c     30 00 90 AD |  if_e	jmp	#LR__3396
266a0     17 17 02 F6 | 	mov	arg03, local05
266a4     14 13 02 F6 | 	mov	arg01, local02
266a8     19 15 02 F6 | 	mov	arg02, local07
266ac     F8 F9 BF FD | 	call	#__system__Mid_S
266b0     FD 12 02 F6 | 	mov	arg01, result1
266b4     15 15 02 F6 | 	mov	arg02, local03
266b8     80 D8 BF FD | 	call	#__system___string_cmp
266bc     00 FA 0D F2 | 	cmp	result1, #0 wz
266c0     19 FB 01 A6 |  if_e	mov	result1, local07
266c4     0C 00 90 AD |  if_e	jmp	#LR__3397
266c8     17 33 82 F1 | 	sub	local07, local05
266cc     B4 FF 9F FD | 	jmp	#LR__3395
266d0                 | LR__3396
266d0     00 FA 05 F6 | 	mov	result1, #0
266d4                 | LR__3397
266d4     A7 F0 03 F6 | 	mov	ptra, fp
266d8     B2 00 A0 FD | 	call	#popregs_
266dc                 | __system__InstrRev_ret
266dc     2D 00 64 FD | 	ret
266e0                 | 
266e0                 | __system___remove
266e0     06 4A 05 F6 | 	mov	COUNT_, #6
266e4     A8 00 A0 FD | 	call	#pushregs_
266e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
266ec     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
266f0     09 15 02 F6 | 	mov	arg02, arg01
266f4     13 13 02 F6 | 	mov	arg01, local01
266f8     00 16 06 F6 | 	mov	arg03, #0
266fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26700     A8 DF BF FD | 	call	#__system____getvfsforfile
26704     FD 28 0A F6 | 	mov	local02, result1 wz
26708     10 00 90 AD |  if_e	jmp	#LR__3400
2670c     20 28 06 F1 | 	add	local02, #32
26710     14 13 0A FB | 	rdlong	arg01, local02 wz
26714     20 28 86 F1 | 	sub	local02, #32
26718     14 00 90 5D |  if_ne	jmp	#LR__3401
2671c                 | LR__3400
2671c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26720     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26724     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26728     01 FA 65 F6 | 	neg	result1, #1
2672c     A8 00 90 FD | 	jmp	#LR__3404
26730                 | LR__3401
26730     40 28 06 F1 | 	add	local02, #64
26734     14 2B 02 FB | 	rdlong	local03, local02
26738     15 2D 02 F6 | 	mov	local04, local03
2673c     40 28 86 F1 | 	sub	local02, #64
26740     13 2C 46 F7 | 	zerox	local04, #19
26744     14 2A 46 F0 | 	shr	local03, #20
26748     02 2A 66 F0 | 	shl	local03, #2
2674c     ED 2A 02 F1 | 	add	local03, __methods__
26750     15 2B 02 FB | 	rdlong	local03, local03
26754     13 13 02 F6 | 	mov	arg01, local01
26758     F2 2E 02 F6 | 	mov	local05, objptr
2675c     16 E5 01 F6 | 	mov	objptr, local04
26760     2D 2A 62 FD | 	call	local03
26764     17 E5 01 F6 | 	mov	objptr, local05
26768     FD 30 02 F6 | 	mov	local06, result1
2676c     FF FF 7F FF 
26770     F2 31 0E F2 | 	cmp	local06, ##-14 wz
26774     38 00 90 5D |  if_ne	jmp	#LR__3402
26778     3C 28 06 F1 | 	add	local02, #60
2677c     14 31 02 FB | 	rdlong	local06, local02
26780     18 2B 02 F6 | 	mov	local03, local06
26784     13 30 46 F7 | 	zerox	local06, #19
26788     14 2A 46 F0 | 	shr	local03, #20
2678c     02 2A 66 F0 | 	shl	local03, #2
26790     ED 2A 02 F1 | 	add	local03, __methods__
26794     15 2B 02 FB | 	rdlong	local03, local03
26798     13 13 02 F6 | 	mov	arg01, local01
2679c     F2 2E 02 F6 | 	mov	local05, objptr
267a0     18 E5 01 F6 | 	mov	objptr, local06
267a4     2D 2A 62 FD | 	call	local03
267a8     17 E5 01 F6 | 	mov	objptr, local05
267ac     FD 30 02 F6 | 	mov	local06, result1
267b0                 | LR__3402
267b0     00 30 0E F2 | 	cmp	local06, #0 wz
267b4     1C 00 90 AD |  if_e	jmp	#LR__3403
267b8     18 13 6A F6 | 	neg	arg01, local06 wz
267bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
267c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
267c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
267c8     01 FA 65 56 |  if_ne	neg	result1, #1
267cc     00 FA 05 A6 |  if_e	mov	result1, #0
267d0     04 00 90 FD | 	jmp	#LR__3404
267d4                 | LR__3403
267d4     00 FA 05 F6 | 	mov	result1, #0
267d8                 | LR__3404
267d8     A7 F0 03 F6 | 	mov	ptra, fp
267dc     B2 00 A0 FD | 	call	#popregs_
267e0                 | __system___remove_ret
267e0     2D 00 64 FD | 	ret
267e4                 | 
267e4                 | __system___mkdir
267e4     05 4A 05 F6 | 	mov	COUNT_, #5
267e8     A8 00 A0 FD | 	call	#pushregs_
267ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
267f0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
267f4     09 15 02 F6 | 	mov	arg02, arg01
267f8     13 13 02 F6 | 	mov	arg01, local01
267fc     00 16 06 F6 | 	mov	arg03, #0
26800     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26804     A4 DE BF FD | 	call	#__system____getvfsforfile
26808     FD 28 0A F6 | 	mov	local02, result1 wz
2680c     10 00 90 AD |  if_e	jmp	#LR__3410
26810     20 28 06 F1 | 	add	local02, #32
26814     14 15 0A FB | 	rdlong	arg02, local02 wz
26818     20 28 86 F1 | 	sub	local02, #32
2681c     14 00 90 5D |  if_ne	jmp	#LR__3411
26820                 | LR__3410
26820     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26824     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26828     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2682c     01 FA 65 F6 | 	neg	result1, #1
26830     60 00 90 FD | 	jmp	#LR__3413
26834                 | LR__3411
26834     38 28 06 F1 | 	add	local02, #56
26838     14 2B 02 FB | 	rdlong	local03, local02
2683c     15 2D 02 F6 | 	mov	local04, local03
26840     13 2A 46 F7 | 	zerox	local03, #19
26844     14 2C 46 F0 | 	shr	local04, #20
26848     02 2C 66 F0 | 	shl	local04, #2
2684c     ED 2C 02 F1 | 	add	local04, __methods__
26850     16 2D 02 FB | 	rdlong	local04, local04
26854     13 13 02 F6 | 	mov	arg01, local01
26858     FF 15 06 F6 | 	mov	arg02, #511
2685c     F2 2E 02 F6 | 	mov	local05, objptr
26860     15 E5 01 F6 | 	mov	objptr, local03
26864     2D 2C 62 FD | 	call	local04
26868     17 E5 01 F6 | 	mov	objptr, local05
2686c     FD 12 0A F6 | 	mov	arg01, result1 wz
26870     1C 00 90 AD |  if_e	jmp	#LR__3412
26874     09 13 6A F6 | 	neg	arg01, arg01 wz
26878     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2687c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26880     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26884     01 FA 65 56 |  if_ne	neg	result1, #1
26888     00 FA 05 A6 |  if_e	mov	result1, #0
2688c     04 00 90 FD | 	jmp	#LR__3413
26890                 | LR__3412
26890     00 FA 05 F6 | 	mov	result1, #0
26894                 | LR__3413
26894     A7 F0 03 F6 | 	mov	ptra, fp
26898     B2 00 A0 FD | 	call	#popregs_
2689c                 | __system___mkdir_ret
2689c     2D 00 64 FD | 	ret
268a0                 | 
268a0                 | __system___strerror
268a0     00 12 56 F2 | 	cmps	arg01, #0 wc
268a4     08 00 90 CD |  if_b	jmp	#LR__3420
268a8     1A 12 56 F2 | 	cmps	arg01, #26 wc
268ac     04 00 90 CD |  if_b	jmp	#LR__3421
268b0                 | LR__3420
268b0     19 12 06 F6 | 	mov	arg01, #25
268b4                 | LR__3421
268b4     02 12 66 F0 | 	shl	arg01, #2
268b8     01 00 00 FF 
268bc     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
268c0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
268c4     09 FB 01 FB | 	rdlong	result1, arg01
268c8     01 00 00 FF 
268cc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
268d0                 | __system___strerror_ret
268d0     2D 00 64 FD | 	ret
268d4                 | 
268d4                 | __system___int64_shl
268d4     20 16 CE F7 | 	test	arg03, #32 wz
268d8     09 15 02 56 |  if_ne	mov	arg02, arg01
268dc     00 12 06 56 |  if_ne	mov	arg01, #0
268e0     1F 16 CE F7 | 	test	arg03, #31 wz
268e4     18 00 90 AD |  if_e	jmp	#LR__3430
268e8     0B 15 62 F0 | 	shl	arg02, arg03
268ec     09 FB 01 F6 | 	mov	result1, arg01
268f0     0B FD 61 F6 | 	neg	result2, arg03
268f4     FE FA 41 F0 | 	shr	result1, result2
268f8     FD 14 42 F5 | 	or	arg02, result1
268fc     0B 13 62 F0 | 	shl	arg01, arg03
26900                 | LR__3430
26900     0A FD 01 F6 | 	mov	result2, arg02
26904     09 FB 01 F6 | 	mov	result1, arg01
26908                 | __system___int64_shl_ret
26908     2D 00 64 FD | 	ret
2690c                 | 
2690c                 | __system___usepins
2690c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26910     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26914     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
26918     00 13 CA F7 | 	test	arg01, _var01 wz
2691c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
26920     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26924     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
26928     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2692c     00 FA 05 56 |  if_ne	mov	result1, #0
26930     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26934     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26938     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2693c     09 03 42 F5 | 	or	_var02, arg01
26940     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26944     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26948     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2694c     0A 03 42 F5 | 	or	_var02, arg02
26950     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26954     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
26958     01 FA 65 F6 | 	neg	result1, #1
2695c                 | __system___usepins_ret
2695c     2D 00 64 FD | 	ret
26960                 | 
26960                 | __system___freepins
26960     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26964     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26968     09 01 22 F5 | 	andn	_var01, arg01
2696c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
26970     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26974     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26978     0A 01 22 F5 | 	andn	_var01, arg02
2697c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
26980     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
26984                 | __system___freepins_ret
26984     2D 00 64 FD | 	ret
26988                 | 
26988                 | __system___float_fromuns
26988     09 17 0A F6 | 	mov	arg03, arg01 wz
2698c     0B FB 01 A6 |  if_e	mov	result1, arg03
26990     24 00 90 AD |  if_e	jmp	#LR__3440
26994     0B 15 92 F7 | 	encod	arg02, arg03 wc
26998     01 14 06 C1 |  if_b	add	arg02, #1
2699c     01 14 86 F1 | 	sub	arg02, #1
269a0     1F 12 06 F6 | 	mov	arg01, #31
269a4     0A 13 82 F1 | 	sub	arg01, arg02
269a8     09 17 62 F0 | 	shl	arg03, arg01
269ac     02 16 46 F0 | 	shr	arg03, #2
269b0     00 12 06 F6 | 	mov	arg01, #0
269b4     4C 09 B0 FD | 	call	#__system___float_Pack
269b8                 | LR__3440
269b8                 | __system___float_fromuns_ret
269b8     2D 00 64 FD | 	ret
269bc                 | 
269bc                 | __system___float_add
269bc     0F 4A 05 F6 | 	mov	COUNT_, #15
269c0     A8 00 A0 FD | 	call	#pushregs_
269c4     09 27 02 F6 | 	mov	local01, arg01
269c8     0A 29 02 F6 | 	mov	local02, arg02
269cc     00 2A 06 F6 | 	mov	local03, #0
269d0     13 2D 02 F6 | 	mov	local04, local01
269d4     16 2F 02 F6 | 	mov	local05, local04
269d8     16 2E 46 F7 | 	zerox	local05, #22
269dc     16 31 02 F6 | 	mov	local06, local04
269e0     01 30 66 F0 | 	shl	local06, #1
269e4     18 30 46 F0 | 	shr	local06, #24
269e8     1F 2C 46 F0 | 	shr	local04, #31
269ec     14 13 02 F6 | 	mov	arg01, local02
269f0     09 FB 01 F6 | 	mov	result1, arg01
269f4     FD 32 02 F6 | 	mov	local07, result1
269f8     19 35 02 F6 | 	mov	local08, local07
269fc     16 34 46 F7 | 	zerox	local08, #22
26a00     19 37 02 F6 | 	mov	local09, local07
26a04     01 36 66 F0 | 	shl	local09, #1
26a08     18 36 46 F0 | 	shr	local09, #24
26a0c     1B 39 02 F6 | 	mov	local10, local09
26a10     1F 32 46 F0 | 	shr	local07, #31
26a14     00 3A 06 F6 | 	mov	local11, #0
26a18     00 3C 06 F6 | 	mov	local12, #0
26a1c     1C 31 12 F2 | 	cmp	local06, local10 wc
26a20     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
26a24     2C 00 90 1D |  if_a	jmp	#LR__3450
26a28     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
26a2c     24 00 90 3D |  if_ae	jmp	#LR__3450
26a30     17 3F 02 F6 | 	mov	local13, local05
26a34     1A 2F 02 F6 | 	mov	local05, local08
26a38     1F 35 02 F6 | 	mov	local08, local13
26a3c     18 3F 02 F6 | 	mov	local13, local06
26a40     1C 31 02 F6 | 	mov	local06, local10
26a44     1F 39 02 F6 | 	mov	local10, local13
26a48     16 3F 02 F6 | 	mov	local13, local04
26a4c     19 2D 02 F6 | 	mov	local04, local07
26a50     1F 33 02 F6 | 	mov	local07, local13
26a54                 | LR__3450
26a54     FF 30 0E F2 | 	cmp	local06, #255 wz
26a58     70 01 90 AD |  if_e	jmp	#LR__3465
26a5c     00 30 0E F2 | 	cmp	local06, #0 wz
26a60     AC 01 90 AD |  if_e	jmp	#LR__3467
26a64     17 2E 26 F4 | 	bith	local05, #23
26a68                 | LR__3451
26a68     00 38 0E F2 | 	cmp	local10, #0 wz
26a6c     F0 01 90 AD |  if_e	jmp	#LR__3471
26a70     17 34 26 F4 | 	bith	local08, #23
26a74                 | LR__3452
26a74     7F 30 86 F1 | 	sub	local06, #127
26a78     7F 38 86 F1 | 	sub	local10, #127
26a7c     18 41 02 F6 | 	mov	local14, local06
26a80     1C 41 82 F1 | 	sub	local14, local10
26a84     97 14 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
26a88                 | LR__3453
26a88     20 40 56 F2 | 	cmps	local14, #32 wc
26a8c     20 00 90 CD |  if_b	jmp	#LR__3455
26a90     1A 37 02 F6 | 	mov	local09, local08
26a94     00 3A 0E F2 | 	cmp	local11, #0 wz
26a98     6F 3A 62 FD | 	wrnz	local11
26a9c     1D 37 42 F5 | 	or	local09, local11
26aa0     1B 3B 02 F6 | 	mov	local11, local09
26aa4     00 34 06 F6 | 	mov	local08, #0
26aa8     20 40 86 F1 | 	sub	local14, #32
26aac     D8 FF 9F FD | 	jmp	#LR__3453
26ab0                 | LR__3454
26ab0                 | LR__3455
26ab0     00 40 0E F2 | 	cmp	local14, #0 wz
26ab4     38 00 90 AD |  if_e	jmp	#LR__3456
26ab8     1A 3F 02 F6 | 	mov	local13, local08
26abc     20 38 06 F6 | 	mov	local10, #32
26ac0     20 39 82 F1 | 	sub	local10, local14
26ac4     1C 3F 62 F0 | 	shl	local13, local10
26ac8     1D 39 02 F6 | 	mov	local10, local11
26acc     20 36 06 F6 | 	mov	local09, #32
26ad0     20 37 82 F1 | 	sub	local09, local14
26ad4     1B 39 6A F0 | 	shl	local10, local09 wz
26ad8     20 3B 42 F0 | 	shr	local11, local14
26adc     20 35 42 F0 | 	shr	local08, local14
26ae0     1F 3B 42 F5 | 	or	local11, local13
26ae4     00 42 06 F6 | 	mov	local15, #0
26ae8     01 42 06 56 |  if_ne	mov	local15, #1
26aec     21 3B 42 F5 | 	or	local11, local15
26af0                 | LR__3456
26af0     16 43 02 F6 | 	mov	local15, local04
26af4     19 43 62 F5 | 	xor	local15, local07
26af8     01 42 CE F7 | 	test	local15, #1 wz
26afc     18 00 90 AD |  if_e	jmp	#LR__3457
26b00     1A 35 22 F6 | 	not	local08, local08
26b04     1D 3B 22 F6 | 	not	local11, local11
26b08     01 3A 0E F1 | 	add	local11, #1 wz
26b0c     00 42 06 F6 | 	mov	local15, #0
26b10     01 42 06 A6 |  if_e	mov	local15, #1
26b14     21 35 02 F1 | 	add	local08, local15
26b18                 | LR__3457
26b18     1D 3D 12 F1 | 	add	local12, local11 wc
26b1c     1A 2F 22 F1 | 	addx	local05, local08
26b20     00 2E 56 F2 | 	cmps	local05, #0 wc
26b24     1C 00 90 3D |  if_ae	jmp	#LR__3458
26b28     01 2C 66 F5 | 	xor	local04, #1
26b2c     17 2F 22 F6 | 	not	local05, local05
26b30     1E 3D 22 F6 | 	not	local12, local12
26b34     01 3C 0E F1 | 	add	local12, #1 wz
26b38     00 42 06 F6 | 	mov	local15, #0
26b3c     01 42 06 A6 |  if_e	mov	local15, #1
26b40     21 2F 02 F1 | 	add	local05, local15
26b44                 | LR__3458
26b44     00 80 00 FF 
26b48     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
26b4c     28 00 90 CD |  if_b	jmp	#LR__3459
26b50     01 30 06 F1 | 	add	local06, #1
26b54     1E 41 02 F6 | 	mov	local14, local12
26b58     01 40 06 F5 | 	and	local14, #1
26b5c     01 3C 46 F0 | 	shr	local12, #1
26b60     17 43 02 F6 | 	mov	local15, local05
26b64     1F 42 66 F0 | 	shl	local15, #31
26b68     21 3D 42 F5 | 	or	local12, local15
26b6c     20 3D 42 F5 | 	or	local12, local14
26b70     01 2E 46 F0 | 	shr	local05, #1
26b74     3C 00 90 FD | 	jmp	#LR__3464
26b78                 | LR__3459
26b78     00 40 00 FF 
26b7c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26b80     30 00 90 3D |  if_ae	jmp	#LR__3463
26b84     00 2E 0E F2 | 	cmp	local05, #0 wz
26b88     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
26b8c     08 2C 46 A5 |  if_e	or	local04, #8
26b90     01 2C 26 A5 |  if_e	andn	local04, #1
26b94     1C 00 90 AD |  if_e	jmp	#LR__3462
26b98                 | LR__3460
26b98     00 40 00 FF 
26b9c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26ba0     10 00 90 3D |  if_ae	jmp	#LR__3461
26ba4     1E 3D 12 F1 | 	add	local12, local12 wc
26ba8     17 2F 22 F1 | 	addx	local05, local05
26bac     01 30 86 F1 | 	sub	local06, #1
26bb0     E4 FF 9F FD | 	jmp	#LR__3460
26bb4                 | LR__3461
26bb4                 | LR__3462
26bb4                 | LR__3463
26bb4                 | LR__3464
26bb4     17 13 02 F6 | 	mov	arg01, local05
26bb8     1E 15 02 F6 | 	mov	arg02, local12
26bbc     18 17 02 F6 | 	mov	arg03, local06
26bc0     16 19 02 F6 | 	mov	arg04, local04
26bc4     08 35 B0 FD | 	call	#__system__pack_0651
26bc8     DC 00 90 FD | 	jmp	#LR__3475
26bcc                 | LR__3465
26bcc     FF 38 0E F2 | 	cmp	local10, #255 wz
26bd0     10 00 90 5D |  if_ne	jmp	#LR__3466
26bd4     16 33 0A F2 | 	cmp	local07, local04 wz
26bd8     00 F8 3F 5F 
26bdc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26be0     C4 00 90 5D |  if_ne	jmp	#LR__3475
26be4                 | LR__3466
26be4     00 2E 0E F2 | 	cmp	local05, #0 wz
26be8     00 F8 3F 5F 
26bec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26bf0     B4 00 90 5D |  if_ne	jmp	#LR__3475
26bf4     1E 15 02 F6 | 	mov	arg02, local12
26bf8     18 17 02 F6 | 	mov	arg03, local06
26bfc     16 19 02 F6 | 	mov	arg04, local04
26c00     02 18 46 F5 | 	or	arg04, #2
26c04     17 13 02 F6 | 	mov	arg01, local05
26c08     C4 34 B0 FD | 	call	#__system__pack_0651
26c0c     98 00 90 FD | 	jmp	#LR__3475
26c10                 | LR__3467
26c10     00 2E 0E F2 | 	cmp	local05, #0 wz
26c14     28 00 90 AD |  if_e	jmp	#LR__3470
26c18     01 2E 66 F0 | 	shl	local05, #1
26c1c     97 0E 48 FB | 	callpa	#(@LR__3469-@LR__3468)>>2,fcache_load_ptr_
26c20                 | LR__3468
26c20     00 40 00 FF 
26c24     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26c28     18 43 02 C6 |  if_b	mov	local15, local06
26c2c     01 42 86 C1 |  if_b	sub	local15, #1
26c30     21 31 02 C6 |  if_b	mov	local06, local15
26c34     01 2E 66 C0 |  if_b	shl	local05, #1
26c38     E4 FF 9F CD |  if_b	jmp	#LR__3468
26c3c                 | LR__3469
26c3c     28 FE 9F FD | 	jmp	#LR__3451
26c40                 | LR__3470
26c40     19 2D 02 F5 | 	and	local04, local07
26c44     16 19 02 F6 | 	mov	arg04, local04
26c48     08 18 46 F5 | 	or	arg04, #8
26c4c     00 12 06 F6 | 	mov	arg01, #0
26c50     00 14 06 F6 | 	mov	arg02, #0
26c54     00 16 06 F6 | 	mov	arg03, #0
26c58     74 34 B0 FD | 	call	#__system__pack_0651
26c5c     48 00 90 FD | 	jmp	#LR__3475
26c60                 | LR__3471
26c60     00 34 0E F2 | 	cmp	local08, #0 wz
26c64     28 00 90 AD |  if_e	jmp	#LR__3474
26c68     01 34 66 F0 | 	shl	local08, #1
26c6c     97 0E 48 FB | 	callpa	#(@LR__3473-@LR__3472)>>2,fcache_load_ptr_
26c70                 | LR__3472
26c70     00 40 00 FF 
26c74     00 34 16 F2 | 	cmp	local08, ##8388608 wc
26c78     1C 43 02 C6 |  if_b	mov	local15, local10
26c7c     01 42 86 C1 |  if_b	sub	local15, #1
26c80     21 39 02 C6 |  if_b	mov	local10, local15
26c84     01 34 66 C0 |  if_b	shl	local08, #1
26c88     E4 FF 9F CD |  if_b	jmp	#LR__3472
26c8c                 | LR__3473
26c8c     E4 FD 9F FD | 	jmp	#LR__3452
26c90                 | LR__3474
26c90     7F 30 86 F1 | 	sub	local06, #127
26c94     17 13 02 F6 | 	mov	arg01, local05
26c98     1E 15 02 F6 | 	mov	arg02, local12
26c9c     18 17 02 F6 | 	mov	arg03, local06
26ca0     16 19 02 F6 | 	mov	arg04, local04
26ca4     28 34 B0 FD | 	call	#__system__pack_0651
26ca8                 | LR__3475
26ca8     A7 F0 03 F6 | 	mov	ptra, fp
26cac     B2 00 A0 FD | 	call	#popregs_
26cb0                 | __system___float_add_ret
26cb0     2D 00 64 FD | 	ret
26cb4                 | 
26cb4                 | __system___float_sqrt
26cb4     04 4A 05 F6 | 	mov	COUNT_, #4
26cb8     A8 00 A0 FD | 	call	#pushregs_
26cbc     09 27 02 F6 | 	mov	local01, arg01
26cc0     09 FB 01 F6 | 	mov	result1, arg01
26cc4     FD 28 02 F6 | 	mov	local02, result1
26cc8     14 2B 02 F6 | 	mov	local03, local02
26ccc     16 2A 46 F7 | 	zerox	local03, #22
26cd0     14 2D 02 F6 | 	mov	local04, local02
26cd4     01 2C 66 F0 | 	shl	local04, #1
26cd8     18 2C 4E F0 | 	shr	local04, #24 wz
26cdc     1F 28 46 F0 | 	shr	local02, #31
26ce0     70 00 90 AD |  if_e	jmp	#LR__3481
26ce4     17 2A 26 F4 | 	bith	local03, #23
26ce8                 | LR__3480
26ce8     00 28 0E F2 | 	cmp	local02, #0 wz
26cec     00 F8 3F 5F 
26cf0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26cf4     88 00 90 5D |  if_ne	jmp	#LR__3484
26cf8     FF 2C 0E F2 | 	cmp	local04, #255 wz
26cfc     13 FB 01 A6 |  if_e	mov	result1, local01
26d00     7C 00 90 AD |  if_e	jmp	#LR__3484
26d04     7F 2C 86 F1 | 	sub	local04, #127
26d08     01 2C CE F7 | 	test	local04, #1 wz
26d0c     01 2A 66 50 |  if_ne	shl	local03, #1
26d10     05 2A 66 F0 | 	shl	local03, #5
26d14     15 01 38 FD | 	qsqrt	#0, local03
26d18     01 2C 86 51 |  if_ne	sub	local04, #1
26d1c     16 2D 52 F6 | 	abs	local04, local04 wc
26d20     01 2C 46 F0 | 	shr	local04, #1
26d24     16 17 82 F6 | 	negc	arg03, local04
26d28     14 19 02 F6 | 	mov	arg04, local02
26d2c     18 12 62 FD | 	getqx	arg01
26d30     09 15 02 F6 | 	mov	arg02, arg01
26d34     19 14 66 F0 | 	shl	arg02, #25
26d38     07 12 46 F0 | 	shr	arg01, #7
26d3c     00 80 00 FF 
26d40     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
26d44     01 16 06 31 |  if_ae	add	arg03, #1
26d48     01 12 46 30 |  if_ae	shr	arg01, #1
26d4c     80 33 B0 FD | 	call	#__system__pack_0651
26d50     2C 00 90 FD | 	jmp	#LR__3484
26d54                 | LR__3481
26d54     00 2A 0E F2 | 	cmp	local03, #0 wz
26d58     13 FB 01 A6 |  if_e	mov	result1, local01
26d5c     20 00 90 AD |  if_e	jmp	#LR__3484
26d60     01 2A 66 F0 | 	shl	local03, #1
26d64     97 0A 48 FB | 	callpa	#(@LR__3483-@LR__3482)>>2,fcache_load_ptr_
26d68                 | LR__3482
26d68     00 40 00 FF 
26d6c     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
26d70     01 2C 86 C1 |  if_b	sub	local04, #1
26d74     01 2A 66 C0 |  if_b	shl	local03, #1
26d78     EC FF 9F CD |  if_b	jmp	#LR__3482
26d7c                 | LR__3483
26d7c     68 FF 9F FD | 	jmp	#LR__3480
26d80                 | LR__3484
26d80     A7 F0 03 F6 | 	mov	ptra, fp
26d84     B2 00 A0 FD | 	call	#popregs_
26d88                 | __system___float_sqrt_ret
26d88     2D 00 64 FD | 	ret
26d8c                 | 
26d8c                 | __system___float_mul
26d8c     0B 4A 05 F6 | 	mov	COUNT_, #11
26d90     A8 00 A0 FD | 	call	#pushregs_
26d94     09 27 02 F6 | 	mov	local01, arg01
26d98     0A 29 02 F6 | 	mov	local02, arg02
26d9c     13 2B 02 F6 | 	mov	local03, local01
26da0     15 2D 02 F6 | 	mov	local04, local03
26da4     16 2C 46 F7 | 	zerox	local04, #22
26da8     15 2F 02 F6 | 	mov	local05, local03
26dac     01 2E 66 F0 | 	shl	local05, #1
26db0     18 2E 46 F0 | 	shr	local05, #24
26db4     1F 2A 46 F0 | 	shr	local03, #31
26db8     14 FB 01 F6 | 	mov	result1, local02
26dbc     FD 30 02 F6 | 	mov	local06, result1
26dc0     18 33 02 F6 | 	mov	local07, local06
26dc4     16 32 46 F7 | 	zerox	local07, #22
26dc8     18 35 02 F6 | 	mov	local08, local06
26dcc     01 34 66 F0 | 	shl	local08, #1
26dd0     18 34 46 F0 | 	shr	local08, #24
26dd4     1F 30 46 F0 | 	shr	local06, #31
26dd8     18 2B 62 F5 | 	xor	local03, local06
26ddc     FF 2E 0E F2 | 	cmp	local05, #255 wz
26de0     90 00 90 AD |  if_e	jmp	#LR__3493
26de4     FF 34 0E F2 | 	cmp	local08, #255 wz
26de8     D8 00 90 AD |  if_e	jmp	#LR__3495
26dec     00 2E 0E F2 | 	cmp	local05, #0 wz
26df0     0C 01 90 AD |  if_e	jmp	#LR__3496
26df4     17 2C 26 F4 | 	bith	local04, #23
26df8                 | LR__3490
26df8     00 34 0E F2 | 	cmp	local08, #0 wz
26dfc     44 01 90 AD |  if_e	jmp	#LR__3500
26e00     17 32 26 F4 | 	bith	local07, #23
26e04                 | LR__3491
26e04     16 29 02 F6 | 	mov	local02, local04
26e08     04 28 66 F0 | 	shl	local02, #4
26e0c     19 31 02 F6 | 	mov	local06, local07
26e10     05 30 66 F0 | 	shl	local06, #5
26e14     18 29 02 FD | 	qmul	local02, local06
26e18     1A 2F 02 F1 | 	add	local05, local08
26e1c     FE 2E 86 F1 | 	sub	local05, #254
26e20     17 37 02 F6 | 	mov	local09, local05
26e24     04 2C 66 F0 | 	shl	local04, #4
26e28     05 32 66 F0 | 	shl	local07, #5
26e2c     18 38 62 FD | 	getqx	local10
26e30     19 2D 02 FD | 	qmul	local04, local07
26e34     19 3A 62 FD | 	getqy	local11
26e38     00 80 00 FF 
26e3c     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
26e40     18 00 90 CD |  if_b	jmp	#LR__3492
26e44     01 36 06 F1 | 	add	local09, #1
26e48     01 38 46 F0 | 	shr	local10, #1
26e4c     1D 35 02 F6 | 	mov	local08, local11
26e50     1F 34 66 F0 | 	shl	local08, #31
26e54     1A 39 42 F5 | 	or	local10, local08
26e58     01 3A 46 F0 | 	shr	local11, #1
26e5c                 | LR__3492
26e5c     1D 13 02 F6 | 	mov	arg01, local11
26e60     1C 15 02 F6 | 	mov	arg02, local10
26e64     1B 17 02 F6 | 	mov	arg03, local09
26e68     15 19 02 F6 | 	mov	arg04, local03
26e6c     60 32 B0 FD | 	call	#__system__pack_0651
26e70     10 01 90 FD | 	jmp	#LR__3504
26e74                 | LR__3493
26e74     00 2C 0E F2 | 	cmp	local04, #0 wz
26e78     13 FB 01 56 |  if_ne	mov	result1, local01
26e7c     04 01 90 5D |  if_ne	jmp	#LR__3504
26e80     FF 34 56 F2 | 	cmps	local08, #255 wc
26e84     00 34 0E C2 |  if_b	cmp	local08, #0 wz
26e88     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
26e8c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3494
26e90     00 F8 3F CF 
26e94     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
26e98     E8 00 90 CD |  if_b	jmp	#LR__3504
26e9c     00 32 0E F2 | 	cmp	local07, #0 wz
26ea0     14 FB 01 56 |  if_ne	mov	result1, local02
26ea4     DC 00 90 5D |  if_ne	jmp	#LR__3504
26ea8                 | LR__3494
26ea8     02 2A 46 F5 | 	or	local03, #2
26eac     00 12 06 F6 | 	mov	arg01, #0
26eb0     00 14 06 F6 | 	mov	arg02, #0
26eb4     17 17 02 F6 | 	mov	arg03, local05
26eb8     15 19 02 F6 | 	mov	arg04, local03
26ebc     10 32 B0 FD | 	call	#__system__pack_0651
26ec0     C0 00 90 FD | 	jmp	#LR__3504
26ec4                 | LR__3495
26ec4     00 2E 0E F2 | 	cmp	local05, #0 wz
26ec8     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
26ecc     00 F8 3F AF 
26ed0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
26ed4     AC 00 90 AD |  if_e	jmp	#LR__3504
26ed8     00 32 0E F2 | 	cmp	local07, #0 wz
26edc     14 FB 01 56 |  if_ne	mov	result1, local02
26ee0     A0 00 90 5D |  if_ne	jmp	#LR__3504
26ee4     1A 17 02 F6 | 	mov	arg03, local08
26ee8     15 19 02 F6 | 	mov	arg04, local03
26eec     02 18 46 F5 | 	or	arg04, #2
26ef0     00 12 06 F6 | 	mov	arg01, #0
26ef4     00 14 06 F6 | 	mov	arg02, #0
26ef8     D4 31 B0 FD | 	call	#__system__pack_0651
26efc     84 00 90 FD | 	jmp	#LR__3504
26f00                 | LR__3496
26f00     00 2C 0E F2 | 	cmp	local04, #0 wz
26f04     20 00 90 AD |  if_e	jmp	#LR__3499
26f08     01 2C 66 F0 | 	shl	local04, #1
26f0c     97 0A 48 FB | 	callpa	#(@LR__3498-@LR__3497)>>2,fcache_load_ptr_
26f10                 | LR__3497
26f10     00 40 00 FF 
26f14     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
26f18     01 2E 86 C1 |  if_b	sub	local05, #1
26f1c     01 2C 66 C0 |  if_b	shl	local04, #1
26f20     EC FF 9F CD |  if_b	jmp	#LR__3497
26f24                 | LR__3498
26f24     D0 FE 9F FD | 	jmp	#LR__3490
26f28                 | LR__3499
26f28     08 2A 46 F5 | 	or	local03, #8
26f2c     00 12 06 F6 | 	mov	arg01, #0
26f30     00 14 06 F6 | 	mov	arg02, #0
26f34     00 16 06 F6 | 	mov	arg03, #0
26f38     15 19 02 F6 | 	mov	arg04, local03
26f3c     90 31 B0 FD | 	call	#__system__pack_0651
26f40     40 00 90 FD | 	jmp	#LR__3504
26f44                 | LR__3500
26f44     00 32 0E F2 | 	cmp	local07, #0 wz
26f48     20 00 90 AD |  if_e	jmp	#LR__3503
26f4c     01 32 66 F0 | 	shl	local07, #1
26f50     97 0A 48 FB | 	callpa	#(@LR__3502-@LR__3501)>>2,fcache_load_ptr_
26f54                 | LR__3501
26f54     00 40 00 FF 
26f58     00 32 16 F2 | 	cmp	local07, ##8388608 wc
26f5c     01 34 86 C1 |  if_b	sub	local08, #1
26f60     01 32 66 C0 |  if_b	shl	local07, #1
26f64     EC FF 9F CD |  if_b	jmp	#LR__3501
26f68                 | LR__3502
26f68     98 FE 9F FD | 	jmp	#LR__3491
26f6c                 | LR__3503
26f6c     08 2A 46 F5 | 	or	local03, #8
26f70     00 12 06 F6 | 	mov	arg01, #0
26f74     00 14 06 F6 | 	mov	arg02, #0
26f78     00 16 06 F6 | 	mov	arg03, #0
26f7c     15 19 02 F6 | 	mov	arg04, local03
26f80     4C 31 B0 FD | 	call	#__system__pack_0651
26f84                 | LR__3504
26f84     A7 F0 03 F6 | 	mov	ptra, fp
26f88     B2 00 A0 FD | 	call	#popregs_
26f8c                 | __system___float_mul_ret
26f8c     2D 00 64 FD | 	ret
26f90                 | 
26f90                 | __system___float_div
26f90     0E 4A 05 F6 | 	mov	COUNT_, #14
26f94     A8 00 A0 FD | 	call	#pushregs_
26f98     09 2B 02 F6 | 	mov	local03, arg01
26f9c     0A 2D 02 F6 | 	mov	local04, arg02
26fa0     15 2F 02 F6 | 	mov	local05, local03
26fa4     17 31 02 F6 | 	mov	local06, local05
26fa8     16 30 46 F7 | 	zerox	local06, #22
26fac     17 33 02 F6 | 	mov	local07, local05
26fb0     01 32 66 F0 | 	shl	local07, #1
26fb4     18 32 46 F0 | 	shr	local07, #24
26fb8     1F 2E 46 F0 | 	shr	local05, #31
26fbc     16 FB 01 F6 | 	mov	result1, local04
26fc0     FD 34 02 F6 | 	mov	local08, result1
26fc4     1A 37 02 F6 | 	mov	local09, local08
26fc8     16 36 46 F7 | 	zerox	local09, #22
26fcc     1A 39 02 F6 | 	mov	local10, local08
26fd0     01 38 66 F0 | 	shl	local10, #1
26fd4     18 38 46 F0 | 	shr	local10, #24
26fd8     1F 34 46 F0 | 	shr	local08, #31
26fdc     1A 2F 62 F5 | 	xor	local05, local08
26fe0     FF 32 0E F2 | 	cmp	local07, #255 wz
26fe4     D4 00 90 AD |  if_e	jmp	#LR__3515
26fe8     FF 38 0E F2 | 	cmp	local10, #255 wz
26fec     04 01 90 AD |  if_e	jmp	#LR__3516
26ff0     00 32 0E F2 | 	cmp	local07, #0 wz
26ff4     24 01 90 AD |  if_e	jmp	#LR__3517
26ff8     17 30 26 F4 | 	bith	local06, #23
26ffc                 | LR__3510
26ffc     00 38 0E F2 | 	cmp	local10, #0 wz
27000     70 01 90 AD |  if_e	jmp	#LR__3521
27004     17 36 26 F4 | 	bith	local09, #23
27008                 | LR__3511
27008     1C 33 82 F1 | 	sub	local07, local10
2700c     19 3B 02 F6 | 	mov	local11, local07
27010     18 13 02 F6 | 	mov	arg01, local06
27014     02 12 46 F0 | 	shr	arg01, #2
27018     1E 30 66 F0 | 	shl	local06, #30
2701c     18 15 02 F6 | 	mov	arg02, local06
27020     1B 17 02 F6 | 	mov	arg03, local09
27024     28 12 62 FD | 	setq	arg01
27028     0B 15 12 FD | 	qdiv	arg02, arg03
2702c     00 3C 06 F6 | 	mov	local12, #0
27030     18 26 62 FD | 	getqx	local01
27034     19 FC 61 FD | 	getqy	result2
27038     FE 28 02 F6 | 	mov	local02, result2
2703c     13 3F 02 F6 | 	mov	local13, local01
27040     00 28 4E F2 | 	cmps	local02, #0 wz
27044     1F 41 02 F6 | 	mov	local14, local13
27048     19 40 66 F0 | 	shl	local14, #25
2704c     01 3C 06 56 |  if_ne	mov	local12, #1
27050     1E 41 42 F5 | 	or	local14, local12
27054     07 3E 46 F0 | 	shr	local13, #7
27058     00 80 00 FF 
2705c     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
27060     1C 00 90 CD |  if_b	jmp	#LR__3512
27064     01 3A 06 F1 | 	add	local11, #1
27068     01 40 46 F0 | 	shr	local14, #1
2706c     1F 3D 02 F6 | 	mov	local12, local13
27070     1F 3C 66 F0 | 	shl	local12, #31
27074     1E 41 42 F5 | 	or	local14, local12
27078     01 3E 46 F0 | 	shr	local13, #1
2707c     24 00 90 FD | 	jmp	#LR__3514
27080                 | LR__3512
27080     00 40 00 FF 
27084     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
27088     18 00 90 3D |  if_ae	jmp	#LR__3513
2708c     01 3A 86 F1 | 	sub	local11, #1
27090     01 3E 66 F0 | 	shl	local13, #1
27094     20 3D 02 F6 | 	mov	local12, local14
27098     1F 3C 46 F0 | 	shr	local12, #31
2709c     1E 3F 42 F5 | 	or	local13, local12
270a0     01 40 66 F0 | 	shl	local14, #1
270a4                 | LR__3513
270a4                 | LR__3514
270a4     1F 13 02 F6 | 	mov	arg01, local13
270a8     20 15 02 F6 | 	mov	arg02, local14
270ac     1D 17 02 F6 | 	mov	arg03, local11
270b0     17 19 02 F6 | 	mov	arg04, local05
270b4     18 30 B0 FD | 	call	#__system__pack_0651
270b8     F8 00 90 FD | 	jmp	#LR__3525
270bc                 | LR__3515
270bc     00 30 0E F2 | 	cmp	local06, #0 wz
270c0     15 FB 01 56 |  if_ne	mov	result1, local03
270c4     EC 00 90 5D |  if_ne	jmp	#LR__3525
270c8     FF 38 0E F2 | 	cmp	local10, #255 wz
270cc     00 F8 3F AF 
270d0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
270d4     DC 00 90 AD |  if_e	jmp	#LR__3525
270d8     02 2E 46 F5 | 	or	local05, #2
270dc     00 12 06 F6 | 	mov	arg01, #0
270e0     00 14 06 F6 | 	mov	arg02, #0
270e4     19 17 02 F6 | 	mov	arg03, local07
270e8     17 19 02 F6 | 	mov	arg04, local05
270ec     E0 2F B0 FD | 	call	#__system__pack_0651
270f0     C0 00 90 FD | 	jmp	#LR__3525
270f4                 | LR__3516
270f4     00 36 0E F2 | 	cmp	local09, #0 wz
270f8     16 FB 01 56 |  if_ne	mov	result1, local04
270fc     B4 00 90 5D |  if_ne	jmp	#LR__3525
27100     17 19 02 F6 | 	mov	arg04, local05
27104     08 18 46 F5 | 	or	arg04, #8
27108     00 12 06 F6 | 	mov	arg01, #0
2710c     00 14 06 F6 | 	mov	arg02, #0
27110     00 16 06 F6 | 	mov	arg03, #0
27114     B8 2F B0 FD | 	call	#__system__pack_0651
27118     98 00 90 FD | 	jmp	#LR__3525
2711c                 | LR__3517
2711c     00 30 0E F2 | 	cmp	local06, #0 wz
27120     20 00 90 AD |  if_e	jmp	#LR__3520
27124     01 30 66 F0 | 	shl	local06, #1
27128     97 0A 48 FB | 	callpa	#(@LR__3519-@LR__3518)>>2,fcache_load_ptr_
2712c                 | LR__3518
2712c     00 40 00 FF 
27130     00 30 16 F2 | 	cmp	local06, ##8388608 wc
27134     01 32 86 C1 |  if_b	sub	local07, #1
27138     01 30 66 C0 |  if_b	shl	local06, #1
2713c     EC FF 9F CD |  if_b	jmp	#LR__3518
27140                 | LR__3519
27140     B8 FE 9F FD | 	jmp	#LR__3510
27144                 | LR__3520
27144     00 38 0E F2 | 	cmp	local10, #0 wz
27148     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2714c     00 F8 3F AF 
27150     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
27154     5C 00 90 AD |  if_e	jmp	#LR__3525
27158     17 19 02 F6 | 	mov	arg04, local05
2715c     08 18 46 F5 | 	or	arg04, #8
27160     00 12 06 F6 | 	mov	arg01, #0
27164     00 14 06 F6 | 	mov	arg02, #0
27168     00 16 06 F6 | 	mov	arg03, #0
2716c     60 2F B0 FD | 	call	#__system__pack_0651
27170     40 00 90 FD | 	jmp	#LR__3525
27174                 | LR__3521
27174     00 36 0E F2 | 	cmp	local09, #0 wz
27178     20 00 90 AD |  if_e	jmp	#LR__3524
2717c     01 36 66 F0 | 	shl	local09, #1
27180     97 0A 48 FB | 	callpa	#(@LR__3523-@LR__3522)>>2,fcache_load_ptr_
27184                 | LR__3522
27184     00 40 00 FF 
27188     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2718c     01 38 86 C1 |  if_b	sub	local10, #1
27190     01 36 66 C0 |  if_b	shl	local09, #1
27194     EC FF 9F CD |  if_b	jmp	#LR__3522
27198                 | LR__3523
27198     6C FE 9F FD | 	jmp	#LR__3511
2719c                 | LR__3524
2719c     02 2E 46 F5 | 	or	local05, #2
271a0     00 12 06 F6 | 	mov	arg01, #0
271a4     00 14 06 F6 | 	mov	arg02, #0
271a8     00 16 06 F6 | 	mov	arg03, #0
271ac     17 19 02 F6 | 	mov	arg04, local05
271b0     1C 2F B0 FD | 	call	#__system__pack_0651
271b4                 | LR__3525
271b4     A7 F0 03 F6 | 	mov	ptra, fp
271b8     B2 00 A0 FD | 	call	#popregs_
271bc                 | __system___float_div_ret
271bc     2D 00 64 FD | 	ret
271c0                 | 
271c0                 | __system___float_cmp
271c0     00 C0 3F FF 
271c4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
271c8     00 C0 3F CF 
271cc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
271d0     0B FB 01 36 |  if_ae	mov	result1, arg03
271d4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
271d8     00 C0 7F FF 
271dc     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
271e0     00 C0 7F CF 
271e4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
271e8     0B FB 01 36 |  if_ae	mov	result1, arg03
271ec     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
271f0     00 12 56 F2 | 	cmps	arg01, #0 wc
271f4     2C 00 90 3D |  if_ae	jmp	#LR__3530
271f8     00 14 56 F2 | 	cmps	arg02, #0 wc
271fc     0A FB 01 C6 |  if_b	mov	result1, arg02
27200     09 FB 81 C1 |  if_b	sub	result1, arg01
27204     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27208     00 14 0E F2 | 	cmp	arg02, #0 wz
2720c     00 00 40 AF 
27210     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27214     00 FA 05 A6 |  if_e	mov	result1, #0
27218     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2721c     01 FA 65 F6 | 	neg	result1, #1
27220     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27224                 | LR__3530
27224     00 14 56 F2 | 	cmps	arg02, #0 wc
27228     1C 00 90 3D |  if_ae	jmp	#LR__3531
2722c     00 12 0E F2 | 	cmp	arg01, #0 wz
27230     00 00 40 AF 
27234     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27238     00 FA 05 A6 |  if_e	mov	result1, #0
2723c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27240     01 FA 05 F6 | 	mov	result1, #1
27244     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27248                 | LR__3531
27248     0A 13 82 F1 | 	sub	arg01, arg02
2724c     09 FB 01 F6 | 	mov	result1, arg01
27250                 | __system___float_cmp_ret
27250     2D 00 64 FD | 	ret
27254                 | 
27254                 | __system___float_tointeger
27254     02 4A 05 F6 | 	mov	COUNT_, #2
27258     A8 00 A0 FD | 	call	#pushregs_
2725c     50 00 B0 FD | 	call	#__system___float_Unpack
27260     FF FF 7F FF 
27264     FF FD 55 F2 | 	cmps	result2, ##-1 wc
27268     34 00 90 CD |  if_b	jmp	#LR__3540
2726c     1F FC 55 F2 | 	cmps	result2, #31 wc
27270     2C 00 90 3D |  if_ae	jmp	#LR__3540
27274     02 FE 65 F0 | 	shl	result3, #2
27278     1E 26 06 F6 | 	mov	local01, #30
2727c     FE 26 82 F1 | 	sub	local01, result2
27280     13 FF 41 F0 | 	shr	result3, local01
27284     FF 28 02 F6 | 	mov	local02, result3
27288     0A 29 02 F1 | 	add	local02, arg02
2728c     01 28 46 F0 | 	shr	local02, #1
27290     00 FA 0D F2 | 	cmp	result1, #0 wz
27294     14 29 62 56 |  if_ne	neg	local02, local02
27298     14 FB 01 F6 | 	mov	result1, local02
2729c     04 00 90 FD | 	jmp	#LR__3541
272a0                 | LR__3540
272a0     00 FA 05 F6 | 	mov	result1, #0
272a4                 | LR__3541
272a4     A7 F0 03 F6 | 	mov	ptra, fp
272a8     B2 00 A0 FD | 	call	#popregs_
272ac                 | __system___float_tointeger_ret
272ac     2D 00 64 FD | 	ret
272b0                 | 
272b0                 | __system___float_Unpack
272b0     09 01 02 F6 | 	mov	_var01, arg01
272b4     1F 00 46 F0 | 	shr	_var01, #31
272b8     09 03 02 F6 | 	mov	_var02, arg01
272bc     01 02 66 F0 | 	shl	_var02, #1
272c0     18 02 4E F0 | 	shr	_var02, #24 wz
272c4     17 13 06 F4 | 	bitl	arg01, #279
272c8     06 12 66 50 |  if_ne	shl	arg01, #6
272cc     1D 12 26 54 |  if_ne	bith	arg01, #29
272d0     1C 00 90 5D |  if_ne	jmp	#LR__3550
272d4     09 05 92 F7 | 	encod	_var03, arg01 wc
272d8     01 04 06 C1 |  if_b	add	_var03, #1
272dc     17 04 86 F1 | 	sub	_var03, #23
272e0     02 03 02 F6 | 	mov	_var02, _var03
272e4     07 FC 05 F6 | 	mov	result2, #7
272e8     02 FD 81 F1 | 	sub	result2, _var03
272ec     FE 12 62 F0 | 	shl	arg01, result2
272f0                 | LR__3550
272f0     7F 02 86 F1 | 	sub	_var02, #127
272f4     09 FF 01 F6 | 	mov	result3, arg01
272f8     00 FB 01 F6 | 	mov	result1, _var01
272fc     01 FD 01 F6 | 	mov	result2, _var02
27300                 | __system___float_Unpack_ret
27300     2D 00 64 FD | 	ret
27304                 | 
27304                 | __system___float_Pack
27304     00 00 06 F6 | 	mov	_var01, #0
27308     00 16 0E F2 | 	cmp	arg03, #0 wz
2730c     8C 00 90 AD |  if_e	jmp	#LR__3561
27310     0B 03 92 F7 | 	encod	_var02, arg03 wc
27314     01 02 06 C1 |  if_b	add	_var02, #1
27318     21 00 06 F6 | 	mov	_var01, #33
2731c     01 01 82 F1 | 	sub	_var01, _var02
27320     00 17 62 F0 | 	shl	arg03, _var01
27324     03 02 06 F6 | 	mov	_var02, #3
27328     00 03 82 F1 | 	sub	_var02, _var01
2732c     01 15 02 F1 | 	add	arg02, _var02
27330     0A 05 02 F6 | 	mov	_var03, arg02
27334     00 17 06 F1 | 	add	arg03, #256
27338     0B 03 02 F6 | 	mov	_var02, arg03
2733c     FF 02 2E F5 | 	andn	_var02, #255 wz
27340     01 04 06 A1 |  if_e	add	_var03, #1
27344     7F 04 06 F1 | 	add	_var03, #127
27348     FF FF 7F FF 
2734c     E9 05 46 F3 | 	fges	_var03, ##-23
27350     FF 04 66 F3 | 	fles	_var03, #255
27354     01 04 56 F2 | 	cmps	_var03, #1 wc
27358     1C 00 90 3D |  if_ae	jmp	#LR__3560
2735c     01 16 46 F0 | 	shr	arg03, #1
27360     1F 02 C6 F9 | 	decod	_var02, #31
27364     0B 03 02 F1 | 	add	_var02, arg03
27368     02 05 62 F6 | 	neg	_var03, _var03
2736c     02 03 42 F0 | 	shr	_var02, _var03
27370     01 17 02 F6 | 	mov	arg03, _var02
27374     00 04 06 F6 | 	mov	_var03, #0
27378                 | LR__3560
27378     09 FB 01 F6 | 	mov	result1, arg01
2737c     1F FA 65 F0 | 	shl	result1, #31
27380     02 03 02 F6 | 	mov	_var02, _var03
27384     17 02 66 F0 | 	shl	_var02, #23
27388     01 FB 41 F5 | 	or	result1, _var02
2738c     0B 07 02 F6 | 	mov	_var04, arg03
27390     09 06 46 F0 | 	shr	_var04, #9
27394     03 FB 41 F5 | 	or	result1, _var04
27398     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2739c                 | LR__3561
2739c     00 FB 01 F6 | 	mov	result1, _var01
273a0                 | __system___float_Pack_ret
273a0     2D 00 64 FD | 	ret
273a4                 | 
273a4                 | __system___basic_print_float
273a4     05 4A 05 F6 | 	mov	COUNT_, #5
273a8     A8 00 A0 FD | 	call	#pushregs_
273ac     09 27 02 F6 | 	mov	local01, arg01
273b0     0A 29 02 F6 | 	mov	local02, arg02
273b4     0B 2B 0A F6 | 	mov	local03, arg03 wz
273b8     0C 2D 02 F6 | 	mov	local04, arg04
273bc     14 00 90 5D |  if_ne	jmp	#LR__3570
273c0     23 2C 0E F2 | 	cmp	local04, #35 wz
273c4     80 02 10 AF 
273c8     00 2E 06 A6 |  if_e	mov	local05, ##537198592
273cc     1D 2E C6 59 |  if_ne	decod	local05, #29
273d0     17 2B 02 F6 | 	mov	local03, local05
273d4                 | LR__3570
273d4     13 13 02 F6 | 	mov	arg01, local01
273d8     D8 27 B0 FD | 	call	#__system___gettxfunc
273dc     FD 2E 0A F6 | 	mov	local05, result1 wz
273e0     00 FA 05 A6 |  if_e	mov	result1, #0
273e4     17 13 02 56 |  if_ne	mov	arg01, local05
273e8     15 15 02 56 |  if_ne	mov	arg02, local03
273ec     14 17 02 56 |  if_ne	mov	arg03, local02
273f0     16 19 02 56 |  if_ne	mov	arg04, local04
273f4     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
273f8     A7 F0 03 F6 | 	mov	ptra, fp
273fc     B2 00 A0 FD | 	call	#popregs_
27400                 | __system___basic_print_float_ret
27400     2D 00 64 FD | 	ret
27404                 | 
27404                 | __system____builtin_atoi
27404     07 4A 05 F6 | 	mov	COUNT_, #7
27408     A8 00 A0 FD | 	call	#pushregs_
2740c                 | __system____builtin_atoi_enter
2740c     09 27 02 F6 | 	mov	local01, arg01
27410     0A 29 02 F6 | 	mov	local02, arg02
27414     00 2A 06 F6 | 	mov	local03, #0
27418     00 2C 06 F6 | 	mov	local04, #0
2741c     00 2E 06 F6 | 	mov	local05, #0
27420     97 1C 48 FB | 	callpa	#(@LR__3582-@LR__3580)>>2,fcache_load_ptr_
27424                 | LR__3580
27424     13 31 C2 FA | 	rdbyte	local06, local01
27428     20 30 0E F2 | 	cmp	local06, #32 wz
2742c     01 26 06 A1 |  if_e	add	local01, #1
27430     F0 FF 9F AD |  if_e	jmp	#LR__3580
27434     13 33 C2 FA | 	rdbyte	local07, local01
27438                 | LR__3581
27438     2D 32 0E F2 | 	cmp	local07, #45 wz
2743c     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
27440     18 00 90 5D |  if_ne	jmp	#LR__3583
27444     01 26 06 F1 | 	add	local01, #1
27448     2D 32 0E F2 | 	cmp	local07, #45 wz
2744c     01 30 06 A6 |  if_e	mov	local06, #1
27450     18 2F C2 A2 |  if_e	subr	local05, local06
27454     13 33 C2 FA | 	rdbyte	local07, local01
27458     DC FF 9F FD | 	jmp	#LR__3581
2745c                 | LR__3582
2745c                 | LR__3583
2745c     00 28 0E F2 | 	cmp	local02, #0 wz
27460     1C 00 90 5D |  if_ne	jmp	#LR__3585
27464     24 32 0E F2 | 	cmp	local07, #36 wz
27468     10 28 06 A6 |  if_e	mov	local02, #16
2746c     01 26 06 A1 |  if_e	add	local01, #1
27470     0C 00 90 AD |  if_e	jmp	#LR__3584
27474     25 32 0E F2 | 	cmp	local07, #37 wz
27478     02 28 06 A6 |  if_e	mov	local02, #2
2747c     01 26 06 A1 |  if_e	add	local01, #1
27480                 | LR__3584
27480                 | LR__3585
27480     97 48 48 FB | 	callpa	#(@LR__3593-@LR__3586)>>2,fcache_load_ptr_
27484                 | LR__3586
27484                 | LR__3587
27484     13 33 C2 FA | 	rdbyte	local07, local01
27488     5F 32 0E F2 | 	cmp	local07, #95 wz
2748c     01 26 06 F1 | 	add	local01, #1
27490     F0 FF 9F AD |  if_e	jmp	#LR__3587
27494     30 32 0E F2 | 	cmp	local07, #48 wz
27498     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2749c     00 2C 06 A6 |  if_e	mov	local04, #0
274a0     60 00 90 AD |  if_e	jmp	#LR__3592
274a4     31 32 56 F2 | 	cmps	local07, #49 wc
274a8     18 00 90 CD |  if_b	jmp	#LR__3588
274ac     3A 32 56 F2 | 	cmps	local07, #58 wc
274b0     19 2D 02 C6 |  if_b	mov	local04, local07
274b4     30 2C 86 C1 |  if_b	sub	local04, #48
274b8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
274bc     0A 28 06 86 |  if_c_and_z	mov	local02, #10
274c0     40 00 90 CD |  if_b	jmp	#LR__3591
274c4                 | LR__3588
274c4     0B 28 56 F2 | 	cmps	local02, #11 wc
274c8     61 32 56 32 |  if_ae	cmps	local07, #97 wc
274cc     14 00 90 CD |  if_b	jmp	#LR__3589
274d0     67 32 56 F2 | 	cmps	local07, #103 wc
274d4     61 32 86 C1 |  if_b	sub	local07, #97
274d8     0A 2C 06 C6 |  if_b	mov	local04, #10
274dc     19 2D 02 C1 |  if_b	add	local04, local07
274e0     20 00 90 CD |  if_b	jmp	#LR__3590
274e4                 | LR__3589
274e4     0B 28 56 F2 | 	cmps	local02, #11 wc
274e8     41 32 56 32 |  if_ae	cmps	local07, #65 wc
274ec     24 00 90 CD |  if_b	jmp	#LR__3594
274f0     47 32 56 F2 | 	cmps	local07, #71 wc
274f4     41 32 86 C1 |  if_b	sub	local07, #65
274f8     0A 2C 06 C6 |  if_b	mov	local04, #10
274fc     19 2D 02 C1 |  if_b	add	local04, local07
27500     10 00 90 3D |  if_ae	jmp	#LR__3594
27504                 | LR__3590
27504                 | LR__3591
27504                 | LR__3592
27504     15 29 02 FD | 	qmul	local02, local03
27508     18 2A 62 FD | 	getqx	local03
2750c     16 2B 02 F1 | 	add	local03, local04
27510     70 FF 9F FD | 	jmp	#LR__3586
27514                 | LR__3593
27514                 | LR__3594
27514     00 28 0E F2 | 	cmp	local02, #0 wz
27518     64 00 90 5D |  if_ne	jmp	#LR__3600
2751c     78 32 0E F2 | 	cmp	local07, #120 wz
27520     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
27524     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
27528     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2752c     14 00 90 5D |  if_ne	jmp	#LR__3595
27530     13 13 02 F6 | 	mov	arg01, local01
27534     10 14 06 F6 | 	mov	arg02, #16
27538     C8 FE BF FD | 	call	#__system____builtin_atoi
2753c     FD 2A 02 F6 | 	mov	local03, result1
27540     3C 00 90 FD | 	jmp	#LR__3599
27544                 | LR__3595
27544     62 32 0E F2 | 	cmp	local07, #98 wz
27548     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2754c     14 00 90 5D |  if_ne	jmp	#LR__3596
27550     13 13 02 F6 | 	mov	arg01, local01
27554     02 14 06 F6 | 	mov	arg02, #2
27558     A8 FE BF FD | 	call	#__system____builtin_atoi
2755c     FD 2A 02 F6 | 	mov	local03, result1
27560     1C 00 90 FD | 	jmp	#LR__3598
27564                 | LR__3596
27564     6F 32 0E F2 | 	cmp	local07, #111 wz
27568     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2756c     10 00 90 5D |  if_ne	jmp	#LR__3597
27570     13 13 02 F6 | 	mov	arg01, local01
27574     08 14 06 F6 | 	mov	arg02, #8
27578     88 FE BF FD | 	call	#__system____builtin_atoi
2757c     FD 2A 02 F6 | 	mov	local03, result1
27580                 | LR__3597
27580                 | LR__3598
27580                 | LR__3599
27580                 | LR__3600
27580     00 2E 0E F2 | 	cmp	local05, #0 wz
27584     15 2B 62 56 |  if_ne	neg	local03, local03
27588     15 FB 01 F6 | 	mov	result1, local03
2758c     A7 F0 03 F6 | 	mov	ptra, fp
27590     B2 00 A0 FD | 	call	#popregs_
27594                 | __system____builtin_atoi_ret
27594     2D 00 64 FD | 	ret
27598                 | 
27598                 | __system____builtin_atof
27598     07 4A 05 F6 | 	mov	COUNT_, #7
2759c     A8 00 A0 FD | 	call	#pushregs_
275a0     09 27 02 F6 | 	mov	local01, arg01
275a4     00 28 06 F6 | 	mov	local02, #0
275a8     00 2A 06 F6 | 	mov	local03, #0
275ac     00 2C 06 F6 | 	mov	local04, #0
275b0     00 2E 06 F6 | 	mov	local05, #0
275b4     97 08 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
275b8                 | LR__3610
275b8     13 17 C2 FA | 	rdbyte	arg03, local01
275bc     20 16 0E F2 | 	cmp	arg03, #32 wz
275c0     01 26 06 A1 |  if_e	add	local01, #1
275c4     F0 FF 9F AD |  if_e	jmp	#LR__3610
275c8                 | LR__3611
275c8     13 31 C2 FA | 	rdbyte	local06, local01
275cc                 | LR__3612
275cc     2B 30 0E F2 | 	cmp	local06, #43 wz
275d0     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
275d4     14 00 90 5D |  if_ne	jmp	#LR__3613
275d8     2D 30 0E F2 | 	cmp	local06, #45 wz
275dc     1F 2C E6 A4 |  if_e	bitnot	local04, #31
275e0     01 26 06 F1 | 	add	local01, #1
275e4     13 31 C2 FA | 	rdbyte	local06, local01
275e8     E0 FF 9F FD | 	jmp	#LR__3612
275ec                 | LR__3613
275ec                 | LR__3614
275ec     97 08 48 FB | 	callpa	#(@LR__3616-@LR__3615)>>2,fcache_load_ptr_
275f0                 | LR__3615
275f0     13 31 C2 FA | 	rdbyte	local06, local01
275f4     5F 30 0E F2 | 	cmp	local06, #95 wz
275f8     01 26 06 F1 | 	add	local01, #1
275fc     F0 FF 9F AD |  if_e	jmp	#LR__3615
27600                 | LR__3616
27600     00 30 0E F2 | 	cmp	local06, #0 wz
27604     5C 00 90 AD |  if_e	jmp	#LR__3618
27608     30 30 56 F2 | 	cmps	local06, #48 wc
2760c     44 00 90 CD |  if_b	jmp	#LR__3617
27610     3A 30 56 F2 | 	cmps	local06, #58 wc
27614     3C 00 90 3D |  if_ae	jmp	#LR__3617
27618     14 13 02 F6 | 	mov	arg01, local02
2761c     00 90 20 FF 
27620     00 14 06 F6 | 	mov	arg02, ##1092616192
27624     64 F7 BF FD | 	call	#__system___float_mul
27628     FD 28 02 F6 | 	mov	local02, result1
2762c     30 30 86 F1 | 	sub	local06, #48
27630     18 13 02 F6 | 	mov	arg01, local06
27634     50 F3 BF FD | 	call	#__system___float_fromuns
27638     FD 14 02 F6 | 	mov	arg02, result1
2763c     14 13 02 F6 | 	mov	arg01, local02
27640     78 F3 BF FD | 	call	#__system___float_add
27644     FD 28 02 F6 | 	mov	local02, result1
27648     00 2E 0E F2 | 	cmp	local05, #0 wz
2764c     01 2A 86 51 |  if_ne	sub	local03, #1
27650     98 FF 9F FD | 	jmp	#LR__3614
27654                 | LR__3617
27654     2E 30 0E F2 | 	cmp	local06, #46 wz
27658     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2765c     01 2E 06 A6 |  if_e	mov	local05, #1
27660     88 FF 9F AD |  if_e	jmp	#LR__3614
27664                 | LR__3618
27664     45 30 0E F2 | 	cmp	local06, #69 wz
27668     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2766c     18 00 90 5D |  if_ne	jmp	#LR__3619
27670     13 13 02 F6 | 	mov	arg01, local01
27674     00 14 06 F6 | 	mov	arg02, #0
27678     88 FD BF FD | 	call	#__system____builtin_atoi
2767c     15 FB 01 F1 | 	add	result1, local03
27680     FD 32 02 F6 | 	mov	local07, result1
27684     04 00 90 FD | 	jmp	#LR__3620
27688                 | LR__3619
27688     15 33 02 F6 | 	mov	local07, local03
2768c                 | LR__3620
2768c     19 17 02 F6 | 	mov	arg03, local07
27690     14 13 02 F6 | 	mov	arg01, local02
27694     00 90 20 FF 
27698     00 14 06 F6 | 	mov	arg02, ##1092616192
2769c     F4 06 B0 FD | 	call	#__system___float_pow_n
276a0     16 FB 61 F5 | 	xor	result1, local04
276a4     A7 F0 03 F6 | 	mov	ptra, fp
276a8     B2 00 A0 FD | 	call	#popregs_
276ac                 | __system____builtin_atof_ret
276ac     2D 00 64 FD | 	ret
276b0                 | 
276b0                 | __system____builtin_ilogb
276b0     FC FB BF FD | 	call	#__system___float_Unpack
276b4     00 FE 0D F2 | 	cmp	result3, #0 wz
276b8     00 00 40 AF 
276bc     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
276c0     24 00 90 AD |  if_e	jmp	#LR__3631
276c4     80 FC 0D F2 | 	cmp	result2, #128 wz
276c8     18 00 90 5D |  if_ne	jmp	#LR__3630
276cc     00 00 10 FF 
276d0     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
276d4     1E FA CD A9 |  if_e	bmask	result1, #30
276d8     0C 00 90 AD |  if_e	jmp	#LR__3631
276dc     1F FA C5 F9 | 	decod	result1, #31
276e0     04 00 90 FD | 	jmp	#LR__3631
276e4                 | LR__3630
276e4     FE FA 01 F6 | 	mov	result1, result2
276e8                 | LR__3631
276e8                 | __system____builtin_ilogb_ret
276e8     2D 00 64 FD | 	ret
276ec                 | 
276ec                 | __system____builtin_sinf
276ec     03 4A 05 F6 | 	mov	COUNT_, #3
276f0     A8 00 A0 FD | 	call	#pushregs_
276f4     09 27 02 F6 | 	mov	local01, arg01
276f8     87 64 20 FF 
276fc     DB 15 06 F6 | 	mov	arg02, ##1086918619
27700     8C F8 BF FD | 	call	#__system___float_div
27704     FD 12 02 F6 | 	mov	arg01, result1
27708     00 14 06 F6 | 	mov	arg02, #0
2770c     44 FB BF FD | 	call	#__system___float_tointeger
27710     FD 16 0A F6 | 	mov	arg03, result1 wz
27714     44 00 90 AD |  if_e	jmp	#LR__3640
27718     0B 13 52 F6 | 	abs	arg01, arg03 wc
2771c     1F 28 C6 C9 |  if_b	decod	local02, #31
27720     00 28 06 36 |  if_ae	mov	local02, #0
27724     60 F2 BF FD | 	call	#__system___float_fromuns
27728     14 FB 61 F5 | 	xor	result1, local02
2772c     FD 12 02 F6 | 	mov	arg01, result1
27730     1E 14 C6 F9 | 	decod	arg02, #30
27734     54 F6 BF FD | 	call	#__system___float_mul
27738     FD 12 02 F6 | 	mov	arg01, result1
2773c     87 24 20 FF 
27740     DB 15 06 F6 | 	mov	arg02, ##1078530011
27744     44 F6 BF FD | 	call	#__system___float_mul
27748     FD 14 02 F6 | 	mov	arg02, result1
2774c     13 13 02 F6 | 	mov	arg01, local01
27750     1F 14 E6 F4 | 	bitnot	arg02, #31
27754     64 F2 BF FD | 	call	#__system___float_add
27758     FD 26 02 F6 | 	mov	local01, result1
2775c                 | LR__3640
2775c     13 13 02 F6 | 	mov	arg01, local01
27760     66 E6 1E FF 
27764     CD 14 06 F6 | 	mov	arg02, ##1036831949
27768     01 16 06 F6 | 	mov	arg03, #1
2776c     50 FA BF FD | 	call	#__system___float_cmp
27770     00 FA 55 F2 | 	cmps	result1, #0 wc
27774     5C 00 90 3D |  if_ae	jmp	#LR__3641
27778     13 13 02 F6 | 	mov	arg01, local01
2777c     66 E6 5E FF 
27780     CD 14 06 F6 | 	mov	arg02, ##-1110651699
27784     01 16 66 F6 | 	neg	arg03, #1
27788     34 FA BF FD | 	call	#__system___float_cmp
2778c     01 FA 55 F2 | 	cmps	result1, #1 wc
27790     40 00 90 CD |  if_b	jmp	#LR__3641
27794     13 13 02 F6 | 	mov	arg01, local01
27798     13 15 02 F6 | 	mov	arg02, local01
2779c     EC F5 BF FD | 	call	#__system___float_mul
277a0     FD 12 02 F6 | 	mov	arg01, result1
277a4     13 15 02 F6 | 	mov	arg02, local01
277a8     E0 F5 BF FD | 	call	#__system___float_mul
277ac     FD 12 02 F6 | 	mov	arg01, result1
277b0     00 60 20 FF 
277b4     00 14 06 F6 | 	mov	arg02, ##1086324736
277b8     D4 F7 BF FD | 	call	#__system___float_div
277bc     FD 14 02 F6 | 	mov	arg02, result1
277c0     13 13 02 F6 | 	mov	arg01, local01
277c4     1F 14 E6 F4 | 	bitnot	arg02, #31
277c8     F0 F1 BF FD | 	call	#__system___float_add
277cc     FD 2A 02 F6 | 	mov	local03, result1
277d0     54 00 90 FD | 	jmp	#LR__3642
277d4                 | LR__3641
277d4     13 13 02 F6 | 	mov	arg01, local01
277d8     7C 91 26 FF 
277dc     83 15 06 F6 | 	mov	arg02, ##1294137731
277e0     A8 F5 BF FD | 	call	#__system___float_mul
277e4     FD 12 02 F6 | 	mov	arg01, result1
277e8     00 14 06 F6 | 	mov	arg02, #0
277ec     64 FA BF FD | 	call	#__system___float_tointeger
277f0     02 FA 65 F0 | 	shl	result1, #2
277f4     00 00 A0 FF 
277f8     FD 00 48 FD | 	qrotate	##1073741824, result1
277fc     19 12 62 FD | 	getqy	arg01
27800     09 13 52 F6 | 	abs	arg01, arg01 wc
27804     1F 28 C6 C9 |  if_b	decod	local02, #31
27808     00 28 06 36 |  if_ae	mov	local02, #0
2780c     78 F1 BF FD | 	call	#__system___float_fromuns
27810     14 FB 61 F5 | 	xor	result1, local02
27814     FD 12 02 F6 | 	mov	arg01, result1
27818     00 40 27 FF 
2781c     00 14 06 F6 | 	mov	arg02, ##1317011456
27820     6C F7 BF FD | 	call	#__system___float_div
27824     FD 2A 02 F6 | 	mov	local03, result1
27828                 | LR__3642
27828     15 FB 01 F6 | 	mov	result1, local03
2782c     A7 F0 03 F6 | 	mov	ptra, fp
27830     B2 00 A0 FD | 	call	#popregs_
27834                 | __system____builtin_sinf_ret
27834     2D 00 64 FD | 	ret
27838                 | 
27838                 | __system____builtin_tanf
27838     02 4A 05 F6 | 	mov	COUNT_, #2
2783c     A8 00 A0 FD | 	call	#pushregs_
27840     09 27 02 F6 | 	mov	local01, arg01
27844     A4 FE BF FD | 	call	#__system____builtin_sinf
27848     FD 28 02 F6 | 	mov	local02, result1
2784c     13 15 02 F6 | 	mov	arg02, local01
27850     87 E4 1F FF 
27854     DB 13 06 F6 | 	mov	arg01, ##1070141403
27858     1F 14 E6 F4 | 	bitnot	arg02, #31
2785c     5C F1 BF FD | 	call	#__system___float_add
27860     FD 12 02 F6 | 	mov	arg01, result1
27864     84 FE BF FD | 	call	#__system____builtin_sinf
27868     FD 14 02 F6 | 	mov	arg02, result1
2786c     14 13 02 F6 | 	mov	arg01, local02
27870     1C F7 BF FD | 	call	#__system___float_div
27874     A7 F0 03 F6 | 	mov	ptra, fp
27878     B2 00 A0 FD | 	call	#popregs_
2787c                 | __system____builtin_tanf_ret
2787c     2D 00 64 FD | 	ret
27880                 | 
27880                 | __system____builtin_asinf
27880     01 4A 05 F6 | 	mov	COUNT_, #1
27884     A8 00 A0 FD | 	call	#pushregs_
27888     09 27 02 F6 | 	mov	local01, arg01
2788c     13 15 02 F6 | 	mov	arg02, local01
27890     13 13 02 F6 | 	mov	arg01, local01
27894     F4 F4 BF FD | 	call	#__system___float_mul
27898     FD 14 02 F6 | 	mov	arg02, result1
2789c     00 C0 1F FF 
278a0     00 12 06 F6 | 	mov	arg01, ##1065353216
278a4     1F 14 E6 F4 | 	bitnot	arg02, #31
278a8     10 F1 BF FD | 	call	#__system___float_add
278ac     FD 12 02 F6 | 	mov	arg01, result1
278b0     00 F4 BF FD | 	call	#__system___float_sqrt
278b4     FD 14 02 F6 | 	mov	arg02, result1
278b8     13 13 02 F6 | 	mov	arg01, local01
278bc     58 00 B0 FD | 	call	#__system____builtin_atan2f
278c0     A7 F0 03 F6 | 	mov	ptra, fp
278c4     B2 00 A0 FD | 	call	#popregs_
278c8                 | __system____builtin_asinf_ret
278c8     2D 00 64 FD | 	ret
278cc                 | 
278cc                 | __system____builtin_acosf
278cc     01 4A 05 F6 | 	mov	COUNT_, #1
278d0     A8 00 A0 FD | 	call	#pushregs_
278d4     09 27 02 F6 | 	mov	local01, arg01
278d8     13 15 02 F6 | 	mov	arg02, local01
278dc     13 13 02 F6 | 	mov	arg01, local01
278e0     A8 F4 BF FD | 	call	#__system___float_mul
278e4     FD 14 02 F6 | 	mov	arg02, result1
278e8     00 C0 1F FF 
278ec     00 12 06 F6 | 	mov	arg01, ##1065353216
278f0     1F 14 E6 F4 | 	bitnot	arg02, #31
278f4     C4 F0 BF FD | 	call	#__system___float_add
278f8     FD 12 02 F6 | 	mov	arg01, result1
278fc     B4 F3 BF FD | 	call	#__system___float_sqrt
27900     FD 12 02 F6 | 	mov	arg01, result1
27904     13 15 02 F6 | 	mov	arg02, local01
27908     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2790c     A7 F0 03 F6 | 	mov	ptra, fp
27910     B2 00 A0 FD | 	call	#popregs_
27914                 | __system____builtin_acosf_ret
27914     2D 00 64 FD | 	ret
27918                 | 
27918                 | __system____builtin_atan2f
27918     04 4A 05 F6 | 	mov	COUNT_, #4
2791c     A8 00 A0 FD | 	call	#pushregs_
27920     09 27 02 F6 | 	mov	local01, arg01
27924     0A 29 02 F6 | 	mov	local02, arg02
27928     13 13 02 F6 | 	mov	arg01, local01
2792c     00 14 06 F6 | 	mov	arg02, #0
27930     01 16 06 F6 | 	mov	arg03, #1
27934     88 F8 BF FD | 	call	#__system___float_cmp
27938     00 FA 0D F2 | 	cmp	result1, #0 wz
2793c     28 00 90 5D |  if_ne	jmp	#LR__3650
27940     14 13 02 F6 | 	mov	arg01, local02
27944     00 14 06 F6 | 	mov	arg02, #0
27948     01 16 06 F6 | 	mov	arg03, #1
2794c     70 F8 BF FD | 	call	#__system___float_cmp
27950     00 FA 55 F2 | 	cmps	result1, #0 wc
27954     87 24 60 CF 
27958     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2795c     DC 00 90 CD |  if_b	jmp	#LR__3651
27960     00 FA 05 F6 | 	mov	result1, #0
27964     D4 00 90 FD | 	jmp	#LR__3651
27968                 | LR__3650
27968     14 13 02 F6 | 	mov	arg01, local02
2796c     14 15 02 F6 | 	mov	arg02, local02
27970     18 F4 BF FD | 	call	#__system___float_mul
27974     FD 2A 02 F6 | 	mov	local03, result1
27978     13 13 02 F6 | 	mov	arg01, local01
2797c     13 15 02 F6 | 	mov	arg02, local01
27980     08 F4 BF FD | 	call	#__system___float_mul
27984     FD 14 02 F6 | 	mov	arg02, result1
27988     15 13 02 F6 | 	mov	arg01, local03
2798c     2C F0 BF FD | 	call	#__system___float_add
27990     FD 12 02 F6 | 	mov	arg01, result1
27994     1C F3 BF FD | 	call	#__system___float_sqrt
27998     FD 2A 02 F6 | 	mov	local03, result1
2799c     14 13 02 F6 | 	mov	arg01, local02
279a0     15 15 02 F6 | 	mov	arg02, local03
279a4     E8 F5 BF FD | 	call	#__system___float_div
279a8     FD 28 02 F6 | 	mov	local02, result1
279ac     13 13 02 F6 | 	mov	arg01, local01
279b0     15 15 02 F6 | 	mov	arg02, local03
279b4     D8 F5 BF FD | 	call	#__system___float_div
279b8     FD 26 02 F6 | 	mov	local01, result1
279bc     00 40 27 FF 
279c0     00 12 06 F6 | 	mov	arg01, ##1317011456
279c4     14 15 02 F6 | 	mov	arg02, local02
279c8     C0 F3 BF FD | 	call	#__system___float_mul
279cc     FD 12 02 F6 | 	mov	arg01, result1
279d0     00 14 06 F6 | 	mov	arg02, #0
279d4     7C F8 BF FD | 	call	#__system___float_tointeger
279d8     FD 2A 02 F6 | 	mov	local03, result1
279dc     00 40 27 FF 
279e0     00 12 06 F6 | 	mov	arg01, ##1317011456
279e4     13 15 02 F6 | 	mov	arg02, local01
279e8     A0 F3 BF FD | 	call	#__system___float_mul
279ec     FD 12 02 F6 | 	mov	arg01, result1
279f0     00 14 06 F6 | 	mov	arg02, #0
279f4     5C F8 BF FD | 	call	#__system___float_tointeger
279f8     FD 2A 52 FD | 	qvector	local03, result1
279fc     87 24 20 FF 
27a00     DB 2B 06 F6 | 	mov	local03, ##1078530011
27a04     19 12 62 FD | 	getqy	arg01
27a08     01 12 C6 F0 | 	sar	arg01, #1
27a0c     09 13 52 F6 | 	abs	arg01, arg01 wc
27a10     1F 2C C6 C9 |  if_b	decod	local04, #31
27a14     00 2C 06 36 |  if_ae	mov	local04, #0
27a18     6C EF BF FD | 	call	#__system___float_fromuns
27a1c     16 FB 61 F5 | 	xor	result1, local04
27a20     FD 12 02 F6 | 	mov	arg01, result1
27a24     00 40 27 FF 
27a28     00 14 06 F6 | 	mov	arg02, ##1317011456
27a2c     60 F5 BF FD | 	call	#__system___float_div
27a30     FD 14 02 F6 | 	mov	arg02, result1
27a34     15 13 02 F6 | 	mov	arg01, local03
27a38     50 F3 BF FD | 	call	#__system___float_mul
27a3c                 | LR__3651
27a3c     A7 F0 03 F6 | 	mov	ptra, fp
27a40     B2 00 A0 FD | 	call	#popregs_
27a44                 | __system____builtin_atan2f_ret
27a44     2D 00 64 FD | 	ret
27a48                 | 
27a48                 | __system____builtin_exp2f
27a48     04 4A 05 F6 | 	mov	COUNT_, #4
27a4c     A8 00 A0 FD | 	call	#pushregs_
27a50     09 27 02 F6 | 	mov	local01, arg01
27a54     00 7F 21 FF 
27a58     00 14 06 F6 | 	mov	arg02, ##1123942400
27a5c     01 16 66 F6 | 	neg	arg03, #1
27a60     5C F7 BF FD | 	call	#__system___float_cmp
27a64     00 FA 55 F2 | 	cmps	result1, #0 wc
27a68     00 C0 3F 3F 
27a6c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
27a70     DC 00 90 3D |  if_ae	jmp	#LR__3661
27a74     13 13 02 F6 | 	mov	arg01, local01
27a78     00 7F 61 FF 
27a7c     00 14 06 F6 | 	mov	arg02, ##-1023541248
27a80     01 16 06 F6 | 	mov	arg03, #1
27a84     38 F7 BF FD | 	call	#__system___float_cmp
27a88     00 FA 55 F2 | 	cmps	result1, #0 wc
27a8c     00 FA 05 C6 |  if_b	mov	result1, #0
27a90     BC 00 90 CD |  if_b	jmp	#LR__3661
27a94     13 13 02 F6 | 	mov	arg01, local01
27a98     00 14 06 F6 | 	mov	arg02, #0
27a9c     B4 F7 BF FD | 	call	#__system___float_tointeger
27aa0     FD 28 02 F6 | 	mov	local02, result1
27aa4     14 13 52 F6 | 	abs	arg01, local02 wc
27aa8     1F 2A C6 C9 |  if_b	decod	local03, #31
27aac     00 2A 06 36 |  if_ae	mov	local03, #0
27ab0     D4 EE BF FD | 	call	#__system___float_fromuns
27ab4     15 FB 61 F5 | 	xor	result1, local03
27ab8     FD 14 02 F6 | 	mov	arg02, result1
27abc     13 13 02 F6 | 	mov	arg01, local01
27ac0     1F 14 E6 F4 | 	bitnot	arg02, #31
27ac4     F4 EE BF FD | 	call	#__system___float_add
27ac8     FD 2C 02 F6 | 	mov	local04, result1
27acc     16 13 02 F6 | 	mov	arg01, local04
27ad0     00 14 06 F6 | 	mov	arg02, #0
27ad4     01 16 06 F6 | 	mov	arg03, #1
27ad8     E4 F6 BF FD | 	call	#__system___float_cmp
27adc     00 FA 55 F2 | 	cmps	result1, #0 wc
27ae0     18 00 90 3D |  if_ae	jmp	#LR__3660
27ae4     16 13 02 F6 | 	mov	arg01, local04
27ae8     00 C0 1F FF 
27aec     00 14 06 F6 | 	mov	arg02, ##1065353216
27af0     C8 EE BF FD | 	call	#__system___float_add
27af4     FD 2C 02 F6 | 	mov	local04, result1
27af8     01 28 86 F1 | 	sub	local02, #1
27afc                 | LR__3660
27afc     7F 28 06 F1 | 	add	local02, #127
27b00     17 28 66 F0 | 	shl	local02, #23
27b04     16 13 02 F6 | 	mov	arg01, local04
27b08     00 80 26 FF 
27b0c     00 14 06 F6 | 	mov	arg02, ##1291845632
27b10     78 F2 BF FD | 	call	#__system___float_mul
27b14     FD 12 02 F6 | 	mov	arg01, result1
27b18     00 14 06 F6 | 	mov	arg02, #0
27b1c     34 F7 BF FD | 	call	#__system___float_tointeger
27b20     FD 2C 0A F6 | 	mov	local04, result1 wz
27b24     14 FB 01 A6 |  if_e	mov	result1, local02
27b28     24 00 90 AD |  if_e	jmp	#LR__3661
27b2c     3E 2C 26 F4 | 	bith	local04, #62
27b30     0F 2C 62 FD | 	qexp	local04
27b34     14 13 02 F6 | 	mov	arg01, local02
27b38     18 14 62 FD | 	getqx	arg02
27b3c     01 14 06 F1 | 	add	arg02, #1
27b40     01 14 46 F0 | 	shr	arg02, #1
27b44     00 80 1F FF 
27b48     00 14 06 F1 | 	add	arg02, ##1056964608
27b4c     3C F2 BF FD | 	call	#__system___float_mul
27b50                 | LR__3661
27b50     A7 F0 03 F6 | 	mov	ptra, fp
27b54     B2 00 A0 FD | 	call	#popregs_
27b58                 | __system____builtin_exp2f_ret
27b58     2D 00 64 FD | 	ret
27b5c                 | 
27b5c                 | __system____builtin_log2f
27b5c     06 4A 05 F6 | 	mov	COUNT_, #6
27b60     A8 00 A0 FD | 	call	#pushregs_
27b64     09 27 02 F6 | 	mov	local01, arg01
27b68     09 29 0A F6 | 	mov	local02, arg01 wz
27b6c     00 00 40 5F 
27b70     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27b74     00 40 00 AF 
27b78     00 FA 65 A6 |  if_e	neg	result1, ##8388608
27b7c     08 01 90 AD |  if_e	jmp	#LR__3674
27b80     00 28 56 F2 | 	cmps	local02, #0 wc
27b84     00 E0 3F CF 
27b88     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
27b8c     F8 00 90 CD |  if_b	jmp	#LR__3674
27b90     13 13 02 F6 | 	mov	arg01, local01
27b94     00 90 20 FF 
27b98     00 14 06 F6 | 	mov	arg02, ##1092616192
27b9c     01 16 06 F6 | 	mov	arg03, #1
27ba0     1C F6 BF FD | 	call	#__system___float_cmp
27ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
27ba8     4D 2A 20 AF 
27bac     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
27bb0     D4 00 90 AD |  if_e	jmp	#LR__3674
27bb4     13 13 02 F6 | 	mov	arg01, local01
27bb8     FC 16 20 FF 
27bbc     54 14 06 F6 | 	mov	arg02, ##1076754516
27bc0     01 16 06 F6 | 	mov	arg03, #1
27bc4     F8 F5 BF FD | 	call	#__system___float_cmp
27bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
27bcc     55 DC 1F AF 
27bd0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
27bd4     B0 00 90 AD |  if_e	jmp	#LR__3674
27bd8     14 2B 02 F6 | 	mov	local03, local02
27bdc     17 2A 46 F0 | 	shr	local03, #23
27be0     15 2B E2 F8 | 	getbyte	local03, local03, #0
27be4     17 29 06 F4 | 	bitl	local02, #279
27be8     14 2D 02 F6 | 	mov	local04, local02
27bec     FF 2A 0E F2 | 	cmp	local03, #255 wz
27bf0     1C 00 90 5D |  if_ne	jmp	#LR__3670
27bf4     00 2C 0E F2 | 	cmp	local04, #0 wz
27bf8     00 C0 3F 5F 
27bfc     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
27c00     00 E0 3F AF 
27c04     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
27c08     17 FB 01 F6 | 	mov	result1, local05
27c0c     78 00 90 FD | 	jmp	#LR__3674
27c10                 | LR__3670
27c10     00 2A 0E F2 | 	cmp	local03, #0 wz
27c14     17 2C 26 54 |  if_ne	bith	local04, #23
27c18     7F 2A 86 51 |  if_ne	sub	local03, #127
27c1c     28 00 90 5D |  if_ne	jmp	#LR__3673
27c20     00 2C 0E F2 | 	cmp	local04, #0 wz
27c24     00 40 00 AF 
27c28     00 FA 65 A6 |  if_e	neg	result1, ##8388608
27c2c     58 00 90 AD |  if_e	jmp	#LR__3674
27c30     7E 2A 66 F6 | 	neg	local03, #126
27c34     97 08 48 FB | 	callpa	#(@LR__3672-@LR__3671)>>2,fcache_load_ptr_
27c38                 | LR__3671
27c38     17 2C 2E F4 | 	testbn	local04, #23 wz
27c3c     01 2C 66 A0 |  if_e	shl	local04, #1
27c40     01 2A 06 A1 |  if_e	add	local03, #1
27c44     F0 FF 9F AD |  if_e	jmp	#LR__3671
27c48                 | LR__3672
27c48                 | LR__3673
27c48     0E 2C 62 FD | 	qlog	local04
27c4c     01 2A 86 F1 | 	sub	local03, #1
27c50     15 13 52 F6 | 	abs	arg01, local03 wc
27c54     1F 30 C6 C9 |  if_b	decod	local06, #31
27c58     00 30 06 36 |  if_ae	mov	local06, #0
27c5c     18 2E 62 FD | 	getqx	local05
27c60     9B 2E 06 F4 | 	bitl	local05, #155
27c64     08 2E 06 F1 | 	add	local05, #8
27c68     04 2E 46 F0 | 	shr	local05, #4
27c6c     00 C0 1F FF 
27c70     00 2E 06 F1 | 	add	local05, ##1065353216
27c74     10 ED BF FD | 	call	#__system___float_fromuns
27c78     18 FB 61 F5 | 	xor	result1, local06
27c7c     FD 14 02 F6 | 	mov	arg02, result1
27c80     17 13 02 F6 | 	mov	arg01, local05
27c84     34 ED BF FD | 	call	#__system___float_add
27c88                 | LR__3674
27c88     A7 F0 03 F6 | 	mov	ptra, fp
27c8c     B2 00 A0 FD | 	call	#popregs_
27c90                 | __system____builtin_log2f_ret
27c90     2D 00 64 FD | 	ret
27c94                 | 
27c94                 | __system____builtin_powf
27c94     04 4A 05 F6 | 	mov	COUNT_, #4
27c98     A8 00 A0 FD | 	call	#pushregs_
27c9c     09 27 02 F6 | 	mov	local01, arg01
27ca0     0A 29 02 F6 | 	mov	local02, arg02
27ca4     14 13 02 F6 | 	mov	arg01, local02
27ca8     00 14 06 F6 | 	mov	arg02, #0
27cac     A4 F5 BF FD | 	call	#__system___float_tointeger
27cb0     FD 2A 02 F6 | 	mov	local03, result1
27cb4     15 13 52 F6 | 	abs	arg01, local03 wc
27cb8     1F 2C C6 C9 |  if_b	decod	local04, #31
27cbc     00 2C 06 36 |  if_ae	mov	local04, #0
27cc0     C4 EC BF FD | 	call	#__system___float_fromuns
27cc4     16 FB 61 F5 | 	xor	result1, local04
27cc8     FD 12 02 F6 | 	mov	arg01, result1
27ccc     14 15 02 F6 | 	mov	arg02, local02
27cd0     01 16 06 F6 | 	mov	arg03, #1
27cd4     E8 F4 BF FD | 	call	#__system___float_cmp
27cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
27cdc     18 00 90 5D |  if_ne	jmp	#LR__3680
27ce0     00 C0 1F FF 
27ce4     00 12 06 F6 | 	mov	arg01, ##1065353216
27ce8     13 15 02 F6 | 	mov	arg02, local01
27cec     15 17 02 F6 | 	mov	arg03, local03
27cf0     A0 00 B0 FD | 	call	#__system___float_pow_n
27cf4     58 00 90 FD | 	jmp	#LR__3681
27cf8                 | LR__3680
27cf8     13 13 02 F6 | 	mov	arg01, local01
27cfc     00 14 06 F6 | 	mov	arg02, #0
27d00     01 16 06 F6 | 	mov	arg03, #1
27d04     B8 F4 BF FD | 	call	#__system___float_cmp
27d08     00 FA 55 F2 | 	cmps	result1, #0 wc
27d0c     00 E0 3F CF 
27d10     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
27d14     38 00 90 CD |  if_b	jmp	#LR__3681
27d18     13 13 02 F6 | 	mov	arg01, local01
27d1c     00 14 06 F6 | 	mov	arg02, #0
27d20     01 16 06 F6 | 	mov	arg03, #1
27d24     98 F4 BF FD | 	call	#__system___float_cmp
27d28     00 FA 0D F2 | 	cmp	result1, #0 wz
27d2c     00 FA 05 A6 |  if_e	mov	result1, #0
27d30     1C 00 90 AD |  if_e	jmp	#LR__3681
27d34     13 13 02 F6 | 	mov	arg01, local01
27d38     20 FE BF FD | 	call	#__system____builtin_log2f
27d3c     FD 12 02 F6 | 	mov	arg01, result1
27d40     14 15 02 F6 | 	mov	arg02, local02
27d44     44 F0 BF FD | 	call	#__system___float_mul
27d48     FD 12 02 F6 | 	mov	arg01, result1
27d4c     F8 FC BF FD | 	call	#__system____builtin_exp2f
27d50                 | LR__3681
27d50     A7 F0 03 F6 | 	mov	ptra, fp
27d54     B2 00 A0 FD | 	call	#popregs_
27d58                 | __system____builtin_powf_ret
27d58     2D 00 64 FD | 	ret
27d5c                 | 
27d5c                 | __system____builtin_logbase
27d5c     02 4A 05 F6 | 	mov	COUNT_, #2
27d60     A8 00 A0 FD | 	call	#pushregs_
27d64     09 27 02 F6 | 	mov	local01, arg01
27d68     0A 13 02 F6 | 	mov	arg01, arg02
27d6c     EC FD BF FD | 	call	#__system____builtin_log2f
27d70     FD 28 02 F6 | 	mov	local02, result1
27d74     13 13 02 F6 | 	mov	arg01, local01
27d78     E0 FD BF FD | 	call	#__system____builtin_log2f
27d7c     FD 14 02 F6 | 	mov	arg02, result1
27d80     14 13 02 F6 | 	mov	arg01, local02
27d84     08 F2 BF FD | 	call	#__system___float_div
27d88     A7 F0 03 F6 | 	mov	ptra, fp
27d8c     B2 00 A0 FD | 	call	#popregs_
27d90                 | __system____builtin_logbase_ret
27d90     2D 00 64 FD | 	ret
27d94                 | 
27d94                 | __system___float_pow_n
27d94     05 4A 05 F6 | 	mov	COUNT_, #5
27d98     A8 00 A0 FD | 	call	#pushregs_
27d9c     09 27 02 F6 | 	mov	local01, arg01
27da0     0A 29 02 F6 | 	mov	local02, arg02
27da4     0B 2B 02 F6 | 	mov	local03, arg03
27da8     00 2A 56 F2 | 	cmps	local03, #0 wc
27dac     18 00 90 3D |  if_ae	jmp	#LR__3690
27db0     01 2C 06 F6 | 	mov	local04, #1
27db4     15 2B 62 F6 | 	neg	local03, local03
27db8     00 2A 56 F2 | 	cmps	local03, #0 wc
27dbc     00 FA 05 C6 |  if_b	mov	result1, #0
27dc0     94 00 90 CD |  if_b	jmp	#LR__3698
27dc4     04 00 90 FD | 	jmp	#LR__3691
27dc8                 | LR__3690
27dc8     00 2C 06 F6 | 	mov	local04, #0
27dcc                 | LR__3691
27dcc     00 C0 1F FF 
27dd0     00 2E 06 F6 | 	mov	local05, ##1065353216
27dd4                 | LR__3692
27dd4     01 2A 56 F2 | 	cmps	local03, #1 wc
27dd8     30 00 90 CD |  if_b	jmp	#LR__3694
27ddc     01 2A CE F7 | 	test	local03, #1 wz
27de0     10 00 90 AD |  if_e	jmp	#LR__3693
27de4     17 13 02 F6 | 	mov	arg01, local05
27de8     14 15 02 F6 | 	mov	arg02, local02
27dec     9C EF BF FD | 	call	#__system___float_mul
27df0     FD 2E 02 F6 | 	mov	local05, result1
27df4                 | LR__3693
27df4     01 2A C6 F0 | 	sar	local03, #1
27df8     14 13 02 F6 | 	mov	arg01, local02
27dfc     14 15 02 F6 | 	mov	arg02, local02
27e00     88 EF BF FD | 	call	#__system___float_mul
27e04     FD 28 02 F6 | 	mov	local02, result1
27e08     C8 FF 9F FD | 	jmp	#LR__3692
27e0c                 | LR__3694
27e0c     00 2C 0E F2 | 	cmp	local04, #0 wz
27e10     14 00 90 AD |  if_e	jmp	#LR__3695
27e14     13 13 02 F6 | 	mov	arg01, local01
27e18     17 15 02 F6 | 	mov	arg02, local05
27e1c     70 F1 BF FD | 	call	#__system___float_div
27e20     FD 2E 02 F6 | 	mov	local05, result1
27e24     2C 00 90 FD | 	jmp	#LR__3697
27e28                 | LR__3695
27e28     13 13 02 F6 | 	mov	arg01, local01
27e2c     00 C0 1F FF 
27e30     00 14 06 F6 | 	mov	arg02, ##1065353216
27e34     01 16 06 F6 | 	mov	arg03, #1
27e38     84 F3 BF FD | 	call	#__system___float_cmp
27e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
27e40     10 00 90 AD |  if_e	jmp	#LR__3696
27e44     13 13 02 F6 | 	mov	arg01, local01
27e48     17 15 02 F6 | 	mov	arg02, local05
27e4c     3C EF BF FD | 	call	#__system___float_mul
27e50     FD 2E 02 F6 | 	mov	local05, result1
27e54                 | LR__3696
27e54                 | LR__3697
27e54     17 FB 01 F6 | 	mov	result1, local05
27e58                 | LR__3698
27e58     A7 F0 03 F6 | 	mov	ptra, fp
27e5c     B2 00 A0 FD | 	call	#popregs_
27e60                 | __system___float_pow_n_ret
27e60     2D 00 64 FD | 	ret
27e64                 | 
27e64                 | __system___gc_ptrs
27e64     EC 00 02 F6 | 	mov	_var01, __heap_ptr
27e68     00 03 02 F6 | 	mov	_var02, _var01
27e6c     BB 00 00 FF 
27e70     F8 02 06 F1 | 	add	_var02, ##95992
27e74     00 FD 09 FB | 	rdlong	result2, _var01 wz
27e78     74 00 90 5D |  if_ne	jmp	#LR__3700
27e7c     01 FD 01 F6 | 	mov	result2, _var02
27e80     00 FD 81 F1 | 	sub	result2, _var01
27e84     00 03 58 FC | 	wrword	#1, _var01
27e88     00 FB 01 F6 | 	mov	result1, _var01
27e8c     02 FA 05 F1 | 	add	result1, #2
27e90     36 00 80 FF 
27e94     FD 20 59 FC | 	wrword	##27792, result1
27e98     00 FB 01 F6 | 	mov	result1, _var01
27e9c     04 FA 05 F1 | 	add	result1, #4
27ea0     FD 00 58 FC | 	wrword	#0, result1
27ea4     00 FB 01 F6 | 	mov	result1, _var01
27ea8     06 FA 05 F1 | 	add	result1, #6
27eac     FD 02 58 FC | 	wrword	#1, result1
27eb0     10 00 06 F1 | 	add	_var01, #16
27eb4     FE FC 51 F6 | 	abs	result2, result2 wc
27eb8     04 FC 45 F0 | 	shr	result2, #4
27ebc     FE FC 81 F6 | 	negc	result2, result2
27ec0     00 FD 51 FC | 	wrword	result2, _var01
27ec4     00 FD 01 F6 | 	mov	result2, _var01
27ec8     02 FC 05 F1 | 	add	result2, #2
27ecc     36 00 80 FF 
27ed0     FE 1E 59 FC | 	wrword	##27791, result2
27ed4     00 FD 01 F6 | 	mov	result2, _var01
27ed8     04 FC 05 F1 | 	add	result2, #4
27edc     FE 00 58 FC | 	wrword	#0, result2
27ee0     00 FD 01 F6 | 	mov	result2, _var01
27ee4     06 FC 05 F1 | 	add	result2, #6
27ee8     FE 00 58 FC | 	wrword	#0, result2
27eec     10 00 86 F1 | 	sub	_var01, #16
27ef0                 | LR__3700
27ef0     00 FB 01 F6 | 	mov	result1, _var01
27ef4     01 FD 01 F6 | 	mov	result2, _var02
27ef8                 | __system___gc_ptrs_ret
27ef8     2D 00 64 FD | 	ret
27efc                 | 
27efc                 | __system___gc_tryalloc
27efc     0B 4A 05 F6 | 	mov	COUNT_, #11
27f00     A8 00 A0 FD | 	call	#pushregs_
27f04     09 27 02 F6 | 	mov	local01, arg01
27f08     0A 29 02 F6 | 	mov	local02, arg02
27f0c     54 FF BF FD | 	call	#__system___gc_ptrs
27f10     FD 2A 02 F6 | 	mov	local03, result1
27f14     FE 2C 02 F6 | 	mov	local04, result2
27f18     15 2F 02 F6 | 	mov	local05, local03
27f1c     00 30 06 F6 | 	mov	local06, #0
27f20     97 1E 48 FB | 	callpa	#(@LR__3711-@LR__3710)>>2,fcache_load_ptr_
27f24                 | LR__3710
27f24     17 33 02 F6 | 	mov	local07, local05
27f28     06 2E 06 F1 | 	add	local05, #6
27f2c     17 15 EA FA | 	rdword	arg02, local05 wz
27f30     15 13 02 F6 | 	mov	arg01, local03
27f34     00 FA 05 A6 |  if_e	mov	result1, #0
27f38     04 14 66 50 |  if_ne	shl	arg02, #4
27f3c     0A 13 02 51 |  if_ne	add	arg01, arg02
27f40     09 FB 01 56 |  if_ne	mov	result1, arg01
27f44     FD 2E 0A F6 | 	mov	local05, result1 wz
27f48     17 31 E2 5A |  if_ne	rdword	local06, local05
27f4c     00 2E 0E F2 | 	cmp	local05, #0 wz
27f50     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
27f54     08 00 90 1D |  if_a	jmp	#LR__3712
27f58     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
27f5c     C4 FF 9F 1D |  if_a	jmp	#LR__3710
27f60                 | LR__3711
27f60                 | LR__3712
27f60     00 2E 0E F2 | 	cmp	local05, #0 wz
27f64     17 FB 01 A6 |  if_e	mov	result1, local05
27f68     3C 01 90 AD |  if_e	jmp	#LR__3715
27f6c     17 FD 01 F6 | 	mov	result2, local05
27f70     06 FC 05 F1 | 	add	result2, #6
27f74     FE 34 E2 FA | 	rdword	local08, result2
27f78     18 27 52 F2 | 	cmps	local01, local06 wc
27f7c     C0 00 90 3D |  if_ae	jmp	#LR__3714
27f80     17 27 52 FC | 	wrword	local01, local05
27f84     17 13 02 F6 | 	mov	arg01, local05
27f88     13 35 02 F6 | 	mov	local08, local01
27f8c     04 34 66 F0 | 	shl	local08, #4
27f90     1A 13 02 F1 | 	add	arg01, local08
27f94     13 31 82 F1 | 	sub	local06, local01
27f98     09 31 52 FC | 	wrword	local06, arg01
27f9c     09 35 02 F6 | 	mov	local08, arg01
27fa0     02 34 06 F1 | 	add	local08, #2
27fa4     36 00 80 FF 
27fa8     1A 1F 59 FC | 	wrword	##27791, local08
27fac     17 15 0A F6 | 	mov	arg02, local05 wz
27fb0     00 FA 05 A6 |  if_e	mov	result1, #0
27fb4     15 15 82 51 |  if_ne	sub	arg02, local03
27fb8     04 14 46 50 |  if_ne	shr	arg02, #4
27fbc     0A FB 01 56 |  if_ne	mov	result1, arg02
27fc0     09 35 02 F6 | 	mov	local08, arg01
27fc4     04 34 06 F1 | 	add	local08, #4
27fc8     1A FB 51 FC | 	wrword	result1, local08
27fcc     17 35 02 F6 | 	mov	local08, local05
27fd0     06 34 06 F1 | 	add	local08, #6
27fd4     09 15 02 F6 | 	mov	arg02, arg01
27fd8     1A 35 E2 FA | 	rdword	local08, local08
27fdc     06 14 06 F1 | 	add	arg02, #6
27fe0     0A 35 52 FC | 	wrword	local08, arg02
27fe4     09 37 02 F6 | 	mov	local09, arg01
27fe8     1B 15 0A F6 | 	mov	arg02, local09 wz
27fec     00 FA 05 A6 |  if_e	mov	result1, #0
27ff0     15 15 82 51 |  if_ne	sub	arg02, local03
27ff4     04 14 46 50 |  if_ne	shr	arg02, #4
27ff8     0A FB 01 56 |  if_ne	mov	result1, arg02
27ffc     FD 34 02 F6 | 	mov	local08, result1
28000     09 39 EA FA | 	rdword	local10, arg01 wz
28004     00 FA 05 A6 |  if_e	mov	result1, #0
28008     04 38 66 50 |  if_ne	shl	local10, #4
2800c     1C 13 02 51 |  if_ne	add	arg01, local10
28010     09 FB 01 56 |  if_ne	mov	result1, arg01
28014     FD 3A 0A F6 | 	mov	local11, result1 wz
28018     24 00 90 AD |  if_e	jmp	#LR__3713
2801c     16 3B 52 F2 | 	cmps	local11, local04 wc
28020     1C 00 90 3D |  if_ae	jmp	#LR__3713
28024     1B 15 0A F6 | 	mov	arg02, local09 wz
28028     00 FA 05 A6 |  if_e	mov	result1, #0
2802c     15 15 82 51 |  if_ne	sub	arg02, local03
28030     04 14 46 50 |  if_ne	shr	arg02, #4
28034     0A FB 01 56 |  if_ne	mov	result1, arg02
28038     04 3A 06 F1 | 	add	local11, #4
2803c     1D FB 51 FC | 	wrword	result1, local11
28040                 | LR__3713
28040                 | LR__3714
28040     06 32 06 F1 | 	add	local07, #6
28044     19 35 52 FC | 	wrword	local08, local07
28048     36 00 00 FF 
2804c     80 36 06 F6 | 	mov	local09, ##27776
28050     14 37 42 F5 | 	or	local09, local02
28054     00 FA 05 F6 | 	mov	result1, #0
28058     01 FA 61 FD | 	cogid	result1
2805c     FD 36 42 F5 | 	or	local09, result1
28060     17 3B 02 F6 | 	mov	local11, local05
28064     02 3A 06 F1 | 	add	local11, #2
28068     1D 37 52 FC | 	wrword	local09, local11
2806c     15 37 02 F6 | 	mov	local09, local03
28070     08 36 06 F1 | 	add	local09, #8
28074     17 3B 02 F6 | 	mov	local11, local05
28078     1B 37 E2 FA | 	rdword	local09, local09
2807c     06 3A 06 F1 | 	add	local11, #6
28080     1D 37 52 FC | 	wrword	local09, local11
28084     17 15 0A F6 | 	mov	arg02, local05 wz
28088     00 FA 05 A6 |  if_e	mov	result1, #0
2808c     15 15 82 51 |  if_ne	sub	arg02, local03
28090     04 14 46 50 |  if_ne	shr	arg02, #4
28094     0A FB 01 56 |  if_ne	mov	result1, arg02
28098     08 2A 06 F1 | 	add	local03, #8
2809c     15 FB 51 FC | 	wrword	result1, local03
280a0     08 2E 06 F1 | 	add	local05, #8
280a4     17 FB 01 F6 | 	mov	result1, local05
280a8                 | LR__3715
280a8     A7 F0 03 F6 | 	mov	ptra, fp
280ac     B2 00 A0 FD | 	call	#popregs_
280b0                 | __system___gc_tryalloc_ret
280b0     2D 00 64 FD | 	ret
280b4                 | 
280b4                 | __system___gc_alloc_managed
280b4     01 4A 05 F6 | 	mov	COUNT_, #1
280b8     A8 00 A0 FD | 	call	#pushregs_
280bc     09 27 02 F6 | 	mov	local01, arg01
280c0     00 14 06 F6 | 	mov	arg02, #0
280c4     1C 00 B0 FD | 	call	#__system___gc_doalloc
280c8     FD 14 0A F6 | 	mov	arg02, result1 wz
280cc     01 26 56 A2 |  if_e	cmps	local01, #1 wc
280d0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
280d4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
280d8     A7 F0 03 F6 | 	mov	ptra, fp
280dc     B2 00 A0 FD | 	call	#popregs_
280e0                 | __system___gc_alloc_managed_ret
280e0     2D 00 64 FD | 	ret
280e4                 | 
280e4                 | __system___gc_doalloc
280e4     06 4A 05 F6 | 	mov	COUNT_, #6
280e8     A8 00 A0 FD | 	call	#pushregs_
280ec     09 27 0A F6 | 	mov	local01, arg01 wz
280f0     0A 29 02 F6 | 	mov	local02, arg02
280f4     00 FA 05 A6 |  if_e	mov	result1, #0
280f8     8C 00 90 AD |  if_e	jmp	#LR__3727
280fc     17 26 06 F1 | 	add	local01, #23
28100     0F 26 26 F5 | 	andn	local01, #15
28104     04 26 46 F0 | 	shr	local01, #4
28108     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2810c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28110     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
28114     FC BD BF FD | 	call	#__system___lockmem
28118     13 13 02 F6 | 	mov	arg01, local01
2811c     14 15 02 F6 | 	mov	arg02, local02
28120     D8 FD BF FD | 	call	#__system___gc_tryalloc
28124     FD 2A 0A F6 | 	mov	local03, result1 wz
28128     14 00 90 5D |  if_ne	jmp	#LR__3720
2812c     70 03 B0 FD | 	call	#__system___gc_docollect
28130     13 13 02 F6 | 	mov	arg01, local01
28134     14 15 02 F6 | 	mov	arg02, local02
28138     C0 FD BF FD | 	call	#__system___gc_tryalloc
2813c     FD 2A 02 F6 | 	mov	local03, result1
28140                 | LR__3720
28140     1C E6 05 F1 | 	add	ptr___system__dat__, #28
28144     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28148     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2814c     09 01 68 FC | 	wrlong	#0, arg01
28150     00 2A 0E F2 | 	cmp	local03, #0 wz
28154     2C 00 90 AD |  if_e	jmp	#LR__3726
28158     04 26 66 F0 | 	shl	local01, #4
2815c     08 26 86 F1 | 	sub	local01, #8
28160     13 2D 52 F6 | 	abs	local04, local01 wc
28164     02 2C 46 F0 | 	shr	local04, #2
28168     16 2F 8A F6 | 	negc	local05, local04 wz
2816c     15 31 02 F6 | 	mov	local06, local03
28170     10 00 90 AD |  if_e	jmp	#LR__3725
28174     97 06 48 FB | 	callpa	#(@LR__3723-@LR__3721)>>2,fcache_load_ptr_
28178                 | LR__3721
28178     17 05 D8 FC | 	rep	@LR__3724, local05
2817c                 | LR__3722
2817c     18 01 68 FC | 	wrlong	#0, local06
28180     04 30 06 F1 | 	add	local06, #4
28184                 | LR__3723
28184                 | LR__3724
28184                 | LR__3725
28184                 | LR__3726
28184     15 FB 01 F6 | 	mov	result1, local03
28188                 | LR__3727
28188     A7 F0 03 F6 | 	mov	ptra, fp
2818c     B2 00 A0 FD | 	call	#popregs_
28190                 | __system___gc_doalloc_ret
28190     2D 00 64 FD | 	ret
28194                 | 
28194                 | __system___gc_isvalidptr
28194     F8 16 06 F4 | 	bitl	arg03, #248
28198     08 16 86 F1 | 	sub	arg03, #8
2819c     09 17 52 F2 | 	cmps	arg03, arg01 wc
281a0     08 00 90 CD |  if_b	jmp	#LR__3730
281a4     0A 17 52 F2 | 	cmps	arg03, arg02 wc
281a8     08 00 90 CD |  if_b	jmp	#LR__3731
281ac                 | LR__3730
281ac     00 FA 05 F6 | 	mov	result1, #0
281b0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
281b4                 | LR__3731
281b4     0B 01 02 F6 | 	mov	_var01, arg03
281b8     09 01 62 F5 | 	xor	_var01, arg01
281bc     0F 00 CE F7 | 	test	_var01, #15 wz
281c0     00 FA 05 56 |  if_ne	mov	result1, #0
281c4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
281c8     0B 01 02 F6 | 	mov	_var01, arg03
281cc     02 00 06 F1 | 	add	_var01, #2
281d0     00 01 E2 FA | 	rdword	_var01, _var01
281d4     7F 00 00 FF 
281d8     C0 01 06 F5 | 	and	_var01, ##65472
281dc     36 00 00 FF 
281e0     80 00 0E F2 | 	cmp	_var01, ##27776 wz
281e4     00 FA 05 56 |  if_ne	mov	result1, #0
281e8     0B FB 01 A6 |  if_e	mov	result1, arg03
281ec                 | __system___gc_isvalidptr_ret
281ec     2D 00 64 FD | 	ret
281f0                 | 
281f0                 | __system___gc_free
281f0     09 17 02 F6 | 	mov	arg03, arg01
281f4     6C FC BF FD | 	call	#__system___gc_ptrs
281f8     FD 12 02 F6 | 	mov	arg01, result1
281fc     FE 14 02 F6 | 	mov	arg02, result2
28200     90 FF BF FD | 	call	#__system___gc_isvalidptr
28204     FD 14 0A F6 | 	mov	arg02, result1 wz
28208     28 00 90 AD |  if_e	jmp	#LR__3740
2820c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
28210     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28214     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
28218     F8 BC BF FD | 	call	#__system___lockmem
2821c     0A 13 02 F6 | 	mov	arg01, arg02
28220     14 00 B0 FD | 	call	#__system___gc_dofree
28224     1C E6 05 F1 | 	add	ptr___system__dat__, #28
28228     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2822c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
28230     09 01 68 FC | 	wrlong	#0, arg01
28234                 | LR__3740
28234                 | __system___gc_free_ret
28234     2D 00 64 FD | 	ret
28238                 | 
28238                 | __system___gc_dofree
28238     06 4A 05 F6 | 	mov	COUNT_, #6
2823c     A8 00 A0 FD | 	call	#pushregs_
28240     09 27 02 F6 | 	mov	local01, arg01
28244     1C FC BF FD | 	call	#__system___gc_ptrs
28248     FD 28 02 F6 | 	mov	local02, result1
2824c     FE 2A 02 F6 | 	mov	local03, result2
28250     13 15 02 F6 | 	mov	arg02, local01
28254     02 14 06 F1 | 	add	arg02, #2
28258     36 00 80 FF 
2825c     0A 1F 59 FC | 	wrword	##27791, arg02
28260     13 2D 02 F6 | 	mov	local04, local01
28264     13 13 02 F6 | 	mov	arg01, local01
28268     09 2F EA FA | 	rdword	local05, arg01 wz
2826c     00 FA 05 A6 |  if_e	mov	result1, #0
28270     04 2E 66 50 |  if_ne	shl	local05, #4
28274     17 13 02 51 |  if_ne	add	arg01, local05
28278     09 FB 01 56 |  if_ne	mov	result1, arg01
2827c     FD 30 02 F6 | 	mov	local06, result1
28280     97 24 48 FB | 	callpa	#(@LR__3751-@LR__3750)>>2,fcache_load_ptr_
28284                 | LR__3750
28284     04 2C 06 F1 | 	add	local04, #4
28288     16 15 EA FA | 	rdword	arg02, local04 wz
2828c     14 13 02 F6 | 	mov	arg01, local02
28290     00 FA 05 A6 |  if_e	mov	result1, #0
28294     04 14 66 50 |  if_ne	shl	arg02, #4
28298     0A 13 02 51 |  if_ne	add	arg01, arg02
2829c     09 FB 01 56 |  if_ne	mov	result1, arg01
282a0     FD 2C 0A F6 | 	mov	local04, result1 wz
282a4     24 00 90 AD |  if_e	jmp	#LR__3752
282a8     16 13 02 F6 | 	mov	arg01, local04
282ac     00 FA 05 F6 | 	mov	result1, #0
282b0     02 12 06 F1 | 	add	arg01, #2
282b4     09 13 E2 FA | 	rdword	arg01, arg01
282b8     36 00 00 FF 
282bc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
282c0     01 FA 65 A6 |  if_e	neg	result1, #1
282c4     00 FA 0D F2 | 	cmp	result1, #0 wz
282c8     B8 FF 9F AD |  if_e	jmp	#LR__3750
282cc                 | LR__3751
282cc                 | LR__3752
282cc     00 2C 0E F2 | 	cmp	local04, #0 wz
282d0     14 2D 02 A6 |  if_e	mov	local04, local02
282d4     16 15 02 F6 | 	mov	arg02, local04
282d8     06 14 06 F1 | 	add	arg02, #6
282dc     13 13 02 F6 | 	mov	arg01, local01
282e0     0A 15 E2 FA | 	rdword	arg02, arg02
282e4     06 12 06 F1 | 	add	arg01, #6
282e8     09 15 52 FC | 	wrword	arg02, arg01
282ec     13 15 0A F6 | 	mov	arg02, local01 wz
282f0     00 FA 05 A6 |  if_e	mov	result1, #0
282f4     14 15 82 51 |  if_ne	sub	arg02, local02
282f8     04 14 46 50 |  if_ne	shr	arg02, #4
282fc     0A FB 01 56 |  if_ne	mov	result1, arg02
28300     16 15 02 F6 | 	mov	arg02, local04
28304     06 14 06 F1 | 	add	arg02, #6
28308     0A FB 51 FC | 	wrword	result1, arg02
2830c     14 2D 0A F2 | 	cmp	local04, local02 wz
28310     A4 00 90 AD |  if_e	jmp	#LR__3755
28314     16 13 02 F6 | 	mov	arg01, local04
28318     09 2F EA FA | 	rdword	local05, arg01 wz
2831c     00 FA 05 A6 |  if_e	mov	result1, #0
28320     04 2E 66 50 |  if_ne	shl	local05, #4
28324     17 13 02 51 |  if_ne	add	arg01, local05
28328     09 FB 01 56 |  if_ne	mov	result1, arg01
2832c     13 FB 09 F2 | 	cmp	result1, local01 wz
28330     84 00 90 5D |  if_ne	jmp	#LR__3754
28334     16 31 E2 FA | 	rdword	local06, local04
28338     13 15 E2 FA | 	rdword	arg02, local01
2833c     0A 31 02 F1 | 	add	local06, arg02
28340     16 31 52 FC | 	wrword	local06, local04
28344     13 31 02 F6 | 	mov	local06, local01
28348     02 30 06 F1 | 	add	local06, #2
2834c     18 01 58 FC | 	wrword	#0, local06
28350     13 13 02 F6 | 	mov	arg01, local01
28354     09 2F EA FA | 	rdword	local05, arg01 wz
28358     00 FA 05 A6 |  if_e	mov	result1, #0
2835c     04 2E 66 50 |  if_ne	shl	local05, #4
28360     17 13 02 51 |  if_ne	add	arg01, local05
28364     09 FB 01 56 |  if_ne	mov	result1, arg01
28368     FD 30 02 F6 | 	mov	local06, result1
2836c     15 31 52 F2 | 	cmps	local06, local03 wc
28370     20 00 90 3D |  if_ae	jmp	#LR__3753
28374     16 15 0A F6 | 	mov	arg02, local04 wz
28378     00 FA 05 A6 |  if_e	mov	result1, #0
2837c     14 15 82 51 |  if_ne	sub	arg02, local02
28380     04 14 46 50 |  if_ne	shr	arg02, #4
28384     0A FB 01 56 |  if_ne	mov	result1, arg02
28388     18 15 02 F6 | 	mov	arg02, local06
2838c     04 14 06 F1 | 	add	arg02, #4
28390     0A FB 51 FC | 	wrword	result1, arg02
28394                 | LR__3753
28394     13 15 02 F6 | 	mov	arg02, local01
28398     06 14 06 F1 | 	add	arg02, #6
2839c     16 FD 01 F6 | 	mov	result2, local04
283a0     0A 15 E2 FA | 	rdword	arg02, arg02
283a4     06 FC 05 F1 | 	add	result2, #6
283a8     FE 14 52 FC | 	wrword	arg02, result2
283ac     06 26 06 F1 | 	add	local01, #6
283b0     13 01 58 FC | 	wrword	#0, local01
283b4     16 27 02 F6 | 	mov	local01, local04
283b8                 | LR__3754
283b8                 | LR__3755
283b8     13 13 02 F6 | 	mov	arg01, local01
283bc     09 2F EA FA | 	rdword	local05, arg01 wz
283c0     00 FA 05 A6 |  if_e	mov	result1, #0
283c4     04 2E 66 50 |  if_ne	shl	local05, #4
283c8     17 13 02 51 |  if_ne	add	arg01, local05
283cc     09 FB 01 56 |  if_ne	mov	result1, arg01
283d0     FD 14 0A F6 | 	mov	arg02, result1 wz
283d4     B8 00 90 AD |  if_e	jmp	#LR__3757
283d8     15 15 52 F2 | 	cmps	arg02, local03 wc
283dc     B0 00 90 3D |  if_ae	jmp	#LR__3757
283e0     0A 13 02 F6 | 	mov	arg01, arg02
283e4     00 FA 05 F6 | 	mov	result1, #0
283e8     02 12 06 F1 | 	add	arg01, #2
283ec     09 13 E2 FA | 	rdword	arg01, arg01
283f0     36 00 00 FF 
283f4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
283f8     01 FA 65 A6 |  if_e	neg	result1, #1
283fc     00 FA 0D F2 | 	cmp	result1, #0 wz
28400     8C 00 90 AD |  if_e	jmp	#LR__3757
28404     13 2D 02 F6 | 	mov	local04, local01
28408     16 31 E2 FA | 	rdword	local06, local04
2840c     0A 13 02 F6 | 	mov	arg01, arg02
28410     09 27 E2 FA | 	rdword	local01, arg01
28414     13 31 02 F1 | 	add	local06, local01
28418     16 31 52 FC | 	wrword	local06, local04
2841c     09 31 02 F6 | 	mov	local06, arg01
28420     06 30 06 F1 | 	add	local06, #6
28424     16 27 02 F6 | 	mov	local01, local04
28428     18 31 E2 FA | 	rdword	local06, local06
2842c     06 26 06 F1 | 	add	local01, #6
28430     13 31 52 FC | 	wrword	local06, local01
28434     09 31 02 F6 | 	mov	local06, arg01
28438     02 30 06 F1 | 	add	local06, #2
2843c     18 55 59 FC | 	wrword	#170, local06
28440     09 31 02 F6 | 	mov	local06, arg01
28444     06 30 06 F1 | 	add	local06, #6
28448     18 01 58 FC | 	wrword	#0, local06
2844c     09 2F EA FA | 	rdword	local05, arg01 wz
28450     00 FA 05 A6 |  if_e	mov	result1, #0
28454     04 2E 66 50 |  if_ne	shl	local05, #4
28458     17 13 02 51 |  if_ne	add	arg01, local05
2845c     09 FB 01 56 |  if_ne	mov	result1, arg01
28460     FD 30 0A F6 | 	mov	local06, result1 wz
28464     28 00 90 AD |  if_e	jmp	#LR__3756
28468     15 31 52 F2 | 	cmps	local06, local03 wc
2846c     20 00 90 3D |  if_ae	jmp	#LR__3756
28470     16 15 0A F6 | 	mov	arg02, local04 wz
28474     00 FA 05 A6 |  if_e	mov	result1, #0
28478     14 15 82 51 |  if_ne	sub	arg02, local02
2847c     04 14 46 50 |  if_ne	shr	arg02, #4
28480     0A FB 01 56 |  if_ne	mov	result1, arg02
28484     18 2D 02 F6 | 	mov	local04, local06
28488     04 2C 06 F1 | 	add	local04, #4
2848c     16 FB 51 FC | 	wrword	result1, local04
28490                 | LR__3756
28490                 | LR__3757
28490     18 FB 01 F6 | 	mov	result1, local06
28494     A7 F0 03 F6 | 	mov	ptra, fp
28498     B2 00 A0 FD | 	call	#popregs_
2849c                 | __system___gc_dofree_ret
2849c     2D 00 64 FD | 	ret
284a0                 | 
284a0                 | __system___gc_docollect
284a0     05 4A 05 F6 | 	mov	COUNT_, #5
284a4     A8 00 A0 FD | 	call	#pushregs_
284a8     B8 F9 BF FD | 	call	#__system___gc_ptrs
284ac     FE 26 02 F6 | 	mov	local01, result2
284b0     FD 28 02 F6 | 	mov	local02, result1
284b4     14 13 02 F6 | 	mov	arg01, local02
284b8     09 2B EA FA | 	rdword	local03, arg01 wz
284bc     00 FA 05 A6 |  if_e	mov	result1, #0
284c0     04 2A 66 50 |  if_ne	shl	local03, #4
284c4     15 13 02 51 |  if_ne	add	arg01, local03
284c8     09 FB 01 56 |  if_ne	mov	result1, arg01
284cc     FD 2C 0A F6 | 	mov	local04, result1 wz
284d0     00 FA 05 F6 | 	mov	result1, #0
284d4     01 FA 61 FD | 	cogid	result1
284d8     FD 2E 02 F6 | 	mov	local05, result1
284dc     48 00 90 AD |  if_e	jmp	#LR__3762
284e0     97 22 48 FB | 	callpa	#(@LR__3761-@LR__3760)>>2,fcache_load_ptr_
284e4                 | LR__3760
284e4     13 2D 52 F2 | 	cmps	local04, local01 wc
284e8     3C 00 90 3D |  if_ae	jmp	#LR__3762
284ec     16 15 02 F6 | 	mov	arg02, local04
284f0     02 14 06 F1 | 	add	arg02, #2
284f4     0A 15 E2 FA | 	rdword	arg02, arg02
284f8     20 14 26 F5 | 	andn	arg02, #32
284fc     16 13 02 F6 | 	mov	arg01, local04
28500     02 12 06 F1 | 	add	arg01, #2
28504     09 15 52 FC | 	wrword	arg02, arg01
28508     16 13 02 F6 | 	mov	arg01, local04
2850c     09 2B EA FA | 	rdword	local03, arg01 wz
28510     00 FA 05 A6 |  if_e	mov	result1, #0
28514     04 2A 66 50 |  if_ne	shl	local03, #4
28518     15 13 02 51 |  if_ne	add	arg01, local03
2851c     09 FB 01 56 |  if_ne	mov	result1, arg01
28520     FD 2C 0A F6 | 	mov	local04, result1 wz
28524     BC FF 9F 5D |  if_ne	jmp	#LR__3760
28528                 | LR__3761
28528                 | LR__3762
28528     00 2A 06 F6 | 	mov	local03, #0
2852c     00 12 06 F6 | 	mov	arg01, #0
28530     B8 B9 BF FD | 	call	#__system____topofstack
28534     FD 14 02 F6 | 	mov	arg02, result1
28538     15 13 02 F6 | 	mov	arg01, local03
2853c     90 00 B0 FD | 	call	#__system___gc_markhub
28540     1C 01 B0 FD | 	call	#__system___gc_markcog
28544     14 13 02 F6 | 	mov	arg01, local02
28548     09 2B EA FA | 	rdword	local03, arg01 wz
2854c     00 FA 05 A6 |  if_e	mov	result1, #0
28550     04 2A 66 50 |  if_ne	shl	local03, #4
28554     15 13 02 51 |  if_ne	add	arg01, local03
28558     09 FB 01 56 |  if_ne	mov	result1, arg01
2855c     FD 28 0A F6 | 	mov	local02, result1 wz
28560     60 00 90 AD |  if_e	jmp	#LR__3766
28564                 | LR__3763
28564     14 2D 02 F6 | 	mov	local04, local02
28568     16 13 02 F6 | 	mov	arg01, local04
2856c     09 2B EA FA | 	rdword	local03, arg01 wz
28570     00 FA 05 A6 |  if_e	mov	result1, #0
28574     04 2A 66 50 |  if_ne	shl	local03, #4
28578     15 13 02 51 |  if_ne	add	arg01, local03
2857c     09 FB 01 56 |  if_ne	mov	result1, arg01
28580     FD 28 02 F6 | 	mov	local02, result1
28584     16 15 02 F6 | 	mov	arg02, local04
28588     02 14 06 F1 | 	add	arg02, #2
2858c     0A 15 E2 FA | 	rdword	arg02, arg02
28590     20 14 CE F7 | 	test	arg02, #32 wz
28594     10 14 CE A7 |  if_e	test	arg02, #16 wz
28598     1C 00 90 5D |  if_ne	jmp	#LR__3765
2859c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
285a0     17 15 0A F2 | 	cmp	arg02, local05 wz
285a4     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
285a8     0C 00 90 5D |  if_ne	jmp	#LR__3764
285ac     16 13 02 F6 | 	mov	arg01, local04
285b0     84 FC BF FD | 	call	#__system___gc_dofree
285b4     FD 28 02 F6 | 	mov	local02, result1
285b8                 | LR__3764
285b8                 | LR__3765
285b8     00 28 0E F2 | 	cmp	local02, #0 wz
285bc     13 29 52 52 |  if_ne	cmps	local02, local01 wc
285c0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3763
285c4                 | LR__3766
285c4     A7 F0 03 F6 | 	mov	ptra, fp
285c8     B2 00 A0 FD | 	call	#popregs_
285cc                 | __system___gc_docollect_ret
285cc     2D 00 64 FD | 	ret
285d0                 | 
285d0                 | __system___gc_markhub
285d0     04 4A 05 F6 | 	mov	COUNT_, #4
285d4     A8 00 A0 FD | 	call	#pushregs_
285d8     09 27 02 F6 | 	mov	local01, arg01
285dc     0A 29 02 F6 | 	mov	local02, arg02
285e0     80 F8 BF FD | 	call	#__system___gc_ptrs
285e4     FD 2A 02 F6 | 	mov	local03, result1
285e8     FE 2C 02 F6 | 	mov	local04, result2
285ec                 | LR__3770
285ec     14 27 52 F2 | 	cmps	local01, local02 wc
285f0     60 00 90 3D |  if_ae	jmp	#LR__3771
285f4     13 17 02 FB | 	rdlong	arg03, local01
285f8     04 26 06 F1 | 	add	local01, #4
285fc     16 15 02 F6 | 	mov	arg02, local04
28600     15 13 02 F6 | 	mov	arg01, local03
28604     8C FB BF FD | 	call	#__system___gc_isvalidptr
28608     FD 16 0A F6 | 	mov	arg03, result1 wz
2860c     DC FF 9F AD |  if_e	jmp	#LR__3770
28610     0B 13 02 F6 | 	mov	arg01, arg03
28614     00 FA 05 F6 | 	mov	result1, #0
28618     02 12 06 F1 | 	add	arg01, #2
2861c     09 13 E2 FA | 	rdword	arg01, arg01
28620     36 00 00 FF 
28624     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
28628     01 FA 65 A6 |  if_e	neg	result1, #1
2862c     00 FA 0D F2 | 	cmp	result1, #0 wz
28630     B8 FF 9F 5D |  if_ne	jmp	#LR__3770
28634     0B FD 01 F6 | 	mov	result2, arg03
28638     02 FC 05 F1 | 	add	result2, #2
2863c     FE FC E1 FA | 	rdword	result2, result2
28640     0F FC 25 F5 | 	andn	result2, #15
28644     2E FC 45 F5 | 	or	result2, #46
28648     02 16 06 F1 | 	add	arg03, #2
2864c     0B FD 51 FC | 	wrword	result2, arg03
28650     98 FF 9F FD | 	jmp	#LR__3770
28654                 | LR__3771
28654     A7 F0 03 F6 | 	mov	ptra, fp
28658     B2 00 A0 FD | 	call	#popregs_
2865c                 | __system___gc_markhub_ret
2865c     2D 00 64 FD | 	ret
28660                 | 
28660                 | __system___gc_markcog
28660     04 4A 05 F6 | 	mov	COUNT_, #4
28664     A8 00 A0 FD | 	call	#pushregs_
28668     F8 F7 BF FD | 	call	#__system___gc_ptrs
2866c     FD 26 02 F6 | 	mov	local01, result1
28670     FE 28 02 F6 | 	mov	local02, result2
28674     EF 2B 06 F6 | 	mov	local03, #495
28678                 | LR__3780
28678                 | 	'.live	local03
28678     00 2A 96 F9 | 	alts	local03, #0
2867c     15 2D 02 F6 | 	mov	local04, local03
28680     13 13 02 F6 | 	mov	arg01, local01
28684     14 15 02 F6 | 	mov	arg02, local02
28688     16 17 02 F6 | 	mov	arg03, local04
2868c     04 FB BF FD | 	call	#__system___gc_isvalidptr
28690     00 FA 0D F2 | 	cmp	result1, #0 wz
28694     18 00 90 AD |  if_e	jmp	#LR__3781
28698     FD 2C 02 F6 | 	mov	local04, result1
2869c     02 2C 06 F1 | 	add	local04, #2
286a0     16 2D E2 FA | 	rdword	local04, local04
286a4     20 2C 46 F5 | 	or	local04, #32
286a8     02 FA 05 F1 | 	add	result1, #2
286ac     FD 2C 52 FC | 	wrword	local04, result1
286b0                 | LR__3781
286b0     01 2A 86 F1 | 	sub	local03, #1
286b4     00 2A 56 F2 | 	cmps	local03, #0 wc
286b8     BC FF 9F 3D |  if_ae	jmp	#LR__3780
286bc     A7 F0 03 F6 | 	mov	ptra, fp
286c0     B2 00 A0 FD | 	call	#popregs_
286c4                 | __system___gc_markcog_ret
286c4     2D 00 64 FD | 	ret
286c8                 | 
286c8                 | __system__opendir
286c8     06 4A 05 F6 | 	mov	COUNT_, #6
286cc     A8 00 A0 FD | 	call	#pushregs_
286d0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
286d4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
286d8     09 15 02 F6 | 	mov	arg02, arg01
286dc     13 13 02 F6 | 	mov	arg01, local01
286e0     00 16 06 F6 | 	mov	arg03, #0
286e4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
286e8     C0 BF BF FD | 	call	#__system____getvfsforfile
286ec     FD 28 0A F6 | 	mov	local02, result1 wz
286f0     10 00 90 AD |  if_e	jmp	#LR__3790
286f4     28 28 06 F1 | 	add	local02, #40
286f8     14 17 0A FB | 	rdlong	arg03, local02 wz
286fc     28 28 86 F1 | 	sub	local02, #40
28700     14 00 90 5D |  if_ne	jmp	#LR__3791
28704                 | LR__3790
28704     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28708     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2870c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28710     00 FA 05 F6 | 	mov	result1, #0
28714     90 00 90 FD | 	jmp	#LR__3793
28718                 | LR__3791
28718     5C 12 06 F6 | 	mov	arg01, #92
2871c     10 14 06 F6 | 	mov	arg02, #16
28720     C0 F9 BF FD | 	call	#__system___gc_doalloc
28724     FD 2A 0A F6 | 	mov	local03, result1 wz
28728     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2872c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28730     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28734     00 FA 05 A6 |  if_e	mov	result1, #0
28738     6C 00 90 AD |  if_e	jmp	#LR__3793
2873c     28 28 06 F1 | 	add	local02, #40
28740     14 2D 02 FB | 	rdlong	local04, local02
28744     16 2F 02 F6 | 	mov	local05, local04
28748     28 28 86 F1 | 	sub	local02, #40
2874c     13 2E 46 F7 | 	zerox	local05, #19
28750     14 2C 46 F0 | 	shr	local04, #20
28754     02 2C 66 F0 | 	shl	local04, #2
28758     ED 2C 02 F1 | 	add	local04, __methods__
2875c     16 2D 02 FB | 	rdlong	local04, local04
28760     15 13 02 F6 | 	mov	arg01, local03
28764     13 15 02 F6 | 	mov	arg02, local01
28768     F2 30 02 F6 | 	mov	local06, objptr
2876c     17 E5 01 F6 | 	mov	objptr, local05
28770     2D 2C 62 FD | 	call	local04
28774     18 E5 01 F6 | 	mov	objptr, local06
28778     FD 16 0A F6 | 	mov	arg03, result1 wz
2877c     20 00 90 AD |  if_e	jmp	#LR__3792
28780     00 16 4E F2 | 	cmps	arg03, #0 wz
28784     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28788     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2878c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28790     15 13 02 F6 | 	mov	arg01, local03
28794     58 FA BF FD | 	call	#__system___gc_free
28798     00 FA 05 F6 | 	mov	result1, #0
2879c     08 00 90 FD | 	jmp	#LR__3793
287a0                 | LR__3792
287a0     15 29 62 FC | 	wrlong	local02, local03
287a4     15 FB 01 F6 | 	mov	result1, local03
287a8                 | LR__3793
287a8     A7 F0 03 F6 | 	mov	ptra, fp
287ac     B2 00 A0 FD | 	call	#popregs_
287b0                 | __system__opendir_ret
287b0     2D 00 64 FD | 	ret
287b4                 | 
287b4                 | __system__closedir
287b4     04 4A 05 F6 | 	mov	COUNT_, #4
287b8     A8 00 A0 FD | 	call	#pushregs_
287bc     09 27 02 F6 | 	mov	local01, arg01
287c0     13 13 02 FB | 	rdlong	arg01, local01
287c4     2C 12 06 F1 | 	add	arg01, #44
287c8     09 29 02 FB | 	rdlong	local02, arg01
287cc     14 2B 02 F6 | 	mov	local03, local02
287d0     13 2A 46 F7 | 	zerox	local03, #19
287d4     14 28 46 F0 | 	shr	local02, #20
287d8     02 28 66 F0 | 	shl	local02, #2
287dc     ED 28 02 F1 | 	add	local02, __methods__
287e0     14 29 02 FB | 	rdlong	local02, local02
287e4     13 13 02 F6 | 	mov	arg01, local01
287e8     F2 2C 02 F6 | 	mov	local04, objptr
287ec     15 E5 01 F6 | 	mov	objptr, local03
287f0     2D 28 62 FD | 	call	local02
287f4     16 E5 01 F6 | 	mov	objptr, local04
287f8     FD 2C 02 F6 | 	mov	local04, result1
287fc     13 13 02 F6 | 	mov	arg01, local01
28800     EC F9 BF FD | 	call	#__system___gc_free
28804     00 2C 4E F2 | 	cmps	local04, #0 wz
28808     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2880c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
28810     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28814     01 FA 65 56 |  if_ne	neg	result1, #1
28818     00 FA 05 A6 |  if_e	mov	result1, #0
2881c     A7 F0 03 F6 | 	mov	ptra, fp
28820     B2 00 A0 FD | 	call	#popregs_
28824                 | __system__closedir_ret
28824     2D 00 64 FD | 	ret
28828                 | 
28828                 | __system__readdir
28828     04 4A 05 F6 | 	mov	COUNT_, #4
2882c     A8 00 A0 FD | 	call	#pushregs_
28830     09 15 0A FB | 	rdlong	arg02, arg01 wz
28834     08 12 06 F1 | 	add	arg01, #8
28838     09 27 02 F6 | 	mov	local01, arg01
2883c     08 12 86 F1 | 	sub	arg01, #8
28840     00 FA 05 A6 |  if_e	mov	result1, #0
28844     5C 00 90 AD |  if_e	jmp	#LR__3801
28848     30 14 06 F1 | 	add	arg02, #48
2884c     0A 29 02 FB | 	rdlong	local02, arg02
28850     14 2B 02 F6 | 	mov	local03, local02
28854     13 2A 46 F7 | 	zerox	local03, #19
28858     14 28 46 F0 | 	shr	local02, #20
2885c     02 28 66 F0 | 	shl	local02, #2
28860     ED 28 02 F1 | 	add	local02, __methods__
28864     14 29 02 FB | 	rdlong	local02, local02
28868     13 15 02 F6 | 	mov	arg02, local01
2886c     F2 2C 02 F6 | 	mov	local04, objptr
28870     15 E5 01 F6 | 	mov	objptr, local03
28874     2D 28 62 FD | 	call	local02
28878     16 E5 01 F6 | 	mov	objptr, local04
2887c     00 FA 4D F2 | 	cmps	result1, #0 wz
28880     1C 00 90 AD |  if_e	jmp	#LR__3800
28884     01 FA 55 F2 | 	cmps	result1, #1 wc
28888     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2888c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
28890     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
28894     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
28898     00 FA 05 F6 | 	mov	result1, #0
2889c     04 00 90 FD | 	jmp	#LR__3801
288a0                 | LR__3800
288a0     13 FB 01 F6 | 	mov	result1, local01
288a4                 | LR__3801
288a4     A7 F0 03 F6 | 	mov	ptra, fp
288a8     B2 00 A0 FD | 	call	#popregs_
288ac                 | __system__readdir_ret
288ac     2D 00 64 FD | 	ret
288b0                 | 
288b0                 | __system___openraw
288b0     15 4A 05 F6 | 	mov	COUNT_, #21
288b4     A8 00 A0 FD | 	call	#pushregs_
288b8     09 27 02 F6 | 	mov	local01, arg01
288bc     0A 29 02 F6 | 	mov	local02, arg02
288c0     0B 2B 02 F6 | 	mov	local03, arg03
288c4     0C 2D 02 F6 | 	mov	local04, arg04
288c8     04 2E 06 F6 | 	mov	local05, #4
288cc     13 31 02 F6 | 	mov	local06, local01
288d0     00 32 06 F6 | 	mov	local07, #0
288d4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
288d8     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
288dc     1A 13 02 F6 | 	mov	arg01, local08
288e0     14 15 02 F6 | 	mov	arg02, local02
288e4     00 16 06 F6 | 	mov	arg03, #0
288e8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
288ec     BC BD BF FD | 	call	#__system____getvfsforfile
288f0     FD 36 0A F6 | 	mov	local09, result1 wz
288f4     10 00 90 AD |  if_e	jmp	#LR__3810
288f8     20 36 06 F1 | 	add	local09, #32
288fc     1B FB 09 FB | 	rdlong	result1, local09 wz
28900     20 36 86 F1 | 	sub	local09, #32
28904     14 00 90 5D |  if_ne	jmp	#LR__3811
28908                 | LR__3810
28908     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2890c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28910     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28914     01 FA 65 F6 | 	neg	result1, #1
28918     8C 02 90 FD | 	jmp	#LR__3824
2891c                 | LR__3811
2891c     18 13 02 F6 | 	mov	arg01, local06
28920     00 14 06 F6 | 	mov	arg02, #0
28924     34 16 06 F6 | 	mov	arg03, #52
28928     09 39 02 F6 | 	mov	local10, arg01
2892c     98 00 A0 FD | 	call	#\builtin_bytefill_
28930     20 36 06 F1 | 	add	local09, #32
28934     1B 3B 02 FB | 	rdlong	local11, local09
28938     1D 3D 02 F6 | 	mov	local12, local11
2893c     1D 3F 02 F6 | 	mov	local13, local11
28940     20 36 86 F1 | 	sub	local09, #32
28944     1F 41 02 F6 | 	mov	local14, local13
28948     13 3C 46 F7 | 	zerox	local12, #19
2894c     14 40 46 F0 | 	shr	local14, #20
28950     02 40 66 F0 | 	shl	local14, #2
28954     ED 40 02 F1 | 	add	local14, __methods__
28958     20 41 02 FB | 	rdlong	local14, local14
2895c     18 43 02 F6 | 	mov	local15, local06
28960     1A 45 02 F6 | 	mov	local16, local08
28964     15 47 02 F6 | 	mov	local17, local03
28968     21 13 02 F6 | 	mov	arg01, local15
2896c     22 15 02 F6 | 	mov	arg02, local16
28970     23 17 02 F6 | 	mov	arg03, local17
28974     F2 48 02 F6 | 	mov	local18, objptr
28978     1E E5 01 F6 | 	mov	objptr, local12
2897c     2D 40 62 FD | 	call	local14
28980     24 E5 01 F6 | 	mov	objptr, local18
28984     FD 4A 0A F6 | 	mov	local19, result1 wz
28988     04 2A CE 57 |  if_ne	test	local03, #4 wz
2898c     58 00 90 AD |  if_e	jmp	#LR__3812
28990     24 36 06 F1 | 	add	local09, #36
28994     1B 3B 02 FB | 	rdlong	local11, local09
28998     1D 3D 02 F6 | 	mov	local12, local11
2899c     1D 3F 02 F6 | 	mov	local13, local11
289a0     24 36 86 F1 | 	sub	local09, #36
289a4     1F 41 02 F6 | 	mov	local14, local13
289a8     13 3C 46 F7 | 	zerox	local12, #19
289ac     14 40 46 F0 | 	shr	local14, #20
289b0     02 40 66 F0 | 	shl	local14, #2
289b4     ED 40 02 F1 | 	add	local14, __methods__
289b8     20 41 02 FB | 	rdlong	local14, local14
289bc     18 43 02 F6 | 	mov	local15, local06
289c0     1A 45 02 F6 | 	mov	local16, local08
289c4     16 47 02 F6 | 	mov	local17, local04
289c8     21 13 02 F6 | 	mov	arg01, local15
289cc     22 15 02 F6 | 	mov	arg02, local16
289d0     23 17 02 F6 | 	mov	arg03, local17
289d4     F2 48 02 F6 | 	mov	local18, objptr
289d8     1E E5 01 F6 | 	mov	objptr, local12
289dc     2D 40 62 FD | 	call	local14
289e0     24 E5 01 F6 | 	mov	objptr, local18
289e4     FD 4A 02 F6 | 	mov	local19, result1
289e8                 | LR__3812
289e8     00 4A 0E F2 | 	cmp	local19, #0 wz
289ec     8C 01 90 5D |  if_ne	jmp	#LR__3822
289f0     15 4D 02 F6 | 	mov	local20, local03
289f4     03 4C 0E F5 | 	and	local20, #3 wz
289f8     02 2E 46 55 |  if_ne	or	local05, #2
289fc     01 4C 0E F2 | 	cmp	local20, #1 wz
28a00     01 2E 46 55 |  if_ne	or	local05, #1
28a04     20 2A CE F7 | 	test	local03, #32 wz
28a08     C0 2E 46 55 |  if_ne	or	local05, #192
28a0c     08 30 06 F1 | 	add	local06, #8
28a10     18 2F 62 FC | 	wrlong	local05, local06
28a14     0C 30 06 F1 | 	add	local06, #12
28a18     18 4F 0A FB | 	rdlong	local21, local06 wz
28a1c     14 30 86 F1 | 	sub	local06, #20
28a20     18 00 90 5D |  if_ne	jmp	#LR__3813
28a24     04 36 06 F1 | 	add	local09, #4
28a28     1B 4F 02 FB | 	rdlong	local21, local09
28a2c     04 36 86 F1 | 	sub	local09, #4
28a30     14 30 06 F1 | 	add	local06, #20
28a34     18 4F 62 FC | 	wrlong	local21, local06
28a38     14 30 86 F1 | 	sub	local06, #20
28a3c                 | LR__3813
28a3c     18 30 06 F1 | 	add	local06, #24
28a40     18 4F 0A FB | 	rdlong	local21, local06 wz
28a44     18 30 86 F1 | 	sub	local06, #24
28a48     18 00 90 5D |  if_ne	jmp	#LR__3814
28a4c     08 36 06 F1 | 	add	local09, #8
28a50     1B 4F 02 FB | 	rdlong	local21, local09
28a54     08 36 86 F1 | 	sub	local09, #8
28a58     18 30 06 F1 | 	add	local06, #24
28a5c     18 4F 62 FC | 	wrlong	local21, local06
28a60     18 30 86 F1 | 	sub	local06, #24
28a64                 | LR__3814
28a64     24 30 06 F1 | 	add	local06, #36
28a68     18 4F 0A FB | 	rdlong	local21, local06 wz
28a6c     24 30 86 F1 | 	sub	local06, #36
28a70     1B 4F 02 AB |  if_e	rdlong	local21, local09
28a74     24 30 06 A1 |  if_e	add	local06, #36
28a78     18 4F 62 AC |  if_e	wrlong	local21, local06
28a7c     24 30 86 A1 |  if_e	sub	local06, #36
28a80     28 30 06 F1 | 	add	local06, #40
28a84     18 4F 0A FB | 	rdlong	local21, local06 wz
28a88     28 30 86 F1 | 	sub	local06, #40
28a8c     18 00 90 5D |  if_ne	jmp	#LR__3815
28a90     10 36 06 F1 | 	add	local09, #16
28a94     1B 4F 02 FB | 	rdlong	local21, local09
28a98     10 36 86 F1 | 	sub	local09, #16
28a9c     28 30 06 F1 | 	add	local06, #40
28aa0     18 4F 62 FC | 	wrlong	local21, local06
28aa4     28 30 86 F1 | 	sub	local06, #40
28aa8                 | LR__3815
28aa8     30 30 06 F1 | 	add	local06, #48
28aac     18 4F 0A FB | 	rdlong	local21, local06 wz
28ab0     30 30 86 F1 | 	sub	local06, #48
28ab4     18 00 90 5D |  if_ne	jmp	#LR__3816
28ab8     0C 36 06 F1 | 	add	local09, #12
28abc     1B 4F 02 FB | 	rdlong	local21, local09
28ac0     0C 36 86 F1 | 	sub	local09, #12
28ac4     30 30 06 F1 | 	add	local06, #48
28ac8     18 4F 62 FC | 	wrlong	local21, local06
28acc     30 30 86 F1 | 	sub	local06, #48
28ad0                 | LR__3816
28ad0     1C 30 06 F1 | 	add	local06, #28
28ad4     18 4F 0A FB | 	rdlong	local21, local06 wz
28ad8     1C 30 86 F1 | 	sub	local06, #28
28adc     1C 00 90 5D |  if_ne	jmp	#LR__3817
28ae0     01 32 06 F6 | 	mov	local07, #1
28ae4     F2 12 02 F6 | 	mov	arg01, objptr
28ae8     00 18 05 FF 
28aec     00 12 46 F5 | 	or	arg01, ##170917888
28af0     1C 30 06 F1 | 	add	local06, #28
28af4     18 13 62 FC | 	wrlong	arg01, local06
28af8     1C 30 86 F1 | 	sub	local06, #28
28afc                 | LR__3817
28afc     20 30 06 F1 | 	add	local06, #32
28b00     18 4F 0A FB | 	rdlong	local21, local06 wz
28b04     20 30 86 F1 | 	sub	local06, #32
28b08     1C 00 90 5D |  if_ne	jmp	#LR__3818
28b0c     01 32 06 F6 | 	mov	local07, #1
28b10     F2 12 02 F6 | 	mov	arg01, objptr
28b14     00 20 05 FF 
28b18     00 12 46 F5 | 	or	arg01, ##171966464
28b1c     20 30 06 F1 | 	add	local06, #32
28b20     18 13 62 FC | 	wrlong	arg01, local06
28b24     20 30 86 F1 | 	sub	local06, #32
28b28                 | LR__3818
28b28     2C 30 06 F1 | 	add	local06, #44
28b2c     18 4F 0A FB | 	rdlong	local21, local06 wz
28b30     2C 30 86 F1 | 	sub	local06, #44
28b34     44 00 90 5D |  if_ne	jmp	#LR__3821
28b38     14 36 06 F1 | 	add	local09, #20
28b3c     1B 4F 0A FB | 	rdlong	local21, local09 wz
28b40     14 36 86 F1 | 	sub	local09, #20
28b44     18 00 90 AD |  if_e	jmp	#LR__3819
28b48     14 36 06 F1 | 	add	local09, #20
28b4c     1B 4F 02 FB | 	rdlong	local21, local09
28b50     2C 30 06 F1 | 	add	local06, #44
28b54     18 4F 62 FC | 	wrlong	local21, local06
28b58     2C 30 86 F1 | 	sub	local06, #44
28b5c     1C 00 90 FD | 	jmp	#LR__3820
28b60                 | LR__3819
28b60     01 32 06 F6 | 	mov	local07, #1
28b64     F2 12 02 F6 | 	mov	arg01, objptr
28b68     00 28 05 FF 
28b6c     00 12 46 F5 | 	or	arg01, ##173015040
28b70     2C 30 06 F1 | 	add	local06, #44
28b74     18 13 62 FC | 	wrlong	arg01, local06
28b78     2C 30 86 F1 | 	sub	local06, #44
28b7c                 | LR__3820
28b7c                 | LR__3821
28b7c                 | LR__3822
28b7c     00 32 0E F2 | 	cmp	local07, #0 wz
28b80     18 13 02 56 |  if_ne	mov	arg01, local06
28b84     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
28b88     00 4A 0E F2 | 	cmp	local19, #0 wz
28b8c     00 12 06 A6 |  if_e	mov	arg01, #0
28b90     10 00 90 5D |  if_ne	jmp	#LR__3823
28b94     00 12 4E F2 | 	cmps	arg01, #0 wz
28b98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28b9c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28ba0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28ba4                 | LR__3823
28ba4     25 FB 01 F6 | 	mov	result1, local19
28ba8                 | LR__3824
28ba8     A7 F0 03 F6 | 	mov	ptra, fp
28bac     B2 00 A0 FD | 	call	#popregs_
28bb0                 | __system___openraw_ret
28bb0     2D 00 64 FD | 	ret
28bb4                 | 
28bb4                 | __system___closeraw
28bb4     05 4A 05 F6 | 	mov	COUNT_, #5
28bb8     A8 00 A0 FD | 	call	#pushregs_
28bbc     09 27 02 F6 | 	mov	local01, arg01
28bc0     00 28 06 F6 | 	mov	local02, #0
28bc4     08 26 06 F1 | 	add	local01, #8
28bc8     13 FB 09 FB | 	rdlong	result1, local01 wz
28bcc     08 26 86 F1 | 	sub	local01, #8
28bd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28bd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
28bd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28bdc     01 FA 65 A6 |  if_e	neg	result1, #1
28be0     A8 00 90 AD |  if_e	jmp	#LR__3832
28be4     2C 26 06 F1 | 	add	local01, #44
28be8     13 FB 09 FB | 	rdlong	result1, local01 wz
28bec     2C 26 86 F1 | 	sub	local01, #44
28bf0     38 00 90 AD |  if_e	jmp	#LR__3830
28bf4     2C 26 06 F1 | 	add	local01, #44
28bf8     13 2B 02 FB | 	rdlong	local03, local01
28bfc     15 2D 02 F6 | 	mov	local04, local03
28c00     2C 26 86 F1 | 	sub	local01, #44
28c04     13 2C 46 F7 | 	zerox	local04, #19
28c08     14 2A 46 F0 | 	shr	local03, #20
28c0c     02 2A 66 F0 | 	shl	local03, #2
28c10     ED 2A 02 F1 | 	add	local03, __methods__
28c14     15 2B 02 FB | 	rdlong	local03, local03
28c18     13 13 02 F6 | 	mov	arg01, local01
28c1c     F2 2E 02 F6 | 	mov	local05, objptr
28c20     16 E5 01 F6 | 	mov	objptr, local04
28c24     2D 2A 62 FD | 	call	local03
28c28     17 E5 01 F6 | 	mov	objptr, local05
28c2c                 | LR__3830
28c2c     24 26 06 F1 | 	add	local01, #36
28c30     13 2F 0A FB | 	rdlong	local05, local01 wz
28c34     24 26 86 F1 | 	sub	local01, #36
28c38     3C 00 90 AD |  if_e	jmp	#LR__3831
28c3c     24 26 06 F1 | 	add	local01, #36
28c40     13 2B 02 FB | 	rdlong	local03, local01
28c44     15 2D 02 F6 | 	mov	local04, local03
28c48     24 26 86 F1 | 	sub	local01, #36
28c4c     13 2C 46 F7 | 	zerox	local04, #19
28c50     14 2A 46 F0 | 	shr	local03, #20
28c54     02 2A 66 F0 | 	shl	local03, #2
28c58     ED 2A 02 F1 | 	add	local03, __methods__
28c5c     15 2B 02 FB | 	rdlong	local03, local03
28c60     13 13 02 F6 | 	mov	arg01, local01
28c64     F2 2E 02 F6 | 	mov	local05, objptr
28c68     16 E5 01 F6 | 	mov	objptr, local04
28c6c     2D 2A 62 FD | 	call	local03
28c70     17 E5 01 F6 | 	mov	objptr, local05
28c74     FD 28 02 F6 | 	mov	local02, result1
28c78                 | LR__3831
28c78     13 13 02 F6 | 	mov	arg01, local01
28c7c     00 14 06 F6 | 	mov	arg02, #0
28c80     34 16 06 F6 | 	mov	arg03, #52
28c84     98 00 A0 FD | 	call	#\builtin_bytefill_
28c88     14 FB 01 F6 | 	mov	result1, local02
28c8c                 | LR__3832
28c8c     A7 F0 03 F6 | 	mov	ptra, fp
28c90     B2 00 A0 FD | 	call	#popregs_
28c94                 | __system___closeraw_ret
28c94     2D 00 64 FD | 	ret
28c98                 | 
28c98                 | __system___vfs_open_sdcardx
28c98     0B 4A 05 F6 | 	mov	COUNT_, #11
28c9c     A8 00 A0 FD | 	call	#pushregs_
28ca0     09 2B 02 F6 | 	mov	local03, arg01
28ca4     0A 2D 02 F6 | 	mov	local04, arg02
28ca8     0B 2F 02 F6 | 	mov	local05, arg03
28cac     0C 31 02 F6 | 	mov	local06, arg04
28cb0     01 00 00 FF 
28cb4     24 12 06 F6 | 	mov	arg01, ##548
28cb8     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
28cbc     FD 32 02 F6 | 	mov	local07, result1
28cc0     01 00 00 FF 
28cc4     34 12 06 F6 | 	mov	arg01, ##564
28cc8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
28ccc     FD 34 02 F6 | 	mov	local08, result1
28cd0     15 19 02 F6 | 	mov	arg04, local03
28cd4     1F 18 C6 F0 | 	sar	arg04, #31
28cd8     15 17 02 F6 | 	mov	arg03, local03
28cdc     01 12 06 F6 | 	mov	arg01, #1
28ce0     00 14 06 F6 | 	mov	arg02, #0
28ce4     EC DB BF FD | 	call	#__system___int64_shl
28ce8     FD 26 02 F6 | 	mov	local01, result1
28cec     FE 36 02 F6 | 	mov	local09, result2
28cf0     16 19 02 F6 | 	mov	arg04, local04
28cf4     1F 18 C6 F0 | 	sar	arg04, #31
28cf8     16 17 02 F6 | 	mov	arg03, local04
28cfc     01 12 06 F6 | 	mov	arg01, #1
28d00     00 14 06 F6 | 	mov	arg02, #0
28d04     CC DB BF FD | 	call	#__system___int64_shl
28d08     FD 26 42 F5 | 	or	local01, result1
28d0c     FE 36 42 F5 | 	or	local09, result2
28d10     17 19 02 F6 | 	mov	arg04, local05
28d14     1F 18 C6 F0 | 	sar	arg04, #31
28d18     17 17 02 F6 | 	mov	arg03, local05
28d1c     01 12 06 F6 | 	mov	arg01, #1
28d20     00 14 06 F6 | 	mov	arg02, #0
28d24     AC DB BF FD | 	call	#__system___int64_shl
28d28     FD 26 42 F5 | 	or	local01, result1
28d2c     FE 36 42 F5 | 	or	local09, result2
28d30     18 19 02 F6 | 	mov	arg04, local06
28d34     1F 18 C6 F0 | 	sar	arg04, #31
28d38     18 17 02 F6 | 	mov	arg03, local06
28d3c     01 12 06 F6 | 	mov	arg01, #1
28d40     00 14 06 F6 | 	mov	arg02, #0
28d44     8C DB BF FD | 	call	#__system___int64_shl
28d48     1B 15 02 F6 | 	mov	arg02, local09
28d4c     FD 26 42 F5 | 	or	local01, result1
28d50     0A FD 41 F5 | 	or	result2, arg02
28d54     FE 28 02 F6 | 	mov	local02, result2
28d58     13 13 02 F6 | 	mov	arg01, local01
28d5c     14 15 02 F6 | 	mov	arg02, local02
28d60     A8 DB BF FD | 	call	#__system___usepins
28d64     00 FA 0D F2 | 	cmp	result1, #0 wz
28d68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28d6c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
28d70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28d74     00 FA 05 A6 |  if_e	mov	result1, #0
28d78     B4 00 90 AD |  if_e	jmp	#LR__3842
28d7c     13 39 02 F6 | 	mov	local10, local01
28d80     14 37 02 F6 | 	mov	local09, local02
28d84     01 00 00 FF 
28d88     08 32 06 F1 | 	add	local07, ##520
28d8c     19 39 62 FC | 	wrlong	local10, local07
28d90     04 32 06 F1 | 	add	local07, #4
28d94     19 37 62 FC | 	wrlong	local09, local07
28d98     01 00 00 FF 
28d9c     0C 32 86 F1 | 	sub	local07, ##524
28da0     18 1B 02 F6 | 	mov	arg05, local06
28da4     00 12 06 F6 | 	mov	arg01, #0
28da8     15 15 02 F6 | 	mov	arg02, local03
28dac     16 17 02 F6 | 	mov	arg03, local04
28db0     17 19 02 F6 | 	mov	arg04, local05
28db4     F2 38 02 F6 | 	mov	local10, objptr
28db8     19 E5 01 F6 | 	mov	objptr, local07
28dbc     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
28dc0     1C E5 01 F6 | 	mov	objptr, local10
28dc4     FD 3A 0A F6 | 	mov	local11, result1 wz
28dc8     24 00 90 5D |  if_ne	jmp	#LR__3840
28dcc     9D 01 00 FF 
28dd0     8A 14 06 F6 | 	mov	arg02, ##@LR__5257
28dd4     1A 13 02 F6 | 	mov	arg01, local08
28dd8     00 16 06 F6 | 	mov	arg03, #0
28ddc     F2 3A 02 F6 | 	mov	local11, objptr
28de0     19 E5 01 F6 | 	mov	objptr, local07
28de4     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
28de8     1D E5 01 F6 | 	mov	objptr, local11
28dec     FD 3A 02 F6 | 	mov	local11, result1
28df0                 | LR__3840
28df0     00 3A 0E F2 | 	cmp	local11, #0 wz
28df4     24 00 90 AD |  if_e	jmp	#LR__3841
28df8     13 13 02 F6 | 	mov	arg01, local01
28dfc     14 15 02 F6 | 	mov	arg02, local02
28e00     5C DB BF FD | 	call	#__system___freepins
28e04     1D 13 6A F6 | 	neg	arg01, local11 wz
28e08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28e0c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28e10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28e14     00 FA 05 F6 | 	mov	result1, #0
28e18     14 00 90 FD | 	jmp	#LR__3842
28e1c                 | LR__3841
28e1c     19 13 02 F6 | 	mov	arg01, local07
28e20     F2 3A 02 F6 | 	mov	local11, objptr
28e24     19 E5 01 F6 | 	mov	objptr, local07
28e28     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
28e2c     1D E5 01 F6 | 	mov	objptr, local11
28e30                 | LR__3842
28e30     A7 F0 03 F6 | 	mov	ptra, fp
28e34     B2 00 A0 FD | 	call	#popregs_
28e38                 | __system___vfs_open_sdcardx_ret
28e38     2D 00 64 FD | 	ret
28e3c                 | 
28e3c                 | __system____default_getc
28e3c     03 4A 05 F6 | 	mov	COUNT_, #3
28e40     A8 00 A0 FD | 	call	#pushregs_
28e44     09 27 02 F6 | 	mov	local01, arg01
28e48     13 29 02 FB | 	rdlong	local02, local01
28e4c     08 28 06 F1 | 	add	local02, #8
28e50     14 2B 02 FB | 	rdlong	local03, local02
28e54     02 2A CE F7 | 	test	local03, #2 wz
28e58     13 13 02 56 |  if_ne	mov	arg01, local01
28e5c     00 01 B0 5D |  if_ne	call	#__system____default_flush
28e60     14 2B 02 FB | 	rdlong	local03, local02
28e64     01 2A 46 F5 | 	or	local03, #1
28e68     14 2B 62 FC | 	wrlong	local03, local02
28e6c     08 28 86 F1 | 	sub	local02, #8
28e70     14 2B 0A FB | 	rdlong	local03, local02 wz
28e74     0C 00 90 5D |  if_ne	jmp	#LR__3850
28e78     13 13 02 F6 | 	mov	arg01, local01
28e7c     68 18 B0 FD | 	call	#__system____default_filbuf
28e80     FD 2A 02 F6 | 	mov	local03, result1
28e84                 | LR__3850
28e84     01 2A 56 F2 | 	cmps	local03, #1 wc
28e88     01 FA 65 C6 |  if_b	neg	result1, #1
28e8c     1C 00 90 CD |  if_b	jmp	#LR__3851
28e90     01 2A 86 F1 | 	sub	local03, #1
28e94     14 2B 62 FC | 	wrlong	local03, local02
28e98     04 28 06 F1 | 	add	local02, #4
28e9c     14 2B 02 FB | 	rdlong	local03, local02
28ea0     15 FB C1 FA | 	rdbyte	result1, local03
28ea4     01 2A 06 F1 | 	add	local03, #1
28ea8     14 2B 62 FC | 	wrlong	local03, local02
28eac                 | LR__3851
28eac     A7 F0 03 F6 | 	mov	ptra, fp
28eb0     B2 00 A0 FD | 	call	#popregs_
28eb4                 | __system____default_getc_ret
28eb4     2D 00 64 FD | 	ret
28eb8                 | 
28eb8                 | __system____default_putc
28eb8     06 4A 05 F6 | 	mov	COUNT_, #6
28ebc     A8 00 A0 FD | 	call	#pushregs_
28ec0     09 27 02 F6 | 	mov	local01, arg01
28ec4     0A 29 02 F6 | 	mov	local02, arg02
28ec8     14 2B 02 FB | 	rdlong	local03, local02
28ecc     08 2A 06 F1 | 	add	local03, #8
28ed0     15 FB 01 FB | 	rdlong	result1, local03
28ed4     01 FA CD F7 | 	test	result1, #1 wz
28ed8     14 13 02 56 |  if_ne	mov	arg01, local02
28edc     80 00 B0 5D |  if_ne	call	#__system____default_flush
28ee0     15 2D 02 FB | 	rdlong	local04, local03
28ee4     02 2C 46 F5 | 	or	local04, #2
28ee8     15 2D 62 FC | 	wrlong	local04, local03
28eec     08 2A 86 F1 | 	sub	local03, #8
28ef0     15 2F 02 FB | 	rdlong	local05, local03
28ef4     10 2A 06 F1 | 	add	local03, #16
28ef8     15 15 02 FB | 	rdlong	arg02, local03
28efc     10 2A 86 F1 | 	sub	local03, #16
28f00     17 FB 01 F6 | 	mov	result1, local05
28f04     0A FB 01 F1 | 	add	result1, arg02
28f08     FD 26 42 FC | 	wrbyte	local01, result1
28f0c     13 27 E2 F8 | 	getbyte	local01, local01, #0
28f10     01 2E 06 F1 | 	add	local05, #1
28f14     15 2F 62 FC | 	wrlong	local05, local03
28f18     06 28 06 F1 | 	add	local02, #6
28f1c     14 31 EA FA | 	rdword	local06, local02 wz
28f20     06 28 86 F1 | 	sub	local02, #6
28f24     0C 2A 06 51 |  if_ne	add	local03, #12
28f28     15 2D 02 5B |  if_ne	rdlong	local04, local03
28f2c     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
28f30     0C 00 90 AD |  if_e	jmp	#LR__3860
28f34     0A 26 0E F2 | 	cmp	local01, #10 wz
28f38     01 30 0E A2 |  if_e	cmp	local06, #1 wz
28f3c     10 00 90 5D |  if_ne	jmp	#LR__3861
28f40                 | LR__3860
28f40     14 13 02 F6 | 	mov	arg01, local02
28f44     18 00 B0 FD | 	call	#__system____default_flush
28f48     00 FA 0D F2 | 	cmp	result1, #0 wz
28f4c     01 26 66 56 |  if_ne	neg	local01, #1
28f50                 | LR__3861
28f50     13 FB 01 F6 | 	mov	result1, local01
28f54     A7 F0 03 F6 | 	mov	ptra, fp
28f58     B2 00 A0 FD | 	call	#popregs_
28f5c                 | __system____default_putc_ret
28f5c     2D 00 64 FD | 	ret
28f60                 | 
28f60                 | __system____default_flush
28f60     06 4A 05 F6 | 	mov	COUNT_, #6
28f64     A8 00 A0 FD | 	call	#pushregs_
28f68     09 27 02 F6 | 	mov	local01, arg01
28f6c     13 29 02 FB | 	rdlong	local02, local01
28f70     14 2B 02 FB | 	rdlong	local03, local02
28f74     08 28 06 F1 | 	add	local02, #8
28f78     14 FB 01 FB | 	rdlong	result1, local02
28f7c     08 28 86 F1 | 	sub	local02, #8
28f80     02 FA CD F7 | 	test	result1, #2 wz
28f84     D0 00 90 AD |  if_e	jmp	#LR__3872
28f88     01 2A 56 F2 | 	cmps	local03, #1 wc
28f8c     20 01 90 CD |  if_b	jmp	#LR__3874
28f90     08 26 06 F1 | 	add	local01, #8
28f94     13 FB 01 FB | 	rdlong	result1, local01
28f98     08 26 86 F1 | 	sub	local01, #8
28f9c     40 FA CD F7 | 	test	result1, #64 wz
28fa0     68 00 90 AD |  if_e	jmp	#LR__3871
28fa4     08 26 06 F1 | 	add	local01, #8
28fa8     13 17 02 FB | 	rdlong	arg03, local01
28fac     08 26 86 F1 | 	sub	local01, #8
28fb0     80 16 CE F7 | 	test	arg03, #128 wz
28fb4     54 00 90 AD |  if_e	jmp	#LR__3870
28fb8     30 26 06 F1 | 	add	local01, #48
28fbc     13 2D 02 FB | 	rdlong	local04, local01
28fc0     16 2F 02 F6 | 	mov	local05, local04
28fc4     30 26 86 F1 | 	sub	local01, #48
28fc8     13 2E 46 F7 | 	zerox	local05, #19
28fcc     14 2C 46 F0 | 	shr	local04, #20
28fd0     02 2C 66 F0 | 	shl	local04, #2
28fd4     ED 2C 02 F1 | 	add	local04, __methods__
28fd8     16 2D 02 FB | 	rdlong	local04, local04
28fdc     13 13 02 F6 | 	mov	arg01, local01
28fe0     00 14 06 F6 | 	mov	arg02, #0
28fe4     02 16 06 F6 | 	mov	arg03, #2
28fe8     F2 30 02 F6 | 	mov	local06, objptr
28fec     17 E5 01 F6 | 	mov	objptr, local05
28ff0     2D 2C 62 FD | 	call	local04
28ff4     18 E5 01 F6 | 	mov	objptr, local06
28ff8     08 26 06 F1 | 	add	local01, #8
28ffc     13 31 02 FB | 	rdlong	local06, local01
29000     80 30 26 F5 | 	andn	local06, #128
29004     13 31 62 FC | 	wrlong	local06, local01
29008     08 26 86 F1 | 	sub	local01, #8
2900c                 | LR__3870
2900c                 | LR__3871
2900c     18 26 06 F1 | 	add	local01, #24
29010     13 2D 02 FB | 	rdlong	local04, local01
29014     16 2F 02 F6 | 	mov	local05, local04
29018     18 26 86 F1 | 	sub	local01, #24
2901c     13 2E 46 F7 | 	zerox	local05, #19
29020     14 2C 46 F0 | 	shr	local04, #20
29024     02 2C 66 F0 | 	shl	local04, #2
29028     ED 2C 02 F1 | 	add	local04, __methods__
2902c     16 2D 02 FB | 	rdlong	local04, local04
29030     10 28 06 F1 | 	add	local02, #16
29034     14 15 02 FB | 	rdlong	arg02, local02
29038     10 28 86 F1 | 	sub	local02, #16
2903c     13 13 02 F6 | 	mov	arg01, local01
29040     15 17 02 F6 | 	mov	arg03, local03
29044     F2 30 02 F6 | 	mov	local06, objptr
29048     17 E5 01 F6 | 	mov	objptr, local05
2904c     2D 2C 62 FD | 	call	local04
29050     18 E5 01 F6 | 	mov	objptr, local06
29054     58 00 90 FD | 	jmp	#LR__3874
29058                 | LR__3872
29058     08 28 06 F1 | 	add	local02, #8
2905c     14 31 02 FB | 	rdlong	local06, local02
29060     08 28 86 F1 | 	sub	local02, #8
29064     01 30 CE F7 | 	test	local06, #1 wz
29068     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2906c     40 00 90 AD |  if_e	jmp	#LR__3873
29070     30 26 06 F1 | 	add	local01, #48
29074     13 2D 02 FB | 	rdlong	local04, local01
29078     16 2F 02 F6 | 	mov	local05, local04
2907c     30 26 86 F1 | 	sub	local01, #48
29080     13 2E 46 F7 | 	zerox	local05, #19
29084     14 2C 46 F0 | 	shr	local04, #20
29088     02 2C 66 F0 | 	shl	local04, #2
2908c     ED 2C 02 F1 | 	add	local04, __methods__
29090     16 2D 02 FB | 	rdlong	local04, local04
29094     13 13 02 F6 | 	mov	arg01, local01
29098     15 15 62 F6 | 	neg	arg02, local03
2909c     01 16 06 F6 | 	mov	arg03, #1
290a0     F2 30 02 F6 | 	mov	local06, objptr
290a4     17 E5 01 F6 | 	mov	objptr, local05
290a8     2D 2C 62 FD | 	call	local04
290ac     18 E5 01 F6 | 	mov	objptr, local06
290b0                 | LR__3873
290b0                 | LR__3874
290b0     14 01 68 FC | 	wrlong	#0, local02
290b4     04 28 06 F1 | 	add	local02, #4
290b8     14 01 68 FC | 	wrlong	#0, local02
290bc     04 28 06 F1 | 	add	local02, #4
290c0     14 01 68 FC | 	wrlong	#0, local02
290c4     00 FA 05 F6 | 	mov	result1, #0
290c8     A7 F0 03 F6 | 	mov	ptra, fp
290cc     B2 00 A0 FD | 	call	#popregs_
290d0                 | __system____default_flush_ret
290d0     2D 00 64 FD | 	ret
290d4                 | 
290d4                 | __system____default_buffer_init
290d4     02 4A 05 F6 | 	mov	COUNT_, #2
290d8     A8 00 A0 FD | 	call	#pushregs_
290dc     09 27 02 F6 | 	mov	local01, arg01
290e0     13 29 02 FB | 	rdlong	local02, local01
290e4     13 13 02 F6 | 	mov	arg01, local01
290e8     34 03 B0 FD | 	call	#__system___isatty
290ec     00 FA 0D F2 | 	cmp	result1, #0 wz
290f0     06 26 06 51 |  if_ne	add	local01, #6
290f4     13 0B 58 5C |  if_ne	wrword	#5, local01
290f8     06 26 06 A1 |  if_e	add	local01, #6
290fc     13 0D 58 AC |  if_e	wrword	#6, local01
29100     14 28 06 F1 | 	add	local02, #20
29104     14 27 02 F6 | 	mov	local01, local02
29108     04 28 86 F1 | 	sub	local02, #4
2910c     14 27 62 FC | 	wrlong	local01, local02
29110     04 28 86 F1 | 	sub	local02, #4
29114     02 00 80 FF 
29118     14 01 68 FC | 	wrlong	##1024, local02
2911c     00 FA 05 F6 | 	mov	result1, #0
29120     A7 F0 03 F6 | 	mov	ptra, fp
29124     B2 00 A0 FD | 	call	#popregs_
29128                 | __system____default_buffer_init_ret
29128     2D 00 64 FD | 	ret
2912c                 | 
2912c                 | __system__stat
2912c     04 4A 05 F6 | 	mov	COUNT_, #4
29130     A8 00 A0 FD | 	call	#pushregs_
29134     0A 27 02 F6 | 	mov	local01, arg02
29138     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2913c     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
29140     09 15 02 F6 | 	mov	arg02, arg01
29144     14 13 02 F6 | 	mov	arg01, local02
29148     00 16 06 F6 | 	mov	arg03, #0
2914c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29150     58 B5 BF FD | 	call	#__system____getvfsforfile
29154     FD 2A 0A F6 | 	mov	local03, result1 wz
29158     10 00 90 AD |  if_e	jmp	#LR__3880
2915c     34 2A 06 F1 | 	add	local03, #52
29160     15 17 0A FB | 	rdlong	arg03, local03 wz
29164     34 2A 86 F1 | 	sub	local03, #52
29168     14 00 90 5D |  if_ne	jmp	#LR__3881
2916c                 | LR__3880
2916c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29170     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29174     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29178     01 FA 65 F6 | 	neg	result1, #1
2917c     68 00 90 FD | 	jmp	#LR__3882
29180                 | LR__3881
29180     13 13 02 F6 | 	mov	arg01, local01
29184     00 14 06 F6 | 	mov	arg02, #0
29188     30 16 06 F6 | 	mov	arg03, #48
2918c     09 2D 02 F6 | 	mov	local04, arg01
29190     98 00 A0 FD | 	call	#\builtin_bytefill_
29194     16 FB 01 F6 | 	mov	result1, local04
29198     14 13 CA FA | 	rdbyte	arg01, local02 wz
2919c     08 26 06 A1 |  if_e	add	local01, #8
291a0     08 00 80 AF 
291a4     13 FF 6B AC |  if_e	wrlong	##4607, local01
291a8     00 FA 05 A6 |  if_e	mov	result1, #0
291ac     38 00 90 AD |  if_e	jmp	#LR__3882
291b0     34 2A 06 F1 | 	add	local03, #52
291b4     15 2B 02 FB | 	rdlong	local03, local03
291b8     15 2D 02 F6 | 	mov	local04, local03
291bc     13 2A 46 F7 | 	zerox	local03, #19
291c0     14 2C 46 F0 | 	shr	local04, #20
291c4     02 2C 66 F0 | 	shl	local04, #2
291c8     ED 2C 02 F1 | 	add	local04, __methods__
291cc     16 2D 02 FB | 	rdlong	local04, local04
291d0     14 13 02 F6 | 	mov	arg01, local02
291d4     13 15 02 F6 | 	mov	arg02, local01
291d8     F2 28 02 F6 | 	mov	local02, objptr
291dc     15 E5 01 F6 | 	mov	objptr, local03
291e0     2D 2C 62 FD | 	call	local04
291e4     14 E5 01 F6 | 	mov	objptr, local02
291e8                 | LR__3882
291e8     A7 F0 03 F6 | 	mov	ptra, fp
291ec     B2 00 A0 FD | 	call	#popregs_
291f0                 | __system__stat_ret
291f0     2D 00 64 FD | 	ret
291f4                 | 
291f4                 | __system__write
291f4     0A 12 16 F2 | 	cmp	arg01, #10 wc
291f8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
291fc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29200     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
29204     01 FA 65 36 |  if_ae	neg	result1, #1
29208     20 00 90 3D |  if_ae	jmp	#LR__3890
2920c     34 12 06 FD | 	qmul	arg01, #52
29210     02 00 00 FF 
29214     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
29218     18 12 62 FD | 	getqx	arg01
2921c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29220     02 00 00 FF 
29224     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
29228     0C 10 B0 FD | 	call	#__system___vfswrite
2922c                 | LR__3890
2922c                 | __system__write_ret
2922c     2D 00 64 FD | 	ret
29230                 | 
29230                 | __system__read
29230     0A 12 16 F2 | 	cmp	arg01, #10 wc
29234     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
29238     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2923c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
29240     01 FA 65 36 |  if_ae	neg	result1, #1
29244     20 00 90 3D |  if_ae	jmp	#LR__3900
29248     34 12 06 FD | 	qmul	arg01, #52
2924c     02 00 00 FF 
29250     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
29254     18 12 62 FD | 	getqx	arg01
29258     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2925c     02 00 00 FF 
29260     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
29264     98 11 B0 FD | 	call	#__system___vfsread
29268                 | LR__3900
29268                 | __system__read_ret
29268     2D 00 64 FD | 	ret
2926c                 | 
2926c                 | __system__close
2926c     0A 12 16 F2 | 	cmp	arg01, #10 wc
29270     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
29274     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29278     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2927c     01 FA 65 36 |  if_ae	neg	result1, #1
29280     20 00 90 3D |  if_ae	jmp	#LR__3910
29284     34 12 06 FD | 	qmul	arg01, #52
29288     02 00 00 FF 
2928c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
29290     18 12 62 FD | 	getqx	arg01
29294     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29298     02 00 00 FF 
2929c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
292a0     10 F9 BF FD | 	call	#__system___closeraw
292a4                 | LR__3910
292a4                 | __system__close_ret
292a4     2D 00 64 FD | 	ret
292a8                 | 
292a8                 | __system__lseek
292a8     06 4A 05 F6 | 	mov	COUNT_, #6
292ac     A8 00 A0 FD | 	call	#pushregs_
292b0     0A 12 16 F2 | 	cmp	arg01, #10 wc
292b4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
292b8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
292bc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
292c0     01 FA 65 36 |  if_ae	neg	result1, #1
292c4     C4 00 90 3D |  if_ae	jmp	#LR__3921
292c8     34 12 06 FD | 	qmul	arg01, #52
292cc     02 00 00 FF 
292d0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
292d4     18 26 62 FD | 	getqx	local01
292d8     F3 26 02 F1 | 	add	local01, ptr___system__dat__
292dc     30 26 06 F1 | 	add	local01, #48
292e0     13 13 0A FB | 	rdlong	arg01, local01 wz
292e4     30 26 86 F1 | 	sub	local01, #48
292e8     02 00 00 FF 
292ec     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
292f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
292f4     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
292f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
292fc     01 FA 65 A6 |  if_e	neg	result1, #1
29300     88 00 90 AD |  if_e	jmp	#LR__3921
29304     08 26 06 F1 | 	add	local01, #8
29308     13 29 02 FB | 	rdlong	local02, local01
2930c     08 26 86 F1 | 	sub	local01, #8
29310     40 28 CE F7 | 	test	local02, #64 wz
29314     08 26 06 51 |  if_ne	add	local01, #8
29318     13 29 02 5B |  if_ne	rdlong	local02, local01
2931c     80 28 46 55 |  if_ne	or	local02, #128
29320     13 29 62 5C |  if_ne	wrlong	local02, local01
29324     08 26 86 51 |  if_ne	sub	local01, #8
29328     30 26 06 F1 | 	add	local01, #48
2932c     13 2B 02 FB | 	rdlong	local03, local01
29330     15 2D 02 F6 | 	mov	local04, local03
29334     30 26 86 F1 | 	sub	local01, #48
29338     13 2C 46 F7 | 	zerox	local04, #19
2933c     14 2A 46 F0 | 	shr	local03, #20
29340     02 2A 66 F0 | 	shl	local03, #2
29344     ED 2A 02 F1 | 	add	local03, __methods__
29348     15 2B 02 FB | 	rdlong	local03, local03
2934c     13 13 02 F6 | 	mov	arg01, local01
29350     F2 2E 02 F6 | 	mov	local05, objptr
29354     16 E5 01 F6 | 	mov	objptr, local04
29358     2D 2A 62 FD | 	call	local03
2935c     17 E5 01 F6 | 	mov	objptr, local05
29360     FD 30 02 F6 | 	mov	local06, result1
29364     00 30 56 F2 | 	cmps	local06, #0 wc
29368     1C 00 90 3D |  if_ae	jmp	#LR__3920
2936c     18 13 6A F6 | 	neg	arg01, local06 wz
29370     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29374     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29378     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2937c     01 FA 65 56 |  if_ne	neg	result1, #1
29380     00 FA 05 A6 |  if_e	mov	result1, #0
29384     04 00 90 FD | 	jmp	#LR__3921
29388                 | LR__3920
29388     18 FB 01 F6 | 	mov	result1, local06
2938c                 | LR__3921
2938c     A7 F0 03 F6 | 	mov	ptra, fp
29390     B2 00 A0 FD | 	call	#popregs_
29394                 | __system__lseek_ret
29394     2D 00 64 FD | 	ret
29398                 | 
29398                 | __system___ioctl
29398     03 4A 05 F6 | 	mov	COUNT_, #3
2939c     A8 00 A0 FD | 	call	#pushregs_
293a0     00 12 4E F2 | 	cmps	arg01, #0 wz
293a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
293a8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
293ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
293b0     01 FA 65 A6 |  if_e	neg	result1, #1
293b4     5C 00 90 AD |  if_e	jmp	#LR__3931
293b8     28 12 06 F1 | 	add	arg01, #40
293bc     09 27 02 FB | 	rdlong	local01, arg01
293c0     13 29 02 F6 | 	mov	local02, local01
293c4     28 12 86 F1 | 	sub	arg01, #40
293c8     13 28 46 F7 | 	zerox	local02, #19
293cc     14 26 46 F0 | 	shr	local01, #20
293d0     02 26 66 F0 | 	shl	local01, #2
293d4     ED 26 02 F1 | 	add	local01, __methods__
293d8     13 27 02 FB | 	rdlong	local01, local01
293dc     F2 2A 02 F6 | 	mov	local03, objptr
293e0     14 E5 01 F6 | 	mov	objptr, local02
293e4     2D 26 62 FD | 	call	local01
293e8     15 E5 01 F6 | 	mov	objptr, local03
293ec     FD 12 0A F6 | 	mov	arg01, result1 wz
293f0     1C 00 90 AD |  if_e	jmp	#LR__3930
293f4     00 12 4E F2 | 	cmps	arg01, #0 wz
293f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
293fc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29400     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29404     01 FA 65 56 |  if_ne	neg	result1, #1
29408     00 FA 05 A6 |  if_e	mov	result1, #0
2940c     04 00 90 FD | 	jmp	#LR__3931
29410                 | LR__3930
29410     00 FA 05 F6 | 	mov	result1, #0
29414                 | LR__3931
29414     A7 F0 03 F6 | 	mov	ptra, fp
29418     B2 00 A0 FD | 	call	#popregs_
2941c                 | __system___ioctl_ret
2941c     2D 00 64 FD | 	ret
29420                 | 
29420                 | __system___isatty
29420     00 4A 05 F6 | 	mov	COUNT_, #0
29424     A8 00 A0 FD | 	call	#pushregs_
29428     0C F0 07 F1 | 	add	ptra, #12
2942c     04 4E 05 F1 | 	add	fp, #4
29430     A7 12 62 FC | 	wrlong	arg01, fp
29434     04 4E 05 F1 | 	add	fp, #4
29438     A7 16 02 F6 | 	mov	arg03, fp
2943c     08 4E 85 F1 | 	sub	fp, #8
29440     00 15 06 F6 | 	mov	arg02, #256
29444     50 FF BF FD | 	call	#__system___ioctl
29448     00 FA 0D F2 | 	cmp	result1, #0 wz
2944c     01 FA 05 A6 |  if_e	mov	result1, #1
29450     00 FA 05 56 |  if_ne	mov	result1, #0
29454     A7 F0 03 F6 | 	mov	ptra, fp
29458     B2 00 A0 FD | 	call	#popregs_
2945c                 | __system___isatty_ret
2945c     2D 00 64 FD | 	ret
29460                 | 
29460                 | __system____getftab
29460     0A 12 16 F2 | 	cmp	arg01, #10 wc
29464     34 12 06 CD |  if_b	qmul	arg01, #52
29468     00 FA 05 36 |  if_ae	mov	result1, #0
2946c     02 00 00 CF 
29470     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
29474     18 FA 61 CD |  if_b	getqx	result1
29478     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2947c     02 00 00 CF 
29480     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
29484                 | __system____getftab_ret
29484     2D 00 64 FD | 	ret
29488                 | 
29488                 | __system__strncpy
29488     09 01 02 F6 | 	mov	_var01, arg01
2948c                 | LR__3940
2948c     01 16 86 F1 | 	sub	arg03, #1
29490     00 16 56 F2 | 	cmps	arg03, #0 wc
29494     18 00 90 CD |  if_b	jmp	#LR__3941
29498     0A FB C1 FA | 	rdbyte	result1, arg02
2949c     00 FB 41 FC | 	wrbyte	result1, _var01
294a0     01 14 06 F1 | 	add	arg02, #1
294a4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
294a8     01 00 06 F1 | 	add	_var01, #1
294ac     DC FF 9F 5D |  if_ne	jmp	#LR__3940
294b0                 | LR__3941
294b0     97 0C 48 FB | 	callpa	#(@LR__3943-@LR__3942)>>2,fcache_load_ptr_
294b4                 | LR__3942
294b4     01 16 86 F1 | 	sub	arg03, #1
294b8     00 16 56 F2 | 	cmps	arg03, #0 wc
294bc     00 03 02 36 |  if_ae	mov	_var02, _var01
294c0     01 00 06 31 |  if_ae	add	_var01, #1
294c4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
294c8     E8 FF 9F 3D |  if_ae	jmp	#LR__3942
294cc                 | LR__3943
294cc     09 FB 01 F6 | 	mov	result1, arg01
294d0                 | __system__strncpy_ret
294d0     2D 00 64 FD | 	ret
294d4                 | 
294d4                 | __system__strncat
294d4     00 14 4E F2 | 	cmps	arg02, #0 wz
294d8     50 00 90 AD |  if_e	jmp	#LR__3954
294dc     01 16 16 F2 | 	cmp	arg03, #1 wc
294e0     48 00 90 CD |  if_b	jmp	#LR__3954
294e4     09 01 02 F6 | 	mov	_var01, arg01
294e8     97 1E 48 FB | 	callpa	#(@LR__3952-@LR__3950)>>2,fcache_load_ptr_
294ec                 | LR__3950
294ec     00 FB C9 FA | 	rdbyte	result1, _var01 wz
294f0     01 00 06 51 |  if_ne	add	_var01, #1
294f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3950
294f8     0B 03 02 F6 | 	mov	_var02, arg03
294fc                 | LR__3951
294fc     0A 05 C2 FA | 	rdbyte	_var03, arg02
29500     02 07 02 F6 | 	mov	_var04, _var03
29504     07 06 4E F7 | 	zerox	_var04, #7 wz
29508     01 14 06 F1 | 	add	arg02, #1
2950c     18 00 90 AD |  if_e	jmp	#LR__3953
29510     01 02 86 F1 | 	sub	_var02, #1
29514     00 02 56 F2 | 	cmps	_var02, #0 wc
29518     00 07 02 36 |  if_ae	mov	_var04, _var01
2951c     01 00 06 31 |  if_ae	add	_var01, #1
29520     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
29524     D4 FF 9F 3D |  if_ae	jmp	#LR__3951
29528                 | LR__3952
29528                 | LR__3953
29528     00 01 48 FC | 	wrbyte	#0, _var01
2952c                 | LR__3954
2952c     09 FB 01 F6 | 	mov	result1, arg01
29530                 | __system__strncat_ret
29530     2D 00 64 FD | 	ret
29534                 | 
29534                 | __system__strncmp
29534     09 01 0A F6 | 	mov	_var01, arg01 wz
29538     14 00 90 5D |  if_ne	jmp	#LR__3960
2953c     00 14 0E F2 | 	cmp	arg02, #0 wz
29540     01 02 66 56 |  if_ne	neg	_var02, #1
29544     00 02 06 A6 |  if_e	mov	_var02, #0
29548     01 FB 01 F6 | 	mov	result1, _var02
2954c     74 00 90 FD | 	jmp	#__system__strncmp_ret
29550                 | LR__3960
29550     00 14 0E F2 | 	cmp	arg02, #0 wz
29554     01 FA 05 A6 |  if_e	mov	result1, #1
29558     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2955c     0B 05 02 F6 | 	mov	_var03, arg03
29560     97 16 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
29564                 | LR__3961
29564     00 07 C2 FA | 	rdbyte	_var04, _var01
29568     0A 09 02 F6 | 	mov	_var05, arg02
2956c     04 0B C2 FA | 	rdbyte	_var06, _var05
29570     01 04 86 F1 | 	sub	_var03, #1
29574     00 04 56 F2 | 	cmps	_var03, #0 wc
29578     01 00 06 F1 | 	add	_var01, #1
2957c     01 14 06 F1 | 	add	arg02, #1
29580     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
29584     08 00 90 2D |  if_nc_and_z	jmp	#LR__3963
29588     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2958c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3961
29590                 | LR__3962
29590                 | LR__3963
29590     00 04 56 F2 | 	cmps	_var03, #0 wc
29594     00 FA 05 C6 |  if_b	mov	result1, #0
29598     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2959c     05 07 0A F2 | 	cmp	_var04, _var06 wz
295a0     00 FA 05 A6 |  if_e	mov	result1, #0
295a4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
295a8     00 06 0E F2 | 	cmp	_var04, #0 wz
295ac     01 FA 65 A6 |  if_e	neg	result1, #1
295b0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
295b4     00 0A 0E F2 | 	cmp	_var06, #0 wz
295b8     01 FA 05 A6 |  if_e	mov	result1, #1
295bc     03 FB 01 56 |  if_ne	mov	result1, _var04
295c0     05 FB 81 51 |  if_ne	sub	result1, _var06
295c4                 | __system__strncmp_ret
295c4     2D 00 64 FD | 	ret
295c8                 | 
295c8                 | __system____root_opendir
295c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
295cc     04 12 06 F1 | 	add	arg01, #4
295d0     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
295d4     00 FA 05 F6 | 	mov	result1, #0
295d8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
295dc                 | __system____root_opendir_ret
295dc     2D 00 64 FD | 	ret
295e0                 | 
295e0                 | __system____root_readdir
295e0     03 4A 05 F6 | 	mov	COUNT_, #3
295e4     A8 00 A0 FD | 	call	#pushregs_
295e8     09 27 02 F6 | 	mov	local01, arg01
295ec     0A 29 02 F6 | 	mov	local02, arg02
295f0     04 26 06 F1 | 	add	local01, #4
295f4     13 2B 02 FB | 	rdlong	local03, local01
295f8     04 26 86 F1 | 	sub	local01, #4
295fc                 | LR__3970
295fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
29600     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
29604     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
29608     01 FA 65 A6 |  if_e	neg	result1, #1
2960c     48 00 90 AD |  if_e	jmp	#LR__3971
29610     15 17 0A FB | 	rdlong	arg03, local03 wz
29614     04 2A 06 A1 |  if_e	add	local03, #4
29618     E0 FF 9F AD |  if_e	jmp	#LR__3970
2961c     15 15 02 FB | 	rdlong	arg02, local03
29620     01 14 06 F1 | 	add	arg02, #1
29624     14 13 02 F6 | 	mov	arg01, local02
29628     40 16 06 F6 | 	mov	arg03, #64
2962c     58 FE BF FD | 	call	#__system__strncpy
29630     50 28 06 F1 | 	add	local02, #80
29634     14 03 48 FC | 	wrbyte	#1, local02
29638     08 28 86 F1 | 	sub	local02, #8
2963c     14 01 68 FC | 	wrlong	#0, local02
29640     04 28 06 F1 | 	add	local02, #4
29644     14 01 68 FC | 	wrlong	#0, local02
29648     04 2A 06 F1 | 	add	local03, #4
2964c     04 26 06 F1 | 	add	local01, #4
29650     13 2B 62 FC | 	wrlong	local03, local01
29654     00 FA 05 F6 | 	mov	result1, #0
29658                 | LR__3971
29658     A7 F0 03 F6 | 	mov	ptra, fp
2965c     B2 00 A0 FD | 	call	#popregs_
29660                 | __system____root_readdir_ret
29660     2D 00 64 FD | 	ret
29664                 | 
29664                 | __system____root_closedir
29664     00 FA 05 F6 | 	mov	result1, #0
29668                 | __system____root_closedir_ret
29668     2D 00 64 FD | 	ret
2966c                 | 
2966c                 | __system____root_stat
2966c     0A 01 02 F6 | 	mov	_var01, arg02
29670     00 13 02 F6 | 	mov	arg01, _var01
29674     00 14 06 F6 | 	mov	arg02, #0
29678     30 16 06 F6 | 	mov	arg03, #48
2967c     98 00 A0 FD | 	call	#\builtin_bytefill_
29680     08 00 06 F1 | 	add	_var01, #8
29684     08 00 80 FF 
29688     00 FF 6B FC | 	wrlong	##4607, _var01
2968c     00 FA 05 F6 | 	mov	result1, #0
29690                 | __system____root_stat_ret
29690     2D 00 64 FD | 	ret
29694                 | 
29694                 | __system___normalizeName
29694     00 00 06 F6 | 	mov	_var01, #0
29698     09 03 02 F6 | 	mov	_var02, arg01
2969c     01 05 02 F6 | 	mov	_var03, _var02
296a0                 | LR__3980
296a0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
296a4     5C 01 90 AD |  if_e	jmp	#LR__3999
296a8     00 00 0E F2 | 	cmp	_var01, #0 wz
296ac     02 07 02 56 |  if_ne	mov	_var04, _var03
296b0     01 04 06 51 |  if_ne	add	_var03, #1
296b4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
296b8     00 00 06 56 |  if_ne	mov	_var01, #0
296bc     01 07 C2 FA | 	rdbyte	_var04, _var02
296c0     2E 06 0E F2 | 	cmp	_var04, #46 wz
296c4     D8 00 90 5D |  if_ne	jmp	#LR__3992
296c8     01 02 06 F1 | 	add	_var02, #1
296cc     01 07 C2 FA | 	rdbyte	_var04, _var02
296d0     01 02 86 F1 | 	sub	_var02, #1
296d4     2F 06 0E F2 | 	cmp	_var04, #47 wz
296d8     18 00 90 AD |  if_e	jmp	#LR__3981
296dc     01 02 06 F1 | 	add	_var02, #1
296e0     01 09 C2 FA | 	rdbyte	_var05, _var02
296e4     01 02 86 F1 | 	sub	_var02, #1
296e8     04 0B 02 F6 | 	mov	_var06, _var05
296ec     07 0A 4E F7 | 	zerox	_var06, #7 wz
296f0     10 00 90 5D |  if_ne	jmp	#LR__3982
296f4                 | LR__3981
296f4     01 0D 02 F6 | 	mov	_var07, _var02
296f8     01 0C 06 F1 | 	add	_var07, #1
296fc     06 03 02 F6 | 	mov	_var02, _var07
29700     E0 00 90 FD | 	jmp	#LR__3996
29704                 | LR__3982
29704     01 02 06 F1 | 	add	_var02, #1
29708     01 0D C2 FA | 	rdbyte	_var07, _var02
2970c     01 02 86 F1 | 	sub	_var02, #1
29710     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
29714     2E 06 0E F2 | 	cmp	_var04, #46 wz
29718     84 00 90 5D |  if_ne	jmp	#LR__3991
2971c     02 02 06 F1 | 	add	_var02, #2
29720     01 0D C2 FA | 	rdbyte	_var07, _var02
29724     02 02 86 F1 | 	sub	_var02, #2
29728     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2972c     2F 06 0E F2 | 	cmp	_var04, #47 wz
29730     18 00 90 AD |  if_e	jmp	#LR__3983
29734     02 02 06 F1 | 	add	_var02, #2
29738     01 09 C2 FA | 	rdbyte	_var05, _var02
2973c     02 02 86 F1 | 	sub	_var02, #2
29740     04 0B 02 F6 | 	mov	_var06, _var05
29744     07 0A 4E F7 | 	zerox	_var06, #7 wz
29748     54 00 90 5D |  if_ne	jmp	#LR__3990
2974c                 | LR__3983
2974c     02 02 06 F1 | 	add	_var02, #2
29750     09 05 5A F2 | 	cmps	_var03, arg01 wcz
29754     40 00 90 ED |  if_be	jmp	#LR__3989
29758     02 0F 02 F6 | 	mov	_var08, _var03
2975c     01 0E 86 F1 | 	sub	_var08, #1
29760                 | LR__3984
29760     07 07 C2 FA | 	rdbyte	_var04, _var08
29764     2F 06 0E F2 | 	cmp	_var04, #47 wz
29768     0C 00 90 5D |  if_ne	jmp	#LR__3985
2976c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
29770     01 0E 86 11 |  if_a	sub	_var08, #1
29774     E8 FF 9F 1D |  if_a	jmp	#LR__3984
29778                 | LR__3985
29778     97 0C 48 FB | 	callpa	#(@LR__3987-@LR__3986)>>2,fcache_load_ptr_
2977c                 | LR__3986
2977c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
29780     10 00 90 ED |  if_be	jmp	#LR__3988
29784     07 07 C2 FA | 	rdbyte	_var04, _var08
29788     2F 06 0E F2 | 	cmp	_var04, #47 wz
2978c     01 0E 86 51 |  if_ne	sub	_var08, #1
29790     E8 FF 9F 5D |  if_ne	jmp	#LR__3986
29794                 | LR__3987
29794                 | LR__3988
29794     07 05 02 F6 | 	mov	_var03, _var08
29798                 | LR__3989
29798     01 00 06 F6 | 	mov	_var01, #1
2979c     44 00 90 FD | 	jmp	#LR__3996
297a0                 | LR__3990
297a0                 | LR__3991
297a0                 | LR__3992
297a0     97 18 48 FB | 	callpa	#(@LR__3994-@LR__3993)>>2,fcache_load_ptr_
297a4                 | LR__3993
297a4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
297a8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
297ac     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
297b0     20 00 90 AD |  if_e	jmp	#LR__3995
297b4     01 0B 02 F6 | 	mov	_var06, _var02
297b8     01 09 02 F6 | 	mov	_var05, _var02
297bc     01 08 06 F1 | 	add	_var05, #1
297c0     05 11 C2 FA | 	rdbyte	_var09, _var06
297c4     04 03 02 F6 | 	mov	_var02, _var05
297c8     02 11 42 FC | 	wrbyte	_var09, _var03
297cc     01 04 06 F1 | 	add	_var03, #1
297d0     D0 FF 9F FD | 	jmp	#LR__3993
297d4                 | LR__3994
297d4                 | LR__3995
297d4     01 07 C2 FA | 	rdbyte	_var04, _var02
297d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
297dc     C0 FE 9F 5D |  if_ne	jmp	#LR__3980
297e0     01 00 06 F6 | 	mov	_var01, #1
297e4                 | LR__3996
297e4     97 0C 48 FB | 	callpa	#(@LR__3998-@LR__3997)>>2,fcache_load_ptr_
297e8                 | LR__3997
297e8     01 07 C2 FA | 	rdbyte	_var04, _var02
297ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
297f0     01 0D 02 A6 |  if_e	mov	_var07, _var02
297f4     01 0C 06 A1 |  if_e	add	_var07, #1
297f8     06 03 02 A6 |  if_e	mov	_var02, _var07
297fc     E8 FF 9F AD |  if_e	jmp	#LR__3997
29800                 | LR__3998
29800     9C FE 9F FD | 	jmp	#LR__3980
29804                 | LR__3999
29804     02 01 48 FC | 	wrbyte	#0, _var03
29808                 | __system___normalizeName_ret
29808     2D 00 64 FD | 	ret
2980c                 | 
2980c                 | __system___strrev
2980c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
29810     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
29814     09 03 02 F6 | 	mov	_var02, arg01
29818     97 1A 48 FB | 	callpa	#(@LR__4002-@LR__4000)>>2,fcache_load_ptr_
2981c                 | LR__4000
2981c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
29820     01 02 06 51 |  if_ne	add	_var02, #1
29824     F4 FF 9F 5D |  if_ne	jmp	#LR__4000
29828     01 02 86 F1 | 	sub	_var02, #1
2982c                 | LR__4001
2982c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
29830     1C 00 90 ED |  if_be	jmp	#LR__4003
29834     09 01 C2 FA | 	rdbyte	_var01, arg01
29838     01 05 C2 FA | 	rdbyte	_var03, _var02
2983c     09 05 42 FC | 	wrbyte	_var03, arg01
29840     01 01 42 FC | 	wrbyte	_var01, _var02
29844     01 12 06 F1 | 	add	arg01, #1
29848     01 02 86 F1 | 	sub	_var02, #1
2984c     DC FF 9F FD | 	jmp	#LR__4001
29850                 | LR__4002
29850                 | LR__4003
29850                 | __system___strrev_ret
29850     2D 00 64 FD | 	ret
29854                 | 
29854                 | __system___fmtpad
29854     06 4A 05 F6 | 	mov	COUNT_, #6
29858     A8 00 A0 FD | 	call	#pushregs_
2985c     09 27 02 F6 | 	mov	local01, arg01
29860     0A 29 02 F6 | 	mov	local02, arg02
29864     0B 2B 02 F6 | 	mov	local03, arg03
29868     14 13 EA F8 | 	getbyte	arg01, local02, #1
2986c     16 28 46 F0 | 	shr	local02, #22
29870     03 28 0E F5 | 	and	local02, #3 wz
29874     00 2C 06 F6 | 	mov	local04, #0
29878     01 28 06 A6 |  if_e	mov	local02, #1
2987c     0C 29 CA F7 | 	test	local02, arg04 wz
29880     00 FA 05 A6 |  if_e	mov	result1, #0
29884     88 00 90 AD |  if_e	jmp	#LR__4013
29888     09 2B C2 F2 | 	subr	local03, arg01
2988c     01 2A 56 F2 | 	cmps	local03, #1 wc
29890     00 FA 05 C6 |  if_b	mov	result1, #0
29894     78 00 90 CD |  if_b	jmp	#LR__4013
29898     03 28 0E F2 | 	cmp	local02, #3 wz
2989c     18 00 90 5D |  if_ne	jmp	#LR__4010
298a0     01 18 0E F2 | 	cmp	arg04, #1 wz
298a4     6E 28 62 FD | 	wrz	local02
298a8     14 2B 02 F1 | 	add	local03, local02
298ac     15 2B 52 F6 | 	abs	local03, local03 wc
298b0     01 2A 46 F0 | 	shr	local03, #1
298b4     15 2B 82 F6 | 	negc	local03, local03
298b8                 | LR__4010
298b8     01 2A 56 F2 | 	cmps	local03, #1 wc
298bc     4C 00 90 CD |  if_b	jmp	#LR__4012
298c0     15 2F 02 F6 | 	mov	local05, local03
298c4                 | LR__4011
298c4     13 29 02 F6 | 	mov	local02, local01
298c8     13 31 02 F6 | 	mov	local06, local01
298cc     13 28 46 F7 | 	zerox	local02, #19
298d0     14 30 46 F0 | 	shr	local06, #20
298d4     02 30 66 F0 | 	shl	local06, #2
298d8     ED 30 02 F1 | 	add	local06, __methods__
298dc     18 31 02 FB | 	rdlong	local06, local06
298e0     20 12 06 F6 | 	mov	arg01, #32
298e4     F2 2A 02 F6 | 	mov	local03, objptr
298e8     14 E5 01 F6 | 	mov	objptr, local02
298ec     2D 30 62 FD | 	call	local06
298f0     15 E5 01 F6 | 	mov	objptr, local03
298f4     FD 30 02 F6 | 	mov	local06, result1
298f8     00 30 56 F2 | 	cmps	local06, #0 wc
298fc     18 FB 01 C6 |  if_b	mov	result1, local06
29900     0C 00 90 CD |  if_b	jmp	#LR__4013
29904     18 2D 02 F1 | 	add	local04, local06
29908     EE 2F 6E FB | 	djnz	local05, #LR__4011
2990c                 | LR__4012
2990c     16 FB 01 F6 | 	mov	result1, local04
29910                 | LR__4013
29910     A7 F0 03 F6 | 	mov	ptra, fp
29914     B2 00 A0 FD | 	call	#popregs_
29918                 | __system___fmtpad_ret
29918     2D 00 64 FD | 	ret
2991c                 | 
2991c                 | __system___uitoa
2991c     04 4A 05 F6 | 	mov	COUNT_, #4
29920     A8 00 A0 FD | 	call	#pushregs_
29924     09 27 02 F6 | 	mov	local01, arg01
29928     00 1A 4E F2 | 	cmps	arg05, #0 wz
2992c     13 1B 02 F6 | 	mov	arg05, local01
29930     00 28 06 F6 | 	mov	local02, #0
29934     37 2A 06 56 |  if_ne	mov	local03, #55
29938     57 2A 06 A6 |  if_e	mov	local03, #87
2993c                 | LR__4020
2993c     0B 15 12 FD | 	qdiv	arg02, arg03
29940     19 2C 62 FD | 	getqy	local04
29944     0B 15 12 FD | 	qdiv	arg02, arg03
29948     0A 2C 16 F2 | 	cmp	local04, #10 wc
2994c     30 2C 06 C1 |  if_b	add	local04, #48
29950     15 2D 02 31 |  if_ae	add	local04, local03
29954     0D 2D 42 FC | 	wrbyte	local04, arg05
29958     01 1A 06 F1 | 	add	arg05, #1
2995c     01 28 06 F1 | 	add	local02, #1
29960     18 14 62 FD | 	getqx	arg02
29964     00 14 0E F2 | 	cmp	arg02, #0 wz
29968     D0 FF 9F 5D |  if_ne	jmp	#LR__4020
2996c     0C 29 12 F2 | 	cmp	local02, arg04 wc
29970     C8 FF 9F CD |  if_b	jmp	#LR__4020
29974     0D 01 48 FC | 	wrbyte	#0, arg05
29978     13 13 02 F6 | 	mov	arg01, local01
2997c     8C FE BF FD | 	call	#__system___strrev
29980     14 FB 01 F6 | 	mov	result1, local02
29984     A7 F0 03 F6 | 	mov	ptra, fp
29988     B2 00 A0 FD | 	call	#popregs_
2998c                 | __system___uitoa_ret
2998c     2D 00 64 FD | 	ret
29990                 | 
29990                 | __system__disassemble_0537
29990     10 4A 05 F6 | 	mov	COUNT_, #16
29994     A8 00 A0 FD | 	call	#pushregs_
29998     09 27 02 F6 | 	mov	local01, arg01
2999c     0A 29 02 F6 | 	mov	local02, arg02
299a0     0B 2B 02 F6 | 	mov	local03, arg03
299a4     0C 2D 02 F6 | 	mov	local04, arg04
299a8     0D 2F 02 F6 | 	mov	local05, arg05
299ac     17 13 52 F6 | 	abs	arg01, local05 wc
299b0     1F 30 C6 C9 |  if_b	decod	local06, #31
299b4     00 30 06 36 |  if_ae	mov	local06, #0
299b8     CC CF BF FD | 	call	#__system___float_fromuns
299bc     18 FB 61 F5 | 	xor	result1, local06
299c0     FD 32 02 F6 | 	mov	local07, result1
299c4     00 34 06 F6 | 	mov	local08, #0
299c8     13 13 02 F6 | 	mov	arg01, local01
299cc     00 14 06 F6 | 	mov	arg02, #0
299d0     01 16 06 F6 | 	mov	arg03, #1
299d4     E8 D7 BF FD | 	call	#__system___float_cmp
299d8     00 FA 0D F2 | 	cmp	result1, #0 wz
299dc     00 36 06 A6 |  if_e	mov	local09, #0
299e0     14 01 68 AC |  if_e	wrlong	#0, local02
299e4     15 37 62 AC |  if_e	wrlong	local09, local03
299e8     8C 01 90 AD |  if_e	jmp	#LR__4042
299ec     13 13 02 F6 | 	mov	arg01, local01
299f0     BC DC BF FD | 	call	#__system____builtin_ilogb
299f4     FD 38 02 F6 | 	mov	local10, result1
299f8     0A 2E 0E F2 | 	cmp	local05, #10 wz
299fc     24 00 90 5D |  if_ne	jmp	#LR__4030
29a00     1C 37 02 F6 | 	mov	local09, local10
29a04     01 36 66 F0 | 	shl	local09, #1
29a08     1C 37 02 F1 | 	add	local09, local10
29a0c     1B 39 52 F6 | 	abs	local10, local09 wc
29a10     0A 38 16 FD | 	qdiv	local10, #10
29a14     09 3A 06 F6 | 	mov	local11, #9
29a18     18 38 62 FD | 	getqx	local10
29a1c     1C 39 82 F6 | 	negc	local10, local10
29a20     04 00 90 FD | 	jmp	#LR__4031
29a24                 | LR__4030
29a24     18 3A 06 F6 | 	mov	local11, #24
29a28                 | LR__4031
29a28                 | LR__4032
29a28     08 34 56 F2 | 	cmps	local08, #8 wc
29a2c     01 34 06 F1 | 	add	local08, #1
29a30     60 00 90 3D |  if_ae	jmp	#LR__4033
29a34     00 C0 1F FF 
29a38     00 12 06 F6 | 	mov	arg01, ##1065353216
29a3c     19 15 02 F6 | 	mov	arg02, local07
29a40     1C 17 02 F6 | 	mov	arg03, local10
29a44     4C E3 BF FD | 	call	#__system___float_pow_n
29a48     FD 14 02 F6 | 	mov	arg02, result1
29a4c     13 13 02 F6 | 	mov	arg01, local01
29a50     3C D5 BF FD | 	call	#__system___float_div
29a54     FD 3C 02 F6 | 	mov	local12, result1
29a58     1E 13 02 F6 | 	mov	arg01, local12
29a5c     00 C0 1F FF 
29a60     00 14 06 F6 | 	mov	arg02, ##1065353216
29a64     01 16 06 F6 | 	mov	arg03, #1
29a68     54 D7 BF FD | 	call	#__system___float_cmp
29a6c     00 FA 55 F2 | 	cmps	result1, #0 wc
29a70     01 38 86 C1 |  if_b	sub	local10, #1
29a74     B0 FF 9F CD |  if_b	jmp	#LR__4032
29a78     19 15 02 F6 | 	mov	arg02, local07
29a7c     1E 13 02 F6 | 	mov	arg01, local12
29a80     01 16 66 F6 | 	neg	arg03, #1
29a84     38 D7 BF FD | 	call	#__system___float_cmp
29a88     00 FA 55 F2 | 	cmps	result1, #0 wc
29a8c     01 38 06 31 |  if_ae	add	local10, #1
29a90     94 FF 9F 3D |  if_ae	jmp	#LR__4032
29a94                 | LR__4033
29a94     1E 13 02 F6 | 	mov	arg01, local12
29a98     14 DC BF FD | 	call	#__system____builtin_ilogb
29a9c     FD 3E 02 F6 | 	mov	local13, result1
29aa0     1E 41 02 F6 | 	mov	local14, local12
29aa4     17 41 06 F4 | 	bitl	local14, #279
29aa8     17 40 26 F4 | 	bith	local14, #23
29aac     1F 41 62 F0 | 	shl	local14, local13
29ab0     02 2E 0E F2 | 	cmp	local05, #2 wz
29ab4     02 2C 66 A0 |  if_e	shl	local04, #2
29ab8     00 42 06 F6 | 	mov	local15, #0
29abc     00 2C 56 F2 | 	cmps	local04, #0 wc
29ac0     10 00 90 3D |  if_ae	jmp	#LR__4034
29ac4     1C 2D C2 F2 | 	subr	local04, local10
29ac8     00 2C 56 F2 | 	cmps	local04, #0 wc
29acc     A0 00 90 CD |  if_b	jmp	#LR__4041
29ad0     04 00 90 FD | 	jmp	#LR__4035
29ad4                 | LR__4034
29ad4     01 2C 06 F1 | 	add	local04, #1
29ad8                 | LR__4035
29ad8     1D 2D 7A F3 | 	fles	local04, local11 wcz
29adc     01 44 06 F6 | 	mov	local16, #1
29ae0     97 22 48 FB | 	callpa	#(@LR__4037-@LR__4036)>>2,fcache_load_ptr_
29ae4                 | LR__4036
29ae4     00 40 00 FF 
29ae8     00 42 16 F2 | 	cmp	local15, ##8388608 wc
29aec     38 00 90 3D |  if_ae	jmp	#LR__4038
29af0     01 2C 56 F2 | 	cmps	local04, #1 wc
29af4     01 2C 86 F1 | 	sub	local04, #1
29af8     2C 00 90 CD |  if_b	jmp	#LR__4038
29afc     17 43 02 FD | 	qmul	local15, local05
29b00     20 3F 02 F6 | 	mov	local13, local14
29b04     17 3E 46 F0 | 	shr	local13, #23
29b08     17 41 06 F4 | 	bitl	local14, #279
29b0c     18 42 62 FD | 	getqx	local15
29b10     17 45 02 FD | 	qmul	local16, local05
29b14     18 44 62 FD | 	getqx	local16
29b18     17 41 02 FD | 	qmul	local14, local05
29b1c     1F 43 02 F1 | 	add	local15, local13
29b20     18 40 62 FD | 	getqx	local14
29b24     BC FF 9F FD | 	jmp	#LR__4036
29b28                 | LR__4037
29b28                 | LR__4038
29b28     17 37 02 F6 | 	mov	local09, local05
29b2c     17 36 66 F0 | 	shl	local09, #23
29b30     1B 3F 52 F6 | 	abs	local13, local09 wc
29b34     01 3E 46 F0 | 	shr	local13, #1
29b38     1F 3F 82 F6 | 	negc	local13, local13
29b3c     1F 41 1A F2 | 	cmp	local14, local13 wcz
29b40     20 00 90 1D |  if_a	jmp	#LR__4039
29b44     17 2E 66 F0 | 	shl	local05, #23
29b48     17 3F 52 F6 | 	abs	local13, local05 wc
29b4c     01 3E 46 F0 | 	shr	local13, #1
29b50     1F 3F 82 F6 | 	negc	local13, local13
29b54     1F 41 0A F2 | 	cmp	local14, local13 wz
29b58     14 00 90 5D |  if_ne	jmp	#LR__4040
29b5c     01 42 CE F7 | 	test	local15, #1 wz
29b60     0C 00 90 AD |  if_e	jmp	#LR__4040
29b64                 | LR__4039
29b64     01 42 06 F1 | 	add	local15, #1
29b68     22 43 0A F2 | 	cmp	local15, local16 wz
29b6c     01 38 06 A1 |  if_e	add	local10, #1
29b70                 | LR__4040
29b70                 | LR__4041
29b70     14 43 62 FC | 	wrlong	local15, local02
29b74     15 39 62 FC | 	wrlong	local10, local03
29b78                 | LR__4042
29b78     A7 F0 03 F6 | 	mov	ptra, fp
29b7c     B2 00 A0 FD | 	call	#popregs_
29b80                 | __system__disassemble_0537_ret
29b80     2D 00 64 FD | 	ret
29b84                 | 
29b84                 | __system__emitsign_0539
29b84     00 FA 05 F6 | 	mov	result1, #0
29b88     00 14 0E F2 | 	cmp	arg02, #0 wz
29b8c     09 01 02 56 |  if_ne	mov	_var01, arg01
29b90     01 12 06 51 |  if_ne	add	arg01, #1
29b94     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
29b98     01 FA 05 56 |  if_ne	mov	result1, #1
29b9c     00 16 0E F2 | 	cmp	arg03, #0 wz
29ba0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
29ba4     01 12 06 51 |  if_ne	add	arg01, #1
29ba8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
29bac     02 FA 05 51 |  if_ne	add	result1, #2
29bb0                 | __system__emitsign_0539_ret
29bb0     2D 00 64 FD | 	ret
29bb4                 | 
29bb4                 | __system___gettxfunc
29bb4     01 4A 05 F6 | 	mov	COUNT_, #1
29bb8     A8 00 A0 FD | 	call	#pushregs_
29bbc     A0 F8 BF FD | 	call	#__system____getftab
29bc0     FD 26 0A F6 | 	mov	local01, result1 wz
29bc4     10 00 90 AD |  if_e	jmp	#LR__4050
29bc8     08 26 06 F1 | 	add	local01, #8
29bcc     13 15 0A FB | 	rdlong	arg02, local01 wz
29bd0     08 26 86 F1 | 	sub	local01, #8
29bd4     08 00 90 5D |  if_ne	jmp	#LR__4051
29bd8                 | LR__4050
29bd8     00 FA 05 F6 | 	mov	result1, #0
29bdc     0C 00 90 FD | 	jmp	#LR__4052
29be0                 | LR__4051
29be0     00 E0 04 FF 
29be4     00 26 46 F5 | 	or	local01, ##163577856
29be8     13 FB 01 F6 | 	mov	result1, local01
29bec                 | LR__4052
29bec     A7 F0 03 F6 | 	mov	ptra, fp
29bf0     B2 00 A0 FD | 	call	#popregs_
29bf4                 | __system___gettxfunc_ret
29bf4     2D 00 64 FD | 	ret
29bf8                 | 
29bf8                 | __system___getrxfunc
29bf8     01 4A 05 F6 | 	mov	COUNT_, #1
29bfc     A8 00 A0 FD | 	call	#pushregs_
29c00     5C F8 BF FD | 	call	#__system____getftab
29c04     FD 26 0A F6 | 	mov	local01, result1 wz
29c08     10 00 90 AD |  if_e	jmp	#LR__4060
29c0c     08 26 06 F1 | 	add	local01, #8
29c10     13 15 0A FB | 	rdlong	arg02, local01 wz
29c14     08 26 86 F1 | 	sub	local01, #8
29c18     08 00 90 5D |  if_ne	jmp	#LR__4061
29c1c                 | LR__4060
29c1c     00 FA 05 F6 | 	mov	result1, #0
29c20     0C 00 90 FD | 	jmp	#LR__4062
29c24                 | LR__4061
29c24     00 E8 04 FF 
29c28     00 26 46 F5 | 	or	local01, ##164626432
29c2c     13 FB 01 F6 | 	mov	result1, local01
29c30                 | LR__4062
29c30     A7 F0 03 F6 | 	mov	ptra, fp
29c34     B2 00 A0 FD | 	call	#popregs_
29c38                 | __system___getrxfunc_ret
29c38     2D 00 64 FD | 	ret
29c3c                 | 
29c3c                 | __system___getiolock_0579
29c3c     01 4A 05 F6 | 	mov	COUNT_, #1
29c40     A8 00 A0 FD | 	call	#pushregs_
29c44     18 F8 BF FD | 	call	#__system____getftab
29c48     FD 26 0A F6 | 	mov	local01, result1 wz
29c4c     10 00 90 AD |  if_e	jmp	#LR__4070
29c50     08 26 06 F1 | 	add	local01, #8
29c54     13 FB 09 FB | 	rdlong	result1, local01 wz
29c58     08 26 86 F1 | 	sub	local01, #8
29c5c     18 00 90 5D |  if_ne	jmp	#LR__4071
29c60                 | LR__4070
29c60     01 00 00 FF 
29c64     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
29c68     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
29c6c     01 00 00 FF 
29c70     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
29c74     08 00 90 FD | 	jmp	#LR__4072
29c78                 | LR__4071
29c78     0C 26 06 F1 | 	add	local01, #12
29c7c     13 FB 01 F6 | 	mov	result1, local01
29c80                 | LR__4072
29c80     A7 F0 03 F6 | 	mov	ptra, fp
29c84     B2 00 A0 FD | 	call	#popregs_
29c88                 | __system___getiolock_0579_ret
29c88     2D 00 64 FD | 	ret
29c8c                 | 
29c8c                 | __system____ScanForChar
29c8c     09 01 02 F6 | 	mov	_var01, arg01
29c90     09 03 02 F6 | 	mov	_var02, arg01
29c94     97 06 48 FB | 	callpa	#(@LR__4081-@LR__4080)>>2,fcache_load_ptr_
29c98                 | LR__4080
29c98     01 FB C9 FA | 	rdbyte	result1, _var02 wz
29c9c     01 02 06 51 |  if_ne	add	_var02, #1
29ca0     F4 FF 9F 5D |  if_ne	jmp	#LR__4080
29ca4                 | LR__4081
29ca4     09 03 82 F1 | 	sub	_var02, arg01
29ca8     01 FB 01 F6 | 	mov	result1, _var02
29cac     FD 12 0A F6 | 	mov	arg01, result1 wz
29cb0     00 FA 05 A6 |  if_e	mov	result1, #0
29cb4     B8 00 90 AD |  if_e	jmp	#LR__4088
29cb8     0A 05 02 F6 | 	mov	_var03, arg02
29cbc     07 04 4E F7 | 	zerox	_var03, #7 wz
29cc0     00 FA 05 A6 |  if_e	mov	result1, #0
29cc4     A8 00 90 AD |  if_e	jmp	#LR__4088
29cc8     01 16 16 F2 | 	cmp	arg03, #1 wc
29ccc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
29cd0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
29cd4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
29cd8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4088
29cdc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
29ce0     10 00 90 ED |  if_be	jmp	#LR__4082
29ce4     00 18 0E F2 | 	cmp	arg04, #0 wz
29ce8     00 FA 05 A6 |  if_e	mov	result1, #0
29cec     80 00 90 AD |  if_e	jmp	#LR__4088
29cf0     09 17 02 F6 | 	mov	arg03, arg01
29cf4                 | LR__4082
29cf4     01 16 86 F1 | 	sub	arg03, #1
29cf8     00 18 0E F2 | 	cmp	arg04, #0 wz
29cfc     38 00 90 5D |  if_ne	jmp	#LR__4084
29d00     0B 07 02 F6 | 	mov	_var04, arg03
29d04     09 09 02 F6 | 	mov	_var05, arg01
29d08                 | LR__4083
29d08     04 07 12 F2 | 	cmp	_var04, _var05 wc
29d0c     5C 00 90 3D |  if_ae	jmp	#LR__4087
29d10     03 05 02 F6 | 	mov	_var03, _var04
29d14     00 05 02 F1 | 	add	_var03, _var01
29d18     02 05 C2 FA | 	rdbyte	_var03, _var03
29d1c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
29d20     0C 05 0A F2 | 	cmp	_var03, arg04 wz
29d24     01 06 06 A1 |  if_e	add	_var04, #1
29d28     03 FB 01 A6 |  if_e	mov	result1, _var04
29d2c     40 00 90 AD |  if_e	jmp	#LR__4088
29d30     01 06 06 F1 | 	add	_var04, #1
29d34     D0 FF 9F FD | 	jmp	#LR__4083
29d38                 | LR__4084
29d38     0B 07 02 F6 | 	mov	_var04, arg03
29d3c                 | LR__4085
29d3c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
29d40     28 00 90 1D |  if_a	jmp	#LR__4086
29d44     03 09 02 F6 | 	mov	_var05, _var04
29d48     00 09 02 F1 | 	add	_var05, _var01
29d4c     04 05 C2 FA | 	rdbyte	_var03, _var05
29d50     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
29d54     04 05 0A F2 | 	cmp	_var03, _var05 wz
29d58     01 06 06 A1 |  if_e	add	_var04, #1
29d5c     03 FB 01 A6 |  if_e	mov	result1, _var04
29d60     0C 00 90 AD |  if_e	jmp	#LR__4088
29d64     01 06 86 F1 | 	sub	_var04, #1
29d68     D0 FF 9F FD | 	jmp	#LR__4085
29d6c                 | LR__4086
29d6c                 | LR__4087
29d6c     00 FA 05 F6 | 	mov	result1, #0
29d70                 | LR__4088
29d70                 | __system____ScanForChar_ret
29d70     2D 00 64 FD | 	ret
29d74                 | 
29d74                 | __system___basic_dir
29d74     05 4A 05 F6 | 	mov	COUNT_, #5
29d78     A8 00 A0 FD | 	call	#pushregs_
29d7c     4C F0 07 F1 | 	add	ptra, #76
29d80     04 4E 05 F1 | 	add	fp, #4
29d84     A7 12 62 FC | 	wrlong	arg01, fp
29d88     04 4E 05 F1 | 	add	fp, #4
29d8c     A7 14 62 FC | 	wrlong	arg02, fp
29d90     04 4E 85 F1 | 	sub	fp, #4
29d94     A7 14 0A FB | 	rdlong	arg02, fp wz
29d98     04 4E 85 F1 | 	sub	fp, #4
29d9c     04 4E 05 51 |  if_ne	add	fp, #4
29da0     A7 26 02 5B |  if_ne	rdlong	local01, fp
29da4     04 4E 85 51 |  if_ne	sub	fp, #4
29da8     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
29dac     70 00 90 AD |  if_e	jmp	#LR__4090
29db0     03 00 00 FF 
29db4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29db8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
29dbc     03 00 00 FF 
29dc0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29dc4     03 00 00 5F 
29dc8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
29dcc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
29dd0     03 00 00 5F 
29dd4     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
29dd8     D8 E9 BF 5D |  if_ne	call	#__system__closedir
29ddc     9D 01 00 FF 
29de0     8C 12 06 F6 | 	mov	arg01, ##@LR__5258
29de4     E0 E8 BF FD | 	call	#__system__opendir
29de8     03 00 00 FF 
29dec     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29df0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
29df4     08 4E 05 F1 | 	add	fp, #8
29df8     A7 28 02 FB | 	rdlong	local02, fp
29dfc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29e00     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
29e04     04 4E 85 F1 | 	sub	fp, #4
29e08     A7 28 02 FB | 	rdlong	local02, fp
29e0c     04 4E 85 F1 | 	sub	fp, #4
29e10     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29e14     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
29e18     03 00 00 FF 
29e1c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29e20                 | LR__4090
29e20     03 00 00 FF 
29e24     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29e28     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
29e2c     03 00 00 FF 
29e30     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29e34     9D 01 00 AF 
29e38     8E FA 05 A6 |  if_e	mov	result1, ##@LR__5259
29e3c     84 02 90 AD |  if_e	jmp	#LR__4103
29e40                 | LR__4091
29e40     03 00 00 FF 
29e44     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29e48     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
29e4c     03 00 00 FF 
29e50     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29e54     D0 E9 BF FD | 	call	#__system__readdir
29e58     0C 4E 05 F1 | 	add	fp, #12
29e5c     A7 FA 61 FC | 	wrlong	result1, fp
29e60     0C 4E 85 F1 | 	sub	fp, #12
29e64     00 FA 0D F2 | 	cmp	result1, #0 wz
29e68     38 00 90 5D |  if_ne	jmp	#LR__4092
29e6c     03 00 00 FF 
29e70     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29e74     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
29e78     03 00 00 FF 
29e7c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29e80     30 E9 BF FD | 	call	#__system__closedir
29e84     03 00 00 FF 
29e88     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29e8c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
29e90     03 00 00 FF 
29e94     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29e98     9D 01 00 FF 
29e9c     90 FA 05 F6 | 	mov	result1, ##@LR__5260
29ea0     20 02 90 FD | 	jmp	#LR__4103
29ea4                 | LR__4092
29ea4     0C 4E 05 F1 | 	add	fp, #12
29ea8     A7 12 02 FB | 	rdlong	arg01, fp
29eac     0C 4E 85 F1 | 	sub	fp, #12
29eb0     03 00 00 FF 
29eb4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29eb8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
29ebc     03 00 00 FF 
29ec0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29ec4     10 09 B0 FD | 	call	#__system___pat_match
29ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
29ecc     70 FF 9F AD |  if_e	jmp	#LR__4091
29ed0     03 00 00 FF 
29ed4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
29ed8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
29edc     03 00 00 FF 
29ee0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
29ee4     78 01 90 AD |  if_e	jmp	#LR__4099
29ee8     0C 4E 05 F1 | 	add	fp, #12
29eec     A7 12 02 FB | 	rdlong	arg01, fp
29ef0     04 4E 05 F1 | 	add	fp, #4
29ef4     A7 14 02 F6 | 	mov	arg02, fp
29ef8     10 4E 85 F1 | 	sub	fp, #16
29efc     2C F2 BF FD | 	call	#__system__stat
29f00     40 4E 05 F1 | 	add	fp, #64
29f04     A7 FA 61 FC | 	wrlong	result1, fp
29f08     40 4E 85 F1 | 	sub	fp, #64
29f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
29f10     9D 01 00 5F 
29f14     92 FA 05 56 |  if_ne	mov	result1, ##@LR__5261
29f18     A8 01 90 5D |  if_ne	jmp	#LR__4103
29f1c     18 4E 05 F1 | 	add	fp, #24
29f20     A7 28 02 FB | 	rdlong	local02, fp
29f24     78 00 00 FF 
29f28     00 28 06 F5 | 	and	local02, ##61440
29f2c     2C 4E 05 F1 | 	add	fp, #44
29f30     A7 28 62 FC | 	wrlong	local02, fp
29f34     38 4E 85 F1 | 	sub	fp, #56
29f38     A7 28 02 FB | 	rdlong	local02, fp
29f3c     0C 4E 85 F1 | 	sub	fp, #12
29f40     14 29 C2 FA | 	rdbyte	local02, local02
29f44     2E 28 0E F2 | 	cmp	local02, #46 wz
29f48     08 4E 05 A1 |  if_e	add	fp, #8
29f4c     A7 04 68 AC |  if_e	wrlong	#2, fp
29f50     08 4E C5 F3 | 	sumz	fp, #8
29f54     A7 00 68 5C |  if_ne	wrlong	#0, fp
29f58     08 4E 85 51 |  if_ne	sub	fp, #8
29f5c     44 4E 05 F1 | 	add	fp, #68
29f60     A7 28 02 FB | 	rdlong	local02, fp
29f64     44 4E 85 F1 | 	sub	fp, #68
29f68     08 00 00 FF 
29f6c     00 28 0E F2 | 	cmp	local02, ##4096 wz
29f70     18 00 90 5D |  if_ne	jmp	#LR__4093
29f74     08 4E 05 F1 | 	add	fp, #8
29f78     A7 28 02 FB | 	rdlong	local02, fp
29f7c     10 28 46 F5 | 	or	local02, #16
29f80     A7 28 62 FC | 	wrlong	local02, fp
29f84     08 4E 85 F1 | 	sub	fp, #8
29f88     AC 00 90 FD | 	jmp	#LR__4098
29f8c                 | LR__4093
29f8c     44 4E 05 F1 | 	add	fp, #68
29f90     A7 28 02 FB | 	rdlong	local02, fp
29f94     44 4E 85 F1 | 	sub	fp, #68
29f98     10 00 00 FF 
29f9c     00 28 0E F2 | 	cmp	local02, ##8192 wz
29fa0     44 4E 05 51 |  if_ne	add	fp, #68
29fa4     A7 26 02 5B |  if_ne	rdlong	local01, fp
29fa8     44 4E 85 51 |  if_ne	sub	fp, #68
29fac     18 00 00 5F 
29fb0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
29fb4     44 4E 05 51 |  if_ne	add	fp, #68
29fb8     13 2B 02 56 |  if_ne	mov	local03, local01
29fbc     44 4E 85 51 |  if_ne	sub	fp, #68
29fc0     20 00 00 5F 
29fc4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
29fc8     18 00 90 5D |  if_ne	jmp	#LR__4094
29fcc     08 4E 05 F1 | 	add	fp, #8
29fd0     A7 28 02 FB | 	rdlong	local02, fp
29fd4     04 28 46 F5 | 	or	local02, #4
29fd8     A7 28 62 FC | 	wrlong	local02, fp
29fdc     08 4E 85 F1 | 	sub	fp, #8
29fe0     54 00 90 FD | 	jmp	#LR__4097
29fe4                 | LR__4094
29fe4     18 4E 05 F1 | 	add	fp, #24
29fe8     A7 28 02 FB | 	rdlong	local02, fp
29fec     18 4E 85 F1 | 	sub	fp, #24
29ff0     92 28 CE F7 | 	test	local02, #146 wz
29ff4     18 00 90 5D |  if_ne	jmp	#LR__4095
29ff8     08 4E 05 F1 | 	add	fp, #8
29ffc     A7 28 02 FB | 	rdlong	local02, fp
2a000     01 28 46 F5 | 	or	local02, #1
2a004     A7 28 62 FC | 	wrlong	local02, fp
2a008     08 4E 85 F1 | 	sub	fp, #8
2a00c     28 00 90 FD | 	jmp	#LR__4096
2a010                 | LR__4095
2a010     44 4E 05 F1 | 	add	fp, #68
2a014     A7 2C 02 FB | 	rdlong	local04, fp
2a018     44 4E 85 F1 | 	sub	fp, #68
2a01c     08 00 00 FF 
2a020     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2a024     08 4E 05 51 |  if_ne	add	fp, #8
2a028     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2a02c     20 2C 46 55 |  if_ne	or	local04, #32
2a030     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2a034     08 4E 85 51 |  if_ne	sub	fp, #8
2a038                 | LR__4096
2a038                 | LR__4097
2a038                 | LR__4098
2a038     08 4E 05 F1 | 	add	fp, #8
2a03c     A7 2C 02 FB | 	rdlong	local04, fp
2a040     08 4E 85 F1 | 	sub	fp, #8
2a044     03 00 00 FF 
2a048     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2a04c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2a050     03 00 00 FF 
2a054     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2a058     13 2D CA F7 | 	test	local04, local01 wz
2a05c     E0 FD 9F AD |  if_e	jmp	#LR__4091
2a060                 | LR__4099
2a060     0C 4E 05 F1 | 	add	fp, #12
2a064     A7 12 02 FB | 	rdlong	arg01, fp
2a068     0C 4E 85 F1 | 	sub	fp, #12
2a06c     09 2F 02 F6 | 	mov	local05, arg01
2a070     97 06 48 FB | 	callpa	#(@LR__4101-@LR__4100)>>2,fcache_load_ptr_
2a074                 | LR__4100
2a074     17 FB C9 FA | 	rdbyte	result1, local05 wz
2a078     01 2E 06 51 |  if_ne	add	local05, #1
2a07c     F4 FF 9F 5D |  if_ne	jmp	#LR__4100
2a080                 | LR__4101
2a080     17 13 C2 F2 | 	subr	arg01, local05
2a084     01 12 06 F1 | 	add	arg01, #1
2a088     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2a08c     48 4E 05 F1 | 	add	fp, #72
2a090     A7 FA 61 FC | 	wrlong	result1, fp
2a094     48 4E 85 F1 | 	sub	fp, #72
2a098     00 FA 0D F2 | 	cmp	result1, #0 wz
2a09c     18 00 90 AD |  if_e	jmp	#LR__4102
2a0a0     48 4E 05 F1 | 	add	fp, #72
2a0a4     A7 12 02 FB | 	rdlong	arg01, fp
2a0a8     3C 4E 85 F1 | 	sub	fp, #60
2a0ac     A7 14 02 FB | 	rdlong	arg02, fp
2a0b0     0C 4E 85 F1 | 	sub	fp, #12
2a0b4     10 9E BF FD | 	call	#__system____builtin_strcpy
2a0b8                 | LR__4102
2a0b8     48 4E 05 F1 | 	add	fp, #72
2a0bc     A7 FA 01 FB | 	rdlong	result1, fp
2a0c0     48 4E 85 F1 | 	sub	fp, #72
2a0c4                 | LR__4103
2a0c4     A7 F0 03 F6 | 	mov	ptra, fp
2a0c8     B2 00 A0 FD | 	call	#popregs_
2a0cc                 | __system___basic_dir_ret
2a0cc     2D 00 64 FD | 	ret
2a0d0                 | 
2a0d0                 | __system__pack_0651
2a0d0     09 01 02 F6 | 	mov	_var01, arg01
2a0d4     7F 16 06 F1 | 	add	arg03, #127
2a0d8     04 18 CE F7 | 	test	arg04, #4 wz
2a0dc     10 00 90 AD |  if_e	jmp	#LR__4110
2a0e0     00 00 0E F2 | 	cmp	_var01, #0 wz
2a0e4     16 00 C6 A9 |  if_e	decod	_var01, #22
2a0e8     F7 00 26 F4 | 	bith	_var01, #247
2a0ec     B4 00 90 FD | 	jmp	#LR__4119
2a0f0                 | LR__4110
2a0f0     02 18 CE F7 | 	test	arg04, #2 wz
2a0f4     00 C0 3F 5F 
2a0f8     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2a0fc     00 14 06 56 |  if_ne	mov	arg02, #0
2a100     A0 00 90 5D |  if_ne	jmp	#LR__4118
2a104     08 18 CE F7 | 	test	arg04, #8 wz
2a108     00 00 06 56 |  if_ne	mov	_var01, #0
2a10c     94 00 90 5D |  if_ne	jmp	#LR__4117
2a110     FF 16 56 F2 | 	cmps	arg03, #255 wc
2a114     00 C0 3F 3F 
2a118     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2a11c     00 14 06 36 |  if_ae	mov	arg02, #0
2a120     80 00 90 3D |  if_ae	jmp	#LR__4116
2a124     01 16 56 F2 | 	cmps	arg03, #1 wc
2a128     6C 00 90 3D |  if_ae	jmp	#LR__4114
2a12c     01 14 46 F0 | 	shr	arg02, #1
2a130     00 03 02 F6 | 	mov	_var02, _var01
2a134     01 02 06 F5 | 	and	_var02, #1
2a138     1F 02 66 F0 | 	shl	_var02, #31
2a13c     01 15 42 F5 | 	or	arg02, _var02
2a140     01 00 46 F0 | 	shr	_var01, #1
2a144     97 1E 48 FB | 	callpa	#(@LR__4112-@LR__4111)>>2,fcache_load_ptr_
2a148                 | LR__4111
2a148     00 16 56 F2 | 	cmps	arg03, #0 wc
2a14c     34 00 90 3D |  if_ae	jmp	#LR__4113
2a150     00 00 0E F2 | 	cmp	_var01, #0 wz
2a154     2C 00 90 AD |  if_e	jmp	#LR__4113
2a158     0A 13 02 F6 | 	mov	arg01, arg02
2a15c     01 12 06 F5 | 	and	arg01, #1
2a160     01 16 06 F1 | 	add	arg03, #1
2a164     01 14 46 F0 | 	shr	arg02, #1
2a168     00 03 02 F6 | 	mov	_var02, _var01
2a16c     01 02 06 F5 | 	and	_var02, #1
2a170     1F 02 66 F0 | 	shl	_var02, #31
2a174     01 15 42 F5 | 	or	arg02, _var02
2a178     09 15 42 F5 | 	or	arg02, arg01
2a17c     01 00 46 F0 | 	shr	_var01, #1
2a180     C4 FF 9F FD | 	jmp	#LR__4111
2a184                 | LR__4112
2a184                 | LR__4113
2a184     00 16 56 F2 | 	cmps	arg03, #0 wc
2a188     18 00 90 3D |  if_ae	jmp	#LR__4115
2a18c     00 14 0E F2 | 	cmp	arg02, #0 wz
2a190     6F 14 62 FD | 	wrnz	arg02
2a194     0C 00 90 FD | 	jmp	#LR__4115
2a198                 | LR__4114
2a198     17 01 06 F4 | 	bitl	_var01, #279
2a19c     17 16 66 F0 | 	shl	arg03, #23
2a1a0     0B 01 42 F5 | 	or	_var01, arg03
2a1a4                 | LR__4115
2a1a4                 | LR__4116
2a1a4                 | LR__4117
2a1a4                 | LR__4118
2a1a4                 | LR__4119
2a1a4     01 00 CE F7 | 	test	_var01, #1 wz
2a1a8     01 14 46 55 |  if_ne	or	arg02, #1
2a1ac     0A 17 02 F6 | 	mov	arg03, arg02
2a1b0     00 02 06 F6 | 	mov	_var02, #0
2a1b4     FF FF 3F FF 
2a1b8     FF 15 06 F1 | 	add	arg02, ##2147483647
2a1bc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2a1c0     01 02 06 C6 |  if_b	mov	_var02, #1
2a1c4     01 01 02 F1 | 	add	_var01, _var02
2a1c8     01 18 CE F7 | 	test	arg04, #1 wz
2a1cc     1F 00 26 54 |  if_ne	bith	_var01, #31
2a1d0     00 FB 01 F6 | 	mov	result1, _var01
2a1d4                 | __system__pack_0651_ret
2a1d4     2D 00 64 FD | 	ret
2a1d8                 | 
2a1d8                 | __system___rxtxioctl_0741
2a1d8     00 15 0E F2 | 	cmp	arg02, #256 wz
2a1dc     0C 00 90 AD |  if_e	jmp	#LR__4120
2a1e0     01 15 0E F2 | 	cmp	arg02, #257 wz
2a1e4     1C 00 90 AD |  if_e	jmp	#LR__4121
2a1e8     30 00 90 FD | 	jmp	#LR__4122
2a1ec                 | LR__4120
2a1ec     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2a1f0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2a1f4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2a1f8     0B FB 61 FC | 	wrlong	result1, arg03
2a1fc     00 FA 05 F6 | 	mov	result1, #0
2a200     28 00 90 FD | 	jmp	#LR__4123
2a204                 | LR__4121
2a204     0B 13 02 FB | 	rdlong	arg01, arg03
2a208     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2a20c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a210     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2a214     00 FA 05 F6 | 	mov	result1, #0
2a218     10 00 90 FD | 	jmp	#LR__4123
2a21c                 | LR__4122
2a21c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a220     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a224     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a228     01 FA 65 F6 | 	neg	result1, #1
2a22c                 | LR__4123
2a22c                 | __system___rxtxioctl_0741_ret
2a22c     2D 00 64 FD | 	ret
2a230                 | 
2a230                 | __system____dummy_flush_0742
2a230     00 FA 05 F6 | 	mov	result1, #0
2a234                 | __system____dummy_flush_0742_ret
2a234     2D 00 64 FD | 	ret
2a238                 | 
2a238                 | __system___vfswrite
2a238     09 4A 05 F6 | 	mov	COUNT_, #9
2a23c     A8 00 A0 FD | 	call	#pushregs_
2a240     09 27 02 F6 | 	mov	local01, arg01
2a244     0A 29 02 F6 | 	mov	local02, arg02
2a248     0B 2B 02 F6 | 	mov	local03, arg03
2a24c     14 2D 02 F6 | 	mov	local04, local02
2a250     08 26 06 F1 | 	add	local01, #8
2a254     13 13 02 FB | 	rdlong	arg01, local01
2a258     08 26 86 F1 | 	sub	local01, #8
2a25c     02 12 CE F7 | 	test	arg01, #2 wz
2a260     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a264     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a268     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a26c     01 FA 65 A6 |  if_e	neg	result1, #1
2a270     80 01 90 AD |  if_e	jmp	#LR__4136
2a274     08 26 06 F1 | 	add	local01, #8
2a278     13 FB 01 FB | 	rdlong	result1, local01
2a27c     08 26 86 F1 | 	sub	local01, #8
2a280     40 FA CD F7 | 	test	result1, #64 wz
2a284     68 00 90 AD |  if_e	jmp	#LR__4131
2a288     08 26 06 F1 | 	add	local01, #8
2a28c     13 15 02 FB | 	rdlong	arg02, local01
2a290     08 26 86 F1 | 	sub	local01, #8
2a294     80 14 CE F7 | 	test	arg02, #128 wz
2a298     54 00 90 AD |  if_e	jmp	#LR__4130
2a29c     30 26 06 F1 | 	add	local01, #48
2a2a0     13 2F 02 FB | 	rdlong	local05, local01
2a2a4     17 31 02 F6 | 	mov	local06, local05
2a2a8     30 26 86 F1 | 	sub	local01, #48
2a2ac     13 30 46 F7 | 	zerox	local06, #19
2a2b0     14 2E 46 F0 | 	shr	local05, #20
2a2b4     02 2E 66 F0 | 	shl	local05, #2
2a2b8     ED 2E 02 F1 | 	add	local05, __methods__
2a2bc     17 2F 02 FB | 	rdlong	local05, local05
2a2c0     13 13 02 F6 | 	mov	arg01, local01
2a2c4     00 14 06 F6 | 	mov	arg02, #0
2a2c8     02 16 06 F6 | 	mov	arg03, #2
2a2cc     F2 32 02 F6 | 	mov	local07, objptr
2a2d0     18 E5 01 F6 | 	mov	objptr, local06
2a2d4     2D 2E 62 FD | 	call	local05
2a2d8     19 E5 01 F6 | 	mov	objptr, local07
2a2dc     08 26 06 F1 | 	add	local01, #8
2a2e0     13 33 02 FB | 	rdlong	local07, local01
2a2e4     80 32 26 F5 | 	andn	local07, #128
2a2e8     13 33 62 FC | 	wrlong	local07, local01
2a2ec     08 26 86 F1 | 	sub	local01, #8
2a2f0                 | LR__4130
2a2f0                 | LR__4131
2a2f0     18 26 06 F1 | 	add	local01, #24
2a2f4     13 33 0A FB | 	rdlong	local07, local01 wz
2a2f8     18 26 86 F1 | 	sub	local01, #24
2a2fc     80 00 90 AD |  if_e	jmp	#LR__4133
2a300     18 26 06 F1 | 	add	local01, #24
2a304     13 2F 02 FB | 	rdlong	local05, local01
2a308     17 31 02 F6 | 	mov	local06, local05
2a30c     18 26 86 F1 | 	sub	local01, #24
2a310     13 30 46 F7 | 	zerox	local06, #19
2a314     14 2E 46 F0 | 	shr	local05, #20
2a318     02 2E 66 F0 | 	shl	local05, #2
2a31c     ED 2E 02 F1 | 	add	local05, __methods__
2a320     17 2F 02 FB | 	rdlong	local05, local05
2a324     14 15 02 F6 | 	mov	arg02, local02
2a328     15 17 02 F6 | 	mov	arg03, local03
2a32c     13 13 02 F6 | 	mov	arg01, local01
2a330     F2 32 02 F6 | 	mov	local07, objptr
2a334     18 E5 01 F6 | 	mov	objptr, local06
2a338     2D 2E 62 FD | 	call	local05
2a33c     19 E5 01 F6 | 	mov	objptr, local07
2a340     FD 34 02 F6 | 	mov	local08, result1
2a344     00 34 56 F2 | 	cmps	local08, #0 wc
2a348     2C 00 90 3D |  if_ae	jmp	#LR__4132
2a34c     08 26 06 F1 | 	add	local01, #8
2a350     13 33 02 FB | 	rdlong	local07, local01
2a354     20 32 46 F5 | 	or	local07, #32
2a358     13 33 62 FC | 	wrlong	local07, local01
2a35c     00 34 4E F2 | 	cmps	local08, #0 wz
2a360     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a364     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2a368     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a36c     01 FA 65 56 |  if_ne	neg	result1, #1
2a370     00 FA 05 A6 |  if_e	mov	result1, #0
2a374     7C 00 90 FD | 	jmp	#LR__4136
2a378                 | LR__4132
2a378     1A FB 01 F6 | 	mov	result1, local08
2a37c     74 00 90 FD | 	jmp	#LR__4136
2a380                 | LR__4133
2a380     1C 26 06 F1 | 	add	local01, #28
2a384     13 37 0A FB | 	rdlong	local09, local01 wz
2a388     1C 26 86 F1 | 	sub	local01, #28
2a38c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a390     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a394     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a398     01 FA 65 A6 |  if_e	neg	result1, #1
2a39c     54 00 90 AD |  if_e	jmp	#LR__4136
2a3a0     00 34 06 F6 | 	mov	local08, #0
2a3a4                 | LR__4134
2a3a4     01 2A 16 F2 | 	cmp	local03, #1 wc
2a3a8     44 00 90 CD |  if_b	jmp	#LR__4135
2a3ac     1B 31 02 F6 | 	mov	local06, local09
2a3b0     1B 2F 02 F6 | 	mov	local05, local09
2a3b4     13 30 46 F7 | 	zerox	local06, #19
2a3b8     14 2E 46 F0 | 	shr	local05, #20
2a3bc     02 2E 66 F0 | 	shl	local05, #2
2a3c0     ED 2E 02 F1 | 	add	local05, __methods__
2a3c4     17 2F 02 FB | 	rdlong	local05, local05
2a3c8     16 13 C2 FA | 	rdbyte	arg01, local04
2a3cc     13 15 02 F6 | 	mov	arg02, local01
2a3d0     F2 32 02 F6 | 	mov	local07, objptr
2a3d4     18 E5 01 F6 | 	mov	objptr, local06
2a3d8     01 2C 06 F1 | 	add	local04, #1
2a3dc     2D 2E 62 FD | 	call	local05
2a3e0     19 E5 01 F6 | 	mov	objptr, local07
2a3e4     FD 34 02 F1 | 	add	local08, result1
2a3e8     01 2A 86 F1 | 	sub	local03, #1
2a3ec     B4 FF 9F FD | 	jmp	#LR__4134
2a3f0                 | LR__4135
2a3f0     1A FB 01 F6 | 	mov	result1, local08
2a3f4                 | LR__4136
2a3f4     A7 F0 03 F6 | 	mov	ptra, fp
2a3f8     B2 00 A0 FD | 	call	#popregs_
2a3fc                 | __system___vfswrite_ret
2a3fc     2D 00 64 FD | 	ret
2a400                 | 
2a400                 | __system___vfsread
2a400     03 4A 05 F6 | 	mov	COUNT_, #3
2a404     A8 00 A0 FD | 	call	#pushregs_
2a408     28 F0 07 F1 | 	add	ptra, #40
2a40c     04 4E 05 F1 | 	add	fp, #4
2a410     A7 12 62 FC | 	wrlong	arg01, fp
2a414     04 4E 05 F1 | 	add	fp, #4
2a418     A7 14 62 FC | 	wrlong	arg02, fp
2a41c     04 4E 05 F1 | 	add	fp, #4
2a420     A7 16 62 FC | 	wrlong	arg03, fp
2a424     04 4E 85 F1 | 	sub	fp, #4
2a428     A7 FA 01 FB | 	rdlong	result1, fp
2a42c     14 4E 05 F1 | 	add	fp, #20
2a430     A7 FA 61 FC | 	wrlong	result1, fp
2a434     04 4E 05 F1 | 	add	fp, #4
2a438     A7 00 68 FC | 	wrlong	#0, fp
2a43c     1C 4E 85 F1 | 	sub	fp, #28
2a440     A7 12 02 FB | 	rdlong	arg01, fp
2a444     04 4E 85 F1 | 	sub	fp, #4
2a448     08 12 06 F1 | 	add	arg01, #8
2a44c     09 FB 01 FB | 	rdlong	result1, arg01
2a450     01 FA CD F7 | 	test	result1, #1 wz
2a454     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a458     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a45c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a460     01 FA 65 A6 |  if_e	neg	result1, #1
2a464     74 02 90 AD |  if_e	jmp	#LR__4146
2a468     04 4E 05 F1 | 	add	fp, #4
2a46c     A7 12 02 FB | 	rdlong	arg01, fp
2a470     04 4E 85 F1 | 	sub	fp, #4
2a474     14 12 06 F1 | 	add	arg01, #20
2a478     09 FB 09 FB | 	rdlong	result1, arg01 wz
2a47c     B8 00 90 AD |  if_e	jmp	#LR__4141
2a480     04 4E 05 F1 | 	add	fp, #4
2a484     A7 12 02 FB | 	rdlong	arg01, fp
2a488     09 17 02 F6 | 	mov	arg03, arg01
2a48c     14 16 06 F1 | 	add	arg03, #20
2a490     0B 27 02 FB | 	rdlong	local01, arg03
2a494     13 29 02 F6 | 	mov	local02, local01
2a498     13 26 46 F7 | 	zerox	local01, #19
2a49c     14 28 46 F0 | 	shr	local02, #20
2a4a0     02 28 66 F0 | 	shl	local02, #2
2a4a4     ED 28 02 F1 | 	add	local02, __methods__
2a4a8     14 29 02 FB | 	rdlong	local02, local02
2a4ac     04 4E 05 F1 | 	add	fp, #4
2a4b0     A7 14 02 FB | 	rdlong	arg02, fp
2a4b4     04 4E 05 F1 | 	add	fp, #4
2a4b8     A7 16 02 FB | 	rdlong	arg03, fp
2a4bc     0C 4E 85 F1 | 	sub	fp, #12
2a4c0     F2 2A 02 F6 | 	mov	local03, objptr
2a4c4     13 E5 01 F6 | 	mov	objptr, local01
2a4c8     2D 28 62 FD | 	call	local02
2a4cc     15 E5 01 F6 | 	mov	objptr, local03
2a4d0     10 4E 05 F1 | 	add	fp, #16
2a4d4     A7 FA 61 FC | 	wrlong	result1, fp
2a4d8     10 4E 85 F1 | 	sub	fp, #16
2a4dc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a4e0     44 00 90 3D |  if_ae	jmp	#LR__4140
2a4e4     04 4E 05 F1 | 	add	fp, #4
2a4e8     A7 2A 02 FB | 	rdlong	local03, fp
2a4ec     15 27 02 F6 | 	mov	local01, local03
2a4f0     08 2A 06 F1 | 	add	local03, #8
2a4f4     15 29 02 FB | 	rdlong	local02, local03
2a4f8     20 28 46 F5 | 	or	local02, #32
2a4fc     08 26 06 F1 | 	add	local01, #8
2a500     13 29 62 FC | 	wrlong	local02, local01
2a504     0C 4E 05 F1 | 	add	fp, #12
2a508     A7 12 0A FB | 	rdlong	arg01, fp wz
2a50c     10 4E 85 F1 | 	sub	fp, #16
2a510     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a514     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a518     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a51c     01 FA 65 56 |  if_ne	neg	result1, #1
2a520     00 FA 05 A6 |  if_e	mov	result1, #0
2a524     B4 01 90 FD | 	jmp	#LR__4146
2a528                 | LR__4140
2a528     10 4E 05 F1 | 	add	fp, #16
2a52c     A7 FA 01 FB | 	rdlong	result1, fp
2a530     10 4E 85 F1 | 	sub	fp, #16
2a534     A4 01 90 FD | 	jmp	#LR__4146
2a538                 | LR__4141
2a538     04 4E 05 F1 | 	add	fp, #4
2a53c     A7 12 02 FB | 	rdlong	arg01, fp
2a540     20 12 06 F1 | 	add	arg01, #32
2a544     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a548     14 4E 05 F1 | 	add	fp, #20
2a54c     A7 12 62 FC | 	wrlong	arg01, fp
2a550     18 4E 85 F1 | 	sub	fp, #24
2a554     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a558     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a55c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a560     01 FA 65 A6 |  if_e	neg	result1, #1
2a564     74 01 90 AD |  if_e	jmp	#LR__4146
2a568     04 4E 05 F1 | 	add	fp, #4
2a56c     A7 2A 02 FB | 	rdlong	local03, fp
2a570     04 4E 85 F1 | 	sub	fp, #4
2a574     28 2A 06 F1 | 	add	local03, #40
2a578     15 29 0A FB | 	rdlong	local02, local03 wz
2a57c     7C 00 90 AD |  if_e	jmp	#LR__4143
2a580     04 4E 05 F1 | 	add	fp, #4
2a584     A7 12 02 FB | 	rdlong	arg01, fp
2a588     09 2B 02 F6 | 	mov	local03, arg01
2a58c     28 2A 06 F1 | 	add	local03, #40
2a590     15 27 02 FB | 	rdlong	local01, local03
2a594     13 29 02 F6 | 	mov	local02, local01
2a598     13 26 46 F7 | 	zerox	local01, #19
2a59c     14 28 46 F0 | 	shr	local02, #20
2a5a0     02 28 66 F0 | 	shl	local02, #2
2a5a4     ED 28 02 F1 | 	add	local02, __methods__
2a5a8     14 29 02 FB | 	rdlong	local02, local02
2a5ac     20 4E 05 F1 | 	add	fp, #32
2a5b0     A7 16 02 F6 | 	mov	arg03, fp
2a5b4     24 4E 85 F1 | 	sub	fp, #36
2a5b8     00 15 06 F6 | 	mov	arg02, #256
2a5bc     F2 2A 02 F6 | 	mov	local03, objptr
2a5c0     13 E5 01 F6 | 	mov	objptr, local01
2a5c4     2D 28 62 FD | 	call	local02
2a5c8     15 E5 01 F6 | 	mov	objptr, local03
2a5cc     10 4E 05 F1 | 	add	fp, #16
2a5d0     A7 FA 61 FC | 	wrlong	result1, fp
2a5d4     00 FA 4D F2 | 	cmps	result1, #0 wz
2a5d8     10 4E 85 F1 | 	sub	fp, #16
2a5dc     1C 00 90 5D |  if_ne	jmp	#LR__4142
2a5e0     24 4E 05 F1 | 	add	fp, #36
2a5e4     A7 28 02 FB | 	rdlong	local02, fp
2a5e8     24 4E 85 F1 | 	sub	fp, #36
2a5ec     02 28 CE F7 | 	test	local02, #2 wz
2a5f0     20 4E 05 51 |  if_ne	add	fp, #32
2a5f4     A7 02 68 5C |  if_ne	wrlong	#1, fp
2a5f8     20 4E 85 51 |  if_ne	sub	fp, #32
2a5fc                 | LR__4142
2a5fc                 | LR__4143
2a5fc     10 4E 05 F1 | 	add	fp, #16
2a600     A7 00 68 FC | 	wrlong	#0, fp
2a604     10 4E 85 F1 | 	sub	fp, #16
2a608                 | LR__4144
2a608     0C 4E 05 F1 | 	add	fp, #12
2a60c     A7 2A 02 FB | 	rdlong	local03, fp
2a610     0C 4E 85 F1 | 	sub	fp, #12
2a614     01 2A 16 F2 | 	cmp	local03, #1 wc
2a618     B4 00 90 CD |  if_b	jmp	#LR__4145
2a61c     18 4E 05 F1 | 	add	fp, #24
2a620     A7 28 02 FB | 	rdlong	local02, fp
2a624     14 2B 02 F6 | 	mov	local03, local02
2a628     13 2A 46 F7 | 	zerox	local03, #19
2a62c     14 28 46 F0 | 	shr	local02, #20
2a630     02 28 66 F0 | 	shl	local02, #2
2a634     ED 28 02 F1 | 	add	local02, __methods__
2a638     14 29 02 FB | 	rdlong	local02, local02
2a63c     14 4E 85 F1 | 	sub	fp, #20
2a640     A7 12 02 FB | 	rdlong	arg01, fp
2a644     04 4E 85 F1 | 	sub	fp, #4
2a648     F2 26 02 F6 | 	mov	local01, objptr
2a64c     15 E5 01 F6 | 	mov	objptr, local03
2a650     2D 28 62 FD | 	call	local02
2a654     13 E5 01 F6 | 	mov	objptr, local01
2a658     14 4E 05 F1 | 	add	fp, #20
2a65c     A7 FA 61 FC | 	wrlong	result1, fp
2a660     14 4E 85 F1 | 	sub	fp, #20
2a664     00 FA 55 F2 | 	cmps	result1, #0 wc
2a668     64 00 90 CD |  if_b	jmp	#LR__4145
2a66c     1C 4E 05 F1 | 	add	fp, #28
2a670     A7 2A 02 FB | 	rdlong	local03, fp
2a674     15 29 02 F6 | 	mov	local02, local03
2a678     01 28 06 F1 | 	add	local02, #1
2a67c     A7 28 62 FC | 	wrlong	local02, fp
2a680     08 4E 85 F1 | 	sub	fp, #8
2a684     A7 28 02 FB | 	rdlong	local02, fp
2a688     15 29 42 FC | 	wrbyte	local02, local03
2a68c     04 4E 85 F1 | 	sub	fp, #4
2a690     A7 2A 02 FB | 	rdlong	local03, fp
2a694     01 2A 06 F1 | 	add	local03, #1
2a698     A7 2A 62 FC | 	wrlong	local03, fp
2a69c     04 4E 85 F1 | 	sub	fp, #4
2a6a0     A7 2A 02 FB | 	rdlong	local03, fp
2a6a4     01 2A 86 F1 | 	sub	local03, #1
2a6a8     A7 2A 62 FC | 	wrlong	local03, fp
2a6ac     14 4E 05 F1 | 	add	fp, #20
2a6b0     A7 2A 0A FB | 	rdlong	local03, fp wz
2a6b4     20 4E 85 F1 | 	sub	fp, #32
2a6b8     4C FF 9F AD |  if_e	jmp	#LR__4144
2a6bc     14 4E 05 F1 | 	add	fp, #20
2a6c0     A7 28 02 FB | 	rdlong	local02, fp
2a6c4     14 4E 85 F1 | 	sub	fp, #20
2a6c8     0A 28 0E F2 | 	cmp	local02, #10 wz
2a6cc     38 FF 9F 5D |  if_ne	jmp	#LR__4144
2a6d0                 | LR__4145
2a6d0     10 4E 05 F1 | 	add	fp, #16
2a6d4     A7 FA 01 FB | 	rdlong	result1, fp
2a6d8     10 4E 85 F1 | 	sub	fp, #16
2a6dc                 | LR__4146
2a6dc     A7 F0 03 F6 | 	mov	ptra, fp
2a6e0     B2 00 A0 FD | 	call	#popregs_
2a6e4                 | __system___vfsread_ret
2a6e4     2D 00 64 FD | 	ret
2a6e8                 | 
2a6e8                 | __system____default_filbuf
2a6e8     04 4A 05 F6 | 	mov	COUNT_, #4
2a6ec     A8 00 A0 FD | 	call	#pushregs_
2a6f0     09 27 02 F6 | 	mov	local01, arg01
2a6f4     13 29 02 FB | 	rdlong	local02, local01
2a6f8     0C 28 06 F1 | 	add	local02, #12
2a6fc     14 FB 09 FB | 	rdlong	result1, local02 wz
2a700     0C 28 86 F1 | 	sub	local02, #12
2a704     20 00 90 5D |  if_ne	jmp	#LR__4150
2a708     14 28 06 F1 | 	add	local02, #20
2a70c     14 FB 01 F6 | 	mov	result1, local02
2a710     04 28 86 F1 | 	sub	local02, #4
2a714     14 FB 61 FC | 	wrlong	result1, local02
2a718     04 28 86 F1 | 	sub	local02, #4
2a71c     02 00 80 FF 
2a720     14 01 68 FC | 	wrlong	##1024, local02
2a724     0C 28 86 F1 | 	sub	local02, #12
2a728                 | LR__4150
2a728     14 26 06 F1 | 	add	local01, #20
2a72c     13 2B 02 FB | 	rdlong	local03, local01
2a730     15 2D 02 F6 | 	mov	local04, local03
2a734     14 26 86 F1 | 	sub	local01, #20
2a738     13 2C 46 F7 | 	zerox	local04, #19
2a73c     14 2A 46 F0 | 	shr	local03, #20
2a740     02 2A 66 F0 | 	shl	local03, #2
2a744     ED 2A 02 F1 | 	add	local03, __methods__
2a748     15 2B 02 FB | 	rdlong	local03, local03
2a74c     10 28 06 F1 | 	add	local02, #16
2a750     14 15 02 FB | 	rdlong	arg02, local02
2a754     04 28 86 F1 | 	sub	local02, #4
2a758     14 17 02 FB | 	rdlong	arg03, local02
2a75c     0C 28 86 F1 | 	sub	local02, #12
2a760     13 13 02 F6 | 	mov	arg01, local01
2a764     F2 26 02 F6 | 	mov	local01, objptr
2a768     16 E5 01 F6 | 	mov	objptr, local04
2a76c     2D 2A 62 FD | 	call	local03
2a770     13 E5 01 F6 | 	mov	objptr, local01
2a774     FD 2C 02 F6 | 	mov	local04, result1
2a778     00 2C 56 F2 | 	cmps	local04, #0 wc
2a77c     01 FA 65 C6 |  if_b	neg	result1, #1
2a780     28 00 90 CD |  if_b	jmp	#LR__4151
2a784     14 2D 62 FC | 	wrlong	local04, local02
2a788     10 28 06 F1 | 	add	local02, #16
2a78c     14 2B 02 FB | 	rdlong	local03, local02
2a790     0C 28 86 F1 | 	sub	local02, #12
2a794     14 2B 62 FC | 	wrlong	local03, local02
2a798     04 28 06 F1 | 	add	local02, #4
2a79c     14 2B 02 FB | 	rdlong	local03, local02
2a7a0     01 2A 46 F5 | 	or	local03, #1
2a7a4     14 2B 62 FC | 	wrlong	local03, local02
2a7a8     16 FB 01 F6 | 	mov	result1, local04
2a7ac                 | LR__4151
2a7ac     A7 F0 03 F6 | 	mov	ptra, fp
2a7b0     B2 00 A0 FD | 	call	#popregs_
2a7b4                 | __system____default_filbuf_ret
2a7b4     2D 00 64 FD | 	ret
2a7b8                 | 
2a7b8                 | __system__getlower_1131
2a7b8     41 12 56 F2 | 	cmps	arg01, #65 wc
2a7bc     10 00 90 CD |  if_b	jmp	#LR__4160
2a7c0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2a7c4     09 FB 01 C6 |  if_b	mov	result1, arg01
2a7c8     20 FA 05 C1 |  if_b	add	result1, #32
2a7cc     04 00 90 CD |  if_b	jmp	#__system__getlower_1131_ret
2a7d0                 | LR__4160
2a7d0     09 FB 01 F6 | 	mov	result1, arg01
2a7d4                 | __system__getlower_1131_ret
2a7d4     2D 00 64 FD | 	ret
2a7d8                 | 
2a7d8                 | __system___pat_match
2a7d8     08 4A 05 F6 | 	mov	COUNT_, #8
2a7dc     A8 00 A0 FD | 	call	#pushregs_
2a7e0     09 27 02 F6 | 	mov	local01, arg01
2a7e4                 | LR__4170
2a7e4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2a7e8     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2a7ec     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2a7f0     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2a7f4     2C 00 90 AD |  if_e	jmp	#LR__4171
2a7f8     0A 13 C2 FA | 	rdbyte	arg01, arg02
2a7fc     B8 FF BF FD | 	call	#__system__getlower_1131
2a800     FD 2A 02 F6 | 	mov	local03, result1
2a804     13 13 C2 FA | 	rdbyte	arg01, local01
2a808     AC FF BF FD | 	call	#__system__getlower_1131
2a80c     15 FB 09 F2 | 	cmp	result1, local03 wz
2a810     00 FA 05 56 |  if_ne	mov	result1, #0
2a814     FC 00 90 5D |  if_ne	jmp	#LR__4179
2a818     01 26 06 F1 | 	add	local01, #1
2a81c     01 14 06 F1 | 	add	arg02, #1
2a820     C0 FF 9F FD | 	jmp	#LR__4170
2a824                 | LR__4171
2a824     0A 2B C2 FA | 	rdbyte	local03, arg02
2a828     2A 2A 0E F2 | 	cmp	local03, #42 wz
2a82c     D4 00 90 5D |  if_ne	jmp	#LR__4178
2a830     01 14 06 F1 | 	add	arg02, #1
2a834     0A 29 C2 FA | 	rdbyte	local02, arg02
2a838     01 14 86 F1 | 	sub	arg02, #1
2a83c     2E 28 0E F2 | 	cmp	local02, #46 wz
2a840     28 00 90 5D |  if_ne	jmp	#LR__4172
2a844     02 14 06 F1 | 	add	arg02, #2
2a848     0A 29 C2 FA | 	rdbyte	local02, arg02
2a84c     02 14 86 F1 | 	sub	arg02, #2
2a850     2A 28 0E F2 | 	cmp	local02, #42 wz
2a854     03 14 06 A1 |  if_e	add	arg02, #3
2a858     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2a85c     03 14 86 A1 |  if_e	sub	arg02, #3
2a860     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2a864     01 FA 05 A6 |  if_e	mov	result1, #1
2a868     A8 00 90 AD |  if_e	jmp	#LR__4179
2a86c                 | LR__4172
2a86c     01 14 06 F1 | 	add	arg02, #1
2a870     00 30 06 F6 | 	mov	local06, #0
2a874     97 1E 48 FB | 	callpa	#(@LR__4175-@LR__4173)>>2,fcache_load_ptr_
2a878                 | LR__4173
2a878     18 33 02 F6 | 	mov	local07, local06
2a87c     0A 33 02 F1 | 	add	local07, arg02
2a880     19 33 CA FA | 	rdbyte	local07, local07 wz
2a884     18 2F 02 56 |  if_ne	mov	local05, local06
2a888     01 2E 06 51 |  if_ne	add	local05, #1
2a88c     17 31 02 56 |  if_ne	mov	local06, local05
2a890     E4 FF 9F 5D |  if_ne	jmp	#LR__4173
2a894     00 34 06 F6 | 	mov	local08, #0
2a898                 | LR__4174
2a898     1A 33 02 F6 | 	mov	local07, local08
2a89c     13 33 02 F1 | 	add	local07, local01
2a8a0     19 33 CA FA | 	rdbyte	local07, local07 wz
2a8a4     1A 2F 02 56 |  if_ne	mov	local05, local08
2a8a8     01 2E 06 51 |  if_ne	add	local05, #1
2a8ac     17 35 02 56 |  if_ne	mov	local08, local05
2a8b0     E4 FF 9F 5D |  if_ne	jmp	#LR__4174
2a8b4                 | LR__4175
2a8b4     18 35 52 F2 | 	cmps	local08, local06 wc
2a8b8     00 FA 05 C6 |  if_b	mov	result1, #0
2a8bc     54 00 90 CD |  if_b	jmp	#LR__4179
2a8c0     1A 29 02 F6 | 	mov	local02, local08
2a8c4     18 29 82 F1 | 	sub	local02, local06
2a8c8     14 27 02 F1 | 	add	local01, local02
2a8cc                 | LR__4176
2a8cc     01 30 56 F2 | 	cmps	local06, #1 wc
2a8d0     30 00 90 CD |  if_b	jmp	#LR__4177
2a8d4     13 13 C2 FA | 	rdbyte	arg01, local01
2a8d8     DC FE BF FD | 	call	#__system__getlower_1131
2a8dc     FD 34 02 F6 | 	mov	local08, result1
2a8e0     0A 13 C2 FA | 	rdbyte	arg01, arg02
2a8e4     D0 FE BF FD | 	call	#__system__getlower_1131
2a8e8     FD 34 0A F2 | 	cmp	local08, result1 wz
2a8ec     00 FA 05 56 |  if_ne	mov	result1, #0
2a8f0     20 00 90 5D |  if_ne	jmp	#LR__4179
2a8f4     01 26 06 F1 | 	add	local01, #1
2a8f8     01 14 06 F1 | 	add	arg02, #1
2a8fc     01 30 86 F1 | 	sub	local06, #1
2a900     C8 FF 9F FD | 	jmp	#LR__4176
2a904                 | LR__4177
2a904                 | LR__4178
2a904     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2a908     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2a90c     01 FA 05 A6 |  if_e	mov	result1, #1
2a910     00 FA 05 56 |  if_ne	mov	result1, #0
2a914                 | LR__4179
2a914     A7 F0 03 F6 | 	mov	ptra, fp
2a918     B2 00 A0 FD | 	call	#popregs_
2a91c                 | __system___pat_match_ret
2a91c     2D 00 64 FD | 	ret
2a920                 | 
2a920                 | _fatfs_cc_ff_uni2oem
2a920     00 00 06 F6 | 	mov	_var01, #0
2a924     80 12 16 F2 | 	cmp	arg01, #128 wc
2a928     09 01 02 C6 |  if_b	mov	_var01, arg01
2a92c     58 00 90 CD |  if_b	jmp	#LR__4184
2a930     80 00 00 FF 
2a934     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2a938     4C 00 90 3D |  if_ae	jmp	#LR__4183
2a93c     0A FB 31 F9 | 	getword	result1, arg02, #0
2a940     01 00 00 FF 
2a944     52 FB 0D F2 | 	cmp	result1, ##850 wz
2a948     3C 00 90 5D |  if_ne	jmp	#LR__4183
2a94c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2a94c     00 00 06 F6 | 	mov	_var01, #0
2a950     97 14 48 FB | 	callpa	#(@LR__4181-@LR__4180)>>2,fcache_load_ptr_
2a954                 | LR__4180
2a954     00 FB 31 F9 | 	getword	result1, _var01, #0
2a958     80 FA 15 F2 | 	cmp	result1, #128 wc
2a95c     1C 00 90 3D |  if_ae	jmp	#LR__4182
2a960     00 FB 31 F9 | 	getword	result1, _var01, #0
2a964     01 FA 65 F0 | 	shl	result1, #1
2a968     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2a96c     FD FA E1 FA | 	rdword	result1, result1
2a970     FD 12 0A F2 | 	cmp	arg01, result1 wz
2a974     01 00 06 51 |  if_ne	add	_var01, #1
2a978     D8 FF 9F 5D |  if_ne	jmp	#LR__4180
2a97c                 | LR__4181
2a97c                 | LR__4182
2a97c     00 01 32 F9 | 	getword	_var01, _var01, #0
2a980     80 00 06 F1 | 	add	_var01, #128
2a984     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2a988                 | LR__4183
2a988                 | LR__4184
2a988                 | ' 			c = (c + 0x80) & 0xFF;
2a988                 | ' 		}
2a988                 | ' 	}
2a988                 | ' 
2a988                 | ' 	return c;
2a988     00 FB 01 F6 | 	mov	result1, _var01
2a98c                 | _fatfs_cc_ff_uni2oem_ret
2a98c     2D 00 64 FD | 	ret
2a990                 | 
2a990                 | _fatfs_cc_ff_oem2uni
2a990     00 00 06 F6 | 	mov	_var01, #0
2a994     09 FB 31 F9 | 	getword	result1, arg01, #0
2a998     80 FA 15 F2 | 	cmp	result1, #128 wc
2a99c     09 01 02 C6 |  if_b	mov	_var01, arg01
2a9a0     2C 00 90 CD |  if_b	jmp	#LR__4191
2a9a4     0A 15 32 F9 | 	getword	arg02, arg02, #0
2a9a8     01 00 00 FF 
2a9ac     52 15 0E F2 | 	cmp	arg02, ##850 wz
2a9b0     1C 00 90 5D |  if_ne	jmp	#LR__4190
2a9b4     09 FB 31 F9 | 	getword	result1, arg01, #0
2a9b8     00 FB 15 F2 | 	cmp	result1, #256 wc
2a9bc     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2a9c0     80 12 86 C1 |  if_b	sub	arg01, #128
2a9c4     01 12 66 C0 |  if_b	shl	arg01, #1
2a9c8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2a9cc     09 01 E2 CA |  if_b	rdword	_var01, arg01
2a9d0                 | LR__4190
2a9d0                 | LR__4191
2a9d0                 | ' 		}
2a9d0                 | ' 	}
2a9d0                 | ' 
2a9d0                 | ' 	return c;
2a9d0     00 FB 01 F6 | 	mov	result1, _var01
2a9d4                 | _fatfs_cc_ff_oem2uni_ret
2a9d4     2D 00 64 FD | 	ret
2a9d8                 | 
2a9d8                 | _fatfs_cc_ff_wtoupper
2a9d8     09 01 02 F6 | 	mov	_var01, arg01
2a9dc     80 00 00 FF 
2a9e0     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2a9e4     60 01 90 3D |  if_ae	jmp	#LR__4213
2a9e8     00 03 02 F6 | 	mov	_var02, _var01
2a9ec     01 01 32 F9 | 	getword	_var01, _var02, #0
2a9f0     08 00 00 FF 
2a9f4     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2a9f8     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2a9fc     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2aa00     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2aa04     01 00 00 3F 
2aa08     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2aa0c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2aa10     01 00 00 3F 
2aa14     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2aa18     02 07 02 F6 | 	mov	_var04, _var03
2aa1c                 | ' 		uc = (WORD)uni;
2aa1c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2aa1c                 | ' 		for (;;) {
2aa1c                 | LR__4200
2aa1c     03 09 E2 FA | 	rdword	_var05, _var04
2aa20     04 05 02 F6 | 	mov	_var03, _var05
2aa24     0F 04 4E F7 | 	zerox	_var03, #15 wz
2aa28     02 06 06 F1 | 	add	_var04, #2
2aa2c     14 01 90 AD |  if_e	jmp	#LR__4212
2aa30     01 05 32 F9 | 	getword	_var03, _var02, #0
2aa34     04 01 32 F9 | 	getword	_var01, _var05, #0
2aa38     00 05 12 F2 | 	cmp	_var03, _var01 wc
2aa3c     04 01 90 CD |  if_b	jmp	#LR__4212
2aa40     03 0B E2 FA | 	rdword	_var06, _var04
2aa44     05 0D 32 F9 | 	getword	_var07, _var06, #0
2aa48     08 0C 46 F0 | 	shr	_var07, #8
2aa4c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2aa50     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2aa54     01 05 32 F9 | 	getword	_var03, _var02, #0
2aa58     04 0F 32 F9 | 	getword	_var08, _var05, #0
2aa5c     05 01 32 F9 | 	getword	_var01, _var06, #0
2aa60     00 0F 02 F1 | 	add	_var08, _var01
2aa64     07 05 52 F2 | 	cmps	_var03, _var08 wc
2aa68     02 06 06 F1 | 	add	_var04, #2
2aa6c     C4 00 90 3D |  if_ae	jmp	#LR__4211
2aa70                 | ' 				switch (cmd) {
2aa70     06 11 32 F9 | 	getword	_var09, _var07, #0
2aa74     09 10 26 F3 | 	fle	_var09, #9
2aa78     30 10 62 FD | 	jmprel	_var09
2aa7c                 | LR__4201
2aa7c     24 00 90 FD | 	jmp	#LR__4202
2aa80     3C 00 90 FD | 	jmp	#LR__4203
2aa84     54 00 90 FD | 	jmp	#LR__4204
2aa88     5C 00 90 FD | 	jmp	#LR__4205
2aa8c     64 00 90 FD | 	jmp	#LR__4206
2aa90     6C 00 90 FD | 	jmp	#LR__4207
2aa94     74 00 90 FD | 	jmp	#LR__4208
2aa98     7C 00 90 FD | 	jmp	#LR__4209
2aa9c     84 00 90 FD | 	jmp	#LR__4210
2aaa0     A0 00 90 FD | 	jmp	#LR__4212
2aaa4                 | LR__4202
2aaa4     01 03 32 F9 | 	getword	_var02, _var02, #0
2aaa8     04 09 32 F9 | 	getword	_var05, _var05, #0
2aaac     04 03 82 F1 | 	sub	_var02, _var05
2aab0     01 02 66 F0 | 	shl	_var02, #1
2aab4     03 03 02 F1 | 	add	_var02, _var04
2aab8     01 03 E2 FA | 	rdword	_var02, _var02
2aabc     84 00 90 FD | 	jmp	#LR__4212
2aac0                 | LR__4203
2aac0     01 05 32 F9 | 	getword	_var03, _var02, #0
2aac4     01 03 32 F9 | 	getword	_var02, _var02, #0
2aac8     04 09 32 F9 | 	getword	_var05, _var05, #0
2aacc     04 03 82 F1 | 	sub	_var02, _var05
2aad0     01 02 06 F5 | 	and	_var02, #1
2aad4     02 03 C2 F2 | 	subr	_var02, _var03
2aad8     68 00 90 FD | 	jmp	#LR__4212
2aadc                 | LR__4204
2aadc     01 03 32 F9 | 	getword	_var02, _var02, #0
2aae0     10 02 86 F1 | 	sub	_var02, #16
2aae4     5C 00 90 FD | 	jmp	#LR__4212
2aae8                 | LR__4205
2aae8     01 03 32 F9 | 	getword	_var02, _var02, #0
2aaec     20 02 86 F1 | 	sub	_var02, #32
2aaf0     50 00 90 FD | 	jmp	#LR__4212
2aaf4                 | LR__4206
2aaf4     01 03 32 F9 | 	getword	_var02, _var02, #0
2aaf8     30 02 86 F1 | 	sub	_var02, #48
2aafc     44 00 90 FD | 	jmp	#LR__4212
2ab00                 | LR__4207
2ab00     01 03 32 F9 | 	getword	_var02, _var02, #0
2ab04     1A 02 86 F1 | 	sub	_var02, #26
2ab08     38 00 90 FD | 	jmp	#LR__4212
2ab0c                 | LR__4208
2ab0c     01 03 32 F9 | 	getword	_var02, _var02, #0
2ab10     08 02 06 F1 | 	add	_var02, #8
2ab14     2C 00 90 FD | 	jmp	#LR__4212
2ab18                 | LR__4209
2ab18     01 03 32 F9 | 	getword	_var02, _var02, #0
2ab1c     50 02 86 F1 | 	sub	_var02, #80
2ab20     20 00 90 FD | 	jmp	#LR__4212
2ab24                 | LR__4210
2ab24     01 03 32 F9 | 	getword	_var02, _var02, #0
2ab28     0E 00 00 FF 
2ab2c     60 02 86 F1 | 	sub	_var02, ##7264
2ab30                 | ' 				}
2ab30                 | ' 				break;
2ab30     10 00 90 FD | 	jmp	#LR__4212
2ab34                 | LR__4211
2ab34     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2ab38     02 0A 06 AA |  if_e	mul	_var06, #2
2ab3c     05 07 02 A1 |  if_e	add	_var04, _var06
2ab40     D8 FE 9F FD | 	jmp	#LR__4200
2ab44                 | LR__4212
2ab44     01 01 32 F9 | 	getword	_var01, _var02, #0
2ab48                 | LR__4213
2ab48                 | ' 		}
2ab48                 | ' 		uni = uc;
2ab48                 | ' 	}
2ab48                 | ' 
2ab48                 | ' 	return uni;
2ab48     00 FB 01 F6 | 	mov	result1, _var01
2ab4c                 | _fatfs_cc_ff_wtoupper_ret
2ab4c     2D 00 64 FD | 	ret
2ab50                 | 
2ab50                 | _fatfs_cc_strncpy
2ab50     09 01 02 F6 | 	mov	_var01, arg01
2ab54     97 12 48 FB | 	callpa	#(@LR__4221-@LR__4220)>>2,fcache_load_ptr_
2ab58                 | ' 
2ab58                 | ' 	dscan = dst;
2ab58                 | ' 	sscan = src;
2ab58                 | ' 	count = n;
2ab58                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2ab58                 | LR__4220
2ab58     01 16 86 F1 | 	sub	arg03, #1
2ab5c     00 16 56 F2 | 	cmps	arg03, #0 wc
2ab60     18 00 90 CD |  if_b	jmp	#LR__4222
2ab64     0A FB C1 FA | 	rdbyte	result1, arg02
2ab68     00 FB 41 FC | 	wrbyte	result1, _var01
2ab6c     01 14 06 F1 | 	add	arg02, #1
2ab70     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2ab74                 | ' 		continue;
2ab74     01 00 06 F1 | 	add	_var01, #1
2ab78     DC FF 9F 5D |  if_ne	jmp	#LR__4220
2ab7c                 | LR__4221
2ab7c                 | LR__4222
2ab7c     97 0C 48 FB | 	callpa	#(@LR__4224-@LR__4223)>>2,fcache_load_ptr_
2ab80                 | ' 	while (--count >= 0)
2ab80                 | LR__4223
2ab80     01 16 86 F1 | 	sub	arg03, #1
2ab84     00 16 56 F2 | 	cmps	arg03, #0 wc
2ab88     00 03 02 36 |  if_ae	mov	_var02, _var01
2ab8c     01 00 06 31 |  if_ae	add	_var01, #1
2ab90     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2ab94     E8 FF 9F 3D |  if_ae	jmp	#LR__4223
2ab98                 | LR__4224
2ab98                 | ' 		*dscan++ = '\0';
2ab98                 | ' 	return(dst);
2ab98     09 FB 01 F6 | 	mov	result1, arg01
2ab9c                 | _fatfs_cc_strncpy_ret
2ab9c     2D 00 64 FD | 	ret
2aba0                 | 
2aba0                 | _fatfs_cc_memcmp
2aba0                 | ' 	for (n = size; n > 0; n--)
2aba0     00 16 0E F2 | 	cmp	arg03, #0 wz
2aba4     28 00 90 AD |  if_e	jmp	#LR__4231
2aba8                 | LR__4230
2aba8     09 01 C2 FA | 	rdbyte	_var01, arg01
2abac     0A 03 C2 FA | 	rdbyte	_var02, arg02
2abb0     01 01 0A F2 | 	cmp	_var01, _var02 wz
2abb4     01 12 06 A1 |  if_e	add	arg01, #1
2abb8     01 14 06 A1 |  if_e	add	arg02, #1
2abbc                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2abbc     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2abc0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2abc4     01 FB 81 51 |  if_ne	sub	result1, _var02
2abc8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2abcc     F6 17 6E FB | 	djnz	arg03, #LR__4230
2abd0                 | LR__4231
2abd0                 | ' 
2abd0                 | ' 	return(0);
2abd0     00 FA 05 F6 | 	mov	result1, #0
2abd4                 | _fatfs_cc_memcmp_ret
2abd4     2D 00 64 FD | 	ret
2abd8                 | 
2abd8                 | _fatfs_cc_strncmp
2abd8     09 01 0A F6 | 	mov	_var01, arg01 wz
2abdc     14 00 90 5D |  if_ne	jmp	#LR__4240
2abe0                 | ' 		return scan2 ? -1 : 0;
2abe0     00 14 0E F2 | 	cmp	arg02, #0 wz
2abe4     01 02 66 56 |  if_ne	neg	_var02, #1
2abe8     00 02 06 A6 |  if_e	mov	_var02, #0
2abec     01 FB 01 F6 | 	mov	result1, _var02
2abf0     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2abf4                 | LR__4240
2abf4     00 14 0E F2 | 	cmp	arg02, #0 wz
2abf8     01 FA 05 A6 |  if_e	mov	result1, #1
2abfc     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ac00     0B 05 02 F6 | 	mov	_var03, arg03
2ac04     97 16 48 FB | 	callpa	#(@LR__4242-@LR__4241)>>2,fcache_load_ptr_
2ac08                 | ' 	count = n;
2ac08                 | ' 	do {
2ac08                 | LR__4241
2ac08     00 07 C2 FA | 	rdbyte	_var04, _var01
2ac0c     0A 09 02 F6 | 	mov	_var05, arg02
2ac10     04 0B C2 FA | 	rdbyte	_var06, _var05
2ac14     01 04 86 F1 | 	sub	_var03, #1
2ac18     00 04 56 F2 | 	cmps	_var03, #0 wc
2ac1c     01 00 06 F1 | 	add	_var01, #1
2ac20     01 14 06 F1 | 	add	arg02, #1
2ac24     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2ac28     08 00 90 2D |  if_nc_and_z	jmp	#LR__4243
2ac2c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2ac30     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4241
2ac34                 | LR__4242
2ac34                 | LR__4243
2ac34     00 04 56 F2 | 	cmps	_var03, #0 wc
2ac38                 | ' 		return(0);
2ac38     00 FA 05 C6 |  if_b	mov	result1, #0
2ac3c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2ac40     05 07 0A F2 | 	cmp	_var04, _var06 wz
2ac44                 | ' 		return(0);
2ac44     00 FA 05 A6 |  if_e	mov	result1, #0
2ac48     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ac4c     00 06 0E F2 | 	cmp	_var04, #0 wz
2ac50                 | ' 		return(-1);
2ac50     01 FA 65 A6 |  if_e	neg	result1, #1
2ac54     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ac58     00 0A 0E F2 | 	cmp	_var06, #0 wz
2ac5c                 | ' 		return(1);
2ac5c     01 FA 05 A6 |  if_e	mov	result1, #1
2ac60                 | ' 		return(c1 - c2);
2ac60     03 FB 01 56 |  if_ne	mov	result1, _var04
2ac64     05 FB 81 51 |  if_ne	sub	result1, _var06
2ac68                 | _fatfs_cc_strncmp_ret
2ac68     2D 00 64 FD | 	ret
2ac6c                 | 
2ac6c                 | _fatfs_cc_strchr
2ac6c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2ac6c                 | ' 	while ((c = *s++) != (char) charwanted)
2ac6c                 | LR__4250
2ac6c     09 01 02 F6 | 	mov	_var01, arg01
2ac70     00 03 C2 FA | 	rdbyte	_var02, _var01
2ac74     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2ac78     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2ac7c     03 05 0A F2 | 	cmp	_var03, _var04 wz
2ac80     01 12 06 F1 | 	add	arg01, #1
2ac84     14 00 90 AD |  if_e	jmp	#LR__4251
2ac88     01 05 02 F6 | 	mov	_var03, _var02
2ac8c     07 04 4E F7 | 	zerox	_var03, #7 wz
2ac90     00 FA 05 A6 |  if_e	mov	result1, #0
2ac94     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2ac98     D0 FF 9F FD | 	jmp	#LR__4250
2ac9c                 | LR__4251
2ac9c                 | ' 	return((char *)--s);
2ac9c     01 12 86 F1 | 	sub	arg01, #1
2aca0     09 FB 01 F6 | 	mov	result1, arg01
2aca4                 | _fatfs_cc_strchr_ret
2aca4     2D 00 64 FD | 	ret
2aca8                 | 
2aca8                 | _fatfs_cc_disk_initialize
2aca8     04 4A 05 F6 | 	mov	COUNT_, #4
2acac     A8 00 A0 FD | 	call	#pushregs_
2acb0     40 F0 07 F1 | 	add	ptra, #64
2acb4     04 4E 05 F1 | 	add	fp, #4
2acb8     A7 12 42 FC | 	wrbyte	arg01, fp
2acbc     01 00 00 FF 
2acc0     14 E4 05 F1 | 	add	objptr, ##532
2acc4     F2 18 02 FB | 	rdlong	arg04, objptr
2acc8     2C 4E 05 F1 | 	add	fp, #44
2accc     A7 18 62 FC | 	wrlong	arg04, fp
2acd0     04 E4 85 F1 | 	sub	objptr, #4
2acd4     F2 18 02 FB | 	rdlong	arg04, objptr
2acd8     04 4E 05 F1 | 	add	fp, #4
2acdc     A7 18 62 FC | 	wrlong	arg04, fp
2ace0     08 E4 05 F1 | 	add	objptr, #8
2ace4     F2 18 02 FB | 	rdlong	arg04, objptr
2ace8     04 4E 05 F1 | 	add	fp, #4
2acec     A7 18 62 FC | 	wrlong	arg04, fp
2acf0     04 E4 05 F1 | 	add	objptr, #4
2acf4     F2 18 02 FB | 	rdlong	arg04, objptr
2acf8     04 4E 05 F1 | 	add	fp, #4
2acfc     A7 18 62 FC | 	wrlong	arg04, fp
2ad00     04 E4 05 F1 | 	add	objptr, #4
2ad04     F2 02 48 FC | 	wrbyte	#1, objptr
2ad08     01 00 00 FF 
2ad0c     20 E4 85 F1 | 	sub	objptr, ##544
2ad10     38 4E 85 F1 | 	sub	fp, #56
2ad14     A7 18 CA FA | 	rdbyte	arg04, fp wz
2ad18     04 4E 85 F1 | 	sub	fp, #4
2ad1c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ad1c                 | '             return RES_NOTRDY;
2ad1c     03 FA 05 56 |  if_ne	mov	result1, #3
2ad20     D8 05 90 5D |  if_ne	jmp	#LR__4278
2ad24     13 00 00 FF 
2ad28     10 13 06 F6 | 	mov	arg01, ##10000
2ad2c     44 95 BF FD | 	call	#__system___waitus
2ad30     30 4E 05 F1 | 	add	fp, #48
2ad34     A7 12 02 FB | 	rdlong	arg01, fp
2ad38     09 01 08 FC | 	wrpin	#0, arg01
2ad3c     04 4E 05 F1 | 	add	fp, #4
2ad40     A7 12 02 FB | 	rdlong	arg01, fp
2ad44     09 01 08 FC | 	wrpin	#0, arg01
2ad48     04 4E 05 F1 | 	add	fp, #4
2ad4c     A7 12 02 FB | 	rdlong	arg01, fp
2ad50     09 01 08 FC | 	wrpin	#0, arg01
2ad54     04 4E 05 F1 | 	add	fp, #4
2ad58     A7 12 02 FB | 	rdlong	arg01, fp
2ad5c     09 00 80 FF 
2ad60     09 01 08 FC | 	wrpin	##4608, arg01
2ad64     0C 4E 85 F1 | 	sub	fp, #12
2ad68     A7 12 02 FB | 	rdlong	arg01, fp
2ad6c     59 12 62 FD | 	drvh	arg01
2ad70     04 4E 05 F1 | 	add	fp, #4
2ad74     A7 12 02 FB | 	rdlong	arg01, fp
2ad78     59 12 62 FD | 	drvh	arg01
2ad7c     04 4E 05 F1 | 	add	fp, #4
2ad80     A7 12 02 FB | 	rdlong	arg01, fp
2ad84     59 12 62 FD | 	drvh	arg01
2ad88     04 4E 05 F1 | 	add	fp, #4
2ad8c     A7 12 02 FB | 	rdlong	arg01, fp
2ad90     59 12 62 FD | 	drvh	arg01
2ad94     20 4E 85 F1 | 	sub	fp, #32
2ad98     00 04 80 FF 
2ad9c     A7 20 68 FC | 	wrlong	##524304, fp
2ada0     04 4E 05 F1 | 	add	fp, #4
2ada4     20 03 80 FF 
2ada8     A7 90 68 FC | 	wrlong	##409672, fp
2adac     14 4E 05 F1 | 	add	fp, #20
2adb0     A7 26 02 FB | 	rdlong	local01, fp
2adb4     18 4E 85 F1 | 	sub	fp, #24
2adb8     A7 16 02 FB | 	rdlong	arg03, fp
2adbc     40 26 62 FD | 	dirl	local01
2adc0     A0 03 80 FF 
2adc4     13 91 08 FC | 	wrpin	##475208, local01
2adc8     13 17 12 FC | 	wxpin	arg03, local01
2adcc     13 01 28 FC | 	wypin	#0, local01
2add0     41 26 62 FD | 	dirh	local01
2add4     1C 4E 05 F1 | 	add	fp, #28
2add8     A7 28 02 FB | 	rdlong	local02, fp
2addc     14 27 82 F1 | 	sub	local01, local02
2ade0     07 26 06 F5 | 	and	local01, #7
2ade4     18 26 66 F0 | 	shl	local01, #24
2ade8     78 14 06 F6 | 	mov	arg02, #120
2adec     13 15 42 F5 | 	or	arg02, local01
2adf0     14 4E 85 F1 | 	sub	fp, #20
2adf4     A7 14 62 FC | 	wrlong	arg02, fp
2adf8     14 4E 05 F1 | 	add	fp, #20
2adfc     A7 12 02 FB | 	rdlong	arg01, fp
2ae00     10 14 26 F4 | 	bith	arg02, #16
2ae04     40 12 62 FD | 	dirl	arg01
2ae08     09 15 02 FC | 	wrpin	arg02, arg01
2ae0c     09 3F 18 FC | 	wxpin	#31, arg01
2ae10     FF FF FF FF 
2ae14     09 FF 2B FC | 	wypin	##-1, arg01
2ae18     41 12 62 FD | 	dirh	arg01
2ae1c     04 4E 85 F1 | 	sub	fp, #4
2ae20     A7 14 02 FB | 	rdlong	arg02, fp
2ae24     08 4E 05 F1 | 	add	fp, #8
2ae28     A7 2A 02 FB | 	rdlong	local03, fp
2ae2c     15 15 82 F1 | 	sub	arg02, local03
2ae30     07 14 06 F5 | 	and	arg02, #7
2ae34     18 14 66 F0 | 	shl	arg02, #24
2ae38     14 4E 85 F1 | 	sub	fp, #20
2ae3c     A7 14 62 FC | 	wrlong	arg02, fp
2ae40     29 00 00 FF 
2ae44     7A 14 46 F5 | 	or	arg02, ##21114
2ae48     A7 14 62 FC | 	wrlong	arg02, fp
2ae4c     14 4E 05 F1 | 	add	fp, #20
2ae50     A7 12 02 FB | 	rdlong	arg01, fp
2ae54     40 12 62 FD | 	dirl	arg01
2ae58     09 15 02 FC | 	wrpin	arg02, arg01
2ae5c     09 4F 18 FC | 	wxpin	#39, arg01
2ae60     09 01 28 FC | 	wypin	#0, arg01
2ae64     41 12 62 FD | 	dirh	arg01
2ae68     28 4E 85 F1 | 	sub	fp, #40
2ae6c     A7 12 02 F6 | 	mov	arg01, fp
2ae70     14 4E 85 F1 | 	sub	fp, #20
2ae74     0A 14 06 F6 | 	mov	arg02, #10
2ae78     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1165
2ae7c     00 12 06 F6 | 	mov	arg01, #0
2ae80     00 14 06 F6 | 	mov	arg02, #0
2ae84     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2ae88     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1175
2ae8c     64 12 06 F6 | 	mov	arg01, #100
2ae90     E0 93 BF FD | 	call	#__system___waitus
2ae94     14 4E 05 F1 | 	add	fp, #20
2ae98     A7 12 02 F6 | 	mov	arg01, fp
2ae9c     14 4E 85 F1 | 	sub	fp, #20
2aea0     0A 14 06 F6 | 	mov	arg02, #10
2aea4     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1165
2aea8     0C 4E 05 F1 | 	add	fp, #12
2aeac     A7 00 48 FC | 	wrbyte	#0, fp
2aeb0     0C 4E 85 F1 | 	sub	fp, #12
2aeb4     00 12 06 F6 | 	mov	arg01, #0
2aeb8     00 14 06 F6 | 	mov	arg02, #0
2aebc     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2aec0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2aec4     01 18 0E F2 | 	cmp	arg04, #1 wz
2aec8     B8 03 90 5D |  if_ne	jmp	#LR__4277
2aecc     08 12 06 F6 | 	mov	arg01, #8
2aed0     AA 15 06 F6 | 	mov	arg02, #426
2aed4     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2aed8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2aedc     01 FA 0D F2 | 	cmp	result1, #1 wz
2aee0     98 01 90 5D |  if_ne	jmp	#LR__4263
2aee4     14 4E 05 F1 | 	add	fp, #20
2aee8     A7 12 02 F6 | 	mov	arg01, fp
2aeec     14 4E 85 F1 | 	sub	fp, #20
2aef0     04 14 06 F6 | 	mov	arg02, #4
2aef4     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1165
2aef8     16 4E 05 F1 | 	add	fp, #22
2aefc     A7 2C C2 FA | 	rdbyte	local04, fp
2af00     16 4E 85 F1 | 	sub	fp, #22
2af04     01 2C 0E F2 | 	cmp	local04, #1 wz
2af08     17 4E 05 A1 |  if_e	add	fp, #23
2af0c     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2af10     17 4E 85 A1 |  if_e	sub	fp, #23
2af14     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2af18     68 03 90 5D |  if_ne	jmp	#LR__4276
2af1c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2af1c     18 4E 05 F1 | 	add	fp, #24
2af20     01 00 80 FF 
2af24     A7 D0 6B FC | 	wrlong	##1000, fp
2af28     18 4E 85 F1 | 	sub	fp, #24
2af2c                 | LR__4260
2af2c     18 4E 05 F1 | 	add	fp, #24
2af30     A7 26 0A FB | 	rdlong	local01, fp wz
2af34     18 4E 85 F1 | 	sub	fp, #24
2af38     3C 00 90 AD |  if_e	jmp	#LR__4261
2af3c     A9 12 06 F6 | 	mov	arg01, #169
2af40     1E 14 C6 F9 | 	decod	arg02, #30
2af44     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2af48     FD 2C 02 F6 | 	mov	local04, result1
2af4c     07 2C 4E F7 | 	zerox	local04, #7 wz
2af50     24 00 90 AD |  if_e	jmp	#LR__4261
2af54     01 00 00 FF 
2af58     E8 13 06 F6 | 	mov	arg01, ##1000
2af5c     14 93 BF FD | 	call	#__system___waitus
2af60     18 4E 05 F1 | 	add	fp, #24
2af64     A7 2C 02 FB | 	rdlong	local04, fp
2af68     01 2C 86 F1 | 	sub	local04, #1
2af6c     A7 2C 62 FC | 	wrlong	local04, fp
2af70     18 4E 85 F1 | 	sub	fp, #24
2af74     B4 FF 9F FD | 	jmp	#LR__4260
2af78                 | LR__4261
2af78     18 4E 05 F1 | 	add	fp, #24
2af7c     A7 2C 0A FB | 	rdlong	local04, fp wz
2af80     18 4E 85 F1 | 	sub	fp, #24
2af84     4C 00 90 AD |  if_e	jmp	#LR__4262
2af88     3A 12 06 F6 | 	mov	arg01, #58
2af8c     00 14 06 F6 | 	mov	arg02, #0
2af90     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2af94     FD 2A 02 F6 | 	mov	local03, result1
2af98     07 2A 4E F7 | 	zerox	local03, #7 wz
2af9c     34 00 90 5D |  if_ne	jmp	#LR__4262
2afa0     14 4E 05 F1 | 	add	fp, #20
2afa4     A7 12 02 F6 | 	mov	arg01, fp
2afa8     14 4E 85 F1 | 	sub	fp, #20
2afac     04 14 06 F6 | 	mov	arg02, #4
2afb0     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1165
2afb4     14 4E 05 F1 | 	add	fp, #20
2afb8     A7 26 C2 FA | 	rdbyte	local01, fp
2afbc     40 26 CE F7 | 	test	local01, #64 wz
2afc0     0C 2C 06 56 |  if_ne	mov	local04, #12
2afc4     04 2C 06 A6 |  if_e	mov	local04, #4
2afc8     08 4E 85 F1 | 	sub	fp, #8
2afcc     A7 2C 42 FC | 	wrbyte	local04, fp
2afd0     0C 4E 85 F1 | 	sub	fp, #12
2afd4                 | LR__4262
2afd4     14 2C 06 FB | 	rdlong	local04, #20
2afd8     18 4E 05 F1 | 	add	fp, #24
2afdc     A7 2C 62 FC | 	wrlong	local04, fp
2afe0     0C 4E 05 F1 | 	add	fp, #12
2afe4     A7 2C 02 FB | 	rdlong	local04, fp
2afe8     1B 2C 26 F4 | 	bith	local04, #27
2afec     A7 2C 62 FC | 	wrlong	local04, fp
2aff0     0C 4E 85 F1 | 	sub	fp, #12
2aff4     A7 2C 02 FB | 	rdlong	local04, fp
2aff8     18 4E 85 F1 | 	sub	fp, #24
2affc     68 78 04 FF 
2b000     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2b004     1C 4E 05 C1 |  if_b	add	fp, #28
2b008     00 01 80 CF 
2b00c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2b010     1C 4E 85 C1 |  if_b	sub	fp, #28
2b014     6C 02 90 CD |  if_b	jmp	#LR__4276
2b018     18 4E 05 F1 | 	add	fp, #24
2b01c     A7 2C 02 FB | 	rdlong	local04, fp
2b020     18 4E 85 F1 | 	sub	fp, #24
2b024     E1 F5 05 FF 
2b028     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2b02c     1C 4E 05 C1 |  if_b	add	fp, #28
2b030     00 01 80 CF 
2b034     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2b038     1C 4E 85 C1 |  if_b	sub	fp, #28
2b03c     44 02 90 CD |  if_b	jmp	#LR__4276
2b040     18 4E 05 F1 | 	add	fp, #24
2b044     A7 2C 02 FB | 	rdlong	local04, fp
2b048     18 4E 85 F1 | 	sub	fp, #24
2b04c     3B 58 08 FF 
2b050     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2b054     1C 4E 05 C1 |  if_b	add	fp, #28
2b058     00 01 80 CF 
2b05c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2b060     1C 4E 85 C1 |  if_b	sub	fp, #28
2b064     1C 02 90 CD |  if_b	jmp	#LR__4276
2b068     1C 4E 05 F1 | 	add	fp, #28
2b06c     80 01 80 FF 
2b070     A7 10 68 FC | 	wrlong	##196616, fp
2b074     1C 4E 85 F1 | 	sub	fp, #28
2b078     08 02 90 FD | 	jmp	#LR__4276
2b07c                 | LR__4263
2b07c     A9 12 06 F6 | 	mov	arg01, #169
2b080     00 14 06 F6 | 	mov	arg02, #0
2b084     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b088     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2b08c     02 2C 16 F2 | 	cmp	local04, #2 wc
2b090     18 00 90 3D |  if_ae	jmp	#LR__4264
2b094     0C 4E 05 F1 | 	add	fp, #12
2b098     A7 04 48 FC | 	wrbyte	#2, fp
2b09c     04 4E 05 F1 | 	add	fp, #4
2b0a0     A7 52 49 FC | 	wrbyte	#169, fp
2b0a4     10 4E 85 F1 | 	sub	fp, #16
2b0a8     14 00 90 FD | 	jmp	#LR__4265
2b0ac                 | LR__4264
2b0ac     0C 4E 05 F1 | 	add	fp, #12
2b0b0     A7 02 48 FC | 	wrbyte	#1, fp
2b0b4     04 4E 05 F1 | 	add	fp, #4
2b0b8     A7 02 48 FC | 	wrbyte	#1, fp
2b0bc     10 4E 85 F1 | 	sub	fp, #16
2b0c0                 | LR__4265
2b0c0                 | ' 				ty =  0x01 ; cmd =  (1) ;
2b0c0                 | ' 			}
2b0c0                 | ' 			for (tmr = 1000; tmr; tmr--) {
2b0c0     18 4E 05 F1 | 	add	fp, #24
2b0c4     01 00 80 FF 
2b0c8     A7 D0 6B FC | 	wrlong	##1000, fp
2b0cc     18 4E 85 F1 | 	sub	fp, #24
2b0d0                 | LR__4266
2b0d0     18 4E 05 F1 | 	add	fp, #24
2b0d4     A7 2A 0A FB | 	rdlong	local03, fp wz
2b0d8     18 4E 85 F1 | 	sub	fp, #24
2b0dc     44 00 90 AD |  if_e	jmp	#LR__4267
2b0e0     10 4E 05 F1 | 	add	fp, #16
2b0e4     A7 12 C2 FA | 	rdbyte	arg01, fp
2b0e8     10 4E 85 F1 | 	sub	fp, #16
2b0ec     00 14 06 F6 | 	mov	arg02, #0
2b0f0     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b0f4     FD 2C 02 F6 | 	mov	local04, result1
2b0f8     07 2C 4E F7 | 	zerox	local04, #7 wz
2b0fc     24 00 90 AD |  if_e	jmp	#LR__4267
2b100     01 00 00 FF 
2b104     E8 13 06 F6 | 	mov	arg01, ##1000
2b108     68 91 BF FD | 	call	#__system___waitus
2b10c     18 4E 05 F1 | 	add	fp, #24
2b110     A7 2C 02 FB | 	rdlong	local04, fp
2b114     01 2C 86 F1 | 	sub	local04, #1
2b118     A7 2C 62 FC | 	wrlong	local04, fp
2b11c     18 4E 85 F1 | 	sub	fp, #24
2b120     AC FF 9F FD | 	jmp	#LR__4266
2b124                 | LR__4267
2b124     18 4E 05 F1 | 	add	fp, #24
2b128     A7 2C 0A FB | 	rdlong	local04, fp wz
2b12c     18 4E 85 F1 | 	sub	fp, #24
2b130     14 00 90 AD |  if_e	jmp	#LR__4268
2b134     10 12 06 F6 | 	mov	arg01, #16
2b138     09 14 C6 F9 | 	decod	arg02, #9
2b13c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b140     07 FA 4D F7 | 	zerox	result1, #7 wz
2b144     0C 00 90 AD |  if_e	jmp	#LR__4269
2b148                 | LR__4268
2b148     0C 4E 05 F1 | 	add	fp, #12
2b14c     A7 00 48 FC | 	wrbyte	#0, fp
2b150     0C 4E 85 F1 | 	sub	fp, #12
2b154                 | LR__4269
2b154     14 2C 06 FB | 	rdlong	local04, #20
2b158     18 4E 05 F1 | 	add	fp, #24
2b15c     A7 2C 62 FC | 	wrlong	local04, fp
2b160     18 4E 85 F1 | 	sub	fp, #24
2b164     F0 FA 02 FF 
2b168     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2b16c     18 00 90 3D |  if_ae	jmp	#LR__4270
2b170     24 4E 05 F1 | 	add	fp, #36
2b174     A7 2C 02 FB | 	rdlong	local04, fp
2b178     1B 2C 26 F4 | 	bith	local04, #27
2b17c     A7 2C 62 FC | 	wrlong	local04, fp
2b180     24 4E 85 F1 | 	sub	fp, #36
2b184     2C 00 90 FD | 	jmp	#LR__4271
2b188                 | LR__4270
2b188     18 4E 05 F1 | 	add	fp, #24
2b18c     A7 2C 02 FB | 	rdlong	local04, fp
2b190     18 4E 85 F1 | 	sub	fp, #24
2b194     E1 F5 05 FF 
2b198     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2b19c     24 4E 05 C1 |  if_b	add	fp, #36
2b1a0     A7 2C 02 CB |  if_b	rdlong	local04, fp
2b1a4     80 00 04 CF 
2b1a8     00 2C 46 C5 |  if_b	or	local04, ##134283264
2b1ac     A7 2C 62 CC |  if_b	wrlong	local04, fp
2b1b0     24 4E 85 C1 |  if_b	sub	fp, #36
2b1b4                 | LR__4271
2b1b4     18 4E 05 F1 | 	add	fp, #24
2b1b8     A7 2C 02 FB | 	rdlong	local04, fp
2b1bc     18 4E 85 F1 | 	sub	fp, #24
2b1c0     F0 FA 02 FF 
2b1c4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2b1c8     1C 4E 05 C1 |  if_b	add	fp, #28
2b1cc     00 01 80 CF 
2b1d0     A7 08 68 CC |  if_b	wrlong	##131076, fp
2b1d4     1C 4E 85 C1 |  if_b	sub	fp, #28
2b1d8     A8 00 90 CD |  if_b	jmp	#LR__4275
2b1dc     18 4E 05 F1 | 	add	fp, #24
2b1e0     A7 2C 02 FB | 	rdlong	local04, fp
2b1e4     18 4E 85 F1 | 	sub	fp, #24
2b1e8     68 78 04 FF 
2b1ec     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2b1f0     1C 4E 05 C1 |  if_b	add	fp, #28
2b1f4     80 01 80 CF 
2b1f8     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2b1fc     1C 4E 85 C1 |  if_b	sub	fp, #28
2b200     80 00 90 CD |  if_b	jmp	#LR__4274
2b204     18 4E 05 F1 | 	add	fp, #24
2b208     A7 2C 02 FB | 	rdlong	local04, fp
2b20c     18 4E 85 F1 | 	sub	fp, #24
2b210     E1 F5 05 FF 
2b214     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2b218     1C 4E 05 C1 |  if_b	add	fp, #28
2b21c     00 02 80 CF 
2b220     A7 10 68 CC |  if_b	wrlong	##262152, fp
2b224     1C 4E 85 C1 |  if_b	sub	fp, #28
2b228     58 00 90 CD |  if_b	jmp	#LR__4273
2b22c     18 4E 05 F1 | 	add	fp, #24
2b230     A7 2C 02 FB | 	rdlong	local04, fp
2b234     18 4E 85 F1 | 	sub	fp, #24
2b238     59 73 07 FF 
2b23c     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2b240     1C 4E 05 C1 |  if_b	add	fp, #28
2b244     80 02 80 CF 
2b248     A7 14 68 CC |  if_b	wrlong	##327690, fp
2b24c     1C 4E 85 C1 |  if_b	sub	fp, #28
2b250     30 00 90 CD |  if_b	jmp	#LR__4272
2b254     18 4E 05 F1 | 	add	fp, #24
2b258     A7 2C 02 FB | 	rdlong	local04, fp
2b25c     18 4E 85 F1 | 	sub	fp, #24
2b260     D1 F0 08 FF 
2b264     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2b268     1C 4E 05 C1 |  if_b	add	fp, #28
2b26c     00 03 80 CF 
2b270     A7 18 68 CC |  if_b	wrlong	##393228, fp
2b274     1C 4E 85 F3 | 	sumc	fp, #28
2b278     80 03 80 3F 
2b27c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2b280     1C 4E 85 31 |  if_ae	sub	fp, #28
2b284                 | LR__4272
2b284                 | LR__4273
2b284                 | LR__4274
2b284                 | LR__4275
2b284                 | LR__4276
2b284                 | LR__4277
2b284     0C 4E 05 F1 | 	add	fp, #12
2b288     A7 2C C2 FA | 	rdbyte	local04, fp
2b28c     01 00 00 FF 
2b290     21 E4 05 F1 | 	add	objptr, ##545
2b294     F2 2C 42 FC | 	wrbyte	local04, objptr
2b298     A7 26 CA FA | 	rdbyte	local01, fp wz
2b29c     00 2C 06 56 |  if_ne	mov	local04, #0
2b2a0     01 2C 06 A6 |  if_e	mov	local04, #1
2b2a4     20 4E 05 F1 | 	add	fp, #32
2b2a8     A7 2C 42 FC | 	wrbyte	local04, fp
2b2ac     A7 2C C2 FA | 	rdbyte	local04, fp
2b2b0     2C 4E 85 F1 | 	sub	fp, #44
2b2b4     01 E4 85 F1 | 	sub	objptr, #1
2b2b8     F2 2C 42 FC | 	wrbyte	local04, objptr
2b2bc     01 00 00 FF 
2b2c0     20 E4 85 F1 | 	sub	objptr, ##544
2b2c4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1175
2b2c8     34 4E 05 F1 | 	add	fp, #52
2b2cc     A7 12 02 FB | 	rdlong	arg01, fp
2b2d0     18 4E 85 F1 | 	sub	fp, #24
2b2d4     A7 14 02 FB | 	rdlong	arg02, fp
2b2d8     09 15 12 FC | 	wxpin	arg02, arg01
2b2dc     1C 4E 05 F1 | 	add	fp, #28
2b2e0     A7 12 02 FB | 	rdlong	arg01, fp
2b2e4     14 4E 85 F1 | 	sub	fp, #20
2b2e8     A7 14 02 FB | 	rdlong	arg02, fp
2b2ec     09 15 02 FC | 	wrpin	arg02, arg01
2b2f0                 | ' 
2b2f0                 | ' 		}
2b2f0                 | ' 	}
2b2f0                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b2f0                 | ' 	CardType = ty;
2b2f0                 | ' 	s = ty ? 0 :  0x01 ;
2b2f0                 | ' 	Stat = s;
2b2f0                 | ' 
2b2f0                 | ' 	deselect();
2b2f0                 | ' 
2b2f0                 | ' 
2b2f0                 | ' 	_wxpin( PIN_CLK, ck_div );
2b2f0                 | ' 	_wrpin( PIN_DI, spm_tx );
2b2f0                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b2f0                 | ' 	return s;
2b2f0     08 4E 05 F1 | 	add	fp, #8
2b2f4     A7 FA C1 FA | 	rdbyte	result1, fp
2b2f8     2C 4E 85 F1 | 	sub	fp, #44
2b2fc                 | LR__4278
2b2fc     A7 F0 03 F6 | 	mov	ptra, fp
2b300     B2 00 A0 FD | 	call	#popregs_
2b304                 | _fatfs_cc_disk_initialize_ret
2b304     2D 00 64 FD | 	ret
2b308                 | 
2b308                 | _fatfs_cc_disk_read
2b308     05 4A 05 F6 | 	mov	COUNT_, #5
2b30c     A8 00 A0 FD | 	call	#pushregs_
2b310     0A 27 02 F6 | 	mov	local01, arg02
2b314     0B 29 02 F6 | 	mov	local02, arg03
2b318     0C 2B 02 F6 | 	mov	local03, arg04
2b31c     00 12 0E F2 | 	cmp	arg01, #0 wz
2b320     01 FA 05 56 |  if_ne	mov	result1, #1
2b324                 | ' 
2b324                 | ' 	return Stat;
2b324     01 00 00 AF 
2b328     20 E4 05 A1 |  if_e	add	objptr, ##544
2b32c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b330     01 00 00 AF 
2b334     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b338     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b33c     01 FA CD F7 | 	test	result1, #1 wz
2b340     03 FA 05 56 |  if_ne	mov	result1, #3
2b344     84 00 90 5D |  if_ne	jmp	#LR__4282
2b348     01 00 00 FF 
2b34c     21 E4 05 F1 | 	add	objptr, ##545
2b350     F2 2C C2 FA | 	rdbyte	local04, objptr
2b354     01 00 00 FF 
2b358     21 E4 85 F1 | 	sub	objptr, ##545
2b35c     08 2C CE F7 | 	test	local04, #8 wz
2b360     09 28 66 A0 |  if_e	shl	local02, #9
2b364     02 2A 16 F2 | 	cmp	local03, #2 wc
2b368     12 2C 06 36 |  if_ae	mov	local04, #18
2b36c     11 2C 06 C6 |  if_b	mov	local04, #17
2b370     14 15 02 F6 | 	mov	arg02, local02
2b374     16 13 02 F6 | 	mov	arg01, local04
2b378     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b37c     FD 2E 02 F6 | 	mov	local05, result1
2b380     07 2E 4E F7 | 	zerox	local05, #7 wz
2b384     30 00 90 5D |  if_ne	jmp	#LR__4281
2b388                 | ' 		do {
2b388                 | LR__4280
2b388     13 13 02 F6 | 	mov	arg01, local01
2b38c     09 14 C6 F9 | 	decod	arg02, #9
2b390     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1183
2b394     00 FA 0D F2 | 	cmp	result1, #0 wz
2b398     01 00 00 5F 
2b39c     00 26 06 51 |  if_ne	add	local01, ##512
2b3a0     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4280
2b3a4     16 2D E2 F8 | 	getbyte	local04, local04, #0
2b3a8     12 2C 0E F2 | 	cmp	local04, #18 wz
2b3ac     0C 12 06 A6 |  if_e	mov	arg01, #12
2b3b0     00 14 06 A6 |  if_e	mov	arg02, #0
2b3b4     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1189
2b3b8                 | LR__4281
2b3b8     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1175
2b3bc                 | ' 	}
2b3bc                 | ' 	deselect();
2b3bc                 | ' 
2b3bc                 | ' 	return count ? RES_ERROR : RES_OK;
2b3bc     00 2A 0E F2 | 	cmp	local03, #0 wz
2b3c0     01 2E 06 56 |  if_ne	mov	local05, #1
2b3c4     00 2E 06 A6 |  if_e	mov	local05, #0
2b3c8     17 FB 01 F6 | 	mov	result1, local05
2b3cc                 | LR__4282
2b3cc     A7 F0 03 F6 | 	mov	ptra, fp
2b3d0     B2 00 A0 FD | 	call	#popregs_
2b3d4                 | _fatfs_cc_disk_read_ret
2b3d4     2D 00 64 FD | 	ret
2b3d8                 | 
2b3d8                 | _fatfs_cc_disk_write
2b3d8     04 4A 05 F6 | 	mov	COUNT_, #4
2b3dc     A8 00 A0 FD | 	call	#pushregs_
2b3e0     0A 27 02 F6 | 	mov	local01, arg02
2b3e4     0C 29 02 F6 | 	mov	local02, arg04
2b3e8     0B 2B 02 F6 | 	mov	local03, arg03
2b3ec     00 12 0E F2 | 	cmp	arg01, #0 wz
2b3f0     01 FA 05 56 |  if_ne	mov	result1, #1
2b3f4                 | ' 
2b3f4                 | ' 	return Stat;
2b3f4     01 00 00 AF 
2b3f8     20 E4 05 A1 |  if_e	add	objptr, ##544
2b3fc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b400     01 00 00 AF 
2b404     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b408     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b40c     01 FA CD F7 | 	test	result1, #1 wz
2b410     03 FA 05 56 |  if_ne	mov	result1, #3
2b414     D4 00 90 5D |  if_ne	jmp	#LR__4294
2b418     01 00 00 FF 
2b41c     21 E4 05 F1 | 	add	objptr, ##545
2b420     F2 16 C2 FA | 	rdbyte	arg03, objptr
2b424     01 00 00 FF 
2b428     21 E4 85 F1 | 	sub	objptr, ##545
2b42c     08 16 CE F7 | 	test	arg03, #8 wz
2b430     09 2A 66 A0 |  if_e	shl	local03, #9
2b434     01 28 0E F2 | 	cmp	local02, #1 wz
2b438     30 00 90 5D |  if_ne	jmp	#LR__4290
2b43c     18 12 06 F6 | 	mov	arg01, #24
2b440     15 15 02 F6 | 	mov	arg02, local03
2b444     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b448     FD 2C 02 F6 | 	mov	local04, result1
2b44c     07 2C 4E F7 | 	zerox	local04, #7 wz
2b450     84 00 90 5D |  if_ne	jmp	#LR__4293
2b454     13 13 02 F6 | 	mov	arg01, local01
2b458     FE 14 06 F6 | 	mov	arg02, #254
2b45c     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1185
2b460     00 FA 0D F2 | 	cmp	result1, #0 wz
2b464     00 28 06 56 |  if_ne	mov	local02, #0
2b468     6C 00 90 FD | 	jmp	#LR__4293
2b46c                 | LR__4290
2b46c     01 00 00 FF 
2b470     21 E4 05 F1 | 	add	objptr, ##545
2b474     F2 2C C2 FA | 	rdbyte	local04, objptr
2b478     01 00 00 FF 
2b47c     21 E4 85 F1 | 	sub	objptr, ##545
2b480     06 2C CE F7 | 	test	local04, #6 wz
2b484     97 12 06 56 |  if_ne	mov	arg01, #151
2b488     14 15 02 56 |  if_ne	mov	arg02, local02
2b48c     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1189
2b490     15 15 02 F6 | 	mov	arg02, local03
2b494     19 12 06 F6 | 	mov	arg01, #25
2b498     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b49c     FD 2C 02 F6 | 	mov	local04, result1
2b4a0     07 2C 4E F7 | 	zerox	local04, #7 wz
2b4a4     30 00 90 5D |  if_ne	jmp	#LR__4292
2b4a8                 | ' 			do {
2b4a8                 | LR__4291
2b4a8     13 13 02 F6 | 	mov	arg01, local01
2b4ac     FC 14 06 F6 | 	mov	arg02, #252
2b4b0     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1185
2b4b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4b8     01 00 00 5F 
2b4bc     00 26 06 51 |  if_ne	add	local01, ##512
2b4c0     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4291
2b4c4     00 12 06 F6 | 	mov	arg01, #0
2b4c8     FD 14 06 F6 | 	mov	arg02, #253
2b4cc     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1185
2b4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4d4     01 28 06 A6 |  if_e	mov	local02, #1
2b4d8                 | LR__4292
2b4d8                 | LR__4293
2b4d8     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1175
2b4dc                 | ' 				count = 1;
2b4dc                 | ' 		}
2b4dc                 | ' 	}
2b4dc                 | ' 	deselect();
2b4dc                 | ' 
2b4dc                 | ' 	return count ? RES_ERROR : RES_OK;
2b4dc     00 28 0E F2 | 	cmp	local02, #0 wz
2b4e0     01 2C 06 56 |  if_ne	mov	local04, #1
2b4e4     00 2C 06 A6 |  if_e	mov	local04, #0
2b4e8     16 FB 01 F6 | 	mov	result1, local04
2b4ec                 | LR__4294
2b4ec     A7 F0 03 F6 | 	mov	ptra, fp
2b4f0     B2 00 A0 FD | 	call	#popregs_
2b4f4                 | _fatfs_cc_disk_write_ret
2b4f4     2D 00 64 FD | 	ret
2b4f8                 | 
2b4f8                 | _fatfs_cc_disk_ioctl
2b4f8     01 4A 05 F6 | 	mov	COUNT_, #1
2b4fc     A8 00 A0 FD | 	call	#pushregs_
2b500     30 F0 07 F1 | 	add	ptra, #48
2b504     04 4E 05 F1 | 	add	fp, #4
2b508     A7 12 42 FC | 	wrbyte	arg01, fp
2b50c     04 4E 05 F1 | 	add	fp, #4
2b510     A7 14 42 FC | 	wrbyte	arg02, fp
2b514     04 4E 05 F1 | 	add	fp, #4
2b518     A7 16 62 FC | 	wrlong	arg03, fp
2b51c     08 4E 85 F1 | 	sub	fp, #8
2b520     A7 12 CA FA | 	rdbyte	arg01, fp wz
2b524     04 4E 85 F1 | 	sub	fp, #4
2b528     01 FA 05 56 |  if_ne	mov	result1, #1
2b52c                 | ' 
2b52c                 | ' 	return Stat;
2b52c     01 00 00 AF 
2b530     20 E4 05 A1 |  if_e	add	objptr, ##544
2b534     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b538     01 00 00 AF 
2b53c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b540     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b544     01 FA CD F7 | 	test	result1, #1 wz
2b548     03 FA 05 56 |  if_ne	mov	result1, #3
2b54c     E4 01 90 5D |  if_ne	jmp	#LR__4308
2b550     10 4E 05 F1 | 	add	fp, #16
2b554     A7 02 68 FC | 	wrlong	#1, fp
2b558                 | ' 
2b558                 | ' 	res = RES_ERROR;
2b558                 | ' 	switch (ctrl) {
2b558     08 4E 85 F1 | 	sub	fp, #8
2b55c     A7 26 C2 FA | 	rdbyte	local01, fp
2b560     08 4E 85 F1 | 	sub	fp, #8
2b564     04 26 26 F3 | 	fle	local01, #4
2b568     30 26 62 FD | 	jmprel	local01
2b56c                 | LR__4300
2b56c     10 00 90 FD | 	jmp	#LR__4301
2b570     24 00 90 FD | 	jmp	#LR__4302
2b574     A0 01 90 FD | 	jmp	#LR__4306
2b578     80 01 90 FD | 	jmp	#LR__4305
2b57c     98 01 90 FD | 	jmp	#LR__4306
2b580                 | LR__4301
2b580     B4 79 B0 FD | 	call	#_fatfs_cc_select_1179
2b584     00 FA 0D F2 | 	cmp	result1, #0 wz
2b588     10 4E 05 51 |  if_ne	add	fp, #16
2b58c     A7 00 68 5C |  if_ne	wrlong	#0, fp
2b590     10 4E 85 51 |  if_ne	sub	fp, #16
2b594                 | ' 			break;
2b594     8C 01 90 FD | 	jmp	#LR__4307
2b598                 | LR__4302
2b598     09 12 06 F6 | 	mov	arg01, #9
2b59c     00 14 06 F6 | 	mov	arg02, #0
2b5a0     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1189
2b5a4     FD 26 02 F6 | 	mov	local01, result1
2b5a8     07 26 4E F7 | 	zerox	local01, #7 wz
2b5ac     74 01 90 5D |  if_ne	jmp	#LR__4307
2b5b0     18 4E 05 F1 | 	add	fp, #24
2b5b4     A7 12 02 F6 | 	mov	arg01, fp
2b5b8     18 4E 85 F1 | 	sub	fp, #24
2b5bc     10 14 06 F6 | 	mov	arg02, #16
2b5c0     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1183
2b5c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5c8     58 01 90 AD |  if_e	jmp	#LR__4307
2b5cc     18 4E 05 F1 | 	add	fp, #24
2b5d0     A7 26 C2 FA | 	rdbyte	local01, fp
2b5d4     18 4E 85 F1 | 	sub	fp, #24
2b5d8     06 26 46 F0 | 	shr	local01, #6
2b5dc     01 26 0E F2 | 	cmp	local01, #1 wz
2b5e0     5C 00 90 5D |  if_ne	jmp	#LR__4303
2b5e4     21 4E 05 F1 | 	add	fp, #33
2b5e8     A7 26 C2 FA | 	rdbyte	local01, fp
2b5ec     01 4E 85 F1 | 	sub	fp, #1
2b5f0     A7 FA C1 FA | 	rdbyte	result1, fp
2b5f4     FD FA 31 F9 | 	getword	result1, result1, #0
2b5f8     08 FA 65 F0 | 	shl	result1, #8
2b5fc     FD 26 02 F1 | 	add	local01, result1
2b600     01 4E 85 F1 | 	sub	fp, #1
2b604     A7 FA C1 FA | 	rdbyte	result1, fp
2b608     3F FA 05 F5 | 	and	result1, #63
2b60c     10 FA 65 F0 | 	shl	result1, #16
2b610     FD 26 02 F1 | 	add	local01, result1
2b614     01 26 06 F1 | 	add	local01, #1
2b618     09 4E 05 F1 | 	add	fp, #9
2b61c     A7 26 62 FC | 	wrlong	local01, fp
2b620     1C 4E 85 F1 | 	sub	fp, #28
2b624     A7 26 02 FB | 	rdlong	local01, fp
2b628     1C 4E 05 F1 | 	add	fp, #28
2b62c     A7 FA 01 FB | 	rdlong	result1, fp
2b630     28 4E 85 F1 | 	sub	fp, #40
2b634     0A FA 65 F0 | 	shl	result1, #10
2b638     13 FB 61 FC | 	wrlong	result1, local01
2b63c     AC 00 90 FD | 	jmp	#LR__4304
2b640                 | LR__4303
2b640     1D 4E 05 F1 | 	add	fp, #29
2b644     A7 26 C2 FA | 	rdbyte	local01, fp
2b648     13 27 42 F8 | 	getnib	local01, local01, #0
2b64c     05 4E 05 F1 | 	add	fp, #5
2b650     A7 FA C1 FA | 	rdbyte	result1, fp
2b654     80 FA 05 F5 | 	and	result1, #128
2b658     07 FA C5 F0 | 	sar	result1, #7
2b65c     FD 26 02 F1 | 	add	local01, result1
2b660     01 4E 85 F1 | 	sub	fp, #1
2b664     A7 FA C1 FA | 	rdbyte	result1, fp
2b668     03 FA 05 F5 | 	and	result1, #3
2b66c     01 FA 65 F0 | 	shl	result1, #1
2b670     FD 26 02 F1 | 	add	local01, result1
2b674     02 26 06 F1 | 	add	local01, #2
2b678     0D 4E 85 F1 | 	sub	fp, #13
2b67c     A7 26 42 FC | 	wrbyte	local01, fp
2b680     0C 4E 05 F1 | 	add	fp, #12
2b684     A7 26 C2 FA | 	rdbyte	local01, fp
2b688     06 26 46 F0 | 	shr	local01, #6
2b68c     01 4E 85 F1 | 	sub	fp, #1
2b690     A7 FA C1 FA | 	rdbyte	result1, fp
2b694     FD FA 31 F9 | 	getword	result1, result1, #0
2b698     02 FA 65 F0 | 	shl	result1, #2
2b69c     FD 26 02 F1 | 	add	local01, result1
2b6a0     01 4E 85 F1 | 	sub	fp, #1
2b6a4     A7 FA C1 FA | 	rdbyte	result1, fp
2b6a8     03 FA 05 F5 | 	and	result1, #3
2b6ac     FD FA 31 F9 | 	getword	result1, result1, #0
2b6b0     0A FA 65 F0 | 	shl	result1, #10
2b6b4     FD 26 02 F1 | 	add	local01, result1
2b6b8     01 26 06 F1 | 	add	local01, #1
2b6bc     0A 4E 05 F1 | 	add	fp, #10
2b6c0     A7 26 62 FC | 	wrlong	local01, fp
2b6c4     1C 4E 85 F1 | 	sub	fp, #28
2b6c8     A7 26 02 FB | 	rdlong	local01, fp
2b6cc     1C 4E 05 F1 | 	add	fp, #28
2b6d0     A7 FA 01 FB | 	rdlong	result1, fp
2b6d4     14 4E 85 F1 | 	sub	fp, #20
2b6d8     A7 16 C2 FA | 	rdbyte	arg03, fp
2b6dc     14 4E 85 F1 | 	sub	fp, #20
2b6e0     09 16 86 F1 | 	sub	arg03, #9
2b6e4     0B FB 61 F0 | 	shl	result1, arg03
2b6e8     13 FB 61 FC | 	wrlong	result1, local01
2b6ec                 | LR__4304
2b6ec     10 4E 05 F1 | 	add	fp, #16
2b6f0     A7 00 68 FC | 	wrlong	#0, fp
2b6f4     10 4E 85 F1 | 	sub	fp, #16
2b6f8                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2b6f8                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2b6f8                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2b6f8                 | ' 				}
2b6f8                 | ' 				res = RES_OK;
2b6f8                 | ' 			}
2b6f8                 | ' 			break;
2b6f8     28 00 90 FD | 	jmp	#LR__4307
2b6fc                 | LR__4305
2b6fc     0C 4E 05 F1 | 	add	fp, #12
2b700     A7 26 02 FB | 	rdlong	local01, fp
2b704     13 01 69 FC | 	wrlong	#128, local01
2b708     04 4E 05 F1 | 	add	fp, #4
2b70c     A7 00 68 FC | 	wrlong	#0, fp
2b710     10 4E 85 F1 | 	sub	fp, #16
2b714                 | ' 			*(DWORD*)buff = 128;
2b714                 | ' 			res = RES_OK;
2b714                 | ' 			break;
2b714     0C 00 90 FD | 	jmp	#LR__4307
2b718                 | LR__4306
2b718     10 4E 05 F1 | 	add	fp, #16
2b71c     A7 08 68 FC | 	wrlong	#4, fp
2b720     10 4E 85 F1 | 	sub	fp, #16
2b724                 | LR__4307
2b724     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1175
2b728                 | ' 			res = RES_PARERR;
2b728                 | ' 	}
2b728                 | ' 
2b728                 | ' 	deselect();
2b728                 | ' 
2b728                 | ' 	return res;
2b728     10 4E 05 F1 | 	add	fp, #16
2b72c     A7 FA 01 FB | 	rdlong	result1, fp
2b730     10 4E 85 F1 | 	sub	fp, #16
2b734                 | LR__4308
2b734     A7 F0 03 F6 | 	mov	ptra, fp
2b738     B2 00 A0 FD | 	call	#popregs_
2b73c                 | _fatfs_cc_disk_ioctl_ret
2b73c     2D 00 64 FD | 	ret
2b740                 | 
2b740                 | _fatfs_cc_disk_setpins
2b740     00 12 0E F2 | 	cmp	arg01, #0 wz
2b744     01 FA 65 56 |  if_ne	neg	result1, #1
2b748     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2b74c     01 00 00 FF 
2b750     10 E4 05 F1 | 	add	objptr, ##528
2b754     F2 14 62 FC | 	wrlong	arg02, objptr
2b758     04 E4 05 F1 | 	add	objptr, #4
2b75c     F2 16 62 FC | 	wrlong	arg03, objptr
2b760     04 E4 05 F1 | 	add	objptr, #4
2b764     F2 18 62 FC | 	wrlong	arg04, objptr
2b768     04 E4 05 F1 | 	add	objptr, #4
2b76c     F2 1A 62 FC | 	wrlong	arg05, objptr
2b770     01 00 00 FF 
2b774     1C E4 85 F1 | 	sub	objptr, ##540
2b778     00 FA 05 F6 | 	mov	result1, #0
2b77c                 | _fatfs_cc_disk_setpins_ret
2b77c     2D 00 64 FD | 	ret
2b780                 | 
2b780                 | _fatfs_cc_tchar2uni
2b780     09 01 02 FB | 	rdlong	_var01, arg01
2b784     00 03 02 F6 | 	mov	_var02, _var01
2b788     01 00 06 F1 | 	add	_var01, #1
2b78c     00 05 02 F6 | 	mov	_var03, _var01
2b790     01 07 C2 FA | 	rdbyte	_var04, _var02
2b794     80 06 CE F7 | 	test	_var04, #128 wz
2b798     E8 00 90 AD |  if_e	jmp	#LR__4317
2b79c     03 09 02 F6 | 	mov	_var05, _var04
2b7a0     E0 08 06 F5 | 	and	_var05, #224
2b7a4     C0 08 0E F2 | 	cmp	_var05, #192 wz
2b7a8     1F 06 06 A5 |  if_e	and	_var04, #31
2b7ac     01 0A 06 A6 |  if_e	mov	_var06, #1
2b7b0     34 00 90 AD |  if_e	jmp	#LR__4311
2b7b4     03 09 02 F6 | 	mov	_var05, _var04
2b7b8     F0 08 06 F5 | 	and	_var05, #240
2b7bc     E0 08 0E F2 | 	cmp	_var05, #224 wz
2b7c0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2b7c4     02 0A 06 A6 |  if_e	mov	_var06, #2
2b7c8     1C 00 90 AD |  if_e	jmp	#LR__4310
2b7cc     03 09 02 F6 | 	mov	_var05, _var04
2b7d0     F8 08 06 F5 | 	and	_var05, #248
2b7d4     F0 08 0E F2 | 	cmp	_var05, #240 wz
2b7d8     07 06 06 A5 |  if_e	and	_var04, #7
2b7dc     03 0A 06 A6 |  if_e	mov	_var06, #3
2b7e0                 | ' 			return 0xFFFFFFFF;
2b7e0     01 FA 65 56 |  if_ne	neg	result1, #1
2b7e4     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2b7e8                 | LR__4310
2b7e8                 | LR__4311
2b7e8                 | ' 		}
2b7e8                 | ' 		do {
2b7e8                 | LR__4312
2b7e8     02 0D C2 FA | 	rdbyte	_var07, _var03
2b7ec     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2b7f0     C0 08 06 F5 | 	and	_var05, #192
2b7f4     80 08 0E F2 | 	cmp	_var05, #128 wz
2b7f8     01 04 06 F1 | 	add	_var03, #1
2b7fc     01 FA 65 56 |  if_ne	neg	result1, #1
2b800     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2b804     06 06 66 F0 | 	shl	_var04, #6
2b808     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2b80c     3F 02 06 F5 | 	and	_var02, #63
2b810     01 07 42 F5 | 	or	_var04, _var02
2b814     F4 0B 6E FB | 	djnz	_var06, #LR__4312
2b818     80 06 16 F2 | 	cmp	_var04, #128 wc
2b81c     24 00 90 CD |  if_b	jmp	#LR__4314
2b820     6C 00 00 FF 
2b824     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2b828     0C 00 90 CD |  if_b	jmp	#LR__4313
2b82c     70 00 00 FF 
2b830     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2b834     0C 00 90 CD |  if_b	jmp	#LR__4314
2b838                 | LR__4313
2b838     80 08 00 FF 
2b83c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2b840     08 00 90 CD |  if_b	jmp	#LR__4315
2b844                 | LR__4314
2b844     01 FA 65 F6 | 	neg	result1, #1
2b848     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2b84c                 | LR__4315
2b84c     80 00 00 FF 
2b850     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2b854     2C 00 90 CD |  if_b	jmp	#LR__4316
2b858     03 03 02 F6 | 	mov	_var02, _var04
2b85c     80 00 00 FF 
2b860     00 02 86 F1 | 	sub	_var02, ##65536
2b864     06 02 66 F0 | 	shl	_var02, #6
2b868     80 FF 01 FF 
2b86c     00 02 06 F5 | 	and	_var02, ##67043328
2b870     6E 00 6C FF 
2b874     00 08 06 F6 | 	mov	_var05, ##-671032320
2b878     01 09 42 F5 | 	or	_var05, _var02
2b87c     09 06 46 F7 | 	zerox	_var04, #9
2b880     04 07 42 F5 | 	or	_var04, _var05
2b884                 | LR__4316
2b884                 | LR__4317
2b884     09 05 62 FC | 	wrlong	_var03, arg01
2b888                 | ' 	}
2b888                 | ' #line 811 "ff.c"
2b888                 | ' 	*str = p;
2b888                 | ' 	return uc;
2b888     03 FB 01 F6 | 	mov	result1, _var04
2b88c                 | _fatfs_cc_tchar2uni_ret
2b88c     2D 00 64 FD | 	ret
2b890                 | 
2b890                 | _fatfs_cc_put_utf
2b890     80 12 16 F2 | 	cmp	arg01, #128 wc
2b894     18 00 90 3D |  if_ae	jmp	#LR__4320
2b898     01 16 16 F2 | 	cmp	arg03, #1 wc
2b89c     00 FA 05 C6 |  if_b	mov	result1, #0
2b8a0     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2b8a4     0A 13 42 FC | 	wrbyte	arg01, arg02
2b8a8                 | ' 		*buf = (TCHAR)chr;
2b8a8                 | ' 		return 1;
2b8a8     01 FA 05 F6 | 	mov	result1, #1
2b8ac     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b8b0                 | LR__4320
2b8b0     04 00 00 FF 
2b8b4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2b8b8     40 00 90 3D |  if_ae	jmp	#LR__4321
2b8bc     02 16 16 F2 | 	cmp	arg03, #2 wc
2b8c0     00 FA 05 C6 |  if_b	mov	result1, #0
2b8c4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2b8c8     09 FB 01 F6 | 	mov	result1, arg01
2b8cc     06 FA 45 F0 | 	shr	result1, #6
2b8d0     1F FA 05 F5 | 	and	result1, #31
2b8d4     C0 16 06 F6 | 	mov	arg03, #192
2b8d8     FD 16 42 F5 | 	or	arg03, result1
2b8dc     0A 17 42 FC | 	wrbyte	arg03, arg02
2b8e0     01 14 06 F1 | 	add	arg02, #1
2b8e4     3F 12 06 F5 | 	and	arg01, #63
2b8e8     80 FA 05 F6 | 	mov	result1, #128
2b8ec     09 FB 41 F5 | 	or	result1, arg01
2b8f0     0A FB 41 FC | 	wrbyte	result1, arg02
2b8f4                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2b8f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2b8f4                 | ' 		return 2;
2b8f4     02 FA 05 F6 | 	mov	result1, #2
2b8f8     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b8fc                 | LR__4321
2b8fc     80 00 00 FF 
2b900     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2b904     70 00 90 3D |  if_ae	jmp	#LR__4324
2b908     03 16 16 F2 | 	cmp	arg03, #3 wc
2b90c     18 00 90 CD |  if_b	jmp	#LR__4322
2b910     6C 00 00 FF 
2b914     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2b918     14 00 90 CD |  if_b	jmp	#LR__4323
2b91c     70 00 00 FF 
2b920     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2b924     08 00 90 3D |  if_ae	jmp	#LR__4323
2b928                 | LR__4322
2b928     00 FA 05 F6 | 	mov	result1, #0
2b92c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b930                 | LR__4323
2b930     09 FB 59 F8 | 	getnib	result1, arg01, #3
2b934     E0 16 06 F6 | 	mov	arg03, #224
2b938     FD 16 42 F5 | 	or	arg03, result1
2b93c     0A 17 42 FC | 	wrbyte	arg03, arg02
2b940     01 14 06 F1 | 	add	arg02, #1
2b944     09 FB 01 F6 | 	mov	result1, arg01
2b948     06 FA 45 F0 | 	shr	result1, #6
2b94c     3F FA 05 F5 | 	and	result1, #63
2b950     80 16 06 F6 | 	mov	arg03, #128
2b954     FD 16 42 F5 | 	or	arg03, result1
2b958     0A 17 42 FC | 	wrbyte	arg03, arg02
2b95c     01 14 06 F1 | 	add	arg02, #1
2b960     3F 12 06 F5 | 	and	arg01, #63
2b964     80 FA 05 F6 | 	mov	result1, #128
2b968     09 FB 41 F5 | 	or	result1, arg01
2b96c     0A FB 41 FC | 	wrbyte	result1, arg02
2b970                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2b970                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2b970                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2b970                 | ' 		return 3;
2b970     03 FA 05 F6 | 	mov	result1, #3
2b974     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b978                 | LR__4324
2b978     04 16 16 F2 | 	cmp	arg03, #4 wc
2b97c     00 FA 05 C6 |  if_b	mov	result1, #0
2b980     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2b984     09 01 02 F6 | 	mov	_var01, arg01
2b988     E0 01 06 F4 | 	bitl	_var01, #480
2b98c     00 00 6C FF 
2b990     00 00 86 F1 | 	sub	_var01, ##-671088640
2b994     06 00 46 F0 | 	shr	_var01, #6
2b998     09 13 32 F9 | 	getword	arg01, arg01, #0
2b99c     6E 00 00 FF 
2b9a0     00 12 86 F1 | 	sub	arg01, ##56320
2b9a4     00 08 00 FF 
2b9a8     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2b9ac     02 00 00 CF 
2b9b0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2b9b4     00 FA 05 36 |  if_ae	mov	result1, #0
2b9b8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2b9bc     09 01 42 F5 | 	or	_var01, arg01
2b9c0     80 00 00 FF 
2b9c4     00 00 06 F1 | 	add	_var01, ##65536
2b9c8     00 FB 01 F6 | 	mov	result1, _var01
2b9cc     12 FA 45 F0 | 	shr	result1, #18
2b9d0     07 FA 05 F5 | 	and	result1, #7
2b9d4     F0 16 06 F6 | 	mov	arg03, #240
2b9d8     FD 16 42 F5 | 	or	arg03, result1
2b9dc     0A 17 42 FC | 	wrbyte	arg03, arg02
2b9e0     01 14 06 F1 | 	add	arg02, #1
2b9e4     00 FB 01 F6 | 	mov	result1, _var01
2b9e8     0C FA 45 F0 | 	shr	result1, #12
2b9ec     3F FA 05 F5 | 	and	result1, #63
2b9f0     80 16 06 F6 | 	mov	arg03, #128
2b9f4     FD 16 42 F5 | 	or	arg03, result1
2b9f8     0A 17 42 FC | 	wrbyte	arg03, arg02
2b9fc     01 14 06 F1 | 	add	arg02, #1
2ba00     00 FB 01 F6 | 	mov	result1, _var01
2ba04     06 FA 45 F0 | 	shr	result1, #6
2ba08     3F FA 05 F5 | 	and	result1, #63
2ba0c     80 16 06 F6 | 	mov	arg03, #128
2ba10     FD 16 42 F5 | 	or	arg03, result1
2ba14     0A 17 42 FC | 	wrbyte	arg03, arg02
2ba18     01 14 06 F1 | 	add	arg02, #1
2ba1c     3F 00 06 F5 | 	and	_var01, #63
2ba20     80 FA 05 F6 | 	mov	result1, #128
2ba24     00 FB 41 F5 | 	or	result1, _var01
2ba28     0A FB 41 FC | 	wrbyte	result1, arg02
2ba2c                 | ' 	chr = (hc | chr) + 0x10000;
2ba2c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2ba2c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2ba2c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2ba2c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ba2c                 | ' 	return 4;
2ba2c     04 FA 05 F6 | 	mov	result1, #4
2ba30                 | _fatfs_cc_put_utf_ret
2ba30     2D 00 64 FD | 	ret
2ba34                 | 
2ba34                 | _fatfs_cc_sync_window
2ba34     02 4A 05 F6 | 	mov	COUNT_, #2
2ba38     A8 00 A0 FD | 	call	#pushregs_
2ba3c     09 27 02 F6 | 	mov	local01, arg01
2ba40     00 28 06 F6 | 	mov	local02, #0
2ba44     03 26 06 F1 | 	add	local01, #3
2ba48     13 FB C9 FA | 	rdbyte	result1, local01 wz
2ba4c     03 26 86 F1 | 	sub	local01, #3
2ba50     A4 00 90 AD |  if_e	jmp	#LR__4332
2ba54     01 26 06 F1 | 	add	local01, #1
2ba58     13 13 C2 FA | 	rdbyte	arg01, local01
2ba5c     33 26 06 F1 | 	add	local01, #51
2ba60     13 15 02 F6 | 	mov	arg02, local01
2ba64     04 26 86 F1 | 	sub	local01, #4
2ba68     13 17 02 FB | 	rdlong	arg03, local01
2ba6c     30 26 86 F1 | 	sub	local01, #48
2ba70     01 18 06 F6 | 	mov	arg04, #1
2ba74     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2ba78     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba7c     74 00 90 5D |  if_ne	jmp	#LR__4330
2ba80     03 26 06 F1 | 	add	local01, #3
2ba84     13 01 48 FC | 	wrbyte	#0, local01
2ba88     2D 26 06 F1 | 	add	local01, #45
2ba8c     13 FB 01 FB | 	rdlong	result1, local01
2ba90     0C 26 86 F1 | 	sub	local01, #12
2ba94     13 19 02 FB | 	rdlong	arg04, local01
2ba98     0C FB 81 F1 | 	sub	result1, arg04
2ba9c     08 26 86 F1 | 	sub	local01, #8
2baa0     13 19 02 FB | 	rdlong	arg04, local01
2baa4     1C 26 86 F1 | 	sub	local01, #28
2baa8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2baac     48 00 90 3D |  if_ae	jmp	#LR__4331
2bab0     02 26 06 F1 | 	add	local01, #2
2bab4     13 19 C2 FA | 	rdbyte	arg04, local01
2bab8     02 26 86 F1 | 	sub	local01, #2
2babc     02 18 0E F2 | 	cmp	arg04, #2 wz
2bac0     34 00 90 5D |  if_ne	jmp	#LR__4331
2bac4     01 26 06 F1 | 	add	local01, #1
2bac8     13 13 C2 FA | 	rdbyte	arg01, local01
2bacc     33 26 06 F1 | 	add	local01, #51
2bad0     13 15 02 F6 | 	mov	arg02, local01
2bad4     04 26 86 F1 | 	sub	local01, #4
2bad8     13 17 02 FB | 	rdlong	arg03, local01
2badc     14 26 86 F1 | 	sub	local01, #20
2bae0     13 27 02 FB | 	rdlong	local01, local01
2bae4     13 17 02 F1 | 	add	arg03, local01
2bae8     01 18 06 F6 | 	mov	arg04, #1
2baec     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2baf0     04 00 90 FD | 	jmp	#LR__4331
2baf4                 | LR__4330
2baf4     01 28 06 F6 | 	mov	local02, #1
2baf8                 | LR__4331
2baf8                 | LR__4332
2baf8                 | ' 			res = FR_DISK_ERR;
2baf8                 | ' 		}
2baf8                 | ' 	}
2baf8                 | ' 	return res;
2baf8     14 FB 01 F6 | 	mov	result1, local02
2bafc     A7 F0 03 F6 | 	mov	ptra, fp
2bb00     B2 00 A0 FD | 	call	#popregs_
2bb04                 | _fatfs_cc_sync_window_ret
2bb04     2D 00 64 FD | 	ret
2bb08                 | 
2bb08                 | _fatfs_cc_move_window
2bb08     03 4A 05 F6 | 	mov	COUNT_, #3
2bb0c     A8 00 A0 FD | 	call	#pushregs_
2bb10     09 27 02 F6 | 	mov	local01, arg01
2bb14     0A 29 02 F6 | 	mov	local02, arg02
2bb18     00 2A 06 F6 | 	mov	local03, #0
2bb1c     30 26 06 F1 | 	add	local01, #48
2bb20     13 19 02 FB | 	rdlong	arg04, local01
2bb24     30 26 86 F1 | 	sub	local01, #48
2bb28     0C 29 0A F2 | 	cmp	local02, arg04 wz
2bb2c     40 00 90 AD |  if_e	jmp	#LR__4341
2bb30     13 13 02 F6 | 	mov	arg01, local01
2bb34     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2bb38     FD 2A 0A F6 | 	mov	local03, result1 wz
2bb3c     30 00 90 5D |  if_ne	jmp	#LR__4340
2bb40     01 26 06 F1 | 	add	local01, #1
2bb44     13 13 C2 FA | 	rdbyte	arg01, local01
2bb48     33 26 06 F1 | 	add	local01, #51
2bb4c     13 15 02 F6 | 	mov	arg02, local01
2bb50     14 17 02 F6 | 	mov	arg03, local02
2bb54     01 18 06 F6 | 	mov	arg04, #1
2bb58     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2bb5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb60     01 28 66 56 |  if_ne	neg	local02, #1
2bb64     01 2A 06 56 |  if_ne	mov	local03, #1
2bb68     04 26 86 F1 | 	sub	local01, #4
2bb6c     13 29 62 FC | 	wrlong	local02, local01
2bb70                 | LR__4340
2bb70                 | LR__4341
2bb70                 | ' 				sect = (LBA_t)0 - 1;
2bb70                 | ' 				res = FR_DISK_ERR;
2bb70                 | ' 			}
2bb70                 | ' 			fs->winsect = sect;
2bb70                 | ' 		}
2bb70                 | ' 	}
2bb70                 | ' 	return res;
2bb70     15 FB 01 F6 | 	mov	result1, local03
2bb74     A7 F0 03 F6 | 	mov	ptra, fp
2bb78     B2 00 A0 FD | 	call	#popregs_
2bb7c                 | _fatfs_cc_move_window_ret
2bb7c     2D 00 64 FD | 	ret
2bb80                 | 
2bb80                 | _fatfs_cc_sync_fs
2bb80     02 4A 05 F6 | 	mov	COUNT_, #2
2bb84     A8 00 A0 FD | 	call	#pushregs_
2bb88     09 27 02 F6 | 	mov	local01, arg01
2bb8c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2bb90     FD 28 0A F6 | 	mov	local02, result1 wz
2bb94     D8 00 90 5D |  if_ne	jmp	#LR__4351
2bb98     13 19 C2 FA | 	rdbyte	arg04, local01
2bb9c     03 18 0E F2 | 	cmp	arg04, #3 wz
2bba0     04 26 06 A1 |  if_e	add	local01, #4
2bba4     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2bba8     04 26 86 A1 |  if_e	sub	local01, #4
2bbac     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2bbb0     A0 00 90 5D |  if_ne	jmp	#LR__4350
2bbb4     34 26 06 F1 | 	add	local01, #52
2bbb8     13 13 02 F6 | 	mov	arg01, local01
2bbbc     00 14 06 F6 | 	mov	arg02, #0
2bbc0     09 16 C6 F9 | 	decod	arg03, #9
2bbc4     98 00 A0 FD | 	call	#\builtin_bytefill_
2bbc8     13 13 02 F6 | 	mov	arg01, local01
2bbcc     FE 13 06 F1 | 	add	arg01, #510
2bbd0     55 00 80 FF 
2bbd4     09 AB 58 FC | 	wrword	##43605, arg01
2bbd8     A9 B0 A0 FF 
2bbdc     13 A5 68 FC | 	wrlong	##1096897106, local01
2bbe0     13 13 02 F6 | 	mov	arg01, local01
2bbe4     E4 13 06 F1 | 	add	arg01, #484
2bbe8     B9 A0 B0 FF 
2bbec     09 E5 68 FC | 	wrlong	##1631679090, arg01
2bbf0     13 13 02 F6 | 	mov	arg01, local01
2bbf4     E8 13 06 F1 | 	add	arg01, #488
2bbf8     20 26 86 F1 | 	sub	local01, #32
2bbfc     13 15 02 FB | 	rdlong	arg02, local01
2bc00     09 15 62 FC | 	wrlong	arg02, arg01
2bc04     20 26 06 F1 | 	add	local01, #32
2bc08     13 13 02 F6 | 	mov	arg01, local01
2bc0c     EC 13 06 F1 | 	add	arg01, #492
2bc10     24 26 86 F1 | 	sub	local01, #36
2bc14     13 15 02 FB | 	rdlong	arg02, local01
2bc18     09 15 62 FC | 	wrlong	arg02, arg01
2bc1c     10 26 06 F1 | 	add	local01, #16
2bc20     13 17 02 FB | 	rdlong	arg03, local01
2bc24     01 16 06 F1 | 	add	arg03, #1
2bc28     10 26 06 F1 | 	add	local01, #16
2bc2c     13 17 62 FC | 	wrlong	arg03, local01
2bc30     2F 26 86 F1 | 	sub	local01, #47
2bc34     13 13 C2 FA | 	rdbyte	arg01, local01
2bc38     33 26 06 F1 | 	add	local01, #51
2bc3c     13 15 02 F6 | 	mov	arg02, local01
2bc40     01 18 06 F6 | 	mov	arg04, #1
2bc44     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2bc48     30 26 86 F1 | 	sub	local01, #48
2bc4c     13 01 48 FC | 	wrbyte	#0, local01
2bc50     04 26 86 F1 | 	sub	local01, #4
2bc54                 | LR__4350
2bc54     01 26 06 F1 | 	add	local01, #1
2bc58     13 13 C2 FA | 	rdbyte	arg01, local01
2bc5c     00 14 06 F6 | 	mov	arg02, #0
2bc60     00 16 06 F6 | 	mov	arg03, #0
2bc64     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2bc68     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc6c     01 28 06 56 |  if_ne	mov	local02, #1
2bc70                 | LR__4351
2bc70                 | ' 	}
2bc70                 | ' 
2bc70                 | ' 	return res;
2bc70     14 FB 01 F6 | 	mov	result1, local02
2bc74     A7 F0 03 F6 | 	mov	ptra, fp
2bc78     B2 00 A0 FD | 	call	#popregs_
2bc7c                 | _fatfs_cc_sync_fs_ret
2bc7c     2D 00 64 FD | 	ret
2bc80                 | 
2bc80                 | _fatfs_cc_clst2sect
2bc80     02 14 86 F1 | 	sub	arg02, #2
2bc84     18 12 06 F1 | 	add	arg01, #24
2bc88     09 01 02 FB | 	rdlong	_var01, arg01
2bc8c     18 12 86 F1 | 	sub	arg01, #24
2bc90     02 00 86 F1 | 	sub	_var01, #2
2bc94     00 15 12 F2 | 	cmp	arg02, _var01 wc
2bc98     00 FA 05 36 |  if_ae	mov	result1, #0
2bc9c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2bca0     0A 12 06 F1 | 	add	arg01, #10
2bca4     09 01 E2 FA | 	rdword	_var01, arg01
2bca8     0A 01 02 FD | 	qmul	_var01, arg02
2bcac                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2bcac     22 12 06 F1 | 	add	arg01, #34
2bcb0     09 FB 01 FB | 	rdlong	result1, arg01
2bcb4     18 00 62 FD | 	getqx	_var01
2bcb8     00 FB 01 F1 | 	add	result1, _var01
2bcbc                 | _fatfs_cc_clst2sect_ret
2bcbc     2D 00 64 FD | 	ret
2bcc0                 | 
2bcc0                 | _fatfs_cc_get_fat
2bcc0     07 4A 05 F6 | 	mov	COUNT_, #7
2bcc4     A8 00 A0 FD | 	call	#pushregs_
2bcc8     0A 27 02 F6 | 	mov	local01, arg02
2bccc     09 29 02 FB | 	rdlong	local02, arg01
2bcd0     02 26 16 F2 | 	cmp	local01, #2 wc
2bcd4     14 00 90 CD |  if_b	jmp	#LR__4360
2bcd8     18 28 06 F1 | 	add	local02, #24
2bcdc     14 2B 02 FB | 	rdlong	local03, local02
2bce0     18 28 86 F1 | 	sub	local02, #24
2bce4     15 27 12 F2 | 	cmp	local01, local03 wc
2bce8     08 00 90 CD |  if_b	jmp	#LR__4361
2bcec                 | LR__4360
2bcec     01 2C 06 F6 | 	mov	local04, #1
2bcf0     60 01 90 FD | 	jmp	#LR__4368
2bcf4                 | LR__4361
2bcf4     01 2C 66 F6 | 	neg	local04, #1
2bcf8                 | ' 		val = 0xFFFFFFFF;
2bcf8                 | ' 
2bcf8                 | ' 		switch (fs->fs_type) {
2bcf8     14 2F C2 FA | 	rdbyte	local05, local02
2bcfc     01 2E 86 F1 | 	sub	local05, #1
2bd00     03 2E 26 F3 | 	fle	local05, #3
2bd04     30 2E 62 FD | 	jmprel	local05
2bd08                 | LR__4362
2bd08     0C 00 90 FD | 	jmp	#LR__4363
2bd0c     B8 00 90 FD | 	jmp	#LR__4364
2bd10     F8 00 90 FD | 	jmp	#LR__4365
2bd14     38 01 90 FD | 	jmp	#LR__4366
2bd18                 | LR__4363
2bd18     13 2F 02 F6 | 	mov	local05, local01
2bd1c     13 13 02 F6 | 	mov	arg01, local01
2bd20     01 12 46 F0 | 	shr	arg01, #1
2bd24     09 2F 02 F1 | 	add	local05, arg01
2bd28     14 13 02 F6 | 	mov	arg01, local02
2bd2c     17 31 02 F6 | 	mov	local06, local05
2bd30     09 30 46 F0 | 	shr	local06, #9
2bd34     24 28 06 F1 | 	add	local02, #36
2bd38     14 15 02 FB | 	rdlong	arg02, local02
2bd3c     24 28 86 F1 | 	sub	local02, #36
2bd40     18 15 02 F1 | 	add	arg02, local06
2bd44     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2bd48     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd4c     04 01 90 5D |  if_ne	jmp	#LR__4367
2bd50     17 31 02 F6 | 	mov	local06, local05
2bd54     FF 31 06 F5 | 	and	local06, #511
2bd58     34 28 06 F1 | 	add	local02, #52
2bd5c     14 31 02 F1 | 	add	local06, local02
2bd60     18 33 C2 FA | 	rdbyte	local07, local06
2bd64     34 28 86 F1 | 	sub	local02, #52
2bd68     14 13 02 F6 | 	mov	arg01, local02
2bd6c     01 2E 06 F1 | 	add	local05, #1
2bd70     17 31 02 F6 | 	mov	local06, local05
2bd74     09 30 46 F0 | 	shr	local06, #9
2bd78     24 28 06 F1 | 	add	local02, #36
2bd7c     14 15 02 FB | 	rdlong	arg02, local02
2bd80     24 28 86 F1 | 	sub	local02, #36
2bd84     18 15 02 F1 | 	add	arg02, local06
2bd88     7C FD BF FD | 	call	#_fatfs_cc_move_window
2bd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd90     C0 00 90 5D |  if_ne	jmp	#LR__4367
2bd94     FF 2F 06 F5 | 	and	local05, #511
2bd98     34 28 06 F1 | 	add	local02, #52
2bd9c     14 2F 02 F1 | 	add	local05, local02
2bda0     17 31 C2 FA | 	rdbyte	local06, local05
2bda4     08 30 66 F0 | 	shl	local06, #8
2bda8     18 33 42 F5 | 	or	local07, local06
2bdac     01 26 CE F7 | 	test	local01, #1 wz
2bdb0     04 32 46 50 |  if_ne	shr	local07, #4
2bdb4     19 2B 02 56 |  if_ne	mov	local03, local07
2bdb8     0B 32 46 A7 |  if_e	zerox	local07, #11
2bdbc     19 2B 02 A6 |  if_e	mov	local03, local07
2bdc0     15 2D 02 F6 | 	mov	local04, local03
2bdc4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2bdc4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2bdc4                 | ' 			break;
2bdc4     8C 00 90 FD | 	jmp	#LR__4367
2bdc8                 | LR__4364
2bdc8     14 13 02 F6 | 	mov	arg01, local02
2bdcc     13 31 02 F6 | 	mov	local06, local01
2bdd0     08 30 46 F0 | 	shr	local06, #8
2bdd4     24 28 06 F1 | 	add	local02, #36
2bdd8     14 15 02 FB | 	rdlong	arg02, local02
2bddc     24 28 86 F1 | 	sub	local02, #36
2bde0     18 15 02 F1 | 	add	arg02, local06
2bde4     20 FD BF FD | 	call	#_fatfs_cc_move_window
2bde8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdec     64 00 90 5D |  if_ne	jmp	#LR__4367
2bdf0     34 28 06 F1 | 	add	local02, #52
2bdf4     01 26 66 F0 | 	shl	local01, #1
2bdf8     FF 27 06 F5 | 	and	local01, #511
2bdfc     13 29 02 F1 | 	add	local02, local01
2be00                 | ' {
2be00                 | ' 
2be00                 | ' 	return *((WORD*)ptr);
2be00     14 FB E1 FA | 	rdword	result1, local02
2be04     FD 2C 32 F9 | 	getword	local04, result1, #0
2be08                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2be08                 | ' 			break;
2be08     48 00 90 FD | 	jmp	#LR__4367
2be0c                 | LR__4365
2be0c     14 13 02 F6 | 	mov	arg01, local02
2be10     13 31 02 F6 | 	mov	local06, local01
2be14     07 30 46 F0 | 	shr	local06, #7
2be18     24 28 06 F1 | 	add	local02, #36
2be1c     14 15 02 FB | 	rdlong	arg02, local02
2be20     24 28 86 F1 | 	sub	local02, #36
2be24     18 15 02 F1 | 	add	arg02, local06
2be28     DC FC BF FD | 	call	#_fatfs_cc_move_window
2be2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2be30     20 00 90 5D |  if_ne	jmp	#LR__4367
2be34     34 28 06 F1 | 	add	local02, #52
2be38     02 26 66 F0 | 	shl	local01, #2
2be3c     FF 27 06 F5 | 	and	local01, #511
2be40     13 29 02 F1 | 	add	local02, local01
2be44                 | ' {
2be44                 | ' 
2be44                 | ' 	return *((DWORD*)ptr);
2be44     14 2D 02 FB | 	rdlong	local04, local02
2be48     7C 2C 06 F4 | 	bitl	local04, #124
2be4c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2be4c                 | ' 			break;
2be4c     04 00 90 FD | 	jmp	#LR__4367
2be50                 | LR__4366
2be50     01 2C 06 F6 | 	mov	local04, #1
2be54                 | LR__4367
2be54                 | LR__4368
2be54                 | ' 			val = 1;
2be54                 | ' 		}
2be54                 | ' 	}
2be54                 | ' 
2be54                 | ' 	return val;
2be54     16 FB 01 F6 | 	mov	result1, local04
2be58     A7 F0 03 F6 | 	mov	ptra, fp
2be5c     B2 00 A0 FD | 	call	#popregs_
2be60                 | _fatfs_cc_get_fat_ret
2be60     2D 00 64 FD | 	ret
2be64                 | 
2be64                 | _fatfs_cc_put_fat
2be64     08 4A 05 F6 | 	mov	COUNT_, #8
2be68     A8 00 A0 FD | 	call	#pushregs_
2be6c     09 27 02 F6 | 	mov	local01, arg01
2be70     0A 29 02 F6 | 	mov	local02, arg02
2be74     0B 2B 02 F6 | 	mov	local03, arg03
2be78     02 2C 06 F6 | 	mov	local04, #2
2be7c     02 28 16 F2 | 	cmp	local02, #2 wc
2be80     E0 01 90 CD |  if_b	jmp	#LR__4377
2be84     18 26 06 F1 | 	add	local01, #24
2be88     13 2F 02 FB | 	rdlong	local05, local01
2be8c     18 26 86 F1 | 	sub	local01, #24
2be90     17 29 12 F2 | 	cmp	local02, local05 wc
2be94     CC 01 90 3D |  if_ae	jmp	#LR__4377
2be98                 | ' 		switch (fs->fs_type) {
2be98     13 31 C2 FA | 	rdbyte	local06, local01
2be9c     01 30 86 F1 | 	sub	local06, #1
2bea0     03 30 26 F3 | 	fle	local06, #3
2bea4     30 30 62 FD | 	jmprel	local06
2bea8                 | LR__4370
2bea8     0C 00 90 FD | 	jmp	#LR__4371
2beac     F8 00 90 FD | 	jmp	#LR__4374
2beb0     40 01 90 FD | 	jmp	#LR__4375
2beb4     AC 01 90 FD | 	jmp	#LR__4376
2beb8                 | LR__4371
2beb8     14 33 02 F6 | 	mov	local07, local02
2bebc     14 2F 02 F6 | 	mov	local05, local02
2bec0     01 2E 46 F0 | 	shr	local05, #1
2bec4     17 33 02 F1 | 	add	local07, local05
2bec8     13 13 02 F6 | 	mov	arg01, local01
2becc     19 31 02 F6 | 	mov	local06, local07
2bed0     09 30 46 F0 | 	shr	local06, #9
2bed4     24 26 06 F1 | 	add	local01, #36
2bed8     13 15 02 FB | 	rdlong	arg02, local01
2bedc     24 26 86 F1 | 	sub	local01, #36
2bee0     18 15 02 F1 | 	add	arg02, local06
2bee4     20 FC BF FD | 	call	#_fatfs_cc_move_window
2bee8     FD 2C 0A F6 | 	mov	local04, result1 wz
2beec     74 01 90 5D |  if_ne	jmp	#LR__4376
2bef0     34 26 06 F1 | 	add	local01, #52
2bef4     13 35 02 F6 | 	mov	local08, local01
2bef8     19 2F 02 F6 | 	mov	local05, local07
2befc     FF 2F 06 F5 | 	and	local05, #511
2bf00     17 35 02 F1 | 	add	local08, local05
2bf04     01 28 CE F7 | 	test	local02, #1 wz
2bf08     34 26 86 F1 | 	sub	local01, #52
2bf0c     01 32 06 F1 | 	add	local07, #1
2bf10     18 00 90 AD |  if_e	jmp	#LR__4372
2bf14     1A 2F C2 FA | 	rdbyte	local05, local08
2bf18     17 2F 42 F8 | 	getnib	local05, local05, #0
2bf1c     15 31 E2 F8 | 	getbyte	local06, local03, #0
2bf20     04 30 66 F0 | 	shl	local06, #4
2bf24     18 2F 42 F5 | 	or	local05, local06
2bf28     04 00 90 FD | 	jmp	#LR__4373
2bf2c                 | LR__4372
2bf2c     15 2F 02 F6 | 	mov	local05, local03
2bf30                 | LR__4373
2bf30     1A 2F 42 FC | 	wrbyte	local05, local08
2bf34     03 26 06 F1 | 	add	local01, #3
2bf38     13 03 48 FC | 	wrbyte	#1, local01
2bf3c     03 26 86 F1 | 	sub	local01, #3
2bf40     13 13 02 F6 | 	mov	arg01, local01
2bf44     19 35 02 F6 | 	mov	local08, local07
2bf48     09 34 46 F0 | 	shr	local08, #9
2bf4c     24 26 06 F1 | 	add	local01, #36
2bf50     13 15 02 FB | 	rdlong	arg02, local01
2bf54     24 26 86 F1 | 	sub	local01, #36
2bf58     1A 15 02 F1 | 	add	arg02, local08
2bf5c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2bf60     FD 2C 0A F6 | 	mov	local04, result1 wz
2bf64     FC 00 90 5D |  if_ne	jmp	#LR__4376
2bf68     34 26 06 F1 | 	add	local01, #52
2bf6c     13 35 02 F6 | 	mov	local08, local01
2bf70     FF 33 06 F5 | 	and	local07, #511
2bf74     19 35 02 F1 | 	add	local08, local07
2bf78     01 28 CE F7 | 	test	local02, #1 wz
2bf7c     04 2A 46 50 |  if_ne	shr	local03, #4
2bf80     15 2F 02 56 |  if_ne	mov	local05, local03
2bf84     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2bf88     F0 2E 06 A5 |  if_e	and	local05, #240
2bf8c     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2bf90     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2bf94     15 2F 42 A5 |  if_e	or	local05, local03
2bf98     1A 2F 42 FC | 	wrbyte	local05, local08
2bf9c     31 26 86 F1 | 	sub	local01, #49
2bfa0     13 03 48 FC | 	wrbyte	#1, local01
2bfa4                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2bfa4                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2bfa4                 | ' 			fs->wflag = 1;
2bfa4                 | ' 			break;
2bfa4     BC 00 90 FD | 	jmp	#LR__4376
2bfa8                 | LR__4374
2bfa8     13 13 02 F6 | 	mov	arg01, local01
2bfac     14 35 02 F6 | 	mov	local08, local02
2bfb0     08 34 46 F0 | 	shr	local08, #8
2bfb4     24 26 06 F1 | 	add	local01, #36
2bfb8     13 15 02 FB | 	rdlong	arg02, local01
2bfbc     24 26 86 F1 | 	sub	local01, #36
2bfc0     1A 15 02 F1 | 	add	arg02, local08
2bfc4     40 FB BF FD | 	call	#_fatfs_cc_move_window
2bfc8     FD 2C 0A F6 | 	mov	local04, result1 wz
2bfcc     94 00 90 5D |  if_ne	jmp	#LR__4376
2bfd0     34 26 06 F1 | 	add	local01, #52
2bfd4     13 13 02 F6 | 	mov	arg01, local01
2bfd8     01 28 66 F0 | 	shl	local02, #1
2bfdc     FF 29 06 F5 | 	and	local02, #511
2bfe0     14 13 02 F1 | 	add	arg01, local02
2bfe4     09 2B 52 FC | 	wrword	local03, arg01
2bfe8     31 26 86 F1 | 	sub	local01, #49
2bfec     13 03 48 FC | 	wrbyte	#1, local01
2bff0                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2bff0                 | ' 			fs->wflag = 1;
2bff0                 | ' 			break;
2bff0     70 00 90 FD | 	jmp	#LR__4376
2bff4                 | LR__4375
2bff4     13 13 02 F6 | 	mov	arg01, local01
2bff8     14 35 02 F6 | 	mov	local08, local02
2bffc     07 34 46 F0 | 	shr	local08, #7
2c000     24 26 06 F1 | 	add	local01, #36
2c004     13 15 02 FB | 	rdlong	arg02, local01
2c008     24 26 86 F1 | 	sub	local01, #36
2c00c     1A 15 02 F1 | 	add	arg02, local08
2c010     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2c014     FD 2C 0A F6 | 	mov	local04, result1 wz
2c018     48 00 90 5D |  if_ne	jmp	#LR__4376
2c01c     7C 2A 06 F4 | 	bitl	local03, #124
2c020     34 26 06 F1 | 	add	local01, #52
2c024     14 35 02 F6 | 	mov	local08, local02
2c028     02 34 66 F0 | 	shl	local08, #2
2c02c     FF 35 06 F5 | 	and	local08, #511
2c030     13 13 02 F6 | 	mov	arg01, local01
2c034     1A 13 02 F1 | 	add	arg01, local08
2c038                 | ' {
2c038                 | ' 
2c038                 | ' 	return *((DWORD*)ptr);
2c038     09 35 02 FB | 	rdlong	local08, arg01
2c03c     00 00 78 FF 
2c040     00 34 06 F5 | 	and	local08, ##-268435456
2c044     1A 2B 42 F5 | 	or	local03, local08
2c048     13 13 02 F6 | 	mov	arg01, local01
2c04c     02 28 66 F0 | 	shl	local02, #2
2c050     FF 29 06 F5 | 	and	local02, #511
2c054     14 13 02 F1 | 	add	arg01, local02
2c058     09 2B 62 FC | 	wrlong	local03, arg01
2c05c     31 26 86 F1 | 	sub	local01, #49
2c060     13 03 48 FC | 	wrbyte	#1, local01
2c064                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2c064                 | ' 			}
2c064                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2c064                 | ' 			fs->wflag = 1;
2c064                 | ' 			break;
2c064                 | LR__4376
2c064                 | LR__4377
2c064                 | ' 		}
2c064                 | ' 	}
2c064                 | ' 	return res;
2c064     16 FB 01 F6 | 	mov	result1, local04
2c068     A7 F0 03 F6 | 	mov	ptra, fp
2c06c     B2 00 A0 FD | 	call	#popregs_
2c070                 | _fatfs_cc_put_fat_ret
2c070     2D 00 64 FD | 	ret
2c074                 | 
2c074                 | _fatfs_cc_remove_chain
2c074     05 4A 05 F6 | 	mov	COUNT_, #5
2c078     A8 00 A0 FD | 	call	#pushregs_
2c07c     09 27 02 F6 | 	mov	local01, arg01
2c080     0A 29 02 F6 | 	mov	local02, arg02
2c084     0B 2B 02 F6 | 	mov	local03, arg03
2c088     13 2D 02 FB | 	rdlong	local04, local01
2c08c     02 28 16 F2 | 	cmp	local02, #2 wc
2c090     14 00 90 CD |  if_b	jmp	#LR__4380
2c094     18 2C 06 F1 | 	add	local04, #24
2c098     16 FB 01 FB | 	rdlong	result1, local04
2c09c     18 2C 86 F1 | 	sub	local04, #24
2c0a0     FD 28 12 F2 | 	cmp	local02, result1 wc
2c0a4     08 00 90 CD |  if_b	jmp	#LR__4381
2c0a8                 | LR__4380
2c0a8     02 FA 05 F6 | 	mov	result1, #2
2c0ac     CC 00 90 FD | 	jmp	#LR__4386
2c0b0                 | LR__4381
2c0b0     00 2A 0E F2 | 	cmp	local03, #0 wz
2c0b4     18 00 90 AD |  if_e	jmp	#LR__4382
2c0b8     15 15 02 F6 | 	mov	arg02, local03
2c0bc     16 13 02 F6 | 	mov	arg01, local04
2c0c0     01 16 66 F6 | 	neg	arg03, #1
2c0c4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2c0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0cc     AC 00 90 5D |  if_ne	jmp	#LR__4386
2c0d0                 | LR__4382
2c0d0                 | ' 	}
2c0d0                 | ' 
2c0d0                 | ' 
2c0d0                 | ' 	do {
2c0d0                 | LR__4383
2c0d0     14 15 02 F6 | 	mov	arg02, local02
2c0d4     13 13 02 F6 | 	mov	arg01, local01
2c0d8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2c0dc     FD 2E 0A F6 | 	mov	local05, result1 wz
2c0e0     94 00 90 AD |  if_e	jmp	#LR__4385
2c0e4     01 2E 0E F2 | 	cmp	local05, #1 wz
2c0e8     02 FA 05 A6 |  if_e	mov	result1, #2
2c0ec     8C 00 90 AD |  if_e	jmp	#LR__4386
2c0f0     FF FF 7F FF 
2c0f4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2c0f8     01 FA 05 A6 |  if_e	mov	result1, #1
2c0fc     7C 00 90 AD |  if_e	jmp	#LR__4386
2c100     14 15 02 F6 | 	mov	arg02, local02
2c104     16 13 02 F6 | 	mov	arg01, local04
2c108     00 16 06 F6 | 	mov	arg03, #0
2c10c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2c110     FD 2A 0A F6 | 	mov	local03, result1 wz
2c114     15 FB 01 56 |  if_ne	mov	result1, local03
2c118     60 00 90 5D |  if_ne	jmp	#LR__4386
2c11c     18 2C 06 F1 | 	add	local04, #24
2c120     16 2B 02 FB | 	rdlong	local03, local04
2c124     02 2A 86 F1 | 	sub	local03, #2
2c128     04 2C 86 F1 | 	sub	local04, #4
2c12c     16 29 02 FB | 	rdlong	local02, local04
2c130     14 2C 86 F1 | 	sub	local04, #20
2c134     15 29 12 F2 | 	cmp	local02, local03 wc
2c138     24 00 90 3D |  if_ae	jmp	#LR__4384
2c13c     14 2C 06 F1 | 	add	local04, #20
2c140     16 2B 02 FB | 	rdlong	local03, local04
2c144     01 2A 06 F1 | 	add	local03, #1
2c148     16 2B 62 FC | 	wrlong	local03, local04
2c14c     10 2C 86 F1 | 	sub	local04, #16
2c150     16 2B C2 FA | 	rdbyte	local03, local04
2c154     01 2A 46 F5 | 	or	local03, #1
2c158     16 2B 42 FC | 	wrbyte	local03, local04
2c15c     04 2C 86 F1 | 	sub	local04, #4
2c160                 | LR__4384
2c160     17 29 02 F6 | 	mov	local02, local05
2c164     18 2C 06 F1 | 	add	local04, #24
2c168     16 2F 02 FB | 	rdlong	local05, local04
2c16c     18 2C 86 F1 | 	sub	local04, #24
2c170     17 29 12 F2 | 	cmp	local02, local05 wc
2c174     58 FF 9F CD |  if_b	jmp	#LR__4383
2c178                 | LR__4385
2c178                 | ' #line 1500 "ff.c"
2c178                 | ' 	return FR_OK;
2c178     00 FA 05 F6 | 	mov	result1, #0
2c17c                 | LR__4386
2c17c     A7 F0 03 F6 | 	mov	ptra, fp
2c180     B2 00 A0 FD | 	call	#popregs_
2c184                 | _fatfs_cc_remove_chain_ret
2c184     2D 00 64 FD | 	ret
2c188                 | 
2c188                 | _fatfs_cc_create_chain
2c188     09 4A 05 F6 | 	mov	COUNT_, #9
2c18c     A8 00 A0 FD | 	call	#pushregs_
2c190     09 27 02 F6 | 	mov	local01, arg01
2c194     0A 29 0A F6 | 	mov	local02, arg02 wz
2c198     13 2B 02 FB | 	rdlong	local03, local01
2c19c     28 00 90 5D |  if_ne	jmp	#LR__4390
2c1a0     10 2A 06 F1 | 	add	local03, #16
2c1a4     15 2D 0A FB | 	rdlong	local04, local03 wz
2c1a8     10 2A 86 F1 | 	sub	local03, #16
2c1ac     18 2A 06 51 |  if_ne	add	local03, #24
2c1b0     15 2F 02 5B |  if_ne	rdlong	local05, local03
2c1b4     18 2A 86 51 |  if_ne	sub	local03, #24
2c1b8     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2c1bc     50 00 90 4D |  if_c_and_nz	jmp	#LR__4391
2c1c0     01 2C 06 F6 | 	mov	local04, #1
2c1c4     48 00 90 FD | 	jmp	#LR__4391
2c1c8                 | LR__4390
2c1c8     14 15 02 F6 | 	mov	arg02, local02
2c1cc     13 13 02 F6 | 	mov	arg01, local01
2c1d0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2c1d4     FD 2C 02 F6 | 	mov	local04, result1
2c1d8     02 2C 16 F2 | 	cmp	local04, #2 wc
2c1dc     01 FA 05 C6 |  if_b	mov	result1, #1
2c1e0     BC 01 90 CD |  if_b	jmp	#LR__4401
2c1e4     FF FF 7F FF 
2c1e8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2c1ec     16 FB 01 A6 |  if_e	mov	result1, local04
2c1f0     AC 01 90 AD |  if_e	jmp	#LR__4401
2c1f4     18 2A 06 F1 | 	add	local03, #24
2c1f8     15 2F 02 FB | 	rdlong	local05, local03
2c1fc     18 2A 86 F1 | 	sub	local03, #24
2c200     17 2D 12 F2 | 	cmp	local04, local05 wc
2c204     16 FB 01 C6 |  if_b	mov	result1, local04
2c208     94 01 90 CD |  if_b	jmp	#LR__4401
2c20c     14 2D 02 F6 | 	mov	local04, local02
2c210                 | LR__4391
2c210     14 2A 06 F1 | 	add	local03, #20
2c214     15 2F 0A FB | 	rdlong	local05, local03 wz
2c218     14 2A 86 F1 | 	sub	local03, #20
2c21c     00 FA 05 A6 |  if_e	mov	result1, #0
2c220     7C 01 90 AD |  if_e	jmp	#LR__4401
2c224     00 30 06 F6 | 	mov	local06, #0
2c228     14 2D 0A F2 | 	cmp	local04, local02 wz
2c22c     74 00 90 5D |  if_ne	jmp	#LR__4394
2c230     16 31 02 F6 | 	mov	local06, local04
2c234     01 30 06 F1 | 	add	local06, #1
2c238     18 2A 06 F1 | 	add	local03, #24
2c23c     15 2F 02 FB | 	rdlong	local05, local03
2c240     18 2A 86 F1 | 	sub	local03, #24
2c244     17 31 12 F2 | 	cmp	local06, local05 wc
2c248     02 30 06 36 |  if_ae	mov	local06, #2
2c24c     18 15 02 F6 | 	mov	arg02, local06
2c250     13 13 02 F6 | 	mov	arg01, local01
2c254     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2c258     FD 2E 02 F6 | 	mov	local05, result1
2c25c     01 2E 0E F2 | 	cmp	local05, #1 wz
2c260     FF FF 7F 5F 
2c264     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2c268     17 FB 01 A6 |  if_e	mov	result1, local05
2c26c     30 01 90 AD |  if_e	jmp	#LR__4401
2c270     00 2E 0E F2 | 	cmp	local05, #0 wz
2c274     2C 00 90 AD |  if_e	jmp	#LR__4393
2c278     10 2A 06 F1 | 	add	local03, #16
2c27c     15 33 02 FB | 	rdlong	local07, local03
2c280     10 2A 86 F1 | 	sub	local03, #16
2c284     02 32 16 F2 | 	cmp	local07, #2 wc
2c288     14 00 90 CD |  if_b	jmp	#LR__4392
2c28c     18 2A 06 F1 | 	add	local03, #24
2c290     15 2F 02 FB | 	rdlong	local05, local03
2c294     18 2A 86 F1 | 	sub	local03, #24
2c298     17 33 12 F2 | 	cmp	local07, local05 wc
2c29c     19 2D 02 C6 |  if_b	mov	local04, local07
2c2a0                 | LR__4392
2c2a0     00 30 06 F6 | 	mov	local06, #0
2c2a4                 | LR__4393
2c2a4                 | LR__4394
2c2a4     00 30 0E F2 | 	cmp	local06, #0 wz
2c2a8     60 00 90 5D |  if_ne	jmp	#LR__4397
2c2ac     16 31 02 F6 | 	mov	local06, local04
2c2b0                 | ' 			ncl = scl;
2c2b0                 | ' 			for (;;) {
2c2b0                 | LR__4395
2c2b0     01 30 06 F1 | 	add	local06, #1
2c2b4     18 2A 06 F1 | 	add	local03, #24
2c2b8     15 2F 02 FB | 	rdlong	local05, local03
2c2bc     18 2A 86 F1 | 	sub	local03, #24
2c2c0     17 31 12 F2 | 	cmp	local06, local05 wc
2c2c4     02 30 06 36 |  if_ae	mov	local06, #2
2c2c8     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2c2cc     00 FA 05 16 |  if_a	mov	result1, #0
2c2d0     CC 00 90 1D |  if_a	jmp	#LR__4401
2c2d4     18 15 02 F6 | 	mov	arg02, local06
2c2d8     13 13 02 F6 | 	mov	arg01, local01
2c2dc     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2c2e0     FD 32 0A F6 | 	mov	local07, result1 wz
2c2e4     24 00 90 AD |  if_e	jmp	#LR__4396
2c2e8     01 32 0E F2 | 	cmp	local07, #1 wz
2c2ec     FF FF 7F 5F 
2c2f0     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2c2f4     19 FB 01 A6 |  if_e	mov	result1, local07
2c2f8     A4 00 90 AD |  if_e	jmp	#LR__4401
2c2fc     16 31 0A F2 | 	cmp	local06, local04 wz
2c300     00 FA 05 A6 |  if_e	mov	result1, #0
2c304     98 00 90 AD |  if_e	jmp	#LR__4401
2c308     A4 FF 9F FD | 	jmp	#LR__4395
2c30c                 | LR__4396
2c30c                 | LR__4397
2c30c     15 13 02 F6 | 	mov	arg01, local03
2c310     18 15 02 F6 | 	mov	arg02, local06
2c314     01 16 66 F6 | 	neg	arg03, #1
2c318     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2c31c     FD 34 0A F6 | 	mov	local08, result1 wz
2c320     1C 00 90 5D |  if_ne	jmp	#LR__4398
2c324     00 28 0E F2 | 	cmp	local02, #0 wz
2c328     14 00 90 AD |  if_e	jmp	#LR__4398
2c32c     15 13 02 F6 | 	mov	arg01, local03
2c330     14 15 02 F6 | 	mov	arg02, local02
2c334     18 17 02 F6 | 	mov	arg03, local06
2c338     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2c33c     FD 34 02 F6 | 	mov	local08, result1
2c340                 | LR__4398
2c340     00 34 0E F2 | 	cmp	local08, #0 wz
2c344     4C 00 90 5D |  if_ne	jmp	#LR__4399
2c348     10 2A 06 F1 | 	add	local03, #16
2c34c     15 31 62 FC | 	wrlong	local06, local03
2c350     08 2A 06 F1 | 	add	local03, #8
2c354     15 2F 02 FB | 	rdlong	local05, local03
2c358     02 2E 86 F1 | 	sub	local05, #2
2c35c     04 2A 86 F1 | 	sub	local03, #4
2c360     15 37 02 FB | 	rdlong	local09, local03
2c364     14 2A 86 F1 | 	sub	local03, #20
2c368     17 37 1A F2 | 	cmp	local09, local05 wcz
2c36c     14 2A 06 E1 |  if_be	add	local03, #20
2c370     15 37 02 EB |  if_be	rdlong	local09, local03
2c374     01 36 86 E1 |  if_be	sub	local09, #1
2c378     15 37 62 EC |  if_be	wrlong	local09, local03
2c37c     14 2A 86 E1 |  if_be	sub	local03, #20
2c380     04 2A 06 F1 | 	add	local03, #4
2c384     15 2F C2 FA | 	rdbyte	local05, local03
2c388     01 2E 46 F5 | 	or	local05, #1
2c38c     15 2F 42 FC | 	wrbyte	local05, local03
2c390     08 00 90 FD | 	jmp	#LR__4400
2c394                 | LR__4399
2c394     01 34 0E F2 | 	cmp	local08, #1 wz
2c398     01 30 C6 F6 | 	negz	local06, #1
2c39c                 | LR__4400
2c39c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2c39c                 | ' 	}
2c39c                 | ' 
2c39c                 | ' 	return ncl;
2c39c     18 FB 01 F6 | 	mov	result1, local06
2c3a0                 | LR__4401
2c3a0     A7 F0 03 F6 | 	mov	ptra, fp
2c3a4     B2 00 A0 FD | 	call	#popregs_
2c3a8                 | _fatfs_cc_create_chain_ret
2c3a8     2D 00 64 FD | 	ret
2c3ac                 | 
2c3ac                 | _fatfs_cc_dir_clear
2c3ac     06 4A 05 F6 | 	mov	COUNT_, #6
2c3b0     A8 00 A0 FD | 	call	#pushregs_
2c3b4     09 27 02 F6 | 	mov	local01, arg01
2c3b8     0A 29 02 F6 | 	mov	local02, arg02
2c3bc     13 13 02 F6 | 	mov	arg01, local01
2c3c0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2c3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3c8     01 FA 05 56 |  if_ne	mov	result1, #1
2c3cc     90 00 90 5D |  if_ne	jmp	#LR__4412
2c3d0     13 13 02 F6 | 	mov	arg01, local01
2c3d4     14 15 02 F6 | 	mov	arg02, local02
2c3d8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2c3dc     FD 2A 02 F6 | 	mov	local03, result1
2c3e0     30 26 06 F1 | 	add	local01, #48
2c3e4     13 2B 62 FC | 	wrlong	local03, local01
2c3e8     04 26 06 F1 | 	add	local01, #4
2c3ec     13 13 02 F6 | 	mov	arg01, local01
2c3f0     00 14 06 F6 | 	mov	arg02, #0
2c3f4     09 16 C6 F9 | 	decod	arg03, #9
2c3f8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c3fc     13 2D 02 F6 | 	mov	local04, local01
2c400                 | ' #line 1667 "ff.c"
2c400                 | ' 	{
2c400                 | ' 		ibuf = fs->win; szb = 1;
2c400                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2c400     00 2E 06 F6 | 	mov	local05, #0
2c404     34 26 86 F1 | 	sub	local01, #52
2c408                 | LR__4410
2c408     0A 26 06 F1 | 	add	local01, #10
2c40c     13 31 E2 FA | 	rdword	local06, local01
2c410     0A 26 86 F1 | 	sub	local01, #10
2c414     18 2F 12 F2 | 	cmp	local05, local06 wc
2c418     2C 00 90 3D |  if_ae	jmp	#LR__4411
2c41c     01 26 06 F1 | 	add	local01, #1
2c420     13 13 C2 FA | 	rdbyte	arg01, local01
2c424     01 26 86 F1 | 	sub	local01, #1
2c428     16 15 02 F6 | 	mov	arg02, local04
2c42c     15 17 02 F6 | 	mov	arg03, local03
2c430     17 17 02 F1 | 	add	arg03, local05
2c434     01 18 06 F6 | 	mov	arg04, #1
2c438     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2c43c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c440     01 2E 06 A1 |  if_e	add	local05, #1
2c444     C0 FF 9F AD |  if_e	jmp	#LR__4410
2c448                 | LR__4411
2c448                 | ' 	}
2c448                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2c448     0A 26 06 F1 | 	add	local01, #10
2c44c     13 2D E2 FA | 	rdword	local04, local01
2c450     16 2F 0A F2 | 	cmp	local05, local04 wz
2c454     00 30 06 A6 |  if_e	mov	local06, #0
2c458     01 30 06 56 |  if_ne	mov	local06, #1
2c45c     18 FB 01 F6 | 	mov	result1, local06
2c460                 | LR__4412
2c460     A7 F0 03 F6 | 	mov	ptra, fp
2c464     B2 00 A0 FD | 	call	#popregs_
2c468                 | _fatfs_cc_dir_clear_ret
2c468     2D 00 64 FD | 	ret
2c46c                 | 
2c46c                 | _fatfs_cc_dir_sdi
2c46c     06 4A 05 F6 | 	mov	COUNT_, #6
2c470     A8 00 A0 FD | 	call	#pushregs_
2c474     09 27 02 F6 | 	mov	local01, arg01
2c478     0A 29 02 F6 | 	mov	local02, arg02
2c47c     13 2B 02 FB | 	rdlong	local03, local01
2c480     00 10 00 FF 
2c484     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2c488     1F 28 CE C7 |  if_b	test	local02, #31 wz
2c48c                 | ' 		return FR_INT_ERR;
2c48c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2c490     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4426
2c494     10 26 06 F1 | 	add	local01, #16
2c498     13 29 62 FC | 	wrlong	local02, local01
2c49c     08 26 86 F1 | 	sub	local01, #8
2c4a0     13 2D 0A FB | 	rdlong	local04, local01 wz
2c4a4     08 26 86 F1 | 	sub	local01, #8
2c4a8     15 2F C2 AA |  if_e	rdbyte	local05, local03
2c4ac     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2c4b0     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2c4b4     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2c4b8     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2c4bc     00 2C 0E F2 | 	cmp	local04, #0 wz
2c4c0     3C 00 90 5D |  if_ne	jmp	#LR__4420
2c4c4     14 2F 02 F6 | 	mov	local05, local02
2c4c8     05 2E 46 F0 | 	shr	local05, #5
2c4cc     08 2A 06 F1 | 	add	local03, #8
2c4d0     15 15 E2 FA | 	rdword	arg02, local03
2c4d4     08 2A 86 F1 | 	sub	local03, #8
2c4d8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2c4dc     02 FA 05 36 |  if_ae	mov	result1, #2
2c4e0     E4 00 90 3D |  if_ae	jmp	#LR__4426
2c4e4     28 2A 06 F1 | 	add	local03, #40
2c4e8     15 2F 02 FB | 	rdlong	local05, local03
2c4ec     28 2A 86 F1 | 	sub	local03, #40
2c4f0     18 26 06 F1 | 	add	local01, #24
2c4f4     13 2F 62 FC | 	wrlong	local05, local01
2c4f8     18 26 86 F1 | 	sub	local01, #24
2c4fc     7C 00 90 FD | 	jmp	#LR__4425
2c500                 | LR__4420
2c500     0A 2A 06 F1 | 	add	local03, #10
2c504     15 31 E2 FA | 	rdword	local06, local03
2c508     0A 2A 86 F1 | 	sub	local03, #10
2c50c     09 30 66 F0 | 	shl	local06, #9
2c510                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2c510                 | ' 		while (ofs >= csz) {
2c510                 | LR__4421
2c510     18 29 12 F2 | 	cmp	local02, local06 wc
2c514     4C 00 90 CD |  if_b	jmp	#LR__4424
2c518     13 13 02 F6 | 	mov	arg01, local01
2c51c     16 15 02 F6 | 	mov	arg02, local04
2c520     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2c524     FD 2C 02 F6 | 	mov	local04, result1
2c528     FF FF 7F FF 
2c52c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2c530     01 FA 05 A6 |  if_e	mov	result1, #1
2c534     90 00 90 AD |  if_e	jmp	#LR__4426
2c538     02 2C 16 F2 | 	cmp	local04, #2 wc
2c53c     14 00 90 CD |  if_b	jmp	#LR__4422
2c540     18 2A 06 F1 | 	add	local03, #24
2c544     15 2F 02 FB | 	rdlong	local05, local03
2c548     18 2A 86 F1 | 	sub	local03, #24
2c54c     17 2D 12 F2 | 	cmp	local04, local05 wc
2c550     08 00 90 CD |  if_b	jmp	#LR__4423
2c554                 | LR__4422
2c554     02 FA 05 F6 | 	mov	result1, #2
2c558     6C 00 90 FD | 	jmp	#LR__4426
2c55c                 | LR__4423
2c55c     18 29 82 F1 | 	sub	local02, local06
2c560     AC FF 9F FD | 	jmp	#LR__4421
2c564                 | LR__4424
2c564     15 13 02 F6 | 	mov	arg01, local03
2c568     16 15 02 F6 | 	mov	arg02, local04
2c56c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2c570     18 26 06 F1 | 	add	local01, #24
2c574     13 FB 61 FC | 	wrlong	result1, local01
2c578     18 26 86 F1 | 	sub	local01, #24
2c57c                 | LR__4425
2c57c     14 26 06 F1 | 	add	local01, #20
2c580     13 2D 62 FC | 	wrlong	local04, local01
2c584     04 26 06 F1 | 	add	local01, #4
2c588     13 2F 0A FB | 	rdlong	local05, local01 wz
2c58c     18 26 86 F1 | 	sub	local01, #24
2c590     02 FA 05 A6 |  if_e	mov	result1, #2
2c594     30 00 90 AD |  if_e	jmp	#LR__4426
2c598     14 31 02 F6 | 	mov	local06, local02
2c59c     09 30 46 F0 | 	shr	local06, #9
2c5a0     18 26 06 F1 | 	add	local01, #24
2c5a4     13 2F 02 FB | 	rdlong	local05, local01
2c5a8     18 2F 02 F1 | 	add	local05, local06
2c5ac     13 2F 62 FC | 	wrlong	local05, local01
2c5b0     34 2A 06 F1 | 	add	local03, #52
2c5b4     FF 29 06 F5 | 	and	local02, #511
2c5b8     14 2B 02 F1 | 	add	local03, local02
2c5bc     04 26 06 F1 | 	add	local01, #4
2c5c0     13 2B 62 FC | 	wrlong	local03, local01
2c5c4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2c5c4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2c5c4                 | ' 
2c5c4                 | ' 	return FR_OK;
2c5c4     00 FA 05 F6 | 	mov	result1, #0
2c5c8                 | LR__4426
2c5c8     A7 F0 03 F6 | 	mov	ptra, fp
2c5cc     B2 00 A0 FD | 	call	#popregs_
2c5d0                 | _fatfs_cc_dir_sdi_ret
2c5d0     2D 00 64 FD | 	ret
2c5d4                 | 
2c5d4                 | _fatfs_cc_dir_next
2c5d4     05 4A 05 F6 | 	mov	COUNT_, #5
2c5d8     A8 00 A0 FD | 	call	#pushregs_
2c5dc     09 27 02 F6 | 	mov	local01, arg01
2c5e0     0A 29 02 F6 | 	mov	local02, arg02
2c5e4     13 2B 02 FB | 	rdlong	local03, local01
2c5e8     10 26 06 F1 | 	add	local01, #16
2c5ec     13 2D 02 FB | 	rdlong	local04, local01
2c5f0     10 26 86 F1 | 	sub	local01, #16
2c5f4     20 2C 06 F1 | 	add	local04, #32
2c5f8     00 10 00 FF 
2c5fc     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2c600     18 26 06 31 |  if_ae	add	local01, #24
2c604     13 01 68 3C |  if_ae	wrlong	#0, local01
2c608     18 26 86 31 |  if_ae	sub	local01, #24
2c60c     18 26 06 F1 | 	add	local01, #24
2c610     13 15 0A FB | 	rdlong	arg02, local01 wz
2c614     18 26 86 F1 | 	sub	local01, #24
2c618     04 FA 05 A6 |  if_e	mov	result1, #4
2c61c     64 01 90 AD |  if_e	jmp	#LR__4435
2c620     FF 2D CE F7 | 	test	local04, #511 wz
2c624     3C 01 90 5D |  if_ne	jmp	#LR__4434
2c628     18 26 06 F1 | 	add	local01, #24
2c62c     13 15 02 FB | 	rdlong	arg02, local01
2c630     01 14 06 F1 | 	add	arg02, #1
2c634     13 15 62 FC | 	wrlong	arg02, local01
2c638     04 26 86 F1 | 	sub	local01, #4
2c63c     13 15 0A FB | 	rdlong	arg02, local01 wz
2c640     14 26 86 F1 | 	sub	local01, #20
2c644     2C 00 90 5D |  if_ne	jmp	#LR__4430
2c648     16 15 02 F6 | 	mov	arg02, local04
2c64c     05 14 46 F0 | 	shr	arg02, #5
2c650     08 2A 06 F1 | 	add	local03, #8
2c654     15 29 E2 FA | 	rdword	local02, local03
2c658     08 2A 86 F1 | 	sub	local03, #8
2c65c     14 15 12 F2 | 	cmp	arg02, local02 wc
2c660     18 26 06 31 |  if_ae	add	local01, #24
2c664     13 01 68 3C |  if_ae	wrlong	#0, local01
2c668                 | ' 				dp->sect = 0; return FR_NO_FILE;
2c668     04 FA 05 36 |  if_ae	mov	result1, #4
2c66c     14 01 90 3D |  if_ae	jmp	#LR__4435
2c670     F0 00 90 FD | 	jmp	#LR__4433
2c674                 | LR__4430
2c674     16 13 02 F6 | 	mov	arg01, local04
2c678     09 12 46 F0 | 	shr	arg01, #9
2c67c     0A 2A 06 F1 | 	add	local03, #10
2c680     15 15 E2 FA | 	rdword	arg02, local03
2c684     0A 2A 86 F1 | 	sub	local03, #10
2c688     01 14 86 F1 | 	sub	arg02, #1
2c68c     0A 13 CA F7 | 	test	arg01, arg02 wz
2c690     D0 00 90 5D |  if_ne	jmp	#LR__4432
2c694     13 13 02 F6 | 	mov	arg01, local01
2c698     14 26 06 F1 | 	add	local01, #20
2c69c     13 15 02 FB | 	rdlong	arg02, local01
2c6a0     14 26 86 F1 | 	sub	local01, #20
2c6a4     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2c6a8     FD 2E 02 F6 | 	mov	local05, result1
2c6ac     02 2E 16 F2 | 	cmp	local05, #2 wc
2c6b0     02 FA 05 C6 |  if_b	mov	result1, #2
2c6b4     CC 00 90 CD |  if_b	jmp	#LR__4435
2c6b8     FF FF 7F FF 
2c6bc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2c6c0     01 FA 05 A6 |  if_e	mov	result1, #1
2c6c4     BC 00 90 AD |  if_e	jmp	#LR__4435
2c6c8     18 2A 06 F1 | 	add	local03, #24
2c6cc     15 15 02 FB | 	rdlong	arg02, local03
2c6d0     18 2A 86 F1 | 	sub	local03, #24
2c6d4     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2c6d8     68 00 90 CD |  if_b	jmp	#LR__4431
2c6dc     00 28 0E F2 | 	cmp	local02, #0 wz
2c6e0     18 26 06 A1 |  if_e	add	local01, #24
2c6e4     13 01 68 AC |  if_e	wrlong	#0, local01
2c6e8                 | ' 						dp->sect = 0; return FR_NO_FILE;
2c6e8     04 FA 05 A6 |  if_e	mov	result1, #4
2c6ec     94 00 90 AD |  if_e	jmp	#LR__4435
2c6f0     13 13 02 F6 | 	mov	arg01, local01
2c6f4     14 26 06 F1 | 	add	local01, #20
2c6f8     13 15 02 FB | 	rdlong	arg02, local01
2c6fc     14 26 86 F1 | 	sub	local01, #20
2c700     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2c704     FD 2E 0A F6 | 	mov	local05, result1 wz
2c708     07 FA 05 A6 |  if_e	mov	result1, #7
2c70c     74 00 90 AD |  if_e	jmp	#LR__4435
2c710     01 2E 0E F2 | 	cmp	local05, #1 wz
2c714     02 FA 05 A6 |  if_e	mov	result1, #2
2c718     68 00 90 AD |  if_e	jmp	#LR__4435
2c71c     FF FF 7F FF 
2c720     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2c724     01 FA 05 A6 |  if_e	mov	result1, #1
2c728     58 00 90 AD |  if_e	jmp	#LR__4435
2c72c     17 15 02 F6 | 	mov	arg02, local05
2c730     15 13 02 F6 | 	mov	arg01, local03
2c734     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2c738     00 FA 0D F2 | 	cmp	result1, #0 wz
2c73c     01 FA 05 56 |  if_ne	mov	result1, #1
2c740     40 00 90 5D |  if_ne	jmp	#LR__4435
2c744                 | LR__4431
2c744     14 26 06 F1 | 	add	local01, #20
2c748     13 2F 62 FC | 	wrlong	local05, local01
2c74c     15 13 02 F6 | 	mov	arg01, local03
2c750     17 15 02 F6 | 	mov	arg02, local05
2c754     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2c758     04 26 06 F1 | 	add	local01, #4
2c75c     13 FB 61 FC | 	wrlong	result1, local01
2c760     18 26 86 F1 | 	sub	local01, #24
2c764                 | LR__4432
2c764                 | LR__4433
2c764                 | LR__4434
2c764     10 26 06 F1 | 	add	local01, #16
2c768     13 2D 62 FC | 	wrlong	local04, local01
2c76c     34 2A 06 F1 | 	add	local03, #52
2c770     FF 2D 06 F5 | 	and	local04, #511
2c774     16 2B 02 F1 | 	add	local03, local04
2c778     0C 26 06 F1 | 	add	local01, #12
2c77c     13 2B 62 FC | 	wrlong	local03, local01
2c780                 | ' #line 1771 "ff.c"
2c780                 | ' 				}
2c780                 | ' 				dp->clust = clst;
2c780                 | ' 				dp->sect = clst2sect(fs, clst);
2c780                 | ' 			}
2c780                 | ' 		}
2c780                 | ' 	}
2c780                 | ' 	dp->dptr = ofs;
2c780                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2c780                 | ' 
2c780                 | ' 	return FR_OK;
2c780     00 FA 05 F6 | 	mov	result1, #0
2c784                 | LR__4435
2c784     A7 F0 03 F6 | 	mov	ptra, fp
2c788     B2 00 A0 FD | 	call	#popregs_
2c78c                 | _fatfs_cc_dir_next_ret
2c78c     2D 00 64 FD | 	ret
2c790                 | 
2c790                 | _fatfs_cc_dir_alloc
2c790     08 4A 05 F6 | 	mov	COUNT_, #8
2c794     A8 00 A0 FD | 	call	#pushregs_
2c798     09 27 02 F6 | 	mov	local01, arg01
2c79c     0A 29 02 F6 | 	mov	local02, arg02
2c7a0     13 2B 02 FB | 	rdlong	local03, local01
2c7a4     13 13 02 F6 | 	mov	arg01, local01
2c7a8     00 14 06 F6 | 	mov	arg02, #0
2c7ac     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2c7b0     FD 2C 0A F6 | 	mov	local04, result1 wz
2c7b4     70 00 90 5D |  if_ne	jmp	#LR__4444
2c7b8     00 2E 06 F6 | 	mov	local05, #0
2c7bc                 | ' 		n = 0;
2c7bc                 | ' 		do {
2c7bc                 | LR__4440
2c7bc     18 26 06 F1 | 	add	local01, #24
2c7c0     13 15 02 FB | 	rdlong	arg02, local01
2c7c4     18 26 86 F1 | 	sub	local01, #24
2c7c8     15 13 02 F6 | 	mov	arg01, local03
2c7cc     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2c7d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2c7d4     50 00 90 5D |  if_ne	jmp	#LR__4443
2c7d8     1C 26 06 F1 | 	add	local01, #28
2c7dc     13 31 02 FB | 	rdlong	local06, local01
2c7e0     1C 26 86 F1 | 	sub	local01, #28
2c7e4     18 31 C2 FA | 	rdbyte	local06, local06
2c7e8     E5 30 0E F2 | 	cmp	local06, #229 wz
2c7ec     1C 26 06 51 |  if_ne	add	local01, #28
2c7f0     13 33 02 5B |  if_ne	rdlong	local07, local01
2c7f4     1C 26 86 51 |  if_ne	sub	local01, #28
2c7f8     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2c7fc     10 00 90 5D |  if_ne	jmp	#LR__4441
2c800     01 2E 06 F1 | 	add	local05, #1
2c804     14 2F 0A F2 | 	cmp	local05, local02 wz
2c808     1C 00 90 AD |  if_e	jmp	#LR__4443
2c80c     04 00 90 FD | 	jmp	#LR__4442
2c810                 | LR__4441
2c810     00 2E 06 F6 | 	mov	local05, #0
2c814                 | LR__4442
2c814     13 13 02 F6 | 	mov	arg01, local01
2c818     01 14 06 F6 | 	mov	arg02, #1
2c81c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2c820     FD 2C 0A F6 | 	mov	local04, result1 wz
2c824     94 FF 9F AD |  if_e	jmp	#LR__4440
2c828                 | LR__4443
2c828                 | LR__4444
2c828     04 2C 0E F2 | 	cmp	local04, #4 wz
2c82c     07 2C 06 A6 |  if_e	mov	local04, #7
2c830                 | ' 	return res;
2c830     16 FB 01 F6 | 	mov	result1, local04
2c834     A7 F0 03 F6 | 	mov	ptra, fp
2c838     B2 00 A0 FD | 	call	#popregs_
2c83c                 | _fatfs_cc_dir_alloc_ret
2c83c     2D 00 64 FD | 	ret
2c840                 | 
2c840                 | _fatfs_cc_ld_clust
2c840     09 01 02 F6 | 	mov	_var01, arg01
2c844     0A 13 02 F6 | 	mov	arg01, arg02
2c848     1A 12 06 F1 | 	add	arg01, #26
2c84c                 | ' {
2c84c                 | ' 
2c84c                 | ' 	return *((WORD*)ptr);
2c84c     09 FB E1 FA | 	rdword	result1, arg01
2c850     FD 12 32 F9 | 	getword	arg01, result1, #0
2c854     00 01 C2 FA | 	rdbyte	_var01, _var01
2c858     03 00 0E F2 | 	cmp	_var01, #3 wz
2c85c     14 14 06 A1 |  if_e	add	arg02, #20
2c860                 | ' {
2c860                 | ' 
2c860                 | ' 	return *((WORD*)ptr);
2c860     0A FB E1 AA |  if_e	rdword	result1, arg02
2c864     10 FA 65 A0 |  if_e	shl	result1, #16
2c868     FD 12 42 A5 |  if_e	or	arg01, result1
2c86c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2c86c                 | ' 	}
2c86c                 | ' 
2c86c                 | ' 	return cl;
2c86c     09 FB 01 F6 | 	mov	result1, arg01
2c870                 | _fatfs_cc_ld_clust_ret
2c870     2D 00 64 FD | 	ret
2c874                 | 
2c874                 | _fatfs_cc_st_clust
2c874     09 01 02 F6 | 	mov	_var01, arg01
2c878     0A 13 02 F6 | 	mov	arg01, arg02
2c87c     1A 12 06 F1 | 	add	arg01, #26
2c880     09 17 52 FC | 	wrword	arg03, arg01
2c884     00 01 C2 FA | 	rdbyte	_var01, _var01
2c888     03 00 0E F2 | 	cmp	_var01, #3 wz
2c88c     14 14 06 A1 |  if_e	add	arg02, #20
2c890     10 16 46 A0 |  if_e	shr	arg03, #16
2c894     0A 17 52 AC |  if_e	wrword	arg03, arg02
2c898                 | _fatfs_cc_st_clust_ret
2c898     2D 00 64 FD | 	ret
2c89c                 | 
2c89c                 | _fatfs_cc_cmp_lfn
2c89c     07 4A 05 F6 | 	mov	COUNT_, #7
2c8a0     A8 00 A0 FD | 	call	#pushregs_
2c8a4     09 27 02 F6 | 	mov	local01, arg01
2c8a8     0A 13 02 F6 | 	mov	arg01, arg02
2c8ac     1A 12 06 F1 | 	add	arg01, #26
2c8b0                 | ' {
2c8b0                 | ' 
2c8b0                 | ' 	return *((WORD*)ptr);
2c8b0     09 FB E9 FA | 	rdword	result1, arg01 wz
2c8b4     00 FA 05 56 |  if_ne	mov	result1, #0
2c8b8     E0 00 90 5D |  if_ne	jmp	#LR__4456
2c8bc     0A 29 C2 FA | 	rdbyte	local02, arg02
2c8c0     3F 28 06 F5 | 	and	local02, #63
2c8c4     01 28 86 F1 | 	sub	local02, #1
2c8c8     0D 28 06 FD | 	qmul	local02, #13
2c8cc                 | ' 
2c8cc                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2c8cc                 | ' 
2c8cc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2c8cc     01 2A 06 F6 | 	mov	local03, #1
2c8d0     00 2C 06 F6 | 	mov	local04, #0
2c8d4     18 2E 62 FD | 	getqx	local05
2c8d8                 | LR__4450
2c8d8     0D 2C 16 F2 | 	cmp	local04, #13 wc
2c8dc     9C 00 90 3D |  if_ae	jmp	#LR__4455
2c8e0     0A 13 02 F6 | 	mov	arg01, arg02
2c8e4     16 29 02 F6 | 	mov	local02, local04
2c8e8     01 00 00 FF 
2c8ec     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2c8f0     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2c8f4     14 29 C2 FA | 	rdbyte	local02, local02
2c8f8     01 28 06 FA | 	mul	local02, #1
2c8fc     14 13 02 F1 | 	add	arg01, local02
2c900     01 00 00 FF 
2c904     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2c908                 | ' {
2c908                 | ' 
2c908                 | ' 	return *((WORD*)ptr);
2c908     09 FB E1 FA | 	rdword	result1, arg01
2c90c     FD 30 02 F6 | 	mov	local06, result1
2c910     15 29 02 F6 | 	mov	local02, local03
2c914     0F 28 4E F7 | 	zerox	local02, #15 wz
2c918     44 00 90 AD |  if_e	jmp	#LR__4453
2c91c     00 2F 16 F2 | 	cmp	local05, #256 wc
2c920     2C 00 90 3D |  if_ae	jmp	#LR__4451
2c924     18 13 32 F9 | 	getword	arg01, local06, #0
2c928     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2c92c     FD 28 02 F6 | 	mov	local02, result1
2c930     17 2B 02 F6 | 	mov	local03, local05
2c934     01 2A 66 F0 | 	shl	local03, #1
2c938     13 2B 02 F1 | 	add	local03, local01
2c93c     15 13 E2 FA | 	rdword	arg01, local03
2c940     01 2E 06 F1 | 	add	local05, #1
2c944     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2c948     FD 28 0A F2 | 	cmp	local02, result1 wz
2c94c     08 00 90 AD |  if_e	jmp	#LR__4452
2c950                 | LR__4451
2c950                 | ' 				return 0;
2c950     00 FA 05 F6 | 	mov	result1, #0
2c954     44 00 90 FD | 	jmp	#LR__4456
2c958                 | LR__4452
2c958     18 2B 02 F6 | 	mov	local03, local06
2c95c     14 00 90 FD | 	jmp	#LR__4454
2c960                 | LR__4453
2c960     18 31 32 F9 | 	getword	local06, local06, #0
2c964     7F 00 00 FF 
2c968     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2c96c     00 FA 05 56 |  if_ne	mov	result1, #0
2c970     28 00 90 5D |  if_ne	jmp	#LR__4456
2c974                 | LR__4454
2c974     01 2C 06 F1 | 	add	local04, #1
2c978     5C FF 9F FD | 	jmp	#LR__4450
2c97c                 | LR__4455
2c97c     0A 29 C2 FA | 	rdbyte	local02, arg02
2c980     40 28 CE F7 | 	test	local02, #64 wz
2c984     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2c988     01 2E 66 50 |  if_ne	shl	local05, #1
2c98c     13 2F 02 51 |  if_ne	add	local05, local01
2c990     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2c994     00 FA 05 56 |  if_ne	mov	result1, #0
2c998                 | ' 
2c998                 | ' 	return 1;
2c998     01 FA 05 A6 |  if_e	mov	result1, #1
2c99c                 | LR__4456
2c99c     A7 F0 03 F6 | 	mov	ptra, fp
2c9a0     B2 00 A0 FD | 	call	#popregs_
2c9a4                 | _fatfs_cc_cmp_lfn_ret
2c9a4     2D 00 64 FD | 	ret
2c9a8                 | 
2c9a8                 | _fatfs_cc_pick_lfn
2c9a8     09 01 02 F6 | 	mov	_var01, arg01
2c9ac     0A 13 02 F6 | 	mov	arg01, arg02
2c9b0     1A 12 06 F1 | 	add	arg01, #26
2c9b4                 | ' {
2c9b4                 | ' 
2c9b4                 | ' 	return *((WORD*)ptr);
2c9b4     09 FB E9 FA | 	rdword	result1, arg01 wz
2c9b8     00 FA 05 56 |  if_ne	mov	result1, #0
2c9bc     D4 00 90 5D |  if_ne	jmp	#LR__4465
2c9c0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2c9c4     40 02 26 F5 | 	andn	_var02, #64
2c9c8     01 02 86 F1 | 	sub	_var02, #1
2c9cc     0D 02 06 FD | 	qmul	_var02, #13
2c9d0                 | ' 
2c9d0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2c9d0                 | ' 
2c9d0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2c9d0     01 04 06 F6 | 	mov	_var03, #1
2c9d4     00 06 06 F6 | 	mov	_var04, #0
2c9d8     18 08 62 FD | 	getqx	_var05
2c9dc                 | LR__4460
2c9dc     0D 06 16 F2 | 	cmp	_var04, #13 wc
2c9e0     80 00 90 3D |  if_ae	jmp	#LR__4463
2c9e4     0A 13 02 F6 | 	mov	arg01, arg02
2c9e8     03 03 02 F6 | 	mov	_var02, _var04
2c9ec     01 00 00 FF 
2c9f0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2c9f4     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2c9f8     01 03 C2 FA | 	rdbyte	_var02, _var02
2c9fc     01 02 06 FA | 	mul	_var02, #1
2ca00     01 13 02 F1 | 	add	arg01, _var02
2ca04     01 00 00 FF 
2ca08     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2ca0c                 | ' {
2ca0c                 | ' 
2ca0c                 | ' 	return *((WORD*)ptr);
2ca0c     09 FB E1 FA | 	rdword	result1, arg01
2ca10     FD 0A 02 F6 | 	mov	_var06, result1
2ca14     02 03 02 F6 | 	mov	_var02, _var03
2ca18     0F 02 4E F7 | 	zerox	_var02, #15 wz
2ca1c     28 00 90 AD |  if_e	jmp	#LR__4461
2ca20     00 09 16 F2 | 	cmp	_var05, #256 wc
2ca24     00 FA 05 36 |  if_ae	mov	result1, #0
2ca28     68 00 90 3D |  if_ae	jmp	#LR__4465
2ca2c     04 03 02 F6 | 	mov	_var02, _var05
2ca30     01 02 66 F0 | 	shl	_var02, #1
2ca34     00 03 02 F1 | 	add	_var02, _var01
2ca38     05 05 02 F6 | 	mov	_var03, _var06
2ca3c     01 05 52 FC | 	wrword	_var03, _var02
2ca40     01 08 06 F1 | 	add	_var05, #1
2ca44     14 00 90 FD | 	jmp	#LR__4462
2ca48                 | LR__4461
2ca48     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ca4c     7F 00 00 FF 
2ca50     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2ca54     00 FA 05 56 |  if_ne	mov	result1, #0
2ca58     38 00 90 5D |  if_ne	jmp	#LR__4465
2ca5c                 | LR__4462
2ca5c     01 06 06 F1 | 	add	_var04, #1
2ca60     78 FF 9F FD | 	jmp	#LR__4460
2ca64                 | LR__4463
2ca64     0A 03 C2 FA | 	rdbyte	_var02, arg02
2ca68     40 02 CE F7 | 	test	_var02, #64 wz
2ca6c     02 0D 02 56 |  if_ne	mov	_var07, _var03
2ca70     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2ca74     18 00 90 AD |  if_e	jmp	#LR__4464
2ca78     00 09 16 F2 | 	cmp	_var05, #256 wc
2ca7c     00 FA 05 36 |  if_ae	mov	result1, #0
2ca80     10 00 90 3D |  if_ae	jmp	#LR__4465
2ca84     01 08 66 F0 | 	shl	_var05, #1
2ca88     00 09 02 F1 | 	add	_var05, _var01
2ca8c     04 01 58 FC | 	wrword	#0, _var05
2ca90                 | LR__4464
2ca90                 | ' 		lfnbuf[i] = 0;
2ca90                 | ' 	}
2ca90                 | ' 
2ca90                 | ' 	return 1;
2ca90     01 FA 05 F6 | 	mov	result1, #1
2ca94                 | LR__4465
2ca94                 | _fatfs_cc_pick_lfn_ret
2ca94     2D 00 64 FD | 	ret
2ca98                 | 
2ca98                 | _fatfs_cc_put_lfn
2ca98     0D 14 06 F1 | 	add	arg02, #13
2ca9c     0A 19 42 FC | 	wrbyte	arg04, arg02
2caa0     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2caa4     01 18 86 F1 | 	sub	arg04, #1
2caa8     0D 18 06 FD | 	qmul	arg04, #13
2caac     09 01 02 F6 | 	mov	_var01, arg01
2cab0     02 14 86 F1 | 	sub	arg02, #2
2cab4     0A 1F 48 FC | 	wrbyte	#15, arg02
2cab8     01 14 06 F1 | 	add	arg02, #1
2cabc     0A 01 48 FC | 	wrbyte	#0, arg02
2cac0     0C 14 86 F1 | 	sub	arg02, #12
2cac4     0A 13 02 F6 | 	mov	arg01, arg02
2cac8     1A 12 06 F1 | 	add	arg01, #26
2cacc     09 01 58 FC | 	wrword	#0, arg01
2cad0     00 02 06 F6 | 	mov	_var02, #0
2cad4     00 04 06 F6 | 	mov	_var03, #0
2cad8                 | ' 	BYTE* dir,
2cad8                 | ' 	BYTE ord,
2cad8                 | ' 	BYTE sum
2cad8                 | ' )
2cad8                 | ' {
2cad8                 | ' 	UINT i, s;
2cad8                 | ' 	WCHAR wc;
2cad8                 | ' 
2cad8                 | ' 
2cad8                 | ' 	dir[ 13 ] = sum;
2cad8                 | ' 	dir[ 11 ] =  0x0F ;
2cad8                 | ' 	dir[ 12 ] = 0;
2cad8                 | ' 	st_word(dir +  26 , 0);
2cad8                 | ' 
2cad8                 | ' 	i = (ord - 1) * 13;
2cad8                 | ' 	s = wc = 0;
2cad8                 | ' 	do {
2cad8     01 00 00 FF 
2cadc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2cae0     18 06 62 FD | 	getqx	_var04
2cae4     97 2A 48 FB | 	callpa	#(@LR__4471-@LR__4470)>>2,fcache_load_ptr_
2cae8                 | LR__4470
2cae8     01 19 32 F9 | 	getword	arg04, _var02, #0
2caec     7F 00 00 FF 
2caf0     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2caf4     03 13 02 56 |  if_ne	mov	arg01, _var04
2caf8     01 06 06 51 |  if_ne	add	_var04, #1
2cafc     01 12 66 50 |  if_ne	shl	arg01, #1
2cb00     00 13 02 51 |  if_ne	add	arg01, _var01
2cb04     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2cb08     0A 13 02 F6 | 	mov	arg01, arg02
2cb0c     02 19 02 F6 | 	mov	arg04, _var03
2cb10     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2cb14     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cb18     01 18 06 FA | 	mul	arg04, #1
2cb1c     0C 13 02 F1 | 	add	arg01, arg04
2cb20     09 03 52 FC | 	wrword	_var02, arg01
2cb24     01 19 02 F6 | 	mov	arg04, _var02
2cb28     0F 18 4E F7 | 	zerox	arg04, #15 wz
2cb2c     0F 02 CE A9 |  if_e	bmask	_var02, #15
2cb30     01 04 06 F1 | 	add	_var03, #1
2cb34     0D 04 16 F2 | 	cmp	_var03, #13 wc
2cb38     AC FF 9F CD |  if_b	jmp	#LR__4470
2cb3c                 | LR__4471
2cb3c     01 00 00 FF 
2cb40     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2cb44     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb48     7F 00 00 FF 
2cb4c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2cb50     01 06 66 50 |  if_ne	shl	_var04, #1
2cb54     00 07 02 51 |  if_ne	add	_var04, _var01
2cb58     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2cb5c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2cb60     40 16 46 A5 |  if_e	or	arg03, #64
2cb64     0A 17 42 FC | 	wrbyte	arg03, arg02
2cb68                 | _fatfs_cc_put_lfn_ret
2cb68     2D 00 64 FD | 	ret
2cb6c                 | 
2cb6c                 | _fatfs_cc_gen_numname
2cb6c     08 4A 05 F6 | 	mov	COUNT_, #8
2cb70     A8 00 A0 FD | 	call	#pushregs_
2cb74     2C F0 07 F1 | 	add	ptra, #44
2cb78     09 27 02 F6 | 	mov	local01, arg01
2cb7c     0A 29 02 F6 | 	mov	local02, arg02
2cb80     0B 2B 02 F6 | 	mov	local03, arg03
2cb84     0C 2D 02 F6 | 	mov	local04, arg04
2cb88     13 13 02 F6 | 	mov	arg01, local01
2cb8c     14 15 02 F6 | 	mov	arg02, local02
2cb90     0B 16 06 F6 | 	mov	arg03, #11
2cb94     9C 72 BF FD | 	call	#__system____builtin_memmove
2cb98     06 2C 16 F2 | 	cmp	local04, #6 wc
2cb9c     48 00 90 CD |  if_b	jmp	#LR__4485
2cba0     16 2F 02 F6 | 	mov	local05, local04
2cba4     97 1E 48 FB | 	callpa	#(@LR__4483-@LR__4480)>>2,fcache_load_ptr_
2cba8                 | ' 		sreg = seq;
2cba8                 | ' 		while (*lfn) {
2cba8                 | LR__4480
2cba8     15 31 EA FA | 	rdword	local06, local03 wz
2cbac     34 00 90 AD |  if_e	jmp	#LR__4484
2cbb0     15 33 E2 FA | 	rdword	local07, local03
2cbb4                 | ' 			wc = *lfn++;
2cbb4                 | ' 			for (i = 0; i < 16; i++) {
2cbb4     02 2A 06 F1 | 	add	local03, #2
2cbb8     10 12 DC FC | 	rep	@LR__4482, #16
2cbbc                 | LR__4481
2cbbc     01 2E 66 F0 | 	shl	local05, #1
2cbc0     19 31 32 F9 | 	getword	local06, local07, #0
2cbc4     01 30 06 F5 | 	and	local06, #1
2cbc8     18 2F 02 F1 | 	add	local05, local06
2cbcc     19 33 32 F9 | 	getword	local07, local07, #0
2cbd0     01 32 46 F0 | 	shr	local07, #1
2cbd4     10 2E 2E F4 | 	testbn	local05, #16 wz
2cbd8     88 00 00 5F 
2cbdc     21 2E 66 55 |  if_ne	xor	local05, ##69665
2cbe0                 | LR__4482
2cbe0     C4 FF 9F FD | 	jmp	#LR__4480
2cbe4                 | LR__4483
2cbe4                 | LR__4484
2cbe4     17 2D 02 F6 | 	mov	local04, local05
2cbe8                 | LR__4485
2cbe8     07 32 06 F6 | 	mov	local07, #7
2cbec                 | ' 			}
2cbec                 | ' 		}
2cbec                 | ' 		seq = (UINT)sreg;
2cbec                 | ' 	}
2cbec                 | ' 
2cbec                 | ' 
2cbec                 | ' 	i = 7;
2cbec                 | ' 	do {
2cbec     10 4E 05 F1 | 	add	fp, #16
2cbf0     97 1A 48 FB | 	callpa	#(@LR__4487-@LR__4486)>>2,fcache_load_ptr_
2cbf4                 | LR__4486
2cbf4     16 2F 42 F8 | 	getnib	local05, local04, #0
2cbf8     30 2E 06 F1 | 	add	local05, #48
2cbfc     04 2C 46 F0 | 	shr	local04, #4
2cc00     17 31 E2 F8 | 	getbyte	local06, local05, #0
2cc04     3A 30 16 F2 | 	cmp	local06, #58 wc
2cc08     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2cc0c     07 2E 06 31 |  if_ae	add	local05, #7
2cc10     19 31 02 F6 | 	mov	local06, local07
2cc14     01 32 8E F1 | 	sub	local07, #1 wz
2cc18     A7 30 02 F1 | 	add	local06, fp
2cc1c     18 2F 42 FC | 	wrbyte	local05, local06
2cc20     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2cc24     CC FF 9F 5D |  if_ne	jmp	#LR__4486
2cc28                 | LR__4487
2cc28     19 31 02 F6 | 	mov	local06, local07
2cc2c     A7 30 02 F1 | 	add	local06, fp
2cc30     18 FD 48 FC | 	wrbyte	#126, local06
2cc34                 | ' 	ns[i] = '~';
2cc34                 | ' 
2cc34                 | ' 
2cc34                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2cc34     00 2E 06 F6 | 	mov	local05, #0
2cc38     10 4E 85 F1 | 	sub	fp, #16
2cc3c     97 2A 48 FB | 	callpa	#(@LR__4490-@LR__4488)>>2,fcache_load_ptr_
2cc40                 | LR__4488
2cc40     19 2F 12 F2 | 	cmp	local05, local07 wc
2cc44     4C 00 90 3D |  if_ae	jmp	#LR__4491
2cc48     17 31 02 F6 | 	mov	local06, local05
2cc4c     13 31 02 F1 | 	add	local06, local01
2cc50     18 31 C2 FA | 	rdbyte	local06, local06
2cc54     20 30 0E F2 | 	cmp	local06, #32 wz
2cc58     38 00 90 AD |  if_e	jmp	#LR__4491
2cc5c     17 13 02 F6 | 	mov	arg01, local05
2cc60     13 13 02 F1 | 	add	arg01, local01
2cc64     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2cc68     00 FA 05 56 |  if_ne	mov	result1, #0
2cc6c                 | ' 
2cc6c                 | ' 	return 0;
2cc6c     00 FA 05 A6 |  if_e	mov	result1, #0
2cc70     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc74     14 00 90 AD |  if_e	jmp	#LR__4489
2cc78     19 31 02 F6 | 	mov	local06, local07
2cc7c     01 30 86 F1 | 	sub	local06, #1
2cc80     18 2F 0A F2 | 	cmp	local05, local06 wz
2cc84     0C 00 90 AD |  if_e	jmp	#LR__4491
2cc88     01 2E 06 F1 | 	add	local05, #1
2cc8c                 | LR__4489
2cc8c     01 2E 06 F1 | 	add	local05, #1
2cc90     AC FF 9F FD | 	jmp	#LR__4488
2cc94                 | LR__4490
2cc94                 | LR__4491
2cc94     97 20 48 FB | 	callpa	#(@LR__4495-@LR__4492)>>2,fcache_load_ptr_
2cc98                 | ' 			j++;
2cc98                 | ' 		}
2cc98                 | ' 	}
2cc98                 | ' 	do {
2cc98                 | LR__4492
2cc98     17 31 02 F6 | 	mov	local06, local05
2cc9c     13 31 02 F1 | 	add	local06, local01
2cca0     08 32 16 F2 | 	cmp	local07, #8 wc
2cca4     01 2E 06 F1 | 	add	local05, #1
2cca8     1C 00 90 3D |  if_ae	jmp	#LR__4493
2ccac     19 2D 02 F6 | 	mov	local04, local07
2ccb0     10 4E 05 F1 | 	add	fp, #16
2ccb4     A7 2C 02 F1 | 	add	local04, fp
2ccb8     16 35 C2 FA | 	rdbyte	local08, local04
2ccbc     01 32 06 F1 | 	add	local07, #1
2ccc0     10 4E 85 F1 | 	sub	fp, #16
2ccc4     04 00 90 FD | 	jmp	#LR__4494
2ccc8                 | LR__4493
2ccc8     20 34 06 F6 | 	mov	local08, #32
2cccc                 | LR__4494
2cccc     18 35 42 FC | 	wrbyte	local08, local06
2ccd0     08 2E 16 F2 | 	cmp	local05, #8 wc
2ccd4     C0 FF 9F CD |  if_b	jmp	#LR__4492
2ccd8                 | LR__4495
2ccd8     A7 F0 03 F6 | 	mov	ptra, fp
2ccdc     B2 00 A0 FD | 	call	#popregs_
2cce0                 | _fatfs_cc_gen_numname_ret
2cce0     2D 00 64 FD | 	ret
2cce4                 | 
2cce4                 | _fatfs_cc_sum_sfn
2cce4     00 00 06 F6 | 	mov	_var01, #0
2cce8                 | ' )
2cce8                 | ' {
2cce8                 | ' 	BYTE sum = 0;
2cce8                 | ' 	UINT n = 11;
2cce8                 | ' 
2cce8                 | ' 	do {
2cce8     97 12 48 FB | 	callpa	#(@LR__4502-@LR__4500)>>2,fcache_load_ptr_
2ccec                 | LR__4500
2ccec     0B 10 DC FC | 	rep	@LR__4503, #11
2ccf0                 | LR__4501
2ccf0     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2ccf4     01 FA 45 F0 | 	shr	result1, #1
2ccf8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2ccfc     07 00 66 F0 | 	shl	_var01, #7
2cd00     00 FB 01 F1 | 	add	result1, _var01
2cd04     09 01 C2 FA | 	rdbyte	_var01, arg01
2cd08     FD 00 02 F1 | 	add	_var01, result1
2cd0c     01 12 06 F1 | 	add	arg01, #1
2cd10                 | LR__4502
2cd10                 | LR__4503
2cd10                 | ' 	return sum;
2cd10     00 FB 01 F6 | 	mov	result1, _var01
2cd14                 | _fatfs_cc_sum_sfn_ret
2cd14     2D 00 64 FD | 	ret
2cd18                 | 
2cd18                 | _fatfs_cc_dir_read
2cd18     0C 4A 05 F6 | 	mov	COUNT_, #12
2cd1c     A8 00 A0 FD | 	call	#pushregs_
2cd20     09 27 02 F6 | 	mov	local01, arg01
2cd24     0A 29 02 F6 | 	mov	local02, arg02
2cd28     04 2A 06 F6 | 	mov	local03, #4
2cd2c     13 2D 02 FB | 	rdlong	local04, local01
2cd30     FF 2E 06 F6 | 	mov	local05, #255
2cd34     FF 30 06 F6 | 	mov	local06, #255
2cd38                 | ' )
2cd38                 | ' {
2cd38                 | ' 	FRESULT res = FR_NO_FILE;
2cd38                 | ' 	FATFS *fs = dp->obj.fs;
2cd38                 | ' 	BYTE attr, b;
2cd38                 | ' 
2cd38                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2cd38                 | ' 
2cd38                 | ' 
2cd38                 | ' 	while (dp->sect) {
2cd38                 | LR__4510
2cd38     18 26 06 F1 | 	add	local01, #24
2cd3c     13 FB 09 FB | 	rdlong	result1, local01 wz
2cd40     18 26 86 F1 | 	sub	local01, #24
2cd44     AC 01 90 AD |  if_e	jmp	#LR__4520
2cd48     18 26 06 F1 | 	add	local01, #24
2cd4c     13 15 02 FB | 	rdlong	arg02, local01
2cd50     18 26 86 F1 | 	sub	local01, #24
2cd54     16 13 02 F6 | 	mov	arg01, local04
2cd58     AC ED BF FD | 	call	#_fatfs_cc_move_window
2cd5c     FD 2A 0A F6 | 	mov	local03, result1 wz
2cd60     90 01 90 5D |  if_ne	jmp	#LR__4520
2cd64     1C 26 06 F1 | 	add	local01, #28
2cd68     13 FB 01 FB | 	rdlong	result1, local01
2cd6c     1C 26 86 F1 | 	sub	local01, #28
2cd70     FD 32 C2 FA | 	rdbyte	local07, result1
2cd74     19 FB 01 F6 | 	mov	result1, local07
2cd78     07 FA 4D F7 | 	zerox	result1, #7 wz
2cd7c     04 2A 06 A6 |  if_e	mov	local03, #4
2cd80                 | ' 			res = FR_NO_FILE; break;
2cd80     70 01 90 AD |  if_e	jmp	#LR__4520
2cd84     1C 26 06 F1 | 	add	local01, #28
2cd88     13 35 02 FB | 	rdlong	local08, local01
2cd8c     0B 34 06 F1 | 	add	local08, #11
2cd90     1A 37 C2 FA | 	rdbyte	local09, local08
2cd94     3F 36 06 F5 | 	and	local09, #63
2cd98     16 26 86 F1 | 	sub	local01, #22
2cd9c     13 37 42 FC | 	wrbyte	local09, local01
2cda0     06 26 86 F1 | 	sub	local01, #6
2cda4     19 FB E1 F8 | 	getbyte	result1, local07, #0
2cda8     E5 FA 0D F2 | 	cmp	result1, #229 wz
2cdac     19 35 02 56 |  if_ne	mov	local08, local07
2cdb0     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2cdb4     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2cdb8     1C 00 90 AD |  if_e	jmp	#LR__4511
2cdbc     00 38 06 F6 | 	mov	local10, #0
2cdc0     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2cdc4     20 34 26 F5 | 	andn	local08, #32
2cdc8     08 34 0E F2 | 	cmp	local08, #8 wz
2cdcc     01 38 06 A6 |  if_e	mov	local10, #1
2cdd0     14 39 0A F2 | 	cmp	local10, local02 wz
2cdd4     08 00 90 AD |  if_e	jmp	#LR__4512
2cdd8                 | LR__4511
2cdd8     FF 2E 06 F6 | 	mov	local05, #255
2cddc     00 01 90 FD | 	jmp	#LR__4519
2cde0                 | LR__4512
2cde0     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2cde4     0F 36 0E F2 | 	cmp	local09, #15 wz
2cde8     B4 00 90 5D |  if_ne	jmp	#LR__4516
2cdec     19 3B E2 F8 | 	getbyte	local11, local07, #0
2cdf0     40 3A CE F7 | 	test	local11, #64 wz
2cdf4     30 00 90 AD |  if_e	jmp	#LR__4513
2cdf8     1C 26 06 F1 | 	add	local01, #28
2cdfc     13 3B 02 FB | 	rdlong	local11, local01
2ce00     0D 3A 06 F1 | 	add	local11, #13
2ce04     1D 31 C2 FA | 	rdbyte	local06, local11
2ce08     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ce0c     BF 32 06 F5 | 	and	local07, #191
2ce10     19 2F 02 F6 | 	mov	local05, local07
2ce14     0C 26 86 F1 | 	sub	local01, #12
2ce18     13 3B 02 FB | 	rdlong	local11, local01
2ce1c     1C 26 06 F1 | 	add	local01, #28
2ce20     13 3B 62 FC | 	wrlong	local11, local01
2ce24     2C 26 86 F1 | 	sub	local01, #44
2ce28                 | LR__4513
2ce28     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ce2c     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ce30     1C 35 0A F2 | 	cmp	local08, local10 wz
2ce34     5C 00 90 5D |  if_ne	jmp	#LR__4514
2ce38     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ce3c     1C 26 06 F1 | 	add	local01, #28
2ce40     13 37 02 FB | 	rdlong	local09, local01
2ce44     1C 26 86 F1 | 	sub	local01, #28
2ce48     0D 36 06 F1 | 	add	local09, #13
2ce4c     1B 35 C2 FA | 	rdbyte	local08, local09
2ce50     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ce54     1B 39 0A F2 | 	cmp	local10, local09 wz
2ce58     38 00 90 5D |  if_ne	jmp	#LR__4514
2ce5c     0C 2C 06 F1 | 	add	local04, #12
2ce60     16 13 02 FB | 	rdlong	arg01, local04
2ce64     0C 2C 86 F1 | 	sub	local04, #12
2ce68     1C 26 06 F1 | 	add	local01, #28
2ce6c     13 3D 02 FB | 	rdlong	local12, local01
2ce70     1C 26 86 F1 | 	sub	local01, #28
2ce74     1E 15 02 F6 | 	mov	arg02, local12
2ce78     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2ce7c     00 FA 4D F2 | 	cmps	result1, #0 wz
2ce80     17 3D 02 56 |  if_ne	mov	local12, local05
2ce84     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2ce88     01 3C 86 51 |  if_ne	sub	local12, #1
2ce8c     1E 3B 02 56 |  if_ne	mov	local11, local12
2ce90     04 00 90 5D |  if_ne	jmp	#LR__4515
2ce94                 | LR__4514
2ce94     FF 3A 06 F6 | 	mov	local11, #255
2ce98                 | LR__4515
2ce98     1D 2F 02 F6 | 	mov	local05, local11
2ce9c     40 00 90 FD | 	jmp	#LR__4518
2cea0                 | LR__4516
2cea0     17 3B 02 F6 | 	mov	local11, local05
2cea4     07 3A 4E F7 | 	zerox	local11, #7 wz
2cea8     20 00 90 5D |  if_ne	jmp	#LR__4517
2ceac     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ceb0     1C 26 06 F1 | 	add	local01, #28
2ceb4     13 13 02 FB | 	rdlong	arg01, local01
2ceb8     1C 26 86 F1 | 	sub	local01, #28
2cebc     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2cec0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cec4     FD 30 0A F2 | 	cmp	local06, result1 wz
2cec8     28 00 90 AD |  if_e	jmp	#LR__4520
2cecc                 | LR__4517
2cecc     2C 26 06 F1 | 	add	local01, #44
2ced0     FF FF FF FF 
2ced4     13 FF 6B FC | 	wrlong	##-1, local01
2ced8     2C 26 86 F1 | 	sub	local01, #44
2cedc                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2cedc                 | ' 					}
2cedc                 | ' 					break;
2cedc     14 00 90 FD | 	jmp	#LR__4520
2cee0                 | LR__4518
2cee0                 | LR__4519
2cee0     13 13 02 F6 | 	mov	arg01, local01
2cee4     00 14 06 F6 | 	mov	arg02, #0
2cee8     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2ceec     FD 2A 0A F6 | 	mov	local03, result1 wz
2cef0     44 FE 9F AD |  if_e	jmp	#LR__4510
2cef4                 | LR__4520
2cef4     00 2A 0E F2 | 	cmp	local03, #0 wz
2cef8     18 26 06 51 |  if_ne	add	local01, #24
2cefc     13 01 68 5C |  if_ne	wrlong	#0, local01
2cf00                 | ' 	return res;
2cf00     15 FB 01 F6 | 	mov	result1, local03
2cf04     A7 F0 03 F6 | 	mov	ptra, fp
2cf08     B2 00 A0 FD | 	call	#popregs_
2cf0c                 | _fatfs_cc_dir_read_ret
2cf0c     2D 00 64 FD | 	ret
2cf10                 | 
2cf10                 | _fatfs_cc_dir_find
2cf10     0B 4A 05 F6 | 	mov	COUNT_, #11
2cf14     A8 00 A0 FD | 	call	#pushregs_
2cf18     09 27 02 F6 | 	mov	local01, arg01
2cf1c     13 29 02 FB | 	rdlong	local02, local01
2cf20     13 13 02 F6 | 	mov	arg01, local01
2cf24     00 14 06 F6 | 	mov	arg02, #0
2cf28     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2cf2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf30     18 02 90 5D |  if_ne	jmp	#LR__4542
2cf34     FF 2A 06 F6 | 	mov	local03, #255
2cf38     FF 2C 06 F6 | 	mov	local04, #255
2cf3c     2C 26 06 F1 | 	add	local01, #44
2cf40     FF FF FF FF 
2cf44     13 FF 6B FC | 	wrlong	##-1, local01
2cf48     2C 26 86 F1 | 	sub	local01, #44
2cf4c                 | ' #line 2404 "ff.c"
2cf4c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2cf4c                 | ' 
2cf4c                 | ' 	do {
2cf4c                 | LR__4530
2cf4c     18 26 06 F1 | 	add	local01, #24
2cf50     13 15 02 FB | 	rdlong	arg02, local01
2cf54     18 26 86 F1 | 	sub	local01, #24
2cf58     14 13 02 F6 | 	mov	arg01, local02
2cf5c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2cf60     FD 2E 0A F6 | 	mov	local05, result1 wz
2cf64     E0 01 90 5D |  if_ne	jmp	#LR__4541
2cf68     1C 26 06 F1 | 	add	local01, #28
2cf6c     13 17 02 FB | 	rdlong	arg03, local01
2cf70     1C 26 86 F1 | 	sub	local01, #28
2cf74     0B 31 C2 FA | 	rdbyte	local06, arg03
2cf78     18 17 02 F6 | 	mov	arg03, local06
2cf7c     07 16 4E F7 | 	zerox	arg03, #7 wz
2cf80     04 2E 06 A6 |  if_e	mov	local05, #4
2cf84     C0 01 90 AD |  if_e	jmp	#LR__4541
2cf88     1C 26 06 F1 | 	add	local01, #28
2cf8c     13 33 02 FB | 	rdlong	local07, local01
2cf90     19 17 02 F6 | 	mov	arg03, local07
2cf94     0B 16 06 F1 | 	add	arg03, #11
2cf98     0B 35 C2 FA | 	rdbyte	local08, arg03
2cf9c     3F 34 06 F5 | 	and	local08, #63
2cfa0     16 26 86 F1 | 	sub	local01, #22
2cfa4     13 35 42 FC | 	wrbyte	local08, local01
2cfa8     06 26 86 F1 | 	sub	local01, #6
2cfac     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2cfb0     E5 16 0E F2 | 	cmp	arg03, #229 wz
2cfb4     18 00 90 AD |  if_e	jmp	#LR__4531
2cfb8     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2cfbc     08 16 CE F7 | 	test	arg03, #8 wz
2cfc0     1A 33 02 56 |  if_ne	mov	local07, local08
2cfc4     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2cfc8     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2cfcc     18 00 90 AD |  if_e	jmp	#LR__4532
2cfd0                 | LR__4531
2cfd0     FF 2C 06 F6 | 	mov	local04, #255
2cfd4     2C 26 06 F1 | 	add	local01, #44
2cfd8     FF FF FF FF 
2cfdc     13 FF 6B FC | 	wrlong	##-1, local01
2cfe0     2C 26 86 F1 | 	sub	local01, #44
2cfe4     4C 01 90 FD | 	jmp	#LR__4540
2cfe8                 | LR__4532
2cfe8     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2cfec     0F 34 0E F2 | 	cmp	local08, #15 wz
2cff0     C8 00 90 5D |  if_ne	jmp	#LR__4536
2cff4     2B 26 06 F1 | 	add	local01, #43
2cff8     13 35 C2 FA | 	rdbyte	local08, local01
2cffc     2B 26 86 F1 | 	sub	local01, #43
2d000     40 34 CE F7 | 	test	local08, #64 wz
2d004     2C 01 90 5D |  if_ne	jmp	#LR__4539
2d008     18 37 E2 F8 | 	getbyte	local09, local06, #0
2d00c     40 36 CE F7 | 	test	local09, #64 wz
2d010     30 00 90 AD |  if_e	jmp	#LR__4533
2d014     1C 26 06 F1 | 	add	local01, #28
2d018     13 37 02 FB | 	rdlong	local09, local01
2d01c     0D 36 06 F1 | 	add	local09, #13
2d020     1B 2B C2 FA | 	rdbyte	local03, local09
2d024     18 31 E2 F8 | 	getbyte	local06, local06, #0
2d028     BF 30 06 F5 | 	and	local06, #191
2d02c     18 2D 02 F6 | 	mov	local04, local06
2d030     0C 26 86 F1 | 	sub	local01, #12
2d034     13 37 02 FB | 	rdlong	local09, local01
2d038     1C 26 06 F1 | 	add	local01, #28
2d03c     13 37 62 FC | 	wrlong	local09, local01
2d040     2C 26 86 F1 | 	sub	local01, #44
2d044                 | LR__4533
2d044     18 39 E2 F8 | 	getbyte	local10, local06, #0
2d048     16 33 E2 F8 | 	getbyte	local07, local04, #0
2d04c     19 39 0A F2 | 	cmp	local10, local07 wz
2d050     5C 00 90 5D |  if_ne	jmp	#LR__4534
2d054     15 35 E2 F8 | 	getbyte	local08, local03, #0
2d058     1C 26 06 F1 | 	add	local01, #28
2d05c     13 33 02 FB | 	rdlong	local07, local01
2d060     1C 26 86 F1 | 	sub	local01, #28
2d064     0D 32 06 F1 | 	add	local07, #13
2d068     19 31 C2 FA | 	rdbyte	local06, local07
2d06c     18 33 E2 F8 | 	getbyte	local07, local06, #0
2d070     19 35 0A F2 | 	cmp	local08, local07 wz
2d074     38 00 90 5D |  if_ne	jmp	#LR__4534
2d078     0C 28 06 F1 | 	add	local02, #12
2d07c     14 13 02 FB | 	rdlong	arg01, local02
2d080     0C 28 86 F1 | 	sub	local02, #12
2d084     1C 26 06 F1 | 	add	local01, #28
2d088     13 3B 02 FB | 	rdlong	local11, local01
2d08c     1C 26 86 F1 | 	sub	local01, #28
2d090     1D 15 02 F6 | 	mov	arg02, local11
2d094     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2d098     00 FA 4D F2 | 	cmps	result1, #0 wz
2d09c     16 3B 02 56 |  if_ne	mov	local11, local04
2d0a0     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2d0a4     01 3A 86 51 |  if_ne	sub	local11, #1
2d0a8     1D 37 02 56 |  if_ne	mov	local09, local11
2d0ac     04 00 90 5D |  if_ne	jmp	#LR__4535
2d0b0                 | LR__4534
2d0b0     FF 36 06 F6 | 	mov	local09, #255
2d0b4                 | LR__4535
2d0b4     1B 2D 02 F6 | 	mov	local04, local09
2d0b8     78 00 90 FD | 	jmp	#LR__4539
2d0bc                 | LR__4536
2d0bc     16 37 02 F6 | 	mov	local09, local04
2d0c0     07 36 4E F7 | 	zerox	local09, #7 wz
2d0c4     20 00 90 5D |  if_ne	jmp	#LR__4537
2d0c8     15 39 E2 F8 | 	getbyte	local10, local03, #0
2d0cc     1C 26 06 F1 | 	add	local01, #28
2d0d0     13 13 02 FB | 	rdlong	arg01, local01
2d0d4     1C 26 86 F1 | 	sub	local01, #28
2d0d8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2d0dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d0e0     FD 38 0A F2 | 	cmp	local10, result1 wz
2d0e4     60 00 90 AD |  if_e	jmp	#LR__4541
2d0e8                 | LR__4537
2d0e8     2B 26 06 F1 | 	add	local01, #43
2d0ec     13 37 C2 FA | 	rdbyte	local09, local01
2d0f0     2B 26 86 F1 | 	sub	local01, #43
2d0f4     01 36 CE F7 | 	test	local09, #1 wz
2d0f8     24 00 90 5D |  if_ne	jmp	#LR__4538
2d0fc     1C 26 06 F1 | 	add	local01, #28
2d100     13 13 02 FB | 	rdlong	arg01, local01
2d104     04 26 06 F1 | 	add	local01, #4
2d108     13 15 02 F6 | 	mov	arg02, local01
2d10c     20 26 86 F1 | 	sub	local01, #32
2d110     0B 16 06 F6 | 	mov	arg03, #11
2d114     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2d118     00 FA 0D F2 | 	cmp	result1, #0 wz
2d11c     28 00 90 AD |  if_e	jmp	#LR__4541
2d120                 | LR__4538
2d120     FF 2C 06 F6 | 	mov	local04, #255
2d124     2C 26 06 F1 | 	add	local01, #44
2d128     FF FF FF FF 
2d12c     13 FF 6B FC | 	wrlong	##-1, local01
2d130     2C 26 86 F1 | 	sub	local01, #44
2d134                 | LR__4539
2d134                 | LR__4540
2d134     13 13 02 F6 | 	mov	arg01, local01
2d138     00 14 06 F6 | 	mov	arg02, #0
2d13c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2d140     FD 2E 0A F6 | 	mov	local05, result1 wz
2d144     04 FE 9F AD |  if_e	jmp	#LR__4530
2d148                 | LR__4541
2d148                 | ' 
2d148                 | ' 	return res;
2d148     17 FB 01 F6 | 	mov	result1, local05
2d14c                 | LR__4542
2d14c     A7 F0 03 F6 | 	mov	ptra, fp
2d150     B2 00 A0 FD | 	call	#popregs_
2d154                 | _fatfs_cc_dir_find_ret
2d154     2D 00 64 FD | 	ret
2d158                 | 
2d158                 | _fatfs_cc_dir_register
2d158     0A 4A 05 F6 | 	mov	COUNT_, #10
2d15c     A8 00 A0 FD | 	call	#pushregs_
2d160     2C F0 07 F1 | 	add	ptra, #44
2d164     04 4E 05 F1 | 	add	fp, #4
2d168     A7 12 62 FC | 	wrlong	arg01, fp
2d16c     09 27 02 FB | 	rdlong	local01, arg01
2d170     08 4E 05 F1 | 	add	fp, #8
2d174     A7 26 62 FC | 	wrlong	local01, fp
2d178     08 4E 85 F1 | 	sub	fp, #8
2d17c     A7 28 02 FB | 	rdlong	local02, fp
2d180     04 4E 85 F1 | 	sub	fp, #4
2d184     2B 28 06 F1 | 	add	local02, #43
2d188     14 29 C2 FA | 	rdbyte	local02, local02
2d18c     A0 28 CE F7 | 	test	local02, #160 wz
2d190     06 FA 05 56 |  if_ne	mov	result1, #6
2d194     F8 03 90 5D |  if_ne	jmp	#LR__4565
2d198                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2d198     14 4E 05 F1 | 	add	fp, #20
2d19c     A7 00 68 FC | 	wrlong	#0, fp
2d1a0     14 4E 85 F1 | 	sub	fp, #20
2d1a4     97 28 48 FB | 	callpa	#(@LR__4551-@LR__4550)>>2,fcache_load_ptr_
2d1a8                 | LR__4550
2d1a8     0C 4E 05 F1 | 	add	fp, #12
2d1ac     A7 28 02 FB | 	rdlong	local02, fp
2d1b0     0C 28 06 F1 | 	add	local02, #12
2d1b4     14 2B 02 FB | 	rdlong	local03, local02
2d1b8     08 4E 05 F1 | 	add	fp, #8
2d1bc     A7 2C 02 FB | 	rdlong	local04, fp
2d1c0     14 4E 85 F1 | 	sub	fp, #20
2d1c4     01 2C 66 F0 | 	shl	local04, #1
2d1c8     15 2D 02 F1 | 	add	local04, local03
2d1cc     16 29 EA FA | 	rdword	local02, local04 wz
2d1d0     24 00 90 AD |  if_e	jmp	#LR__4552
2d1d4     14 4E 05 F1 | 	add	fp, #20
2d1d8     A7 2E 02 FB | 	rdlong	local05, fp
2d1dc     17 31 02 F6 | 	mov	local06, local05
2d1e0     17 33 02 F6 | 	mov	local07, local05
2d1e4     19 35 02 F6 | 	mov	local08, local07
2d1e8     01 34 06 F1 | 	add	local08, #1
2d1ec     A7 34 62 FC | 	wrlong	local08, fp
2d1f0     14 4E 85 F1 | 	sub	fp, #20
2d1f4     B0 FF 9F FD | 	jmp	#LR__4550
2d1f8                 | LR__4551
2d1f8                 | LR__4552
2d1f8     1C 4E 05 F1 | 	add	fp, #28
2d1fc     A7 12 02 F6 | 	mov	arg01, fp
2d200     18 4E 85 F1 | 	sub	fp, #24
2d204     A7 14 02 FB | 	rdlong	arg02, fp
2d208     04 4E 85 F1 | 	sub	fp, #4
2d20c     20 14 06 F1 | 	add	arg02, #32
2d210     0C 16 06 F6 | 	mov	arg03, #12
2d214     1C 6C BF FD | 	call	#__system____builtin_memmove
2d218     27 4E 05 F1 | 	add	fp, #39
2d21c     A7 36 C2 FA | 	rdbyte	local09, fp
2d220     27 4E 85 F1 | 	sub	fp, #39
2d224     01 36 CE F7 | 	test	local09, #1 wz
2d228     F4 00 90 AD |  if_e	jmp	#LR__4555
2d22c     04 4E 05 F1 | 	add	fp, #4
2d230     A7 38 02 FB | 	rdlong	local10, fp
2d234     2B 38 06 F1 | 	add	local10, #43
2d238     1C 81 48 FC | 	wrbyte	#64, local10
2d23c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2d23c                 | ' 		for (n = 1; n < 100; n++) {
2d23c     0C 4E 05 F1 | 	add	fp, #12
2d240     A7 02 68 FC | 	wrlong	#1, fp
2d244     10 4E 85 F1 | 	sub	fp, #16
2d248                 | LR__4553
2d248     10 4E 05 F1 | 	add	fp, #16
2d24c     A7 28 02 FB | 	rdlong	local02, fp
2d250     10 4E 85 F1 | 	sub	fp, #16
2d254     64 28 16 F2 | 	cmp	local02, #100 wc
2d258     70 00 90 3D |  if_ae	jmp	#LR__4554
2d25c     04 4E 05 F1 | 	add	fp, #4
2d260     A7 12 02 FB | 	rdlong	arg01, fp
2d264     20 12 06 F1 | 	add	arg01, #32
2d268     18 4E 05 F1 | 	add	fp, #24
2d26c     A7 14 02 F6 | 	mov	arg02, fp
2d270     10 4E 85 F1 | 	sub	fp, #16
2d274     A7 38 02 FB | 	rdlong	local10, fp
2d278     0C 38 06 F1 | 	add	local10, #12
2d27c     1C 17 02 FB | 	rdlong	arg03, local10
2d280     04 4E 05 F1 | 	add	fp, #4
2d284     A7 18 02 FB | 	rdlong	arg04, fp
2d288     10 4E 85 F1 | 	sub	fp, #16
2d28c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2d290     04 4E 05 F1 | 	add	fp, #4
2d294     A7 12 02 FB | 	rdlong	arg01, fp
2d298     04 4E 85 F1 | 	sub	fp, #4
2d29c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2d2a0     08 4E 05 F1 | 	add	fp, #8
2d2a4     A7 FA 61 FC | 	wrlong	result1, fp
2d2a8     00 FA 4D F2 | 	cmps	result1, #0 wz
2d2ac     08 4E 85 F1 | 	sub	fp, #8
2d2b0     18 00 90 5D |  if_ne	jmp	#LR__4554
2d2b4     10 4E 05 F1 | 	add	fp, #16
2d2b8     A7 38 02 FB | 	rdlong	local10, fp
2d2bc     01 38 06 F1 | 	add	local10, #1
2d2c0     A7 38 62 FC | 	wrlong	local10, fp
2d2c4     10 4E 85 F1 | 	sub	fp, #16
2d2c8     7C FF 9F FD | 	jmp	#LR__4553
2d2cc                 | LR__4554
2d2cc     10 4E 05 F1 | 	add	fp, #16
2d2d0     A7 38 02 FB | 	rdlong	local10, fp
2d2d4     10 4E 85 F1 | 	sub	fp, #16
2d2d8     64 38 0E F2 | 	cmp	local10, #100 wz
2d2dc     07 FA 05 A6 |  if_e	mov	result1, #7
2d2e0     AC 02 90 AD |  if_e	jmp	#LR__4565
2d2e4     08 4E 05 F1 | 	add	fp, #8
2d2e8     A7 38 02 FB | 	rdlong	local10, fp
2d2ec     08 4E 85 F1 | 	sub	fp, #8
2d2f0     04 38 0E F2 | 	cmp	local10, #4 wz
2d2f4     08 4E 05 51 |  if_ne	add	fp, #8
2d2f8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d2fc     08 4E 85 51 |  if_ne	sub	fp, #8
2d300     8C 02 90 5D |  if_ne	jmp	#LR__4565
2d304     04 4E 05 F1 | 	add	fp, #4
2d308     A7 38 02 FB | 	rdlong	local10, fp
2d30c     23 4E 05 F1 | 	add	fp, #35
2d310     A7 26 C2 FA | 	rdbyte	local01, fp
2d314     27 4E 85 F1 | 	sub	fp, #39
2d318     2B 38 06 F1 | 	add	local10, #43
2d31c     1C 27 42 FC | 	wrbyte	local01, local10
2d320                 | LR__4555
2d320     27 4E 05 F1 | 	add	fp, #39
2d324     A7 28 C2 FA | 	rdbyte	local02, fp
2d328     27 4E 85 F1 | 	sub	fp, #39
2d32c     02 28 CE F7 | 	test	local02, #2 wz
2d330     20 00 90 AD |  if_e	jmp	#LR__4556
2d334     14 4E 05 F1 | 	add	fp, #20
2d338     A7 38 02 FB | 	rdlong	local10, fp
2d33c     0C 38 06 F1 | 	add	local10, #12
2d340     0D 38 16 FD | 	qdiv	local10, #13
2d344     14 4E 85 F1 | 	sub	fp, #20
2d348     18 38 62 FD | 	getqx	local10
2d34c     01 38 06 F1 | 	add	local10, #1
2d350     04 00 90 FD | 	jmp	#LR__4557
2d354                 | LR__4556
2d354     01 38 06 F6 | 	mov	local10, #1
2d358                 | LR__4557
2d358     18 4E 05 F1 | 	add	fp, #24
2d35c     A7 38 62 FC | 	wrlong	local10, fp
2d360     14 4E 85 F1 | 	sub	fp, #20
2d364     A7 12 02 FB | 	rdlong	arg01, fp
2d368     1C 15 02 F6 | 	mov	arg02, local10
2d36c     04 4E 85 F1 | 	sub	fp, #4
2d370     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2d374     08 4E 05 F1 | 	add	fp, #8
2d378     A7 FA 61 FC | 	wrlong	result1, fp
2d37c     08 4E 85 F1 | 	sub	fp, #8
2d380     00 FA 0D F2 | 	cmp	result1, #0 wz
2d384     38 01 90 5D |  if_ne	jmp	#LR__4562
2d388     18 4E 05 F1 | 	add	fp, #24
2d38c     A7 38 02 FB | 	rdlong	local10, fp
2d390     01 38 8E F1 | 	sub	local10, #1 wz
2d394     A7 38 62 FC | 	wrlong	local10, fp
2d398     18 4E 85 F1 | 	sub	fp, #24
2d39c     20 01 90 AD |  if_e	jmp	#LR__4562
2d3a0     04 4E 05 F1 | 	add	fp, #4
2d3a4     A7 38 02 FB | 	rdlong	local10, fp
2d3a8     1C 13 02 F6 | 	mov	arg01, local10
2d3ac     14 4E 05 F1 | 	add	fp, #20
2d3b0     A7 18 02 FB | 	rdlong	arg04, fp
2d3b4     18 4E 85 F1 | 	sub	fp, #24
2d3b8     05 18 66 F0 | 	shl	arg04, #5
2d3bc     10 38 06 F1 | 	add	local10, #16
2d3c0     1C 15 02 FB | 	rdlong	arg02, local10
2d3c4     0C 15 82 F1 | 	sub	arg02, arg04
2d3c8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2d3cc     08 4E 05 F1 | 	add	fp, #8
2d3d0     A7 FA 61 FC | 	wrlong	result1, fp
2d3d4     08 4E 85 F1 | 	sub	fp, #8
2d3d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3dc     E0 00 90 5D |  if_ne	jmp	#LR__4561
2d3e0     04 4E 05 F1 | 	add	fp, #4
2d3e4     A7 12 02 FB | 	rdlong	arg01, fp
2d3e8     04 4E 85 F1 | 	sub	fp, #4
2d3ec     20 12 06 F1 | 	add	arg01, #32
2d3f0     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2d3f4     FD 38 02 F6 | 	mov	local10, result1
2d3f8     28 4E 05 F1 | 	add	fp, #40
2d3fc     A7 38 42 FC | 	wrbyte	local10, fp
2d400     28 4E 85 F1 | 	sub	fp, #40
2d404                 | ' 			sum = sum_sfn(dp->fn);
2d404                 | ' 			do {
2d404                 | LR__4558
2d404     0C 4E 05 F1 | 	add	fp, #12
2d408     A7 12 02 FB | 	rdlong	arg01, fp
2d40c     08 4E 85 F1 | 	sub	fp, #8
2d410     A7 26 02 FB | 	rdlong	local01, fp
2d414     04 4E 85 F1 | 	sub	fp, #4
2d418     18 26 06 F1 | 	add	local01, #24
2d41c     13 15 02 FB | 	rdlong	arg02, local01
2d420     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2d424     08 4E 05 F1 | 	add	fp, #8
2d428     A7 FA 61 FC | 	wrlong	result1, fp
2d42c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d430     08 4E 85 F1 | 	sub	fp, #8
2d434     88 00 90 5D |  if_ne	jmp	#LR__4560
2d438     0C 4E 05 F1 | 	add	fp, #12
2d43c     A7 28 02 FB | 	rdlong	local02, fp
2d440     0C 28 06 F1 | 	add	local02, #12
2d444     14 13 02 FB | 	rdlong	arg01, local02
2d448     08 4E 85 F1 | 	sub	fp, #8
2d44c     A7 26 02 FB | 	rdlong	local01, fp
2d450     1C 26 06 F1 | 	add	local01, #28
2d454     13 15 02 FB | 	rdlong	arg02, local01
2d458     14 4E 05 F1 | 	add	fp, #20
2d45c     A7 16 02 FB | 	rdlong	arg03, fp
2d460     10 4E 05 F1 | 	add	fp, #16
2d464     A7 18 C2 FA | 	rdbyte	arg04, fp
2d468     28 4E 85 F1 | 	sub	fp, #40
2d46c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2d470     0C 4E 05 F1 | 	add	fp, #12
2d474     A7 38 02 FB | 	rdlong	local10, fp
2d478     03 38 06 F1 | 	add	local10, #3
2d47c     1C 03 48 FC | 	wrbyte	#1, local10
2d480     08 4E 85 F1 | 	sub	fp, #8
2d484     A7 12 02 FB | 	rdlong	arg01, fp
2d488     04 4E 85 F1 | 	sub	fp, #4
2d48c     00 14 06 F6 | 	mov	arg02, #0
2d490     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2d494     08 4E 05 F1 | 	add	fp, #8
2d498     A7 FA 61 FC | 	wrlong	result1, fp
2d49c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d4a0     08 4E 85 F1 | 	sub	fp, #8
2d4a4     18 00 90 5D |  if_ne	jmp	#LR__4559
2d4a8     18 4E 05 F1 | 	add	fp, #24
2d4ac     A7 38 02 FB | 	rdlong	local10, fp
2d4b0     01 38 8E F1 | 	sub	local10, #1 wz
2d4b4     A7 38 62 FC | 	wrlong	local10, fp
2d4b8     18 4E 85 F1 | 	sub	fp, #24
2d4bc     44 FF 9F 5D |  if_ne	jmp	#LR__4558
2d4c0                 | LR__4559
2d4c0                 | LR__4560
2d4c0                 | LR__4561
2d4c0                 | LR__4562
2d4c0     08 4E 05 F1 | 	add	fp, #8
2d4c4     A7 38 0A FB | 	rdlong	local10, fp wz
2d4c8     08 4E 85 F1 | 	sub	fp, #8
2d4cc     B4 00 90 5D |  if_ne	jmp	#LR__4564
2d4d0     0C 4E 05 F1 | 	add	fp, #12
2d4d4     A7 12 02 FB | 	rdlong	arg01, fp
2d4d8     08 4E 85 F1 | 	sub	fp, #8
2d4dc     A7 26 02 FB | 	rdlong	local01, fp
2d4e0     04 4E 85 F1 | 	sub	fp, #4
2d4e4     18 26 06 F1 | 	add	local01, #24
2d4e8     13 15 02 FB | 	rdlong	arg02, local01
2d4ec     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2d4f0     08 4E 05 F1 | 	add	fp, #8
2d4f4     A7 FA 61 FC | 	wrlong	result1, fp
2d4f8     08 4E 85 F1 | 	sub	fp, #8
2d4fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d500     80 00 90 5D |  if_ne	jmp	#LR__4563
2d504     04 4E 05 F1 | 	add	fp, #4
2d508     A7 28 02 FB | 	rdlong	local02, fp
2d50c     04 4E 85 F1 | 	sub	fp, #4
2d510     1C 28 06 F1 | 	add	local02, #28
2d514     14 13 02 FB | 	rdlong	arg01, local02
2d518     00 14 06 F6 | 	mov	arg02, #0
2d51c     20 16 06 F6 | 	mov	arg03, #32
2d520     98 00 A0 FD | 	call	#\builtin_bytefill_
2d524     04 4E 05 F1 | 	add	fp, #4
2d528     A7 14 02 FB | 	rdlong	arg02, fp
2d52c     0A 27 02 F6 | 	mov	local01, arg02
2d530     1C 26 06 F1 | 	add	local01, #28
2d534     13 13 02 FB | 	rdlong	arg01, local01
2d538     04 4E 85 F1 | 	sub	fp, #4
2d53c     20 14 06 F1 | 	add	arg02, #32
2d540     0B 16 06 F6 | 	mov	arg03, #11
2d544     EC 68 BF FD | 	call	#__system____builtin_memmove
2d548     04 4E 05 F1 | 	add	fp, #4
2d54c     A7 36 02 FB | 	rdlong	local09, fp
2d550     1B 39 02 F6 | 	mov	local10, local09
2d554     1C 38 06 F1 | 	add	local10, #28
2d558     1C 27 02 FB | 	rdlong	local01, local10
2d55c     2B 36 06 F1 | 	add	local09, #43
2d560     1B 39 C2 FA | 	rdbyte	local10, local09
2d564     18 38 06 F5 | 	and	local10, #24
2d568     0C 26 06 F1 | 	add	local01, #12
2d56c     13 39 42 FC | 	wrbyte	local10, local01
2d570     08 4E 05 F1 | 	add	fp, #8
2d574     A7 38 02 FB | 	rdlong	local10, fp
2d578     0C 4E 85 F1 | 	sub	fp, #12
2d57c     03 38 06 F1 | 	add	local10, #3
2d580     1C 03 48 FC | 	wrbyte	#1, local10
2d584                 | LR__4563
2d584                 | LR__4564
2d584                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2d584                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2d584                 | ' 
2d584                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2d584                 | ' 
2d584                 | ' 			fs->wflag = 1;
2d584                 | ' 		}
2d584                 | ' 	}
2d584                 | ' 
2d584                 | ' 	return res;
2d584     08 4E 05 F1 | 	add	fp, #8
2d588     A7 FA 01 FB | 	rdlong	result1, fp
2d58c     08 4E 85 F1 | 	sub	fp, #8
2d590                 | LR__4565
2d590     A7 F0 03 F6 | 	mov	ptra, fp
2d594     B2 00 A0 FD | 	call	#popregs_
2d598                 | _fatfs_cc_dir_register_ret
2d598     2D 00 64 FD | 	ret
2d59c                 | 
2d59c                 | _fatfs_cc_dir_remove
2d59c     05 4A 05 F6 | 	mov	COUNT_, #5
2d5a0     A8 00 A0 FD | 	call	#pushregs_
2d5a4     09 27 02 F6 | 	mov	local01, arg01
2d5a8     13 29 02 FB | 	rdlong	local02, local01
2d5ac     10 26 06 F1 | 	add	local01, #16
2d5b0     13 2B 02 FB | 	rdlong	local03, local01
2d5b4     1C 26 06 F1 | 	add	local01, #28
2d5b8     13 15 02 FB | 	rdlong	arg02, local01
2d5bc     2C 26 86 F1 | 	sub	local01, #44
2d5c0     FF FF 7F FF 
2d5c4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2d5c8     00 2C 06 A6 |  if_e	mov	local04, #0
2d5cc     18 00 90 AD |  if_e	jmp	#LR__4570
2d5d0     13 13 02 F6 | 	mov	arg01, local01
2d5d4     2C 26 06 F1 | 	add	local01, #44
2d5d8     13 15 02 FB | 	rdlong	arg02, local01
2d5dc     2C 26 86 F1 | 	sub	local01, #44
2d5e0     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2d5e4     FD 2C 02 F6 | 	mov	local04, result1
2d5e8                 | LR__4570
2d5e8     16 2F 0A F6 | 	mov	local05, local04 wz
2d5ec     64 00 90 5D |  if_ne	jmp	#LR__4573
2d5f0                 | ' 		do {
2d5f0                 | LR__4571
2d5f0     18 26 06 F1 | 	add	local01, #24
2d5f4     13 15 02 FB | 	rdlong	arg02, local01
2d5f8     18 26 86 F1 | 	sub	local01, #24
2d5fc     14 13 02 F6 | 	mov	arg01, local02
2d600     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2d604     FD 2E 0A F6 | 	mov	local05, result1 wz
2d608     40 00 90 5D |  if_ne	jmp	#LR__4572
2d60c     1C 26 06 F1 | 	add	local01, #28
2d610     13 2D 02 FB | 	rdlong	local04, local01
2d614     16 CB 49 FC | 	wrbyte	#229, local04
2d618     03 28 06 F1 | 	add	local02, #3
2d61c     14 03 48 FC | 	wrbyte	#1, local02
2d620     03 28 86 F1 | 	sub	local02, #3
2d624     0C 26 86 F1 | 	sub	local01, #12
2d628     13 2D 02 FB | 	rdlong	local04, local01
2d62c     10 26 86 F1 | 	sub	local01, #16
2d630     15 2D 12 F2 | 	cmp	local04, local03 wc
2d634     14 00 90 3D |  if_ae	jmp	#LR__4572
2d638     13 13 02 F6 | 	mov	arg01, local01
2d63c     00 14 06 F6 | 	mov	arg02, #0
2d640     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2d644     FD 2E 0A F6 | 	mov	local05, result1 wz
2d648     A4 FF 9F AD |  if_e	jmp	#LR__4571
2d64c                 | LR__4572
2d64c     04 2E 0E F2 | 	cmp	local05, #4 wz
2d650     02 2E 06 A6 |  if_e	mov	local05, #2
2d654                 | LR__4573
2d654                 | ' 	}
2d654                 | ' #line 2590 "ff.c"
2d654                 | ' 	return res;
2d654     17 FB 01 F6 | 	mov	result1, local05
2d658     A7 F0 03 F6 | 	mov	ptra, fp
2d65c     B2 00 A0 FD | 	call	#popregs_
2d660                 | _fatfs_cc_dir_remove_ret
2d660     2D 00 64 FD | 	ret
2d664                 | 
2d664                 | _fatfs_cc_get_fileinfo
2d664     0F 4A 05 F6 | 	mov	COUNT_, #15
2d668     A8 00 A0 FD | 	call	#pushregs_
2d66c     09 27 02 F6 | 	mov	local01, arg01
2d670     0A 29 02 F6 | 	mov	local02, arg02
2d674     13 2B 02 FB | 	rdlong	local03, local01
2d678     1C 28 06 F1 | 	add	local02, #28
2d67c     14 01 48 FC | 	wrbyte	#0, local02
2d680     1C 28 86 F1 | 	sub	local02, #28
2d684     18 26 06 F1 | 	add	local01, #24
2d688     13 2D 0A FB | 	rdlong	local04, local01 wz
2d68c     18 26 86 F1 | 	sub	local01, #24
2d690     90 03 90 AD |  if_e	jmp	#LR__4594
2d694     2C 26 06 F1 | 	add	local01, #44
2d698     13 2D 02 FB | 	rdlong	local04, local01
2d69c     2C 26 86 F1 | 	sub	local01, #44
2d6a0     FF FF 7F FF 
2d6a4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2d6a8     D8 00 90 AD |  if_e	jmp	#LR__4583
2d6ac     00 2E 06 F6 | 	mov	local05, #0
2d6b0     00 30 06 F6 | 	mov	local06, #0
2d6b4     00 32 06 F6 | 	mov	local07, #0
2d6b8                 | ' 			si = di = 0;
2d6b8                 | ' 			hs = 0;
2d6b8                 | ' 			while (fs->lfnbuf[si] != 0) {
2d6b8                 | LR__4580
2d6b8     0C 2A 06 F1 | 	add	local03, #12
2d6bc     15 2D 02 FB | 	rdlong	local04, local03
2d6c0     0C 2A 86 F1 | 	sub	local03, #12
2d6c4     18 35 02 F6 | 	mov	local08, local06
2d6c8     01 34 66 F0 | 	shl	local08, #1
2d6cc     16 35 02 F1 | 	add	local08, local04
2d6d0     1A 2D EA FA | 	rdword	local04, local08 wz
2d6d4     90 00 90 AD |  if_e	jmp	#LR__4582
2d6d8     0C 2A 06 F1 | 	add	local03, #12
2d6dc     15 37 02 FB | 	rdlong	local09, local03
2d6e0     0C 2A 86 F1 | 	sub	local03, #12
2d6e4     18 39 02 F6 | 	mov	local10, local06
2d6e8     01 38 66 F0 | 	shl	local10, #1
2d6ec     1B 39 02 F1 | 	add	local10, local09
2d6f0     1C 3B E2 FA | 	rdword	local11, local10
2d6f4     19 2D 02 F6 | 	mov	local04, local07
2d6f8     0F 2C 4E F7 | 	zerox	local04, #15 wz
2d6fc     01 30 06 F1 | 	add	local06, #1
2d700     24 00 90 5D |  if_ne	jmp	#LR__4581
2d704     1D 3D 32 F9 | 	getword	local12, local11, #0
2d708     6C 00 00 FF 
2d70c     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2d710     14 00 90 CD |  if_b	jmp	#LR__4581
2d714     1D 3F 32 F9 | 	getword	local13, local11, #0
2d718     70 00 00 FF 
2d71c     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2d720     1D 33 02 C6 |  if_b	mov	local07, local11
2d724                 | ' 					hs = wc; continue;
2d724     90 FF 9F CD |  if_b	jmp	#LR__4580
2d728                 | LR__4581
2d728     19 13 32 F9 | 	getword	arg01, local07, #0
2d72c     10 12 66 F0 | 	shl	arg01, #16
2d730     1D 3B 32 F9 | 	getword	local11, local11, #0
2d734     1D 13 42 F5 | 	or	arg01, local11
2d738     17 15 02 F6 | 	mov	arg02, local05
2d73c     1C 28 06 F1 | 	add	local02, #28
2d740     14 15 02 F1 | 	add	arg02, local02
2d744     FF 16 06 F6 | 	mov	arg03, #255
2d748     17 17 82 F1 | 	sub	arg03, local05
2d74c     1C 28 86 F1 | 	sub	local02, #28
2d750     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2d754     FD 40 0A F6 | 	mov	local14, result1 wz
2d758     00 2E 06 A6 |  if_e	mov	local05, #0
2d75c     20 2F 02 51 |  if_ne	add	local05, local14
2d760     00 32 06 56 |  if_ne	mov	local07, #0
2d764     50 FF 9F 5D |  if_ne	jmp	#LR__4580
2d768                 | LR__4582
2d768     19 2D 02 F6 | 	mov	local04, local07
2d76c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2d770     00 2E 06 56 |  if_ne	mov	local05, #0
2d774     1C 28 06 F1 | 	add	local02, #28
2d778     14 2F 02 F1 | 	add	local05, local02
2d77c     17 01 48 FC | 	wrbyte	#0, local05
2d780     1C 28 86 F1 | 	sub	local02, #28
2d784                 | LR__4583
2d784     00 2E 06 F6 | 	mov	local05, #0
2d788     00 30 06 F6 | 	mov	local06, #0
2d78c                 | ' 			fno->fname[di] = 0;
2d78c                 | ' 		}
2d78c                 | ' 	}
2d78c                 | ' 
2d78c                 | ' 	si = di = 0;
2d78c                 | ' 	while (si < 11) {
2d78c                 | LR__4584
2d78c     0B 30 16 F2 | 	cmp	local06, #11 wc
2d790     20 01 90 3D |  if_ae	jmp	#LR__4587
2d794     1C 26 06 F1 | 	add	local01, #28
2d798     13 37 02 FB | 	rdlong	local09, local01
2d79c     1C 26 86 F1 | 	sub	local01, #28
2d7a0     18 39 02 F6 | 	mov	local10, local06
2d7a4     1B 39 02 F1 | 	add	local10, local09
2d7a8     1C 3B C2 FA | 	rdbyte	local11, local10
2d7ac     1D 2D 32 F9 | 	getword	local04, local11, #0
2d7b0     20 2C 0E F2 | 	cmp	local04, #32 wz
2d7b4     01 30 06 F1 | 	add	local06, #1
2d7b8     D0 FF 9F AD |  if_e	jmp	#LR__4584
2d7bc     1D 2D 32 F9 | 	getword	local04, local11, #0
2d7c0     05 2C 0E F2 | 	cmp	local04, #5 wz
2d7c4     E5 3A 06 A6 |  if_e	mov	local11, #229
2d7c8     09 30 0E F2 | 	cmp	local06, #9 wz
2d7cc     20 00 90 5D |  if_ne	jmp	#LR__4585
2d7d0     0C 2E 16 F2 | 	cmp	local05, #12 wc
2d7d4     18 00 90 3D |  if_ae	jmp	#LR__4585
2d7d8     17 3F 02 F6 | 	mov	local13, local05
2d7dc     0C 28 06 F1 | 	add	local02, #12
2d7e0     14 3F 02 F1 | 	add	local13, local02
2d7e4     1F 5D 48 FC | 	wrbyte	#46, local13
2d7e8     01 2E 06 F1 | 	add	local05, #1
2d7ec     0C 28 86 F1 | 	sub	local02, #12
2d7f0                 | LR__4585
2d7f0     1D 13 32 F9 | 	getword	arg01, local11, #0
2d7f4     07 12 4E F7 | 	zerox	arg01, #7 wz
2d7f8     00 FA 05 56 |  if_ne	mov	result1, #0
2d7fc                 | ' 
2d7fc                 | ' 	return 0;
2d7fc     00 FA 05 A6 |  if_e	mov	result1, #0
2d800     00 FA 0D F2 | 	cmp	result1, #0 wz
2d804     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2d808     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2d80c     50 00 90 AD |  if_e	jmp	#LR__4586
2d810     1C 26 06 F1 | 	add	local01, #28
2d814     13 39 02 FB | 	rdlong	local10, local01
2d818     1C 26 86 F1 | 	sub	local01, #28
2d81c     18 35 02 F6 | 	mov	local08, local06
2d820     1C 35 02 F1 | 	add	local08, local10
2d824     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2d828     00 FA 05 56 |  if_ne	mov	result1, #0
2d82c                 | ' 
2d82c                 | ' 	return 0;
2d82c     00 FA 05 A6 |  if_e	mov	result1, #0
2d830     00 FA 0D F2 | 	cmp	result1, #0 wz
2d834     28 00 90 AD |  if_e	jmp	#LR__4586
2d838     1D 3B 32 F9 | 	getword	local11, local11, #0
2d83c     08 3A 66 F0 | 	shl	local11, #8
2d840     1C 26 06 F1 | 	add	local01, #28
2d844     13 41 02 FB | 	rdlong	local14, local01
2d848     1C 26 86 F1 | 	sub	local01, #28
2d84c     18 37 02 F6 | 	mov	local09, local06
2d850     20 37 02 F1 | 	add	local09, local14
2d854     1B 3D C2 FA | 	rdbyte	local12, local09
2d858     1E 3B 42 F5 | 	or	local11, local12
2d85c     01 30 06 F1 | 	add	local06, #1
2d860                 | LR__4586
2d860     1D 13 02 F6 | 	mov	arg01, local11
2d864     01 00 00 FF 
2d868     52 15 06 F6 | 	mov	arg02, ##850
2d86c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2d870     FD 3A 02 F6 | 	mov	local11, result1
2d874     1D 2D 02 F6 | 	mov	local04, local11
2d878     0F 2C 4E F7 | 	zerox	local04, #15 wz
2d87c     00 2E 06 A6 |  if_e	mov	local05, #0
2d880     30 00 90 AD |  if_e	jmp	#LR__4587
2d884     1D 13 32 F9 | 	getword	arg01, local11, #0
2d888     17 15 02 F6 | 	mov	arg02, local05
2d88c     0C 28 06 F1 | 	add	local02, #12
2d890     14 15 02 F1 | 	add	arg02, local02
2d894     0C 16 06 F6 | 	mov	arg03, #12
2d898     17 17 82 F1 | 	sub	arg03, local05
2d89c     0C 28 86 F1 | 	sub	local02, #12
2d8a0     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2d8a4     FD 40 0A F6 | 	mov	local14, result1 wz
2d8a8     00 2E 06 A6 |  if_e	mov	local05, #0
2d8ac     20 2F 02 51 |  if_ne	add	local05, local14
2d8b0     D8 FE 9F 5D |  if_ne	jmp	#LR__4584
2d8b4                 | LR__4587
2d8b4     17 2D 02 F6 | 	mov	local04, local05
2d8b8     0C 28 06 F1 | 	add	local02, #12
2d8bc     14 2D 02 F1 | 	add	local04, local02
2d8c0     16 01 48 FC | 	wrbyte	#0, local04
2d8c4     10 28 06 F1 | 	add	local02, #16
2d8c8     14 2D CA FA | 	rdbyte	local04, local02 wz
2d8cc     1C 28 86 F1 | 	sub	local02, #28
2d8d0     F8 00 90 5D |  if_ne	jmp	#LR__4593
2d8d4     00 2E 0E F2 | 	cmp	local05, #0 wz
2d8d8     1C 00 90 5D |  if_ne	jmp	#LR__4588
2d8dc     17 3F 02 F6 | 	mov	local13, local05
2d8e0     1C 28 06 F1 | 	add	local02, #28
2d8e4     14 3F 02 F1 | 	add	local13, local02
2d8e8     1F 7F 48 FC | 	wrbyte	#63, local13
2d8ec     01 2E 06 F1 | 	add	local05, #1
2d8f0     1C 28 86 F1 | 	sub	local02, #28
2d8f4     A4 00 90 FD | 	jmp	#LR__4592
2d8f8                 | LR__4588
2d8f8                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2d8f8     00 2E 06 F6 | 	mov	local05, #0
2d8fc     00 30 06 F6 | 	mov	local06, #0
2d900     08 42 06 F6 | 	mov	local15, #8
2d904                 | LR__4589
2d904     18 2D 02 F6 | 	mov	local04, local06
2d908     0C 28 06 F1 | 	add	local02, #12
2d90c     14 2D 02 F1 | 	add	local04, local02
2d910     16 3F CA FA | 	rdbyte	local13, local04 wz
2d914     0C 28 86 F1 | 	sub	local02, #12
2d918     80 00 90 AD |  if_e	jmp	#LR__4591
2d91c     18 35 02 F6 | 	mov	local08, local06
2d920     0C 28 06 F1 | 	add	local02, #12
2d924     14 35 02 F1 | 	add	local08, local02
2d928     1A 3B C2 FA | 	rdbyte	local11, local08
2d92c     1D 41 32 F9 | 	getword	local14, local11, #0
2d930     2E 40 0E F2 | 	cmp	local14, #46 wz
2d934     0C 28 86 F1 | 	sub	local02, #12
2d938     10 42 06 A6 |  if_e	mov	local15, #16
2d93c     1D 41 32 F9 | 	getword	local14, local11, #0
2d940     41 40 16 F2 | 	cmp	local14, #65 wc
2d944     30 00 90 CD |  if_b	jmp	#LR__4590
2d948     1D 35 32 F9 | 	getword	local08, local11, #0
2d94c     5B 34 16 F2 | 	cmp	local08, #91 wc
2d950     24 00 90 3D |  if_ae	jmp	#LR__4590
2d954     1C 26 06 F1 | 	add	local01, #28
2d958     13 37 02 FB | 	rdlong	local09, local01
2d95c     1C 26 86 F1 | 	sub	local01, #28
2d960     0C 36 06 F1 | 	add	local09, #12
2d964     1B 39 C2 FA | 	rdbyte	local10, local09
2d968     21 41 E2 F8 | 	getbyte	local14, local15, #0
2d96c     20 39 CA F7 | 	test	local10, local14 wz
2d970     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2d974     20 3A 06 51 |  if_ne	add	local11, #32
2d978                 | LR__4590
2d978     17 41 02 F6 | 	mov	local14, local05
2d97c     1C 28 06 F1 | 	add	local02, #28
2d980     14 41 02 F1 | 	add	local14, local02
2d984     1D 3B 32 F9 | 	getword	local11, local11, #0
2d988     20 3B 42 FC | 	wrbyte	local11, local14
2d98c     01 30 06 F1 | 	add	local06, #1
2d990     01 2E 06 F1 | 	add	local05, #1
2d994     1C 28 86 F1 | 	sub	local02, #28
2d998     68 FF 9F FD | 	jmp	#LR__4589
2d99c                 | LR__4591
2d99c                 | LR__4592
2d99c     1C 28 06 F1 | 	add	local02, #28
2d9a0     14 2F 02 F1 | 	add	local05, local02
2d9a4     17 01 48 FC | 	wrbyte	#0, local05
2d9a8     1C 26 06 F1 | 	add	local01, #28
2d9ac     13 2D 02 FB | 	rdlong	local04, local01
2d9b0     1C 26 86 F1 | 	sub	local01, #28
2d9b4     0C 2C 06 F1 | 	add	local04, #12
2d9b8     16 3F CA FA | 	rdbyte	local13, local04 wz
2d9bc     1C 28 86 F1 | 	sub	local02, #28
2d9c0     0C 28 06 A1 |  if_e	add	local02, #12
2d9c4     14 01 48 AC |  if_e	wrbyte	#0, local02
2d9c8     0C 28 86 A1 |  if_e	sub	local02, #12
2d9cc                 | LR__4593
2d9cc     1C 26 06 F1 | 	add	local01, #28
2d9d0     13 3D 02 FB | 	rdlong	local12, local01
2d9d4     0B 3C 06 F1 | 	add	local12, #11
2d9d8     1E 2D C2 FA | 	rdbyte	local04, local12
2d9dc     3F 2C 06 F5 | 	and	local04, #63
2d9e0     08 28 06 F1 | 	add	local02, #8
2d9e4     14 2D 42 FC | 	wrbyte	local04, local02
2d9e8     08 28 86 F1 | 	sub	local02, #8
2d9ec     13 13 02 FB | 	rdlong	arg01, local01
2d9f0     1C 12 06 F1 | 	add	arg01, #28
2d9f4                 | ' {
2d9f4                 | ' 
2d9f4                 | ' 	return *((DWORD*)ptr);
2d9f4     09 FB 01 FB | 	rdlong	result1, arg01
2d9f8     14 FB 61 FC | 	wrlong	result1, local02
2d9fc     13 13 02 FB | 	rdlong	arg01, local01
2da00     16 12 06 F1 | 	add	arg01, #22
2da04                 | ' {
2da04                 | ' 
2da04                 | ' 	return *((WORD*)ptr);
2da04     09 FB E1 FA | 	rdword	result1, arg01
2da08     06 28 06 F1 | 	add	local02, #6
2da0c     14 FB 51 FC | 	wrword	result1, local02
2da10     13 13 02 FB | 	rdlong	arg01, local01
2da14     18 12 06 F1 | 	add	arg01, #24
2da18                 | ' {
2da18                 | ' 
2da18                 | ' 	return *((WORD*)ptr);
2da18     09 FB E1 FA | 	rdword	result1, arg01
2da1c     02 28 86 F1 | 	sub	local02, #2
2da20     14 FB 51 FC | 	wrword	result1, local02
2da24                 | LR__4594
2da24     A7 F0 03 F6 | 	mov	ptra, fp
2da28     B2 00 A0 FD | 	call	#popregs_
2da2c                 | _fatfs_cc_get_fileinfo_ret
2da2c     2D 00 64 FD | 	ret
2da30                 | 
2da30                 | _fatfs_cc_create_name
2da30     0D 4A 05 F6 | 	mov	COUNT_, #13
2da34     A8 00 A0 FD | 	call	#pushregs_
2da38     34 F0 07 F1 | 	add	ptra, #52
2da3c     04 4E 05 F1 | 	add	fp, #4
2da40     A7 12 62 FC | 	wrlong	arg01, fp
2da44     04 4E 05 F1 | 	add	fp, #4
2da48     A7 14 62 FC | 	wrlong	arg02, fp
2da4c     0A FB 01 FB | 	rdlong	result1, arg02
2da50     28 4E 05 F1 | 	add	fp, #40
2da54     A7 FA 61 FC | 	wrlong	result1, fp
2da58     2C 4E 85 F1 | 	sub	fp, #44
2da5c     A7 FA 01 FB | 	rdlong	result1, fp
2da60     FD 26 02 FB | 	rdlong	local01, result1
2da64     0C 26 06 F1 | 	add	local01, #12
2da68     13 29 02 FB | 	rdlong	local02, local01
2da6c     14 4E 05 F1 | 	add	fp, #20
2da70     A7 28 62 FC | 	wrlong	local02, fp
2da74     14 4E 05 F1 | 	add	fp, #20
2da78     A7 00 68 FC | 	wrlong	#0, fp
2da7c     2C 4E 85 F1 | 	sub	fp, #44
2da80                 | ' 
2da80                 | ' 
2da80                 | ' 
2da80                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2da80                 | ' 	for (;;) {
2da80                 | LR__4600
2da80     30 4E 05 F1 | 	add	fp, #48
2da84     A7 12 02 F6 | 	mov	arg01, fp
2da88     30 4E 85 F1 | 	sub	fp, #48
2da8c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2da90     1C 4E 05 F1 | 	add	fp, #28
2da94     A7 FA 61 FC | 	wrlong	result1, fp
2da98     1C 4E 85 F1 | 	sub	fp, #28
2da9c     FF FF 7F FF 
2daa0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2daa4     06 FA 05 A6 |  if_e	mov	result1, #6
2daa8     74 08 90 AD |  if_e	jmp	#LR__4640
2daac     1C 4E 05 F1 | 	add	fp, #28
2dab0     A7 26 02 FB | 	rdlong	local01, fp
2dab4     1C 4E 85 F1 | 	sub	fp, #28
2dab8     80 00 00 FF 
2dabc     00 26 16 F2 | 	cmp	local01, ##65536 wc
2dac0     3C 00 90 CD |  if_b	jmp	#LR__4601
2dac4     18 4E 05 F1 | 	add	fp, #24
2dac8     A7 2A 02 FB | 	rdlong	local03, fp
2dacc     14 4E 05 F1 | 	add	fp, #20
2dad0     A7 26 02 FB | 	rdlong	local01, fp
2dad4     13 2D 02 F6 | 	mov	local04, local01
2dad8     01 2C 06 F1 | 	add	local04, #1
2dadc     A7 2C 62 FC | 	wrlong	local04, fp
2dae0     01 26 66 F0 | 	shl	local01, #1
2dae4     15 27 02 F1 | 	add	local01, local03
2dae8     10 4E 85 F1 | 	sub	fp, #16
2daec     A7 2E 02 FB | 	rdlong	local05, fp
2daf0     1C 4E 85 F1 | 	sub	fp, #28
2daf4     17 31 02 F6 | 	mov	local06, local05
2daf8     10 30 46 F0 | 	shr	local06, #16
2dafc     13 31 52 FC | 	wrword	local06, local01
2db00                 | LR__4601
2db00     1C 4E 05 F1 | 	add	fp, #28
2db04     A7 26 02 FB | 	rdlong	local01, fp
2db08     08 4E 85 F1 | 	sub	fp, #8
2db0c     A7 26 52 FC | 	wrword	local01, fp
2db10     A7 26 E2 FA | 	rdword	local01, fp
2db14     14 4E 85 F1 | 	sub	fp, #20
2db18     20 26 16 F2 | 	cmp	local01, #32 wc
2db1c     B0 00 90 CD |  if_b	jmp	#LR__4603
2db20     14 4E 05 F1 | 	add	fp, #20
2db24     A7 26 E2 FA | 	rdword	local01, fp
2db28     14 4E 85 F1 | 	sub	fp, #20
2db2c     2F 26 0E F2 | 	cmp	local01, #47 wz
2db30     14 4E 05 51 |  if_ne	add	fp, #20
2db34     A7 2C E2 5A |  if_ne	rdword	local04, fp
2db38     14 4E 85 51 |  if_ne	sub	fp, #20
2db3c     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2db40     8C 00 90 AD |  if_e	jmp	#LR__4603
2db44     14 4E 05 F1 | 	add	fp, #20
2db48     A7 12 E2 FA | 	rdword	arg01, fp
2db4c     14 4E 85 F1 | 	sub	fp, #20
2db50     80 12 16 F2 | 	cmp	arg01, #128 wc
2db54     24 00 90 3D |  if_ae	jmp	#LR__4602
2db58     9D 01 00 FF 
2db5c     94 12 06 F6 | 	mov	arg01, ##@LR__5262
2db60     14 4E 05 F1 | 	add	fp, #20
2db64     A7 14 E2 FA | 	rdword	arg02, fp
2db68     14 4E 85 F1 | 	sub	fp, #20
2db6c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2db70     00 FA 0D F2 | 	cmp	result1, #0 wz
2db74     06 FA 05 56 |  if_ne	mov	result1, #6
2db78     A4 07 90 5D |  if_ne	jmp	#LR__4640
2db7c                 | LR__4602
2db7c     2C 4E 05 F1 | 	add	fp, #44
2db80     A7 30 02 FB | 	rdlong	local06, fp
2db84     2C 4E 85 F1 | 	sub	fp, #44
2db88     FF 30 16 F2 | 	cmp	local06, #255 wc
2db8c     06 FA 05 36 |  if_ae	mov	result1, #6
2db90     8C 07 90 3D |  if_ae	jmp	#LR__4640
2db94     18 4E 05 F1 | 	add	fp, #24
2db98     A7 2A 02 FB | 	rdlong	local03, fp
2db9c     14 4E 05 F1 | 	add	fp, #20
2dba0     A7 28 02 FB | 	rdlong	local02, fp
2dba4     14 2D 02 F6 | 	mov	local04, local02
2dba8     01 2C 06 F1 | 	add	local04, #1
2dbac     A7 2C 62 FC | 	wrlong	local04, fp
2dbb0     14 27 02 F6 | 	mov	local01, local02
2dbb4     01 26 66 F0 | 	shl	local01, #1
2dbb8     15 27 02 F1 | 	add	local01, local03
2dbbc     18 4E 85 F1 | 	sub	fp, #24
2dbc0     A7 30 E2 FA | 	rdword	local06, fp
2dbc4     14 4E 85 F1 | 	sub	fp, #20
2dbc8     13 31 52 FC | 	wrword	local06, local01
2dbcc     B0 FE 9F FD | 	jmp	#LR__4600
2dbd0                 | LR__4603
2dbd0     14 4E 05 F1 | 	add	fp, #20
2dbd4     A7 32 E2 FA | 	rdword	local07, fp
2dbd8     14 4E 85 F1 | 	sub	fp, #20
2dbdc     20 32 16 F2 | 	cmp	local07, #32 wc
2dbe0     10 4E 05 C1 |  if_b	add	fp, #16
2dbe4     A7 08 48 CC |  if_b	wrbyte	#4, fp
2dbe8     10 4E 85 C1 |  if_b	sub	fp, #16
2dbec     74 00 90 CD |  if_b	jmp	#LR__4608
2dbf0     97 24 48 FB | 	callpa	#(@LR__4606-@LR__4604)>>2,fcache_load_ptr_
2dbf4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2dbf4                 | LR__4604
2dbf4     30 4E 05 F1 | 	add	fp, #48
2dbf8     A7 2C 02 FB | 	rdlong	local04, fp
2dbfc     30 4E 85 F1 | 	sub	fp, #48
2dc00     16 33 C2 FA | 	rdbyte	local07, local04
2dc04     2F 32 0E F2 | 	cmp	local07, #47 wz
2dc08     18 00 90 AD |  if_e	jmp	#LR__4605
2dc0c     30 4E 05 F1 | 	add	fp, #48
2dc10     A7 2C 02 FB | 	rdlong	local04, fp
2dc14     30 4E 85 F1 | 	sub	fp, #48
2dc18     16 29 C2 FA | 	rdbyte	local02, local04
2dc1c     5C 28 0E F2 | 	cmp	local02, #92 wz
2dc20     18 00 90 5D |  if_ne	jmp	#LR__4607
2dc24                 | LR__4605
2dc24     30 4E 05 F1 | 	add	fp, #48
2dc28     A7 26 02 FB | 	rdlong	local01, fp
2dc2c     01 26 06 F1 | 	add	local01, #1
2dc30     A7 26 62 FC | 	wrlong	local01, fp
2dc34     30 4E 85 F1 | 	sub	fp, #48
2dc38     B8 FF 9F FD | 	jmp	#LR__4604
2dc3c                 | LR__4606
2dc3c                 | LR__4607
2dc3c     10 4E 05 F1 | 	add	fp, #16
2dc40     A7 00 48 FC | 	wrbyte	#0, fp
2dc44     20 4E 05 F1 | 	add	fp, #32
2dc48     A7 30 02 FB | 	rdlong	local06, fp
2dc4c     30 4E 85 F1 | 	sub	fp, #48
2dc50     18 33 C2 FA | 	rdbyte	local07, local06
2dc54     20 32 16 F2 | 	cmp	local07, #32 wc
2dc58     10 4E 05 C1 |  if_b	add	fp, #16
2dc5c     A7 08 48 CC |  if_b	wrbyte	#4, fp
2dc60     10 4E 85 C1 |  if_b	sub	fp, #16
2dc64                 | LR__4608
2dc64     08 4E 05 F1 | 	add	fp, #8
2dc68     A7 32 02 FB | 	rdlong	local07, fp
2dc6c     28 4E 05 F1 | 	add	fp, #40
2dc70     A7 26 02 FB | 	rdlong	local01, fp
2dc74     30 4E 85 F1 | 	sub	fp, #48
2dc78     19 27 62 FC | 	wrlong	local01, local07
2dc7c     97 38 48 FB | 	callpa	#(@LR__4610-@LR__4609)>>2,fcache_load_ptr_
2dc80                 | ' 	}
2dc80                 | ' 	*path = p;
2dc80                 | ' #line 2862 "ff.c"
2dc80                 | ' 	while (di) {
2dc80                 | LR__4609
2dc80     2C 4E 05 F1 | 	add	fp, #44
2dc84     A7 32 0A FB | 	rdlong	local07, fp wz
2dc88     2C 4E 85 F1 | 	sub	fp, #44
2dc8c     60 00 90 AD |  if_e	jmp	#LR__4611
2dc90     18 4E 05 F1 | 	add	fp, #24
2dc94     A7 30 02 FB | 	rdlong	local06, fp
2dc98     14 4E 05 F1 | 	add	fp, #20
2dc9c     A7 2C 02 FB | 	rdlong	local04, fp
2dca0     01 2C 86 F1 | 	sub	local04, #1
2dca4     01 2C 66 F0 | 	shl	local04, #1
2dca8     18 2D 02 F1 | 	add	local04, local06
2dcac     16 31 E2 FA | 	rdword	local06, local04
2dcb0     18 4E 85 F1 | 	sub	fp, #24
2dcb4     A7 30 52 FC | 	wrword	local06, fp
2dcb8     A7 32 E2 FA | 	rdword	local07, fp
2dcbc     14 4E 85 F1 | 	sub	fp, #20
2dcc0     20 32 0E F2 | 	cmp	local07, #32 wz
2dcc4     14 4E 05 51 |  if_ne	add	fp, #20
2dcc8     A7 26 E2 5A |  if_ne	rdword	local01, fp
2dccc     14 4E 85 51 |  if_ne	sub	fp, #20
2dcd0     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2dcd4     18 00 90 5D |  if_ne	jmp	#LR__4611
2dcd8     2C 4E 05 F1 | 	add	fp, #44
2dcdc     A7 26 02 FB | 	rdlong	local01, fp
2dce0     01 26 86 F1 | 	sub	local01, #1
2dce4     A7 26 62 FC | 	wrlong	local01, fp
2dce8     2C 4E 85 F1 | 	sub	fp, #44
2dcec     90 FF 9F FD | 	jmp	#LR__4609
2dcf0                 | LR__4610
2dcf0                 | LR__4611
2dcf0     18 4E 05 F1 | 	add	fp, #24
2dcf4     A7 34 02 FB | 	rdlong	local08, fp
2dcf8     14 4E 05 F1 | 	add	fp, #20
2dcfc     A7 2C 02 FB | 	rdlong	local04, fp
2dd00     01 2C 66 F0 | 	shl	local04, #1
2dd04     1A 2D 02 F1 | 	add	local04, local08
2dd08     16 01 58 FC | 	wrword	#0, local04
2dd0c     A7 32 0A FB | 	rdlong	local07, fp wz
2dd10     2C 4E 85 F1 | 	sub	fp, #44
2dd14     06 FA 05 A6 |  if_e	mov	result1, #6
2dd18     04 06 90 AD |  if_e	jmp	#LR__4640
2dd1c                 | ' 
2dd1c                 | ' 
2dd1c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2dd1c     28 4E 05 F1 | 	add	fp, #40
2dd20     A7 00 68 FC | 	wrlong	#0, fp
2dd24     28 4E 85 F1 | 	sub	fp, #40
2dd28     97 22 48 FB | 	callpa	#(@LR__4613-@LR__4612)>>2,fcache_load_ptr_
2dd2c                 | LR__4612
2dd2c     18 4E 05 F1 | 	add	fp, #24
2dd30     A7 36 02 FB | 	rdlong	local09, fp
2dd34     10 4E 05 F1 | 	add	fp, #16
2dd38     A7 38 02 FB | 	rdlong	local10, fp
2dd3c     28 4E 85 F1 | 	sub	fp, #40
2dd40     01 38 66 F0 | 	shl	local10, #1
2dd44     1B 39 02 F1 | 	add	local10, local09
2dd48     1C 3B E2 FA | 	rdword	local11, local10
2dd4c     20 3A 0E F2 | 	cmp	local11, #32 wz
2dd50     1C 00 90 5D |  if_ne	jmp	#LR__4614
2dd54     28 4E 05 F1 | 	add	fp, #40
2dd58     A7 3C 02 FB | 	rdlong	local12, fp
2dd5c     1E 2F 02 F6 | 	mov	local05, local12
2dd60     01 2E 06 F1 | 	add	local05, #1
2dd64     A7 2E 62 FC | 	wrlong	local05, fp
2dd68     28 4E 85 F1 | 	sub	fp, #40
2dd6c     BC FF 9F FD | 	jmp	#LR__4612
2dd70                 | LR__4613
2dd70                 | LR__4614
2dd70     28 4E 05 F1 | 	add	fp, #40
2dd74     A7 32 02 FB | 	rdlong	local07, fp
2dd78     28 4E 85 F1 | 	sub	fp, #40
2dd7c     01 32 16 F2 | 	cmp	local07, #1 wc
2dd80     28 00 90 3D |  if_ae	jmp	#LR__4615
2dd84     18 4E 05 F1 | 	add	fp, #24
2dd88     A7 2A 02 FB | 	rdlong	local03, fp
2dd8c     10 4E 05 F1 | 	add	fp, #16
2dd90     A7 36 02 FB | 	rdlong	local09, fp
2dd94     28 4E 85 F1 | 	sub	fp, #40
2dd98     01 36 66 F0 | 	shl	local09, #1
2dd9c     15 37 02 F1 | 	add	local09, local03
2dda0     1B 27 E2 FA | 	rdword	local01, local09
2dda4     2E 26 0E F2 | 	cmp	local01, #46 wz
2dda8     14 00 90 5D |  if_ne	jmp	#LR__4616
2ddac                 | LR__4615
2ddac     10 4E 05 F1 | 	add	fp, #16
2ddb0     A7 32 C2 FA | 	rdbyte	local07, fp
2ddb4     03 32 46 F5 | 	or	local07, #3
2ddb8     A7 32 42 FC | 	wrbyte	local07, fp
2ddbc     10 4E 85 F1 | 	sub	fp, #16
2ddc0                 | LR__4616
2ddc0     97 2C 48 FB | 	callpa	#(@LR__4618-@LR__4617)>>2,fcache_load_ptr_
2ddc4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2ddc4                 | LR__4617
2ddc4     2C 4E 05 F1 | 	add	fp, #44
2ddc8     A7 32 02 FB | 	rdlong	local07, fp
2ddcc     2C 4E 85 F1 | 	sub	fp, #44
2ddd0     01 32 16 F2 | 	cmp	local07, #1 wc
2ddd4     44 00 90 CD |  if_b	jmp	#LR__4619
2ddd8     18 4E 05 F1 | 	add	fp, #24
2dddc     A7 30 02 FB | 	rdlong	local06, fp
2dde0     14 4E 05 F1 | 	add	fp, #20
2dde4     A7 2A 02 FB | 	rdlong	local03, fp
2dde8     2C 4E 85 F1 | 	sub	fp, #44
2ddec     01 2A 86 F1 | 	sub	local03, #1
2ddf0     01 2A 66 F0 | 	shl	local03, #1
2ddf4     18 2B 02 F1 | 	add	local03, local06
2ddf8     15 27 E2 FA | 	rdword	local01, local03
2ddfc     2E 26 0E F2 | 	cmp	local01, #46 wz
2de00     18 00 90 AD |  if_e	jmp	#LR__4619
2de04     2C 4E 05 F1 | 	add	fp, #44
2de08     A7 26 02 FB | 	rdlong	local01, fp
2de0c     01 26 86 F1 | 	sub	local01, #1
2de10     A7 26 62 FC | 	wrlong	local01, fp
2de14     2C 4E 85 F1 | 	sub	fp, #44
2de18     A8 FF 9F FD | 	jmp	#LR__4617
2de1c                 | LR__4618
2de1c                 | LR__4619
2de1c     04 4E 05 F1 | 	add	fp, #4
2de20     A7 12 02 FB | 	rdlong	arg01, fp
2de24     04 4E 85 F1 | 	sub	fp, #4
2de28     20 12 06 F1 | 	add	arg01, #32
2de2c     20 14 06 F6 | 	mov	arg02, #32
2de30     0B 16 06 F6 | 	mov	arg03, #11
2de34     09 3F 02 F6 | 	mov	local13, arg01
2de38     98 00 A0 FD | 	call	#\builtin_bytefill_
2de3c     1F FB 01 F6 | 	mov	result1, local13
2de40     0C 4E 05 F1 | 	add	fp, #12
2de44     A7 00 48 FC | 	wrbyte	#0, fp
2de48     A7 32 C2 FA | 	rdbyte	local07, fp
2de4c     14 4E 05 F1 | 	add	fp, #20
2de50     A7 32 62 FC | 	wrlong	local07, fp
2de54     04 4E 05 F1 | 	add	fp, #4
2de58     A7 10 68 FC | 	wrlong	#8, fp
2de5c     24 4E 85 F1 | 	sub	fp, #36
2de60                 | ' 
2de60                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2de60                 | ' 	i = b = 0; ni = 8;
2de60                 | ' 	for (;;) {
2de60                 | LR__4620
2de60     18 4E 05 F1 | 	add	fp, #24
2de64     A7 2A 02 FB | 	rdlong	local03, fp
2de68     10 4E 05 F1 | 	add	fp, #16
2de6c     A7 36 02 FB | 	rdlong	local09, fp
2de70     1B 2D 02 F6 | 	mov	local04, local09
2de74     01 2C 06 F1 | 	add	local04, #1
2de78     A7 2C 62 FC | 	wrlong	local04, fp
2de7c     01 36 66 F0 | 	shl	local09, #1
2de80     15 37 02 F1 | 	add	local09, local03
2de84     1B 31 E2 FA | 	rdword	local06, local09
2de88     14 4E 85 F1 | 	sub	fp, #20
2de8c     A7 30 52 FC | 	wrword	local06, fp
2de90     A7 32 EA FA | 	rdword	local07, fp wz
2de94     14 4E 85 F1 | 	sub	fp, #20
2de98     74 03 90 AD |  if_e	jmp	#LR__4636
2de9c     14 4E 05 F1 | 	add	fp, #20
2dea0     A7 32 E2 FA | 	rdword	local07, fp
2dea4     14 4E 85 F1 | 	sub	fp, #20
2dea8     20 32 0E F2 | 	cmp	local07, #32 wz
2deac     30 00 90 AD |  if_e	jmp	#LR__4621
2deb0     14 4E 05 F1 | 	add	fp, #20
2deb4     A7 26 E2 FA | 	rdword	local01, fp
2deb8     14 4E 85 F1 | 	sub	fp, #20
2debc     2E 26 0E F2 | 	cmp	local01, #46 wz
2dec0     34 00 90 5D |  if_ne	jmp	#LR__4622
2dec4     28 4E 05 F1 | 	add	fp, #40
2dec8     A7 2C 02 FB | 	rdlong	local04, fp
2decc     04 4E 05 F1 | 	add	fp, #4
2ded0     A7 38 02 FB | 	rdlong	local10, fp
2ded4     2C 4E 85 F1 | 	sub	fp, #44
2ded8     1C 2D 0A F2 | 	cmp	local04, local10 wz
2dedc     18 00 90 AD |  if_e	jmp	#LR__4622
2dee0                 | LR__4621
2dee0     10 4E 05 F1 | 	add	fp, #16
2dee4     A7 32 C2 FA | 	rdbyte	local07, fp
2dee8     03 32 46 F5 | 	or	local07, #3
2deec     A7 32 42 FC | 	wrbyte	local07, fp
2def0     10 4E 85 F1 | 	sub	fp, #16
2def4                 | ' 			cf |=  0x01  |  0x02 ;
2def4                 | ' 			continue;
2def4     68 FF 9F FD | 	jmp	#LR__4620
2def8                 | LR__4622
2def8     20 4E 05 F1 | 	add	fp, #32
2defc     A7 32 02 FB | 	rdlong	local07, fp
2df00     04 4E 05 F1 | 	add	fp, #4
2df04     A7 26 02 FB | 	rdlong	local01, fp
2df08     24 4E 85 F1 | 	sub	fp, #36
2df0c     13 33 12 F2 | 	cmp	local07, local01 wc
2df10     1C 00 90 3D |  if_ae	jmp	#LR__4623
2df14     28 4E 05 F1 | 	add	fp, #40
2df18     A7 34 02 FB | 	rdlong	local08, fp
2df1c     04 4E 05 F1 | 	add	fp, #4
2df20     A7 38 02 FB | 	rdlong	local10, fp
2df24     2C 4E 85 F1 | 	sub	fp, #44
2df28     1C 35 0A F2 | 	cmp	local08, local10 wz
2df2c     B0 00 90 5D |  if_ne	jmp	#LR__4625
2df30                 | LR__4623
2df30     24 4E 05 F1 | 	add	fp, #36
2df34     A7 32 02 FB | 	rdlong	local07, fp
2df38     24 4E 85 F1 | 	sub	fp, #36
2df3c     0B 32 0E F2 | 	cmp	local07, #11 wz
2df40     18 00 90 5D |  if_ne	jmp	#LR__4624
2df44     10 4E 05 F1 | 	add	fp, #16
2df48     A7 32 C2 FA | 	rdbyte	local07, fp
2df4c     03 32 46 F5 | 	or	local07, #3
2df50     A7 32 42 FC | 	wrbyte	local07, fp
2df54     10 4E 85 F1 | 	sub	fp, #16
2df58                 | ' 				cf |=  0x01  |  0x02 ;
2df58                 | ' 				break;
2df58     B4 02 90 FD | 	jmp	#LR__4636
2df5c                 | LR__4624
2df5c     28 4E 05 F1 | 	add	fp, #40
2df60     A7 32 02 FB | 	rdlong	local07, fp
2df64     04 4E 05 F1 | 	add	fp, #4
2df68     A7 26 02 FB | 	rdlong	local01, fp
2df6c     2C 4E 85 F1 | 	sub	fp, #44
2df70     13 33 0A F2 | 	cmp	local07, local01 wz
2df74     10 4E 05 51 |  if_ne	add	fp, #16
2df78     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2df7c     03 32 46 55 |  if_ne	or	local07, #3
2df80     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2df84     10 4E 85 51 |  if_ne	sub	fp, #16
2df88     28 4E 05 F1 | 	add	fp, #40
2df8c     A7 32 02 FB | 	rdlong	local07, fp
2df90     04 4E 05 F1 | 	add	fp, #4
2df94     A7 28 02 FB | 	rdlong	local02, fp
2df98     2C 4E 85 F1 | 	sub	fp, #44
2df9c     14 33 1A F2 | 	cmp	local07, local02 wcz
2dfa0     6C 02 90 1D |  if_a	jmp	#LR__4636
2dfa4     2C 4E 05 F1 | 	add	fp, #44
2dfa8     A7 32 02 FB | 	rdlong	local07, fp
2dfac     04 4E 85 F1 | 	sub	fp, #4
2dfb0     A7 32 62 FC | 	wrlong	local07, fp
2dfb4     08 4E 85 F1 | 	sub	fp, #8
2dfb8     A7 10 68 FC | 	wrlong	#8, fp
2dfbc     04 4E 05 F1 | 	add	fp, #4
2dfc0     A7 16 68 FC | 	wrlong	#11, fp
2dfc4     18 4E 85 F1 | 	sub	fp, #24
2dfc8     A7 3A C2 FA | 	rdbyte	local11, fp
2dfcc     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2dfd0     02 32 66 F0 | 	shl	local07, #2
2dfd4     A7 32 42 FC | 	wrbyte	local07, fp
2dfd8     0C 4E 85 F1 | 	sub	fp, #12
2dfdc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2dfdc                 | ' 			continue;
2dfdc     80 FE 9F FD | 	jmp	#LR__4620
2dfe0                 | LR__4625
2dfe0     14 4E 05 F1 | 	add	fp, #20
2dfe4     A7 32 E2 FA | 	rdword	local07, fp
2dfe8     14 4E 85 F1 | 	sub	fp, #20
2dfec     80 32 16 F2 | 	cmp	local07, #128 wc
2dff0     6C 00 90 CD |  if_b	jmp	#LR__4627
2dff4     10 4E 05 F1 | 	add	fp, #16
2dff8     A7 32 C2 FA | 	rdbyte	local07, fp
2dffc     02 32 46 F5 | 	or	local07, #2
2e000     A7 32 42 FC | 	wrbyte	local07, fp
2e004     04 4E 05 F1 | 	add	fp, #4
2e008     A7 12 E2 FA | 	rdword	arg01, fp
2e00c     14 4E 85 F1 | 	sub	fp, #20
2e010     01 00 00 FF 
2e014     52 15 06 F6 | 	mov	arg02, ##850
2e018     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2e01c     14 4E 05 F1 | 	add	fp, #20
2e020     A7 FA 51 FC | 	wrword	result1, fp
2e024     A7 32 E2 FA | 	rdword	local07, fp
2e028     14 4E 85 F1 | 	sub	fp, #20
2e02c     80 32 CE F7 | 	test	local07, #128 wz
2e030     2C 00 90 AD |  if_e	jmp	#LR__4626
2e034     14 4E 05 F1 | 	add	fp, #20
2e038     A7 28 E2 FA | 	rdword	local02, fp
2e03c     7F 28 06 F5 | 	and	local02, #127
2e040     01 00 00 FF 
2e044     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2e048     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2e04c     14 33 C2 FA | 	rdbyte	local07, local02
2e050     A7 32 52 FC | 	wrword	local07, fp
2e054     14 4E 85 F1 | 	sub	fp, #20
2e058     01 00 00 FF 
2e05c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2e060                 | LR__4626
2e060                 | LR__4627
2e060     14 4E 05 F1 | 	add	fp, #20
2e064     A7 32 E2 FA | 	rdword	local07, fp
2e068     14 4E 85 F1 | 	sub	fp, #20
2e06c     00 33 16 F2 | 	cmp	local07, #256 wc
2e070     88 00 90 CD |  if_b	jmp	#LR__4629
2e074     24 4E 05 F1 | 	add	fp, #36
2e078     A7 32 02 FB | 	rdlong	local07, fp
2e07c     01 32 86 F1 | 	sub	local07, #1
2e080     04 4E 85 F1 | 	sub	fp, #4
2e084     A7 28 02 FB | 	rdlong	local02, fp
2e088     20 4E 85 F1 | 	sub	fp, #32
2e08c     19 29 12 F2 | 	cmp	local02, local07 wc
2e090     2C 00 90 CD |  if_b	jmp	#LR__4628
2e094     10 4E 05 F1 | 	add	fp, #16
2e098     A7 3A C2 FA | 	rdbyte	local11, fp
2e09c     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2e0a0     03 32 46 F5 | 	or	local07, #3
2e0a4     A7 32 42 FC | 	wrbyte	local07, fp
2e0a8     14 4E 05 F1 | 	add	fp, #20
2e0ac     A7 32 02 FB | 	rdlong	local07, fp
2e0b0     04 4E 85 F1 | 	sub	fp, #4
2e0b4     A7 32 62 FC | 	wrlong	local07, fp
2e0b8     20 4E 85 F1 | 	sub	fp, #32
2e0bc                 | ' 				cf |=  0x01  |  0x02 ;
2e0bc                 | ' 				i = ni; continue;
2e0bc     A0 FD 9F FD | 	jmp	#LR__4620
2e0c0                 | LR__4628
2e0c0     04 4E 05 F1 | 	add	fp, #4
2e0c4     A7 36 02 FB | 	rdlong	local09, fp
2e0c8     1C 4E 05 F1 | 	add	fp, #28
2e0cc     A7 38 02 FB | 	rdlong	local10, fp
2e0d0     1C 2D 02 F6 | 	mov	local04, local10
2e0d4     01 2C 06 F1 | 	add	local04, #1
2e0d8     A7 2C 62 FC | 	wrlong	local04, fp
2e0dc     20 36 06 F1 | 	add	local09, #32
2e0e0     1B 39 02 F1 | 	add	local10, local09
2e0e4     0C 4E 85 F1 | 	sub	fp, #12
2e0e8     A7 2A E2 FA | 	rdword	local03, fp
2e0ec     14 4E 85 F1 | 	sub	fp, #20
2e0f0     08 2A 46 F0 | 	shr	local03, #8
2e0f4     1C 2B 42 FC | 	wrbyte	local03, local10
2e0f8     D4 00 90 FD | 	jmp	#LR__4635
2e0fc                 | LR__4629
2e0fc     14 4E 05 F1 | 	add	fp, #20
2e100     A7 32 EA FA | 	rdword	local07, fp wz
2e104     14 4E 85 F1 | 	sub	fp, #20
2e108     20 00 90 AD |  if_e	jmp	#LR__4630
2e10c     9D 01 00 FF 
2e110     9D 12 06 F6 | 	mov	arg01, ##@LR__5263
2e114     14 4E 05 F1 | 	add	fp, #20
2e118     A7 14 E2 FA | 	rdword	arg02, fp
2e11c     14 4E 85 F1 | 	sub	fp, #20
2e120     48 CB BF FD | 	call	#_fatfs_cc_strchr
2e124     00 FA 0D F2 | 	cmp	result1, #0 wz
2e128     20 00 90 AD |  if_e	jmp	#LR__4631
2e12c                 | LR__4630
2e12c     14 4E 05 F1 | 	add	fp, #20
2e130     A7 BE 58 FC | 	wrword	#95, fp
2e134     04 4E 85 F1 | 	sub	fp, #4
2e138     A7 32 C2 FA | 	rdbyte	local07, fp
2e13c     03 32 46 F5 | 	or	local07, #3
2e140     A7 32 42 FC | 	wrbyte	local07, fp
2e144     10 4E 85 F1 | 	sub	fp, #16
2e148     84 00 90 FD | 	jmp	#LR__4634
2e14c                 | LR__4631
2e14c     14 4E 05 F1 | 	add	fp, #20
2e150     A7 32 E2 FA | 	rdword	local07, fp
2e154     14 4E 85 F1 | 	sub	fp, #20
2e158     41 32 16 F2 | 	cmp	local07, #65 wc
2e15c     24 00 90 CD |  if_b	jmp	#LR__4632
2e160     14 4E 05 F1 | 	add	fp, #20
2e164     A7 26 E2 FA | 	rdword	local01, fp
2e168     14 4E 85 F1 | 	sub	fp, #20
2e16c     5B 26 16 F2 | 	cmp	local01, #91 wc
2e170     0C 4E 05 C1 |  if_b	add	fp, #12
2e174     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2e178     02 32 46 C5 |  if_b	or	local07, #2
2e17c     A7 32 42 CC |  if_b	wrbyte	local07, fp
2e180     0C 4E 85 C1 |  if_b	sub	fp, #12
2e184                 | LR__4632
2e184     14 4E 05 F1 | 	add	fp, #20
2e188     A7 32 E2 FA | 	rdword	local07, fp
2e18c     14 4E 85 F1 | 	sub	fp, #20
2e190     61 32 16 F2 | 	cmp	local07, #97 wc
2e194     38 00 90 CD |  if_b	jmp	#LR__4633
2e198     14 4E 05 F1 | 	add	fp, #20
2e19c     A7 26 E2 FA | 	rdword	local01, fp
2e1a0     14 4E 85 F1 | 	sub	fp, #20
2e1a4     7B 26 16 F2 | 	cmp	local01, #123 wc
2e1a8     24 00 90 3D |  if_ae	jmp	#LR__4633
2e1ac     0C 4E 05 F1 | 	add	fp, #12
2e1b0     A7 32 C2 FA | 	rdbyte	local07, fp
2e1b4     01 32 46 F5 | 	or	local07, #1
2e1b8     A7 32 42 FC | 	wrbyte	local07, fp
2e1bc     08 4E 05 F1 | 	add	fp, #8
2e1c0     A7 32 E2 FA | 	rdword	local07, fp
2e1c4     20 32 86 F1 | 	sub	local07, #32
2e1c8     A7 32 52 FC | 	wrword	local07, fp
2e1cc     14 4E 85 F1 | 	sub	fp, #20
2e1d0                 | LR__4633
2e1d0                 | LR__4634
2e1d0                 | LR__4635
2e1d0     04 4E 05 F1 | 	add	fp, #4
2e1d4     A7 3A 02 FB | 	rdlong	local11, fp
2e1d8     1D 37 02 F6 | 	mov	local09, local11
2e1dc     1C 4E 05 F1 | 	add	fp, #28
2e1e0     A7 28 02 FB | 	rdlong	local02, fp
2e1e4     14 2D 02 F6 | 	mov	local04, local02
2e1e8     01 2C 06 F1 | 	add	local04, #1
2e1ec     A7 2C 62 FC | 	wrlong	local04, fp
2e1f0     14 39 02 F6 | 	mov	local10, local02
2e1f4     20 36 06 F1 | 	add	local09, #32
2e1f8     1B 39 02 F1 | 	add	local10, local09
2e1fc     0C 4E 85 F1 | 	sub	fp, #12
2e200     A7 2A E2 FA | 	rdword	local03, fp
2e204     14 4E 85 F1 | 	sub	fp, #20
2e208     1C 2B 42 FC | 	wrbyte	local03, local10
2e20c     50 FC 9F FD | 	jmp	#LR__4620
2e210                 | LR__4636
2e210     04 4E 05 F1 | 	add	fp, #4
2e214     A7 3A 02 FB | 	rdlong	local11, fp
2e218     04 4E 85 F1 | 	sub	fp, #4
2e21c     20 3A 06 F1 | 	add	local11, #32
2e220     1D 33 C2 FA | 	rdbyte	local07, local11
2e224     E5 32 0E F2 | 	cmp	local07, #229 wz
2e228     04 4E 05 A1 |  if_e	add	fp, #4
2e22c     A7 32 02 AB |  if_e	rdlong	local07, fp
2e230     04 4E 85 A1 |  if_e	sub	fp, #4
2e234     20 32 06 A1 |  if_e	add	local07, #32
2e238     19 0B 48 AC |  if_e	wrbyte	#5, local07
2e23c     24 4E 05 F1 | 	add	fp, #36
2e240     A7 32 02 FB | 	rdlong	local07, fp
2e244     24 4E 85 F1 | 	sub	fp, #36
2e248     08 32 0E F2 | 	cmp	local07, #8 wz
2e24c     0C 4E 05 A1 |  if_e	add	fp, #12
2e250     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2e254     02 32 66 A0 |  if_e	shl	local07, #2
2e258     A7 32 42 AC |  if_e	wrbyte	local07, fp
2e25c     0C 4E 85 A1 |  if_e	sub	fp, #12
2e260     0C 4E 05 F1 | 	add	fp, #12
2e264     A7 32 C2 FA | 	rdbyte	local07, fp
2e268     0C 4E 85 F1 | 	sub	fp, #12
2e26c     0C 32 06 F5 | 	and	local07, #12
2e270     0C 32 0E F2 | 	cmp	local07, #12 wz
2e274     18 00 90 AD |  if_e	jmp	#LR__4637
2e278     0C 4E 05 F1 | 	add	fp, #12
2e27c     A7 26 C2 FA | 	rdbyte	local01, fp
2e280     0C 4E 85 F1 | 	sub	fp, #12
2e284     03 26 06 F5 | 	and	local01, #3
2e288     03 26 0E F2 | 	cmp	local01, #3 wz
2e28c     14 00 90 5D |  if_ne	jmp	#LR__4638
2e290                 | LR__4637
2e290     10 4E 05 F1 | 	add	fp, #16
2e294     A7 32 C2 FA | 	rdbyte	local07, fp
2e298     02 32 46 F5 | 	or	local07, #2
2e29c     A7 32 42 FC | 	wrbyte	local07, fp
2e2a0     10 4E 85 F1 | 	sub	fp, #16
2e2a4                 | LR__4638
2e2a4     10 4E 05 F1 | 	add	fp, #16
2e2a8     A7 32 C2 FA | 	rdbyte	local07, fp
2e2ac     10 4E 85 F1 | 	sub	fp, #16
2e2b0     02 32 CE F7 | 	test	local07, #2 wz
2e2b4     48 00 90 5D |  if_ne	jmp	#LR__4639
2e2b8     0C 4E 05 F1 | 	add	fp, #12
2e2bc     A7 32 C2 FA | 	rdbyte	local07, fp
2e2c0     0C 4E 85 F1 | 	sub	fp, #12
2e2c4     01 32 CE F7 | 	test	local07, #1 wz
2e2c8     10 4E 05 51 |  if_ne	add	fp, #16
2e2cc     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2e2d0     10 32 46 55 |  if_ne	or	local07, #16
2e2d4     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2e2d8     10 4E 85 51 |  if_ne	sub	fp, #16
2e2dc     0C 4E 05 F1 | 	add	fp, #12
2e2e0     A7 32 C2 FA | 	rdbyte	local07, fp
2e2e4     0C 4E 85 F1 | 	sub	fp, #12
2e2e8     04 32 CE F7 | 	test	local07, #4 wz
2e2ec     10 4E 05 51 |  if_ne	add	fp, #16
2e2f0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2e2f4     08 32 46 55 |  if_ne	or	local07, #8
2e2f8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2e2fc     10 4E 85 51 |  if_ne	sub	fp, #16
2e300                 | LR__4639
2e300     04 4E 05 F1 | 	add	fp, #4
2e304     A7 32 02 FB | 	rdlong	local07, fp
2e308     0C 4E 05 F1 | 	add	fp, #12
2e30c     A7 26 C2 FA | 	rdbyte	local01, fp
2e310     10 4E 85 F1 | 	sub	fp, #16
2e314     2B 32 06 F1 | 	add	local07, #43
2e318     19 27 42 FC | 	wrbyte	local01, local07
2e31c                 | ' 	}
2e31c                 | ' 
2e31c                 | ' 	dp->fn[ 11 ] = cf;
2e31c                 | ' 
2e31c                 | ' 	return FR_OK;
2e31c     00 FA 05 F6 | 	mov	result1, #0
2e320                 | LR__4640
2e320     A7 F0 03 F6 | 	mov	ptra, fp
2e324     B2 00 A0 FD | 	call	#popregs_
2e328                 | _fatfs_cc_create_name_ret
2e328     2D 00 64 FD | 	ret
2e32c                 | 
2e32c                 | _fatfs_cc_follow_path
2e32c     02 4A 05 F6 | 	mov	COUNT_, #2
2e330     A8 00 A0 FD | 	call	#pushregs_
2e334     18 F0 07 F1 | 	add	ptra, #24
2e338     04 4E 05 F1 | 	add	fp, #4
2e33c     A7 12 62 FC | 	wrlong	arg01, fp
2e340     04 4E 05 F1 | 	add	fp, #4
2e344     A7 14 62 FC | 	wrlong	arg02, fp
2e348     04 4E 85 F1 | 	sub	fp, #4
2e34c     A7 FA 01 FB | 	rdlong	result1, fp
2e350     FD 26 02 FB | 	rdlong	local01, result1
2e354     10 4E 05 F1 | 	add	fp, #16
2e358     A7 26 62 FC | 	wrlong	local01, fp
2e35c     14 4E 85 F1 | 	sub	fp, #20
2e360     97 24 48 FB | 	callpa	#(@LR__4652-@LR__4650)>>2,fcache_load_ptr_
2e364                 | ' )
2e364                 | ' {
2e364                 | ' 	FRESULT res;
2e364                 | ' 	BYTE ns;
2e364                 | ' 	FATFS *fs = dp->obj.fs;
2e364                 | ' #line 3034 "ff.c"
2e364                 | ' 	{
2e364                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2e364                 | LR__4650
2e364     08 4E 05 F1 | 	add	fp, #8
2e368     A7 26 02 FB | 	rdlong	local01, fp
2e36c     08 4E 85 F1 | 	sub	fp, #8
2e370     13 27 C2 FA | 	rdbyte	local01, local01
2e374     2F 26 0E F2 | 	cmp	local01, #47 wz
2e378     18 00 90 AD |  if_e	jmp	#LR__4651
2e37c     08 4E 05 F1 | 	add	fp, #8
2e380     A7 26 02 FB | 	rdlong	local01, fp
2e384     08 4E 85 F1 | 	sub	fp, #8
2e388     13 27 C2 FA | 	rdbyte	local01, local01
2e38c     5C 26 0E F2 | 	cmp	local01, #92 wz
2e390     18 00 90 5D |  if_ne	jmp	#LR__4653
2e394                 | LR__4651
2e394     08 4E 05 F1 | 	add	fp, #8
2e398     A7 26 02 FB | 	rdlong	local01, fp
2e39c     01 26 06 F1 | 	add	local01, #1
2e3a0     A7 26 62 FC | 	wrlong	local01, fp
2e3a4     08 4E 85 F1 | 	sub	fp, #8
2e3a8     B8 FF 9F FD | 	jmp	#LR__4650
2e3ac                 | LR__4652
2e3ac                 | LR__4653
2e3ac     04 4E 05 F1 | 	add	fp, #4
2e3b0     A7 26 02 FB | 	rdlong	local01, fp
2e3b4     08 26 06 F1 | 	add	local01, #8
2e3b8     13 01 68 FC | 	wrlong	#0, local01
2e3bc     04 4E 05 F1 | 	add	fp, #4
2e3c0     A7 26 02 FB | 	rdlong	local01, fp
2e3c4     08 4E 85 F1 | 	sub	fp, #8
2e3c8     13 27 C2 FA | 	rdbyte	local01, local01
2e3cc     20 26 16 F2 | 	cmp	local01, #32 wc
2e3d0     30 00 90 3D |  if_ae	jmp	#LR__4654
2e3d4     04 4E 05 F1 | 	add	fp, #4
2e3d8     A7 26 02 FB | 	rdlong	local01, fp
2e3dc     2B 26 06 F1 | 	add	local01, #43
2e3e0     13 01 49 FC | 	wrbyte	#128, local01
2e3e4     A7 12 02 FB | 	rdlong	arg01, fp
2e3e8     04 4E 85 F1 | 	sub	fp, #4
2e3ec     00 14 06 F6 | 	mov	arg02, #0
2e3f0     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e3f4     0C 4E 05 F1 | 	add	fp, #12
2e3f8     A7 FA 61 FC | 	wrlong	result1, fp
2e3fc     0C 4E 85 F1 | 	sub	fp, #12
2e400     1C 01 90 FD | 	jmp	#LR__4658
2e404                 | LR__4654
2e404                 | ' 		for (;;) {
2e404                 | LR__4655
2e404     04 4E 05 F1 | 	add	fp, #4
2e408     A7 12 02 FB | 	rdlong	arg01, fp
2e40c     04 4E 05 F1 | 	add	fp, #4
2e410     A7 14 02 F6 | 	mov	arg02, fp
2e414     08 4E 85 F1 | 	sub	fp, #8
2e418     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2e41c     0C 4E 05 F1 | 	add	fp, #12
2e420     A7 FA 61 FC | 	wrlong	result1, fp
2e424     00 FA 4D F2 | 	cmps	result1, #0 wz
2e428     0C 4E 85 F1 | 	sub	fp, #12
2e42c     F0 00 90 5D |  if_ne	jmp	#LR__4657
2e430     04 4E 05 F1 | 	add	fp, #4
2e434     A7 12 02 FB | 	rdlong	arg01, fp
2e438     04 4E 85 F1 | 	sub	fp, #4
2e43c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2e440     0C 4E 05 F1 | 	add	fp, #12
2e444     A7 FA 61 FC | 	wrlong	result1, fp
2e448     08 4E 85 F1 | 	sub	fp, #8
2e44c     A7 26 02 FB | 	rdlong	local01, fp
2e450     2B 26 06 F1 | 	add	local01, #43
2e454     13 27 C2 FA | 	rdbyte	local01, local01
2e458     0C 4E 05 F1 | 	add	fp, #12
2e45c     A7 26 42 FC | 	wrbyte	local01, fp
2e460     04 4E 85 F1 | 	sub	fp, #4
2e464     A7 26 0A FB | 	rdlong	local01, fp wz
2e468     0C 4E 85 F1 | 	sub	fp, #12
2e46c     34 00 90 AD |  if_e	jmp	#LR__4656
2e470     0C 4E 05 F1 | 	add	fp, #12
2e474     A7 26 02 FB | 	rdlong	local01, fp
2e478     0C 4E 85 F1 | 	sub	fp, #12
2e47c     04 26 0E F2 | 	cmp	local01, #4 wz
2e480     9C 00 90 5D |  if_ne	jmp	#LR__4657
2e484     10 4E 05 F1 | 	add	fp, #16
2e488     A7 26 C2 FA | 	rdbyte	local01, fp
2e48c     10 4E 85 F1 | 	sub	fp, #16
2e490     04 26 CE F7 | 	test	local01, #4 wz
2e494     0C 4E 05 A1 |  if_e	add	fp, #12
2e498     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e49c     0C 4E 85 A1 |  if_e	sub	fp, #12
2e4a0                 | ' 					}
2e4a0                 | ' 				}
2e4a0                 | ' 				break;
2e4a0     7C 00 90 FD | 	jmp	#LR__4657
2e4a4                 | LR__4656
2e4a4     10 4E 05 F1 | 	add	fp, #16
2e4a8     A7 26 C2 FA | 	rdbyte	local01, fp
2e4ac     10 4E 85 F1 | 	sub	fp, #16
2e4b0     04 26 CE F7 | 	test	local01, #4 wz
2e4b4     68 00 90 5D |  if_ne	jmp	#LR__4657
2e4b8     04 4E 05 F1 | 	add	fp, #4
2e4bc     A7 26 02 FB | 	rdlong	local01, fp
2e4c0     04 4E 85 F1 | 	sub	fp, #4
2e4c4     06 26 06 F1 | 	add	local01, #6
2e4c8     13 27 C2 FA | 	rdbyte	local01, local01
2e4cc     10 26 CE F7 | 	test	local01, #16 wz
2e4d0     0C 4E 05 A1 |  if_e	add	fp, #12
2e4d4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e4d8     0C 4E 85 A1 |  if_e	sub	fp, #12
2e4dc                 | ' 				res = FR_NO_PATH; break;
2e4dc     40 00 90 AD |  if_e	jmp	#LR__4657
2e4e0     04 4E 05 F1 | 	add	fp, #4
2e4e4     A7 28 02 FB | 	rdlong	local02, fp
2e4e8     14 27 02 F6 | 	mov	local01, local02
2e4ec     10 4E 05 F1 | 	add	fp, #16
2e4f0     A7 14 02 FB | 	rdlong	arg02, fp
2e4f4     0A 13 02 F6 | 	mov	arg01, arg02
2e4f8     34 14 06 F1 | 	add	arg02, #52
2e4fc     14 4E 85 F1 | 	sub	fp, #20
2e500     10 28 06 F1 | 	add	local02, #16
2e504     14 29 02 FB | 	rdlong	local02, local02
2e508     FF 29 06 F5 | 	and	local02, #511
2e50c     14 15 02 F1 | 	add	arg02, local02
2e510     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2e514     08 26 06 F1 | 	add	local01, #8
2e518     13 FB 61 FC | 	wrlong	result1, local01
2e51c     E4 FE 9F FD | 	jmp	#LR__4655
2e520                 | LR__4657
2e520                 | LR__4658
2e520                 | ' 			}
2e520                 | ' #line 3090 "ff.c"
2e520                 | ' 			{
2e520                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2e520                 | ' 			}
2e520                 | ' 		}
2e520                 | ' 	}
2e520                 | ' 
2e520                 | ' 	return res;
2e520     0C 4E 05 F1 | 	add	fp, #12
2e524     A7 FA 01 FB | 	rdlong	result1, fp
2e528     0C 4E 85 F1 | 	sub	fp, #12
2e52c     A7 F0 03 F6 | 	mov	ptra, fp
2e530     B2 00 A0 FD | 	call	#popregs_
2e534                 | _fatfs_cc_follow_path_ret
2e534     2D 00 64 FD | 	ret
2e538                 | 
2e538                 | _fatfs_cc_get_ldnumber
2e538     01 00 66 F6 | 	neg	_var01, #1
2e53c     09 03 0A FB | 	rdlong	_var02, arg01 wz
2e540     01 05 02 F6 | 	mov	_var03, _var02
2e544     01 FA 65 A6 |  if_e	neg	result1, #1
2e548     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2e54c     97 10 48 FB | 	callpa	#(@LR__4661-@LR__4660)>>2,fcache_load_ptr_
2e550                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2e550                 | LR__4660
2e550     02 07 C2 FA | 	rdbyte	_var04, _var03
2e554     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2e558     20 FA 15 F2 | 	cmp	result1, #32 wc
2e55c     01 04 06 F1 | 	add	_var03, #1
2e560     03 09 02 36 |  if_ae	mov	_var05, _var04
2e564     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2e568     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2e56c     E0 FF 9F 1D |  if_a	jmp	#LR__4660
2e570                 | LR__4661
2e570     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2e574     3A 06 0E F2 | 	cmp	_var04, #58 wz
2e578     40 00 90 5D |  if_ne	jmp	#LR__4663
2e57c     01 0A 06 F6 | 	mov	_var06, #1
2e580     01 09 C2 FA | 	rdbyte	_var05, _var02
2e584     30 08 16 F2 | 	cmp	_var05, #48 wc
2e588     1C 00 90 CD |  if_b	jmp	#LR__4662
2e58c     01 09 C2 FA | 	rdbyte	_var05, _var02
2e590     3A 08 16 F2 | 	cmp	_var05, #58 wc
2e594     01 0D 02 C6 |  if_b	mov	_var07, _var02
2e598     02 0C 06 C1 |  if_b	add	_var07, #2
2e59c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2e5a0     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2e5a4     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2e5a8                 | LR__4662
2e5a8     01 0A 56 F2 | 	cmps	_var06, #1 wc
2e5ac     05 01 02 C6 |  if_b	mov	_var01, _var06
2e5b0     09 05 62 CC |  if_b	wrlong	_var03, arg01
2e5b4                 | ' 			vol = i;
2e5b4                 | ' 			*path = tt;
2e5b4                 | ' 		}
2e5b4                 | ' 		return vol;
2e5b4     00 FB 01 F6 | 	mov	result1, _var01
2e5b8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2e5bc                 | LR__4663
2e5bc                 | ' 	}
2e5bc                 | ' #line 3170 "ff.c"
2e5bc                 | ' 	vol = 0;
2e5bc                 | ' 
2e5bc                 | ' 	return vol;
2e5bc     00 FA 05 F6 | 	mov	result1, #0
2e5c0                 | _fatfs_cc_get_ldnumber_ret
2e5c0     2D 00 64 FD | 	ret
2e5c4                 | 
2e5c4                 | _fatfs_cc_check_fs
2e5c4     04 4A 05 F6 | 	mov	COUNT_, #4
2e5c8     A8 00 A0 FD | 	call	#pushregs_
2e5cc     09 27 02 F6 | 	mov	local01, arg01
2e5d0     03 26 06 F1 | 	add	local01, #3
2e5d4     13 01 48 FC | 	wrbyte	#0, local01
2e5d8     2D 26 06 F1 | 	add	local01, #45
2e5dc     FF FF FF FF 
2e5e0     13 FF 6B FC | 	wrlong	##-1, local01
2e5e4     30 26 86 F1 | 	sub	local01, #48
2e5e8     13 13 02 F6 | 	mov	arg01, local01
2e5ec     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2e5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5f4     04 FA 05 56 |  if_ne	mov	result1, #4
2e5f8     94 01 90 5D |  if_ne	jmp	#LR__4674
2e5fc     34 26 06 F1 | 	add	local01, #52
2e600     13 13 02 F6 | 	mov	arg01, local01
2e604     FE 13 06 F1 | 	add	arg01, #510
2e608                 | ' {
2e608                 | ' 
2e608                 | ' 	return *((WORD*)ptr);
2e608     09 29 E2 FA | 	rdword	local02, arg01
2e60c     13 2B C2 FA | 	rdbyte	local03, local01
2e610     34 26 86 F1 | 	sub	local01, #52
2e614     15 2D E2 F8 | 	getbyte	local04, local03, #0
2e618     EB 2C 0E F2 | 	cmp	local04, #235 wz
2e61c     15 17 02 56 |  if_ne	mov	arg03, local03
2e620     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2e624     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2e628     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2e62c     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2e630     44 01 90 5D |  if_ne	jmp	#LR__4673
2e634     14 2D 32 F9 | 	getword	local04, local02, #0
2e638     55 00 00 FF 
2e63c     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2e640     2C 00 90 5D |  if_ne	jmp	#LR__4670
2e644     34 26 06 F1 | 	add	local01, #52
2e648     13 13 02 F6 | 	mov	arg01, local01
2e64c     34 26 86 F1 | 	sub	local01, #52
2e650     52 12 06 F1 | 	add	arg01, #82
2e654     9D 01 00 FF 
2e658     A4 14 06 F6 | 	mov	arg02, ##@LR__5264
2e65c     08 16 06 F6 | 	mov	arg03, #8
2e660     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2e664     00 FA 0D F2 | 	cmp	result1, #0 wz
2e668                 | ' 			return 0;
2e668     00 FA 05 A6 |  if_e	mov	result1, #0
2e66c     20 01 90 AD |  if_e	jmp	#LR__4674
2e670                 | LR__4670
2e670     34 26 06 F1 | 	add	local01, #52
2e674     13 13 02 F6 | 	mov	arg01, local01
2e678     0B 12 06 F1 | 	add	arg01, #11
2e67c                 | ' {
2e67c                 | ' 
2e67c                 | ' 	return *((WORD*)ptr);
2e67c     09 FB E1 FA | 	rdword	result1, arg01
2e680     0D 26 06 F1 | 	add	local01, #13
2e684     13 2B C2 FA | 	rdbyte	local03, local01
2e688     41 26 86 F1 | 	sub	local01, #65
2e68c     FD 2C 32 F9 | 	getword	local04, result1, #0
2e690     FD 14 32 F9 | 	getword	arg02, result1, #0
2e694     01 14 86 F1 | 	sub	arg02, #1
2e698     0A 2D CA F7 | 	test	local04, arg02 wz
2e69c     D8 00 90 5D |  if_ne	jmp	#LR__4672
2e6a0     FD 14 32 F9 | 	getword	arg02, result1, #0
2e6a4     01 00 00 FF 
2e6a8     00 14 16 F2 | 	cmp	arg02, ##512 wc
2e6ac     C8 00 90 CD |  if_b	jmp	#LR__4672
2e6b0     FD 14 32 F9 | 	getword	arg02, result1, #0
2e6b4     01 00 00 FF 
2e6b8     01 14 16 F2 | 	cmp	arg02, ##513 wc
2e6bc     B8 00 90 3D |  if_ae	jmp	#LR__4672
2e6c0     15 13 02 F6 | 	mov	arg01, local03
2e6c4     07 12 4E F7 | 	zerox	arg01, #7 wz
2e6c8     AC 00 90 AD |  if_e	jmp	#LR__4672
2e6cc     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2e6d0     15 2B E2 F8 | 	getbyte	local03, local03, #0
2e6d4     01 2A 86 F1 | 	sub	local03, #1
2e6d8     15 13 CA F7 | 	test	arg01, local03 wz
2e6dc     98 00 90 5D |  if_ne	jmp	#LR__4672
2e6e0     34 26 06 F1 | 	add	local01, #52
2e6e4     13 13 02 F6 | 	mov	arg01, local01
2e6e8     34 26 86 F1 | 	sub	local01, #52
2e6ec     0E 12 06 F1 | 	add	arg01, #14
2e6f0                 | ' {
2e6f0                 | ' 
2e6f0                 | ' 	return *((WORD*)ptr);
2e6f0     09 FB E9 FA | 	rdword	result1, arg01 wz
2e6f4     80 00 90 AD |  if_e	jmp	#LR__4672
2e6f8     44 26 06 F1 | 	add	local01, #68
2e6fc     13 13 C2 FA | 	rdbyte	arg01, local01
2e700     44 26 86 F1 | 	sub	local01, #68
2e704     01 12 86 F1 | 	sub	arg01, #1
2e708     02 12 16 F2 | 	cmp	arg01, #2 wc
2e70c     68 00 90 3D |  if_ae	jmp	#LR__4672
2e710     34 26 06 F1 | 	add	local01, #52
2e714     13 13 02 F6 | 	mov	arg01, local01
2e718     34 26 86 F1 | 	sub	local01, #52
2e71c     11 12 06 F1 | 	add	arg01, #17
2e720                 | ' {
2e720                 | ' 
2e720                 | ' 	return *((WORD*)ptr);
2e720     09 FB E9 FA | 	rdword	result1, arg01 wz
2e724     50 00 90 AD |  if_e	jmp	#LR__4672
2e728     34 26 06 F1 | 	add	local01, #52
2e72c     13 13 02 F6 | 	mov	arg01, local01
2e730     34 26 86 F1 | 	sub	local01, #52
2e734     13 12 06 F1 | 	add	arg01, #19
2e738                 | ' {
2e738                 | ' 
2e738                 | ' 	return *((WORD*)ptr);
2e738     09 FB E1 FA | 	rdword	result1, arg01
2e73c     FD 2A 32 F9 | 	getword	local03, result1, #0
2e740     80 2A 16 F2 | 	cmp	local03, #128 wc
2e744     20 00 90 3D |  if_ae	jmp	#LR__4671
2e748     34 26 06 F1 | 	add	local01, #52
2e74c     13 13 02 F6 | 	mov	arg01, local01
2e750     34 26 86 F1 | 	sub	local01, #52
2e754     20 12 06 F1 | 	add	arg01, #32
2e758                 | ' {
2e758                 | ' 
2e758                 | ' 	return *((DWORD*)ptr);
2e758     09 FB 01 FB | 	rdlong	result1, arg01
2e75c     80 00 00 FF 
2e760     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2e764     10 00 90 CD |  if_b	jmp	#LR__4672
2e768                 | LR__4671
2e768     4A 26 06 F1 | 	add	local01, #74
2e76c                 | ' {
2e76c                 | ' 
2e76c                 | ' 	return *((WORD*)ptr);
2e76c     13 FB E9 FA | 	rdword	result1, local01 wz
2e770                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2e770                 | ' 			&& ld_word(fs->win +  14 ) != 0
2e770                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2e770                 | ' 			&& ld_word(fs->win +  17 ) != 0
2e770                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2e770                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2e770                 | ' 				return 0;
2e770     00 FA 05 56 |  if_ne	mov	result1, #0
2e774     18 00 90 5D |  if_ne	jmp	#LR__4674
2e778                 | LR__4672
2e778                 | LR__4673
2e778                 | ' 		}
2e778                 | ' 	}
2e778                 | ' 	return sign == 0xAA55 ? 2 : 3;
2e778     14 2B 32 F9 | 	getword	local03, local02, #0
2e77c     55 00 00 FF 
2e780     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2e784     02 2C 06 A6 |  if_e	mov	local04, #2
2e788     03 2C 06 56 |  if_ne	mov	local04, #3
2e78c     16 FB 01 F6 | 	mov	result1, local04
2e790                 | LR__4674
2e790     A7 F0 03 F6 | 	mov	ptra, fp
2e794     B2 00 A0 FD | 	call	#popregs_
2e798                 | _fatfs_cc_check_fs_ret
2e798     2D 00 64 FD | 	ret
2e79c                 | 
2e79c                 | _fatfs_cc_find_volume
2e79c     05 4A 05 F6 | 	mov	COUNT_, #5
2e7a0     A8 00 A0 FD | 	call	#pushregs_
2e7a4     24 F0 07 F1 | 	add	ptra, #36
2e7a8     09 27 02 F6 | 	mov	local01, arg01
2e7ac     0A 29 02 F6 | 	mov	local02, arg02
2e7b0     13 13 02 F6 | 	mov	arg01, local01
2e7b4     00 14 06 F6 | 	mov	arg02, #0
2e7b8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2e7bc     02 FA 0D F2 | 	cmp	result1, #2 wz
2e7c0     0C 00 90 AD |  if_e	jmp	#LR__4680
2e7c4     03 FA 15 F2 | 	cmp	result1, #3 wc
2e7c8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2e7cc     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4688
2e7d0                 | LR__4680
2e7d0                 | ' 	for (i = 0; i < 4; i++) {
2e7d0     00 2A 06 F6 | 	mov	local03, #0
2e7d4     97 26 48 FB | 	callpa	#(@LR__4682-@LR__4681)>>2,fcache_load_ptr_
2e7d8                 | LR__4681
2e7d8     04 2A 16 F2 | 	cmp	local03, #4 wc
2e7dc     44 00 90 3D |  if_ae	jmp	#LR__4683
2e7e0     15 2D 02 F6 | 	mov	local04, local03
2e7e4     02 2C 66 F0 | 	shl	local04, #2
2e7e8     14 4E 05 F1 | 	add	fp, #20
2e7ec     A7 2C 02 F1 | 	add	local04, fp
2e7f0     34 26 06 F1 | 	add	local01, #52
2e7f4     13 13 02 F6 | 	mov	arg01, local01
2e7f8     34 26 86 F1 | 	sub	local01, #52
2e7fc     BE 13 06 F1 | 	add	arg01, #446
2e800     15 15 02 F6 | 	mov	arg02, local03
2e804     04 14 66 F0 | 	shl	arg02, #4
2e808     0A 13 02 F1 | 	add	arg01, arg02
2e80c     08 12 06 F1 | 	add	arg01, #8
2e810                 | ' {
2e810                 | ' 
2e810                 | ' 	return *((DWORD*)ptr);
2e810     09 FB 01 FB | 	rdlong	result1, arg01
2e814     14 4E 85 F1 | 	sub	fp, #20
2e818     16 FB 61 FC | 	wrlong	result1, local04
2e81c     01 2A 06 F1 | 	add	local03, #1
2e820     B4 FF 9F FD | 	jmp	#LR__4681
2e824                 | LR__4682
2e824                 | LR__4683
2e824     00 28 0E F2 | 	cmp	local02, #0 wz
2e828     14 2D 02 56 |  if_ne	mov	local04, local02
2e82c     01 2C 86 51 |  if_ne	sub	local04, #1
2e830     00 2C 06 A6 |  if_e	mov	local04, #0
2e834     16 2B 02 F6 | 	mov	local03, local04
2e838                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2e838                 | ' 	}
2e838                 | ' 	i = part ? part - 1 : 0;
2e838                 | ' 	do {
2e838                 | LR__4684
2e838     15 2D 02 F6 | 	mov	local04, local03
2e83c     02 2C 66 F0 | 	shl	local04, #2
2e840     14 4E 05 F1 | 	add	fp, #20
2e844     A7 2C 02 F1 | 	add	local04, fp
2e848     16 2D 0A FB | 	rdlong	local04, local04 wz
2e84c     14 4E 85 F1 | 	sub	fp, #20
2e850     28 00 90 AD |  if_e	jmp	#LR__4685
2e854     15 2D 02 F6 | 	mov	local04, local03
2e858     02 2C 66 F0 | 	shl	local04, #2
2e85c     14 4E 05 F1 | 	add	fp, #20
2e860     A7 2C 02 F1 | 	add	local04, fp
2e864     16 15 02 FB | 	rdlong	arg02, local04
2e868     13 13 02 F6 | 	mov	arg01, local01
2e86c     14 4E 85 F1 | 	sub	fp, #20
2e870     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2e874     FD 2C 02 F6 | 	mov	local04, result1
2e878     04 00 90 FD | 	jmp	#LR__4686
2e87c                 | LR__4685
2e87c     03 2C 06 F6 | 	mov	local04, #3
2e880                 | LR__4686
2e880     16 2F 02 F6 | 	mov	local05, local04
2e884     00 28 0E F2 | 	cmp	local02, #0 wz
2e888     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2e88c     0C 00 90 8D |  if_c_and_z	jmp	#LR__4687
2e890     01 2A 06 A1 |  if_e	add	local03, #1
2e894     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2e898     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4684
2e89c                 | LR__4687
2e89c                 | ' 	return fmt;
2e89c     17 FB 01 F6 | 	mov	result1, local05
2e8a0                 | LR__4688
2e8a0     A7 F0 03 F6 | 	mov	ptra, fp
2e8a4     B2 00 A0 FD | 	call	#popregs_
2e8a8                 | _fatfs_cc_find_volume_ret
2e8a8     2D 00 64 FD | 	ret
2e8ac                 | 
2e8ac                 | _fatfs_cc_mount_volume
2e8ac     0B 4A 05 F6 | 	mov	COUNT_, #11
2e8b0     A8 00 A0 FD | 	call	#pushregs_
2e8b4     0A 27 02 F6 | 	mov	local01, arg02
2e8b8     0B 29 02 F6 | 	mov	local02, arg03
2e8bc     13 01 68 FC | 	wrlong	#0, local01
2e8c0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2e8c4     FD 2A 02 F6 | 	mov	local03, result1
2e8c8     00 2A 56 F2 | 	cmps	local03, #0 wc
2e8cc     0B FA 05 C6 |  if_b	mov	result1, #11
2e8d0     3C 05 90 CD |  if_b	jmp	#LR__4700
2e8d4     15 17 02 F6 | 	mov	arg03, local03
2e8d8     02 16 66 F0 | 	shl	arg03, #2
2e8dc     F2 16 02 F1 | 	add	arg03, objptr
2e8e0     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2e8e4     0C FA 05 A6 |  if_e	mov	result1, #12
2e8e8     24 05 90 AD |  if_e	jmp	#LR__4700
2e8ec     13 2D 62 FC | 	wrlong	local04, local01
2e8f0     14 29 E2 F8 | 	getbyte	local02, local02, #0
2e8f4     FE 28 06 F5 | 	and	local02, #254
2e8f8     16 17 CA FA | 	rdbyte	arg03, local04 wz
2e8fc     4C 00 90 AD |  if_e	jmp	#LR__4691
2e900     01 2C 06 F1 | 	add	local04, #1
2e904     16 13 CA FA | 	rdbyte	arg01, local04 wz
2e908     01 2C 86 F1 | 	sub	local04, #1
2e90c     01 FA 05 56 |  if_ne	mov	result1, #1
2e910                 | ' 
2e910                 | ' 	return Stat;
2e910     01 00 00 AF 
2e914     20 E4 05 A1 |  if_e	add	objptr, ##544
2e918     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e91c     01 00 00 AF 
2e920     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e924     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2e928     01 16 CE F7 | 	test	arg03, #1 wz
2e92c     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e930     00 28 0E F2 | 	cmp	local02, #0 wz
2e934     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2e938     04 FA CD 57 |  if_ne	test	result1, #4 wz
2e93c                 | ' 				return FR_WRITE_PROTECTED;
2e93c     0A FA 05 56 |  if_ne	mov	result1, #10
2e940     CC 04 90 5D |  if_ne	jmp	#LR__4700
2e944                 | ' 			}
2e944                 | ' 			return FR_OK;
2e944     00 FA 05 F6 | 	mov	result1, #0
2e948     C4 04 90 FD | 	jmp	#LR__4700
2e94c                 | LR__4690
2e94c                 | LR__4691
2e94c     16 01 48 FC | 	wrbyte	#0, local04
2e950     01 2C 06 F1 | 	add	local04, #1
2e954     16 2B 42 FC | 	wrbyte	local03, local04
2e958     16 13 C2 FA | 	rdbyte	arg01, local04
2e95c     01 2C 86 F1 | 	sub	local04, #1
2e960     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2e964     FD 16 02 F6 | 	mov	arg03, result1
2e968     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2e96c     01 2E CE F7 | 	test	local05, #1 wz
2e970                 | ' 		return FR_NOT_READY;
2e970     03 FA 05 56 |  if_ne	mov	result1, #3
2e974     98 04 90 5D |  if_ne	jmp	#LR__4700
2e978     00 28 0E F2 | 	cmp	local02, #0 wz
2e97c     0B 2F 02 56 |  if_ne	mov	local05, arg03
2e980     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2e984     04 2E CE 57 |  if_ne	test	local05, #4 wz
2e988                 | ' 		return FR_WRITE_PROTECTED;
2e988     0A FA 05 56 |  if_ne	mov	result1, #10
2e98c     80 04 90 5D |  if_ne	jmp	#LR__4700
2e990     16 13 02 F6 | 	mov	arg01, local04
2e994     00 14 06 F6 | 	mov	arg02, #0
2e998     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2e99c     FD 12 02 F6 | 	mov	arg01, result1
2e9a0     04 12 0E F2 | 	cmp	arg01, #4 wz
2e9a4     01 FA 05 A6 |  if_e	mov	result1, #1
2e9a8     64 04 90 AD |  if_e	jmp	#LR__4700
2e9ac     02 12 16 F2 | 	cmp	arg01, #2 wc
2e9b0     0D FA 05 36 |  if_ae	mov	result1, #13
2e9b4     58 04 90 3D |  if_ae	jmp	#LR__4700
2e9b8     30 2C 06 F1 | 	add	local04, #48
2e9bc     16 31 02 FB | 	rdlong	local06, local04
2e9c0     04 2C 06 F1 | 	add	local04, #4
2e9c4     16 13 02 F6 | 	mov	arg01, local04
2e9c8     34 2C 86 F1 | 	sub	local04, #52
2e9cc     0B 12 06 F1 | 	add	arg01, #11
2e9d0                 | ' {
2e9d0                 | ' 
2e9d0                 | ' 	return *((WORD*)ptr);
2e9d0     09 FB E1 FA | 	rdword	result1, arg01
2e9d4     01 00 00 FF 
2e9d8     00 FA 0D F2 | 	cmp	result1, ##512 wz
2e9dc     0D FA 05 56 |  if_ne	mov	result1, #13
2e9e0     2C 04 90 5D |  if_ne	jmp	#LR__4700
2e9e4     34 2C 06 F1 | 	add	local04, #52
2e9e8     16 13 02 F6 | 	mov	arg01, local04
2e9ec     34 2C 86 F1 | 	sub	local04, #52
2e9f0     16 12 06 F1 | 	add	arg01, #22
2e9f4                 | ' {
2e9f4                 | ' 
2e9f4                 | ' 	return *((WORD*)ptr);
2e9f4     09 FB E1 FA | 	rdword	result1, arg01
2e9f8     FD 32 0A F6 | 	mov	local07, result1 wz
2e9fc     18 00 90 5D |  if_ne	jmp	#LR__4692
2ea00     34 2C 06 F1 | 	add	local04, #52
2ea04     16 13 02 F6 | 	mov	arg01, local04
2ea08     34 2C 86 F1 | 	sub	local04, #52
2ea0c     24 12 06 F1 | 	add	arg01, #36
2ea10                 | ' {
2ea10                 | ' 
2ea10                 | ' 	return *((DWORD*)ptr);
2ea10     09 FB 01 FB | 	rdlong	result1, arg01
2ea14     FD 32 02 F6 | 	mov	local07, result1
2ea18                 | LR__4692
2ea18     1C 2C 06 F1 | 	add	local04, #28
2ea1c     16 33 62 FC | 	wrlong	local07, local04
2ea20     28 2C 06 F1 | 	add	local04, #40
2ea24     16 2F C2 FA | 	rdbyte	local05, local04
2ea28     42 2C 86 F1 | 	sub	local04, #66
2ea2c     16 2F 42 FC | 	wrbyte	local05, local04
2ea30     16 2F C2 FA | 	rdbyte	local05, local04
2ea34     02 2C 86 F1 | 	sub	local04, #2
2ea38     01 2E 0E F2 | 	cmp	local05, #1 wz
2ea3c     02 2C 06 51 |  if_ne	add	local04, #2
2ea40     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2ea44     02 2C 86 51 |  if_ne	sub	local04, #2
2ea48     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2ea4c     0D FA 05 56 |  if_ne	mov	result1, #13
2ea50     BC 03 90 5D |  if_ne	jmp	#LR__4700
2ea54     02 2C 06 F1 | 	add	local04, #2
2ea58     16 2F C2 FA | 	rdbyte	local05, local04
2ea5c     17 33 02 FD | 	qmul	local07, local05
2ea60     3F 2C 06 F1 | 	add	local04, #63
2ea64     16 2F C2 FA | 	rdbyte	local05, local04
2ea68     37 2C 86 F1 | 	sub	local04, #55
2ea6c     16 2F 52 FC | 	wrword	local05, local04
2ea70     16 2F EA FA | 	rdword	local05, local04 wz
2ea74     0A 2C 86 F1 | 	sub	local04, #10
2ea78     18 32 62 FD | 	getqx	local07
2ea7c     20 00 90 AD |  if_e	jmp	#LR__4693
2ea80     0A 2C 06 F1 | 	add	local04, #10
2ea84     16 2F E2 FA | 	rdword	local05, local04
2ea88     17 2B 32 F9 | 	getword	local03, local05, #0
2ea8c     0A 2C 86 F1 | 	sub	local04, #10
2ea90     17 2F 32 F9 | 	getword	local05, local05, #0
2ea94     01 2E 86 F1 | 	sub	local05, #1
2ea98     17 2B CA F7 | 	test	local03, local05 wz
2ea9c     08 00 90 AD |  if_e	jmp	#LR__4694
2eaa0                 | LR__4693
2eaa0     0D FA 05 F6 | 	mov	result1, #13
2eaa4     68 03 90 FD | 	jmp	#LR__4700
2eaa8                 | LR__4694
2eaa8     34 2C 06 F1 | 	add	local04, #52
2eaac     16 13 02 F6 | 	mov	arg01, local04
2eab0     11 12 06 F1 | 	add	arg01, #17
2eab4                 | ' {
2eab4                 | ' 
2eab4                 | ' 	return *((WORD*)ptr);
2eab4     09 FB E1 FA | 	rdword	result1, arg01
2eab8     2C 2C 86 F1 | 	sub	local04, #44
2eabc     16 FB 51 FC | 	wrword	result1, local04
2eac0     16 2F E2 FA | 	rdword	local05, local04
2eac4     08 2C 86 F1 | 	sub	local04, #8
2eac8     17 13 52 F6 | 	abs	arg01, local05 wc
2eacc     09 13 42 F8 | 	getnib	arg01, arg01, #0
2ead0     09 13 8A F6 | 	negc	arg01, arg01 wz
2ead4     0D FA 05 56 |  if_ne	mov	result1, #13
2ead8     34 03 90 5D |  if_ne	jmp	#LR__4700
2eadc     34 2C 06 F1 | 	add	local04, #52
2eae0     16 13 02 F6 | 	mov	arg01, local04
2eae4     34 2C 86 F1 | 	sub	local04, #52
2eae8     13 12 06 F1 | 	add	arg01, #19
2eaec                 | ' {
2eaec                 | ' 
2eaec                 | ' 	return *((WORD*)ptr);
2eaec     09 FB E1 FA | 	rdword	result1, arg01
2eaf0     FD 34 0A F6 | 	mov	local08, result1 wz
2eaf4     34 2C 06 A1 |  if_e	add	local04, #52
2eaf8     16 13 02 A6 |  if_e	mov	arg01, local04
2eafc     34 2C 86 A1 |  if_e	sub	local04, #52
2eb00     20 12 06 A1 |  if_e	add	arg01, #32
2eb04                 | ' {
2eb04                 | ' 
2eb04                 | ' 	return *((DWORD*)ptr);
2eb04     09 35 02 AB |  if_e	rdlong	local08, arg01
2eb08     34 2C 06 F1 | 	add	local04, #52
2eb0c     16 13 02 F6 | 	mov	arg01, local04
2eb10     34 2C 86 F1 | 	sub	local04, #52
2eb14     0E 12 06 F1 | 	add	arg01, #14
2eb18                 | ' {
2eb18                 | ' 
2eb18                 | ' 	return *((WORD*)ptr);
2eb18     09 FB E1 FA | 	rdword	result1, arg01
2eb1c     FD 12 02 F6 | 	mov	arg01, result1
2eb20     09 2F 02 F6 | 	mov	local05, arg01
2eb24     0F 2E 4E F7 | 	zerox	local05, #15 wz
2eb28     0D FA 05 A6 |  if_e	mov	result1, #13
2eb2c     E0 02 90 AD |  if_e	jmp	#LR__4700
2eb30     09 37 32 F9 | 	getword	local09, arg01, #0
2eb34     19 37 02 F1 | 	add	local09, local07
2eb38     08 2C 06 F1 | 	add	local04, #8
2eb3c     16 2F E2 FA | 	rdword	local05, local04
2eb40     08 2C 86 F1 | 	sub	local04, #8
2eb44     17 2F 52 F6 | 	abs	local05, local05 wc
2eb48     04 2E 46 F0 | 	shr	local05, #4
2eb4c     17 37 82 F3 | 	sumc	local09, local05
2eb50     1B 35 12 F2 | 	cmp	local08, local09 wc
2eb54     0D FA 05 C6 |  if_b	mov	result1, #13
2eb58     B4 02 90 CD |  if_b	jmp	#LR__4700
2eb5c     1B 35 82 F1 | 	sub	local08, local09
2eb60     0A 2C 06 F1 | 	add	local04, #10
2eb64     16 2F E2 FA | 	rdword	local05, local04
2eb68     17 35 12 FD | 	qdiv	local08, local05
2eb6c     0A 2C 86 F1 | 	sub	local04, #10
2eb70     18 2E 62 FD | 	getqx	local05
2eb74     00 2E 0E F2 | 	cmp	local05, #0 wz
2eb78     0D FA 05 A6 |  if_e	mov	result1, #13
2eb7c     90 02 90 AD |  if_e	jmp	#LR__4700
2eb80     00 38 06 F6 | 	mov	local10, #0
2eb84     FF FF 07 FF 
2eb88     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2eb8c     03 38 06 C6 |  if_b	mov	local10, #3
2eb90     7F 00 00 FF 
2eb94     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2eb98     02 38 06 C6 |  if_b	mov	local10, #2
2eb9c     07 00 00 FF 
2eba0     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2eba4     01 38 06 C6 |  if_b	mov	local10, #1
2eba8     00 38 0E F2 | 	cmp	local10, #0 wz
2ebac     0D FA 05 A6 |  if_e	mov	result1, #13
2ebb0     5C 02 90 AD |  if_e	jmp	#LR__4700
2ebb4     02 2E 06 F1 | 	add	local05, #2
2ebb8     18 2C 06 F1 | 	add	local04, #24
2ebbc     16 2F 62 FC | 	wrlong	local05, local04
2ebc0     08 2C 06 F1 | 	add	local04, #8
2ebc4     16 31 62 FC | 	wrlong	local06, local04
2ebc8     18 2F 02 F6 | 	mov	local05, local06
2ebcc     09 13 32 F9 | 	getword	arg01, arg01, #0
2ebd0     09 2F 02 F1 | 	add	local05, arg01
2ebd4     04 2C 06 F1 | 	add	local04, #4
2ebd8     16 2F 62 FC | 	wrlong	local05, local04
2ebdc     18 2F 02 F6 | 	mov	local05, local06
2ebe0     1B 2F 02 F1 | 	add	local05, local09
2ebe4     08 2C 06 F1 | 	add	local04, #8
2ebe8     16 2F 62 FC | 	wrlong	local05, local04
2ebec     2C 2C 86 F1 | 	sub	local04, #44
2ebf0     03 38 0E F2 | 	cmp	local10, #3 wz
2ebf4     5C 00 90 5D |  if_ne	jmp	#LR__4695
2ebf8     34 2C 06 F1 | 	add	local04, #52
2ebfc     16 13 02 F6 | 	mov	arg01, local04
2ec00     34 2C 86 F1 | 	sub	local04, #52
2ec04     2A 12 06 F1 | 	add	arg01, #42
2ec08                 | ' {
2ec08                 | ' 
2ec08                 | ' 	return *((WORD*)ptr);
2ec08     09 FB E9 FA | 	rdword	result1, arg01 wz
2ec0c     0D FA 05 56 |  if_ne	mov	result1, #13
2ec10     FC 01 90 5D |  if_ne	jmp	#LR__4700
2ec14     08 2C 06 F1 | 	add	local04, #8
2ec18     16 2F EA FA | 	rdword	local05, local04 wz
2ec1c     08 2C 86 F1 | 	sub	local04, #8
2ec20     0D FA 05 56 |  if_ne	mov	result1, #13
2ec24     E8 01 90 5D |  if_ne	jmp	#LR__4700
2ec28     34 2C 06 F1 | 	add	local04, #52
2ec2c     16 13 02 F6 | 	mov	arg01, local04
2ec30     2C 12 06 F1 | 	add	arg01, #44
2ec34                 | ' {
2ec34                 | ' 
2ec34                 | ' 	return *((DWORD*)ptr);
2ec34     09 FB 01 FB | 	rdlong	result1, arg01
2ec38     0C 2C 86 F1 | 	sub	local04, #12
2ec3c     16 FB 61 FC | 	wrlong	result1, local04
2ec40     10 2C 86 F1 | 	sub	local04, #16
2ec44     16 3B 02 FB | 	rdlong	local11, local04
2ec48     18 2C 86 F1 | 	sub	local04, #24
2ec4c     02 3A 66 F0 | 	shl	local11, #2
2ec50     6C 00 90 FD | 	jmp	#LR__4697
2ec54                 | LR__4695
2ec54     08 2C 06 F1 | 	add	local04, #8
2ec58     16 2F EA FA | 	rdword	local05, local04 wz
2ec5c     08 2C 86 F1 | 	sub	local04, #8
2ec60     0D FA 05 A6 |  if_e	mov	result1, #13
2ec64     A8 01 90 AD |  if_e	jmp	#LR__4700
2ec68     24 2C 06 F1 | 	add	local04, #36
2ec6c     16 2F 02 FB | 	rdlong	local05, local04
2ec70     19 2F 02 F1 | 	add	local05, local07
2ec74     04 2C 06 F1 | 	add	local04, #4
2ec78     16 2F 62 FC | 	wrlong	local05, local04
2ec7c     28 2C 86 F1 | 	sub	local04, #40
2ec80     02 38 0E F2 | 	cmp	local10, #2 wz
2ec84     18 2C 06 A1 |  if_e	add	local04, #24
2ec88     16 2F 02 AB |  if_e	rdlong	local05, local04
2ec8c     18 2C 86 A1 |  if_e	sub	local04, #24
2ec90     01 2E 66 A0 |  if_e	shl	local05, #1
2ec94     24 00 90 AD |  if_e	jmp	#LR__4696
2ec98     18 2C 06 F1 | 	add	local04, #24
2ec9c     16 3B 02 FB | 	rdlong	local11, local04
2eca0     1D 2F 02 F6 | 	mov	local05, local11
2eca4     01 2E 66 F0 | 	shl	local05, #1
2eca8     1D 2F 02 F1 | 	add	local05, local11
2ecac     01 2E 46 F0 | 	shr	local05, #1
2ecb0     18 2C 86 F1 | 	sub	local04, #24
2ecb4     01 3A 06 F5 | 	and	local11, #1
2ecb8     1D 2F 02 F1 | 	add	local05, local11
2ecbc                 | LR__4696
2ecbc     17 3B 02 F6 | 	mov	local11, local05
2ecc0                 | LR__4697
2ecc0     FF 3B 06 F1 | 	add	local11, #511
2ecc4     09 3A 46 F0 | 	shr	local11, #9
2ecc8     1C 2C 06 F1 | 	add	local04, #28
2eccc     16 17 02 FB | 	rdlong	arg03, local04
2ecd0     1C 2C 86 F1 | 	sub	local04, #28
2ecd4     1D 17 12 F2 | 	cmp	arg03, local11 wc
2ecd8     0D FA 05 C6 |  if_b	mov	result1, #13
2ecdc     30 01 90 CD |  if_b	jmp	#LR__4700
2ece0     14 2C 06 F1 | 	add	local04, #20
2ece4     FF FF FF FF 
2ece8     16 FF 6B FC | 	wrlong	##-1, local04
2ecec     04 2C 86 F1 | 	sub	local04, #4
2ecf0     FF FF FF FF 
2ecf4     16 FF 6B FC | 	wrlong	##-1, local04
2ecf8     0C 2C 86 F1 | 	sub	local04, #12
2ecfc     16 01 49 FC | 	wrbyte	#128, local04
2ed00     04 2C 86 F1 | 	sub	local04, #4
2ed04     03 38 0E F2 | 	cmp	local10, #3 wz
2ed08     D0 00 90 5D |  if_ne	jmp	#LR__4699
2ed0c     34 2C 06 F1 | 	add	local04, #52
2ed10     16 13 02 F6 | 	mov	arg01, local04
2ed14     34 2C 86 F1 | 	sub	local04, #52
2ed18     30 12 06 F1 | 	add	arg01, #48
2ed1c                 | ' {
2ed1c                 | ' 
2ed1c                 | ' 	return *((WORD*)ptr);
2ed1c     09 FB E1 FA | 	rdword	result1, arg01
2ed20     FD 2E 32 F9 | 	getword	local05, result1, #0
2ed24     01 2E 0E F2 | 	cmp	local05, #1 wz
2ed28     B0 00 90 5D |  if_ne	jmp	#LR__4699
2ed2c     01 30 06 F1 | 	add	local06, #1
2ed30     16 13 02 F6 | 	mov	arg01, local04
2ed34     18 15 02 F6 | 	mov	arg02, local06
2ed38     CC CD BF FD | 	call	#_fatfs_cc_move_window
2ed3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed40     98 00 90 5D |  if_ne	jmp	#LR__4699
2ed44     04 2C 06 F1 | 	add	local04, #4
2ed48     16 01 48 FC | 	wrbyte	#0, local04
2ed4c     30 2C 06 F1 | 	add	local04, #48
2ed50     16 13 02 F6 | 	mov	arg01, local04
2ed54     34 2C 86 F1 | 	sub	local04, #52
2ed58     FE 13 06 F1 | 	add	arg01, #510
2ed5c                 | ' {
2ed5c                 | ' 
2ed5c                 | ' 	return *((WORD*)ptr);
2ed5c     09 FB E1 FA | 	rdword	result1, arg01
2ed60     FD 2E 32 F9 | 	getword	local05, result1, #0
2ed64     55 00 00 FF 
2ed68     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2ed6c     34 2C 06 A1 |  if_e	add	local04, #52
2ed70     16 13 02 A6 |  if_e	mov	arg01, local04
2ed74     34 2C 86 A1 |  if_e	sub	local04, #52
2ed78                 | ' {
2ed78                 | ' 
2ed78                 | ' 	return *((DWORD*)ptr);
2ed78     09 FB 01 AB |  if_e	rdlong	result1, arg01
2ed7c     A9 B0 20 AF 
2ed80     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2ed84     54 00 90 5D |  if_ne	jmp	#LR__4698
2ed88     34 2C 06 F1 | 	add	local04, #52
2ed8c     16 13 02 F6 | 	mov	arg01, local04
2ed90     34 2C 86 F1 | 	sub	local04, #52
2ed94     E4 13 06 F1 | 	add	arg01, #484
2ed98                 | ' {
2ed98                 | ' 
2ed98                 | ' 	return *((DWORD*)ptr);
2ed98     09 FB 01 FB | 	rdlong	result1, arg01
2ed9c     B9 A0 30 FF 
2eda0     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2eda4     34 00 90 5D |  if_ne	jmp	#LR__4698
2eda8     34 2C 06 F1 | 	add	local04, #52
2edac     16 13 02 F6 | 	mov	arg01, local04
2edb0     E8 13 06 F1 | 	add	arg01, #488
2edb4                 | ' {
2edb4                 | ' 
2edb4                 | ' 	return *((DWORD*)ptr);
2edb4     09 FB 01 FB | 	rdlong	result1, arg01
2edb8     20 2C 86 F1 | 	sub	local04, #32
2edbc     16 FB 61 FC | 	wrlong	result1, local04
2edc0     20 2C 06 F1 | 	add	local04, #32
2edc4     16 13 02 F6 | 	mov	arg01, local04
2edc8     EC 13 06 F1 | 	add	arg01, #492
2edcc                 | ' {
2edcc                 | ' 
2edcc                 | ' 	return *((DWORD*)ptr);
2edcc     09 FB 01 FB | 	rdlong	result1, arg01
2edd0     24 2C 86 F1 | 	sub	local04, #36
2edd4     16 FB 61 FC | 	wrlong	result1, local04
2edd8     10 2C 86 F1 | 	sub	local04, #16
2eddc                 | LR__4698
2eddc                 | LR__4699
2eddc     16 39 42 FC | 	wrbyte	local10, local04
2ede0     04 E4 05 F1 | 	add	objptr, #4
2ede4     F2 2E E2 FA | 	rdword	local05, objptr
2ede8     01 2E 06 F1 | 	add	local05, #1
2edec     F2 2E 52 FC | 	wrword	local05, objptr
2edf0     F2 3A E2 FA | 	rdword	local11, objptr
2edf4     06 2C 06 F1 | 	add	local04, #6
2edf8     16 3B 52 FC | 	wrword	local11, local04
2edfc     04 E4 05 F1 | 	add	objptr, #4
2ee00     06 2C 06 F1 | 	add	local04, #6
2ee04     16 E5 61 FC | 	wrlong	objptr, local04
2ee08                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2ee08                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2ee08                 | ' 			{
2ee08                 | ' 
2ee08                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2ee08                 | ' 
2ee08                 | ' 
2ee08                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2ee08                 | ' 
2ee08                 | ' 			}
2ee08                 | ' 		}
2ee08                 | ' 
2ee08                 | ' 
2ee08                 | ' 	}
2ee08                 | ' 
2ee08                 | ' 	fs->fs_type = (BYTE)fmt;
2ee08                 | ' 	fs->id = ++Fsid;
2ee08                 | ' 
2ee08                 | ' 	fs->lfnbuf = LfnBuf;
2ee08                 | ' #line 3567 "ff.c"
2ee08                 | ' 	return FR_OK;
2ee08     00 FA 05 F6 | 	mov	result1, #0
2ee0c     08 E4 85 F1 | 	sub	objptr, #8
2ee10                 | LR__4700
2ee10     A7 F0 03 F6 | 	mov	ptra, fp
2ee14     B2 00 A0 FD | 	call	#popregs_
2ee18                 | _fatfs_cc_mount_volume_ret
2ee18     2D 00 64 FD | 	ret
2ee1c                 | 
2ee1c                 | _fatfs_cc_validate
2ee1c     09 01 0A F6 | 	mov	_var01, arg01 wz
2ee20     09 02 06 F6 | 	mov	_var02, #9
2ee24     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2ee28     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2ee2c     50 00 90 AD |  if_e	jmp	#LR__4710
2ee30     04 00 06 F1 | 	add	_var01, #4
2ee34     00 07 E2 FA | 	rdword	_var04, _var01
2ee38     04 00 86 F1 | 	sub	_var01, #4
2ee3c     00 13 02 FB | 	rdlong	arg01, _var01
2ee40     06 12 06 F1 | 	add	arg01, #6
2ee44     09 FB E1 FA | 	rdword	result1, arg01
2ee48     FD 06 0A F2 | 	cmp	_var04, result1 wz
2ee4c     30 00 90 5D |  if_ne	jmp	#LR__4710
2ee50     00 07 02 FB | 	rdlong	_var04, _var01
2ee54     01 06 06 F1 | 	add	_var04, #1
2ee58     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2ee5c     01 FA 05 56 |  if_ne	mov	result1, #1
2ee60                 | ' 
2ee60                 | ' 	return Stat;
2ee60     01 00 00 AF 
2ee64     20 E4 05 A1 |  if_e	add	objptr, ##544
2ee68     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ee6c     01 00 00 AF 
2ee70     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ee74     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2ee78     01 04 CE F7 | 	test	_var03, #1 wz
2ee7c     00 02 06 A6 |  if_e	mov	_var02, #0
2ee80                 | LR__4710
2ee80     00 02 0E F2 | 	cmp	_var02, #0 wz
2ee84     00 05 02 AB |  if_e	rdlong	_var03, _var01
2ee88     00 04 06 56 |  if_ne	mov	_var03, #0
2ee8c     0A 05 62 FC | 	wrlong	_var03, arg02
2ee90                 | ' 			res = FR_OK;
2ee90                 | ' 		}
2ee90                 | ' 
2ee90                 | ' 	}
2ee90                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2ee90                 | ' 	return res;
2ee90     01 FB 01 F6 | 	mov	result1, _var02
2ee94                 | _fatfs_cc_validate_ret
2ee94     2D 00 64 FD | 	ret
2ee98                 | 
2ee98                 | _fatfs_cc_f_mount
2ee98     01 4A 05 F6 | 	mov	COUNT_, #1
2ee9c     A8 00 A0 FD | 	call	#pushregs_
2eea0     20 F0 07 F1 | 	add	ptra, #32
2eea4     04 4E 05 F1 | 	add	fp, #4
2eea8     A7 12 62 FC | 	wrlong	arg01, fp
2eeac     04 4E 05 F1 | 	add	fp, #4
2eeb0     A7 14 62 FC | 	wrlong	arg02, fp
2eeb4     04 4E 05 F1 | 	add	fp, #4
2eeb8     A7 16 42 FC | 	wrbyte	arg03, fp
2eebc     04 4E 85 F1 | 	sub	fp, #4
2eec0     A7 16 02 FB | 	rdlong	arg03, fp
2eec4     14 4E 05 F1 | 	add	fp, #20
2eec8     A7 16 62 FC | 	wrlong	arg03, fp
2eecc     A7 12 02 F6 | 	mov	arg01, fp
2eed0     1C 4E 85 F1 | 	sub	fp, #28
2eed4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2eed8     14 4E 05 F1 | 	add	fp, #20
2eedc     A7 FA 61 FC | 	wrlong	result1, fp
2eee0     14 4E 85 F1 | 	sub	fp, #20
2eee4     00 FA 55 F2 | 	cmps	result1, #0 wc
2eee8     0B FA 05 C6 |  if_b	mov	result1, #11
2eeec     C0 00 90 CD |  if_b	jmp	#LR__4721
2eef0     14 4E 05 F1 | 	add	fp, #20
2eef4     A7 16 02 FB | 	rdlong	arg03, fp
2eef8     02 16 66 F0 | 	shl	arg03, #2
2eefc     F2 16 02 F1 | 	add	arg03, objptr
2ef00     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2ef04     04 4E 85 F1 | 	sub	fp, #4
2ef08     A7 16 62 FC | 	wrlong	arg03, fp
2ef0c     10 4E 85 F1 | 	sub	fp, #16
2ef10     28 00 90 AD |  if_e	jmp	#LR__4720
2ef14     10 4E 05 F1 | 	add	fp, #16
2ef18     A7 16 02 FB | 	rdlong	arg03, fp
2ef1c     10 4E 85 F1 | 	sub	fp, #16
2ef20     01 16 06 F1 | 	add	arg03, #1
2ef24     0B 13 C2 FA | 	rdbyte	arg01, arg03
2ef28     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2ef2c     10 4E 05 F1 | 	add	fp, #16
2ef30     A7 16 02 FB | 	rdlong	arg03, fp
2ef34     10 4E 85 F1 | 	sub	fp, #16
2ef38     0B 01 48 FC | 	wrbyte	#0, arg03
2ef3c                 | LR__4720
2ef3c     04 4E 05 F1 | 	add	fp, #4
2ef40     A7 26 0A FB | 	rdlong	local01, fp wz
2ef44     04 4E 85 F1 | 	sub	fp, #4
2ef48     04 4E 05 51 |  if_ne	add	fp, #4
2ef4c     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ef50     04 4E 85 51 |  if_ne	sub	fp, #4
2ef54     13 01 48 5C |  if_ne	wrbyte	#0, local01
2ef58     14 4E 05 F1 | 	add	fp, #20
2ef5c     A7 26 02 FB | 	rdlong	local01, fp
2ef60     02 26 66 F0 | 	shl	local01, #2
2ef64     F2 26 02 F1 | 	add	local01, objptr
2ef68     10 4E 85 F1 | 	sub	fp, #16
2ef6c     A7 16 02 FB | 	rdlong	arg03, fp
2ef70     13 17 62 FC | 	wrlong	arg03, local01
2ef74     08 4E 05 F1 | 	add	fp, #8
2ef78     A7 26 CA FA | 	rdbyte	local01, fp wz
2ef7c     0C 4E 85 F1 | 	sub	fp, #12
2ef80     00 FA 05 A6 |  if_e	mov	result1, #0
2ef84     28 00 90 AD |  if_e	jmp	#LR__4721
2ef88     08 4E 05 F1 | 	add	fp, #8
2ef8c     A7 12 02 F6 | 	mov	arg01, fp
2ef90     04 4E 85 F1 | 	sub	fp, #4
2ef94     A7 14 02 F6 | 	mov	arg02, fp
2ef98     04 4E 85 F1 | 	sub	fp, #4
2ef9c     00 16 06 F6 | 	mov	arg03, #0
2efa0     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2efa4     18 4E 05 F1 | 	add	fp, #24
2efa8     A7 FA 61 FC | 	wrlong	result1, fp
2efac                 | ' 
2efac                 | ' 	res = mount_volume(&path, &fs, 0);
2efac                 | ' 	return res ;
2efac     18 4E 85 F1 | 	sub	fp, #24
2efb0                 | LR__4721
2efb0     A7 F0 03 F6 | 	mov	ptra, fp
2efb4     B2 00 A0 FD | 	call	#popregs_
2efb8                 | _fatfs_cc_f_mount_ret
2efb8     2D 00 64 FD | 	ret
2efbc                 | 
2efbc                 | _fatfs_cc_f_open
2efbc     02 4A 05 F6 | 	mov	COUNT_, #2
2efc0     A8 00 A0 FD | 	call	#pushregs_
2efc4     60 F0 07 F1 | 	add	ptra, #96
2efc8     04 4E 05 F1 | 	add	fp, #4
2efcc     A7 12 62 FC | 	wrlong	arg01, fp
2efd0     04 4E 05 F1 | 	add	fp, #4
2efd4     A7 14 62 FC | 	wrlong	arg02, fp
2efd8     04 4E 05 F1 | 	add	fp, #4
2efdc     A7 16 42 FC | 	wrbyte	arg03, fp
2efe0     08 4E 85 F1 | 	sub	fp, #8
2efe4     A7 18 0A FB | 	rdlong	arg04, fp wz
2efe8     04 4E 85 F1 | 	sub	fp, #4
2efec     09 FA 05 A6 |  if_e	mov	result1, #9
2eff0     98 06 90 AD |  if_e	jmp	#LR__4747
2eff4     0C 4E 05 F1 | 	add	fp, #12
2eff8     A7 18 C2 FA | 	rdbyte	arg04, fp
2effc     3F 18 06 F5 | 	and	arg04, #63
2f000     A7 18 42 FC | 	wrbyte	arg04, fp
2f004     04 4E 85 F1 | 	sub	fp, #4
2f008     A7 12 02 F6 | 	mov	arg01, fp
2f00c     3C 4E 05 F1 | 	add	fp, #60
2f010     A7 14 02 F6 | 	mov	arg02, fp
2f014     38 4E 85 F1 | 	sub	fp, #56
2f018     A7 16 C2 FA | 	rdbyte	arg03, fp
2f01c     0C 4E 85 F1 | 	sub	fp, #12
2f020     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2f024     10 4E 05 F1 | 	add	fp, #16
2f028     A7 FA 61 FC | 	wrlong	result1, fp
2f02c     10 4E 85 F1 | 	sub	fp, #16
2f030     00 FA 0D F2 | 	cmp	result1, #0 wz
2f034     2C 06 90 5D |  if_ne	jmp	#LR__4746
2f038     44 4E 05 F1 | 	add	fp, #68
2f03c     A7 18 02 FB | 	rdlong	arg04, fp
2f040     30 4E 85 F1 | 	sub	fp, #48
2f044     A7 18 62 FC | 	wrlong	arg04, fp
2f048     A7 12 02 F6 | 	mov	arg01, fp
2f04c     0C 4E 85 F1 | 	sub	fp, #12
2f050     A7 26 02 FB | 	rdlong	local01, fp
2f054     08 4E 85 F1 | 	sub	fp, #8
2f058     13 15 02 F6 | 	mov	arg02, local01
2f05c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2f060     10 4E 05 F1 | 	add	fp, #16
2f064     A7 FA 61 FC | 	wrlong	result1, fp
2f068     10 4E 85 F1 | 	sub	fp, #16
2f06c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f070     1C 00 90 5D |  if_ne	jmp	#LR__4730
2f074     3F 4E 05 F1 | 	add	fp, #63
2f078     A7 18 C2 FA | 	rdbyte	arg04, fp
2f07c     3F 4E 85 F1 | 	sub	fp, #63
2f080     80 18 CE F7 | 	test	arg04, #128 wz
2f084     10 4E 05 51 |  if_ne	add	fp, #16
2f088     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f08c     10 4E 85 51 |  if_ne	sub	fp, #16
2f090                 | LR__4730
2f090     0C 4E 05 F1 | 	add	fp, #12
2f094     A7 18 C2 FA | 	rdbyte	arg04, fp
2f098     0C 4E 85 F1 | 	sub	fp, #12
2f09c     1C 18 CE F7 | 	test	arg04, #28 wz
2f0a0     F0 01 90 AD |  if_e	jmp	#LR__4735
2f0a4     10 4E 05 F1 | 	add	fp, #16
2f0a8     A7 26 0A FB | 	rdlong	local01, fp wz
2f0ac     10 4E 85 F1 | 	sub	fp, #16
2f0b0     48 00 90 AD |  if_e	jmp	#LR__4732
2f0b4     10 4E 05 F1 | 	add	fp, #16
2f0b8     A7 18 02 FB | 	rdlong	arg04, fp
2f0bc     10 4E 85 F1 | 	sub	fp, #16
2f0c0     04 18 0E F2 | 	cmp	arg04, #4 wz
2f0c4     1C 00 90 5D |  if_ne	jmp	#LR__4731
2f0c8     14 4E 05 F1 | 	add	fp, #20
2f0cc     A7 12 02 F6 | 	mov	arg01, fp
2f0d0     14 4E 85 F1 | 	sub	fp, #20
2f0d4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2f0d8     10 4E 05 F1 | 	add	fp, #16
2f0dc     A7 FA 61 FC | 	wrlong	result1, fp
2f0e0     10 4E 85 F1 | 	sub	fp, #16
2f0e4                 | LR__4731
2f0e4     0C 4E 05 F1 | 	add	fp, #12
2f0e8     A7 26 C2 FA | 	rdbyte	local01, fp
2f0ec     08 26 46 F5 | 	or	local01, #8
2f0f0     A7 26 42 FC | 	wrbyte	local01, fp
2f0f4     0C 4E 85 F1 | 	sub	fp, #12
2f0f8     3C 00 90 FD | 	jmp	#LR__4734
2f0fc                 | LR__4732
2f0fc     1A 4E 05 F1 | 	add	fp, #26
2f100     A7 26 C2 FA | 	rdbyte	local01, fp
2f104     1A 4E 85 F1 | 	sub	fp, #26
2f108     11 26 CE F7 | 	test	local01, #17 wz
2f10c     10 4E 05 51 |  if_ne	add	fp, #16
2f110     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2f114     10 4E 85 51 |  if_ne	sub	fp, #16
2f118     1C 00 90 5D |  if_ne	jmp	#LR__4733
2f11c     0C 4E 05 F1 | 	add	fp, #12
2f120     A7 26 C2 FA | 	rdbyte	local01, fp
2f124     0C 4E 85 F1 | 	sub	fp, #12
2f128     04 26 CE F7 | 	test	local01, #4 wz
2f12c     10 4E 05 51 |  if_ne	add	fp, #16
2f130     A7 10 68 5C |  if_ne	wrlong	#8, fp
2f134     10 4E 85 51 |  if_ne	sub	fp, #16
2f138                 | LR__4733
2f138                 | LR__4734
2f138     10 4E 05 F1 | 	add	fp, #16
2f13c     A7 26 0A FB | 	rdlong	local01, fp wz
2f140     10 4E 85 F1 | 	sub	fp, #16
2f144     A8 01 90 5D |  if_ne	jmp	#LR__4738
2f148     0C 4E 05 F1 | 	add	fp, #12
2f14c     A7 26 C2 FA | 	rdbyte	local01, fp
2f150     0C 4E 85 F1 | 	sub	fp, #12
2f154     08 26 CE F7 | 	test	local01, #8 wz
2f158     94 01 90 AD |  if_e	jmp	#LR__4738
2f15c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2f160     54 4E 05 F1 | 	add	fp, #84
2f164     A7 FA 61 FC | 	wrlong	result1, fp
2f168     24 4E 85 F1 | 	sub	fp, #36
2f16c     A7 12 02 FB | 	rdlong	arg01, fp
2f170     0E 12 06 F1 | 	add	arg01, #14
2f174     09 FB 61 FC | 	wrlong	result1, arg01
2f178     A7 12 02 FB | 	rdlong	arg01, fp
2f17c     16 12 06 F1 | 	add	arg01, #22
2f180     24 4E 05 F1 | 	add	fp, #36
2f184     A7 14 02 FB | 	rdlong	arg02, fp
2f188     09 15 62 FC | 	wrlong	arg02, arg01
2f18c     10 4E 85 F1 | 	sub	fp, #16
2f190     A7 12 02 FB | 	rdlong	arg01, fp
2f194     14 4E 85 F1 | 	sub	fp, #20
2f198     A7 14 02 FB | 	rdlong	arg02, fp
2f19c     30 4E 85 F1 | 	sub	fp, #48
2f1a0     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2f1a4     48 4E 05 F1 | 	add	fp, #72
2f1a8     A7 FA 61 FC | 	wrlong	result1, fp
2f1ac     18 4E 85 F1 | 	sub	fp, #24
2f1b0     A7 26 02 FB | 	rdlong	local01, fp
2f1b4     0B 26 06 F1 | 	add	local01, #11
2f1b8     13 41 48 FC | 	wrbyte	#32, local01
2f1bc     14 4E 05 F1 | 	add	fp, #20
2f1c0     A7 12 02 FB | 	rdlong	arg01, fp
2f1c4     14 4E 85 F1 | 	sub	fp, #20
2f1c8     A7 14 02 FB | 	rdlong	arg02, fp
2f1cc     30 4E 85 F1 | 	sub	fp, #48
2f1d0     00 16 06 F6 | 	mov	arg03, #0
2f1d4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2f1d8     30 4E 05 F1 | 	add	fp, #48
2f1dc     A7 12 02 FB | 	rdlong	arg01, fp
2f1e0     1C 12 06 F1 | 	add	arg01, #28
2f1e4     09 01 68 FC | 	wrlong	#0, arg01
2f1e8     14 4E 05 F1 | 	add	fp, #20
2f1ec     A7 26 02 FB | 	rdlong	local01, fp
2f1f0     03 26 06 F1 | 	add	local01, #3
2f1f4     13 03 48 FC | 	wrbyte	#1, local01
2f1f8     04 4E 05 F1 | 	add	fp, #4
2f1fc     A7 26 0A FB | 	rdlong	local01, fp wz
2f200     48 4E 85 F1 | 	sub	fp, #72
2f204     E8 00 90 AD |  if_e	jmp	#LR__4738
2f208     44 4E 05 F1 | 	add	fp, #68
2f20c     A7 26 02 FB | 	rdlong	local01, fp
2f210     30 26 06 F1 | 	add	local01, #48
2f214     13 27 02 FB | 	rdlong	local01, local01
2f218     14 4E 05 F1 | 	add	fp, #20
2f21c     A7 26 62 FC | 	wrlong	local01, fp
2f220     44 4E 85 F1 | 	sub	fp, #68
2f224     A7 12 02 F6 | 	mov	arg01, fp
2f228     34 4E 05 F1 | 	add	fp, #52
2f22c     A7 14 02 FB | 	rdlong	arg02, fp
2f230     48 4E 85 F1 | 	sub	fp, #72
2f234     00 16 06 F6 | 	mov	arg03, #0
2f238     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2f23c     10 4E 05 F1 | 	add	fp, #16
2f240     A7 FA 61 FC | 	wrlong	result1, fp
2f244     10 4E 85 F1 | 	sub	fp, #16
2f248     00 FA 0D F2 | 	cmp	result1, #0 wz
2f24c     A0 00 90 5D |  if_ne	jmp	#LR__4738
2f250     44 4E 05 F1 | 	add	fp, #68
2f254     A7 12 02 FB | 	rdlong	arg01, fp
2f258     14 4E 05 F1 | 	add	fp, #20
2f25c     A7 14 02 FB | 	rdlong	arg02, fp
2f260     58 4E 85 F1 | 	sub	fp, #88
2f264     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2f268     10 4E 05 F1 | 	add	fp, #16
2f26c     A7 FA 61 FC | 	wrlong	result1, fp
2f270     34 4E 05 F1 | 	add	fp, #52
2f274     A7 18 02 FB | 	rdlong	arg04, fp
2f278     04 4E 05 F1 | 	add	fp, #4
2f27c     A7 26 02 FB | 	rdlong	local01, fp
2f280     48 4E 85 F1 | 	sub	fp, #72
2f284     01 26 86 F1 | 	sub	local01, #1
2f288     10 18 06 F1 | 	add	arg04, #16
2f28c     0C 27 62 FC | 	wrlong	local01, arg04
2f290     5C 00 90 FD | 	jmp	#LR__4738
2f294                 | LR__4735
2f294     10 4E 05 F1 | 	add	fp, #16
2f298     A7 18 0A FB | 	rdlong	arg04, fp wz
2f29c     10 4E 85 F1 | 	sub	fp, #16
2f2a0     4C 00 90 5D |  if_ne	jmp	#LR__4737
2f2a4     1A 4E 05 F1 | 	add	fp, #26
2f2a8     A7 18 C2 FA | 	rdbyte	arg04, fp
2f2ac     1A 4E 85 F1 | 	sub	fp, #26
2f2b0     10 18 CE F7 | 	test	arg04, #16 wz
2f2b4     10 4E 05 51 |  if_ne	add	fp, #16
2f2b8     A7 08 68 5C |  if_ne	wrlong	#4, fp
2f2bc     10 4E 85 51 |  if_ne	sub	fp, #16
2f2c0     2C 00 90 5D |  if_ne	jmp	#LR__4736
2f2c4     0C 4E 05 F1 | 	add	fp, #12
2f2c8     A7 18 C2 FA | 	rdbyte	arg04, fp
2f2cc     0C 4E 85 F1 | 	sub	fp, #12
2f2d0     02 18 CE F7 | 	test	arg04, #2 wz
2f2d4     1A 4E 05 51 |  if_ne	add	fp, #26
2f2d8     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
2f2dc     1A 4E 85 51 |  if_ne	sub	fp, #26
2f2e0     01 26 CE 57 |  if_ne	test	local01, #1 wz
2f2e4     10 4E 05 51 |  if_ne	add	fp, #16
2f2e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2f2ec     10 4E 85 51 |  if_ne	sub	fp, #16
2f2f0                 | LR__4736
2f2f0                 | LR__4737
2f2f0                 | LR__4738
2f2f0     10 4E 05 F1 | 	add	fp, #16
2f2f4     A7 26 0A FB | 	rdlong	local01, fp wz
2f2f8     10 4E 85 F1 | 	sub	fp, #16
2f2fc     60 00 90 5D |  if_ne	jmp	#LR__4739
2f300     0C 4E 05 F1 | 	add	fp, #12
2f304     A7 28 C2 FA | 	rdbyte	local02, fp
2f308     0C 4E 85 F1 | 	sub	fp, #12
2f30c     08 28 CE F7 | 	test	local02, #8 wz
2f310     0C 4E 05 51 |  if_ne	add	fp, #12
2f314     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
2f318     40 28 46 55 |  if_ne	or	local02, #64
2f31c     A7 28 42 5C |  if_ne	wrbyte	local02, fp
2f320     0C 4E 85 51 |  if_ne	sub	fp, #12
2f324     04 4E 05 F1 | 	add	fp, #4
2f328     A7 28 02 FB | 	rdlong	local02, fp
2f32c     40 4E 05 F1 | 	add	fp, #64
2f330     A7 26 02 FB | 	rdlong	local01, fp
2f334     30 26 06 F1 | 	add	local01, #48
2f338     13 27 02 FB | 	rdlong	local01, local01
2f33c     20 28 06 F1 | 	add	local02, #32
2f340     14 27 62 FC | 	wrlong	local01, local02
2f344     40 4E 85 F1 | 	sub	fp, #64
2f348     A7 28 02 FB | 	rdlong	local02, fp
2f34c     2C 4E 05 F1 | 	add	fp, #44
2f350     A7 26 02 FB | 	rdlong	local01, fp
2f354     30 4E 85 F1 | 	sub	fp, #48
2f358     24 28 06 F1 | 	add	local02, #36
2f35c     14 27 62 FC | 	wrlong	local01, local02
2f360                 | LR__4739
2f360     10 4E 05 F1 | 	add	fp, #16
2f364     A7 28 0A FB | 	rdlong	local02, fp wz
2f368     10 4E 85 F1 | 	sub	fp, #16
2f36c     F4 02 90 5D |  if_ne	jmp	#LR__4745
2f370     04 4E 05 F1 | 	add	fp, #4
2f374     A7 28 02 FB | 	rdlong	local02, fp
2f378     40 4E 05 F1 | 	add	fp, #64
2f37c     A7 12 02 FB | 	rdlong	arg01, fp
2f380     14 4E 85 F1 | 	sub	fp, #20
2f384     A7 14 02 FB | 	rdlong	arg02, fp
2f388     30 4E 85 F1 | 	sub	fp, #48
2f38c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2f390     08 28 06 F1 | 	add	local02, #8
2f394     14 FB 61 FC | 	wrlong	result1, local02
2f398     04 4E 05 F1 | 	add	fp, #4
2f39c     A7 28 02 FB | 	rdlong	local02, fp
2f3a0     2C 4E 05 F1 | 	add	fp, #44
2f3a4     A7 12 02 FB | 	rdlong	arg01, fp
2f3a8     1C 12 06 F1 | 	add	arg01, #28
2f3ac                 | ' {
2f3ac                 | ' 
2f3ac                 | ' 	return *((DWORD*)ptr);
2f3ac     09 FB 01 FB | 	rdlong	result1, arg01
2f3b0     0C 28 06 F1 | 	add	local02, #12
2f3b4     14 FB 61 FC | 	wrlong	result1, local02
2f3b8     2C 4E 85 F1 | 	sub	fp, #44
2f3bc     A7 28 02 FB | 	rdlong	local02, fp
2f3c0     40 4E 05 F1 | 	add	fp, #64
2f3c4     A7 26 02 FB | 	rdlong	local01, fp
2f3c8     14 27 62 FC | 	wrlong	local01, local02
2f3cc     40 4E 85 F1 | 	sub	fp, #64
2f3d0     A7 28 02 FB | 	rdlong	local02, fp
2f3d4     40 4E 05 F1 | 	add	fp, #64
2f3d8     A7 26 02 FB | 	rdlong	local01, fp
2f3dc     06 26 06 F1 | 	add	local01, #6
2f3e0     13 27 E2 FA | 	rdword	local01, local01
2f3e4     04 28 06 F1 | 	add	local02, #4
2f3e8     14 27 52 FC | 	wrword	local01, local02
2f3ec     40 4E 85 F1 | 	sub	fp, #64
2f3f0     A7 28 02 FB | 	rdlong	local02, fp
2f3f4     08 4E 05 F1 | 	add	fp, #8
2f3f8     A7 26 C2 FA | 	rdbyte	local01, fp
2f3fc     10 28 06 F1 | 	add	local02, #16
2f400     14 27 42 FC | 	wrbyte	local01, local02
2f404     08 4E 85 F1 | 	sub	fp, #8
2f408     A7 28 02 FB | 	rdlong	local02, fp
2f40c     11 28 06 F1 | 	add	local02, #17
2f410     14 01 48 FC | 	wrbyte	#0, local02
2f414     A7 28 02 FB | 	rdlong	local02, fp
2f418     1C 28 06 F1 | 	add	local02, #28
2f41c     14 01 68 FC | 	wrlong	#0, local02
2f420     A7 28 02 FB | 	rdlong	local02, fp
2f424     14 28 06 F1 | 	add	local02, #20
2f428     14 01 68 FC | 	wrlong	#0, local02
2f42c     A7 12 02 FB | 	rdlong	arg01, fp
2f430     04 4E 85 F1 | 	sub	fp, #4
2f434     28 12 06 F1 | 	add	arg01, #40
2f438     00 14 06 F6 | 	mov	arg02, #0
2f43c     09 16 C6 F9 | 	decod	arg03, #9
2f440     98 00 A0 FD | 	call	#\builtin_bytefill_
2f444     0C 4E 05 F1 | 	add	fp, #12
2f448     A7 28 C2 FA | 	rdbyte	local02, fp
2f44c     0C 4E 85 F1 | 	sub	fp, #12
2f450     20 28 CE F7 | 	test	local02, #32 wz
2f454     0C 02 90 AD |  if_e	jmp	#LR__4744
2f458     04 4E 05 F1 | 	add	fp, #4
2f45c     A7 26 02 FB | 	rdlong	local01, fp
2f460     04 4E 85 F1 | 	sub	fp, #4
2f464     0C 26 06 F1 | 	add	local01, #12
2f468     13 29 02 FB | 	rdlong	local02, local01
2f46c     01 28 16 F2 | 	cmp	local02, #1 wc
2f470     F0 01 90 CD |  if_b	jmp	#LR__4744
2f474     04 4E 05 F1 | 	add	fp, #4
2f478     A7 26 02 FB | 	rdlong	local01, fp
2f47c     13 29 02 F6 | 	mov	local02, local01
2f480     0C 26 06 F1 | 	add	local01, #12
2f484     13 27 02 FB | 	rdlong	local01, local01
2f488     14 28 06 F1 | 	add	local02, #20
2f48c     14 27 62 FC | 	wrlong	local01, local02
2f490     40 4E 05 F1 | 	add	fp, #64
2f494     A7 28 02 FB | 	rdlong	local02, fp
2f498     0A 28 06 F1 | 	add	local02, #10
2f49c     14 29 E2 FA | 	rdword	local02, local02
2f4a0     09 28 66 F0 | 	shl	local02, #9
2f4a4     08 4E 05 F1 | 	add	fp, #8
2f4a8     A7 28 62 FC | 	wrlong	local02, fp
2f4ac     48 4E 85 F1 | 	sub	fp, #72
2f4b0     A7 28 02 FB | 	rdlong	local02, fp
2f4b4     08 28 06 F1 | 	add	local02, #8
2f4b8     14 27 02 FB | 	rdlong	local01, local02
2f4bc     4C 4E 05 F1 | 	add	fp, #76
2f4c0     A7 26 62 FC | 	wrlong	local01, fp
2f4c4                 | ' 				fp->fptr = fp->obj.objsize;
2f4c4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f4c4                 | ' 				clst = fp->obj.sclust;
2f4c4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2f4c4     4C 4E 85 F1 | 	sub	fp, #76
2f4c8     A7 28 02 FB | 	rdlong	local02, fp
2f4cc     0C 28 06 F1 | 	add	local02, #12
2f4d0     14 27 02 FB | 	rdlong	local01, local02
2f4d4     58 4E 05 F1 | 	add	fp, #88
2f4d8     A7 26 62 FC | 	wrlong	local01, fp
2f4dc     5C 4E 85 F1 | 	sub	fp, #92
2f4e0                 | LR__4740
2f4e0     10 4E 05 F1 | 	add	fp, #16
2f4e4     A7 28 0A FB | 	rdlong	local02, fp wz
2f4e8     10 4E 85 F1 | 	sub	fp, #16
2f4ec     94 00 90 5D |  if_ne	jmp	#LR__4741
2f4f0     5C 4E 05 F1 | 	add	fp, #92
2f4f4     A7 28 02 FB | 	rdlong	local02, fp
2f4f8     10 4E 85 F1 | 	sub	fp, #16
2f4fc     A7 26 02 FB | 	rdlong	local01, fp
2f500     4C 4E 85 F1 | 	sub	fp, #76
2f504     13 29 1A F2 | 	cmp	local02, local01 wcz
2f508     78 00 90 ED |  if_be	jmp	#LR__4741
2f50c     04 4E 05 F1 | 	add	fp, #4
2f510     A7 12 02 FB | 	rdlong	arg01, fp
2f514     4C 4E 05 F1 | 	add	fp, #76
2f518     A7 14 02 FB | 	rdlong	arg02, fp
2f51c     50 4E 85 F1 | 	sub	fp, #80
2f520     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2f524     50 4E 05 F1 | 	add	fp, #80
2f528     A7 FA 61 FC | 	wrlong	result1, fp
2f52c     50 4E 85 F1 | 	sub	fp, #80
2f530     02 FA 15 F2 | 	cmp	result1, #2 wc
2f534     10 4E 05 C1 |  if_b	add	fp, #16
2f538     A7 04 68 CC |  if_b	wrlong	#2, fp
2f53c     10 4E 85 C1 |  if_b	sub	fp, #16
2f540     50 4E 05 F1 | 	add	fp, #80
2f544     A7 28 02 FB | 	rdlong	local02, fp
2f548     50 4E 85 F1 | 	sub	fp, #80
2f54c     FF FF 7F FF 
2f550     FF 29 0E F2 | 	cmp	local02, ##-1 wz
2f554     10 4E 05 A1 |  if_e	add	fp, #16
2f558     A7 02 68 AC |  if_e	wrlong	#1, fp
2f55c     10 4E 85 A1 |  if_e	sub	fp, #16
2f560     5C 4E 05 F1 | 	add	fp, #92
2f564     A7 28 02 FB | 	rdlong	local02, fp
2f568     10 4E 85 F1 | 	sub	fp, #16
2f56c     A7 26 02 FB | 	rdlong	local01, fp
2f570     13 29 82 F1 | 	sub	local02, local01
2f574     10 4E 05 F1 | 	add	fp, #16
2f578     A7 28 62 FC | 	wrlong	local02, fp
2f57c     5C 4E 85 F1 | 	sub	fp, #92
2f580     5C FF 9F FD | 	jmp	#LR__4740
2f584                 | LR__4741
2f584     04 4E 05 F1 | 	add	fp, #4
2f588     A7 28 02 FB | 	rdlong	local02, fp
2f58c     4C 4E 05 F1 | 	add	fp, #76
2f590     A7 26 02 FB | 	rdlong	local01, fp
2f594     18 28 06 F1 | 	add	local02, #24
2f598     14 27 62 FC | 	wrlong	local01, local02
2f59c     40 4E 85 F1 | 	sub	fp, #64
2f5a0     A7 28 0A FB | 	rdlong	local02, fp wz
2f5a4     10 4E 85 F1 | 	sub	fp, #16
2f5a8     B8 00 90 5D |  if_ne	jmp	#LR__4743
2f5ac     5C 4E 05 F1 | 	add	fp, #92
2f5b0     A7 26 02 FB | 	rdlong	local01, fp
2f5b4     5C 4E 85 F1 | 	sub	fp, #92
2f5b8     FF 27 CE F7 | 	test	local01, #511 wz
2f5bc     A4 00 90 AD |  if_e	jmp	#LR__4743
2f5c0     44 4E 05 F1 | 	add	fp, #68
2f5c4     A7 12 02 FB | 	rdlong	arg01, fp
2f5c8     0C 4E 05 F1 | 	add	fp, #12
2f5cc     A7 14 02 FB | 	rdlong	arg02, fp
2f5d0     50 4E 85 F1 | 	sub	fp, #80
2f5d4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2f5d8     58 4E 05 F1 | 	add	fp, #88
2f5dc     A7 FA 61 FC | 	wrlong	result1, fp
2f5e0     00 FA 4D F2 | 	cmps	result1, #0 wz
2f5e4     58 4E 85 F1 | 	sub	fp, #88
2f5e8     10 4E 05 A1 |  if_e	add	fp, #16
2f5ec     A7 04 68 AC |  if_e	wrlong	#2, fp
2f5f0     10 4E 85 A1 |  if_e	sub	fp, #16
2f5f4     6C 00 90 AD |  if_e	jmp	#LR__4742
2f5f8     04 4E 05 F1 | 	add	fp, #4
2f5fc     A7 28 02 FB | 	rdlong	local02, fp
2f600     54 4E 05 F1 | 	add	fp, #84
2f604     A7 26 02 FB | 	rdlong	local01, fp
2f608     04 4E 05 F1 | 	add	fp, #4
2f60c     A7 18 02 FB | 	rdlong	arg04, fp
2f610     09 18 46 F0 | 	shr	arg04, #9
2f614     0C 27 02 F1 | 	add	local01, arg04
2f618     1C 28 06 F1 | 	add	local02, #28
2f61c     14 27 62 FC | 	wrlong	local01, local02
2f620     18 4E 85 F1 | 	sub	fp, #24
2f624     A7 28 02 FB | 	rdlong	local02, fp
2f628     01 28 06 F1 | 	add	local02, #1
2f62c     14 13 C2 FA | 	rdbyte	arg01, local02
2f630     40 4E 85 F1 | 	sub	fp, #64
2f634     A7 28 02 FB | 	rdlong	local02, fp
2f638     14 15 02 F6 | 	mov	arg02, local02
2f63c     28 14 06 F1 | 	add	arg02, #40
2f640     04 4E 85 F1 | 	sub	fp, #4
2f644     1C 28 06 F1 | 	add	local02, #28
2f648     14 17 02 FB | 	rdlong	arg03, local02
2f64c     01 18 06 F6 | 	mov	arg04, #1
2f650     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2f654     00 FA 0D F2 | 	cmp	result1, #0 wz
2f658     10 4E 05 51 |  if_ne	add	fp, #16
2f65c     A7 02 68 5C |  if_ne	wrlong	#1, fp
2f660     10 4E 85 51 |  if_ne	sub	fp, #16
2f664                 | LR__4742
2f664                 | LR__4743
2f664                 | LR__4744
2f664                 | LR__4745
2f664                 | LR__4746
2f664     10 4E 05 F1 | 	add	fp, #16
2f668     A7 28 0A FB | 	rdlong	local02, fp wz
2f66c     10 4E 85 F1 | 	sub	fp, #16
2f670     04 4E 05 51 |  if_ne	add	fp, #4
2f674     A7 28 02 5B |  if_ne	rdlong	local02, fp
2f678     04 4E 85 51 |  if_ne	sub	fp, #4
2f67c     14 01 68 5C |  if_ne	wrlong	#0, local02
2f680                 | ' 
2f680                 | ' 	return res ;
2f680     10 4E 05 F1 | 	add	fp, #16
2f684     A7 FA 01 FB | 	rdlong	result1, fp
2f688     10 4E 85 F1 | 	sub	fp, #16
2f68c                 | LR__4747
2f68c     A7 F0 03 F6 | 	mov	ptra, fp
2f690     B2 00 A0 FD | 	call	#popregs_
2f694                 | _fatfs_cc_f_open_ret
2f694     2D 00 64 FD | 	ret
2f698                 | 
2f698                 | _fatfs_cc_f_read
2f698     0E 4A 05 F6 | 	mov	COUNT_, #14
2f69c     A8 00 A0 FD | 	call	#pushregs_
2f6a0     38 F0 07 F1 | 	add	ptra, #56
2f6a4     04 4E 05 F1 | 	add	fp, #4
2f6a8     A7 12 62 FC | 	wrlong	arg01, fp
2f6ac     04 4E 05 F1 | 	add	fp, #4
2f6b0     A7 14 62 FC | 	wrlong	arg02, fp
2f6b4     04 4E 05 F1 | 	add	fp, #4
2f6b8     A7 16 62 FC | 	wrlong	arg03, fp
2f6bc     04 4E 05 F1 | 	add	fp, #4
2f6c0     A7 18 62 FC | 	wrlong	arg04, fp
2f6c4     08 4E 85 F1 | 	sub	fp, #8
2f6c8     A7 FA 01 FB | 	rdlong	result1, fp
2f6cc     2C 4E 05 F1 | 	add	fp, #44
2f6d0     A7 FA 61 FC | 	wrlong	result1, fp
2f6d4     24 4E 85 F1 | 	sub	fp, #36
2f6d8     A7 FA 01 FB | 	rdlong	result1, fp
2f6dc     FD 00 68 FC | 	wrlong	#0, result1
2f6e0     0C 4E 85 F1 | 	sub	fp, #12
2f6e4     A7 12 02 FB | 	rdlong	arg01, fp
2f6e8     14 4E 05 F1 | 	add	fp, #20
2f6ec     A7 14 02 F6 | 	mov	arg02, fp
2f6f0     18 4E 85 F1 | 	sub	fp, #24
2f6f4     24 F7 BF FD | 	call	#_fatfs_cc_validate
2f6f8     14 4E 05 F1 | 	add	fp, #20
2f6fc     A7 FA 61 FC | 	wrlong	result1, fp
2f700     00 FA 4D F2 | 	cmps	result1, #0 wz
2f704     14 4E 85 F1 | 	sub	fp, #20
2f708     20 00 90 5D |  if_ne	jmp	#LR__4750
2f70c     04 4E 05 F1 | 	add	fp, #4
2f710     A7 14 02 FB | 	rdlong	arg02, fp
2f714     11 14 06 F1 | 	add	arg02, #17
2f718     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2f71c     10 4E 05 F1 | 	add	fp, #16
2f720     A7 14 62 FC | 	wrlong	arg02, fp
2f724     14 4E 85 F1 | 	sub	fp, #20
2f728     10 00 90 AD |  if_e	jmp	#LR__4751
2f72c                 | LR__4750
2f72c     14 4E 05 F1 | 	add	fp, #20
2f730     A7 FA 01 FB | 	rdlong	result1, fp
2f734     14 4E 85 F1 | 	sub	fp, #20
2f738     EC 05 90 FD | 	jmp	#LR__4770
2f73c                 | LR__4751
2f73c     04 4E 05 F1 | 	add	fp, #4
2f740     A7 18 02 FB | 	rdlong	arg04, fp
2f744     04 4E 85 F1 | 	sub	fp, #4
2f748     10 18 06 F1 | 	add	arg04, #16
2f74c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f750     01 18 CE F7 | 	test	arg04, #1 wz
2f754     07 FA 05 A6 |  if_e	mov	result1, #7
2f758     CC 05 90 AD |  if_e	jmp	#LR__4770
2f75c     04 4E 05 F1 | 	add	fp, #4
2f760     A7 26 02 FB | 	rdlong	local01, fp
2f764     13 29 02 F6 | 	mov	local02, local01
2f768     0C 28 06 F1 | 	add	local02, #12
2f76c     14 2B 02 FB | 	rdlong	local03, local02
2f770     14 26 06 F1 | 	add	local01, #20
2f774     13 27 02 FB | 	rdlong	local01, local01
2f778     13 2B 82 F1 | 	sub	local03, local01
2f77c     20 4E 05 F1 | 	add	fp, #32
2f780     A7 2A 62 FC | 	wrlong	local03, fp
2f784     18 4E 85 F1 | 	sub	fp, #24
2f788     A7 2C 02 FB | 	rdlong	local04, fp
2f78c     0C 4E 85 F1 | 	sub	fp, #12
2f790     15 2D 1A F2 | 	cmp	local04, local03 wcz
2f794     24 4E 05 11 |  if_a	add	fp, #36
2f798     A7 2C 02 1B |  if_a	rdlong	local04, fp
2f79c     18 4E 85 11 |  if_a	sub	fp, #24
2f7a0     A7 2C 62 1C |  if_a	wrlong	local04, fp
2f7a4     0C 4E 85 11 |  if_a	sub	fp, #12
2f7a8                 | ' 
2f7a8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2f7a8                 | LR__4752
2f7a8     0C 4E 05 F1 | 	add	fp, #12
2f7ac     A7 28 02 FB | 	rdlong	local02, fp
2f7b0     0C 4E 85 F1 | 	sub	fp, #12
2f7b4     14 2D 02 F6 | 	mov	local04, local02
2f7b8     01 2C 16 F2 | 	cmp	local04, #1 wc
2f7bc     64 05 90 CD |  if_b	jmp	#LR__4769
2f7c0     04 4E 05 F1 | 	add	fp, #4
2f7c4     A7 2A 02 FB | 	rdlong	local03, fp
2f7c8     04 4E 85 F1 | 	sub	fp, #4
2f7cc     14 2A 06 F1 | 	add	local03, #20
2f7d0     15 2B 02 FB | 	rdlong	local03, local03
2f7d4     FF 2B CE F7 | 	test	local03, #511 wz
2f7d8     3C 04 90 5D |  if_ne	jmp	#LR__4767
2f7dc     04 4E 05 F1 | 	add	fp, #4
2f7e0     A7 26 02 FB | 	rdlong	local01, fp
2f7e4     14 26 06 F1 | 	add	local01, #20
2f7e8     13 2B 02 FB | 	rdlong	local03, local01
2f7ec     09 2A 46 F0 | 	shr	local03, #9
2f7f0     14 4E 05 F1 | 	add	fp, #20
2f7f4     A7 2E 02 FB | 	rdlong	local05, fp
2f7f8     17 31 02 F6 | 	mov	local06, local05
2f7fc     0A 30 06 F1 | 	add	local06, #10
2f800     18 33 E2 FA | 	rdword	local07, local06
2f804     0A 30 86 F1 | 	sub	local06, #10
2f808     19 35 32 F9 | 	getword	local08, local07, #0
2f80c     01 34 86 F1 | 	sub	local08, #1
2f810     1A 2B 0A F5 | 	and	local03, local08 wz
2f814     18 4E 05 F1 | 	add	fp, #24
2f818     A7 2A 62 FC | 	wrlong	local03, fp
2f81c     30 4E 85 F1 | 	sub	fp, #48
2f820     E0 00 90 5D |  if_ne	jmp	#LR__4757
2f824     04 4E 05 F1 | 	add	fp, #4
2f828     A7 2A 02 FB | 	rdlong	local03, fp
2f82c     04 4E 85 F1 | 	sub	fp, #4
2f830     14 2A 06 F1 | 	add	local03, #20
2f834     15 2B 0A FB | 	rdlong	local03, local03 wz
2f838     20 00 90 5D |  if_ne	jmp	#LR__4753
2f83c     04 4E 05 F1 | 	add	fp, #4
2f840     A7 2A 02 FB | 	rdlong	local03, fp
2f844     08 2A 06 F1 | 	add	local03, #8
2f848     15 2B 02 FB | 	rdlong	local03, local03
2f84c     18 4E 05 F1 | 	add	fp, #24
2f850     A7 2A 62 FC | 	wrlong	local03, fp
2f854     1C 4E 85 F1 | 	sub	fp, #28
2f858     28 00 90 FD | 	jmp	#LR__4754
2f85c                 | LR__4753
2f85c     04 4E 05 F1 | 	add	fp, #4
2f860     A7 34 02 FB | 	rdlong	local08, fp
2f864     1A 13 02 F6 | 	mov	arg01, local08
2f868     04 4E 85 F1 | 	sub	fp, #4
2f86c     18 34 06 F1 | 	add	local08, #24
2f870     1A 15 02 FB | 	rdlong	arg02, local08
2f874     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2f878     1C 4E 05 F1 | 	add	fp, #28
2f87c     A7 FA 61 FC | 	wrlong	result1, fp
2f880     1C 4E 85 F1 | 	sub	fp, #28
2f884                 | LR__4754
2f884     1C 4E 05 F1 | 	add	fp, #28
2f888     A7 2A 02 FB | 	rdlong	local03, fp
2f88c     1C 4E 85 F1 | 	sub	fp, #28
2f890     02 2A 16 F2 | 	cmp	local03, #2 wc
2f894     1C 00 90 3D |  if_ae	jmp	#LR__4755
2f898     04 4E 05 F1 | 	add	fp, #4
2f89c     A7 2A 02 FB | 	rdlong	local03, fp
2f8a0     04 4E 85 F1 | 	sub	fp, #4
2f8a4     11 2A 06 F1 | 	add	local03, #17
2f8a8     15 05 48 FC | 	wrbyte	#2, local03
2f8ac     02 FA 05 F6 | 	mov	result1, #2
2f8b0     74 04 90 FD | 	jmp	#LR__4770
2f8b4                 | LR__4755
2f8b4     1C 4E 05 F1 | 	add	fp, #28
2f8b8     A7 2A 02 FB | 	rdlong	local03, fp
2f8bc     1C 4E 85 F1 | 	sub	fp, #28
2f8c0     FF FF 7F FF 
2f8c4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2f8c8     1C 00 90 5D |  if_ne	jmp	#LR__4756
2f8cc     04 4E 05 F1 | 	add	fp, #4
2f8d0     A7 2A 02 FB | 	rdlong	local03, fp
2f8d4     04 4E 85 F1 | 	sub	fp, #4
2f8d8     11 2A 06 F1 | 	add	local03, #17
2f8dc     15 03 48 FC | 	wrbyte	#1, local03
2f8e0     01 FA 05 F6 | 	mov	result1, #1
2f8e4     40 04 90 FD | 	jmp	#LR__4770
2f8e8                 | LR__4756
2f8e8     04 4E 05 F1 | 	add	fp, #4
2f8ec     A7 2A 02 FB | 	rdlong	local03, fp
2f8f0     18 4E 05 F1 | 	add	fp, #24
2f8f4     A7 34 02 FB | 	rdlong	local08, fp
2f8f8     1C 4E 85 F1 | 	sub	fp, #28
2f8fc     18 2A 06 F1 | 	add	local03, #24
2f900     15 35 62 FC | 	wrlong	local08, local03
2f904                 | LR__4757
2f904     18 4E 05 F1 | 	add	fp, #24
2f908     A7 12 02 FB | 	rdlong	arg01, fp
2f90c     14 4E 85 F1 | 	sub	fp, #20
2f910     A7 2A 02 FB | 	rdlong	local03, fp
2f914     04 4E 85 F1 | 	sub	fp, #4
2f918     18 2A 06 F1 | 	add	local03, #24
2f91c     15 15 02 FB | 	rdlong	arg02, local03
2f920     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2f924     20 4E 05 F1 | 	add	fp, #32
2f928     A7 FA 61 FC | 	wrlong	result1, fp
2f92c     20 4E 85 F1 | 	sub	fp, #32
2f930     00 FA 0D F2 | 	cmp	result1, #0 wz
2f934     1C 00 90 5D |  if_ne	jmp	#LR__4758
2f938     04 4E 05 F1 | 	add	fp, #4
2f93c     A7 2A 02 FB | 	rdlong	local03, fp
2f940     04 4E 85 F1 | 	sub	fp, #4
2f944     11 2A 06 F1 | 	add	local03, #17
2f948     15 05 48 FC | 	wrbyte	#2, local03
2f94c     02 FA 05 F6 | 	mov	result1, #2
2f950     D4 03 90 FD | 	jmp	#LR__4770
2f954                 | LR__4758
2f954     20 4E 05 F1 | 	add	fp, #32
2f958     A7 2A 02 FB | 	rdlong	local03, fp
2f95c     10 4E 05 F1 | 	add	fp, #16
2f960     A7 34 02 FB | 	rdlong	local08, fp
2f964     1A 2B 02 F1 | 	add	local03, local08
2f968     10 4E 85 F1 | 	sub	fp, #16
2f96c     A7 2A 62 FC | 	wrlong	local03, fp
2f970     14 4E 85 F1 | 	sub	fp, #20
2f974     A7 2A 02 FB | 	rdlong	local03, fp
2f978     09 2A 46 F0 | 	shr	local03, #9
2f97c     20 4E 05 F1 | 	add	fp, #32
2f980     A7 2A 62 FC | 	wrlong	local03, fp
2f984     2C 4E 85 F1 | 	sub	fp, #44
2f988     01 2A 16 F2 | 	cmp	local03, #1 wc
2f98c     5C 01 90 CD |  if_b	jmp	#LR__4762
2f990     30 4E 05 F1 | 	add	fp, #48
2f994     A7 2A 02 FB | 	rdlong	local03, fp
2f998     04 4E 85 F1 | 	sub	fp, #4
2f99c     A7 34 02 FB | 	rdlong	local08, fp
2f9a0     1A 2B 02 F1 | 	add	local03, local08
2f9a4     14 4E 85 F1 | 	sub	fp, #20
2f9a8     A7 34 02 FB | 	rdlong	local08, fp
2f9ac     18 4E 85 F1 | 	sub	fp, #24
2f9b0     0A 34 06 F1 | 	add	local08, #10
2f9b4     1A 35 E2 FA | 	rdword	local08, local08
2f9b8     1A 2B 1A F2 | 	cmp	local03, local08 wcz
2f9bc     28 00 90 ED |  if_be	jmp	#LR__4759
2f9c0     18 4E 05 F1 | 	add	fp, #24
2f9c4     A7 26 02 FB | 	rdlong	local01, fp
2f9c8     0A 26 06 F1 | 	add	local01, #10
2f9cc     13 2B E2 FA | 	rdword	local03, local01
2f9d0     18 4E 05 F1 | 	add	fp, #24
2f9d4     A7 34 02 FB | 	rdlong	local08, fp
2f9d8     1A 2B 82 F1 | 	sub	local03, local08
2f9dc     04 4E 85 F1 | 	sub	fp, #4
2f9e0     A7 2A 62 FC | 	wrlong	local03, fp
2f9e4     2C 4E 85 F1 | 	sub	fp, #44
2f9e8                 | LR__4759
2f9e8     18 4E 05 F1 | 	add	fp, #24
2f9ec     A7 26 02 FB | 	rdlong	local01, fp
2f9f0     01 26 06 F1 | 	add	local01, #1
2f9f4     13 13 C2 FA | 	rdbyte	arg01, local01
2f9f8     1C 4E 05 F1 | 	add	fp, #28
2f9fc     A7 14 02 FB | 	rdlong	arg02, fp
2fa00     14 4E 85 F1 | 	sub	fp, #20
2fa04     A7 16 02 FB | 	rdlong	arg03, fp
2fa08     0C 4E 05 F1 | 	add	fp, #12
2fa0c     A7 18 02 FB | 	rdlong	arg04, fp
2fa10     2C 4E 85 F1 | 	sub	fp, #44
2fa14     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2fa18     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa1c     1C 00 90 AD |  if_e	jmp	#LR__4760
2fa20     04 4E 05 F1 | 	add	fp, #4
2fa24     A7 2A 02 FB | 	rdlong	local03, fp
2fa28     04 4E 85 F1 | 	sub	fp, #4
2fa2c     11 2A 06 F1 | 	add	local03, #17
2fa30     15 03 48 FC | 	wrbyte	#1, local03
2fa34     01 FA 05 F6 | 	mov	result1, #1
2fa38     EC 02 90 FD | 	jmp	#LR__4770
2fa3c                 | LR__4760
2fa3c     04 4E 05 F1 | 	add	fp, #4
2fa40     A7 26 02 FB | 	rdlong	local01, fp
2fa44     04 4E 85 F1 | 	sub	fp, #4
2fa48     10 26 06 F1 | 	add	local01, #16
2fa4c     13 2B C2 FA | 	rdbyte	local03, local01
2fa50     80 2A CE F7 | 	test	local03, #128 wz
2fa54     78 00 90 AD |  if_e	jmp	#LR__4761
2fa58     04 4E 05 F1 | 	add	fp, #4
2fa5c     A7 34 02 FB | 	rdlong	local08, fp
2fa60     1C 34 06 F1 | 	add	local08, #28
2fa64     1A 35 02 FB | 	rdlong	local08, local08
2fa68     1C 4E 05 F1 | 	add	fp, #28
2fa6c     A7 36 02 FB | 	rdlong	local09, fp
2fa70     1B 35 82 F1 | 	sub	local08, local09
2fa74     0C 4E 05 F1 | 	add	fp, #12
2fa78     A7 38 02 FB | 	rdlong	local10, fp
2fa7c     2C 4E 85 F1 | 	sub	fp, #44
2fa80     1C 3B 02 F6 | 	mov	local11, local10
2fa84     1D 35 12 F2 | 	cmp	local08, local11 wc
2fa88     44 00 90 3D |  if_ae	jmp	#LR__4761
2fa8c     34 4E 05 F1 | 	add	fp, #52
2fa90     A7 12 02 FB | 	rdlong	arg01, fp
2fa94     30 4E 85 F1 | 	sub	fp, #48
2fa98     A7 14 02 FB | 	rdlong	arg02, fp
2fa9c     0A 3B 02 F6 | 	mov	local11, arg02
2faa0     1C 3A 06 F1 | 	add	local11, #28
2faa4     1D 37 02 FB | 	rdlong	local09, local11
2faa8     1C 4E 05 F1 | 	add	fp, #28
2faac     A7 2E 02 FB | 	rdlong	local05, fp
2fab0     17 37 82 F1 | 	sub	local09, local05
2fab4     09 36 66 F0 | 	shl	local09, #9
2fab8     1B 3B 02 F6 | 	mov	local11, local09
2fabc     1B 13 02 F1 | 	add	arg01, local09
2fac0     20 4E 85 F1 | 	sub	fp, #32
2fac4     28 14 06 F1 | 	add	arg02, #40
2fac8     09 16 C6 F9 | 	decod	arg03, #9
2facc     64 43 BF FD | 	call	#__system____builtin_memmove
2fad0                 | LR__4761
2fad0     2C 4E 05 F1 | 	add	fp, #44
2fad4     A7 2A 02 FB | 	rdlong	local03, fp
2fad8     09 2A 66 F0 | 	shl	local03, #9
2fadc     04 4E 85 F1 | 	sub	fp, #4
2fae0     A7 2A 62 FC | 	wrlong	local03, fp
2fae4     28 4E 85 F1 | 	sub	fp, #40
2fae8                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2fae8                 | ' 				}
2fae8                 | ' 
2fae8                 | ' 
2fae8                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2fae8                 | ' 				continue;
2fae8     B4 01 90 FD | 	jmp	#LR__4768
2faec                 | LR__4762
2faec     04 4E 05 F1 | 	add	fp, #4
2faf0     A7 2A 02 FB | 	rdlong	local03, fp
2faf4     1C 2A 06 F1 | 	add	local03, #28
2faf8     15 2B 02 FB | 	rdlong	local03, local03
2fafc     1C 4E 05 F1 | 	add	fp, #28
2fb00     A7 26 02 FB | 	rdlong	local01, fp
2fb04     20 4E 85 F1 | 	sub	fp, #32
2fb08     13 2B 0A F2 | 	cmp	local03, local01 wz
2fb0c     EC 00 90 AD |  if_e	jmp	#LR__4766
2fb10     04 4E 05 F1 | 	add	fp, #4
2fb14     A7 26 02 FB | 	rdlong	local01, fp
2fb18     04 4E 85 F1 | 	sub	fp, #4
2fb1c     10 26 06 F1 | 	add	local01, #16
2fb20     13 2B C2 FA | 	rdbyte	local03, local01
2fb24     80 2A CE F7 | 	test	local03, #128 wz
2fb28     7C 00 90 AD |  if_e	jmp	#LR__4764
2fb2c     18 4E 05 F1 | 	add	fp, #24
2fb30     A7 26 02 FB | 	rdlong	local01, fp
2fb34     01 26 06 F1 | 	add	local01, #1
2fb38     13 13 C2 FA | 	rdbyte	arg01, local01
2fb3c     14 4E 85 F1 | 	sub	fp, #20
2fb40     A7 2A 02 FB | 	rdlong	local03, fp
2fb44     15 15 02 F6 | 	mov	arg02, local03
2fb48     28 14 06 F1 | 	add	arg02, #40
2fb4c     04 4E 85 F1 | 	sub	fp, #4
2fb50     1C 2A 06 F1 | 	add	local03, #28
2fb54     15 17 02 FB | 	rdlong	arg03, local03
2fb58     01 18 06 F6 | 	mov	arg04, #1
2fb5c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2fb60     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb64     1C 00 90 AD |  if_e	jmp	#LR__4763
2fb68     04 4E 05 F1 | 	add	fp, #4
2fb6c     A7 2A 02 FB | 	rdlong	local03, fp
2fb70     04 4E 85 F1 | 	sub	fp, #4
2fb74     11 2A 06 F1 | 	add	local03, #17
2fb78     15 03 48 FC | 	wrbyte	#1, local03
2fb7c     01 FA 05 F6 | 	mov	result1, #1
2fb80     A4 01 90 FD | 	jmp	#LR__4770
2fb84                 | LR__4763
2fb84     04 4E 05 F1 | 	add	fp, #4
2fb88     A7 3A 02 FB | 	rdlong	local11, fp
2fb8c     1D 2B 02 F6 | 	mov	local03, local11
2fb90     04 4E 85 F1 | 	sub	fp, #4
2fb94     10 3A 06 F1 | 	add	local11, #16
2fb98     1D 3B C2 FA | 	rdbyte	local11, local11
2fb9c     7F 3A 06 F5 | 	and	local11, #127
2fba0     10 2A 06 F1 | 	add	local03, #16
2fba4     15 3B 42 FC | 	wrbyte	local11, local03
2fba8                 | LR__4764
2fba8     18 4E 05 F1 | 	add	fp, #24
2fbac     A7 26 02 FB | 	rdlong	local01, fp
2fbb0     01 26 06 F1 | 	add	local01, #1
2fbb4     13 13 C2 FA | 	rdbyte	arg01, local01
2fbb8     14 4E 85 F1 | 	sub	fp, #20
2fbbc     A7 14 02 FB | 	rdlong	arg02, fp
2fbc0     28 14 06 F1 | 	add	arg02, #40
2fbc4     1C 4E 05 F1 | 	add	fp, #28
2fbc8     A7 16 02 FB | 	rdlong	arg03, fp
2fbcc     20 4E 85 F1 | 	sub	fp, #32
2fbd0     01 18 06 F6 | 	mov	arg04, #1
2fbd4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2fbd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2fbdc     1C 00 90 AD |  if_e	jmp	#LR__4765
2fbe0     04 4E 05 F1 | 	add	fp, #4
2fbe4     A7 2A 02 FB | 	rdlong	local03, fp
2fbe8     04 4E 85 F1 | 	sub	fp, #4
2fbec     11 2A 06 F1 | 	add	local03, #17
2fbf0     15 03 48 FC | 	wrbyte	#1, local03
2fbf4     01 FA 05 F6 | 	mov	result1, #1
2fbf8     2C 01 90 FD | 	jmp	#LR__4770
2fbfc                 | LR__4765
2fbfc                 | LR__4766
2fbfc     04 4E 05 F1 | 	add	fp, #4
2fc00     A7 2A 02 FB | 	rdlong	local03, fp
2fc04     1C 4E 05 F1 | 	add	fp, #28
2fc08     A7 3A 02 FB | 	rdlong	local11, fp
2fc0c     20 4E 85 F1 | 	sub	fp, #32
2fc10     1C 2A 06 F1 | 	add	local03, #28
2fc14     15 3B 62 FC | 	wrlong	local11, local03
2fc18                 | LR__4767
2fc18     04 4E 05 F1 | 	add	fp, #4
2fc1c     A7 26 02 FB | 	rdlong	local01, fp
2fc20     14 26 06 F1 | 	add	local01, #20
2fc24     13 3B 02 FB | 	rdlong	local11, local01
2fc28     FF 3B 06 F5 | 	and	local11, #511
2fc2c     09 2A C6 F9 | 	decod	local03, #9
2fc30     1D 2B 82 F1 | 	sub	local03, local11
2fc34     24 4E 05 F1 | 	add	fp, #36
2fc38     A7 2A 62 FC | 	wrlong	local03, fp
2fc3c     1C 4E 85 F1 | 	sub	fp, #28
2fc40     A7 3A 02 FB | 	rdlong	local11, fp
2fc44     0C 4E 85 F1 | 	sub	fp, #12
2fc48     1D 2B 1A F2 | 	cmp	local03, local11 wcz
2fc4c     0C 4E 05 11 |  if_a	add	fp, #12
2fc50     A7 2A 02 1B |  if_a	rdlong	local03, fp
2fc54     1C 4E 05 11 |  if_a	add	fp, #28
2fc58     A7 2A 62 1C |  if_a	wrlong	local03, fp
2fc5c     28 4E 85 11 |  if_a	sub	fp, #40
2fc60     34 4E 05 F1 | 	add	fp, #52
2fc64     A7 12 02 FB | 	rdlong	arg01, fp
2fc68     30 4E 85 F1 | 	sub	fp, #48
2fc6c     A7 30 02 FB | 	rdlong	local06, fp
2fc70     18 15 02 F6 | 	mov	arg02, local06
2fc74     28 14 06 F1 | 	add	arg02, #40
2fc78     14 30 06 F1 | 	add	local06, #20
2fc7c     18 3B 02 FB | 	rdlong	local11, local06
2fc80     1D 37 02 F6 | 	mov	local09, local11
2fc84     1B 39 02 F6 | 	mov	local10, local09
2fc88     FF 39 06 F5 | 	and	local10, #511
2fc8c     1C 15 02 F1 | 	add	arg02, local10
2fc90     24 4E 05 F1 | 	add	fp, #36
2fc94     A7 16 02 FB | 	rdlong	arg03, fp
2fc98     28 4E 85 F1 | 	sub	fp, #40
2fc9c     94 41 BF FD | 	call	#__system____builtin_memmove
2fca0                 | LR__4768
2fca0     0C 4E 05 F1 | 	add	fp, #12
2fca4     A7 2A 02 FB | 	rdlong	local03, fp
2fca8     1C 4E 05 F1 | 	add	fp, #28
2fcac     A7 34 02 FB | 	rdlong	local08, fp
2fcb0     1A 2B 82 F1 | 	sub	local03, local08
2fcb4     1C 4E 85 F1 | 	sub	fp, #28
2fcb8     A7 2A 62 FC | 	wrlong	local03, fp
2fcbc     04 4E 05 F1 | 	add	fp, #4
2fcc0     A7 26 02 FB | 	rdlong	local01, fp
2fcc4     13 33 02 FB | 	rdlong	local07, local01
2fcc8     18 4E 05 F1 | 	add	fp, #24
2fccc     A7 34 02 FB | 	rdlong	local08, fp
2fcd0     1A 33 02 F1 | 	add	local07, local08
2fcd4     13 33 62 FC | 	wrlong	local07, local01
2fcd8     0C 4E 05 F1 | 	add	fp, #12
2fcdc     A7 2A 02 FB | 	rdlong	local03, fp
2fce0     0C 4E 85 F1 | 	sub	fp, #12
2fce4     A7 3C 02 FB | 	rdlong	local12, fp
2fce8     1E 2B 02 F1 | 	add	local03, local12
2fcec     0C 4E 05 F1 | 	add	fp, #12
2fcf0     A7 2A 62 FC | 	wrlong	local03, fp
2fcf4     30 4E 85 F1 | 	sub	fp, #48
2fcf8     A7 3E 02 FB | 	rdlong	local13, fp
2fcfc     1F 2B 02 F6 | 	mov	local03, local13
2fd00     14 3E 06 F1 | 	add	local13, #20
2fd04     1F 41 02 FB | 	rdlong	local14, local13
2fd08     24 4E 05 F1 | 	add	fp, #36
2fd0c     A7 30 02 FB | 	rdlong	local06, fp
2fd10     28 4E 85 F1 | 	sub	fp, #40
2fd14     18 41 02 F1 | 	add	local14, local06
2fd18     14 2A 06 F1 | 	add	local03, #20
2fd1c     15 41 62 FC | 	wrlong	local14, local03
2fd20     84 FA 9F FD | 	jmp	#LR__4752
2fd24                 | LR__4769
2fd24                 | ' 
2fd24                 | ' 
2fd24                 | ' 
2fd24                 | ' 
2fd24                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fd24                 | ' 
2fd24                 | ' 	}
2fd24                 | ' 
2fd24                 | ' 	return FR_OK ;
2fd24     00 FA 05 F6 | 	mov	result1, #0
2fd28                 | LR__4770
2fd28     A7 F0 03 F6 | 	mov	ptra, fp
2fd2c     B2 00 A0 FD | 	call	#popregs_
2fd30                 | _fatfs_cc_f_read_ret
2fd30     2D 00 64 FD | 	ret
2fd34                 | 
2fd34                 | _fatfs_cc_f_write
2fd34     15 4A 05 F6 | 	mov	COUNT_, #21
2fd38     A8 00 A0 FD | 	call	#pushregs_
2fd3c     34 F0 07 F1 | 	add	ptra, #52
2fd40     04 4E 05 F1 | 	add	fp, #4
2fd44     A7 12 62 FC | 	wrlong	arg01, fp
2fd48     04 4E 05 F1 | 	add	fp, #4
2fd4c     A7 14 62 FC | 	wrlong	arg02, fp
2fd50     04 4E 05 F1 | 	add	fp, #4
2fd54     A7 16 62 FC | 	wrlong	arg03, fp
2fd58     04 4E 05 F1 | 	add	fp, #4
2fd5c     A7 18 62 FC | 	wrlong	arg04, fp
2fd60     08 4E 85 F1 | 	sub	fp, #8
2fd64     A7 FA 01 FB | 	rdlong	result1, fp
2fd68     28 4E 05 F1 | 	add	fp, #40
2fd6c     A7 FA 61 FC | 	wrlong	result1, fp
2fd70     20 4E 85 F1 | 	sub	fp, #32
2fd74     A7 FA 01 FB | 	rdlong	result1, fp
2fd78     FD 00 68 FC | 	wrlong	#0, result1
2fd7c     0C 4E 85 F1 | 	sub	fp, #12
2fd80     A7 12 02 FB | 	rdlong	arg01, fp
2fd84     14 4E 05 F1 | 	add	fp, #20
2fd88     A7 14 02 F6 | 	mov	arg02, fp
2fd8c     18 4E 85 F1 | 	sub	fp, #24
2fd90     88 F0 BF FD | 	call	#_fatfs_cc_validate
2fd94     14 4E 05 F1 | 	add	fp, #20
2fd98     A7 FA 61 FC | 	wrlong	result1, fp
2fd9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2fda0     14 4E 85 F1 | 	sub	fp, #20
2fda4     20 00 90 5D |  if_ne	jmp	#LR__4780
2fda8     04 4E 05 F1 | 	add	fp, #4
2fdac     A7 14 02 FB | 	rdlong	arg02, fp
2fdb0     11 14 06 F1 | 	add	arg02, #17
2fdb4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2fdb8     10 4E 05 F1 | 	add	fp, #16
2fdbc     A7 14 62 FC | 	wrlong	arg02, fp
2fdc0     14 4E 85 F1 | 	sub	fp, #20
2fdc4     10 00 90 AD |  if_e	jmp	#LR__4781
2fdc8                 | LR__4780
2fdc8     14 4E 05 F1 | 	add	fp, #20
2fdcc     A7 FA 01 FB | 	rdlong	result1, fp
2fdd0     14 4E 85 F1 | 	sub	fp, #20
2fdd4     44 07 90 FD | 	jmp	#LR__4803
2fdd8                 | LR__4781
2fdd8     04 4E 05 F1 | 	add	fp, #4
2fddc     A7 14 02 FB | 	rdlong	arg02, fp
2fde0     04 4E 85 F1 | 	sub	fp, #4
2fde4     10 14 06 F1 | 	add	arg02, #16
2fde8     0A 15 C2 FA | 	rdbyte	arg02, arg02
2fdec     02 14 CE F7 | 	test	arg02, #2 wz
2fdf0     07 FA 05 A6 |  if_e	mov	result1, #7
2fdf4     24 07 90 AD |  if_e	jmp	#LR__4803
2fdf8     04 4E 05 F1 | 	add	fp, #4
2fdfc     A7 14 02 FB | 	rdlong	arg02, fp
2fe00     0A 13 02 F6 | 	mov	arg01, arg02
2fe04     14 12 06 F1 | 	add	arg01, #20
2fe08     09 13 02 FB | 	rdlong	arg01, arg01
2fe0c     08 4E 05 F1 | 	add	fp, #8
2fe10     A7 FA 01 FB | 	rdlong	result1, fp
2fe14     FD 12 02 F1 | 	add	arg01, result1
2fe18     0C 4E 85 F1 | 	sub	fp, #12
2fe1c     14 14 06 F1 | 	add	arg02, #20
2fe20     0A FB 01 FB | 	rdlong	result1, arg02
2fe24     FD 12 12 F2 | 	cmp	arg01, result1 wc
2fe28     24 00 90 3D |  if_ae	jmp	#LR__4782
2fe2c     04 4E 05 F1 | 	add	fp, #4
2fe30     A7 14 02 FB | 	rdlong	arg02, fp
2fe34     01 FA 65 F6 | 	neg	result1, #1
2fe38     14 14 06 F1 | 	add	arg02, #20
2fe3c     0A 15 02 FB | 	rdlong	arg02, arg02
2fe40     0A FB 81 F1 | 	sub	result1, arg02
2fe44     08 4E 05 F1 | 	add	fp, #8
2fe48     A7 FA 61 FC | 	wrlong	result1, fp
2fe4c     0C 4E 85 F1 | 	sub	fp, #12
2fe50                 | LR__4782
2fe50                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2fe50                 | ' 	}
2fe50                 | ' 
2fe50                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2fe50                 | LR__4783
2fe50     0C 4E 05 F1 | 	add	fp, #12
2fe54     A7 FA 01 FB | 	rdlong	result1, fp
2fe58     0C 4E 85 F1 | 	sub	fp, #12
2fe5c     01 FA 15 F2 | 	cmp	result1, #1 wc
2fe60     90 06 90 CD |  if_b	jmp	#LR__4802
2fe64     04 4E 05 F1 | 	add	fp, #4
2fe68     A7 FA 01 FB | 	rdlong	result1, fp
2fe6c     04 4E 85 F1 | 	sub	fp, #4
2fe70     14 FA 05 F1 | 	add	result1, #20
2fe74     FD FA 01 FB | 	rdlong	result1, result1
2fe78     FF FB CD F7 | 	test	result1, #511 wz
2fe7c     D8 04 90 5D |  if_ne	jmp	#LR__4798
2fe80     04 4E 05 F1 | 	add	fp, #4
2fe84     A7 FA 01 FB | 	rdlong	result1, fp
2fe88     14 FA 05 F1 | 	add	result1, #20
2fe8c     FD FA 01 FB | 	rdlong	result1, result1
2fe90     09 FA 45 F0 | 	shr	result1, #9
2fe94     14 4E 05 F1 | 	add	fp, #20
2fe98     A7 14 02 FB | 	rdlong	arg02, fp
2fe9c     0A 14 06 F1 | 	add	arg02, #10
2fea0     0A 19 E2 FA | 	rdword	arg04, arg02
2fea4     0C 15 32 F9 | 	getword	arg02, arg04, #0
2fea8     01 14 86 F1 | 	sub	arg02, #1
2feac     0A FB 09 F5 | 	and	result1, arg02 wz
2feb0     14 4E 05 F1 | 	add	fp, #20
2feb4     A7 FA 61 FC | 	wrlong	result1, fp
2feb8     2C 4E 85 F1 | 	sub	fp, #44
2febc     44 01 90 5D |  if_ne	jmp	#LR__4789
2fec0     04 4E 05 F1 | 	add	fp, #4
2fec4     A7 FA 01 FB | 	rdlong	result1, fp
2fec8     04 4E 85 F1 | 	sub	fp, #4
2fecc     14 FA 05 F1 | 	add	result1, #20
2fed0     FD 14 0A FB | 	rdlong	arg02, result1 wz
2fed4     44 00 90 5D |  if_ne	jmp	#LR__4784
2fed8     04 4E 05 F1 | 	add	fp, #4
2fedc     A7 14 02 FB | 	rdlong	arg02, fp
2fee0     08 14 06 F1 | 	add	arg02, #8
2fee4     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2fee8     18 4E 05 F1 | 	add	fp, #24
2feec     A7 14 62 FC | 	wrlong	arg02, fp
2fef0     1C 4E 85 F1 | 	sub	fp, #28
2fef4     4C 00 90 5D |  if_ne	jmp	#LR__4785
2fef8     04 4E 05 F1 | 	add	fp, #4
2fefc     A7 12 02 FB | 	rdlong	arg01, fp
2ff00     04 4E 85 F1 | 	sub	fp, #4
2ff04     00 14 06 F6 | 	mov	arg02, #0
2ff08     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2ff0c     1C 4E 05 F1 | 	add	fp, #28
2ff10     A7 FA 61 FC | 	wrlong	result1, fp
2ff14     1C 4E 85 F1 | 	sub	fp, #28
2ff18     28 00 90 FD | 	jmp	#LR__4785
2ff1c                 | LR__4784
2ff1c     04 4E 05 F1 | 	add	fp, #4
2ff20     A7 18 02 FB | 	rdlong	arg04, fp
2ff24     0C 13 02 F6 | 	mov	arg01, arg04
2ff28     04 4E 85 F1 | 	sub	fp, #4
2ff2c     18 18 06 F1 | 	add	arg04, #24
2ff30     0C 15 02 FB | 	rdlong	arg02, arg04
2ff34     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2ff38     1C 4E 05 F1 | 	add	fp, #28
2ff3c     A7 FA 61 FC | 	wrlong	result1, fp
2ff40     1C 4E 85 F1 | 	sub	fp, #28
2ff44                 | LR__4785
2ff44     1C 4E 05 F1 | 	add	fp, #28
2ff48     A7 FA 09 FB | 	rdlong	result1, fp wz
2ff4c     1C 4E 85 F1 | 	sub	fp, #28
2ff50     A0 05 90 AD |  if_e	jmp	#LR__4802
2ff54     1C 4E 05 F1 | 	add	fp, #28
2ff58     A7 FA 01 FB | 	rdlong	result1, fp
2ff5c     1C 4E 85 F1 | 	sub	fp, #28
2ff60     01 FA 0D F2 | 	cmp	result1, #1 wz
2ff64     1C 00 90 5D |  if_ne	jmp	#LR__4786
2ff68     04 4E 05 F1 | 	add	fp, #4
2ff6c     A7 FA 01 FB | 	rdlong	result1, fp
2ff70     04 4E 85 F1 | 	sub	fp, #4
2ff74     11 FA 05 F1 | 	add	result1, #17
2ff78     FD 04 48 FC | 	wrbyte	#2, result1
2ff7c     02 FA 05 F6 | 	mov	result1, #2
2ff80     98 05 90 FD | 	jmp	#LR__4803
2ff84                 | LR__4786
2ff84     1C 4E 05 F1 | 	add	fp, #28
2ff88     A7 FA 01 FB | 	rdlong	result1, fp
2ff8c     1C 4E 85 F1 | 	sub	fp, #28
2ff90     FF FF 7F FF 
2ff94     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2ff98     1C 00 90 5D |  if_ne	jmp	#LR__4787
2ff9c     04 4E 05 F1 | 	add	fp, #4
2ffa0     A7 FA 01 FB | 	rdlong	result1, fp
2ffa4     04 4E 85 F1 | 	sub	fp, #4
2ffa8     11 FA 05 F1 | 	add	result1, #17
2ffac     FD 02 48 FC | 	wrbyte	#1, result1
2ffb0     01 FA 05 F6 | 	mov	result1, #1
2ffb4     64 05 90 FD | 	jmp	#LR__4803
2ffb8                 | LR__4787
2ffb8     04 4E 05 F1 | 	add	fp, #4
2ffbc     A7 FA 01 FB | 	rdlong	result1, fp
2ffc0     18 4E 05 F1 | 	add	fp, #24
2ffc4     A7 18 02 FB | 	rdlong	arg04, fp
2ffc8     18 FA 05 F1 | 	add	result1, #24
2ffcc     FD 18 62 FC | 	wrlong	arg04, result1
2ffd0     18 4E 85 F1 | 	sub	fp, #24
2ffd4     A7 FA 01 FB | 	rdlong	result1, fp
2ffd8     04 4E 85 F1 | 	sub	fp, #4
2ffdc     08 FA 05 F1 | 	add	result1, #8
2ffe0     FD FA 09 FB | 	rdlong	result1, result1 wz
2ffe4     1C 00 90 5D |  if_ne	jmp	#LR__4788
2ffe8     04 4E 05 F1 | 	add	fp, #4
2ffec     A7 18 02 FB | 	rdlong	arg04, fp
2fff0     18 4E 05 F1 | 	add	fp, #24
2fff4     A7 FA 01 FB | 	rdlong	result1, fp
2fff8     1C 4E 85 F1 | 	sub	fp, #28
2fffc     08 18 06 F1 | 	add	arg04, #8
30000     0C FB 61 FC | 	wrlong	result1, arg04
30004                 | LR__4788
30004                 | LR__4789
30004     04 4E 05 F1 | 	add	fp, #4
30008     A7 18 02 FB | 	rdlong	arg04, fp
3000c     04 4E 85 F1 | 	sub	fp, #4
30010     10 18 06 F1 | 	add	arg04, #16
30014     0C 19 C2 FA | 	rdbyte	arg04, arg04
30018     80 18 CE F7 | 	test	arg04, #128 wz
3001c     7C 00 90 AD |  if_e	jmp	#LR__4791
30020     18 4E 05 F1 | 	add	fp, #24
30024     A7 18 02 FB | 	rdlong	arg04, fp
30028     01 18 06 F1 | 	add	arg04, #1
3002c     0C 13 C2 FA | 	rdbyte	arg01, arg04
30030     14 4E 85 F1 | 	sub	fp, #20
30034     A7 18 02 FB | 	rdlong	arg04, fp
30038     0C 15 02 F6 | 	mov	arg02, arg04
3003c     28 14 06 F1 | 	add	arg02, #40
30040     04 4E 85 F1 | 	sub	fp, #4
30044     1C 18 06 F1 | 	add	arg04, #28
30048     0C 17 02 FB | 	rdlong	arg03, arg04
3004c     01 18 06 F6 | 	mov	arg04, #1
30050     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
30054     00 FA 0D F2 | 	cmp	result1, #0 wz
30058     1C 00 90 AD |  if_e	jmp	#LR__4790
3005c     04 4E 05 F1 | 	add	fp, #4
30060     A7 FA 01 FB | 	rdlong	result1, fp
30064     04 4E 85 F1 | 	sub	fp, #4
30068     11 FA 05 F1 | 	add	result1, #17
3006c     FD 02 48 FC | 	wrbyte	#1, result1
30070     01 FA 05 F6 | 	mov	result1, #1
30074     A4 04 90 FD | 	jmp	#LR__4803
30078                 | LR__4790
30078     04 4E 05 F1 | 	add	fp, #4
3007c     A7 18 02 FB | 	rdlong	arg04, fp
30080     0C FB 01 F6 | 	mov	result1, arg04
30084     04 4E 85 F1 | 	sub	fp, #4
30088     10 18 06 F1 | 	add	arg04, #16
3008c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30090     7F 18 06 F5 | 	and	arg04, #127
30094     10 FA 05 F1 | 	add	result1, #16
30098     FD 18 42 FC | 	wrbyte	arg04, result1
3009c                 | LR__4791
3009c     18 4E 05 F1 | 	add	fp, #24
300a0     A7 12 02 FB | 	rdlong	arg01, fp
300a4     14 4E 85 F1 | 	sub	fp, #20
300a8     A7 14 02 FB | 	rdlong	arg02, fp
300ac     04 4E 85 F1 | 	sub	fp, #4
300b0     18 14 06 F1 | 	add	arg02, #24
300b4     0A 15 02 FB | 	rdlong	arg02, arg02
300b8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
300bc     20 4E 05 F1 | 	add	fp, #32
300c0     A7 FA 61 FC | 	wrlong	result1, fp
300c4     20 4E 85 F1 | 	sub	fp, #32
300c8     00 FA 0D F2 | 	cmp	result1, #0 wz
300cc     1C 00 90 5D |  if_ne	jmp	#LR__4792
300d0     04 4E 05 F1 | 	add	fp, #4
300d4     A7 FA 01 FB | 	rdlong	result1, fp
300d8     04 4E 85 F1 | 	sub	fp, #4
300dc     11 FA 05 F1 | 	add	result1, #17
300e0     FD 04 48 FC | 	wrbyte	#2, result1
300e4     02 FA 05 F6 | 	mov	result1, #2
300e8     30 04 90 FD | 	jmp	#LR__4803
300ec                 | LR__4792
300ec     20 4E 05 F1 | 	add	fp, #32
300f0     A7 FA 01 FB | 	rdlong	result1, fp
300f4     0C 4E 05 F1 | 	add	fp, #12
300f8     A7 26 02 FB | 	rdlong	local01, fp
300fc     13 FB 01 F1 | 	add	result1, local01
30100     0C 4E 85 F1 | 	sub	fp, #12
30104     A7 FA 61 FC | 	wrlong	result1, fp
30108     14 4E 85 F1 | 	sub	fp, #20
3010c     A7 FA 01 FB | 	rdlong	result1, fp
30110     09 FA 45 F0 | 	shr	result1, #9
30114     1C 4E 05 F1 | 	add	fp, #28
30118     A7 FA 61 FC | 	wrlong	result1, fp
3011c     28 4E 85 F1 | 	sub	fp, #40
30120     01 FA 15 F2 | 	cmp	result1, #1 wc
30124     60 01 90 CD |  if_b	jmp	#LR__4796
30128     2C 4E 05 F1 | 	add	fp, #44
3012c     A7 FA 01 FB | 	rdlong	result1, fp
30130     04 4E 85 F1 | 	sub	fp, #4
30134     A7 18 02 FB | 	rdlong	arg04, fp
30138     0C FB 01 F1 | 	add	result1, arg04
3013c     10 4E 85 F1 | 	sub	fp, #16
30140     A7 18 02 FB | 	rdlong	arg04, fp
30144     18 4E 85 F1 | 	sub	fp, #24
30148     0A 18 06 F1 | 	add	arg04, #10
3014c     0C 19 E2 FA | 	rdword	arg04, arg04
30150     0C FB 19 F2 | 	cmp	result1, arg04 wcz
30154     28 00 90 ED |  if_be	jmp	#LR__4793
30158     18 4E 05 F1 | 	add	fp, #24
3015c     A7 FA 01 FB | 	rdlong	result1, fp
30160     0A FA 05 F1 | 	add	result1, #10
30164     FD FA E1 FA | 	rdword	result1, result1
30168     14 4E 05 F1 | 	add	fp, #20
3016c     A7 18 02 FB | 	rdlong	arg04, fp
30170     0C FB 81 F1 | 	sub	result1, arg04
30174     04 4E 85 F1 | 	sub	fp, #4
30178     A7 FA 61 FC | 	wrlong	result1, fp
3017c     28 4E 85 F1 | 	sub	fp, #40
30180                 | LR__4793
30180     18 4E 05 F1 | 	add	fp, #24
30184     A7 18 02 FB | 	rdlong	arg04, fp
30188     01 18 06 F1 | 	add	arg04, #1
3018c     0C 13 C2 FA | 	rdbyte	arg01, arg04
30190     18 4E 05 F1 | 	add	fp, #24
30194     A7 14 02 FB | 	rdlong	arg02, fp
30198     10 4E 85 F1 | 	sub	fp, #16
3019c     A7 16 02 FB | 	rdlong	arg03, fp
301a0     08 4E 05 F1 | 	add	fp, #8
301a4     A7 18 02 FB | 	rdlong	arg04, fp
301a8     28 4E 85 F1 | 	sub	fp, #40
301ac     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
301b0     00 FA 0D F2 | 	cmp	result1, #0 wz
301b4     1C 00 90 AD |  if_e	jmp	#LR__4794
301b8     04 4E 05 F1 | 	add	fp, #4
301bc     A7 26 02 FB | 	rdlong	local01, fp
301c0     04 4E 85 F1 | 	sub	fp, #4
301c4     11 26 06 F1 | 	add	local01, #17
301c8     13 03 48 FC | 	wrbyte	#1, local01
301cc     01 FA 05 F6 | 	mov	result1, #1
301d0     48 03 90 FD | 	jmp	#LR__4803
301d4                 | LR__4794
301d4     04 4E 05 F1 | 	add	fp, #4
301d8     A7 FA 01 FB | 	rdlong	result1, fp
301dc     1C FA 05 F1 | 	add	result1, #28
301e0     FD FA 01 FB | 	rdlong	result1, result1
301e4     1C 4E 05 F1 | 	add	fp, #28
301e8     A7 28 02 FB | 	rdlong	local02, fp
301ec     14 FB 81 F1 | 	sub	result1, local02
301f0     08 4E 05 F1 | 	add	fp, #8
301f4     A7 18 02 FB | 	rdlong	arg04, fp
301f8     28 4E 85 F1 | 	sub	fp, #40
301fc     0C FB 11 F2 | 	cmp	result1, arg04 wc
30200     68 00 90 3D |  if_ae	jmp	#LR__4795
30204     04 4E 05 F1 | 	add	fp, #4
30208     A7 12 02 FB | 	rdlong	arg01, fp
3020c     28 12 06 F1 | 	add	arg01, #40
30210     2C 4E 05 F1 | 	add	fp, #44
30214     A7 14 02 FB | 	rdlong	arg02, fp
30218     2C 4E 85 F1 | 	sub	fp, #44
3021c     A7 FA 01 FB | 	rdlong	result1, fp
30220     1C FA 05 F1 | 	add	result1, #28
30224     FD 2A 02 FB | 	rdlong	local03, result1
30228     1C 4E 05 F1 | 	add	fp, #28
3022c     A7 18 02 FB | 	rdlong	arg04, fp
30230     20 4E 85 F1 | 	sub	fp, #32
30234     0C 2B 82 F1 | 	sub	local03, arg04
30238     09 2A 66 F0 | 	shl	local03, #9
3023c     15 15 02 F1 | 	add	arg02, local03
30240     09 16 C6 F9 | 	decod	arg03, #9
30244     EC 3B BF FD | 	call	#__system____builtin_memmove
30248     04 4E 05 F1 | 	add	fp, #4
3024c     A7 18 02 FB | 	rdlong	arg04, fp
30250     0C FB 01 F6 | 	mov	result1, arg04
30254     04 4E 85 F1 | 	sub	fp, #4
30258     10 18 06 F1 | 	add	arg04, #16
3025c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30260     7F 18 06 F5 | 	and	arg04, #127
30264     10 FA 05 F1 | 	add	result1, #16
30268     FD 18 42 FC | 	wrbyte	arg04, result1
3026c                 | LR__4795
3026c     28 4E 05 F1 | 	add	fp, #40
30270     A7 FA 01 FB | 	rdlong	result1, fp
30274     09 FA 65 F0 | 	shl	result1, #9
30278     04 4E 85 F1 | 	sub	fp, #4
3027c     A7 FA 61 FC | 	wrlong	result1, fp
30280     24 4E 85 F1 | 	sub	fp, #36
30284                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
30284                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
30284                 | ' 				}
30284                 | ' 
30284                 | ' 
30284                 | ' 				wcnt =  ((UINT) 512 )  * cc;
30284                 | ' 				continue;
30284     74 01 90 FD | 	jmp	#LR__4799
30288                 | LR__4796
30288     04 4E 05 F1 | 	add	fp, #4
3028c     A7 28 02 FB | 	rdlong	local02, fp
30290     1C 28 06 F1 | 	add	local02, #28
30294     14 FB 01 FB | 	rdlong	result1, local02
30298     1C 4E 05 F1 | 	add	fp, #28
3029c     A7 28 02 FB | 	rdlong	local02, fp
302a0     20 4E 85 F1 | 	sub	fp, #32
302a4     14 FB 09 F2 | 	cmp	result1, local02 wz
302a8     90 00 90 AD |  if_e	jmp	#LR__4797
302ac     04 4E 05 F1 | 	add	fp, #4
302b0     A7 FA 01 FB | 	rdlong	result1, fp
302b4     FD 2A 02 F6 | 	mov	local03, result1
302b8     04 4E 85 F1 | 	sub	fp, #4
302bc     14 2A 06 F1 | 	add	local03, #20
302c0     15 2B 02 FB | 	rdlong	local03, local03
302c4     0C FA 05 F1 | 	add	result1, #12
302c8     FD 2C 02 FB | 	rdlong	local04, result1
302cc     16 2F 02 F6 | 	mov	local05, local04
302d0     17 2B 12 F2 | 	cmp	local03, local05 wc
302d4     64 00 90 3D |  if_ae	jmp	#LR__4797
302d8     18 4E 05 F1 | 	add	fp, #24
302dc     A7 18 02 FB | 	rdlong	arg04, fp
302e0     01 18 06 F1 | 	add	arg04, #1
302e4     0C 13 C2 FA | 	rdbyte	arg01, arg04
302e8     14 4E 85 F1 | 	sub	fp, #20
302ec     A7 30 02 FB | 	rdlong	local06, fp
302f0     28 30 06 F1 | 	add	local06, #40
302f4     18 33 02 F6 | 	mov	local07, local06
302f8     1C 4E 05 F1 | 	add	fp, #28
302fc     A7 34 02 FB | 	rdlong	local08, fp
30300     20 4E 85 F1 | 	sub	fp, #32
30304     01 36 06 F6 | 	mov	local09, #1
30308     19 15 02 F6 | 	mov	arg02, local07
3030c     1A 17 02 F6 | 	mov	arg03, local08
30310     01 18 06 F6 | 	mov	arg04, #1
30314     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
30318     FD 38 0A F6 | 	mov	local10, result1 wz
3031c     1C 00 90 AD |  if_e	jmp	#LR__4797
30320     04 4E 05 F1 | 	add	fp, #4
30324     A7 38 02 FB | 	rdlong	local10, fp
30328     04 4E 85 F1 | 	sub	fp, #4
3032c     11 38 06 F1 | 	add	local10, #17
30330     1C 03 48 FC | 	wrbyte	#1, local10
30334                 | ' 				fp->fptr < fp->obj.objsize &&
30334                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30334                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30334     01 FA 05 F6 | 	mov	result1, #1
30338     E0 01 90 FD | 	jmp	#LR__4803
3033c                 | LR__4797
3033c     04 4E 05 F1 | 	add	fp, #4
30340     A7 18 02 FB | 	rdlong	arg04, fp
30344     1C 4E 05 F1 | 	add	fp, #28
30348     A7 FA 01 FB | 	rdlong	result1, fp
3034c     20 4E 85 F1 | 	sub	fp, #32
30350     1C 18 06 F1 | 	add	arg04, #28
30354     0C FB 61 FC | 	wrlong	result1, arg04
30358                 | LR__4798
30358     04 4E 05 F1 | 	add	fp, #4
3035c     A7 FA 01 FB | 	rdlong	result1, fp
30360     14 FA 05 F1 | 	add	result1, #20
30364     FD FA 01 FB | 	rdlong	result1, result1
30368     FF FB 05 F5 | 	and	result1, #511
3036c     09 3A C6 F9 | 	decod	local11, #9
30370     FD 3A 82 F1 | 	sub	local11, result1
30374     20 4E 05 F1 | 	add	fp, #32
30378     A7 3A 62 FC | 	wrlong	local11, fp
3037c     18 4E 85 F1 | 	sub	fp, #24
30380     A7 FA 01 FB | 	rdlong	result1, fp
30384     0C 4E 85 F1 | 	sub	fp, #12
30388     FD 3A 1A F2 | 	cmp	local11, result1 wcz
3038c     0C 4E 05 11 |  if_a	add	fp, #12
30390     A7 3A 02 1B |  if_a	rdlong	local11, fp
30394     18 4E 05 11 |  if_a	add	fp, #24
30398     A7 3A 62 1C |  if_a	wrlong	local11, fp
3039c     24 4E 85 11 |  if_a	sub	fp, #36
303a0     04 4E 05 F1 | 	add	fp, #4
303a4     A7 3A 02 FB | 	rdlong	local11, fp
303a8     1D 13 02 F6 | 	mov	arg01, local11
303ac     28 12 06 F1 | 	add	arg01, #40
303b0     14 3A 06 F1 | 	add	local11, #20
303b4     1D 3B 02 FB | 	rdlong	local11, local11
303b8     FF 3B 06 F5 | 	and	local11, #511
303bc     1D 13 02 F1 | 	add	arg01, local11
303c0     2C 4E 05 F1 | 	add	fp, #44
303c4     A7 14 02 FB | 	rdlong	arg02, fp
303c8     0C 4E 85 F1 | 	sub	fp, #12
303cc     A7 16 02 FB | 	rdlong	arg03, fp
303d0     24 4E 85 F1 | 	sub	fp, #36
303d4     5C 3A BF FD | 	call	#__system____builtin_memmove
303d8     04 4E 05 F1 | 	add	fp, #4
303dc     A7 FA 01 FB | 	rdlong	result1, fp
303e0     FD 3A 02 F6 | 	mov	local11, result1
303e4     04 4E 85 F1 | 	sub	fp, #4
303e8     10 FA 05 F1 | 	add	result1, #16
303ec     FD FA C1 FA | 	rdbyte	result1, result1
303f0     80 FA 45 F5 | 	or	result1, #128
303f4     10 3A 06 F1 | 	add	local11, #16
303f8     1D FB 41 FC | 	wrbyte	result1, local11
303fc                 | LR__4799
303fc     0C 4E 05 F1 | 	add	fp, #12
30400     A7 3A 02 FB | 	rdlong	local11, fp
30404     18 4E 05 F1 | 	add	fp, #24
30408     A7 FA 01 FB | 	rdlong	result1, fp
3040c     FD 3A 82 F1 | 	sub	local11, result1
30410     18 4E 85 F1 | 	sub	fp, #24
30414     A7 3A 62 FC | 	wrlong	local11, fp
30418     04 4E 05 F1 | 	add	fp, #4
3041c     A7 3C 02 FB | 	rdlong	local12, fp
30420     1E 3B 02 FB | 	rdlong	local11, local12
30424     14 4E 05 F1 | 	add	fp, #20
30428     A7 3E 02 FB | 	rdlong	local13, fp
3042c     1F 3B 02 F1 | 	add	local11, local13
30430     1E 3B 62 FC | 	wrlong	local11, local12
30434     0C 4E 05 F1 | 	add	fp, #12
30438     A7 3A 02 FB | 	rdlong	local11, fp
3043c     0C 4E 85 F1 | 	sub	fp, #12
30440     A7 40 02 FB | 	rdlong	local14, fp
30444     20 3B 02 F1 | 	add	local11, local14
30448     0C 4E 05 F1 | 	add	fp, #12
3044c     A7 3A 62 FC | 	wrlong	local11, fp
30450     2C 4E 85 F1 | 	sub	fp, #44
30454     A7 42 02 FB | 	rdlong	local15, fp
30458     21 3B 02 F6 | 	mov	local11, local15
3045c     14 42 06 F1 | 	add	local15, #20
30460     21 43 02 FB | 	rdlong	local15, local15
30464     20 4E 05 F1 | 	add	fp, #32
30468     A7 44 02 FB | 	rdlong	local16, fp
3046c     22 43 02 F1 | 	add	local15, local16
30470     14 3A 06 F1 | 	add	local11, #20
30474     1D 43 62 FC | 	wrlong	local15, local11
30478     20 4E 85 F1 | 	sub	fp, #32
3047c     A7 46 02 FB | 	rdlong	local17, fp
30480     23 3B 02 F6 | 	mov	local11, local17
30484     23 49 02 F6 | 	mov	local18, local17
30488     04 4E 85 F1 | 	sub	fp, #4
3048c     14 46 06 F1 | 	add	local17, #20
30490     23 4B 02 FB | 	rdlong	local19, local17
30494     0C 48 06 F1 | 	add	local18, #12
30498     24 4D 02 FB | 	rdlong	local20, local18
3049c     26 4B 1A F2 | 	cmp	local19, local20 wcz
304a0     24 00 90 ED |  if_be	jmp	#LR__4800
304a4     04 4E 05 F1 | 	add	fp, #4
304a8     A7 2E 02 FB | 	rdlong	local05, fp
304ac     04 4E 85 F1 | 	sub	fp, #4
304b0     17 2B 02 F6 | 	mov	local03, local05
304b4     14 2A 06 F1 | 	add	local03, #20
304b8     15 2D 02 FB | 	rdlong	local04, local03
304bc     14 2A 86 F1 | 	sub	local03, #20
304c0     16 4F 02 F6 | 	mov	local21, local04
304c4     20 00 90 FD | 	jmp	#LR__4801
304c8                 | LR__4800
304c8     04 4E 05 F1 | 	add	fp, #4
304cc     A7 32 02 FB | 	rdlong	local07, fp
304d0     04 4E 85 F1 | 	sub	fp, #4
304d4     19 39 02 F6 | 	mov	local10, local07
304d8     0C 38 06 F1 | 	add	local10, #12
304dc     1C 35 02 FB | 	rdlong	local08, local10
304e0     0C 38 86 F1 | 	sub	local10, #12
304e4     1A 4F 02 F6 | 	mov	local21, local08
304e8                 | LR__4801
304e8     0C 3A 06 F1 | 	add	local11, #12
304ec     1D 4F 62 FC | 	wrlong	local21, local11
304f0     5C F9 9F FD | 	jmp	#LR__4783
304f4                 | LR__4802
304f4     04 4E 05 F1 | 	add	fp, #4
304f8     A7 3C 02 FB | 	rdlong	local12, fp
304fc     1E 27 02 F6 | 	mov	local01, local12
30500     04 4E 85 F1 | 	sub	fp, #4
30504     10 3C 06 F1 | 	add	local12, #16
30508     1E 3B C2 FA | 	rdbyte	local11, local12
3050c     40 3A 46 F5 | 	or	local11, #64
30510     10 26 06 F1 | 	add	local01, #16
30514     13 3B 42 FC | 	wrbyte	local11, local01
30518                 | ' 
30518                 | ' 
30518                 | ' 
30518                 | ' 
30518                 | ' 
30518                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
30518                 | ' 		fp->flag |=  0x80 ;
30518                 | ' 
30518                 | ' 	}
30518                 | ' 
30518                 | ' 	fp->flag |=  0x40 ;
30518                 | ' 
30518                 | ' 	return FR_OK ;
30518     00 FA 05 F6 | 	mov	result1, #0
3051c                 | LR__4803
3051c     A7 F0 03 F6 | 	mov	ptra, fp
30520     B2 00 A0 FD | 	call	#popregs_
30524                 | _fatfs_cc_f_write_ret
30524     2D 00 64 FD | 	ret
30528                 | 
30528                 | _fatfs_cc_f_sync
30528     00 4A 05 F6 | 	mov	COUNT_, #0
3052c     A8 00 A0 FD | 	call	#pushregs_
30530     18 F0 07 F1 | 	add	ptra, #24
30534     04 4E 05 F1 | 	add	fp, #4
30538     A7 12 62 FC | 	wrlong	arg01, fp
3053c     08 4E 05 F1 | 	add	fp, #8
30540     A7 14 02 F6 | 	mov	arg02, fp
30544     0C 4E 85 F1 | 	sub	fp, #12
30548     D0 E8 BF FD | 	call	#_fatfs_cc_validate
3054c     08 4E 05 F1 | 	add	fp, #8
30550     A7 FA 61 FC | 	wrlong	result1, fp
30554     08 4E 85 F1 | 	sub	fp, #8
30558     00 FA 0D F2 | 	cmp	result1, #0 wz
3055c     C0 01 90 5D |  if_ne	jmp	#LR__4813
30560     04 4E 05 F1 | 	add	fp, #4
30564     A7 18 02 FB | 	rdlong	arg04, fp
30568     04 4E 85 F1 | 	sub	fp, #4
3056c     10 18 06 F1 | 	add	arg04, #16
30570     0C 19 C2 FA | 	rdbyte	arg04, arg04
30574     40 18 CE F7 | 	test	arg04, #64 wz
30578     A4 01 90 AD |  if_e	jmp	#LR__4812
3057c     04 4E 05 F1 | 	add	fp, #4
30580     A7 18 02 FB | 	rdlong	arg04, fp
30584     04 4E 85 F1 | 	sub	fp, #4
30588     10 18 06 F1 | 	add	arg04, #16
3058c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30590     80 18 CE F7 | 	test	arg04, #128 wz
30594     64 00 90 AD |  if_e	jmp	#LR__4810
30598     0C 4E 05 F1 | 	add	fp, #12
3059c     A7 18 02 FB | 	rdlong	arg04, fp
305a0     01 18 06 F1 | 	add	arg04, #1
305a4     0C 13 C2 FA | 	rdbyte	arg01, arg04
305a8     08 4E 85 F1 | 	sub	fp, #8
305ac     A7 18 02 FB | 	rdlong	arg04, fp
305b0     0C 15 02 F6 | 	mov	arg02, arg04
305b4     28 14 06 F1 | 	add	arg02, #40
305b8     04 4E 85 F1 | 	sub	fp, #4
305bc     1C 18 06 F1 | 	add	arg04, #28
305c0     0C 17 02 FB | 	rdlong	arg03, arg04
305c4     01 18 06 F6 | 	mov	arg04, #1
305c8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
305cc     00 FA 0D F2 | 	cmp	result1, #0 wz
305d0     01 FA 05 56 |  if_ne	mov	result1, #1
305d4     54 01 90 5D |  if_ne	jmp	#LR__4814
305d8     04 4E 05 F1 | 	add	fp, #4
305dc     A7 18 02 FB | 	rdlong	arg04, fp
305e0     0C 17 02 F6 | 	mov	arg03, arg04
305e4     04 4E 85 F1 | 	sub	fp, #4
305e8     10 18 06 F1 | 	add	arg04, #16
305ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
305f0     7F 18 06 F5 | 	and	arg04, #127
305f4     10 16 06 F1 | 	add	arg03, #16
305f8     0B 19 42 FC | 	wrbyte	arg04, arg03
305fc                 | LR__4810
305fc     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
30600     10 4E 05 F1 | 	add	fp, #16
30604     A7 FA 61 FC | 	wrlong	result1, fp
30608     04 4E 85 F1 | 	sub	fp, #4
3060c     A7 12 02 FB | 	rdlong	arg01, fp
30610     08 4E 85 F1 | 	sub	fp, #8
30614     A7 18 02 FB | 	rdlong	arg04, fp
30618     04 4E 85 F1 | 	sub	fp, #4
3061c     20 18 06 F1 | 	add	arg04, #32
30620     0C 15 02 FB | 	rdlong	arg02, arg04
30624     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
30628     08 4E 05 F1 | 	add	fp, #8
3062c     A7 FA 61 FC | 	wrlong	result1, fp
30630     08 4E 85 F1 | 	sub	fp, #8
30634     00 FA 0D F2 | 	cmp	result1, #0 wz
30638     E4 00 90 5D |  if_ne	jmp	#LR__4811
3063c     04 4E 05 F1 | 	add	fp, #4
30640     A7 18 02 FB | 	rdlong	arg04, fp
30644     24 18 06 F1 | 	add	arg04, #36
30648     0C 19 02 FB | 	rdlong	arg04, arg04
3064c     10 4E 05 F1 | 	add	fp, #16
30650     A7 18 62 FC | 	wrlong	arg04, fp
30654     0C 17 02 F6 | 	mov	arg03, arg04
30658     0B 16 06 F1 | 	add	arg03, #11
3065c     0B 17 C2 FA | 	rdbyte	arg03, arg03
30660     20 16 46 F5 | 	or	arg03, #32
30664     0B 18 06 F1 | 	add	arg04, #11
30668     0C 17 42 FC | 	wrbyte	arg03, arg04
3066c     10 4E 85 F1 | 	sub	fp, #16
30670     A7 18 02 FB | 	rdlong	arg04, fp
30674     0C 13 02 FB | 	rdlong	arg01, arg04
30678     10 4E 05 F1 | 	add	fp, #16
3067c     A7 14 02 FB | 	rdlong	arg02, fp
30680     14 4E 85 F1 | 	sub	fp, #20
30684     08 18 06 F1 | 	add	arg04, #8
30688     0C 17 02 FB | 	rdlong	arg03, arg04
3068c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
30690     14 4E 05 F1 | 	add	fp, #20
30694     A7 12 02 FB | 	rdlong	arg01, fp
30698     1C 12 06 F1 | 	add	arg01, #28
3069c     10 4E 85 F1 | 	sub	fp, #16
306a0     A7 18 02 FB | 	rdlong	arg04, fp
306a4     0C 18 06 F1 | 	add	arg04, #12
306a8     0C 15 02 FB | 	rdlong	arg02, arg04
306ac     09 15 62 FC | 	wrlong	arg02, arg01
306b0     10 4E 05 F1 | 	add	fp, #16
306b4     A7 12 02 FB | 	rdlong	arg01, fp
306b8     16 12 06 F1 | 	add	arg01, #22
306bc     04 4E 85 F1 | 	sub	fp, #4
306c0     A7 14 02 FB | 	rdlong	arg02, fp
306c4     09 15 62 FC | 	wrlong	arg02, arg01
306c8     04 4E 05 F1 | 	add	fp, #4
306cc     A7 12 02 FB | 	rdlong	arg01, fp
306d0     12 12 06 F1 | 	add	arg01, #18
306d4     09 01 58 FC | 	wrword	#0, arg01
306d8     08 4E 85 F1 | 	sub	fp, #8
306dc     A7 18 02 FB | 	rdlong	arg04, fp
306e0     03 18 06 F1 | 	add	arg04, #3
306e4     0C 03 48 FC | 	wrbyte	#1, arg04
306e8     A7 12 02 FB | 	rdlong	arg01, fp
306ec     0C 4E 85 F1 | 	sub	fp, #12
306f0     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
306f4     08 4E 05 F1 | 	add	fp, #8
306f8     A7 FA 61 FC | 	wrlong	result1, fp
306fc     04 4E 85 F1 | 	sub	fp, #4
30700     A7 18 02 FB | 	rdlong	arg04, fp
30704     0C 17 02 F6 | 	mov	arg03, arg04
30708     04 4E 85 F1 | 	sub	fp, #4
3070c     10 18 06 F1 | 	add	arg04, #16
30710     0C 19 C2 FA | 	rdbyte	arg04, arg04
30714     BF 18 06 F5 | 	and	arg04, #191
30718     10 16 06 F1 | 	add	arg03, #16
3071c     0B 19 42 FC | 	wrbyte	arg04, arg03
30720                 | LR__4811
30720                 | LR__4812
30720                 | LR__4813
30720                 | ' 					dir = fp->dir_ptr;
30720                 | ' 					dir[ 11 ] |=  0x20 ;
30720                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30720                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30720                 | ' 					st_dword(dir +  22 , tm);
30720                 | ' 					st_word(dir +  18 , 0);
30720                 | ' 					fs->wflag = 1;
30720                 | ' 					res = sync_fs(fs);
30720                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30720                 | ' 				}
30720                 | ' 			}
30720                 | ' 		}
30720                 | ' 	}
30720                 | ' 
30720                 | ' 	return res ;
30720     08 4E 05 F1 | 	add	fp, #8
30724     A7 FA 01 FB | 	rdlong	result1, fp
30728     08 4E 85 F1 | 	sub	fp, #8
3072c                 | LR__4814
3072c     A7 F0 03 F6 | 	mov	ptra, fp
30730     B2 00 A0 FD | 	call	#popregs_
30734                 | _fatfs_cc_f_sync_ret
30734     2D 00 64 FD | 	ret
30738                 | 
30738                 | _fatfs_cc_f_close
30738     01 4A 05 F6 | 	mov	COUNT_, #1
3073c     A8 00 A0 FD | 	call	#pushregs_
30740     10 F0 07 F1 | 	add	ptra, #16
30744     04 4E 05 F1 | 	add	fp, #4
30748     A7 12 62 FC | 	wrlong	arg01, fp
3074c     04 4E 85 F1 | 	sub	fp, #4
30750     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
30754     08 4E 05 F1 | 	add	fp, #8
30758     A7 FA 61 FC | 	wrlong	result1, fp
3075c     08 4E 85 F1 | 	sub	fp, #8
30760     00 FA 0D F2 | 	cmp	result1, #0 wz
30764     38 00 90 5D |  if_ne	jmp	#LR__4820
30768     04 4E 05 F1 | 	add	fp, #4
3076c     A7 12 02 FB | 	rdlong	arg01, fp
30770     08 4E 05 F1 | 	add	fp, #8
30774     A7 14 02 F6 | 	mov	arg02, fp
30778     0C 4E 85 F1 | 	sub	fp, #12
3077c     9C E6 BF FD | 	call	#_fatfs_cc_validate
30780     08 4E 05 F1 | 	add	fp, #8
30784     A7 FA 61 FC | 	wrlong	result1, fp
30788     08 4E 85 F1 | 	sub	fp, #8
3078c     00 FA 0D F2 | 	cmp	result1, #0 wz
30790     04 4E 05 A1 |  if_e	add	fp, #4
30794     A7 26 02 AB |  if_e	rdlong	local01, fp
30798     04 4E 85 A1 |  if_e	sub	fp, #4
3079c     13 01 68 AC |  if_e	wrlong	#0, local01
307a0                 | LR__4820
307a0                 | ' 
307a0                 | ' 
307a0                 | ' 
307a0                 | ' 
307a0                 | ' 			fp->obj.fs = 0;
307a0                 | ' #line 4192 "ff.c"
307a0                 | ' 		}
307a0                 | ' 	}
307a0                 | ' 	return res;
307a0     08 4E 05 F1 | 	add	fp, #8
307a4     A7 FA 01 FB | 	rdlong	result1, fp
307a8     08 4E 85 F1 | 	sub	fp, #8
307ac     A7 F0 03 F6 | 	mov	ptra, fp
307b0     B2 00 A0 FD | 	call	#popregs_
307b4                 | _fatfs_cc_f_close_ret
307b4     2D 00 64 FD | 	ret
307b8                 | 
307b8                 | _fatfs_cc_f_lseek
307b8     00 4A 05 F6 | 	mov	COUNT_, #0
307bc     A8 00 A0 FD | 	call	#pushregs_
307c0     24 F0 07 F1 | 	add	ptra, #36
307c4     04 4E 05 F1 | 	add	fp, #4
307c8     A7 12 62 FC | 	wrlong	arg01, fp
307cc     04 4E 05 F1 | 	add	fp, #4
307d0     A7 14 62 FC | 	wrlong	arg02, fp
307d4     04 4E 85 F1 | 	sub	fp, #4
307d8     A7 12 02 FB | 	rdlong	arg01, fp
307dc     0C 4E 05 F1 | 	add	fp, #12
307e0     A7 14 02 F6 | 	mov	arg02, fp
307e4     10 4E 85 F1 | 	sub	fp, #16
307e8     30 E6 BF FD | 	call	#_fatfs_cc_validate
307ec     0C 4E 05 F1 | 	add	fp, #12
307f0     A7 FA 61 FC | 	wrlong	result1, fp
307f4     0C 4E 85 F1 | 	sub	fp, #12
307f8     00 FA 0D F2 | 	cmp	result1, #0 wz
307fc     1C 00 90 5D |  if_ne	jmp	#LR__4830
30800     04 4E 05 F1 | 	add	fp, #4
30804     A7 18 02 FB | 	rdlong	arg04, fp
30808     11 18 06 F1 | 	add	arg04, #17
3080c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30810     08 4E 05 F1 | 	add	fp, #8
30814     A7 18 62 FC | 	wrlong	arg04, fp
30818     0C 4E 85 F1 | 	sub	fp, #12
3081c                 | LR__4830
3081c     0C 4E 05 F1 | 	add	fp, #12
30820     A7 18 0A FB | 	rdlong	arg04, fp wz
30824     0C 4E 85 F1 | 	sub	fp, #12
30828     0C 4E 05 51 |  if_ne	add	fp, #12
3082c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30830     0C 4E 85 51 |  if_ne	sub	fp, #12
30834     40 06 90 5D |  if_ne	jmp	#LR__4853
30838     04 4E 05 F1 | 	add	fp, #4
3083c     A7 18 02 FB | 	rdlong	arg04, fp
30840     04 4E 05 F1 | 	add	fp, #4
30844     A7 16 02 FB | 	rdlong	arg03, fp
30848     08 4E 85 F1 | 	sub	fp, #8
3084c     0C 18 06 F1 | 	add	arg04, #12
30850     0C 19 02 FB | 	rdlong	arg04, arg04
30854     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
30858     3C 00 90 ED |  if_be	jmp	#LR__4831
3085c     04 4E 05 F1 | 	add	fp, #4
30860     A7 16 02 FB | 	rdlong	arg03, fp
30864     04 4E 85 F1 | 	sub	fp, #4
30868     10 16 06 F1 | 	add	arg03, #16
3086c     0B 17 C2 FA | 	rdbyte	arg03, arg03
30870     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
30874     02 16 CE F7 | 	test	arg03, #2 wz
30878     1C 00 90 5D |  if_ne	jmp	#LR__4831
3087c     04 4E 05 F1 | 	add	fp, #4
30880     A7 16 02 FB | 	rdlong	arg03, fp
30884     0C 16 06 F1 | 	add	arg03, #12
30888     0B 17 02 FB | 	rdlong	arg03, arg03
3088c     04 4E 05 F1 | 	add	fp, #4
30890     A7 16 62 FC | 	wrlong	arg03, fp
30894     08 4E 85 F1 | 	sub	fp, #8
30898                 | LR__4831
30898     04 4E 05 F1 | 	add	fp, #4
3089c     A7 16 02 FB | 	rdlong	arg03, fp
308a0     14 16 06 F1 | 	add	arg03, #20
308a4     0B 17 02 FB | 	rdlong	arg03, arg03
308a8     1C 4E 05 F1 | 	add	fp, #28
308ac     A7 16 62 FC | 	wrlong	arg03, fp
308b0     1C 4E 85 F1 | 	sub	fp, #28
308b4     A7 16 02 FB | 	rdlong	arg03, fp
308b8     18 4E 05 F1 | 	add	fp, #24
308bc     A7 00 68 FC | 	wrlong	#0, fp
308c0     14 16 06 F1 | 	add	arg03, #20
308c4     0B 01 68 FC | 	wrlong	#0, arg03
308c8     14 4E 85 F1 | 	sub	fp, #20
308cc     A7 16 02 FB | 	rdlong	arg03, fp
308d0     08 4E 85 F1 | 	sub	fp, #8
308d4     01 16 16 F2 | 	cmp	arg03, #1 wc
308d8     E4 03 90 CD |  if_b	jmp	#LR__4847
308dc     10 4E 05 F1 | 	add	fp, #16
308e0     A7 16 02 FB | 	rdlong	arg03, fp
308e4     0A 16 06 F1 | 	add	arg03, #10
308e8     0B 19 E2 FA | 	rdword	arg04, arg03
308ec     09 18 66 F0 | 	shl	arg04, #9
308f0     08 4E 05 F1 | 	add	fp, #8
308f4     A7 18 62 FC | 	wrlong	arg04, fp
308f8     08 4E 05 F1 | 	add	fp, #8
308fc     A7 18 02 FB | 	rdlong	arg04, fp
30900     20 4E 85 F1 | 	sub	fp, #32
30904     01 18 16 F2 | 	cmp	arg04, #1 wc
30908     AC 00 90 CD |  if_b	jmp	#LR__4832
3090c     08 4E 05 F1 | 	add	fp, #8
30910     A7 18 02 FB | 	rdlong	arg04, fp
30914     01 18 86 F1 | 	sub	arg04, #1
30918     10 4E 05 F1 | 	add	fp, #16
3091c     A7 16 02 FB | 	rdlong	arg03, fp
30920     0B 19 12 FD | 	qdiv	arg04, arg03
30924     08 4E 05 F1 | 	add	fp, #8
30928     A7 FA 01 FB | 	rdlong	result1, fp
3092c     01 FA 85 F1 | 	sub	result1, #1
30930     18 18 62 FD | 	getqx	arg04
30934     0B FB 11 FD | 	qdiv	result1, arg03
30938     20 4E 85 F1 | 	sub	fp, #32
3093c     18 16 62 FD | 	getqx	arg03
30940     0B 19 12 F2 | 	cmp	arg04, arg03 wc
30944     70 00 90 CD |  if_b	jmp	#LR__4832
30948     04 4E 05 F1 | 	add	fp, #4
3094c     A7 16 02 FB | 	rdlong	arg03, fp
30950     1C 4E 05 F1 | 	add	fp, #28
30954     A7 FA 01 FB | 	rdlong	result1, fp
30958     01 FA 85 F1 | 	sub	result1, #1
3095c     08 4E 85 F1 | 	sub	fp, #8
30960     A7 18 02 FB | 	rdlong	arg04, fp
30964     01 18 86 F1 | 	sub	arg04, #1
30968     0C FB 21 F5 | 	andn	result1, arg04
3096c     14 16 06 F1 | 	add	arg03, #20
30970     0B FB 61 FC | 	wrlong	result1, arg03
30974     10 4E 85 F1 | 	sub	fp, #16
30978     A7 16 02 FB | 	rdlong	arg03, fp
3097c     04 4E 85 F1 | 	sub	fp, #4
30980     A7 18 02 FB | 	rdlong	arg04, fp
30984     14 18 06 F1 | 	add	arg04, #20
30988     0C 19 02 FB | 	rdlong	arg04, arg04
3098c     0C 17 82 F1 | 	sub	arg03, arg04
30990     04 4E 05 F1 | 	add	fp, #4
30994     A7 16 62 FC | 	wrlong	arg03, fp
30998     04 4E 85 F1 | 	sub	fp, #4
3099c     A7 16 02 FB | 	rdlong	arg03, fp
309a0     18 16 06 F1 | 	add	arg03, #24
309a4     0B 17 02 FB | 	rdlong	arg03, arg03
309a8     10 4E 05 F1 | 	add	fp, #16
309ac     A7 16 62 FC | 	wrlong	arg03, fp
309b0     14 4E 85 F1 | 	sub	fp, #20
309b4     D0 00 90 FD | 	jmp	#LR__4836
309b8                 | LR__4832
309b8     04 4E 05 F1 | 	add	fp, #4
309bc     A7 16 02 FB | 	rdlong	arg03, fp
309c0     08 16 06 F1 | 	add	arg03, #8
309c4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
309c8     10 4E 05 F1 | 	add	fp, #16
309cc     A7 16 62 FC | 	wrlong	arg03, fp
309d0     14 4E 85 F1 | 	sub	fp, #20
309d4     94 00 90 5D |  if_ne	jmp	#LR__4835
309d8     04 4E 05 F1 | 	add	fp, #4
309dc     A7 12 02 FB | 	rdlong	arg01, fp
309e0     04 4E 85 F1 | 	sub	fp, #4
309e4     00 14 06 F6 | 	mov	arg02, #0
309e8     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
309ec     14 4E 05 F1 | 	add	fp, #20
309f0     A7 FA 61 FC | 	wrlong	result1, fp
309f4     14 4E 85 F1 | 	sub	fp, #20
309f8     01 FA 0D F2 | 	cmp	result1, #1 wz
309fc     1C 00 90 5D |  if_ne	jmp	#LR__4833
30a00     04 4E 05 F1 | 	add	fp, #4
30a04     A7 16 02 FB | 	rdlong	arg03, fp
30a08     04 4E 85 F1 | 	sub	fp, #4
30a0c     11 16 06 F1 | 	add	arg03, #17
30a10     0B 05 48 FC | 	wrbyte	#2, arg03
30a14     02 FA 05 F6 | 	mov	result1, #2
30a18     5C 04 90 FD | 	jmp	#LR__4853
30a1c                 | LR__4833
30a1c     14 4E 05 F1 | 	add	fp, #20
30a20     A7 FA 01 FB | 	rdlong	result1, fp
30a24     14 4E 85 F1 | 	sub	fp, #20
30a28     FF FF 7F FF 
30a2c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30a30     1C 00 90 5D |  if_ne	jmp	#LR__4834
30a34     04 4E 05 F1 | 	add	fp, #4
30a38     A7 16 02 FB | 	rdlong	arg03, fp
30a3c     04 4E 85 F1 | 	sub	fp, #4
30a40     11 16 06 F1 | 	add	arg03, #17
30a44     0B 03 48 FC | 	wrbyte	#1, arg03
30a48     01 FA 05 F6 | 	mov	result1, #1
30a4c     28 04 90 FD | 	jmp	#LR__4853
30a50                 | LR__4834
30a50     04 4E 05 F1 | 	add	fp, #4
30a54     A7 16 02 FB | 	rdlong	arg03, fp
30a58     10 4E 05 F1 | 	add	fp, #16
30a5c     A7 18 02 FB | 	rdlong	arg04, fp
30a60     14 4E 85 F1 | 	sub	fp, #20
30a64     08 16 06 F1 | 	add	arg03, #8
30a68     0B 19 62 FC | 	wrlong	arg04, arg03
30a6c                 | LR__4835
30a6c     04 4E 05 F1 | 	add	fp, #4
30a70     A7 16 02 FB | 	rdlong	arg03, fp
30a74     10 4E 05 F1 | 	add	fp, #16
30a78     A7 18 02 FB | 	rdlong	arg04, fp
30a7c     14 4E 85 F1 | 	sub	fp, #20
30a80     18 16 06 F1 | 	add	arg03, #24
30a84     0B 19 62 FC | 	wrlong	arg04, arg03
30a88                 | LR__4836
30a88     14 4E 05 F1 | 	add	fp, #20
30a8c     A7 16 0A FB | 	rdlong	arg03, fp wz
30a90     14 4E 85 F1 | 	sub	fp, #20
30a94     28 02 90 AD |  if_e	jmp	#LR__4846
30a98                 | ' 				while (ofs > bcs) {
30a98                 | LR__4837
30a98     08 4E 05 F1 | 	add	fp, #8
30a9c     A7 18 02 FB | 	rdlong	arg04, fp
30aa0     10 4E 05 F1 | 	add	fp, #16
30aa4     A7 16 02 FB | 	rdlong	arg03, fp
30aa8     18 4E 85 F1 | 	sub	fp, #24
30aac     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
30ab0     68 01 90 ED |  if_be	jmp	#LR__4843
30ab4     08 4E 05 F1 | 	add	fp, #8
30ab8     A7 18 02 FB | 	rdlong	arg04, fp
30abc     10 4E 05 F1 | 	add	fp, #16
30ac0     A7 16 02 FB | 	rdlong	arg03, fp
30ac4     0B 19 82 F1 | 	sub	arg04, arg03
30ac8     10 4E 85 F1 | 	sub	fp, #16
30acc     A7 18 62 FC | 	wrlong	arg04, fp
30ad0     04 4E 85 F1 | 	sub	fp, #4
30ad4     A7 18 02 FB | 	rdlong	arg04, fp
30ad8     0C FB 01 F6 | 	mov	result1, arg04
30adc     14 18 06 F1 | 	add	arg04, #20
30ae0     0C 19 02 FB | 	rdlong	arg04, arg04
30ae4     14 4E 05 F1 | 	add	fp, #20
30ae8     A7 16 02 FB | 	rdlong	arg03, fp
30aec     0B 19 02 F1 | 	add	arg04, arg03
30af0     14 FA 05 F1 | 	add	result1, #20
30af4     FD 18 62 FC | 	wrlong	arg04, result1
30af8     14 4E 85 F1 | 	sub	fp, #20
30afc     A7 16 02 FB | 	rdlong	arg03, fp
30b00     04 4E 85 F1 | 	sub	fp, #4
30b04     10 16 06 F1 | 	add	arg03, #16
30b08     0B 17 C2 FA | 	rdbyte	arg03, arg03
30b0c     02 16 CE F7 | 	test	arg03, #2 wz
30b10     3C 00 90 AD |  if_e	jmp	#LR__4838
30b14     04 4E 05 F1 | 	add	fp, #4
30b18     A7 12 02 FB | 	rdlong	arg01, fp
30b1c     10 4E 05 F1 | 	add	fp, #16
30b20     A7 14 02 FB | 	rdlong	arg02, fp
30b24     14 4E 85 F1 | 	sub	fp, #20
30b28     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
30b2c     14 4E 05 F1 | 	add	fp, #20
30b30     A7 FA 61 FC | 	wrlong	result1, fp
30b34     00 FA 4D F2 | 	cmps	result1, #0 wz
30b38     14 4E 85 F1 | 	sub	fp, #20
30b3c     08 4E 05 A1 |  if_e	add	fp, #8
30b40     A7 00 68 AC |  if_e	wrlong	#0, fp
30b44     08 4E 85 A1 |  if_e	sub	fp, #8
30b48                 | ' 							ofs = 0; break;
30b48     D0 00 90 AD |  if_e	jmp	#LR__4843
30b4c     24 00 90 FD | 	jmp	#LR__4839
30b50                 | LR__4838
30b50     04 4E 05 F1 | 	add	fp, #4
30b54     A7 12 02 FB | 	rdlong	arg01, fp
30b58     10 4E 05 F1 | 	add	fp, #16
30b5c     A7 14 02 FB | 	rdlong	arg02, fp
30b60     14 4E 85 F1 | 	sub	fp, #20
30b64     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
30b68     14 4E 05 F1 | 	add	fp, #20
30b6c     A7 FA 61 FC | 	wrlong	result1, fp
30b70     14 4E 85 F1 | 	sub	fp, #20
30b74                 | LR__4839
30b74     14 4E 05 F1 | 	add	fp, #20
30b78     A7 16 02 FB | 	rdlong	arg03, fp
30b7c     14 4E 85 F1 | 	sub	fp, #20
30b80     FF FF 7F FF 
30b84     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
30b88     1C 00 90 5D |  if_ne	jmp	#LR__4840
30b8c     04 4E 05 F1 | 	add	fp, #4
30b90     A7 16 02 FB | 	rdlong	arg03, fp
30b94     04 4E 85 F1 | 	sub	fp, #4
30b98     11 16 06 F1 | 	add	arg03, #17
30b9c     0B 03 48 FC | 	wrbyte	#1, arg03
30ba0     01 FA 05 F6 | 	mov	result1, #1
30ba4     D0 02 90 FD | 	jmp	#LR__4853
30ba8                 | LR__4840
30ba8     14 4E 05 F1 | 	add	fp, #20
30bac     A7 16 02 FB | 	rdlong	arg03, fp
30bb0     14 4E 85 F1 | 	sub	fp, #20
30bb4     02 16 16 F2 | 	cmp	arg03, #2 wc
30bb8     24 00 90 CD |  if_b	jmp	#LR__4841
30bbc     10 4E 05 F1 | 	add	fp, #16
30bc0     A7 18 02 FB | 	rdlong	arg04, fp
30bc4     04 4E 05 F1 | 	add	fp, #4
30bc8     A7 16 02 FB | 	rdlong	arg03, fp
30bcc     14 4E 85 F1 | 	sub	fp, #20
30bd0     18 18 06 F1 | 	add	arg04, #24
30bd4     0C 19 02 FB | 	rdlong	arg04, arg04
30bd8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
30bdc     1C 00 90 CD |  if_b	jmp	#LR__4842
30be0                 | LR__4841
30be0     04 4E 05 F1 | 	add	fp, #4
30be4     A7 16 02 FB | 	rdlong	arg03, fp
30be8     04 4E 85 F1 | 	sub	fp, #4
30bec     11 16 06 F1 | 	add	arg03, #17
30bf0     0B 05 48 FC | 	wrbyte	#2, arg03
30bf4     02 FA 05 F6 | 	mov	result1, #2
30bf8     7C 02 90 FD | 	jmp	#LR__4853
30bfc                 | LR__4842
30bfc     04 4E 05 F1 | 	add	fp, #4
30c00     A7 18 02 FB | 	rdlong	arg04, fp
30c04     10 4E 05 F1 | 	add	fp, #16
30c08     A7 16 02 FB | 	rdlong	arg03, fp
30c0c     14 4E 85 F1 | 	sub	fp, #20
30c10     18 18 06 F1 | 	add	arg04, #24
30c14     0C 17 62 FC | 	wrlong	arg03, arg04
30c18     7C FE 9F FD | 	jmp	#LR__4837
30c1c                 | LR__4843
30c1c     04 4E 05 F1 | 	add	fp, #4
30c20     A7 16 02 FB | 	rdlong	arg03, fp
30c24     0B 13 02 F6 | 	mov	arg01, arg03
30c28     14 16 06 F1 | 	add	arg03, #20
30c2c     0B 15 02 FB | 	rdlong	arg02, arg03
30c30     04 4E 05 F1 | 	add	fp, #4
30c34     A7 16 02 FB | 	rdlong	arg03, fp
30c38     0B 15 02 F1 | 	add	arg02, arg03
30c3c     14 12 06 F1 | 	add	arg01, #20
30c40     09 15 62 FC | 	wrlong	arg02, arg01
30c44     A7 16 02 FB | 	rdlong	arg03, fp
30c48     08 4E 85 F1 | 	sub	fp, #8
30c4c     FF 17 CE F7 | 	test	arg03, #511 wz
30c50     6C 00 90 AD |  if_e	jmp	#LR__4845
30c54     10 4E 05 F1 | 	add	fp, #16
30c58     A7 12 02 FB | 	rdlong	arg01, fp
30c5c     04 4E 05 F1 | 	add	fp, #4
30c60     A7 14 02 FB | 	rdlong	arg02, fp
30c64     14 4E 85 F1 | 	sub	fp, #20
30c68     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
30c6c     1C 4E 05 F1 | 	add	fp, #28
30c70     A7 FA 61 FC | 	wrlong	result1, fp
30c74     1C 4E 85 F1 | 	sub	fp, #28
30c78     00 FA 0D F2 | 	cmp	result1, #0 wz
30c7c     1C 00 90 5D |  if_ne	jmp	#LR__4844
30c80     04 4E 05 F1 | 	add	fp, #4
30c84     A7 16 02 FB | 	rdlong	arg03, fp
30c88     04 4E 85 F1 | 	sub	fp, #4
30c8c     11 16 06 F1 | 	add	arg03, #17
30c90     0B 05 48 FC | 	wrbyte	#2, arg03
30c94     02 FA 05 F6 | 	mov	result1, #2
30c98     DC 01 90 FD | 	jmp	#LR__4853
30c9c                 | LR__4844
30c9c     1C 4E 05 F1 | 	add	fp, #28
30ca0     A7 18 02 FB | 	rdlong	arg04, fp
30ca4     14 4E 85 F1 | 	sub	fp, #20
30ca8     A7 16 02 FB | 	rdlong	arg03, fp
30cac     09 16 46 F0 | 	shr	arg03, #9
30cb0     0B 19 02 F1 | 	add	arg04, arg03
30cb4     14 4E 05 F1 | 	add	fp, #20
30cb8     A7 18 62 FC | 	wrlong	arg04, fp
30cbc     1C 4E 85 F1 | 	sub	fp, #28
30cc0                 | LR__4845
30cc0                 | LR__4846
30cc0                 | LR__4847
30cc0     04 4E 05 F1 | 	add	fp, #4
30cc4     A7 18 02 FB | 	rdlong	arg04, fp
30cc8     0C 17 02 F6 | 	mov	arg03, arg04
30ccc     04 4E 85 F1 | 	sub	fp, #4
30cd0     14 16 06 F1 | 	add	arg03, #20
30cd4     0B 17 02 FB | 	rdlong	arg03, arg03
30cd8     0C 18 06 F1 | 	add	arg04, #12
30cdc     0C 19 02 FB | 	rdlong	arg04, arg04
30ce0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
30ce4     3C 00 90 ED |  if_be	jmp	#LR__4848
30ce8     04 4E 05 F1 | 	add	fp, #4
30cec     A7 18 02 FB | 	rdlong	arg04, fp
30cf0     0C 17 02 F6 | 	mov	arg03, arg04
30cf4     14 18 06 F1 | 	add	arg04, #20
30cf8     0C 19 02 FB | 	rdlong	arg04, arg04
30cfc     0C 16 06 F1 | 	add	arg03, #12
30d00     0B 19 62 FC | 	wrlong	arg04, arg03
30d04     A7 18 02 FB | 	rdlong	arg04, fp
30d08     0C 17 02 F6 | 	mov	arg03, arg04
30d0c     04 4E 85 F1 | 	sub	fp, #4
30d10     10 18 06 F1 | 	add	arg04, #16
30d14     0C 19 C2 FA | 	rdbyte	arg04, arg04
30d18     40 18 46 F5 | 	or	arg04, #64
30d1c     10 16 06 F1 | 	add	arg03, #16
30d20     0B 19 42 FC | 	wrbyte	arg04, arg03
30d24                 | LR__4848
30d24     04 4E 05 F1 | 	add	fp, #4
30d28     A7 16 02 FB | 	rdlong	arg03, fp
30d2c     04 4E 85 F1 | 	sub	fp, #4
30d30     14 16 06 F1 | 	add	arg03, #20
30d34     0B 17 02 FB | 	rdlong	arg03, arg03
30d38     FF 17 CE F7 | 	test	arg03, #511 wz
30d3c     2C 01 90 AD |  if_e	jmp	#LR__4852
30d40     04 4E 05 F1 | 	add	fp, #4
30d44     A7 18 02 FB | 	rdlong	arg04, fp
30d48     18 4E 05 F1 | 	add	fp, #24
30d4c     A7 16 02 FB | 	rdlong	arg03, fp
30d50     1C 4E 85 F1 | 	sub	fp, #28
30d54     1C 18 06 F1 | 	add	arg04, #28
30d58     0C 19 02 FB | 	rdlong	arg04, arg04
30d5c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
30d60     08 01 90 AD |  if_e	jmp	#LR__4852
30d64     04 4E 05 F1 | 	add	fp, #4
30d68     A7 16 02 FB | 	rdlong	arg03, fp
30d6c     04 4E 85 F1 | 	sub	fp, #4
30d70     10 16 06 F1 | 	add	arg03, #16
30d74     0B 17 C2 FA | 	rdbyte	arg03, arg03
30d78     80 16 CE F7 | 	test	arg03, #128 wz
30d7c     7C 00 90 AD |  if_e	jmp	#LR__4850
30d80     10 4E 05 F1 | 	add	fp, #16
30d84     A7 16 02 FB | 	rdlong	arg03, fp
30d88     01 16 06 F1 | 	add	arg03, #1
30d8c     0B 13 C2 FA | 	rdbyte	arg01, arg03
30d90     0C 4E 85 F1 | 	sub	fp, #12
30d94     A7 16 02 FB | 	rdlong	arg03, fp
30d98     0B 15 02 F6 | 	mov	arg02, arg03
30d9c     28 14 06 F1 | 	add	arg02, #40
30da0     04 4E 85 F1 | 	sub	fp, #4
30da4     1C 16 06 F1 | 	add	arg03, #28
30da8     0B 17 02 FB | 	rdlong	arg03, arg03
30dac     01 18 06 F6 | 	mov	arg04, #1
30db0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
30db4     00 FA 0D F2 | 	cmp	result1, #0 wz
30db8     1C 00 90 AD |  if_e	jmp	#LR__4849
30dbc     04 4E 05 F1 | 	add	fp, #4
30dc0     A7 16 02 FB | 	rdlong	arg03, fp
30dc4     04 4E 85 F1 | 	sub	fp, #4
30dc8     11 16 06 F1 | 	add	arg03, #17
30dcc     0B 03 48 FC | 	wrbyte	#1, arg03
30dd0     01 FA 05 F6 | 	mov	result1, #1
30dd4     A0 00 90 FD | 	jmp	#LR__4853
30dd8                 | LR__4849
30dd8     04 4E 05 F1 | 	add	fp, #4
30ddc     A7 18 02 FB | 	rdlong	arg04, fp
30de0     0C 17 02 F6 | 	mov	arg03, arg04
30de4     04 4E 85 F1 | 	sub	fp, #4
30de8     10 18 06 F1 | 	add	arg04, #16
30dec     0C 19 C2 FA | 	rdbyte	arg04, arg04
30df0     7F 18 06 F5 | 	and	arg04, #127
30df4     10 16 06 F1 | 	add	arg03, #16
30df8     0B 19 42 FC | 	wrbyte	arg04, arg03
30dfc                 | LR__4850
30dfc     10 4E 05 F1 | 	add	fp, #16
30e00     A7 16 02 FB | 	rdlong	arg03, fp
30e04     01 16 06 F1 | 	add	arg03, #1
30e08     0B 13 C2 FA | 	rdbyte	arg01, arg03
30e0c     0C 4E 85 F1 | 	sub	fp, #12
30e10     A7 14 02 FB | 	rdlong	arg02, fp
30e14     28 14 06 F1 | 	add	arg02, #40
30e18     18 4E 05 F1 | 	add	fp, #24
30e1c     A7 16 02 FB | 	rdlong	arg03, fp
30e20     1C 4E 85 F1 | 	sub	fp, #28
30e24     01 18 06 F6 | 	mov	arg04, #1
30e28     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
30e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
30e30     1C 00 90 AD |  if_e	jmp	#LR__4851
30e34     04 4E 05 F1 | 	add	fp, #4
30e38     A7 16 02 FB | 	rdlong	arg03, fp
30e3c     04 4E 85 F1 | 	sub	fp, #4
30e40     11 16 06 F1 | 	add	arg03, #17
30e44     0B 03 48 FC | 	wrbyte	#1, arg03
30e48     01 FA 05 F6 | 	mov	result1, #1
30e4c     28 00 90 FD | 	jmp	#LR__4853
30e50                 | LR__4851
30e50     04 4E 05 F1 | 	add	fp, #4
30e54     A7 18 02 FB | 	rdlong	arg04, fp
30e58     18 4E 05 F1 | 	add	fp, #24
30e5c     A7 16 02 FB | 	rdlong	arg03, fp
30e60     1C 4E 85 F1 | 	sub	fp, #28
30e64     1C 18 06 F1 | 	add	arg04, #28
30e68     0C 17 62 FC | 	wrlong	arg03, arg04
30e6c                 | LR__4852
30e6c                 | ' 
30e6c                 | ' 			fp->sect = nsect;
30e6c                 | ' 		}
30e6c                 | ' 	}
30e6c                 | ' 
30e6c                 | ' 	return res ;
30e6c     0C 4E 05 F1 | 	add	fp, #12
30e70     A7 FA 01 FB | 	rdlong	result1, fp
30e74     0C 4E 85 F1 | 	sub	fp, #12
30e78                 | LR__4853
30e78     A7 F0 03 F6 | 	mov	ptra, fp
30e7c     B2 00 A0 FD | 	call	#popregs_
30e80                 | _fatfs_cc_f_lseek_ret
30e80     2D 00 64 FD | 	ret
30e84                 | 
30e84                 | _fatfs_cc_f_opendir
30e84     01 4A 05 F6 | 	mov	COUNT_, #1
30e88     A8 00 A0 FD | 	call	#pushregs_
30e8c     14 F0 07 F1 | 	add	ptra, #20
30e90     04 4E 05 F1 | 	add	fp, #4
30e94     A7 12 62 FC | 	wrlong	arg01, fp
30e98     04 4E 05 F1 | 	add	fp, #4
30e9c     A7 14 62 FC | 	wrlong	arg02, fp
30ea0     04 4E 85 F1 | 	sub	fp, #4
30ea4     A7 16 0A FB | 	rdlong	arg03, fp wz
30ea8     04 4E 85 F1 | 	sub	fp, #4
30eac     09 FA 05 A6 |  if_e	mov	result1, #9
30eb0     78 01 90 AD |  if_e	jmp	#LR__4866
30eb4     08 4E 05 F1 | 	add	fp, #8
30eb8     A7 12 02 F6 | 	mov	arg01, fp
30ebc     08 4E 05 F1 | 	add	fp, #8
30ec0     A7 14 02 F6 | 	mov	arg02, fp
30ec4     10 4E 85 F1 | 	sub	fp, #16
30ec8     00 16 06 F6 | 	mov	arg03, #0
30ecc     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
30ed0     0C 4E 05 F1 | 	add	fp, #12
30ed4     A7 FA 61 FC | 	wrlong	result1, fp
30ed8     0C 4E 85 F1 | 	sub	fp, #12
30edc     00 FA 0D F2 | 	cmp	result1, #0 wz
30ee0     20 01 90 5D |  if_ne	jmp	#LR__4865
30ee4     04 4E 05 F1 | 	add	fp, #4
30ee8     A7 16 02 FB | 	rdlong	arg03, fp
30eec     0C 4E 05 F1 | 	add	fp, #12
30ef0     A7 FA 01 FB | 	rdlong	result1, fp
30ef4     0B FB 61 FC | 	wrlong	result1, arg03
30ef8     0C 4E 85 F1 | 	sub	fp, #12
30efc     A7 12 02 FB | 	rdlong	arg01, fp
30f00     04 4E 05 F1 | 	add	fp, #4
30f04     A7 14 02 FB | 	rdlong	arg02, fp
30f08     08 4E 85 F1 | 	sub	fp, #8
30f0c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
30f10     0C 4E 05 F1 | 	add	fp, #12
30f14     A7 FA 61 FC | 	wrlong	result1, fp
30f18     0C 4E 85 F1 | 	sub	fp, #12
30f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
30f20     C4 00 90 5D |  if_ne	jmp	#LR__4864
30f24     04 4E 05 F1 | 	add	fp, #4
30f28     A7 16 02 FB | 	rdlong	arg03, fp
30f2c     04 4E 85 F1 | 	sub	fp, #4
30f30     2B 16 06 F1 | 	add	arg03, #43
30f34     0B 17 C2 FA | 	rdbyte	arg03, arg03
30f38     80 16 CE F7 | 	test	arg03, #128 wz
30f3c     58 00 90 5D |  if_ne	jmp	#LR__4862
30f40     04 4E 05 F1 | 	add	fp, #4
30f44     A7 16 02 FB | 	rdlong	arg03, fp
30f48     04 4E 85 F1 | 	sub	fp, #4
30f4c     06 16 06 F1 | 	add	arg03, #6
30f50     0B 17 C2 FA | 	rdbyte	arg03, arg03
30f54     10 16 CE F7 | 	test	arg03, #16 wz
30f58     30 00 90 AD |  if_e	jmp	#LR__4860
30f5c     04 4E 05 F1 | 	add	fp, #4
30f60     A7 16 02 FB | 	rdlong	arg03, fp
30f64     0B 27 02 F6 | 	mov	local01, arg03
30f68     0C 4E 05 F1 | 	add	fp, #12
30f6c     A7 12 02 FB | 	rdlong	arg01, fp
30f70     10 4E 85 F1 | 	sub	fp, #16
30f74     1C 16 06 F1 | 	add	arg03, #28
30f78     0B 15 02 FB | 	rdlong	arg02, arg03
30f7c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
30f80     08 26 06 F1 | 	add	local01, #8
30f84     13 FB 61 FC | 	wrlong	result1, local01
30f88     0C 00 90 FD | 	jmp	#LR__4861
30f8c                 | LR__4860
30f8c     0C 4E 05 F1 | 	add	fp, #12
30f90     A7 0A 68 FC | 	wrlong	#5, fp
30f94     0C 4E 85 F1 | 	sub	fp, #12
30f98                 | LR__4861
30f98                 | LR__4862
30f98     0C 4E 05 F1 | 	add	fp, #12
30f9c     A7 26 0A FB | 	rdlong	local01, fp wz
30fa0     0C 4E 85 F1 | 	sub	fp, #12
30fa4     40 00 90 5D |  if_ne	jmp	#LR__4863
30fa8     04 4E 05 F1 | 	add	fp, #4
30fac     A7 26 02 FB | 	rdlong	local01, fp
30fb0     0C 4E 05 F1 | 	add	fp, #12
30fb4     A7 16 02 FB | 	rdlong	arg03, fp
30fb8     06 16 06 F1 | 	add	arg03, #6
30fbc     0B 17 E2 FA | 	rdword	arg03, arg03
30fc0     04 26 06 F1 | 	add	local01, #4
30fc4     13 17 52 FC | 	wrword	arg03, local01
30fc8     0C 4E 85 F1 | 	sub	fp, #12
30fcc     A7 12 02 FB | 	rdlong	arg01, fp
30fd0     04 4E 85 F1 | 	sub	fp, #4
30fd4     00 14 06 F6 | 	mov	arg02, #0
30fd8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
30fdc     0C 4E 05 F1 | 	add	fp, #12
30fe0     A7 FA 61 FC | 	wrlong	result1, fp
30fe4     0C 4E 85 F1 | 	sub	fp, #12
30fe8                 | LR__4863
30fe8                 | LR__4864
30fe8     0C 4E 05 F1 | 	add	fp, #12
30fec     A7 26 02 FB | 	rdlong	local01, fp
30ff0     0C 4E 85 F1 | 	sub	fp, #12
30ff4     04 26 0E F2 | 	cmp	local01, #4 wz
30ff8     0C 4E 05 A1 |  if_e	add	fp, #12
30ffc     A7 0A 68 AC |  if_e	wrlong	#5, fp
31000     0C 4E 85 A1 |  if_e	sub	fp, #12
31004                 | LR__4865
31004     0C 4E 05 F1 | 	add	fp, #12
31008     A7 26 0A FB | 	rdlong	local01, fp wz
3100c     0C 4E 85 F1 | 	sub	fp, #12
31010     04 4E 05 51 |  if_ne	add	fp, #4
31014     A7 26 02 5B |  if_ne	rdlong	local01, fp
31018     04 4E 85 51 |  if_ne	sub	fp, #4
3101c     13 01 68 5C |  if_ne	wrlong	#0, local01
31020                 | ' 
31020                 | ' 	return res ;
31020     0C 4E 05 F1 | 	add	fp, #12
31024     A7 FA 01 FB | 	rdlong	result1, fp
31028     0C 4E 85 F1 | 	sub	fp, #12
3102c                 | LR__4866
3102c     A7 F0 03 F6 | 	mov	ptra, fp
31030     B2 00 A0 FD | 	call	#popregs_
31034                 | _fatfs_cc_f_opendir_ret
31034     2D 00 64 FD | 	ret
31038                 | 
31038                 | _fatfs_cc_f_closedir
31038     00 4A 05 F6 | 	mov	COUNT_, #0
3103c     A8 00 A0 FD | 	call	#pushregs_
31040     10 F0 07 F1 | 	add	ptra, #16
31044     04 4E 05 F1 | 	add	fp, #4
31048     A7 12 62 FC | 	wrlong	arg01, fp
3104c     08 4E 05 F1 | 	add	fp, #8
31050     A7 14 02 F6 | 	mov	arg02, fp
31054     0C 4E 85 F1 | 	sub	fp, #12
31058     C0 DD BF FD | 	call	#_fatfs_cc_validate
3105c     08 4E 05 F1 | 	add	fp, #8
31060     A7 FA 61 FC | 	wrlong	result1, fp
31064     08 4E 85 F1 | 	sub	fp, #8
31068     00 FA 0D F2 | 	cmp	result1, #0 wz
3106c     04 4E 05 A1 |  if_e	add	fp, #4
31070     A7 FA 01 AB |  if_e	rdlong	result1, fp
31074     04 4E 85 A1 |  if_e	sub	fp, #4
31078     FD 00 68 AC |  if_e	wrlong	#0, result1
3107c                 | ' 
3107c                 | ' 
3107c                 | ' 
3107c                 | ' 
3107c                 | ' 		dp->obj.fs = 0;
3107c                 | ' #line 4633 "ff.c"
3107c                 | ' 	}
3107c                 | ' 	return res;
3107c     08 4E 05 F1 | 	add	fp, #8
31080     A7 FA 01 FB | 	rdlong	result1, fp
31084     08 4E 85 F1 | 	sub	fp, #8
31088     A7 F0 03 F6 | 	mov	ptra, fp
3108c     B2 00 A0 FD | 	call	#popregs_
31090                 | _fatfs_cc_f_closedir_ret
31090     2D 00 64 FD | 	ret
31094                 | 
31094                 | _fatfs_cc_f_readdir
31094     00 4A 05 F6 | 	mov	COUNT_, #0
31098     A8 00 A0 FD | 	call	#pushregs_
3109c     14 F0 07 F1 | 	add	ptra, #20
310a0     04 4E 05 F1 | 	add	fp, #4
310a4     A7 12 62 FC | 	wrlong	arg01, fp
310a8     04 4E 05 F1 | 	add	fp, #4
310ac     A7 14 62 FC | 	wrlong	arg02, fp
310b0     04 4E 85 F1 | 	sub	fp, #4
310b4     A7 12 02 FB | 	rdlong	arg01, fp
310b8     0C 4E 05 F1 | 	add	fp, #12
310bc     A7 14 02 F6 | 	mov	arg02, fp
310c0     10 4E 85 F1 | 	sub	fp, #16
310c4     54 DD BF FD | 	call	#_fatfs_cc_validate
310c8     0C 4E 05 F1 | 	add	fp, #12
310cc     A7 FA 61 FC | 	wrlong	result1, fp
310d0     0C 4E 85 F1 | 	sub	fp, #12
310d4     00 FA 0D F2 | 	cmp	result1, #0 wz
310d8     BC 00 90 5D |  if_ne	jmp	#LR__4873
310dc     08 4E 05 F1 | 	add	fp, #8
310e0     A7 FA 09 FB | 	rdlong	result1, fp wz
310e4     08 4E 85 F1 | 	sub	fp, #8
310e8     24 00 90 5D |  if_ne	jmp	#LR__4870
310ec     04 4E 05 F1 | 	add	fp, #4
310f0     A7 12 02 FB | 	rdlong	arg01, fp
310f4     04 4E 85 F1 | 	sub	fp, #4
310f8     00 14 06 F6 | 	mov	arg02, #0
310fc     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
31100     0C 4E 05 F1 | 	add	fp, #12
31104     A7 FA 61 FC | 	wrlong	result1, fp
31108     0C 4E 85 F1 | 	sub	fp, #12
3110c     88 00 90 FD | 	jmp	#LR__4872
31110                 | LR__4870
31110     04 4E 05 F1 | 	add	fp, #4
31114     A7 12 02 FB | 	rdlong	arg01, fp
31118     04 4E 85 F1 | 	sub	fp, #4
3111c     00 14 06 F6 | 	mov	arg02, #0
31120     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
31124     0C 4E 05 F1 | 	add	fp, #12
31128     A7 FA 61 FC | 	wrlong	result1, fp
3112c     0C 4E 85 F1 | 	sub	fp, #12
31130     04 FA 0D F2 | 	cmp	result1, #4 wz
31134     0C 4E 05 A1 |  if_e	add	fp, #12
31138     A7 00 68 AC |  if_e	wrlong	#0, fp
3113c     0C 4E 85 A1 |  if_e	sub	fp, #12
31140     0C 4E 05 F1 | 	add	fp, #12
31144     A7 FA 09 FB | 	rdlong	result1, fp wz
31148     0C 4E 85 F1 | 	sub	fp, #12
3114c     48 00 90 5D |  if_ne	jmp	#LR__4871
31150     04 4E 05 F1 | 	add	fp, #4
31154     A7 12 02 FB | 	rdlong	arg01, fp
31158     04 4E 05 F1 | 	add	fp, #4
3115c     A7 14 02 FB | 	rdlong	arg02, fp
31160     08 4E 85 F1 | 	sub	fp, #8
31164     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
31168     04 4E 05 F1 | 	add	fp, #4
3116c     A7 12 02 FB | 	rdlong	arg01, fp
31170     04 4E 85 F1 | 	sub	fp, #4
31174     00 14 06 F6 | 	mov	arg02, #0
31178     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
3117c     0C 4E 05 F1 | 	add	fp, #12
31180     A7 FA 61 FC | 	wrlong	result1, fp
31184     0C 4E 85 F1 | 	sub	fp, #12
31188     04 FA 0D F2 | 	cmp	result1, #4 wz
3118c     0C 4E 05 A1 |  if_e	add	fp, #12
31190     A7 00 68 AC |  if_e	wrlong	#0, fp
31194     0C 4E 85 A1 |  if_e	sub	fp, #12
31198                 | LR__4871
31198                 | LR__4872
31198                 | LR__4873
31198                 | ' 			}
31198                 | ' 			;
31198                 | ' 		}
31198                 | ' 	}
31198                 | ' 	return res ;
31198     0C 4E 05 F1 | 	add	fp, #12
3119c     A7 FA 01 FB | 	rdlong	result1, fp
311a0     0C 4E 85 F1 | 	sub	fp, #12
311a4     A7 F0 03 F6 | 	mov	ptra, fp
311a8     B2 00 A0 FD | 	call	#popregs_
311ac                 | _fatfs_cc_f_readdir_ret
311ac     2D 00 64 FD | 	ret
311b0                 | 
311b0                 | _fatfs_cc_f_stat
311b0     00 4A 05 F6 | 	mov	COUNT_, #0
311b4     A8 00 A0 FD | 	call	#pushregs_
311b8     40 F0 07 F1 | 	add	ptra, #64
311bc     04 4E 05 F1 | 	add	fp, #4
311c0     A7 12 62 FC | 	wrlong	arg01, fp
311c4     04 4E 05 F1 | 	add	fp, #4
311c8     A7 14 62 FC | 	wrlong	arg02, fp
311cc     04 4E 85 F1 | 	sub	fp, #4
311d0     A7 12 02 F6 | 	mov	arg01, fp
311d4     0C 4E 05 F1 | 	add	fp, #12
311d8     A7 14 02 F6 | 	mov	arg02, fp
311dc     10 4E 85 F1 | 	sub	fp, #16
311e0     00 16 06 F6 | 	mov	arg03, #0
311e4     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
311e8     0C 4E 05 F1 | 	add	fp, #12
311ec     A7 FA 61 FC | 	wrlong	result1, fp
311f0     0C 4E 85 F1 | 	sub	fp, #12
311f4     00 FA 0D F2 | 	cmp	result1, #0 wz
311f8     74 00 90 5D |  if_ne	jmp	#LR__4883
311fc     10 4E 05 F1 | 	add	fp, #16
31200     A7 12 02 F6 | 	mov	arg01, fp
31204     0C 4E 85 F1 | 	sub	fp, #12
31208     A7 14 02 FB | 	rdlong	arg02, fp
3120c     04 4E 85 F1 | 	sub	fp, #4
31210     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
31214     0C 4E 05 F1 | 	add	fp, #12
31218     A7 FA 61 FC | 	wrlong	result1, fp
3121c     0C 4E 85 F1 | 	sub	fp, #12
31220     00 FA 0D F2 | 	cmp	result1, #0 wz
31224     48 00 90 5D |  if_ne	jmp	#LR__4882
31228     3B 4E 05 F1 | 	add	fp, #59
3122c     A7 FA C1 FA | 	rdbyte	result1, fp
31230     3B 4E 85 F1 | 	sub	fp, #59
31234     80 FA CD F7 | 	test	result1, #128 wz
31238     0C 4E 05 51 |  if_ne	add	fp, #12
3123c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31240     0C 4E 85 51 |  if_ne	sub	fp, #12
31244     28 00 90 5D |  if_ne	jmp	#LR__4881
31248     08 4E 05 F1 | 	add	fp, #8
3124c     A7 FA 09 FB | 	rdlong	result1, fp wz
31250     08 4E 85 F1 | 	sub	fp, #8
31254     18 00 90 AD |  if_e	jmp	#LR__4880
31258     10 4E 05 F1 | 	add	fp, #16
3125c     A7 12 02 F6 | 	mov	arg01, fp
31260     08 4E 85 F1 | 	sub	fp, #8
31264     A7 14 02 FB | 	rdlong	arg02, fp
31268     08 4E 85 F1 | 	sub	fp, #8
3126c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
31270                 | LR__4880
31270                 | LR__4881
31270                 | LR__4882
31270                 | LR__4883
31270                 | ' 			}
31270                 | ' 		}
31270                 | ' 		;
31270                 | ' 	}
31270                 | ' 
31270                 | ' 	return res ;
31270     0C 4E 05 F1 | 	add	fp, #12
31274     A7 FA 01 FB | 	rdlong	result1, fp
31278     0C 4E 85 F1 | 	sub	fp, #12
3127c     A7 F0 03 F6 | 	mov	ptra, fp
31280     B2 00 A0 FD | 	call	#popregs_
31284                 | _fatfs_cc_f_stat_ret
31284     2D 00 64 FD | 	ret
31288                 | 
31288                 | _fatfs_cc_f_unlink
31288     00 4A 05 F6 | 	mov	COUNT_, #0
3128c     A8 00 A0 FD | 	call	#pushregs_
31290     74 F0 07 F1 | 	add	ptra, #116
31294     04 4E 05 F1 | 	add	fp, #4
31298     A7 12 62 FC | 	wrlong	arg01, fp
3129c     68 4E 05 F1 | 	add	fp, #104
312a0     A7 00 68 FC | 	wrlong	#0, fp
312a4     68 4E 85 F1 | 	sub	fp, #104
312a8     A7 12 02 F6 | 	mov	arg01, fp
312ac     6C 4E 05 F1 | 	add	fp, #108
312b0     A7 14 02 F6 | 	mov	arg02, fp
312b4     70 4E 85 F1 | 	sub	fp, #112
312b8     02 16 06 F6 | 	mov	arg03, #2
312bc     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
312c0     08 4E 05 F1 | 	add	fp, #8
312c4     A7 FA 61 FC | 	wrlong	result1, fp
312c8     08 4E 85 F1 | 	sub	fp, #8
312cc     00 FA 0D F2 | 	cmp	result1, #0 wz
312d0     E4 01 90 5D |  if_ne	jmp	#LR__4898
312d4     70 4E 05 F1 | 	add	fp, #112
312d8     A7 16 02 FB | 	rdlong	arg03, fp
312dc     64 4E 85 F1 | 	sub	fp, #100
312e0     A7 16 62 FC | 	wrlong	arg03, fp
312e4     A7 12 02 F6 | 	mov	arg01, fp
312e8     08 4E 85 F1 | 	sub	fp, #8
312ec     A7 14 02 FB | 	rdlong	arg02, fp
312f0     04 4E 85 F1 | 	sub	fp, #4
312f4     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
312f8     08 4E 05 F1 | 	add	fp, #8
312fc     A7 FA 61 FC | 	wrlong	result1, fp
31300     00 FA 4D F2 | 	cmps	result1, #0 wz
31304     08 4E 85 F1 | 	sub	fp, #8
31308     AC 01 90 5D |  if_ne	jmp	#LR__4897
3130c     37 4E 05 F1 | 	add	fp, #55
31310     A7 FA C1 FA | 	rdbyte	result1, fp
31314     37 4E 85 F1 | 	sub	fp, #55
31318     80 FA CD F7 | 	test	result1, #128 wz
3131c     08 4E 05 51 |  if_ne	add	fp, #8
31320     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31324     08 4E 85 51 |  if_ne	sub	fp, #8
31328     1C 00 90 5D |  if_ne	jmp	#LR__4890
3132c     12 4E 05 F1 | 	add	fp, #18
31330     A7 FA C1 FA | 	rdbyte	result1, fp
31334     12 4E 85 F1 | 	sub	fp, #18
31338     01 FA CD F7 | 	test	result1, #1 wz
3133c     08 4E 05 51 |  if_ne	add	fp, #8
31340     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31344     08 4E 85 51 |  if_ne	sub	fp, #8
31348                 | LR__4890
31348     08 4E 05 F1 | 	add	fp, #8
3134c     A7 FA 09 FB | 	rdlong	result1, fp wz
31350     08 4E 85 F1 | 	sub	fp, #8
31354     C8 00 90 5D |  if_ne	jmp	#LR__4893
31358     70 4E 05 F1 | 	add	fp, #112
3135c     A7 12 02 FB | 	rdlong	arg01, fp
31360     48 4E 85 F1 | 	sub	fp, #72
31364     A7 14 02 FB | 	rdlong	arg02, fp
31368     28 4E 85 F1 | 	sub	fp, #40
3136c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
31370     6C 4E 05 F1 | 	add	fp, #108
31374     A7 FA 61 FC | 	wrlong	result1, fp
31378     5A 4E 85 F1 | 	sub	fp, #90
3137c     A7 FA C1 FA | 	rdbyte	result1, fp
31380     12 4E 85 F1 | 	sub	fp, #18
31384     10 FA CD F7 | 	test	result1, #16 wz
31388     94 00 90 AD |  if_e	jmp	#LR__4892
3138c     70 4E 05 F1 | 	add	fp, #112
31390     A7 FA 01 FB | 	rdlong	result1, fp
31394     34 4E 85 F1 | 	sub	fp, #52
31398     A7 FA 61 FC | 	wrlong	result1, fp
3139c     30 4E 05 F1 | 	add	fp, #48
313a0     A7 16 02 FB | 	rdlong	arg03, fp
313a4     28 4E 85 F1 | 	sub	fp, #40
313a8     A7 16 62 FC | 	wrlong	arg03, fp
313ac     08 4E 85 F1 | 	sub	fp, #8
313b0     A7 12 02 F6 | 	mov	arg01, fp
313b4     3C 4E 85 F1 | 	sub	fp, #60
313b8     00 14 06 F6 | 	mov	arg02, #0
313bc     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
313c0     08 4E 05 F1 | 	add	fp, #8
313c4     A7 FA 61 FC | 	wrlong	result1, fp
313c8     08 4E 85 F1 | 	sub	fp, #8
313cc     00 FA 0D F2 | 	cmp	result1, #0 wz
313d0     4C 00 90 5D |  if_ne	jmp	#LR__4891
313d4     3C 4E 05 F1 | 	add	fp, #60
313d8     A7 12 02 F6 | 	mov	arg01, fp
313dc     3C 4E 85 F1 | 	sub	fp, #60
313e0     00 14 06 F6 | 	mov	arg02, #0
313e4     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
313e8     08 4E 05 F1 | 	add	fp, #8
313ec     A7 FA 61 FC | 	wrlong	result1, fp
313f0     00 FA 4D F2 | 	cmps	result1, #0 wz
313f4     08 4E 85 F1 | 	sub	fp, #8
313f8     08 4E 05 A1 |  if_e	add	fp, #8
313fc     A7 0E 68 AC |  if_e	wrlong	#7, fp
31400     08 4E 85 A1 |  if_e	sub	fp, #8
31404     08 4E 05 F1 | 	add	fp, #8
31408     A7 FA 01 FB | 	rdlong	result1, fp
3140c     08 4E 85 F1 | 	sub	fp, #8
31410     04 FA 0D F2 | 	cmp	result1, #4 wz
31414     08 4E 05 A1 |  if_e	add	fp, #8
31418     A7 00 68 AC |  if_e	wrlong	#0, fp
3141c     08 4E 85 A1 |  if_e	sub	fp, #8
31420                 | LR__4891
31420                 | LR__4892
31420                 | LR__4893
31420     08 4E 05 F1 | 	add	fp, #8
31424     A7 FA 09 FB | 	rdlong	result1, fp wz
31428     08 4E 85 F1 | 	sub	fp, #8
3142c     88 00 90 5D |  if_ne	jmp	#LR__4896
31430     0C 4E 05 F1 | 	add	fp, #12
31434     A7 12 02 F6 | 	mov	arg01, fp
31438     0C 4E 85 F1 | 	sub	fp, #12
3143c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
31440     08 4E 05 F1 | 	add	fp, #8
31444     A7 FA 61 FC | 	wrlong	result1, fp
31448     08 4E 85 F1 | 	sub	fp, #8
3144c     00 FA 0D F2 | 	cmp	result1, #0 wz
31450     38 00 90 5D |  if_ne	jmp	#LR__4894
31454     6C 4E 05 F1 | 	add	fp, #108
31458     A7 FA 09 FB | 	rdlong	result1, fp wz
3145c     6C 4E 85 F1 | 	sub	fp, #108
31460     28 00 90 AD |  if_e	jmp	#LR__4894
31464     0C 4E 05 F1 | 	add	fp, #12
31468     A7 12 02 F6 | 	mov	arg01, fp
3146c     60 4E 05 F1 | 	add	fp, #96
31470     A7 14 02 FB | 	rdlong	arg02, fp
31474     6C 4E 85 F1 | 	sub	fp, #108
31478     00 16 06 F6 | 	mov	arg03, #0
3147c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
31480     08 4E 05 F1 | 	add	fp, #8
31484     A7 FA 61 FC | 	wrlong	result1, fp
31488     08 4E 85 F1 | 	sub	fp, #8
3148c                 | LR__4894
3148c     08 4E 05 F1 | 	add	fp, #8
31490     A7 FA 09 FB | 	rdlong	result1, fp wz
31494     08 4E 85 F1 | 	sub	fp, #8
31498     1C 00 90 5D |  if_ne	jmp	#LR__4895
3149c     70 4E 05 F1 | 	add	fp, #112
314a0     A7 12 02 FB | 	rdlong	arg01, fp
314a4     70 4E 85 F1 | 	sub	fp, #112
314a8     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
314ac     08 4E 05 F1 | 	add	fp, #8
314b0     A7 FA 61 FC | 	wrlong	result1, fp
314b4     08 4E 85 F1 | 	sub	fp, #8
314b8                 | LR__4895
314b8                 | LR__4896
314b8                 | LR__4897
314b8                 | LR__4898
314b8                 | ' 			}
314b8                 | ' 		}
314b8                 | ' 		;
314b8                 | ' 	}
314b8                 | ' 
314b8                 | ' 	return res ;
314b8     08 4E 05 F1 | 	add	fp, #8
314bc     A7 FA 01 FB | 	rdlong	result1, fp
314c0     08 4E 85 F1 | 	sub	fp, #8
314c4     A7 F0 03 F6 | 	mov	ptra, fp
314c8     B2 00 A0 FD | 	call	#popregs_
314cc                 | _fatfs_cc_f_unlink_ret
314cc     2D 00 64 FD | 	ret
314d0                 | 
314d0                 | _fatfs_cc_f_mkdir
314d0     00 4A 05 F6 | 	mov	COUNT_, #0
314d4     A8 00 A0 FD | 	call	#pushregs_
314d8     5C F0 07 F1 | 	add	ptra, #92
314dc     04 4E 05 F1 | 	add	fp, #4
314e0     A7 12 62 FC | 	wrlong	arg01, fp
314e4     A7 12 02 F6 | 	mov	arg01, fp
314e8     48 4E 05 F1 | 	add	fp, #72
314ec     A7 14 02 F6 | 	mov	arg02, fp
314f0     4C 4E 85 F1 | 	sub	fp, #76
314f4     02 16 06 F6 | 	mov	arg03, #2
314f8     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
314fc     08 4E 05 F1 | 	add	fp, #8
31500     A7 FA 61 FC | 	wrlong	result1, fp
31504     08 4E 85 F1 | 	sub	fp, #8
31508     00 FA 0D F2 | 	cmp	result1, #0 wz
3150c     C4 02 90 5D |  if_ne	jmp	#LR__4905
31510     4C 4E 05 F1 | 	add	fp, #76
31514     A7 16 02 FB | 	rdlong	arg03, fp
31518     40 4E 85 F1 | 	sub	fp, #64
3151c     A7 16 62 FC | 	wrlong	arg03, fp
31520     A7 12 02 F6 | 	mov	arg01, fp
31524     08 4E 85 F1 | 	sub	fp, #8
31528     A7 14 02 FB | 	rdlong	arg02, fp
3152c     04 4E 85 F1 | 	sub	fp, #4
31530     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
31534     08 4E 05 F1 | 	add	fp, #8
31538     A7 FA 61 FC | 	wrlong	result1, fp
3153c     00 FA 4D F2 | 	cmps	result1, #0 wz
31540     08 4E 85 F1 | 	sub	fp, #8
31544     08 4E 05 A1 |  if_e	add	fp, #8
31548     A7 10 68 AC |  if_e	wrlong	#8, fp
3154c     08 4E 85 A1 |  if_e	sub	fp, #8
31550     08 4E 05 F1 | 	add	fp, #8
31554     A7 FA 01 FB | 	rdlong	result1, fp
31558     08 4E 85 F1 | 	sub	fp, #8
3155c     04 FA 0D F2 | 	cmp	result1, #4 wz
31560     70 02 90 5D |  if_ne	jmp	#LR__4904
31564     4C 4E 05 F1 | 	add	fp, #76
31568     A7 16 02 FB | 	rdlong	arg03, fp
3156c     10 4E 85 F1 | 	sub	fp, #16
31570     A7 16 62 FC | 	wrlong	arg03, fp
31574     A7 12 02 F6 | 	mov	arg01, fp
31578     3C 4E 85 F1 | 	sub	fp, #60
3157c     00 14 06 F6 | 	mov	arg02, #0
31580     04 AC BF FD | 	call	#_fatfs_cc_create_chain
31584     50 4E 05 F1 | 	add	fp, #80
31588     A7 FA 61 FC | 	wrlong	result1, fp
3158c     48 4E 85 F1 | 	sub	fp, #72
31590     A7 00 68 FC | 	wrlong	#0, fp
31594     48 4E 05 F1 | 	add	fp, #72
31598     A7 FA 09 FB | 	rdlong	result1, fp wz
3159c     50 4E 85 F1 | 	sub	fp, #80
315a0     08 4E 05 A1 |  if_e	add	fp, #8
315a4     A7 0E 68 AC |  if_e	wrlong	#7, fp
315a8     08 4E 85 A1 |  if_e	sub	fp, #8
315ac     50 4E 05 F1 | 	add	fp, #80
315b0     A7 FA 01 FB | 	rdlong	result1, fp
315b4     50 4E 85 F1 | 	sub	fp, #80
315b8     01 FA 0D F2 | 	cmp	result1, #1 wz
315bc     08 4E 05 A1 |  if_e	add	fp, #8
315c0     A7 04 68 AC |  if_e	wrlong	#2, fp
315c4     08 4E 85 A1 |  if_e	sub	fp, #8
315c8     50 4E 05 F1 | 	add	fp, #80
315cc     A7 16 02 FB | 	rdlong	arg03, fp
315d0     50 4E 85 F1 | 	sub	fp, #80
315d4     FF FF 7F FF 
315d8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
315dc     08 4E 05 A1 |  if_e	add	fp, #8
315e0     A7 02 68 AC |  if_e	wrlong	#1, fp
315e4     08 4E 85 A1 |  if_e	sub	fp, #8
315e8     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
315ec     58 4E 05 F1 | 	add	fp, #88
315f0     A7 FA 61 FC | 	wrlong	result1, fp
315f4     50 4E 85 F1 | 	sub	fp, #80
315f8     A7 FA 09 FB | 	rdlong	result1, fp wz
315fc     08 4E 85 F1 | 	sub	fp, #8
31600     1C 01 90 5D |  if_ne	jmp	#LR__4901
31604     4C 4E 05 F1 | 	add	fp, #76
31608     A7 12 02 FB | 	rdlong	arg01, fp
3160c     04 4E 05 F1 | 	add	fp, #4
31610     A7 14 02 FB | 	rdlong	arg02, fp
31614     50 4E 85 F1 | 	sub	fp, #80
31618     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
3161c     08 4E 05 F1 | 	add	fp, #8
31620     A7 FA 61 FC | 	wrlong	result1, fp
31624     00 FA 4D F2 | 	cmps	result1, #0 wz
31628     08 4E 85 F1 | 	sub	fp, #8
3162c     F0 00 90 5D |  if_ne	jmp	#LR__4900
31630     4C 4E 05 F1 | 	add	fp, #76
31634     A7 12 02 FB | 	rdlong	arg01, fp
31638     4C 4E 85 F1 | 	sub	fp, #76
3163c     34 12 06 F1 | 	add	arg01, #52
31640     20 14 06 F6 | 	mov	arg02, #32
31644     0B 16 06 F6 | 	mov	arg03, #11
31648     98 00 A0 FD | 	call	#\builtin_bytefill_
3164c     4C 4E 05 F1 | 	add	fp, #76
31650     A7 FA 01 FB | 	rdlong	result1, fp
31654     34 FA 05 F1 | 	add	result1, #52
31658     FD 5C 48 FC | 	wrbyte	#46, result1
3165c     A7 16 02 FB | 	rdlong	arg03, fp
31660     3F 16 06 F1 | 	add	arg03, #63
31664     0B 21 48 FC | 	wrbyte	#16, arg03
31668     A7 12 02 FB | 	rdlong	arg01, fp
3166c     4A 12 06 F1 | 	add	arg01, #74
31670     0C 4E 05 F1 | 	add	fp, #12
31674     A7 14 02 FB | 	rdlong	arg02, fp
31678     09 15 62 FC | 	wrlong	arg02, arg01
3167c     0C 4E 85 F1 | 	sub	fp, #12
31680     A7 14 02 FB | 	rdlong	arg02, fp
31684     0A 13 02 F6 | 	mov	arg01, arg02
31688     34 14 06 F1 | 	add	arg02, #52
3168c     04 4E 05 F1 | 	add	fp, #4
31690     A7 16 02 FB | 	rdlong	arg03, fp
31694     50 4E 85 F1 | 	sub	fp, #80
31698     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
3169c     4C 4E 05 F1 | 	add	fp, #76
316a0     A7 14 02 FB | 	rdlong	arg02, fp
316a4     0A 13 02 F6 | 	mov	arg01, arg02
316a8     54 12 06 F1 | 	add	arg01, #84
316ac     4C 4E 85 F1 | 	sub	fp, #76
316b0     34 14 06 F1 | 	add	arg02, #52
316b4     20 16 06 F6 | 	mov	arg03, #32
316b8     78 27 BF FD | 	call	#__system____builtin_memmove
316bc     4C 4E 05 F1 | 	add	fp, #76
316c0     A7 16 02 FB | 	rdlong	arg03, fp
316c4     55 16 06 F1 | 	add	arg03, #85
316c8     0B 5D 48 FC | 	wrbyte	#46, arg03
316cc     38 4E 85 F1 | 	sub	fp, #56
316d0     A7 16 02 FB | 	rdlong	arg03, fp
316d4     40 4E 05 F1 | 	add	fp, #64
316d8     A7 16 62 FC | 	wrlong	arg03, fp
316dc     08 4E 85 F1 | 	sub	fp, #8
316e0     A7 14 02 FB | 	rdlong	arg02, fp
316e4     0A 13 02 F6 | 	mov	arg01, arg02
316e8     54 14 06 F1 | 	add	arg02, #84
316ec     4C 4E 85 F1 | 	sub	fp, #76
316f0     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
316f4     4C 4E 05 F1 | 	add	fp, #76
316f8     A7 16 02 FB | 	rdlong	arg03, fp
316fc     03 16 06 F1 | 	add	arg03, #3
31700     0B 03 48 FC | 	wrbyte	#1, arg03
31704     40 4E 85 F1 | 	sub	fp, #64
31708     A7 12 02 F6 | 	mov	arg01, fp
3170c     0C 4E 85 F1 | 	sub	fp, #12
31710     44 BA BF FD | 	call	#_fatfs_cc_dir_register
31714     08 4E 05 F1 | 	add	fp, #8
31718     A7 FA 61 FC | 	wrlong	result1, fp
3171c     08 4E 85 F1 | 	sub	fp, #8
31720                 | LR__4900
31720                 | LR__4901
31720     08 4E 05 F1 | 	add	fp, #8
31724     A7 FA 09 FB | 	rdlong	result1, fp wz
31728     08 4E 85 F1 | 	sub	fp, #8
3172c     88 00 90 5D |  if_ne	jmp	#LR__4902
31730     28 4E 05 F1 | 	add	fp, #40
31734     A7 12 02 FB | 	rdlong	arg01, fp
31738     16 12 06 F1 | 	add	arg01, #22
3173c     30 4E 05 F1 | 	add	fp, #48
31740     A7 14 02 FB | 	rdlong	arg02, fp
31744     09 15 62 FC | 	wrlong	arg02, arg01
31748     0C 4E 85 F1 | 	sub	fp, #12
3174c     A7 12 02 FB | 	rdlong	arg01, fp
31750     24 4E 85 F1 | 	sub	fp, #36
31754     A7 14 02 FB | 	rdlong	arg02, fp
31758     28 4E 05 F1 | 	add	fp, #40
3175c     A7 16 02 FB | 	rdlong	arg03, fp
31760     50 4E 85 F1 | 	sub	fp, #80
31764     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
31768     28 4E 05 F1 | 	add	fp, #40
3176c     A7 FA 01 FB | 	rdlong	result1, fp
31770     0B FA 05 F1 | 	add	result1, #11
31774     FD 20 48 FC | 	wrbyte	#16, result1
31778     24 4E 05 F1 | 	add	fp, #36
3177c     A7 FA 01 FB | 	rdlong	result1, fp
31780     03 FA 05 F1 | 	add	result1, #3
31784     FD 02 48 FC | 	wrbyte	#1, result1
31788     44 4E 85 F1 | 	sub	fp, #68
3178c     A7 FA 09 FB | 	rdlong	result1, fp wz
31790     08 4E 85 F1 | 	sub	fp, #8
31794     3C 00 90 5D |  if_ne	jmp	#LR__4903
31798     4C 4E 05 F1 | 	add	fp, #76
3179c     A7 12 02 FB | 	rdlong	arg01, fp
317a0     4C 4E 85 F1 | 	sub	fp, #76
317a4     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
317a8     08 4E 05 F1 | 	add	fp, #8
317ac     A7 FA 61 FC | 	wrlong	result1, fp
317b0     08 4E 85 F1 | 	sub	fp, #8
317b4     1C 00 90 FD | 	jmp	#LR__4903
317b8                 | LR__4902
317b8     3C 4E 05 F1 | 	add	fp, #60
317bc     A7 12 02 F6 | 	mov	arg01, fp
317c0     14 4E 05 F1 | 	add	fp, #20
317c4     A7 14 02 FB | 	rdlong	arg02, fp
317c8     50 4E 85 F1 | 	sub	fp, #80
317cc     00 16 06 F6 | 	mov	arg03, #0
317d0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
317d4                 | LR__4903
317d4                 | LR__4904
317d4                 | LR__4905
317d4                 | ' 				remove_chain(&sobj, dcl, 0);
317d4                 | ' 			}
317d4                 | ' 		}
317d4                 | ' 		;
317d4                 | ' 	}
317d4                 | ' 
317d4                 | ' 	return res ;
317d4     08 4E 05 F1 | 	add	fp, #8
317d8     A7 FA 01 FB | 	rdlong	result1, fp
317dc     08 4E 85 F1 | 	sub	fp, #8
317e0     A7 F0 03 F6 | 	mov	ptra, fp
317e4     B2 00 A0 FD | 	call	#popregs_
317e8                 | _fatfs_cc_f_mkdir_ret
317e8     2D 00 64 FD | 	ret
317ec                 | 
317ec                 | _fatfs_cc_f_rename
317ec     01 4A 05 F6 | 	mov	COUNT_, #1
317f0     A8 00 A0 FD | 	call	#pushregs_
317f4     9C F0 07 F1 | 	add	ptra, #156
317f8     04 4E 05 F1 | 	add	fp, #4
317fc     A7 12 62 FC | 	wrlong	arg01, fp
31800     04 4E 05 F1 | 	add	fp, #4
31804     A7 14 62 FC | 	wrlong	arg02, fp
31808     A7 12 02 F6 | 	mov	arg01, fp
3180c     08 4E 85 F1 | 	sub	fp, #8
31810     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
31814     04 4E 05 F1 | 	add	fp, #4
31818     A7 12 02 F6 | 	mov	arg01, fp
3181c     6C 4E 05 F1 | 	add	fp, #108
31820     A7 14 02 F6 | 	mov	arg02, fp
31824     70 4E 85 F1 | 	sub	fp, #112
31828     02 16 06 F6 | 	mov	arg03, #2
3182c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
31830     0C 4E 05 F1 | 	add	fp, #12
31834     A7 FA 61 FC | 	wrlong	result1, fp
31838     0C 4E 85 F1 | 	sub	fp, #12
3183c     00 FA 0D F2 | 	cmp	result1, #0 wz
31840     44 03 90 5D |  if_ne	jmp	#LR__4923
31844     70 4E 05 F1 | 	add	fp, #112
31848     A7 16 02 FB | 	rdlong	arg03, fp
3184c     60 4E 85 F1 | 	sub	fp, #96
31850     A7 16 62 FC | 	wrlong	arg03, fp
31854     A7 12 02 F6 | 	mov	arg01, fp
31858     0C 4E 85 F1 | 	sub	fp, #12
3185c     A7 14 02 FB | 	rdlong	arg02, fp
31860     04 4E 85 F1 | 	sub	fp, #4
31864     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
31868     0C 4E 05 F1 | 	add	fp, #12
3186c     A7 FA 61 FC | 	wrlong	result1, fp
31870     00 FA 4D F2 | 	cmps	result1, #0 wz
31874     0C 4E 85 F1 | 	sub	fp, #12
31878     1C 00 90 5D |  if_ne	jmp	#LR__4910
3187c     3B 4E 05 F1 | 	add	fp, #59
31880     A7 FA C1 FA | 	rdbyte	result1, fp
31884     3B 4E 85 F1 | 	sub	fp, #59
31888     A0 FA CD F7 | 	test	result1, #160 wz
3188c     0C 4E 05 51 |  if_ne	add	fp, #12
31890     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31894     0C 4E 85 51 |  if_ne	sub	fp, #12
31898                 | LR__4910
31898     0C 4E 05 F1 | 	add	fp, #12
3189c     A7 26 0A FB | 	rdlong	local01, fp wz
318a0     0C 4E 85 F1 | 	sub	fp, #12
318a4     E0 02 90 5D |  if_ne	jmp	#LR__4922
318a8     74 4E 05 F1 | 	add	fp, #116
318ac     A7 12 02 F6 | 	mov	arg01, fp
318b0     48 4E 85 F1 | 	sub	fp, #72
318b4     A7 14 02 FB | 	rdlong	arg02, fp
318b8     2C 4E 85 F1 | 	sub	fp, #44
318bc     20 16 06 F6 | 	mov	arg03, #32
318c0     70 25 BF FD | 	call	#__system____builtin_memmove
318c4     40 4E 05 F1 | 	add	fp, #64
318c8     A7 12 02 F6 | 	mov	arg01, fp
318cc     30 4E 85 F1 | 	sub	fp, #48
318d0     A7 14 02 F6 | 	mov	arg02, fp
318d4     10 4E 85 F1 | 	sub	fp, #16
318d8     30 16 06 F6 | 	mov	arg03, #48
318dc     54 25 BF FD | 	call	#__system____builtin_memmove
318e0     40 4E 05 F1 | 	add	fp, #64
318e4     A7 12 02 F6 | 	mov	arg01, fp
318e8     38 4E 85 F1 | 	sub	fp, #56
318ec     A7 14 02 FB | 	rdlong	arg02, fp
318f0     08 4E 85 F1 | 	sub	fp, #8
318f4     34 CA BF FD | 	call	#_fatfs_cc_follow_path
318f8     0C 4E 05 F1 | 	add	fp, #12
318fc     A7 FA 61 FC | 	wrlong	result1, fp
31900     0C 4E 85 F1 | 	sub	fp, #12
31904     00 FA 0D F2 | 	cmp	result1, #0 wz
31908     4C 00 90 5D |  if_ne	jmp	#LR__4913
3190c     48 4E 05 F1 | 	add	fp, #72
31910     A7 FA 01 FB | 	rdlong	result1, fp
31914     30 4E 85 F1 | 	sub	fp, #48
31918     A7 16 02 FB | 	rdlong	arg03, fp
3191c     18 4E 85 F1 | 	sub	fp, #24
31920     0B FB 09 F2 | 	cmp	result1, arg03 wz
31924     20 00 90 5D |  if_ne	jmp	#LR__4911
31928     50 4E 05 F1 | 	add	fp, #80
3192c     A7 FA 01 FB | 	rdlong	result1, fp
31930     30 4E 85 F1 | 	sub	fp, #48
31934     A7 16 02 FB | 	rdlong	arg03, fp
31938     20 4E 85 F1 | 	sub	fp, #32
3193c     0B FB 09 F2 | 	cmp	result1, arg03 wz
31940     04 26 06 A6 |  if_e	mov	local01, #4
31944     04 00 90 AD |  if_e	jmp	#LR__4912
31948                 | LR__4911
31948     08 26 06 F6 | 	mov	local01, #8
3194c                 | LR__4912
3194c     0C 4E 05 F1 | 	add	fp, #12
31950     A7 26 62 FC | 	wrlong	local01, fp
31954     0C 4E 85 F1 | 	sub	fp, #12
31958                 | LR__4913
31958     0C 4E 05 F1 | 	add	fp, #12
3195c     A7 26 02 FB | 	rdlong	local01, fp
31960     0C 4E 85 F1 | 	sub	fp, #12
31964     04 26 0E F2 | 	cmp	local01, #4 wz
31968     CC 01 90 5D |  if_ne	jmp	#LR__4919
3196c     40 4E 05 F1 | 	add	fp, #64
31970     A7 12 02 F6 | 	mov	arg01, fp
31974     40 4E 85 F1 | 	sub	fp, #64
31978     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
3197c     0C 4E 05 F1 | 	add	fp, #12
31980     A7 FA 61 FC | 	wrlong	result1, fp
31984     0C 4E 85 F1 | 	sub	fp, #12
31988     00 FA 0D F2 | 	cmp	result1, #0 wz
3198c     A8 01 90 5D |  if_ne	jmp	#LR__4918
31990     5C 4E 05 F1 | 	add	fp, #92
31994     A7 12 02 FB | 	rdlong	arg01, fp
31998     38 4E 05 F1 | 	add	fp, #56
3199c     A7 12 62 FC | 	wrlong	arg01, fp
319a0     0D 12 06 F1 | 	add	arg01, #13
319a4     20 4E 85 F1 | 	sub	fp, #32
319a8     A7 14 02 F6 | 	mov	arg02, fp
319ac     74 4E 85 F1 | 	sub	fp, #116
319b0     0D 14 06 F1 | 	add	arg02, #13
319b4     13 16 06 F6 | 	mov	arg03, #19
319b8     78 24 BF FD | 	call	#__system____builtin_memmove
319bc     94 4E 05 F1 | 	add	fp, #148
319c0     A7 26 02 FB | 	rdlong	local01, fp
319c4     15 4E 85 F1 | 	sub	fp, #21
319c8     A7 FA C1 FA | 	rdbyte	result1, fp
319cc     0B 26 06 F1 | 	add	local01, #11
319d0     13 FB 41 FC | 	wrbyte	result1, local01
319d4     15 4E 05 F1 | 	add	fp, #21
319d8     A7 26 02 FB | 	rdlong	local01, fp
319dc     94 4E 85 F1 | 	sub	fp, #148
319e0     0B 26 06 F1 | 	add	local01, #11
319e4     13 27 C2 FA | 	rdbyte	local01, local01
319e8     10 26 CE F7 | 	test	local01, #16 wz
319ec     24 00 90 5D |  if_ne	jmp	#LR__4914
319f0     94 4E 05 F1 | 	add	fp, #148
319f4     A7 FA 01 FB | 	rdlong	result1, fp
319f8     FD 26 02 F6 | 	mov	local01, result1
319fc     94 4E 85 F1 | 	sub	fp, #148
31a00     0B FA 05 F1 | 	add	result1, #11
31a04     FD FA C1 FA | 	rdbyte	result1, result1
31a08     20 FA 45 F5 | 	or	result1, #32
31a0c     0B 26 06 F1 | 	add	local01, #11
31a10     13 FB 41 FC | 	wrbyte	result1, local01
31a14                 | LR__4914
31a14     70 4E 05 F1 | 	add	fp, #112
31a18     A7 26 02 FB | 	rdlong	local01, fp
31a1c     03 26 06 F1 | 	add	local01, #3
31a20     13 03 48 FC | 	wrbyte	#1, local01
31a24     24 4E 05 F1 | 	add	fp, #36
31a28     A7 26 02 FB | 	rdlong	local01, fp
31a2c     94 4E 85 F1 | 	sub	fp, #148
31a30     0B 26 06 F1 | 	add	local01, #11
31a34     13 27 C2 FA | 	rdbyte	local01, local01
31a38     10 26 CE F7 | 	test	local01, #16 wz
31a3c     F8 00 90 AD |  if_e	jmp	#LR__4917
31a40     18 4E 05 F1 | 	add	fp, #24
31a44     A7 16 02 FB | 	rdlong	arg03, fp
31a48     30 4E 05 F1 | 	add	fp, #48
31a4c     A7 26 02 FB | 	rdlong	local01, fp
31a50     48 4E 85 F1 | 	sub	fp, #72
31a54     13 17 0A F2 | 	cmp	arg03, local01 wz
31a58     DC 00 90 AD |  if_e	jmp	#LR__4917
31a5c     70 4E 05 F1 | 	add	fp, #112
31a60     A7 12 02 FB | 	rdlong	arg01, fp
31a64     09 27 02 F6 | 	mov	local01, arg01
31a68     24 4E 05 F1 | 	add	fp, #36
31a6c     A7 14 02 FB | 	rdlong	arg02, fp
31a70     94 4E 85 F1 | 	sub	fp, #148
31a74     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
31a78     FD 14 02 F6 | 	mov	arg02, result1
31a7c     13 13 02 F6 | 	mov	arg01, local01
31a80     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
31a84     98 4E 05 F1 | 	add	fp, #152
31a88     A7 FA 61 FC | 	wrlong	result1, fp
31a8c     00 FA 4D F2 | 	cmps	result1, #0 wz
31a90     98 4E 85 F1 | 	sub	fp, #152
31a94     0C 4E 05 A1 |  if_e	add	fp, #12
31a98     A7 04 68 AC |  if_e	wrlong	#2, fp
31a9c     0C 4E 85 A1 |  if_e	sub	fp, #12
31aa0     94 00 90 AD |  if_e	jmp	#LR__4916
31aa4     70 4E 05 F1 | 	add	fp, #112
31aa8     A7 12 02 FB | 	rdlong	arg01, fp
31aac     28 4E 05 F1 | 	add	fp, #40
31ab0     A7 14 02 FB | 	rdlong	arg02, fp
31ab4     98 4E 85 F1 | 	sub	fp, #152
31ab8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
31abc     0C 4E 05 F1 | 	add	fp, #12
31ac0     A7 FA 61 FC | 	wrlong	result1, fp
31ac4     64 4E 05 F1 | 	add	fp, #100
31ac8     A7 26 02 FB | 	rdlong	local01, fp
31acc     54 26 06 F1 | 	add	local01, #84
31ad0     24 4E 05 F1 | 	add	fp, #36
31ad4     A7 26 62 FC | 	wrlong	local01, fp
31ad8     88 4E 85 F1 | 	sub	fp, #136
31adc     A7 26 0A FB | 	rdlong	local01, fp wz
31ae0     0C 4E 85 F1 | 	sub	fp, #12
31ae4     50 00 90 5D |  if_ne	jmp	#LR__4915
31ae8     94 4E 05 F1 | 	add	fp, #148
31aec     A7 26 02 FB | 	rdlong	local01, fp
31af0     94 4E 85 F1 | 	sub	fp, #148
31af4     01 26 06 F1 | 	add	local01, #1
31af8     13 27 C2 FA | 	rdbyte	local01, local01
31afc     2E 26 0E F2 | 	cmp	local01, #46 wz
31b00     34 00 90 5D |  if_ne	jmp	#LR__4915
31b04     70 4E 05 F1 | 	add	fp, #112
31b08     A7 12 02 FB | 	rdlong	arg01, fp
31b0c     24 4E 05 F1 | 	add	fp, #36
31b10     A7 14 02 FB | 	rdlong	arg02, fp
31b14     4C 4E 85 F1 | 	sub	fp, #76
31b18     A7 16 02 FB | 	rdlong	arg03, fp
31b1c     48 4E 85 F1 | 	sub	fp, #72
31b20     50 AD BF FD | 	call	#_fatfs_cc_st_clust
31b24     70 4E 05 F1 | 	add	fp, #112
31b28     A7 26 02 FB | 	rdlong	local01, fp
31b2c     70 4E 85 F1 | 	sub	fp, #112
31b30     03 26 06 F1 | 	add	local01, #3
31b34     13 03 48 FC | 	wrbyte	#1, local01
31b38                 | LR__4915
31b38                 | LR__4916
31b38                 | LR__4917
31b38                 | LR__4918
31b38                 | LR__4919
31b38     0C 4E 05 F1 | 	add	fp, #12
31b3c     A7 26 0A FB | 	rdlong	local01, fp wz
31b40     0C 4E 85 F1 | 	sub	fp, #12
31b44     40 00 90 5D |  if_ne	jmp	#LR__4921
31b48     10 4E 05 F1 | 	add	fp, #16
31b4c     A7 12 02 F6 | 	mov	arg01, fp
31b50     10 4E 85 F1 | 	sub	fp, #16
31b54     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
31b58     0C 4E 05 F1 | 	add	fp, #12
31b5c     A7 FA 61 FC | 	wrlong	result1, fp
31b60     0C 4E 85 F1 | 	sub	fp, #12
31b64     00 FA 0D F2 | 	cmp	result1, #0 wz
31b68     1C 00 90 5D |  if_ne	jmp	#LR__4920
31b6c     70 4E 05 F1 | 	add	fp, #112
31b70     A7 12 02 FB | 	rdlong	arg01, fp
31b74     70 4E 85 F1 | 	sub	fp, #112
31b78     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
31b7c     0C 4E 05 F1 | 	add	fp, #12
31b80     A7 FA 61 FC | 	wrlong	result1, fp
31b84     0C 4E 85 F1 | 	sub	fp, #12
31b88                 | LR__4920
31b88                 | LR__4921
31b88                 | LR__4922
31b88                 | LR__4923
31b88                 | ' 					res = sync_fs(fs);
31b88                 | ' 				}
31b88                 | ' 			}
31b88                 | ' 
31b88                 | ' 		}
31b88                 | ' 		;
31b88                 | ' 	}
31b88                 | ' 
31b88                 | ' 	return res ;
31b88     0C 4E 05 F1 | 	add	fp, #12
31b8c     A7 FA 01 FB | 	rdlong	result1, fp
31b90     0C 4E 85 F1 | 	sub	fp, #12
31b94     A7 F0 03 F6 | 	mov	ptra, fp
31b98     B2 00 A0 FD | 	call	#popregs_
31b9c                 | _fatfs_cc_f_rename_ret
31b9c     2D 00 64 FD | 	ret
31ba0                 | 
31ba0                 | _fatfs_cc_time
31ba0     00 4A 05 F6 | 	mov	COUNT_, #0
31ba4     A8 00 A0 FD | 	call	#pushregs_
31ba8     14 F0 07 F1 | 	add	ptra, #20
31bac     04 4E 05 F1 | 	add	fp, #4
31bb0     A7 12 62 FC | 	wrlong	arg01, fp
31bb4     04 4E 05 F1 | 	add	fp, #4
31bb8     A7 12 02 F6 | 	mov	arg01, fp
31bbc     08 4E 85 F1 | 	sub	fp, #8
31bc0     00 14 06 F6 | 	mov	arg02, #0
31bc4     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
31bc8     08 4E 05 F1 | 	add	fp, #8
31bcc     A7 FA 01 FB | 	rdlong	result1, fp
31bd0     08 4E 05 F1 | 	add	fp, #8
31bd4     A7 FA 61 FC | 	wrlong	result1, fp
31bd8     0C 4E 85 F1 | 	sub	fp, #12
31bdc     A7 FA 09 FB | 	rdlong	result1, fp wz
31be0     04 4E 85 F1 | 	sub	fp, #4
31be4     18 00 90 AD |  if_e	jmp	#LR__4930
31be8     04 4E 05 F1 | 	add	fp, #4
31bec     A7 FA 01 FB | 	rdlong	result1, fp
31bf0     0C 4E 05 F1 | 	add	fp, #12
31bf4     A7 14 02 FB | 	rdlong	arg02, fp
31bf8     10 4E 85 F1 | 	sub	fp, #16
31bfc     FD 14 62 FC | 	wrlong	arg02, result1
31c00                 | LR__4930
31c00                 | '         *tp = now;
31c00                 | '     return now;
31c00     10 4E 05 F1 | 	add	fp, #16
31c04     A7 FA 01 FB | 	rdlong	result1, fp
31c08     10 4E 85 F1 | 	sub	fp, #16
31c0c     A7 F0 03 F6 | 	mov	ptra, fp
31c10     B2 00 A0 FD | 	call	#popregs_
31c14                 | _fatfs_cc_time_ret
31c14     2D 00 64 FD | 	ret
31c18                 | 
31c18                 | _fatfs_cc_mktime
31c18     06 4A 05 F6 | 	mov	COUNT_, #6
31c1c     A8 00 A0 FD | 	call	#pushregs_
31c20     09 27 02 F6 | 	mov	local01, arg01
31c24     14 26 06 F1 | 	add	local01, #20
31c28     13 13 02 FB | 	rdlong	arg01, local01
31c2c     14 26 86 F1 | 	sub	local01, #20
31c30     46 12 56 F2 | 	cmps	arg01, #70 wc
31c34                 | '                 return (time_t) -1;
31c34     01 FA 65 C6 |  if_b	neg	result1, #1
31c38     7C 01 90 CD |  if_b	jmp	#LR__4944
31c3c     03 00 00 FF 
31c40     6C 29 06 F6 | 	mov	local02, ##1900
31c44     14 26 06 F1 | 	add	local01, #20
31c48     13 FB 01 FB | 	rdlong	result1, local01
31c4c     FD 28 02 F1 | 	add	local02, result1
31c50     08 26 86 F1 | 	sub	local01, #8
31c54     13 2B 02 FB | 	rdlong	local03, local01
31c58     01 2A 86 F1 | 	sub	local03, #1
31c5c     04 26 06 F1 | 	add	local01, #4
31c60     13 13 02 FB | 	rdlong	arg01, local01
31c64     10 26 86 F1 | 	sub	local01, #16
31c68     02 12 66 F0 | 	shl	arg01, #2
31c6c     02 00 00 FF 
31c70     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
31c74     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31c78     09 FB 01 FB | 	rdlong	result1, arg01
31c7c     FD 2A 02 F1 | 	add	local03, result1
31c80     14 13 02 F6 | 	mov	arg01, local02
31c84     02 00 00 FF 
31c88     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
31c8c     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
31c90     00 FA 0D F2 | 	cmp	result1, #0 wz
31c94     1C 00 90 AD |  if_e	jmp	#LR__4940
31c98     00 2C 06 F6 | 	mov	local04, #0
31c9c     10 26 06 F1 | 	add	local01, #16
31ca0     13 FB 01 FB | 	rdlong	result1, local01
31ca4     10 26 86 F1 | 	sub	local01, #16
31ca8     02 FA 55 F2 | 	cmps	result1, #2 wc
31cac     01 2C 06 36 |  if_ae	mov	local04, #1
31cb0     04 00 90 FD | 	jmp	#LR__4941
31cb4                 | LR__4940
31cb4     00 2C 06 F6 | 	mov	local04, #0
31cb8                 | LR__4941
31cb8     04 26 06 F1 | 	add	local01, #4
31cbc     13 FB 01 FB | 	rdlong	result1, local01
31cc0     04 26 86 F1 | 	sub	local01, #4
31cc4     13 2F 02 FB | 	rdlong	local05, local01
31cc8     08 26 06 F1 | 	add	local01, #8
31ccc     13 13 02 FB | 	rdlong	arg01, local01
31cd0     07 00 00 FF 
31cd4     10 12 06 FD | 	qmul	arg01, ##3600
31cd8     16 2B 02 F1 | 	add	local03, local04
31cdc     FD 2C 02 F6 | 	mov	local04, result1
31ce0     04 2C 66 F0 | 	shl	local04, #4
31ce4     FD 2C 82 F1 | 	sub	local04, result1
31ce8     02 2C 66 F0 | 	shl	local04, #2
31cec     16 2F 02 F1 | 	add	local05, local04
31cf0     08 26 86 F1 | 	sub	local01, #8
31cf4     18 2C 62 FD | 	getqx	local04
31cf8     A8 00 00 FF 
31cfc     80 2B 06 FD | 	qmul	local03, ##86400
31d00     16 2F 02 F1 | 	add	local05, local04
31d04     14 2B 02 F6 | 	mov	local03, local02
31d08     03 00 00 FF 
31d0c     B2 2B 86 F1 | 	sub	local03, ##1970
31d10     18 2C 62 FD | 	getqx	local04
31d14     99 F0 00 FF 
31d18     80 2B 06 FD | 	qmul	local03, ##31536000
31d1c     16 2F 02 F1 | 	add	local05, local04
31d20     14 2B 02 F6 | 	mov	local03, local02
31d24     03 00 00 FF 
31d28     B1 2B 86 F1 | 	sub	local03, ##1969
31d2c     15 31 52 F6 | 	abs	local06, local03 wc
31d30     02 30 46 F0 | 	shr	local06, #2
31d34     18 31 82 F6 | 	negc	local06, local06
31d38     03 00 00 FF 
31d3c     D1 29 56 F2 | 	cmps	local02, ##2001 wc
31d40     18 2C 62 FD | 	getqx	local04
31d44     16 2F 02 F1 | 	add	local05, local04
31d48     18 00 90 CD |  if_b	jmp	#LR__4942
31d4c     03 00 00 FF 
31d50     D0 29 86 F1 | 	sub	local02, ##2000
31d54     14 2D 52 F6 | 	abs	local04, local02 wc
31d58     64 2C 16 FD | 	qdiv	local04, #100
31d5c     18 2C 62 FD | 	getqx	local04
31d60     16 31 A2 F3 | 	sumnc	local06, local04
31d64                 | LR__4942
31d64     A8 00 00 FF 
31d68     80 31 06 FD | 	qmul	local06, ##86400
31d6c     18 30 62 FD | 	getqx	local06
31d70     18 2F 02 F1 | 	add	local05, local06
31d74     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
31d78     02 00 00 FF 
31d7c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
31d80     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
31d84     18 2F 02 F1 | 	add	local05, local06
31d88     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
31d8c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31d90     02 00 00 FF 
31d94     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31d98     01 2A 0E F2 | 	cmp	local03, #1 wz
31d9c     14 00 90 5D |  if_ne	jmp	#LR__4943
31da0     13 13 02 F6 | 	mov	arg01, local01
31da4     DC 19 B0 FD | 	call	#_fatfs_cc___indst
31da8     00 FA 0D F2 | 	cmp	result1, #0 wz
31dac     07 00 00 5F 
31db0     10 2E 86 51 |  if_ne	sub	local05, ##3600
31db4                 | LR__4943
31db4                 | '                 s -=  (3600L) ;
31db4                 | ' 
31db4                 | '         return s;
31db4     17 FB 01 F6 | 	mov	result1, local05
31db8                 | LR__4944
31db8     A7 F0 03 F6 | 	mov	ptra, fp
31dbc     B2 00 A0 FD | 	call	#popregs_
31dc0                 | _fatfs_cc_mktime_ret
31dc0     2D 00 64 FD | 	ret
31dc4                 | 
31dc4                 | _fatfs_cc__gmtime_r
31dc4     03 4A 05 F6 | 	mov	COUNT_, #3
31dc8     A8 00 A0 FD | 	call	#pushregs_
31dcc     09 27 02 FB | 	rdlong	local01, arg01
31dd0     A8 00 00 FF 
31dd4     80 27 16 FD | 	qdiv	local01, ##86400
31dd8     18 FA 61 FD | 	getqx	result1
31ddc     04 FA 05 F1 | 	add	result1, #4
31de0     07 FA 15 FD | 	qdiv	result1, #7
31de4     18 14 06 F1 | 	add	arg02, #24
31de8     D1 7F 27 FF 
31dec     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
31df0     D1 7F 27 3F 
31df4     00 26 86 31 |  if_ae	sub	local01, ##1325376000
31df8     03 00 00 3F 
31dfc     DC 29 06 36 |  if_ae	mov	local02, ##2012
31e00     03 00 00 CF 
31e04     B2 29 06 C6 |  if_b	mov	local02, ##1970
31e08                 | ' 	  year = 1970;
31e08                 | ' 	}
31e08                 | ' 
31e08                 | ' 	for(;;) {
31e08     19 FA 61 FD | 	getqy	result1
31e0c     0A FB 61 FC | 	wrlong	result1, arg02
31e10     18 14 86 F1 | 	sub	arg02, #24
31e14                 | LR__4950
31e14     14 13 02 F6 | 	mov	arg01, local02
31e18     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
31e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
31e20     42 F1 00 5F 
31e24     00 2B 06 56 |  if_ne	mov	local03, ##31622400
31e28     99 F0 00 AF 
31e2c     80 2B 06 A6 |  if_e	mov	local03, ##31536000
31e30     15 27 12 F2 | 	cmp	local01, local03 wc
31e34                 | ' 	    break;
31e34     01 28 06 31 |  if_ae	add	local02, #1
31e38     15 27 82 31 |  if_ae	sub	local01, local03
31e3c     D4 FF 9F 3D |  if_ae	jmp	#LR__4950
31e40     A8 00 00 FF 
31e44     80 27 16 FD | 	qdiv	local01, ##86400
31e48     14 2B 02 F6 | 	mov	local03, local02
31e4c     03 00 00 FF 
31e50     6C 2B 86 F1 | 	sub	local03, ##1900
31e54     14 14 06 F1 | 	add	arg02, #20
31e58     0A 2B 62 FC | 	wrlong	local03, arg02
31e5c     08 14 06 F1 | 	add	arg02, #8
31e60     14 13 02 F6 | 	mov	arg01, local02
31e64     18 28 62 FD | 	getqx	local02
31e68     0A 29 62 FC | 	wrlong	local02, arg02
31e6c     1C 14 86 F1 | 	sub	arg02, #28
31e70     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
31e74     00 FA 0D F2 | 	cmp	result1, #0 wz
31e78     1D 2A 06 56 |  if_ne	mov	local03, #29
31e7c     1C 2A 06 A6 |  if_e	mov	local03, #28
31e80     02 00 00 FF 
31e84     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
31e88     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
31e8c     02 00 00 FF 
31e90     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
31e94                 | ' 
31e94                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
31e94                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
31e94     00 12 06 F6 | 	mov	arg01, #0
31e98     97 2A 48 FB | 	callpa	#(@LR__4952-@LR__4951)>>2,fcache_load_ptr_
31e9c                 | LR__4951
31e9c     09 2B 02 F6 | 	mov	local03, arg01
31ea0     02 2A 66 F0 | 	shl	local03, #2
31ea4     02 00 00 FF 
31ea8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
31eac     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
31eb0     15 2B 02 FB | 	rdlong	local03, local03
31eb4     15 29 52 F2 | 	cmps	local02, local03 wc
31eb8     02 00 00 FF 
31ebc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
31ec0     2C 00 90 CD |  if_b	jmp	#LR__4953
31ec4     09 2B 02 F6 | 	mov	local03, arg01
31ec8     02 2A 66 F0 | 	shl	local03, #2
31ecc     02 00 00 FF 
31ed0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
31ed4     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
31ed8     15 2B 02 FB | 	rdlong	local03, local03
31edc     15 29 82 F1 | 	sub	local02, local03
31ee0     01 12 06 F1 | 	add	arg01, #1
31ee4     02 00 00 FF 
31ee8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
31eec     AC FF 9F FD | 	jmp	#LR__4951
31ef0                 | LR__4952
31ef0                 | LR__4953
31ef0     A8 00 00 FF 
31ef4     80 27 16 FD | 	qdiv	local01, ##86400
31ef8     10 14 06 F1 | 	add	arg02, #16
31efc     0A 13 62 FC | 	wrlong	arg01, arg02
31f00     01 28 06 F1 | 	add	local02, #1
31f04     04 14 86 F1 | 	sub	arg02, #4
31f08     0A 29 62 FC | 	wrlong	local02, arg02
31f0c     19 26 62 FD | 	getqy	local01
31f10     07 00 00 FF 
31f14     10 26 16 FD | 	qdiv	local01, ##3600
31f18     18 2A 62 FD | 	getqx	local03
31f1c     07 00 00 FF 
31f20     10 26 16 FD | 	qdiv	local01, ##3600
31f24     04 14 86 F1 | 	sub	arg02, #4
31f28     0A 2B 62 FC | 	wrlong	local03, arg02
31f2c     19 26 62 FD | 	getqy	local01
31f30     3C 26 16 FD | 	qdiv	local01, #60
31f34     18 2A 62 FD | 	getqx	local03
31f38     3C 26 16 FD | 	qdiv	local01, #60
31f3c     04 14 86 F1 | 	sub	arg02, #4
31f40     0A 2B 62 FC | 	wrlong	local03, arg02
31f44     04 14 86 F1 | 	sub	arg02, #4
31f48                 | '         stm->tm_isdst = 0;
31f48                 | ' 
31f48                 | ' ;
31f48                 | '         return stm;
31f48     0A FB 01 F6 | 	mov	result1, arg02
31f4c     19 2A 62 FD | 	getqy	local03
31f50     0A 2B 62 FC | 	wrlong	local03, arg02
31f54     20 14 06 F1 | 	add	arg02, #32
31f58     0A 01 68 FC | 	wrlong	#0, arg02
31f5c     A7 F0 03 F6 | 	mov	ptra, fp
31f60     B2 00 A0 FD | 	call	#popregs_
31f64                 | _fatfs_cc__gmtime_r_ret
31f64     2D 00 64 FD | 	ret
31f68                 | 
31f68                 | _fatfs_cc__tzset
31f68     9D 01 00 FF 
31f6c     AD 12 06 F6 | 	mov	arg01, ##@LR__5265
31f70     34 00 B0 FD | 	call	#_fatfs_cc_getenv
31f74     FD 12 02 F6 | 	mov	arg01, result1
31f78     02 00 00 FF 
31f7c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31f80     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
31f84     02 00 00 FF 
31f88     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31f8c     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
31f90     02 00 00 FF 
31f94     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
31f98     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
31f9c     02 00 00 FF 
31fa0     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
31fa4                 | _fatfs_cc__tzset_ret
31fa4     2D 00 64 FD | 	ret
31fa8                 | 
31fa8                 | _fatfs_cc_getenv
31fa8     06 4A 05 F6 | 	mov	COUNT_, #6
31fac     A8 00 A0 FD | 	call	#pushregs_
31fb0     09 27 02 F6 | 	mov	local01, arg01
31fb4     09 29 02 F6 | 	mov	local02, arg01
31fb8     97 06 48 FB | 	callpa	#(@LR__4961-@LR__4960)>>2,fcache_load_ptr_
31fbc                 | LR__4960
31fbc     14 FB C9 FA | 	rdbyte	result1, local02 wz
31fc0     01 28 06 51 |  if_ne	add	local02, #1
31fc4     F4 FF 9F 5D |  if_ne	jmp	#LR__4960
31fc8                 | LR__4961
31fc8     09 29 82 F1 | 	sub	local02, arg01
31fcc     14 FB 01 F6 | 	mov	result1, local02
31fd0     02 00 00 FF 
31fd4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
31fd8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
31fdc     02 00 00 FF 
31fe0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
31fe4                 | '             return 0;
31fe4     00 FA 05 A6 |  if_e	mov	result1, #0
31fe8     5C 00 90 AD |  if_e	jmp	#LR__4964
31fec                 | ' 
31fec                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31fec     02 00 00 FF 
31ff0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
31ff4     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31ff8     02 00 00 FF 
31ffc     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
32000                 | LR__4962
32000     15 2D 0A FB | 	rdlong	local04, local03 wz
32004     3C 00 90 AD |  if_e	jmp	#LR__4963
32008     16 13 02 F6 | 	mov	arg01, local04
3200c     13 15 02 F6 | 	mov	arg02, local01
32010     14 17 02 F6 | 	mov	arg03, local02
32014     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
32018     00 FA 0D F2 | 	cmp	result1, #0 wz
3201c     14 2F 02 A6 |  if_e	mov	local05, local02
32020     16 2F 02 A1 |  if_e	add	local05, local04
32024     17 31 C2 AA |  if_e	rdbyte	local06, local05
32028     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
3202c                 | ' 			return name+len+1;
3202c     14 2D 02 A1 |  if_e	add	local04, local02
32030     01 2C 06 A1 |  if_e	add	local04, #1
32034     16 FB 01 A6 |  if_e	mov	result1, local04
32038     0C 00 90 AD |  if_e	jmp	#LR__4964
3203c     04 2A 06 F1 | 	add	local03, #4
32040     BC FF 9F FD | 	jmp	#LR__4962
32044                 | LR__4963
32044                 | ' 	}
32044                 | ' 	return 0;
32044     00 FA 05 F6 | 	mov	result1, #0
32048                 | LR__4964
32048     A7 F0 03 F6 | 	mov	ptra, fp
3204c     B2 00 A0 FD | 	call	#popregs_
32050                 | _fatfs_cc_getenv_ret
32050     2D 00 64 FD | 	ret
32054                 | 
32054                 | _fatfs_cc__get_fattime
32054     00 4A 05 F6 | 	mov	COUNT_, #0
32058     A8 00 A0 FD | 	call	#pushregs_
3205c     34 F0 07 F1 | 	add	ptra, #52
32060     00 12 06 F6 | 	mov	arg01, #0
32064     38 FB BF FD | 	call	#_fatfs_cc_time
32068     04 4E 05 F1 | 	add	fp, #4
3206c     A7 FA 61 FC | 	wrlong	result1, fp
32070     A7 12 02 F6 | 	mov	arg01, fp
32074     0C 4E 05 F1 | 	add	fp, #12
32078     A7 14 02 F6 | 	mov	arg02, fp
3207c     10 4E 85 F1 | 	sub	fp, #16
32080     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
32084     24 4E 05 F1 | 	add	fp, #36
32088     A7 14 02 FB | 	rdlong	arg02, fp
3208c     50 14 86 F1 | 	sub	arg02, #80
32090     09 14 66 F0 | 	shl	arg02, #9
32094     04 4E 85 F1 | 	sub	fp, #4
32098     A7 FA 01 FB | 	rdlong	result1, fp
3209c     01 FA 05 F1 | 	add	result1, #1
320a0     05 FA 65 F0 | 	shl	result1, #5
320a4     FD 14 42 F5 | 	or	arg02, result1
320a8     04 4E 85 F1 | 	sub	fp, #4
320ac     A7 FA 01 FB | 	rdlong	result1, fp
320b0     FD 14 42 F5 | 	or	arg02, result1
320b4     14 4E 85 F1 | 	sub	fp, #20
320b8     A7 14 62 FC | 	wrlong	arg02, fp
320bc     10 4E 05 F1 | 	add	fp, #16
320c0     A7 14 02 FB | 	rdlong	arg02, fp
320c4     0B 14 66 F0 | 	shl	arg02, #11
320c8     04 4E 85 F1 | 	sub	fp, #4
320cc     A7 FA 01 FB | 	rdlong	result1, fp
320d0     05 FA 65 F0 | 	shl	result1, #5
320d4     FD 14 42 F5 | 	or	arg02, result1
320d8     04 4E 85 F1 | 	sub	fp, #4
320dc     A7 FA 01 FB | 	rdlong	result1, fp
320e0     FD 14 42 F5 | 	or	arg02, result1
320e4     04 4E 85 F1 | 	sub	fp, #4
320e8     A7 14 62 FC | 	wrlong	arg02, fp
320ec                 | ' 
320ec                 | '     now = time(0);
320ec                 | '     _gmtime_r (&now, &date);
320ec                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
320ec                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
320ec                 | '     return (ffdate << 16) | fftime;
320ec     04 4E 85 F1 | 	sub	fp, #4
320f0     A7 FA 01 FB | 	rdlong	result1, fp
320f4     10 FA 65 F0 | 	shl	result1, #16
320f8     08 4E 85 F1 | 	sub	fp, #8
320fc     0A FB 41 F5 | 	or	result1, arg02
32100     A7 F0 03 F6 | 	mov	ptra, fp
32104     B2 00 A0 FD | 	call	#popregs_
32108                 | _fatfs_cc__get_fattime_ret
32108     2D 00 64 FD | 	ret
3210c                 | 
3210c                 | _fatfs_cc_unixtime_1005
3210c     00 4A 05 F6 | 	mov	COUNT_, #0
32110     A8 00 A0 FD | 	call	#pushregs_
32114     34 F0 07 F1 | 	add	ptra, #52
32118     04 4E 05 F1 | 	add	fp, #4
3211c     A7 12 62 FC | 	wrlong	arg01, fp
32120     04 4E 05 F1 | 	add	fp, #4
32124     A7 14 62 FC | 	wrlong	arg02, fp
32128     04 4E 85 F1 | 	sub	fp, #4
3212c     A7 14 02 FB | 	rdlong	arg02, fp
32130     09 14 46 F0 | 	shr	arg02, #9
32134     7F 14 06 F5 | 	and	arg02, #127
32138     50 FA 05 F6 | 	mov	result1, #80
3213c     0A FB 01 F1 | 	add	result1, arg02
32140     20 4E 05 F1 | 	add	fp, #32
32144     A7 FA 61 FC | 	wrlong	result1, fp
32148     20 4E 85 F1 | 	sub	fp, #32
3214c     A7 FA 01 FB | 	rdlong	result1, fp
32150     05 FA 45 F0 | 	shr	result1, #5
32154     FD FA 41 F8 | 	getnib	result1, result1, #0
32158     01 FA 85 F1 | 	sub	result1, #1
3215c     1C 4E 05 F1 | 	add	fp, #28
32160     A7 FA 61 FC | 	wrlong	result1, fp
32164     1C 4E 85 F1 | 	sub	fp, #28
32168     A7 FA 01 FB | 	rdlong	result1, fp
3216c     1F FA 05 F5 | 	and	result1, #31
32170     18 4E 05 F1 | 	add	fp, #24
32174     A7 FA 61 FC | 	wrlong	result1, fp
32178     14 4E 85 F1 | 	sub	fp, #20
3217c     A7 FA 01 FB | 	rdlong	result1, fp
32180     0B FA 45 F0 | 	shr	result1, #11
32184     1F FA 05 F5 | 	and	result1, #31
32188     10 4E 05 F1 | 	add	fp, #16
3218c     A7 FA 61 FC | 	wrlong	result1, fp
32190     10 4E 85 F1 | 	sub	fp, #16
32194     A7 FA 01 FB | 	rdlong	result1, fp
32198     05 FA 45 F0 | 	shr	result1, #5
3219c     3F FA 05 F5 | 	and	result1, #63
321a0     0C 4E 05 F1 | 	add	fp, #12
321a4     A7 FA 61 FC | 	wrlong	result1, fp
321a8     0C 4E 85 F1 | 	sub	fp, #12
321ac     A7 14 02 FB | 	rdlong	arg02, fp
321b0     1F 14 06 F5 | 	and	arg02, #31
321b4     01 14 66 F0 | 	shl	arg02, #1
321b8     08 4E 05 F1 | 	add	fp, #8
321bc     A7 14 62 FC | 	wrlong	arg02, fp
321c0     A7 12 02 F6 | 	mov	arg01, fp
321c4     10 4E 85 F1 | 	sub	fp, #16
321c8     4C FA BF FD | 	call	#_fatfs_cc_mktime
321cc     0C 4E 05 F1 | 	add	fp, #12
321d0     A7 FA 61 FC | 	wrlong	result1, fp
321d4                 | ' 
321d4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
321d4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
321d4                 | '     date.tm_mday = (dosdate & 0x1f);
321d4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
321d4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
321d4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
321d4                 | ' 
321d4                 | '     t = mktime(&date);
321d4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
321d4                 | '     return t;
321d4     0C 4E 85 F1 | 	sub	fp, #12
321d8     A7 F0 03 F6 | 	mov	ptra, fp
321dc     B2 00 A0 FD | 	call	#popregs_
321e0                 | _fatfs_cc_unixtime_1005_ret
321e0     2D 00 64 FD | 	ret
321e4                 | 
321e4                 | _fatfs_cc__set_dos_error_1007
321e4     09 01 02 F6 | 	mov	_var01, arg01
321e8                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
321e8                 | '     switch (derr) {
321e8     14 00 26 F3 | 	fle	_var01, #20
321ec     30 00 62 FD | 	jmprel	_var01
321f0                 | LR__4970
321f0     50 00 90 FD | 	jmp	#LR__4971
321f4     84 00 90 FD | 	jmp	#LR__4985
321f8     80 00 90 FD | 	jmp	#LR__4986
321fc     7C 00 90 FD | 	jmp	#LR__4987
32200     48 00 90 FD | 	jmp	#LR__4972
32204     44 00 90 FD | 	jmp	#LR__4973
32208     40 00 90 FD | 	jmp	#LR__4974
3220c     44 00 90 FD | 	jmp	#LR__4975
32210     48 00 90 FD | 	jmp	#LR__4977
32214     54 00 90 FD | 	jmp	#LR__4980
32218     38 00 90 FD | 	jmp	#LR__4976
3221c     4C 00 90 FD | 	jmp	#LR__4981
32220     48 00 90 FD | 	jmp	#LR__4982
32224     44 00 90 FD | 	jmp	#LR__4983
32228     50 00 90 FD | 	jmp	#LR__4988
3222c     4C 00 90 FD | 	jmp	#LR__4988
32230     48 00 90 FD | 	jmp	#LR__4988
32234     2C 00 90 FD | 	jmp	#LR__4978
32238     38 00 90 FD | 	jmp	#LR__4984
3223c     2C 00 90 FD | 	jmp	#LR__4979
32240     38 00 90 FD | 	jmp	#LR__4988
32244                 | LR__4971
32244     00 02 06 F6 | 	mov	_var02, #0
32248                 | '         r = 0;
32248                 | '         break;
32248     34 00 90 FD | 	jmp	#LR__4989
3224c                 | LR__4972
3224c                 | LR__4973
3224c                 | LR__4974
3224c     04 02 06 F6 | 	mov	_var02, #4
32250                 | '         r =  4 ;
32250                 | '         break;
32250     2C 00 90 FD | 	jmp	#LR__4989
32254                 | LR__4975
32254                 | LR__4976
32254     06 02 06 F6 | 	mov	_var02, #6
32258                 | '         r =  6 ;
32258                 | '         break;
32258     24 00 90 FD | 	jmp	#LR__4989
3225c                 | LR__4977
3225c     09 02 06 F6 | 	mov	_var02, #9
32260                 | '         r =  9 ;
32260                 | '         break;
32260     1C 00 90 FD | 	jmp	#LR__4989
32264                 | LR__4978
32264     07 02 06 F6 | 	mov	_var02, #7
32268                 | '         r =  7 ;
32268                 | '         break;
32268     14 00 90 FD | 	jmp	#LR__4989
3226c                 | LR__4979
3226c                 | LR__4980
3226c                 | LR__4981
3226c                 | LR__4982
3226c                 | LR__4983
3226c     0A 02 06 F6 | 	mov	_var02, #10
32270                 | '         r =  10 ;
32270                 | '         break;
32270     0C 00 90 FD | 	jmp	#LR__4989
32274                 | LR__4984
32274     0B 02 06 F6 | 	mov	_var02, #11
32278                 | '         r =  11 ;
32278                 | '         break;
32278     04 00 90 FD | 	jmp	#LR__4989
3227c                 | LR__4985
3227c                 | LR__4986
3227c                 | LR__4987
3227c                 | LR__4988
3227c     0C 02 06 F6 | 	mov	_var02, #12
32280                 | '         r =  12 ;
32280                 | '         break;
32280                 | LR__4989
32280                 | '     }
32280                 | '     return _seterror(r);
32280     00 02 4E F2 | 	cmps	_var02, #0 wz
32284     20 E6 05 F1 | 	add	ptr___system__dat__, #32
32288     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
3228c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
32290     01 FA 65 56 |  if_ne	neg	result1, #1
32294     00 FA 05 A6 |  if_e	mov	result1, #0
32298                 | _fatfs_cc__set_dos_error_1007_ret
32298     2D 00 64 FD | 	ret
3229c                 | 
3229c                 | _fatfs_cc_v_creat
3229c     04 4A 05 F6 | 	mov	COUNT_, #4
322a0     A8 00 A0 FD | 	call	#pushregs_
322a4     09 27 02 F6 | 	mov	local01, arg01
322a8     0A 29 02 F6 | 	mov	local02, arg02
322ac     03 00 00 FF 
322b0     3C 12 06 F6 | 	mov	arg01, ##1596
322b4                 | '     return _gc_alloc(size);
322b4     10 14 06 F6 | 	mov	arg02, #16
322b8     28 5E BF FD | 	call	#__system___gc_doalloc
322bc     FD 2A 0A F6 | 	mov	local03, result1 wz
322c0                 | '       return _seterror( 7 );
322c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
322c4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
322c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
322cc     01 FA 65 A6 |  if_e	neg	result1, #1
322d0     58 00 90 AD |  if_e	jmp	#LR__4991
322d4     15 13 02 F6 | 	mov	arg01, local03
322d8     00 14 06 F6 | 	mov	arg02, #0
322dc     03 00 00 FF 
322e0     3C 16 06 F6 | 	mov	arg03, ##1596
322e4     98 00 A0 FD | 	call	#\builtin_bytefill_
322e8     02 00 00 FF 
322ec     14 2A 06 F1 | 	add	local03, ##1044
322f0     15 13 02 F6 | 	mov	arg01, local03
322f4     02 00 00 FF 
322f8     14 2A 86 F1 | 	sub	local03, ##1044
322fc     14 15 02 F6 | 	mov	arg02, local02
32300     07 16 06 F6 | 	mov	arg03, #7
32304     B4 CC BF FD | 	call	#_fatfs_cc_f_open
32308     FD 2C 0A F6 | 	mov	local04, result1 wz
3230c     14 00 90 AD |  if_e	jmp	#LR__4990
32310     15 13 02 F6 | 	mov	arg01, local03
32314                 | '     return _gc_free(ptr);
32314     D8 5E BF FD | 	call	#__system___gc_free
32318                 | '     free(f);
32318                 | '     return _set_dos_error(r);
32318     16 13 02 F6 | 	mov	arg01, local04
3231c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32320     08 00 90 FD | 	jmp	#LR__4991
32324                 | LR__4990
32324     13 2B 62 FC | 	wrlong	local03, local01
32328                 | '   }
32328                 | '   fil->vfsdata = f;
32328                 | '   return 0;
32328     00 FA 05 F6 | 	mov	result1, #0
3232c                 | LR__4991
3232c     A7 F0 03 F6 | 	mov	ptra, fp
32330     B2 00 A0 FD | 	call	#popregs_
32334                 | _fatfs_cc_v_creat_ret
32334     2D 00 64 FD | 	ret
32338                 | 
32338                 | _fatfs_cc_v_close
32338     02 4A 05 F6 | 	mov	COUNT_, #2
3233c     A8 00 A0 FD | 	call	#pushregs_
32340     09 27 02 FB | 	rdlong	local01, arg01
32344     02 00 00 FF 
32348     14 26 06 F1 | 	add	local01, ##1044
3234c     13 13 02 F6 | 	mov	arg01, local01
32350     02 00 00 FF 
32354     14 26 86 F1 | 	sub	local01, ##1044
32358     DC E3 BF FD | 	call	#_fatfs_cc_f_close
3235c     FD 28 02 F6 | 	mov	local02, result1
32360     13 13 02 F6 | 	mov	arg01, local01
32364                 | '     return _gc_free(ptr);
32364     88 5E BF FD | 	call	#__system___gc_free
32368                 | '     FAT_FIL *f = fil->vfsdata;
32368                 | '     r=f_close(&f->fil);
32368                 | '     free(f);
32368                 | '     return _set_dos_error(r);
32368     14 13 02 F6 | 	mov	arg01, local02
3236c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32370     A7 F0 03 F6 | 	mov	ptra, fp
32374     B2 00 A0 FD | 	call	#popregs_
32378                 | _fatfs_cc_v_close_ret
32378     2D 00 64 FD | 	ret
3237c                 | 
3237c                 | _fatfs_cc_v_opendir
3237c     04 4A 05 F6 | 	mov	COUNT_, #4
32380     A8 00 A0 FD | 	call	#pushregs_
32384     09 27 02 F6 | 	mov	local01, arg01
32388     0A 29 02 F6 | 	mov	local02, arg02
3238c     30 12 06 F6 | 	mov	arg01, #48
32390                 | '     return _gc_alloc(size);
32390     10 14 06 F6 | 	mov	arg02, #16
32394     4C 5D BF FD | 	call	#__system___gc_doalloc
32398     FD 2A 0A F6 | 	mov	local03, result1 wz
3239c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3239c                 | '       return _seterror( 7 );
3239c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
323a0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
323a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
323a8     01 FA 65 A6 |  if_e	neg	result1, #1
323ac     34 00 90 AD |  if_e	jmp	#LR__5001
323b0     14 15 02 F6 | 	mov	arg02, local02
323b4     15 13 02 F6 | 	mov	arg01, local03
323b8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
323bc     FD 2C 0A F6 | 	mov	local04, result1 wz
323c0     14 00 90 AD |  if_e	jmp	#LR__5000
323c4     15 13 02 F6 | 	mov	arg01, local03
323c8                 | '     return _gc_free(ptr);
323c8     24 5E BF FD | 	call	#__system___gc_free
323cc                 | '         free(f);
323cc                 | '         return _set_dos_error(r);
323cc     16 13 02 F6 | 	mov	arg01, local04
323d0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1007
323d4     0C 00 90 FD | 	jmp	#LR__5001
323d8                 | LR__5000
323d8     04 26 06 F1 | 	add	local01, #4
323dc     13 2B 62 FC | 	wrlong	local03, local01
323e0                 | '     }
323e0                 | '     dir->vfsdata = f;
323e0                 | '     return 0;
323e0     00 FA 05 F6 | 	mov	result1, #0
323e4                 | LR__5001
323e4     A7 F0 03 F6 | 	mov	ptra, fp
323e8     B2 00 A0 FD | 	call	#popregs_
323ec                 | _fatfs_cc_v_opendir_ret
323ec     2D 00 64 FD | 	ret
323f0                 | 
323f0                 | _fatfs_cc_v_closedir
323f0     02 4A 05 F6 | 	mov	COUNT_, #2
323f4     A8 00 A0 FD | 	call	#pushregs_
323f8     04 12 06 F1 | 	add	arg01, #4
323fc     09 27 02 FB | 	rdlong	local01, arg01
32400     13 13 02 F6 | 	mov	arg01, local01
32404     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
32408     FD 28 02 F6 | 	mov	local02, result1
3240c     13 13 02 F6 | 	mov	arg01, local01
32410                 | '     return _gc_free(ptr);
32410     DC 5D BF FD | 	call	#__system___gc_free
32414     00 28 0E F2 | 	cmp	local02, #0 wz
32418     14 13 02 56 |  if_ne	mov	arg01, local02
3241c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1007
32420                 | '     return r;
32420     14 FB 01 F6 | 	mov	result1, local02
32424     A7 F0 03 F6 | 	mov	ptra, fp
32428     B2 00 A0 FD | 	call	#popregs_
3242c                 | _fatfs_cc_v_closedir_ret
3242c     2D 00 64 FD | 	ret
32430                 | 
32430                 | _fatfs_cc_v_readdir
32430     01 4A 05 F6 | 	mov	COUNT_, #1
32434     A8 00 A0 FD | 	call	#pushregs_
32438     2C F1 07 F1 | 	add	ptra, #300
3243c     04 4E 05 F1 | 	add	fp, #4
32440     A7 12 62 FC | 	wrlong	arg01, fp
32444     04 4E 05 F1 | 	add	fp, #4
32448     A7 14 62 FC | 	wrlong	arg02, fp
3244c     04 4E 85 F1 | 	sub	fp, #4
32450     A7 16 02 FB | 	rdlong	arg03, fp
32454     04 16 06 F1 | 	add	arg03, #4
32458     0B 13 02 FB | 	rdlong	arg01, arg03
3245c     08 4E 05 F1 | 	add	fp, #8
32460     A7 14 02 F6 | 	mov	arg02, fp
32464     0C 4E 85 F1 | 	sub	fp, #12
32468     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
3246c     28 4F 05 F1 | 	add	fp, #296
32470     A7 FA 61 FC | 	wrlong	result1, fp
32474     28 4F 85 F1 | 	sub	fp, #296
32478     00 FA 0D F2 | 	cmp	result1, #0 wz
3247c     14 00 90 AD |  if_e	jmp	#LR__5010
32480                 | '         return _set_dos_error(r);
32480     28 4F 05 F1 | 	add	fp, #296
32484     A7 12 02 FB | 	rdlong	arg01, fp
32488     28 4F 85 F1 | 	sub	fp, #296
3248c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32490     C4 00 90 FD | 	jmp	#LR__5013
32494                 | LR__5010
32494     28 4E 05 F1 | 	add	fp, #40
32498     A7 16 CA FA | 	rdbyte	arg03, fp wz
3249c     28 4E 85 F1 | 	sub	fp, #40
324a0                 | '         return -1;
324a0     01 FA 65 A6 |  if_e	neg	result1, #1
324a4     B0 00 90 AD |  if_e	jmp	#LR__5013
324a8     08 4E 05 F1 | 	add	fp, #8
324ac     A7 12 02 FB | 	rdlong	arg01, fp
324b0     20 4E 05 F1 | 	add	fp, #32
324b4     A7 14 02 F6 | 	mov	arg02, fp
324b8     28 4E 85 F1 | 	sub	fp, #40
324bc     3F 16 06 F6 | 	mov	arg03, #63
324c0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
324c4     08 4E 05 F1 | 	add	fp, #8
324c8     A7 16 02 FB | 	rdlong	arg03, fp
324cc     3F 16 06 F1 | 	add	arg03, #63
324d0     0B 01 48 FC | 	wrbyte	#0, arg03
324d4     0C 4E 05 F1 | 	add	fp, #12
324d8     A7 16 C2 FA | 	rdbyte	arg03, fp
324dc     14 4E 85 F1 | 	sub	fp, #20
324e0     10 16 CE F7 | 	test	arg03, #16 wz
324e4     18 00 90 AD |  if_e	jmp	#LR__5011
324e8     08 4E 05 F1 | 	add	fp, #8
324ec     A7 16 02 FB | 	rdlong	arg03, fp
324f0     08 4E 85 F1 | 	sub	fp, #8
324f4     50 16 06 F1 | 	add	arg03, #80
324f8     0B 03 48 FC | 	wrbyte	#1, arg03
324fc     14 00 90 FD | 	jmp	#LR__5012
32500                 | LR__5011
32500     08 4E 05 F1 | 	add	fp, #8
32504     A7 16 02 FB | 	rdlong	arg03, fp
32508     08 4E 85 F1 | 	sub	fp, #8
3250c     50 16 06 F1 | 	add	arg03, #80
32510     0B 01 48 FC | 	wrbyte	#0, arg03
32514                 | LR__5012
32514     08 4E 05 F1 | 	add	fp, #8
32518     A7 16 02 FB | 	rdlong	arg03, fp
3251c     04 4E 05 F1 | 	add	fp, #4
32520     A7 14 02 FB | 	rdlong	arg02, fp
32524     48 16 06 F1 | 	add	arg03, #72
32528     0B 15 62 FC | 	wrlong	arg02, arg03
3252c     04 4E 85 F1 | 	sub	fp, #4
32530     A7 26 02 FB | 	rdlong	local01, fp
32534     08 4E 05 F1 | 	add	fp, #8
32538     A7 12 E2 FA | 	rdword	arg01, fp
3253c     02 4E 05 F1 | 	add	fp, #2
32540     A7 14 E2 FA | 	rdword	arg02, fp
32544     12 4E 85 F1 | 	sub	fp, #18
32548     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1005
3254c     4C 26 06 F1 | 	add	local01, #76
32550     13 FB 61 FC | 	wrlong	result1, local01
32554                 | '         ent->d_type =  (0) ;
32554                 | '     }
32554                 | '     ent->d_size = finfo.fsize;
32554                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
32554                 | '     return 0;
32554     00 FA 05 F6 | 	mov	result1, #0
32558                 | LR__5013
32558     A7 F0 03 F6 | 	mov	ptra, fp
3255c     B2 00 A0 FD | 	call	#popregs_
32560                 | _fatfs_cc_v_readdir_ret
32560     2D 00 64 FD | 	ret
32564                 | 
32564                 | _fatfs_cc_v_stat
32564     03 4A 05 F6 | 	mov	COUNT_, #3
32568     A8 00 A0 FD | 	call	#pushregs_
3256c     30 F1 07 F1 | 	add	ptra, #304
32570     04 4E 05 F1 | 	add	fp, #4
32574     A7 12 62 FC | 	wrlong	arg01, fp
32578     04 4E 05 F1 | 	add	fp, #4
3257c     A7 14 62 FC | 	wrlong	arg02, fp
32580     08 4E 85 F1 | 	sub	fp, #8
32584     0A 13 02 F6 | 	mov	arg01, arg02
32588     00 14 06 F6 | 	mov	arg02, #0
3258c     30 16 06 F6 | 	mov	arg03, #48
32590     98 00 A0 FD | 	call	#\builtin_bytefill_
32594     04 4E 05 F1 | 	add	fp, #4
32598     A7 FA 01 FB | 	rdlong	result1, fp
3259c     04 4E 85 F1 | 	sub	fp, #4
325a0     FD FA C9 FA | 	rdbyte	result1, result1 wz
325a4     2C 00 90 AD |  if_e	jmp	#LR__5020
325a8     04 4E 05 F1 | 	add	fp, #4
325ac     A7 FA 01 FB | 	rdlong	result1, fp
325b0     04 4E 85 F1 | 	sub	fp, #4
325b4     FD FA C1 FA | 	rdbyte	result1, result1
325b8     2E FA 0D F2 | 	cmp	result1, #46 wz
325bc     04 4E 05 A1 |  if_e	add	fp, #4
325c0     A7 26 02 AB |  if_e	rdlong	local01, fp
325c4     04 4E 85 A1 |  if_e	sub	fp, #4
325c8     01 26 06 A1 |  if_e	add	local01, #1
325cc     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
325d0     18 00 90 5D |  if_ne	jmp	#LR__5021
325d4                 | LR__5020
325d4     18 4E 05 F1 | 	add	fp, #24
325d8     A7 20 48 FC | 	wrbyte	#16, fp
325dc     0C 4E 85 F1 | 	sub	fp, #12
325e0     A7 00 68 FC | 	wrlong	#0, fp
325e4     0C 4E 85 F1 | 	sub	fp, #12
325e8     24 00 90 FD | 	jmp	#LR__5022
325ec                 | LR__5021
325ec     04 4E 05 F1 | 	add	fp, #4
325f0     A7 12 02 FB | 	rdlong	arg01, fp
325f4     0C 4E 05 F1 | 	add	fp, #12
325f8     A7 14 02 F6 | 	mov	arg02, fp
325fc     10 4E 85 F1 | 	sub	fp, #16
32600     AC EB BF FD | 	call	#_fatfs_cc_f_stat
32604     0C 4E 05 F1 | 	add	fp, #12
32608     A7 FA 61 FC | 	wrlong	result1, fp
3260c     0C 4E 85 F1 | 	sub	fp, #12
32610                 | LR__5022
32610     0C 4E 05 F1 | 	add	fp, #12
32614     A7 28 0A FB | 	rdlong	local02, fp wz
32618     0C 4E 85 F1 | 	sub	fp, #12
3261c     14 00 90 AD |  if_e	jmp	#LR__5023
32620                 | '         return _set_dos_error(r);
32620     0C 4E 05 F1 | 	add	fp, #12
32624     A7 12 02 FB | 	rdlong	arg01, fp
32628     0C 4E 85 F1 | 	sub	fp, #12
3262c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32630     14 01 90 FD | 	jmp	#LR__5024
32634                 | LR__5023
32634     2C 4F 05 F1 | 	add	fp, #300
32638     A7 48 6A FC | 	wrlong	#292, fp
3263c     14 4F 85 F1 | 	sub	fp, #276
32640     A7 2A C2 FA | 	rdbyte	local03, fp
32644     18 4E 85 F1 | 	sub	fp, #24
32648     01 2A CE F7 | 	test	local03, #1 wz
3264c     2C 4F 05 A1 |  if_e	add	fp, #300
32650     A7 2A 02 AB |  if_e	rdlong	local03, fp
32654     92 2A 46 A5 |  if_e	or	local03, #146
32658     A7 2A 62 AC |  if_e	wrlong	local03, fp
3265c     2C 4F 85 A1 |  if_e	sub	fp, #300
32660     18 4E 05 F1 | 	add	fp, #24
32664     A7 2A C2 FA | 	rdbyte	local03, fp
32668     18 4E 85 F1 | 	sub	fp, #24
3266c     10 2A CE F7 | 	test	local03, #16 wz
32670     2C 4F 05 51 |  if_ne	add	fp, #300
32674     A7 2A 02 5B |  if_ne	rdlong	local03, fp
32678     08 00 00 5F 
3267c     49 2A 46 55 |  if_ne	or	local03, ##4169
32680     A7 2A 62 5C |  if_ne	wrlong	local03, fp
32684     2C 4F 85 51 |  if_ne	sub	fp, #300
32688     08 4E 05 F1 | 	add	fp, #8
3268c     A7 2A 02 FB | 	rdlong	local03, fp
32690     24 4F 05 F1 | 	add	fp, #292
32694     A7 28 02 FB | 	rdlong	local02, fp
32698     08 2A 06 F1 | 	add	local03, #8
3269c     15 29 62 FC | 	wrlong	local02, local03
326a0     24 4F 85 F1 | 	sub	fp, #292
326a4     A7 2A 02 FB | 	rdlong	local03, fp
326a8     0C 2A 06 F1 | 	add	local03, #12
326ac     15 03 68 FC | 	wrlong	#1, local03
326b0     A7 2A 02 FB | 	rdlong	local03, fp
326b4     08 4E 05 F1 | 	add	fp, #8
326b8     A7 28 02 FB | 	rdlong	local02, fp
326bc     18 2A 06 F1 | 	add	local03, #24
326c0     15 29 62 FC | 	wrlong	local02, local03
326c4     08 4E 85 F1 | 	sub	fp, #8
326c8     A7 2A 02 FB | 	rdlong	local03, fp
326cc     1C 2A 06 F1 | 	add	local03, #28
326d0     01 00 80 FF 
326d4     15 01 68 FC | 	wrlong	##512, local03
326d8     A7 28 02 FB | 	rdlong	local02, fp
326dc     14 2B 02 F6 | 	mov	local03, local02
326e0     18 28 06 F1 | 	add	local02, #24
326e4     14 29 02 FB | 	rdlong	local02, local02
326e8     FF 29 06 F1 | 	add	local02, #511
326ec     14 29 52 F6 | 	abs	local02, local02 wc
326f0     09 28 46 F0 | 	shr	local02, #9
326f4     14 29 82 F6 | 	negc	local02, local02
326f8     20 2A 06 F1 | 	add	local03, #32
326fc     15 29 62 FC | 	wrlong	local02, local03
32700     A7 28 02 FB | 	rdlong	local02, fp
32704     14 2B 02 F6 | 	mov	local03, local02
32708     14 27 02 F6 | 	mov	local01, local02
3270c     0C 4E 05 F1 | 	add	fp, #12
32710     A7 12 E2 FA | 	rdword	arg01, fp
32714     02 4E 05 F1 | 	add	fp, #2
32718     A7 14 E2 FA | 	rdword	arg02, fp
3271c     16 4E 85 F1 | 	sub	fp, #22
32720     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1005
32724     2C 26 06 F1 | 	add	local01, #44
32728     13 FB 61 FC | 	wrlong	result1, local01
3272c     28 28 06 F1 | 	add	local02, #40
32730     14 FB 61 FC | 	wrlong	result1, local02
32734     24 2A 06 F1 | 	add	local03, #36
32738     15 FB 61 FC | 	wrlong	result1, local03
3273c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
3273c                 | '     }
3273c                 | '     buf->st_mode = mode;
3273c                 | '     buf->st_nlink = 1;
3273c                 | '     buf->st_size = finfo.fsize;
3273c                 | '     buf->st_blksize = 512;
3273c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
3273c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
3273c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3273c                 | '     return r;
3273c     0C 4E 05 F1 | 	add	fp, #12
32740     A7 FA 01 FB | 	rdlong	result1, fp
32744     0C 4E 85 F1 | 	sub	fp, #12
32748                 | LR__5024
32748     A7 F0 03 F6 | 	mov	ptra, fp
3274c     B2 00 A0 FD | 	call	#popregs_
32750                 | _fatfs_cc_v_stat_ret
32750     2D 00 64 FD | 	ret
32754                 | 
32754                 | _fatfs_cc_v_read
32754     00 4A 05 F6 | 	mov	COUNT_, #0
32758     A8 00 A0 FD | 	call	#pushregs_
3275c     1C F0 07 F1 | 	add	ptra, #28
32760     04 4E 05 F1 | 	add	fp, #4
32764     A7 12 62 FC | 	wrlong	arg01, fp
32768     04 4E 05 F1 | 	add	fp, #4
3276c     A7 14 62 FC | 	wrlong	arg02, fp
32770     04 4E 05 F1 | 	add	fp, #4
32774     A7 16 62 FC | 	wrlong	arg03, fp
32778     08 4E 85 F1 | 	sub	fp, #8
3277c     A7 12 02 FB | 	rdlong	arg01, fp
32780     09 13 0A FB | 	rdlong	arg01, arg01 wz
32784     0C 4E 05 F1 | 	add	fp, #12
32788     A7 12 62 FC | 	wrlong	arg01, fp
3278c     10 4E 85 F1 | 	sub	fp, #16
32790                 | '         return _seterror( 5 );
32790     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32794     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
32798     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3279c     01 FA 65 A6 |  if_e	neg	result1, #1
327a0     B8 00 90 AD |  if_e	jmp	#LR__5032
327a4     10 4E 05 F1 | 	add	fp, #16
327a8     A7 12 02 FB | 	rdlong	arg01, fp
327ac     02 00 00 FF 
327b0     14 12 06 F1 | 	add	arg01, ##1044
327b4     08 4E 85 F1 | 	sub	fp, #8
327b8     A7 14 02 FB | 	rdlong	arg02, fp
327bc     04 4E 05 F1 | 	add	fp, #4
327c0     A7 16 02 FB | 	rdlong	arg03, fp
327c4     0C 4E 05 F1 | 	add	fp, #12
327c8     A7 18 02 F6 | 	mov	arg04, fp
327cc     18 4E 85 F1 | 	sub	fp, #24
327d0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
327d4     14 4E 05 F1 | 	add	fp, #20
327d8     A7 FA 61 FC | 	wrlong	result1, fp
327dc     14 4E 85 F1 | 	sub	fp, #20
327e0     00 FA 0D F2 | 	cmp	result1, #0 wz
327e4     34 00 90 AD |  if_e	jmp	#LR__5030
327e8     04 4E 05 F1 | 	add	fp, #4
327ec     A7 18 02 FB | 	rdlong	arg04, fp
327f0     0C 17 02 F6 | 	mov	arg03, arg04
327f4     08 18 06 F1 | 	add	arg04, #8
327f8     0C 19 02 FB | 	rdlong	arg04, arg04
327fc     20 18 46 F5 | 	or	arg04, #32
32800     08 16 06 F1 | 	add	arg03, #8
32804     0B 19 62 FC | 	wrlong	arg04, arg03
32808                 | '         fil->state |=  (0x20) ;
32808                 | '         return _set_dos_error(r);
32808     10 4E 05 F1 | 	add	fp, #16
3280c     A7 12 02 FB | 	rdlong	arg01, fp
32810     14 4E 85 F1 | 	sub	fp, #20
32814     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32818     40 00 90 FD | 	jmp	#LR__5032
3281c                 | LR__5030
3281c     18 4E 05 F1 | 	add	fp, #24
32820     A7 FA 09 FB | 	rdlong	result1, fp wz
32824     18 4E 85 F1 | 	sub	fp, #24
32828     24 00 90 5D |  if_ne	jmp	#LR__5031
3282c     04 4E 05 F1 | 	add	fp, #4
32830     A7 FA 01 FB | 	rdlong	result1, fp
32834     FD 18 02 F6 | 	mov	arg04, result1
32838     04 4E 85 F1 | 	sub	fp, #4
3283c     08 FA 05 F1 | 	add	result1, #8
32840     FD FA 01 FB | 	rdlong	result1, result1
32844     10 FA 45 F5 | 	or	result1, #16
32848     08 18 06 F1 | 	add	arg04, #8
3284c     0C FB 61 FC | 	wrlong	result1, arg04
32850                 | LR__5031
32850                 | '         fil->state |=  (0x10) ;
32850                 | '     }
32850                 | '     return x;
32850     18 4E 05 F1 | 	add	fp, #24
32854     A7 FA 01 FB | 	rdlong	result1, fp
32858     18 4E 85 F1 | 	sub	fp, #24
3285c                 | LR__5032
3285c     A7 F0 03 F6 | 	mov	ptra, fp
32860     B2 00 A0 FD | 	call	#popregs_
32864                 | _fatfs_cc_v_read_ret
32864     2D 00 64 FD | 	ret
32868                 | 
32868                 | _fatfs_cc_v_write
32868     00 4A 05 F6 | 	mov	COUNT_, #0
3286c     A8 00 A0 FD | 	call	#pushregs_
32870     1C F0 07 F1 | 	add	ptra, #28
32874     04 4E 05 F1 | 	add	fp, #4
32878     A7 12 62 FC | 	wrlong	arg01, fp
3287c     04 4E 05 F1 | 	add	fp, #4
32880     A7 14 62 FC | 	wrlong	arg02, fp
32884     04 4E 05 F1 | 	add	fp, #4
32888     A7 16 62 FC | 	wrlong	arg03, fp
3288c     08 4E 85 F1 | 	sub	fp, #8
32890     A7 12 02 FB | 	rdlong	arg01, fp
32894     09 13 0A FB | 	rdlong	arg01, arg01 wz
32898     0C 4E 05 F1 | 	add	fp, #12
3289c     A7 12 62 FC | 	wrlong	arg01, fp
328a0     10 4E 85 F1 | 	sub	fp, #16
328a4                 | '         return _seterror( 5 );
328a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
328a8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
328ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
328b0     01 FA 65 A6 |  if_e	neg	result1, #1
328b4     84 00 90 AD |  if_e	jmp	#LR__5041
328b8     10 4E 05 F1 | 	add	fp, #16
328bc     A7 12 02 FB | 	rdlong	arg01, fp
328c0     02 00 00 FF 
328c4     14 12 06 F1 | 	add	arg01, ##1044
328c8     08 4E 85 F1 | 	sub	fp, #8
328cc     A7 14 02 FB | 	rdlong	arg02, fp
328d0     04 4E 05 F1 | 	add	fp, #4
328d4     A7 16 02 FB | 	rdlong	arg03, fp
328d8     0C 4E 05 F1 | 	add	fp, #12
328dc     A7 18 02 F6 | 	mov	arg04, fp
328e0     18 4E 85 F1 | 	sub	fp, #24
328e4     4C D4 BF FD | 	call	#_fatfs_cc_f_write
328e8     14 4E 05 F1 | 	add	fp, #20
328ec     A7 FA 61 FC | 	wrlong	result1, fp
328f0     14 4E 85 F1 | 	sub	fp, #20
328f4     00 FA 0D F2 | 	cmp	result1, #0 wz
328f8     34 00 90 AD |  if_e	jmp	#LR__5040
328fc     04 4E 05 F1 | 	add	fp, #4
32900     A7 18 02 FB | 	rdlong	arg04, fp
32904     0C 17 02 F6 | 	mov	arg03, arg04
32908     08 18 06 F1 | 	add	arg04, #8
3290c     0C 19 02 FB | 	rdlong	arg04, arg04
32910     20 18 46 F5 | 	or	arg04, #32
32914     08 16 06 F1 | 	add	arg03, #8
32918     0B 19 62 FC | 	wrlong	arg04, arg03
3291c                 | '         fil->state |=  (0x20) ;
3291c                 | '         return _set_dos_error(r);
3291c     10 4E 05 F1 | 	add	fp, #16
32920     A7 12 02 FB | 	rdlong	arg01, fp
32924     14 4E 85 F1 | 	sub	fp, #20
32928     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
3292c     0C 00 90 FD | 	jmp	#LR__5041
32930                 | LR__5040
32930                 | '     }
32930                 | '     return x;
32930     18 4E 05 F1 | 	add	fp, #24
32934     A7 FA 01 FB | 	rdlong	result1, fp
32938     18 4E 85 F1 | 	sub	fp, #24
3293c                 | LR__5041
3293c     A7 F0 03 F6 | 	mov	ptra, fp
32940     B2 00 A0 FD | 	call	#popregs_
32944                 | _fatfs_cc_v_write_ret
32944     2D 00 64 FD | 	ret
32948                 | 
32948                 | _fatfs_cc_v_lseek
32948     04 4A 05 F6 | 	mov	COUNT_, #4
3294c     A8 00 A0 FD | 	call	#pushregs_
32950     0A 27 02 F6 | 	mov	local01, arg02
32954     0B 29 02 F6 | 	mov	local02, arg03
32958     09 2B 02 FB | 	rdlong	local03, arg01
3295c     02 00 00 FF 
32960     14 2A 0E F1 | 	add	local03, ##1044 wz
32964                 | '         return _seterror( 5 );
32964     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32968     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3296c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
32970     01 FA 65 A6 |  if_e	neg	result1, #1
32974     4C 00 90 AD |  if_e	jmp	#LR__5052
32978     00 28 0E F2 | 	cmp	local02, #0 wz
3297c     24 00 90 AD |  if_e	jmp	#LR__5050
32980     01 28 0E F2 | 	cmp	local02, #1 wz
32984     14 2A 06 A1 |  if_e	add	local03, #20
32988     15 2D 02 AB |  if_e	rdlong	local04, local03
3298c     14 2A 86 A1 |  if_e	sub	local03, #20
32990     16 27 02 A1 |  if_e	add	local01, local04
32994     0C 2A 06 51 |  if_ne	add	local03, #12
32998     15 2D 02 5B |  if_ne	rdlong	local04, local03
3299c     0C 2A 86 51 |  if_ne	sub	local03, #12
329a0     16 27 02 51 |  if_ne	add	local01, local04
329a4                 | LR__5050
329a4     13 15 02 F6 | 	mov	arg02, local01
329a8     15 13 02 F6 | 	mov	arg01, local03
329ac     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
329b0     FD 12 0A F6 | 	mov	arg01, result1 wz
329b4     08 00 90 AD |  if_e	jmp	#LR__5051
329b8                 | '         return _set_dos_error(result);
329b8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
329bc     04 00 90 FD | 	jmp	#LR__5052
329c0                 | LR__5051
329c0                 | '     }
329c0                 | '     return offset;
329c0     13 FB 01 F6 | 	mov	result1, local01
329c4                 | LR__5052
329c4     A7 F0 03 F6 | 	mov	ptra, fp
329c8     B2 00 A0 FD | 	call	#popregs_
329cc                 | _fatfs_cc_v_lseek_ret
329cc     2D 00 64 FD | 	ret
329d0                 | 
329d0                 | _fatfs_cc_v_ioctl
329d0                 | ' {
329d0                 | '     return _seterror( 10 );
329d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
329d4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
329d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
329dc     01 FA 65 F6 | 	neg	result1, #1
329e0                 | _fatfs_cc_v_ioctl_ret
329e0     2D 00 64 FD | 	ret
329e4                 | 
329e4                 | _fatfs_cc_v_mkdir
329e4     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
329e8     FD 12 02 F6 | 	mov	arg01, result1
329ec                 | ' 
329ec                 | '     r = f_mkdir(name);
329ec                 | '     return _set_dos_error(r);
329ec     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
329f0                 | _fatfs_cc_v_mkdir_ret
329f0     2D 00 64 FD | 	ret
329f4                 | 
329f4                 | _fatfs_cc_v_remove
329f4     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
329f8     FD 12 02 F6 | 	mov	arg01, result1
329fc                 | ' 
329fc                 | '     r = f_unlink(name);
329fc                 | '     return _set_dos_error(r);
329fc     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32a00                 | _fatfs_cc_v_remove_ret
32a00     2D 00 64 FD | 	ret
32a04                 | 
32a04                 | _fatfs_cc_v_rmdir
32a04     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
32a08     FD 12 02 F6 | 	mov	arg01, result1
32a0c                 | ' 
32a0c                 | '     r = f_unlink(name);
32a0c                 | '     return _set_dos_error(r);
32a0c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32a10                 | _fatfs_cc_v_rmdir_ret
32a10     2D 00 64 FD | 	ret
32a14                 | 
32a14                 | _fatfs_cc_v_rename
32a14     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
32a18     FD 12 02 F6 | 	mov	arg01, result1
32a1c                 | '     return _set_dos_error(r);
32a1c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32a20                 | _fatfs_cc_v_rename_ret
32a20     2D 00 64 FD | 	ret
32a24                 | 
32a24                 | _fatfs_cc_v_open
32a24     07 4A 05 F6 | 	mov	COUNT_, #7
32a28     A8 00 A0 FD | 	call	#pushregs_
32a2c     09 27 02 F6 | 	mov	local01, arg01
32a30     0A 29 02 F6 | 	mov	local02, arg02
32a34     0B 2B 02 F6 | 	mov	local03, arg03
32a38     03 00 00 FF 
32a3c     3C 12 06 F6 | 	mov	arg01, ##1596
32a40                 | '     return _gc_alloc(size);
32a40     10 14 06 F6 | 	mov	arg02, #16
32a44     9C 56 BF FD | 	call	#__system___gc_doalloc
32a48     FD 2C 0A F6 | 	mov	local04, result1 wz
32a4c                 | '       return _seterror( 7 );
32a4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32a50     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
32a54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
32a58     01 FA 65 A6 |  if_e	neg	result1, #1
32a5c     98 00 90 AD |  if_e	jmp	#LR__5066
32a60     16 13 02 F6 | 	mov	arg01, local04
32a64     00 14 06 F6 | 	mov	arg02, #0
32a68     03 00 00 FF 
32a6c     3C 16 06 F6 | 	mov	arg03, ##1596
32a70     98 00 A0 FD | 	call	#\builtin_bytefill_
32a74                 | '   switch (flags & 3) {
32a74     15 2F 02 F6 | 	mov	local05, local03
32a78     03 2E 0E F5 | 	and	local05, #3 wz
32a7c     0C 00 90 AD |  if_e	jmp	#LR__5060
32a80     01 2E 0E F2 | 	cmp	local05, #1 wz
32a84     0C 00 90 AD |  if_e	jmp	#LR__5061
32a88     10 00 90 FD | 	jmp	#LR__5062
32a8c                 | LR__5060
32a8c     01 30 06 F6 | 	mov	local06, #1
32a90                 | '       fs_flags =  0x01 ;
32a90                 | '       break;
32a90     0C 00 90 FD | 	jmp	#LR__5063
32a94                 | LR__5061
32a94     02 30 06 F6 | 	mov	local06, #2
32a98                 | '       fs_flags =  0x02 ;
32a98                 | '       break;
32a98     04 00 90 FD | 	jmp	#LR__5063
32a9c                 | LR__5062
32a9c     03 30 06 F6 | 	mov	local06, #3
32aa0                 | '       fs_flags =  0x01  |  0x02 ;
32aa0                 | '       break;
32aa0                 | LR__5063
32aa0     08 2A CE F7 | 	test	local03, #8 wz
32aa4     18 30 46 55 |  if_ne	or	local06, #24
32aa8     08 00 90 5D |  if_ne	jmp	#LR__5064
32aac     20 2A CE F7 | 	test	local03, #32 wz
32ab0     30 30 46 55 |  if_ne	or	local06, #48
32ab4                 | LR__5064
32ab4     02 00 00 FF 
32ab8     14 2C 06 F1 | 	add	local04, ##1044
32abc     16 13 02 F6 | 	mov	arg01, local04
32ac0     02 00 00 FF 
32ac4     14 2C 86 F1 | 	sub	local04, ##1044
32ac8     14 15 02 F6 | 	mov	arg02, local02
32acc     18 17 02 F6 | 	mov	arg03, local06
32ad0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
32ad4     FD 32 0A F6 | 	mov	local07, result1 wz
32ad8     14 00 90 AD |  if_e	jmp	#LR__5065
32adc     16 13 02 F6 | 	mov	arg01, local04
32ae0                 | '     return _gc_free(ptr);
32ae0     0C 57 BF FD | 	call	#__system___gc_free
32ae4                 | '     free(f);
32ae4                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
32ae4                 | '     return _set_dos_error(r);
32ae4     19 13 02 F6 | 	mov	arg01, local07
32ae8     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32aec     08 00 90 FD | 	jmp	#LR__5066
32af0                 | LR__5065
32af0     13 2D 62 FC | 	wrlong	local04, local01
32af4                 | '   }
32af4                 | '   fil->vfsdata = f;
32af4                 | '   return 0;
32af4     00 FA 05 F6 | 	mov	result1, #0
32af8                 | LR__5066
32af8     A7 F0 03 F6 | 	mov	ptra, fp
32afc     B2 00 A0 FD | 	call	#popregs_
32b00                 | _fatfs_cc_v_open_ret
32b00     2D 00 64 FD | 	ret
32b04                 | 
32b04                 | _fatfs_cc_v_flush
32b04     09 13 02 FB | 	rdlong	arg01, arg01
32b08     02 00 00 FF 
32b0c     14 12 0E F1 | 	add	arg01, ##1044 wz
32b10                 | '         return _seterror( 5 );
32b10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32b14     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
32b18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
32b1c     01 FA 65 A6 |  if_e	neg	result1, #1
32b20     0C 00 90 AD |  if_e	jmp	#LR__5070
32b24     00 DA BF FD | 	call	#_fatfs_cc_f_sync
32b28     FD 12 02 F6 | 	mov	arg01, result1
32b2c                 | '     }
32b2c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
32b2c                 | '     result = f_sync(f);
32b2c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
32b2c                 | '     return _set_dos_error(result);
32b2c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1007
32b30                 | LR__5070
32b30                 | _fatfs_cc_v_flush_ret
32b30     2D 00 64 FD | 	ret
32b34                 | 
32b34                 | _fatfs_cc_v_init
32b34                 | ' {
32b34                 | '     return 0;
32b34     00 FA 05 F6 | 	mov	result1, #0
32b38                 | _fatfs_cc_v_init_ret
32b38     2D 00 64 FD | 	ret
32b3c                 | 
32b3c                 | _fatfs_cc_v_deinit
32b3c     9D 01 00 FF 
32b40     B0 14 06 F6 | 	mov	arg02, ##@LR__5266
32b44     00 12 06 F6 | 	mov	arg01, #0
32b48     00 16 06 F6 | 	mov	arg03, #0
32b4c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
32b50     01 00 00 FF 
32b54     08 E4 05 F1 | 	add	objptr, ##520
32b58     F2 12 02 FB | 	rdlong	arg01, objptr
32b5c     04 E4 05 F1 | 	add	objptr, #4
32b60     F2 14 02 FB | 	rdlong	arg02, objptr
32b64     01 00 00 FF 
32b68     0C E4 85 F1 | 	sub	objptr, ##524
32b6c     F0 3D BF FD | 	call	#__system___freepins
32b70                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
32b70                 | '     _freepins(f_pinmask);
32b70                 | '     return 0;
32b70     00 FA 05 F6 | 	mov	result1, #0
32b74                 | _fatfs_cc_v_deinit_ret
32b74     2D 00 64 FD | 	ret
32b78                 | 
32b78                 | _fatfs_cc_get_vfs
32b78     01 4A 05 F6 | 	mov	COUNT_, #1
32b7c     A8 00 A0 FD | 	call	#pushregs_
32b80     09 27 02 F6 | 	mov	local01, arg01
32b84     50 12 06 F6 | 	mov	arg01, #80
32b88     28 55 BF FD | 	call	#__system___gc_alloc_managed
32b8c     FD 12 02 F6 | 	mov	arg01, result1
32b90     F2 FA 01 F6 | 	mov	result1, objptr
32b94     00 30 05 FF 
32b98     00 FA 45 F5 | 	or	result1, ##174063616
32b9c     09 FB 61 FC | 	wrlong	result1, arg01
32ba0     F2 FA 01 F6 | 	mov	result1, objptr
32ba4     00 38 05 FF 
32ba8     00 FA 45 F5 | 	or	result1, ##175112192
32bac     04 12 06 F1 | 	add	arg01, #4
32bb0     09 FB 61 FC | 	wrlong	result1, arg01
32bb4     F2 FA 01 F6 | 	mov	result1, objptr
32bb8     00 40 05 FF 
32bbc     00 FA 45 F5 | 	or	result1, ##176160768
32bc0     04 12 06 F1 | 	add	arg01, #4
32bc4     09 FB 61 FC | 	wrlong	result1, arg01
32bc8     F2 FA 01 F6 | 	mov	result1, objptr
32bcc     00 48 05 FF 
32bd0     00 FA 45 F5 | 	or	result1, ##177209344
32bd4     04 12 06 F1 | 	add	arg01, #4
32bd8     09 FB 61 FC | 	wrlong	result1, arg01
32bdc     F2 FA 01 F6 | 	mov	result1, objptr
32be0     00 50 05 FF 
32be4     00 FA 45 F5 | 	or	result1, ##178257920
32be8     04 12 06 F1 | 	add	arg01, #4
32bec     09 FB 61 FC | 	wrlong	result1, arg01
32bf0     04 12 06 F1 | 	add	arg01, #4
32bf4     09 01 68 FC | 	wrlong	#0, arg01
32bf8     04 12 06 F1 | 	add	arg01, #4
32bfc     09 27 62 FC | 	wrlong	local01, arg01
32c00     04 12 06 F1 | 	add	arg01, #4
32c04     09 01 68 FC | 	wrlong	#0, arg01
32c08     F2 FA 01 F6 | 	mov	result1, objptr
32c0c     00 58 05 FF 
32c10     00 FA 45 F5 | 	or	result1, ##179306496
32c14     04 12 06 F1 | 	add	arg01, #4
32c18     09 FB 61 FC | 	wrlong	result1, arg01
32c1c     F2 FA 01 F6 | 	mov	result1, objptr
32c20     00 60 05 FF 
32c24     00 FA 45 F5 | 	or	result1, ##180355072
32c28     04 12 06 F1 | 	add	arg01, #4
32c2c     09 FB 61 FC | 	wrlong	result1, arg01
32c30     F2 FA 01 F6 | 	mov	result1, objptr
32c34     00 68 05 FF 
32c38     00 FA 45 F5 | 	or	result1, ##181403648
32c3c     04 12 06 F1 | 	add	arg01, #4
32c40     09 FB 61 FC | 	wrlong	result1, arg01
32c44     F2 FA 01 F6 | 	mov	result1, objptr
32c48     00 70 05 FF 
32c4c     00 FA 45 F5 | 	or	result1, ##182452224
32c50     04 12 06 F1 | 	add	arg01, #4
32c54     09 FB 61 FC | 	wrlong	result1, arg01
32c58     F2 FA 01 F6 | 	mov	result1, objptr
32c5c     00 78 05 FF 
32c60     00 FA 45 F5 | 	or	result1, ##183500800
32c64     04 12 06 F1 | 	add	arg01, #4
32c68     09 FB 61 FC | 	wrlong	result1, arg01
32c6c     F2 FA 01 F6 | 	mov	result1, objptr
32c70     00 80 05 FF 
32c74     00 FA 45 F5 | 	or	result1, ##184549376
32c78     04 12 06 F1 | 	add	arg01, #4
32c7c     09 FB 61 FC | 	wrlong	result1, arg01
32c80     F2 FA 01 F6 | 	mov	result1, objptr
32c84     00 88 05 FF 
32c88     00 FA 45 F5 | 	or	result1, ##185597952
32c8c     04 12 06 F1 | 	add	arg01, #4
32c90     09 FB 61 FC | 	wrlong	result1, arg01
32c94     F2 FA 01 F6 | 	mov	result1, objptr
32c98     00 90 05 FF 
32c9c     00 FA 45 F5 | 	or	result1, ##186646528
32ca0     04 12 06 F1 | 	add	arg01, #4
32ca4     09 FB 61 FC | 	wrlong	result1, arg01
32ca8     F2 FA 01 F6 | 	mov	result1, objptr
32cac     00 98 05 FF 
32cb0     00 FA 45 F5 | 	or	result1, ##187695104
32cb4     04 12 06 F1 | 	add	arg01, #4
32cb8     09 FB 61 FC | 	wrlong	result1, arg01
32cbc     F2 FA 01 F6 | 	mov	result1, objptr
32cc0     00 A0 05 FF 
32cc4     00 FA 45 F5 | 	or	result1, ##188743680
32cc8     04 12 06 F1 | 	add	arg01, #4
32ccc     09 FB 61 FC | 	wrlong	result1, arg01
32cd0     F2 FA 01 F6 | 	mov	result1, objptr
32cd4     00 A8 05 FF 
32cd8     00 FA 45 F5 | 	or	result1, ##189792256
32cdc     04 12 06 F1 | 	add	arg01, #4
32ce0     09 FB 61 FC | 	wrlong	result1, arg01
32ce4     F2 FA 01 F6 | 	mov	result1, objptr
32ce8     00 B0 05 FF 
32cec     00 FA 45 F5 | 	or	result1, ##190840832
32cf0     04 12 06 F1 | 	add	arg01, #4
32cf4     09 FB 61 FC | 	wrlong	result1, arg01
32cf8     4C 12 86 F1 | 	sub	arg01, #76
32cfc                 | ' 
32cfc                 | '     v->close = &v_close;
32cfc                 | '     v->read = &v_read;
32cfc                 | '     v->write = &v_write;
32cfc                 | '     v->lseek = &v_lseek;
32cfc                 | '     v->ioctl = &v_ioctl;
32cfc                 | '     v->flush = 0;
32cfc                 | '     v->vfs_data = ptr;
32cfc                 | '     v->reserved = 0;
32cfc                 | ' 
32cfc                 | '     v->open = &v_open;
32cfc                 | '     v->creat = &v_creat;
32cfc                 | '     v->opendir = &v_opendir;
32cfc                 | '     v->closedir = &v_closedir;
32cfc                 | '     v->readdir = &v_readdir;
32cfc                 | '     v->stat = &v_stat;
32cfc                 | ' 
32cfc                 | '     v->mkdir = &v_mkdir;
32cfc                 | '     v->rmdir = &v_rmdir;
32cfc                 | ' 
32cfc                 | '     v->remove = &v_remove;
32cfc                 | '     v->rename = &v_rename;
32cfc                 | ' 
32cfc                 | '     v->init = &v_init;
32cfc                 | '     v->deinit = &v_deinit;
32cfc                 | ' 
32cfc                 | '     return v;
32cfc     09 FB 01 F6 | 	mov	result1, arg01
32d00     A7 F0 03 F6 | 	mov	ptra, fp
32d04     B2 00 A0 FD | 	call	#popregs_
32d08                 | _fatfs_cc_get_vfs_ret
32d08     2D 00 64 FD | 	ret
32d0c                 | 
32d0c                 | _fatfs_cc_xmit_mmc_1158
32d0c     01 00 00 FF 
32d10     10 E4 05 F1 | 	add	objptr, ##528
32d14     F2 00 02 FB | 	rdlong	_var01, objptr
32d18     08 E4 05 F1 | 	add	objptr, #8
32d1c     F2 02 02 FB | 	rdlong	_var02, objptr
32d20     01 00 00 FF 
32d24     18 E4 85 F1 | 	sub	objptr, ##536
32d28     40 02 62 FD | 	dirl	_var02
32d2c     28 02 64 FD | 	setq	#1
32d30     09 05 02 FB | 	rdlong	_var03, arg01
32d34     69 04 62 FD | 	rev	_var03
32d38     1B 04 FE F9 | 	movbyts	_var03, #27
32d3c     01 05 22 FC | 	wypin	_var03, _var02
32d40     0A 05 02 F6 | 	mov	_var03, arg02
32d44     02 14 4E F0 | 	shr	arg02, #2 wz
32d48     03 04 66 F0 | 	shl	_var03, #3
32d4c     00 05 22 FC | 	wypin	_var03, _var01
32d50     41 02 62 FD | 	dirh	_var02
32d54     08 12 06 F1 | 	add	arg01, #8
32d58     69 06 62 FD | 	rev	_var04
32d5c     1B 06 FE F9 | 	movbyts	_var04, #27
32d60                 | LR__5080
32d60     01 07 22 5C |  if_ne	wypin	_var04, _var02
32d64     09 07 02 5B |  if_ne	rdlong	_var04, arg01
32d68     04 12 06 51 |  if_ne	add	arg01, #4
32d6c     69 06 62 5D |  if_ne	rev	_var04
32d70     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
32d74                 | LR__5081
32d74     40 02 72 5D |  if_ne	testp	_var02 wc
32d78     F8 FF 9F 1D |  if_a	jmp	#LR__5081
32d7c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5080
32d80                 | LR__5082
32d80     40 00 72 FD | 	testp	_var01 wc
32d84     F8 FF 9F 3D |  if_ae	jmp	#LR__5082
32d88     40 02 62 FD | 	dirl	_var02
32d8c     FF FF FF FF 
32d90     01 FF 2B FC | 	wypin	##-1, _var02
32d94     41 02 62 FD | 	dirh	_var02
32d98                 | _fatfs_cc_xmit_mmc_1158_ret
32d98     2D 00 64 FD | 	ret
32d9c                 | 
32d9c                 | _fatfs_cc_rcvr_mmc_1165
32d9c     01 00 00 FF 
32da0     10 E4 05 F1 | 	add	objptr, ##528
32da4     F2 00 02 FB | 	rdlong	_var01, objptr
32da8     0C E4 05 F1 | 	add	objptr, #12
32dac     F2 02 02 FB | 	rdlong	_var02, objptr
32db0     01 00 00 FF 
32db4     1C E4 85 F1 | 	sub	objptr, ##540
32db8     01 03 08 FC | 	akpin	_var02
32dbc     0A 05 0A F6 | 	mov	_var03, arg02 wz
32dc0     02 04 4E F0 | 	shr	_var03, #2 wz
32dc4     30 00 90 AD |  if_e	jmp	#LR__5092
32dc8     02 07 02 F6 | 	mov	_var04, _var03
32dcc     05 06 66 F0 | 	shl	_var04, #5
32dd0     00 07 22 FC | 	wypin	_var04, _var01
32dd4     01 7F 18 FC | 	wxpin	#63, _var02
32dd8                 | LR__5090
32dd8                 | LR__5091
32dd8     40 02 72 FD | 	testp	_var02 wc
32ddc     F8 FF 9F 3D |  if_ae	jmp	#LR__5091
32de0     01 07 8A FA | 	rdpin	_var04, _var02
32de4     69 06 62 FD | 	rev	_var04
32de8     1B 06 FE F9 | 	movbyts	_var04, #27
32dec     09 07 62 FC | 	wrlong	_var04, arg01
32df0     04 12 06 F1 | 	add	arg01, #4
32df4     F8 05 6E FB | 	djnz	_var03, #LR__5090
32df8                 | LR__5092
32df8     03 14 0E F5 | 	and	arg02, #3 wz
32dfc     24 00 90 AD |  if_e	jmp	#LR__5095
32e00     01 4F 18 FC | 	wxpin	#39, _var02
32e04                 | LR__5093
32e04     00 11 28 FC | 	wypin	#8, _var01
32e08                 | LR__5094
32e08     40 02 72 FD | 	testp	_var02 wc
32e0c     F8 FF 9F 3D |  if_ae	jmp	#LR__5094
32e10     01 07 8A FA | 	rdpin	_var04, _var02
32e14     69 06 62 FD | 	rev	_var04
32e18     09 07 42 FC | 	wrbyte	_var04, arg01
32e1c     01 12 06 F1 | 	add	arg01, #1
32e20     F8 15 6E FB | 	djnz	arg02, #LR__5093
32e24                 | LR__5095
32e24                 | _fatfs_cc_rcvr_mmc_1165_ret
32e24     2D 00 64 FD | 	ret
32e28                 | 
32e28                 | _fatfs_cc_wait_ready_1169
32e28     01 4A 05 F6 | 	mov	COUNT_, #1
32e2c     A8 00 A0 FD | 	call	#pushregs_
32e30     10 F0 07 F1 | 	add	ptra, #16
32e34     1A FA 61 FD | 	getct	result1
32e38     08 4E 05 F1 | 	add	fp, #8
32e3c     A7 FA 61 FC | 	wrlong	result1, fp
32e40     14 26 06 FB | 	rdlong	local01, #20
32e44     01 26 46 F0 | 	shr	local01, #1
32e48     04 4E 05 F1 | 	add	fp, #4
32e4c     A7 26 62 FC | 	wrlong	local01, fp
32e50     0C 4E 85 F1 | 	sub	fp, #12
32e54                 | ' {
32e54                 | ' 	BYTE d;
32e54                 | ' 	UINT tmr, tmout;
32e54                 | ' 
32e54                 | ' 	tmr = _cnt();
32e54                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
32e54                 | ' 	for(;;) {
32e54                 | LR__5100
32e54     04 4E 05 F1 | 	add	fp, #4
32e58     A7 12 02 F6 | 	mov	arg01, fp
32e5c     04 4E 85 F1 | 	sub	fp, #4
32e60     01 14 06 F6 | 	mov	arg02, #1
32e64     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
32e68     04 4E 05 F1 | 	add	fp, #4
32e6c     A7 26 C2 FA | 	rdbyte	local01, fp
32e70     04 4E 85 F1 | 	sub	fp, #4
32e74     FF 26 0E F2 | 	cmp	local01, #255 wz
32e78     01 FA 05 A6 |  if_e	mov	result1, #1
32e7c     28 00 90 AD |  if_e	jmp	#LR__5101
32e80     1A FA 61 FD | 	getct	result1
32e84     08 4E 05 F1 | 	add	fp, #8
32e88     A7 26 02 FB | 	rdlong	local01, fp
32e8c     13 FB 81 F1 | 	sub	result1, local01
32e90     04 4E 05 F1 | 	add	fp, #4
32e94     A7 26 02 FB | 	rdlong	local01, fp
32e98     0C 4E 85 F1 | 	sub	fp, #12
32e9c     13 FB 11 F2 | 	cmp	result1, local01 wc
32ea0     00 FA 05 36 |  if_ae	mov	result1, #0
32ea4     AC FF 9F CD |  if_b	jmp	#LR__5100
32ea8                 | LR__5101
32ea8     A7 F0 03 F6 | 	mov	ptra, fp
32eac     B2 00 A0 FD | 	call	#popregs_
32eb0                 | _fatfs_cc_wait_ready_1169_ret
32eb0     2D 00 64 FD | 	ret
32eb4                 | 
32eb4                 | _fatfs_cc_deselect_1175
32eb4     00 4A 05 F6 | 	mov	COUNT_, #0
32eb8     A8 00 A0 FD | 	call	#pushregs_
32ebc     14 F0 07 F1 | 	add	ptra, #20
32ec0     01 00 00 FF 
32ec4     14 E4 05 F1 | 	add	objptr, ##532
32ec8     F2 14 02 FB | 	rdlong	arg02, objptr
32ecc     04 4E 05 F1 | 	add	fp, #4
32ed0     A7 14 62 FC | 	wrlong	arg02, fp
32ed4     04 E4 85 F1 | 	sub	objptr, #4
32ed8     F2 14 02 FB | 	rdlong	arg02, objptr
32edc     04 4E 05 F1 | 	add	fp, #4
32ee0     A7 14 62 FC | 	wrlong	arg02, fp
32ee4     08 E4 05 F1 | 	add	objptr, #8
32ee8     F2 14 02 FB | 	rdlong	arg02, objptr
32eec     04 4E 05 F1 | 	add	fp, #4
32ef0     A7 14 62 FC | 	wrlong	arg02, fp
32ef4     04 E4 05 F1 | 	add	objptr, #4
32ef8     F2 14 02 FB | 	rdlong	arg02, objptr
32efc     01 00 00 FF 
32f00     1C E4 85 F1 | 	sub	objptr, ##540
32f04     04 4E 05 F1 | 	add	fp, #4
32f08     A7 14 62 FC | 	wrlong	arg02, fp
32f0c     0C 4E 85 F1 | 	sub	fp, #12
32f10     A7 12 02 FB | 	rdlong	arg01, fp
32f14     04 4E 85 F1 | 	sub	fp, #4
32f18     59 12 62 FD | 	drvh	arg01
32f1c     1F 20 64 FD | 	waitx	#16
32f20     A7 12 02 F6 | 	mov	arg01, fp
32f24     01 14 06 F6 | 	mov	arg02, #1
32f28     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
32f2c     A7 F0 03 F6 | 	mov	ptra, fp
32f30     B2 00 A0 FD | 	call	#popregs_
32f34                 | _fatfs_cc_deselect_1175_ret
32f34     2D 00 64 FD | 	ret
32f38                 | 
32f38                 | _fatfs_cc_select_1179
32f38     00 4A 05 F6 | 	mov	COUNT_, #0
32f3c     A8 00 A0 FD | 	call	#pushregs_
32f40     10 F0 07 F1 | 	add	ptra, #16
32f44     01 00 00 FF 
32f48     14 E4 05 F1 | 	add	objptr, ##532
32f4c     F2 14 02 FB | 	rdlong	arg02, objptr
32f50     08 4E 05 F1 | 	add	fp, #8
32f54     A7 14 62 FC | 	wrlong	arg02, fp
32f58     08 E4 05 F1 | 	add	objptr, #8
32f5c     F2 12 02 FB | 	rdlong	arg01, objptr
32f60     01 00 00 FF 
32f64     1C E4 85 F1 | 	sub	objptr, ##540
32f68     04 4E 05 F1 | 	add	fp, #4
32f6c     A7 12 62 FC | 	wrlong	arg01, fp
32f70     50 12 62 FD | 	fltl	arg01
32f74     04 4E 85 F1 | 	sub	fp, #4
32f78     A7 12 02 FB | 	rdlong	arg01, fp
32f7c     58 12 62 FD | 	drvl	arg01
32f80     1F 20 64 FD | 	waitx	#16
32f84     04 4E 05 F1 | 	add	fp, #4
32f88     A7 12 02 FB | 	rdlong	arg01, fp
32f8c     41 12 62 FD | 	dirh	arg01
32f90     08 4E 85 F1 | 	sub	fp, #8
32f94     A7 12 02 F6 | 	mov	arg01, fp
32f98     04 4E 85 F1 | 	sub	fp, #4
32f9c     01 14 06 F6 | 	mov	arg02, #1
32fa0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
32fa4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1169
32fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
32fac     01 FA 05 56 |  if_ne	mov	result1, #1
32fb0     08 00 90 5D |  if_ne	jmp	#LR__5110
32fb4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1175
32fb8                 | ' 
32fb8                 | ' 	deselect();
32fb8                 | ' 	return 0;
32fb8     00 FA 05 F6 | 	mov	result1, #0
32fbc                 | LR__5110
32fbc     A7 F0 03 F6 | 	mov	ptra, fp
32fc0     B2 00 A0 FD | 	call	#popregs_
32fc4                 | _fatfs_cc_select_1179_ret
32fc4     2D 00 64 FD | 	ret
32fc8                 | 
32fc8                 | _fatfs_cc_rcvr_datablock_1183
32fc8     01 4A 05 F6 | 	mov	COUNT_, #1
32fcc     A8 00 A0 FD | 	call	#pushregs_
32fd0     18 F0 07 F1 | 	add	ptra, #24
32fd4     04 4E 05 F1 | 	add	fp, #4
32fd8     A7 12 62 FC | 	wrlong	arg01, fp
32fdc     04 4E 05 F1 | 	add	fp, #4
32fe0     A7 14 62 FC | 	wrlong	arg02, fp
32fe4     1A FA 61 FD | 	getct	result1
32fe8     08 4E 05 F1 | 	add	fp, #8
32fec     A7 FA 61 FC | 	wrlong	result1, fp
32ff0     14 26 06 FB | 	rdlong	local01, #20
32ff4     03 26 46 F0 | 	shr	local01, #3
32ff8     04 4E 05 F1 | 	add	fp, #4
32ffc     A7 26 62 FC | 	wrlong	local01, fp
33000     14 4E 85 F1 | 	sub	fp, #20
33004                 | ' 	BYTE *buff,
33004                 | ' 	UINT btr
33004                 | ' )
33004                 | ' {
33004                 | ' 	BYTE d[2];
33004                 | ' 	UINT tmr, tmout;
33004                 | ' 
33004                 | ' 	tmr = _cnt();
33004                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
33004                 | ' 	for(;;) {
33004                 | LR__5120
33004     0C 4E 05 F1 | 	add	fp, #12
33008     A7 12 02 F6 | 	mov	arg01, fp
3300c     0C 4E 85 F1 | 	sub	fp, #12
33010     01 14 06 F6 | 	mov	arg02, #1
33014     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
33018     0C 4E 05 F1 | 	add	fp, #12
3301c     A7 26 C2 FA | 	rdbyte	local01, fp
33020     0C 4E 85 F1 | 	sub	fp, #12
33024     FF 26 0E F2 | 	cmp	local01, #255 wz
33028     28 00 90 5D |  if_ne	jmp	#LR__5121
3302c     1A FA 61 FD | 	getct	result1
33030     FD 26 02 F6 | 	mov	local01, result1
33034     10 4E 05 F1 | 	add	fp, #16
33038     A7 14 02 FB | 	rdlong	arg02, fp
3303c     0A 27 82 F1 | 	sub	local01, arg02
33040     04 4E 05 F1 | 	add	fp, #4
33044     A7 14 02 FB | 	rdlong	arg02, fp
33048     14 4E 85 F1 | 	sub	fp, #20
3304c     0A 27 12 F2 | 	cmp	local01, arg02 wc
33050     B0 FF 9F CD |  if_b	jmp	#LR__5120
33054                 | LR__5121
33054     0C 4E 05 F1 | 	add	fp, #12
33058     A7 26 C2 FA | 	rdbyte	local01, fp
3305c     0C 4E 85 F1 | 	sub	fp, #12
33060     FE 26 0E F2 | 	cmp	local01, #254 wz
33064     00 FA 05 56 |  if_ne	mov	result1, #0
33068     30 00 90 5D |  if_ne	jmp	#LR__5122
3306c     04 4E 05 F1 | 	add	fp, #4
33070     A7 12 02 FB | 	rdlong	arg01, fp
33074     04 4E 05 F1 | 	add	fp, #4
33078     A7 14 02 FB | 	rdlong	arg02, fp
3307c     08 4E 85 F1 | 	sub	fp, #8
33080     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
33084     0C 4E 05 F1 | 	add	fp, #12
33088     A7 12 02 F6 | 	mov	arg01, fp
3308c     0C 4E 85 F1 | 	sub	fp, #12
33090     02 14 06 F6 | 	mov	arg02, #2
33094     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
33098                 | ' 
33098                 | ' 	rcvr_mmc(buff, btr);
33098                 | ' 	rcvr_mmc(d, 2);
33098                 | ' 
33098                 | ' 	return 1;
33098     01 FA 05 F6 | 	mov	result1, #1
3309c                 | LR__5122
3309c     A7 F0 03 F6 | 	mov	ptra, fp
330a0     B2 00 A0 FD | 	call	#popregs_
330a4                 | _fatfs_cc_rcvr_datablock_1183_ret
330a4     2D 00 64 FD | 	ret
330a8                 | 
330a8                 | _fatfs_cc_xmit_datablock_1185
330a8     00 4A 05 F6 | 	mov	COUNT_, #0
330ac     A8 00 A0 FD | 	call	#pushregs_
330b0     10 F0 07 F1 | 	add	ptra, #16
330b4     04 4E 05 F1 | 	add	fp, #4
330b8     A7 12 62 FC | 	wrlong	arg01, fp
330bc     04 4E 05 F1 | 	add	fp, #4
330c0     A7 14 42 FC | 	wrbyte	arg02, fp
330c4     08 4E 85 F1 | 	sub	fp, #8
330c8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1169
330cc     00 FA 0D F2 | 	cmp	result1, #0 wz
330d0     00 FA 05 A6 |  if_e	mov	result1, #0
330d4     90 00 90 AD |  if_e	jmp	#LR__5131
330d8     08 4E 05 F1 | 	add	fp, #8
330dc     A7 14 C2 FA | 	rdbyte	arg02, fp
330e0     04 4E 05 F1 | 	add	fp, #4
330e4     A7 14 42 FC | 	wrbyte	arg02, fp
330e8     A7 12 02 F6 | 	mov	arg01, fp
330ec     0C 4E 85 F1 | 	sub	fp, #12
330f0     01 14 06 F6 | 	mov	arg02, #1
330f4     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1158
330f8     08 4E 05 F1 | 	add	fp, #8
330fc     A7 14 C2 FA | 	rdbyte	arg02, fp
33100     08 4E 85 F1 | 	sub	fp, #8
33104     FD 14 0E F2 | 	cmp	arg02, #253 wz
33108     58 00 90 AD |  if_e	jmp	#LR__5130
3310c     04 4E 05 F1 | 	add	fp, #4
33110     A7 12 02 FB | 	rdlong	arg01, fp
33114     04 4E 85 F1 | 	sub	fp, #4
33118     09 14 C6 F9 | 	decod	arg02, #9
3311c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1158
33120     0C 4E 05 F1 | 	add	fp, #12
33124     A7 12 02 F6 | 	mov	arg01, fp
33128     0C 4E 85 F1 | 	sub	fp, #12
3312c     02 14 06 F6 | 	mov	arg02, #2
33130     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
33134     0C 4E 05 F1 | 	add	fp, #12
33138     A7 12 02 F6 | 	mov	arg01, fp
3313c     0C 4E 85 F1 | 	sub	fp, #12
33140     01 14 06 F6 | 	mov	arg02, #1
33144     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
33148     0C 4E 05 F1 | 	add	fp, #12
3314c     A7 14 C2 FA | 	rdbyte	arg02, fp
33150     0C 4E 85 F1 | 	sub	fp, #12
33154     1F 14 06 F5 | 	and	arg02, #31
33158     05 14 0E F2 | 	cmp	arg02, #5 wz
3315c                 | ' 			return 0;
3315c     00 FA 05 56 |  if_ne	mov	result1, #0
33160     04 00 90 5D |  if_ne	jmp	#LR__5131
33164                 | LR__5130
33164                 | ' 	}
33164                 | ' 
33164                 | ' 	return 1;
33164     01 FA 05 F6 | 	mov	result1, #1
33168                 | LR__5131
33168     A7 F0 03 F6 | 	mov	ptra, fp
3316c     B2 00 A0 FD | 	call	#popregs_
33170                 | _fatfs_cc_xmit_datablock_1185_ret
33170     2D 00 64 FD | 	ret
33174                 | 
33174                 | _fatfs_cc_send_cmd_1189
33174     01 4A 05 F6 | 	mov	COUNT_, #1
33178     A8 00 A0 FD | 	call	#pushregs_
3317c     1C F0 07 F1 | 	add	ptra, #28
33180                 | _fatfs_cc_send_cmd_1189_enter
33180     04 4E 05 F1 | 	add	fp, #4
33184     A7 12 42 FC | 	wrbyte	arg01, fp
33188     04 4E 05 F1 | 	add	fp, #4
3318c     A7 14 62 FC | 	wrlong	arg02, fp
33190     04 4E 85 F1 | 	sub	fp, #4
33194     A7 FA C1 FA | 	rdbyte	result1, fp
33198     04 4E 85 F1 | 	sub	fp, #4
3319c     80 FA CD F7 | 	test	result1, #128 wz
331a0     44 00 90 AD |  if_e	jmp	#LR__5140
331a4     04 4E 05 F1 | 	add	fp, #4
331a8     A7 14 C2 FA | 	rdbyte	arg02, fp
331ac     7F 14 06 F5 | 	and	arg02, #127
331b0     A7 14 42 FC | 	wrbyte	arg02, fp
331b4     04 4E 85 F1 | 	sub	fp, #4
331b8     37 12 06 F6 | 	mov	arg01, #55
331bc     00 14 06 F6 | 	mov	arg02, #0
331c0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1189
331c4     0C 4E 05 F1 | 	add	fp, #12
331c8     A7 FA 41 FC | 	wrbyte	result1, fp
331cc     A7 14 C2 FA | 	rdbyte	arg02, fp
331d0     0C 4E 85 F1 | 	sub	fp, #12
331d4     02 14 16 F2 | 	cmp	arg02, #2 wc
331d8     0C 4E 05 31 |  if_ae	add	fp, #12
331dc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
331e0     0C 4E 85 31 |  if_ae	sub	fp, #12
331e4     6C 01 90 3D |  if_ae	jmp	#LR__5144
331e8                 | LR__5140
331e8     04 4E 05 F1 | 	add	fp, #4
331ec     A7 14 C2 FA | 	rdbyte	arg02, fp
331f0     04 4E 85 F1 | 	sub	fp, #4
331f4     0C 14 0E F2 | 	cmp	arg02, #12 wz
331f8     14 00 90 AD |  if_e	jmp	#LR__5141
331fc     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1175
33200     34 FD BF FD | 	call	#_fatfs_cc_select_1179
33204     00 FA 0D F2 | 	cmp	result1, #0 wz
33208     FF FA 05 A6 |  if_e	mov	result1, #255
3320c     44 01 90 AD |  if_e	jmp	#LR__5144
33210                 | LR__5141
33210     04 4E 05 F1 | 	add	fp, #4
33214     A7 14 C2 FA | 	rdbyte	arg02, fp
33218     40 FA 05 F6 | 	mov	result1, #64
3321c     0A FB 41 F5 | 	or	result1, arg02
33220     10 4E 05 F1 | 	add	fp, #16
33224     A7 FA 41 FC | 	wrbyte	result1, fp
33228     0C 4E 85 F1 | 	sub	fp, #12
3322c     A7 FA 01 FB | 	rdlong	result1, fp
33230     18 FA 45 F0 | 	shr	result1, #24
33234     0D 4E 05 F1 | 	add	fp, #13
33238     A7 FA 41 FC | 	wrbyte	result1, fp
3323c     0D 4E 85 F1 | 	sub	fp, #13
33240     A7 FA 01 FB | 	rdlong	result1, fp
33244     10 FA 45 F0 | 	shr	result1, #16
33248     0E 4E 05 F1 | 	add	fp, #14
3324c     A7 FA 41 FC | 	wrbyte	result1, fp
33250     0E 4E 85 F1 | 	sub	fp, #14
33254     A7 FA 01 FB | 	rdlong	result1, fp
33258     08 FA 45 F0 | 	shr	result1, #8
3325c     0F 4E 05 F1 | 	add	fp, #15
33260     A7 FA 41 FC | 	wrbyte	result1, fp
33264     0F 4E 85 F1 | 	sub	fp, #15
33268     A7 FA 01 FB | 	rdlong	result1, fp
3326c     10 4E 05 F1 | 	add	fp, #16
33270     A7 FA 41 FC | 	wrbyte	result1, fp
33274     0C 4E 85 F1 | 	sub	fp, #12
33278     A7 02 48 FC | 	wrbyte	#1, fp
3327c     08 4E 85 F1 | 	sub	fp, #8
33280     A7 FA C9 FA | 	rdbyte	result1, fp wz
33284     04 4E 85 F1 | 	sub	fp, #4
33288     0C 4E 05 A1 |  if_e	add	fp, #12
3328c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
33290     0C 4E 85 A1 |  if_e	sub	fp, #12
33294     04 4E 05 F1 | 	add	fp, #4
33298     A7 FA C1 FA | 	rdbyte	result1, fp
3329c     04 4E 85 F1 | 	sub	fp, #4
332a0     08 FA 0D F2 | 	cmp	result1, #8 wz
332a4     0C 4E 05 A1 |  if_e	add	fp, #12
332a8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
332ac     0C 4E 85 A1 |  if_e	sub	fp, #12
332b0     0C 4E 05 F1 | 	add	fp, #12
332b4     A7 14 C2 FA | 	rdbyte	arg02, fp
332b8     0D 4E 05 F1 | 	add	fp, #13
332bc     A7 14 42 FC | 	wrbyte	arg02, fp
332c0     05 4E 85 F1 | 	sub	fp, #5
332c4     A7 12 02 F6 | 	mov	arg01, fp
332c8     14 4E 85 F1 | 	sub	fp, #20
332cc     06 14 06 F6 | 	mov	arg02, #6
332d0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1158
332d4     04 4E 05 F1 | 	add	fp, #4
332d8     A7 26 C2 FA | 	rdbyte	local01, fp
332dc     04 4E 85 F1 | 	sub	fp, #4
332e0     0C 26 0E F2 | 	cmp	local01, #12 wz
332e4     10 4E 05 A1 |  if_e	add	fp, #16
332e8     A7 12 02 A6 |  if_e	mov	arg01, fp
332ec     10 4E 85 A1 |  if_e	sub	fp, #16
332f0     01 14 06 A6 |  if_e	mov	arg02, #1
332f4     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1165
332f8     0C 4E 05 F1 | 	add	fp, #12
332fc     A7 14 48 FC | 	wrbyte	#10, fp
33300     0C 4E 85 F1 | 	sub	fp, #12
33304                 | ' 	n = 10;
33304                 | ' 	do
33304                 | LR__5142
33304     10 4E 05 F1 | 	add	fp, #16
33308     A7 12 02 F6 | 	mov	arg01, fp
3330c     10 4E 85 F1 | 	sub	fp, #16
33310     01 14 06 F6 | 	mov	arg02, #1
33314     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1165
33318     10 4E 05 F1 | 	add	fp, #16
3331c     A7 26 C2 FA | 	rdbyte	local01, fp
33320     10 4E 85 F1 | 	sub	fp, #16
33324     80 26 CE F7 | 	test	local01, #128 wz
33328     1C 00 90 AD |  if_e	jmp	#LR__5143
3332c     0C 4E 05 F1 | 	add	fp, #12
33330     A7 26 C2 FA | 	rdbyte	local01, fp
33334     01 26 86 F1 | 	sub	local01, #1
33338     A7 26 42 FC | 	wrbyte	local01, fp
3333c     A7 26 CA FA | 	rdbyte	local01, fp wz
33340     0C 4E 85 F1 | 	sub	fp, #12
33344     BC FF 9F 5D |  if_ne	jmp	#LR__5142
33348                 | LR__5143
33348                 | ' 
33348                 | ' 	return d;
33348     10 4E 05 F1 | 	add	fp, #16
3334c     A7 FA C1 FA | 	rdbyte	result1, fp
33350     10 4E 85 F1 | 	sub	fp, #16
33354                 | LR__5144
33354     A7 F0 03 F6 | 	mov	ptra, fp
33358     B2 00 A0 FD | 	call	#popregs_
3335c                 | _fatfs_cc_send_cmd_1189_ret
3335c     2D 00 64 FD | 	ret
33360                 | 
33360                 | _fatfs_cc_disk_deinitialize
33360     03 4A 05 F6 | 	mov	COUNT_, #3
33364     A8 00 A0 FD | 	call	#pushregs_
33368     00 12 4E F2 | 	cmps	arg01, #0 wz
3336c     01 00 00 FF 
33370     14 E4 05 F1 | 	add	objptr, ##532
33374     F2 12 02 FB | 	rdlong	arg01, objptr
33378     04 E4 85 F1 | 	sub	objptr, #4
3337c     F2 26 02 FB | 	rdlong	local01, objptr
33380     08 E4 05 F1 | 	add	objptr, #8
33384     F2 28 02 FB | 	rdlong	local02, objptr
33388     04 E4 05 F1 | 	add	objptr, #4
3338c     F2 2A 02 FB | 	rdlong	local03, objptr
33390     01 00 00 FF 
33394     1C E4 85 F1 | 	sub	objptr, ##540
33398                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
33398                 | '         return RES_NOTRDY;
33398     03 FA 05 56 |  if_ne	mov	result1, #3
3339c     2C 00 90 5D |  if_ne	jmp	#LR__5150
333a0     50 12 62 FD | 	fltl	arg01
333a4     09 01 08 FC | 	wrpin	#0, arg01
333a8     50 26 62 FD | 	fltl	local01
333ac     13 01 08 FC | 	wrpin	#0, local01
333b0     50 28 62 FD | 	fltl	local02
333b4     14 01 08 FC | 	wrpin	#0, local02
333b8     50 2A 62 FD | 	fltl	local03
333bc     15 01 08 FC | 	wrpin	#0, local03
333c0     0A 12 06 F6 | 	mov	arg01, #10
333c4     40 0E BF FD | 	call	#__system___waitms
333c8                 | '     }
333c8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
333c8                 | '     _pinclear(PIN_SS);
333c8                 | '     _pinclear(PIN_CLK);
333c8                 | '     _pinclear(PIN_DI);
333c8                 | '     _pinclear(PIN_DO);
333c8                 | ' 
333c8                 | '     _waitms(10);
333c8                 | ' 
333c8                 | '     return 0;
333c8     00 FA 05 F6 | 	mov	result1, #0
333cc                 | LR__5150
333cc     A7 F0 03 F6 | 	mov	ptra, fp
333d0     B2 00 A0 FD | 	call	#popregs_
333d4                 | _fatfs_cc_disk_deinitialize_ret
333d4     2D 00 64 FD | 	ret
333d8                 | 
333d8                 | _fatfs_cc_gettimeofday
333d8     04 4A 05 F6 | 	mov	COUNT_, #4
333dc     A8 00 A0 FD | 	call	#pushregs_
333e0     09 27 02 F6 | 	mov	local01, arg01
333e4     FC 09 BF FD | 	call	#__system___getus
333e8     FD 12 02 F6 | 	mov	arg01, result1
333ec     02 00 00 FF 
333f0     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
333f4     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
333f8     09 FB 01 F6 | 	mov	result1, arg01
333fc     14 FB 81 F1 | 	sub	result1, local02
33400     A1 07 00 FF 
33404     40 FA 15 FD | 	qdiv	result1, ##1000000
33408     02 00 00 FF 
3340c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
33410     18 28 62 FD | 	getqx	local02
33414     A1 07 00 FF 
33418     40 FA 15 FD | 	qdiv	result1, ##1000000
3341c     00 28 0E F2 | 	cmp	local02, #0 wz
33420     19 2A 62 FD | 	getqy	local03
33424     28 00 90 AD |  if_e	jmp	#LR__5160
33428     02 00 00 FF 
3342c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
33430     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
33434     14 2D 02 F1 | 	add	local04, local02
33438     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
3343c     15 13 82 F1 | 	sub	arg01, local03
33440     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
33444     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
33448     02 00 00 FF 
3344c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
33450                 | LR__5160
33450     02 00 00 FF 
33454     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
33458     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3345c     02 00 00 FF 
33460     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
33464     13 2D 62 FC | 	wrlong	local04, local01
33468     04 26 06 F1 | 	add	local01, #4
3346c     13 2B 62 FC | 	wrlong	local03, local01
33470                 | '         lastsec += secs;
33470                 | '         lastus = now - leftover;
33470                 | '     }
33470                 | '     tv->tv_sec = lastsec;
33470                 | '     tv->tv_usec = leftover;
33470                 | '     return 0;
33470     00 FA 05 F6 | 	mov	result1, #0
33474     A7 F0 03 F6 | 	mov	ptra, fp
33478     B2 00 A0 FD | 	call	#popregs_
3347c                 | _fatfs_cc_gettimeofday_ret
3347c     2D 00 64 FD | 	ret
33480                 | 
33480                 | _fatfs_cc__is_leap_year
33480     09 FB 51 F6 | 	abs	result1, arg01 wc
33484     03 FA 05 F5 | 	and	result1, #3
33488     FD FA 89 F6 | 	negc	result1, result1 wz
3348c     38 00 90 5D |  if_ne	jmp	#LR__5171
33490     09 FB 51 F6 | 	abs	result1, arg01 wc
33494     64 FA 15 FD | 	qdiv	result1, #100
33498     19 FA 61 FD | 	getqy	result1
3349c     FD FA 89 F6 | 	negc	result1, result1 wz
334a0     1C 00 90 5D |  if_ne	jmp	#LR__5170
334a4     09 FB 51 F6 | 	abs	result1, arg01 wc
334a8     90 FB 15 FD | 	qdiv	result1, #400
334ac                 | '       return (0 == y % 400);
334ac     00 FA 05 F6 | 	mov	result1, #0
334b0     19 00 62 FD | 	getqy	_var01
334b4     00 01 8A F6 | 	negc	_var01, _var01 wz
334b8     01 FA 05 A6 |  if_e	mov	result1, #1
334bc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
334c0                 | LR__5170
334c0                 | '     return 1;
334c0     01 FA 05 F6 | 	mov	result1, #1
334c4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
334c8                 | LR__5171
334c8                 | '   }
334c8                 | '   return 0;
334c8     00 FA 05 F6 | 	mov	result1, #0
334cc                 | _fatfs_cc__is_leap_year_ret
334cc     2D 00 64 FD | 	ret
334d0                 | 
334d0                 | _fatfs_cc___tzoffset
334d0     09 01 0A F6 | 	mov	_var01, arg01 wz
334d4     FF FF FF FF 
334d8     0A FF 6B FC | 	wrlong	##-1, arg02
334dc     01 02 06 F6 | 	mov	_var02, #1
334e0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
334e4                 | '                 return 0;
334e4     00 FA 05 A6 |  if_e	mov	result1, #0
334e8     94 02 90 AD |  if_e	jmp	#LR__5197
334ec     0A 01 68 FC | 	wrlong	#0, arg02
334f0     02 00 00 FF 
334f4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
334f8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
334fc                 | ' 
334fc                 | '        *hasdst = 0;
334fc                 | ' 
334fc                 | ' 	n = stdname;
334fc                 | '         while (*s && isalpha(*s)) {
334fc     02 00 00 FF 
33500     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
33504     97 28 48 FB | 	callpa	#(@LR__5181-@LR__5180)>>2,fcache_load_ptr_
33508                 | LR__5180
33508     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3350c     48 00 90 AD |  if_e	jmp	#LR__5182
33510     00 13 C2 FA | 	rdbyte	arg01, _var01
33514                 | ' {
33514                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
33514     80 12 36 F3 | 	fle	arg01, #128 wc
33518                 | '     return __ctype[c];
33518     02 00 00 FF 
3351c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
33520     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33524     09 FB C1 FA | 	rdbyte	result1, arg01
33528     02 00 00 FF 
3352c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33530     0C FA CD F7 | 	test	result1, #12 wz
33534     20 00 90 AD |  if_e	jmp	#LR__5182
33538     00 09 02 F6 | 	mov	_var05, _var01
3353c     00 0B 02 F6 | 	mov	_var06, _var01
33540     01 0A 06 F1 | 	add	_var06, #1
33544     04 0D C2 FA | 	rdbyte	_var07, _var05
33548     05 01 02 F6 | 	mov	_var01, _var06
3354c     03 0D 42 FC | 	wrbyte	_var07, _var04
33550     01 06 06 F1 | 	add	_var04, #1
33554     B0 FF 9F FD | 	jmp	#LR__5180
33558                 | LR__5181
33558                 | LR__5182
33558     03 01 48 FC | 	wrbyte	#0, _var04
3355c     00 0E 06 F6 | 	mov	_var08, #0
33560     00 05 C2 FA | 	rdbyte	_var03, _var01
33564     2D 04 0E F2 | 	cmp	_var03, #45 wz
33568     01 02 66 A6 |  if_e	neg	_var02, #1
3356c     01 00 06 A1 |  if_e	add	_var01, #1
33570     97 28 48 FB | 	callpa	#(@LR__5184-@LR__5183)>>2,fcache_load_ptr_
33574                 | '                 sgn = -1;
33574                 | '                 s++;
33574                 | '         }
33574                 | '         while (isdigit(*s)) {
33574                 | LR__5183
33574     00 13 C2 FA | 	rdbyte	arg01, _var01
33578                 | ' {
33578                 | '   return  (__ctype_get(c) & 0x02 ) ;
33578     80 12 36 F3 | 	fle	arg01, #128 wc
3357c                 | '     return __ctype[c];
3357c     02 00 00 FF 
33580     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
33584     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33588     09 FB C1 FA | 	rdbyte	result1, arg01
3358c     02 00 00 FF 
33590     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33594     02 FA CD F7 | 	test	result1, #2 wz
33598     28 00 90 AD |  if_e	jmp	#LR__5185
3359c     07 05 02 F6 | 	mov	_var03, _var08
335a0     02 04 66 F0 | 	shl	_var03, #2
335a4     07 05 02 F1 | 	add	_var03, _var08
335a8     01 04 66 F0 | 	shl	_var03, #1
335ac     00 09 C2 FA | 	rdbyte	_var05, _var01
335b0     30 08 86 F1 | 	sub	_var05, #48
335b4     04 05 02 F1 | 	add	_var03, _var05
335b8     02 0F 02 F6 | 	mov	_var08, _var03
335bc     01 00 06 F1 | 	add	_var01, #1
335c0     B0 FF 9F FD | 	jmp	#LR__5183
335c4                 | LR__5184
335c4                 | LR__5185
335c4     07 00 00 FF 
335c8     10 0E 06 FD | 	qmul	_var08, ##3600
335cc     00 05 C2 FA | 	rdbyte	_var03, _var01
335d0     3A 04 0E F2 | 	cmp	_var03, #58 wz
335d4     18 10 62 FD | 	getqx	_var09
335d8     70 00 90 5D |  if_ne	jmp	#LR__5189
335dc     00 0E 06 F6 | 	mov	_var08, #0
335e0     01 00 06 F1 | 	add	_var01, #1
335e4     97 28 48 FB | 	callpa	#(@LR__5187-@LR__5186)>>2,fcache_load_ptr_
335e8                 | '                 x = 0;
335e8                 | '                 s++;
335e8                 | '                 while (isdigit(*s)) {
335e8                 | LR__5186
335e8     00 13 C2 FA | 	rdbyte	arg01, _var01
335ec                 | ' {
335ec                 | '   return  (__ctype_get(c) & 0x02 ) ;
335ec     80 12 36 F3 | 	fle	arg01, #128 wc
335f0                 | '     return __ctype[c];
335f0     02 00 00 FF 
335f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
335f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
335fc     09 FB C1 FA | 	rdbyte	result1, arg01
33600     02 00 00 FF 
33604     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33608     02 FA CD F7 | 	test	result1, #2 wz
3360c     28 00 90 AD |  if_e	jmp	#LR__5188
33610     07 05 02 F6 | 	mov	_var03, _var08
33614     02 04 66 F0 | 	shl	_var03, #2
33618     07 05 02 F1 | 	add	_var03, _var08
3361c     01 04 66 F0 | 	shl	_var03, #1
33620     00 09 C2 FA | 	rdbyte	_var05, _var01
33624     30 08 86 F1 | 	sub	_var05, #48
33628     04 05 02 F1 | 	add	_var03, _var05
3362c     02 0F 02 F6 | 	mov	_var08, _var03
33630     01 00 06 F1 | 	add	_var01, #1
33634     B0 FF 9F FD | 	jmp	#LR__5186
33638                 | LR__5187
33638                 | LR__5188
33638     07 0D 02 F6 | 	mov	_var07, _var08
3363c     04 0C 66 F0 | 	shl	_var07, #4
33640     07 0D 82 F1 | 	sub	_var07, _var08
33644     02 0C 66 F0 | 	shl	_var07, #2
33648     06 11 02 F1 | 	add	_var09, _var07
3364c                 | LR__5189
3364c     02 00 00 FF 
33650     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
33654     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
33658     00 13 C2 FA | 	rdbyte	arg01, _var01
3365c                 | ' {
3365c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3365c     80 12 36 F3 | 	fle	arg01, #128 wc
33660                 | '     return __ctype[c];
33660     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
33664     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33668     09 FB C1 FA | 	rdbyte	result1, arg01
3366c     02 00 00 FF 
33670     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33674     0C FA CD F7 | 	test	result1, #12 wz
33678     50 00 90 AD |  if_e	jmp	#LR__5192
3367c     0A 03 68 FC | 	wrlong	#1, arg02
33680                 | '                 *hasdst = 1;
33680                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
33680                 | LR__5190
33680     00 05 CA FA | 	rdbyte	_var03, _var01 wz
33684     44 00 90 AD |  if_e	jmp	#LR__5191
33688     00 13 C2 FA | 	rdbyte	arg01, _var01
3368c                 | ' {
3368c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3368c     80 12 36 F3 | 	fle	arg01, #128 wc
33690                 | '     return __ctype[c];
33690     02 00 00 FF 
33694     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
33698     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3369c     09 FB C1 FA | 	rdbyte	result1, arg01
336a0     02 00 00 FF 
336a4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
336a8     0C FA CD F7 | 	test	result1, #12 wz
336ac     1C 00 90 AD |  if_e	jmp	#LR__5191
336b0     00 0B 02 F6 | 	mov	_var06, _var01
336b4     01 0A 06 F1 | 	add	_var06, #1
336b8     00 0D C2 FA | 	rdbyte	_var07, _var01
336bc     05 01 02 F6 | 	mov	_var01, _var06
336c0     03 0D 42 FC | 	wrbyte	_var07, _var04
336c4     01 06 06 F1 | 	add	_var04, #1
336c8     B4 FF 9F FD | 	jmp	#LR__5190
336cc                 | LR__5191
336cc                 | LR__5192
336cc     03 01 48 FC | 	wrbyte	#0, _var04
336d0     02 00 00 FF 
336d4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
336d8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
336dc     02 00 00 FF 
336e0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
336e4     20 00 90 AD |  if_e	jmp	#LR__5193
336e8     02 00 00 FF 
336ec     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
336f0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
336f4     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
336f8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
336fc     02 00 00 FF 
33700     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
33704     1C 00 90 FD | 	jmp	#LR__5194
33708                 | LR__5193
33708     02 00 00 FF 
3370c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
33710     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
33714     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
33718     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3371c     02 00 00 FF 
33720     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
33724                 | LR__5194
33724     02 00 00 FF 
33728     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3372c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
33730     02 00 00 FF 
33734     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
33738     20 00 90 AD |  if_e	jmp	#LR__5195
3373c     02 00 00 FF 
33740     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
33744     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
33748     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
3374c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
33750     02 00 00 FF 
33754     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
33758     1C 00 90 FD | 	jmp	#LR__5196
3375c                 | LR__5195
3375c     02 00 00 FF 
33760     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
33764     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
33768     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
3376c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
33770     02 00 00 FF 
33774     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
33778                 | LR__5196
33778     08 03 02 FD | 	qmul	_var02, _var09
3377c                 | ' 		_tzname[1] = stdname;
3377c                 | ' 
3377c                 | '         return sgn * off;
3377c     18 FA 61 FD | 	getqx	result1
33780                 | LR__5197
33780                 | _fatfs_cc___tzoffset_ret
33780     2D 00 64 FD | 	ret
33784                 | 
33784                 | _fatfs_cc___indst
33784     10 12 06 F1 | 	add	arg01, #16
33788     09 01 02 FB | 	rdlong	_var01, arg01
3378c     10 12 86 F1 | 	sub	arg01, #16
33790     02 00 0E F2 | 	cmp	_var01, #2 wz
33794     30 00 90 5D |  if_ne	jmp	#LR__5200
33798     07 00 06 F6 | 	mov	_var01, #7
3379c     18 12 06 F1 | 	add	arg01, #24
337a0     09 03 02 FB | 	rdlong	_var02, arg01
337a4     01 01 02 F1 | 	add	_var01, _var02
337a8     0C 12 86 F1 | 	sub	arg01, #12
337ac     09 05 02 FB | 	rdlong	_var03, arg01
337b0     02 01 82 F1 | 	sub	_var01, _var03
337b4     00 00 56 F2 | 	cmps	_var01, #0 wc
337b8                 | '                         return 1;
337b8     01 FA 05 C6 |  if_b	mov	result1, #1
337bc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
337c0                 | '                 return 0;
337c0     00 FA 05 F6 | 	mov	result1, #0
337c4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
337c8                 | LR__5200
337c8     10 12 06 F1 | 	add	arg01, #16
337cc     09 01 02 FB | 	rdlong	_var01, arg01
337d0     10 12 86 F1 | 	sub	arg01, #16
337d4     0A 00 0E F2 | 	cmp	_var01, #10 wz
337d8     28 00 90 5D |  if_ne	jmp	#LR__5201
337dc     18 12 06 F1 | 	add	arg01, #24
337e0     09 01 02 FB | 	rdlong	_var01, arg01
337e4     0C 12 86 F1 | 	sub	arg01, #12
337e8     09 07 02 FB | 	rdlong	_var04, arg01
337ec     03 01 82 F1 | 	sub	_var01, _var04
337f0     00 00 56 F2 | 	cmps	_var01, #0 wc
337f4                 | '                         return 0;
337f4     00 FA 05 C6 |  if_b	mov	result1, #0
337f8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
337fc                 | '                 return 1;
337fc     01 FA 05 F6 | 	mov	result1, #1
33800     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
33804                 | LR__5201
33804                 | '         }
33804                 | ' 
33804                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
33804     00 00 06 F6 | 	mov	_var01, #0
33808     10 12 06 F1 | 	add	arg01, #16
3380c     09 03 02 FB | 	rdlong	_var02, arg01
33810     10 12 86 F1 | 	sub	arg01, #16
33814     03 02 56 F2 | 	cmps	_var02, #3 wc
33818     10 00 90 CD |  if_b	jmp	#LR__5202
3381c     10 12 06 F1 | 	add	arg01, #16
33820     09 05 02 FB | 	rdlong	_var03, arg01
33824     0A 04 56 F2 | 	cmps	_var03, #10 wc
33828     01 00 06 C6 |  if_b	mov	_var01, #1
3382c                 | LR__5202
3382c     00 FB 01 F6 | 	mov	result1, _var01
33830                 | _fatfs_cc___indst_ret
33830     2D 00 64 FD | 	ret
33834                 | 
33834                 | ' 	
33834                 | ' 	FUNCTION pfunc(c as integer) as integer
33834                 | ___strs_cl_pfunc
33834                 | ' 		if (i < 16) then
33834     04 E4 05 F1 | 	add	objptr, #4
33838     F2 FA 01 FB | 	rdlong	result1, objptr
3383c     04 E4 85 F1 | 	sub	objptr, #4
33840     10 FA 55 F2 | 	cmps	result1, #16 wc
33844     2C 00 90 3D |  if_ae	jmp	#LR__5210
33848     F2 FA 01 FB | 	rdlong	result1, objptr
3384c     04 E4 05 F1 | 	add	objptr, #4
33850     F2 00 02 FB | 	rdlong	_var01, objptr
33854     FD 00 02 F1 | 	add	_var01, result1
33858     00 13 42 FC | 	wrbyte	arg01, _var01
3385c     F2 FA 01 FB | 	rdlong	result1, objptr
33860     01 FA 05 F1 | 	add	result1, #1
33864     F2 FA 61 FC | 	wrlong	result1, objptr
33868     04 E4 85 F1 | 	sub	objptr, #4
3386c                 | ' 			p(i) = c
3386c                 | ' 			i = i+1
3386c                 | ' 			return 1
3386c     01 FA 05 F6 | 	mov	result1, #1
33870     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
33874                 | LR__5210
33874                 | ' 			return -1
33874     01 FA 65 F6 | 	neg	result1, #1
33878                 | ___strs_cl_pfunc_ret
33878     2D 00 64 FD | 	ret
3387c                 | 
3387c                 | __struct__s_vfs_file_t_putchar
3387c     04 4A 05 F6 | 	mov	COUNT_, #4
33880     A8 00 A0 FD | 	call	#pushregs_
33884     1C E4 05 F1 | 	add	objptr, #28
33888     F2 26 0A FB | 	rdlong	local01, objptr wz
3388c     1C E4 85 F1 | 	sub	objptr, #28
33890     00 FA 05 A6 |  if_e	mov	result1, #0
33894     48 00 90 AD |  if_e	jmp	#LR__5220
33898     1C E4 05 F1 | 	add	objptr, #28
3389c     F2 28 02 FB | 	rdlong	local02, objptr
338a0     14 2B 02 F6 | 	mov	local03, local02
338a4     1C E4 85 F1 | 	sub	objptr, #28
338a8     13 2A 46 F7 | 	zerox	local03, #19
338ac     14 28 46 F0 | 	shr	local02, #20
338b0     02 28 66 F0 | 	shl	local02, #2
338b4     ED 28 02 F1 | 	add	local02, __methods__
338b8     14 29 02 FB | 	rdlong	local02, local02
338bc     F2 14 02 F6 | 	mov	arg02, objptr
338c0     F2 2C 02 F6 | 	mov	local04, objptr
338c4     15 E5 01 F6 | 	mov	objptr, local03
338c8     2D 28 62 FD | 	call	local02
338cc     16 E5 01 F6 | 	mov	objptr, local04
338d0                 | '     return (i < 0) ? 0 : 1;
338d0     00 FA 55 F2 | 	cmps	result1, #0 wc
338d4     00 26 06 C6 |  if_b	mov	local01, #0
338d8     01 26 06 36 |  if_ae	mov	local01, #1
338dc     13 FB 01 F6 | 	mov	result1, local01
338e0                 | LR__5220
338e0     A7 F0 03 F6 | 	mov	ptra, fp
338e4     B2 00 A0 FD | 	call	#popregs_
338e8                 | __struct__s_vfs_file_t_putchar_ret
338e8     2D 00 64 FD | 	ret
338ec                 | 
338ec                 | __struct__s_vfs_file_t_getchar
338ec     03 4A 05 F6 | 	mov	COUNT_, #3
338f0     A8 00 A0 FD | 	call	#pushregs_
338f4     20 E4 05 F1 | 	add	objptr, #32
338f8     F2 12 0A FB | 	rdlong	arg01, objptr wz
338fc     20 E4 85 F1 | 	sub	objptr, #32
33900     01 FA 65 A6 |  if_e	neg	result1, #1
33904     38 00 90 AD |  if_e	jmp	#LR__5230
33908                 | '     return getcf(__this);
33908     20 E4 05 F1 | 	add	objptr, #32
3390c     F2 26 02 FB | 	rdlong	local01, objptr
33910     13 29 02 F6 | 	mov	local02, local01
33914     20 E4 85 F1 | 	sub	objptr, #32
33918     13 28 46 F7 | 	zerox	local02, #19
3391c     14 26 46 F0 | 	shr	local01, #20
33920     02 26 66 F0 | 	shl	local01, #2
33924     ED 26 02 F1 | 	add	local01, __methods__
33928     13 27 02 FB | 	rdlong	local01, local01
3392c     F2 12 02 F6 | 	mov	arg01, objptr
33930     F2 2A 02 F6 | 	mov	local03, objptr
33934     14 E5 01 F6 | 	mov	objptr, local02
33938     2D 26 62 FD | 	call	local01
3393c     15 E5 01 F6 | 	mov	objptr, local03
33940                 | LR__5230
33940     A7 F0 03 F6 | 	mov	ptra, fp
33944     B2 00 A0 FD | 	call	#popregs_
33948                 | __struct__s_vfs_file_t_getchar_ret
33948     2D 00 64 FD | 	ret
3394c                 | 
3394c                 | __struct___bas_wrap_sender_tx
3394c     03 4A 05 F6 | 	mov	COUNT_, #3
33950     A8 00 A0 FD | 	call	#pushregs_
33954     F2 26 02 FB | 	rdlong	local01, objptr
33958     13 29 02 F6 | 	mov	local02, local01
3395c     13 26 46 F7 | 	zerox	local01, #19
33960     14 28 46 F0 | 	shr	local02, #20
33964     02 28 66 F0 | 	shl	local02, #2
33968     ED 28 02 F1 | 	add	local02, __methods__
3396c     14 29 02 FB | 	rdlong	local02, local02
33970     F2 2A 02 F6 | 	mov	local03, objptr
33974     13 E5 01 F6 | 	mov	objptr, local01
33978     2D 28 62 FD | 	call	local02
3397c     15 E5 01 F6 | 	mov	objptr, local03
33980     01 FA 05 F6 | 	mov	result1, #1
33984     A7 F0 03 F6 | 	mov	ptra, fp
33988     B2 00 A0 FD | 	call	#popregs_
3398c                 | __struct___bas_wrap_sender_tx_ret
3398c     2D 00 64 FD | 	ret
33990                 | 
33990                 | __struct___bas_wrap_sender_rx
33990     03 4A 05 F6 | 	mov	COUNT_, #3
33994     A8 00 A0 FD | 	call	#pushregs_
33998     04 E4 05 F1 | 	add	objptr, #4
3399c     F2 26 02 FB | 	rdlong	local01, objptr
339a0     13 29 02 F6 | 	mov	local02, local01
339a4     04 E4 85 F1 | 	sub	objptr, #4
339a8     13 28 46 F7 | 	zerox	local02, #19
339ac     14 26 46 F0 | 	shr	local01, #20
339b0     02 26 66 F0 | 	shl	local01, #2
339b4     ED 26 02 F1 | 	add	local01, __methods__
339b8     13 27 02 FB | 	rdlong	local01, local01
339bc     F2 2A 02 F6 | 	mov	local03, objptr
339c0     14 E5 01 F6 | 	mov	objptr, local02
339c4     2D 26 62 FD | 	call	local01
339c8     15 E5 01 F6 | 	mov	objptr, local03
339cc     A7 F0 03 F6 | 	mov	ptra, fp
339d0     B2 00 A0 FD | 	call	#popregs_
339d4                 | __struct___bas_wrap_sender_rx_ret
339d4     2D 00 64 FD | 	ret
339d8                 | 
339d8                 | __struct___bas_wrap_sender_close
339d8     03 4A 05 F6 | 	mov	COUNT_, #3
339dc     A8 00 A0 FD | 	call	#pushregs_
339e0     08 E4 05 F1 | 	add	objptr, #8
339e4     F2 26 02 FB | 	rdlong	local01, objptr
339e8     13 29 02 F6 | 	mov	local02, local01
339ec     08 E4 85 F1 | 	sub	objptr, #8
339f0     13 28 46 F7 | 	zerox	local02, #19
339f4     14 26 46 F0 | 	shr	local01, #20
339f8     02 26 66 F0 | 	shl	local01, #2
339fc     ED 26 02 F1 | 	add	local01, __methods__
33a00     13 27 02 FB | 	rdlong	local01, local01
33a04     F2 2A 02 F6 | 	mov	local03, objptr
33a08     14 E5 01 F6 | 	mov	objptr, local02
33a0c     2D 26 62 FD | 	call	local01
33a10     15 E5 01 F6 | 	mov	objptr, local03
33a14     A7 F0 03 F6 | 	mov	ptra, fp
33a18     B2 00 A0 FD | 	call	#popregs_
33a1c                 | __struct___bas_wrap_sender_close_ret
33a1c     2D 00 64 FD | 	ret
33a20                 | 
33a20                 | LR__5240
33a20     2F          | 	byte	"/"
33a21     00          | 	byte	0
33a22                 | LR__5241
33a22     69 6E 66    | 	byte	"inf"
33a25     00          | 	byte	0
33a26                 | LR__5242
33a26     6E 61 6E    | 	byte	"nan"
33a29     00          | 	byte	0
33a2a                 | LR__5243
33a2a                 | 	byte	
33a2a     00          | 	byte	0
33a2b                 | LR__5244
33a2b                 | 	byte	
33a2b     00          | 	byte	0
33a2c                 | LR__5245
33a2c                 | 	byte	
33a2c     00          | 	byte	0
33a2d                 | LR__5246
33a2d                 | 	byte	
33a2d     00          | 	byte	0
33a2e                 | LR__5247
33a2e                 | 	byte	
33a2e     00          | 	byte	0
33a2f                 | LR__5248
33a2f                 | 	byte	
33a2f     00          | 	byte	0
33a30                 | LR__5249
33a30                 | 	byte	
33a30     00          | 	byte	0
33a31                 | LR__5250
33a31                 | 	byte	
33a31     00          | 	byte	0
33a32                 | LR__5251
33a32     00          | 	byte	0
33a33     00          | 	byte	0
33a34                 | LR__5252
33a34     00          | 	byte	0
33a35     00          | 	byte	0
33a36                 | LR__5253
33a36     00          | 	byte	0
33a37     00          | 	byte	0
33a38                 | LR__5254
33a38     20 21 21 21 
33a3c     20 63 6F 72 
33a40     72 75 70 74 
33a44     65 64 20 68 
33a48     65 61 70 3F 
33a4c     3F 3F 20 21 
33a50     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
33a53     00          | 	byte	0
33a54                 | LR__5255
33a54     20 21 21 21 
33a58     20 6F 75 74 
33a5c     20 6F 66 20 
33a60     68 65 61 70 
33a64     20 6D 65 6D 
33a68     6F 72 79 20 
33a6c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
33a70     00          | 	byte	0
33a71                 | LR__5256
33a71     20 21 21 21 
33a75     20 63 6F 72 
33a79     72 75 70 74 
33a7d     65 64 20 68 
33a81     65 61 70 20 
33a85     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
33a89     00          | 	byte	0
33a8a                 | LR__5257
33a8a     00          | 	byte	0
33a8b     00          | 	byte	0
33a8c                 | LR__5258
33a8c     2E          | 	byte	"."
33a8d     00          | 	byte	0
33a8e                 | LR__5259
33a8e     00          | 	byte	0
33a8f     00          | 	byte	0
33a90                 | LR__5260
33a90     00          | 	byte	0
33a91     00          | 	byte	0
33a92                 | LR__5261
33a92     00          | 	byte	0
33a93     00          | 	byte	0
33a94                 | LR__5262
33a94     2A 3A 3C 3E 
33a98     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
33a9c     00          | 	byte	0
33a9d                 | LR__5263
33a9d     2B 2C 3B 3D 
33aa1     5B 5D       | 	byte	"+,;=[]"
33aa3     00          | 	byte	0
33aa4                 | LR__5264
33aa4     46 41 54 33 
33aa8     32 20 20 20 | 	byte	"FAT32   "
33aac     00          | 	byte	0
33aad                 | LR__5265
33aad     54 5A       | 	byte	"TZ"
33aaf     00          | 	byte	0
33ab0                 | LR__5266
33ab0     00          | 	byte	0
33ab1     00          | 	byte	0
33ab2                 | LR__5267
33ab2                 | 	byte	
33ab2     00          | 	byte	0
33ab3                 | LR__5268
33ab3                 | 	byte	
33ab3     00          | 	byte	0
33ab4                 | LR__5269
33ab4                 | 	byte	
33ab4     00          | 	byte	0
33ab5                 | LR__5270
33ab5                 | 	byte	
33ab5     00          | 	byte	0
33ab6                 | LR__5271
33ab6     22          | 	byte	34
33ab7     00          | 	byte	0
33ab8                 | LR__5272
33ab8     22          | 	byte	34
33ab9     00          | 	byte	0
33aba                 | LR__5273
33aba     3A          | 	byte	":"
33abb     00          | 	byte	0
33abc                 | LR__5274
33abc                 | 	byte	
33abc     00          | 	byte	0
33abd                 | LR__5275
33abd                 | 	byte	
33abd     00          | 	byte	0
33abe                 | LR__5276
33abe                 | 	byte	
33abe     00          | 	byte	0
33abf                 | LR__5277
33abf                 | 	byte	
33abf     00          | 	byte	0
33ac0                 | LR__5278
33ac0                 | 	byte	
33ac0     00          | 	byte	0
33ac1                 | LR__5279
33ac1                 | 	byte	
33ac1     00          | 	byte	0
33ac2                 | LR__5280
33ac2                 | 	byte	
33ac2     00          | 	byte	0
33ac3                 | LR__5281
33ac3     30          | 	byte	"0"
33ac4     00          | 	byte	0
33ac5                 | LR__5282
33ac5     22          | 	byte	34
33ac6     00          | 	byte	0
33ac7                 | LR__5283
33ac7     22          | 	byte	34
33ac8     00          | 	byte	0
33ac9                 | LR__5284
33ac9     22          | 	byte	34
33aca     00          | 	byte	0
33acb                 | LR__5285
33acb     22          | 	byte	34
33acc     00          | 	byte	0
33acd                 | LR__5286
33acd     22          | 	byte	34
33ace     00          | 	byte	0
33acf                 | LR__5287
33acf     3E          | 	byte	">"
33ad0     00          | 	byte	0
33ad1                 | LR__5288
33ad1     3C          | 	byte	"<"
33ad2     00          | 	byte	0
33ad3                 | LR__5289
33ad3     2B          | 	byte	"+"
33ad4     00          | 	byte	0
33ad5                 | LR__5290
33ad5     2D          | 	byte	"-"
33ad6     00          | 	byte	0
33ad7                 | LR__5291
33ad7     2A          | 	byte	"*"
33ad8     00          | 	byte	0
33ad9                 | LR__5292
33ad9     2F          | 	byte	"/"
33ada     00          | 	byte	0
33adb                 | LR__5293
33adb     5E          | 	byte	"^"
33adc     00          | 	byte	0
33add                 | LR__5294
33add     3D          | 	byte	"="
33ade     00          | 	byte	0
33adf                 | LR__5295
33adf     2B          | 	byte	"+"
33ae0     00          | 	byte	0
33ae1                 | LR__5296
33ae1     2B          | 	byte	"+"
33ae2     00          | 	byte	0
33ae3                 | LR__5297
33ae3     2D          | 	byte	"-"
33ae4     00          | 	byte	0
33ae5                 | LR__5298
33ae5     2D          | 	byte	"-"
33ae6     00          | 	byte	0
33ae7                 | LR__5299
33ae7     3C          | 	byte	"<"
33ae8     00          | 	byte	0
33ae9                 | LR__5300
33ae9     3E          | 	byte	">"
33aea     00          | 	byte	0
33aeb                 | LR__5301
33aeb     22          | 	byte	34
33aec     00          | 	byte	0
33aed                 | LR__5302
33aed     22          | 	byte	34
33aee     00          | 	byte	0
33aef                 | LR__5303
33aef     65 6C 73 65 | 	byte	"else"
33af3     00          | 	byte	0
33af4                 | LR__5304
33af4     74 68 65 6E | 	byte	"then"
33af8     00          | 	byte	0
33af9                 | LR__5305
33af9     2E          | 	byte	"."
33afa     00          | 	byte	0
33afb                 | LR__5306
33afb     3F          | 	byte	"?"
33afc     00          | 	byte	0
33afd                 | LR__5307
33afd     3F          | 	byte	"?"
33afe     00          | 	byte	0
33aff                 | LR__5308
33aff     6D 6F 75 73 
33b03     65          | 	byte	"mouse"
33b04     00          | 	byte	0
33b05                 | LR__5309
33b05     63 75 72 73 
33b09     6F 72       | 	byte	"cursor"
33b0b     00          | 	byte	0
33b0c                 | LR__5310
33b0c     63 6C 69 63 
33b10     6B          | 	byte	"click"
33b11     00          | 	byte	0
33b12                 | LR__5311
33b12     6F 6E       | 	byte	"on"
33b14     00          | 	byte	0
33b15                 | LR__5312
33b15     31          | 	byte	"1"
33b16     00          | 	byte	0
33b17                 | LR__5313
33b17     6F 66 66    | 	byte	"off"
33b1a     00          | 	byte	0
33b1b                 | LR__5314
33b1b     30          | 	byte	"0"
33b1c     00          | 	byte	0
33b1d                 | LR__5315
33b1d     6D 6F 64 65 | 	byte	"mode"
33b21     00          | 	byte	0
33b22                 | LR__5316
33b22     6D 2E       | 	byte	"m."
33b24     00          | 	byte	0
33b25                 | LR__5317
33b25     61 74 61 72 
33b29     69          | 	byte	"atari"
33b2a     00          | 	byte	0
33b2b                 | LR__5318
33b2b     30          | 	byte	"0"
33b2c     00          | 	byte	0
33b2d                 | LR__5319
33b2d     70 63 5F 61 
33b31     6D 62 65 72 | 	byte	"pc_amber"
33b35     00          | 	byte	0
33b36                 | LR__5320
33b36     31          | 	byte	"1"
33b37     00          | 	byte	0
33b38                 | LR__5321
33b38     70 63 5F 67 
33b3c     72 65 65 6E | 	byte	"pc_green"
33b40     00          | 	byte	0
33b41                 | LR__5322
33b41     32          | 	byte	"2"
33b42     00          | 	byte	0
33b43                 | LR__5323
33b43     70 63 5F 77 
33b47     68 69 74 65 | 	byte	"pc_white"
33b4b     00          | 	byte	0
33b4c                 | LR__5324
33b4c     33          | 	byte	"3"
33b4d     00          | 	byte	0
33b4e                 | LR__5325
33b4e     73 74       | 	byte	"st"
33b50     00          | 	byte	0
33b51                 | LR__5326
33b51     34          | 	byte	"4"
33b52     00          | 	byte	0
33b53                 | LR__5327
33b53                 | 	byte	
33b53     00          | 	byte	0
33b54                 | LR__5328
33b54     6C 6F 61 64 | 	byte	"load"
33b58     00          | 	byte	0
33b59                 | LR__5329
33b59     73 61 76 65 | 	byte	"save"
33b5d     00          | 	byte	0
33b5e                 | LR__5330
33b5e     62 72 75 6E | 	byte	"brun"
33b62     00          | 	byte	0
33b63                 | LR__5331
33b63     72 75 6E    | 	byte	"run"
33b66     00          | 	byte	0
33b67                 | LR__5332
33b67     6C 6F 2E    | 	byte	"lo."
33b6a     00          | 	byte	0
33b6b                 | LR__5333
33b6b     73 2E       | 	byte	"s."
33b6d     00          | 	byte	0
33b6e                 | LR__5334
33b6e     62 72 2E    | 	byte	"br."
33b71     00          | 	byte	0
33b72                 | LR__5335
33b72     65 6E 74 65 
33b76     72          | 	byte	"enter"
33b77     00          | 	byte	0
33b78                 | LR__5336
33b78     65 2E       | 	byte	"e."
33b7a     00          | 	byte	0
33b7b                 | LR__5337
33b7b     64 65 6C 65 
33b7f     74 65       | 	byte	"delete"
33b81     00          | 	byte	0
33b82                 | LR__5338
33b82     6D 6B 64 69 
33b86     72          | 	byte	"mkdir"
33b87     00          | 	byte	0
33b88                 | LR__5339
33b88     63 64       | 	byte	"cd"
33b8a     00          | 	byte	0
33b8b                 | LR__5340
33b8b     63 64 2E    | 	byte	"cd."
33b8e     00          | 	byte	0
33b8f                 | LR__5341
33b8f     2E          | 	byte	"."
33b90     00          | 	byte	0
33b91                 | LR__5342
33b91     2E 2E       | 	byte	".."
33b93     00          | 	byte	0
33b94                 | LR__5343
33b94     63 64       | 	byte	"cd"
33b96     00          | 	byte	0
33b97                 | LR__5344
33b97     2F          | 	byte	"/"
33b98     00          | 	byte	0
33b99                 | LR__5345
33b99                 | 	byte	
33b99     00          | 	byte	0
33b9a                 | LR__5346
33b9a                 | 	byte	
33b9a     00          | 	byte	0
33b9b                 | LR__5347
33b9b                 | 	byte	
33b9b     00          | 	byte	0
33b9c                 | LR__5348
33b9c                 | 	byte	
33b9c     00          | 	byte	0
33b9d                 | LR__5349
33b9d                 | 	byte	
33b9d     00          | 	byte	0
33b9e                 | LR__5350
33b9e     52 65 61 64 
33ba2     79          | 	byte	"Ready"
33ba3     00          | 	byte	0
33ba4                 | LR__5351
33ba4     2B          | 	byte	"+"
33ba5     00          | 	byte	0
33ba6                 | LR__5352
33ba6     2D          | 	byte	"-"
33ba7     00          | 	byte	0
33ba8                 | LR__5353
33ba8     6F 72       | 	byte	"or"
33baa     00          | 	byte	0
33bab                 | LR__5354
33bab     78 6F 72    | 	byte	"xor"
33bae     00          | 	byte	0
33baf                 | LR__5355
33baf     2A          | 	byte	"*"
33bb0     00          | 	byte	0
33bb1                 | LR__5356
33bb1     2F          | 	byte	"/"
33bb2     00          | 	byte	0
33bb3                 | LR__5357
33bb3     61 6E 64    | 	byte	"and"
33bb6     00          | 	byte	0
33bb7                 | LR__5358
33bb7     64 69 76    | 	byte	"div"
33bba     00          | 	byte	0
33bbb                 | LR__5359
33bbb     6D 6F 64    | 	byte	"mod"
33bbe     00          | 	byte	0
33bbf                 | LR__5360
33bbf     73 68 6C    | 	byte	"shl"
33bc2     00          | 	byte	0
33bc3                 | LR__5361
33bc3     73 68 72    | 	byte	"shr"
33bc6     00          | 	byte	0
33bc7                 | LR__5362
33bc7     5E          | 	byte	"^"
33bc8     00          | 	byte	0
33bc9                 | LR__5363
33bc9     6E 6F 74    | 	byte	"not"
33bcc     00          | 	byte	0
33bcd                 | LR__5364
33bcd     40          | 	byte	"@"
33bce     00          | 	byte	0
33bcf                 | LR__5365
33bcf     3D          | 	byte	"="
33bd0     00          | 	byte	0
33bd1                 | LR__5366
33bd1     3E 3D       | 	byte	">="
33bd3     00          | 	byte	0
33bd4                 | LR__5367
33bd4     3C 3D       | 	byte	"<="
33bd6     00          | 	byte	0
33bd7                 | LR__5368
33bd7     3C          | 	byte	"<"
33bd8     00          | 	byte	0
33bd9                 | LR__5369
33bd9     3E          | 	byte	">"
33bda     00          | 	byte	0
33bdb                 | LR__5370
33bdb     3C 3E       | 	byte	"<>"
33bdd     00          | 	byte	0
33bde                 | LR__5371
33bde     2B 2B       | 	byte	"++"
33be0     00          | 	byte	0
33be1                 | LR__5372
33be1     2D 2D       | 	byte	"--"
33be3     00          | 	byte	0
33be4                 | LR__5373
33be4     23          | 	byte	"#"
33be5     00          | 	byte	0
33be6                 | LR__5374
33be6     30          | 	byte	"0"
33be7     00          | 	byte	0
33be8                 | LR__5375
33be8     39          | 	byte	"9"
33be9     00          | 	byte	0
33bea                 | LR__5376
33bea     23 72 65 61 
33bee     64          | 	byte	"#read"
33bef     00          | 	byte	0
33bf0                 | LR__5377
33bf0     23 77 72 69 
33bf4     74 65       | 	byte	"#write"
33bf6     00          | 	byte	0
33bf7                 | LR__5378
33bf7     23 61 70 70 
33bfb     65 6E 64    | 	byte	"#append"
33bfe     00          | 	byte	0
33bff                 | LR__5379
33bff     23          | 	byte	"#"
33c00     00          | 	byte	0
33c01                 | LR__5380
33c01     23          | 	byte	"#"
33c02     00          | 	byte	0
33c03                 | LR__5381
33c03     2D          | 	byte	"-"
33c04     00          | 	byte	0
33c05                 | LR__5382
33c05     30          | 	byte	"0"
33c06     00          | 	byte	0
33c07                 | LR__5383
33c07     63          | 	byte	"c"
33c08     00          | 	byte	0
33c09                 | LR__5384
33c09     63 23       | 	byte	"c#"
33c0b     00          | 	byte	0
33c0c                 | LR__5385
33c0c     64          | 	byte	"d"
33c0d     00          | 	byte	0
33c0e                 | LR__5386
33c0e     64 23       | 	byte	"d#"
33c10     00          | 	byte	0
33c11                 | LR__5387
33c11     65          | 	byte	"e"
33c12     00          | 	byte	0
33c13                 | LR__5388
33c13     66          | 	byte	"f"
33c14     00          | 	byte	0
33c15                 | LR__5389
33c15     66 23       | 	byte	"f#"
33c17     00          | 	byte	0
33c18                 | LR__5390
33c18     67          | 	byte	"g"
33c19     00          | 	byte	0
33c1a                 | LR__5391
33c1a     67 23       | 	byte	"g#"
33c1c     00          | 	byte	0
33c1d                 | LR__5392
33c1d     61          | 	byte	"a"
33c1e     00          | 	byte	0
33c1f                 | LR__5393
33c1f     61 23       | 	byte	"a#"
33c21     00          | 	byte	0
33c22                 | LR__5394
33c22     68          | 	byte	"h"
33c23     00          | 	byte	0
33c24                 | LR__5395
33c24     62          | 	byte	"b"
33c25     00          | 	byte	0
33c26                 | LR__5396
33c26     2B          | 	byte	"+"
33c27     00          | 	byte	0
33c28                 | LR__5397
33c28     2D          | 	byte	"-"
33c29     00          | 	byte	0
33c2a                 | LR__5398
33c2a     3D          | 	byte	"="
33c2b     00          | 	byte	0
33c2c                 | LR__5399
33c2c     2C          | 	byte	","
33c2d     00          | 	byte	0
33c2e                 | LR__5400
33c2e     2A          | 	byte	"*"
33c2f     00          | 	byte	0
33c30                 | LR__5401
33c30     2F          | 	byte	"/"
33c31     00          | 	byte	0
33c32                 | LR__5402
33c32     3B          | 	byte	";"
33c33     00          | 	byte	0
33c34                 | LR__5403
33c34     22          | 	byte	34
33c35     00          | 	byte	0
33c36                 | LR__5404
33c36     5E          | 	byte	"^"
33c37     00          | 	byte	0
33c38                 | LR__5405
33c38     29          | 	byte	")"
33c39     00          | 	byte	0
33c3a                 | LR__5406
33c3a     28          | 	byte	"("
33c3b     00          | 	byte	0
33c3c                 | LR__5407
33c3c     3A          | 	byte	":"
33c3d     00          | 	byte	0
33c3e                 | LR__5408
33c3e     20          | 	byte	" "
33c3f     00          | 	byte	0
33c40                 | LR__5409
33c40     3E          | 	byte	">"
33c41     00          | 	byte	0
33c42                 | LR__5410
33c42     3C          | 	byte	"<"
33c43     00          | 	byte	0
33c44                 | LR__5411
33c44     3D          | 	byte	"="
33c45     00          | 	byte	0
33c46                 | LR__5412
33c46     62 65 65 70 | 	byte	"beep"
33c4a     00          | 	byte	0
33c4b                 | LR__5413
33c4b     62 2E       | 	byte	"b."
33c4d     00          | 	byte	0
33c4e                 | LR__5414
33c4e     62 6C 69 74 | 	byte	"blit"
33c52     00          | 	byte	0
33c53                 | LR__5415
33c53     62 6F 78    | 	byte	"box"
33c56     00          | 	byte	0
33c57                 | LR__5416
33c57     62 72 75 6E | 	byte	"brun"
33c5b     00          | 	byte	0
33c5c                 | LR__5417
33c5c     62 72 2E    | 	byte	"br."
33c5f     00          | 	byte	0
33c60                 | LR__5418
33c60     63 64       | 	byte	"cd"
33c62     00          | 	byte	0
33c63                 | LR__5419
33c63     63 68 61 6E 
33c67     67 65 66 72 
33c6b     65 71       | 	byte	"changefreq"
33c6d     00          | 	byte	0
33c6e                 | LR__5420
33c6e     63 66 2E    | 	byte	"cf."
33c71     00          | 	byte	0
33c72                 | LR__5421
33c72     63 68 61 6E 
33c76     67 65 70 61 
33c7a     6E          | 	byte	"changepan"
33c7b     00          | 	byte	0
33c7c                 | LR__5422
33c7c     63 70 2E    | 	byte	"cp."
33c7f     00          | 	byte	0
33c80                 | LR__5423
33c80     63 68 61 6E 
33c84     67 65 76 6F 
33c88     6C          | 	byte	"changevol"
33c89     00          | 	byte	0
33c8a                 | LR__5424
33c8a     63 76 2E    | 	byte	"cv."
33c8d     00          | 	byte	0
33c8e                 | LR__5425
33c8e     63 68 61 6E 
33c92     67 65 77 61 
33c96     76 65       | 	byte	"changewave"
33c98     00          | 	byte	0
33c99                 | LR__5426
33c99     63 77 2E    | 	byte	"cw."
33c9c     00          | 	byte	0
33c9d                 | LR__5427
33c9d     63 69 72 63 
33ca1     6C 65       | 	byte	"circle"
33ca3     00          | 	byte	0
33ca4                 | LR__5428
33ca4     63 69 2E    | 	byte	"ci."
33ca7     00          | 	byte	0
33ca8                 | LR__5429
33ca8     63 6C 69 63 
33cac     6B          | 	byte	"click"
33cad     00          | 	byte	0
33cae                 | LR__5430
33cae     63 6C 6F 73 
33cb2     65          | 	byte	"close"
33cb3     00          | 	byte	0
33cb4                 | LR__5431
33cb4     63 6C 73    | 	byte	"cls"
33cb7     00          | 	byte	0
33cb8                 | LR__5432
33cb8     63 6F 6C 6F 
33cbc     72          | 	byte	"color"
33cbd     00          | 	byte	0
33cbe                 | LR__5433
33cbe     63 2E       | 	byte	"c."
33cc0     00          | 	byte	0
33cc1                 | LR__5434
33cc1     63 73 61 76 
33cc5     65          | 	byte	"csave"
33cc6     00          | 	byte	0
33cc7                 | LR__5435
33cc7     63 73 2E    | 	byte	"cs."
33cca     00          | 	byte	0
33ccb                 | LR__5436
33ccb     63 75 72 73 
33ccf     6F 72       | 	byte	"cursor"
33cd1     00          | 	byte	0
33cd2                 | LR__5437
33cd2     64 61 74 61 | 	byte	"data"
33cd6     00          | 	byte	0
33cd7                 | LR__5438
33cd7     64 65 66 73 
33cdb     6E 64       | 	byte	"defsnd"
33cdd     00          | 	byte	0
33cde                 | LR__5439
33cde     64 65 66 65 
33ce2     6E 76       | 	byte	"defenv"
33ce4     00          | 	byte	0
33ce5                 | LR__5440
33ce5     64 65 66 73 
33ce9     70 72 69 74 
33ced     65          | 	byte	"defsprite"
33cee     00          | 	byte	0
33cef                 | LR__5441
33cef     64 73 2E    | 	byte	"ds."
33cf2     00          | 	byte	0
33cf3                 | LR__5442
33cf3     64 65 67    | 	byte	"deg"
33cf6     00          | 	byte	0
33cf7                 | LR__5443
33cf7     64 65 6C 65 
33cfb     74 65       | 	byte	"delete"
33cfd     00          | 	byte	0
33cfe                 | LR__5444
33cfe     64 69 6D    | 	byte	"dim"
33d01     00          | 	byte	0
33d02                 | LR__5445
33d02     64 69 72    | 	byte	"dir"
33d05     00          | 	byte	0
33d06                 | LR__5446
33d06     64 70 6F 6B 
33d0a     65          | 	byte	"dpoke"
33d0b     00          | 	byte	0
33d0c                 | LR__5447
33d0c     64 72 61 77 | 	byte	"draw"
33d10     00          | 	byte	0
33d11                 | LR__5448
33d11     64 72 61 77 
33d15     74 6F       | 	byte	"drawto"
33d17     00          | 	byte	0
33d18                 | LR__5449
33d18     64 72 2E    | 	byte	"dr."
33d1b     00          | 	byte	0
33d1c                 | LR__5450
33d1c     65 6C 73 65 | 	byte	"else"
33d20     00          | 	byte	0
33d21                 | LR__5451
33d21     65 6E 64    | 	byte	"end"
33d24     00          | 	byte	0
33d25                 | LR__5452
33d25     65 6E 74 65 
33d29     72          | 	byte	"enter"
33d2a     00          | 	byte	0
33d2b                 | LR__5453
33d2b     65 2E       | 	byte	"e."
33d2d     00          | 	byte	0
33d2e                 | LR__5454
33d2e     66 63 69 72 
33d32     63 6C 65    | 	byte	"fcircle"
33d35     00          | 	byte	0
33d36                 | LR__5455
33d36     66 63 2E    | 	byte	"fc."
33d39     00          | 	byte	0
33d3a                 | LR__5456
33d3a     66 69 6C 6C | 	byte	"fill"
33d3e     00          | 	byte	0
33d3f                 | LR__5457
33d3f     66 69 2E    | 	byte	"fi."
33d42     00          | 	byte	0
33d43                 | LR__5458
33d43     66 6F 6E 74 | 	byte	"font"
33d47     00          | 	byte	0
33d48                 | LR__5459
33d48     66 6F 72    | 	byte	"for"
33d4b     00          | 	byte	0
33d4c                 | LR__5460
33d4c     66 2E       | 	byte	"f."
33d4e     00          | 	byte	0
33d4f                 | LR__5461
33d4f     66 72 61 6D 
33d53     65          | 	byte	"frame"
33d54     00          | 	byte	0
33d55                 | LR__5462
33d55     66 72 2E    | 	byte	"fr."
33d58     00          | 	byte	0
33d59                 | LR__5463
33d59     67 65 74    | 	byte	"get"
33d5c     00          | 	byte	0
33d5d                 | LR__5464
33d5d     67 6F 73 75 
33d61     62          | 	byte	"gosub"
33d62     00          | 	byte	0
33d63                 | LR__5465
33d63     67 6F 74 6F | 	byte	"goto"
33d67     00          | 	byte	0
33d68                 | LR__5466
33d68     67 2E       | 	byte	"g."
33d6a     00          | 	byte	0
33d6b                 | LR__5467
33d6b     69 66       | 	byte	"if"
33d6d     00          | 	byte	0
33d6e                 | LR__5468
33d6e     69 6E 6B    | 	byte	"ink"
33d71     00          | 	byte	0
33d72                 | LR__5469
33d72     69 2E       | 	byte	"i."
33d74     00          | 	byte	0
33d75                 | LR__5470
33d75     69 6E 70 75 
33d79     74          | 	byte	"input"
33d7a     00          | 	byte	0
33d7b                 | LR__5471
33d7b     6C 69 73 74 | 	byte	"list"
33d7f     00          | 	byte	0
33d80                 | LR__5472
33d80     6C 2E       | 	byte	"l."
33d82     00          | 	byte	0
33d83                 | LR__5473
33d83     6C 6F 61 64 | 	byte	"load"
33d87     00          | 	byte	0
33d88                 | LR__5474
33d88     6C 6F 2E    | 	byte	"lo."
33d8b     00          | 	byte	0
33d8c                 | LR__5475
33d8c     6C 70 6F 6B 
33d90     65          | 	byte	"lpoke"
33d91     00          | 	byte	0
33d92                 | LR__5476
33d92     6D 6B 64 69 
33d96     72          | 	byte	"mkdir"
33d97     00          | 	byte	0
33d98                 | LR__5477
33d98     6D 6F 64 65 | 	byte	"mode"
33d9c     00          | 	byte	0
33d9d                 | LR__5478
33d9d     6D 2E       | 	byte	"m."
33d9f     00          | 	byte	0
33da0                 | LR__5479
33da0     6D 6F 75 73 
33da4     65          | 	byte	"mouse"
33da5     00          | 	byte	0
33da6                 | LR__5480
33da6     6E 65 77    | 	byte	"new"
33da9     00          | 	byte	0
33daa                 | LR__5481
33daa     6E 65 78 74 | 	byte	"next"
33dae     00          | 	byte	0
33daf                 | LR__5482
33daf     6E 2E       | 	byte	"n."
33db1     00          | 	byte	0
33db2                 | LR__5483
33db2     6F 6E       | 	byte	"on"
33db4     00          | 	byte	0
33db5                 | LR__5484
33db5     6F 70 65 6E | 	byte	"open"
33db9     00          | 	byte	0
33dba                 | LR__5485
33dba     70 61 70 65 
33dbe     72          | 	byte	"paper"
33dbf     00          | 	byte	0
33dc0                 | LR__5486
33dc0     70 61 2E    | 	byte	"pa."
33dc3     00          | 	byte	0
33dc4                 | LR__5487
33dc4     70 69 6E 66 
33dc8     6C 6F 61 74 | 	byte	"pinfloat"
33dcc     00          | 	byte	0
33dcd                 | LR__5488
33dcd     70 69 6E 68 
33dd1     69          | 	byte	"pinhi"
33dd2     00          | 	byte	0
33dd3                 | LR__5489
33dd3     70 69 6E 6C 
33dd7     6F          | 	byte	"pinlo"
33dd8     00          | 	byte	0
33dd9                 | LR__5490
33dd9     70 69 6E 73 
33ddd     74 61 72 74 | 	byte	"pinstart"
33de1     00          | 	byte	0
33de2                 | LR__5491
33de2     70 69 6E 74 
33de6     6F 67 67 6C 
33dea     65          | 	byte	"pintoggle"
33deb     00          | 	byte	0
33dec                 | LR__5492
33dec     70 69 6E 77 
33df0     72 69 74 65 | 	byte	"pinwrite"
33df4     00          | 	byte	0
33df5                 | LR__5493
33df5     70 6C 61 79 | 	byte	"play"
33df9     00          | 	byte	0
33dfa                 | LR__5494
33dfa     70 2E       | 	byte	"p."
33dfc     00          | 	byte	0
33dfd                 | LR__5495
33dfd     70 6C 6F 74 | 	byte	"plot"
33e01     00          | 	byte	0
33e02                 | LR__5496
33e02     70 6C 2E    | 	byte	"pl."
33e05     00          | 	byte	0
33e06                 | LR__5497
33e06     70 6F 6B 65 | 	byte	"poke"
33e0a     00          | 	byte	0
33e0b                 | LR__5498
33e0b     70 6F 70    | 	byte	"pop"
33e0e     00          | 	byte	0
33e0f                 | LR__5499
33e0f     70 6F 73 69 
33e13     74 69 6F 6E | 	byte	"position"
33e17     00          | 	byte	0
33e18                 | LR__5500
33e18     70 6F 73 2E | 	byte	"pos."
33e1c     00          | 	byte	0
33e1d                 | LR__5501
33e1d     70 72 69 6E 
33e21     74          | 	byte	"print"
33e22     00          | 	byte	0
33e23                 | LR__5502
33e23     3F          | 	byte	"?"
33e24     00          | 	byte	0
33e25                 | LR__5503
33e25     70 75 74    | 	byte	"put"
33e28     00          | 	byte	0
33e29                 | LR__5504
33e29     72 61 64    | 	byte	"rad"
33e2c     00          | 	byte	0
33e2d                 | LR__5505
33e2d     72 65 61 64 | 	byte	"read"
33e31     00          | 	byte	0
33e32                 | LR__5506
33e32     72 65 6C 65 
33e36     61 73 65    | 	byte	"release"
33e39     00          | 	byte	0
33e3a                 | LR__5507
33e3a     72 65 6D    | 	byte	"rem"
33e3d     00          | 	byte	0
33e3e                 | LR__5508
33e3e     27          | 	byte	"'"
33e3f     00          | 	byte	0
33e40                 | LR__5509
33e40     72 65 73 74 
33e44     6F 72 65    | 	byte	"restore"
33e47     00          | 	byte	0
33e48                 | LR__5510
33e48     72 65 74 75 
33e4c     72 6E       | 	byte	"return"
33e4e     00          | 	byte	0
33e4f                 | LR__5511
33e4f     72 75 6E    | 	byte	"run"
33e52     00          | 	byte	0
33e53                 | LR__5512
33e53     73 61 76 65 | 	byte	"save"
33e57     00          | 	byte	0
33e58                 | LR__5513
33e58     73 2E       | 	byte	"s."
33e5a     00          | 	byte	0
33e5b                 | LR__5514
33e5b     73 65 74 64 
33e5f     65 6C 61 79 | 	byte	"setdelay"
33e63     00          | 	byte	0
33e64                 | LR__5515
33e64     73 64 2E    | 	byte	"sd."
33e67     00          | 	byte	0
33e68                 | LR__5516
33e68     73 65 74 65 
33e6c     6E 76       | 	byte	"setenv"
33e6e     00          | 	byte	0
33e6f                 | LR__5517
33e6f     73 65 2E    | 	byte	"se."
33e72     00          | 	byte	0
33e73                 | LR__5518
33e73     73 65 74 6C 
33e77     65 6E       | 	byte	"setlen"
33e79     00          | 	byte	0
33e7a                 | LR__5519
33e7a     73 6C 2E    | 	byte	"sl."
33e7d     00          | 	byte	0
33e7e                 | LR__5520
33e7e     73 65 74 70 
33e82     61 6E       | 	byte	"setpan"
33e84     00          | 	byte	0
33e85                 | LR__5521
33e85     73 70 2E    | 	byte	"sp."
33e88     00          | 	byte	0
33e89                 | LR__5522
33e89     73 65 74 73 
33e8d     75 73 74 61 
33e91     69 6E       | 	byte	"setsustain"
33e93     00          | 	byte	0
33e94                 | LR__5523
33e94     73 73 2E    | 	byte	"ss."
33e97     00          | 	byte	0
33e98                 | LR__5524
33e98     73 65 74 76 
33e9c     6F 6C       | 	byte	"setvol"
33e9e     00          | 	byte	0
33e9f                 | LR__5525
33e9f     73 76 2E    | 	byte	"sv."
33ea2     00          | 	byte	0
33ea3                 | LR__5526
33ea3     73 65 74 77 
33ea7     61 76 65    | 	byte	"setwave"
33eaa     00          | 	byte	0
33eab                 | LR__5527
33eab     73 77 2E    | 	byte	"sw."
33eae     00          | 	byte	0
33eaf                 | LR__5528
33eaf     73 65 74 77 
33eb3     61 76       | 	byte	"setwav"
33eb5     00          | 	byte	0
33eb6                 | LR__5529
33eb6     73 68 75 74 
33eba     75 70       | 	byte	"shutup"
33ebc     00          | 	byte	0
33ebd                 | LR__5530
33ebd     73 68 2E    | 	byte	"sh."
33ec0     00          | 	byte	0
33ec1                 | LR__5531
33ec1     73 6F 75 6E 
33ec5     64          | 	byte	"sound"
33ec6     00          | 	byte	0
33ec7                 | LR__5532
33ec7     73 6F 2E    | 	byte	"so."
33eca     00          | 	byte	0
33ecb                 | LR__5533
33ecb     73 70 72 69 
33ecf     74 65       | 	byte	"sprite"
33ed1     00          | 	byte	0
33ed2                 | LR__5534
33ed2     73 70 72 2E | 	byte	"spr."
33ed6     00          | 	byte	0
33ed7                 | LR__5535
33ed7     74 68 65 6E | 	byte	"then"
33edb     00          | 	byte	0
33edc                 | LR__5536
33edc     77 61 69 74 
33ee0     6D 73       | 	byte	"waitms"
33ee2     00          | 	byte	0
33ee3                 | LR__5537
33ee3     77 2E       | 	byte	"w."
33ee5     00          | 	byte	0
33ee6                 | LR__5538
33ee6     77 61 69 74 
33eea     63 6C 6F 63 
33eee     6B          | 	byte	"waitclock"
33eef     00          | 	byte	0
33ef0                 | LR__5539
33ef0     77 63 2E    | 	byte	"wc."
33ef3     00          | 	byte	0
33ef4                 | LR__5540
33ef4     77 61 69 74 
33ef8     76 62 6C    | 	byte	"waitvbl"
33efb     00          | 	byte	0
33efc                 | LR__5541
33efc     77 76 2E    | 	byte	"wv."
33eff     00          | 	byte	0
33f00                 | LR__5542
33f00     77 72 70 69 
33f04     6E          | 	byte	"wrpin"
33f05     00          | 	byte	0
33f06                 | LR__5543
33f06     77 78 70 69 
33f0a     6E          | 	byte	"wxpin"
33f0b     00          | 	byte	0
33f0c                 | LR__5544
33f0c     77 79 70 69 
33f10     6E          | 	byte	"wypin"
33f11     00          | 	byte	0
33f12                 | LR__5545
33f12     61 62 73    | 	byte	"abs"
33f15     00          | 	byte	0
33f16                 | LR__5546
33f16     61 63 6F 73 | 	byte	"acos"
33f1a     00          | 	byte	0
33f1b                 | LR__5547
33f1b     61 64 72    | 	byte	"adr"
33f1e     00          | 	byte	0
33f1f                 | LR__5548
33f1f     61 64 64 72 | 	byte	"addr"
33f23     00          | 	byte	0
33f24                 | LR__5549
33f24     61 73 63    | 	byte	"asc"
33f27     00          | 	byte	0
33f28                 | LR__5550
33f28     61 73 69 6E | 	byte	"asin"
33f2c     00          | 	byte	0
33f2d                 | LR__5551
33f2d     61 74 6E    | 	byte	"atn"
33f30     00          | 	byte	0
33f31                 | LR__5552
33f31     62 69 6E 24 | 	byte	"bin$"
33f35     00          | 	byte	0
33f36                 | LR__5553
33f36     63 68 72 24 | 	byte	"chr$"
33f3a     00          | 	byte	0
33f3b                 | LR__5554
33f3b     63 6F 73    | 	byte	"cos"
33f3e     00          | 	byte	0
33f3f                 | LR__5555
33f3f     64 70 65 65 
33f43     6B          | 	byte	"dpeek"
33f44     00          | 	byte	0
33f45                 | LR__5556
33f45     66 72 61 6D 
33f49     65 62 75 66 | 	byte	"framebuf"
33f4d     00          | 	byte	0
33f4e                 | LR__5557
33f4e     66 62 2E    | 	byte	"fb."
33f51     00          | 	byte	0
33f52                 | LR__5558
33f52     66 72 65    | 	byte	"fre"
33f55     00          | 	byte	0
33f56                 | LR__5559
33f56     67 65 74 70 
33f5a     69 78 65 6C | 	byte	"getpixel"
33f5e     00          | 	byte	0
33f5f                 | LR__5560
33f5f     67 65 2E    | 	byte	"ge."
33f62     00          | 	byte	0
33f63                 | LR__5561
33f63     67 65 74 65 
33f67     6E 76 73 75 
33f6b     73 74 61 69 
33f6f     6E          | 	byte	"getenvsustain"
33f70     00          | 	byte	0
33f71                 | LR__5562
33f71     67 65 74 6E 
33f75     6F 74 65 76 
33f79     61 6C 75 65 | 	byte	"getnotevalue"
33f7d     00          | 	byte	0
33f7e                 | LR__5563
33f7e     67 65 74 74 
33f82     69 6D 65    | 	byte	"gettime"
33f85     00          | 	byte	0
33f86                 | LR__5564
33f86     68 65 78 24 | 	byte	"hex$"
33f8a     00          | 	byte	0
33f8b                 | LR__5565
33f8b     69 6E 6B 65 
33f8f     79 24       | 	byte	"inkey$"
33f91     00          | 	byte	0
33f92                 | LR__5566
33f92     69 6E 74    | 	byte	"int"
33f95     00          | 	byte	0
33f96                 | LR__5567
33f96     6C 65 66 74 
33f9a     24          | 	byte	"left$"
33f9b     00          | 	byte	0
33f9c                 | LR__5568
33f9c     6C 65 6E    | 	byte	"len"
33f9f     00          | 	byte	0
33fa0                 | LR__5569
33fa0     6C 6F 67    | 	byte	"log"
33fa3     00          | 	byte	0
33fa4                 | LR__5570
33fa4     6C 70 65 65 
33fa8     6B          | 	byte	"lpeek"
33fa9     00          | 	byte	0
33faa                 | LR__5571
33faa     6D 69 64 24 | 	byte	"mid$"
33fae     00          | 	byte	0
33faf                 | LR__5572
33faf     6D 6F 75 73 
33fb3     65 6B       | 	byte	"mousek"
33fb5     00          | 	byte	0
33fb6                 | LR__5573
33fb6     6D 6F 75 73 
33fba     65 77       | 	byte	"mousew"
33fbc     00          | 	byte	0
33fbd                 | LR__5574
33fbd     6D 6F 75 73 
33fc1     65 78       | 	byte	"mousex"
33fc3     00          | 	byte	0
33fc4                 | LR__5575
33fc4     6D 6F 75 73 
33fc8     65 79       | 	byte	"mousey"
33fca     00          | 	byte	0
33fcb                 | LR__5576
33fcb     70 65 65 6B | 	byte	"peek"
33fcf     00          | 	byte	0
33fd0                 | LR__5577
33fd0     70 69 6E 72 
33fd4     65 61 64    | 	byte	"pinread"
33fd7     00          | 	byte	0
33fd8                 | LR__5578
33fd8     72 64 70 69 
33fdc     6E          | 	byte	"rdpin"
33fdd     00          | 	byte	0
33fde                 | LR__5579
33fde     72 69 67 68 
33fe2     74 24       | 	byte	"right$"
33fe4     00          | 	byte	0
33fe5                 | LR__5580
33fe5     72 71 70 69 
33fe9     6E          | 	byte	"rqpin"
33fea     00          | 	byte	0
33feb                 | LR__5581
33feb     72 6F 75 6E 
33fef     64          | 	byte	"round"
33ff0     00          | 	byte	0
33ff1                 | LR__5582
33ff1     72 6E 64    | 	byte	"rnd"
33ff4     00          | 	byte	0
33ff5                 | LR__5583
33ff5     73 69 6E    | 	byte	"sin"
33ff8     00          | 	byte	0
33ff9                 | LR__5584
33ff9     73 71 72    | 	byte	"sqr"
33ffc     00          | 	byte	0
33ffd                 | LR__5585
33ffd     73 74 69 63 
34001     6B          | 	byte	"stick"
34002     00          | 	byte	0
34003                 | LR__5586
34003     73 74 72 69 
34007     67          | 	byte	"strig"
34008     00          | 	byte	0
34009                 | LR__5587
34009     73 74 72 24 | 	byte	"str$"
3400d     00          | 	byte	0
3400e                 | LR__5588
3400e     74 61 6E    | 	byte	"tan"
34011     00          | 	byte	0
34012                 | LR__5589
34012     76 61 6C    | 	byte	"val"
34015     00          | 	byte	0
34016                 | LR__5590
34016     76 61 72 70 
3401a     74 72       | 	byte	"varptr"
3401c     00          | 	byte	0
3401d                 | LR__5591
3401d     61          | 	byte	"a"
3401e     00          | 	byte	0
3401f                 | LR__5592
3401f     7A          | 	byte	"z"
34020     00          | 	byte	0
34021                 | LR__5593
34021     5F          | 	byte	"_"
34022     00          | 	byte	0
34023                 | LR__5594
34023     61          | 	byte	"a"
34024     00          | 	byte	0
34025                 | LR__5595
34025     7A          | 	byte	"z"
34026     00          | 	byte	0
34027                 | LR__5596
34027     30          | 	byte	"0"
34028     00          | 	byte	0
34029                 | LR__5597
34029     39          | 	byte	"9"
3402a     00          | 	byte	0
3402b                 | LR__5598
3402b     5F          | 	byte	"_"
3402c     00          | 	byte	0
3402d                 | LR__5599
3402d     2E          | 	byte	"."
3402e     00          | 	byte	0
3402f                 | LR__5600
3402f     61          | 	byte	"a"
34030     00          | 	byte	0
34031                 | LR__5601
34031     7A          | 	byte	"z"
34032     00          | 	byte	0
34033                 | LR__5602
34033     30          | 	byte	"0"
34034     00          | 	byte	0
34035                 | LR__5603
34035     39          | 	byte	"9"
34036     00          | 	byte	0
34037                 | LR__5604
34037     5F          | 	byte	"_"
34038     00          | 	byte	0
34039                 | LR__5605
34039     24          | 	byte	"$"
3403a     00          | 	byte	0
3403b                 | LR__5606
3403b     25          | 	byte	"%"
3403c     00          | 	byte	0
3403d                 | LR__5607
3403d     21          | 	byte	"!"
3403e     00          | 	byte	0
3403f                 | LR__5608
3403f     30          | 	byte	"0"
34040     00          | 	byte	0
34041                 | LR__5609
34041     39          | 	byte	"9"
34042     00          | 	byte	0
34043                 | LR__5610
34043     2E          | 	byte	"."
34044     00          | 	byte	0
34045                 | LR__5611
34045     24          | 	byte	"$"
34046     00          | 	byte	0
34047                 | LR__5612
34047     25          | 	byte	"%"
34048     00          | 	byte	0
34049                 | LR__5613
34049     2D          | 	byte	"-"
3404a     00          | 	byte	0
3404b                 | LR__5614
3404b     2E          | 	byte	"."
3404c     00          | 	byte	0
3404d                 | LR__5615
3404d     24          | 	byte	"$"
3404e     00          | 	byte	0
3404f                 | LR__5616
3404f     25          | 	byte	"%"
34050     00          | 	byte	0
34051                 | LR__5617
34051     30          | 	byte	"0"
34052     00          | 	byte	0
34053                 | LR__5618
34053     39          | 	byte	"9"
34054     00          | 	byte	0
34055                 | LR__5619
34055     5F          | 	byte	"_"
34056     00          | 	byte	0
34057                 | LR__5620
34057     2E          | 	byte	"."
34058     00          | 	byte	0
34059                 | LR__5621
34059     45          | 	byte	"E"
3405a     00          | 	byte	0
3405b                 | LR__5622
3405b     65          | 	byte	"e"
3405c     00          | 	byte	0
3405d                 | LR__5623
3405d     2D          | 	byte	"-"
3405e     00          | 	byte	0
3405f                 | LR__5624
3405f     61          | 	byte	"a"
34060     00          | 	byte	0
34061                 | LR__5625
34061     66          | 	byte	"f"
34062     00          | 	byte	0
34063                 | LR__5626
34063     30          | 	byte	"0"
34064     00          | 	byte	0
34065                 | LR__5627
34065     31          | 	byte	"1"
34066     00          | 	byte	0
34067                 | LR__5628
34067     5F          | 	byte	"_"
34068     00          | 	byte	0
34069                 | LR__5629
34069     2D          | 	byte	"-"
3406a     00          | 	byte	0
3406b                 | LR__5630
3406b     65          | 	byte	"e"
3406c     00          | 	byte	0
3406d                 | LR__5631
3406d     2E          | 	byte	"."
3406e     00          | 	byte	0
3406f                 | LR__5632
3406f     45          | 	byte	"E"
34070     00          | 	byte	0
34071                 | LR__5633
34071     65          | 	byte	"e"
34072     00          | 	byte	0
34073                 | LR__5634
34073     30          | 	byte	"0"
34074     00          | 	byte	0
34075                 | LR__5635
34075     39          | 	byte	"9"
34076     00          | 	byte	0
34077                 | LR__5636
34077     24          | 	byte	"$"
34078     00          | 	byte	0
34079                 | LR__5637
34079     25          | 	byte	"%"
3407a     00          | 	byte	0
3407b                 | LR__5638
3407b     2D          | 	byte	"-"
3407c     00          | 	byte	0
3407d                 | LR__5639
3407d     24          | 	byte	"$"
3407e     00          | 	byte	0
3407f                 | LR__5640
3407f     25          | 	byte	"%"
34080     00          | 	byte	0
34081                 | LR__5641
34081     30          | 	byte	"0"
34082     00          | 	byte	0
34083                 | LR__5642
34083     39          | 	byte	"9"
34084     00          | 	byte	0
34085                 | LR__5643
34085     5F          | 	byte	"_"
34086     00          | 	byte	0
34087                 | LR__5644
34087     30          | 	byte	"0"
34088     00          | 	byte	0
34089                 | LR__5645
34089     39          | 	byte	"9"
3408a     00          | 	byte	0
3408b                 | LR__5646
3408b     61          | 	byte	"a"
3408c     00          | 	byte	0
3408d                 | LR__5647
3408d     66          | 	byte	"f"
3408e     00          | 	byte	0
3408f                 | LR__5648
3408f     5F          | 	byte	"_"
34090     00          | 	byte	0
34091                 | LR__5649
34091     30          | 	byte	"0"
34092     00          | 	byte	0
34093                 | LR__5650
34093     31          | 	byte	"1"
34094     00          | 	byte	0
34095                 | LR__5651
34095     5F          | 	byte	"_"
34096     00          | 	byte	0
34097                 | LR__5652
34097     30          | 	byte	"0"
34098     00          | 	byte	0
34099                 | LR__5653
34099     39          | 	byte	"9"
3409a     00          | 	byte	0
3409b                 | LR__5654
3409b     5F          | 	byte	"_"
3409c     00          | 	byte	0
3409d                 | LR__5655
3409d     22          | 	byte	34
3409e     00          | 	byte	0
3409f                 | LR__5656
3409f     22          | 	byte	34
340a0     00          | 	byte	0
340a1                 | LR__5657
340a1     44 69 6D 3A 
340a5     20 61 74 20 
340a9     6C 69 6E 65 
340ad     20          | 	byte	"Dim: at line "
340ae     00          | 	byte	0
340af                 | LR__5658
340af     3A 20 77 61 
340b3     72 6E 69 6E 
340b7     67 3A 20 74 
340bb     68 65 20 76 
340bf     61 72 69 61 
340c3     62 6C 65 20 
340c7     65 78 69 73 
340cb     74 65 64 2E | 	byte	": warning: the variable existed."
340cf     00          | 	byte	0
340d0                 | LR__5659
340d0     28          | 	byte	"("
340d1     00          | 	byte	0
340d2                 | LR__5660
340d2     61 73       | 	byte	"as"
340d4     00          | 	byte	0
340d5                 | LR__5661
340d5     61 73       | 	byte	"as"
340d7     00          | 	byte	0
340d8                 | LR__5662
340d8     2C          | 	byte	","
340d9     00          | 	byte	0
340da                 | LR__5663
340da     29          | 	byte	")"
340db     00          | 	byte	0
340dc                 | LR__5664
340dc     29          | 	byte	")"
340dd     00          | 	byte	0
340de                 | LR__5665
340de     61 73       | 	byte	"as"
340e0     00          | 	byte	0
340e1                 | LR__5666
340e1     62 79 74 65 | 	byte	"byte"
340e5     00          | 	byte	0
340e6                 | LR__5667
340e6     75 62 79 74 
340ea     65          | 	byte	"ubyte"
340eb     00          | 	byte	0
340ec                 | LR__5668
340ec     73 68 6F 72 
340f0     74          | 	byte	"short"
340f1     00          | 	byte	0
340f2                 | LR__5669
340f2     75 73 68 6F 
340f6     72 74       | 	byte	"ushort"
340f8     00          | 	byte	0
340f9                 | LR__5670
340f9     6C 6F 6E 67 | 	byte	"long"
340fd     00          | 	byte	0
340fe                 | LR__5671
340fe     69 6E 74 65 
34102     67 65 72    | 	byte	"integer"
34105     00          | 	byte	0
34106                 | LR__5672
34106     75 6C 6F 6E 
3410a     67          | 	byte	"ulong"
3410b     00          | 	byte	0
3410c                 | LR__5673
3410c     69 6E 74 36 
34110     34          | 	byte	"int64"
34111     00          | 	byte	0
34112                 | LR__5674
34112     75 69 6E 74 
34116     36 34       | 	byte	"uint64"
34118     00          | 	byte	0
34119                 | LR__5675
34119     73 69 6E 67 
3411d     6C 65       | 	byte	"single"
3411f     00          | 	byte	0
34120                 | LR__5676
34120     64 6F 75 62 
34124     6C 65       | 	byte	"double"
34126     00          | 	byte	0
34127                 | LR__5677
34127     73 74 72 69 
3412b     6E 67       | 	byte	"string"
3412d     00          | 	byte	0
3412e                 | LR__5678
3412e     74 6F       | 	byte	"to"
34130     00          | 	byte	0
34131                 | LR__5679
34131     73 74 65 70 | 	byte	"step"
34135     00          | 	byte	0
34136                 | LR__5680
34136     73 2E       | 	byte	"s."
34138     00          | 	byte	0
34139                 | LR__5681
34139     67 6F 74 6F | 	byte	"goto"
3413d     00          | 	byte	0
3413e                 | LR__5682
3413e     67 6F 73 75 
34142     62          | 	byte	"gosub"
34143     00          | 	byte	0
34144                 | LR__5683
34144     24          | 	byte	"$"
34145     00          | 	byte	0
34146                 | LR__5684
34146     26 68       | 	byte	"&h"
34148     00          | 	byte	0
34149                 | LR__5685
34149     25          | 	byte	"%"
3414a     00          | 	byte	0
3414b                 | LR__5686
3414b     26 62       | 	byte	"&b"
3414d     00          | 	byte	0
3414e                 | LR__5687
3414e                 | 	byte	
3414e     00          | 	byte	0
3414f                 | LR__5688
3414f     61 63 6F 73 
34153     3A 20       | 	byte	"acos: "
34155     00          | 	byte	0
34156                 | LR__5689
34156     61 73 63 3A 
3415a     20          | 	byte	"asc: "
3415b     00          | 	byte	0
3415c                 | LR__5690
3415c     61 73 63 3A 
34160     20          | 	byte	"asc: "
34161     00          | 	byte	0
34162                 | LR__5691
34162     61 73 69 6E 
34166     3A 20       | 	byte	"asin: "
34168     00          | 	byte	0
34169                 | LR__5692
34169     61 74 6E 3A 
3416d     20          | 	byte	"atn: "
3416e     00          | 	byte	0
3416f                 | LR__5693
3416f     62 6C 69 74 
34173     3A 20       | 	byte	"blit: "
34175     00          | 	byte	0
34176                 | LR__5694
34176     62 69 6E 24 
3417a     3A 20       | 	byte	"bin$: "
3417c     00          | 	byte	0
3417d                 | LR__5695
3417d     2F          | 	byte	"/"
3417e     00          | 	byte	0
3417f                 | LR__5696
3417f     2F 73 64 2F 
34183     62 69 6E 2F | 	byte	"/sd/bin/"
34187     00          | 	byte	0
34188                 | LR__5697
34188     53 79 73 74 
3418c     65 6D 20 65 
34190     72 72 6F 72 
34194     20          | 	byte	"System error "
34195     00          | 	byte	0
34196                 | LR__5698
34196     3A 20       | 	byte	": "
34198     00          | 	byte	0
34199                 | LR__5699
34199     2A          | 	byte	"*"
3419a     00          | 	byte	0
3419b                 | LR__5700
3419b     2E 2E       | 	byte	".."
3419d     00          | 	byte	0
3419e                 | LR__5701
3419e     2F          | 	byte	"/"
3419f     00          | 	byte	0
341a0                 | LR__5702
341a0     2F          | 	byte	"/"
341a1     00          | 	byte	0
341a2                 | LR__5703
341a2     53 79 73 74 
341a6     65 6D 20 65 
341aa     72 72 6F 72 
341ae     20          | 	byte	"System error "
341af     00          | 	byte	0
341b0                 | LR__5704
341b0     3A 20       | 	byte	": "
341b2     00          | 	byte	0
341b3                 | LR__5705
341b3     43 75 72 72 
341b7     65 6E 74 20 
341bb     64 69 72 65 
341bf     63 74 6F 72 
341c3     79 3A 20    | 	byte	"Current directory: "
341c6     00          | 	byte	0
341c7                 | LR__5706
341c7     2F          | 	byte	"/"
341c8     00          | 	byte	0
341c9                 | LR__5707
341c9     53 79 73 74 
341cd     65 6D 20 65 
341d1     72 72 6F 72 
341d5     20          | 	byte	"System error "
341d6     00          | 	byte	0
341d7                 | LR__5708
341d7     3A 20       | 	byte	": "
341d9     00          | 	byte	0
341da                 | LR__5709
341da     43 75 72 72 
341de     65 6E 74 20 
341e2     64 69 72 65 
341e6     63 74 6F 72 
341ea     79 3A 20    | 	byte	"Current directory: "
341ed     00          | 	byte	0
341ee                 | LR__5710
341ee     2F          | 	byte	"/"
341ef     00          | 	byte	0
341f0                 | LR__5711
341f0     2F          | 	byte	"/"
341f1     00          | 	byte	0
341f2                 | LR__5712
341f2     2F          | 	byte	"/"
341f3     00          | 	byte	0
341f4                 | LR__5713
341f4     53 79 73 74 
341f8     65 6D 20 65 
341fc     72 72 6F 72 
34200     20          | 	byte	"System error "
34201     00          | 	byte	0
34202                 | LR__5714
34202     3A 20       | 	byte	": "
34204     00          | 	byte	0
34205                 | LR__5715
34205     43 75 72 72 
34209     65 6E 74 20 
3420d     64 69 72 65 
34211     63 74 6F 72 
34215     79 3A 20    | 	byte	"Current directory: "
34218     00          | 	byte	0
34219                 | LR__5716
34219     63 68 72 24 
3421d     3A 20       | 	byte	"chr$: "
3421f     00          | 	byte	0
34220                 | LR__5717
34220     63 68 61 6E 
34224     6E 65 6C 23 
34228     20 65 78 70 
3422c     65 63 74 65 
34230     64          | 	byte	"channel# expected"
34231     00          | 	byte	0
34232                 | LR__5718
34232     63 6F 73 3A 
34236     20          | 	byte	"cos: "
34237     00          | 	byte	0
34238                 | LR__5719
34238                 | 	byte	
34238     00          | 	byte	0
34239                 | LR__5720
34239                 | 	byte	
34239     00          | 	byte	0
3423a                 | LR__5721
3423a     2F 73 64 2F 
3423e     6D 65 64 69 
34242     61 2F 68 2F | 	byte	"/sd/media/h/"
34246     00          | 	byte	0
34247                 | LR__5722
34247     53 79 73 74 
3424b     65 6D 20 65 
3424f     72 72 6F 72 
34253     20          | 	byte	"System error "
34254     00          | 	byte	0
34255                 | LR__5723
34255     3A 20       | 	byte	": "
34257     00          | 	byte	0
34258                 | LR__5724
34258                 | 	byte	
34258     00          | 	byte	0
34259                 | LR__5725
34259                 | 	byte	
34259     00          | 	byte	0
3425a                 | LR__5726
3425a     2F 73 64 2F 
3425e     6D 65 64 69 
34262     61 2F 73 2F | 	byte	"/sd/media/s/"
34266     00          | 	byte	0
34267                 | LR__5727
34267     53 79 73 74 
3426b     65 6D 20 65 
3426f     72 72 6F 72 
34273     20          | 	byte	"System error "
34274     00          | 	byte	0
34275                 | LR__5728
34275     3A 20       | 	byte	": "
34277     00          | 	byte	0
34278                 | LR__5729
34278     2F          | 	byte	"/"
34279     00          | 	byte	0
3427a                 | LR__5730
3427a     2F          | 	byte	"/"
3427b     00          | 	byte	0
3427c                 | LR__5731
3427c     2F          | 	byte	"/"
3427d     00          | 	byte	0
3427e                 | LR__5732
3427e     43 61 6E 6E 
34282     6F 74 20 64 
34286     65 6C 65 74 
3428a     65 20 66 69 
3428e     6C 65 20 6F 
34292     72 20 66 69 
34296     6C 65 20 64 
3429a     6F 65 73 6E 
3429e     27 74 20 65 
342a2     78 69 73 74 
342a6     3A 20 73 79 
342aa     73 74 65 6D 
342ae     20 65 72 72 
342b2     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
342b5     00          | 	byte	0
342b6                 | LR__5733
342b6     43 75 72 72 
342ba     65 6E 74 20 
342be     64 69 72 65 
342c2     63 74 6F 72 
342c6     79 3A 20    | 	byte	"Current directory: "
342c9     00          | 	byte	0
342ca                 | LR__5734
342ca                 | 	byte	
342ca     00          | 	byte	0
342cb                 | LR__5735
342cb     2A          | 	byte	"*"
342cc     00          | 	byte	0
342cd                 | LR__5736
342cd                 | 	byte	
342cd     00          | 	byte	0
342ce                 | LR__5737
342ce     5B 64 69 72 
342d2     5D 20       | 	byte	"[dir] "
342d4     00          | 	byte	0
342d5                 | LR__5738
342d5     4D 6F 72 65 
342d9     20 74 68 61 
342dd     6E 20 31 32 
342e1     38 20 65 6E 
342e5     74 72 69 65 
342e9     73 20 66 6F 
342ed     75 6E 64 3A 
342f1     20 63 6C 65 
342f5     61 6E 20 79 
342f9     6F 75 72 20 
342fd     64 69 72 65 
34301     63 74 6F 72 
34305     79          | 	byte	"More than 128 entries found: clean your directory"
34306     00          | 	byte	0
34307                 | LR__5739
34307     2A          | 	byte	"*"
34308     00          | 	byte	0
34309                 | LR__5740
34309                 | 	byte	
34309     00          | 	byte	0
3430a                 | LR__5741
3430a     4D 6F 72 65 
3430e     20 74 68 61 
34312     6E 20 31 32 
34316     38 20 65 6E 
3431a     74 72 69 65 
3431e     73 20 66 6F 
34322     75 6E 64 3A 
34326     20 63 6C 65 
3432a     61 6E 20 79 
3432e     6F 75 72 20 
34332     64 69 72 65 
34336     63 74 6F 72 
3433a     79          | 	byte	"More than 128 entries found: clean your directory"
3433b     00          | 	byte	0
3433c                 | LR__5742
3433c     45 72 72 6F 
34340     72 20       | 	byte	"Error "
34342     00          | 	byte	0
34343                 | LR__5743
34343     3A 20       | 	byte	": "
34345     00          | 	byte	0
34346                 | LR__5744
34346     67 65 74 65 
3434a     6E 76 73 75 
3434e     73 74 61 69 
34352     6E 3A 20    | 	byte	"getenvsustain: "
34355     00          | 	byte	0
34356                 | LR__5745
34356     67 65 74 70 
3435a     69 78 65 6C 
3435e     3A 20       | 	byte	"getpixel: "
34360     00          | 	byte	0
34361                 | LR__5746
34361     68 65 78 24 
34365     3A 20       | 	byte	"hex$: "
34367     00          | 	byte	0
34368                 | LR__5747
34368                 | 	byte	
34368     00          | 	byte	0
34369                 | LR__5748
34369     49 6E 20 69 
3436d     6E 70 75 74 
34371     3A 20       | 	byte	"In input: "
34373     00          | 	byte	0
34374                 | LR__5749
34374     2C          | 	byte	","
34375     00          | 	byte	0
34376                 | LR__5750
34376                 | 	byte	
34376     00          | 	byte	0
34377                 | LR__5751
34377                 | 	byte	
34377     00          | 	byte	0
34378                 | LR__5752
34378     6C 65 66 74 
3437c     24 3A 20    | 	byte	"left$: "
3437f     00          | 	byte	0
34380                 | LR__5753
34380     6C 65 66 74 
34384     24 3A 20    | 	byte	"left$: "
34387     00          | 	byte	0
34388                 | LR__5754
34388     6C 65 6E 3A 
3438c     20          | 	byte	"len: "
3438d     00          | 	byte	0
3438e                 | LR__5755
3438e     6C 65 6E 3A 
34392     20          | 	byte	"len: "
34393     00          | 	byte	0
34394                 | LR__5756
34394                 | 	byte	
34394     00          | 	byte	0
34395                 | LR__5757
34395     2F          | 	byte	"/"
34396     00          | 	byte	0
34397                 | LR__5758
34397     2F          | 	byte	"/"
34398     00          | 	byte	0
34399                 | LR__5759
34399     2E 62 61 73 | 	byte	".bas"
3439d     00          | 	byte	0
3439e                 | LR__5760
3439e     53 79 73 74 
343a2     65 6D 20 65 
343a6     72 72 6F 72 
343aa     20          | 	byte	"System error "
343ab     00          | 	byte	0
343ac                 | LR__5761
343ac     3A 20       | 	byte	": "
343ae     00          | 	byte	0
343af                 | LR__5762
343af     2E 62 61 73 | 	byte	".bas"
343b3     00          | 	byte	0
343b4                 | LR__5763
343b4     2F          | 	byte	"/"
343b5     00          | 	byte	0
343b6                 | LR__5764
343b6                 | 	byte	
343b6     00          | 	byte	0
343b7                 | LR__5765
343b7     4C 6F 61 64 
343bb     65 64 20    | 	byte	"Loaded "
343be     00          | 	byte	0
343bf                 | LR__5766
343bf     2F          | 	byte	"/"
343c0     00          | 	byte	0
343c1                 | LR__5767
343c1     6C 6F 67 3A 
343c5     20          | 	byte	"log: "
343c6     00          | 	byte	0
343c7                 | LR__5768
343c7     6D 69 64 24 
343cb     3A 20       | 	byte	"mid$: "
343cd     00          | 	byte	0
343ce                 | LR__5769
343ce     6D 69 64 24 
343d2     3A 20       | 	byte	"mid$: "
343d4     00          | 	byte	0
343d5                 | LR__5770
343d5     43 61 6E 6E 
343d9     6F 74 20 63 
343dd     72 65 61 74 
343e1     65 20 61 20 
343e5     64 69 72 65 
343e9     63 74 6F 72 
343ed     79 3A 20 73 
343f1     79 73 74 65 
343f5     6D 20 65 72 
343f9     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
343fd     00          | 	byte	0
343fe                 | LR__5771
343fe     20 42 41 53 
34402     49 43 20 62 
34406     79 74 65 73 
3440a     20 66 72 65 
3440e     65          | 	byte	" BASIC bytes free"
3440f     00          | 	byte	0
34410                 | LR__5772
34410                 | 	byte	
34410     00          | 	byte	0
34411                 | LR__5773
34411                 | 	byte	
34411     00          | 	byte	0
34412                 | LR__5774
34412     6E 6F 6E 61 
34416     6D 65 2E 62 
3441a     61 73       | 	byte	"noname.bas"
3441c     00          | 	byte	0
3441d                 | LR__5775
3441d     66 69 6C 65 
34421     6E 61 6D 65 
34425     20 65 78 70 
34429     65 63 74 65 
3442d     64          | 	byte	"filename expected"
3442e     00          | 	byte	0
3442f                 | LR__5776
3442f     72 65 61 64 | 	byte	"read"
34433     00          | 	byte	0
34434                 | LR__5777
34434     77 72 69 74 
34438     65          | 	byte	"write"
34439     00          | 	byte	0
3443a                 | LR__5778
3443a     61 70 70 65 
3443e     6E 64       | 	byte	"append"
34440     00          | 	byte	0
34441                 | LR__5779
34441     63 68 61 6E 
34445     6E 65 6C 23 
34449     20 65 78 70 
3444d     65 63 74 65 
34451     64          | 	byte	"channel# expected"
34452     00          | 	byte	0
34453                 | LR__5780
34453     4F 70 65 6E 
34457     3A 20 69 6E 
3445b     76 61 6C 69 
3445f     64 20 6D 6F 
34463     64 65       | 	byte	"Open: invalid mode"
34465     00          | 	byte	0
34466                 | LR__5781
34466     50 72 69 6E 
3446a     74 20 74 6F 
3446e     20 63 68 61 
34472     6E 6E 65 6C 
34476     20 28 6E 6F 
3447a     74 20 79 65 
3447e     74 20 69 6D 
34482     70 6C 65 6D 
34486     65 6E 74 65 
3448a     64 29       | 	byte	"Print to channel (not yet implemented)"
3448c     00          | 	byte	0
3448d                 | LR__5782
3448d     72 69 67 68 
34491     74 24 3A 20 | 	byte	"right$: "
34495     00          | 	byte	0
34496                 | LR__5783
34496     72 69 67 68 
3449a     74 24 3A 20 | 	byte	"right$: "
3449e     00          | 	byte	0
3449f                 | LR__5784
3449f     72 6E 64 3A 
344a3     20          | 	byte	"rnd: "
344a4     00          | 	byte	0
344a5                 | LR__5785
344a5     72 6E 64 3A 
344a9     20          | 	byte	"rnd: "
344aa     00          | 	byte	0
344ab                 | LR__5786
344ab     53 74 6F 70 
344af     70 65 64 20 
344b3     61 74 20 6C 
344b7     69 6E 65 20 | 	byte	"Stopped at line "
344bb     00          | 	byte	0
344bc                 | LR__5787
344bc                 | 	byte	
344bc     00          | 	byte	0
344bd                 | LR__5788
344bd     2F          | 	byte	"/"
344be     00          | 	byte	0
344bf                 | LR__5789
344bf                 | 	byte	
344bf     00          | 	byte	0
344c0                 | LR__5790
344c0     53 61 76 65 
344c4     64 20 61 73 
344c8     20          | 	byte	"Saved as "
344c9     00          | 	byte	0
344ca                 | LR__5791
344ca     2F          | 	byte	"/"
344cb     00          | 	byte	0
344cc                 | LR__5792
344cc     73 69 6E 3A 
344d0     20          | 	byte	"sin: "
344d1     00          | 	byte	0
344d2                 | LR__5793
344d2     73 71 72 3A 
344d6     20          | 	byte	"sqr: "
344d7     00          | 	byte	0
344d8                 | LR__5794
344d8     73 74 69 63 
344dc     6B 3A 20    | 	byte	"stick: "
344df     00          | 	byte	0
344e0                 | LR__5795
344e0     73 74 72 69 
344e4     67 3A 20    | 	byte	"strig: "
344e7     00          | 	byte	0
344e8                 | LR__5796
344e8     74 61 6E 3A 
344ec     20          | 	byte	"tan: "
344ed     00          | 	byte	0
344ee                 | LR__5797
344ee     76 61 6C 3A 
344f2     20          | 	byte	"val: "
344f3     00          | 	byte	0
344f4                 | LR__5798
344f4     76 61 6C 3A 
344f8     20          | 	byte	"val: "
344f9     00          | 	byte	0
344fa                 | LR__5799
344fa     24          | 	byte	"$"
344fb     00          | 	byte	0
344fc                 | LR__5800
344fc     26 68       | 	byte	"&h"
344fe     00          | 	byte	0
344ff                 | LR__5801
344ff     25          | 	byte	"%"
34500     00          | 	byte	0
34501                 | LR__5802
34501     26 62       | 	byte	"&b"
34503     00          | 	byte	0
34504                 | LR__5803
34504                 | 	byte	
34504     00          | 	byte	0
34505                 | LR__5804
34505     45 78 70 65 
34509     63 74 65 64 
3450d     20 6E 75 6D 
34511     62 65 72 2C 
34515     20 67 6F 74 
34519     20 73 6F 6D 
3451d     65 74 68 69 
34521     6E 67 20 65 
34525     6C 73 65    | 	byte	"Expected number, got something else"
34528     00          | 	byte	0
34529                 | LR__5805
34529     43 61 6E 6E 
3452d     6F 74 20 61 
34531     64 64 20 61 
34535     20 6E 75 6D 
34539     62 65 72 20 
3453d     74 6F 20 61 
34541     20 73 74 72 
34545     69 6E 67    | 	byte	"Cannot add a number to a string"
34548     00          | 	byte	0
34549                 | LR__5806
34549     43 61 6E 6E 
3454d     6F 74 20 73 
34551     75 62 73 74 
34555     72 61 63 74 
34559     20 73 74 72 
3455d     69 6E 67 73 | 	byte	"Cannot substract strings"
34561     00          | 	byte	0
34562                 | LR__5807
34562     55 6E 6B 6E 
34566     6F 77 6E 20 
3456a     65 72 72 6F 
3456e     72 20 77 68 
34572     69 6C 65 20 
34576     61 64 64 69 
3457a     6E 67       | 	byte	"Unknown error while adding"
3457c     00          | 	byte	0
3457d                 | LR__5808
3457d     55 6E 6B 6E 
34581     6F 77 6E 20 
34585     65 72 72 6F 
34589     72 20 77 68 
3458d     69 6C 65 20 
34591     73 75 62 73 
34595     74 72 61 63 
34599     74 69 6E 67 | 	byte	"Unknown error while substracting"
3459d     00          | 	byte	0
3459e                 | LR__5809
3459e     43 61 6E 6E 
345a2     6F 74 20 64 
345a6     6F 20 6C 6F 
345aa     67 69 63 20 
345ae     6F 70 65 72 
345b2     61 74 69 6F 
345b6     6E 20 6F 6E 
345ba     20 73 74 72 
345be     69 6E 67 20 
345c2     6F 72 20 66 
345c6     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
345ca     00          | 	byte	0
345cb                 | LR__5810
345cb     55 6E 6B 6E 
345cf     6F 77 6E 20 
345d3     65 72 72 6F 
345d7     72 20 77 68 
345db     69 6C 65 20 
345df     64 6F 69 6E 
345e3     67 20 6C 6F 
345e7     67 69 63 20 
345eb     6F 70 65 72 
345ef     61 74 69 6F 
345f3     6E          | 	byte	"Unknown error while doing logic operation"
345f4     00          | 	byte	0
345f5                 | LR__5811
345f5     43 61 6E 6E 
345f9     6F 74 20 6D 
345fd     75 6C 74 69 
34601     70 6C 79 20 
34605     73 74 72 69 
34609     6E 67 73    | 	byte	"Cannot multiply strings"
3460c     00          | 	byte	0
3460d                 | LR__5812
3460d     55 6E 6B 6E 
34611     6F 77 6E 20 
34615     65 72 72 6F 
34619     72 20 77 68 
3461d     69 6C 65 20 
34621     6D 75 6C 74 
34625     69 70 6C 79 
34629     69 6E 67    | 	byte	"Unknown error while multiplying"
3462c     00          | 	byte	0
3462d                 | LR__5813
3462d     43 61 6E 6E 
34631     6F 74 20 64 
34635     69 76 69 64 
34639     65 20 73 74 
3463d     72 69 6E 67 
34641     73          | 	byte	"Cannot divide strings"
34642     00          | 	byte	0
34643                 | LR__5814
34643     55 6E 6B 6E 
34647     6F 77 6E 20 
3464b     65 72 72 6F 
3464f     72 20 77 68 
34653     69 6C 65 20 
34657     64 69 76 69 
3465b     64 69 6E 67 | 	byte	"Unknown error while dividing"
3465f     00          | 	byte	0
34660                 | LR__5815
34660     43 61 6E 6E 
34664     6F 74 20 63 
34668     6F 6D 70 75 
3466c     74 65 20 61 
34670     20 70 6F 77 
34674     65 72 20 6F 
34678     66 20 61 20 
3467c     73 74 72 69 
34680     6E 67       | 	byte	"Cannot compute a power of a string"
34682     00          | 	byte	0
34683                 | LR__5816
34683     55 6E 6B 6E 
34687     6F 77 6E 20 
3468b     65 72 72 6F 
3468f     72 20 77 68 
34693     69 6C 65 20 
34697     63 6F 6D 70 
3469b     75 74 69 6E 
3469f     67 20 61 20 
346a3     70 6F 77 65 
346a7     72          | 	byte	"Unknown error while computing a power"
346a8     00          | 	byte	0
346a9                 | LR__5817
346a9     52 69 67 68 
346ad     74 20 70 61 
346b1     72 65 6E 74 
346b5     68 65 73 69 
346b9     73 20 65 78 
346bd     70 65 63 74 
346c1     65 64       | 	byte	"Right parenthesis expected"
346c3     00          | 	byte	0
346c4                 | LR__5818
346c4     45 78 70 65 
346c8     63 74 65 64 
346cc     20 73 74 72 
346d0     69 6E 67    | 	byte	"Expected string"
346d3     00          | 	byte	0
346d4                 | LR__5819
346d4     45 78 70 65 
346d8     63 74 65 64 
346dc     20 66 6C 6F 
346e0     61 74       | 	byte	"Expected float"
346e2     00          | 	byte	0
346e3                 | LR__5820
346e3     45 78 70 65 
346e7     63 74 65 64 
346eb     20 75 6E 73 
346ef     69 67 6E 65 
346f3     64 20 69 6E 
346f7     74 65 67 65 
346fb     72          | 	byte	"Expected unsigned integer"
346fc     00          | 	byte	0
346fd                 | LR__5821
346fd     45 78 70 65 
34701     63 74 65 64 
34705     20 69 6E 74 
34709     65 67 65 72 | 	byte	"Expected integer"
3470d     00          | 	byte	0
3470e                 | LR__5822
3470e     4E 6F 20 6D 
34712     6F 72 65 20 
34716     76 61 72 69 
3471a     61 62 6C 65 
3471e     20 73 6C 6F 
34722     74 73       | 	byte	"No more variable slots"
34724     00          | 	byte	0
34725                 | LR__5823
34725     56 61 72 69 
34729     61 62 6C 65 
3472d     20 6E 6F 74 
34731     20 66 6F 75 
34735     6E 64       | 	byte	"Variable not found"
34737     00          | 	byte	0
34738                 | LR__5824
34738     43 6F 6D 6D 
3473c     61 20 65 78 
34740     70 65 63 74 
34744     65 64       | 	byte	"Comma expected"
34746     00          | 	byte	0
34747                 | LR__5825
34747     43 6F 6D 6D 
3474b     61 20 6F 72 
3474f     20 73 65 6D 
34753     69 63 6F 6C 
34757     6F 6E 20 65 
3475b     78 70 65 63 
3475f     74 65 64    | 	byte	"Comma or semicolon expected"
34762     00          | 	byte	0
34763                 | LR__5826
34763     55 6E 6B 6E 
34767     6F 77 6E 20 
3476b     63 6F 6D 6D 
3476f     61 6E 64    | 	byte	"Unknown command"
34772     00          | 	byte	0
34773                 | LR__5827
34773     53 74 61 63 
34777     6B 20 75 6E 
3477b     64 65 72 66 
3477f     6C 6F 77    | 	byte	"Stack underflow"
34782     00          | 	byte	0
34783                 | LR__5828
34783     43 61 6E 6E 
34787     6F 74 20 65 
3478b     78 65 63 75 
3478f     74 65 20 67 
34793     6F 74 6F 20 
34797     6F 72 20 67 
3479b     6F 73 75 62 
3479f     20 69 6E 20 
347a3     74 68 65 20 
347a7     69 6D 6D 65 
347ab     64 69 61 74 
347af     65 20 6D 6F 
347b3     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
347b5     00          | 	byte	0
347b6                 | LR__5829
347b6     43 61 6E 6E 
347ba     6F 74 20 6C 
347be     6F 61 64 20 
347c2     66 72 6F 6D 
347c6     20 74 68 69 
347ca     73 20 66 69 
347ce     6C 65       | 	byte	"Cannot load from this file"
347d0     00          | 	byte	0
347d1                 | LR__5830
347d1     54 68 65 20 
347d5     70 72 6F 67 
347d9     72 61 6D 20 
347dd     69 73 20 65 
347e1     6D 70 74 79 | 	byte	"The program is empty"
347e5     00          | 	byte	0
347e6                 | LR__5831
347e6     49 66 20 61 
347ea     66 74 65 72 
347ee     20 69 66    | 	byte	"If after if"
347f1     00          | 	byte	0
347f2                 | LR__5832
347f2     45 6D 70 74 
347f6     79 20 65 78 
347fa     70 72 65 73 
347fe     73 69 6F 6E | 	byte	"Empty expression"
34802     00          | 	byte	0
34803                 | LR__5833
34803     53 74 72 69 
34807     6E 67 20 65 
3480b     78 70 65 63 
3480f     74 65 64    | 	byte	"String expected"
34812     00          | 	byte	0
34813                 | LR__5834
34813     49 6E 74 65 
34817     72 70 72 65 
3481b     74 65 72 20 
3481f     69 6E 74 65 
34823     72 6E 61 6C 
34827     20 65 72 72 
3482b     6F 72       | 	byte	"Interpreter internal error"
3482d     00          | 	byte	0
3482e                 | LR__5835
3482e     45 78 70 65 
34832     63 74 65 64 
34836     20 61 73 73 
3483a     69 67 6E    | 	byte	"Expected assign"
3483d     00          | 	byte	0
3483e                 | LR__5836
3483e     45 78 70 65 
34842     63 74 65 64 
34846     20 27 74 6F 
3484a     27          | 	byte	"Expected 'to'"
3484b     00          | 	byte	0
3484c                 | LR__5837
3484c     45 78 70 65 
34850     63 74 65 64 
34854     20 69 6E 74 
34858     65 67 65 72 
3485c     20 76 61 72 
34860     69 61 62 6C 
34864     65          | 	byte	"Expected integer variable"
34865     00          | 	byte	0
34866                 | LR__5838
34866     55 6E 69 6E 
3486a     69 74 69 61 
3486e     6C 69 7A 65 
34872     64 20 76 61 
34876     72 69 61 62 
3487a     6C 65 20 69 
3487e     6E 20 27 6E 
34882     65 78 74 27 
34886     2C 20 75 73 
3488a     65 20 27 66 
3488e     6F 72 27 20 
34892     62 65 66 6F 
34896     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
34898     00          | 	byte	0
34899                 | LR__5839
34899     4E 6F 20 6D 
3489d     6F 72 65 20 
348a1     73 6C 6F 74 
348a5     73 20 66 6F 
348a9     72 20 27 66 
348ad     6F 72 27    | 	byte	"No more slots for 'for'"
348b0     00          | 	byte	0
348b1                 | LR__5840
348b1     27 4E 65 78 
348b5     74 27 20 64 
348b9     6F 65 73 6E 
348bd     27 74 20 6D 
348c1     61 74 63 68 
348c5     20 27 66 6F 
348c9     72 27       | 	byte	"'Next' doesn't match 'for'"
348cb     00          | 	byte	0
348cc                 | LR__5841
348cc     27 47 6F 74 
348d0     6F 27 20 74 
348d4     61 72 67 65 
348d8     74 20 6C 69 
348dc     6E 65 20 6E 
348e0     6F 74 20 66 
348e4     6F 75 6E 64 | 	byte	"'Goto' target line not found"
348e8     00          | 	byte	0
348e9                 | LR__5842
348e9     42 61 64 20 
348ed     6E 75 6D 62 
348f1     65 72 20 6F 
348f5     66 20 70 61 
348f9     72 61 6D 65 
348fd     74 65 72 73 | 	byte	"Bad number of parameters"
34901     00          | 	byte	0
34902                 | LR__5843
34902     46 75 6E 63 
34906     74 69 6F 6E 
3490a     20 75 6E 64 
3490e     65 66 69 6E 
34912     65 64 20 66 
34916     6F 72 20 73 
3491a     74 72 69 6E 
3491e     67 73       | 	byte	"Function undefined for strings"
34920     00          | 	byte	0
34921                 | LR__5844
34921     42 61 64 20 
34925     70 61 72 61 
34929     6D 65 74 65 
3492d     72          | 	byte	"Bad parameter"
3492e     00          | 	byte	0
3492f                 | LR__5845
3492f     43 61 6E 6E 
34933     6F 74 20 64 
34937     65 63 6C 61 
3493b     72 65 20 61 
3493f     6E 20 61 72 
34943     72 61 79 3A 
34947     20 74 68 65 
3494b     20 76 61 72 
3494f     69 61 62 6C 
34953     65 20 65 78 
34957     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3495b     00          | 	byte	0
3495c                 | LR__5846
3495c     45 78 70 65 
34960     63 74 65 64 
34964     20 27 28 27 | 	byte	"Expected '('"
34968     00          | 	byte	0
34969                 | LR__5847
34969     45 78 70 65 
3496d     63 74 65 64 
34971     20 27 29 27 
34975     20 6F 72 20 
34979     27 2C 27    | 	byte	"Expected ')' or ','"
3497c     00          | 	byte	0
3497d                 | LR__5848
3497d     4E 6F 20 6D 
34981     6F 72 65 20 
34985     74 68 61 6E 
34989     20 33 20 64 
3498d     69 6D 65 6E 
34991     73 69 6F 6E 
34995     73 20 73 75 
34999     70 70 6F 72 
3499d     74 65 64    | 	byte	"No more than 3 dimensions supported"
349a0     00          | 	byte	0
349a1                 | LR__5849
349a1     56 61 72 69 
349a5     61 62 6C 65 
349a9     20 6E 61 6D 
349ad     65 20 65 78 
349b1     70 65 63 74 
349b5     65 64       | 	byte	"Variable name expected"
349b7     00          | 	byte	0
349b8                 | LR__5850
349b8     54 79 70 65 
349bc     20 6E 61 6D 
349c0     65 20 65 78 
349c4     70 65 63 74 
349c8     65 64       | 	byte	"Type name expected"
349ca     00          | 	byte	0
349cb                 | LR__5851
349cb     54 79 70 65 
349cf     20 6E 6F 74 
349d3     20 73 75 70 
349d7     70 6F 72 74 
349db     65 64 20 79 
349df     65 74       | 	byte	"Type not supported yet"
349e1     00          | 	byte	0
349e2                 | LR__5852
349e2     41 72 72 61 
349e6     79 20 69 6E 
349ea     64 65 78 20 
349ee     6F 75 74 20 
349f2     6F 66 20 72 
349f6     61 6E 67 65 | 	byte	"Array index out of range"
349fa     00          | 	byte	0
349fb                 | LR__5853
349fb     42 61 64 20 
349ff     74 79 70 65 
34a03     20 77 68 69 
34a07     6C 65 20 61 
34a0b     73 73 69 67 
34a0f     6E 69 6E 67 
34a13     20 74 6F 20 
34a17     61 72 72 61 
34a1b     79          | 	byte	"Bad type while assigning to array"
34a1c     00          | 	byte	0
34a1d                 | LR__5854
34a1d     54 6F 6F 20 
34a21     6D 61 6E 79 
34a25     20 76 61 72 
34a29     69 61 62 6C 
34a2d     65 73       | 	byte	"Too many variables"
34a2f     00          | 	byte	0
34a30                 | LR__5855
34a30     27 54 68 65 
34a34     6E 27 20 65 
34a38     78 70 65 63 
34a3c     74 65 64    | 	byte	"'Then' expected"
34a3f     00          | 	byte	0
34a40                 | LR__5856
34a40     44 69 72 65 
34a44     63 74 6F 72 
34a48     79 20 64 6F 
34a4c     65 73 6E 27 
34a50     74 20 65 78 
34a54     69 73 74    | 	byte	"Directory doesn't exist"
34a57     00          | 	byte	0
34a58                 | LR__5857
34a58     55 6E 65 78 
34a5c     70 65 63 74 
34a60     65 64 20 65 
34a64     6E 64 20 6F 
34a68     66 20 6C 69 
34a6c     6E 65       | 	byte	"Unexpected end of line"
34a6e     00          | 	byte	0
34a6f                 | LR__5858
34a6f     45 72 72 6F 
34a73     72 20       | 	byte	"Error "
34a75     00          | 	byte	0
34a76                 | LR__5859
34a76     20 2D 20    | 	byte	" - "
34a79     00          | 	byte	0
34a7a                 | LR__5860
34a7a     20 69 6E 20 
34a7e     6C 69 6E 65 
34a82     20          | 	byte	" in line "
34a83     00          | 	byte	0
34a84                 | LR__5861
34a84                 | 	byte	
34a84     00          | 	byte	0
34a85                 | LR__5862
34a85     2F 73 64    | 	byte	"/sd"
34a88     00          | 	byte	0
34a89                 | LR__5863
34a89     2F 73 64 2F 
34a8d     62 61 73    | 	byte	"/sd/bas"
34a90     00          | 	byte	0
34a91                 | LR__5864
34a91     2F 73 64 2F 
34a95     62 61 73    | 	byte	"/sd/bas"
34a98     00          | 	byte	0
34a99                 | LR__5865
34a99     20 42 41 53 
34a9d     49 43 20 62 
34aa1     79 74 65 73 
34aa5     20 66 72 65 
34aa9     65          | 	byte	" BASIC bytes free"
34aaa     00          | 	byte	0
34aab                 | LR__5866
34aab     52 65 61 64 
34aaf     79          | 	byte	"Ready"
34ab0     00          | 	byte	0
34ab1                 | LR__5867
34ab1     6E 6F 6E 61 
34ab5     6D 65 2E 62 
34ab9     61 73       | 	byte	"noname.bas"
34abb     00          | 	byte	0
34abc                 | LR__5868
34abc     2F 73 64 2F 
34ac0     62 61 73 2F 
34ac4     61 75 74 6F 
34ac8     72 75 6E 2E 
34acc     62 61 73    | 	byte	"/sd/bas/autorun.bas"
34acf     00          | 	byte	0
34ad0                 | LR__5869
34ad0     72 75 6E 20 
34ad4     61 75 74 6F 
34ad8     72 75 6E 2E 
34adc     62 61 73    | 	byte	"run autorun.bas"
34adf     00          | 	byte	0
34ae0                 | LR__5870
34ae0                 | 	byte	
34ae0     00          | 	byte	0
34ae1     00 00 00    | 	alignl
34ae4                 | _dat_
34ae4     00 00 00 00 
34ae8     00 00 00 00 
34aec     00 00 00 00 
34af0     00 00 00 00 | 	byte	$00[16]
34af4     61 41 17 0E 
34af8     62 42 00 00 
34afc     63 43 19 10 
34b00     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
34b04     65 45 18 0F 
34b08     66 46 00 00 
34b0c     67 47 00 00 
34b10     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
34b14     69 49 00 00 
34b18     6A 4A 00 00 
34b1c     6B 4B 00 00 
34b20     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
34b24     6D 4D 00 00 
34b28     6E 4E 1A 11 
34b2c     6F 4F 1E 15 
34b30     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
34b34     71 51 00 00 
34b38     72 52 00 00 
34b3c     73 53 1B 12 
34b40     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
34b44     75 55 00 00 
34b48     76 56 00 00 
34b4c     77 57 00 00 
34b50     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
34b54     79 59 00 00 
34b58     7A 5A 1D 14 
34b5c     31 21 04 00 
34b60     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
34b64     33 23 06 00 
34b68     34 24 07 00 
34b6c     35 25 08 00 
34b70     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
34b74     37 26 0A 00 
34b78     38 2A 0B 00 
34b7c     39 28 0C 00 
34b80     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
34b84     8D 8D 00 00 
34b88     9B 9B 00 00 
34b8c     88 88 00 00 
34b90     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
34b94     20 20 00 00 
34b98     2D 5F 00 00 
34b9c     3D 2B 00 00 
34ba0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
34ba4     5D 7D 00 00 
34ba8     5C 7C 00 00 
34bac     23 7E 00 00 
34bb0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
34bb4     27 22 00 00 
34bb8     60 7E 03 00 
34bbc     2C 3C 00 00 
34bc0     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
34bc4     2F 3F 00 00 
34bc8     B9 B9 00 00 
34bcc     BA 00 00 00 
34bd0     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
34bd4     BC 00 00 00 
34bd8     BD 00 00 00 
34bdc     BE 00 00 00 
34be0     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
34be4     C0 00 00 00 
34be8     C1 00 00 00 
34bec     C2 00 00 00 
34bf0     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
34bf4     C4 00 00 00 
34bf8     C5 00 00 00 
34bfc     C6 00 00 00 
34c00     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
34c04     C8 00 00 00 
34c08     C9 00 00 00 
34c0c     CA 00 00 00 
34c10     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
34c14     7F 7F 00 00 
34c18     CC 00 00 00 
34c1c     CD 00 00 00 
34c20     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
34c24     CF 00 00 00 
34c28     D0 00 00 00 
34c2c     D1 00 00 00 
34c30     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
34c34     2F 2F 00 00 
34c38     2A 2A 00 00 
34c3c     2D 2D 00 00 
34c40     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
34c44     8D 8D 00 00 
34c48     31 31 00 00 
34c4c     32 32 00 00 
34c50     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
34c54     34 34 00 00 
34c58     35 35 00 00 
34c5c     36 36 00 00 
34c60     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
34c64     38 38 00 00 
34c68     39 39 00 00 
34c6c     30 30 00 00 
34c70     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
34c74     5C 7C 00 00 
34c78     00 00 00 00 
34c7c     00 00 00 00 
34c80     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
34c84     00 00 00 00 
      ...             
34cdc     00 00 00 00 
34ce0     00 00 00 00 | 	byte	$00[96]
34ce4     2B 00 A6 F2 
34ce8     24 A7 09 80 
34cec     5B 88 4D 89 
34cf0     80 88 A5 88 | atari_spl file "atari.spl"
34cf4     6D 88 B8 88 
34cf8     80 88 CB 88 
34cfc     92 88 A5 88 
34d00     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
34d04     A5 88 CA 88 
34d08     A6 88 DD 88 
34d0c     B8 88 AB 89 
34d10     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
34d14     C8 AD C6 F1 
34d18     91 06 B6 FF 
34d1c     13 00 4A 00 
34d20     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
34d24     5D 00 5E 00 
34d28     5D 00 5E 00 
34d2c     5E 00 5D 00 
34d30     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
34d34     38 00 83 00 
34d38     25 00 83 00 
34d3c     C3 FE D1 04 
34d40     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
34d44     48 88 38 85 
34d48     41 8A CB 88 
34d4c     28 89 B8 88 
34d50     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
34d54     15 89 03 89 
34d58     02 89 15 89 
34d5c     16 89 15 89 
34d60     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
34d64     15 89 3A 89 
34d68     72 89 E3 89 
34d6c     52 83 AD 97 
34d70     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
34d74     0C 02 B6 FF 
34d78     E1 00 A8 00 
34d7c     F3 00 A8 00 
34d80     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
34d84     CE 00 CD 00 
34d88     CD 00 BA 00 
34d8c     E1 00 BB 00 
34d90     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
34d94     DF 00 C9 FF 
34d98     E6 01 B6 06 
34d9c     EE DD 8D 98 
34da0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
34da4     97 89 73 89 
34da8     3B 89 60 89 
34dac     60 89 60 89 
34db0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
34db4     73 89 72 89 
34db8     85 89 73 89 
34dbc     AA 89 60 89 
34dc0     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
34dc4     E8 8A 18 86 
34dc8     92 88 A5 C2 
34dcc     E0 00 C3 05 
34dd0     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
34dd4     F2 00 64 01 
34dd8     06 01 3E 01 
34ddc     2B 01 2B 01 
34de0     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
34de4     2B 01 2A 01 
34de8     2B 01 2B 01 
34dec     2B 01 18 01 
34df0     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
34df4     39 07 61 F3 
34df8     C0 AF 37 85 
34dfc     0F 88 8B 8A 
34e00     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
34e04     AB 89 D0 89 
34e08     AB 89 D0 89 
34e0c     D0 89 CF 89 
34e10     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
34e14     D0 89 F5 89 
34e18     BD 89 08 8A 
34e1c     CF 89 E8 8A 
34e20     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
34e24     53 B3 0D F8 
34e28     F4 07 38 00 
34e2c     63 01 63 01 
34e30     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
34e34     88 01 88 01 
34e38     76 01 88 01 
34e3c     88 01 89 01 
34e40     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
34e44     75 01 AE 01 
34e48     76 01 88 01 
34e4c     4A 00 46 06 
34e50     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
34e54     08 8A 9A 86 
34e58     33 8B 08 8A 
34e5c     2D 8A F5 89 
34e60     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
34e64     2D 8A 2D 8A 
34e68     2E 8A 1B 8A 
34e6c     40 8A 2D 8A 
34e70     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
34e74     2E 8A 79 8A 
34e78     66 8A C8 8B 
34e7c     72 82 2B 97 
34e80     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
34e84     1D 02 05 01 
34e88     F8 01 C0 01 
34e8c     0B 02 C0 01 
34e90     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
34e94     F9 01 D3 01 
34e98     F8 01 D3 01 
34e9c     F8 01 D2 01 
34ea0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
34ea4     E6 01 2B 01 
34ea8     8E 02 5F 07 
34eac     F7 E2 ED 9C 
34eb0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
34eb4     E8 8A 78 8A 
34eb8     78 8A 65 8A 
34ebc     8B 8A 78 8A 
34ec0     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
34ec4     8B 8A 9D 8A 
34ec8     9D 8A 8B 8A 
34ecc     C2 8A 78 8A 
34ed0     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
34ed4     70 8C 18 86 
34ed8     8B 8A 23 C9 
34edc     CB 03 C4 05 
34ee0     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
34ee4     0B 02 7B 02 
34ee8     1E 02 55 02 
34eec     30 02 43 02 
34ef0     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
34ef4     43 02 44 02 
34ef8     43 02 30 02 
34efc     68 02 31 02 
34f00     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
34f04     07 08 3F F7 
34f08     73 B2 13 85 
34f0c     15 89 ED 8B 
34f10     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
34f14     B0 8A FB 8A 
34f18     D5 8A FA 8A 
34f1c     E8 8A FB 8A 
34f20     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
34f24     E8 8A 21 8B 
34f28     E7 8A 33 8B 
34f2c     E8 8A 26 8C 
34f30     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
34f34     8D B0 27 F6 
34f38     9C 08 AD 01 
34f3c     7B 02 8D 02 
34f40     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
34f44     A1 02 A0 02 
34f48     A1 02 A0 02 
34f4c     A0 02 A0 02 
34f50     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
34f54     7B 02 D8 02 
34f58     7B 02 C6 02 
34f5c     3E 01 C3 05 
34f60     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
34f64     00 8C 2A 86 
34f68     E0 8C FA 8A 
34f6c     6A 8B FB 8A 
34f70     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
34f74     45 8B 45 8B 
34f78     45 8B 6B 8B 
34f7c     46 8B 59 8B 
34f80     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
34f84     6B 8B 6B 8B 
34f88     6B 8B 6B 8B 
34f8c     7D 8B 7D 8B 
34f90     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
34f94     90 8B 91 8B 
34f98     90 8B 90 8B 
34f9c     A3 8B A3 8B 
34fa0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
34fa4     B5 8B B6 8B 
34fa8     B5 8B B5 8B 
34fac     B6 8B C8 8B 
34fb0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
34fb4     C8 8B DA 8B 
34fb8     DB 8B DB 8B 
34fbc     DB 8B DC 8B 
34fc0     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
34fc4     EE 8B EE 8B 
34fc8     00 8C 01 8C 
34fcc     00 8C 01 8C 
34fd0     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
34fd4     12 8C 13 8C 
34fd8     13 8C 26 8C 
34fdc     26 8C 26 8C 
34fe0     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
34fe4     38 8C 38 8C 
34fe8     38 8C 38 8C 
34fec     4B 8C 4B 8C 
34ff0     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
34ff4     5E 8C 5E 8C 
34ff8     5E 8C 5E 8C 
34ffc     70 8C 70 8C 
35000     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
35004     70 8C 83 8C 
35008     83 8C 83 8C 
3500c     83 8C 96 8C 
35010     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
35014     95 8C A9 8C 
35018     A9 8C A8 8C 
3501c     A8 8C A8 8C 
35020     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
35024     BB 8C BB 8C 
35028     BB 8C CE 8C 
3502c     CE 8C CE 8C 
35030     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
35034     E0 8C E1 8C 
35038     E1 8C E0 8C 
3503c     F4 8C F2 8C 
35040     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
35044     05 8D 05 8D 
35048     06 8D 06 8D 
3504c     19 8D 19 8D 
35050     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
35054     18 8D 2B 8D 
35058     2B 8D 2B 8D 
3505c     2A 8D 3E 8D 
35060     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
35064     3E 8D 51 8D 
35068     50 8D 50 8D 
3506c     50 8D 51 8D 
35070     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
35074     63 8D 64 8D 
35078     76 8D 75 8D 
3507c     75 8D 76 8D 
35080     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
35084     88 8D 88 8D 
35088     89 8D 9B 8D 
3508c     9A 8D 9B 8D 
35090     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
35094     AD 8D AE 8D 
35098     AD 8D AE 8D 
3509c     C1 8D C1 8D 
350a0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
350a4     D3 8D D3 8D 
350a8     D3 8D D3 8D 
350ac     D3 8D E6 8D 
350b0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
350b4     E6 8D E6 8D 
350b8     F9 8D F9 8D 
350bc     F9 8D F8 8D 
350c0     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
350c4     0B 8E 0B 8E 
350c8     1D 8E 1D 8E 
350cc     1E 8E 1E 8E 
350d0     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
350d4     31 8E 31 8E 
350d8     31 8E 42 8E 
350dc     43 8E 43 8E 
350e0     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
350e4     56 8E 56 8E 
350e8     55 8E 56 8E 
350ec     68 8E 69 8E 
350f0     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
350f4     69 8E 7B 8E 
350f8     7C 8E 7B 8E 
350fc     7B 8E 8D 8E 
35100     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
35104     8D 8E A1 8E 
35108     A0 8E A1 8E 
3510c     A1 8E A0 8E 
35110     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
35114     B3 8E B3 8E 
35118     C6 8E C5 8E 
3511c     C6 8E C6 8E 
35120     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
35124     D8 8E D9 8E 
35128     D8 8E EC 8E 
3512c     EB 8E EC 8E 
35130     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
35134     FE 8E FE 8E 
35138     FE 8E FE 8E 
3513c     10 8F 10 8F 
35140     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
35144     11 8F 23 8F 
35148     24 8F 23 8F 
3514c     24 8F 37 8F 
35150     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
35154     36 8F 36 8F 
35158     48 8F 49 8F 
3515c     49 8F 49 8F 
35160     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
35164     5B 8F 5C 8F 
35168     5B 8F 6E 8F 
3516c     6E 8F 6E 8F 
35170     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
35174     81 8F 81 8F 
35178     81 8F 81 8F 
3517c     93 8F 93 8F 
35180     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
35184     93 8F A6 8F 
35188     A6 8F A6 8F 
3518c     A6 8F B9 8F 
35190     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
35194     B9 8F B9 8F 
35198     CC 8F CB 8F 
3519c     CB 8F CC 8F 
351a0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
351a4     DF 8F DE 8F 
351a8     DE 8F F1 8F 
351ac     F1 8F F1 8F 
351b0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
351b4     03 90 04 90 
351b8     04 90 04 90 
351bc     16 90 17 90 
351c0     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
351c4     29 90 28 90 
351c8     29 90 28 90 
351cc     29 90 3C 90 
351d0     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
351d4     3C 90 4F 90 
351d8     4E 90 4E 90 
351dc     4E 90 4E 90 
351e0     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
351e4     61 90 61 90 
351e8     73 90 74 90 
351ec     74 90 74 90 
351f0     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
351f4     87 90 86 90 
351f8     87 90 86 90 
351fc     99 90 99 90 
35200     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
35204     AB 90 AB 90 
35208     AC 90 AB 90 
3520c     AB 90 BF 90 
35210     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
35214     BE 90 D1 90 
35218     D0 90 D1 90 
3521c     D1 90 D1 90 
35220     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
35224     E3 90 E4 90 
35228     F6 90 F6 90 
3522c     F6 90 F6 90 
35230     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
35234     09 91 0A 91 
35238     0A 91 1C 91 
3523c     1C 91 1C 91 
35240     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
35244     2F 91 2E 91 
35248     2F 91 2F 91 
3524c     2E 91 41 91 
35250     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
35254     41 91 53 91 
35258     54 91 54 91 
3525c     53 91 54 91 
35260     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
35264     67 91 67 91 
35268     79 91 7A 91 
3526c     79 91 78 91 
35270     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
35274     8C 91 8B 91 
35278     8C 91 8C 91 
3527c     9E 91 9E 91 
35280     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
35284     B1 91 B1 91 
35288     B2 91 B1 91 
3528c     B1 91 C4 91 
35290     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
35294     C4 91 D6 91 
35298     D7 91 D7 91 
3529c     D7 91 D6 91 
352a0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
352a4     EA 91 EA 91 
352a8     EA 91 FC 91 
352ac     FC 91 FB 91 
352b0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
352b4     0E 92 0F 92 
352b8     0F 92 0E 92 
352bc     21 92 21 92 
352c0     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
352c4     21 92 34 92 
352c8     33 92 34 92 
352cc     34 92 47 92 
352d0     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
352d4     46 92 47 92 
352d8     59 92 59 92 
352dc     59 92 59 92 
352e0     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
352e4     6C 92 6C 92 
352e8     6B 92 7E 92 
352ec     7E 92 7E 92 
352f0     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
352f4     92 92 91 92 
352f8     91 92 90 92 
352fc     91 92 A4 92 
35300     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
35304     A3 92 B6 92 
35308     B6 92 B7 92 
3530c     B7 92 B6 92 
35310     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
35314     CA 92 C9 92 
35318     CA 92 DC 92 
3531c     DC 92 DC 92 
35320     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
35324     EF 92 EF 92 
35328     EF 92 EF 92 
3532c     01 93 01 93 
35330     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
35334     15 93 14 93 
35338     14 93 14 93 
3533c     14 93 27 93 
35340     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
35344     27 93 39 93 
35348     3A 93 39 93 
3534c     39 93 39 93 
35350     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
35354     4B 93 4C 93 
35358     5F 93 5F 93 
3535c     5F 93 5E 93 
35360     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
35364     5F 93 84 93 
35368     4C 93 96 93 
3536c     5F 93 AE 94 
35370     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
35374     7B C1 00 00 
35378     00 00 00 00 
3537c     00 00 00 00 
35380     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35384     00 00 00 00 | 	byte	$00, $00, $00, $00
35388     7A D7 00 80 
3538c     87 8A 48 8F 
35390     EC 8C 76 8D 
35394     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
35398     3C 8D 82 8D 
3539c     42 8D 88 8D 
353a0     8C 8D 8E 8D 
353a4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
353a8     97 8D DE 8D 
353ac     E1 8D F1 8E 
353b0     D8 8C A3 83 
353b4     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
353b8     65 71 C9 65 
353bc     FC 64 C4 65 
353c0     C1 65 BF 65 
353c4     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
353c8     B6 65 B4 65 
353cc     B2 65 AE 65 
353d0     AC 65 ED 65 
353d4     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
353d8     5E 65 25 66 
353dc     FA 62 23 6B 
353e0     B5 6C 61 0A 
353e4     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
353e8     5D 90 BE 8D 
353ec     47 8E C3 8D 
353f0     09 8E C9 8D 
353f4     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
353f8     15 8E 19 8E 
353fc     1B 8E 62 8E 
35400     64 8E 68 8E 
35404     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
35408     B5 8E 4C 90 
3540c     FA 84 3C 9D 
35410     98 13 79 6D 
35414     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
35418     D9 66 50 66 
3541c     D4 66 4B 66 
35420     8C 66 46 66 
35424     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
35428     81 66 3A 66 
3542c     7C 66 36 66 
35430     76 66 30 66 
35434     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
35438     6B 66 88 72 
3543c     BF 37 E7 B7 
35440     75 83 8B 8E 
35444     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
35448     94 8E 96 8E 
3544c     DD 8E 9C 8E 
35450     E2 8E A2 8E 
35454     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
35458     EE 8E AE 8E 
3545c     38 8F B5 8E 
35460     3F 8F FD 8E 
35464     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
35468     A5 87 1E E3 
3546c     6D 5D FA 71 
35470     41 64 25 67 
35474     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
35478     D9 66 1A 67 
3547c     18 67 15 67 
35480     12 67 0F 67 
35484     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
35488     07 67 C0 66 
3548c     01 67 BC 66 
35490     B8 66 DE 64 
35494     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
35498     43 E5 1F 8B 
3549c     14 8A F1 90 
354a0     1C 8F 63 8F 
354a4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
354a8     29 8F 6E 8F 
354ac     72 8F 75 8F 
354b0     34 8F BE 8F 
354b4     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
354b8     84 8F 87 8F 
354bc     CC 8F 56 90 
354c0     67 91 49 80 
354c4     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
354c8     46 77 A6 66 
354cc     E8 66 B0 67 
354d0     AD 67 ED 67 
354d4     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
354d8     A2 67 E3 67 
354dc     9D 67 9A 67 
354e0     98 67 94 67 
354e4     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
354e8     49 67 CD 67 
354ec     28 65 5F 6E 
354f0     82 67 3A 01 
354f4     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
354f8     C2 91 A9 8F 
354fc     EF 8F AE 8F 
35500     F4 8F B5 8F 
35504     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
35508     01 90 03 90 
3550c     07 90 09 90 
35510     0C 90 53 90 
35514     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
35518     18 90 44 93 
3551c     85 84 D6 9D 
35520     87 1F 2F 75 
35524     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
35528     C4 68 F6 67 
3552c     BE 68 F1 67 
35530     76 68 2E 68 
35534     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
35538     27 68 24 68 
3553c     64 68 1E 68 
35540     5F 68 19 68 
35544     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
35548     DC 68 56 72 
3554c     7E 36 C2 B8 
35550     D7 84 73 90 
35554     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
35558     7B 90 7F 90 
3555c     82 90 84 90 
35560     CB 90 8B 90 
35564     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
35568     D7 90 96 90 
3556c     20 91 59 90 
35570     25 91 A2 90 
35574     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
35578     D0 89 40 EE 
3557c     12 64 C4 71 
35580     29 66 0C 69 
35584     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
35588     C0 68 02 69 
3558c     FE 68 FB 68 
35590     F9 68 F6 68 
35594     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
35598     EE 68 A8 68 
3559c     2C 69 5F 68 
355a0     E2 68 81 66 
355a4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
355a8     1E EB A6 8A 
355ac     73 8B 5E 93 
355b0     7B 90 48 91 
355b4     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
355b8     0D 91 11 91 
355bc     14 91 16 91 
355c0     5C 91 1C 91 
355c4     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
355c8     68 91 AF 91 
355cc     2A 91 B5 91 
355d0     75 91 1A 94 
355d4     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
355d8     70 0E CB 6C 
355dc     5D 6E C4 67 
355e0     99 69 54 69 
355e4     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
355e8     D2 69 49 69 
355ec     89 69 86 69 
355f0     40 69 C4 69 
355f4     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
355f8     35 69 76 69 
355fc     58 67 EB 6D 
35600     E9 6D 89 0F 
35604     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
35608     33 94 94 91 
3560c     D9 91 56 91 
35610     E0 91 9F 91 
35614     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
35618     EC 91 EE 91 
3561c     F1 91 F4 91 
35620     F7 91 3D 92 
35624     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
35628     46 92 21 94 
3562c     11 89 A4 9D 
35630     FD 0E 8F 6C 
35634     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
35638     28 6A E1 69 
3563c     65 6A 1F 6A 
35640     5F 6A 1A 6A 
35644     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
35648     54 6A 0F 6A 
3564c     4F 6A 09 6A 
35650     06 6A 03 6A 
35654     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
35658     23 68 69 77 
3565c     3A 4D 38 CA 
35660     38 86 4E 91 
35664     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
35668     64 92 24 92 
3566c     6A 92 2A 92 
35670     70 92 30 92 
35674     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
35678     7B 92 7E 92 
3567c     C5 92 84 92 
35680     CB 92 8A 92 
35684     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
35688     4D 8D F9 E2 
3568c     97 59 FE 74 
35690     DB 68 6D 6A 
35694     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
35698     A8 6A A5 6A 
3569c     A3 6A 9F 6A 
356a0     9D 6A 9B 6A 
356a4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
356a8     D6 6A 8F 6A 
356ac     CF 6A 46 6A 
356b0     CA 6A E1 67 
356b4     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
356b8     D3 F7 15 92 
356bc     90 8C BF 94 
356c0     A6 92 EB 92 
356c4     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
356c8     B1 92 F7 92 
356cc     FA 92 FD 92 
356d0     00 93 02 93 
356d4     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
356d8     4F 93 52 93 
356dc     54 93 22 94 
356e0     5A 93 8F 88 
356e4     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
356e8     1C 77 07 6C 
356ec     E8 69 7A 6B 
356f0     34 6B 75 6B 
356f4     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
356f8     29 6B 26 6B 
356fc     24 6B 21 6B 
35700     1D 6B 5E 6B 
35704     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
35708     12 6B 52 6B 
3570c     34 69 34 6E 
35710     BA 73 A4 24 
35714     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
35718     7A 94 B3 93 
3571c     72 93 31 93 
35720     78 93 7A 93 
35724     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
35728     83 93 86 93 
3572c     89 93 D0 93 
35730     D2 93 D5 93 
35734     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
35738     DD 93 40 96 
3573c     30 8B 99 9C 
35740     52 10 94 71 
35744     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
35748     46 6C 79 6B 
3574c     40 6C B7 6B 
35750     F7 6B B1 6B 
35754     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
35758     EC 6B A5 6B 
3575c     A2 6B 9F 6B 
35760     9D 6B 9A 6B 
35764     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
35768     C8 6A E4 76 
3576c     20 4B F9 CE 
35770     2E 8A 1A 92 
35774     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
35778     FB 93 BA 93 
3577c     01 94 03 94 
35780     4A 94 09 94 
35784     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
35788     55 94 14 94 
3578c     9E 94 1A 94 
35790     61 94 20 94 
35794     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
35798     3E 87 E5 CD 
3579c     5F 50 6C 78 
357a0     B5 6A 04 6C 
357a4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
357a8     83 6C 7F 6C 
357ac     7C 6C 36 6C 
357b0     76 6C 74 6C 
357b4     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
357b8     6B 6C 25 6C 
357bc     66 6C 1F 6C 
357c0     1D 6C 41 6A 
357c4     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
357c8     BA FA FC 94 
357cc     5B 8D 97 96 
357d0     3B 94 C5 94 
357d4     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
357d8     89 94 8C 94 
357dc     8F 94 92 94 
357e0     94 94 DB 94 
357e4     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
357e8     E4 94 E7 94 
357ec     2D 95 74 95 
357f0     C8 96 15 89 
357f4     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
357f8     CB 75 31 6F 
357fc     7E 6B 10 6D 
35800     C9 6C 0A 6D 
35804     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
35808     BD 6C FF 6C 
3580c     FB 6C F9 6C 
35810     B2 6C F3 6C 
35814     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
35818     A7 6C E8 6C 
3581c     0D 6B 85 6F 
35820     C7 74 10 28 
35824     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
35828     96 96 47 95 
3582c     06 95 0A 95 
35830     0C 95 0F 95 
35834     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
35838     17 95 5E 95 
3583c     61 95 63 95 
35840     22 95 AC 95 
35844     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
35848     72 95 17 98 
3584c     59 8E 01 96 
35850     CF FC 5A 68 
35854     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
35858     96 6D 50 6D 
3585c     D5 6D 4A 6D 
35860     8C 6D 89 6D 
35864     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
35868     80 6D 3A 6D 
3586c     7A 6D 77 6D 
35870     75 6D 71 6D 
35874     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
35878     18 6C BC 78 
3587c     9A 4F 7E CF 
35880     1F 89 F1 93 
35884     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
35888     D2 95 4E 95 
3588c     D7 95 53 95 
35890     DD 95 E0 95 
35894     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
35898     A5 95 EB 95 
3589c     EE 95 F0 95 
358a0     37 96 B3 95 
358a4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
358a8     1A 98 D5 8D 
358ac     C5 9F CD 0F 
358b0     0F 71 F3 73 
358b4     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
358b8     D9 6D 5E 6E 
358bc     D3 6D 58 6E 
358c0     12 6E 0F 6E 
358c4     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
358c8     49 6E BF 6D 
358cc     87 6E 76 6D 
358d0     81 6E 11 6B 
358d4     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
358d8     3F 09 44 95 
358dc     E5 8D 3F 99 
358e0     D4 95 A2 96 
358e4     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
358e8     23 96 69 96 
358ec     6B 96 6E 96 
358f0     71 96 74 96 
358f4     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
358f8     BF 96 3C 96 
358fc     C6 96 C8 96 
35900     A3 98 51 8D 
35904     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
35908     CF 75 29 73 
3590c     90 6C EC 6E 
35910     62 6E E7 6E 
35914     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
35918     9A 6E 98 6E 
3591c     95 6E 91 6E 
35920     8E 6E CF 6E 
35924     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
35928     40 6E C3 6E 
3592c     E8 6C 45 6F 
35930     A5 7B C9 35 
35934     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
35938     2D 98 23 97 
3593c     E1 96 A0 96 
35940     A4 96 EA 96 
35944     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
35948     AF 96 F4 96 
3594c     F8 96 3E 97 
35950     FD 96 43 97 
35954     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
35958     08 97 6B 99 
3595c     D6 92 88 91 
35960     D8 EE 84 66 
35964     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
35968     2E 6F E7 6E 
3596c     6C 6F 24 6F 
35970     21 6F 1F 6F 
35974     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
35978     17 6F 13 6F 
3597c     54 6F 0E 6F 
35980     0B 6F 4B 6F 
35984     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
35988     27 6D 1C 7B 
3598c     19 59 9F DB 
35990     66 8E BC 94 
35994     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
35998     67 97 26 97 
3599c     6D 97 2B 97 
359a0     72 97 32 97 
359a4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
359a8     C1 97 7F 97 
359ac     C6 97 85 97 
359b0     CB 97 CE 97 
359b4     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
359b8     EC 8A C4 C6 
359bc     68 4C F4 7D 
359c0     63 6E E8 6E 
359c4     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
359c8     ED 6F A7 6F 
359cc     E7 6F A0 6F 
359d0     E1 6F 9B 6F 
359d4     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
359d8     D5 6F 8F 6F 
359dc     CE 6F 45 6F 
359e0     86 6F 68 6D 
359e4     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
359e8     C0 13 AD A2 
359ec     A7 8E 79 99 
359f0     E6 97 E8 97 
359f4     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
359f8     F1 97 F3 97 
359fc     F6 97 F9 97 
35a00     FB 97 FE 97 
35a04     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
35a08     4A 98 0A 98 
35a0c     93 98 0F 98 
35a10     7F 9B BF 8C 
35a14     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
35a18     91 7B 62 73 
35a1c     1A 6E B9 70 
35a20     EB 6F B3 70 
35a24     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
35a28     25 70 20 70 
35a2c     1E 70 1B 70 
35a30     18 70 15 70 
35a34     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
35a38     0D 70 09 70 
35a3c     07 70 03 70 
35a40     01 70 FD 6F 
35a44     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
35a48     F6 6F F2 6F 
35a4c     EF 6F EC 6F 
35a50     2C 70 E6 6F 
35a54     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
35a58     DD 6F 97 6F 
35a5c     D7 6F 84 6E 
35a60     8F 6F 3F 7D 
35a64     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
35a66     FF FF FF FF 
35a6a     FF FF       | atarist_spl file "atarist.spl" '512
35a6c     00 00 00 00 
35a70     00 00 00 00 
35a74     00 00       | 	byte	$00[10]
35a76     17 7F F2 7F 
35a7a     B2 7F 72 7F 
35a7e     33 7F F4 7E 
35a82     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
35a86     36 7E F5 7D 
35a8a     E9 51 F2 0D 
35a8e     8E 00 F3 FD 
35a92     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
35a96     57 FD 58 FD 
35a9a     5B FD 5C FD 
35a9e     5C FD 60 7D 
35aa2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
35aa6     D6 7C 98 7C 
35aaa     59 7C 1A 7C 
35aae     DC 7B 9E 7B 
35ab2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
35ab6     F3 05 00 FD 
35aba     41 FB EA FA 
35abe     D9 FA DB FA 
35ac2     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
35ac6     E4 FA 9B 36 
35aca     F8 7A C0 7A 
35ace     84 7A 45 7A 
35ad2     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
35ad6     8E 79 51 79 
35ada     15 79 D7 78 
35ade     3C 1F EB FF 
35ae2     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
35ae6     6D F8 65 F8 
35aea     68 F8 6D F8 
35aee     70 F8 74 F8 
35af2     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
35af6     AB 60 79 60 
35afa     4B 60 1A 60 
35afe     E9 5F B9 5F 
35b02     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
35b06     FB 59 B2 0B 
35b0a     92 FA 3A F7 
35b0e     96 F6 79 F6 
35b12     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
35b16     82 F6 86 F6 
35b1a     8C F6 DB 5D 
35b1e     F1 5E C1 5E 
35b22     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
35b26     34 5E 04 5E 
35b2a     D6 5D A6 5D 
35b2e     78 5D D4 3E 
35b32     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
35b36     27 F5 BA F4 
35b3a     AB F4 AD F4 
35b3e     B2 F4 B8 F4 
35b42     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
35b46     26 5D 2B 5D 
35b4a     FC 5C CD 5C 
35b4e     9F 5C 70 5C 
35b52     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
35b56     E5 5B B8 5B 
35b5a     DB 24 A7 FC 
35b5e     D1 F4 4D F3 
35b62     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
35b66     04 F3 0B F3 
35b6a     11 F3 16 F3 
35b6e     DE 18 98 5B 
35b72     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
35b76     4E 4A 29 48 
35b7a     A0 47 6A 47 
35b7e     43 47 20 47 
35b82     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
35b86     E2 F6 98 F2 
35b8a     C5 F1 A3 F1 
35b8e     A3 F1 A8 F1 
35b92     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
35b96     BF F1 00 3D 
35b9a     EF 46 CD 46 
35b9e     AA 46 86 46 
35ba2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
35ba6     1C 46 F9 45 
35baa     D7 45 EE 43 
35bae     DE 02 E8 F3 
35bb2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
35bb6     61 F0 65 F0 
35bba     6D F0 74 F0 
35bbe     7C F0 84 F0 
35bc2     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
35bc6     8E 45 6D 45 
35bca     49 45 27 45 
35bce     05 45 E1 44 
35bd2     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
35bd6     F1 2F A9 FB 
35bda     8B F1 9B EF 
35bde     40 EF 36 EF 
35be2     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
35be6     4D EF 56 EF 
35bea     5E EF 7B 44 
35bee     8C 44 69 44 
35bf2     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
35bf6     03 44 E1 43 
35bfa     C0 43 F5 37 
35bfe     69 33 0F 11 
35c02     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
35c06     66 EE 37 EE 
35c0a     38 EE 40 EE 
35c0e     48 EE 51 EE 
35c12     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
35c16     7D 32 6A 32 
35c1a     51 32 37 32 
35c1e     1F 32 05 32 
35c22     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
35c26     B9 31 A1 31 
35c2a     F1 04 F4 F1 
35c2e     50 EE A0 ED 
35c32     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
35c36     93 ED 9A ED 
35c3a     A4 ED AD ED 
35c3e     F4 27 C1 31 
35c42     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
35c46     78 31 5F 31 
35c4a     46 31 2E 31 
35c4e     15 31 FC 30 
35c52     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
35c56     C4 EF 4A ED 
35c5a     DC EC CB EC 
35c5e     D2 EC DA EC 
35c62     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
35c66     F9 EC 64 2F 
35c6a     0A 31 F1 30 
35c6e     D9 30 C0 30 
35c72     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
35c76     78 30 5F 30 
35c7a     46 30 38 23 
35c7e     A6 F6 19 EE 
35c82     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
35c86     20 EC 28 EC 
35c8a     32 EC 3C EC 
35c8e     47 EC 51 EC 
35c92     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
35c96     A3 22 93 22 
35c9a     7F 22 6E 22 
35c9e     5D 22 4C 22 
35ca2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
35ca6     77 09 76 F1 
35caa     CC EC F0 EB 
35cae     CD EB CE EB 
35cb2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
35cb6     ED EB F5 EB 
35cba     3E F6 6B 22 
35cbe     5F 22 4E 22 
35cc2     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
35cc6     1B 22 0B 22 
35cca     FA 21 E9 21 
35cce     D8 21 4D FF 
35cd2     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
35cd6     92 EB 7B EB 
35cda     82 EB 8C EB 
35cde     97 EB A1 EB 
35ce2     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
35ce6     15 22 04 22 
35cea     F3 21 E3 21 
35cee     D2 21 C0 21 
35cf2     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
35cf6     8E 21 7D 21 
35cfa     9A F8 A4 ED 
35cfe     8E EB 2F EB 
35d02     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
35d06     37 EB 42 EB 
35d0a     4C EB 57 EB 
35d0e     B2 17 22 19 
35d12     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
35d16     FD 18 EF 18 
35d1a     E3 18 D6 18 
35d1e     CA 18 BD 18 
35d22     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
35d26     60 EC 35 EB 
35d2a     01 EB 01 EB 
35d2e     0C EB 16 EB 
35d32     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
35d36     34 EB D0 18 
35d3a     00 19 F4 18 
35d3e     E8 18 DA 18 
35d42     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
35d46     B6 18 A9 18 
35d4a     9D 18 91 05 
35d4e     F0 EF CA EB 
35d52     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
35d56     E8 EA F2 EA 
35d5a     FE EA 07 EB 
35d5e     12 EB C2 EF 
35d62     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
35d66     D9 18 CD 18 
35d6a     C0 18 B3 18 
35d6e     A7 18 9B 18 
35d72     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
35d76     B8 FC 30 EE 
35d7a     61 EB DC EA 
35d7e     CD EA D2 EA 
35d82     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
35d86     F3 EA FE EA 
35d8a     D2 09 D1 18 
35d8e     C3 18 17 18 
35d92     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
35d96     66 11 52 11 
35d9a     49 11 41 11 
35d9e     38 11 E0 F4 
35da2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
35da6     C9 EA C5 EA 
35daa     CF EA DB EA 
35dae     E6 EA EF EA 
35db2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
35db6     89 11 80 11 
35dba     78 11 6E 11 
35dbe     67 11 5D 11 
35dc2     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
35dc6     43 11 32 0D 
35dca     9C F1 07 EC 
35dce     F8 EA CD EA 
35dd2     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
35dd6     E4 EA ED EA 
35dda     F8 EA 02 EB 
35dde     55 11 91 11 
35de2     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
35de6     75 11 6E 11 
35dea     64 11 5E 11 
35dee     54 11 4A 11 
35df2     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
35df6     A8 EB F1 EA 
35dfa     D9 EA DC EA 
35dfe     E8 EA F1 EA 
35e02     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
35e06     A6 EB 9E 11 
35e0a     A0 11 96 11 
35e0e     8D 11 85 11 
35e12     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
35e16     6A 11 CA 0D 
35e1a     36 0B 57 F8 
35e1e     6C ED 57 EB 
35e22     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
35e26     F4 EA FF EA 
35e2a     09 EB 15 EB 
35e2e     1E EB 1A FD 
35e32     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
35e36     ED 0A E8 0A 
35e3a     E2 0A DC 0A 
35e3e     D6 0A D1 0A 
35e42     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
35e46     F8 F3 BC EC 
35e4a     57 EB 1E EB 
35e4e     18 EB 24 EB 
35e52     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
35e56     42 EB 4D EB 
35e5a     08 09 20 0B 
35e5e     1A 0B 14 0B 
35e62     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
35e66     04 0B FE 0A 
35e6a     F9 0A F2 0A 
35e6e     84 08 3A F1 
35e72     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
35e76     42 EB 42 EB 
35e7a     4E EB 57 EB 
35e7e     62 EB 6B EB 
35e82     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
35e86     48 0B 43 0B 
35e8a     3C 0B 36 0B 
35e8e     31 0B 2C 0B 
35e92     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
35e96     1B 0B 5C 00 
35e9a     6A EF 1B EC 
35e9e     81 EB 6A EB 
35ea2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
35ea6     85 EB 8E EB 
35eaa     99 EB A3 EB 
35eae     DD 05 E5 05 
35eb2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
35eb6     DB 05 D8 05 
35eba     D5 05 D1 05 
35ebe     D0 05 CB 05 
35ec2     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
35ec6     0C EC BB EB 
35eca     B3 EB BB EB 
35ece     C5 EB D0 EB 
35ed2     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
35ed6     E4 F7 2C 06 
35eda     28 06 24 06 
35ede     22 06 1F 06 
35ee2     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
35ee6     16 06 14 06 
35eea     0F 06 D0 F3 
35eee     65 ED 2D EC 
35ef2     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
35ef6     01 EC 0A EC 
35efa     14 EC 1E EC 
35efe     29 EC FB 03 
35f02     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
35f06     63 06 60 06 
35f0a     5E 06 59 06 
35f0e     58 06 54 06 
35f12     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
35f16     69 F1 21 ED 
35f1a     55 EC 33 EC 
35f1e     36 EC 40 EC 
35f22     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
35f26     5C EC 68 EC 
35f2a     92 02 D9 02 
35f2e     D7 02 D7 02 
35f32     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
35f36     D1 02 D1 02 
35f3a     CE 02 CD 02 
35f3e     5D FC 80 EF 
35f42     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
35f46     83 EC 8A EC 
35f4a     93 EC 9C EC 
35f4e     A5 EC B1 EC 
35f52     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
35f56     2B 03 2A 03 
35f5a     29 03 26 03 
35f5e     25 03 24 03 
35f62     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
35f66     1F 03 70 F7 
35f6a     D0 EE 27 ED 
35f6e     DB EC D4 EC 
35f72     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
35f76     F0 EC FA EC 
35f7a     02 ED F9 F4 
35f7e     7B 03 7C 03 
35f82     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
35f86     75 03 73 03 
35f8a     72 03 70 03 
35f8e     6D 03 6C 03 
35f92     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
35f96     54 ED 22 ED 
35f9a     22 ED 2C ED 
35f9e     35 ED 3F ED 
35fa2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
35fa6     14 01 C3 03 
35faa     C1 03 C0 03 
35fae     5F 01 A5 00 
35fb2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
35fb6     7B 00 7C 00 
35fba     20 00 85 F1 
35fbe     2A EE 89 ED 
35fc2     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
35fc6     80 ED 87 ED 
35fca     90 ED 9A ED 
35fce     A3 ED 73 00 
35fd2     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
35fd6     D0 00 D0 00 
35fda     D0 00 D0 00 
35fde     D0 00 CF 00 
35fe2     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
35fe6     80 F0 3D EE 
35fea     D5 ED C7 ED 
35fee     CD ED D6 ED 
35ff2     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
35ff6     F2 ED FA ED 
35ffa     1D 01 29 01 
35ffe     27 01 27 01 
36002     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
36006     25 01 26 01 
3600a     26 01 23 01 
3600e     D0 F7 EC EF 
36012     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
36016     1C EE 24 EE 
3601a     2D EE 37 EE 
3601e     40 EE 47 EE 
36022     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
36026     7D 01 7B 01 
3602a     7A 01 7A 01 
3602e     79 01 78 01 
36032     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
36036     84 FE DE F3 
3603a     6C EF 93 EE 
3603e     72 EE 72 EE 
36042     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
36046     8B EE 95 EE 
3604a     9E EE 15 FC 
3604e     67 FE 67 FE 
36052     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
36056     6B FE 6B FE 
3605a     6D FE 6D FE 
3605e     6D FE 6F FE 
36062     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
36066     DF EE CC EE 
3606a     CF EE D9 EE 
3606e     E1 EE EA EE 
36072     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
36076     5A FE C4 FE 
3607a     C3 FE C5 FE 
3607e     C6 FE C6 FE 
36082     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
36086     C8 FE C7 FE 
3608a     DA FB 85 F1 
3608e     8D EF 31 EF 
36092     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
36096     34 EF 3E EF 
3609a     46 EF 4F EF 
3609e     57 EF 0D FF 
360a2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
360a6     1F FF 1F FF 
360aa     21 FF 21 FF 
360ae     21 FF 21 FF 
360b2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
360b6     15 F1 BE EF 
360ba     84 EF 7E EF 
360be     88 EF 8F EF 
360c2     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
360c6     A9 EF 06 F2 
360ca     A6 FC AB FC 
360ce     AD FC AE FC 
360d2     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
360d6     B2 FC B4 FC 
360da     B6 FC B7 FC 
360de     8B F4 BD F0 
360e2     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
360e6     E4 EF EE EF 
360ea     F6 EF FD EF 
360ee     04 F0 0E F0 
360f2     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
360f6     0B FD 0D FD 
360fa     0F FD 11 FD 
360fe     11 FD 13 FD 
36102     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
36106     17 FD 64 F3 
3610a     CD F0 52 F0 
3610e     41 F0 45 F0 
36112     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
36116     5B F0 64 F0 
3611a     6D F0 FB FC 
3611e     65 FD 68 FD 
36122     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
36126     6C FD 6D FD 
3612a     6F FD 70 FD 
3612e     72 FD B3 FB 
36132     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
36136     A4 F0 99 F0 
3613a     A0 F0 A8 F0 
3613e     AE F0 B9 F0 
36142     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
36146     CB FB DD FB 
3614a     DE FB E0 FB 
3614e     E3 FB E3 FB 
36152     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
36156     E9 FB EC FB 
3615a     62 F7 27 F2 
3615e     2A F1 FF F0 
36162     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
36166     0C F1 13 F1 
3616a     1B F1 23 F1 
3616e     33 F2 3C FC 
36172     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
36176     42 FC 45 FC 
3617a     47 FC 48 FC 
3617e     4A FC 4C FC 
36182     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
36186     20 F2 77 F1 
3618a     5C F1 5F F1 
3618e     64 F1 6C F1 
36192     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
36196     83 F1 DC F8 
3619a     9A FC 9A FC 
3619e     9B FC 9E FC 
361a2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
361a6     A3 FC A4 FC 
361aa     A6 FC A9 FC 
361ae     90 F4 33 F2 
361b2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
361b6     BA F1 BF F1 
361ba     C7 F1 CE F1 
361be     D6 F1 DC F1 
361c2     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
361c6     F3 FC F5 FC 
361ca     FE FB 79 FB 
361ce     62 FB 5F FB 
361d2     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
361d6     6F FA AF F3 
361da     53 F2 12 F2 
361de     0F F2 15 F2 
361e2     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
361e6     2A F2 32 F2 
361ea     38 F2 9A FB 
361ee     AF FB B1 FB 
361f2     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
361f6     B7 FB B8 FB 
361fa     BA FB BC FB 
361fe     C1 FB 3B F8 
36202     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
36206     6E F2 6C F2 
3620a     74 F2 7A F2 
3620e     81 F2 87 F2 
36212     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
36216     06 FC 09 FC 
3621a     0C FC 0E FC 
3621e     0F FC 12 FC 
36222     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
36226     17 FC 1A FC 
3622a     B2 F6 7B F3 
3622e     DD F2 C5 F2 
36232     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
36236     D4 F2 DB F2 
3623a     E0 F2 E8 F2 
3623e     28 F8 60 FC 
36242     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
36246     64 FC 66 FC 
3624a     68 FC 6A FC 
3624e     6D FC 52 FC 
36252     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
36256     78 F3 24 F3 
3625a     1A F3 1E F3 
3625e     24 F3 2A F3 
36262     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
36266     3D F3 80 FA 
3626a     0C FB 0F FB 
3626e     10 FB 14 FB 
36272     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
36276     1B FB 1D FB 
3627a     1F FB 92 FA 
3627e     DE F4 AE F3 
36282     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
36286     79 F3 7E F3 
3628a     84 F3 8C F3 
3628e     92 F3 97 F3 
36292     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
36296     67 FB 69 FB 
3629a     6B FB 6F FB 
3629e     71 FB 72 FB 
362a2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
362a6     E3 F8 BA F4 
362aa     EE F3 CC F3 
362ae     CA F3 CF F3 
362b2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
362b6     E2 F3 E8 F3 
362ba     ED F3 B7 FB 
362be     BC FB BE FB 
362c2     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
362c6     C4 FB C6 FB 
362ca     C8 FB C9 FB 
362ce     CC FB 8F F7 
362d2     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
362d6     1E F4 1E F4 
362da     24 F4 2A F4 
362de     30 F4 38 F4 
362e2     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
362e6     AD FA B1 FA 
362ea     B4 FA B6 FA 
362ee     BA FA BB FA 
362f2     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
362f6     C2 FA C6 FA 
362fa     55 F6 C6 F4 
362fe     7D F4 72 F4 
36302     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
36306     83 F4 89 F4 
3630a     8F F4 94 F4 
3630e     66 FA 03 FB 
36312     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
36316     0A FB 0E FB 
3631a     10 FB 11 FB 
3631e     16 FB 18 FB 
36322     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
36326     F9 F4 CA F4 
3632a     C5 F4 CB F4 
3632e     D1 F4 D7 F4 
36332     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
36336     E8 F4 3F FB 
3633a     56 FB 58 FB 
3633e     5A FB 5E FB 
36342     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
36346     64 FB 64 FB 
3634a     69 FB 99 F9 
3634e     E9 F5 33 F5 
36352     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
36356     1D F5 22 F5 
3635a     27 F5 2E F5 
3635e     32 F5 37 F5 
36362     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
36366     BC FA BC FA 
3636a     C1 FA C2 FA 
3636e     C4 FA C8 FA 
36372     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
36376     F9 F7 DB F5 
3637a     78 F5 69 F5 
3637e     6A F5 70 F5 
36382     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
36386     7F F5 85 F5 
3638a     6E F7 06 FB 
3638e     0A FB 0B FB 
36392     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
36396     14 FB 15 FB 
3639a     18 FB 1B FB 
3639e     1D FB 70 F7 
363a2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
363a6     B6 F5 BB F5 
363aa     C0 F5 C6 F5 
363ae     CA F5 CF F5 
363b2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
363b6     54 FB 56 FB 
363ba     5A FB 5B FB 
363be     5E FB 5F FB 
363c2     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
363c6     67 FB 52 FB 
363ca     29 F7 33 F6 
363ce     06 F6 02 F6 
363d2     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
363d6     10 F6 16 F6 
363da     1A F6 1F F6 
363de     81 FB 9F FB 
363e2     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
363e6     51 FB F2 FA 
363ea     E3 FA E3 FA 
363ee     E5 FA E9 FA 
363f2     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
363f6     64 F6 4D F6 
363fa     4D F6 53 F6 
363fe     57 F6 5C F6 
36402     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
36406     6A F6 19 FB 
3640a     1E FB 22 FB 
3640e     23 FB 24 FB 
36412     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
36416     2C FB 2E FB 
3641a     32 FB F0 F8 
3641e     01 F7 A5 F6 
36422     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
36426     9F F6 A3 F6 
3642a     A6 F6 AC F6 
3642e     B0 F6 EB F7 
36432     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
36436     68 FB 6C FB 
3643a     6E FB 71 FB 
3643e     72 FB 74 FB 
36442     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
36446     71 F8 21 F7 
3644a     E5 F6 DD F6 
3644e     E1 F6 E6 F6 
36452     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
36456     F5 F6 F7 F6 
3645a     F7 FA AB FB 
3645e     AD FB AF FB 
36462     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
36466     B6 FB B9 FB 
3646a     BB FB BC FB 
3646e     21 FB 07 F8 
36472     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
36476     22 F7 26 F7 
3647a     2B F7 2E F7 
3647e     34 F7 38 F7 
36482     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
36486     13 FB 16 FB 
3648a     17 FB 1B FB 
3648e     1E FB 20 FB 
36492     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
36496     26 FB 77 FA 
3649a     F3 F7 7C F7 
3649e     67 F7 6A F7 
364a2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
364a6     74 F7 7A F7 
364aa     7E F7 82 F7 
364ae     53 FB 5A FB 
364b2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
364b6     5F FB 63 FB 
364ba     65 FB 67 FB 
364be     69 FB 6A FB 
364c2     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
364c6     B5 F7 A9 F7 
364ca     AD F7 B0 F7 
364ce     B5 F7 B8 F7 
364d2     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
364d6     6E F8 99 FB 
364da     9C FB 9D FB 
364de     9F FB A4 FB 
364e2     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
364e6     A9 FB AB FB 
364ea     AD FB 46 F9 
364ee     26 F8 F0 F7 
364f2     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
364f6     F4 F7 F8 F7 
364fa     FB F7 FF F7 
364fe     03 F8 65 FA 
36502     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
36506     2B FB 2F FB 
3650a     30 FB 32 FB 
3650e     34 FB 38 FB 
36512     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
36516     E9 F8 4A F8 
3651a     2E F8 2C F8 
3651e     2F F8 36 F8 
36522     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
36526     41 F8 44 F8 
3652a     4A FB 67 FB 
3652e     68 FB 6B FB 
36532     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
36536     73 FB 74 FB 
3653a     78 FB 7A FB 
3653e     14 FB E7 F8 
36542     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
36546     6D F8 70 F8 
3654a     73 F8 78 F8 
3654e     7C F8 80 F8 
36552     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
36556     A6 FB A7 FB 
3655a     A9 FB AC FB 
3655e     AF FB B1 FB 
36562     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
36566     B7 FB 73 FA 
3656a     F8 F8 B4 F8 
3656e     A9 F8 AB F8 
36572     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
36576     B4 F8 B8 F8 
3657a     BB F8 FA F8 
3657e     64 FB 65 FB 
36582     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
36586     6D FB 6F FB 
3658a     70 FB 74 FB 
3658e     77 FB 77 FB 
36592     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
36596     E9 F8 E4 F8 
3659a     E8 F8 EB F8 
3659e     EE F8 F2 F8 
365a2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
365a6     B5 FA 9F FB 
365aa     A1 FB A4 FB 
365ae     A5 FB A9 FB 
365b2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
365b6     AE FB B1 FB 
365ba     B2 FB C7 F9 
365be     39 F9 22 F9 
365c2     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
365c6     26 F9 2A F9 
365ca     2E F9 32 F9 
365ce     33 F9 BA FB 
365d2     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
365d6     DE FB E1 FB 
365da     E2 FB E4 FB 
365de     E5 FB E7 FB 
365e2     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
365e6     C5 F9 67 F9 
365ea     57 F9 56 F9 
365ee     5B F9 5F F9 
365f2     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
365f6     68 F9 6C F9 
365fa     0B FC 11 FC 
365fe     14 FC 15 FC 
36602     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
36606     B5 FB B5 FB 
3660a     B6 FB B8 FB 
3660e     E9 FA C8 F9 
36612     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
36616     90 F9 94 F9 
3661a     95 F9 99 F9 
3661e     9D F9 9F F9 
36622     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
36626     DE FB DF FB 
3662a     E2 FB E4 FB 
3662e     E6 FB E8 FB 
36632     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
36636     EF FB AC FA 
3663a     E9 F9 C7 F9 
3663e     C3 F9 C8 F9 
36642     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
36646     D0 F9 D4 F9 
3664a     D6 F9 0E FB 
3664e     11 FC 13 FC 
36652     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
36656     19 FC 1B FC 
3665a     1D FC 1E FC 
3665e     21 FC 22 FC 
36662     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
36666     F7 F9 F7 F9 
3666a     FB F9 FE F9 
3666e     00 FA 03 FA 
36672     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
36676     1B FC 45 FC 
3667a     46 FC 48 FC 
3667e     4A FC 4B FC 
36682     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
36686     52 FC 54 FC 
3668a     F3 FB 82 FA 
3668e     35 FA 28 FA 
36692     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
36696     31 FA 32 FA 
3669a     37 FA 37 FA 
3669e     3C FA 00 FC 
366a2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
366a6     09 FC 0B FC 
366aa     0F FC 12 FC 
366ae     12 FC 15 FC 
366b2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
366b6     8D FA 60 FA 
366ba     5B FA 5C FA 
366be     60 FA 61 FA 
366c2     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
366c6     6C FA 6D FA 
366ca     37 FC 3A FC 
366ce     3B FC 3D FC 
366d2     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
366d6     43 FC 44 FC 
366da     45 FC 47 FC 
366de     51 FB AB FA 
366e2     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
366e6     8E FA 91 FA 
366ea     93 FA 95 FA 
366ee     98 FA 9B FA 
366f2     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
366f6     68 FC 6A FC 
366fa     6C FC 6E FC 
366fe     70 FC 72 FC 
36702     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
36706     76 FC 3B FB 
3670a     D0 FA BB FA 
3670e     B9 FA BD FA 
36712     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
36716     C4 FA C6 FA 
3671a     CA FA 13 FC 
3671e     3A FC 3A FC 
36722     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
36726     41 FC 43 FC 
3672a     44 FC 47 FC 
3672e     48 FC 3C FC 
36732     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
36736     E6 FA E8 FA 
3673a     EB FA EE FA 
3673e     F0 FA F2 FA 
36742     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
36746     61 FC 66 FC 
3674a     68 FC 6B FC 
3674e     6C FC 6E FC 
36752     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
36756     73 FC 75 FC 
3675a     13 FC 3F FB 
3675e     17 FB 12 FB 
36762     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
36766     1A FB 1D FB 
3676a     1F FB 20 FB 
3676e     23 FB 92 FC 
36772     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
36776     96 FC 97 FC 
3677a     9A FC 9C FC 
3677e     9E FC 9F FC 
36782     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
36786     5A FB 41 FB 
3678a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3678e     73 32 00 04 
36792     00 00 10 00 
36796     00 00 00 00 
3679a     00 00 00 00 | atari2 file "atari2.s2"
3679e     43 87 43 87 
367a2     43 87 44 87 
367a6     43 87 44 87 
367aa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
367ae     43 87 43 87 
367b2     43 87 44 87 
367b6     43 87 43 87 
367ba     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
367be     44 87 43 87 
367c2     44 87 43 87 
367c6     43 87 43 87 
367ca     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
367ce     43 87 43 87 
367d2     44 87 43 87 
367d6     44 87 44 87 
367da     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
367de     43 87 43 87 
367e2     44 87 43 87 
367e6     43 87 42 87 
367ea     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
367ee     43 87 43 87 
367f2     43 87 43 87 
367f6     44 87 43 87 
367fa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
367fe     44 87 44 87 
36802     43 87 44 87 
36806     43 87 44 87 
3680a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3680e     44 87 43 87 
36812     44 87 44 87 
36816     43 87 43 87 
3681a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3681e     43 87 44 87 
36822     44 87 43 87 
36826     43 87 44 87 
3682a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3682e     43 87 43 87 
36832     43 87 43 87 
36836     43 87 43 87 
3683a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3683e     42 87 43 87 
36842     44 87 42 87 
36846     43 87 43 87 
3684a     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3684e     43 87 44 87 
36852     44 87 43 87 
36856     43 87 43 87 
3685a     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3685e     43 87 5C 87 
36862     EE 86 AC 87 
36866     4C 7C A3 78 
3686a     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3686e     BC 78 BB 78 
36872     BD 78 BC 78 
36876     BB 78 BD 78 
3687a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3687e     BB 78 BB 78 
36882     BC 78 BC 78 
36886     BC 78 BB 78 
3688a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3688e     BC 78 BC 78 
36892     BC 78 BC 78 
36896     BC 78 BC 78 
3689a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3689e     BB 78 BC 78 
368a2     A0 78 4C 7C 
368a6     11 7A 29 89 
368aa     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
368ae     44 87 43 87 
368b2     44 87 43 87 
368b6     43 87 42 87 
368ba     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
368be     43 87 43 87 
368c2     44 87 ED 85 
368c6     71 85 52 79 
368ca     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
368ce     BC 78 BC 78 
368d2     BC 78 BC 78 
368d6     BC 78 BC 78 
368da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
368de     BC 78 BC 78 
368e2     BC 78 A0 78 
368e6     CF 7A B9 81 
368ea     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
368ee     44 87 43 87 
368f2     43 87 44 87 
368f6     43 87 44 87 
368fa     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
368fe     43 87 43 87 
36902     43 87 43 87 
36906     44 87 43 87 
3690a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3690e     43 87 43 87 
36912     44 87 43 87 
36916     44 87 43 87 
3691a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3691e     44 87 43 87 
36922     43 87 43 87 
36926     5A 87 39 81 
3692a     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3692e     A5 78 BC 78 
36932     BB 78 BC 78 
36936     BB 78 BC 78 
3693a     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3693e     BC 78 BC 78 
36942     BC 78 BC 78 
36946     BC 78 8F 79 
3694a     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3694e     09 85 47 87 
36952     43 87 43 87 
36956     42 87 42 87 
3695a     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3695e     43 87 43 87 
36962     43 87 43 87 
36966     43 87 44 87 
3696a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3696e     43 87 43 87 
36972     44 87 43 87 
36976     42 87 43 87 
3697a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3697e     44 87 43 87 
36982     43 87 43 87 
36986     44 87 44 87 
3698a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3698e     94 78 55 7A 
36992     B9 78 BC 78 
36996     BC 78 BC 78 
3699a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3699e     BC 78 BB 78 
369a2     BC 78 BC 78 
369a6     BC 78 BC 78 
369aa     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
369ae     BB 78 BC 78 
369b2     BC 78 BC 78 
369b6     BB 78 BC 78 
369ba     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
369be     BC 78 BC 78 
369c2     BD 78 BC 78 
369c6     BC 78 BB 78 
369ca     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
369ce     94 78 B3 84 
369d2     36 84 4A 87 
369d6     43 87 43 87 
369da     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
369de     43 87 44 87 
369e2     43 87 43 87 
369e6     43 87 43 87 
369ea     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
369ee     43 87 44 87 
369f2     43 87 44 87 
369f6     43 87 43 87 
369fa     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
369fe     43 87 43 87 
36a02     43 87 45 87 
36a06     43 87 43 87 
36a0a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
36a0e     43 87 44 87 
36a12     44 87 44 87 
36a16     43 87 43 87 
36a1a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
36a1e     43 87 42 87 
36a22     43 87 43 87 
36a26     44 87 43 87 
36a2a     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
36a2e     54 87 3C 82 
36a32     36 83 52 79 
36a36     C6 78 BC 78 
36a3a     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
36a3e     BB 78 BB 78 
36a42     BC 78 BC 78 
36a46     BC 78 BC 78 
36a4a     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36a4e     BD 78 ED 78 
36a52     1B 79 F4 83 
36a56     4D 83 4E 87 
36a5a     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
36a5e     44 87 43 87 
36a62     42 87 44 87 
36a66     43 87 42 87 
36a6a     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
36a6e     43 87 54 87 
36a72     26 82 B3 84 
36a76     D6 77 BB 78 
36a7a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
36a7e     BC 78 BB 78 
36a82     BB 78 BB 78 
36a86     BB 78 BB 78 
36a8a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
36a8e     BC 78 BC 78 
36a92     26 79 18 75 
36a96     36 83 1F 84 
36a9a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
36a9e     43 87 43 87 
36aa2     43 87 43 87 
36aa6     43 87 44 87 
36aaa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
36aae     43 87 44 87 
36ab2     44 87 43 87 
36ab6     43 87 43 87 
36aba     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
36abe     43 87 43 87 
36ac2     43 87 43 87 
36ac6     44 87 44 87 
36aca     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
36ace     44 87 43 87 
36ad2     43 87 43 87 
36ad6     43 87 44 87 
36ada     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
36ade     44 87 44 87 
36ae2     44 87 43 87 
36ae6     44 87 43 87 
36aea     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
36aee     43 87 43 87 
36af2     43 87 44 87 
36af6     44 87 43 87 
36afa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
36afe     43 87 43 87 
36b02     43 87 43 87 
36b06     43 87 44 87 
36b0a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
36b0e     43 87 44 87 
36b12     43 87 44 87 
36b16     19 87 7D 86 
36b1a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
36b1e     B1 78 BC 78 
36b22     BC 78 BC 78 
36b26     BC 78 BC 78 
36b2a     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
36b2e     BC 78 BC 78 
36b32     BD 78 BC 78 
36b36     B7 78 3B 7B 
36b3a     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
36b3e     96 86 44 87 
36b42     43 87 43 87 
36b46     43 87 43 87 
36b4a     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
36b4e     44 87 44 87 
36b52     43 87 44 87 
36b56     43 87 44 87 
36b5a     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
36b5e     43 87 44 87 
36b62     43 87 44 87 
36b66     43 87 44 87 
36b6a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
36b6e     43 87 44 87 
36b72     43 87 43 87 
36b76     44 87 43 87 
36b7a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
36b7e     44 87 44 87 
36b82     43 87 43 87 
36b86     43 87 44 87 
36b8a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
36b8e     43 87 43 87 
36b92     43 87 43 87 
36b96     44 87 44 87 
36b9a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
36b9e     36 83 CF 7A 
36ba2     AB 78 BB 78 
36ba6     BC 78 BC 78 
36baa     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
36bae     BB 78 BC 78 
36bb2     BC 78 BC 78 
36bb6     BC 78 BC 78 
36bba     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
36bbe     BC 78 BC 78 
36bc2     BC 78 BB 78 
36bc6     BC 78 BC 78 
36bca     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
36bce     BB 78 BC 78 
36bd2     BB 78 BC 78 
36bd6     BC 78 BD 78 
36bda     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
36bde     BC 78 BC 78 
36be2     BC 78 BC 78 
36be6     BC 78 BD 78 
36bea     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
36bee     BC 78 BB 78 
36bf2     BC 78 BB 78 
36bf6     BB 78 BC 78 
36bfa     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
36bfe     BC 78 BC 78 
36c02     BC 78 BC 78 
36c06     BC 78 BB 78 
36c0a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
36c0e     BC 78 BC 78 
36c12     BC 78 BD 78 
36c16     BB 78 BC 78 
36c1a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
36c1e     BC 78 BC 78 
36c22     BC 78 BB 78 
36c26     BC 78 BB 78 
36c2a     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
36c2e     BB 78 BC 78 
36c32     BC 78 BC 78 
36c36     BC 78 BB 78 
36c3a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36c3e     BC 78 BC 78 
36c42     BC 78 BB 78 
36c46     BC 78 BB 78 
36c4a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36c4e     BC 78 BC 78 
36c52     BC 78 BC 78 
36c56     BB 78 BC 78 
36c5a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
36c5e     BC 78 9F 78 
36c62     52 79 B3 84 
36c66     2F 86 60 87 
36c6a     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
36c6e     44 87 43 87 
36c72     43 87 43 87 
36c76     43 87 43 87 
36c7a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
36c7e     43 87 43 87 
36c82     43 87 44 87 
36c86     43 87 43 87 
36c8a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
36c8e     43 87 43 87 
36c92     43 87 43 87 
36c96     43 87 44 87 
36c9a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
36c9e     44 87 44 87 
36ca2     5E 87 BC 80 
36ca6     FB 80 94 78 
36caa     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
36cae     BD 78 BC 78 
36cb2     BB 78 BC 78 
36cb6     BB 78 BB 78 
36cba     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
36cbe     BC 78 BB 78 
36cc2     BB 78 6B 79 
36cc6     D6 77 AC 87 
36cca     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
36cce     43 87 44 87 
36cd2     43 87 43 87 
36cd6     44 87 43 87 
36cda     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
36cde     43 87 44 87 
36ce2     43 87 5C 87 
36ce6     E7 80 00 80 
36cea     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
36cee     BC 78 BD 78 
36cf2     BC 78 BC 78 
36cf6     BC 78 BB 78 
36cfa     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36cfe     BC 78 BC 78 
36d02     BB 78 BC 78 
36d06     BB 78 BC 78 
36d0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36d0e     BB 78 BC 78 
36d12     BC 78 BC 78 
36d16     BC 78 BC 78 
36d1a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36d1e     BC 78 BC 78 
36d22     BC 78 BC 78 
36d26     A0 78 8D 7B 
36d2a     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
36d2e     60 87 43 87 
36d32     44 87 44 87 
36d36     43 87 43 87 
36d3a     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
36d3e     44 87 43 87 
36d42     43 87 43 87 
36d46     44 87 73 86 
36d4a     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
36d4e     51 7B B6 78 
36d52     BC 78 BD 78 
36d56     BC 78 BC 78 
36d5a     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36d5e     BB 78 BC 78 
36d62     BD 78 BB 78 
36d66     BC 78 BB 78 
36d6a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
36d6e     BC 78 BC 78 
36d72     BC 78 BC 78 
36d76     BB 78 BC 78 
36d7a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36d7e     BC 78 BB 78 
36d82     BB 78 BC 78 
36d86     BC 78 BB 78 
36d8a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
36d8e     22 8C AF 84 
36d92     48 87 43 87 
36d96     44 87 43 87 
36d9a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
36d9e     43 87 42 87 
36da2     43 87 43 87 
36da6     44 87 43 87 
36daa     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
36dae     43 87 43 87 
36db2     44 87 44 87 
36db6     43 87 43 87 
36dba     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
36dbe     43 87 43 87 
36dc2     43 87 43 87 
36dc6     44 87 43 87 
36dca     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
36dce     9F 8B D6 77 
36dd2     16 7C B3 78 
36dd6     BC 78 BB 78 
36dda     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
36dde     BB 78 BC 78 
36de2     BB 78 BC 78 
36de6     BC 78 BC 78 
36dea     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
36dee     BC 78 BB 78 
36df2     BB 78 BC 78 
36df6     BB 78 BC 78 
36dfa     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
36dfe     BB 78 BB 78 
36e02     BC 78 BC 78 
36e06     BC 78 BB 78 
36e0a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
36e0e     BC 78 BC 78 
36e12     BC 78 BD 78 
36e16     BB 78 BC 78 
36e1a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
36e1e     BC 78 BC 78 
36e22     BC 78 BB 78 
36e26     BC 78 BC 78 
36e2a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
36e2e     A8 78 54 7E 
36e32     F4 83 17 82 
36e36     50 87 43 87 
36e3a     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
36e3e     44 87 43 87 
36e42     44 87 43 87 
36e46     43 87 44 87 
36e4a     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
36e4e     43 87 28 87 
36e52     20 85 CF 7A 
36e56     70 7D AD 78 
36e5a     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
36e5e     BB 78 BC 78 
36e62     BC 78 BC 78 
36e66     BB 78 BB 78 
36e6a     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
36e6e     BB 78 B2 78 
36e72     9A 7C CF 7A 
36e76     4A 87 0D 87 
36e7a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
36e7e     43 87 44 87 
36e82     43 87 44 87 
36e86     43 87 43 87 
36e8a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
36e8e     44 87 43 87 
36e92     28 87 51 85 
36e96     11 7A 1E 7D 
36e9a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
36e9e     BC 78 BB 78 
36ea2     BC 78 BC 78 
36ea6     BC 78 BC 78 
36eaa     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
36eae     BB 78 BC 78 
36eb2     BB 78 BC 78 
36eb6     BC 78 BC 78 
36eba     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36ebe     BB 78 BC 78 
36ec2     BC 78 BC 78 
36ec6     BD 78 BB 78 
36eca     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
36ece     BC 78 BB 78 
36ed2     BC 78 BC 78 
36ed6     BC 78 BB 78 
36eda     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36ede     BC 78 BC 78 
36ee2     BC 78 BC 78 
36ee6     BB 78 BC 78 
36eea     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36eee     BC 78 BD 78 
36ef2     BC 78 BC 78 
36ef6     BC 78 BB 78 
36efa     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36efe     BC 78 BB 78 
36f02     BB 78 BC 78 
36f06     BC 78 BB 78 
36f0a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36f0e     BB 78 BB 78 
36f12     BB 78 BC 78 
36f16     B6 78 48 7D 
36f1a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
36f1e     56 87 43 87 
36f22     42 87 44 87 
36f26     44 87 43 87 
36f2a     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
36f2e     43 87 44 87 
36f32     43 87 44 87 
36f36     4C 87 7E 83 
36f3a     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
36f3e     F7 78 BC 78 
36f42     BC 78 BB 78 
36f46     BB 78 BC 78 
36f4a     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36f4e     BC 78 BB 78 
36f52     BC 78 BC 78 
36f56     BB 78 BC 78 
36f5a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
36f5e     BB 78 BC 78 
36f62     BC 78 BC 78 
36f66     BC 78 BB 78 
36f6a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36f6e     BC 78 BC 78 
36f72     BC 78 BC 78 
36f76     BC 78 BB 78 
36f7a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36f7e     BC 78 BB 78 
36f82     BB 78 BC 78 
36f86     BC 78 BB 78 
36f8a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36f8e     BC 78 BC 78 
36f92     BB 78 BC 78 
36f96     BC 78 BC 78 
36f9a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
36f9e     73 32 00 04 
36fa2     00 00 10 00 
36fa6     00 00 00 00 
36faa     00 00 00 00 | atari12 file "atari12.s2"
36fae     00 6D 00 6D 
36fb2     00 6D 00 6D 
36fb6     00 6D 00 6D 
36fba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36fbe     00 6D 00 6D 
36fc2     00 6D 00 6D 
36fc6     00 6D 00 6D 
36fca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36fce     00 6D 00 6D 
36fd2     00 6D 00 6D 
36fd6     00 6D 00 6D 
36fda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36fde     00 6D 00 6D 
36fe2     00 6D 00 6D 
36fe6     00 6D 00 6D 
36fea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36fee     00 6D 00 6D 
36ff2     00 6D 00 6D 
36ff6     00 6D 00 6D 
36ffa     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
36ffe     00 6C 00 6C 
37002     00 6C 00 6C 
37006     00 6C 00 6C 
3700a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3700e     00 6C 00 6C 
37012     00 6C 00 6C 
37016     00 6C 00 6C 
3701a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3701e     00 6C 00 6C 
37022     00 6C 00 6C 
37026     00 6C 00 6C 
3702a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3702e     00 6C 00 6C 
37032     00 6C 00 6C 
37036     00 6C 00 6C 
3703a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3703e     00 6C 00 6C 
37042     00 6C 00 6C 
37046     00 6C 00 6C 
3704a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3704e     00 6C 00 6C 
37052     00 6C 00 6C 
37056     00 6C 00 6C 
3705a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3705e     00 6C 00 6C 
37062     00 6C 00 6C 
37066     00 6C 00 6C 
3706a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3706e     00 6C 00 6C 
37072     00 6C 00 6C 
37076     00 6C 00 6C 
3707a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3707e     00 6C 00 6C 
37082     00 6C 00 6C 
37086     00 6C 00 6C 
3708a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3708e     00 6C 00 6C 
37092     00 6C 00 6C 
37096     00 6C 00 6C 
3709a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3709e     00 6C 00 6C 
370a2     00 6C 00 6C 
370a6     00 6C 00 6C 
370aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
370ae     00 6C 00 6B 
370b2     00 6B 00 6B 
370b6     00 6B 00 6B 
370ba     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
370be     00 6B 00 6B 
370c2     00 6B 00 6B 
370c6     00 6B 00 6B 
370ca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
370ce     00 6B 00 6B 
370d2     00 6B 00 6B 
370d6     00 6B 00 6B 
370da     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
370de     00 6B 00 6B 
370e2     00 6B 00 6B 
370e6     00 6B 00 6B 
370ea     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
370ee     00 6B 00 6B 
370f2     00 6B 00 6B 
370f6     00 6B 00 6B 
370fa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
370fe     00 6B 00 6B 
37102     00 6B 00 6B 
37106     00 6B 00 6B 
3710a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3710e     00 6B 00 6B 
37112     00 6B 00 6B 
37116     00 6B 00 6B 
3711a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3711e     00 6B 00 6B 
37122     00 6B 00 6B 
37126     00 6B 00 6B 
3712a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3712e     00 6B 00 6B 
37132     00 6B 00 6B 
37136     00 6B 00 6B 
3713a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3713e     00 6B 00 6B 
37142     00 6B 00 6B 
37146     00 6A 00 9D 
3714a     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3714e     00 9E 00 9E 
37152     00 9E 00 9E 
37156     00 9E 00 9E 
3715a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3715e     00 9E 00 9E 
37162     00 9E 00 9E 
37166     00 9E 00 9E 
3716a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3716e     00 9E 00 9E 
37172     00 9E 00 9E 
37176     00 9E 00 9E 
3717a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3717e     00 9E 00 9E 
37182     00 9E 00 9E 
37186     00 9E 00 9E 
3718a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3718e     00 9E 00 9E 
37192     00 9E 00 9E 
37196     00 9E 00 9E 
3719a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3719e     00 9E 00 9E 
371a2     00 9E 00 9E 
371a6     00 9E 00 9E 
371aa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
371ae     00 9E 00 9E 
371b2     00 9E 00 9E 
371b6     00 9E 00 9E 
371ba     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
371be     00 9E 00 9E 
371c2     00 9E 00 9E 
371c6     00 9E 00 9E 
371ca     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
371ce     00 9E 00 9E 
371d2     00 9E 00 9E 
371d6     00 9E 00 9E 
371da     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
371de     00 9F 00 9F 
371e2     00 9F 00 9F 
371e6     00 9F 00 9F 
371ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
371ee     00 9F 00 9F 
371f2     00 9F 00 9F 
371f6     00 9F 00 9F 
371fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
371fe     00 9F 00 9F 
37202     00 9F 00 9F 
37206     00 9F 00 9F 
3720a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3720e     00 9F 00 9F 
37212     00 9F 00 9F 
37216     00 9F 00 9F 
3721a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3721e     00 9F 00 9F 
37222     00 9F 00 9F 
37226     00 9F 00 9F 
3722a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3722e     00 9F 00 9F 
37232     00 9F 00 9F 
37236     00 9F 00 9F 
3723a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3723e     00 9F 00 9F 
37242     00 9F 00 9F 
37246     00 9F 00 9F 
3724a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3724e     00 9F 00 9F 
37252     00 9F 00 9F 
37256     00 9F 00 9F 
3725a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3725e     00 9F 00 9F 
37262     00 9F 00 9F 
37266     00 9F 00 9F 
3726a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3726e     00 9F 00 9F 
37272     00 9F 00 9F 
37276     00 9F 00 9F 
3727a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3727e     00 9F 00 9F 
37282     00 9F 00 9F 
37286     00 9F 00 9F 
3728a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3728e     00 9F 00 9F 
37292     00 9F 00 9F 
37296     00 9F 00 9F 
3729a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3729e     00 9F 00 9F 
372a2     00 9F 00 A0 
372a6     00 A0 00 A0 
372aa     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
372ae     00 A0 00 A0 
372b2     00 A0 00 A0 
372b6     00 A0 00 A0 
372ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
372be     00 A0 00 A0 
372c2     00 A0 00 A0 
372c6     00 A0 00 A0 
372ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
372ce     00 A0 00 A0 
372d2     00 A0 00 A0 
372d6     00 A0 00 A0 
372da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
372de     00 A0 00 A0 
372e2     00 A0 00 A0 
372e6     00 A0 00 A0 
372ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
372ee     00 A0 00 A0 
372f2     00 A0 00 A0 
372f6     00 A0 00 A0 
372fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
372fe     00 A0 00 A0 
37302     00 A0 00 A0 
37306     00 A0 00 A0 
3730a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3730e     00 A0 00 A0 
37312     00 A0 00 A0 
37316     00 A0 00 A0 
3731a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3731e     00 A0 00 A0 
37322     00 A0 00 A0 
37326     00 A0 00 A0 
3732a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3732e     00 A0 00 A0 
37332     00 A0 00 A0 
37336     00 A0 00 A0 
3733a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3733e     00 A0 00 A0 
37342     00 A0 00 A0 
37346     00 A0 00 A0 
3734a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3734e     00 A0 00 A0 
37352     00 A0 00 A0 
37356     00 A0 00 A0 
3735a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3735e     00 A0 00 A0 
37362     00 A0 00 A0 
37366     00 A0 00 A0 
3736a     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3736e     00 6D 00 6D 
37372     00 6D 00 6D 
37376     00 6D 00 6D 
3737a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3737e     00 6D 00 6D 
37382     00 6D 00 6D 
37386     00 6D 00 6D 
3738a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3738e     00 6D 00 6D 
37392     00 6D 00 6D 
37396     00 6D 00 6D 
3739a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3739e     00 6D 00 6D 
373a2     00 6D 00 6D 
373a6     00 6D 00 6D 
373aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
373ae     00 6D 00 6D 
373b2     00 6D 00 6D 
373b6     00 6D 00 6D 
373ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
373be     00 6D 00 6D 
373c2     00 6D 00 6D 
373c6     00 6D 00 6D 
373ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
373ce     00 6D 00 6D 
373d2     00 6D 00 6D 
373d6     00 6D 00 6D 
373da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
373de     00 6D 00 6D 
373e2     00 6D 00 6D 
373e6     00 6D 00 6D 
373ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
373ee     00 6D 00 6D 
373f2     00 A0 00 A0 
373f6     00 A0 00 A0 
373fa     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
373fe     00 A0 00 A0 
37402     00 A0 00 A0 
37406     00 A0 00 A0 
3740a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3740e     00 A0 00 A0 
37412     00 A0 00 A0 
37416     00 A0 00 A0 
3741a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3741e     00 A0 00 A0 
37422     00 A0 00 A0 
37426     00 A0 00 A0 
3742a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3742e     00 A0 00 A0 
37432     00 A0 00 A0 
37436     00 A0 00 A0 
3743a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3743e     00 A0 00 A0 
37442     00 A0 00 A0 
37446     00 A0 00 A0 
3744a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3744e     00 A0 00 A0 
37452     00 A0 00 A0 
37456     00 A0 00 A0 
3745a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3745e     00 A0 00 A0 
37462     00 A0 00 A0 
37466     00 A0 00 A0 
3746a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3746e     00 A0 00 A0 
37472     00 A0 00 A0 
37476     00 A0 00 A0 
3747a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3747e     00 6D 00 6D 
37482     00 6D 00 6D 
37486     00 6D 00 6D 
3748a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3748e     00 6D 00 6D 
37492     00 6D 00 6D 
37496     00 6D 00 6D 
3749a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3749e     00 6D 00 6D 
374a2     00 6D 00 6D 
374a6     00 6D 00 6D 
374aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374ae     00 6D 00 6D 
374b2     00 6D 00 6D 
374b6     00 6D 00 6D 
374ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374be     00 6D 00 6D 
374c2     00 6D 00 6D 
374c6     00 6D 00 6D 
374ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374ce     00 6D 00 6D 
374d2     00 6D 00 6D 
374d6     00 6D 00 6D 
374da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374de     00 6D 00 6D 
374e2     00 6D 00 6D 
374e6     00 6D 00 6D 
374ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374ee     00 6D 00 6D 
374f2     00 6D 00 6D 
374f6     00 6D 00 6D 
374fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374fe     00 6D 00 6D 
37502     00 6C 00 A0 
37506     00 9F 00 A0 
3750a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3750e     00 A0 00 A0 
37512     00 A0 00 A0 
37516     00 A0 00 A0 
3751a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3751e     00 A0 00 A0 
37522     00 A0 00 A0 
37526     00 A0 00 A0 
3752a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3752e     00 A0 00 A0 
37532     00 A0 00 A0 
37536     00 A0 00 A0 
3753a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3753e     00 A0 00 A0 
37542     00 A0 00 A0 
37546     00 A0 00 A0 
3754a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3754e     00 A0 00 A0 
37552     00 A0 00 A0 
37556     00 A0 00 A0 
3755a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3755e     00 A0 00 A0 
37562     00 A0 00 A0 
37566     00 A0 00 A0 
3756a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3756e     00 A0 00 A0 
37572     00 A0 00 A0 
37576     00 A0 00 A0 
3757a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3757e     00 A0 00 A0 
37582     00 A0 00 A0 
37586     00 A0 00 A0 
3758a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3758e     00 A0 00 A0 
37592     00 A0 00 A0 
37596     00 A0 00 A0 
3759a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3759e     00 A0 00 A0 
375a2     00 A0 00 A0 
375a6     00 A0 00 A0 
375aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
375ae     00 A0 00 A0 
375b2     00 A0 00 A0 
375b6     00 A0 00 A0 
375ba     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
375be     00 A1 00 A1 
375c2     00 A1 00 A1 
375c6     00 A1 00 A1 
375ca     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
375ce     00 A1 00 A1 
375d2     00 A1 00 A1 
375d6     00 A1 00 A1 
375da     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
375de     00 A1 00 A1 
375e2     00 A1 00 A1 
375e6     00 A1 00 A1 
375ea     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
375ee     00 A1 00 A1 
375f2     00 A1 00 A1 
375f6     00 A1 00 A1 
375fa     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
375fe     00 A1 00 A1 
37602     00 A1 00 A1 
37606     00 A1 00 A1 
3760a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3760e     00 A1 00 A1 
37612     00 A1 00 A1 
37616     00 6E 00 6E 
3761a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3761e     00 6E 00 6E 
37622     00 6E 00 6E 
37626     00 6E 00 6E 
3762a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3762e     00 6E 00 6E 
37632     00 6E 00 6E 
37636     00 6E 00 6E 
3763a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3763e     00 6E 00 6E 
37642     00 6E 00 6E 
37646     00 6E 00 6E 
3764a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3764e     00 6E 00 6D 
37652     00 6D 00 6D 
37656     00 6D 00 6D 
3765a     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3765e     00 6D 00 6D 
37662     00 6D 00 6D 
37666     00 6D 00 6D 
3766a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3766e     00 6D 00 6D 
37672     00 6D 00 6D 
37676     00 6D 00 6D 
3767a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3767e     00 6D 00 6D 
37682     00 6D 00 6D 
37686     00 6D 00 6D 
3768a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3768e     00 6D 00 6D 
37692     00 6D 00 6D 
37696     00 6D 00 6D 
3769a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3769e     00 6D 00 6D 
376a2     00 6D 00 6D 
376a6     00 6D 00 6D 
376aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
376ae     00 6D 00 6D 
376b2     00 6D 00 6D 
376b6     00 6D 00 6D 
376ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
376be     00 6D 00 6D 
376c2     00 6D 00 6D 
376c6     00 6D 00 6D 
376ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
376ce     00 6D 00 6D 
376d2     00 6D 00 6D 
376d6     00 6D 00 6D 
376da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
376de     00 6D 00 6D 
376e2     00 6D 00 6D 
376e6     00 6D 00 6D 
376ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
376ee     00 6D 00 6D 
376f2     00 6D 00 6D 
376f6     00 6D 00 6D 
376fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
376fe     00 6D 00 6D 
37702     00 6C 00 6C 
37706     00 6C 00 6C 
3770a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3770e     00 6C 00 6C 
37712     00 6C 00 6C 
37716     00 6C 00 6C 
3771a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3771e     00 6C 00 6C 
37722     00 6C 00 6C 
37726     00 9D 00 9F 
3772a     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3772e     00 9F 00 9F 
37732     00 9F 00 9F 
37736     00 A0 00 A0 
3773a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3773e     00 A0 00 A0 
37742     00 A0 00 A0 
37746     00 A0 00 A0 
3774a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3774e     00 A0 00 A0 
37752     00 A0 00 A0 
37756     00 A0 00 A0 
3775a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3775e     00 A0 00 A0 
37762     00 A0 00 A0 
37766     00 A0 00 A0 
3776a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3776e     00 A0 00 A0 
37772     00 A0 00 A0 
37776     00 A0 00 A0 
3777a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3777e     00 A0 00 A0 
37782     00 A0 00 A0 
37786     00 A0 00 A0 
3778a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3778e     00 A0 00 A0 
37792     00 A0 00 A0 
37796     00 A0 00 A0 
3779a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3779e     00 A0 00 A0 
377a2     00 A0 00 A0 
377a6     00 A0 00 A0 
377aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
377ae     01 00 00 00 
377b2     00 00 00 00 
377b6     00 00 00 00 
377ba     00 00 00 00 | mouse  file "mouse2.def"
377be     00 00 00 00 
377c2     00 00 00 00 
377c6     00 00 00 00 
377ca     00 00 00 00 | 	byte	$00[16]
377ce     01 01 00 00 
377d2     00 00 00 00 
377d6     00 00 00 00 
377da     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377de     00 00 00 00 
377e2     00 00 00 00 
377e6     00 00 00 00 
377ea     00 00 00 00 | 	byte	$00[16]
377ee     01 0D 01 00 
377f2     00 00 00 00 
377f6     00 00 00 00 
377fa     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377fe     00 00 00 00 
37802     00 00 00 00 
37806     00 00 00 00 
3780a     00 00 00 00 | 	byte	$00[16]
3780e     01 0D 0D 01 
37812     00 00 00 00 
37816     00 00 00 00 
3781a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3781e     00 00 00 00 
37822     00 00 00 00 
37826     00 00 00 00 
3782a     00 00 00 00 | 	byte	$00[16]
3782e     01 0D 0D 0D 
37832     01 00 00 00 
37836     00 00 00 00 
3783a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3783e     00 00 00 00 
37842     00 00 00 00 
37846     00 00 00 00 
3784a     00 00 00 00 | 	byte	$00[16]
3784e     01 0D 0D 0D 
37852     0D 01 00 00 
37856     00 00 00 00 
3785a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3785e     00 00 00 00 
37862     00 00 00 00 
37866     00 00 00 00 
3786a     00 00 00 00 | 	byte	$00[16]
3786e     01 0D 0D 0D 
37872     0D 0D 01 00 
37876     00 00 00 00 
3787a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3787e     00 00 00 00 
37882     00 00 00 00 
37886     00 00 00 00 
3788a     00 00 00 00 | 	byte	$00[16]
3788e     01 0D 0D 0D 
37892     0D 0D 0D 01 
37896     00 00 00 00 
3789a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3789e     00 00 00 00 
378a2     00 00 00 00 
378a6     00 00 00 00 
378aa     00 00 00 00 | 	byte	$00[16]
378ae     01 0D 0D 0D 
378b2     0D 0D 0D 0C 
378b6     01 00 00 00 
378ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
378be     00 00 00 00 
378c2     00 00 00 00 
378c6     00 00 00 00 
378ca     00 00 00 00 | 	byte	$00[16]
378ce     01 0D 0D 0D 
378d2     0D 0D 0D 0D 
378d6     0C 01 00 00 
378da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
378de     00 00 00 00 
378e2     00 00 00 00 
378e6     00 00 00 00 
378ea     00 00 00 00 | 	byte	$00[16]
378ee     01 0D 0D 0D 
378f2     0D 0D 0D 0D 
378f6     0D 0C 01 00 
378fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
378fe     00 00 00 00 
37902     00 00 00 00 
37906     00 00 00 00 
3790a     00 00 00 00 | 	byte	$00[16]
3790e     01 0D 0D 0D 
37912     0D 0D 0D 0D 
37916     0D 0D 0B 01 
3791a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3791e     00 00 00 00 
37922     00 00 00 00 
37926     00 00 00 00 
3792a     00 00 00 00 | 	byte	$00[16]
3792e     01 0D 0D 0D 
37932     0C 0D 0D 03 
37936     01 01 01 01 
3793a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3793e     00 00 00 00 
37942     00 00 00 00 
37946     00 00 00 00 
3794a     00 00 00 00 | 	byte	$00[16]
3794e     01 0D 0D 0C 
37952     01 09 0D 03 
37956     00 00 00 00 
3795a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3795e     00 00 00 00 
37962     00 00 00 00 
37966     00 00 00 00 
3796a     00 00 00 00 | 	byte	$00[16]
3796e     01 0D 0C 01 
37972     00 01 0D 0B 
37976     01 00 00 00 
3797a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3797e     00 00 00 00 
37982     00 00 00 00 
37986     00 00 00 00 
3798a     00 00 00 00 | 	byte	$00[16]
3798e     01 0C 01 00 
37992     00 01 0A 0D 
37996     01 00 00 00 
3799a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3799e     00 00 00 00 
379a2     00 00 00 00 
379a6     00 00 00 00 
379aa     00 00 00 00 | 	byte	$00[16]
379ae     01 01 00 00 
379b2     00 00 01 0D 
379b6     0B 01 00 00 
379ba     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
379be     00 00 00 00 
379c2     00 00 00 00 
379c6     00 00 00 00 
379ca     00 00 00 00 
379ce     00 00 00 00 
379d2     00 00       | 	byte	$00[22]
379d4     01 0B 0D 01 
379d8     00 00 00 00 
379dc     00 00 00 00 
379e0     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
379e4     00 00 00 00 
379e8     00 00 00 00 
379ec     00 00 00 00 
379f0     00 00 00 00 
379f4     00          | 	byte	$00[17]
379f5     01 01 00 00 
379f9     00 00 00 00 
379fd     00 00 00 00 
37a01     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37a05     00 00 00 00 
      ...             
37ba9     00 00 00 00 
37bad     00          | 	byte	$00[425]
37bae                 | 
37bae     00 00       |              	org
37bb0 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
37bb4 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
37bb8 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
37bbc 003             | 
37bbc 003 00 30 04 F6 |                 mov     psramaddr,#0
37bc0 004             | 
37bc0 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
37bc4 005 20 00 00 FF 
37bc8 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
37bcc 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
37bd0 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
37bd4 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
37bd8 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
37bdc 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
37be0 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
37be4 00d             | 
37be4 00d 20 00 00 FF 
37be8 00e 00 30 04 F1 |                 add 	psramaddr,##16384
37bec 00f E0 03 00 FF 
37bf0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
37bf4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
37bf8 012             | 
37bf8 012             |                 
37bf8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
37bfc 013             |     
37bfc 013 01 2C 60 FD |                 cogid 	t11				' get id
37c00 014 00 00 EC FC |                 coginit #0,#0				' start the new program
37c04 015 03 2C 60 FD |                 cogstop t11				' stop the loader
37c08 016             | 
37c08 016 00 00 00 00 | t11 		long 	0
37c0c 017 00 FF 07 00 | mailbox 	long 	$7FF00
37c10 018 00 00 00 00 | psramaddr 	long 	0
37c14 019 00 00 00 00 | pslockval	long 	0
37c18 01a 00 00 00 00 | cmd             long    0
37c1c 01b 00 00 00 00 | buf1            long    0
37c20 01c 00 40 00 00 | buf2            long    16384
37c24 01d 28 7C 03 00 | 	long	@@@_dat_ + 12612
37c28 01e 50 32 20 52 
37c2c 01f 65 74 72 6F 
37c30 020 6D 61 63 68 
37c34 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
37c38 022 42 41 53 49 
37c3c 023 43 20 76 65 
37c40 024 72 73 69 6F 
37c44 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
37c48 026 33 32 00 00 | 	byte	$33, $32, $00, $00
37c4c 027             | 	alignl
37c4c 027             | _hg010b_spin2_dat_
37c4c 027             | 
37c4c 027 00 00 00 00 
37c50 028 00 00 00 00 
37c54 029 00 00 00 00 
37c58 02a 00 00 00 00 
37c5c 02b 00 00 00    | vga_font       file "vgafont.def"
37c5f 02b 7E 81 A5 81 
37c63 02c 81 BD 99 81 
37c67 02d 81 7E 00 00 
37c6b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
37c6f 02f 7E FF DB FF 
37c73 030 FF C3 E7 FF 
37c77 031 FF 7E 00 00 
37c7b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
37c7f 033 00 36 7F 7F 
37c83 034 7F 7F 3E 1C 
37c87 035 08 00 00 00 
37c8b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
37c8f 037 00 08 1C 3E 
37c93 038 7F 3E 1C 08 
37c97 039 00 00 00 00 
37c9b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
37c9f 03b 18 3C 3C E7 
37ca3 03c E7 E7 18 18 
37ca7 03d 3C 00 00 00 
37cab 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
37caf 03f 18 3C 7E FF 
37cb3 040 FF 7E 18 18 
37cb7 041 3C 00 00 00 
37cbb 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
37cbf 043 00 00 00 18 
37cc3 044 3C 3C 18 00 
37cc7 045 00 00 00 00 
37ccb 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
37ccf 047 FF FF FF E7 
37cd3 048 C3 C3 E7 FF 
37cd7 049 FF FF FF FF 
37cdb 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
37cdf 04b 00 00 3C 66 
37ce3 04c 42 42 66 3C 
37ce7 04d 00 00 00 00 
37ceb 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
37cef 04f FF FF C3 99 
37cf3 050 BD BD 99 C3 
37cf7 051 FF FF FF FF 
37cfb 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
37cff 053 78 70 58 4C 
37d03 054 1E 33 33 33 
37d07 055 33 1E 00 00 
37d0b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
37d0f 057 3C 66 66 66 
37d13 058 66 3C 18 7E 
37d17 059 18 18 00 00 
37d1b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
37d1f 05b FC CC FC 0C 
37d23 05c 0C 0C 0C 0E 
37d27 05d 0F 07 00 00 
37d2b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
37d2f 05f FE C6 FE C6 
37d33 060 C6 C6 C6 E6 
37d37 061 E7 67 03 00 
37d3b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
37d3f 063 18 18 DB 3C 
37d43 064 E7 3C DB 18 
37d47 065 18 00 00 00 
37d4b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
37d4f 067 03 07 0F 1F 
37d53 068 7F 1F 0F 07 
37d57 069 03 01 00 00 
37d5b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
37d5f 06b 60 70 78 7C 
37d63 06c 7F 7C 78 70 
37d67 06d 60 40 00 00 
37d6b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
37d6f 06f 18 3C 7E 18 
37d73 070 18 18 7E 3C 
37d77 071 18 00 00 00 
37d7b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
37d7f 073 66 66 66 66 
37d83 074 66 66 66    | 	byte	$66[7]
37d86 075 00 66 66 00 
37d8a 076 00 00 00 00 
37d8e 077 00 FE DB DB 
37d92 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
37d96 079 D8 D8 D8 00 
37d9a 07a 00 00 00 3E 
37d9e 07b 63 06 1C 36 
37da2 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
37da6 07d 30 63 3E 00 
37daa 07e 00 00 00 00 
37dae 07f 00 00 00 00 
37db2 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
37db6 081 7F 7F 7F 00 
37dba 082 00 00 00 00 
37dbe 083 00 18 3C 7E 
37dc2 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
37dc6 085 3C 18 7E 00 
37dca 086 00 00 00 00 
37dce 087 00 18 3C 7E 
37dd2 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
37dd6 089 18 18 18 00 
37dda 08a 00 00 00 00 
37dde 08b 00 18 18 18 
37de2 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37de6 08d 7E 3C 18 00 
37dea 08e 00 00 00 00 
37dee 08f 00 00 00 18 
37df2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
37df6 091 00 00 00 00 
37dfa 092 00 00 00 00 
37dfe 093 00 00 00    | 	byte	$00[11]
37e01 094 0C 06 7F 06 
37e05 095 0C 00 00 00 
37e09 096 00 00 00 00 
37e0d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e11 098 00 03 03 03 
37e15 099 7F 00 00 00 
37e19 09a 00 00 00 00 
37e1d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e21 09c 14 36 7F 36 
37e25 09d 14 00 00 00 
37e29 09e 00 00 00 00 
37e2d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
37e31 0a0 1C 1C 3E 3E 
37e35 0a1 7F 7F 00 00 
37e39 0a2 00 00 00 00 
37e3d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
37e41 0a4 7F 3E 3E 1C 
37e45 0a5 1C 08 00 00 
37e49 0a6 00 00 00 00 
37e4d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e51 0a8 00 00 00 00 
37e55 0a9 00 00 00 00 
37e59 0aa 00 00 00 00 
37e5d 0ab 00 00       | 	byte	$00[14]
37e5f 0ab 18 3C 3C 3C 
37e63 0ac 18 18 18 00 
37e67 0ad 18 18 00 00 
37e6b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
37e6f 0af 66 24 00 00 
37e73 0b0 00 00 00 00 
37e77 0b1 00 00 00 00 
37e7b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e7f 0b3 00 36 36 7F 
37e83 0b4 36 36 36 7F 
37e87 0b5 36 36 00 00 
37e8b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
37e8f 0b7 3E 63 43 03 
37e93 0b8 3E 60 60 61 
37e97 0b9 63 3E 18 18 
37e9b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
37e9f 0bb 00 00 43 63 
37ea3 0bc 30 18 0C 06 
37ea7 0bd 63 61 00 00 
37eab 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
37eaf 0bf 1C 36 36 1C 
37eb3 0c0 6E 3B 33 33 
37eb7 0c1 33 6E 00 00 
37ebb 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
37ebf 0c3 0C 0C 0C 06 
37ec3 0c4 00 00 00 00 
37ec7 0c5 00 00 00 00 
37ecb 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ecf 0c7 30 18 0C 0C 
37ed3 0c8 0C 0C 0C 0C 
37ed7 0c9 18 30 00 00 
37edb 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
37edf 0cb 0C 18 30 30 
37ee3 0cc 30 30 30 30 
37ee7 0cd 18 0C 00 00 
37eeb 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
37eef 0cf 00 00 00 66 
37ef3 0d0 3C FF 3C 66 
37ef7 0d1 00 00 00 00 
37efb 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
37eff 0d3 00 00 00 18 
37f03 0d4 18 7E 18 18 
37f07 0d5 00 00 00 00 
37f0b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
37f0f 0d7 00 00 00 00 
37f13 0d8 00 00 00 00 | 	byte	$00[8]
37f17 0d9 18 18 18 0C 
37f1b 0da 00 00 00 00 
37f1f 0db 00 00 00 00 
37f23 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
37f27 0dd 00 00 00 00 
37f2b 0de 00 00 00 00 
37f2f 0df 00 00 00 00 
37f33 0e0 00 00 00 00 | 	byte	$00[16]
37f37 0e1 18 18 00 00 
37f3b 0e2 00 00 00 00 
37f3f 0e3 00 00 40 60 
37f43 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
37f47 0e5 03 01 00 00 
37f4b 0e6 00 00 00 00 
37f4f 0e7 1C 36 63 63 
37f53 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
37f57 0e9 36 1C 00 00 
37f5b 0ea 00 00 00 00 
37f5f 0eb 18 1C 1E 18 
37f63 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
37f67 0ed 18 7E 00 00 
37f6b 0ee 00 00 00 00 
37f6f 0ef 3E 63 60 30 
37f73 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
37f77 0f1 63 7F 00 00 
37f7b 0f2 00 00 00 00 
37f7f 0f3 3E 63 60 60 
37f83 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
37f87 0f5 63 3E 00 00 
37f8b 0f6 00 00 00 00 
37f8f 0f7 30 38 3C 36 
37f93 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
37f97 0f9 30 78 00 00 
37f9b 0fa 00 00 00 00 
37f9f 0fb 7F 03 03 03 
37fa3 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
37fa7 0fd 63 3E 00 00 
37fab 0fe 00 00 00 00 
37faf 0ff 1C 06 03 03 
37fb3 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
37fb7 101 63 3E 00 00 
37fbb 102 00 00 00 00 
37fbf 103 7F 63 60 60 
37fc3 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
37fc7 105 0C 0C 00 00 
37fcb 106 00 00 00 00 
37fcf 107 3E 63 63 63 
37fd3 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
37fd7 109 63 3E 00 00 
37fdb 10a 00 00 00 00 
37fdf 10b 3E 63 63 63 
37fe3 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
37fe7 10d 30 1E 00 00 
37feb 10e 00 00 00 00 
37fef 10f 00 00 00 18 
37ff3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
37ff7 111 18 18 00 00 
37ffb 112 00 00 00 00 
37fff 113 00 00 00 18 
38003 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
38007 115 18 18 0C 00 
3800b 116 00 00 00 00 
3800f 117 00 60 30 18 
38013 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
38017 119 30 60 00 00 
3801b 11a 00 00 00 00 
3801f 11b 00 00 00 7E 
38023 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
38027 11d 00 00 00 00 
3802b 11e 00 00 00 00 
3802f 11f 00          | 	byte	$00[9]
38030 120 06 0C 18 30 
38034 121 60 30 18 0C 
38038 122 06 00 00 00 
3803c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
38040 124 63 63 30 18 
38044 125 18 18 00 18 
38048 126 18 00 00 00 
3804c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
38050 128 3E 63 63 7B 
38054 129 7B 7B 3B 03 
38058 12a 3E 00 00 00 
3805c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
38060 12c 1C 36 63 63 
38064 12d 7F 63 63 63 
38068 12e 63 00 00 00 
3806c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
38070 130 66 66 66 3E 
38074 131 66 66 66 66 
38078 132 3F 00 00 00 
3807c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
38080 134 66 43 03 03 
38084 135 03 03 43 66 
38088 136 3C 00 00 00 
3808c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
38090 138 36 66 66 66 
38094 139 66 66 66 36 
38098 13a 1F 00 00 00 
3809c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
380a0 13c 66 46 16 1E 
380a4 13d 16 06 46 66 
380a8 13e 7F 00 00 00 
380ac 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
380b0 140 66 46 16 1E 
380b4 141 16 06 06 06 
380b8 142 0F 00 00 00 
380bc 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
380c0 144 66 43 03 03 
380c4 145 7B 63 63 66 
380c8 146 5C 00 00 00 
380cc 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
380d0 148 63 63 63 7F 
380d4 149 63 63 63 63 
380d8 14a 63 00 00 00 
380dc 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
380e0 14c 18 18 18 18 
380e4 14d 18 18 18 18 | 	byte	$18[8]
380e8 14e 3C 00 00 00 
380ec 14f 00 00 00 78 
380f0 150 30 30 30 30 
380f4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
380f8 152 1E 00 00 00 
380fc 153 00 00 00 67 
38100 154 66 66 36 1E 
38104 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
38108 156 67 00 00 00 
3810c 157 00 00 00 0F 
38110 158 06 06 06 06 
38114 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
38118 15a 7F 00 00 00 
3811c 15b 00 00 00 63 
38120 15c 77 7F 7F 6B 
38124 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
38128 15e 63 00 00 00 
3812c 15f 00 00 00 63 
38130 160 67 6F 7F 7B 
38134 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
38138 162 63 00 00 00 
3813c 163 00 00 00 3E 
38140 164 63 63 63 63 
38144 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
38148 166 3E 00 00 00 
3814c 167 00 00 00 3F 
38150 168 66 66 66 3E 
38154 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
38158 16a 0F 00 00 00 
3815c 16b 00 00 00 3E 
38160 16c 63 63 63 63 
38164 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
38168 16e 3E 30 70 00 
3816c 16f 00 00 00 3F 
38170 170 66 66 66 3E 
38174 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
38178 172 67 00 00 00 
3817c 173 00 00 00 3E 
38180 174 63 63 06 1C 
38184 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
38188 176 3E 00 00 00 
3818c 177 00 00 00 7E 
38190 178 7E 5A 18 18 
38194 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
38198 17a 3C 00 00 00 
3819c 17b 00 00 00 63 
381a0 17c 63 63 63 63 
381a4 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
381a8 17e 3E 00 00 00 
381ac 17f 00 00 00 63 
381b0 180 63 63 63 63 
381b4 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
381b8 182 08 00 00 00 
381bc 183 00 00 00 63 
381c0 184 63 63 63 6B 
381c4 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
381c8 186 36 00 00 00 
381cc 187 00 00 00 63 
381d0 188 63 36 3E 1C 
381d4 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
381d8 18a 63 00 00 00 
381dc 18b 00 00 00 66 
381e0 18c 66 66 66 3C 
381e4 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
381e8 18e 3C 00 00 00 
381ec 18f 00 00 00 7F 
381f0 190 63 61 30 18 
381f4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
381f8 192 7F 00 00 00 
381fc 193 00 00 00 3C 
38200 194 0C 0C 0C 0C 
38204 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
38208 196 3C 00 00 00 
3820c 197 00 00 00 00 
38210 198 01 03 07 0E 
38214 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
38218 19a 40 00 00 00 
3821c 19b 00 00 00 3C 
38220 19c 30 30 30 30 
38224 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
38228 19e 3C 00 00 00 
3822c 19f 1C 36 00 00 
38230 1a0 00 00 00 00 
38234 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38238 1a2 00 00 00 00 
3823c 1a3 00 00 00 00 
38240 1a4 00 00 00 00 
38244 1a5 00 00 00 00 
38248 1a6 00          | 	byte	$00[17]
38249 1a6 FF 00 00 0C 
3824d 1a7 18 00 00 00 
38251 1a8 00 00 00 00 
38255 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38259 1aa 00 00 00 00 
3825d 1ab 00 00 00 00 
38261 1ac 00          | 	byte	$00[9]
38262 1ac 1E 30 3E 33 
38266 1ad 33 33 6E 00 
3826a 1ae 00 00 00 00 
3826e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
38272 1b0 1E 36 66 66 
38276 1b1 66 66 3E 00 
3827a 1b2 00 00 00 00 
3827e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
38282 1b4 3E 63 03 03 
38286 1b5 03 63 3E 00 
3828a 1b6 00 00 00 00 
3828e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
38292 1b8 3C 36 33 33 
38296 1b9 33 33 6E 00 
3829a 1ba 00 00 00 00 
3829e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
382a2 1bc 3E 63 7F 03 
382a6 1bd 03 63 3E 00 
382aa 1be 00 00 00 00 
382ae 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
382b2 1c0 0C 1E 0C 0C 
382b6 1c1 0C 0C 1E 00 
382ba 1c2 00 00 00 00 
382be 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
382c2 1c4 6E 33 33 33 
382c6 1c5 33 33 3E 30 
382ca 1c6 33 1E 00 00 
382ce 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
382d2 1c8 36 6E 66 66 
382d6 1c9 66 66 67 00 
382da 1ca 00 00 00 00 
382de 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
382e2 1cc 1C 18 18 18 
382e6 1cd 18 18 3C 00 
382ea 1ce 00 00 00 00 
382ee 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
382f2 1d0 70 60 60 60 
382f6 1d1 60 60 60 66 
382fa 1d2 66 3C 00 00 
382fe 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
38302 1d4 66 36 1E 1E 
38306 1d5 36 66 67 00 
3830a 1d6 00 00 00 00 
3830e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
38312 1d8 18 18 18 18 
38316 1d9 18 18       | 	byte	$18[6]
38318 1da 3C 00 00 00 
3831c 1db 00 00 00 00 
38320 1dc 00 00 37 7F 
38324 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
38328 1de 63 00 00 00 
3832c 1df 00 00 00 00 
38330 1e0 00 00 3B 66 
38334 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
38338 1e2 66 00 00 00 
3833c 1e3 00 00 00 00 
38340 1e4 00 00 3E 63 
38344 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
38348 1e6 3E 00 00 00 
3834c 1e7 00 00 00 00 
38350 1e8 00 00 3B 66 
38354 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
38358 1ea 3E 06 06 0F 
3835c 1eb 00 00 00 00 
38360 1ec 00 00 6E 33 
38364 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
38368 1ee 3E 30 30 78 
3836c 1ef 00 00 00 00 
38370 1f0 00 00 3B 6E 
38374 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
38378 1f2 0F 00 00 00 
3837c 1f3 00 00 00 00 
38380 1f4 00 00 3E 63 
38384 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
38388 1f6 3E 00 00 00 
3838c 1f7 00 00 00 08 
38390 1f8 0C 0C 3F 0C 
38394 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
38398 1fa 38 00 00 00 
3839c 1fb 00 00 00 00 
383a0 1fc 00 00 33 33 
383a4 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
383a8 1fe 6E 00 00 00 
383ac 1ff 00 00 00 00 
383b0 200 00 00 63 63 
383b4 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
383b8 202 1C 00 00 00 
383bc 203 00 00 00 00 
383c0 204 00 00 63 63 
383c4 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
383c8 206 36 00 00 00 
383cc 207 00 00 00 00 
383d0 208 00 00 63 36 
383d4 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
383d8 20a 63 00 00 00 
383dc 20b 00 00 00 00 
383e0 20c 00 00 63 63 
383e4 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
383e8 20e 7E 60 30 1F 
383ec 20f 00 00 00 00 
383f0 210 00 00 7F 33 
383f4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
383f8 212 7F 00 00 00 
383fc 213 00 00 00 70 
38400 214 18 18 18 0E 
38404 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
38408 216 70 00 00 00 
3840c 217 00 00 00 18 
38410 218 18 18 18 18 
38414 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
38418 21a 18 00 00 00 
3841c 21b 00 00 00 0E 
38420 21c 18 18 18 70 
38424 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
38428 21e 0E 00 00 00 
3842c 21f 6E 3B 00 00 
38430 220 00 00 00 00 
38434 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38438 222 00 00 00 00 
3843c 223 00 00 00 00 
38440 224 00 00       | 	byte	$00[10]
38442 224 08 1C 36 63 
38446 225 63 63 7F 00 
3844a 226 00 00 00 00 
3844e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
38452 228 03 03 03 03 
38456 229 43 66 3C 18 
3845a 22a 30 1E 00 00 
3845e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
38462 22c 33 33 33 33 
38466 22d 33 33       | 	byte	$33[6]
38468 22e 6E 00 00 00 
3846c 22f 00 00 60 30 
38470 230 18 00 3E 63 
38474 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
38478 232 3E 00 00 00 
3847c 233 00 00 08 1C 
38480 234 36 00 1E 30 
38484 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
38488 236 6E 00 00 00 
3848c 237 00 00 00 00 
38490 238 33 00 1E 30 
38494 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
38498 23a 6E 00 00 00 
3849c 23b 00 00 1C 36 
384a0 23c 1C 00 33 33 
384a4 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
384a8 23e 6E 00 00 00 
384ac 23f 00 00 60 30 
384b0 240 18 00 3E 63 
384b4 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
384b8 242 3E 00 00 00 
384bc 243 00 00 00 00 
384c0 244 00 00 3E 63 
384c4 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
384c8 246 3E 18 30 1E 
384cc 247 00 00 00 1C 
384d0 248 58 78 38 18 
384d4 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
384d8 24a 3C 00 00 00 
384dc 24b 00 00 00 00 
384e0 24c 63 00 3E 63 
384e4 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
384e8 24e 3E 00 00 00 
384ec 24f 66 33 00 3E 
384f0 250 63 63 63 63 
384f4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
384f8 252 3E 00 00 00 
384fc 253 00 00 CC 66 
38500 254 33 00 3E 63 
38504 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
38508 256 3E 00 00 00 
3850c 257 00 00 18 3C 
38510 258 66 00 1C 18 
38514 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
38518 25a 3C 00 00 00 
3851c 25b 30 18 00 7F 
38520 25c 63 61 30 18 
38524 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
38528 25e 7F 00 00 00 
3852c 25f 00 63 00 08 
38530 260 1C 36 63 63 
38534 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
38538 262 63 00 00 00 
3853c 263 30 18 00 3C 
38540 264 66 43 03 03 
38544 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
38548 266 3C 00 00 00 
3854c 267 30 18 00 7F 
38550 268 66 46 16 1E 
38554 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
38558 26a 7F 00 00 00 
3855c 26b 0C 06 00 0F 
38560 26c 06 06 06 06 
38564 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
38568 26e 7F 00 00 00 
3856c 26f 30 18 00 1C 
38570 270 18 18 18 18 
38574 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
38578 272 3C 00 00 00 
3857c 273 00 00 08 1C 
38580 274 36 00 3E 63 
38584 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
38588 276 3E 00 00 00 
3858c 277 00 00 00 00 
38590 278 63 00 3E 63 
38594 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
38598 27a 3E 00 00 00 
3859c 27b 00 00 00 6F 
385a0 27c 46 26 06 06 
385a4 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
385a8 27e 7F 00 00 00 
385ac 27f 00 00 00 6E 
385b0 280 4C 2C 0C 0C 
385b4 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
385b8 282 1E 00 00 00 
385bc 283 30 18 00 3E 
385c0 284 63 63 06 1C 
385c4 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
385c8 286 3E 00 00 00 
385cc 287 00 00 60 30 
385d0 288 18 00 3E 63 
385d4 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
385d8 28a 3E 00 00 00 
385dc 28b 00 63 00 3E 
385e0 28c 63 63 63 63 
385e4 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
385e8 28e 3E 00 00 00 
385ec 28f 00 63 00 63 
385f0 290 63 63 63 63 
385f4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
385f8 292 3E 00 00 00 
385fc 293 6C 38 00 7E 
38600 294 7E 5A 18 18 
38604 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
38608 296 3C 00 00 00 
3860c 297 00 00 60 48 
38610 298 2C 0C 3F 0C 
38614 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
38618 29a 38 00 00 00 
3861c 29b 00 00 00 0F 
38620 29c 26 36 1E 0E 
38624 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
38628 29e 7F 00 00 00 
3862c 29f 00 00 00 00 
38630 2a0 00 63 36 1C 
38634 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
38638 2a2 00 00 00 00 
3863c 2a3 00 00       | 	byte	$00[6]
3863e 2a3 36 1C 08 00 
38642 2a4 3E 63 03 03 
38646 2a5 03 63 3E 00 
3864a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3864e 2a7 30 18 0C 00 
38652 2a8 1E 30 3E 33 
38656 2a9 33 33 6E 00 
3865a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3865e 2ab 60 30 18 00 
38662 2ac 1C 18 18 18 
38666 2ad 18 18 3C 00 
3866a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3866e 2af 60 30 18 00 
38672 2b0 3E 63 63 63 
38676 2b1 63 63 3E 00 
3867a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3867e 2b3 30 18 0C 00 
38682 2b4 33 33 33 33 
38686 2b5 33 33 6E 00 
3868a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3868e 2b7 00 08 1C 36 
38692 2b8 63 63 7F 63 
38696 2b9 63 63 63 18 
3869a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3869e 2bb 00 00 00 00 
386a2 2bc 1E 30 3E 33 
386a6 2bd 33 33 6E 18 
386aa 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
386ae 2bf 00 7F 63 61 
386b2 2c0 30 18 0C 06 
386b6 2c1 43 63 7F 00 
386ba 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
386be 2c3 36 1C 08 00 
386c2 2c4 7F 33 18 0C 
386c6 2c5 06 63 7F 00 
386ca 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
386ce 2c7 00 7F 66 46 
386d2 2c8 16 1E 16 06 
386d6 2c9 46 66 7F 18 
386da 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
386de 2cb 00 00 00 00 
386e2 2cc 3E 63 7F 03 
386e6 2cd 03 63 3E 18 
386ea 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
386ee 2cf 00 3C 66 03 
386f2 2d0 1F 03 0F 03 
386f6 2d1 03 66 3C 00 
386fa 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
386fe 2d3 60 30 18 00 
38702 2d4 7F 33 18 0C 
38706 2d5 06 63 7F 00 
3870a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3870e 2d7 00 3C 66 43 
38712 2d8 03 03 03 03 
38716 2d9 43 66 3C 00 
3871a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3871e 2db 00 00 00 00 
38722 2dc 3E 63 06 1C 
38726 2dd 30 63 3E 18 
3872a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3872e 2df 00 00 00 00 
38732 2e0 00 00       | 	byte	$00[6]
38734 2e1 6C 36 1B 36 
38738 2e2 6C 00 00 00 
3873c 2e3 00 00 00 00 
38740 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38744 2e5 1B 36 6C 36 
38748 2e6 1B 00 00 00 
3874c 2e7 88 22 88 22 
38750 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
38754 2e9 88 22 88 22 
38758 2ea 88 22 88 22 
3875c 2eb AA 55 AA 55 
38760 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
38764 2ed AA 55 AA 55 
38768 2ee AA 55 AA 55 
3876c 2ef BB EE BB EE 
38770 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
38774 2f1 BB EE BB EE 
38778 2f2 BB EE BB EE 
3877c 2f3 18 18 18 18 
38780 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
38784 2f5 18 18 18 18 
38788 2f6 18 18 18 18 
3878c 2f7 18 18 18 18 
38790 2f8 18 18 18    | 	byte	$18[15]
38793 2f8 1F 18 18 18 
38797 2f9 18 18 18 18 
3879b 2fa 18 30 18 00 
3879f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
387a3 2fc 63 7F 63 63 
387a7 2fd 63 63 00 00 
387ab 2fe 00 1C 36 00 
387af 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
387b3 300 63 7F 63 63 
387b7 301 63 63 00 00 
387bb 302 00 36 1C 00 
387bf 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
387c3 304 1E 16 06 46 
387c7 305 66 7F 00 00 
387cb 306 00 00 00 00 
387cf 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
387d3 308 1C 30 60 63 
387d7 309 63 3E 18 30 
387db 30a 1E 6C 6C 6C 
387df 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
387e3 30c 6F 6C 6C 6C 
387e7 30d 6C 6C 6C 6C 
387eb 30e 6C 6C 6C 6C 
387ef 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
387f3 310 6C 6C 6C 6C 
387f7 311 6C 6C 6C 6C 
387fb 312 6C          | 	byte	$6c[9]
387fc 313 00 00 00 00 
38800 314 00          | 	byte	$00[5]
38801 314 7F 60 6F 6C 
38805 315 6C 6C 6C 6C 
38809 316 6C 6C 6C 6C 
3880d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
38811 318 6F 60 7F 00 
38815 319 00 00 00 00 
38819 31a 00 00 00 18 
3881d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
38821 31c 61 30 18 0C 
38825 31d 06 43 63 7F 
38829 31e 00 00 00 00 
3882d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
38831 320 00 7F 33 18 
38835 321 0C 06 63 7F 
38839 322 00 00 00 00 
3883d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
38841 324 00 00 1F 18 
38845 325 18 18 18 18 
38849 326 18 18 18 18 
3884d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38851 328 18 18 F8 00 
38855 329 00 00 00 00 
38859 32a 00 00 00 18 
3885d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
38861 32c 18 18 FF 00 
38865 32d 00 00 00 00 
38869 32e 00 00 00 00 
3886d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38871 330 00 00 FF 18 
38875 331 18 18 18 18 
38879 332 18 18 18 18 
3887d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38881 334 18 18 F8 18 
38885 335 18 18 18 18 
38889 336 18 18 18 00 
3888d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
38891 338 00 00 FF 00 
38895 339 00 00 00 00 
38899 33a 00 00 00 18 
3889d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
388a1 33c 18 18 FF 18 
388a5 33d 18 18 18 18 
388a9 33e 18 18 18 63 
388ad 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
388b1 340 36 63 63 7F 
388b5 341 63 63 63 63 
388b9 342 00 00 00 00 
388bd 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
388c1 344 00 1E 30 3E 
388c5 345 33 33 33 6E 
388c9 346 00 00 00 6C 
388cd 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
388d1 348 EC 0C FC 00 
388d5 349 00 00 00 00 
388d9 34a 00 00 00 00 
388dd 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
388e1 34c FC 0C EC 6C 
388e5 34d 6C 6C 6C 6C 
388e9 34e 6C 6C 6C 6C 
388ed 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
388f1 350 EF 00 FF 00 
388f5 351 00 00 00 00 
388f9 352 00 00 00 00 
388fd 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38901 354 FF 00 EF 6C 
38905 355 6C 6C 6C 6C 
38909 356 6C 6C 6C 6C 
3890d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
38911 358 EC 0C EC 6C 
38915 359 6C 6C 6C 6C 
38919 35a 6C 6C 6C 00 
3891d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
38921 35c FF 00 FF 00 
38925 35d 00 00 00 00 
38929 35e 00 00 00 6C 
3892d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
38931 360 EF 00 EF 6C 
38935 361 6C 6C 6C 6C 
38939 362 6C 6C 6C 00 
3893d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
38941 364 63 3E 63 63 
38945 365 63 63 3E 63 
38949 366 00 00 00 00 
3894d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
38951 368 30 3C 36 33 
38955 369 33 33 33 6E 
38959 36a 00 00 00 00 
3895d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
38961 36c 66 66 6F 66 
38965 36d 66 66 36 1F 
38969 36e 00 00 00 36 
3896d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
38971 370 66 66 66 66 
38975 371 66 66       | 	byte	$66[6]
38977 371 36 1F 00 00 
3897b 372 00 00 63 00 
3897f 373 7F 66 46 16 
38983 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
38987 375 66 7F 00 00 
3898b 376 00 6C 38 00 
3898f 377 38 30 30 3C 
38993 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
38997 379 33 6E 00 00 
3899b 37a 00 36 1C 00 
3899f 37b 63 67 6F 7F 
389a3 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
389a7 37d 63 63 00 00 
389ab 37e 00 30 18 00 
389af 37f 3C 18 18 18 
389b3 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
389b7 381 18 3C 00 00 
389bb 382 00 3C 66 00 
389bf 383 3C 18 18 18 
389c3 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
389c7 385 18 3C 00 00 
389cb 386 00 00 00 36 
389cf 387 1C 08 00 3E 
389d3 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
389d7 389 63 3E 00 00 
389db 38a 00 18 18 18 
389df 38b 18 18 18 18 
389e3 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
389e7 38d 00 00 00 00 
389eb 38e 00 00 00 00 
389ef 38f 00 00 00 00 | 	byte	$00[12]
389f3 390 F8 18 18 18 
389f7 391 18 18 18 18 
389fb 392 18 FF FF FF 
389ff 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
38a03 394 FF FF FF FF 
38a07 395 FF FF FF FF 
38a0b 396 FF          | 	byte	$ff[9]
38a0c 397 00 00 00 00 
38a10 398 00 00 00    | 	byte	$00[7]
38a13 398 FF FF FF FF 
38a17 399 FF FF FF FF 
38a1b 39a FF          | 	byte	$ff[9]
38a1c 39b 00 00 00 7E 
38a20 39c 7E 5A 18 18 
38a24 39d 18 18 18 18 
38a28 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
38a2c 39f 1C 36 1C 63 
38a30 3a0 63 63 63 63 
38a34 3a1 63 63 63 63 
38a38 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38a3c 3a3 FF FF FF FF 
38a40 3a4 FF FF FF    | 	byte	$ff[7]
38a43 3a4 00 00 00 00 
38a47 3a5 00 00 00 00 
38a4b 3a6 00          | 	byte	$00[9]
38a4c 3a7 30 18 00 3E 
38a50 3a8 63 63 63 63 
38a54 3a9 63 63 63 63 
38a58 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38a5c 3ab 00 00 00 1E 
38a60 3ac 33 33 33 1B 
38a64 3ad 33 63 63 63 
38a68 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
38a6c 3af 1C 36 00 3E 
38a70 3b0 63 63 63 63 
38a74 3b1 63 63 63 63 
38a78 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38a7c 3b3 30 18 00 63 
38a80 3b4 67 6F 7F 7B 
38a84 3b5 73 63 63 63 
38a88 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
38a8c 3b7 00 00 60 30 
38a90 3b8 18 00 3B 66 
38a94 3b9 66 66 66 66 
38a98 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
38a9c 3bb 00 00 36 1C 
38aa0 3bc 08 00 3B 66 
38aa4 3bd 66 66 66 66 
38aa8 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
38aac 3bf 36 1C 00 3E 
38ab0 3c0 63 63 06 1C 
38ab4 3c1 30 60 63 63 
38ab8 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
38abc 3c3 00 00 36 1C 
38ac0 3c4 08 00 3E 63 
38ac4 3c5 06 1C 30 63 
38ac8 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
38acc 3c7 30 18 00 3F 
38ad0 3c8 66 66 66 3E 
38ad4 3c9 36 66 66 66 
38ad8 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
38adc 3cb 30 18 00 63 
38ae0 3cc 63 63 63 63 
38ae4 3cd 63 63 63 63 
38ae8 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38aec 3cf 00 00 60 30 
38af0 3d0 18 00 3B 6E 
38af4 3d1 66 06 06 06 
38af8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
38afc 3d3 66 33 00 63 
38b00 3d4 63 63 63 63 
38b04 3d5 63 63 63 63 
38b08 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38b0c 3d7 00 00 60 30 
38b10 3d8 18 00 63 63 
38b14 3d9 63 63 63 63 
38b18 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
38b1c 3db 30 18 00 66 
38b20 3dc 66 66 66 3C 
38b24 3dd 18 18 18 18 
38b28 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
38b2c 3df 00 00 00 08 
38b30 3e0 0C 0C 3F 0C 
38b34 3e1 0C 0C 0C 6C 
38b38 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
38b3c 3e3 30 18 00 00 
38b40 3e4 00 00 00 00 
38b44 3e5 00 00 00 00 
38b48 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b4c 3e7 00 00 00 00 
38b50 3e8 00 00 00 00 | 	byte	$00[8]
38b54 3e9 7F 00 00 00 
38b58 3ea 00 00 00 00 
38b5c 3eb 66 33 00 00 
38b60 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
38b64 3ed 00 00 00 00 
38b68 3ee 00 00 00 00 
38b6c 3ef 00 00 00 00 
38b70 3f0 00 00 00 00 
38b74 3f1 00 00 00 00 
38b78 3f2 00          | 	byte	$00[21]
38b79 3f2 0C 06 3C 36 
38b7d 3f3 1C 00 00 00 
38b81 3f4 00 00 00 00 
38b85 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b89 3f6 00 00 00 63 
38b8d 3f7 3E 00 00 00 
38b91 3f8 00 00 00 00 
38b95 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b99 3fa 00 00 00 00 
38b9d 3fb 3E 63 06 1C 
38ba1 3fc 36 63 63 36 
38ba5 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
38ba9 3fe 00 00 00 00 
38bad 3ff 00 00 00 00 | 	byte	$00[8]
38bb1 400 18 00 7E 00 
38bb5 401 18 00 00 00 
38bb9 402 00 00 00 00 
38bbd 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38bc1 404 00 00 00 00 
38bc5 405 00 00 00 00 | 	byte	$00[8]
38bc9 406 18 30 1E 00 
38bcd 407 00 00 1C 36 
38bd1 408 36 1C 00 00 
38bd5 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
38bd9 40a 00 00 00 00 
38bdd 40b 63 00 00 00 
38be1 40c 00 00 00 00 
38be5 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38be9 40e 00 00 00 18 
38bed 40f 18 00 00 00 
38bf1 410 00 00 00 00 
38bf5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38bf9 412 00 00 00 00 
38bfd 413 00          | 	byte	$00[5]
38bfe 413 CC 66 33 00 
38c02 414 33 33 33 33 
38c06 415 33 33 6E 00 
38c0a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
38c0e 417 00 3F 66 66 
38c12 418 66 3E 36 66 
38c16 419 66 66 6F 00 
38c1a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
38c1e 41b 36 1C 08 00 
38c22 41c 3B 6E 66 06 
38c26 41d 06 06 0F 00 
38c2a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
38c2e 41f 00 00 00 7E 
38c32 420 7E 7E 7E 7E 
38c36 421 7E 7E 00 00 
38c3a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
38c3e 423 00 00 00 00 
38c42 424 00 00 00 00 
38c46 425 00 00 00 00 
38c4a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38c4c 427             | 'vga_font       file "vgafont.def"
38c4c 427 00 00 00 00 
      ...             
38c7c 433 00 00 00 00 
38c80 434 00 00 00    | st_font        file "st4font.def"
38c83 434 FF FF 00 00 
38c87 435 00 00 00 00 
38c8b 436 00 18 18 18 
38c8f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38c93 438 18 18 18 18 
38c97 439 18 18 18 18 
38c9b 43a 18          | 	byte	$18[9]
38c9c 43b 00 00 00 00 
38ca0 43c 00 00 00    | 	byte	$00[7]
38ca3 43c FF FF 18 18 
38ca7 43d 18 18 18 18 
38cab 43e 18 18 18 18 
38caf 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38cb3 440 FF FF 00 00 
38cb7 441 00 00 00 00 
38cbb 442 00 18 18 18 
38cbf 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38cc3 444 1F 1F 18 18 
38cc7 445 18 18 18 18 
38ccb 446 18 18 18 18 
38ccf 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38cd3 448 F8 F8 18 18 
38cd7 449 18 18 18 18 
38cdb 44a 18 00 00 00 
38cdf 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38ce3 44c 1F 1F 18 18 
38ce7 44d 18 18 18 18 
38ceb 44e 18 00 00 00 
38cef 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38cf3 450 F8 F8 18 18 
38cf7 451 18 18 18 18 
38cfb 452 18 18 18 18 
38cff 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38d03 454 1F 1F 00 00 
38d07 455 00 00 00 00 
38d0b 456 00 18 18 18 
38d0f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38d13 458 F8 F8 00 00 
38d17 459 00 00 00 00 
38d1b 45a 00 18 18 18 
38d1f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38d23 45c FF FF 18 18 
38d27 45d 18 18 18 18 
38d2b 45e 18 00 00 18 
38d2f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
38d33 460 66 7E 7E 66 
38d37 461 66 66 66 30 
38d3b 462 18 00 00 7E 
38d3f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
38d43 464 3E 06 06 06 
38d47 465 06 7E 7E 18 
38d4b 466 0C 30 18 3C 
38d4f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
38d53 468 06 06 06 66 
38d57 469 66 7E 3C 00 
38d5b 46a 00 30 18 66 
38d5f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
38d63 46c 7E 7E 76 76 
38d67 46d 66 66 66 00 
38d6b 46e 00 30 18 7C 
38d6f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
38d73 470 1C 38 70 60 
38d77 471 60 7E 3E 00 
38d7b 472 00 30 18 7E 
38d7f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
38d83 474 18 0C 0C 06 
38d87 475 06 7E 7E 00 
38d8b 476 00 18 18 00 
38d8f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
38d93 478 18 18 0C 0C 
38d97 479 06 7E 7E 00 
38d9b 47a 00 30 18 3C 
38d9f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
38da3 47c 66 66 66 66 
38da7 47d 66          | 	byte	$66[5]
38da8 47e 7E 3C 00 00 
38dac 47f 00 00 06 06 
38db0 480 06 06 16 1E 
38db4 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
38db8 482 7E 7E 00 00 
38dbc 483 00 00 00 00 
38dc0 484 00 3C 7C 60 
38dc4 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
38dc8 486 7E 7C 30 18 
38dcc 487 00 00 00 00 
38dd0 488 00 3C 7E 66 
38dd4 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
38dd8 48a 7E 7C 18 0C 
38ddc 48b 00 00 30 18 
38de0 48c 00 3C 3E 06 
38de4 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
38de8 48e 7E 7C 00 00 
38dec 48f 00 00 30 18 
38df0 490 00 3E 7E 66 
38df4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
38df8 492 66 66 00 00 
38dfc 493 00 00 30 18 
38e00 494 00 7C 7E 06 
38e04 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
38e08 496 7E 3E 00 00 
38e0c 497 00 00 30 18 
38e10 498 00 7E 7E 30 
38e14 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38e18 49a 7E 7E 00 00 
38e1c 49b 00 00 18 18 
38e20 49c 00 7E 7E 30 
38e24 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38e28 49e 7E 7E 00 00 
38e2c 49f 00 00 30 18 
38e30 4a0 00 3C 7E 66 
38e34 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
38e38 4a2 7E 3C 00 00 
38e3c 4a3 00 00 1C 1C 
38e40 4a4 18 18 38 3C 
38e44 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
38e48 4a6 3C 3C 00 00 
38e4c 4a7 00 00 00 00 
38e50 4a8 00 00 00 00 
38e54 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e58 4aa 00 00 00 00 
38e5c 4ab 00 00       | 	byte	$00[6]
38e5e 4ab 18 18 18 18 
38e62 4ac 18 18 18 18 | 	byte	$18[8]
38e66 4ad 00 00 18 18 
38e6a 4ae 00 00 00 00 
38e6e 4af 66 66 66 66 
38e72 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
38e76 4b1 00 00 00 00 
38e7a 4b2 00 00 00 00 
38e7e 4b3 00          | 	byte	$00[9]
38e7f 4b3 66 66 FF FF 
38e83 4b4 66 66 FF FF 
38e87 4b5 66 66 00 00 
38e8b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
38e8f 4b7 7C 7E 06 06 
38e93 4b8 3E 7C 60 60 
38e97 4b9 7E 3E 18 18 
38e9b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
38e9f 4bb 66 30 30 18 
38ea3 4bc 18 0C 0C 66 
38ea7 4bd 66 00 00 00 
38eab 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
38eaf 4bf 66 66 3C 1C 
38eb3 4c0 1C FC FE 66 
38eb7 4c1 66 FE FC 00 
38ebb 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
38ebf 4c3 18 18 18 18 
38ec3 4c4 00 00 00 00 
38ec7 4c5 00 00 00 00 
38ecb 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
38ecf 4c7 18 1C 0C 0C 
38ed3 4c8 0C 0C 0C 0C 
38ed7 4c9 1C 18 30 00 
38edb 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
38edf 4cb 18 38 30 30 
38ee3 4cc 30 30 30 30 
38ee7 4cd 38 18 0C 00 
38eeb 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
38eef 4cf 66 66 3C 3C 
38ef3 4d0 FF FF 3C 3C 
38ef7 4d1 66 66 00 00 
38efb 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
38eff 4d3 00 18 18 18 
38f03 4d4 7E 7E 18 18 
38f07 4d5 18 00 00 00 
38f0b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38f0f 4d7 00 00 00 00 
38f13 4d8 00 00       | 	byte	$00[6]
38f15 4d9 18 18 18 18 
38f19 4da 18          | 	byte	$18[5]
38f1a 4da 0C 04 00 00 
38f1e 4db 00 00 00 00 
38f22 4dc 7E 7E 00 00 
38f26 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
38f2a 4de 00 00 00 00 
38f2e 4df 00 00 00 00 
38f32 4e0 00 00 00 00 
38f36 4e1 00          | 	byte	$00[13]
38f37 4e1 18 18 18 00 
38f3b 4e2 00 00 00 60 
38f3f 4e3 60 60 30 30 
38f43 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
38f47 4e5 06 06 06 00 
38f4b 4e6 00 00 00 3C 
38f4f 4e7 7E 66 66 66 
38f53 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
38f57 4e9 66 7E 3C 00 
38f5b 4ea 00 00 00 18 
38f5f 4eb 18 1C 1C 18 
38f63 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
38f67 4ed 18 7E 7E 00 
38f6b 4ee 00 00 00 3C 
38f6f 4ef 7E 66 66 30 
38f73 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
38f77 4f1 0C 7E 7E 00 
38f7b 4f2 00 00 00 7E 
38f7f 4f3 7E 30 30 18 
38f83 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
38f87 4f5 66 7E 3C 00 
38f8b 4f6 00 00 00 30 
38f8f 4f7 30 38 38 3C 
38f93 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
38f97 4f9 7E 30 30 00 
38f9b 4fa 00 00 00 7E 
38f9f 4fb 7E 06 06 3E 
38fa3 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
38fa7 4fd 66 7E 3C 00 
38fab 4fe 00 00 00 38 
38faf 4ff 3C 0E 06 06 
38fb3 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
38fb7 501 66 7E 3C 00 
38fbb 502 00 00 00 7E 
38fbf 503 7E 60 60 30 
38fc3 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
38fc7 505 0C 0C 0C 00 
38fcb 506 00 00 00 3C 
38fcf 507 7E 66 66 3C 
38fd3 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
38fd7 509 66 7E 3C 00 
38fdb 50a 00 00 00 3C 
38fdf 50b 7E 66 66 7E 
38fe3 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
38fe7 50d 70 3C 1C 00 
38feb 50e 00 00 00 00 
38fef 50f 00 00 18 18 
38ff3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
38ff7 511 18 18 18 00 
38ffb 512 00 00 00 00 
38fff 513 00 00 18 18 
39003 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
39007 515 18 18 18 0C 
3900b 516 04 00 00 00 
3900f 517 70 38 1C 0E 
39013 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
39017 519 70 00 00 00 
3901b 51a 00 00 00 00 
3901f 51b 00 00 7E 7E 
39023 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
39027 51d 00 00 00 00 
3902b 51e 00 00 00 00 | 	byte	$00[8]
3902f 51f 0E 1C 38 70 
39033 520 E0 70 38 1C 
39037 521 0E 00 00 00 
3903b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3903f 523 7E 66 66 30 
39043 524 30 18 18 18 
39047 525 00 18 18 00 
3904b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3904f 527 7E 66 66 66 
39053 528 66 36 06 66 
39057 529 66 7E 3C 00 
3905b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3905f 52b 3C 7E 66 66 
39063 52c 66 7E 7E 66 
39067 52d 66 66 66 00 
3906b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3906f 52f 7E 66 66 7E 
39073 530 3E 66 66 66 
39077 531 66 7E 3E 00 
3907b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3907f 533 7E 66 66 06 
39083 534 06 06 06 66 
39087 535 66 7E 3C 00 
3908b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3908f 537 7E 66 66 66 
39093 538 66 66 66 66 
39097 539 66 7E 3E 00 
3909b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3909f 53b 7E 06 06 3E 
390a3 53c 3E 06 06 06 
390a7 53d 06 7E 7E 00 
390ab 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
390af 53f 7E 06 06 3E 
390b3 540 3E 06 06 06 
390b7 541 06 06 06 00 
390bb 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
390bf 543 7E 06 06 76 
390c3 544 76 66 66 66 
390c7 545 66 7E 3C 00 
390cb 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
390cf 547 66 66 66 7E 
390d3 548 7E 66 66 66 
390d7 549 66 66 66 00 
390db 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
390df 54b 7E 18 18 18 
390e3 54c 18 18 18 18 
390e7 54d 18 7E 7E 00 
390eb 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
390ef 54f 60 60 60 60 
390f3 550 60 60 60    | 	byte	$60[7]
390f6 551 66 66 7E 3C 
390fa 552 00 00 00 00 
390fe 553 66 66 36 36 
39102 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
39106 555 66 66 C6 C6 
3910a 556 00 00 00 00 
3910e 557 06 06 06 06 
39112 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
39116 559 06 06 7E 7E 
3911a 55a 00 00 00 00 
3911e 55b C6 C6 EE EE 
39122 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
39126 55d C6 C6 C6 C6 
3912a 55e 00 00 00 00 
3912e 55f 66 66 66 6E 
39132 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
39136 561 76 66 66 66 
3913a 562 00 00 00 00 
3913e 563 3C 7E 66 66 
39142 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
39146 565 66 66 7E 3C 
3914a 566 00 00 00 00 
3914e 567 3E 7E 66 66 
39152 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
39156 569 06 06 06 06 
3915a 56a 00 00 00 00 
3915e 56b 3C 7E 66 66 
39162 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
39166 56d 66 56 3E 6C 
3916a 56e 00 00 00 00 
3916e 56f 3E 7E 66 66 
39172 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
39176 571 66 66 C6 C6 
3917a 572 00 00 00 00 
3917e 573 7C 7E 06 06 
39182 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
39186 575 60 60 7E 3E 
3918a 576 00 00 00 00 
3918e 577 7E 7E 18 18 
39192 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
39196 579 18 18 18 18 
3919a 57a 00 00 00 00 
3919e 57b 66 66 66 66 
391a2 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
391a6 57d 66 66 7E 3C 
391aa 57e 00 00 00 00 
391ae 57f 66 66 66 66 
391b2 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
391b6 581 3C 3C 18 18 
391ba 582 00 00 00 00 
391be 583 C6 C6 C6 C6 
391c2 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
391c6 585 FE EE C6 82 
391ca 586 00 00 00 00 
391ce 587 66 66 66 3C 
391d2 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
391d6 589 3C 66 66 66 
391da 58a 00 00 00 00 
391de 58b 66 66 66 66 
391e2 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
391e6 58d 18 18 18 18 
391ea 58e 00 00 00 00 
391ee 58f 7E 7E 30 30 
391f2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
391f6 591 06 06 7E 7E 
391fa 592 00 00 00 00 
391fe 593 3C 3C 0C 0C 
39202 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
39206 595 0C 0C 3C 3C 
3920a 596 00 00 00 00 
3920e 597 06 06 0C 0C 
39212 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
39216 599 60 60 C0 C0 
3921a 59a 00 00 00 00 
3921e 59b 3C 3C 30 30 
39222 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
39226 59d 30 30 3C 3C 
3922a 59e 00 00 00 00 
3922e 59f 18 18 3C 3C 
39232 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
39236 5a1 00 00 00 00 
3923a 5a2 00 00 00 00 
3923e 5a3 00 00 00 00 
39242 5a4 00 00 00 00 
39246 5a5 00 00       | 	byte	$00[18]
39248 5a6 FE FE 00 00 
3924c 5a7 00 00 0C 0C 
39250 5a8 18 18 00 00 
39254 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
39258 5aa 00 00 00 00 
3925c 5ab 00 00 00 00 
39260 5ac 00          | 	byte	$00[9]
39261 5ac 3C 7C 60 7C 
39265 5ad 7E 66 66 7E 
39269 5ae 7C 00 00 00 
3926d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
39271 5b0 3E 7E 66 66 
39275 5b1 66 66 66 7E 
39279 5b2 3E 00 00 00 
3927d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
39281 5b4 3C 3E 06 06 
39285 5b5 06 06 06 7E 
39289 5b6 7C 00 00 00 
3928d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
39291 5b8 7C 7E 66 66 
39295 5b9 66 66 66 7E 
39299 5ba 7C 00 00 00 
3929d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
392a1 5bc 3C 7E 66 66 
392a5 5bd 7E 06 06 7E 
392a9 5be 7C 00 00 00 
392ad 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
392b1 5c0 18 7E 7E 18 
392b5 5c1 18 18 18 18 
392b9 5c2 18 00 00 00 
392bd 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
392c1 5c4 7C 7E 66 66 
392c5 5c5 66 66 7E 7C 
392c9 5c6 60 7E 3E 00 
392cd 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
392d1 5c8 3E 7E 66 66 
392d5 5c9 66 66 66 66 
392d9 5ca 66 00 00 00 
392dd 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
392e1 5cc 1C 1C 18 18 
392e5 5cd 18 18 18 3C 
392e9 5ce 3C 00 00 00 
392ed 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
392f1 5d0 30 30 30 30 
392f5 5d1 30 30 30 30 
392f9 5d2 30          | 	byte	$30[9]
392fa 5d2 3E 1E 00 00 
392fe 5d3 06 06 06 36 
39302 5d4 36 1E 1E 1E 
39306 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3930a 5d6 00 00 00 00 
3930e 5d7 1C 1C 18 18 
39312 5d8 18 18 18 18 
39316 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3931a 5da 00 00 00 00 
3931e 5db 00 00 00    | 	byte	$00[7]
39321 5dc 6C FE FE D6 
39325 5dd D6 C6 C6 C6 
39329 5de C6 00 00 00 
3932d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
39331 5e0 3E 7E 66 66 
39335 5e1 66 66 66 66 
39339 5e2 66 00 00 00 
3933d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
39341 5e4 3C 7E 66 66 
39345 5e5 66 66 66 7E 
39349 5e6 3C 00 00 00 
3934d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
39351 5e8 3E 7E 66 66 
39355 5e9 66 66 66 7E 
39359 5ea 3E 06 06 00 
3935d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
39361 5ec 7C 7E 66 66 
39365 5ed 66 66 66 7E 
39369 5ee 7C 60 60 00 
3936d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
39371 5f0 3E 7E 66 06 
39375 5f1 06 06 06 06 
39379 5f2 06 00 00 00 
3937d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
39381 5f4 7C 7E 06 0E 
39385 5f5 3C 70 60 7E 
39389 5f6 3E 00 00 00 
3938d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
39391 5f8 7E 7E 18 18 
39395 5f9 18 18 18 78 
39399 5fa 70 00 00 00 
3939d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
393a1 5fc 66 66 66 66 
393a5 5fd 66 66 66    | 	byte	$66[7]
393a8 5fe 7E 7C 00 00 
393ac 5ff 00 00 00 00 
393b0 600 00 66 66 66 
393b4 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
393b8 602 18 18 00 00 
393bc 603 00 00 00 00 
393c0 604 00 C6 C6 D6 
393c4 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
393c8 606 C6 82 00 00 
393cc 607 00 00 00 00 
393d0 608 00 66 66 3C 
393d4 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
393d8 60a 66 66 00 00 
393dc 60b 00 00 00 00 
393e0 60c 00 66 66 66 
393e4 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
393e8 60e 7C 60 7E 3E 
393ec 60f 00 00 00 00 
393f0 610 00 7E 7E 30 
393f4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
393f8 612 7E 7E 00 00 
393fc 613 00 00 30 18 
39400 614 18 18 18 0C 
39404 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
39408 616 18 30 00 00 
3940c 617 00 00 18 18 
39410 618 18 18 18 18 
39414 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39418 61a 18 18 00 00 
3941c 61b 00 00 0C 18 
39420 61c 18 18 18 30 
39424 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
39428 61e 18 0C 00 00 
3942c 61f 00 00 6C 7E 
39430 620 36 00 00 00 
39434 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
39438 622 00 00 00 00 
3943c 623 00 00 00 00 
39440 624 00          | 	byte	$00[9]
39441 624 18 18 18 18 
39445 625 18 18 00 00 
39449 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3944c 627             | 'amiga_font     file "amigafont.def"
3944c 627 00 6C FE FE 
39450 628 7C 38 10 00 
39454 629 18 18 18 F8 
39458 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3945c 62b C0 C0 C0 C0 
39460 62c C0 C0 C0 C0 | 	byte	$c0[8]
39464 62d 18 18 18 1F 
39468 62e 1F 00 00 00 
3946c 62f 18 18 18 1F 
39470 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
39474 631 00 00 00 1F 
39478 632 1F 18 18 18 
3947c 633 C0 E0 70 38 
39480 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
39484 635 03 07 0E 1C 
39488 636 38 70 E0 C0 
3948c 637 80 C0 E0 F0 
39490 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
39494 639 00 00 00 00 
39498 63a F0 F0 F0 F0 
3949c 63b 01 03 07 0F 
394a0 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
394a4 63d F0 F0 F0 F0 
394a8 63e 00 00 00 00 
394ac 63f 0F 0F 0F 0F 
394b0 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
394b4 641 FF FF 00 00 
394b8 642 00 00 00 00 
394bc 643 00 00 00 00 
394c0 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
394c4 645 00 00 00 00 
394c8 646 0F 0F 0F 0F 
394cc 647 00 38 38 EE 
394d0 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
394d4 649 00 00 00 F8 
394d8 64a F8 18 18 18 
394dc 64b 00 00 00 FF 
394e0 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
394e4 64d 18 18 18 FF 
394e8 64e FF 18 18 18 
394ec 64f 00 00 3C 7E 
394f0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
394f4 651 00 00 00 00 
394f8 652 FF FF FF FF 
394fc 653 03 03 03 03 
39500 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
39504 655 00 00 00 FF 
39508 656 FF 18 18 18 
3950c 657 18 18 18 FF 
39510 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
39514 659 0F 0F 0F 0F 
39518 65a 0F 0F 0F 0F | 	byte	$0f[8]
3951c 65b 18 18 18 F8 
39520 65c F8 00 00 00 
39524 65d 1E 06 1E 06 
39528 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3952c 65f 00 18 3C 7E 
39530 660 18 18 18 00 
39534 661 00 18 18 18 
39538 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3953c 663 00 18 0C 7E 
39540 664 0C 18 00 00 
39544 665 00 18 30 7E 
39548 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3954c 667 00 00 00 00 
39550 668 00 00 00 00 
39554 669 00          | 	byte	$00[9]
39555 669 18 18 18 18 
39559 66a 00 18 00 00 
3955d 66b 66 66 66 00 
39561 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
39565 66d 66 FF 66 66 
39569 66e FF 66 00 18 
3956d 66f 7C 06 3C 60 
39571 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
39575 671 66 36 18 0C 
39579 672 66 62 00 38 
3957d 673 6C 38 1C F6 
39581 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
39585 675 18 18 18 00 
39589 676 00 00 00 00 
3958d 677 70 38 18 18 
39591 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
39595 679 0E 1C 18 18 
39599 67a 1C 0E 00 00 
3959d 67b 66 3C FF 3C 
395a1 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
395a5 67d 18 18 7E 18 
395a9 67e 18 00 00 00 
395ad 67f 00 00 00 00 
395b1 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
395b5 681 00 00 7E 00 
395b9 682 00 00 00 00 
395bd 683 00 00 00 00 
395c1 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
395c5 685 60 30 18 0C 
395c9 686 06 02 00 00 
395cd 687 3C 66 76 6E 
395d1 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
395d5 689 18 1C 18 18 
395d9 68a 18 7E 00 00 
395dd 68b 3C 66 30 18 
395e1 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
395e5 68d 7E 30 18 30 
395e9 68e 66 3C 00 00 
395ed 68f 30 38 3C 36 
395f1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
395f5 691 7E 06 3E 60 
395f9 692 66 3C 00 00 
395fd 693 3C 06 3E 66 
39601 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
39605 695 7E 60 30 18 
39609 696 0C 0C 00 00 
3960d 697 3C 66 3C 66 
39611 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
39615 699 3C 66 7C 60 
39619 69a 30 1C 00 00 
3961d 69b 00 18 18 00 
39621 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
39625 69d 00 18 18 00 
39629 69e 18 18 0C 60 
3962d 69f 30 18 0C 18 
39631 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
39635 6a1 00 7E 00 00 
39639 6a2 7E 00 00 06 
3963d 6a3 0C 18 30 18 
39641 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
39645 6a5 3C 66 30 18 
39649 6a6 00 18 00 00 
3964d 6a7 3C 66 76 76 
39651 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
39655 6a9 18 3C 66 66 
39659 6aa 7E 66 00 00 
3965d 6ab 3E 66 3E 66 
39661 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
39665 6ad 3C 66 06 06 
39669 6ae 66 3C 00 00 
3966d 6af 1E 36 66 66 
39671 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
39675 6b1 7E 06 3E 06 
39679 6b2 06 7E 00 00 
3967d 6b3 7E 06 3E 06 
39681 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
39685 6b5 7C 06 06 76 
39689 6b6 66 7C 00 00 
3968d 6b7 66 66 7E 66 
39691 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
39695 6b9 7E 18 18 18 
39699 6ba 18 7E 00 00 
3969d 6bb 60 60 60 60 
396a1 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
396a5 6bd 66 36 1E 1E 
396a9 6be 36 66 00 00 
396ad 6bf 06 06 06 06 
396b1 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
396b5 6c1 C6 EE FE D6 
396b9 6c2 C6 C6 00 00 
396bd 6c3 66 6E 7E 7E 
396c1 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
396c5 6c5 3C 66 66 66 
396c9 6c6 66 3C 00 00 
396cd 6c7 3E 66 66 3E 
396d1 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
396d5 6c9 3C 66 66 66 
396d9 6ca 36 6C 00 00 
396dd 6cb 3E 66 66 3E 
396e1 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
396e5 6cd 3C 06 3C 60 
396e9 6ce 60 3C 00 00 
396ed 6cf 7E 18 18 18 
396f1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
396f5 6d1 66 66 66 66 
396f9 6d2 66          | 	byte	$66[5]
396fa 6d2 7E 00 00 66 
396fe 6d3 66 66 66 3C 
39702 6d4 18 00 00 C6 
39706 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3970a 6d6 C6 00 00 66 
3970e 6d7 66 3C 3C 66 
39712 6d8 66 00 00 66 
39716 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3971a 6da 18 00 00 7E 
3971e 6db 30 18 0C 06 
39722 6dc 7E 00 00 78 
39726 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3972a 6de 78 00 00 02 
3972e 6df 06 0C 18 30 
39732 6e0 60 00 00 1E 
39736 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3973a 6e2 1E 00 00 10 
3973e 6e3 38 6C C6 00 
39742 6e4 00 00 00 00 
39746 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3974a 6e6 FF 00 00 18 
3974e 6e7 3C 7E 7E 3C 
39752 6e8 18 00 00 00 
39756 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3975a 6ea 7C 00 00 06 
3975e 6eb 06 3E 66 66 
39762 6ec 3E 00 00 00 
39766 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3976a 6ee 3C 00 00 60 
3976e 6ef 60 7C 66 66 
39772 6f0 7C 00 00 00 
39776 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3977a 6f2 3C 00 00 70 
3977e 6f3 18 7C 18 18 
39782 6f4 18 00 00 00 
39786 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3978a 6f6 60 3E 00 06 
3978e 6f7 06 3E 66 66 
39792 6f8 66 00 00 18 
39796 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3979a 6fa 3C 00 00 60 
3979e 6fb 00 60 60 60 
397a2 6fc 60 3C 00 06 
397a6 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
397aa 6fe 66 00 00 1C 
397ae 6ff 18 18 18 18 
397b2 700 3C 00 00 00 
397b6 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
397ba 702 C6 00 00 00 
397be 703 3E 66 66 66 
397c2 704 66 00 00 00 
397c6 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
397ca 706 3C 00 00 00 
397ce 707 3E 66 66 3E 
397d2 708 06 06 00 00 
397d6 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
397da 70a 60 60 00 00 
397de 70b 3E 66 06 06 
397e2 70c 06 00 00 00 
397e6 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
397ea 70e 3E 00 00 18 
397ee 70f 7E 18 18 18 
397f2 710 70 00 00 00 
397f6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
397fa 712 7C 00 00 00 
397fe 713 66 66 66 3C 
39802 714 18 00 00 00 
39806 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3980a 716 6C 00 00 00 
3980e 717 66 3C 18 3C 
39812 718 66 00 00 00 
39816 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3981a 71a 30 1E 00 00 
3981e 71b 7E 30 18 0C 
39822 71c 7E 00 00 18 
39826 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3982a 71e 3C 00 18 18 
3982e 71f 18 18 18 18 
39832 720 18 18 00 7E 
39836 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3983a 722 60 00 10 18 
3983e 723 1C 1E 1C 18 
39842 724 10 00 08 18 
39846 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3984a 726 08 00       | 	byte	$08, $00
3984c 727 00 00 00 00 
39850 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
39851 728 80 00 00 00 
39855 729 00 80 00 00 
39859 72a 80 80 00 00 
3985d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
39861 72c 80 00 80 00 
39865 72d 00 40 80 00 
39869 72e AA AA AA 00 
3986d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
39871 730 FF 00 00 00 
39875 731 00 FF 00 00 
39879 732 FF FF 00 00 
3987d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
39881 734 FF 00 FF 00 
39885 735 00 FF FF 00 
39889 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3988c 737 00 00 00 00 
39890 738 00          | ataripalette   file "ataripalettep2.def"
39891 738 11 11 11 00 
39895 739 22 22 22 00 
39899 73a 33 33 33 00 
3989d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
398a1 73c 55 55 55 00 
398a5 73d 66 66 66 00 
398a9 73e 77 77 77 00 
398ad 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
398b1 740 99 99 99 00 
398b5 741 AA AA AA 00 
398b9 742 BB BB BB 00 
398bd 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
398c1 744 DD DD DD 00 
398c5 745 EE EE EE 00 
398c9 746 FF FF FF 00 
398cd 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
398d1 748 00 14 40 00 
398d5 749 00 1E 60 00 
398d9 74a 00 28 80 00 
398dd 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
398e1 74c 00 3C BF 00 
398e5 74d 00 46 DF 00 
398e9 74e 00 50 FF 00 
398ed 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
398f1 750 39 77 FF 00 
398f5 751 55 8A FF 00 
398f9 752 71 9E FF 00 
398fd 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
39901 754 AA C5 FF 00 
39905 755 C6 D8 FF 00 
39909 756 E3 EC FF 00 
3990d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
39911 758 00 00 40 00 
39915 759 00 00 60 00 
39919 75a 00 00 80 00 
3991d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
39921 75c 00 00 BF 00 
39925 75d 00 00 DF 00 
39929 75e 00 00 FF 00 
3992d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
39931 760 39 39 FF 00 
39935 761 55 55 FF 00 
39939 762 71 71 FF 00 
3993d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
39941 764 AA AA FF 00 
39945 765 C6 C6 FF 00 
39949 766 E3 E3 FF 00 
3994d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
39951 768 20 00 40 00 
39955 769 30 00 60 00 
39959 76a 40 00 80 00 
3995d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
39961 76c 60 00 BF 00 
39965 76d 70 00 DF 00 
39969 76e 80 00 FF 00 
3996d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
39971 770 9C 39 FF 00 
39975 771 AA 55 FF 00 
39979 772 B8 71 FF 00 
3997d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
39981 774 D5 AA FF 00 
39985 775 E3 C6 FF 00 
39989 776 F1 E3 FF 00 
3998d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
39991 778 40 00 40 00 
39995 779 60 00 60 00 
39999 77a 80 00 80 00 
3999d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
399a1 77c BF 00 BF 00 
399a5 77d DF 00 DF 00 
399a9 77e FF 00 FF 00 
399ad 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
399b1 780 FF 39 FF 00 
399b5 781 FF 55 FF 00 
399b9 782 FF 71 FF 00 
399bd 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
399c1 784 FF AA FF 00 
399c5 785 FF C6 FF 00 
399c9 786 FF E3 FF 00 
399cd 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
399d1 788 40 00 20 00 
399d5 789 60 00 30 00 
399d9 78a 80 00 40 00 
399dd 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
399e1 78c BF 00 60 00 
399e5 78d DF 00 70 00 
399e9 78e FF 00 80 00 
399ed 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
399f1 790 FF 39 9C 00 
399f5 791 FF 55 AA 00 
399f9 792 FF 71 B8 00 
399fd 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
39a01 794 FF AA D5 00 
39a05 795 FF C6 E3 00 
39a09 796 FF E3 F1 00 
39a0d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
39a11 798 40 00 00 00 
39a15 799 60 00 00 00 
39a19 79a 80 00 00 00 
39a1d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
39a21 79c BF 00 00 00 
39a25 79d DF 00 00 00 
39a29 79e FF 00 00 00 
39a2d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
39a31 7a0 FF 39 39 00 
39a35 7a1 FF 55 55 00 
39a39 7a2 FF 71 71 00 
39a3d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
39a41 7a4 FF AA AA 00 
39a45 7a5 FF C6 C6 00 
39a49 7a6 FF E3 E3 00 
39a4d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
39a51 7a8 40 10 00 00 
39a55 7a9 60 18 00 00 
39a59 7aa 80 20 00 00 
39a5d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
39a61 7ac BF 30 00 00 
39a65 7ad DF 38 00 00 
39a69 7ae FF 40 00 00 
39a6d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
39a71 7b0 FF 6A 39 00 
39a75 7b1 FF 80 55 00 
39a79 7b2 FF 95 71 00 
39a7d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
39a81 7b4 FF BF AA 00 
39a85 7b5 FF D5 C6 00 
39a89 7b6 FF EA E3 00 
39a8d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
39a91 7b8 40 20 00 00 
39a95 7b9 60 30 00 00 
39a99 7ba 80 40 00 00 
39a9d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
39aa1 7bc BF 60 00 00 
39aa5 7bd DF 70 00 00 
39aa9 7be FF 80 00 00 
39aad 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
39ab1 7c0 FF 9C 39 00 
39ab5 7c1 FF AA 55 00 
39ab9 7c2 FF B8 71 00 
39abd 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
39ac1 7c4 FF D5 AA 00 
39ac5 7c5 FF E3 C6 00 
39ac9 7c6 FF F1 E3 00 
39acd 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
39ad1 7c8 40 30 00 00 
39ad5 7c9 60 48 00 00 
39ad9 7ca 80 60 00 00 
39add 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
39ae1 7cc BF 90 00 00 
39ae5 7cd DF A8 00 00 
39ae9 7ce FF C0 00 00 
39aed 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
39af1 7d0 FF CE 39 00 
39af5 7d1 FF D5 55 00 
39af9 7d2 FF DC 71 00 
39afd 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
39b01 7d4 FF EA AA 00 
39b05 7d5 FF F1 C6 00 
39b09 7d6 FF F8 E3 00 
39b0d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
39b11 7d8 30 40 00 00 
39b15 7d9 48 60 00 00 
39b19 7da 60 80 00 00 
39b1d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
39b21 7dc 90 BF 00 00 
39b25 7dd A8 DF 00 00 
39b29 7de C0 FF 00 00 
39b2d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
39b31 7e0 CE FF 39 00 
39b35 7e1 D5 FF 55 00 
39b39 7e2 DC FF 71 00 
39b3d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
39b41 7e4 EA FF AA 00 
39b45 7e5 F1 FF C6 00 
39b49 7e6 F8 FF E3 00 
39b4d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
39b51 7e8 00 40 00 00 
39b55 7e9 00 60 00 00 
39b59 7ea 00 80 00 00 
39b5d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
39b61 7ec 00 BF 00 00 
39b65 7ed 00 DF 00 00 
39b69 7ee 00 FF 00 00 
39b6d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
39b71 7f0 39 FF 39 00 
39b75 7f1 55 FF 55 00 
39b79 7f2 71 FF 71 00 
39b7d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
39b81 7f4 AA FF AA 00 
39b85 7f5 C6 FF C6 00 
39b89 7f6 E3 FF E3 00 
39b8d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
39b91 7f8 00 40 14 00 
39b95 7f9 00 60 1E 00 
39b99 7fa 00 80 28 00 
39b9d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
39ba1 7fc 00 BF 3C 00 
39ba5 7fd 00 DF 46 00 
39ba9 7fe 00 FF 50 00 
39bad 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
39bb1 800 39 FF 77 00 
39bb5 801 55 FF 8A 00 
39bb9 802 71 FF 9E 00 
39bbd 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
39bc1 804 AA FF C5 00 
39bc5 805 C6 FF D8 00 
39bc9 806 E3 FF EC 00 
39bcd 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
39bd1 808 00 40 28 00 
39bd5 809 00 60 3C 00 
39bd9 80a 00 80 50 00 
39bdd 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
39be1 80c 00 BF 78 00 
39be5 80d 00 DF 8C 00 
39be9 80e 00 FF A0 00 
39bed 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
39bf1 810 39 FF B5 00 
39bf5 811 55 FF C0 00 
39bf9 812 71 FF CA 00 
39bfd 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
39c01 814 AA FF DF 00 
39c05 815 C6 FF EA 00 
39c09 816 E3 FF F4 00 
39c0d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
39c11 818 00 40 40 00 
39c15 819 00 60 60 00 
39c19 81a 00 80 80 00 
39c1d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39c21 81c 00 BF BF 00 
39c25 81d 00 DF DF 00 
39c29 81e 00 FF FF 00 
39c2d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39c31 820 39 FF FF 00 
39c35 821 55 FF FF 00 
39c39 822 71 FF FF 00 
39c3d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39c41 824 AA FF FF 00 
39c45 825 C6 FF FF 00 
39c49 826 E3 FF FF 00 
39c4d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39c51 828 00 28 40 00 
39c55 829 00 3C 60 00 
39c59 82a 00 50 80 00 
39c5d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39c61 82c 00 78 BF 00 
39c65 82d 00 8C DF 00 
39c69 82e 00 A0 FF 00 
39c6d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39c71 830 39 B5 FF 00 
39c75 831 55 C0 FF 00 
39c79 832 71 CA FF 00 
39c7d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39c81 834 AA DF FF 00 
39c85 835 C6 EA FF 00 
39c89 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39c8c 837             | 
39c8c 837             | '**********************************************************************************
39c8c 837             | '
39c8c 837             | '        Timings and colors definitions
39c8c 837             | '
39c8c 837             | '**********************************************************************************
39c8c 837             | 
39c8c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
39c8c 837 08 00 00 00 
39c90 838 3C 00 00 00 
39c94 839 08 00 00 00 
39c98 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
39c9c 83b 07 00 00 00 
39ca0 83c 04 00 00 00 
39ca4 83d 01 00 00 00 
39ca8 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
39cac 83f 58 02 00 00 
39cb0 840 20 9E 4B 14 
39cb4 841 FB A8 9E 01 
39cb8 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
39cbc 843 00 00 00 00 
39cc0 844 C0 00 00 00 
39cc4 845 00 00 00 00 
39cc8 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ccc 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
39ccc 847 00 75 C7 97 
39cd0 848 27 47 F6 0A 
39cd4 849 05 79 CB 9B 
39cd8 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
39cdc 84b             | 
39cdc 84b             | ''--------  Initialization  ----------------------------------------------------------------
39cdc 84b             | 
39cdc 84b 28 0C 64 FD | hdmi            setq    #6
39ce0 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
39ce4 84d 28 10 64 FD |                 setq    #8
39ce8 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
39cec 84f             | 
39cec 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
39cf0 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
39cf4 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
39cf8 852 D6 C6 01 F1 |                 add     t1,hbase
39cfc 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
39d00 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
39d04 855 7B 0B 80 5F 
39d08 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
39d0c 857 66 66 86 FF 
39d10 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
39d14 859             | '
39d14 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
39d18 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
39d1c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
39d20 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
39d24 85d             | 
39d24 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
39d28 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
39d2c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
39d30 860             | 
39d30 860             | ''--------  frame rendering main loop  ---------------------------------------------------
39d30 860             | 
39d30 860 28 06 64 FD | p101            setq 	#3
39d34 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
39d38 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
39d3c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
39d40 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
39d44 865 00 A0 05 F6 |                 mov     dlinum, #0
39d48 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
39d4c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
39d50 868             | 
39d50 868             | 
39d50 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
39d54 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
39d58 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
39d5c 86b             |                 
39d5c 86b             | 
39d5c 86b             | 
39d5c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
39d5c 86b             |   
39d5c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
39d60 86c 29 FE 65 3D |          if_nc  setq2   #255
39d64 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
39d68 86e             | 
39d68 86e             | '' -----   up porch (before the picture)
39d68 86e             | 
39d68 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
39d6c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
39d70 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
39d74 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
39d78 872             |  
39d78 872             |    
39d78 872             |  
39d78 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39d7c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
39d80 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
39d84 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39d88 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
39d8c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
39d90 878             | 
39d90 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39d94 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
39d98 87a 48 00 B0 FD | 		call    #dli
39d9c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
39da0 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
39da4 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
39da8 87e             |                 	
39da8 87e             |                 
39da8 87e             | 
39da8 87e             |  
39da8 87e             | '' ------- the main screen drawing starts here
39da8 87e             | 
39da8 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
39dac 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
39db0 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
39db4 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
39db8 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
39dbc 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
39dc0 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
39dc4 885             |               
39dc4 885             | 
39dc4 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
39dc8 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
39dcc 887             | 
39dcc 887             | ' ---------------- All visible lines displayed now, start vblank  
39dcc 887             | 
39dcc 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
39dd0 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
39dd4 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
39dd8 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
39ddc 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
39de0 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
39de4 88d             | 
39de4 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
39de4 88d             | 
39de4 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
39de4 88d             | 
39de4 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
39de8 88e             | 
39de8 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
39dec 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
39df0 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
39df4 891             | 
39df4 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
39df8 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
39dfc 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
39e00 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
39e04 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
39e08 896             | 
39e08 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
39e0c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
39e10 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
39e14 899 70 00 90 AD |     if_z        jmp     #preload
39e18 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
39e1c 89b 94 00 90 AD |     if_z        jmp     #preload2
39e20 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
39e24 89d 0C 00 90 AD |     if_z        jmp     #p390
39e28 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
39e2c 89f 28 00 90 AD |     if_z        jmp     #p391  
39e30 8a0             | 
39e30 8a0 2D 00 64 FD | p308            ret
39e34 8a1             |    
39e34 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
39e38 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
39e3c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
39e40 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
39e44 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
39e48 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
39e4c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
39e50 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
39e54 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
39e58 8aa             |  
39e58 8aa             | '' --------  Reload palette. To do 
39e58 8aa             | 
39e58 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
39e5c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
39e60 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
39e64 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
39e68 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
39e6c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
39e70 8b0 70 FF 9F FD |         	jmp     #dli                
39e74 8b1             |       
39e74 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
39e74 8b1             | 
39e74 8b1             | 
39e74 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
39e74 8b1             | 
39e74 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
39e78 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
39e7c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39e80 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
39e84 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
39e88 8b6             |         
39e88 8b6             | '' -------------- Preload a line from PSRAM        
39e88 8b6             |         
39e88 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
39e8c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
39e90 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
39e94 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
39e98 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
39e9c 8bb             | 
39e9c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
39ea0 8bc 32 B7 01 F6 |                 mov     buf2,a1024
39ea4 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
39ea8 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
39eac 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
39eb0 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
39eb4 8c1             |  
39eb4 8c1             |  
39eb4 8c1             | preload2      '  incmod  dlinum,#3
39eb4 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
39eb8 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
39ebc 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
39ec0 8c4 28 02 64 FD |                 setq	#1
39ec4 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
39ec8 8c6             |                 
39ec8 8c6             | 
39ec8 8c6             | '' -------------- Draw sprites
39ec8 8c6             | 
39ec8 8c6 CF 5C 02 F6 | sprite          mov t8,frames
39ecc 8c7 10 5C 0E F5 | 		and t8,#16 wz
39ed0 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
39ed4 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
39ed8 8ca             | 		
39ed8 8ca             | 
39ed8 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
39edc 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
39ee0 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
39ee4 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
39ee8 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
39eec 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
39ef0 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
39ef4 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
39ef8 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
39efc 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
39f00 8d4 01 52 86 F1 |                 sub     sprite_h,#1
39f04 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
39f08 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
39f0c 8d7             | 
39f0c 8d7             | 
39f0c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
39f10 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
39f14 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
39f18 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
39f1c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
39f20 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
39f24 8dd 00 5E 06 F6 |                 mov 	t9,#0
39f28 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
39f2c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
39f30 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
39f34 8e1             |      
39f34 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
39f38 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
39f3c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
39f40 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
39f44 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
39f48 8e6             |                 
39f48 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
39f4c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
39f50 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
39f54 8e9             |   		
39f54 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
39f58 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
39f5c 8eb             | 
39f5c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
39f60 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
39f64 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
39f68 8ee             |  
39f68 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
39f6c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
39f70 8f0 10 00 90 CD |      if_c 	jmp     #p899		
39f74 8f1             | 	
39f74 8f1             | 	
39f74 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
39f78 8f2 28 CD 01 F1 | 		add	t4,sprite_w
39f7c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
39f80 8f4             | 
39f80 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
39f84 8f5             | 
39f84 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
39f88 8f6 01 58 86 F1 | 	 	sub     t6,#1
39f8c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
39f90 8f8             | 
39f90 8f8 28 58 62 FD |                 setq   	t6
39f94 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
39f98 8fa 28 5D 02 F6 |                 mov t8,sprite_w
39f9c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
39fa0 8fc 24 00 90 AD |         if_z    jmp #p898
39fa4 8fd             |          
39fa4 8fd             |         
39fa4 8fd 70 5F 06 F6 |                 mov  t9,#368
39fa8 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
39fac 8ff             | 
39fac 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
39fb0 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
39fb4 901 FF FF 7F FF 
39fb8 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
39fbc 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
39fc0 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
39fc4 905 2D 01 00 F5 |                 and 0-0, t7
39fc8 906             |                
39fc8 906             | 
39fc8 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
39fcc 907 E5 E0 7A FA |                 wmlong 368,t3				
39fd0 908             |                 
39fd0 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
39fd4 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
39fd8 90a 2D 00 64 FD |                 ret
39fdc 90b             | 	
39fdc 90b             | 	
39fdc 90b             |                
39fdc 90b             |  
39fdc 90b             | '' -------------- Graphics line ------------------------------------------------------------
39fdc 90b             |  
39fdc 90b             | 
39fdc 90b             | '' consts and vars
39fdc 90b             | 
39fdc 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
39fe0 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
39fe4 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
39fe8 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
39fec 90f             | 
39fec 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
39ff0 910             | 
39ff0 910             | '------ these longs will be set by setmode function
39ff0 910             | 
39ff0 910 00 00 00 00 | m_bs            long    0        'blanks before sync
39ff4 911 00 00 00 00 | m_sn            long    0        'sync
39ff8 912 00 00 00 00 | m_bv            long    0        'blanks before visible
39ffc 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3a000 914             | 'm_border        long    0        'left/right borders
3a000 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3a004 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3a008 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3a00c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3a010 918 00 00 00 00 | i_totalvis      long    0
3a014 919             | 
3a014 919             | '-------------------------------------
3a014 919             |  
3a014 919 00 00 00 00 | linenum         long    0
3a018 91a 00 00 00 00 | frames          long    0
3a01c 91b 00 00 00 00 | dlinum long 0
3a020 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3a024 91d             | 
3a024 91d 00 00 00 00 | vblankptr       long    0
3a028 91e 00 00 00 00 | modeptr         long    0
3a02c 91f 00 00 00 00 | paletteptr      long    0
3a030 920 00 00 00 00 | dlptr           long    0
3a034 921 01 00 00 00 | hbase           long    1
3a038 922 00 00 00 00 | mailbox         long    0
3a03c 923 00 00 00 00 | spriteptr          long 0
3a040 924             | 
3a040 924 00 00 00 00 | cmd             long    0
3a044 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3a048 926 00 04 00 00 | buf2            long    1024
3a04c 927 01 00 00 00 | dlptr2          long    1
3a050 928 01 00 00 00 | dl              long    1
3a054 929             | 
3a054 929 00 00 00 00 | buf1c long 0
3a058 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3a05c 92b 01 00 00 00 | framebuf2       long    1
3a060 92c 01 00 00 00 | hsync0          long    1
3a064 92d 01 00 00 00 | hsync1          long    1
3a068 92e             | 
3a068 92e 01 00 00 00 | t1              long    1
3a06c 92f 00 00 00 00 | t2 long 0
3a070 930 00 00 00 00 | t3 long 0
3a074 931 00 00 00 00 | t4 long 0
3a078 932             | 
3a078 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3a07c 933 00 00 00 00 | rcnt2           long    0
3a080 934 00 00 00 00 | rcnt2a          long    0
3a084 935 00 00 00 00 | roffset         long    0
3a088 936 00 00 00 00 | rdl             long    0  'dl repeat line
3a08c 937 00 00 00 00 | dlc             long    0  'dl command
3a090 938             | 
3a090 938 FF FF FF FF | affffffff       long    $ffffffff
3a094 939 00 00 00 00 | sprite1pointer long 0
3a098 93a 00 00 00 00 | sprite1xy      long 0
3a09c 93b 00 00 00 00 | sprite1wh      long 0
3a0a0 93c 00 00 00 00 | sprite2pointer long 0
3a0a4 93d 00 00 00 00 | sprite2xy      long 0
3a0a8 93e 00 00 00 00 | sprite2wh      long 0
3a0ac 93f 00 00 00 00 | sprite3pointer long 0
3a0b0 940 00 00 00 00 | sprite3xy      long 0
3a0b4 941 00 00 00 00 | sprite3wh      long 0
3a0b8 942 00 00 00 00 | sprite4pointer long 0
3a0bc 943 00 00 00 00 | sprite4xy      long 0
3a0c0 944 00 00 00 00 | sprite4wh      long 0
3a0c4 945 00 00 00 00 | sprite5pointer long 0
3a0c8 946 00 00 00 00 | sprite5xy      long 0
3a0cc 947 00 00 00 00 | sprite5wh      long 0
3a0d0 948 00 00 00 00 | sprite6pointer long 0
3a0d4 949 00 00 00 00 | sprite6xy      long 0
3a0d8 94a 00 00 00 00 | sprite6wh      long 0
3a0dc 94b 00 00 00 00 | sprite7pointer long 0
3a0e0 94c 00 00 00 00 | sprite7xy      long 0
3a0e4 94d 00 00 00 00 | sprite7wh      long 0
3a0e8 94e 00 00 00 00 | sprite8pointer long 0
3a0ec 94f 00 00 00 00 | sprite8xy      long 0
3a0f0 950 00 00 00 00 | sprite8wh      long 0
3a0f4 951 00 00 00 00 | sprite9pointer long 0
3a0f8 952 00 00 00 00 | sprite9xy      long 0
3a0fc 953 00 00 00 00 | sprite9wh      long 0
3a100 954 00 00 00 00 | sprite10pointer long 0
3a104 955 00 00 00 00 | sprite10xy      long 0
3a108 956 00 00 00 00 | sprite10wh      long 0
3a10c 957 00 00 00 00 | sprite11pointer long 0
3a110 958 00 00 00 00 | sprite11xy      long 0
3a114 959 00 00 00 00 | sprite11wh      long 0
3a118 95a 00 00 00 00 | sprite12pointer long 0
3a11c 95b 00 00 00 00 | sprite12xy      long 0
3a120 95c 00 00 00 00 | sprite12wh      long 0
3a124 95d 00 00 00 00 | sprite13pointer long 0
3a128 95e 00 00 00 00 | sprite13xy      long 0
3a12c 95f 00 00 00 00 | sprite13wh      long 0
3a130 960 00 00 00 00 | sprite14pointer long 0
3a134 961 00 00 00 00 | sprite14xy      long 0
3a138 962 00 00 00 00 | sprite14wh      long 0
3a13c 963 00 00 00 00 | sprite15pointer long 0
3a140 964 00 00 00 00 | sprite15xy      long 0
3a144 965 00 00 00 00 | sprite15wh      long 0
3a148 966 00 00 00 00 | sprite16pointer long 0
3a14c 967 00 00 00 00 | sprite16xy      long 0
3a150 968 00 00 00 00 | sprite16wh      long 0
3a154 969 00 00 00 00 | sprite17pointer long 0
3a158 96a 00 00 00 00 | sprite17xy      long 0
3a15c 96b 00 00 00 00 | sprite17wh      long 0
3a160 96c 00 00 00 00 | sprite18pointer long 0
3a164 96d 00 00 00 00 | sprite18xy      long 0
3a168 96e 00 00 00 00 | sprite18wh      long 0
3a16c 96f 00 00 00 00 | spritenum long 0
3a170 970             | 
3a170 970 00 00 00 00 | spriteline long 0
3a174 971 84 03 00 00 | sprite_x long 900
3a178 972 00 00 00 00 | sprite_y long 0
3a17c 973 10 00 00 00 | sprite_w long 16
3a180 974 40 00 00 00 | sprite_h long 64
3a184 975 00 00 00 00 | l2 long 0
3a188 976 00 00 00 00 | t5 long 0
3a18c 977 00 00 00 00 | t6 long 0
3a190 978 00 00 00 00 | t7 long 0
3a194 979 00 00 00 00 | t8 long 0
3a198 97a 00 00 00 00 | t9 long 0
3a19c 97b 00 00 00 00 | preloadaddr long 0
3a1a0 97c 00 00 00 00 | preloadlineaddr long 0
3a1a4 97d 00 04 00 00 | a1024 long 1024
3a1a8 97e             | 
3a1a8 97e E0 03 00 00 | aa long 992
3a1ac 97f FF 03 00 00 | a1023 long 1023
3a1b0 980 00 10 00 00 | a4096 long 4096
3a1b4 981             |  fit 368
3a1b4 981             | _psram_spin2_dat_
3a1b4 981 00 00 00 00 
      ...             
3a2ac 9bf 00 00 00 00 
3a2b0 9c0 00 00 00 00 |     listdata long 0[8*8]
3a2b4 9c1             |             orgh
3a2b4                 | 
3a2b4                 | ' driver state
3a2b4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a2b8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a2bc                 | 
3a2bc                 | ' delay profile
3a2bc     07 00 00 00 
3a2c0     00 CF 7B 05 
3a2c4     80 D1 F0 08 
3a2c8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a2cc     80 C4 60 0F 
3a2d0     80 39 7A 12 
3a2d4     40 2D D9 13 
3a2d8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a2dc                 | 
3a2dc                 | ' data to be passed to driver when starting it
3a2dc                 | startupData
3a2dc     00 00 00 00 |     long    0           ' current frequency
3a2e0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a2e4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a2e8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a2ec     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a2f0     FC A2 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a2f4     7C A3 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a2f8     9C A3 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a2fc                 | 
3a2fc                 | ' data for memory
3a2fc                 | deviceData
3a2fc                 |     ' 16 bank parameters follow (16MB per bank)
3a2fc     00 00 00 00 
      ...             
3a334     00 00 00 00 
3a338     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a33c                 |     ' 16 banks of pin parameters follow
3a33c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a340     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a344     FF FF FF FF 
      ...             
3a374     FF FF FF FF 
3a378     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a37c                 | 
3a37c                 | ' data for COG polling
3a37c                 | qosData 
3a37c     00 00 FF FF 
3a380     00 00 FF FF 
3a384     00 00 FF FF 
3a388     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a38c     00 00 FF FF 
3a390     00 00 FF FF 
3a394     00 00 FF FF 
3a398     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a39c                 |     
3a39c                 | ' mailbox storage
3a39c                 | 
3a39c                 | mailboxes
3a39c     00 00 00 00 
      ...             
3a3f4     00 00 00 00 
3a3f8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3a3fc                 | 	alignl
3a3fc                 | _psram16drv_spin2_dat_
3a3fc                 |                             orgh
3a3fc     00 00 00 00 
      ...             
3a414     00 00 00 00 
3a418     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3a41c                 | 
3a41c                 | driver_start
3a41c                 |                             org
3a41c 000             | '..................................................................................................
3a41c 000             | ' Memory layout for COG RAM once operational:
3a41c 000             | '
3a41c 000             | '  COG RAM address      Usage
3a41c 000             | '  ---------------      ----
3a41c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a41c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a41c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a41c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a41c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a41c 000             | '  ~$198-$1F3           State and register variables
3a41c 000             | '
3a41c 000             | ' Also during driver COG startup:
3a41c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a41c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a41c 000             | '..................................................................................................
3a41c 000             |                             
3a41c 000             | ' Mailbox storage after vector initialization
3a41c 000             | 
3a41c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a420 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a424 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a428 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a42c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a430 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a434 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a438 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a43c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a440 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a444 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a448 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a44c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a450 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a454 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a458 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a45c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a460 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a464 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a468 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a46c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a470 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a474 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a478 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a47c 018             | 
3a47c 018             | ' Mailbox parameter addresses per COG once patched
3a47c 018             |                             
3a47c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a480 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a484 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a488 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a48c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a490 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a494 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a498 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a49c 020             | 
3a49c 020             | '..................................................................................................
3a49c 020             | ' Per COG request and state setup and service branching
3a49c 020             |         
3a49c 020             | cog0                 
3a49c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a4a0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a4a4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3a4a8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a4ac 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a4b0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a4b4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a4b8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a4bc 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a4c0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a4c4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a4c8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3a4cc 02c             | cog1                        
3a4cc 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a4d0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a4d4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3a4d8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a4dc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a4e0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a4e4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a4e8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a4ec 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a4f0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a4f4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a4f8 037 33 CA 63 FD |                             execf   request-0               'jump to service
3a4fc 038             | cog2                         
3a4fc 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a500 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a504 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a508 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a50c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a510 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a514 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a518 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a51c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a520 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a524 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a528 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a52c 044             | cog3                        
3a52c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a530 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a534 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a538 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a53c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a540 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a544 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a548 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a54c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a550 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a554 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a558 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3a55c 050             | cog4                        
3a55c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a560 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a564 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3a568 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a56c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a570 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a574 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3a578 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3a57c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3a580 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a584 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a588 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3a58c 05c             | cog5                        
3a58c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3a590 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3a594 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3a598 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3a59c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a5a0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a5a4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3a5a8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3a5ac 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3a5b0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a5b4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a5b8 067 33 CA 63 FD |                             execf   request-0               'jump to service
3a5bc 068             | cog6                        
3a5bc 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3a5c0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3a5c4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3a5c8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3a5cc 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a5d0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a5d4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3a5d8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3a5dc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3a5e0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a5e4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a5e8 073 33 CA 63 FD |                             execf   request-0               'jump to service
3a5ec 074             | cog7                        
3a5ec 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3a5f0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3a5f4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3a5f8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3a5fc 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a600 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a604 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3a608 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3a60c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3a610 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a614 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a618 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3a61c 080             |                             fit     128
3a61c 080             | 
3a61c 080             |                             fit     128
3a61c 080             | pad                         long    0[128-$]                'align init code to $80
3a61c 080             | 
3a61c 080             | '..................................................................................................
3a61c 080             | 
3a61c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3a61c 080             | 
3a61c 080             | init                        
3a61c 080             |                             ' get driver scratch long address in hub
3a61c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3a620 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3a624 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3a628 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3a62c 084             |                     
3a62c 084             |                             ' read in the additional LUT RAM code
3a62c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3a630 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3a634 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3a638 087             | 
3a638 087             |                             ' read the startup parameters
3a638 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3a63c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3a640 089             | 
3a640 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3a640 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3a644 08a             | 
3a644 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3a648 08b 01 00 00 5F 
3a64c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3a650 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3a654 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3a658 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3a65c 090             | 
3a65c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3a65c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3a660 091 01 00 00 FF 
3a664 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3a668 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3a66c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3a670 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3a674 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3a678 097 08 DE 47 F5 |                             or      a, #8
3a67c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3a680 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3a684 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3a688 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3a68c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3a690 09d 01 DE 07 F1 |                             add     a, #1
3a694 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3a698 09f             |  
3a698 09f             |                             ' setup device control pin states
3a698 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3a69c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3a6a0 0a1 01 00 00 FF 
3a6a4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3a6a8 0a3             | 
3a6a8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3a6ac 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3a6b0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3a6b4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3a6b8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3a6bc 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3a6c0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3a6c4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3a6c8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3a6cc 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3a6d0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3a6d4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3a6d8 0af             | pinloop
3a6d8 0af             |                             ' generate minimum CE high time before access
3a6d8 0af A1 07 00 FF 
3a6dc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3a6e0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3a6e4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3a6e8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3a6ec 0b4 1F DE 63 FD |                             waitx   a                       'delay
3a6f0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3a6f4 0b6             | 
3a6f4 0b6             |                             ' setup the COG mailboxes and addresses 
3a6f4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3a6f8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3a6fc 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3a700 0b9             | 
3a700 0b9 28 2E 64 FD |                             setq    #24-1
3a704 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3a708 0bb             | 
3a708 0bb             |                             ' setup the polling loop for active COGs 
3a708 0bb 01 C2 63 FD |                             cogid   id
3a70c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3a710 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3a714 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3a718 0bf 0A F0 07 F6 |                             mov     ptra, #10
3a71c 0c0 E1 F1 03 FA |                             mul     ptra, id
3a720 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3a724 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3a728 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3a72c 0c4 03 C2 07 FA |                             mul     id, #3
3a730 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3a734 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3a738 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3a73c 0c8 D8 01 B0 FD |                             call    #reloadcogs
3a740 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3a744 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3a748 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3a748 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3a74c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3a750 0cd 08 04 DC FC |                             rep     #2, #8
3a754 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3a758 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3a75c 0d0             | 
3a75c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3a75c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3a75c 0d0 01 C2 63 FD |                             cogid   id
3a760 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3a764 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3a768 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3a76c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3a770 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3a774 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3a778 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3a77c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3a780 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3a784 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a788 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3a78c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3a790 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3a794 0de A5 E5 03 F1 |                             add     d, const512
3a798 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a79c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3a7a0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3a7a4 0e2             |                             
3a7a4 0e2             |                             ' setup register values for control vector loop setup after we return
3a7a4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3a7a8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3a7ac 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3a7b0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3a7b4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3a7b8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3a7bc 0e8 D0 C3 8F F9 |                             altd    id, #id0
3a7c0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3a7c4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3a7c8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3a7cc 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3a7d0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3a7d4 0ee             |  
3a7d4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3a7d8 0ef 07 CA 07 F5 |                             and     request, #7
3a7dc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3a7e0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3a7e4 0f2             |                             fit     $100                    'ensure all init code fits this space
3a7e4 0f2             | 
3a7e4 0f2             |                             fit     $100                    'ensure all init code fits this space
3a7e4 0f2             | 
3a7e4 0f2 00 00 00 00 
      ...             
3a814 0fe 00 00 00 00 
3a818 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3a81c 100             | 
3a81c 100             | '..................................................................................................
3a81c 100             | ' Error result handling and COG notification of request completion
3a81c 100             | 
3a81c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3a820 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3a824 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3a828 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3a82c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3a830 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3a834 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3a838 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3a83c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3a840 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3a844 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3a848 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3a84c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3a850 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3a854 10e             | ' Poller re-starts here after a COG is serviced
3a854 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3a858 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3a85c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3a860 111             | ' Main dynamic polling loop repeats until a request arrives
3a860 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3a864 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3a868 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3a86c 114             | 
3a86c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3a870 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3a874 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3a878 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3a87c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3a880 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3a884 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3a888 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3a88c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3a890 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3a894 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3a898 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3a89c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3a8a0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3a8a4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3a8a8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3a8ac 124             | 
3a8ac 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3a8b0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3a8b4 126             |  
3a8b4 126             | '..................................................................................................
3a8b4 126             | ' List handler                               
3a8b4 126             | 
3a8b4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3a8b8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3a8bc 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3a8c0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3a8c4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3a8c8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3a8cc 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3a8d0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3a8d4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3a8d8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3a8dc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3a8e0 131 33 00 60 FD |                             execf   0-0                     'process the request 
3a8e4 132             | 
3a8e4 132             | '..................................................................................................
3a8e4 132             | ' Restoring per COG state and resuming where we left off
3a8e4 132             | 
3a8e4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3a8e8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3a8ec 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3a8f0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3a8f4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3a8f8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3a8fc 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3a900 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3a904 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3a908 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3a90c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3a910 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3a914 13e             |                    
3a914 13e             | '..................................................................................................
3a914 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3a914 13e             | 
3a914 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3a918 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3a91c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3a920 141 D0 DF B7 F9 |                             setd    a, #id0
3a924 142 D8 DF BF F9 |                             sets    a, #addr1
3a928 143 FE FF FF FF 
3a92c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3a930 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3a934 146 3F DE A7 F9 |                             alti    a, #%111_111 
3a938 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3a93c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3a940 149 01 E2 63 FD |                             cogid   c
3a944 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3a948 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3a94c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3a950 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3a954 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3a958 14f 00 E0 03 F6 |                             mov     b, 0-0
3a95c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3a960 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3a964 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3a968 153 0C 00 90 AD |             if_z            jmp     #excluded               
3a96c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3a970 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3a974 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3a978 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3a97c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3a980 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3a984 15a             | 
3a984 15a             | 'determine priority cogs and build instructions for the polling sequence
3a984 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3a988 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3a98c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3a990 15d             | 
3a990 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3a994 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3a998 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3a99c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3a9a0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3a9a4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3a9a8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3a9ac 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3a9b0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3a9b4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3a9b8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3a9bc 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3a9c0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3a9c4 16a             | endprioloop
3a9c4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3a9c8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3a9cc 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3a9d0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3a9d4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3a9d8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3a9dc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3a9e0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3a9e4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3a9e8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3a9ec 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3a9f0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3a9f4 176             | 
3a9f4 176             | ' populate the round robin COG polling instructions
3a9f4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3a9f8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3a9fc 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3aa00 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3aa04 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3aa08 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3aa0c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3aa10 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3aa14 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3aa18 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3aa1c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3aa20 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3aa24 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3aa28 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3aa2c 184             | '..................................................................................................
3aa2c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3aa2c 184             | 
3aa2c 184             | set_latency                                                 '            (a) set latency
3aa2c 184             | get_latency                                                 '            (b) get latency
3aa2c 184             | set_burst                                                   '            (c) set burst size of bank
3aa2c 184             | get_burst                                                   '            (d) get burst size of bank
3aa2c 184             |                                                             '            (e) dump state
3aa2c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3aa30 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3aa34 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3aa38 187             |                                                             ' | | | | e  account for following AUGS
3aa38 187 04 00 00 FF 
3aa3c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3aa40 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3aa44 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3aa48 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3aa4c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3aa50 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3aa54 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3aa58 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3aa5c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3aa60 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3aa64 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3aa68 193             | 
3aa68 193             | '..................................................................................................
3aa68 193             | ' Misc EXECF code
3aa68 193             | 
3aa68 193 33 72 63 FD | start_read_exec             execf   newburstr
3aa6c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3aa70 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3aa74 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3aa78 197             | 
3aa78 197             | '..................................................................................................
3aa78 197             | ' Variables
3aa78 197             | 
3aa78 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3aa7c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3aa80 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3aa84 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3aa88 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3aa8c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3aa90 19d             | 
3aa90 19d 00 00 00 80 | xfreq1          long    $80000000
3aa94 19e 00 00 00 40 | xfreq2          long    $40000000
3aa98 19f 03 00 00 00 | delay           long    3
3aa9c 1a0             | 
3aa9c 1a0             | lutcodeaddr                 
3aa9c 1a0             | startupparams
3aa9c 1a0             | excludedcogs                                    'careful: shared register use!
3aa9c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3aaa0 1a1 00 00 00 00 | flags           long    0
3aaa4 1a2             | mask                                            'careful: shared register use!
3aaa4 1a2 00 00 00 00 | resetmaskA      long    0
3aaa8 1a3             | limit                                           'careful: shared register use!
3aaa8 1a3 00 00 00 00 | resetmaskB      long    0
3aaac 1a4 00 00 00 00 | datapins        long    0
3aab0 1a5             | const512                                        'careful: shared register use!
3aab0 1a5 00 00 00 00 | devicelist      long    0
3aab4 1a6 00 00 00 00 | coglist         long    0
3aab8 1a7 00 00 00 00 | mbox            long    0 
3aabc 1a8             | 
3aabc 1a8             | clkpin                                          'shared with code patched during init
3aabc 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3aac0 1a9             | cspin                                           'shared with code patched during init
3aac0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3aac4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3aac8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3aacc 1ac 01 00 00 00 | clkdelay        long    1
3aad0 1ad 00 00 00 00 | regdatabus      long    0
3aad4 1ae             | 
3aad4 1ae 10 00 00 00 | deviceaddr      long    $10
3aad8 1af             | rrcounter
3aad8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3aadc 1b0             | 
3aadc 1b0             | ' jump addresses for the per COG handlers
3aadc 1b0 20 00 00 00 | cog0_handler    long    cog0
3aae0 1b1 2C 00 00 00 | cog1_handler    long    cog1
3aae4 1b2 38 00 00 00 | cog2_handler    long    cog2
3aae8 1b3 44 00 00 00 | cog3_handler    long    cog3
3aaec 1b4 50 00 00 00 | cog4_handler    long    cog4
3aaf0 1b5 5C 00 00 00 | cog5_handler    long    cog5
3aaf4 1b6 68 00 00 00 | cog6_handler    long    cog6
3aaf8 1b7 74 00 00 00 | cog7_handler    long    cog7
3aafc 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3ab00 1b9             | 
3ab00 1b9             | ' EXECF sequences
3ab00 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3ab04 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3ab08 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3ab0c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3ab10 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3ab14 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3ab18 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3ab1c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3ab1c 1c0             | 
3ab1c 1c0             | 
3ab1c 1c0             | ' SKIPF sequences
3ab1c 1c0             | skiptable
3ab1c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3ab20 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3ab24 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3ab28 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3ab2c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3ab30 1c5 00 00 00 00 | pattern2        long    0
3ab34 1c6 00 00 00 00 | pattern3        long    0
3ab38 1c7 77 02 00 00 | singlelong      long    %1001110111  
3ab3c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3ab40 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3ab44 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3ab48 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3ab4c 1cc             | 
3ab4c 1cc             | ' LUT RAM address values
3ab4c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3ab50 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3ab54 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3ab58 1cf F6 02 00 00 | noread          long    noread_lut
3ab5c 1d0             | 
3ab5c 1d0 00 00 00 00 | id0             long    0
3ab60 1d1 01 00 00 00 | id1             long    1
3ab64 1d2 02 00 00 00 | id2             long    2
3ab68 1d3 03 00 00 00 | id3             long    3
3ab6c 1d4 04 00 00 00 | id4             long    4
3ab70 1d5 05 00 00 00 | id5             long    5
3ab74 1d6 06 00 00 00 | id6             long    6
3ab78 1d7 07 00 00 00 | id7             long    7
3ab7c 1d8             | 
3ab7c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3ab7c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3ab7c 1d8 00 00 00 00 | addr1           long    0
3ab80 1d9 00 00 00 00 | hubdata         long    0
3ab84 1da 00 00 00 00 | count           long    0
3ab88 1db 00 00 00 00 | addr2           long    0
3ab8c 1dc 00 00 00 00 | total           long    0
3ab90 1dd 00 00 00 00 | offset1         long    0
3ab94 1de 00 00 00 00 | offset2         long    0
3ab98 1df 00 00 00 00 | link            long    0
3ab9c 1e0             | 
3ab9c 1e0             | burstwrite                                      'note shared register use during init
3ab9c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3aba0 1e1 00 00 00 00 | id              long    0
3aba4 1e2             | 
3aba4 1e2 00 00 00 00 | header          long    0
3aba8 1e3 00 00 00 00 | trailer         long    0
3abac 1e4 00 00 00 00 | cmdaddr         long    0
3abb0 1e5 00 00 00 00 | request         long    0
3abb4 1e6 00 00 00 00 | rrlimit         long    0
3abb8 1e7 00 00 00 00 | pinconfig       long    0
3abbc 1e8 00 00 00 00 | clks            long    0
3abc0 1e9 00 00 00 00 | resume          long    0
3abc4 1ea 00 00 00 00 | orighubsize     long    0
3abc8 1eb 00 00 00 00 | wrclks          long    0
3abcc 1ec             | 
3abcc 1ec 00 00 00 00 | pattern         long    0
3abd0 1ed 00 00 00 00 | hubscratch      long    0
3abd4 1ee 00 10 00 00 | val4k           long    4096
3abd8 1ef             | 
3abd8 1ef             | ' temporary general purpose regs
3abd8 1ef 00 00 00 00 | a               long    0
3abdc 1f0 00 00 00 00 | b               long    0
3abe0 1f1 00 00 00 00 | c               long    0
3abe4 1f2 00 00 00 00 | d               long    0
3abe8 1f3             |                 fit     502
3abe8 1f3             | 
3abe8 1f3             |                 fit     502
3abe8 1f3             | 
3abe8 1f3             | '..................................................................................................
3abe8 1f3             | 
3abe8 1f3             |             orgh
3abe8                 | 
3abe8                 | lut_code
3abe8                 | 'HW init code up to 80 longs
3abe8                 | 
3abe8                 | '..................................................................................................
3abe8                 | ' Memory layout for LUT RAM once operational:
3abe8                 | '
3abe8                 | '  LUT RAM address      Usage
3abe8                 | '  ---------------      ----
3abe8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3abe8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3abe8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3abe8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3abe8                 | '
3abe8                 | ' Also during driver COG startup:
3abe8                 | ' $230-$24F is used for HW init setup
3abe8                 | ' $250-$26F is used as temporary vector storage 
3abe8                 | '..................................................................................................
3abe8                 | 
3abe8                 |                 org $230    
3abe8 230             | 
3abe8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3abe8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3abec 231 24 16 60 FD |                             pollxfi
3abf0 232 FF AA 2A FF 
3abf4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3abf8 234 28 00 B0 FD |                             call    #sendqspi
3abfc 235 07 F8 07 FF 
3ac00 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3ac04 237 28 00 B0 FD |                             call    #sendspi
3ac08 238 F8 07 78 FF 
3ac0c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3ac10 23a 1C 00 B0 FD |                             call    #sendspi
3ac14 23b 7F 78 78 FF 
3ac18 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3ac1c 23d 10 00 B0 FD |                             call    #sendspi 
3ac20 23e 2D 00 64 FD |                             ret
3ac24 23f             | 
3ac24 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3ac28 240 32 0C 64 FD |                             skipf   #%110
3ac2c 241 9C EF 03 F6 |                             mov     pb, xsendimm
3ac30 242             | 
3ac30 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3ac34 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3ac38 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3ac3c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3ac40 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3ac44 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3ac48 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3ac4c 249 50 48 63 FD |                             fltl    datapins                'float data bus
3ac50 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3ac54 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3ac58 24c             | 
3ac58 24c 00 00 00 00 
3ac5c 24d 00 00 00 00 
3ac60 24e 00 00 00 00 
3ac64 24f 00 00 00 00 |                 long    0[$270-32-$]
3ac68 250             |                 fit     $270-32  ' keep room for 32 vector longs
3ac68 250             |     
3ac68 250             |                 fit     $270-32  ' keep room for 32 vector longs
3ac68 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3ac68 250             | rw_vect ' PSRAM jump vectors
3ac68 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ac6c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ac70 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3ac74 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3ac78 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3ac7c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3ac80 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3ac84 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3ac88 258             | ro_vect ' R/O PSRAM jump vectors
3ac88 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ac8c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ac90 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3ac94 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3ac98 25c 00 01 00 00 |                 long    unsupported
3ac9c 25d 00 01 00 00 |                 long    unsupported
3aca0 25e 00 01 00 00 |                 long    unsupported
3aca4 25f 00 01 00 00 |                 long    unsupported
3aca8 260             | ctrl_vect ' Control jump vectors
3aca8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3acac 261 00 01 00 00 |                 long    unsupported
3acb0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3acb4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3acb8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3acbc 265 00 01 00 00 |                 long    unsupported
3acc0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3acc4 267 3E 01 00 00 |                 long    reconfig 
3acc8 268             | no_vect ' Invalid bank jump vectors
3acc8 268 01 01 00 00 |                 long    invalidbank
3accc 269 01 01 00 00 |                 long    invalidbank
3acd0 26a 01 01 00 00 |                 long    invalidbank
3acd4 26b 01 01 00 00 |                 long    invalidbank
3acd8 26c 01 01 00 00 |                 long    invalidbank
3acdc 26d 01 01 00 00 |                 long    invalidbank
3ace0 26e 01 01 00 00 |                 long    invalidbank
3ace4 26f 01 01 00 00 |                 long    invalidbank
3ace8 270             |                 fit     $270
3ace8 270             | 
3ace8 270             |                 fit     $270
3ace8 270             | '..................................................................................................
3ace8 270             | ' PSRAM READS
3ace8 270             |                                                             ' a b c d e f
3ace8 270             |                                                             ' B W L B R L  (a) byte read
3ace8 270             |                                                             ' Y O O U E O  (b) word read
3ace8 270             |                                                             ' T R N R S C  (c) long read
3ace8 270             |                                                             ' E D G S U K  (d) new burst read
3ace8 270             |                                                             '       T M E  (e) resumed sub-burst
3ace8 270             |                                                             '         E D  (f) locked sub-burst
3ace8 270             | 
3ace8 270             | 
3ace8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3acec 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3acf0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3acf4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3acf8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3acfc 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3ad00 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3ad04 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3ad08 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3ad0c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3ad10 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3ad14 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3ad18 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3ad1c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3ad20 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3ad24 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3ad28 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3ad2c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3ad30 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3ad34 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3ad38 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3ad3c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3ad40 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3ad44 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3ad48 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3ad4c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3ad50 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3ad54 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3ad58 28c             | 
3ad58 28c             |                             ' fall through to read bursts
3ad58 28c             |                         
3ad58 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3ad58 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3ad5c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3ad60 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3ad64 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3ad68 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3ad6c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3ad70 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3ad74 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3ad78 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3ad7c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3ad80 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3ad84 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3ad88 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3ad8c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3ad90 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3ad94 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3ad98 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3ad9c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3ada0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3ada4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3ada8 2a0 E8 D1 03 F1 |                             add     clks, clks
3adac 2a1             | readcommon
3adac 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3adb0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3adb4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3adb8 2a4             | 
3adb8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3adbc 2a5 69 C8 63 FD |                             rev     cmdaddr
3adc0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3adc4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3adc8 2a8             | 
3adc8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3adcc 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3add0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3add0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3add4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3add8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3addc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3ade0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3ade0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3ade4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3ade8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3adec 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3adf0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3adf4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3adf8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3adf8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3adfc 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3ae00 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3ae04 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3ae08 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3ae0c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3ae10 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3ae14 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3ae18 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3ae1c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3ae20 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3ae24 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3ae28 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3ae2c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3ae30 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3ae30 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3ae34 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3ae38 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3ae3c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3ae40 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3ae44 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3ae48 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3ae4c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3ae50 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3ae54 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3ae58 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3ae5c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3ae60 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3ae64 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3ae68 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3ae6c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3ae70 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3ae74 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3ae78 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3ae7c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3ae80 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3ae84 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3ae88 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3ae8c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3ae90 2da 10 03 90 FD |                             jmp     #writecommon
3ae94 2db             | 
3ae94 2db             | '..................................................................................................
3ae94 2db             | ' Burst continuation testing
3ae94 2db             | 
3ae94 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3ae98 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3ae9c 2dd             | continue_read_lut          
3ae9c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3aea0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3aea4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3aea8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3aeac 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3aeb0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3aeb4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3aeb8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3aebc 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3aec0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3aec4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3aec8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3aecc 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3aed0 2ea             | 
3aed0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3aed4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3aed8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3aedc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3aee0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3aee4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3aee8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3aeec 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3aef0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3aef4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3aef8 2f4 2A 1C 66 0D |             _ret_           push    #poller
3aefc 2f5             | 
3aefc 2f5             | 
3aefc 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3af00 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3af00 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3af04 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3af08 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3af0c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3af10 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3af14 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3af18 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3af1c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3af20 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3af24 2ff             | '..................................................................................................
3af24 2ff             | ' Completion of requests
3af24 2ff             | 
3af24 2ff             | complete_rw_lut             
3af24 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3af28 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3af2c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3af30 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3af34 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3af38 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3af3c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3af40 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3af44 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3af48 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3af4c 309 32 62 64 AD |             if_z            skipf   #%110001
3af50 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3af54 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3af58 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3af5c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3af60 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3af64 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3af68 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3af6c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3af70 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3af74 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3af78 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3af7c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3af80 316             |                                                             ' skipcase (a) gfx copy to/from hub
3af80 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3af80 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3af80 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3af84 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3af88 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3af8c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3af90 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3af94 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3af98 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3af9c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3afa0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3afa4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3afa8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3afac 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3afb0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3afb4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3afb8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3afbc 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3afc0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3afc4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3afc8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3afcc 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3afd0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3afd4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3afd8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3afdc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3afe0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3afe4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3afe8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3afec 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3aff0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3aff4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3aff8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3affc 335 DF B7 03 A6 |             if_z            mov     addr2, link
3b000 336 34 FF 9F AD |             if_z            jmp     #checknext
3b004 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3b008 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b00c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3b010 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3b014 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3b018 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3b01c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3b020 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3b024 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3b028 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3b02c 341             | 
3b02c 341             | '..................................................................................................
3b02c 341             | ' PSRAM WRITES
3b02c 341             |                                                             '  a b c d e f g h
3b02c 341             | 
3b02c 341             |                                                             '  B W L F B R L L (a) byte write(s)
3b02c 341             |                                                             '  Y O O I U E O O (b) word write(s)
3b02c 341             |                                                             '  T R N L R S C C (c) long write(s)
3b02c 341             |                                                             '  E D G L S U K K (d) resumed fill
3b02c 341             |                                                             '          T M E E (e) new burst write
3b02c 341             |                                                             '            E D D (f) resumed burst
3b02c 341             |                                                             '              F B (g) locked fill
3b02c 341             |                                                             '              I U (h) locked burst write
3b02c 341             |                                                             '              L R 
3b02c 341             |                                                             '              L S 
3b02c 341             |                                                             '                T 
3b02c 341             | 
3b02c 341             | w_single                   
3b02c 341             | w_fill_cont           
3b02c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3b030 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3b034 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3b038 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3b03c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3b040 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3b044 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3b048 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3b04c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3b050 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3b054 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3b058 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3b05c 34d             |                ' disable call to r_resume_burst for single longs when z=0
3b05c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3b060 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3b064 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3b068 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3b06c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3b070 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3b074 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3b078 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3b07c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3b080 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3b084 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3b088 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3b08c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3b090 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3b094 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3b098 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3b09c 35d             |         
3b09c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3b09c 35d             |             '
3b09c 35d             |             '  At least one of these 3 optional components will be sent
3b09c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3b09c 35d             |             '     body - N x full longs of data
3b09c 35d             |             '     trailer - last partial long of data
3b09c 35d             |             '
3b09c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3b09c 35d             |             '
3b09c 35d             |             'Case    Type                           Sends
3b09c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3b09c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3b09c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3b09c 35d             |             ' 4)     Multiple long fill             body only
3b09c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3b09c 35d             | 
3b09c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3b09c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3b0a0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3b0a4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3b0a8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3b0ac 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3b0b0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3b0b4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3b0b8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3b0bc 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3b0c0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3b0c4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3b0c8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3b0cc 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3b0d0 36a             |                             
3b0d0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b0d4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3b0d8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3b0dc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3b0e0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3b0e4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3b0e8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3b0ec 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3b0f0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3b0f4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3b0f8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3b0fc 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3b100 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3b104 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3b108 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3b10c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3b110 37a             | 
3b110 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3b114 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3b118 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3b11c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3b120 37e             |                  
3b120 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3b124 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3b128 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3b12c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3b130 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3b134 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3b138 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3b13c 385             | 
3b13c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3b140 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3b144 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3b148 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3b14c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3b150 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3b154 38b             | 
3b154 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3b154 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3b158 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3b15c 38d 2A B0 63 FD |                             push    addr1                   'save address
3b160 38e             | 
3b160 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3b160 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3b164 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3b168 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3b16c 391             |             
3b16c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3b170 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3b174 393 2B B0 63 FD |                             pop     addr1                   'restore address
3b178 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3b17c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3b180 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3b184 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3b188 398             | 
3b188 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3b18c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3b190 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3b194 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3b198 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3b19c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3b1a0 39e             | 
3b1a0 39e             |                             'trailer is done
3b1a0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3b1a4 39f             | 
3b1a4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3b1a8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3b1ac 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3b1b0 3a2             | 
3b1b0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3b1b4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3b1b8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3b1bc 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3b1c0 3a6             |                             
3b1c0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3b1c4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3b1c8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3b1cc 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3b1d0 3aa             |                                                          
3b1d0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3b1d4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3b1d8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3b1dc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3b1e0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3b1e4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3b1e8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3b1ec 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3b1f0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3b1f4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3b1f8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3b1fc 3b5             |  
3b1fc 3b5 59 52 63 FD |                             drvh    cspin
3b200 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3b204 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3b208 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3b20c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3b210 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b214 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b218 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b21c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b220 3be EA E5 03 F6 |                             mov     d, orighubsize
3b224 3bf EF E5 63 F0 |                             shl     d, a
3b228 3c0 F2 E3 83 F1 |                             sub     c, d
3b22c 3c1 DD E3 03 F1 |                             add     c, offset1
3b230 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b234 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b238 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b23c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b240 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b244 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b248 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b24c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b250 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b254 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b258 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b25c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b260 3ce 6C FC BF CD |             if_c            call    #yield
3b264 3cf 2D 00 64 FD |                             ret
3b268 3d0             |                            
3b268 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b268 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b268 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b268 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b26c 3d1 02 EC 67 F0 |                             shl     pa, #2
3b270 3d2 28 06 64 AD |             if_z            setq    #3
3b274 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b278 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b27c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b280 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b284 3d7             | 
3b284 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b288 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b28c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b290 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b294 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b298 3dc             |                 fit 1024-32
3b298 3dc             |         
3b298 3dc             | 
3b298 3dc             | '..................................................................................................
3b298 3dc             | 
3b298 3dc             |                 fit 1024-32
3b298 3dc 00 00 00 00 
3b29c 3dd 00 00 00 00 
3b2a0 3de 00 00 00 00 
3b2a4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b2a8 3e0             |                 org 1024-32
3b2a8 000             | 
3b2a8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b2a8 000 00 00 00 00 |                 long $0000
3b2ac 001 11 11 00 00 |                 long $1111
3b2b0 002 22 22 00 00 |                 long $2222
3b2b4 003 33 33 00 00 |                 long $3333
3b2b8 004 44 44 00 00 |                 long $4444
3b2bc 005 55 55 00 00 |                 long $5555
3b2c0 006 66 66 00 00 |                 long $6666
3b2c4 007 77 77 00 00 |                 long $7777
3b2c8 008 88 88 00 00 |                 long $8888
3b2cc 009 99 99 00 00 |                 long $9999
3b2d0 00a AA AA 00 00 |                 long $aaaa
3b2d4 00b BB BB 00 00 |                 long $bbbb
3b2d8 00c CC CC 00 00 |                 long $cccc
3b2dc 00d DD DD 00 00 |                 long $dddd
3b2e0 00e EE EE 00 00 |                 long $eeee
3b2e4 00f FF FF 00 00 |                 long $ffff
3b2e8 010             | 
3b2e8 010             | 'masks
3b2e8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b2ec 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b2f0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b2f4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b2f8 014             | 
3b2f8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b2fc 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b300 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b304 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b308 018             | 
3b308 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b30c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b310 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b314 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b318 01c             | 
3b318 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b31c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b320 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b324 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b328 020             |         fit 1024
3b328 020             | 
3b328 020             |         fit 1024
3b328 020             | 
3b328 020             | '--------------------------------------------------------------------------------------------------
3b328 020             |         orgh
3b328                 | 
3b328                 | gfxexpansion
3b328                 |                             'simple line drawing graphics expansion of memory driver
3b328                 |                             'jmp     #donerepeats                'just return for now
3b328                 | 
3b328     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b32c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b330     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b334     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b338     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b33c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b340     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b344     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b348     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b34c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b350     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b354     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b358     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b35c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b360     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b364     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b368     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b36c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b370     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b374     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b378     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b37c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b380     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b384     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b388     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b38c                 | 	alignl
3b38c                 | _usbnew_spin2_dat_
3b38c                 |                 org     $000
3b38c 000             | 
3b38c 000             | usb_host_start
3b38c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b390 001             | 
3b390 001 03 00 00 FF 
3b394 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b398 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b39c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b3a0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b3a4 006 29 70 63 FD |                 setq2   htmp
3b3a8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b3ac 008             | 
3b3ac 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b3b0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b3b4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b3b8 00b             | 
3b3b8 00b             | '------------------------------------------------------------------------------
3b3b8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b3b8 00b             | ' special because the receiving function must not respond with either STALL or
3b3b8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b3b8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b3b8 00b             | ' corrupt packet, it must ignore the transaction
3b3b8 00b             | '------------------------------------------------------------------------------
3b3b8 00b             | ' On entry:
3b3b8 00b             | '   PTRA - start address of the SETUP data struct.
3b3b8 00b             | ' On exit:
3b3b8 00b             | '   retval - PID_ACK on success, otherwise error code.
3b3b8 00b             | '------------------------------------------------------------------------------
3b3b8 00b             | txn_setup
3b3b8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b3bc 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b3c0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b3c4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b3c8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b3cc 010             | .setup
3b3cc 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b3d0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b3d4 012 2D 00 64 AD |         if_z    ret
3b3d8 013 7C 0B B0 FD |                 call    #retry_wait
3b3dc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b3e0 015 2D 00 64 AD |         if_z    ret
3b3e4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b3e8 017 E0 FF 9F FD |                 jmp     #.setup
3b3ec 018             | 
3b3ec 018             | '------------------------------------------------------------------------------
3b3ec 018             | ' IN/INTERRUPT transaction.
3b3ec 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b3ec 018             | '------------------------------------------------------------------------------
3b3ec 018             | ' On entry:
3b3ec 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b3ec 018             | '     CRC(b19..23).
3b3ec 018             | ' On exit:
3b3ec 018             | '------------------------------------------------------------------------------
3b3ec 018             | txn_in
3b3ec 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b3f0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b3f4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b3f8 01b             | 
3b3f8 01b             |                 ' Fall through to urx_packet
3b3f8 01b             | 
3b3f8 01b             | '------------------------------------------------------------------------------
3b3f8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b3f8 01b             | ' received are handshakes and IN DATAx.
3b3f8 01b             | '------------------------------------------------------------------------------
3b3f8 01b             | ' On entry:
3b3f8 01b             | ' On exit:
3b3f8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b3f8 01b             | '     returned.
3b3f8 01b             | '------------------------------------------------------------------------------
3b3f8 01b             | urx_packet
3b3f8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b3fc 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b400 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b404 01e 1A 92 63 FD |                 getct   hct2
3b408 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b40c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b410 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b414 022             | .wait_sop
3b414 022 22 A7 8A FA |                 rdpin   urx, dm
3b418 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b41c 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b420 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b424 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b428 027             | .get_pid
3b428 027 28 02 B0 FD |                 call    #urx_next
3b42c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b430 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b434 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b438 02b             | .chk_pid
3b438 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b43c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b440 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b444 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b448 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b44c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b450 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b454 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b458 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b45c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b460 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b464 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b468 037             | .ack_resend
3b468 037 22 A7 82 FA |                 rqpin   urx, dm
3b46c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b470 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b474 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b478 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b47c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b480 03d             | .chk_eop
3b480 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b484 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b488 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b48c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b490 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b494 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b498 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b49c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b4a0 045 2D 00 64 FD |                 ret
3b4a4 046             | .idle
3b4a4 046 22 A7 82 FA |                 rqpin   urx, dm
3b4a8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b4ac 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b4b0 049 2D 00 64 FD |                 ret
3b4b4 04a             | 
3b4b4 04a             | '------------------------------------------------------------------------------
3b4b4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b4b4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b4b4 04a             | ' if one is required.
3b4b4 04a             | '------------------------------------------------------------------------------
3b4b4 04a             | ' On entry:
3b4b4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b4b4 04a             | ' On exit:
3b4b4 04a             | '------------------------------------------------------------------------------
3b4b4 04a             | utx_token
3b4b4 04a 22 A7 82 FA |                 rqpin   urx, dm
3b4b8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b4bc 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b4c0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b4c4 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b4c8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b4cc 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b4d0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b4d4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b4d8 053             | .next_byte
3b4d8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b4dc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b4e0 055             | .wait
3b4e0 055 40 46 72 FD |                 testp   dp                      wc
3b4e4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b4e8 057 23 03 08 FC |                 akpin   dp
3b4ec 058 22 A5 22 FC |                 wypin   utx, dm
3b4f0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b4f4 05a             | 
3b4f4 05a             | '------------------------------------------------------------------------------
3b4f4 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b4f4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b4f4 05a             | '------------------------------------------------------------------------------
3b4f4 05a             | ' On entry:
3b4f4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b4f4 05a             | '     CRC(b19..23).
3b4f4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b4f4 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b4f4 05a             | ' On exit:
3b4f4 05a             | '------------------------------------------------------------------------------
3b4f4 05a             | txn_out
3b4f4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b4f8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b4fc 05c 00 00 C0 FF 
3b500 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b504 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b508 05f             | 
3b508 05f             |                 ' Fall through to utx_data
3b508 05f             | 
3b508 05f             | '------------------------------------------------------------------------------
3b508 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b508 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b508 05f             | ' success/fail is not determined until the status stage of the transaction,
3b508 05f             | ' this routine is only concerned about the current DATAx packet.
3b508 05f             | '------------------------------------------------------------------------------
3b508 05f             | ' On entry:
3b508 05f             | '   PTRA - hub start address of the data to read.
3b508 05f             | '   pkt_cnt - data payload size.
3b508 05f             | ' On exit:
3b508 05f             | '------------------------------------------------------------------------------
3b508 05f             | utx_data
3b508 05f 22 A7 82 FA |                 rqpin   urx, dm
3b50c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b510 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b514 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b518 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b51c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b520 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b524 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b528 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b52c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b530 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b534 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b538 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b53c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b540 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b544 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b548 06f             | .read_byte
3b548 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b54c 070 F0 00 B0 FD |                 call    #utx_byte
3b550 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b554 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b558 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b55c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b560 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b564 076             | .send_crc
3b564 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b568 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b56c 078 D0 00 B0 FD |                 call    #utx_byte
3b570 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3b574 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3b578 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3b57c 07c             | 
3b57c 07c             | '------------------------------------------------------------------------------
3b57c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3b57c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3b57c 07c             | ' expects that the packet includes at least the CRC word.
3b57c 07c             | '
3b57c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3b57c 07c             | ' was requested, which makes it difficult to determine where the data stops
3b57c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3b57c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3b57c 07c             | ' USB-16 expected residual value of 0xB001.
3b57c 07c             | '
3b57c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3b57c 07c             | ' so the caller can verify IN success before writing the data to its final
3b57c 07c             | ' destination.
3b57c 07c             | '------------------------------------------------------------------------------
3b57c 07c             | ' On entry:
3b57c 07c             | '   pkt_data - max byte count expected to be in the packet.
3b57c 07c             | '   newb_flg - signals new byte ready when toggled.
3b57c 07c             | ' On exit:
3b57c 07c             | '   pkt_cnt - actual number of bytes read.
3b57c 07c             | '------------------------------------------------------------------------------
3b57c 07c             | urx_data
3b57c 07c F7 75 03 F6 |                 mov     htmp2, pb
3b580 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3b584 07e 00 00 C0 FF 
3b588 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3b58c 080 BA EF 03 F6 |                 mov     pb, htmp2
3b590 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b594 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3b598 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3b59c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3b5a0 085             | .wait_byte
3b5a0 085             | ' In-line rx for max speed
3b5a0 085 22 A7 82 FA |                 rqpin   urx, dm
3b5a4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b5a8 087 53 A5 02 F5 |                 and     utx, urx
3b5ac 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b5b0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b5b4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3b5b8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b5bc 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3b5c0 08d DC FF 9F FD |                 jmp     #.wait_byte
3b5c4 08e             | .get_byte
3b5c4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3b5c8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3b5cc 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3b5d0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3b5d4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b5d8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b5dc 094             | .end_crc
3b5dc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3b5e0 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3b5e4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3b5e8 097 2D 00 64 1D |         if_a    ret
3b5ec 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3b5ec 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3b5ec 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3b5ec 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3b5ec 098 22 A7 82 FA |                 rqpin   urx, dm
3b5f0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3b5f4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3b5f8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3b5f8 09b             | .chk_crc
3b5f8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3b5fc 09c 58 00 00 FF 
3b600 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3b604 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3b608 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b60c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b610 0a1 34 09 B0 FD |                 call    #poll_waitx
3b614 0a2             | 
3b614 0a2             |                 ' Fall through to utx_handshake
3b614 0a2             | 
3b614 0a2             | '------------------------------------------------------------------------------
3b614 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3b614 0a2             | ' the appropriate IP delay has been inserted.
3b614 0a2             | '------------------------------------------------------------------------------
3b614 0a2             | ' On entry:
3b614 0a2             | '   retval - handshake PID to send.
3b614 0a2             | ' On exit:
3b614 0a2             | '   retval unchanged.
3b614 0a2             | '------------------------------------------------------------------------------
3b614 0a2             | utx_handshake
3b614 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b618 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3b61c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b620 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3b624 0a6 5F A5 02 F6 |                 mov     utx, retval
3b628 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3b62c 0a8             | .idle
3b62c 0a8 22 A7 82 FA |                 rqpin   urx, dm
3b630 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b634 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3b638 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3b63c 0ac 08 09 90 FD |                 jmp     #poll_waitx
3b640 0ad             | 
3b640 0ad             | '------------------------------------------------------------------------------
3b640 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3b640 0ad             | '------------------------------------------------------------------------------
3b640 0ad             | ' On entry:
3b640 0ad             | '   utx - byte to transmit.
3b640 0ad             | ' On exit:
3b640 0ad             | '------------------------------------------------------------------------------
3b640 0ad             | utx_byte
3b640 0ad 40 46 72 FD |                 testp   dp                      wc
3b644 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3b648 0af 23 03 08 FC |                 akpin   dp
3b64c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3b650 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3b654 0b2             | 
3b654 0b2             | '------------------------------------------------------------------------------
3b654 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3b654 0b2             | '------------------------------------------------------------------------------
3b654 0b2             | ' On entry:
3b654 0b2             | ' On exit:
3b654 0b2             | '   retval - the byte read.
3b654 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3b654 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3b654 0b2             | '     received.
3b654 0b2             | '------------------------------------------------------------------------------
3b654 0b2             | urx_next
3b654 0b2 22 A7 8A FA |                 rdpin   urx, dm
3b658 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b65c 0b4 53 A5 02 F5 |                 and     utx, urx
3b660 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b664 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b668 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3b66c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3b670 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b674 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b678 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3b67c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3b680 0bd 2D 00 64 FD |                 ret
3b684 0be             | 
3b684 0be             | '------------------------------------------------------------------------------
3b684 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3b684 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3b684 0be             | ' length, and the PID is not included in the CRC calculation:
3b684 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3b684 0be             | '  CRC5  ENDP ADDRESS PID
3b684 0be             | ' %00000_1111_1111111_xxxxxxxx
3b684 0be             | '------------------------------------------------------------------------------
3b684 0be             | ' On entry:
3b684 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3b684 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3b684 0be             | ' On exit:
3b684 0be             | '   ep_addr_pid - CRC value appended to the packet.
3b684 0be             | '------------------------------------------------------------------------------
3b684 0be             | calc_crc5
3b684 0be FF 03 00 FF 
3b688 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3b68c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3b690 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3b694 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3b698 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3b69c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3b6a0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3b6a4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3b6a8 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3b6ac 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3b6b0 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3b6b4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b6b8 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3b6bc 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b6c0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3b6c4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3b6c8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3b6cc 0d0             | 
3b6cc 0d0             | '------------------------------------------------------------------------------
3b6cc 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3b6cc 0d0             | '------------------------------------------------------------------------------
3b6cc 0d0             | isr1_fsframe
3b6cc 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3b6d0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b6d4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b6d8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b6dc 0d4             | .wait
3b6dc 0d4 40 46 72 FD |                 testp   dp                      wc
3b6e0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b6e4 0d6 23 03 08 FC |                 akpin   dp
3b6e8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3b6ec 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3b6f0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3b6f4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3b6f8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3b6fc 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3b700 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3b704 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3b708 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3b70c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3b710 0e1 2C FF BF FD |                 call    #utx_byte
3b714 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3b718 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3b71c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3b720 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3b724 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3b728 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3b72c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3b730 0e9 5B A5 42 F5 |                 or      utx, icrc
3b734 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3b738 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3b73c 0ec 20 00 90 FD |                 jmp     #isr1_wait
3b740 0ed             | isr1_lsframe
3b740 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3b744 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b748 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b74c 0f0             | .wait
3b74c 0f0 40 46 72 FD |                 testp   dp                      wc
3b750 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b754 0f2 23 03 08 FC |                 akpin   dp
3b758 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3b75c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3b760 0f5             | isr1_wait
3b760 0f5 22 A5 82 FA |                 rqpin   utx, dm
3b764 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3b768 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3b76c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3b770 0f9 03 00 00 FF 
3b774 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3b778 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3b77c 0fc F5 FF 3B FB |                 reti1
3b780 0fd             | 
3b780 0fd             | '------------------------------------------------------------------------------
3b780 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3b780 0fd             | ' transaction will complete before the next frame is triggered.
3b780 0fd             | '------------------------------------------------------------------------------
3b780 0fd             | ' On entry:
3b780 0fd             | ' On exit:
3b780 0fd             | '------------------------------------------------------------------------------
3b780 0fd             | wait_txn_ok
3b780 0fd 1A 74 63 FD |                 getct   htmp2
3b784 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3b788 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b78c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3b790 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3b794 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3b798 103 2D 00 64 FD |                 ret
3b79c 104             | 
3b79c 104             | '------------------------------------------------------------------------------
3b79c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3b79c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3b79c 104             | ' and perform a reset sequence prior to device enumeration.
3b79c 104             | '------------------------------------------------------------------------------
3b79c 104             | dev_reset
3b79c 104 22 A7 82 FA |                 rqpin   urx, dm
3b7a0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3b7a4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3b7a8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3b7ac 108             | reset
3b7ac 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3b7b0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3b7b4 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3b7b8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3b7bc 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3b7c0 10d 1A 92 62 FD |                 getct   iframe_ct_base
3b7c4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b7c8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b7cc 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3b7d0 111 24 70 07 F1 |                 add     htmp, #36
3b7d4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3b7d8 113             | .framewait
3b7d8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3b7dc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3b7e0 115 2D 00 64 FD |                 ret
3b7e4 116             | 
3b7e4 116             | '------------------------------------------------------------------------------
3b7e4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3b7e4 116             | '------------------------------------------------------------------------------
3b7e4 116             | ' On entry:
3b7e4 116             | '   PTRA - source address.
3b7e4 116             | '   PB - destination address.
3b7e4 116             | '   hr0 - length of copy, in bytes.
3b7e4 116             | ' On exit:
3b7e4 116             | '------------------------------------------------------------------------------
3b7e4 116             | hmemcpy
3b7e4 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3b7e8 117 F7 71 43 FC |                 wrbyte  htmp, pb
3b7ec 118 01 EE 07 F1 |                 add     pb, #1
3b7f0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3b7f4 11a             | 
3b7f4 11a             | '------------------------------------------------------------------------------
3b7f4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3b7f4 11a             | ' loop until the errant device is disconnected.
3b7f4 11a             | '------------------------------------------------------------------------------
3b7f4 11a             | ' On entry:
3b7f4 11a             | ' On exit:
3b7f4 11a             | '------------------------------------------------------------------------------
3b7f4 11a             | host_error
3b7f4 11a             |           if ERROR_LED >= 0
3b7f4 11a             |           end
3b7f4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3b7f8 11b             | 
3b7f8 11b             | '------------------------------------------------------------------------------
3b7f8 11b             | ' Get HID descriptor buffer for current port
3b7f8 11b             | '------------------------------------------------------------------------------
3b7f8 11b             | ' On entry:
3b7f8 11b             | ' On exit:
3b7f8 11b             | '   PB - HID descriptor buffer pointer
3b7f8 11b             | '------------------------------------------------------------------------------
3b7f8 11b             | get_hid_descr_buffer
3b7f8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3b7fc 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3b800 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3b804 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3b808 11f             | 
3b808 11f             | 
3b808 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3b80c 120             | 
3b80c 120             | ' USB commands and error codes
3b80c 120 00 00 00 00 | cmd_data        long    0
3b810 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3b814 122             | 
3b814 122             | ' Parameters block assigned at cog startup
3b814 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3b818 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3b81c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3b820 125             | if ACTIVITY_LED >= 0
3b820 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3b820 125             | end
3b820 125             | if ERROR_LED >= 0
3b820 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3b820 125             | end
3b820 125 00 00 00 00 | hid_descr_p     long    0
3b824 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3b824 126             | 'hkbd_report_p   long    0
3b824 126 00 00 00 00 | hub_descr_p     long    0
3b828 127 00 00 00 00 | urx_buff_p      long    0
3b82c 128 00 00 00 00 | dev_desc_buff_p long    0
3b830 129 00 00 00 00 | con_desc_buff_p long    0
3b834 12a 00 00 00 00 | cache_start_p   long    0
3b838 12b 00 00 00 00 | cache_end_p     long    0
3b83c 12c             | if EMUPAD_MAX_PLAYER > 0
3b83c 12c             | emupad_out_ptr  long    0
3b83c 12c             | end
3b83c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3b840 12d             | 
3b840 12d             | hdev_init_start
3b840 12d             | hdev_port       res     1
3b840 12d             | hdev_port       res     1
3b840 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3b840 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3b840 12d             | kbm_next_datax  res     1
3b840 12d             | kbm_next_datax  res     1
3b840 12d             | hub_intf_num    res     1
3b840 12d             | hub_intf_num    res     1
3b840 12d             | hub_next_datax  res     1
3b840 12d             | hub_next_datax  res     1
3b840 12d             | hub_status_chg  res     1
3b840 12d             | hub_status_chg  res     1
3b840 12d             | hub_port_status res     1
3b840 12d             | hub_port_status res     1
3b840 12d             | if HAVE_MOUSE
3b840 12d             | ms_intf_num     res     1
3b840 12d             | ms_intf_num     res     1
3b840 12d             | ms_in_max_pkt   res     1
3b840 12d             | ms_in_max_pkt   res     1
3b840 12d             | end
3b840 12d             | kb_intf_num     res     1
3b840 12d             | kb_intf_num     res     1
3b840 12d             | kb_interval     res     1
3b840 12d             | kb_interval     res     1
3b840 12d             | kb_in_max_pkt   res     1
3b840 12d             | kb_in_max_pkt   res     1
3b840 12d             | kb_max_index    res     1
3b840 12d             | kb_max_index    res     1
3b840 12d             | kb_led_states   res     1
3b840 12d             | kb_led_states   res     1
3b840 12d             | gp_intf_num     res     1
3b840 12d             | gp_intf_num     res     1
3b840 12d             | gp_interval     res     1
3b840 12d             | gp_interval     res     1
3b840 12d             | gp_max_index    res     1
3b840 12d             | gp_max_index    res     1
3b840 12d             | gp_descr_len    res     1+MAX_DEVICES
3b840 12d             | gp_descr_len    res     1+MAX_DEVICES
3b840 12d             | hdev_init_end
3b840 12d             | 
3b840 12d             | ' Initialized at cog startup:
3b840 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3b840 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3b840 12d             | iframe_ct_new   res     1
3b840 12d             | iframe_ct_new   res     1
3b840 12d             | iframe_ct_base  res     1
3b840 12d             | iframe_ct_base  res     1
3b840 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3b840 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3b840 12d             | 
3b840 12d             | ' This register block is reset to zero when a USB device connects
3b840 12d             | hreg_init_start
3b840 12d             | hstatus         res     1         ' Host status flags
3b840 12d             | hstatus         res     1         ' Host status flags
3b840 12d             | hctwait         res     1         ' Poll-based wait clocks
3b840 12d             | hctwait         res     1         ' Poll-based wait clocks
3b840 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3b840 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3b840 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3b840 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3b840 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3b840 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3b840 12d             | xfer_retry      res     1         ' Control transfer retry count
3b840 12d             | xfer_retry      res     1         ' Control transfer retry count
3b840 12d             | retry           res     1         ' Transaction retry count
3b840 12d             | retry           res     1         ' Transaction retry count
3b840 12d             | utx             res     1         ' Byte to transmit on USB
3b840 12d             | utx             res     1         ' Byte to transmit on USB
3b840 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3b840 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3b840 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3b840 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3b840 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3b840 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3b840 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3b840 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3b840 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3b840 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3b840 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3b840 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3b840 12d             | frame           res     1         ' USB 1ms frame counter value
3b840 12d             | frame           res     1         ' USB 1ms frame counter value
3b840 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3b840 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3b840 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3b840 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3b840 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3b840 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3b840 12d             | crc             res     1         ' Used for CRC16 calculation
3b840 12d             | crc             res     1         ' Used for CRC16 calculation
3b840 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3b840 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3b840 12d             | retval          res     1         ' Global success/fail return parameter
3b840 12d             | retval          res     1         ' Global success/fail return parameter
3b840 12d             | context_retval  res     1         ' Operation contextual return parameter
3b840 12d             | context_retval  res     1         ' Operation contextual return parameter
3b840 12d             | ' Device stuff
3b840 12d             | hdev_id         res     1+MAX_DEVICES
3b840 12d             | hdev_id         res     1+MAX_DEVICES
3b840 12d             | hdev_bcd        res     1
3b840 12d             | hdev_bcd        res     1
3b840 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3b840 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3b840 12d             | ' Keyboard/mouse stuff
3b840 12d             | hctrl_ep_addr   res     1
3b840 12d             | hctrl_ep_addr   res     1
3b840 12d             | hctrl_max_pkt   res     1
3b840 12d             | hctrl_max_pkt   res     1
3b840 12d             | hconfig_base    res     1
3b840 12d             | hconfig_base    res     1
3b840 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3b840 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3b840 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3b840 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3b840 12d             | hdev_class      res     1
3b840 12d             | hdev_class      res     1
3b840 12d             | hdev_subclass   res     1
3b840 12d             | hdev_subclass   res     1
3b840 12d             | hdev_protocol   res     1
3b840 12d             | hdev_protocol   res     1
3b840 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3b840 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3b840 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3b840 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3b840 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3b840 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3b840 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3b840 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3b840 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3b840 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3b840 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3b840 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3b840 12d             | if HAVE_MOUSE
3b840 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3b840 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3b840 12d             | end
3b840 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3b840 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3b840 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3b840 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3b840 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3b840 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3b840 12d             | hdev_out_addr   res     1
3b840 12d             | hdev_out_addr   res     1
3b840 12d             | 
3b840 12d             | if EMUPAD_MAX_PLAYER > 0
3b840 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3b840 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3b840 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3b840 12d             | end
3b840 12d             | 
3b840 12d             | hreg_init_end
3b840 12d             | 
3b840 12d             | hidr_start
3b840 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3b840 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3b840 12d             | hidr_flags      res     1
3b840 12d             | hidr_flags      res     1
3b840 12d             | hidr_axis       res     3
3b840 12d             | hidr_axis       res     3
3b840 12d             | hidr_buttons    res     1
3b840 12d             | hidr_buttons    res     1
3b840 12d             | hidr_hats       res     1
3b840 12d             | hidr_hats       res     1
3b840 12d             | '' Above are actually useful values, 6 longs
3b840 12d             | hidr_id         res     1
3b840 12d             | hidr_id         res     1
3b840 12d             | hidr_state      res     1
3b840 12d             | hidr_state      res     1
3b840 12d             | hidr_size       res     1
3b840 12d             | hidr_size       res     1
3b840 12d             | hidr_count      res     1
3b840 12d             | hidr_count      res     1
3b840 12d             | hidr_offset     res     1
3b840 12d             | hidr_offset     res     1
3b840 12d             | hidr_usage_idx  res     1
3b840 12d             | hidr_usage_idx  res     1
3b840 12d             | hidr_lminmax    res     1
3b840 12d             | hidr_lminmax    res     1
3b840 12d             | hidr_pminmax    res     1
3b840 12d             | hidr_pminmax    res     1
3b840 12d             | hidr_type       res     1
3b840 12d             | hidr_type       res     1
3b840 12d             | hidr_end
3b840 12d             | 
3b840 12d             | ' Variables dependent on the system freqency
3b840 12d             | _var_64_lower_  res     1
3b840 12d             | _var_64_lower_  res     1
3b840 12d             | _var_64_upper_  res     1
3b840 12d             | _var_64_upper_  res     1
3b840 12d             | _12Mbps_        res     1
3b840 12d             | _12Mbps_        res     1
3b840 12d             | _1_5Mbps_       res     1
3b840 12d             | _1_5Mbps_       res     1
3b840 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3b840 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3b840 12d             | _1us_           res     1         ' 1us
3b840 12d             | _1us_           res     1         ' 1us
3b840 12d             | _10us_          res     1         ' 10us
3b840 12d             | _10us_          res     1         ' 10us
3b840 12d             | _33us_          res     1         ' 33us
3b840 12d             | _33us_          res     1         ' 33us
3b840 12d             | _txn_err_       res     1         ' 250us
3b840 12d             | _txn_err_       res     1         ' 250us
3b840 12d             | _500us_         res     1         ' 500us
3b840 12d             | _500us_         res     1         ' 500us
3b840 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3b840 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3b840 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3b840 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3b840 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3b840 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3b840 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3b840 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3b840 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3b840 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3b840 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3b840 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3b840 12d             | _preamble_wait_ res     1
3b840 12d             | _preamble_wait_ res     1
3b840 12d             | _1ms_           res     1         ' 1ms
3b840 12d             | _1ms_           res     1         ' 1ms
3b840 12d             | _2ms_           res     1         ' 2ms
3b840 12d             | _2ms_           res     1         ' 2ms
3b840 12d             | _suspend_wait_  res     1         ' 3ms
3b840 12d             | _suspend_wait_  res     1         ' 3ms
3b840 12d             | _4ms_           res     1         ' 4ms
3b840 12d             | _4ms_           res     1         ' 4ms
3b840 12d             | _xfer_wait_     res     1         ' 5ms
3b840 12d             | _xfer_wait_     res     1         ' 5ms
3b840 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3b840 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3b840 12d             | _reset_hold_    res     1         ' 15ms
3b840 12d             | _reset_hold_    res     1         ' 15ms
3b840 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3b840 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3b840 12d             | _21ms_          res     1         ' 21ms
3b840 12d             | _21ms_          res     1         ' 21ms
3b840 12d             | _100ms_         res     1         ' 100ms
3b840 12d             | _100ms_         res     1         ' 100ms
3b840 12d             | _500ms_         res     1         ' 500ms
3b840 12d             | _500ms_         res     1         ' 500ms
3b840 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3b840 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3b840 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3b840 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3b840 12d             | '------------------------------------------------------------------------------
3b840 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3b840 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3b840 12d             | _usb_d_ls_nco_  res     1
3b840 12d             | _usb_d_ls_nco_  res     1
3b840 12d             | _usb_h_fs_nco_  res     1
3b840 12d             | _usb_h_fs_nco_  res     1
3b840 12d             | _usb_d_fs_nco_  res     1
3b840 12d             | _usb_d_fs_nco_  res     1
3b840 12d             | '------------------------------------------------------------------------------
3b840 12d             | ' Scratch registers
3b840 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3b840 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3b840 12d             | htmp1           res     1
3b840 12d             | htmp1           res     1
3b840 12d             | htmp2           res     1
3b840 12d             | htmp2           res     1
3b840 12d             | htmp3           res     1
3b840 12d             | htmp3           res     1
3b840 12d             | hrep            res     1         ' Repeat count
3b840 12d             | hrep            res     1         ' Repeat count
3b840 12d             | hsave0          res     1         ' Subroutine parameter saves
3b840 12d             | hsave0          res     1         ' Subroutine parameter saves
3b840 12d             | hsave1          res     1
3b840 12d             | hsave1          res     1
3b840 12d             | hsave2          res     1
3b840 12d             | hsave2          res     1
3b840 12d             | isrtmp1         res     1
3b840 12d             | isrtmp1         res     1
3b840 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3b840 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3b840 12d             | hr0             res     1         ' Multi-purpose registers
3b840 12d             | hr0             res     1         ' Multi-purpose registers
3b840 12d             | hr1             res     1
3b840 12d             | hr1             res     1
3b840 12d             | hr2             res     1
3b840 12d             | hr2             res     1
3b840 12d             | hr3             res     1
3b840 12d             | hr3             res     1
3b840 12d             | hpar1           res     1         ' Routine entry/exit parameters
3b840 12d             | hpar1           res     1         ' Routine entry/exit parameters
3b840 12d             | hpar2           res     1
3b840 12d             | hpar2           res     1
3b840 12d             | hpar3           res     1
3b840 12d             | hpar3           res     1
3b840 12d             | hct2            res     1         ' Function response bus turn-around timer
3b840 12d             | hct2            res     1         ' Function response bus turn-around timer
3b840 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3b840 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3b840 12d             | mod_cnt         res     1         ' Used in idle loops
3b840 12d             | mod_cnt         res     1         ' Used in idle loops
3b840 12d             |                 fit     $1F0
3b840 12d             |                 org     $200
3b840 200             | hlut_start
3b840 200             | 
3b840 200             | '------------------------------------------------------------------------------
3b840 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3b840 200             | ' settings to startup defaults.
3b840 200             | '------------------------------------------------------------------------------
3b840 200             | ' On entry:
3b840 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3b840 200             | '------------------------------------------------------------------------------
3b840 200             | set_speed_full
3b840 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3b844 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3b848 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3b84c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3b850 204             | '                ret                             wcz     ' Restore caller flags on exit
3b850 204             | 
3b850 204             | '------------------------------------------------------------------------------
3b850 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3b850 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3b850 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3b850 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3b850 204             | ' putting the smart pins into reset.
3b850 204             | '------------------------------------------------------------------------------
3b850 204             | ' On entry:
3b850 204             | ' On exit: CZ flags restored to caller states
3b850 204             | '------------------------------------------------------------------------------
3b850 204             | set_speed_low
3b850 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3b854 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3b858 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3b85c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3b860 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3b864 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3b868 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3b86c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3b870 20c             | 
3b870 20c             | '------------------------------------------------------------------------------
3b870 20c             | ' Perform configuration stuff required when a device intitially connects.
3b870 20c             | '------------------------------------------------------------------------------
3b870 20c             | ' On entry:
3b870 20c             | ' On exit:
3b870 20c             | '------------------------------------------------------------------------------
3b870 20c             | on_connect
3b870 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3b874 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3b878 20e             | .retry
3b878 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b87c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3b880 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3b884 211 00 08 00 FF 
3b888 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3b88c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3b890 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b894 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3b898 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3b89c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3b8a0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b8a4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3b8a8 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3b8ac 21b 4C 03 B0 FD |                 call    #poll_waitx
3b8b0 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3b8b4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3b8b8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3b8bc 21f B8 FF 9F FD |                 jmp     #.retry
3b8c0 220             | .get_dev_desc
3b8c0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3b8c4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3b8c8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3b8cc 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3b8d0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3b8d4 225 88 FB BF FD |                 call    #reset
3b8d8 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3b8dc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b8e0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3b8e4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3b8e8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b8ec 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3b8f0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3b8f4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3b8f8 22e 04 00 00 FF 
3b8fc 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3b900 230 34 FA BF FD |                 call    #calc_crc5
3b904 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3b908 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b90c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3b910 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3b914 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3b918 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3b91c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b920 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3b924 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3b928 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3b92c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3b930 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3b934 23d C4 02 B0 FD |                 call    #poll_waitx
3b938 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3b93c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b940 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3b944 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3b948 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3b94c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b950 244 2D 00 64 5D |         if_nz   ret
3b954 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3b958 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3b95c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3b960 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3b964 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3b968 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3b96c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3b970 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3b974 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3b978 24e 2C FB 9F CD |         if_b    jmp     #host_error
3b97c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3b980 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b984 251 2D EC 63 FD |                 call    pa
3b988 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3b98c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b990 254 2C EC 63 FD |                 jmp     pa
3b994 255             | 
3b994 255             | '------------------------------------------------------------------------------
3b994 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3b994 255             | ' Status reporting is always in the function-to-host direction.
3b994 255             | '------------------------------------------------------------------------------
3b994 255             | ' On entry:
3b994 255             | '   PTRA - start address of the SETUP data in hub.
3b994 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3b994 255             | '     stage.
3b994 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3b994 255             | ' On exit:
3b994 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3b994 255             | '     contains the count of data stage bytes actually received, which must
3b994 255             | '     always be <= the count requested.
3b994 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3b994 255             | '     more specific USB operation error code.
3b994 255             | '------------------------------------------------------------------------------
3b994 255             | control_read
3b994 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3b998 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3b99c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3b9a0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3b9a4 259             | .xfer_start
3b9a4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3b9a8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3b9ac 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b9b0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3b9b4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3b9b8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3b9bc 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3b9c0 260 61 00 00 FF 
3b9c4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3b9c8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3b9cc 263             | .data
3b9cc 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3b9d0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3b9d4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3b9d8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3b9dc 267             | .nak_retry
3b9dc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3b9e0 268             | .in_retry
3b9e0 268 BC F6 BF FD |                 call    #txn_in
3b9e4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3b9e8 26a 28 00 90 AD |         if_z    jmp     #.commit
3b9ec 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b9f0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3b9f4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b9f8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3b9fc 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3ba00 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3ba04 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3ba08 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ba0c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3ba10 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3ba14 275             | .commit
3ba14 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3ba18 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3ba1c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3ba20 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3ba24 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3ba28 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3ba2c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3ba30 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3ba34 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3ba38 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3ba3c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3ba40 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3ba44 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3ba48 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3ba4c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3ba50 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3ba54 285             | .pre_status
3ba54 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3ba58 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3ba5c 287 00 B0 06 F6 |                 mov     pkt_data, #0
3ba60 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3ba64 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3ba68 28a 61 00 00 FF 
3ba6c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3ba70 28c             | .out_retry
3ba70 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3ba74 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ba78 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3ba7c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3ba80 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3ba84 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3ba88 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3ba8c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3ba90 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ba94 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3ba98 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3ba9c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3ba9c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3ba9c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3ba9c 297             | .xfer_retry
3ba9c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3baa0 298 58 01 B0 FD |                 call    #poll_waitx
3baa4 299 8C F9 BF FD |                 call    #wait_txn_ok
3baa8 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3baac 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3bab0 29c C8 EF 03 F6 |                 mov     pb, hpar3
3bab4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3bab8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3babc 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3bac0 2a0             | 
3bac0 2a0             | '------------------------------------------------------------------------------
3bac0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3bac0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3bac0 2a0             | ' the SETUP data struct is filled with the required values.
3bac0 2a0             | '------------------------------------------------------------------------------
3bac0 2a0             | ' On entry:
3bac0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3bac0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3bac0 2a0             | '     stage.
3bac0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3bac0 2a0             | ' On exit:
3bac0 2a0             | '   retval - used to convey the success/failure of each stage.
3bac0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3bac0 2a0             | '     more specific USB operation error code.
3bac0 2a0             | '------------------------------------------------------------------------------
3bac0 2a0             | control_write
3bac0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bac4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bac8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bacc 2a3             | 
3bacc 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3bad0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3bad4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3bad8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3badc 2a7             | .xfer_start
3badc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3bae0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3bae4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3bae8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3baec 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3baf0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3baf4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3baf8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3bafc 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3bb00 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3bb04 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bb08 2b2             | .data
3bb08 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3bb0c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3bb10 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3bb14 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3bb18 2b6             | .out_retry
3bb18 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3bb1c 2b7 88 F6 BF FD |                 call    #txn_out
3bb20 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bb24 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3bb28 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3bb2c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3bb30 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3bb34 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3bb38 2be             | .commit
3bb38 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3bb3c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3bb40 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3bb44 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3bb48 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3bb4c 2c3             | pre_status_in
3bb4c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3bb50 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3bb54 2c5             | .status_retry
3bb54 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3bb58 2c6 44 F5 BF FD |                 call    #txn_in
3bb5c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3bb60 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3bb64 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3bb68 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3bb6c 2cb 2D 00 64 AD |         if_z    ret
3bb70 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3bb74 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bb78 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3bb7c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3bb7c 2cf             | 
3bb7c 2cf             | '------------------------------------------------------------------------------
3bb7c 2cf             | ' Execute an IN interrupt transaction.
3bb7c 2cf             | '------------------------------------------------------------------------------
3bb7c 2cf             | ' On entry:
3bb7c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3bb7c 2cf             | '   hpar2 - Address of the IN data buffer
3bb7c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3bb7c 2cf             | ' On exit:
3bb7c 2cf             | '   retval - the result of the operation.
3bb7c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3bb7c 2cf             | '------------------------------------------------------------------------------
3bb7c 2cf             | do_int_in
3bb7c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bb80 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3bb84 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3bb88 2d2             | 
3bb88 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3bb8c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3bb90 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3bb94 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3bb98 2d6             | .retry
3bb98 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3bb9c 2d7 00 F5 BF FD |                 call    #txn_in
3bba0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3bba4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3bba8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3bbac 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3bbb0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3bbb4 2dd 54 00 B0 FD |                 call    #retry_wait
3bbb8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3bbbc 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3bbc0 2e0 D4 FF 9F FD |                 jmp     #.retry
3bbc4 2e1             | .commit
3bbc4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3bbc8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3bbcc 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3bbd0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3bbd4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3bbd8 2e6             | .post_ret
3bbd8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3bbdc 2e7             | 
3bbdc 2e7             | 
3bbdc 2e7             | '------------------------------------------------------------------------------
3bbdc 2e7             | ' Resets the downstream hub port to FS
3bbdc 2e7             | '------------------------------------------------------------------------------
3bbdc 2e7             | dwnstream_reset
3bbdc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3bbe0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3bbe4 2e9             | 
3bbe4 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3bbe8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3bbec 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3bbf0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3bbf4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3bbf8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3bbfc 2ef             | 
3bbfc 2ef             | '------------------------------------------------------------------------------
3bbfc 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3bbfc 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3bbfc 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3bbfc 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3bbfc 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3bbfc 2ef             | '------------------------------------------------------------------------------
3bbfc 2ef             | ' On entry:
3bbfc 2ef             | '   hctwait - wait interval in sysclocks.
3bbfc 2ef             | ' On exit:
3bbfc 2ef             | '------------------------------------------------------------------------------
3bbfc 2ef             | poll_waitx
3bbfc 2ef 1A 92 63 FD |                 getct   hct2
3bc00 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3bc04 2f1             | .wait
3bc04 2f1 FF 25 CC FB |                 jnct2   #.wait
3bc08 2f2 2D 00 64 FD |                 ret
3bc0c 2f3             | 
3bc0c 2f3             | '------------------------------------------------------------------------------
3bc0c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3bc0c 2f3             | '------------------------------------------------------------------------------
3bc0c 2f3             | ' On entry:
3bc0c 2f3             | '   retval - transaction response PID or error code.
3bc0c 2f3             | ' On exit:
3bc0c 2f3             | '------------------------------------------------------------------------------
3bc0c 2f3             | retry_wait
3bc0c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3bc10 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3bc14 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3bc18 2f6 14 00 90 AD |         if_z    jmp     #.nak
3bc1c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3bc20 2f8 D8 FF BF FD |                 call    #poll_waitx
3bc24 2f9             | .dec
3bc24 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3bc28 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3bc2c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3bc30 2fc             | .nak
3bc30 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3bc34 2fd C4 FF BF FD |                 call    #poll_waitx
3bc38 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3bc3c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3bc40 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3bc44 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3bc48 302 2D 00 64 FD |                 ret
3bc4c 303             | 
3bc4c 303             | host_reset
3bc4c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3bc50 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3bc54 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3bc54 305 BD 01 05 FF 
3bc58 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3bc5c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3bc60 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3bc64 309             | ' Check to see if the system clock has been changed.
3bc64 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3bc68 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3bc6c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3bc70 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3bc74 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3bc78 30e 40 46 62 FD |                 dirl    dp
3bc7c 30f             | 
3bc7c 30f 28 02 64 FD |                 setq    #1
3bc80 310 80 00 80 FF 
3bc84 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3bc88 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3bc8c 313             | .enable
3bc8c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3bc90 314 41 46 62 FD |                 dirh    dp
3bc94 315 1F 36 63 FD |                 waitx   _1us_
3bc98 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bc9c 317             | 
3bc9c 317             |                 ' Handle Port protection enable and startup delay
3bc9c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3bca0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3bca4 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3bca8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3bcac 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3bcb0 31c             | 
3bcb0 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3bcb4 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3bcb8 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3bcbc 31f 00 00 04 F6 |                 mov     0-0, #0
3bcc0 320             | .regloop
3bcc0 320             | 
3bcc0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3bcc0 320             | 
3bcc0 320             | discon_entry
3bcc0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3bcc4 321             | 
3bcc4 321             |               
3bcc4 321             |         if HAVE_HIDPAD
3bcc4 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3bcc8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bccc 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3bcd0 324 F7 01 68 FC |                 wrlong  #0,pb
3bcd4 325             |         end
3bcd4 325             |         if EMUPAD_MAX_PLAYER > 0
3bcd4 325             |         end
3bcd4 325             | 
3bcd4 325             |                 ' Fall through to disconnected loop
3bcd4 325             | 
3bcd4 325             | '-----------------------------------------------------------------------------------------------------------------
3bcd4 325             | ' Device connect handling (Section 7.1.7.3).
3bcd4 325             | '-----------------------------------------------------------------------------------------------------------------
3bcd4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3bcd4 325             | ' device to connect (Section 7.1.7.3).
3bcd4 325             | '-----------------------------------------------------------------------------------------------------------------
3bcd4 325             | disconnected
3bcd4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3bcd8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3bcdc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3bce0 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3bce4 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3bce8 32a             |         if ACTIVITY_LED >= 0
3bce8 32a             |         end
3bce8 32a 22 A7 82 FA |                 rqpin   urx, dm
3bcec 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3bcf0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3bcf4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3bcf8 32e             | .se1_test
3bcf8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3bcfc 32f FC FE BF FD |                 call    #poll_waitx
3bd00 330 22 A7 82 FA |                 rqpin   urx, dm
3bd04 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bd08 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3bd0c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3bd10 334             | .se1            'SE1 is a fatal error condition
3bd10 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3bd14 335 E4 FE BF FD |                 call    #poll_waitx
3bd18 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3bd1c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3bd20 338             | .connect_test                                           ' Test lines until stable J/K state seen
3bd20 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3bd24 339 22 A7 82 FA |                 rqpin   urx, dm
3bd28 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bd2c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3bd30 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3bd34 33d             | connected
3bd34 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3bd38 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3bd3c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3bd40 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3bd44 341             | .set_pulse
3bd44 341 1A 64 63 FD |                 getct   _pulse_time_
3bd48 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3bd4c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3bd4c 343             | ' of 1ms and make a correction, if necessary.
3bd4c 343             | '                mov     htmp, _1ms_
3bd4c 343             | '                subs    htmp, iframe_delta
3bd4c 343             | '                adds    _frame1ms_clks_, htmp
3bd4c 343             | '                debug(udec(_frame1ms_clks_))
3bd4c 343             | 
3bd4c 343             |                 ' Fall through to idle/processing loop
3bd4c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3bd50 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3bd54 345             | 
3bd54 345             | hidle
3bd54 345 22 A7 82 FA |                 rqpin   urx, dm
3bd58 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3bd5c 347 98 00 90 CD |         if_c    jmp     #.se0_test
3bd60 348 24 06 70 FD |                 pollct3                         wc
3bd64 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3bd68 34a 1A 94 63 FD |                 getct   hct3
3bd6c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3bd70 34c             | 
3bd70 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3bd74 34d 00 70 E3 F8 |                 getbyte htmp
3bd78 34e             | 
3bd78 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3bd7c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3bd80 350 40 00 90 AD |         if_z    jmp     #.poll
3bd84 351             | 
3bd84 351             |         if _HAVE_GAMEPAD
3bd84 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3bd88 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3bd8c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3bd90 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3bd94 355 2C 00 90 AD |         if_z    jmp     #.poll
3bd98 356             |         end
3bd98 356             | 
3bd98 356             |         if HAVE_MOUSE
3bd98 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3bd9c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bda0 358 20 00 90 AD |         if_z    jmp     #.poll
3bda4 359             |         end
3bda4 359             | 
3bda4 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3bda8 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3bdac 35b 14 00 90 AD |         if_z    jmp     #.poll
3bdb0 35c             | 
3bdb0 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3bdb4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3bdb8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3bdbc 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3bdc0 360             |         if HAVE_MOUSE
3bdc0 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bdc4 361             |         else
3bdc4 361             |         end
3bdc4 361             | 
3bdc4 361             | .poll
3bdc4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bdc8 362 2D EC 63 FD |                 call    pa
3bdcc 363             | .skip_poll
3bdcc 363             | 
3bdcc 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3bdd0 364             | 
3bdd0 364             | .nopoll
3bdd0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3bdd4 365 44 00 90 AD |         if_z    jmp     #hsuspend
3bdd8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3bddc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3bde0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3bde4 369 1A 84 63 FD |                 getct   hr0
3bde8 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3bdec 36b             |         if ACTIVITY_LED >= 0
3bdec 36b             |         end
3bdec 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3bdf0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3bdf4 36d 5C FF 9F FD |                 jmp     #hidle
3bdf8 36e             | ' Check for extended SE0 state on the bus
3bdf8 36e             | .se0_test
3bdf8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3bdfc 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3be00 370 22 A7 82 FA |                 rqpin   urx, dm
3be04 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3be08 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3be0c 373 24 F6 BF FD |                 call    #wait_txn_ok
3be10 374 00 00 80 FF 
3be14 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3be18 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3be18 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3be1c 377             | 
3be1c 377             | hsuspend
3be1c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3be20 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3be24 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3be28 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3be2c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3be30 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3be34 37d             | 
3be34 37d             |                 ' Fall through to resume wait loop
3be34 37d             | 
3be34 37d             | hwait_resume
3be34 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3be38 37e 02 86 47 F0 |                 shr     hr1, #2
3be3c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3be40 380             |         if ACTIVITY_LED >= 0
3be40 380             |         end
3be40 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3be44 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3be48 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3be4c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3be50 384 18 00 90 AD |         if_z    jmp     #.resume
3be54 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3be58 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3be5c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3be60 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3be64 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3be68 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3be6c 38b             | .resume
3be6c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3be70 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3be74 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3be78 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3be7c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3be80 390 1F 70 63 FD |                 waitx   htmp
3be84 391 22 07 28 FC |                 wypin   #OUT_J, dm
3be88 392 01 70 47 F0 |                 shr     htmp, #1
3be8c 393 1F 70 63 FD |                 waitx   htmp
3be90 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3be94 395 1A 92 62 FD |                 getct   iframe_ct_base
3be98 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3be9c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bea0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3bea4 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3bea8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3beac 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3beb0 39c             | 
3beb0 39c             | '------------------------------------------------------------------------------
3beb0 39c             | ' Send preamble to enable low-speed HUB ports
3beb0 39c             | '------------------------------------------------------------------------------
3beb0 39c             | ' On entry:
3beb0 39c             | ' On exit:
3beb0 39c             | '   USB baud rate set to low-speed
3beb0 39c             | '------------------------------------------------------------------------------
3beb0 39c             | utx_pre
3beb0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3beb4 39d 40 46 62 FD |                 dirl    dp
3beb8 39e 28 02 64 FD |                 setq    #1
3bebc 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3bec0 3a0 58 44 62 FD |                 drvl    dm
3bec4 3a1 59 46 62 FD |                 drvh    dp
3bec8 3a2             | 
3bec8 3a2 1E 00 00 FF 
3becc 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3bed0 3a4             | 
3bed0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3bed4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3bed8 3a6 28 02 64 3D |         if_nc   setq    #1
3bedc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3bee0 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3bee4 3a9             | .l1
3bee4 3a9             | 
3bee4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3bee8 3aa 40 46 62 FD |                 dirl    dp
3beec 3ab 28 02 64 FD |                 setq    #1
3bef0 3ac 80 00 80 FF 
3bef4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3bef8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3befc 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3bf00 3b0 41 46 62 FD |                 dirh    dp
3bf04 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bf08 3b2             | 
3bf08 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3bf0c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3bf10 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3bf14 3b5             | 
3bf14 3b5             | hlut_end
3bf14 3b5             |                 fit     $400
3bf14 3b5             |                 orgh
3bf14                 | if OVERLAP_MEMORY
3bf14                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3bf14                 | end
3bf14                 | '------------------------------------------------------------------------------
3bf14                 | ' Routines called from cog space.
3bf14                 | '------------------------------------------------------------------------------
3bf14                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3bf14                 | '------------------------------------------------------------------------------
3bf14                 | 
3bf14                 | '------------------------------------------------------------------------------
3bf14                 | ' USB host cog initialization.
3bf14                 | '------------------------------------------------------------------------------
3bf14                 | usb_host_init
3bf14                 |                 ' Initialize buffer pointers
3bf14                 |         if OVERLAP_MEMORY
3bf14                 |         else
3bf14     40 15 B0 FE |                 loc     pb, #hid_descr
3bf18                 |         end
3bf18     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3bf1c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3bf1c                 |                 {
3bf1c                 |                 }
3bf1c                 |         
3bf1c                 |                 {
3bf1c                 |                 }
3bf1c                 |                 'loc     pb,#hkbd_report
3bf1c                 |                 'mov     hkbd_report_p,pb
3bf1c                 | 
3bf1c     08 1D B0 FE |                 loc     pb, #hub_descr
3bf20     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3bf24     1D 1D B0 FE |                 loc     pb, #urx_buff
3bf28     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3bf2c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3bf30     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3bf34     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3bf38     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3bf3c     18 15 B0 FE |                 loc     pb, #usb_cache_start
3bf40     F7 55 02 F6 |                 mov     cache_start_p, pb
3bf44     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3bf48     F7 57 02 F6 |                 mov     cache_end_p, pb
3bf4c                 | 
3bf4c                 |         if ERROR_LED >= 0
3bf4c                 |         end
3bf4c                 | 
3bf4c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3bf4c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3bf4c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3bf4c                 | ' Configure and enable the Serial Host USB port.
3bf4c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3bf50                 | 
3bf50                 | '------------------------------------------------------------------------------
3bf50                 | ' Timing calculations happen before any interrupt(s) are enabled.
3bf50                 | '------------------------------------------------------------------------------
3bf50                 | ' On entry:
3bf50                 | '   htmp - current CLKFREQ value.
3bf50                 | '------------------------------------------------------------------------------
3bf50                 | hinit_usb_timings
3bf50                 | '                getct   htmp2
3bf50     B8 59 02 F6 |                 mov     save_sysclk, htmp
3bf54     8D 5B 80 FF 
3bf58     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3bf5c     18 30 63 FD |                 getqx   _12Mbps_
3bf60     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3bf64     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3bf68     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3bf6c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3bf70     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3bf74     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3bf78     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3bf7c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3bf80     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3bf84     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3bf88     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3bf8c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3bf90     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3bf94     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3bf98     80 00 00 FF 
3bf9c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3bfa0     18 2C 63 FD |                 getqx   _var_64_lower_
3bfa4     19 2E 63 FD |                 getqy   _var_64_upper_
3bfa8     28 2C 63 FD |                 setq    _var_64_lower_
3bfac     65 CD 1D FF 
3bfb0     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3bfb4     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3bfb8     01 00 00 FF 
3bfbc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3bfc0     18 2C 63 FD |                 getqx   _var_64_lower_
3bfc4     19 2E 63 FD |                 getqy   _var_64_upper_
3bfc8     28 2C 63 FD |                 setq    _var_64_lower_
3bfcc     A1 07 00 FF 
3bfd0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3bfd4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3bfd8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3bfdc     09 36 57 F0 |                 shr     _1us_, #9               wc
3bfe0     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3bfe4     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3bfe8     18 38 63 FD |                 getqx   _10us_
3bfec     09 38 57 F0 |                 shr     _10us_, #9              wc
3bff0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3bff4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3bff8     18 3A 63 FD |                 getqx   _33us_
3bffc     09 3A 57 F0 |                 shr     _33us_, #9              wc
3c000     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3c004     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3c008     18 3C 63 FD |                 getqx   _txn_err_
3c00c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3c010     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3c014     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3c018     18 3E 63 FD |                 getqx   _500us_
3c01c     09 3E 57 F0 |                 shr     _500us_, #9             wc
3c020     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3c024     01 00 00 FF 
3c028     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3c02c     18 40 63 FD |                 getqx   _txn_ok_ls_
3c030     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3c034     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3c038     01 00 00 FF 
3c03c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3c040     18 42 63 FD |                 getqx   _txn_ok_fs_
3c044     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3c048     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3c04c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3c050     05 00 00 FF 
3c054     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3c058     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3c05c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3c060     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3c064     1C 00 00 FF 
3c068     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3c06c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3c070     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3c074     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3c078     00 00 00 FF 
3c07c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3c080     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3c084     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3c088     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3c08c     04 00 00 FF 
3c090     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3c094     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3c098     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3c09c     8D 5B 00 FF 
3c0a0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3c0a4     18 4C 63 FD |                 getqx   _preamble_wait_
3c0a8     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3c0ac     01 00 00 FF 
3c0b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3c0b4     18 2C 63 FD |                 getqx   _var_64_lower_
3c0b8     19 2E 63 FD |                 getqy   _var_64_upper_
3c0bc     28 2C 63 FD |                 setq    _var_64_lower_
3c0c0     01 00 00 FF 
3c0c4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3c0c8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3c0cc     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3c0d0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3c0d4     FF FF 7F FF 
3c0d8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3c0dc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3c0e0     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3c0e4     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3c0e8     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3c0ec     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3c0f0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3c0f4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3c0f8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3c0fc     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3c100     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3c104     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3c108     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3c10c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3c110     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3c114     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3c118     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3c11c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3c120     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3c124     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3c128     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3c12c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3c130     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3c134     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3c138     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3c13c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3c140     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3c144                 | '        _ret_   mov     _1sec_, save_sysclk
3c144                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3c144                 | '                ret
3c144                 | {
3c144                 | }
3c144                 | 
3c144                 | '------------------------------------------------------------------------------
3c144                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3c144                 | ' one. If it is, start the task progression that will configure the device for
3c144                 | ' use.
3c144                 | '------------------------------------------------------------------------------
3c144                 | ' On entry:
3c144                 | '   hconfig_base - start address of the cached config descriptor chain.
3c144                 | ' On exit:
3c144                 | '------------------------------------------------------------------------------
3c144                 | hparse_con_desc
3c144     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3c148     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3c14c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3c150     4E 70 FF F9 |                 movbyts htmp,#%%1032
3c154     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3c158                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3c158                 | 
3c158     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3c15c     6E ED 03 F1 |                 add     pa, hconfig_base
3c160     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3c164                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3c164                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3c164                 | ' that defines a keyboard and/or mouse.
3c164     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3c168                 | .next_intf
3c168     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c16c     BC 01 90 3D |         if_ae   jmp     #hset_config
3c170     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c174     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c178     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c17c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c180     0C 00 90 AD |         if_z    jmp     #.intf
3c184     80 71 C7 FA |                 rdbyte  htmp, ptrb
3c188     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c18c     D8 FF 9F FD |                 jmp     #.next_intf
3c190                 | .intf
3c190     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3c194     00 90 07 F6 |                 mov     hpar3, #0
3c198     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3c19c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3c1a0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3c1a4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3c1a8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3c1a8                 | 
3c1a8                 | .endp
3c1a8     80 71 C7 FA |                 rdbyte  htmp, ptrb
3c1ac     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3c1b0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3c1b4     78 00 90 3D |         if_ae   jmp     #.get_device
3c1b8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3c1bc     75 F3 03 F1 |                 add     ptrb, hnext_desc
3c1c0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3c1c4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3c1c8     64 00 90 AD |         if_z    jmp     #.get_device
3c1cc     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3c1d0     04 00 90 AD |         if_z    jmp     #.get_ep
3c1d4     D0 FF 9F FD |                 jmp     #.endp
3c1d8                 | .get_ep
3c1d8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3c1dc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3c1e0     0F 86 67 F0 |                 shl     hr1, #8 + 7
3c1e4     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3c1e8     3F 00 00 FF 
3c1ec     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3c1f0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3c1f4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3c1f8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3c1fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c200     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3c204     A0 FF 9F FD |                 jmp     #.endp
3c208                 | .in_ep
3c208     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3c20c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3c210                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c210     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c214     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3c218     8C FF 9F FD |                 jmp     #.endp
3c21c                 | .out_ep
3c21c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c220     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c224                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c224     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c228     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3c22c     78 FF 9F FD |                 jmp     #.endp
3c230                 | 
3c230                 | .get_device
3c230     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c234     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c238     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c23c     68 00 90 AD |         if_z    jmp     #.gamepad
3c240     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c244     AC 00 90 AD |         if_z    jmp     #.hub
3c248     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c24c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c250     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c254     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c258     4C 00 90 AD |         if_z    jmp     #.gamepad
3c25c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c260     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c264                 | .keyboard
3c264     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c268                 |         if HAVE_MOUSE
3c268     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c26c                 |         else
3c26c                 |         end
3c26c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c270     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c274     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c278     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c27c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c280     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c284                 |                 'debug(udec(kb_intf_num))
3c284                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c284     E0 FE 9F FD |                 jmp     #.next_intf
3c288                 | if HAVE_MOUSE
3c288                 | .mouse
3c288     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c28c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c290     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c294     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3c298     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c29c                 |                 'getbyte ms_interval, hr2, #3
3c29c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c2a0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c2a4                 |                 'debug(udec(kb_intf_num))
3c2a4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c2a4     C0 FE 9F FD |                 jmp     #.next_intf
3c2a8                 | end
3c2a8                 | .gamepad
3c2a8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3c2ac     C7 71 63 F5 |                 xor     htmp, hpar2
3c2b0     3F 00 00 FF 
3c2b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c2b8     AC FE 9F AD |         if_z    jmp     #.next_intf
3c2bc                 |         if HAVE_MOUSE
3c2bc     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3c2c0     C7 71 63 F5 |                 xor     htmp, hpar2
3c2c4     3F 00 00 FF 
3c2c8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c2cc     98 FE 9F AD |         if_z    jmp     #.next_intf
3c2d0                 |         end
3c2d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c2d4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c2d8     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3c2dc                 | 
3c2dc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c2e0     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c2e4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c2e8     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c2ec     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c2f0                 |                 'debug(udec(gp_intf_num))
3c2f0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c2f0     74 FE 9F FD |                 jmp     #.next_intf
3c2f4                 | .hub
3c2f4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c2f8     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3c2fc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c300     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c304     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3c308     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c30c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3c310     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c314     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c318     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c31c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c320     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c324     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c328                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c328     3C FE 9F FD |                 jmp     #.next_intf
3c32c                 | 
3c32c                 | '------------------------------------------------------------------------------
3c32c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c32c                 | ' it according to its function, or functions. In the case of this boot protocol
3c32c                 | ' keyboard/mouse class driver:
3c32c                 | ' - SetConfiguration(config_num)
3c32c                 | ' - SetProtocol(boot)
3c32c                 | ' - SetIdle(indefinite)
3c32c                 | ' - Enter the device interrupt IN polling task stage.
3c32c                 | '------------------------------------------------------------------------------
3c32c                 | ' On entry:
3c32c                 | ' On exit:
3c32c                 | '------------------------------------------------------------------------------
3c32c                 | hset_config
3c32c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c32c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c32c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c330     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c334     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c338     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c33c                 |         if HAVE_MOUSE
3c33c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c340                 |         end
3c340     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c344     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c348                 | .set_config
3c348     6C 0E D0 FE |                 loc     ptra, #set_config
3c34c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c350     6E ED 03 F1 |                 add     pa, hconfig_base
3c354     F6 8D C3 FA |                 rdbyte  hpar1, pa
3c358     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c35c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c360     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c364     A0 02 A0 FD |                 call    #control_write
3c368     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c36c     2D 00 64 5D |         if_nz   ret
3c370                 | .kbd_config
3c370     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c374     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c378                 | 
3c378     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3c37c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c380     3F 00 00 FF 
3c384     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c388     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c38c                 | 
3c38c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c390     34 0E D0 FE |                 loc     ptra, #set_protocol
3c394     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c398     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c39c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c3a0     A0 02 A0 FD |                 call    #control_write
3c3a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c3a8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c3ac     E4 02 90 5D |         if_nz   jmp     #.notify_client
3c3b0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c3b4     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c3b8     30 03 B0 FD |                 call    #hset_idle
3c3bc                 |                 'cmp     retval, #PID_ACK        wz
3c3bc                 |         'if_nz   mov     hkbd_ep_addr, #0
3c3bc                 |         'if_nz   jmp     #.notify_client
3c3bc     A8 99 02 F6 |                 mov     hctwait, _2ms_
3c3c0     EF 02 A0 FD |                 call    #poll_waitx
3c3c4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c3c8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c3cc     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3c3d0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c3d4     2C 03 B0 FD |                 call    #hset_kbdled_report
3c3d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c3dc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c3e0     B0 02 90 5D |         if_nz   jmp     #.notify_client
3c3e4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c3e8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c3ec     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c3f0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c3f4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c3f8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c3fc     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c400     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c404     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c408     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c40c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c410                 |         if !!HAVE_MOUSE
3c410                 |         end
3c410                 | 
3c410                 | .mouse_config
3c410                 | if HAVE_MOUSE
3c410     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c414     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c418     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3c41c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c420     3F 00 00 FF 
3c424     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c428     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c42c                 | 
3c42c                 |                 debug("mouse passed addr check")
3c42c                 | 
3c42c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c430     00 00 80 FF 
3c434     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c438     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c43c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c440     55 02 A0 FD |                 call    #control_read
3c444     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c448     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c44c     44 02 90 5D |         if_nz   jmp     #.notify_client
3c450     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c454     56 01 00 F6 |                 mov     0-0, total_data
3c458     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c45c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c45c                 | 
3c45c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c460     64 0D D0 FE |                 loc     ptra, #set_protocol
3c464     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c468     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c46c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c470     A0 02 A0 FD |                 call    #control_write
3c474     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c478     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c47c     14 02 90 5D |         if_nz   jmp     #.notify_client
3c480                 |                 debug("mouse passed SetProtocol")
3c480     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c484     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c488     60 02 B0 FD |                 call    #hset_idle
3c48c                 |                 'cmp     retval, #PID_ACK        wz
3c48c                 |         'if_nz   mov     hmouse_ep_addr, #0
3c48c                 |         'if_nz   jmp     #.notify_client
3c48c                 |                 debug("mouse passed SetIdle")
3c48c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c490     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c494     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c498     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c49c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c4a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c4a4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c4a8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c4ac     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c4b0     3F 00 00 FF 
3c4b4     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c4b8     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c4bc     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c4c0     D0 01 90 FD |                 jmp     #.notify_client
3c4c4                 | end
3c4c4                 | .gamepad_config
3c4c4                 | if _HAVE_GAMEPAD
3c4c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c4c8     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c4cc     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c4d0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c4d4     00 70 03 F6 |                 mov     htmp, 0-0
3c4d8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c4dc     3F 00 00 FF 
3c4e0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c4e4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c4e8                 | 
3c4e8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c4ec     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c4f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c4f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c4f8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c4fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c500     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c504     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c508     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c50c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c510     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c514     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c518     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c51c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c520                 | 
3c520                 |                 if EMUPAD_MAX_PLAYER > 0
3c520                 |                 
3c520                 | .rule_loop           
3c520                 |                 end
3c520                 | 
3c520     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c524     5C 00 90 AD |         if_e    jmp     #.xinput
3c528     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c52c     00 70 03 F6 |                 mov     htmp,0-0
3c530     01 A6 02 FF 
3c534     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c538     7C 00 90 AD |         if_e    jmp     #.ps3
3c53c                 | 
3c53c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c540     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c544     00 00 80 5F 
3c548     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c54c     03 00 80 AF 
3c550     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c554     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c558     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c55c     55 02 A0 FD |                 call    #control_read
3c560     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c564     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c568     00 00 04 56 |         if_nz   mov     0-0, #0
3c56c     24 01 90 5D |         if_nz   jmp     #.notify_client
3c570     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c574     56 01 00 F6 |                 mov     0-0, total_data
3c578     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c57c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c57c                 | 
3c57c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3c580     10 01 90 FD |                 jmp     #.notify_client
3c584                 | .xinput
3c584     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3c588     2D EF 03 F6 |                 mov     pb,hdev_port
3c58c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3c590     03 EE 27 F3 |                 fle     pb,#3
3c594     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3c598     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3c59c                 | 
3c59c     03 B0 06 F6 |                 mov     pkt_data, #3
3c5a0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3c5a4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3c5a8     5A 00 A0 FD |                 call    #txn_out
3c5ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3c5b0                 | 
3c5b0     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3c5b4     DC 00 90 FD |                 jmp     #.notify_client
3c5b8                 | .ps3
3c5b8     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3c5bc     2D EF 03 F6 |                 mov     pb,hdev_port
3c5c0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3c5c4     04 EE 27 F3 |                 fle     pb,#4
3c5c8     F7 EF C3 F9 |                 decod   pb
3c5cc     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3c5d0                 | 
3c5d0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c5d4     00 0C D0 FE |                 loc     ptra, #set_report
3c5d8     01 00 80 FF 
3c5dc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3c5e0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c5e4     03 61 5C FC |                 wrword  #48, ptra[wLength]
3c5e8     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3c5ec     A0 02 A0 FD |                 call    #control_write
3c5f0                 | 
3c5f0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c5f4     E0 0B D0 FE |                 loc     ptra, #set_report
3c5f8     01 00 80 FF 
3c5fc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3c600     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c604     03 09 5C FC |                 wrword  #4, ptra[wLength]
3c608     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3c60c     A0 02 A0 FD |                 call    #control_write
3c610     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3c614     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c618     00 00 04 56 |         if_nz   mov     0-0, #0
3c61c     74 00 90 5D |         if_nz   jmp     #.notify_client
3c620                 | 
3c620     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3c624     6C 00 90 FD |                 jmp     #.notify_client
3c628                 | end
3c628                 | 
3c628                 | .hub_config
3c628     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c62c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3c630     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3c634     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c638     3F 00 00 FF 
3c63c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c640     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3c644                 | 
3c644     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3c648     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3c64c     26 EF 03 F6 |                 mov     pb, hub_descr_p
3c650     55 02 A0 FD |                 call    #control_read
3c654     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c658     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3c65c     34 00 90 5D |         if_nz   jmp     #.notify_client
3c660                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3c660                 | 
3c660     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3c664     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3c668     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3c66c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3c66c                 | .pwr_loop
3c66c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3c670     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3c674     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3c678     A0 02 A0 FD |                 call    #control_write
3c67c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3c680                 | 
3c680     B1 99 02 F6 |                 mov     hctwait, _500ms_
3c684     B0 99 02 F1 |                 add     hctwait, _100ms_
3c688     EF 02 A0 FD |                 call    #poll_waitx
3c68c                 | 
3c68c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3c690     00 00 90 FD |                 jmp     #.notify_client
3c694                 | 
3c694                 | .notify_client
3c694     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3c698     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3c69c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3c69c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3c69c     2D 00 64 FD |                 ret
3c6a0                 | 
3c6a0                 | '------------------------------------------------------------------------------
3c6a0                 | ' Initialize the keyboard/mouse data area to start-up values.
3c6a0                 | '------------------------------------------------------------------------------
3c6a0                 | ' On entry:
3c6a0                 | ' On exit:
3c6a0                 | '------------------------------------------------------------------------------
3c6a0                 | init_kbdm_data
3c6a0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3c6a4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3c6a8                 | 
3c6a8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3c6ac     2B ED 03 F6 |                 mov     pa, cache_end_p
3c6b0                 | .loop
3c6b0     61 01 4C FC |                 wrbyte  #0, ptra++
3c6b4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3c6b8     F4 FF 9F CD |         if_b    jmp     #.loop
3c6bc                 |         
3c6bc                 |         if EMUPAD_MAX_PLAYER > 0
3c6bc                 |         end
3c6bc                 | 
3c6bc                 | 
3c6bc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3c6c0                 | .regloop
3c6c0     00 EC 8F F9 |                 altd    pa
3c6c4     00 00 04 F6 |                 mov     0-0, #0
3c6c8     01 EC 07 F1 |                 add     pa, #1
3c6cc     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3c6d0     EC FF 9F 5D |         if_nz   jmp     #.regloop
3c6d4                 | 
3c6d4     E1 E1 61 FF 
3c6d8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3c6dc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3c6e0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3c6e4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3c6e8                 | 
3c6e8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3c6ec                 | 
3c6ec                 | '------------------------------------------------------------------------------
3c6ec                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3c6ec                 | ' function.
3c6ec                 | '------------------------------------------------------------------------------
3c6ec                 | ' On entry:
3c6ec                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3c6ec                 | '   hpar2 - index number of the target interface.
3c6ec                 | ' On exit:
3c6ec                 | '------------------------------------------------------------------------------
3c6ec                 | hset_idle
3c6ec     A8 99 02 F6 |                 mov     hctwait, _2ms_
3c6f0     EF 02 A0 FD |                 call    #poll_waitx
3c6f4     D8 0A D0 FE |                 loc     ptra, #set_idle
3c6f8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3c6fc     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3c700     A0 02 80 FD |                 jmp     #control_write
3c704                 | 
3c704                 | '------------------------------------------------------------------------------
3c704                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3c704                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3c704                 | '------------------------------------------------------------------------------
3c704                 | ' On entry:
3c704                 | '   ep_addr_pid - device address and enpoint for the request.
3c704                 | ' On exit:
3c704                 | '   retval - transaction result.
3c704                 | '------------------------------------------------------------------------------
3c704                 | hset_kbdled_report
3c704     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c708     CC 0A D0 FE |                 loc     ptra, #set_report
3c70c     01 00 80 FF 
3c710     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3c714     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c718     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3c71c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c720     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3c724     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3c728                 | 
3c728                 | '------------------------------------------------------------------------------
3c728                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3c728                 | '------------------------------------------------------------------------------
3c728                 | ' On entry:
3c728                 | ' On exit:
3c728                 | '------------------------------------------------------------------------------
3c728                 | hget_kbd_in_report
3c728     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c72c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3c730     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3c734     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3c738     CF 02 A0 FD |                 call    #do_int_in
3c73c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c740     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c744                 | 
3c744     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c748     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c74c                 | 
3c74c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3c750     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c754     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3c758     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3c75c                 | 
3c75c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3c760     18 00 B0 FD |                 call    #hkbd_compare
3c764                 |         if EMUPAD_MAX_PLAYER > 0
3c764                 |         end
3c764                 | 
3c764                 | .led_check
3c764     3B 71 03 F6 |                 mov     htmp, kb_led_states
3c768     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3c76c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3c770     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3c774     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3c778     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3c77c                 | 
3c77c                 | '------------------------------------------------------------------------------
3c77c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3c77c                 | '------------------------------------------------------------------------------
3c77c                 | hkbd_compare
3c77c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c780     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3c784     61 73 07 FB |                 rdlong  htmp1, ptra++
3c788     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3c78c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3c790     61 73 07 FB |                 rdlong  htmp1, ptra++
3c794     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3c798     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3c79c     2D 00 64 AD |         if_z    ret
3c7a0                 | 
3c7a0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3c7a4                 | 
3c7a4                 |                 ' Handle modifiers
3c7a4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3c7a8     00 87 C7 FA |                 rdbyte  hr1, ptra
3c7ac     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3c7b0     63 86 63 FD |                 mergew  hr1
3c7b4     08 EC 07 F6 |                 mov     pa,#8
3c7b8                 | .modloop
3c7b8     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3c7bc     E8 8C 07 F6 |                 mov     hpar1,#$E8
3c7c0     F6 8D 83 F1 |                 sub     hpar1,pa
3c7c4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3c7c8     FB ED 6F FB |                 djnz    pa,#.modloop
3c7cc                 | 
3c7cc     6F E0 75 FD | .release        modc    _set    wc
3c7d0                 |                 'alts    hdev_port, #hid_report_p
3c7d0                 |                 'mov     ptra, hid_report_p
3c7d0     02 F0 07 F1 |                 add     ptra, #2
3c7d4     06 EC 07 F6 |                 mov     pa, #6
3c7d8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3c7dc     20 00 90 AD |         if_z    jmp     #.rl3
3c7e0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3c7e4     02 F2 07 F1 |                 add     ptrb, #2
3c7e8     06 EE 07 F6 |                 mov     pb, #6
3c7ec     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3c7f0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3c7f4     08 00 90 AD |         if_z    jmp     #.rl3
3c7f8     FC EF 6F FB |                 djnz    pb, #.rl2
3c7fc     68 00 B0 FD |                 call    #hkbd_translate
3c800     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3c804                 | 
3c804     00 90 07 F6 |                 mov     hpar3, #0
3c808     1F 90 27 F4 |                 bith    hpar3, #31
3c80c                 | 
3c80c     6F 00 74 FD | .press          modc    _clr    wc
3c810     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c814     02 F0 07 F1 |                 add     ptra, #2
3c818     06 EC 07 F6 |                 mov     pa, #6
3c81c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3c820     20 00 90 AD |         if_z    jmp     #.pl3
3c824     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3c828     02 F2 07 F1 |                 add     ptrb, #2
3c82c     06 EE 07 F6 |                 mov     pb, #6
3c830     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3c834     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3c838     08 00 90 AD |         if_z    jmp     #.pl3
3c83c     FC EF 6F FB |                 djnz    pb, #.pl2
3c840     24 00 B0 FD |                 call    #hkbd_translate
3c844     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3c848                 | 
3c848     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3c84c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3c850     28 02 64 FD |                 setq #1
3c854     61 73 07 FB |                 rdlong  htmp1, ptra++
3c858     28 02 64 FD |                 setq #1
3c85c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3c860     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3c864                 | 
3c864     2D 00 64 FD |                 ret
3c868                 | 
3c868                 | '------------------------------------------------------------------------------
3c868                 | ' Translate keyboard scancode to ASCII
3c868                 | '------------------------------------------------------------------------------
3c868                 | ' On entry:
3c868                 | '   hpar1 - scancode
3c868                 | '   hpar2 - key modifiers state
3c868                 | '       c - pressed (0) or released (1) flag
3c868                 | ' On exit:
3c868                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3c868                 | '               30..17 = unused
3c868                 | '                   18 = scroll-lock state 
3c868                 | '                   17 = caps-lock state
3c868                 | '                   16 = num-lock state 
3c868                 | '                15..8 = key modifiers state
3c868                 | '                 7..0 = scancode
3c868                 | '------------------------------------------------------------------------------
3c868                 | hkbd_translate
3c868     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3c86c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3c870     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3c874     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3c878     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3c87c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3c880                 | 
3c880                 |         if EMUPAD_MAX_PLAYER > 0
3c880                 | 
3c880                 |         if EMUPAD_BT0_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT1_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT2_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT3_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT4_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT5_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT6_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT7_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT8_BIT >= 0
3c880                 |         end
3c880                 |         if EMUPAD_BT9_BIT >= 0
3c880                 |         end
3c880                 | 
3c880                 |         end
3c880     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3c884     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3c888     1F 8C 47 F4 |                 bitc    hpar1, #31
3c88c                 |         if KEYQUEUE_SIZE > 0
3c88c     C4 09 B0 FE |                 loc pb,#keyq_head
3c890     F7 71 E3 FA |                 rdword htmp,pb
3c894     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3c898     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3c89c     B8 75 03 F6 |                 mov htmp2,htmp
3c8a0     04 74 07 FA |                 mul htmp2,#4
3c8a4     F7 75 03 F1 |                 add htmp2,pb
3c8a8     02 74 07 F1 |                 add htmp2,#2
3c8ac     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3c8b0     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3c8b4     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3c8b8     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3c8bc                 |         end
3c8bc     2D 00 7C FD |                 ret wcz
3c8c0                 | 
3c8c0                 | if HAVE_MOUSE
3c8c0                 | '------------------------------------------------------------------------------
3c8c0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3c8c0                 | '------------------------------------------------------------------------------
3c8c0                 | ' On entry:
3c8c0                 | ' On exit:
3c8c0                 | '------------------------------------------------------------------------------
3c8c0                 | hget_mouse_in_report
3c8c0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c8c4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3c8c8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3c8cc     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3c8d0     CF 02 A0 FD |                 call    #do_int_in
3c8d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c8d8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c8dc                 | 
3c8dc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c8e0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c8e4                 | 
3c8e4     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3c8e8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c8ec     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3c8f0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3c8f4                 | 
3c8f4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c8f8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3c8fc     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3c900     01 90 87 31 |         if_ae   sub     hpar3, #1
3c904                 | 
3c904     40 09 90 FE |                 loc     pa, #mouse_limits
3c908     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3c90c                 | 
3c90c                 |                 ' load xacc,yacc,zacc
3c90c     28 04 64 FD |                 setq    #3-1
3c910     80 87 07 FB |                 rdlong  hr1,ptrb
3c914                 |                 ' load limits and outptr
3c914     28 04 64 FD |                 setq    #3-1
3c918     F6 73 03 FB |                 rdlong  htmp1,pa
3c91c                 | 
3c91c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3c920     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3c924     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3c928     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3c92c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3c930     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3c934     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3c938     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3c93c                 |               
3c93c                 | 
3c93c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3c940     07 70 67 F7 |                 signx   htmp, #7
3c944     B8 87 03 F1 |                 add     hr1,htmp
3c948     00 72 0F F2 |                 cmp     htmp1,#0 wz
3c94c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3c950     00 86 47 53 |         if_ne   fges    hr1,#0
3c954                 | 
3c954     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3c958     07 70 67 F7 |                 signx   htmp, #7
3c95c     B8 89 03 F1 |                 add     hr2,htmp
3c960     00 74 0F F2 |                 cmp     htmp2,#0 wz
3c964     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3c968     00 88 47 53 |         if_ne   fges    hr2,#0
3c96c                 |                 
3c96c                 | 
3c96c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3c970     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3c974     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3c978     B8 8B 03 A1 |         if_z    add     hr3,htmp
3c97c                 | 
3c97c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3c980     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3c984                 | 
3c984                 |                 ' write back accumulators
3c984     28 04 64 FD |                 setq    #3-1
3c988     80 87 67 FC |                 wrlong  hr1,ptrb
3c98c                 |                 ' if outptr set, write X/Y words
3c98c     00 76 0F F2 |                 cmp htmp3,#0                    wz
3c990     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3c994     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3c998     2D 00 64 FD |                 ret
3c99c                 | end
3c99c                 | 
3c99c                 | '------------------------------------------------------------------------------
3c99c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3c99c                 | '------------------------------------------------------------------------------
3c99c                 | ' On entry:
3c99c                 | ' On exit:
3c99c                 | '------------------------------------------------------------------------------
3c99c                 | if _HAVE_GAMEPAD
3c99c                 | hget_gp_in_report
3c99c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c9a0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c9a4                 | 
3c9a4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3c9a8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3c9ac     00 90 E3 F8 |                 getbyte hpar3
3c9b0     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3c9b4     CF 02 A0 FD |                 call    #do_int_in
3c9b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c9bc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c9c0                 | 
3c9c0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c9c4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c9c8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3c9c8                 | 
3c9c8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3c9cc     00 70 E3 F8 |                 getbyte htmp                            ' |
3c9d0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c9d4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3c9d8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3c9dc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3c9e0     B8 01 C0 F8 |                 setbyte htmp                            ' |
3c9e4                 | 
3c9e4                 | ' Note: the following code compares the current and previous reports
3c9e4                 | ' and process the data if there are changes to ease the debug output.
3c9e4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3c9e4                 | ' gpPreReport buffer.
3c9e4                 | 
3c9e4                 |                 ' ----- start of block to remove
3c9e4                 |                 {
3c9e4                 |                 }
3c9e4                 |                 ' ----- end of block to remove
3c9e4     F4 04 90 FE |                 loc pa,#hpad_translate
3c9e8     2A EC 63 FD |                 push pa
3c9ec                 | 
3c9ec                 |                 ' FALL THROUGH !!!!
3c9ec                 | 
3c9ec                 | '------------------------------------------------------------------------------
3c9ec                 | ' Decode controller report
3c9ec                 | '------------------------------------------------------------------------------
3c9ec                 | hid_decode
3c9ec                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3c9ec     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3c9f0     00 04 00 FF 
3c9f4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3c9f8                 | 
3c9f8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3c9fc                 | 
3c9fc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ca00     00 2A E3 F8 |                 getbyte hidr_type
3ca04     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3ca08     34 02 90 AD |         if_z    jmp     #hpad_xinput
3ca0c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3ca10     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3ca14     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3ca18     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3ca1c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3ca20                 |                 
3ca20                 | 
3ca20                 | '------------------------------------------------------------------------------
3ca20                 | ' Handle HID controller (or mouse now
3ca20                 | ' On entry:
3ca20                 | '   ptrb - controller report
3ca20                 | '------------------------------------------------------------------------------
3ca20                 | hpad_hid
3ca20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ca24     F7 F1 03 F6 |                 mov     ptra, pb
3ca28     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3ca2c     00 EC 03 F6 |                 mov     pa, 0-0
3ca30                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3ca30     19 2A 3B FF 
3ca34     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3ca38                 | 
3ca38                 | .next
3ca38     00 EC 5F F2 |                 cmps    pa, #0      wcz
3ca3c     2D 00 7C ED |         if_be   ret     wcz
3ca40                 | 
3ca40     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3ca44     01 EC 87 F1 |                 sub     pa, #1
3ca48     00 8E 07 F6 |                 mov     hpar2, #0
3ca4c                 | 
3ca4c     C6 71 03 F6 |                 mov     htmp, hpar1
3ca50     03 70 07 F5 |                 and     htmp, #$03
3ca54     01 70 0F F2 |                 cmp     htmp, #1    wz
3ca58     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3ca5c     07 8E 67 A7 |         if_z    signx   hpar2,#7
3ca60     01 EC 87 A1 |         if_z    sub     pa, #1
3ca64     02 70 0F F2 |                 cmp     htmp, #2    wz
3ca68     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3ca6c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3ca70     02 EC 87 A1 |         if_z    sub     pa, #2
3ca74     03 70 0F F2 |                 cmp     htmp, #3    wz
3ca78     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3ca7c     04 EC 87 A1 |         if_z    sub     pa, #4
3ca80                 | 
3ca80     FC 8C 07 F5 |                 and     hpar1, #$FC
3ca84                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3ca84                 | 
3ca84     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3ca88     0C 01 90 AD |         if_z    jmp     #.report_id
3ca8c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3ca90     24 01 90 AD |         if_z    jmp     #.usage_page
3ca94     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3ca98     2C 01 90 AD |         if_z    jmp     #.usage
3ca9c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3caa0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3caa4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3caa8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3caac     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3cab0     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3cab4     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3cab8     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3cabc     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3cac0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3cac4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3cac8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3cacc     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3cad0     64 FF 9F 5D |         if_nz   jmp     #.next
3cad4                 | 
3cad4     D8 1D A7 FB |                 tjf     hidr_state,#.next
3cad8                 | 
3cad8     03 8E 07 F5 |                 and     hpar2, #$03
3cadc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3cae0     18 00 90 5D |         if_nz   jmp     #.skip
3cae4                 | 
3cae4     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3cae8     20 00 90 AD |         if_z    jmp     #.axes
3caec     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3caf0     5C 00 90 AD |         if_z    jmp     #.hats
3caf4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3caf8     70 00 90 AD |         if_z    jmp     #.buttons
3cafc                 | .skip
3cafc     8F 71 03 F6 |                 mov     htmp, hidr_size
3cb00     90 71 03 FA |                 mul     htmp, hidr_count
3cb04     B8 23 03 F1 |                 add     hidr_offset, htmp
3cb08     2C FF 9F FD |                 jmp     #.next
3cb0c                 | .axes
3cb0c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3cb0c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3cb10     90 87 03 F6 |                 mov     hr1, hidr_count
3cb14                 | .l1
3cb14     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3cb18     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3cb1c     04 03 B0 FD |                 call    #hpad_getbits
3cb20     64 03 B0 FD |                 call    #hpad_normalize
3cb24     06 84 1F F2 |                 cmp     hr0, #6         wcz
3cb28     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3cb2c     00 88 43 C8 |         if_b    getnib  hr2
3cb30     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3cb34     5F 01 20 C9 |         if_b    setword retval
3cb38     01 84 07 C1 |         if_b    add     hr0, #1
3cb3c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3cb40     F4 87 6F FB |                 djnz    hr1, #.l1
3cb44                 | 
3cb44     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3cb48     01 1C 07 F6 |                 mov     hidr_state, #1
3cb4c     E8 FE 9F FD |                 jmp     #.next
3cb50                 | .hats
3cb50                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3cb50     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3cb54     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3cb58     C8 02 B0 FD |                 call    #hpad_getbits
3cb5c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3cb60     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cb64     01 1C 07 F6 |                 mov     hidr_state, #1
3cb68     90 FF 9F FD |                 jmp     #.skip
3cb6c                 | .buttons
3cb6c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3cb6c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3cb70     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3cb74     90 8F 03 FA |                 mul     hpar2, hidr_count
3cb78     A8 02 B0 FD |                 call    #hpad_getbits
3cb7c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3cb80     B8 BF 62 F0 |                 shl     retval, htmp
3cb84     5F 17 43 F5 |                 or      hidr_buttons, retval
3cb88     90 71 03 F1 |                 add     htmp, hidr_count
3cb8c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3cb90     01 1C 07 F6 |                 mov     hidr_state, #1
3cb94     64 FF 9F FD |                 jmp     #.skip
3cb98                 | .report_id
3cb98     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3cb9c     2D 00 7C 5D |         if_nz   ret     wcz
3cba0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3cba4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3cba8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3cbac     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3cbb0     01 F2 87 51 |         if_nz   sub     ptrb,#1
3cbb4     80 FE 9F FD |                 jmp     #.next
3cbb8                 | .usage_page
3cbb8     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3cbbc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3cbc0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3cbc4     70 FE 9F FD |                 jmp     #.next
3cbc8                 | .usage
3cbc8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3cbcc     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3cbd0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3cbd4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3cbd8     5C FE 9F AD |         if_z    jmp     #.next
3cbdc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3cbe0     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3cbe4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3cbe8     4C FE 9F AD |         if_z    jmp     #.next
3cbec     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3cbf0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3cbf4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3cbf8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3cbfc     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3cc00     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3cc04     10 00 90 AD |         if_z    jmp     #.usage_axis
3cc08     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3cc0c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3cc10     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3cc14     20 FE 9F FD |                 jmp     #.next
3cc18                 | .usage_axis
3cc18     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3cc1c     18 FE 9F CD |         if_b    jmp     #.next
3cc20     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3cc24     C7 01 00 F8 |                 setnib  hpar2
3cc28                 | 
3cc28     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3cc2c     C7 8F C3 F9 |                 decod   hpar2
3cc30     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3cc34                 | 
3cc34     01 24 07 F1 |                 add     hidr_usage_idx, #1
3cc38     02 1C 07 F6 |                 mov     hidr_state, #2
3cc3c     F8 FD 9F FD |                 jmp     #.next
3cc40                 | 
3cc40                 | '------------------------------------------------------------------------------
3cc40                 | ' Handle XInput controller
3cc40                 | ' On entry:
3cc40                 | '   ptrb - controller report
3cc40                 | '------------------------------------------------------------------------------
3cc40                 | '   Default implementation translates the report to a pseudo-defacto hid
3cc40                 | '   standard and jumps to hpad_translate for actions.
3cc40                 | '   Implementors may take specific actions for this kind of controller.
3cc40                 | '------------------------------------------------------------------------------
3cc40                 | hpad_xinput
3cc40     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3cc44     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3cc48     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3cc4c     14 70 0F F2 |                 cmp     htmp, #$14      wz
3cc50     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3cc54                 | 
3cc54                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3cc54                 | 
3cc54     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3cc58     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3cc5c                 | 
3cc5c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3cc60     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3cc64     5F BF 22 F6 |                 not     retval
3cc68     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3cc6c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3cc70     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3cc74     5F BF 22 F6 |                 not     retval
3cc78     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3cc7c                 | 
3cc7c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3cc80     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3cc84     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3cc88     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3cc8c     F8 01 B0 FD |                 call    #hpad_normalize
3cc90     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3cc94     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3cc98     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3cc9c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3cca0     E4 01 B0 FD |                 call    #hpad_normalize
3cca4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3cca8                 | 
3cca8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ccac     81 BF E6 FA |                 rdword  retval, ptrb[1]
3ccb0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3ccb4     00 16 47 F4 |                 bitc    hidr_buttons, #0
3ccb8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3ccbc     01 16 47 F4 |                 bitc    hidr_buttons, #1
3ccc0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3ccc4     02 16 47 F4 |                 bitc    hidr_buttons, #2
3ccc8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3cccc     03 16 47 F4 |                 bitc    hidr_buttons, #3
3ccd0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3ccd4     04 16 47 F4 |                 bitc    hidr_buttons, #4
3ccd8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3ccdc     05 16 47 F4 |                 bitc    hidr_buttons, #5
3cce0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3cce4     08 16 47 F4 |                 bitc    hidr_buttons, #8
3cce8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3ccec     09 16 47 F4 |                 bitc    hidr_buttons, #9
3ccf0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3ccf4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3ccf8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3ccfc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3cd00     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3cd04     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3cd08                 | 
3cd08     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cd0c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3cd10     7A BB 7A FF 
3cd14     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3cd18     F9 FF 7F FF 
3cd1c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3cd20     B9 71 5F F9 |                 altgn   htmp, #htmp1
3cd24     00 70 43 F8 |                 getnib  htmp
3cd28     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3cd2c                 | 
3cd2c     AC 01 90 FD |                 jmp     #hpad_translate
3cd30                 | 
3cd30                 | '------------------------------------------------------------------------------
3cd30                 | ' Handle PS3 controller
3cd30                 | ' On entry:
3cd30                 | '   ptrb - controller report
3cd30                 | '------------------------------------------------------------------------------
3cd30                 | '   Default implementation translates the report to a pseudo-defacto hid
3cd30                 | '   standard and jumps to hpad_translate for actions.
3cd30                 | '   Implementors may take specific actions for this kind of controller.
3cd30                 | '------------------------------------------------------------------------------
3cd30                 | hpad_ps3
3cd30     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3cd34     01 70 0F F2 |                 cmp     htmp, #$01      wz
3cd38     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3cd3c                 | 
3cd3c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3cd3c                 | 
3cd3c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3cd40     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3cd44     40 01 B0 FD |                 call    #hpad_normalize
3cd48     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3cd4c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3cd50     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3cd54     30 01 B0 FD |                 call    #hpad_normalize
3cd58     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3cd5c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3cd60     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3cd64     20 01 B0 FD |                 call    #hpad_normalize
3cd68     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3cd6c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3cd70     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3cd74     10 01 B0 FD |                 call    #hpad_normalize
3cd78     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3cd7c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3cd80     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3cd84                 | 
3cd84     08 8C 07 F6 |                 mov     hpar1, #8
3cd88     13 8E 07 F6 |                 mov     hpar2, #19
3cd8c     94 00 B0 FD |                 call    #hpad_getbits
3cd90                 | 
3cd90     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3cd94     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3cd98     00 16 47 F4 |                 bitc    hidr_buttons, #0
3cd9c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3cda0     01 16 47 F4 |                 bitc    hidr_buttons, #1
3cda4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3cda8     02 16 47 F4 |                 bitc    hidr_buttons, #2
3cdac     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3cdb0     03 16 47 F4 |                 bitc    hidr_buttons, #3
3cdb4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3cdb8     04 16 47 F4 |                 bitc    hidr_buttons, #4
3cdbc     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3cdc0     05 16 47 F4 |                 bitc    hidr_buttons, #5
3cdc4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3cdc8     06 16 47 F4 |                 bitc    hidr_buttons, #6
3cdcc     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3cdd0     07 16 47 F4 |                 bitc    hidr_buttons, #7
3cdd4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3cdd8     08 16 47 F4 |                 bitc    hidr_buttons, #8
3cddc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3cde0     09 16 47 F4 |                 bitc    hidr_buttons, #9
3cde4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3cde8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3cdec     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3cdf0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3cdf4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3cdf8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3cdfc                 | 
3cdfc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3ce00     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3ce04     09 FA 79 FF 
3ce08     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3ce0c     FF FA 7F FF 
3ce10     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3ce14     B9 71 5F F9 |                 altgn   htmp, #htmp1
3ce18     00 70 43 F8 |                 getnib  htmp
3ce1c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3ce20                 | 
3ce20     B8 00 90 FD |                 jmp     #hpad_translate
3ce24                 | 
3ce24                 | '------------------------------------------------------------------------------
3ce24                 | ' Read bits from report data buffer
3ce24                 | '------------------------------------------------------------------------------
3ce24                 | ' On entry:
3ce24                 | '   PTRB - report buffer
3ce24                 | '   hpar1 - start bit
3ce24                 | '   hpar2 - number of bits
3ce24                 | ' On exit:
3ce24                 | '   retval - bits
3ce24                 | '------------------------------------------------------------------------------
3ce24                 | hpad_getbits
3ce24     C6 71 03 F6 |                 mov     htmp, hpar1
3ce28     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3ce2c     F9 71 03 F1 |                 add     htmp, ptrb
3ce30     B8 BF 02 FB |                 rdlong  retval, htmp
3ce34                 | 
3ce34     C6 73 03 F6 |                 mov     htmp1, hpar1
3ce38     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3ce3c     B9 BF 42 F0 |                 shr     retval, htmp1
3ce40                 | 
3ce40     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3ce44     10 00 90 1D |         if_a    jmp     #.l1
3ce48                 | 
3ce48     C7 8F C3 F9 |                 decod   hpar2
3ce4c     01 8E 87 F1 |                 sub     hpar2, #1
3ce50     C7 BF 02 F5 |                 and     retval, hpar2
3ce54     2D 00 64 FD |                 ret
3ce58                 | .l1
3ce58     FF 7F 00 FF 
3ce5c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3ce60     03 70 07 F1 |                 add     htmp, #3
3ce64     B8 75 03 FB |                 rdlong  htmp2, htmp
3ce68     18 8E 87 F1 |                 sub     hpar2, #24
3ce6c     C7 8F C3 F9 |                 decod   hpar2
3ce70     01 8E 87 F1 |                 sub     hpar2, #1
3ce74     B9 75 43 F0 |                 shr     htmp2, htmp1
3ce78     C7 75 03 F5 |                 and     htmp2, hpar2
3ce7c     18 74 67 F0 |                 shl     htmp2, #24
3ce80     BA BF 42 F5 |                 or      retval, htmp2
3ce84     2D 00 64 FD |                 ret
3ce88                 | 
3ce88                 | '------------------------------------------------------------------------------
3ce88                 | ' Normalize value to signed word (-32768 / 32767)
3ce88                 | '------------------------------------------------------------------------------
3ce88                 | ' On entry:
3ce88                 | '   retval - value to normalize
3ce88                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3ce88                 | '   - or -
3ce88                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3ce88                 | '   hidr_size - value bits length
3ce88                 | ' On exit:
3ce88                 | '   retval - normalized value
3ce88                 | '------------------------------------------------------------------------------
3ce88                 | hpad_normalize
3ce88     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ce8c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ce90     2D 00 64 AD |         if_z    ret
3ce94     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ce98     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3ce9c     0F 72 77 F7 |                 signx   htmp1, #15      wc
3cea0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3cea4     00 BE 66 C7 |         if_c    signx   retval, #0-0
3cea8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ceac     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ceb0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3ceb4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3ceb8     B8 71 53 F6 |                 abs     htmp            wc
3cebc     1F BE 0E F4 |                 testb   retval, #31     wz
3cec0     5F BF 42 F6 |                 abs     retval
3cec4     B8 BF 12 FD |                 qdiv    retval, htmp
3cec8     18 BE 62 FD |                 getqx   retval
3cecc     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ced0     C0 FF 7F FF 
3ced4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ced8     2D 00 64 FD |                 ret
3cedc                 | 
3cedc                 | '------------------------------------------------------------------------------
3cedc                 | ' Perform controller actions
3cedc                 | ' On entry:
3cedc                 | '    hidr_id        report id
3cedc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3cedc                 | '                      X = hidr_axis+0, #0
3cedc                 | '                      Y = hidr_axis+0, #1
3cedc                 | '                      Z = hidr_axis+1, #0
3cedc                 | '                     RX = hidr_axis+1, #1
3cedc                 | '                     RY = hidr_axis+2, #0
3cedc                 | '                     RZ = hidr_axis+2, #1
3cedc                 | '    hidr_buttons   buttons state (bits 0 to 31)
3cedc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3cedc                 | '
3cedc                 | '                     -------3 -------2 -------1 -------0 byte
3cedc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3cedc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3cedc                 | '                                zyx||| |||||||| ++++++++ n. buttons
3cedc                 | '                                |||||| ||||++++--------- n. axes
3cedc                 | '                                |||||| ++++------------- n. hats
3cedc                 | '                                ++++++------------------ valid axes
3cedc                 | '------------------------------------------------------------------------------
3cedc                 | hpad_translate
3cedc                 | 
3cedc                 | 
3cedc                 |         if HAVE_HIDPAD
3cedc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3cee0     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3cee4     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3cee8     01 70 E7 F2 |                 cmpsub  htmp,#1
3ceec     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3cef0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3cef4     2D 00 7C 3D |         if_ae   ret     wcz
3cef8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3cefc     B8 F3 03 F1 |                 add     ptrb,htmp
3cf00     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3cf04     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3cf08     28 0C 64 FD |                 setq    #7-1
3cf0c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3cf10                 |         end
3cf10                 | 
3cf10                 | 
3cf10                 |         if EMUPAD_MAX_PLAYER > 0
3cf10                 | .emupad_no_hat
3cf10                 |         if EMUPAD_BT0_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT1_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT2_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT3_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT4_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT5_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT6_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT7_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT8_BIT >= 0
3cf10                 |         end
3cf10                 |         if EMUPAD_BT9_BIT >= 0
3cf10                 |         end
3cf10                 | .emupad_slot_over
3cf10                 |         end
3cf10                 | 
3cf10                 |         if 0
3cf10                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3cf10                 | 
3cf10                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3cf10                 | 
3cf10                 |         end
3cf10     2D 00 64 FD |                 ret
3cf14                 | end
3cf14                 | 
3cf14                 | if EMUPAD_MAX_PLAYER > 0
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | ' Clear EmuPad state
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | emupad_reset
3cf14                 | 
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | ' Get EmuPad Player number for current device (into retval)
3cf14                 | ' Z flag is also set if current device is valid
3cf14                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | emupad_getnum
3cf14                 | .loop
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | emupad_discon
3cf14                 | .loop         
3cf14                 |         
3cf14                 |         ' FALL THROUGH!!!
3cf14                 | 
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | ' Update EmuPad reports (all of them...)
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | emupad_write_reports
3cf14                 | .devloop
3cf14                 | 
3cf14                 | end
3cf14                 | 
3cf14                 | 
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | ' On entry:
3cf14                 | ' On exit:
3cf14                 | '------------------------------------------------------------------------------
3cf14                 | hget_hub_status
3cf14     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3cf18     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3cf1c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3cf20     01 90 2F F9 |                 setword hpar3, #1, #1
3cf24     CF 02 A0 FD |                 call    #do_int_in
3cf28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cf2c     0C 00 90 AD |         if_z    jmp     #.data
3cf30     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3cf34     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3cf38     2D 00 64 FD |                 ret
3cf3c                 | .data
3cf3c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3cf40     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cf44                 | 
3cf44     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3cf48     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3cf4c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3cf50     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3cf54                 |                 debug(ubin_long(hub_status_chg))
3cf54                 | 
3cf54     01 5A 06 F6 |                 mov     hdev_port, #1
3cf58                 | .loop
3cf58     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3cf5c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3cf60     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3cf64     F0 FF 9F 3D |         if_nc   jmp     #.loop
3cf68     2D 00 64 FD |                 ret
3cf6c                 | 
3cf6c                 | hub_port_handler
3cf6c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3cf70     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cf74     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cf78     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cf7c     55 02 A0 FD |                 call    #control_read
3cf80     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3cf84                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3cf84                 | 
3cf84     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3cf88     50 01 90 5D |         if_x0   jmp     #.other
3cf8c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3cf90     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3cf94     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cf98     A0 02 A0 FD |                 call    #control_write
3cf9c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3cfa0     7C 01 90 5D |         if_x0   jmp     #.disconnect
3cfa4     B0 99 02 F6 |                 mov     hctwait, _100ms_
3cfa8     EF 02 A0 FD |                 call    #poll_waitx
3cfac                 | 
3cfac     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3cfb0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3cfb4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cfb8     A0 02 A0 FD |                 call    #control_write
3cfbc                 | 
3cfbc     02 76 07 F6 |                 mov     htmp3, #2
3cfc0                 | .wait_reset
3cfc0     AC 99 02 F6 |                 mov     hctwait, _8ms_
3cfc4     EF 02 A0 FD |                 call    #poll_waitx
3cfc8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cfcc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cfd0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cfd4     55 02 A0 FD |                 call    #control_read
3cfd8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3cfdc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3cfe0     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3cfe4                 | 
3cfe4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3cfe8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3cfec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cff0     A0 02 A0 FD |                 call    #control_write
3cff4                 | 
3cff4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3cff8                 | .wait_recover
3cff8     A7 99 02 F6 |                 mov     hctwait, _1ms_
3cffc     EF 02 A0 FD |                 call    #poll_waitx
3d000     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3d004                 | 
3d004     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3d008     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3d00c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3d010                 | 
3d010     00 08 00 FF 
3d014     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d018     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3d01c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d020     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d024     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d028     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d02c     48 01 90 5D |         if_nz   jmp     #.done
3d030                 | .get_dev_desc
3d030     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d034     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d038     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d03c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3d040     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3d044     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3d048     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3d04c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d050     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d054     AC 99 02 F6 |                 mov     hctwait, _8ms_
3d058     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d05c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3d060     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3d064     BE 00 A0 FD |                 call    #calc_crc5
3d068     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3d06c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d070     F7 AD C2 FA |                 rdbyte  total_data, pb
3d074     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d078     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d07c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d080     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3d084     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d088     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d08c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d08c     9F 99 02 F6 |                 mov     hctwait, _500us_
3d090     EF 02 A0 FD |                 call    #poll_waitx
3d094     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3d098     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3d09c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3d0a0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3d0a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d0a8     CC 00 90 5D |         if_nz   jmp     #.done
3d0ac     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3d0b0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3d0b4     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3d0b8     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3d0bc     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3d0c0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3d0c4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3d0c8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3d0cc     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3d0d0     A4 00 90 CD |         if_b    jmp     #.done
3d0d4     6C F0 BF FD |                 call    #hparse_con_desc
3d0d8     9C 00 90 FD |                 jmp     #.done
3d0dc                 | 
3d0dc                 | .other
3d0dc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3d0e0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3d0e4     28 00 90 AD |         if_x1   jmp     #.reset_feature
3d0e8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3d0ec     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3d0f0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3d0f4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3d0f8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3d0fc     10 00 90 AD |         if_x1   jmp     #.reset_feature
3d100     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3d104     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3d108     04 00 90 AD |         if_x1   jmp     #.reset_feature
3d10c     68 00 90 FD |                 jmp     #.done
3d110                 | .reset_feature
3d110     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3d114     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d118     A0 02 A0 FD |                 call    #control_write
3d11c     58 00 90 FD |                 jmp     #.done
3d120                 | .disconnect
3d120                 | 
3d120     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3d124     00 70 E3 F8 |                 getbyte htmp
3d128     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3d12c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3d130     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3d134     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3d138     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3d13c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3d140                 |         if EMUPAD_MAX_PLAYER > 0
3d140                 |         end
3d140                 |         if HAVE_MOUSE
3d140     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3d144     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3d148     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3d14c                 |         end
3d14c                 |         if HAVE_HIDPAD
3d14c     14 0A F0 FE |                 loc ptrb,#hidpad_report
3d150     2D 71 03 F6 |                 mov htmp,hdev_port
3d154     01 70 E7 F2 |                 cmpsub htmp,#1
3d158     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3d15c     B8 F3 03 F1 |                 add ptrb,htmp
3d160     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3d164     80 01 6C FC |                 wrlong #0,ptrb
3d168                 |         end
3d168                 | 
3d168     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3d16c     00 00 C4 F8 |                 setbyte #0
3d170     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3d174     00 00 04 F6 |                 mov     0-0, #0
3d178                 | 
3d178                 | .done
3d178     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3d17c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3d180     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d184     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3d188     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3d18c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3d190                 | 
3d190     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3d194     27 EF 03 F6 |                 mov     pb, urx_buff_p
3d198     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3d19c     55 02 A0 FD |                 call    #control_read
3d1a0     00 69 06 FB |                 rdlong  hub_port_status, ptra
3d1a4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3d1a4     2D 00 64 FD |                 ret
3d1a8                 | 
3d1a8                 | '------------------------------------------------------------------------------
3d1a8                 | ' Partially populated SETUP packets
3d1a8                 | '------------------------------------------------------------------------------
3d1a8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d1a9     06          |                 byte    REQ_GET_DESC
3d1aa     00 01       |                 word    TYPE_DEVICE << 8
3d1ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d1ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d1b0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3d1b1     06          |                 byte    REQ_GET_DESC
3d1b2     00 02       |                 word    TYPE_CONFIG << 8
3d1b4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d1b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d1b8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d1b9     09          |                 byte    REQ_SET_CONFIG
3d1ba     00 00       |                 word    0       ' Configuration value
3d1bc     00 00       |                 word    0       ' Zero
3d1be     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3d1c0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3d1c1     05          |                 byte    REQ_SET_ADDR
3d1c2     00 00       |                 word    0       ' Zero
3d1c4     00 00       |                 word    0       ' Zero
3d1c6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3d1c8                 | '------------------------------------------------------------------------------
3d1c8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3d1c8                 | ' wValue field dictates which protocol should be used.
3d1c8                 | '
3d1c8                 | ' When initialized, all devices default to report protocol. However the host
3d1c8                 | ' should not make any assumptions about the device state and should set the
3d1c8                 | ' desired protocol whenever initializing a device.
3d1c8                 | '------------------------------------------------------------------------------
3d1c8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d1c9     0B          |                 byte    HID_SET_PROTO
3d1ca     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3d1cc                 |                                                 ' (HID 1.11 Section 7.2.6).
3d1cc     00 00       |                 word    0               ' Interface index number.
3d1ce     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3d1d0                 | '------------------------------------------------------------------------------
3d1d0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d1d1     0A          |                 byte    HID_SET_IDLE
3d1d2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3d1d4                 |                                         ' reporting until a change is detected in the report data
3d1d4                 | 
3d1d4                 |                                         ' (HID 1.11 Section 7.2.4).
3d1d4     00 00       |                 word    0       ' Interface index number.
3d1d6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3d1d8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3d1d9     09          |                 byte    HID_SET_REPORT
3d1da     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3d1dc                 |                                         ' (HID 1.11 Section 7.2.2).
3d1dc     00 00       |                 word    0       ' Interface index number.
3d1de     00 00       |                 word    0       ' Size of the report, in bytes.
3d1e0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3d1e1     06          |                 byte    REQ_GET_DESC
3d1e2     00 22       |                 word    TYPE_REPORT << 8
3d1e4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d1e6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d1e8                 | '------------------------------------------------------------------------------
3d1e8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3d1e9     06          |                 byte    REQ_GET_DESC
3d1ea     00 29       |                 word    TYPE_HUB << 8
3d1ec     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3d1ee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d1f0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d1f1     03          |                 byte    REQ_SET_FEATURE
3d1f2     00 00       |                 word    0       ' port power
3d1f4     01 00       |                 word    1       ' Port index number (1+)
3d1f6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d1f8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3d1f9     01          |                 byte    REQ_CLEAR_FEATURE
3d1fa     00 00       |                 word    0       ' port power
3d1fc     01 00       |                 word    1       ' Port index number (1+)
3d1fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3d200     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3d201     00          |                 byte    REQ_GET_STATUS
3d202     00 00       |                 word    0
3d204     01 00       |                 word    1       ' Port index number (1+)
3d206     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3d208                 | '------------------------------------------------------------------------------
3d208                 | if _HAVE_GAMEPAD
3d208     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3d20c                 | ps3_command_buff
3d20c     00 00 00 00 
3d210     00          |                 byte    $00, $00, $00, $00, $00
3d211     00 00 00 00 
3d215     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d216     FF 27 10 00 
3d21a     32          |                 byte    $FF, $27, $10, $00, $32
3d21b     FF 27 10 00 
3d21f     32          |                 byte    $FF, $27, $10, $00, $32
3d220     FF 27 10 00 
3d224     32          |                 byte    $FF, $27, $10, $00, $32
3d225     FF 27 10 00 
3d229     32          |                 byte    $FF, $27, $10, $00, $32
3d22a     00 00 00 00 
3d22e     00          |                 byte    $00, $00, $00, $00, $00
3d22f     00 00 00 00 
3d233     00          |                 byte    $00, $00, $00, $00, $00
3d234     00 00 00 00 
3d238     00          |                 byte    $00, $00, $00, $00, $00
3d239     00 00 00    |                 byte    $00, $00, $00
3d23c                 | '------------------------------------------------------------------------------
3d23c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d23f                 |                                         ' 0x01 All blinking
3d23f                 |                                         ' 0x02 1 flashes, then on
3d23f                 |                                         ' 0x03 2 flashes, then on
3d23f                 |                                         ' 0x04 3 flashes, then on
3d23f                 |                                         ' 0x05 4 flashes, then on
3d23f                 |                                         ' 0x06 1 on
3d23f                 |                                         ' 0x07 2 on
3d23f                 |                                         ' 0x08 3 on
3d23f                 |                                         ' 0x09 4 on
3d23f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d23f                 |                                         ' 0x0B Blinking*
3d23f                 |                                         ' 0x0C Slow blinking*
3d23f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d23f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d242     00          |                 byte    $00             ' Left rumble
3d243     00          |                 byte    $00             ' Right rumble
3d244     00 00 00    |                 byte    $00, $00, $00
3d247     00          | end
3d248                 | alignl
3d248                 | 
3d248                 | if HAVE_MOUSE
3d248     00 00 00 00 
3d24c     00 00 00 00 | mouse_limits long 0[2]
3d250     00 00 00 00 | mouse_outptr long 0
3d254                 | end
3d254                 | 
3d254                 | if KEYQUEUE_SIZE > 0
3d254     00          | keyq_head byte 0
3d255     00          | keyq_tail byte 0
3d256     00 00 00 00 
      ...             
3d452     00 00 00 00 
3d456     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d458                 | alignl
3d458                 | end
3d458                 | 
3d458                 | if EMUPAD_MAX_PLAYER > 0
3d458                 | emupad_rule_buffer
3d458                 | if EMUPAD_BUILTIN_RULES
3d458                 | file "padmap_builtin.dat"
3d458                 | end
3d458                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d458                 | '' Default rule directly follows!
3d458                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d458                 | end
3d458                 | 
3d458                 | '------------------------------------------------------------------------------
3d458                 | ' The USB data cache area gets zero-filled at every device disconnect
3d458                 | '------------------------------------------------------------------------------
3d458                 | usb_cache_start
3d458                 | 
3d458                 | ' HID descriptor and report buffers
3d458                 | if !!OVERLAP_MEMORY
3d458     00 00 00 00 
      ...             
3db50     00 00 00 00 
3db54     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3db58                 | end
3db58     00 00 00 00 
3db5c     00 00 00 00 | hkbd_report     byte    0[8]
3db60     00 00 00 00 | hkbd_led_rep    byte    0
3db64                 | alignl
3db64                 | 
3db64                 | if HAVE_HIDPAD
3db64     00 00 00 00 
      ...             
3dc20     00 00 00 00 
3dc24     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3dc28                 | end
3dc28                 | 
3dc28                 | ' HUB descriptor
3dc28     00          | hub_descr       byte    0   ' bDescLength
3dc29     00          |                 byte    0   ' bDescriptorType
3dc2a     00          |                 byte    0   ' bNbrPorts
3dc2b     00 00       |                 word    0   ' wHubCharacteristics
3dc2d     00          |                 byte    0   ' bPwrOn2PwrGood
3dc2e     00          |                 byte    0   ' bHubContrCurrent
3dc2f     00          |                 byte    0   ' DeviceRemoveable
3dc30     00          |                 byte    0   ' PortPwrCtrlMask
3dc31                 | 
3dc31                 | usb_cache_end
3dc31                 | 
3dc31                 | if HAVE_MOUSE
3dc31     00 00 00 00 | mouse_xacc      long 0
3dc35     00 00 00 00 | mouse_yacc      long 0
3dc39     00 00 00 00 | mouse_zacc      long 0
3dc3d     00          | mouse_bstate    byte 0
3dc3e     00          | mouse_lpending  byte 0
3dc3f     00          | mouse_rpending  byte 0
3dc40     00          | mouse_mpending  byte 0
3dc41     00          | mouse_lock      byte 0
3dc42     00 00 00    |                 byte 0[3] ' padding
3dc45                 | end
3dc45                 | 
3dc45     00 00 00 00 
      ...             
3dcbd     00 00 00 00 
3dcc1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3dcc5     00 00 00 00 
3dcc9     00 00 00 00 
3dccd     00 00 00 00 
3dcd1     00 00 00 00 
3dcd5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3dcd7     00 00 00 00 
      ...             
3ddcf     00 00 00 00 
3ddd3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3ddd7                 | 
3ddd7     00          | driver_cog      byte    0                       ' Current driver cog + 1
3ddd8                 | 	alignl
3ddd8                 | _audio096_spin2_dat_
3ddd8                 | 
3ddd8                 | audio       org     0
3ddd8                 | 
3ddd8     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3dddc     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3dde0     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3dde4                 |  
3dde4     01 EC 63 FD |             cogid   pa                   ' compute cogid
3dde8     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3ddec     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3ddf0     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3ddf4                 | 
3ddf4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3ddf8     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3ddfc     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3de00     0F 24 06 FC |             wrpin   dac2,#right
3de04     0F 00 1E FC |             wxpin   #256,#right    
3de08     41 9C 64 FD |             dirh    #left addpins 1
3de0c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3de10     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3de14     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3de18                 |             
3de18                 | '---------------------------------------------------------------------------------        
3de18                 | '----------------- The main loop -------------------------------------------------
3de18                 | '---------------------------------------------------------------------------------
3de18                 | 
3de18     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3de1c     10 00 90 CD |       if_c  jmp     #loop1
3de20                 |   
3de20     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3de24     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3de28     D5 00 80 F1 |             sub     0-0,a40000000
3de2c     FD 01 6E FB |             djnz    cn,#p402
3de30                 |     
3de30     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3de34     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3de38     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3de3c     01 00 06 C6 |     if_c    mov     cn,#1
3de40     DA 02 3A F3 |             fle     ct,time3 wcz
3de44     02 00 06 C6 |     if_c    mov     cn,#2     
3de48     DB 02 3A F3 |             fle     ct,time4 wcz
3de4c     03 00 06 C6 |     if_c    mov     cn,#3
3de50     DC 02 3A F3 |             fle     ct,time5 wcz
3de54     04 00 06 C6 |     if_c    mov     cn,#4
3de58     DD 02 3A F3 |             fle     ct,time6 wcz
3de5c     05 00 06 C6 |     if_c    mov     cn,#5
3de60     DE 02 3A F3 |             fle     ct,time7 wcz
3de64     06 00 06 C6 |     if_c    mov     cn,#6
3de68     DF 02 3A F3 |             fle     ct,time8 wcz
3de6c     07 00 06 C6 |     if_c    mov     cn,#7
3de70                 | 
3de70                 | 
3de70                 | '----------------------------------------------------------------------------------
3de70                 | '------------- Compute channel samples --------------------------------------------
3de70                 | '----------------------------------------------------------------------------------
3de70                 | 
3de70                 | 
3de70     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3de74     06 C0 65 F0 |             shl     channeladd,#6
3de78     E0 F0 03 F1 |             add     ptra,channeladd
3de7c                 | 
3de7c     28 16 64 FD |             setq    #11                        	' read parameters
3de80     00 D7 05 FB |             rdlong  pointer0,ptra
3de84                 |     	    
3de84     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3de88     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3de8c     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3de90     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3de94     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3de98     00 C4 0D F2 |             cmp     qq,#0 wz                         
3de9c     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3dea0     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3dea4                 |             
3dea4     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3dea8     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3deac     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3deb0                 | 
3deb0     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3deb4     EC 08 3A F9 |             getword oldrs,sample0,#1
3deb8     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3debc     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3dec0     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3dec4     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3dec8                 | 
3dec8     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3decc     00 04 02 F6 |             mov     dt0,0-0    
3ded0     D7 04 82 F1 |             sub     dt0,time0
3ded4                 |             
3ded4     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3ded8     FB 00 00 F1 |             add     0-0,afreq0  	
3dedc                 |             
3dedc                 | '---- envelopes
3dedc                 |             
3dedc     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3dee0     20 00 00 AF 
3dee4     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3dee8     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3deec                 | 
3deec     FB 48 02 F6 |             mov     envs1,afreq0
3def0     F5 48 02 FA |             mul     envs1,envspd0
3def4     24 E7 01 F1 |             add     envph0,envs1 
3def8                 | 
3def8     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3defc     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3df00     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3df04     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3df08     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3df0c     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3df10     00 46 06 36 |     if_ge   mov     envlo,#0
3df14     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3df18     16 E6 65 30 |     if_ge   shl     envph0,#22
3df1c                 | 
3df1c     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3df20     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3df24     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3df28     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3df2c     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3df30     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3df34     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3df38     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3df3c     23 49 02 FA |             mul     envs1,envlo
3df40     25 49 02 F1 |             add     envs1,envs2
3df44     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3df48                 |             
3df48     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3df4c     1B C6 61 AD |     if_z    getrnd  spl
3df50     58 00 90 AD |     if_z    jmp     #p406
3df54                 |  
3df54     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3df58     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3df5c     08 D6 45 F0 |             shr     pointer0,#8
3df60                 |          
3df60     1F DA 0D F4 |             testb   sstart0,#31 wz            
3df64     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3df68     1C DA 0D F4 |             testb   sstart0,#28 wz            
3df6c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3df70                 |         
3df70     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3df74     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3df78     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3df7c                 |             
3df7c     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3df80     ED C4 01 F1 |             add     qq,sstart0            
3df84                 | 
3df84     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3df88     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3df8c     1C 01 B0 1D |     if_gt   call    #cache_read
3df90                 |          
3df90     1F DA 0D F4 |             testb   sstart0,#31 wz 
3df94     08 C6 65 50 |     if_nz   shl     spl,#8
3df98     08 D6 65 50 |     if_nz   shl     pointer0,#8
3df9c     07 D6 65 A0 |     if_z    shl     pointer0,#7
3dfa0     1C DA 0D F4 |             testb   sstart0,#28 wz            
3dfa4     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3dfa8     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3dfac                 | 
3dfac                 | 
3dfac     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3dfb0     00 C6 01 F6 |             mov     spl,0-0
3dfb4     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3dfb8     00 C6 01 F6 |             mov     spl,0-0
3dfbc                 | 
3dfbc     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3dfc0     00 0A 02 F6 |             mov     ls0,0-0
3dfc4     20 00 00 FF 
3dfc8     00 C4 05 F6 |             mov     qq,##16384
3dfcc     FE C4 81 F1 |             sub     qq,apan0
3dfd0     E2 C6 31 FA |             scas    spl,qq
3dfd4     00 0C 02 F6 |             mov     rs0, 0-0
3dfd8                 | 
3dfd8     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3dfdc     06 11 02 F1 |             add     rs,rs0
3dfe0     03 0F 82 F1 |             sub     ls,oldls
3dfe4     05 0F 02 F1 |             add     ls,ls0
3dfe8                 |    
3dfe8     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3dfec     05 D9 21 F9 |             setword sample0,ls0,#0
3dff0                 |             
3dff0     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3dff4     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3dff8     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3dffc                 |   '  if_z    mov     sample0,#0
3dffc     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3e000     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3e004     04 00 00 AF 
3e008     00 B0 05 A1 |     if_z    add     time1,##2048
3e00c     D8 B2 01 A6 |     if_z    mov     time2,time1
3e010     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3e014                 | 
3e014     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3e018     00 D7 65 FC |             wrlong  pointer0,ptra
3e01c     08 E7 65 FC |             wrlong  envph0,ptra[8]
3e020     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3e024                 |                       
3e024     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3e028     FF C3 25 A7 |     if_z    decmod  front, #511          
3e02c                 |          
3e02c     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3e030     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3e034     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3e038     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3e03c                 | 	    
3e03c                 | 		    
3e03c     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3e040     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3e044     04 15 02 F6 |             mov     newsample, oldrs       
3e048                 | 
3e048     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3e04c     02 AF 01 F1 |             add     time0,dt0    
3e050                 |                                      
3e050     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3e054     D8 FD 9F AD |     if_z    jmp     #loop1
3e058     02 C5 01 F6 |             mov     qq,dt0
3e05c                 | 
3e05c                 |     
3e05c                 |             
3e05c     01 4E 36 F0 | p301        rol     dropper,#1 wc
3e060     40 00 90 3D |     if_nc   jmp     #p399
3e064     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3e068     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3e06c     F4 FF 9F AD |     if_e    jmp     #p398   
3e070                 | 		
3e070     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3e074     20 00 90 AD |     if_z    jmp     #p302	   
3e078                 |   
3e078     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3e07c     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3e080     02 1E 66 C0 |     if_c    shl     scptr2,#2
3e084     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3e088     60 1E 66 FC |             wrlong  scptr2,#$60
3e08c     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3e090     01 00 00 CF 
3e094     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3e098                 | 			    
3e098     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3e09c     00 00 00 FF 
3e0a0     FF C3 05 F7 |             incmod  front, ##511
3e0a4     ED C5 6D FB | p399        djnz    qq,#p301
3e0a8                 |             
3e0a8     6C FD 9F FD |             jmp     #loop            'loop
3e0ac                 | 
3e0ac                 | '----------------------------------------------------------------------------------
3e0ac                 | '------------- This is the end of the main loop -----------------------------------
3e0ac                 | '----------------------------------------------------------------------------------
3e0ac                 | 
3e0ac                 | '----------------------------------------------------------------------------------
3e0ac                 | '------------- PSRAM cache ----------- --------------------------------------------
3e0ac                 | '----------------------------------------------------------------------------------
3e0ac                 | 
3e0ac                 | ' There are 8 cache pointers for 8 channels
3e0ac                 | ' if 24 higher bits of address=cache, then get a word from the cache
3e0ac                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3e0ac                 | 
3e0ac                 | 
3e0ac     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3e0b0                 |             
3e0b0     E2 40 02 F6 | 	    mov     addrhi,qq		
3e0b4     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3e0b8     14 01 96 F9 | 	    alts    cn,#cache1            
3e0bc     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3e0c0     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3e0c4                 | 	
3e0c4     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3e0c8     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3e0cc     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3e0d0     08 38 66 F0 | 	    shl     cmd,#8
3e0d4     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3e0d8     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3e0dc     08 3A 66 F0 |             shl     hubaddr,#8                  '
3e0e0     13 3B 02 F1 |             add     hubaddr,hubptr 
3e0e4     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3e0e8     28 04 64 FD |             setq    #2                          ' write 3 longs
3e0ec     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3e0f0     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3e0f4     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3e0f8                 |             
3e0f8                 | 	
3e0f8     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3e0fc     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3e100     13 C5 01 F1 | 	    add     qq,hubptr
3e104     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3e108     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3e10c                 |           
3e10c                 | 
3e10c                 | '--------------------------------------------------------------------------
3e10c                 | '------ Interrupt service -------------------------------------------------
3e10c                 | '------ Output the sample, get the next one if exists ---------------------
3e10c                 | '--------------------------------------------------------------------------
3e10c                 | 
3e10c     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3e110     0F D0 25 FC |             wypin   rsample,#right       '4
3e114     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3e118     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3e11c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3e120     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3e124     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3e128                 |     
3e128     F5 FF 3B FB |             reti1                        '17/19 
3e12c                 |           
3e12c                 | '---------------------------------------------------------------------------
3e12c                 | '-------- End of interrupt -------------------------------------------------
3e12c                 | '---------------------------------------------------------------------------    
3e12c                 | 
3e12c                 | 
3e12c                 | '---------------------------------------------------------------------------
3e12c                 | '------- Variables ---------------------------------------------------------
3e12c                 | '---------------------------------------------------------------------------
3e12c                 | 
3e12c                 | ' constants
3e12c                 | 
3e12c     00 00 00 40 | a40000000   long $40000000
3e130     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3e134                 | 
3e134                 | ' Time variables
3e134                 | 
3e134     00 00 00 00 | time0       long 0    ' Global sample computing time
3e138     01 00 00 00 | time1       long 1    ' Local channels time
3e13c     02 00 00 00 | time2       long 2
3e140     03 00 00 00 | time3       long 3
3e144     04 00 00 00 | time4       long 4
3e148     05 00 00 00 | time5       long 5
3e14c     06 00 00 00 | time6       long 6
3e150     07 00 00 00 | time7       long 7
3e154     08 00 00 00 | time8       long 8
3e158                 | 
3e158     00 00 00 00 | channeladd long 0
3e15c                 | 
3e15c     00 00 00 00 | front       long 0
3e160                 | 
3e160                 | ' temporary variables 
3e160     00 00 00 00 | qq          long 0
3e164     00 00 00 00 | spl         long 0
3e168     00 00 00 00 | zero        long 0
3e16c     00 00 00 00 | mailbox     long 0
3e170     00 00 00 00 | mailbox2 long 0
3e174                 | 
3e174                 | ' Interrupt ISR variables
3e174                 | 
3e174     00 00 00 00 | lsample     long 0
3e178     00 00 00 00 | rsample     long 0
3e17c     00 00 00 00 | lsnext      long 0
3e180     00 00 00 00 | rsnext      long 0 
3e184                 | 
3e184                 | ' channel parameter block
3e184                 | 
3e184     00 00 00 00 | pointer0    long 0     
3e188     00 00 00 00 | sample0     long 0
3e18c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3e190     00 00 00 00 | lstart0     long 0
3e194     00 00 00 00 | lend0       long 0
3e198     00 00 00 00 | volpan0     long 0
3e19c     00 00 00 00 | freqskip0   long 0
3e1a0     00 00 00 00 | command0    long 0
3e1a4     00 00 00 00 | envph0	    long 0
3e1a8     00 00 00 00 | envptr0	    long 0
3e1ac     00 00 00 00 | envspd0	    long 0
3e1b0     00 00 00 00 | envlen0	    long 0
3e1b4     00 00 00 00 | res5	    long 0
3e1b8     00 00 00 00 | res6	    long 0
3e1bc     00 00 00 00 | res7	    long 0
3e1c0     00 00 00 00 | res8	    long 0
3e1c4                 | 
3e1c4     00 00 00 00 | afreq0      long 0
3e1c8     00 00 00 00 | askip0      long 0
3e1cc     00 00 00 00 | avol0       long 0
3e1d0     00 00 00 00 | apan0       long 0
3e1d4                 | 
3e1d4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3e1d8     00 00 00 00 | cn          long 0
3e1dc     00 00 00 00 | ct          long 0
3e1e0     00 00 00 00 | dt0         long 0
3e1e4                 | 
3e1e4                 | ' Samples
3e1e4     00 00 00 00 | oldls       long 0
3e1e8     00 00 00 00 | oldrs       long 0
3e1ec                 | 
3e1ec     00 00 00 00 | ls0         long 0
3e1f0     00 00 00 00 | rs0         long 0
3e1f4                 | 
3e1f4     00 00 00 00 | ls          long 0    
3e1f8     00 00 00 00 | rs          long 0
3e1fc                 | 
3e1fc     00 00 00 00 | oldsample   long 0
3e200     00 00 00 00 | newsample   long 0
3e204                 | 
3e204     00 00 00 00 | nrsample    long 0
3e208     00 00 00 00 | nlsample    long 0
3e20c                 | 
3e20c     00 00 00 00 | scbase long 0
3e210     00 00 00 00 | scptr long 0
3e214     00 00 00 00 | scptr2 long 0
3e218     00 00 00 00 | scope long 0
3e21c                 | 
3e21c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3e220     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3e224                 | 
3e224     00 18 07 00 | hubptr      long $71800
3e228     00 00 00 00 | cache1      long 0
3e22c     00 00 00 00 | cache2      long 0
3e230     00 00 00 00 | cache3      long 0
3e234     00 00 00 00 | cache4      long 0
3e238     00 00 00 00 | cache5      long 0
3e23c     00 00 00 00 | cache6      long 0
3e240     00 00 00 00 | cache7      long 0
3e244     00 00 00 00 | cache8      long 0
3e248                 | 
3e248                 | 
3e248     00 00 00 00 | cmd         long 0
3e24c     00 00 00 00 | hubaddr     long 0
3e250     00 01 00 00 | count       long 256
3e254     00 00 00 00 | addrlo long 0
3e258     00 00 00 00 | addrhi long 0
3e25c     00 00 00 00 | pointer00 long 0
3e260     00 00 00 00 | envhi long 0
3e264     00 00 00 00 | envlo long 0
3e268     00 00 00 00 | envs1 long 0
3e26c     00 00 00 00 | envs2 long 0
3e270     00 00 00 00 | noise0 long 0
3e274     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3e278     00 00 00 00 
3e27c     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e280                 | 	alignl
3e280                 | __system__dat_
3e280     00 00 00 00 
3e284     00 00 00 00 | 	byte	$00[8]
3e288     03 00 00 00 
3e28c     00 00 00 00 
3e290     00 00 00 00 
3e294     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e298     00 00 00 00 
      ...             
3e524     00 00 00 00 
3e528     00 00 00 00 | 	byte	$00[660]
3e52c     00 00 F0 09 | 	long	(159 {__system____root_opendir})<<20
3e530     00 00 00 0A | 	long	(160 {__system____root_closedir})<<20
3e534     00 00 10 0A | 	long	(161 {__system____root_readdir})<<20
3e538     00 00 20 0A | 	long	(162 {__system____root_stat})<<20
3e53c     00 00 00 00 
3e540     00 00 00 00 
3e544     00 00 00 00 
3e548     00 00 00 00 
3e54c     00 00 00 00 
3e550     00 00 00 00 
3e554     00 00 00 00 | 	byte	$00[28]
3e558     C0 E5 03 00 | 	long	@@@__system__dat_ + 832
3e55c     C3 E5 03 00 | 	long	@@@__system__dat_ + 835
3e560     E4 E5 03 00 | 	long	@@@__system__dat_ + 868
3e564     FD E5 03 00 | 	long	@@@__system__dat_ + 893
3e568     18 E6 03 00 | 	long	@@@__system__dat_ + 920
3e56c     32 E6 03 00 | 	long	@@@__system__dat_ + 946
3e570     42 E6 03 00 | 	long	@@@__system__dat_ + 962
3e574     54 E6 03 00 | 	long	@@@__system__dat_ + 980
3e578     66 E6 03 00 | 	long	@@@__system__dat_ + 998
3e57c     78 E6 03 00 | 	long	@@@__system__dat_ + 1016
3e580     84 E6 03 00 | 	long	@@@__system__dat_ + 1028
3e584     95 E6 03 00 | 	long	@@@__system__dat_ + 1045
3e588     A9 E6 03 00 | 	long	@@@__system__dat_ + 1065
3e58c     B3 E6 03 00 | 	long	@@@__system__dat_ + 1075
3e590     C3 E6 03 00 | 	long	@@@__system__dat_ + 1091
3e594     D2 E6 03 00 | 	long	@@@__system__dat_ + 1106
3e598     E8 E6 03 00 | 	long	@@@__system__dat_ + 1128
3e59c     01 E7 03 00 | 	long	@@@__system__dat_ + 1153
3e5a0     15 E7 03 00 | 	long	@@@__system__dat_ + 1173
3e5a4     23 E7 03 00 | 	long	@@@__system__dat_ + 1187
3e5a8     37 E7 03 00 | 	long	@@@__system__dat_ + 1207
3e5ac     43 E7 03 00 | 	long	@@@__system__dat_ + 1219
3e5b0     55 E7 03 00 | 	long	@@@__system__dat_ + 1237
3e5b4     6D E7 03 00 | 	long	@@@__system__dat_ + 1261
3e5b8     7F E7 03 00 | 	long	@@@__system__dat_ + 1279
3e5bc     92 E7 03 00 | 	long	@@@__system__dat_ + 1298
3e5c0     4F 4B 00 4E 
3e5c4     75 6D 65 72 
3e5c8     69 63 61 6C 
3e5cc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e5d0     75 6D 65 6E 
3e5d4     74 20 6F 75 
3e5d8     74 20 6F 66 
3e5dc     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3e5e0     61 69 6E 00 
3e5e4     52 65 73 75 
3e5e8     6C 74 20 6E 
3e5ec     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3e5f0     65 70 72 65 
3e5f4     73 65 6E 74 
3e5f8     61 62 6C 65 
3e5fc     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3e600     65 67 61 6C 
3e604     20 6D 75 6C 
3e608     74 69 62 79 
3e60c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3e610     65 71 75 65 
3e614     6E 63 65 00 
3e618     4E 6F 20 73 
3e61c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3e620     66 69 6C 65 
3e624     20 6F 72 20 
3e628     64 69 72 65 
3e62c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e630     79 00 42 61 
3e634     64 20 66 69 
3e638     6C 65 20 6E 
3e63c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3e640     72 00 50 65 
3e644     72 6D 69 73 
3e648     73 69 6F 6E 
3e64c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3e650     69 65 64 00 
3e654     4E 6F 74 20 
3e658     65 6E 6F 75 
3e65c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3e660     65 6D 6F 72 
3e664     79 00 54 65 
3e668     6D 70 6F 72 
3e66c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3e670     66 61 69 6C 
3e674     75 72 65 00 
3e678     46 69 6C 65 
3e67c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3e680     73 74 73 00 
3e684     49 6E 76 61 
3e688     6C 69 64 20 
3e68c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3e690     6D 65 6E 74 
3e694     00 54 6F 6F 
3e698     20 6D 61 6E 
3e69c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3e6a0     65 6E 20 66 
3e6a4     69 6C 65 73 
3e6a8     00 49 2F 4F 
3e6ac     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3e6b0     6F 72 00 4E 
3e6b4     6F 74 20 61 
3e6b8     20 64 69 72 
3e6bc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3e6c0     72 79 00 49 
3e6c4     73 20 61 20 
3e6c8     64 69 72 65 
3e6cc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e6d0     79 00 52 65 
3e6d4     61 64 20 6F 
3e6d8     6E 6C 79 20 
3e6dc     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3e6e0     20 73 79 73 
3e6e4     74 65 6D 00 
3e6e8     46 75 6E 63 
3e6ec     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3e6f0     20 6E 6F 74 
3e6f4     20 69 6D 70 
3e6f8     6C 65 6D 65 
3e6fc     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3e700     00 44 69 72 
3e704     65 63 74 6F 
3e708     72 79 20 6E 
3e70c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3e710     6D 70 74 79 
3e714     00 4E 61 6D 
3e718     65 20 74 6F 
3e71c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3e720     6E 67 00 44 
3e724     65 76 69 63 
3e728     65 20 6E 6F 
3e72c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3e730     65 6B 61 62 
3e734     6C 65 00 42 
3e738     61 64 20 61 
3e73c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3e740     73 73 00 42 
3e744     72 6F 6B 65 
3e748     6E 20 63 6F 
3e74c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3e750     74 69 6F 6E 
3e754     00 44 65 76 
3e758     69 63 65 20 
3e75c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3e760     65 73 6F 75 
3e764     72 63 65 20 
3e768     62 75 73 79 
3e76c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3e770     73 73 20 64 
3e774     65 76 69 63 
3e778     65 20 6C 69 
3e77c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3e780     6F 20 73 70 
3e784     61 63 65 20 
3e788     6F 6E 20 64 
3e78c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3e790     65 00 55 6E 
3e794     6B 6E 6F 77 
3e798     6E 20 65 72 
3e79c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3e7a0     00 00 00 00 
3e7a4     00 00 00 00 
3e7a8     00 00 00 00 | 	byte	$00[12]
3e7ac     05 00 00 00 
3e7b0     00 00 00 00 
3e7b4     00 00 00 00 
3e7b8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e7bc     00 00 00 00 | 	byte	$00, $00, $00, $00
3e7c0     00 00 70 0B | 	long	(183 {__system___tx})<<20
3e7c4     00 00 80 0B | 	long	(184 {__system___rx})<<20
3e7c8     00 00 00 00 | 	byte	$00, $00, $00, $00
3e7cc     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0741})<<20
3e7d0     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0742})<<20
3e7d4     00 00 00 00 
3e7d8     00 00 00 00 | 	byte	$00[8]
3e7dc     01 00 00 00 
3e7e0     06 00 00 00 
3e7e4     00 00 00 00 
3e7e8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e7ec     00 00 00 00 
3e7f0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e7f4     00 00 70 0B | 	long	(183 {__system___tx})<<20
3e7f8     00 00 80 0B | 	long	(184 {__system___rx})<<20
3e7fc     00 00 00 00 | 	byte	$00, $00, $00, $00
3e800     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0741})<<20
3e804     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0742})<<20
3e808     00 00 00 00 
3e80c     00 00 00 00 | 	byte	$00[8]
3e810     01 00 00 00 
3e814     06 00 00 00 
3e818     00 00 00 00 
3e81c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e820     00 00 00 00 
3e824     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e828     00 00 70 0B | 	long	(183 {__system___tx})<<20
3e82c     00 00 80 0B | 	long	(184 {__system___rx})<<20
3e830     00 00 00 00 | 	byte	$00, $00, $00, $00
3e834     00 00 90 0B | 	long	(185 {__system___rxtxioctl_0741})<<20
3e838     00 00 A0 0B | 	long	(186 {__system____dummy_flush_0742})<<20
3e83c     00 00 00 00 
      ...             
3e9ac     00 00 00 00 
3e9b0     00 00 00 00 | 	byte	$00[376]
3e9b4     B8 E9 03 00 | 	long	@@@__system__dat_ + 1848
3e9b8     00 00 00 00 
3e9bc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e9c0                 | 	alignl
3e9c0                 | _fatfs_cc_dat_
3e9c0     C7 00 FC 00 
3e9c4     E9 00 E2 00 
3e9c8     E4 00 E0 00 
3e9cc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3e9d0     EA 00 EB 00 
3e9d4     E8 00 EF 00 
3e9d8     EE 00 EC 00 
3e9dc     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3e9e0     C9 00 E6 00 
3e9e4     C6 00 F4 00 
3e9e8     F6 00 F2 00 
3e9ec     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3e9f0     FF 00 D6 00 
3e9f4     DC 00 F8 00 
3e9f8     A3 00 D8 00 
3e9fc     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3ea00     E1 00 ED 00 
3ea04     F3 00 FA 00 
3ea08     F1 00 D1 00 
3ea0c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3ea10     BF 00 AE 00 
3ea14     AC 00 BD 00 
3ea18     BC 00 A1 00 
3ea1c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3ea20     91 25 92 25 
3ea24     93 25 02 25 
3ea28     24 25 C1 00 
3ea2c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3ea30     A9 00 63 25 
3ea34     51 25 57 25 
3ea38     5D 25 A2 00 
3ea3c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3ea40     14 25 34 25 
3ea44     2C 25 1C 25 
3ea48     00 25 3C 25 
3ea4c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3ea50     5A 25 54 25 
3ea54     69 25 66 25 
3ea58     60 25 50 25 
3ea5c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3ea60     F0 00 D0 00 
3ea64     CA 00 CB 00 
3ea68     C8 00 31 01 
3ea6c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3ea70     CF 00 18 25 
3ea74     0C 25 88 25 
3ea78     84 25 A6 00 
3ea7c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3ea80     D3 00 DF 00 
3ea84     D4 00 D2 00 
3ea88     F5 00 D5 00 
3ea8c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3ea90     DE 00 DA 00 
3ea94     DB 00 D9 00 
3ea98     FD 00 DD 00 
3ea9c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3eaa0     AD 00 B1 00 
3eaa4     17 20 BE 00 
3eaa8     B6 00 A7 00 
3eaac     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3eab0     B0 00 A8 00 
3eab4     B7 00 B9 00 
3eab8     B3 00 B2 00 
3eabc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3eac0     61 00 1A 03 
3eac4     E0 00 17 03 
3eac8     F8 00 07 03 
3eacc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3ead0     78 01 00 01 
3ead4     30 01 32 01 
3ead8     06 01 39 01 
3eadc     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3eae0     2E 01 79 01 
3eae4     06 01 80 01 
3eae8     4D 00 43 02 
3eaec     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3eaf0     82 01 84 01 
3eaf4     84 01 86 01 
3eaf8     87 01 87 01 
3eafc     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3eb00     8B 01 8B 01 
3eb04     8D 01 8E 01 
3eb08     8F 01 90 01 
3eb0c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3eb10     93 01 94 01 
3eb14     F6 01 96 01 
3eb18     97 01 98 01 
3eb1c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3eb20     9B 01 9C 01 
3eb24     9D 01 20 02 
3eb28     9F 01 A0 01 
3eb2c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3eb30     A2 01 A4 01 
3eb34     A4 01 A6 01 
3eb38     A7 01 A7 01 
3eb3c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3eb40     AB 01 AC 01 
3eb44     AC 01 AE 01 
3eb48     AF 01 AF 01 
3eb4c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3eb50     B3 01 B3 01 
3eb54     B5 01 B5 01 
3eb58     B7 01 B8 01 
3eb5c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3eb60     BB 01 BC 01 
3eb64     BC 01 BE 01 
3eb68     F7 01 C0 01 
3eb6c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3eb70     C3 01 C4 01 
3eb74     C5 01 C4 01 
3eb78     C7 01 C8 01 
3eb7c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3eb80     CB 01 CA 01 
3eb84     CD 01 10 01 
3eb88     DD 01 01 00 
3eb8c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3eb90     12 01 F3 01 
3eb94     03 00 F1 01 
3eb98     F4 01 F4 01 
3eb9c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3eba0     22 02 12 01 
3eba4     3A 02 09 00 
3eba8     65 2C 3B 02 
3ebac     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3ebb0     66 2C 3F 02 
3ebb4     40 02 41 02 
3ebb8     41 02 46 02 
3ebbc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3ebc0     40 00 81 01 
3ebc4     86 01 55 02 
3ebc8     89 01 8A 01 
3ebcc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3ebd0     5A 02 90 01 
3ebd4     5C 02 5D 02 
3ebd8     5E 02 5F 02 
3ebdc     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3ebe0     62 02 94 01 
3ebe4     64 02 65 02 
3ebe8     66 02 67 02 
3ebec     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3ebf0     6A 02 62 2C 
3ebf4     6C 02 6D 02 
3ebf8     6E 02 9C 01 
3ebfc     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3ec00     9D 01 73 02 
3ec04     74 02 9F 01 
3ec08     76 02 77 02 
3ec0c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3ec10     7A 02 7B 02 
3ec14     7C 02 64 2C 
3ec18     7E 02 7F 02 
3ec1c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3ec20     82 02 A9 01 
3ec24     84 02 85 02 
3ec28     86 02 87 02 
3ec2c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3ec30     B1 01 B2 01 
3ec34     45 02 8D 02 
3ec38     8E 02 8F 02 
3ec3c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3ec40     B7 01 7B 03 
3ec44     03 00 FD 03 
3ec48     FE 03 FF 03 
3ec4c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3ec50     86 03 88 03 
3ec54     89 03 8A 03 
3ec58     B1 03 11 03 
3ec5c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3ec60     A3 03 A3 03 
3ec64     C4 03 08 03 
3ec68     CC 03 03 00 
3ec6c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3ec70     8F 03 D8 03 
3ec74     18 01 F2 03 
3ec78     0A 00 F9 03 
3ec7c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3ec80     F5 03 F6 03 
3ec84     F7 03 F7 03 
3ec88     F9 03 FA 03 
3ec8c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3ec90     20 03 50 04 
3ec94     10 07 60 04 
3ec98     22 01 8A 04 
3ec9c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3eca0     0E 01 CF 04 
3eca4     01 00 C0 04 
3eca8     D0 04 44 01 
3ecac     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3ecb0     00 00 7D 1D 
3ecb4     01 00 63 2C 
3ecb8     00 1E 96 01 
3ecbc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3ecc0     00 1F 08 06 
3ecc4     10 1F 06 06 
3ecc8     20 1F 08 06 
3eccc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3ecd0     40 1F 06 06 
3ecd4     51 1F 07 00 
3ecd8     59 1F 52 1F 
3ecdc     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3ece0     5D 1F 56 1F 
3ece4     5F 1F 60 1F 
3ece8     08 06 70 1F 
3ecec     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3ecf0     BB 1F C8 1F 
3ecf4     C9 1F CA 1F 
3ecf8     CB 1F DA 1F 
3ecfc     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3ed00     F9 1F EA 1F 
3ed04     EB 1F FA 1F 
3ed08     FB 1F 80 1F 
3ed0c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3ed10     08 06 A0 1F 
3ed14     08 06 B0 1F 
3ed18     04 00 B8 1F 
3ed1c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3ed20     BC 1F CC 1F 
3ed24     01 00 C3 1F 
3ed28     D0 1F 02 06 
3ed2c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3ed30     E5 1F 01 00 
3ed34     EC 1F F3 1F 
3ed38     01 00 FC 1F 
3ed3c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3ed40     32 21 70 21 
3ed44     10 02 84 21 
3ed48     01 00 83 21 
3ed4c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3ed50     30 2C 2F 04 
3ed54     60 2C 02 01 
3ed58     67 2C 06 01 
3ed5c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3ed60     80 2C 64 01 
3ed64     00 2D 26 08 
3ed68     41 FF 1A 03 
3ed6c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3ed70     05 07 09 0E 
3ed74     10 12 14 16 
3ed78     18 1C 1E 43 
3ed7c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3ed80     41 41 43 45 
3ed84     45 45 49 49 
3ed88     49 41 41 45 
3ed8c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3ed90     4F 55 55 59 
3ed94     4F 55 4F 9C 
3ed98     4F 9E 9F 41 
3ed9c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3eda0     A5 A6 A7 A8 
3eda4     A9 AA AB AC 
3eda8     AD AE AF B0 
3edac     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3edb0     41 41 41 B8 
3edb4     B9 BA BB BC 
3edb8     BD BE BF C0 
3edbc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3edc0     C5 41 41 C8 
3edc4     C9 CA CB CC 
3edc8     CD CE CF D1 
3edcc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3edd0     49 49 49 49 
3edd4     D9 DA DB DC 
3edd8     DD 49 DF 4F 
3eddc     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3ede0     4F E6 E8 E8 
3ede4     55 55 55 59 
3ede8     59 EE EF F0 
3edec     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3edf0     F5 F6 F7 F8 
3edf4     F9 FA FB FC 
3edf8     FD FE FF 00 
3edfc     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3ee00     00 00 00 00 | 	byte	$00, $00, $00, $00
3ee04     00 00 60 0A | 	long	(166 {_fatfs_cc_v_close})<<20
3ee08     00 00 70 0A | 	long	(167 {_fatfs_cc_v_read})<<20
3ee0c     00 00 80 0A | 	long	(168 {_fatfs_cc_v_write})<<20
3ee10     00 00 90 0A | 	long	(169 {_fatfs_cc_v_lseek})<<20
3ee14     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_ioctl})<<20
3ee18     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_flush})<<20
3ee1c     00 00 00 00 
3ee20     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ee24     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_open})<<20
3ee28     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_creat})<<20
3ee2c     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_opendir})<<20
3ee30     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_closedir})<<20
3ee34     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_readdir})<<20
3ee38     00 00 00 0B | 	long	(176 {_fatfs_cc_v_stat})<<20
3ee3c     00 00 10 0B | 	long	(177 {_fatfs_cc_v_mkdir})<<20
3ee40     00 00 20 0B | 	long	(178 {_fatfs_cc_v_rmdir})<<20
3ee44     00 00 30 0B | 	long	(179 {_fatfs_cc_v_remove})<<20
3ee48     00 00 40 0B | 	long	(180 {_fatfs_cc_v_rename})<<20
3ee4c     00 00 50 0B | 	long	(181 {_fatfs_cc_v_init})<<20
3ee50     00 00 60 0B | 	long	(182 {_fatfs_cc_v_deinit})<<20
3ee54     FF FF FF FF 
3ee58     1F 00 00 00 
3ee5c     1C 00 00 00 
3ee60     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3ee64     1E 00 00 00 
3ee68     1F 00 00 00 
3ee6c     1E 00 00 00 
3ee70     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3ee74     1F 00 00 00 
3ee78     1E 00 00 00 
3ee7c     1F 00 00 00 
3ee80     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3ee84     1F 00 00 00 
3ee88     00 00 00 00 
3ee8c     1F 00 00 00 
3ee90     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3ee94     5A 00 00 00 
3ee98     78 00 00 00 
3ee9c     97 00 00 00 
3eea0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3eea4     D4 00 00 00 
3eea8     F3 00 00 00 
3eeac     11 01 00 00 
3eeb0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3eeb4     4E 01 00 00 
3eeb8     6D 01 00 00 
3eebc     FF FF FF FF 
3eec0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3eec4     00 00 00 00 
      ...             
3eedc     00 00 00 00 
3eee0     00 00 00 00 | 	byte	$00[32]
3eee4     02 EF 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3eee8     06 EF 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3eeec     00 00 00 00 
3eef0     00 00 00 00 
3eef4     00 00 00 00 
3eef8     00 00 00 00 
3eefc     00 00       | 	byte	$00[18]
3eefe     3F 3F 3F 00 
3ef02     55 43 54 00 
3ef06     55 43 54 00 
3ef0a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3ef0e     00 00 00 00 
3ef12     00 00 00    | 	byte	$00[7]
3ef15     CA 9A 3B 00 
3ef19     00 00 00 01 
3ef1d     01 01 01 01 
3ef21     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ef25     91 11 11 11 
3ef29     11 01 01 01 
3ef2d     01 01 01 01 
3ef31     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ef35     01 01 01 01 
3ef39     01 01 01    | 	byte	$01[7]
3ef3c     90 20 20 20 
3ef40     20 20 20 20 
3ef44     20 20 20 20 
3ef48     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3ef4c     42 42 42 42 
3ef50     42 42 42 42 
3ef54     42 42       | 	byte	$42[10]
3ef56     20 20 20 20 
3ef5a     20 20 20    | 	byte	$20[7]
3ef5d     44 44 44 44 
3ef61     44 44       | 	byte	$44[6]
3ef63     04 04 04 04 
3ef67     04 04 04 04 
3ef6b     04 04 04 04 
3ef6f     04 04 04 04 
3ef73     04 04 04 04 | 	byte	$04[20]
3ef77     20 20 20 20 
3ef7b     20 20       | 	byte	$20[6]
3ef7d     48 48 48 48 
3ef81     48 48       | 	byte	$48[6]
3ef83     08 08 08 08 
3ef87     08 08 08 08 
3ef8b     08 08 08 08 
3ef8f     08 08 08 08 
3ef93     08 08 08 08 | 	byte	$08[20]
3ef97     20 20 20 20 
3ef9b     01 00 00 00 
3ef9f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3efa0                 | __methodtable__
3efa0     58 5B 01 00 | 	long	@_do_no_command
3efa4     74 DC 01 00 | 	long	@_do_plus
3efa8     94 CC 01 00 | 	long	@_do_minus
3efac     5C DB 01 00 | 	long	@_do_or
3efb0     14 D3 01 00 | 	long	@_do_mul
3efb4     58 B7 01 00 | 	long	@_do_fdiv
3efb8     44 AF 01 00 | 	long	@_do_and
3efbc     5C B0 01 00 | 	long	@_do_div
3efc0     F4 D0 01 00 | 	long	@_do_mod
3efc4     28 E3 01 00 | 	long	@_do_shl
3efc8     40 E4 01 00 | 	long	@_do_shr
3efcc     60 E1 01 00 | 	long	@_do_power
3efd0     FC A4 01 00 | 	long	@_do_getvar
3efd4     04 78 01 00 | 	long	@_do_push
3efd8     F4 9E 01 00 | 	long	@_do_assign
3efdc     20 F4 00 00 | 	long	@_do_cls
3efe0     44 55 01 00 | 	long	@_do_new
3efe4     48 70 01 00 | 	long	@_do_plot
3efe8     20 16 01 00 | 	long	@_do_draw
3efec     B0 72 01 00 | 	long	@_do_print
3eff0     00 F2 00 00 | 	long	@_do_circle
3eff4     54 18 01 00 | 	long	@_do_fcircle
3eff8     F4 E0 00 00 | 	long	@_do_box
3effc     38 1D 01 00 | 	long	@_do_frame
3f000     60 F4 00 00 | 	long	@_do_color
3f004     C8 1A 01 00 | 	long	@_do_for
3f008     90 57 01 00 | 	long	@_do_next
3f00c     7C 43 01 00 | 	long	@_do_list
3f010     64 84 01 00 | 	long	@_do_run
3f014     7C 17 01 00 | 	long	@_do_error
3f018     84 29 01 00 | 	long	@_do_fast_goto
3f01c     74 2A 01 00 | 	long	@_do_find_goto
3f020     88 2C 01 00 | 	long	@_do_slow_goto
3f024     78 5B 01 00 | 	long	@_do_nothing
3f028     F8 D3 00 00 | 	long	@_test_csave
3f02c     50 88 01 00 | 	long	@_do_save
3f030     18 46 01 00 | 	long	@_do_load
3f034     84 63 01 00 | 	long	@_do_pinwrite
3f038     34 9C 01 00 | 	long	@_do_waitms
3f03c     68 9D 01 00 | 	long	@_do_waitvbl
3f040     7C 2F 01 00 | 	long	@_do_if
3f044     14 17 01 00 | 	long	@_do_else
3f048     7C B2 01 00 | 	long	@_do_eq
3f04c     20 B9 01 00 | 	long	@_do_ge
3f050     EC C2 01 00 | 	long	@_do_le
3f054     08 BE 01 00 | 	long	@_do_gt
3f058     C8 C7 01 00 | 	long	@_do_lt
3f05c     80 D6 01 00 | 	long	@_do_ne
3f060     CC 81 01 00 | 	long	@_do_rnd
3f064     DC E2 00 00 | 	long	@_do_brun
3f068     78 DC 00 00 | 	long	@_do_beep
3f06c     B0 0E 01 00 | 	long	@_do_dir
3f070     B8 5F 01 00 | 	long	@_do_paper
3f074     38 33 01 00 | 	long	@_do_ink
3f078     4C 1A 01 00 | 	long	@_do_font
3f07c     54 50 01 00 | 	long	@_do_mode
3f080     00 54 01 00 | 	long	@_do_mouse
3f084     04 28 01 00 | 	long	@_do_gettime
3f088     BC F5 00 00 | 	long	@_do_cursor
3f08c     78 F3 00 00 | 	long	@_do_click
3f090     BC 54 01 00 | 	long	@_do_mousex
3f094     00 55 01 00 | 	long	@_do_mousey
3f098     34 54 01 00 | 	long	@_do_mousek
3f09c     78 54 01 00 | 	long	@_do_mousew
3f0a0     9C 91 01 00 | 	long	@_do_sin
3f0a4     D4 94 01 00 | 	long	@_do_stick
3f0a8     64 96 01 00 | 	long	@_do_strig
3f0ac     F4 92 01 00 | 	long	@_do_sprite
3f0b0     D8 09 01 00 | 	long	@_do_defsprite
3f0b4     B0 26 01 00 | 	long	@_do_getpixel
3f0b8     10 9C 01 00 | 	long	@_do_waitclock
3f0bc     44 D0 01 00 | 	long	@_do_negative
3f0c0     88 7E 01 00 | 	long	@_do_rdpin
3f0c4     F0 83 01 00 | 	long	@_do_rqpin
3f0c8     B0 61 01 00 | 	long	@_do_pinread
3f0cc     74 9D 01 00 | 	long	@_do_wrpin
3f0d0     F4 9D 01 00 | 	long	@_do_wxpin
3f0d4     74 9E 01 00 | 	long	@_do_wypin
3f0d8     F0 60 01 00 | 	long	@_do_pinfloat
3f0dc     70 61 01 00 | 	long	@_do_pinlo
3f0e0     30 61 01 00 | 	long	@_do_pinhi
3f0e4     34 62 01 00 | 	long	@_do_pinstart
3f0e8     44 63 01 00 | 	long	@_do_pintoggle
3f0ec     28 72 01 00 | 	long	@_do_position
3f0f0     98 F4 00 00 | 	long	@_do_cos
3f0f4     F4 97 01 00 | 	long	@_do_tan
3f0f8     60 DB 00 00 | 	long	@_do_atn
3f0fc     50 DA 00 00 | 	long	@_do_asin
3f100     E0 D7 00 00 | 	long	@_do_acos
3f104     E0 93 01 00 | 	long	@_do_sqr
3f108     38 19 01 00 | 	long	@_do_fill
3f10c     EC 00 01 00 | 	long	@_do_defsnd
3f110     F0 F5 00 00 | 	long	@_do_defenv
3f114     60 7E 01 00 | 	long	@_do_rad
3f118     4C 0D 01 00 | 	long	@_do_deg
3f11c     B8 33 01 00 | 	long	@_do_int
3f120     0C 64 01 00 | 	long	@_do_play
3f124     F4 8B 01 00 | 	long	@_do_setdelay
3f128     9C 8C 01 00 | 	long	@_do_setenv
3f12c     44 8D 01 00 | 	long	@_do_setlen
3f130     EC 8D 01 00 | 	long	@_do_setpan
3f134     3C 8F 01 00 | 	long	@_do_setvol
3f138     E4 8F 01 00 | 	long	@_do_setwave
3f13c     94 8E 01 00 | 	long	@_do_setsustain
3f140     F8 7E 01 00 | 	long	@_do_release
3f144     9C 24 01 00 | 	long	@_do_getenvsustain
3f148     18 71 01 00 | 	long	@_do_poke
3f14c     48 15 01 00 | 	long	@_do_dpoke
3f150     F0 4C 01 00 | 	long	@_do_lpoke
3f154     40 60 01 00 | 	long	@_do_peek
3f158     9C 14 01 00 | 	long	@_do_dpeek
3f15c     44 4C 01 00 | 	long	@_do_lpeek
3f160     94 1E 01 00 | 	long	@_do_fre
3f164     AC 25 01 00 | 	long	@_do_getnotevalue
3f168     B4 AA 01 00 | 	long	@_do_getaddr
3f16c     60 30 01 00 | 	long	@_do_inkey
3f170     60 D7 00 00 | 	long	@_do_abs
3f174     18 2E 01 00 | 	long	@_do_hex
3f178     90 DF 00 00 | 	long	@_do_bin
3f17c     04 99 01 00 | 	long	@_do_val
3f180     00 F1 00 00 | 	long	@_do_chr
3f184     F0 D8 00 00 | 	long	@_do_asc
3f188     7C 40 01 00 | 	long	@_do_left
3f18c     40 80 01 00 | 	long	@_do_right
3f190     C8 4D 01 00 | 	long	@_do_mid
3f194     08 42 01 00 | 	long	@_do_len
3f198     6C 28 01 00 | 	long	@_do_gosub
3f19c     94 7F 01 00 | 	long	@_do_return
3f1a0     38 17 01 00 | 	long	@_do_end
3f1a4     F0 71 01 00 | 	long	@_do_pop
3f1a8     C8 4A 01 00 | 	long	@_do_log
3f1ac     F4 EE 00 00 | 	long	@_do_changevol
3f1b0     D4 EF 00 00 | 	long	@_do_changewav
3f1b4     E4 ED 00 00 | 	long	@_do_changepan
3f1b8     C8 EA 00 00 | 	long	@_do_changefreq
3f1bc     8C 90 01 00 | 	long	@_do_shutup
3f1c0     9C 83 01 00 | 	long	@_do_round
3f1c4     6C 17 01 00 | 	long	@_do_enter
3f1c8     A0 5C 01 00 | 	long	@_do_open
3f1cc     A4 F3 00 00 | 	long	@_do_close
3f1d0     F8 1E 01 00 | 	long	@_do_get
3f1d4     20 79 01 00 | 	long	@_do_put
3f1d8     14 E5 00 00 | 	long	@_do_cd
3f1dc     74 0D 01 00 | 	long	@_do_delete
3f1e0     94 4F 01 00 | 	long	@_do_mkdir
3f1e4     8C DD 00 00 | 	long	@_do_blit
3f1e8     60 1E 01 00 | 	long	@_do_framebuf
3f1ec     7C 5B 01 00 | 	long	@_do_on
3f1f0     AC 92 01 00 | 	long	@_do_skip
3f1f4     74 34 01 00 | 	long	@_do_input
3f1f8     F4 7E 01 00 | 	long	@_do_read
3f1fc     90 7F 01 00 | 	long	@_do_restore
3f200     AC 23 02 00 | 	long	@_hg010b_spin2_putchar
3f204     4C 39 03 00 | 	long	@__struct___bas_wrap_sender_tx
3f208     90 39 03 00 | 	long	@__struct___bas_wrap_sender_rx
3f20c     D8 39 03 00 | 	long	@__struct___bas_wrap_sender_close
3f210     7C 38 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3f214     EC 38 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3f218     34 38 03 00 | 	long	@___strs_cl_pfunc
3f21c     C8 95 02 00 | 	long	@__system____root_opendir
3f220     64 96 02 00 | 	long	@__system____root_closedir
3f224     E0 95 02 00 | 	long	@__system____root_readdir
3f228     6C 96 02 00 | 	long	@__system____root_stat
3f22c     B8 8E 02 00 | 	long	@__system____default_putc
3f230     3C 8E 02 00 | 	long	@__system____default_getc
3f234     60 8F 02 00 | 	long	@__system____default_flush
3f238     38 23 03 00 | 	long	@_fatfs_cc_v_close
3f23c     54 27 03 00 | 	long	@_fatfs_cc_v_read
3f240     68 28 03 00 | 	long	@_fatfs_cc_v_write
3f244     48 29 03 00 | 	long	@_fatfs_cc_v_lseek
3f248     D0 29 03 00 | 	long	@_fatfs_cc_v_ioctl
3f24c     24 2A 03 00 | 	long	@_fatfs_cc_v_open
3f250     9C 22 03 00 | 	long	@_fatfs_cc_v_creat
3f254     7C 23 03 00 | 	long	@_fatfs_cc_v_opendir
3f258     F0 23 03 00 | 	long	@_fatfs_cc_v_closedir
3f25c     30 24 03 00 | 	long	@_fatfs_cc_v_readdir
3f260     64 25 03 00 | 	long	@_fatfs_cc_v_stat
3f264     E4 29 03 00 | 	long	@_fatfs_cc_v_mkdir
3f268     04 2A 03 00 | 	long	@_fatfs_cc_v_rmdir
3f26c     F4 29 03 00 | 	long	@_fatfs_cc_v_remove
3f270     14 2A 03 00 | 	long	@_fatfs_cc_v_rename
3f274     34 2B 03 00 | 	long	@_fatfs_cc_v_init
3f278     3C 2B 03 00 | 	long	@_fatfs_cc_v_deinit
3f27c     0C 40 02 00 | 	long	@__system___tx
3f280     4C 40 02 00 | 	long	@__system___rx
3f284     D8 A1 02 00 | 	long	@__system___rxtxioctl_0741
3f288     30 A2 02 00 | 	long	@__system____dummy_flush_0742
3f28c     04 2B 03 00 | 	long	@_fatfs_cc_v_flush
3f290                 | __heap_base
3f290     00 00 00 00 
      ...             
56990     00 00 00 00 
56994     00 00 00 00 | 	long	0[24002]
56998                 | objmem
56998     00 00 00 00 
      ...             
60dc0     00 00 00 00 
60dc4     00 00 00 00 | 	long	0[10508]
60dc8                 | stackspace
60dc8     00 00 00 00 | 	long	0[1]
60dcc 100             | 	org	COG_BSS_START
60dcc 100             | _var01
60dcc 100             | 	res	1
60dcc 101             | _var02
60dcc 101             | 	res	1
60dcc 102             | _var03
60dcc 102             | 	res	1
60dcc 103             | _var04
60dcc 103             | 	res	1
60dcc 104             | _var05
60dcc 104             | 	res	1
60dcc 105             | _var06
60dcc 105             | 	res	1
60dcc 106             | _var07
60dcc 106             | 	res	1
60dcc 107             | _var08
60dcc 107             | 	res	1
60dcc 108             | _var09
60dcc 108             | 	res	1
60dcc 109             | arg01
60dcc 109             | 	res	1
60dcc 10a             | arg02
60dcc 10a             | 	res	1
60dcc 10b             | arg03
60dcc 10b             | 	res	1
60dcc 10c             | arg04
60dcc 10c             | 	res	1
60dcc 10d             | arg05
60dcc 10d             | 	res	1
60dcc 10e             | arg06
60dcc 10e             | 	res	1
60dcc 10f             | arg07
60dcc 10f             | 	res	1
60dcc 110             | arg08
60dcc 110             | 	res	1
60dcc 111             | arg09
60dcc 111             | 	res	1
60dcc 112             | arg10
60dcc 112             | 	res	1
60dcc 113             | local01
60dcc 113             | 	res	1
60dcc 114             | local02
60dcc 114             | 	res	1
60dcc 115             | local03
60dcc 115             | 	res	1
60dcc 116             | local04
60dcc 116             | 	res	1
60dcc 117             | local05
60dcc 117             | 	res	1
60dcc 118             | local06
60dcc 118             | 	res	1
60dcc 119             | local07
60dcc 119             | 	res	1
60dcc 11a             | local08
60dcc 11a             | 	res	1
60dcc 11b             | local09
60dcc 11b             | 	res	1
60dcc 11c             | local10
60dcc 11c             | 	res	1
60dcc 11d             | local11
60dcc 11d             | 	res	1
60dcc 11e             | local12
60dcc 11e             | 	res	1
60dcc 11f             | local13
60dcc 11f             | 	res	1
60dcc 120             | local14
60dcc 120             | 	res	1
60dcc 121             | local15
60dcc 121             | 	res	1
60dcc 122             | local16
60dcc 122             | 	res	1
60dcc 123             | local17
60dcc 123             | 	res	1
60dcc 124             | local18
60dcc 124             | 	res	1
60dcc 125             | local19
60dcc 125             | 	res	1
60dcc 126             | local20
60dcc 126             | 	res	1
60dcc 127             | local21
60dcc 127             | 	res	1
60dcc 128             | local22
60dcc 128             | 	res	1
60dcc 129             | local23
60dcc 129             | 	res	1
60dcc 12a             | local24
60dcc 12a             | 	res	1
60dcc 12b             | local25
60dcc 12b             | 	res	1
60dcc 12c             | local26
60dcc 12c             | 	res	1
60dcc 12d             | local27
60dcc 12d             | 	res	1
60dcc 12e             | local28
60dcc 12e             | 	res	1
60dcc 12f             | local29
60dcc 12f             | 	res	1
60dcc 130             | local30
60dcc 130             | 	res	1
60dcc 131             | local31
60dcc 131             | 	res	1
60dcc 132             | local32
60dcc 132             | 	res	1
60dcc 133             | local33
60dcc 133             | 	res	1
60dcc 134             | local34
60dcc 134             | 	res	1
60dcc 135             | local35
60dcc 135             | 	res	1
60dcc 136             | local36
60dcc 136             | 	res	1
60dcc 137             | local37
60dcc 137             | 	res	1
60dcc 138             | local38
60dcc 138             | 	res	1
60dcc 139             | local39
60dcc 139             | 	res	1
60dcc 13a             | local40
60dcc 13a             | 	res	1
60dcc 13b             | local41
60dcc 13b             | 	res	1
60dcc 13c             | local42
60dcc 13c             | 	res	1
60dcc 13d             | local43
60dcc 13d             | 	res	1
60dcc 13e             | local44
60dcc 13e             | 	res	1
60dcc 13f             | local45
60dcc 13f             | 	res	1
60dcc 140             | local46
60dcc 140             | 	res	1
60dcc 141             | local47
60dcc 141             | 	res	1
60dcc 142             | local48
60dcc 142             | 	res	1
60dcc 143             | local49
60dcc 143             | 	res	1
60dcc 144             | muldiva_
60dcc 144             | 	res	1
60dcc 145             | muldivb_
60dcc 145             | 	res	1
60dcc 146             | 	fit	480
60dcc 146             | 
