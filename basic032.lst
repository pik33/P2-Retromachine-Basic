00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 94 07 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 74 F0 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 8C ED 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 7C 67 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 6C E0 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 C4 DB 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 D0 48 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 AC E7 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 38 7A 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 E8 A1 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa A0 9F 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 78 B1 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc AC 0B 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     44 18 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     D8 2C B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     F0 E5 05 F1 | 	add	objptr, ##41968
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     F0 E5 85 F1 | 	sub	objptr, ##41968
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     D0 2F B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     24 37 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     1C 31 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     E0 2E B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     1C FD B1 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     F0 E5 05 F1 | 	add	objptr, ##41968
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     F0 E5 85 F1 | 	sub	objptr, ##41968
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     14 FB B1 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     B4 FA B1 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F8 E5 05 F1 | 	add	objptr, ##41976
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     BA E5 85 F1 | 	sub	objptr, ##41914
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     BC E5 05 F1 | 	add	objptr, ##41916
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     BA E5 85 F1 | 	sub	objptr, ##41914
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     44 FA B1 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     8C 12 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F8 E5 05 F1 | 	add	objptr, ##41976
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F8 E5 85 F1 | 	sub	objptr, ##41976
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     A8 15 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     0C 2C B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     60 33 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     5C 2D B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     9C 01 00 FF 
00ccc     B2 50 06 F6 | 	mov	local22, ##@LR__5257
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     D8 F8 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     3C 52 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     4C 30 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     F8 19 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     28 1C B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     98 2A B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     EC 31 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     E8 2B B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     74 F7 B1 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     68 11 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     5C 11 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     EC 10 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     B8 10 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     D8 10 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     C8 10 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     18 F6 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     C4 F5 B1 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     94 F5 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F8 E5 05 F1 | 	add	objptr, ##41976
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     BA E5 85 F1 | 	sub	objptr, ##41914
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     BC E5 05 F1 | 	add	objptr, ##41916
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     BA E5 85 F1 | 	sub	objptr, ##41914
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     2C F5 B1 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     74 0D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F8 E5 05 F1 | 	add	objptr, ##41976
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F8 E5 85 F1 | 	sub	objptr, ##41976
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     50 0E B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     14 F4 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     C0 F3 B1 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     90 F3 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F8 E5 05 F1 | 	add	objptr, ##41976
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     BA E5 85 F1 | 	sub	objptr, ##41914
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     BC E5 05 F1 | 	add	objptr, ##41916
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     BA E5 85 F1 | 	sub	objptr, ##41914
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     28 F3 B1 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     70 0B B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F8 E5 05 F1 | 	add	objptr, ##41976
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F8 E5 85 F1 | 	sub	objptr, ##41976
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     9C 01 00 FF 
01328     B3 50 06 F6 | 	mov	local22, ##@LR__5258
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     98 0C B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     38 0C B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     8C 0B B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     30 0B B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     7C F9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     6C F9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     A0 2A B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     78 2A B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     50 2A B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     A8 1F B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     F8 1F B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     E8 1F B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     4C 1F B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     B0 4A B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     E8 49 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     9C 01 00 FF 
01800     B4 16 06 F6 | 	mov	arg03, ##@LR__5259
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     D8 49 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     10 49 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     9C 01 00 FF 
01860     B5 2C 06 F6 | 	mov	local04, ##@LR__5260
01864     1A 00 00 FF 
01868     E0 E5 05 F1 | 	add	objptr, ##13792
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     E0 E5 85 F1 | 	sub	objptr, ##13792
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     00 E4 05 F1 | 	add	objptr, ##41984
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     00 E4 85 F1 | 	sub	objptr, ##41984
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     90 45 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     9C 01 00 FF 
01920     B6 14 06 F6 | 	mov	arg02, ##@LR__5261
01924     14 24 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     50 45 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     9C 01 00 FF 
01960     B8 14 06 F6 | 	mov	arg02, ##@LR__5262
01964     D4 23 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     E0 44 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     9C 01 00 FF 
019d0     BA 38 06 F6 | 	mov	local10, ##@LR__5263
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     60 23 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     00 E4 05 F1 | 	add	objptr, ##41984
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     00 E4 85 F1 | 	sub	objptr, ##41984
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     00 E4 05 F1 | 	add	objptr, ##41984
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     00 E4 85 F1 | 	sub	objptr, ##41984
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     7C 43 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     7C 47 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     B4 46 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     04 E4 05 F1 | 	add	objptr, ##41988
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E8 E5 85 F1 | 	sub	objptr, ##13800
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     B8 42 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     40 47 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     78 46 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     9C 01 00 FF 
01b04     BC 2C 06 F6 | 	mov	local04, ##@LR__5264
01b08     52 00 00 FF 
01b0c     04 E4 05 F1 | 	add	objptr, ##41988
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     04 E4 85 F1 | 	sub	objptr, ##41988
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     04 E4 05 F1 | 	add	objptr, ##41988
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     04 E4 85 F1 | 	sub	objptr, ##41988
01b50     9C 01 00 FF 
01b54     BD 30 06 F6 | 	mov	local06, ##@LR__5265
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     DC 21 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     04 E4 05 F1 | 	add	objptr, ##41988
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     04 E4 85 F1 | 	sub	objptr, ##41988
01bb0     9C 01 00 FF 
01bb4     BE 14 06 F6 | 	mov	arg02, ##@LR__5266
01bb8     80 21 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     04 E4 05 F1 | 	add	objptr, ##41988
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     04 E4 85 F1 | 	sub	objptr, ##41988
01c08     9C 01 00 FF 
01c0c     BF 14 06 F6 | 	mov	arg02, ##@LR__5267
01c10     28 21 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     04 E4 05 F1 | 	add	objptr, ##41988
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     04 E4 85 F1 | 	sub	objptr, ##41988
01c60     9C 01 00 FF 
01c64     C0 14 06 F6 | 	mov	arg02, ##@LR__5268
01c68     D0 20 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     EC 41 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     00 E4 05 F1 | 	add	objptr, ##41984
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     00 E4 85 F1 | 	sub	objptr, ##41984
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     0C E4 05 F1 | 	add	objptr, ##41996
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     0C E4 85 F1 | 	sub	objptr, ##41996
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     F0 E5 05 F1 | 	add	objptr, ##13808
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     0C E4 85 F1 | 	sub	objptr, ##41996
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     EC 40 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     9C 01 00 FF 
01dc4     C1 14 06 F6 | 	mov	arg02, ##@LR__5269
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     6C 1F B2 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     F0 E5 05 F1 | 	add	objptr, ##13808
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     0C E4 85 F1 | 	sub	objptr, ##41996
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     68 40 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     9C 01 00 FF 
01e48     C2 14 06 F6 | 	mov	arg02, ##@LR__5270
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     E8 1E B2 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     04 4B B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     9C 01 00 FF 
01f5c     C3 2C 06 F6 | 	mov	local04, ##@LR__5271
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     9C 01 00 FF 
01f90     C5 14 06 F6 | 	mov	arg02, ##@LR__5272
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     9C 1D B2 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     70 1D B2 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     9C 01 00 FF 
02098     C7 14 06 F6 | 	mov	arg02, ##@LR__5273
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     98 1C B2 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     9C 01 00 FF 
020b4     C9 14 06 F6 | 	mov	arg02, ##@LR__5274
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     7C 1C B2 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     14 3D B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     9C 01 00 FF 
0210c     CB 14 06 F6 | 	mov	arg02, ##@LR__5275
02110     28 1C B2 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     44 3C B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     9C 01 00 FF 
02154     CD 14 06 F6 | 	mov	arg02, ##@LR__5276
02158     E0 1B B2 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     2C 3C B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     74 1B B2 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     9C 01 00 FF 
022d8     CF 14 06 F6 | 	mov	arg02, ##@LR__5277
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     50 1A B2 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     9C 01 00 FF 
022f8     D1 14 06 F6 | 	mov	arg02, ##@LR__5278
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     38 1A B2 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     9C 01 00 FF 
02310     D3 30 06 F6 | 	mov	local06, ##@LR__5279
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     1C 1A B2 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     9C 01 00 FF 
0232c     D5 3C 06 F6 | 	mov	local12, ##@LR__5280
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     00 1A B2 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     9C 01 00 FF 
02348     D7 3A 06 F6 | 	mov	local11, ##@LR__5281
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     E0 19 B2 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     9C 01 00 FF 
02368     D9 3A 06 F6 | 	mov	local11, ##@LR__5282
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     C4 19 B2 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     9C 01 00 FF 
02384     DB 40 06 F6 | 	mov	local14, ##@LR__5283
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     A8 19 B2 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     9C 01 00 FF 
023a0     DD 5C 06 F6 | 	mov	local28, ##@LR__5284
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     88 19 B2 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     9C 01 00 FF 
023c0     DF 5C 06 F6 | 	mov	local28, ##@LR__5285
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     6C 19 B2 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     9C 01 00 FF 
023dc     E1 52 06 F6 | 	mov	local23, ##@LR__5286
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     4C 19 B2 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     9C 01 00 FF 
023fc     E3 52 06 F6 | 	mov	local23, ##@LR__5287
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     30 19 B2 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     9C 01 00 FF 
02418     E5 5E 06 F6 | 	mov	local29, ##@LR__5288
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     10 19 B2 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     9C 01 00 FF 
02438     E7 60 06 F6 | 	mov	local30, ##@LR__5289
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     F0 18 B2 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     9C 01 00 FF 
02458     E9 62 06 F6 | 	mov	local31, ##@LR__5290
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     D0 18 B2 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     D0 18 B2 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     80 3C B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     B8 3B B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     8C 36 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     9C 01 00 FF 
0270c     EB 14 06 F6 | 	mov	arg02, ##@LR__5291
02710     28 16 B2 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     D0 36 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     9C 01 00 FF 
02750     ED 14 06 F6 | 	mov	arg02, ##@LR__5292
02754     E4 15 B2 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     08 39 B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     D4 41 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     9C 01 00 FF 
02828     EF 14 06 F6 | 	mov	arg02, ##@LR__5293
0282c     0C 15 B2 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     9C 01 00 FF 
02858     F4 14 06 F6 | 	mov	arg02, ##@LR__5294
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     D4 14 B2 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     9C 01 00 FF 
028a8     F9 16 06 F6 | 	mov	arg03, ##@LR__5295
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     1C 3A B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     30 34 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     64 33 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     38 33 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     9C 01 00 FF 
02a60     FB 14 06 F6 | 	mov	arg02, ##@LR__5296
02a64     D4 12 B2 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     74 32 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     9C 01 00 FF 
02bc0     FD 30 06 F6 | 	mov	local06, ##@LR__5297
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     9C 01 00 FF 
02bec     FF 14 06 F6 | 	mov	arg02, ##@LR__5298
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     3C 11 B2 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     9C 01 00 FF 
02c0c     05 15 06 F6 | 	mov	arg02, ##@LR__5299
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     24 11 B2 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     9C 01 00 FF 
02c24     0C 15 06 F6 | 	mov	arg02, ##@LR__5300
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     0C 11 B2 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     9C 01 00 FF 
02c58     12 15 06 F6 | 	mov	arg02, ##@LR__5301
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     D4 10 B2 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     9C 01 00 FF 
02c8c     15 31 06 F6 | 	mov	local06, ##@LR__5302
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     9C 01 00 FF 
02cc8     17 15 06 F6 | 	mov	arg02, ##@LR__5303
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     64 10 B2 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     9C 01 00 FF 
02cfc     1B 31 06 F6 | 	mov	local06, ##@LR__5304
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     9C 01 00 FF 
02d1c     1D 15 06 F6 | 	mov	arg02, ##@LR__5305
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     14 10 B2 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     9C 01 00 FF 
02d34     22 15 06 F6 | 	mov	arg02, ##@LR__5306
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     FC 0F B2 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     9C 01 00 FF 
02d68     25 15 06 F6 | 	mov	arg02, ##@LR__5307
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     C4 0F B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     9C 01 00 FF 
02d9c     2B 31 06 F6 | 	mov	local06, ##@LR__5308
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     9C 01 00 FF 
02dcc     2D 15 06 F6 | 	mov	arg02, ##@LR__5309
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     60 0F B2 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     9C 01 00 FF 
02e00     36 31 06 F6 | 	mov	local06, ##@LR__5310
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     9C 01 00 FF 
02e30     38 15 06 F6 | 	mov	arg02, ##@LR__5311
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     FC 0E B2 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     9C 01 00 FF 
02e64     41 31 06 F6 | 	mov	local06, ##@LR__5312
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     9C 01 00 FF 
02e94     43 15 06 F6 | 	mov	arg02, ##@LR__5313
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     98 0E B2 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     9C 01 00 FF 
02ec8     4C 31 06 F6 | 	mov	local06, ##@LR__5314
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     9C 01 00 FF 
02ef8     4E 15 06 F6 | 	mov	arg02, ##@LR__5315
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     34 0E B2 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     9C 01 00 FF 
02f2c     51 31 06 F6 | 	mov	local06, ##@LR__5316
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     9D 01 00 FF 
03064     44 14 06 F6 | 	mov	arg02, ##@LR__5401
03068     D0 0C B2 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     98 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     D0 38 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     34 2D B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     E8 2A B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     68 33 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     5C 2B B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     C0 2E B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     84 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     00 35 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     C0 34 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     28 28 B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     24 2A B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     9C 01 00 FF 
0371c     53 31 06 F6 | 	mov	local06, ##@LR__5317
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     9C 01 00 FF 
0373c     54 15 06 F6 | 	mov	arg02, ##@LR__5318
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     F4 05 B2 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     9C 01 00 FF 
03754     59 15 06 F6 | 	mov	arg02, ##@LR__5319
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     DC 05 B2 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     9C 01 00 FF 
0376c     5E 31 06 F6 | 	mov	local06, ##@LR__5320
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     C0 05 B2 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     9C 01 00 FF 
03788     63 3D 06 F6 | 	mov	local12, ##@LR__5321
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     A0 05 B2 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     9C 01 00 FF 
037a8     67 3B 06 F6 | 	mov	local11, ##@LR__5322
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     80 05 B2 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     9C 01 00 FF 
037c8     6B 41 06 F6 | 	mov	local14, ##@LR__5323
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     60 05 B2 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     9C 01 00 FF 
037e8     6E 3F 06 F6 | 	mov	local13, ##@LR__5324
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     40 05 B2 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     9C 01 00 FF 
03808     72 3F 06 F6 | 	mov	local13, ##@LR__5325
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     24 05 B2 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     9C 01 00 FF 
03824     78 51 06 F6 | 	mov	local22, ##@LR__5326
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     04 05 B2 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     9C 01 00 FF 
038c0     7B 15 06 F6 | 	mov	arg02, ##@LR__5327
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     70 04 B2 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     9C 01 00 FF 
038d8     82 2F 06 F6 | 	mov	local05, ##@LR__5328
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     54 04 B2 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     9C 01 00 FF 
03970     88 15 06 F6 | 	mov	arg02, ##@LR__5329
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     C0 03 B2 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     9C 01 00 FF 
039c0     8B 15 06 F6 | 	mov	arg02, ##@LR__5330
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     70 03 B2 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     9C 01 00 FF 
039f8     8F 2F 06 F6 | 	mov	local05, ##@LR__5331
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     30 03 B2 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     9C 01 00 FF 
03a4c     91 31 06 F6 | 	mov	local06, ##@LR__5332
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     9C 01 00 FF 
03a7c     94 39 06 F6 | 	mov	local10, ##@LR__5333
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     B0 02 B2 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     9C 01 00 FF 
03ab8     97 2F 06 F6 | 	mov	local05, ##@LR__5334
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     6C 02 B2 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     E8 01 B2 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     28 2E B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     30 36 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     44 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     F0 42 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     A0 C6 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     04 E4 05 F1 | 	add	objptr, ##41988
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     04 E4 85 F1 | 	sub	objptr, ##41988
03cfc     9C 01 00 FF 
03d00     99 15 06 F6 | 	mov	arg02, ##@LR__5335
03d04     34 00 B2 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     04 E4 05 F1 | 	add	objptr, ##41988
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E8 E5 85 F1 | 	sub	objptr, ##13800
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     FC 41 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     AC C5 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     04 E4 05 F1 | 	add	objptr, ##41988
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     04 E4 85 F1 | 	sub	objptr, ##41988
03df0     9C 01 00 FF 
03df4     9A 15 06 F6 | 	mov	arg02, ##@LR__5336
03df8     40 FF B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     04 E4 05 F1 | 	add	objptr, ##41988
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E8 E5 85 F1 | 	sub	objptr, ##13800
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     D8 41 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     C0 C4 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     04 E4 05 F1 | 	add	objptr, ##41988
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     04 E4 85 F1 | 	sub	objptr, ##41988
03edc     9C 01 00 FF 
03ee0     9B 15 06 F6 | 	mov	arg02, ##@LR__5337
03ee4     54 FE B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     04 E4 05 F1 | 	add	objptr, ##41988
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E8 E5 85 F1 | 	sub	objptr, ##13800
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     E8 40 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     D0 C3 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     04 E4 05 F1 | 	add	objptr, ##41988
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     04 E4 85 F1 | 	sub	objptr, ##41988
03fcc     9C 01 00 FF 
03fd0     9C 15 06 F6 | 	mov	arg02, ##@LR__5338
03fd4     64 FD B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     04 E4 05 F1 | 	add	objptr, ##41988
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E8 E5 85 F1 | 	sub	objptr, ##13800
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     E8 88 B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     9C 01 00 FF 
04048     9D 13 06 F6 | 	mov	arg01, ##@LR__5339
0404c                 | ' 
0404c                 | ' write(text)
0404c     48 E4 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     44 E9 B1 FD | 	call	#_hg010b_spin2_crlf
04054     9C 01 00 FF 
04058     9E 13 06 F6 | 	mov	arg01, ##@LR__5340
0405c                 | ' 
0405c                 | ' write(text)
0405c     38 E4 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     34 E9 B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     AC 59 B2 FD | 	call	#__system___getiolock_0573
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     7C FC B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     50 09 B2 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     E8 08 B2 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     6C 59 B2 FD | 	call	#__system___getiolock_0573
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     9C 01 00 FF 
040f0     A4 15 06 F6 | 	mov	arg02, ##@LR__5341
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     40 FC B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     9C 01 00 FF 
04108     A6 15 06 F6 | 	mov	arg02, ##@LR__5342
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     28 FC B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     9C 01 00 FF 
04120     A8 15 06 F6 | 	mov	arg02, ##@LR__5343
04124     13 13 02 F6 | 	mov	arg01, local01
04128     10 FC B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     9C 01 00 FF 
04138     AB 15 06 F6 | 	mov	arg02, ##@LR__5344
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     F8 FB B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     9C 01 00 FF 
04150     AF 15 06 F6 | 	mov	arg02, ##@LR__5345
04154     13 13 02 F6 | 	mov	arg01, local01
04158     E0 FB B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     9C 01 00 FF 
04168     B1 15 06 F6 | 	mov	arg02, ##@LR__5346
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     C8 FB B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     9C 01 00 FF 
04180     B3 15 06 F6 | 	mov	arg02, ##@LR__5347
04184     13 13 02 F6 | 	mov	arg01, local01
04188     B0 FB B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     9C 01 00 FF 
04198     B7 15 06 F6 | 	mov	arg02, ##@LR__5348
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     98 FB B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     9C 01 00 FF 
041b0     BB 15 06 F6 | 	mov	arg02, ##@LR__5349
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     80 FB B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     9C 01 00 FF 
041c8     BF 15 06 F6 | 	mov	arg02, ##@LR__5350
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     68 FB B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     9C 01 00 FF 
041e0     C3 15 06 F6 | 	mov	arg02, ##@LR__5351
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     50 FB B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     9C 01 00 FF 
041f8     C7 15 06 F6 | 	mov	arg02, ##@LR__5352
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     38 FB B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     9C 01 00 FF 
04210     C9 15 06 F6 | 	mov	arg02, ##@LR__5353
04214     13 13 02 F6 | 	mov	arg01, local01
04218     20 FB B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     9C 01 00 FF 
04228     CD 15 06 F6 | 	mov	arg02, ##@LR__5354
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     08 FB B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     9C 01 00 FF 
04240     CF 15 06 F6 | 	mov	arg02, ##@LR__5355
04244     13 13 02 F6 | 	mov	arg01, local01
04248     F0 FA B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     9C 01 00 FF 
04258     D1 15 06 F6 | 	mov	arg02, ##@LR__5356
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     D8 FA B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     9C 01 00 FF 
04270     D4 15 06 F6 | 	mov	arg02, ##@LR__5357
04274     13 13 02 F6 | 	mov	arg01, local01
04278     C0 FA B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     9C 01 00 FF 
04288     D7 15 06 F6 | 	mov	arg02, ##@LR__5358
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     A8 FA B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     9C 01 00 FF 
042a0     D9 15 06 F6 | 	mov	arg02, ##@LR__5359
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     90 FA B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     9C 01 00 FF 
042b8     DB 15 06 F6 | 	mov	arg02, ##@LR__5360
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     78 FA B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     9C 01 00 FF 
042d0     DE 15 06 F6 | 	mov	arg02, ##@LR__5361
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     60 FA B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     9C 01 00 FF 
042e8     E1 15 06 F6 | 	mov	arg02, ##@LR__5362
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     48 FA B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     BC 19 B2 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     9C 01 00 FF 
043dc     E4 15 06 F6 | 	mov	arg02, ##@LR__5363
043e0     58 F9 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     F0 19 B2 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     9C 01 00 FF 
04430     E6 15 06 F6 | 	mov	arg02, ##@LR__5364
04434     04 F9 B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     CC 19 B2 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     9C 01 00 FF 
04454     E8 15 06 F6 | 	mov	arg02, ##@LR__5365
04458     E0 F8 B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     A0 19 B2 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     18 2F B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     2C 23 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     B8 2B B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     9C 01 00 FF 
044b8     EA 15 06 F6 | 	mov	arg02, ##@LR__5366
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     78 F8 B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     9C 01 00 FF 
044d0     F0 15 06 F6 | 	mov	arg02, ##@LR__5367
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     60 F8 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     9C 01 00 FF 
044e8     F7 15 06 F6 | 	mov	arg02, ##@LR__5368
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     48 F8 B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     54 18 B2 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     9C 01 00 FF 
04544     FF 15 06 F6 | 	mov	arg02, ##@LR__5369
04548     F0 F7 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     40 19 B2 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     9D 01 00 FF 
04570     01 14 06 F6 | 	mov	arg02, ##@LR__5370
04574     C4 F7 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     18 19 B2 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     00 19 B2 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     CC 18 B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     9D 01 00 FF 
045e4     03 14 06 F6 | 	mov	arg02, ##@LR__5371
045e8     50 F7 B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     18 18 B2 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     90 2D B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     40 2A B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     F0 17 B2 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     68 2D B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     4C 25 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     08 2A B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     B4 17 B2 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     9D 01 00 FF 
0466c     05 14 06 F6 | 	mov	arg02, ##@LR__5372
04670     C8 F6 B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     9D 01 00 FF 
04684     07 14 06 F6 | 	mov	arg02, ##@LR__5373
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     AC F6 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     9D 01 00 FF 
0469c     09 14 06 F6 | 	mov	arg02, ##@LR__5374
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     94 F6 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     9D 01 00 FF 
046b4     0C 14 06 F6 | 	mov	arg02, ##@LR__5375
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     7C F6 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     9D 01 00 FF 
046cc     0E 14 06 F6 | 	mov	arg02, ##@LR__5376
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     64 F6 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     9D 01 00 FF 
046e4     11 14 06 F6 | 	mov	arg02, ##@LR__5377
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     4C F6 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     9D 01 00 FF 
046fc     13 14 06 F6 | 	mov	arg02, ##@LR__5378
04700     17 13 02 F6 | 	mov	arg01, local05
04704     34 F6 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     9D 01 00 FF 
04714     15 14 06 F6 | 	mov	arg02, ##@LR__5379
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     1C F6 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     9D 01 00 FF 
0472c     18 14 06 F6 | 	mov	arg02, ##@LR__5380
04730     17 13 02 F6 | 	mov	arg01, local05
04734     04 F6 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     9D 01 00 FF 
04744     1A 14 06 F6 | 	mov	arg02, ##@LR__5381
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     EC F5 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     9D 01 00 FF 
0475c     1D 14 06 F6 | 	mov	arg02, ##@LR__5382
04760     17 13 02 F6 | 	mov	arg01, local05
04764     D4 F5 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     9D 01 00 FF 
04774     1F 14 06 F6 | 	mov	arg02, ##@LR__5383
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     BC F5 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     9D 01 00 FF 
0478c     22 14 06 F6 | 	mov	arg02, ##@LR__5384
04790     17 13 02 F6 | 	mov	arg01, local05
04794     A4 F5 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     9D 01 00 FF 
047a4     24 14 06 F6 | 	mov	arg02, ##@LR__5385
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     8C F5 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     9D 01 00 FF 
048a4     26 14 06 F6 | 	mov	arg02, ##@LR__5386
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     8C F4 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     9D 01 00 FF 
048bc     28 14 06 F6 | 	mov	arg02, ##@LR__5387
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     74 F4 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     9D 01 00 FF 
048d4     2A 14 06 F6 | 	mov	arg02, ##@LR__5388
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     5C F4 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     9D 01 00 FF 
048ec     2C 14 06 F6 | 	mov	arg02, ##@LR__5389
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     44 F4 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     9D 01 00 FF 
04904     2E 14 06 F6 | 	mov	arg02, ##@LR__5390
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     2C F4 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     9D 01 00 FF 
0491c     30 14 06 F6 | 	mov	arg02, ##@LR__5391
04920     13 13 02 F6 | 	mov	arg01, local01
04924     14 F4 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     9D 01 00 FF 
04934     32 14 06 F6 | 	mov	arg02, ##@LR__5392
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     FC F3 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     9D 01 00 FF 
0494c     34 14 06 F6 | 	mov	arg02, ##@LR__5393
04950     13 13 02 F6 | 	mov	arg01, local01
04954     E4 F3 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     9D 01 00 FF 
04964     36 14 06 F6 | 	mov	arg02, ##@LR__5394
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     CC F3 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     9D 01 00 FF 
0497c     38 14 06 F6 | 	mov	arg02, ##@LR__5395
04980     13 13 02 F6 | 	mov	arg01, local01
04984     B4 F3 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     9D 01 00 FF 
04994     3A 14 06 F6 | 	mov	arg02, ##@LR__5396
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     9C F3 B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     9D 01 00 FF 
049ac     3C 14 06 F6 | 	mov	arg02, ##@LR__5397
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     84 F3 B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     9D 01 00 FF 
049c4     3E 14 06 F6 | 	mov	arg02, ##@LR__5398
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     6C F3 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     9D 01 00 FF 
049dc     40 14 06 F6 | 	mov	arg02, ##@LR__5399
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     54 F3 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     9D 01 00 FF 
049f4     42 14 06 F6 | 	mov	arg02, ##@LR__5400
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     3C F3 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     9D 01 00 FF 
04aa4     46 14 06 F6 | 	mov	arg02, ##@LR__5402
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     8C F2 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     1C 0C 90 AD |  if_e	jmp	#LR__0310
04ab8     9D 01 00 FF 
04abc     4B 14 06 F6 | 	mov	arg02, ##@LR__5403
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     74 F2 B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     0C 0C 90 AD |  if_e	jmp	#LR__0311
04ad0     9D 01 00 FF 
04ad4     4E 14 06 F6 | 	mov	arg02, ##@LR__5404
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     5C F2 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     FC 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     9D 01 00 FF 
04aec     53 14 06 F6 | 	mov	arg02, ##@LR__5405
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     44 F2 B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     EC 0B 90 AD |  if_e	jmp	#LR__0313
04b00     9D 01 00 FF 
04b04     57 14 06 F6 | 	mov	arg02, ##@LR__5406
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     2C F2 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     DC 0B 90 AD |  if_e	jmp	#LR__0314
04b18     9D 01 00 FF 
04b1c     5C 14 06 F6 | 	mov	arg02, ##@LR__5407
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     14 F2 B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     CC 0B 90 AD |  if_e	jmp	#LR__0315
04b30     9D 01 00 FF 
04b34     60 14 06 F6 | 	mov	arg02, ##@LR__5408
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     FC F1 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     BC 0B 90 AD |  if_e	jmp	#LR__0316
04b48     9D 01 00 FF 
04b4c     63 14 06 F6 | 	mov	arg02, ##@LR__5409
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     E4 F1 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     AC 0B 90 AD |  if_e	jmp	#LR__0317
04b60     9D 01 00 FF 
04b64     6E 14 06 F6 | 	mov	arg02, ##@LR__5410
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     CC F1 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     9C 0B 90 AD |  if_e	jmp	#LR__0318
04b78     9D 01 00 FF 
04b7c     72 14 06 F6 | 	mov	arg02, ##@LR__5411
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     B4 F1 B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     8C 0B 90 AD |  if_e	jmp	#LR__0319
04b90     9D 01 00 FF 
04b94     7C 14 06 F6 | 	mov	arg02, ##@LR__5412
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     9C F1 B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     7C 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     9D 01 00 FF 
04bac     80 14 06 F6 | 	mov	arg02, ##@LR__5413
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     84 F1 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     6C 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     9D 01 00 FF 
04bc4     8A 14 06 F6 | 	mov	arg02, ##@LR__5414
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     6C F1 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     5C 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     9D 01 00 FF 
04bdc     8E 14 06 F6 | 	mov	arg02, ##@LR__5415
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     54 F1 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     4C 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     9D 01 00 FF 
04bf4     99 14 06 F6 | 	mov	arg02, ##@LR__5416
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     3C F1 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     3C 0B 90 AD |  if_e	jmp	#LR__0324
04c08     9D 01 00 FF 
04c0c     9D 14 06 F6 | 	mov	arg02, ##@LR__5417
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     24 F1 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     2C 0B 90 AD |  if_e	jmp	#LR__0325
04c20     9D 01 00 FF 
04c24     A4 14 06 F6 | 	mov	arg02, ##@LR__5418
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     0C F1 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     1C 0B 90 AD |  if_e	jmp	#LR__0326
04c38     9D 01 00 FF 
04c3c     A8 14 06 F6 | 	mov	arg02, ##@LR__5419
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     F4 F0 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     0C 0B 90 AD |  if_e	jmp	#LR__0327
04c50     9D 01 00 FF 
04c54     AE 14 06 F6 | 	mov	arg02, ##@LR__5420
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     DC F0 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     FC 0A 90 AD |  if_e	jmp	#LR__0328
04c68     9D 01 00 FF 
04c6c     B4 14 06 F6 | 	mov	arg02, ##@LR__5421
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     C4 F0 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     EC 0A 90 AD |  if_e	jmp	#LR__0329
04c80     9D 01 00 FF 
04c84     B8 14 06 F6 | 	mov	arg02, ##@LR__5422
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     AC F0 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     DC 0A 90 AD |  if_e	jmp	#LR__0330
04c98     9D 01 00 FF 
04c9c     BE 14 06 F6 | 	mov	arg02, ##@LR__5423
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     94 F0 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     CC 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     9D 01 00 FF 
04cb4     C1 14 06 F6 | 	mov	arg02, ##@LR__5424
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     7C F0 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     BC 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     9D 01 00 FF 
04ccc     C7 14 06 F6 | 	mov	arg02, ##@LR__5425
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     64 F0 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     AC 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     9D 01 00 FF 
04ce4     CB 14 06 F6 | 	mov	arg02, ##@LR__5426
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     4C F0 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     9C 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     9D 01 00 FF 
04cfc     D2 14 06 F6 | 	mov	arg02, ##@LR__5427
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     34 F0 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     8C 0A 90 AD |  if_e	jmp	#LR__0335
04d10     9D 01 00 FF 
04d14     D9 14 06 F6 | 	mov	arg02, ##@LR__5428
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     1C F0 B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     7C 0A 90 AD |  if_e	jmp	#LR__0336
04d28     9D 01 00 FF 
04d2c     E0 14 06 F6 | 	mov	arg02, ##@LR__5429
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     04 F0 B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     6C 0A 90 AD |  if_e	jmp	#LR__0337
04d40     9D 01 00 FF 
04d44     EA 14 06 F6 | 	mov	arg02, ##@LR__5430
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     EC EF B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     5C 0A 90 AD |  if_e	jmp	#LR__0338
04d58     9D 01 00 FF 
04d5c     EE 14 06 F6 | 	mov	arg02, ##@LR__5431
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     D4 EF B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     4C 0A 90 AD |  if_e	jmp	#LR__0339
04d70     9D 01 00 FF 
04d74     F2 14 06 F6 | 	mov	arg02, ##@LR__5432
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     BC EF B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     3C 0A 90 AD |  if_e	jmp	#LR__0340
04d88     9D 01 00 FF 
04d8c     F9 14 06 F6 | 	mov	arg02, ##@LR__5433
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     A4 EF B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     2C 0A 90 AD |  if_e	jmp	#LR__0341
04da0     9D 01 00 FF 
04da4     FD 14 06 F6 | 	mov	arg02, ##@LR__5434
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     8C EF B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     1C 0A 90 AD |  if_e	jmp	#LR__0342
04db8     9D 01 00 FF 
04dbc     01 15 06 F6 | 	mov	arg02, ##@LR__5435
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     74 EF B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     0C 0A 90 AD |  if_e	jmp	#LR__0343
04dd0     9D 01 00 FF 
04dd4     07 15 06 F6 | 	mov	arg02, ##@LR__5436
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     5C EF B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     FC 09 90 AD |  if_e	jmp	#LR__0344
04de8     9D 01 00 FF 
04dec     0C 15 06 F6 | 	mov	arg02, ##@LR__5437
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     44 EF B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     EC 09 90 AD |  if_e	jmp	#LR__0345
04e00     9D 01 00 FF 
04e04     13 15 06 F6 | 	mov	arg02, ##@LR__5438
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     2C EF B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     DC 09 90 AD |  if_e	jmp	#LR__0346
04e18     9D 01 00 FF 
04e1c     17 15 06 F6 | 	mov	arg02, ##@LR__5439
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     14 EF B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     CC 09 90 AD |  if_e	jmp	#LR__0347
04e30     9D 01 00 FF 
04e34     1C 15 06 F6 | 	mov	arg02, ##@LR__5440
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     FC EE B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     BC 09 90 AD |  if_e	jmp	#LR__0348
04e48     9D 01 00 FF 
04e4c     20 15 06 F6 | 	mov	arg02, ##@LR__5441
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     E4 EE B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     AC 09 90 AD |  if_e	jmp	#LR__0349
04e60     9D 01 00 FF 
04e64     26 15 06 F6 | 	mov	arg02, ##@LR__5442
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     CC EE B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     9C 09 90 AD |  if_e	jmp	#LR__0350
04e78     9D 01 00 FF 
04e7c     29 15 06 F6 | 	mov	arg02, ##@LR__5443
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     B4 EE B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     8C 09 90 AD |  if_e	jmp	#LR__0351
04e90     9D 01 00 FF 
04e94     31 15 06 F6 | 	mov	arg02, ##@LR__5444
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     9C EE B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     7C 09 90 AD |  if_e	jmp	#LR__0352
04ea8     9D 01 00 FF 
04eac     35 15 06 F6 | 	mov	arg02, ##@LR__5445
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     84 EE B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     6C 09 90 AD |  if_e	jmp	#LR__0353
04ec0     9D 01 00 FF 
04ec4     3A 15 06 F6 | 	mov	arg02, ##@LR__5446
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     6C EE B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     5C 09 90 AD |  if_e	jmp	#LR__0354
04ed8     9D 01 00 FF 
04edc     3E 15 06 F6 | 	mov	arg02, ##@LR__5447
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     54 EE B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     4C 09 90 AD |  if_e	jmp	#LR__0355
04ef0     9D 01 00 FF 
04ef4     43 15 06 F6 | 	mov	arg02, ##@LR__5448
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     3C EE B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     3C 09 90 AD |  if_e	jmp	#LR__0356
04f08     9D 01 00 FF 
04f0c     47 15 06 F6 | 	mov	arg02, ##@LR__5449
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     24 EE B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     2C 09 90 AD |  if_e	jmp	#LR__0357
04f20     9D 01 00 FF 
04f24     4A 15 06 F6 | 	mov	arg02, ##@LR__5450
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     0C EE B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     1C 09 90 AD |  if_e	jmp	#LR__0358
04f38     9D 01 00 FF 
04f3c     50 15 06 F6 | 	mov	arg02, ##@LR__5451
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     F4 ED B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     0C 09 90 AD |  if_e	jmp	#LR__0359
04f50     9D 01 00 FF 
04f54     54 15 06 F6 | 	mov	arg02, ##@LR__5452
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     DC ED B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     FC 08 90 AD |  if_e	jmp	#LR__0360
04f68     9D 01 00 FF 
04f6c     58 15 06 F6 | 	mov	arg02, ##@LR__5453
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     C4 ED B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     EC 08 90 AD |  if_e	jmp	#LR__0361
04f80     9D 01 00 FF 
04f84     5E 15 06 F6 | 	mov	arg02, ##@LR__5454
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     AC ED B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     DC 08 90 AD |  if_e	jmp	#LR__0362
04f98     9D 01 00 FF 
04f9c     63 15 06 F6 | 	mov	arg02, ##@LR__5455
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     94 ED B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     CC 08 90 AD |  if_e	jmp	#LR__0363
04fb0     9D 01 00 FF 
04fb4     66 15 06 F6 | 	mov	arg02, ##@LR__5456
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     7C ED B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     BC 08 90 AD |  if_e	jmp	#LR__0364
04fc8     9D 01 00 FF 
04fcc     69 15 06 F6 | 	mov	arg02, ##@LR__5457
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     64 ED B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     AC 08 90 AD |  if_e	jmp	#LR__0365
04fe0     9D 01 00 FF 
04fe4     6D 15 06 F6 | 	mov	arg02, ##@LR__5458
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     4C ED B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     9C 08 90 AD |  if_e	jmp	#LR__0366
04ff8     9D 01 00 FF 
04ffc     70 15 06 F6 | 	mov	arg02, ##@LR__5459
05000     13 13 02 F6 | 	mov	arg01, local01
05004     34 ED B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     8C 08 90 AD |  if_e	jmp	#LR__0367
05010     9D 01 00 FF 
05014     76 15 06 F6 | 	mov	arg02, ##@LR__5460
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     1C ED B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     7C 08 90 AD |  if_e	jmp	#LR__0368
05028     9D 01 00 FF 
0502c     7B 15 06 F6 | 	mov	arg02, ##@LR__5461
05030     13 13 02 F6 | 	mov	arg01, local01
05034     04 ED B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     6C 08 90 AD |  if_e	jmp	#LR__0369
05040     9D 01 00 FF 
05044     7E 15 06 F6 | 	mov	arg02, ##@LR__5462
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     EC EC B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     5C 08 90 AD |  if_e	jmp	#LR__0370
05058     9D 01 00 FF 
0505c     83 15 06 F6 | 	mov	arg02, ##@LR__5463
05060     13 13 02 F6 | 	mov	arg01, local01
05064     D4 EC B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     4C 08 90 AD |  if_e	jmp	#LR__0371
05070     9D 01 00 FF 
05074     87 15 06 F6 | 	mov	arg02, ##@LR__5464
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     BC EC B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     3C 08 90 AD |  if_e	jmp	#LR__0372
05088     9D 01 00 FF 
0508c     8D 15 06 F6 | 	mov	arg02, ##@LR__5465
05090     13 13 02 F6 | 	mov	arg01, local01
05094     A4 EC B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     2C 08 90 AD |  if_e	jmp	#LR__0373
050a0     9D 01 00 FF 
050a4     93 15 06 F6 | 	mov	arg02, ##@LR__5466
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     8C EC B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     1C 08 90 AD |  if_e	jmp	#LR__0374
050b8     9D 01 00 FF 
050bc     98 15 06 F6 | 	mov	arg02, ##@LR__5467
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     74 EC B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     0C 08 90 AD |  if_e	jmp	#LR__0375
050d0     9D 01 00 FF 
050d4     9B 15 06 F6 | 	mov	arg02, ##@LR__5468
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     5C EC B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     FC 07 90 AD |  if_e	jmp	#LR__0376
050e8     9D 01 00 FF 
050ec     A1 15 06 F6 | 	mov	arg02, ##@LR__5469
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     44 EC B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     EC 07 90 AD |  if_e	jmp	#LR__0377
05100     9D 01 00 FF 
05104     A5 15 06 F6 | 	mov	arg02, ##@LR__5470
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     2C EC B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     DC 07 90 AD |  if_e	jmp	#LR__0378
05118     9D 01 00 FF 
0511c     AA 15 06 F6 | 	mov	arg02, ##@LR__5471
05120     13 13 02 F6 | 	mov	arg01, local01
05124     14 EC B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     CC 07 90 AD |  if_e	jmp	#LR__0379
05130     9D 01 00 FF 
05134     AD 15 06 F6 | 	mov	arg02, ##@LR__5472
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     FC EB B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     BC 07 90 AD |  if_e	jmp	#LR__0380
05148     9D 01 00 FF 
0514c     B0 15 06 F6 | 	mov	arg02, ##@LR__5473
05150     13 13 02 F6 | 	mov	arg01, local01
05154     E4 EB B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     AC 07 90 AD |  if_e	jmp	#LR__0381
05160     9D 01 00 FF 
05164     B5 15 06 F6 | 	mov	arg02, ##@LR__5474
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     CC EB B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     9C 07 90 AD |  if_e	jmp	#LR__0382
05178     9D 01 00 FF 
0517c     BB 15 06 F6 | 	mov	arg02, ##@LR__5475
05180     13 13 02 F6 | 	mov	arg01, local01
05184     B4 EB B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     8C 07 90 AD |  if_e	jmp	#LR__0383
05190     9D 01 00 FF 
05194     BF 15 06 F6 | 	mov	arg02, ##@LR__5476
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     9C EB B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     7C 07 90 AD |  if_e	jmp	#LR__0384
051a8     9D 01 00 FF 
051ac     C8 15 06 F6 | 	mov	arg02, ##@LR__5477
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     84 EB B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     6C 07 90 AD |  if_e	jmp	#LR__0385
051c0     9D 01 00 FF 
051c4     CE 15 06 F6 | 	mov	arg02, ##@LR__5478
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     6C EB B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     5C 07 90 AD |  if_e	jmp	#LR__0386
051d8     9D 01 00 FF 
051dc     D4 15 06 F6 | 	mov	arg02, ##@LR__5479
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     54 EB B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     4C 07 90 AD |  if_e	jmp	#LR__0387
051f0     9D 01 00 FF 
051f4     DD 15 06 F6 | 	mov	arg02, ##@LR__5480
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     3C EB B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     3C 07 90 AD |  if_e	jmp	#LR__0388
05208     9D 01 00 FF 
0520c     E7 15 06 F6 | 	mov	arg02, ##@LR__5481
05210     13 13 02 F6 | 	mov	arg01, local01
05214     24 EB B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     2C 07 90 AD |  if_e	jmp	#LR__0389
05220     9D 01 00 FF 
05224     F0 15 06 F6 | 	mov	arg02, ##@LR__5482
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     0C EB B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     1C 07 90 AD |  if_e	jmp	#LR__0390
05238     9D 01 00 FF 
0523c     F5 15 06 F6 | 	mov	arg02, ##@LR__5483
05240     13 13 02 F6 | 	mov	arg01, local01
05244     F4 EA B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     0C 07 90 AD |  if_e	jmp	#LR__0391
05250     9D 01 00 FF 
05254     F8 15 06 F6 | 	mov	arg02, ##@LR__5484
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     DC EA B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     FC 06 90 AD |  if_e	jmp	#LR__0392
05268     9D 01 00 FF 
0526c     FD 15 06 F6 | 	mov	arg02, ##@LR__5485
05270     13 13 02 F6 | 	mov	arg01, local01
05274     C4 EA B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     EC 06 90 AD |  if_e	jmp	#LR__0393
05280     9E 01 00 FF 
05284     01 14 06 F6 | 	mov	arg02, ##@LR__5486
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     AC EA B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     DC 06 90 AD |  if_e	jmp	#LR__0394
05298     9E 01 00 FF 
0529c     06 14 06 F6 | 	mov	arg02, ##@LR__5487
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     94 EA B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     CC 06 90 AD |  if_e	jmp	#LR__0395
052b0     9E 01 00 FF 
052b4     0A 14 06 F6 | 	mov	arg02, ##@LR__5488
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     7C EA B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     BC 06 90 AD |  if_e	jmp	#LR__0396
052c8     9E 01 00 FF 
052cc     13 14 06 F6 | 	mov	arg02, ##@LR__5489
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     64 EA B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     AC 06 90 AD |  if_e	jmp	#LR__0397
052e0     9E 01 00 FF 
052e4     18 14 06 F6 | 	mov	arg02, ##@LR__5490
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     4C EA B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     9C 06 90 AD |  if_e	jmp	#LR__0398
052f8     9E 01 00 FF 
052fc     1E 14 06 F6 | 	mov	arg02, ##@LR__5491
05300     13 13 02 F6 | 	mov	arg01, local01
05304     34 EA B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     8C 06 90 AD |  if_e	jmp	#LR__0399
05310     9E 01 00 FF 
05314     20 14 06 F6 | 	mov	arg02, ##@LR__5492
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     1C EA B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     7C 06 90 AD |  if_e	jmp	#LR__0400
05328     9E 01 00 FF 
0532c     24 14 06 F6 | 	mov	arg02, ##@LR__5493
05330     13 13 02 F6 | 	mov	arg01, local01
05334     04 EA B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     6C 06 90 AD |  if_e	jmp	#LR__0401
05340     9E 01 00 FF 
05344     28 14 06 F6 | 	mov	arg02, ##@LR__5494
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     EC E9 B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     5C 06 90 AD |  if_e	jmp	#LR__0402
05358     9E 01 00 FF 
0535c     30 14 06 F6 | 	mov	arg02, ##@LR__5495
05360     13 13 02 F6 | 	mov	arg01, local01
05364     D4 E9 B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     4C 06 90 AD |  if_e	jmp	#LR__0403
05370     9E 01 00 FF 
05374     34 14 06 F6 | 	mov	arg02, ##@LR__5496
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     BC E9 B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     3C 06 90 AD |  if_e	jmp	#LR__0404
05388     9E 01 00 FF 
0538c     36 14 06 F6 | 	mov	arg02, ##@LR__5497
05390     13 13 02 F6 | 	mov	arg01, local01
05394     A4 E9 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     2C 06 90 AD |  if_e	jmp	#LR__0405
053a0     9E 01 00 FF 
053a4     3D 14 06 F6 | 	mov	arg02, ##@LR__5498
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     8C E9 B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     1C 06 90 AD |  if_e	jmp	#LR__0406
053b8     9E 01 00 FF 
053bc     41 14 06 F6 | 	mov	arg02, ##@LR__5499
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     74 E9 B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     0C 06 90 AD |  if_e	jmp	#LR__0407
053d0     9E 01 00 FF 
053d4     46 14 06 F6 | 	mov	arg02, ##@LR__5500
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     5C E9 B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     FC 05 90 AD |  if_e	jmp	#LR__0408
053e8     9E 01 00 FF 
053ec     49 14 06 F6 | 	mov	arg02, ##@LR__5501
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     44 E9 B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     EC 05 90 AD |  if_e	jmp	#LR__0409
05400     9E 01 00 FF 
05404     52 14 06 F6 | 	mov	arg02, ##@LR__5502
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     2C E9 B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     DC 05 90 AD |  if_e	jmp	#LR__0410
05418     9E 01 00 FF 
0541c     56 14 06 F6 | 	mov	arg02, ##@LR__5503
05420     13 13 02 F6 | 	mov	arg01, local01
05424     14 E9 B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     CC 05 90 AD |  if_e	jmp	#LR__0411
05430     9E 01 00 FF 
05434     5D 14 06 F6 | 	mov	arg02, ##@LR__5504
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     FC E8 B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     BC 05 90 AD |  if_e	jmp	#LR__0412
05448     9E 01 00 FF 
0544c     61 14 06 F6 | 	mov	arg02, ##@LR__5505
05450     13 13 02 F6 | 	mov	arg01, local01
05454     E4 E8 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     AC 05 90 AD |  if_e	jmp	#LR__0413
05460     9E 01 00 FF 
05464     68 14 06 F6 | 	mov	arg02, ##@LR__5506
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     CC E8 B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     9C 05 90 AD |  if_e	jmp	#LR__0414
05478     9E 01 00 FF 
0547c     6C 14 06 F6 | 	mov	arg02, ##@LR__5507
05480     13 13 02 F6 | 	mov	arg01, local01
05484     B4 E8 B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     8C 05 90 AD |  if_e	jmp	#LR__0415
05490     9E 01 00 FF 
05494     73 14 06 F6 | 	mov	arg02, ##@LR__5508
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     9C E8 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     7C 05 90 AD |  if_e	jmp	#LR__0416
054a8     9E 01 00 FF 
054ac     77 14 06 F6 | 	mov	arg02, ##@LR__5509
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     84 E8 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     6C 05 90 AD |  if_e	jmp	#LR__0417
054c0     9E 01 00 FF 
054c4     82 14 06 F6 | 	mov	arg02, ##@LR__5510
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     6C E8 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     5C 05 90 AD |  if_e	jmp	#LR__0418
054d8     9E 01 00 FF 
054dc     86 14 06 F6 | 	mov	arg02, ##@LR__5511
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     54 E8 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     4C 05 90 AD |  if_e	jmp	#LR__0419
054f0     9E 01 00 FF 
054f4     8D 14 06 F6 | 	mov	arg02, ##@LR__5512
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     3C E8 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     3C 05 90 AD |  if_e	jmp	#LR__0420
05508     9E 01 00 FF 
0550c     91 14 06 F6 | 	mov	arg02, ##@LR__5513
05510     13 13 02 F6 | 	mov	arg01, local01
05514     24 E8 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     2C 05 90 AD |  if_e	jmp	#LR__0421
05520     9E 01 00 FF 
05524     99 14 06 F6 | 	mov	arg02, ##@LR__5514
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     0C E8 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     1C 05 90 AD |  if_e	jmp	#LR__0422
05538     9E 01 00 FF 
0553c     9D 14 06 F6 | 	mov	arg02, ##@LR__5515
05540     13 13 02 F6 | 	mov	arg01, local01
05544     F4 E7 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     0C 05 90 AD |  if_e	jmp	#LR__0423
05550     9E 01 00 FF 
05554     A4 14 06 F6 | 	mov	arg02, ##@LR__5516
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     DC E7 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     FC 04 90 AD |  if_e	jmp	#LR__0424
05568     9E 01 00 FF 
0556c     AB 14 06 F6 | 	mov	arg02, ##@LR__5517
05570     13 13 02 F6 | 	mov	arg01, local01
05574     C4 E7 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     EC 04 90 AD |  if_e	jmp	#LR__0425
05580     9E 01 00 FF 
05584     AF 14 06 F6 | 	mov	arg02, ##@LR__5518
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     AC E7 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     DC 04 90 AD |  if_e	jmp	#LR__0426
05598     9E 01 00 FF 
0559c     B5 14 06 F6 | 	mov	arg02, ##@LR__5519
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     94 E7 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     CC 04 90 AD |  if_e	jmp	#LR__0427
055b0     9E 01 00 FF 
055b4     B9 14 06 F6 | 	mov	arg02, ##@LR__5520
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     7C E7 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     BC 04 90 AD |  if_e	jmp	#LR__0428
055c8     9E 01 00 FF 
055cc     C0 14 06 F6 | 	mov	arg02, ##@LR__5521
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     64 E7 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     AC 04 90 AD |  if_e	jmp	#LR__0429
055e0     9E 01 00 FF 
055e4     C5 14 06 F6 | 	mov	arg02, ##@LR__5522
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     4C E7 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     9C 04 90 AD |  if_e	jmp	#LR__0430
055f8     9E 01 00 FF 
055fc     CA 14 06 F6 | 	mov	arg02, ##@LR__5523
05600     13 13 02 F6 | 	mov	arg01, local01
05604     34 E7 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     8C 04 90 AD |  if_e	jmp	#LR__0431
05610     9E 01 00 FF 
05614     D1 14 06 F6 | 	mov	arg02, ##@LR__5524
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     1C E7 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     7C 04 90 AD |  if_e	jmp	#LR__0432
05628     9E 01 00 FF 
0562c     D4 14 06 F6 | 	mov	arg02, ##@LR__5525
05630     13 13 02 F6 | 	mov	arg01, local01
05634     04 E7 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     6C 04 90 AD |  if_e	jmp	#LR__0433
05640     9E 01 00 FF 
05644     DE 14 06 F6 | 	mov	arg02, ##@LR__5526
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     EC E6 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     5C 04 90 AD |  if_e	jmp	#LR__0434
05658     9E 01 00 FF 
0565c     E2 14 06 F6 | 	mov	arg02, ##@LR__5527
05660     13 13 02 F6 | 	mov	arg01, local01
05664     D4 E6 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     4C 04 90 AD |  if_e	jmp	#LR__0435
05670     9E 01 00 FF 
05674     EA 14 06 F6 | 	mov	arg02, ##@LR__5528
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     BC E6 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     3C 04 90 AD |  if_e	jmp	#LR__0436
05688     9E 01 00 FF 
0568c     EE 14 06 F6 | 	mov	arg02, ##@LR__5529
05690     13 13 02 F6 | 	mov	arg01, local01
05694     A4 E6 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     2C 04 90 AD |  if_e	jmp	#LR__0437
056a0     9E 01 00 FF 
056a4     F4 14 06 F6 | 	mov	arg02, ##@LR__5530
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     8C E6 B1 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     1C 04 90 AD |  if_e	jmp	#LR__0438
056b8     9E 01 00 FF 
056bc     FA 14 06 F6 | 	mov	arg02, ##@LR__5531
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     74 E6 B1 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     0C 04 90 AD |  if_e	jmp	#LR__0439
056d0     10 04 90 FD | 	jmp	#LR__0440
056d4                 | LR__0310
056d4     5C FA 05 F6 | 	mov	result1, #92
056d8     0C 04 90 FD | 	jmp	#LR__0441
056dc                 | LR__0311
056dc     5C FA 05 F6 | 	mov	result1, #92
056e0     04 04 90 FD | 	jmp	#LR__0441
056e4                 | LR__0312
056e4     B9 FA 05 F6 | 	mov	result1, #185
056e8     FC 03 90 FD | 	jmp	#LR__0441
056ec                 | LR__0313
056ec     47 FA 05 F6 | 	mov	result1, #71
056f0     F4 03 90 FD | 	jmp	#LR__0441
056f4                 | LR__0314
056f4     59 FA 05 F6 | 	mov	result1, #89
056f8     EC 03 90 FD | 	jmp	#LR__0441
056fc                 | LR__0315
056fc     59 FA 05 F6 | 	mov	result1, #89
05700     E4 03 90 FD | 	jmp	#LR__0441
05704                 | LR__0316
05704     C3 FA 05 F6 | 	mov	result1, #195
05708     DC 03 90 FD | 	jmp	#LR__0441
0570c                 | LR__0317
0570c     AE FA 05 F6 | 	mov	result1, #174
05710     D4 03 90 FD | 	jmp	#LR__0441
05714                 | LR__0318
05714     AE FA 05 F6 | 	mov	result1, #174
05718     CC 03 90 FD | 	jmp	#LR__0441
0571c                 | LR__0319
0571c     B1 FA 05 F6 | 	mov	result1, #177
05720     C4 03 90 FD | 	jmp	#LR__0441
05724                 | LR__0320
05724     B1 FA 05 F6 | 	mov	result1, #177
05728     BC 03 90 FD | 	jmp	#LR__0441
0572c                 | LR__0321
0572c     AF FA 05 F6 | 	mov	result1, #175
05730     B4 03 90 FD | 	jmp	#LR__0441
05734                 | LR__0322
05734     AF FA 05 F6 | 	mov	result1, #175
05738     AC 03 90 FD | 	jmp	#LR__0441
0573c                 | LR__0323
0573c     B0 FA 05 F6 | 	mov	result1, #176
05740     A4 03 90 FD | 	jmp	#LR__0441
05744                 | LR__0324
05744     B0 FA 05 F6 | 	mov	result1, #176
05748     9C 03 90 FD | 	jmp	#LR__0441
0574c                 | LR__0325
0574c     45 FA 05 F6 | 	mov	result1, #69
05750     94 03 90 FD | 	jmp	#LR__0441
05754                 | LR__0326
05754     45 FA 05 F6 | 	mov	result1, #69
05758     8C 03 90 FD | 	jmp	#LR__0441
0575c                 | LR__0327
0575c     69 FA 05 F6 | 	mov	result1, #105
05760     84 03 90 FD | 	jmp	#LR__0441
05764                 | LR__0328
05764     B4 FA 05 F6 | 	mov	result1, #180
05768     7C 03 90 FD | 	jmp	#LR__0441
0576c                 | LR__0329
0576c     40 FA 05 F6 | 	mov	result1, #64
05770     74 03 90 FD | 	jmp	#LR__0441
05774                 | LR__0330
05774     49 FA 05 F6 | 	mov	result1, #73
05778     6C 03 90 FD | 	jmp	#LR__0441
0577c                 | LR__0331
0577c     49 FA 05 F6 | 	mov	result1, #73
05780     64 03 90 FD | 	jmp	#LR__0441
05784                 | LR__0332
05784     50 FA 05 F6 | 	mov	result1, #80
05788     5C 03 90 FD | 	jmp	#LR__0441
0578c                 | LR__0333
0578c     50 FA 05 F6 | 	mov	result1, #80
05790     54 03 90 FD | 	jmp	#LR__0441
05794                 | LR__0334
05794     68 FA 05 F6 | 	mov	result1, #104
05798     4C 03 90 FD | 	jmp	#LR__0441
0579c                 | LR__0335
0579c     73 FA 05 F6 | 	mov	result1, #115
057a0     44 03 90 FD | 	jmp	#LR__0441
057a4                 | LR__0336
057a4     74 FA 05 F6 | 	mov	result1, #116
057a8     3C 03 90 FD | 	jmp	#LR__0441
057ac                 | LR__0337
057ac     6C FA 05 F6 | 	mov	result1, #108
057b0     34 03 90 FD | 	jmp	#LR__0441
057b4                 | LR__0338
057b4     6C FA 05 F6 | 	mov	result1, #108
057b8     2C 03 90 FD | 	jmp	#LR__0441
057bc                 | LR__0339
057bc     89 FA 05 F6 | 	mov	result1, #137
057c0     24 03 90 FD | 	jmp	#LR__0441
057c4                 | LR__0340
057c4     C2 FA 05 F6 | 	mov	result1, #194
057c8     1C 03 90 FD | 	jmp	#LR__0441
057cc                 | LR__0341
057cc     72 FA 05 F6 | 	mov	result1, #114
057d0     14 03 90 FD | 	jmp	#LR__0441
057d4                 | LR__0342
057d4     5D FA 05 F6 | 	mov	result1, #93
057d8     0C 03 90 FD | 	jmp	#LR__0441
057dc                 | LR__0343
057dc     96 FA 05 F6 | 	mov	result1, #150
057e0     04 03 90 FD | 	jmp	#LR__0441
057e4                 | LR__0344
057e4     43 FA 05 F6 | 	mov	result1, #67
057e8     FC 02 90 FD | 	jmp	#LR__0441
057ec                 | LR__0345
057ec     43 FA 05 F6 | 	mov	result1, #67
057f0     F4 02 90 FD | 	jmp	#LR__0441
057f4                 | LR__0346
057f4     43 FA 05 F6 | 	mov	result1, #67
057f8     EC 02 90 FD | 	jmp	#LR__0441
057fc                 | LR__0347
057fc     5A FA 05 F6 | 	mov	result1, #90
05800     E4 02 90 FD | 	jmp	#LR__0441
05804                 | LR__0348
05804     AB FA 05 F6 | 	mov	result1, #171
05808     DC 02 90 FD | 	jmp	#LR__0441
0580c                 | LR__0349
0580c     BD FA 05 F6 | 	mov	result1, #189
05810     D4 02 90 FD | 	jmp	#LR__0441
05814                 | LR__0350
05814     BD FA 05 F6 | 	mov	result1, #189
05818     CC 02 90 FD | 	jmp	#LR__0441
0581c                 | LR__0351
0581c     46 FA 05 F6 | 	mov	result1, #70
05820     C4 02 90 FD | 	jmp	#LR__0441
05824                 | LR__0352
05824     46 FA 05 F6 | 	mov	result1, #70
05828     BC 02 90 FD | 	jmp	#LR__0441
0582c                 | LR__0353
0582c     71 FA 05 F6 | 	mov	result1, #113
05830     B4 02 90 FD | 	jmp	#LR__0441
05834                 | LR__0354
05834     71 FA 05 F6 | 	mov	result1, #113
05838     AC 02 90 FD | 	jmp	#LR__0441
0583c                 | LR__0355
0583c     60 FA 05 F6 | 	mov	result1, #96
05840     A4 02 90 FD | 	jmp	#LR__0441
05844                 | LR__0356
05844     4A FA 05 F6 | 	mov	result1, #74
05848     9C 02 90 FD | 	jmp	#LR__0441
0584c                 | LR__0357
0584c     4A FA 05 F6 | 	mov	result1, #74
05850     94 02 90 FD | 	jmp	#LR__0441
05854                 | LR__0358
05854     48 FA 05 F6 | 	mov	result1, #72
05858     8C 02 90 FD | 	jmp	#LR__0441
0585c                 | LR__0359
0585c     48 FA 05 F6 | 	mov	result1, #72
05860     84 02 90 FD | 	jmp	#LR__0441
05864                 | LR__0360
05864     BB FA 05 F6 | 	mov	result1, #187
05868     7C 02 90 FD | 	jmp	#LR__0441
0586c                 | LR__0361
0586c     A9 FA 05 F6 | 	mov	result1, #169
05870     74 02 90 FD | 	jmp	#LR__0441
05874                 | LR__0362
05874     4E FA 05 F6 | 	mov	result1, #78
05878     6C 02 90 FD | 	jmp	#LR__0441
0587c                 | LR__0363
0587c     4E FA 05 F6 | 	mov	result1, #78
05880     64 02 90 FD | 	jmp	#LR__0441
05884                 | LR__0364
05884     58 FA 05 F6 | 	mov	result1, #88
05888     5C 02 90 FD | 	jmp	#LR__0441
0588c                 | LR__0365
0588c     5F FA 05 F6 | 	mov	result1, #95
05890     54 02 90 FD | 	jmp	#LR__0441
05894                 | LR__0366
05894     5F FA 05 F6 | 	mov	result1, #95
05898     4C 02 90 FD | 	jmp	#LR__0441
0589c                 | LR__0367
0589c     B5 FA 05 F6 | 	mov	result1, #181
058a0     44 02 90 FD | 	jmp	#LR__0441
058a4                 | LR__0368
058a4     4C FA 05 F6 | 	mov	result1, #76
058a8     3C 02 90 FD | 	jmp	#LR__0441
058ac                 | LR__0369
058ac     4C FA 05 F6 | 	mov	result1, #76
058b0     34 02 90 FD | 	jmp	#LR__0441
058b4                 | LR__0370
058b4     52 FA 05 F6 | 	mov	result1, #82
058b8     2C 02 90 FD | 	jmp	#LR__0441
058bc                 | LR__0371
058bc     52 FA 05 F6 | 	mov	result1, #82
058c0     24 02 90 FD | 	jmp	#LR__0441
058c4                 | LR__0372
058c4     97 FA 05 F6 | 	mov	result1, #151
058c8     1C 02 90 FD | 	jmp	#LR__0441
058cc                 | LR__0373
058cc     C6 FA 05 F6 | 	mov	result1, #198
058d0     14 02 90 FD | 	jmp	#LR__0441
058d4                 | LR__0374
058d4     61 FA 05 F6 | 	mov	result1, #97
058d8     0C 02 90 FD | 	jmp	#LR__0441
058dc                 | LR__0375
058dc     61 FA 05 F6 | 	mov	result1, #97
058e0     04 02 90 FD | 	jmp	#LR__0441
058e4                 | LR__0376
058e4     63 FA 05 F6 | 	mov	result1, #99
058e8     FC 01 90 FD | 	jmp	#LR__0441
058ec                 | LR__0377
058ec     41 FA 05 F6 | 	mov	result1, #65
058f0     F4 01 90 FD | 	jmp	#LR__0441
058f4                 | LR__0378
058f4     4B FA 05 F6 | 	mov	result1, #75
058f8     EC 01 90 FD | 	jmp	#LR__0441
058fc                 | LR__0379
058fc     4B FA 05 F6 | 	mov	result1, #75
05900     E4 01 90 FD | 	jmp	#LR__0441
05904                 | LR__0380
05904     C1 FA 05 F6 | 	mov	result1, #193
05908     DC 01 90 FD | 	jmp	#LR__0441
0590c                 | LR__0381
0590c     B3 FA 05 F6 | 	mov	result1, #179
05910     D4 01 90 FD | 	jmp	#LR__0441
05914                 | LR__0382
05914     5E FA 05 F6 | 	mov	result1, #94
05918     CC 01 90 FD | 	jmp	#LR__0441
0591c                 | LR__0383
0591c     5E FA 05 F6 | 	mov	result1, #94
05920     C4 01 90 FD | 	jmp	#LR__0441
05924                 | LR__0384
05924     7C FA 05 F6 | 	mov	result1, #124
05928     BC 01 90 FD | 	jmp	#LR__0441
0592c                 | LR__0385
0592c     7E FA 05 F6 | 	mov	result1, #126
05930     B4 01 90 FD | 	jmp	#LR__0441
05934                 | LR__0386
05934     7D FA 05 F6 | 	mov	result1, #125
05938     AC 01 90 FD | 	jmp	#LR__0441
0593c                 | LR__0387
0593c     7F FA 05 F6 | 	mov	result1, #127
05940     A4 01 90 FD | 	jmp	#LR__0441
05944                 | LR__0388
05944     80 FA 05 F6 | 	mov	result1, #128
05948     9C 01 90 FD | 	jmp	#LR__0441
0594c                 | LR__0389
0594c     55 FA 05 F6 | 	mov	result1, #85
05950     94 01 90 FD | 	jmp	#LR__0441
05954                 | LR__0390
05954     75 FA 05 F6 | 	mov	result1, #117
05958     8C 01 90 FD | 	jmp	#LR__0441
0595c                 | LR__0391
0595c     75 FA 05 F6 | 	mov	result1, #117
05960     84 01 90 FD | 	jmp	#LR__0441
05964                 | LR__0392
05964     42 FA 05 F6 | 	mov	result1, #66
05968     7C 01 90 FD | 	jmp	#LR__0441
0596c                 | LR__0393
0596c     42 FA 05 F6 | 	mov	result1, #66
05970     74 01 90 FD | 	jmp	#LR__0441
05974                 | LR__0394
05974     95 FA 05 F6 | 	mov	result1, #149
05978     6C 01 90 FD | 	jmp	#LR__0441
0597c                 | LR__0395
0597c     AC FA 05 F6 | 	mov	result1, #172
05980     64 01 90 FD | 	jmp	#LR__0441
05984                 | LR__0396
05984     81 FA 05 F6 | 	mov	result1, #129
05988     5C 01 90 FD | 	jmp	#LR__0441
0598c                 | LR__0397
0598c     81 FA 05 F6 | 	mov	result1, #129
05990     54 01 90 FD | 	jmp	#LR__0441
05994                 | LR__0398
05994     44 FA 05 F6 | 	mov	result1, #68
05998     4C 01 90 FD | 	jmp	#LR__0441
0599c                 | LR__0399
0599c     44 FA 05 F6 | 	mov	result1, #68
059a0     44 01 90 FD | 	jmp	#LR__0441
059a4                 | LR__0400
059a4     BC FA 05 F6 | 	mov	result1, #188
059a8     3C 01 90 FD | 	jmp	#LR__0441
059ac                 | LR__0401
059ac     88 FA 05 F6 | 	mov	result1, #136
059b0     34 01 90 FD | 	jmp	#LR__0441
059b4                 | LR__0402
059b4     92 FA 05 F6 | 	mov	result1, #146
059b8     2C 01 90 FD | 	jmp	#LR__0441
059bc                 | LR__0403
059bc     BE FA 05 F6 | 	mov	result1, #190
059c0     24 01 90 FD | 	jmp	#LR__0441
059c4                 | LR__0404
059c4     BE FA 05 F6 | 	mov	result1, #190
059c8     1C 01 90 FD | 	jmp	#LR__0441
059cc                 | LR__0405
059cc     AA FA 05 F6 | 	mov	result1, #170
059d0     14 01 90 FD | 	jmp	#LR__0441
059d4                 | LR__0406
059d4     4D FA 05 F6 | 	mov	result1, #77
059d8     0C 01 90 FD | 	jmp	#LR__0441
059dc                 | LR__0407
059dc     51 FA 05 F6 | 	mov	result1, #81
059e0     04 01 90 FD | 	jmp	#LR__0441
059e4                 | LR__0408
059e4     51 FA 05 F6 | 	mov	result1, #81
059e8     FC 00 90 FD | 	jmp	#LR__0441
059ec                 | LR__0409
059ec     8E FA 05 F6 | 	mov	result1, #142
059f0     F4 00 90 FD | 	jmp	#LR__0441
059f4                 | LR__0410
059f4     8E FA 05 F6 | 	mov	result1, #142
059f8     EC 00 90 FD | 	jmp	#LR__0441
059fc                 | LR__0411
059fc     90 FA 05 F6 | 	mov	result1, #144
05a00     E4 00 90 FD | 	jmp	#LR__0441
05a04                 | LR__0412
05a04     90 FA 05 F6 | 	mov	result1, #144
05a08     DC 00 90 FD | 	jmp	#LR__0441
05a0c                 | LR__0413
05a0c     8D FA 05 F6 | 	mov	result1, #141
05a10     D4 00 90 FD | 	jmp	#LR__0441
05a14                 | LR__0414
05a14     8D FA 05 F6 | 	mov	result1, #141
05a18     CC 00 90 FD | 	jmp	#LR__0441
05a1c                 | LR__0415
05a1c     8C FA 05 F6 | 	mov	result1, #140
05a20     C4 00 90 FD | 	jmp	#LR__0441
05a24                 | LR__0416
05a24     8C FA 05 F6 | 	mov	result1, #140
05a28     BC 00 90 FD | 	jmp	#LR__0441
05a2c                 | LR__0417
05a2c     91 FA 05 F6 | 	mov	result1, #145
05a30     B4 00 90 FD | 	jmp	#LR__0441
05a34                 | LR__0418
05a34     91 FA 05 F6 | 	mov	result1, #145
05a38     AC 00 90 FD | 	jmp	#LR__0441
05a3c                 | LR__0419
05a3c     8B FA 05 F6 | 	mov	result1, #139
05a40     A4 00 90 FD | 	jmp	#LR__0441
05a44                 | LR__0420
05a44     8B FA 05 F6 | 	mov	result1, #139
05a48     9C 00 90 FD | 	jmp	#LR__0441
05a4c                 | LR__0421
05a4c     8F FA 05 F6 | 	mov	result1, #143
05a50     94 00 90 FD | 	jmp	#LR__0441
05a54                 | LR__0422
05a54     8F FA 05 F6 | 	mov	result1, #143
05a58     8C 00 90 FD | 	jmp	#LR__0441
05a5c                 | LR__0423
05a5c     8F FA 05 F6 | 	mov	result1, #143
05a60     84 00 90 FD | 	jmp	#LR__0441
05a64                 | LR__0424
05a64     B2 FA 05 F6 | 	mov	result1, #178
05a68     7C 00 90 FD | 	jmp	#LR__0441
05a6c                 | LR__0425
05a6c     B2 FA 05 F6 | 	mov	result1, #178
05a70     74 00 90 FD | 	jmp	#LR__0441
05a74                 | LR__0426
05a74     75 FA 05 F6 | 	mov	result1, #117
05a78     6C 00 90 FD | 	jmp	#LR__0441
05a7c                 | LR__0427
05a7c     75 FA 05 F6 | 	mov	result1, #117
05a80     64 00 90 FD | 	jmp	#LR__0441
05a84                 | LR__0428
05a84     6D FA 05 F6 | 	mov	result1, #109
05a88     5C 00 90 FD | 	jmp	#LR__0441
05a8c                 | LR__0429
05a8c     6D FA 05 F6 | 	mov	result1, #109
05a90     54 00 90 FD | 	jmp	#LR__0441
05a94                 | LR__0430
05a94     5B FA 05 F6 | 	mov	result1, #91
05a98     4C 00 90 FD | 	jmp	#LR__0441
05a9c                 | LR__0431
05a9c     56 FA 05 F6 | 	mov	result1, #86
05aa0     44 00 90 FD | 	jmp	#LR__0441
05aa4                 | LR__0432
05aa4     56 FA 05 F6 | 	mov	result1, #86
05aa8     3C 00 90 FD | 	jmp	#LR__0441
05aac                 | LR__0433
05aac     70 FA 05 F6 | 	mov	result1, #112
05ab0     34 00 90 FD | 	jmp	#LR__0441
05ab4                 | LR__0434
05ab4     70 FA 05 F6 | 	mov	result1, #112
05ab8     2C 00 90 FD | 	jmp	#LR__0441
05abc                 | LR__0435
05abc     57 FA 05 F6 | 	mov	result1, #87
05ac0     24 00 90 FD | 	jmp	#LR__0441
05ac4                 | LR__0436
05ac4     57 FA 05 F6 | 	mov	result1, #87
05ac8     1C 00 90 FD | 	jmp	#LR__0441
05acc                 | LR__0437
05acc     79 FA 05 F6 | 	mov	result1, #121
05ad0     14 00 90 FD | 	jmp	#LR__0441
05ad4                 | LR__0438
05ad4     77 FA 05 F6 | 	mov	result1, #119
05ad8     0C 00 90 FD | 	jmp	#LR__0441
05adc                 | LR__0439
05adc     78 FA 05 F6 | 	mov	result1, #120
05ae0     04 00 90 FD | 	jmp	#LR__0441
05ae4                 | LR__0440
05ae4     00 FA 05 F6 | 	mov	result1, #0
05ae8                 | LR__0441
05ae8     A7 F0 03 F6 | 	mov	ptra, fp
05aec     B2 00 A0 FD | 	call	#popregs_
05af0                 | _iscommand_ret
05af0     2D 00 64 FD | 	ret
05af4                 | 
05af4                 | ' 
05af4                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05af4                 | ' 
05af4                 | ' function isfunction(s as string) as ubyte
05af4                 | _isfunction
05af4     01 4A 05 F6 | 	mov	COUNT_, #1
05af8     A8 00 A0 FD | 	call	#pushregs_
05afc                 | ' 
05afc                 | ' select case s
05afc     09 27 02 F6 | 	mov	local01, arg01
05b00     9E 01 00 FF 
05b04     00 15 06 F6 | 	mov	arg02, ##@LR__5532
05b08     13 13 02 F6 | 	mov	arg01, local01
05b0c     2C E2 B1 FD | 	call	#__system___string_cmp
05b10     00 FA 0D F2 | 	cmp	result1, #0 wz
05b14     3C 04 90 AD |  if_e	jmp	#LR__0450
05b18     9E 01 00 FF 
05b1c     04 15 06 F6 | 	mov	arg02, ##@LR__5533
05b20     13 13 02 F6 | 	mov	arg01, local01
05b24     14 E2 B1 FD | 	call	#__system___string_cmp
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     2C 04 90 AD |  if_e	jmp	#LR__0451
05b30     9E 01 00 FF 
05b34     09 15 06 F6 | 	mov	arg02, ##@LR__5534
05b38     13 13 02 F6 | 	mov	arg01, local01
05b3c     FC E1 B1 FD | 	call	#__system___string_cmp
05b40     00 FA 0D F2 | 	cmp	result1, #0 wz
05b44     1C 04 90 AD |  if_e	jmp	#LR__0452
05b48     9E 01 00 FF 
05b4c     0D 15 06 F6 | 	mov	arg02, ##@LR__5535
05b50     13 13 02 F6 | 	mov	arg01, local01
05b54     E4 E1 B1 FD | 	call	#__system___string_cmp
05b58     00 FA 0D F2 | 	cmp	result1, #0 wz
05b5c     0C 04 90 AD |  if_e	jmp	#LR__0453
05b60     9E 01 00 FF 
05b64     12 15 06 F6 | 	mov	arg02, ##@LR__5536
05b68     13 13 02 F6 | 	mov	arg01, local01
05b6c     CC E1 B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     FC 03 90 AD |  if_e	jmp	#LR__0454
05b78     9E 01 00 FF 
05b7c     16 15 06 F6 | 	mov	arg02, ##@LR__5537
05b80     13 13 02 F6 | 	mov	arg01, local01
05b84     B4 E1 B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     EC 03 90 AD |  if_e	jmp	#LR__0455
05b90     9E 01 00 FF 
05b94     1B 15 06 F6 | 	mov	arg02, ##@LR__5538
05b98     13 13 02 F6 | 	mov	arg01, local01
05b9c     9C E1 B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     DC 03 90 AD |  if_e	jmp	#LR__0456
05ba8     9E 01 00 FF 
05bac     1F 15 06 F6 | 	mov	arg02, ##@LR__5539
05bb0     13 13 02 F6 | 	mov	arg01, local01
05bb4     84 E1 B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     CC 03 90 AD |  if_e	jmp	#LR__0457
05bc0     9E 01 00 FF 
05bc4     24 15 06 F6 | 	mov	arg02, ##@LR__5540
05bc8     13 13 02 F6 | 	mov	arg01, local01
05bcc     6C E1 B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     BC 03 90 AD |  if_e	jmp	#LR__0458
05bd8     9E 01 00 FF 
05bdc     29 15 06 F6 | 	mov	arg02, ##@LR__5541
05be0     13 13 02 F6 | 	mov	arg01, local01
05be4     54 E1 B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     AC 03 90 AD |  if_e	jmp	#LR__0459
05bf0     9E 01 00 FF 
05bf4     2D 15 06 F6 | 	mov	arg02, ##@LR__5542
05bf8     13 13 02 F6 | 	mov	arg01, local01
05bfc     3C E1 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     9C 03 90 AD |  if_e	jmp	#LR__0460
05c08     9E 01 00 FF 
05c0c     33 15 06 F6 | 	mov	arg02, ##@LR__5543
05c10     13 13 02 F6 | 	mov	arg01, local01
05c14     24 E1 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     8C 03 90 AD |  if_e	jmp	#LR__0461
05c20     9E 01 00 FF 
05c24     3C 15 06 F6 | 	mov	arg02, ##@LR__5544
05c28     13 13 02 F6 | 	mov	arg01, local01
05c2c     0C E1 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     7C 03 90 AD |  if_e	jmp	#LR__0462
05c38     9E 01 00 FF 
05c3c     40 15 06 F6 | 	mov	arg02, ##@LR__5545
05c40     13 13 02 F6 | 	mov	arg01, local01
05c44     F4 E0 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     6C 03 90 AD |  if_e	jmp	#LR__0463
05c50     9E 01 00 FF 
05c54     44 15 06 F6 | 	mov	arg02, ##@LR__5546
05c58     13 13 02 F6 | 	mov	arg01, local01
05c5c     DC E0 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     5C 03 90 AD |  if_e	jmp	#LR__0464
05c68     9E 01 00 FF 
05c6c     4D 15 06 F6 | 	mov	arg02, ##@LR__5547
05c70     13 13 02 F6 | 	mov	arg01, local01
05c74     C4 E0 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     4C 03 90 AD |  if_e	jmp	#LR__0465
05c80     9E 01 00 FF 
05c84     51 15 06 F6 | 	mov	arg02, ##@LR__5548
05c88     13 13 02 F6 | 	mov	arg01, local01
05c8c     AC E0 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     3C 03 90 AD |  if_e	jmp	#LR__0466
05c98     9E 01 00 FF 
05c9c     5F 15 06 F6 | 	mov	arg02, ##@LR__5549
05ca0     13 13 02 F6 | 	mov	arg01, local01
05ca4     94 E0 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     2C 03 90 AD |  if_e	jmp	#LR__0467
05cb0     9E 01 00 FF 
05cb4     6C 15 06 F6 | 	mov	arg02, ##@LR__5550
05cb8     13 13 02 F6 | 	mov	arg01, local01
05cbc     7C E0 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     1C 03 90 AD |  if_e	jmp	#LR__0468
05cc8     9E 01 00 FF 
05ccc     74 15 06 F6 | 	mov	arg02, ##@LR__5551
05cd0     13 13 02 F6 | 	mov	arg01, local01
05cd4     64 E0 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     0C 03 90 AD |  if_e	jmp	#LR__0469
05ce0     9E 01 00 FF 
05ce4     79 15 06 F6 | 	mov	arg02, ##@LR__5552
05ce8     13 13 02 F6 | 	mov	arg01, local01
05cec     4C E0 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     FC 02 90 AD |  if_e	jmp	#LR__0470
05cf8     9E 01 00 FF 
05cfc     80 15 06 F6 | 	mov	arg02, ##@LR__5553
05d00     13 13 02 F6 | 	mov	arg01, local01
05d04     34 E0 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     EC 02 90 AD |  if_e	jmp	#LR__0471
05d10     9E 01 00 FF 
05d14     84 15 06 F6 | 	mov	arg02, ##@LR__5554
05d18     13 13 02 F6 | 	mov	arg01, local01
05d1c     1C E0 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     DC 02 90 AD |  if_e	jmp	#LR__0472
05d28     9E 01 00 FF 
05d2c     8A 15 06 F6 | 	mov	arg02, ##@LR__5555
05d30     13 13 02 F6 | 	mov	arg01, local01
05d34     04 E0 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     CC 02 90 AD |  if_e	jmp	#LR__0473
05d40     9E 01 00 FF 
05d44     8E 15 06 F6 | 	mov	arg02, ##@LR__5556
05d48     13 13 02 F6 | 	mov	arg01, local01
05d4c     EC DF B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     BC 02 90 AD |  if_e	jmp	#LR__0474
05d58     9E 01 00 FF 
05d5c     92 15 06 F6 | 	mov	arg02, ##@LR__5557
05d60     13 13 02 F6 | 	mov	arg01, local01
05d64     D4 DF B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     AC 02 90 AD |  if_e	jmp	#LR__0475
05d70     9E 01 00 FF 
05d74     98 15 06 F6 | 	mov	arg02, ##@LR__5558
05d78     13 13 02 F6 | 	mov	arg01, local01
05d7c     BC DF B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     9C 02 90 AD |  if_e	jmp	#LR__0476
05d88     9E 01 00 FF 
05d8c     9D 15 06 F6 | 	mov	arg02, ##@LR__5559
05d90     13 13 02 F6 | 	mov	arg01, local01
05d94     A4 DF B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     8C 02 90 AD |  if_e	jmp	#LR__0477
05da0     9E 01 00 FF 
05da4     A4 15 06 F6 | 	mov	arg02, ##@LR__5560
05da8     13 13 02 F6 | 	mov	arg01, local01
05dac     8C DF B1 FD | 	call	#__system___string_cmp
05db0     00 FA 0D F2 | 	cmp	result1, #0 wz
05db4     7C 02 90 AD |  if_e	jmp	#LR__0478
05db8     9E 01 00 FF 
05dbc     AB 15 06 F6 | 	mov	arg02, ##@LR__5561
05dc0     13 13 02 F6 | 	mov	arg01, local01
05dc4     74 DF B1 FD | 	call	#__system___string_cmp
05dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dcc     6C 02 90 AD |  if_e	jmp	#LR__0479
05dd0     9E 01 00 FF 
05dd4     B2 15 06 F6 | 	mov	arg02, ##@LR__5562
05dd8     13 13 02 F6 | 	mov	arg01, local01
05ddc     5C DF B1 FD | 	call	#__system___string_cmp
05de0     00 FA 0D F2 | 	cmp	result1, #0 wz
05de4     5C 02 90 AD |  if_e	jmp	#LR__0480
05de8     9E 01 00 FF 
05dec     B9 15 06 F6 | 	mov	arg02, ##@LR__5563
05df0     13 13 02 F6 | 	mov	arg01, local01
05df4     44 DF B1 FD | 	call	#__system___string_cmp
05df8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dfc     4C 02 90 AD |  if_e	jmp	#LR__0481
05e00     9E 01 00 FF 
05e04     BE 15 06 F6 | 	mov	arg02, ##@LR__5564
05e08     13 13 02 F6 | 	mov	arg01, local01
05e0c     2C DF B1 FD | 	call	#__system___string_cmp
05e10     00 FA 0D F2 | 	cmp	result1, #0 wz
05e14     3C 02 90 AD |  if_e	jmp	#LR__0482
05e18     9E 01 00 FF 
05e1c     C6 15 06 F6 | 	mov	arg02, ##@LR__5565
05e20     13 13 02 F6 | 	mov	arg01, local01
05e24     14 DF B1 FD | 	call	#__system___string_cmp
05e28     00 FA 0D F2 | 	cmp	result1, #0 wz
05e2c     2C 02 90 AD |  if_e	jmp	#LR__0483
05e30     9E 01 00 FF 
05e34     CC 15 06 F6 | 	mov	arg02, ##@LR__5566
05e38     13 13 02 F6 | 	mov	arg01, local01
05e3c     FC DE B1 FD | 	call	#__system___string_cmp
05e40     00 FA 0D F2 | 	cmp	result1, #0 wz
05e44     1C 02 90 AD |  if_e	jmp	#LR__0484
05e48     9E 01 00 FF 
05e4c     D3 15 06 F6 | 	mov	arg02, ##@LR__5567
05e50     13 13 02 F6 | 	mov	arg01, local01
05e54     E4 DE B1 FD | 	call	#__system___string_cmp
05e58     00 FA 0D F2 | 	cmp	result1, #0 wz
05e5c     0C 02 90 AD |  if_e	jmp	#LR__0485
05e60     9E 01 00 FF 
05e64     D9 15 06 F6 | 	mov	arg02, ##@LR__5568
05e68     13 13 02 F6 | 	mov	arg01, local01
05e6c     CC DE B1 FD | 	call	#__system___string_cmp
05e70     00 FA 0D F2 | 	cmp	result1, #0 wz
05e74     FC 01 90 AD |  if_e	jmp	#LR__0486
05e78     9E 01 00 FF 
05e7c     DF 15 06 F6 | 	mov	arg02, ##@LR__5569
05e80     13 13 02 F6 | 	mov	arg01, local01
05e84     B4 DE B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     EC 01 90 AD |  if_e	jmp	#LR__0487
05e90     9E 01 00 FF 
05e94     E3 15 06 F6 | 	mov	arg02, ##@LR__5570
05e98     13 13 02 F6 | 	mov	arg01, local01
05e9c     9C DE B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     DC 01 90 AD |  if_e	jmp	#LR__0488
05ea8     9E 01 00 FF 
05eac     E7 15 06 F6 | 	mov	arg02, ##@LR__5571
05eb0     13 13 02 F6 | 	mov	arg01, local01
05eb4     84 DE B1 FD | 	call	#__system___string_cmp
05eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ebc     CC 01 90 AD |  if_e	jmp	#LR__0489
05ec0     9E 01 00 FF 
05ec4     EB 15 06 F6 | 	mov	arg02, ##@LR__5572
05ec8     13 13 02 F6 | 	mov	arg01, local01
05ecc     6C DE B1 FD | 	call	#__system___string_cmp
05ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed4     BC 01 90 AD |  if_e	jmp	#LR__0490
05ed8     9E 01 00 FF 
05edc     F1 15 06 F6 | 	mov	arg02, ##@LR__5573
05ee0     13 13 02 F6 | 	mov	arg01, local01
05ee4     54 DE B1 FD | 	call	#__system___string_cmp
05ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eec     AC 01 90 AD |  if_e	jmp	#LR__0491
05ef0     9E 01 00 FF 
05ef4     F7 15 06 F6 | 	mov	arg02, ##@LR__5574
05ef8     13 13 02 F6 | 	mov	arg01, local01
05efc     3C DE B1 FD | 	call	#__system___string_cmp
05f00     00 FA 0D F2 | 	cmp	result1, #0 wz
05f04     9C 01 90 AD |  if_e	jmp	#LR__0492
05f08     9E 01 00 FF 
05f0c     FC 15 06 F6 | 	mov	arg02, ##@LR__5575
05f10     13 13 02 F6 | 	mov	arg01, local01
05f14     24 DE B1 FD | 	call	#__system___string_cmp
05f18     00 FA 0D F2 | 	cmp	result1, #0 wz
05f1c     8C 01 90 AD |  if_e	jmp	#LR__0493
05f20     9F 01 00 FF 
05f24     00 14 06 F6 | 	mov	arg02, ##@LR__5576
05f28     13 13 02 F6 | 	mov	arg01, local01
05f2c     0C DE B1 FD | 	call	#__system___string_cmp
05f30     00 FA 0D F2 | 	cmp	result1, #0 wz
05f34     7C 01 90 AD |  if_e	jmp	#LR__0494
05f38     9F 01 00 FF 
05f3c     04 14 06 F6 | 	mov	arg02, ##@LR__5577
05f40     13 13 02 F6 | 	mov	arg01, local01
05f44     F4 DD B1 FD | 	call	#__system___string_cmp
05f48     00 FA 0D F2 | 	cmp	result1, #0 wz
05f4c     6C 01 90 AD |  if_e	jmp	#LR__0495
05f50     70 01 90 FD | 	jmp	#LR__0496
05f54                 | LR__0450
05f54     9E FA 05 F6 | 	mov	result1, #158
05f58     6C 01 90 FD | 	jmp	#LR__0497
05f5c                 | LR__0451
05f5c     85 FA 05 F6 | 	mov	result1, #133
05f60     64 01 90 FD | 	jmp	#LR__0497
05f64                 | LR__0452
05f64     9B FA 05 F6 | 	mov	result1, #155
05f68     5C 01 90 FD | 	jmp	#LR__0497
05f6c                 | LR__0453
05f6c     9B FA 05 F6 | 	mov	result1, #155
05f70     54 01 90 FD | 	jmp	#LR__0497
05f74                 | LR__0454
05f74     A7 FA 05 F6 | 	mov	result1, #167
05f78     4C 01 90 FD | 	jmp	#LR__0497
05f7c                 | LR__0455
05f7c     84 FA 05 F6 | 	mov	result1, #132
05f80     44 01 90 FD | 	jmp	#LR__0497
05f84                 | LR__0456
05f84     86 FA 05 F6 | 	mov	result1, #134
05f88     3C 01 90 FD | 	jmp	#LR__0497
05f8c                 | LR__0457
05f8c     A2 FA 05 F6 | 	mov	result1, #162
05f90     34 01 90 FD | 	jmp	#LR__0497
05f94                 | LR__0458
05f94     9F FA 05 F6 | 	mov	result1, #159
05f98     2C 01 90 FD | 	jmp	#LR__0497
05f9c                 | LR__0459
05f9c     82 FA 05 F6 | 	mov	result1, #130
05fa0     24 01 90 FD | 	jmp	#LR__0497
05fa4                 | LR__0460
05fa4     99 FA 05 F6 | 	mov	result1, #153
05fa8     1C 01 90 FD | 	jmp	#LR__0497
05fac                 | LR__0461
05fac     C5 FA 05 F6 | 	mov	result1, #197
05fb0     14 01 90 FD | 	jmp	#LR__0497
05fb4                 | LR__0462
05fb4     C5 FA 05 F6 | 	mov	result1, #197
05fb8     0C 01 90 FD | 	jmp	#LR__0497
05fbc                 | LR__0463
05fbc     9C FA 05 F6 | 	mov	result1, #156
05fc0     04 01 90 FD | 	jmp	#LR__0497
05fc4                 | LR__0464
05fc4     6F FA 05 F6 | 	mov	result1, #111
05fc8     FC 00 90 FD | 	jmp	#LR__0497
05fcc                 | LR__0465
05fcc     6F FA 05 F6 | 	mov	result1, #111
05fd0     F4 00 90 FD | 	jmp	#LR__0497
05fd4                 | LR__0466
05fd4     93 FA 05 F6 | 	mov	result1, #147
05fd8     EC 00 90 FD | 	jmp	#LR__0497
05fdc                 | LR__0467
05fdc     94 FA 05 F6 | 	mov	result1, #148
05fe0     E4 00 90 FD | 	jmp	#LR__0497
05fe4                 | LR__0468
05fe4     62 FA 05 F6 | 	mov	result1, #98
05fe8     DC 00 90 FD | 	jmp	#LR__0497
05fec                 | LR__0469
05fec     A3 FA 05 F6 | 	mov	result1, #163
05ff0     D4 00 90 FD | 	jmp	#LR__0497
05ff4                 | LR__0470
05ff4     9D FA 05 F6 | 	mov	result1, #157
05ff8     CC 00 90 FD | 	jmp	#LR__0497
05ffc                 | LR__0471
05ffc     8A FA 05 F6 | 	mov	result1, #138
06000     C4 00 90 FD | 	jmp	#LR__0497
06004                 | LR__0472
06004     A4 FA 05 F6 | 	mov	result1, #164
06008     BC 00 90 FD | 	jmp	#LR__0497
0600c                 | LR__0473
0600c     A8 FA 05 F6 | 	mov	result1, #168
06010     B4 00 90 FD | 	jmp	#LR__0497
06014                 | LR__0474
06014     AD FA 05 F6 | 	mov	result1, #173
06018     AC 00 90 FD | 	jmp	#LR__0497
0601c                 | LR__0475
0601c     9A FA 05 F6 | 	mov	result1, #154
06020     A4 00 90 FD | 	jmp	#LR__0497
06024                 | LR__0476
06024     A6 FA 05 F6 | 	mov	result1, #166
06028     9C 00 90 FD | 	jmp	#LR__0497
0602c                 | LR__0477
0602c     66 FA 05 F6 | 	mov	result1, #102
06030     94 00 90 FD | 	jmp	#LR__0497
06034                 | LR__0478
06034     67 FA 05 F6 | 	mov	result1, #103
06038     8C 00 90 FD | 	jmp	#LR__0497
0603c                 | LR__0479
0603c     64 FA 05 F6 | 	mov	result1, #100
06040     84 00 90 FD | 	jmp	#LR__0497
06044                 | LR__0480
06044     65 FA 05 F6 | 	mov	result1, #101
06048     7C 00 90 FD | 	jmp	#LR__0497
0604c                 | LR__0481
0604c     98 FA 05 F6 | 	mov	result1, #152
06050     74 00 90 FD | 	jmp	#LR__0497
06054                 | LR__0482
06054     7B FA 05 F6 | 	mov	result1, #123
06058     6C 00 90 FD | 	jmp	#LR__0497
0605c                 | LR__0483
0605c     76 FA 05 F6 | 	mov	result1, #118
06060     64 00 90 FD | 	jmp	#LR__0497
06064                 | LR__0484
06064     A5 FA 05 F6 | 	mov	result1, #165
06068     5C 00 90 FD | 	jmp	#LR__0497
0606c                 | LR__0485
0606c     7A FA 05 F6 | 	mov	result1, #122
06070     54 00 90 FD | 	jmp	#LR__0497
06074                 | LR__0486
06074     BF FA 05 F6 | 	mov	result1, #191
06078     4C 00 90 FD | 	jmp	#LR__0497
0607c                 | LR__0487
0607c     54 FA 05 F6 | 	mov	result1, #84
06080     44 00 90 FD | 	jmp	#LR__0497
06084                 | LR__0488
06084     6B FA 05 F6 | 	mov	result1, #107
06088     3C 00 90 FD | 	jmp	#LR__0497
0608c                 | LR__0489
0608c     87 FA 05 F6 | 	mov	result1, #135
06090     34 00 90 FD | 	jmp	#LR__0497
06094                 | LR__0490
06094     6A FA 05 F6 | 	mov	result1, #106
06098     2C 00 90 FD | 	jmp	#LR__0497
0609c                 | LR__0491
0609c     6E FA 05 F6 | 	mov	result1, #110
060a0     24 00 90 FD | 	jmp	#LR__0497
060a4                 | LR__0492
060a4     A1 FA 05 F6 | 	mov	result1, #161
060a8     1C 00 90 FD | 	jmp	#LR__0497
060ac                 | LR__0493
060ac     83 FA 05 F6 | 	mov	result1, #131
060b0     14 00 90 FD | 	jmp	#LR__0497
060b4                 | LR__0494
060b4     A0 FA 05 F6 | 	mov	result1, #160
060b8     0C 00 90 FD | 	jmp	#LR__0497
060bc                 | LR__0495
060bc     9B FA 05 F6 | 	mov	result1, #155
060c0     04 00 90 FD | 	jmp	#LR__0497
060c4                 | LR__0496
060c4     00 FA 05 F6 | 	mov	result1, #0
060c8                 | LR__0497
060c8     A7 F0 03 F6 | 	mov	ptra, fp
060cc     B2 00 A0 FD | 	call	#popregs_
060d0                 | _isfunction_ret
060d0     2D 00 64 FD | 	ret
060d4                 | 
060d4                 | ' 
060d4                 | ' ' Check if the part is a name
060d4                 | ' 
060d4                 | ' function isname(s as string) as boolean
060d4                 | _isname
060d4     0D 4A 05 F6 | 	mov	COUNT_, #13
060d8     A8 00 A0 FD | 	call	#pushregs_
060dc     09 27 02 F6 | 	mov	local01, arg01
060e0     09 29 02 F6 | 	mov	local02, arg01
060e4     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
060e8                 | LR__0500
060e8     14 FB C9 FA | 	rdbyte	result1, local02 wz
060ec     01 28 06 51 |  if_ne	add	local02, #1
060f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
060f4                 | LR__0501
060f4     09 29 82 F1 | 	sub	local02, arg01
060f8     14 FB 01 F6 | 	mov	result1, local02
060fc     FD 2A 0A F6 | 	mov	local03, result1 wz
06100     00 FA 05 A6 |  if_e	mov	result1, #0
06104     34 02 90 AD |  if_e	jmp	#LR__0513
06108     13 13 02 F6 | 	mov	arg01, local01
0610c     01 14 06 F6 | 	mov	arg02, #1
06110     01 16 06 F6 | 	mov	arg03, #1
06114     90 FD B1 FD | 	call	#__system__Mid_S
06118     FD 2C 02 F6 | 	mov	local04, result1
0611c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0611c     9F 01 00 FF 
06120     0B 14 06 F6 | 	mov	arg02, ##@LR__5578
06124     16 13 02 F6 | 	mov	arg01, local04
06128     10 DC B1 FD | 	call	#__system___string_cmp
0612c     00 FA 55 F2 | 	cmps	result1, #0 wc
06130     18 00 90 CD |  if_b	jmp	#LR__0502
06134     9F 01 00 FF 
06138     0D 14 06 F6 | 	mov	arg02, ##@LR__5579
0613c     16 13 02 F6 | 	mov	arg01, local04
06140     F8 DB B1 FD | 	call	#__system___string_cmp
06144     01 FA 55 F2 | 	cmps	result1, #1 wc
06148     1C 00 90 CD |  if_b	jmp	#LR__0503
0614c                 | LR__0502
0614c     9F 01 00 FF 
06150     0F 14 06 F6 | 	mov	arg02, ##@LR__5580
06154     16 13 02 F6 | 	mov	arg01, local04
06158     E0 DB B1 FD | 	call	#__system___string_cmp
0615c     00 FA 0D F2 | 	cmp	result1, #0 wz
06160     00 FA 05 56 |  if_ne	mov	result1, #0
06164     D4 01 90 5D |  if_ne	jmp	#LR__0513
06168                 | LR__0503
06168                 | ' if l>2 then 
06168     03 2A 56 F2 | 	cmps	local03, #3 wc
0616c     C8 01 90 CD |  if_b	jmp	#LR__0512
06170                 | '   for i=2 to l
06170     02 2E 06 F6 | 	mov	local05, #2
06174     15 31 02 F6 | 	mov	local06, local03
06178     01 30 06 F1 | 	add	local06, #1
0617c                 | LR__0504
0617c     18 2F 52 F2 | 	cmps	local05, local06 wc
06180     B4 01 90 3D |  if_ae	jmp	#LR__0511
06184     13 13 02 F6 | 	mov	arg01, local01
06188     17 15 02 F6 | 	mov	arg02, local05
0618c     01 16 06 F6 | 	mov	arg03, #1
06190     14 FD B1 FD | 	call	#__system__Mid_S
06194     FD 2C 02 F6 | 	mov	local04, result1
06198                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06198     15 2F 52 F2 | 	cmps	local05, local03 wc
0619c     9C 00 90 3D |  if_ae	jmp	#LR__0507
061a0     9F 01 00 FF 
061a4     11 14 06 F6 | 	mov	arg02, ##@LR__5581
061a8     16 13 02 F6 | 	mov	arg01, local04
061ac     8C DB B1 FD | 	call	#__system___string_cmp
061b0     00 FA 55 F2 | 	cmps	result1, #0 wc
061b4     18 00 90 CD |  if_b	jmp	#LR__0505
061b8     9F 01 00 FF 
061bc     13 14 06 F6 | 	mov	arg02, ##@LR__5582
061c0     16 13 02 F6 | 	mov	arg01, local04
061c4     74 DB B1 FD | 	call	#__system___string_cmp
061c8     01 FA 55 F2 | 	cmps	result1, #1 wc
061cc     6C 00 90 CD |  if_b	jmp	#LR__0507
061d0                 | LR__0505
061d0     9F 01 00 FF 
061d4     15 14 06 F6 | 	mov	arg02, ##@LR__5583
061d8     16 13 02 F6 | 	mov	arg01, local04
061dc     5C DB B1 FD | 	call	#__system___string_cmp
061e0     00 FA 55 F2 | 	cmps	result1, #0 wc
061e4     18 00 90 CD |  if_b	jmp	#LR__0506
061e8     9F 01 00 FF 
061ec     17 14 06 F6 | 	mov	arg02, ##@LR__5584
061f0     16 13 02 F6 | 	mov	arg01, local04
061f4     44 DB B1 FD | 	call	#__system___string_cmp
061f8     01 FA 55 F2 | 	cmps	result1, #1 wc
061fc     3C 00 90 CD |  if_b	jmp	#LR__0507
06200                 | LR__0506
06200     9F 01 00 FF 
06204     19 32 06 F6 | 	mov	local07, ##@LR__5585
06208     16 13 02 F6 | 	mov	arg01, local04
0620c     19 15 02 F6 | 	mov	arg02, local07
06210     28 DB B1 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     20 00 90 AD |  if_e	jmp	#LR__0507
0621c     9F 01 00 FF 
06220     1B 34 06 F6 | 	mov	local08, ##@LR__5586
06224     16 13 02 F6 | 	mov	arg01, local04
06228     1A 15 02 F6 | 	mov	arg02, local08
0622c     0C DB B1 FD | 	call	#__system___string_cmp
06230     FD 36 0A F6 | 	mov	local09, result1 wz
06234     00 FA 05 56 |  if_ne	mov	result1, #0
06238     00 01 90 5D |  if_ne	jmp	#LR__0513
0623c                 | LR__0507
0623c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0623c     15 2F 0A F2 | 	cmp	local05, local03 wz
06240     EC 00 90 5D |  if_ne	jmp	#LR__0510
06244     9F 01 00 FF 
06248     1D 38 06 F6 | 	mov	local10, ##@LR__5587
0624c     16 13 02 F6 | 	mov	arg01, local04
06250     1C 15 02 F6 | 	mov	arg02, local10
06254     E4 DA B1 FD | 	call	#__system___string_cmp
06258     FD 3A 02 F6 | 	mov	local11, result1
0625c     00 3A 56 F2 | 	cmps	local11, #0 wc
06260     1C 00 90 CD |  if_b	jmp	#LR__0508
06264     9F 01 00 FF 
06268     1F 14 06 F6 | 	mov	arg02, ##@LR__5588
0626c     16 13 02 F6 | 	mov	arg01, local04
06270     C8 DA B1 FD | 	call	#__system___string_cmp
06274     FD 38 02 F6 | 	mov	local10, result1
06278     01 38 56 F2 | 	cmps	local10, #1 wc
0627c     B0 00 90 CD |  if_b	jmp	#LR__0510
06280                 | LR__0508
06280     9F 01 00 FF 
06284     21 14 06 F6 | 	mov	arg02, ##@LR__5589
06288     16 13 02 F6 | 	mov	arg01, local04
0628c     AC DA B1 FD | 	call	#__system___string_cmp
06290     00 FA 55 F2 | 	cmps	result1, #0 wc
06294     1C 00 90 CD |  if_b	jmp	#LR__0509
06298     9F 01 00 FF 
0629c     23 36 06 F6 | 	mov	local09, ##@LR__5590
062a0     16 13 02 F6 | 	mov	arg01, local04
062a4     1B 15 02 F6 | 	mov	arg02, local09
062a8     90 DA B1 FD | 	call	#__system___string_cmp
062ac     01 FA 55 F2 | 	cmps	result1, #1 wc
062b0     7C 00 90 CD |  if_b	jmp	#LR__0510
062b4                 | LR__0509
062b4     9F 01 00 FF 
062b8     25 36 06 F6 | 	mov	local09, ##@LR__5591
062bc     16 13 02 F6 | 	mov	arg01, local04
062c0     1B 15 02 F6 | 	mov	arg02, local09
062c4     74 DA B1 FD | 	call	#__system___string_cmp
062c8     00 FA 4D F2 | 	cmps	result1, #0 wz
062cc     60 00 90 AD |  if_e	jmp	#LR__0510
062d0     9F 01 00 FF 
062d4     27 34 06 F6 | 	mov	local08, ##@LR__5592
062d8     16 13 02 F6 | 	mov	arg01, local04
062dc     1A 15 02 F6 | 	mov	arg02, local08
062e0     58 DA B1 FD | 	call	#__system___string_cmp
062e4     FD 36 0A F6 | 	mov	local09, result1 wz
062e8     44 00 90 AD |  if_e	jmp	#LR__0510
062ec     9F 01 00 FF 
062f0     29 3C 06 F6 | 	mov	local12, ##@LR__5593
062f4     1E 35 02 F6 | 	mov	local08, local12
062f8     16 13 02 F6 | 	mov	arg01, local04
062fc     1A 15 02 F6 | 	mov	arg02, local08
06300     38 DA B1 FD | 	call	#__system___string_cmp
06304     FD 32 0A F6 | 	mov	local07, result1 wz
06308     24 00 90 AD |  if_e	jmp	#LR__0510
0630c     9F 01 00 FF 
06310     2B 3E 06 F6 | 	mov	local13, ##@LR__5594
06314     1F 3D 02 F6 | 	mov	local12, local13
06318     16 13 02 F6 | 	mov	arg01, local04
0631c     1E 15 02 F6 | 	mov	arg02, local12
06320     18 DA B1 FD | 	call	#__system___string_cmp
06324     FD 34 0A F6 | 	mov	local08, result1 wz
06328     00 FA 05 56 |  if_ne	mov	result1, #0
0632c     0C 00 90 5D |  if_ne	jmp	#LR__0513
06330                 | LR__0510
06330     01 2E 06 F1 | 	add	local05, #1
06334     44 FE 9F FD | 	jmp	#LR__0504
06338                 | LR__0511
06338                 | LR__0512
06338                 | ' return true
06338     01 FA 65 F6 | 	neg	result1, #1
0633c                 | LR__0513
0633c     A7 F0 03 F6 | 	mov	ptra, fp
06340     B2 00 A0 FD | 	call	#popregs_
06344                 | _isname_ret
06344     2D 00 64 FD | 	ret
06348                 | 
06348                 | ' 
06348                 | ' ' Check if the part is a number.  
06348                 | ' 
06348                 | ' function isnum(s as string) as boolean 
06348                 | _isnum
06348     13 4A 05 F6 | 	mov	COUNT_, #19
0634c     A8 00 A0 FD | 	call	#pushregs_
06350     09 27 02 F6 | 	mov	local01, arg01
06354     00 28 06 F6 | 	mov	local02, #0
06358     00 2A 06 F6 | 	mov	local03, #0
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     09 2D 02 F6 | 	mov	local04, arg01
06364     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06368                 | LR__0520
06368     16 FB C9 FA | 	rdbyte	result1, local04 wz
0636c     01 2C 06 51 |  if_ne	add	local04, #1
06370     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06374                 | LR__0521
06374     09 2D 82 F1 | 	sub	local04, arg01
06378     16 FB 01 F6 | 	mov	result1, local04
0637c     FD 2E 0A F6 | 	mov	local05, result1 wz
06380     00 FA 05 A6 |  if_e	mov	result1, #0
06384     A0 03 90 AD |  if_e	jmp	#LR__0536
06388     13 13 02 F6 | 	mov	arg01, local01
0638c     01 14 06 F6 | 	mov	arg02, #1
06390     01 16 06 F6 | 	mov	arg03, #1
06394     10 FB B1 FD | 	call	#__system__Mid_S
06398     FD 30 02 F6 | 	mov	local06, result1
0639c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0639c     9F 01 00 FF 
063a0     2D 14 06 F6 | 	mov	arg02, ##@LR__5595
063a4     18 13 02 F6 | 	mov	arg01, local06
063a8     90 D9 B1 FD | 	call	#__system___string_cmp
063ac     00 FA 55 F2 | 	cmps	result1, #0 wc
063b0     1C 00 90 CD |  if_b	jmp	#LR__0522
063b4     9F 01 00 FF 
063b8     2F 32 06 F6 | 	mov	local07, ##@LR__5596
063bc     18 13 02 F6 | 	mov	arg01, local06
063c0     19 15 02 F6 | 	mov	arg02, local07
063c4     74 D9 B1 FD | 	call	#__system___string_cmp
063c8     01 FA 55 F2 | 	cmps	result1, #1 wc
063cc     84 00 90 CD |  if_b	jmp	#LR__0523
063d0                 | LR__0522
063d0     9F 01 00 FF 
063d4     31 34 06 F6 | 	mov	local08, ##@LR__5597
063d8     1A 33 02 F6 | 	mov	local07, local08
063dc     18 13 02 F6 | 	mov	arg01, local06
063e0     19 15 02 F6 | 	mov	arg02, local07
063e4     54 D9 B1 FD | 	call	#__system___string_cmp
063e8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ec     64 00 90 AD |  if_e	jmp	#LR__0523
063f0     9F 01 00 FF 
063f4     33 36 06 F6 | 	mov	local09, ##@LR__5598
063f8     1B 35 02 F6 | 	mov	local08, local09
063fc     18 13 02 F6 | 	mov	arg01, local06
06400     1A 15 02 F6 | 	mov	arg02, local08
06404     34 D9 B1 FD | 	call	#__system___string_cmp
06408     FD 32 0A F6 | 	mov	local07, result1 wz
0640c     44 00 90 AD |  if_e	jmp	#LR__0523
06410     9F 01 00 FF 
06414     35 38 06 F6 | 	mov	local10, ##@LR__5599
06418     1C 37 02 F6 | 	mov	local09, local10
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     1B 15 02 F6 | 	mov	arg02, local09
06424     14 D9 B1 FD | 	call	#__system___string_cmp
06428     FD 34 0A F6 | 	mov	local08, result1 wz
0642c     24 00 90 AD |  if_e	jmp	#LR__0523
06430     9F 01 00 FF 
06434     37 3A 06 F6 | 	mov	local11, ##@LR__5600
06438     1D 39 02 F6 | 	mov	local10, local11
0643c     18 13 02 F6 | 	mov	arg01, local06
06440     1C 15 02 F6 | 	mov	arg02, local10
06444     F4 D8 B1 FD | 	call	#__system___string_cmp
06448     FD 36 0A F6 | 	mov	local09, result1 wz
0644c     00 FA 05 56 |  if_ne	mov	result1, #0
06450     D4 02 90 5D |  if_ne	jmp	#LR__0536
06454                 | LR__0523
06454                 | ' if m$="." then ds=1
06454     9F 01 00 FF 
06458     39 14 06 F6 | 	mov	arg02, ##@LR__5601
0645c     18 13 02 F6 | 	mov	arg01, local06
06460     D8 D8 B1 FD | 	call	#__system___string_cmp
06464     00 FA 0D F2 | 	cmp	result1, #0 wz
06468     01 28 06 A6 |  if_e	mov	local02, #1
0646c                 | ' if m$="$" then hex=1 else hex=0
0646c     9F 01 00 FF 
06470     3B 14 06 F6 | 	mov	arg02, ##@LR__5602
06474     18 13 02 F6 | 	mov	arg01, local06
06478     C0 D8 B1 FD | 	call	#__system___string_cmp
0647c     00 FA 0D F2 | 	cmp	result1, #0 wz
06480     01 3C 06 A6 |  if_e	mov	local12, #1
06484     00 3C 06 56 |  if_ne	mov	local12, #0
06488                 | ' if m$="%" then bin=1 else bin=0
06488     9F 01 00 FF 
0648c     3D 14 06 F6 | 	mov	arg02, ##@LR__5603
06490     18 13 02 F6 | 	mov	arg01, local06
06494     A4 D8 B1 FD | 	call	#__system___string_cmp
06498     00 FA 0D F2 | 	cmp	result1, #0 wz
0649c     01 3E 06 A6 |  if_e	mov	local13, #1
064a0     00 3E 06 56 |  if_ne	mov	local13, #0
064a4                 | ' if l>1 then 
064a4     02 2E 56 F2 | 	cmps	local05, #2 wc
064a8     78 02 90 CD |  if_b	jmp	#LR__0535
064ac                 | '   for i=2 to l
064ac     02 40 06 F6 | 	mov	local14, #2
064b0     17 43 02 F6 | 	mov	local15, local05
064b4     01 42 06 F1 | 	add	local15, #1
064b8                 | LR__0524
064b8     21 41 52 F2 | 	cmps	local14, local15 wc
064bc     64 02 90 3D |  if_ae	jmp	#LR__0534
064c0     13 13 02 F6 | 	mov	arg01, local01
064c4     20 15 02 F6 | 	mov	arg02, local14
064c8     01 16 06 F6 | 	mov	arg03, #1
064cc     D8 F9 B1 FD | 	call	#__system__Mid_S
064d0     FD 30 02 F6 | 	mov	local06, result1
064d4     00 44 06 F6 | 	mov	local16, #0
064d8                 | '     m$=mid$(s,i,1) : b=false
064d8                 | '     if m$>="0" andalso m$<="9" then b=true  
064d8     9F 01 00 FF 
064dc     3F 14 06 F6 | 	mov	arg02, ##@LR__5604
064e0     18 13 02 F6 | 	mov	arg01, local06
064e4     54 D8 B1 FD | 	call	#__system___string_cmp
064e8     00 FA 55 F2 | 	cmps	result1, #0 wc
064ec     1C 00 90 CD |  if_b	jmp	#LR__0525
064f0     9F 01 00 FF 
064f4     41 32 06 F6 | 	mov	local07, ##@LR__5605
064f8     18 13 02 F6 | 	mov	arg01, local06
064fc     19 15 02 F6 | 	mov	arg02, local07
06500     38 D8 B1 FD | 	call	#__system___string_cmp
06504     01 FA 55 F2 | 	cmps	result1, #1 wc
06508     01 44 66 C6 |  if_b	neg	local16, #1
0650c                 | LR__0525
0650c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0650c     9F 01 00 FF 
06510     43 14 06 F6 | 	mov	arg02, ##@LR__5606
06514     18 13 02 F6 | 	mov	arg01, local06
06518     20 D8 B1 FD | 	call	#__system___string_cmp
0651c     00 FA 0D F2 | 	cmp	result1, #0 wz
06520     7C 00 90 AD |  if_e	jmp	#LR__0526
06524     9F 01 00 FF 
06528     45 32 06 F6 | 	mov	local07, ##@LR__5607
0652c     18 13 02 F6 | 	mov	arg01, local06
06530     19 15 02 F6 | 	mov	arg02, local07
06534     04 D8 B1 FD | 	call	#__system___string_cmp
06538     00 FA 0D F2 | 	cmp	result1, #0 wz
0653c     60 00 90 AD |  if_e	jmp	#LR__0526
06540     9F 01 00 FF 
06544     47 34 06 F6 | 	mov	local08, ##@LR__5608
06548     1A 33 02 F6 | 	mov	local07, local08
0654c     18 13 02 F6 | 	mov	arg01, local06
06550     19 15 02 F6 | 	mov	arg02, local07
06554     E4 D7 B1 FD | 	call	#__system___string_cmp
06558     00 FA 0D F2 | 	cmp	result1, #0 wz
0655c     40 00 90 AD |  if_e	jmp	#LR__0526
06560     9F 01 00 FF 
06564     49 36 06 F6 | 	mov	local09, ##@LR__5609
06568     1B 35 02 F6 | 	mov	local08, local09
0656c     18 13 02 F6 | 	mov	arg01, local06
06570     1A 15 02 F6 | 	mov	arg02, local08
06574     C4 D7 B1 FD | 	call	#__system___string_cmp
06578     FD 32 0A F6 | 	mov	local07, result1 wz
0657c     20 00 90 AD |  if_e	jmp	#LR__0526
06580     9F 01 00 FF 
06584     4B 38 06 F6 | 	mov	local10, ##@LR__5610
06588     1C 37 02 F6 | 	mov	local09, local10
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     1B 15 02 F6 | 	mov	arg02, local09
06594     A4 D7 B1 FD | 	call	#__system___string_cmp
06598     FD 34 0A F6 | 	mov	local08, result1 wz
0659c     04 00 90 5D |  if_ne	jmp	#LR__0527
065a0                 | LR__0526
065a0     01 44 66 F6 | 	neg	local16, #1
065a4                 | LR__0527
065a4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
065a4     01 3C 0E F2 | 	cmp	local12, #1 wz
065a8     34 00 90 5D |  if_ne	jmp	#LR__0528
065ac     9F 01 00 FF 
065b0     4D 14 06 F6 | 	mov	arg02, ##@LR__5611
065b4     18 13 02 F6 | 	mov	arg01, local06
065b8     80 D7 B1 FD | 	call	#__system___string_cmp
065bc     00 FA 55 F2 | 	cmps	result1, #0 wc
065c0     1C 00 90 CD |  if_b	jmp	#LR__0528
065c4     9F 01 00 FF 
065c8     4F 32 06 F6 | 	mov	local07, ##@LR__5612
065cc     18 13 02 F6 | 	mov	arg01, local06
065d0     19 15 02 F6 | 	mov	arg02, local07
065d4     64 D7 B1 FD | 	call	#__system___string_cmp
065d8     01 FA 55 F2 | 	cmps	result1, #1 wc
065dc     01 44 66 C6 |  if_b	neg	local16, #1
065e0                 | LR__0528
065e0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
065e0     01 3E 0E F2 | 	cmp	local13, #1 wz
065e4     58 00 90 5D |  if_ne	jmp	#LR__0530
065e8     9F 01 00 FF 
065ec     51 14 06 F6 | 	mov	arg02, ##@LR__5613
065f0     18 13 02 F6 | 	mov	arg01, local06
065f4     44 D7 B1 FD | 	call	#__system___string_cmp
065f8     00 FA 55 F2 | 	cmps	result1, #0 wc
065fc     1C 00 90 CD |  if_b	jmp	#LR__0529
06600     9F 01 00 FF 
06604     53 32 06 F6 | 	mov	local07, ##@LR__5614
06608     18 13 02 F6 | 	mov	arg01, local06
0660c     19 15 02 F6 | 	mov	arg02, local07
06610     28 D7 B1 FD | 	call	#__system___string_cmp
06614     01 FA 55 F2 | 	cmps	result1, #1 wc
06618     24 00 90 CD |  if_b	jmp	#LR__0530
0661c                 | LR__0529
0661c     9F 01 00 FF 
06620     55 34 06 F6 | 	mov	local08, ##@LR__5615
06624     1A 33 02 F6 | 	mov	local07, local08
06628     18 13 02 F6 | 	mov	arg01, local06
0662c     19 15 02 F6 | 	mov	arg02, local07
06630     08 D7 B1 FD | 	call	#__system___string_cmp
06634     00 FA 0D F2 | 	cmp	result1, #0 wz
06638     00 FA 05 56 |  if_ne	mov	result1, #0
0663c     E8 00 90 5D |  if_ne	jmp	#LR__0536
06640                 | LR__0530
06640                 | '     if not b then return false
06640     22 45 22 F6 | 	not	local16, local16
06644     00 44 0E F2 | 	cmp	local16, #0 wz
06648     00 FA 05 56 |  if_ne	mov	result1, #0
0664c     D8 00 90 5D |  if_ne	jmp	#LR__0536
06650                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06650     9F 01 00 FF 
06654     57 14 06 F6 | 	mov	arg02, ##@LR__5616
06658     18 13 02 F6 | 	mov	arg01, local06
0665c     DC D6 B1 FD | 	call	#__system___string_cmp
06660     00 FA 0D F2 | 	cmp	result1, #0 wz
06664     3C 00 90 5D |  if_ne	jmp	#LR__0531
06668     20 15 02 F6 | 	mov	arg02, local14
0666c     01 14 86 F1 | 	sub	arg02, #1
06670     13 13 02 F6 | 	mov	arg01, local01
06674     01 16 06 F6 | 	mov	arg03, #1
06678     2C F8 B1 FD | 	call	#__system__Mid_S
0667c     FD 12 02 F6 | 	mov	arg01, result1
06680     1C FA B1 FD | 	call	#__system__LCase_S
06684     FD 12 02 F6 | 	mov	arg01, result1
06688     9F 01 00 FF 
0668c     59 32 06 F6 | 	mov	local07, ##@LR__5617
06690     19 15 02 F6 | 	mov	arg02, local07
06694     A4 D6 B1 FD | 	call	#__system___string_cmp
06698     00 FA 0D F2 | 	cmp	result1, #0 wz
0669c     00 FA 05 56 |  if_ne	mov	result1, #0
066a0     84 00 90 5D |  if_ne	jmp	#LR__0536
066a4                 | LR__0531
066a4                 | '     if m$="." then ds+=1: if ds>1 then return false
066a4     9F 01 00 FF 
066a8     5B 14 06 F6 | 	mov	arg02, ##@LR__5618
066ac     18 13 02 F6 | 	mov	arg01, local06
066b0     88 D6 B1 FD | 	call	#__system___string_cmp
066b4     00 FA 0D F2 | 	cmp	result1, #0 wz
066b8     01 28 06 A1 |  if_e	add	local02, #1
066bc     02 28 56 A2 |  if_e	cmps	local02, #2 wc
066c0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
066c4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0536
066c8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
066c8     9F 01 00 FF 
066cc     5D 46 06 F6 | 	mov	local17, ##@LR__5619
066d0     23 49 02 F6 | 	mov	local18, local17
066d4     18 13 02 F6 | 	mov	arg01, local06
066d8     24 15 02 F6 | 	mov	arg02, local18
066dc     5C D6 B1 FD | 	call	#__system___string_cmp
066e0     FD 4A 0A F6 | 	mov	local19, result1 wz
066e4     20 00 90 AD |  if_e	jmp	#LR__0532
066e8     9F 01 00 FF 
066ec     5F 32 06 F6 | 	mov	local07, ##@LR__5620
066f0     19 47 02 F6 | 	mov	local17, local07
066f4     18 13 02 F6 | 	mov	arg01, local06
066f8     23 15 02 F6 | 	mov	arg02, local17
066fc     3C D6 B1 FD | 	call	#__system___string_cmp
06700     FD 48 0A F6 | 	mov	local18, result1 wz
06704     14 00 90 5D |  if_ne	jmp	#LR__0533
06708                 | LR__0532
06708     01 2A 06 F1 | 	add	local03, #1
0670c     00 3C 0E F2 | 	cmp	local12, #0 wz
06710     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06714     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06718     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0536
0671c                 | LR__0533
0671c     01 40 06 F1 | 	add	local14, #1
06720     94 FD 9F FD | 	jmp	#LR__0524
06724                 | LR__0534
06724                 | LR__0535
06724                 | ' return true
06724     01 FA 65 F6 | 	neg	result1, #1
06728                 | LR__0536
06728     A7 F0 03 F6 | 	mov	ptra, fp
0672c     B2 00 A0 FD | 	call	#popregs_
06730                 | _isnum_ret
06730     2D 00 64 FD | 	ret
06734                 | 
06734                 | '   
06734                 | ' ' Check if the part is an integer number.    
06734                 | '   
06734                 | ' function isint(s as string) as boolean
06734                 | _isint
06734     0E 4A 05 F6 | 	mov	COUNT_, #14
06738     A8 00 A0 FD | 	call	#pushregs_
0673c     09 27 02 F6 | 	mov	local01, arg01
06740     09 29 02 F6 | 	mov	local02, arg01
06744     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
06748                 | LR__0540
06748     14 FB C9 FA | 	rdbyte	result1, local02 wz
0674c     01 28 06 51 |  if_ne	add	local02, #1
06750     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06754                 | LR__0541
06754     09 29 82 F1 | 	sub	local02, arg01
06758     14 FB 01 F6 | 	mov	result1, local02
0675c     FD 2A 0A F6 | 	mov	local03, result1 wz
06760     00 FA 05 A6 |  if_e	mov	result1, #0
06764     64 02 90 AD |  if_e	jmp	#LR__0554
06768     13 13 02 F6 | 	mov	arg01, local01
0676c     01 14 06 F6 | 	mov	arg02, #1
06770     01 16 06 F6 | 	mov	arg03, #1
06774     30 F7 B1 FD | 	call	#__system__Mid_S
06778     FD 2C 02 F6 | 	mov	local04, result1
0677c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0677c     9F 01 00 FF 
06780     61 14 06 F6 | 	mov	arg02, ##@LR__5621
06784     16 13 02 F6 | 	mov	arg01, local04
06788     B0 D5 B1 FD | 	call	#__system___string_cmp
0678c     00 FA 55 F2 | 	cmps	result1, #0 wc
06790     1C 00 90 CD |  if_b	jmp	#LR__0542
06794     9F 01 00 FF 
06798     63 2E 06 F6 | 	mov	local05, ##@LR__5622
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     17 15 02 F6 | 	mov	arg02, local05
067a4     94 D5 B1 FD | 	call	#__system___string_cmp
067a8     01 FA 55 F2 | 	cmps	result1, #1 wc
067ac     64 00 90 CD |  if_b	jmp	#LR__0543
067b0                 | LR__0542
067b0     9F 01 00 FF 
067b4     65 30 06 F6 | 	mov	local06, ##@LR__5623
067b8     18 2F 02 F6 | 	mov	local05, local06
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     17 15 02 F6 | 	mov	arg02, local05
067c4     74 D5 B1 FD | 	call	#__system___string_cmp
067c8     00 FA 0D F2 | 	cmp	result1, #0 wz
067cc     44 00 90 AD |  if_e	jmp	#LR__0543
067d0     9F 01 00 FF 
067d4     67 32 06 F6 | 	mov	local07, ##@LR__5624
067d8     19 31 02 F6 | 	mov	local06, local07
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     18 15 02 F6 | 	mov	arg02, local06
067e4     54 D5 B1 FD | 	call	#__system___string_cmp
067e8     FD 2E 0A F6 | 	mov	local05, result1 wz
067ec     24 00 90 AD |  if_e	jmp	#LR__0543
067f0     9F 01 00 FF 
067f4     69 34 06 F6 | 	mov	local08, ##@LR__5625
067f8     1A 33 02 F6 | 	mov	local07, local08
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     19 15 02 F6 | 	mov	arg02, local07
06804     34 D5 B1 FD | 	call	#__system___string_cmp
06808     FD 30 0A F6 | 	mov	local06, result1 wz
0680c     00 FA 05 56 |  if_ne	mov	result1, #0
06810     B8 01 90 5D |  if_ne	jmp	#LR__0554
06814                 | LR__0543
06814                 | ' if m$="$" then hex=1 else hex=0
06814     9F 01 00 FF 
06818     6B 14 06 F6 | 	mov	arg02, ##@LR__5626
0681c     16 13 02 F6 | 	mov	arg01, local04
06820     18 D5 B1 FD | 	call	#__system___string_cmp
06824     00 FA 0D F2 | 	cmp	result1, #0 wz
06828     01 36 06 A6 |  if_e	mov	local09, #1
0682c     00 36 06 56 |  if_ne	mov	local09, #0
06830                 | ' if m$="%" then bin=1 else bin=0
06830     9F 01 00 FF 
06834     6D 14 06 F6 | 	mov	arg02, ##@LR__5627
06838     16 13 02 F6 | 	mov	arg01, local04
0683c     FC D4 B1 FD | 	call	#__system___string_cmp
06840     00 FA 0D F2 | 	cmp	result1, #0 wz
06844     01 38 06 A6 |  if_e	mov	local10, #1
06848     00 38 06 56 |  if_ne	mov	local10, #0
0684c                 | ' if l>1 then 
0684c     02 2A 56 F2 | 	cmps	local03, #2 wc
06850     74 01 90 CD |  if_b	jmp	#LR__0553
06854                 | '   for i=2 to l
06854     02 3A 06 F6 | 	mov	local11, #2
06858     15 3D 02 F6 | 	mov	local12, local03
0685c     01 3C 06 F1 | 	add	local12, #1
06860                 | LR__0544
06860     1E 3B 52 F2 | 	cmps	local11, local12 wc
06864     60 01 90 3D |  if_ae	jmp	#LR__0552
06868     13 13 02 F6 | 	mov	arg01, local01
0686c     1D 15 02 F6 | 	mov	arg02, local11
06870     01 16 06 F6 | 	mov	arg03, #1
06874     30 F6 B1 FD | 	call	#__system__Mid_S
06878     FD 2C 02 F6 | 	mov	local04, result1
0687c                 | '     m$=mid$(s,i,1) 
0687c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0687c     00 36 0E F2 | 	cmp	local09, #0 wz
06880     50 00 90 5D |  if_ne	jmp	#LR__0546
06884     9F 01 00 FF 
06888     6F 14 06 F6 | 	mov	arg02, ##@LR__5628
0688c     16 13 02 F6 | 	mov	arg01, local04
06890     A8 D4 B1 FD | 	call	#__system___string_cmp
06894     00 FA 55 F2 | 	cmps	result1, #0 wc
06898     18 00 90 CD |  if_b	jmp	#LR__0545
0689c     9F 01 00 FF 
068a0     71 14 06 F6 | 	mov	arg02, ##@LR__5629
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     90 D4 B1 FD | 	call	#__system___string_cmp
068ac     01 FA 55 F2 | 	cmps	result1, #1 wc
068b0     20 00 90 CD |  if_b	jmp	#LR__0546
068b4                 | LR__0545
068b4     9F 01 00 FF 
068b8     73 30 06 F6 | 	mov	local06, ##@LR__5630
068bc     16 13 02 F6 | 	mov	arg01, local04
068c0     18 15 02 F6 | 	mov	arg02, local06
068c4     74 D4 B1 FD | 	call	#__system___string_cmp
068c8     00 FA 0D F2 | 	cmp	result1, #0 wz
068cc     00 FA 05 56 |  if_ne	mov	result1, #0
068d0     F8 00 90 5D |  if_ne	jmp	#LR__0554
068d4                 | LR__0546
068d4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
068d4     01 36 0E F2 | 	cmp	local09, #1 wz
068d8     90 00 90 5D |  if_ne	jmp	#LR__0549
068dc     9F 01 00 FF 
068e0     75 14 06 F6 | 	mov	arg02, ##@LR__5631
068e4     16 13 02 F6 | 	mov	arg01, local04
068e8     50 D4 B1 FD | 	call	#__system___string_cmp
068ec     00 FA 55 F2 | 	cmps	result1, #0 wc
068f0     1C 00 90 CD |  if_b	jmp	#LR__0547
068f4     9F 01 00 FF 
068f8     77 14 06 F6 | 	mov	arg02, ##@LR__5632
068fc     16 13 02 F6 | 	mov	arg01, local04
06900     38 D4 B1 FD | 	call	#__system___string_cmp
06904     FD 3E 02 F6 | 	mov	local13, result1
06908     01 3E 56 F2 | 	cmps	local13, #1 wc
0690c     5C 00 90 CD |  if_b	jmp	#LR__0549
06910                 | LR__0547
06910     9F 01 00 FF 
06914     79 2E 06 F6 | 	mov	local05, ##@LR__5633
06918     16 13 02 F6 | 	mov	arg01, local04
0691c     17 15 02 F6 | 	mov	arg02, local05
06920     18 D4 B1 FD | 	call	#__system___string_cmp
06924     FD 40 02 F6 | 	mov	local14, result1
06928     00 40 56 F2 | 	cmps	local14, #0 wc
0692c     1C 00 90 CD |  if_b	jmp	#LR__0548
06930     9F 01 00 FF 
06934     7B 32 06 F6 | 	mov	local07, ##@LR__5634
06938     16 13 02 F6 | 	mov	arg01, local04
0693c     19 15 02 F6 | 	mov	arg02, local07
06940     F8 D3 B1 FD | 	call	#__system___string_cmp
06944     01 FA 55 F2 | 	cmps	result1, #1 wc
06948     20 00 90 CD |  if_b	jmp	#LR__0549
0694c                 | LR__0548
0694c     9F 01 00 FF 
06950     7D 34 06 F6 | 	mov	local08, ##@LR__5635
06954     16 13 02 F6 | 	mov	arg01, local04
06958     1A 15 02 F6 | 	mov	arg02, local08
0695c     DC D3 B1 FD | 	call	#__system___string_cmp
06960     00 FA 0D F2 | 	cmp	result1, #0 wz
06964     00 FA 05 56 |  if_ne	mov	result1, #0
06968     60 00 90 5D |  if_ne	jmp	#LR__0554
0696c                 | LR__0549
0696c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0696c     01 38 0E F2 | 	cmp	local10, #1 wz
06970     4C 00 90 5D |  if_ne	jmp	#LR__0551
06974     9F 01 00 FF 
06978     7F 14 06 F6 | 	mov	arg02, ##@LR__5636
0697c     16 13 02 F6 | 	mov	arg01, local04
06980     B8 D3 B1 FD | 	call	#__system___string_cmp
06984     00 FA 55 F2 | 	cmps	result1, #0 wc
06988     18 00 90 CD |  if_b	jmp	#LR__0550
0698c     9F 01 00 FF 
06990     81 14 06 F6 | 	mov	arg02, ##@LR__5637
06994     16 13 02 F6 | 	mov	arg01, local04
06998     A0 D3 B1 FD | 	call	#__system___string_cmp
0699c     01 FA 55 F2 | 	cmps	result1, #1 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0551
069a4                 | LR__0550
069a4     9F 01 00 FF 
069a8     83 14 06 F6 | 	mov	arg02, ##@LR__5638
069ac     16 13 02 F6 | 	mov	arg01, local04
069b0     88 D3 B1 FD | 	call	#__system___string_cmp
069b4     00 FA 0D F2 | 	cmp	result1, #0 wz
069b8     00 FA 05 56 |  if_ne	mov	result1, #0
069bc     0C 00 90 5D |  if_ne	jmp	#LR__0554
069c0                 | LR__0551
069c0     01 3A 06 F1 | 	add	local11, #1
069c4     98 FE 9F FD | 	jmp	#LR__0544
069c8                 | LR__0552
069c8                 | LR__0553
069c8                 | ' return true
069c8     01 FA 65 F6 | 	neg	result1, #1
069cc                 | LR__0554
069cc     A7 F0 03 F6 | 	mov	ptra, fp
069d0     B2 00 A0 FD | 	call	#popregs_
069d4                 | _isint_ret
069d4     2D 00 64 FD | 	ret
069d8                 | 
069d8                 | ' 
069d8                 | ' ' Check if the part is a positive decimal number.  
069d8                 | ' 
069d8                 | ' function isdec(s as string) as boolean
069d8                 | _isdec
069d8     05 4A 05 F6 | 	mov	COUNT_, #5
069dc     A8 00 A0 FD | 	call	#pushregs_
069e0     09 27 02 F6 | 	mov	local01, arg01
069e4     09 29 02 F6 | 	mov	local02, arg01
069e8     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
069ec                 | LR__0560
069ec     14 FB C9 FA | 	rdbyte	result1, local02 wz
069f0     01 28 06 51 |  if_ne	add	local02, #1
069f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
069f8                 | LR__0561
069f8     09 29 82 F1 | 	sub	local02, arg01
069fc     14 FB 01 F6 | 	mov	result1, local02
06a00     FD 28 0A F6 | 	mov	local02, result1 wz
06a04     00 FA 05 A6 |  if_e	mov	result1, #0
06a08     80 00 90 AD |  if_e	jmp	#LR__0566
06a0c                 | ' for i=1 to l
06a0c     01 2A 06 F6 | 	mov	local03, #1
06a10     14 2D 02 F6 | 	mov	local04, local02
06a14     01 2C 06 F1 | 	add	local04, #1
06a18                 | LR__0562
06a18     16 2B 52 F2 | 	cmps	local03, local04 wc
06a1c     68 00 90 3D |  if_ae	jmp	#LR__0565
06a20     13 13 02 F6 | 	mov	arg01, local01
06a24     15 15 02 F6 | 	mov	arg02, local03
06a28     01 16 06 F6 | 	mov	arg03, #1
06a2c     78 F4 B1 FD | 	call	#__system__Mid_S
06a30     FD 2E 02 F6 | 	mov	local05, result1
06a34                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06a34     9F 01 00 FF 
06a38     85 14 06 F6 | 	mov	arg02, ##@LR__5639
06a3c     17 13 02 F6 | 	mov	arg01, local05
06a40     F8 D2 B1 FD | 	call	#__system___string_cmp
06a44     00 FA 55 F2 | 	cmps	result1, #0 wc
06a48     18 00 90 CD |  if_b	jmp	#LR__0563
06a4c     9F 01 00 FF 
06a50     87 14 06 F6 | 	mov	arg02, ##@LR__5640
06a54     17 13 02 F6 | 	mov	arg01, local05
06a58     E0 D2 B1 FD | 	call	#__system___string_cmp
06a5c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a60     1C 00 90 CD |  if_b	jmp	#LR__0564
06a64                 | LR__0563
06a64     9F 01 00 FF 
06a68     89 14 06 F6 | 	mov	arg02, ##@LR__5641
06a6c     17 13 02 F6 | 	mov	arg01, local05
06a70     C8 D2 B1 FD | 	call	#__system___string_cmp
06a74     00 FA 0D F2 | 	cmp	result1, #0 wz
06a78     00 FA 05 56 |  if_ne	mov	result1, #0
06a7c     0C 00 90 5D |  if_ne	jmp	#LR__0566
06a80                 | LR__0564
06a80     01 2A 06 F1 | 	add	local03, #1
06a84     90 FF 9F FD | 	jmp	#LR__0562
06a88                 | LR__0565
06a88                 | ' return true
06a88     01 FA 65 F6 | 	neg	result1, #1
06a8c                 | LR__0566
06a8c     A7 F0 03 F6 | 	mov	ptra, fp
06a90     B2 00 A0 FD | 	call	#popregs_
06a94                 | _isdec_ret
06a94     2D 00 64 FD | 	ret
06a98                 | 
06a98                 | ' 
06a98                 | ' ' Check if the part is a string.  
06a98                 | ' 
06a98                 | ' function isstring(s as string) as boolean
06a98                 | _isstring
06a98     01 4A 05 F6 | 	mov	COUNT_, #1
06a9c     A8 00 A0 FD | 	call	#pushregs_
06aa0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06aa0     09 27 02 F6 | 	mov	local01, arg01
06aa4     01 14 06 F6 | 	mov	arg02, #1
06aa8     E4 F2 B1 FD | 	call	#__system__Left_S
06aac     FD 12 02 F6 | 	mov	arg01, result1
06ab0     9F 01 00 FF 
06ab4     8B 14 06 F6 | 	mov	arg02, ##@LR__5642
06ab8     80 D2 B1 FD | 	call	#__system___string_cmp
06abc     00 FA 4D F2 | 	cmps	result1, #0 wz
06ac0     28 00 90 5D |  if_ne	jmp	#LR__0570
06ac4     13 13 02 F6 | 	mov	arg01, local01
06ac8     01 14 06 F6 | 	mov	arg02, #1
06acc     48 F3 B1 FD | 	call	#__system__Right_S
06ad0     FD 12 02 F6 | 	mov	arg01, result1
06ad4     9F 01 00 FF 
06ad8     8D 14 06 F6 | 	mov	arg02, ##@LR__5643
06adc     5C D2 B1 FD | 	call	#__system___string_cmp
06ae0     00 FA 4D F2 | 	cmps	result1, #0 wz
06ae4     01 FA 65 A6 |  if_e	neg	result1, #1
06ae8     04 00 90 AD |  if_e	jmp	#LR__0571
06aec                 | LR__0570
06aec     00 FA 05 F6 | 	mov	result1, #0
06af0                 | LR__0571
06af0     A7 F0 03 F6 | 	mov	ptra, fp
06af4     B2 00 A0 FD | 	call	#popregs_
06af8                 | _isstring_ret
06af8     2D 00 64 FD | 	ret
06afc                 | 
06afc                 | ' 
06afc                 | ' ' getnoteval. Returns the frequency of note token
06afc                 | ' 
06afc                 | ' function getnoteval(token) as single
06afc                 | _getnoteval
06afc     02 4A 05 F6 | 	mov	COUNT_, #2
06b00     A8 00 A0 FD | 	call	#pushregs_
06b04     01 00 00 FF 
06b08     00 13 86 F1 | 	sub	arg01, ##768
06b0c     09 15 52 F6 | 	abs	arg02, arg01 wc
06b10     0C 14 16 FD | 	qdiv	arg02, #12
06b14     14 00 00 FF 
06b18     D8 E4 05 F1 | 	add	objptr, ##10456
06b1c     19 14 62 FD | 	getqy	arg02
06b20     0A 15 82 F6 | 	negc	arg02, arg02
06b24     02 14 66 F0 | 	shl	arg02, #2
06b28     F2 14 02 F1 | 	add	arg02, objptr
06b2c     0A 27 02 FB | 	rdlong	local01, arg02
06b30     09 15 52 F6 | 	abs	arg02, arg01 wc
06b34     0C 14 16 FD | 	qdiv	arg02, #12
06b38     14 00 00 FF 
06b3c     D8 E4 85 F1 | 	sub	objptr, ##10456
06b40     01 12 06 F6 | 	mov	arg01, #1
06b44                 | ' noteexp=1+(note/12) 
06b44                 | ' return (2.0^noteexp)*notebase
06b44     18 14 62 FD | 	getqx	arg02
06b48     0A 13 82 F3 | 	sumc	arg01, arg02
06b4c     09 13 52 F6 | 	abs	arg01, arg01 wc
06b50     1F 28 C6 C9 |  if_b	decod	local02, #31
06b54     00 28 06 36 |  if_ae	mov	local02, #0
06b58     2C FC B1 FD | 	call	#__system___float_fromuns
06b5c     14 FB 61 F5 | 	xor	result1, local02
06b60     FD 14 02 F6 | 	mov	arg02, result1
06b64     1E 12 C6 F9 | 	decod	arg01, #30
06b68     28 0F B2 FD | 	call	#__system____builtin_powf
06b6c     FD 12 02 F6 | 	mov	arg01, result1
06b70     13 15 02 F6 | 	mov	arg02, local01
06b74     14 00 B2 FD | 	call	#__system___float_mul
06b78     A7 F0 03 F6 | 	mov	ptra, fp
06b7c     B2 00 A0 FD | 	call	#popregs_
06b80                 | _getnoteval_ret
06b80     2D 00 64 FD | 	ret
06b84                 | 
06b84                 | ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' '
06b84                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06b84                 | ' '
06b84                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06b84                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06b84                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06b84                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06b84                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06b84                 | ' ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' ' Helper functions to manage program lines
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' 
06b84                 | ' '----- delete a line from a program
06b84                 | ' 
06b84                 | ' function deleteline(aline as ulong) as integer
06b84                 | _deleteline
06b84     02 4A 05 F6 | 	mov	COUNT_, #2
06b88     A8 00 A0 FD | 	call	#pushregs_
06b8c     2C F0 07 F1 | 	add	ptra, #44
06b90     04 4E 05 F1 | 	add	fp, #4
06b94     A7 12 62 FC | 	wrlong	arg01, fp
06b98     4A 00 00 FF 
06b9c     88 E4 05 F1 | 	add	objptr, ##38024
06ba0     F2 26 02 FB | 	rdlong	local01, objptr
06ba4     0C 4E 05 F1 | 	add	fp, #12
06ba8     A7 26 62 FC | 	wrlong	local01, fp
06bac     10 4E 85 F1 | 	sub	fp, #16
06bb0                 | ' 
06bb0                 | ' searchptr=programstart
06bb0                 | ' do
06bb0     3E 00 00 FF 
06bb4     BC E5 85 F1 | 	sub	objptr, ##32188
06bb8                 | LR__0580
06bb8     14 4E 05 F1 | 	add	fp, #20
06bbc     A7 12 02 F6 | 	mov	arg01, fp
06bc0     04 4E 85 F1 | 	sub	fp, #4
06bc4     A7 14 02 FB | 	rdlong	arg02, fp
06bc8     10 4E 85 F1 | 	sub	fp, #16
06bcc     18 16 06 F6 | 	mov	arg03, #24
06bd0     00 C5 B1 FD | 	call	#_psram_spin2_read1
06bd4     10 4E 05 F1 | 	add	fp, #16
06bd8     A7 26 02 FB | 	rdlong	local01, fp
06bdc     08 4E 85 F1 | 	sub	fp, #8
06be0     A7 26 62 FC | 	wrlong	local01, fp
06be4     20 4E 05 F1 | 	add	fp, #32
06be8     A7 26 02 FB | 	rdlong	local01, fp
06bec     18 4E 85 F1 | 	sub	fp, #24
06bf0     A7 26 62 FC | 	wrlong	local01, fp
06bf4     04 4E 05 F1 | 	add	fp, #4
06bf8     A7 26 02 FB | 	rdlong	local01, fp
06bfc     10 4E 85 F1 | 	sub	fp, #16
06c00     A7 16 02 FB | 	rdlong	arg03, fp
06c04     04 4E 85 F1 | 	sub	fp, #4
06c08     0B 27 12 F2 | 	cmp	local01, arg03 wc
06c0c     28 4E 05 C1 |  if_b	add	fp, #40
06c10     A7 28 02 CB |  if_b	rdlong	local02, fp
06c14     28 4E 85 C1 |  if_b	sub	fp, #40
06c18     FF FF 3F CF 
06c1c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06c20     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06c24     0B 00 00 FF 
06c28     CC E4 85 F1 | 	sub	objptr, ##5836
06c2c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06c2c     14 4E 05 F1 | 	add	fp, #20
06c30     A7 26 02 FB | 	rdlong	local01, fp
06c34     10 4E 85 F1 | 	sub	fp, #16
06c38     A7 28 02 FB | 	rdlong	local02, fp
06c3c     04 4E 85 F1 | 	sub	fp, #4
06c40     14 27 0A F2 | 	cmp	local01, local02 wz
06c44     01 FA 65 56 |  if_ne	neg	result1, #1
06c48     34 02 90 5D |  if_ne	jmp	#LR__0585
06c4c     08 4E 05 F1 | 	add	fp, #8
06c50     A7 12 02 FB | 	rdlong	arg01, fp
06c54     08 4E 85 F1 | 	sub	fp, #8
06c58     01 14 66 F6 | 	neg	arg02, #1
06c5c     B0 98 B1 FD | 	call	#_pslpoke
06c60                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06c60                 | ' 
06c60                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06c60     28 4E 05 F1 | 	add	fp, #40
06c64     A7 26 02 FB | 	rdlong	local01, fp
06c68     28 4E 85 F1 | 	sub	fp, #40
06c6c     FF FF 3F FF 
06c70     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06c74     24 4E 05 A1 |  if_e	add	fp, #36
06c78     A7 28 02 AB |  if_e	rdlong	local02, fp
06c7c     24 4E 85 A1 |  if_e	sub	fp, #36
06c80     FF FF 7F AF 
06c84     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06c88     88 00 90 5D |  if_ne	jmp	#LR__0581
06c8c     4A 00 00 FF 
06c90     88 E4 05 F1 | 	add	objptr, ##38024
06c94     00 04 80 FF 
06c98     F2 00 68 FC | 	wrlong	##524288, objptr
06c9c     07 00 00 FF 
06ca0     2C E4 85 F1 | 	sub	objptr, ##3628
06ca4     00 04 80 FF 
06ca8     F2 00 68 FC | 	wrlong	##524288, objptr
06cac     07 00 00 FF 
06cb0     30 E4 05 F1 | 	add	objptr, ##3632
06cb4     F2 00 68 FC | 	wrlong	#0, objptr
06cb8     04 E4 05 F1 | 	add	objptr, #4
06cbc     FF FF FF FF 
06cc0     F2 FE 6B FC | 	wrlong	##-1, objptr
06cc4     4A 00 00 FF 
06cc8     90 E4 85 F1 | 	sub	objptr, ##38032
06ccc     00 12 06 F6 | 	mov	arg01, #0
06cd0     01 14 66 F6 | 	neg	arg02, #1
06cd4     38 98 B1 FD | 	call	#_pslpoke
06cd8     10 12 06 F6 | 	mov	arg01, #16
06cdc     01 14 66 F6 | 	neg	arg02, #1
06ce0     2C 98 B1 FD | 	call	#_pslpoke
06ce4     14 12 06 F6 | 	mov	arg01, #20
06ce8     1E 14 CE F9 | 	bmask	arg02, #30
06cec     20 98 B1 FD | 	call	#_pslpoke
06cf0     50 00 00 FF 
06cf4     B8 E4 05 F1 | 	add	objptr, ##41144
06cf8     00 04 80 FF 
06cfc     F2 00 68 FC | 	wrlong	##524288, objptr
06d00     04 E4 05 F1 | 	add	objptr, #4
06d04     00 04 80 FF 
06d08     F2 00 68 FC | 	wrlong	##524288, objptr
06d0c     50 00 00 FF 
06d10     BC E4 85 F1 | 	sub	objptr, ##41148
06d14                 | LR__0581
06d14                 | ' 
06d14                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06d14     28 4E 05 F1 | 	add	fp, #40
06d18     A7 26 02 FB | 	rdlong	local01, fp
06d1c     28 4E 85 F1 | 	sub	fp, #40
06d20     FF FF 3F FF 
06d24     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d28     74 00 90 5D |  if_ne	jmp	#LR__0582
06d2c     24 4E 05 F1 | 	add	fp, #36
06d30     A7 28 02 FB | 	rdlong	local02, fp
06d34     24 4E 85 F1 | 	sub	fp, #36
06d38     FF FF 7F FF 
06d3c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d40     5C 00 90 AD |  if_e	jmp	#LR__0582
06d44     24 4E 05 F1 | 	add	fp, #36
06d48     A7 12 02 FB | 	rdlong	arg01, fp
06d4c     24 4E 85 F1 | 	sub	fp, #36
06d50     14 12 06 F1 | 	add	arg01, #20
06d54     1E 14 CE F9 | 	bmask	arg02, #30
06d58     B4 97 B1 FD | 	call	#_pslpoke
06d5c     24 4E 05 F1 | 	add	fp, #36
06d60     A7 26 02 FB | 	rdlong	local01, fp
06d64     4A 00 00 FF 
06d68     90 E4 05 F1 | 	add	objptr, ##38032
06d6c     F2 26 62 FC | 	wrlong	local01, objptr
06d70     4A 00 00 FF 
06d74     90 E4 85 F1 | 	sub	objptr, ##38032
06d78     A7 12 02 FB | 	rdlong	arg01, fp
06d7c     24 4E 85 F1 | 	sub	fp, #36
06d80     BC 98 B1 FD | 	call	#_pslpeek
06d84     4A 00 00 FF 
06d88     8C E4 05 F1 | 	add	objptr, ##38028
06d8c     F2 FA 61 FC | 	wrlong	result1, objptr
06d90     4A 00 00 FF 
06d94     8C E4 85 F1 | 	sub	objptr, ##38028
06d98                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06d98                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06d98                 | '   lastline=pslpeek(header(4))
06d98                 | '   return 0
06d98     00 FA 05 F6 | 	mov	result1, #0
06d9c     E0 00 90 FD | 	jmp	#LR__0585
06da0                 | LR__0582
06da0                 | ' 
06da0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06da0     28 4E 05 F1 | 	add	fp, #40
06da4     A7 26 02 FB | 	rdlong	local01, fp
06da8     28 4E 85 F1 | 	sub	fp, #40
06dac     FF FF 3F FF 
06db0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06db4     58 00 90 AD |  if_e	jmp	#LR__0583
06db8     24 4E 05 F1 | 	add	fp, #36
06dbc     A7 28 02 FB | 	rdlong	local02, fp
06dc0     24 4E 85 F1 | 	sub	fp, #36
06dc4     FF FF 7F FF 
06dc8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06dcc     40 00 90 5D |  if_ne	jmp	#LR__0583
06dd0     28 4E 05 F1 | 	add	fp, #40
06dd4     A7 12 02 FB | 	rdlong	arg01, fp
06dd8     28 4E 85 F1 | 	sub	fp, #40
06ddc     10 12 06 F1 | 	add	arg01, #16
06de0     01 14 66 F6 | 	neg	arg02, #1
06de4     28 97 B1 FD | 	call	#_pslpoke
06de8     28 4E 05 F1 | 	add	fp, #40
06dec     A7 26 02 FB | 	rdlong	local01, fp
06df0     28 4E 85 F1 | 	sub	fp, #40
06df4     4A 00 00 FF 
06df8     88 E4 05 F1 | 	add	objptr, ##38024
06dfc     F2 26 62 FC | 	wrlong	local01, objptr
06e00     4A 00 00 FF 
06e04     88 E4 85 F1 | 	sub	objptr, ##38024
06e08                 | ' '   print "deleted first line"
06e08                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06e08                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06e08                 | '   return 0
06e08     00 FA 05 F6 | 	mov	result1, #0
06e0c     70 00 90 FD | 	jmp	#LR__0585
06e10                 | LR__0583
06e10                 | ' 
06e10                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06e10     28 4E 05 F1 | 	add	fp, #40
06e14     A7 26 02 FB | 	rdlong	local01, fp
06e18     28 4E 85 F1 | 	sub	fp, #40
06e1c     FF FF 3F FF 
06e20     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e24     24 4E 05 51 |  if_ne	add	fp, #36
06e28     A7 28 02 5B |  if_ne	rdlong	local02, fp
06e2c     24 4E 85 51 |  if_ne	sub	fp, #36
06e30     FF FF 7F 5F 
06e34     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06e38     40 00 90 AD |  if_e	jmp	#LR__0584
06e3c     28 4E 05 F1 | 	add	fp, #40
06e40     A7 12 02 FB | 	rdlong	arg01, fp
06e44     10 12 06 F1 | 	add	arg01, #16
06e48     04 4E 85 F1 | 	sub	fp, #4
06e4c     A7 14 02 FB | 	rdlong	arg02, fp
06e50     24 4E 85 F1 | 	sub	fp, #36
06e54     B8 96 B1 FD | 	call	#_pslpoke
06e58     24 4E 05 F1 | 	add	fp, #36
06e5c     A7 12 02 FB | 	rdlong	arg01, fp
06e60     14 12 06 F1 | 	add	arg01, #20
06e64     04 4E 05 F1 | 	add	fp, #4
06e68     A7 14 02 FB | 	rdlong	arg02, fp
06e6c     28 4E 85 F1 | 	sub	fp, #40
06e70     9C 96 B1 FD | 	call	#_pslpoke
06e74                 | '    pslpoke(header(5)+16,header(4))  
06e74                 | '    pslpoke(header(4)+20, header(5))
06e74                 | '    return 0
06e74     00 FA 05 F6 | 	mov	result1, #0
06e78     04 00 90 FD | 	jmp	#LR__0585
06e7c                 | LR__0584
06e7c     00 FA 05 F6 | 	mov	result1, #0
06e80                 | LR__0585
06e80     A7 F0 03 F6 | 	mov	ptra, fp
06e84     B2 00 A0 FD | 	call	#popregs_
06e88                 | _deleteline_ret
06e88     2D 00 64 FD | 	ret
06e8c                 | 
06e8c                 | ' 
06e8c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06e8c                 | ' 
06e8c                 | ' sub save_line
06e8c                 | _save_line
06e8c     03 4A 05 F6 | 	mov	COUNT_, #3
06e90     A8 00 A0 FD | 	call	#pushregs_
06e94     4A 00 00 FF 
06e98     7C E4 05 F1 | 	add	objptr, ##38012
06e9c     F2 16 02 FB | 	rdlong	arg03, objptr
06ea0     01 16 06 F1 | 	add	arg03, #1
06ea4     05 00 00 FF 
06ea8     18 E4 85 F1 | 	sub	objptr, ##2584
06eac     F2 14 02 FB | 	rdlong	arg02, objptr
06eb0     0B 15 02 FD | 	qmul	arg02, arg03
06eb4     0E 00 00 FF 
06eb8     44 E4 85 F1 | 	sub	objptr, ##7236
06ebc     F2 12 02 FB | 	rdlong	arg01, objptr
06ec0     37 00 00 FF 
06ec4     20 E4 85 F1 | 	sub	objptr, ##28192
06ec8     09 27 02 F6 | 	mov	local01, arg01
06ecc     18 28 62 FD | 	getqx	local02
06ed0     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06ed4                 | LR__0590
06ed4     13 FB C9 FA | 	rdbyte	result1, local01 wz
06ed8     01 26 06 51 |  if_ne	add	local01, #1
06edc     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06ee0                 | LR__0591
06ee0     09 27 82 F1 | 	sub	local01, arg01
06ee4     03 26 CE F7 | 	test	local01, #3 wz
06ee8     02 26 46 50 |  if_ne	shr	local01, #2
06eec     01 26 06 51 |  if_ne	add	local01, #1
06ef0     02 26 66 50 |  if_ne	shl	local01, #2
06ef4     14 2B 02 F6 | 	mov	local03, local02
06ef8     13 2B 02 F1 | 	add	local03, local01
06efc     43 00 00 FF 
06f00     5C E4 05 F1 | 	add	objptr, ##34396
06f04     F2 16 02 FB | 	rdlong	arg03, objptr
06f08     14 17 02 F1 | 	add	arg03, local02
06f0c     04 00 00 FF 
06f10     28 E4 05 F1 | 	add	objptr, ##2088
06f14     F2 16 62 FC | 	wrlong	arg03, objptr
06f18     04 E4 05 F1 | 	add	objptr, #4
06f1c     F2 26 62 FC | 	wrlong	local01, objptr
06f20     0C E4 85 F1 | 	sub	objptr, #12
06f24     F2 12 02 F6 | 	mov	arg01, objptr
06f28     04 00 00 FF 
06f2c     20 E4 85 F1 | 	sub	objptr, ##2080
06f30     F2 14 02 FB | 	rdlong	arg02, objptr
06f34     14 17 02 F6 | 	mov	arg03, local02
06f38     37 00 00 FF 
06f3c     90 E5 85 F1 | 	sub	objptr, ##28560
06f40     2C C2 B1 FD | 	call	#_psram_spin2_write
06f44     2B 00 00 FF 
06f48     54 E5 05 F1 | 	add	objptr, ##22356
06f4c     F2 12 02 FB | 	rdlong	arg01, objptr
06f50     0C 00 00 FF 
06f54     3C E4 05 F1 | 	add	objptr, ##6204
06f58     F2 14 02 FB | 	rdlong	arg02, objptr
06f5c     14 15 02 F1 | 	add	arg02, local02
06f60     13 17 02 F6 | 	mov	arg03, local01
06f64     37 00 00 FF 
06f68     90 E5 85 F1 | 	sub	objptr, ##28560
06f6c     00 C2 B1 FD | 	call	#_psram_spin2_write
06f70     37 00 00 FF 
06f74     90 E5 05 F1 | 	add	objptr, ##28560
06f78     F2 26 02 FB | 	rdlong	local01, objptr
06f7c     15 27 02 F1 | 	add	local01, local03
06f80     F2 26 62 FC | 	wrlong	local01, objptr
06f84     43 00 00 FF 
06f88     5C E4 85 F1 | 	sub	objptr, ##34396
06f8c     A7 F0 03 F6 | 	mov	ptra, fp
06f90     B2 00 A0 FD | 	call	#popregs_
06f94                 | _save_line_ret
06f94     2D 00 64 FD | 	ret
06f98                 | 
06f98                 | ' 
06f98                 | ' '----- Insert a new line into the middle of the program
06f98                 | ' 
06f98                 | ' function insertline(aline as ulong) as integer
06f98                 | _insertline
06f98     02 4A 05 F6 | 	mov	COUNT_, #2
06f9c     A8 00 A0 FD | 	call	#pushregs_
06fa0     28 F0 07 F1 | 	add	ptra, #40
06fa4     04 4E 05 F1 | 	add	fp, #4
06fa8     A7 12 62 FC | 	wrlong	arg01, fp
06fac     4A 00 00 FF 
06fb0     88 E4 05 F1 | 	add	objptr, ##38024
06fb4     F2 26 02 FB | 	rdlong	local01, objptr
06fb8     04 4E 05 F1 | 	add	fp, #4
06fbc     A7 26 62 FC | 	wrlong	local01, fp
06fc0     08 4E 85 F1 | 	sub	fp, #8
06fc4                 | ' 
06fc4                 | ' do
06fc4     3E 00 00 FF 
06fc8     BC E5 85 F1 | 	sub	objptr, ##32188
06fcc                 | LR__0600
06fcc     10 4E 05 F1 | 	add	fp, #16
06fd0     A7 12 02 F6 | 	mov	arg01, fp
06fd4     08 4E 85 F1 | 	sub	fp, #8
06fd8     A7 14 02 FB | 	rdlong	arg02, fp
06fdc     08 4E 85 F1 | 	sub	fp, #8
06fe0     18 16 06 F6 | 	mov	arg03, #24
06fe4     EC C0 B1 FD | 	call	#_psram_spin2_read1
06fe8     08 4E 05 F1 | 	add	fp, #8
06fec     A7 26 02 FB | 	rdlong	local01, fp
06ff0     04 4E 05 F1 | 	add	fp, #4
06ff4     A7 26 62 FC | 	wrlong	local01, fp
06ff8     18 4E 05 F1 | 	add	fp, #24
06ffc     A7 26 02 FB | 	rdlong	local01, fp
07000     1C 4E 85 F1 | 	sub	fp, #28
07004     A7 26 62 FC | 	wrlong	local01, fp
07008     08 4E 05 F1 | 	add	fp, #8
0700c     A7 26 02 FB | 	rdlong	local01, fp
07010     0C 4E 85 F1 | 	sub	fp, #12
07014     A7 16 02 FB | 	rdlong	arg03, fp
07018     04 4E 85 F1 | 	sub	fp, #4
0701c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07020     24 4E 05 C1 |  if_b	add	fp, #36
07024     A7 28 02 CB |  if_b	rdlong	local02, fp
07028     24 4E 85 C1 |  if_b	sub	fp, #36
0702c     FF FF 3F CF 
07030     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07034     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07038     0B 00 00 FF 
0703c     CC E4 85 F1 | 	sub	objptr, ##5836
07040                 | ' 
07040                 | ' if header(0)=aline then return -1 				' delete it first
07040     10 4E 05 F1 | 	add	fp, #16
07044     A7 26 02 FB | 	rdlong	local01, fp
07048     0C 4E 85 F1 | 	sub	fp, #12
0704c     A7 28 02 FB | 	rdlong	local02, fp
07050     04 4E 85 F1 | 	sub	fp, #4
07054     14 27 0A F2 | 	cmp	local01, local02 wz
07058     01 FA 65 A6 |  if_e	neg	result1, #1
0705c     48 01 90 AD |  if_e	jmp	#LR__0603
07060                 | ' if header(0)<aline then return -2 				' end of program reached
07060     10 4E 05 F1 | 	add	fp, #16
07064     A7 26 02 FB | 	rdlong	local01, fp
07068     0C 4E 85 F1 | 	sub	fp, #12
0706c     A7 16 02 FB | 	rdlong	arg03, fp
07070     04 4E 85 F1 | 	sub	fp, #4
07074     0B 27 12 F2 | 	cmp	local01, arg03 wc
07078     02 FA 65 C6 |  if_b	neg	result1, #2
0707c     28 01 90 CD |  if_b	jmp	#LR__0603
07080                 | ' 
07080                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07080     20 4E 05 F1 | 	add	fp, #32
07084     A7 26 02 FB | 	rdlong	local01, fp
07088     20 4E 85 F1 | 	sub	fp, #32
0708c     FF FF 7F FF 
07090     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07094     78 00 90 5D |  if_ne	jmp	#LR__0601
07098     43 00 00 FF 
0709c     5C E4 05 F1 | 	add	objptr, ##34396
070a0     F2 26 02 FB | 	rdlong	local01, objptr
070a4     07 00 00 FF 
070a8     2C E4 05 F1 | 	add	objptr, ##3628
070ac     F2 26 62 FC | 	wrlong	local01, objptr
070b0     0C 4E 05 F1 | 	add	fp, #12
070b4     A7 12 02 FB | 	rdlong	arg01, fp
070b8     0C 4E 85 F1 | 	sub	fp, #12
070bc     10 12 06 F1 | 	add	arg01, #16
070c0     07 00 00 FF 
070c4     2C E4 85 F1 | 	sub	objptr, ##3628
070c8     F2 14 02 FB | 	rdlong	arg02, objptr
070cc     43 00 00 FF 
070d0     5C E4 85 F1 | 	sub	objptr, ##34396
070d4     38 94 B1 FD | 	call	#_pslpoke
070d8     47 00 00 FF 
070dc     8C E4 05 F1 | 	add	objptr, ##36492
070e0     FF FF FF FF 
070e4     F2 FE 6B FC | 	wrlong	##-1, objptr
070e8     0C 4E 05 F1 | 	add	fp, #12
070ec     A7 26 02 FB | 	rdlong	local01, fp
070f0     0C 4E 85 F1 | 	sub	fp, #12
070f4     04 E4 05 F1 | 	add	objptr, #4
070f8     F2 26 62 FC | 	wrlong	local01, objptr
070fc     47 00 00 FF 
07100     90 E4 85 F1 | 	sub	objptr, ##36496
07104     84 FD BF FD | 	call	#_save_line
07108                 | '   programstart=programptr
07108                 | '   pslpoke(lineptr2+16,programptr)
07108                 | '   ucompiledline(4)=$FFFF_FFFF
07108                 | '   ucompiledline(5)=lineptr2
07108                 | '   save_line
07108                 | '   return 0
07108     00 FA 05 F6 | 	mov	result1, #0
0710c     98 00 90 FD | 	jmp	#LR__0603
07110                 | LR__0601
07110                 | ' 
07110                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07110     20 4E 05 F1 | 	add	fp, #32
07114     A7 26 02 FB | 	rdlong	local01, fp
07118     20 4E 85 F1 | 	sub	fp, #32
0711c     FF FF 7F FF 
07120     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07124     7C 00 90 AD |  if_e	jmp	#LR__0602
07128     20 4E 05 F1 | 	add	fp, #32
0712c     A7 26 02 FB | 	rdlong	local01, fp
07130     47 00 00 FF 
07134     8C E4 05 F1 | 	add	objptr, ##36492
07138     F2 26 62 FC | 	wrlong	local01, objptr
0713c     14 4E 85 F1 | 	sub	fp, #20
07140     A7 26 02 FB | 	rdlong	local01, fp
07144     04 E4 05 F1 | 	add	objptr, #4
07148     F2 26 62 FC | 	wrlong	local01, objptr
0714c     A7 12 02 FB | 	rdlong	arg01, fp
07150     0C 4E 85 F1 | 	sub	fp, #12
07154     10 12 06 F1 | 	add	arg01, #16
07158     04 00 00 FF 
0715c     34 E4 85 F1 | 	sub	objptr, ##2100
07160     F2 14 02 FB | 	rdlong	arg02, objptr
07164     43 00 00 FF 
07168     5C E4 85 F1 | 	sub	objptr, ##34396
0716c     A0 93 B1 FD | 	call	#_pslpoke
07170     20 4E 05 F1 | 	add	fp, #32
07174     A7 12 02 FB | 	rdlong	arg01, fp
07178     20 4E 85 F1 | 	sub	fp, #32
0717c     14 12 06 F1 | 	add	arg01, #20
07180     43 00 00 FF 
07184     5C E4 05 F1 | 	add	objptr, ##34396
07188     F2 14 02 FB | 	rdlong	arg02, objptr
0718c     43 00 00 FF 
07190     5C E4 85 F1 | 	sub	objptr, ##34396
07194     78 93 B1 FD | 	call	#_pslpoke
07198     F0 FC BF FD | 	call	#_save_line
0719c                 | '   ucompiledline(4)=header(4)
0719c                 | '   ucompiledline(5)=lineptr2
0719c                 | '   pslpoke(lineptr2+16,programptr)
0719c                 | '   pslpoke(header(4)+20,programptr)
0719c                 | '   save_line
0719c                 | '   return 0
0719c     00 FA 05 F6 | 	mov	result1, #0
071a0     04 00 90 FD | 	jmp	#LR__0603
071a4                 | LR__0602
071a4     00 FA 05 F6 | 	mov	result1, #0
071a8                 | LR__0603
071a8     A7 F0 03 F6 | 	mov	ptra, fp
071ac     B2 00 A0 FD | 	call	#popregs_
071b0                 | _insertline_ret
071b0     2D 00 64 FD | 	ret
071b4                 | 
071b4                 | ' 
071b4                 | ' '----- Adds a new line at the end of the program
071b4                 | ' 
071b4                 | ' sub add_line_at_end(aline) 
071b4                 | _add_line_at_end
071b4     4A 00 00 FF 
071b8     8C E4 05 F1 | 	add	objptr, ##38028
071bc     F2 12 62 FC | 	wrlong	arg01, objptr
071c0     04 E4 05 F1 | 	add	objptr, #4
071c4     F2 14 02 FB | 	rdlong	arg02, objptr
071c8     03 00 00 FF 
071cc     04 E4 85 F1 | 	sub	objptr, ##1540
071d0     F2 14 62 FC | 	wrlong	arg02, objptr
071d4     03 00 00 FF 
071d8     04 E4 05 F1 | 	add	objptr, ##1540
071dc     F2 12 02 FB | 	rdlong	arg01, objptr
071e0     14 12 06 F1 | 	add	arg01, #20
071e4     07 00 00 FF 
071e8     34 E4 85 F1 | 	sub	objptr, ##3636
071ec     F2 14 02 FB | 	rdlong	arg02, objptr
071f0     43 00 00 FF 
071f4     5C E4 85 F1 | 	sub	objptr, ##34396
071f8     14 93 B1 FD | 	call	#_pslpoke
071fc     43 00 00 FF 
07200     5C E4 05 F1 | 	add	objptr, ##34396
07204     F2 14 02 FB | 	rdlong	arg02, objptr
07208     07 00 00 FF 
0720c     34 E4 05 F1 | 	add	objptr, ##3636
07210     F2 14 62 FC | 	wrlong	arg02, objptr
07214     03 00 00 FF 
07218     00 E4 85 F1 | 	sub	objptr, ##1536
0721c     FF FF BF FF 
07220     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07224                 | ' 
07224                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07224                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07224     04 00 00 FF 
07228     34 E4 85 F1 | 	sub	objptr, ##2100
0722c     F2 14 02 FB | 	rdlong	arg02, objptr
07230     43 00 00 FF 
07234     5C E4 85 F1 | 	sub	objptr, ##34396
07238     00 04 00 FF 
0723c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07240     47 00 00 AF 
07244     8C E4 05 A1 |  if_e	add	objptr, ##36492
07248     FF FF FF AF 
0724c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07250     47 00 00 AF 
07254     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07258     30 FC BF FD | 	call	#_save_line
0725c     43 00 00 FF 
07260     5C E4 05 F1 | 	add	objptr, ##34396
07264     F2 12 02 FB | 	rdlong	arg01, objptr
07268     43 00 00 FF 
0726c     5C E4 85 F1 | 	sub	objptr, ##34396
07270     01 14 66 F6 | 	neg	arg02, #1
07274     98 92 B1 FD | 	call	#_pslpoke
07278                 | _add_line_at_end_ret
07278     2D 00 64 FD | 	ret
0727c                 | 
0727c                 | ' 
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' 
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' 
0727c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
0727c                 | ' 
0727c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
0727c                 | _compile_immediate
0727c     0A 4A 05 F6 | 	mov	COUNT_, #10
07280     A8 00 A0 FD | 	call	#pushregs_
07284                 | _compile_immediate_enter
07284     09 2D 02 F6 | 	mov	local04, arg01
07288     0A 2F 02 F6 | 	mov	local05, arg02
0728c     00 30 06 F6 | 	mov	local06, #0
07290     00 32 06 F6 | 	mov	local07, #0
07294     00 34 06 F6 | 	mov	local08, #0
07298                 | ' 
07298                 | ' ' linetype=cont+1
07298                 | ' ' 1 : this is the first part of the line that will continue
07298                 | ' ' 2 - this is the continuation of the line
07298                 | ' ' 3 - this is the last continued line
07298                 | ' ' 4 - this is the one and only part
07298                 | ' ' 5 - continued after if/else
07298                 | ' 
07298                 | ' err=0
07298                 | ' cmd=0
07298                 | ' vars=0
07298                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07298     02 2C 0E F2 | 	cmp	local04, #2 wz
0729c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
072a0     24 00 90 5D |  if_ne	jmp	#LR__0610
072a4     35 00 00 FF 
072a8     10 E4 05 F1 | 	add	objptr, ##27152
072ac     F2 32 02 FB | 	rdlong	local07, objptr
072b0     01 36 06 F6 | 	mov	local09, #1
072b4     02 00 00 FF 
072b8     34 E4 05 F1 | 	add	objptr, ##1076
072bc     F2 02 68 FC | 	wrlong	#1, objptr
072c0     37 00 00 FF 
072c4     44 E4 85 F1 | 	sub	objptr, ##28228
072c8                 | LR__0610
072c8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
072c8     04 2C 0E F2 | 	cmp	local04, #4 wz
072cc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
072d0     30 00 90 5D |  if_ne	jmp	#LR__0611
072d4     35 00 00 FF 
072d8     18 E4 05 F1 | 	add	objptr, ##27160
072dc     F2 32 02 FB | 	rdlong	local07, objptr
072e0     02 36 06 F6 | 	mov	local09, #2
072e4     02 00 00 FF 
072e8     2C E4 05 F1 | 	add	objptr, ##1068
072ec     F2 04 68 FC | 	wrlong	#2, objptr
072f0     13 00 00 FF 
072f4     38 E4 05 F1 | 	add	objptr, ##9784
072f8     F2 04 68 FC | 	wrlong	#2, objptr
072fc     4A 00 00 FF 
07300     7C E4 85 F1 | 	sub	objptr, ##38012
07304                 | LR__0611
07304                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07304     05 2C 0E F2 | 	cmp	local04, #5 wz
07308     40 00 90 5D |  if_ne	jmp	#LR__0612
0730c     37 00 00 FF 
07310     44 E4 05 F1 | 	add	objptr, ##28228
07314     F2 FC 01 FB | 	rdlong	result2, objptr
07318     FE 36 02 F6 | 	mov	local09, result2
0731c     03 36 66 F0 | 	shl	local09, #3
07320     02 00 00 FF 
07324     38 E4 85 F1 | 	sub	objptr, ##1080
07328     F2 36 02 F1 | 	add	local09, objptr
0732c     04 36 06 F1 | 	add	local09, #4
07330     1B 33 02 FB | 	rdlong	local07, local09
07334     01 FC 05 F1 | 	add	result2, #1
07338     02 00 00 FF 
0733c     38 E4 05 F1 | 	add	objptr, ##1080
07340     F2 FC 61 FC | 	wrlong	result2, objptr
07344     37 00 00 FF 
07348     44 E4 85 F1 | 	sub	objptr, ##28228
0734c                 | LR__0612
0734c                 | ' 
0734c                 | ' 'print  "In compile_immediate cmd=:", cmd
0734c                 | ' 451 select case cmd
0734c     5C 32 0E F2 | 	cmp	local07, #92 wz
07350     B0 02 90 AD |  if_e	jmp	#LR__0613
07354     B9 32 0E F2 | 	cmp	local07, #185 wz
07358     B4 02 90 AD |  if_e	jmp	#LR__0614
0735c     47 32 0E F2 | 	cmp	local07, #71 wz
07360     BC 02 90 AD |  if_e	jmp	#LR__0615
07364     59 32 0E F2 | 	cmp	local07, #89 wz
07368     C4 02 90 AD |  if_e	jmp	#LR__0616
0736c     C3 32 0E F2 | 	cmp	local07, #195 wz
07370     CC 02 90 AD |  if_e	jmp	#LR__0617
07374     45 32 0E F2 | 	cmp	local07, #69 wz
07378     D0 02 90 AD |  if_e	jmp	#LR__0618
0737c     69 32 0E F2 | 	cmp	local07, #105 wz
07380     D8 02 90 AD |  if_e	jmp	#LR__0619
07384     40 32 0E F2 | 	cmp	local07, #64 wz
07388     A0 06 90 AD |  if_e	jmp	#LR__0691
0738c     B4 32 0E F2 | 	cmp	local07, #180 wz
07390     D4 02 90 AD |  if_e	jmp	#LR__0620
07394     49 32 0E F2 | 	cmp	local07, #73 wz
07398     D8 02 90 AD |  if_e	jmp	#LR__0621
0739c     50 32 0E F2 | 	cmp	local07, #80 wz
073a0     DC 02 90 AD |  if_e	jmp	#LR__0622
073a4     AE 32 0E F2 | 	cmp	local07, #174 wz
073a8     E4 02 90 AD |  if_e	jmp	#LR__0623
073ac     B0 32 0E F2 | 	cmp	local07, #176 wz
073b0     E8 02 90 AD |  if_e	jmp	#LR__0624
073b4     AF 32 0E F2 | 	cmp	local07, #175 wz
073b8     EC 02 90 AD |  if_e	jmp	#LR__0625
073bc     B1 32 0E F2 | 	cmp	local07, #177 wz
073c0     F0 02 90 AD |  if_e	jmp	#LR__0626
073c4     68 32 0E F2 | 	cmp	local07, #104 wz
073c8     F4 02 90 AD |  if_e	jmp	#LR__0627
073cc     74 32 0E F2 | 	cmp	local07, #116 wz
073d0     F8 02 90 AD |  if_e	jmp	#LR__0628
073d4     73 32 0E F2 | 	cmp	local07, #115 wz
073d8     00 03 90 AD |  if_e	jmp	#LR__0629
073dc     6C 32 0E F2 | 	cmp	local07, #108 wz
073e0     08 03 90 AD |  if_e	jmp	#LR__0630
073e4     89 32 0E F2 | 	cmp	local07, #137 wz
073e8     40 06 90 AD |  if_e	jmp	#LR__0691
073ec     C2 32 0E F2 | 	cmp	local07, #194 wz
073f0     08 03 90 AD |  if_e	jmp	#LR__0631
073f4     72 32 0E F2 | 	cmp	local07, #114 wz
073f8     0C 03 90 AD |  if_e	jmp	#LR__0632
073fc     5D 32 0E F2 | 	cmp	local07, #93 wz
07400     10 03 90 AD |  if_e	jmp	#LR__0633
07404     96 32 0E F2 | 	cmp	local07, #150 wz
07408     18 03 90 AD |  if_e	jmp	#LR__0634
0740c     43 32 0E F2 | 	cmp	local07, #67 wz
07410     1C 03 90 AD |  if_e	jmp	#LR__0635
07414     5A 32 0E F2 | 	cmp	local07, #90 wz
07418     24 03 90 AD |  if_e	jmp	#LR__0636
0741c     AB 32 0E F2 | 	cmp	local07, #171 wz
07420     08 06 90 AD |  if_e	jmp	#LR__0691
07424     BD 32 0E F2 | 	cmp	local07, #189 wz
07428     24 03 90 AD |  if_e	jmp	#LR__0637
0742c     BB 32 0E F2 | 	cmp	local07, #187 wz
07430     2C 03 90 AD |  if_e	jmp	#LR__0638
07434     4E 32 0E F2 | 	cmp	local07, #78 wz
07438     34 03 90 AD |  if_e	jmp	#LR__0639
0743c     A9 32 0E F2 | 	cmp	local07, #169 wz
07440     4C 03 90 AD |  if_e	jmp	#LR__0641
07444     46 32 0E F2 | 	cmp	local07, #70 wz
07448     64 03 90 AD |  if_e	jmp	#LR__0643
0744c     71 32 0E F2 | 	cmp	local07, #113 wz
07450     6C 03 90 AD |  if_e	jmp	#LR__0644
07454     60 32 0E F2 | 	cmp	local07, #96 wz
07458     70 03 90 AD |  if_e	jmp	#LR__0645
0745c     4A 32 0E F2 | 	cmp	local07, #74 wz
07460     74 03 90 AD |  if_e	jmp	#LR__0646
07464     48 32 0E F2 | 	cmp	local07, #72 wz
07468     78 03 90 AD |  if_e	jmp	#LR__0647
0746c     58 32 0E F2 | 	cmp	local07, #88 wz
07470     80 03 90 AD |  if_e	jmp	#LR__0648
07474     5F 32 0E F2 | 	cmp	local07, #95 wz
07478     88 03 90 AD |  if_e	jmp	#LR__0649
0747c     B5 32 0E F2 | 	cmp	local07, #181 wz
07480     8C 03 90 AD |  if_e	jmp	#LR__0650
07484     8A 32 0E F2 | 	cmp	local07, #138 wz
07488     94 03 90 AD |  if_e	jmp	#LR__0651
0748c     4C 32 0E F2 | 	cmp	local07, #76 wz
07490     98 03 90 AD |  if_e	jmp	#LR__0652
07494     52 32 0E F2 | 	cmp	local07, #82 wz
07498     A0 03 90 AD |  if_e	jmp	#LR__0653
0749c     97 32 0E F2 | 	cmp	local07, #151 wz
074a0     A8 03 90 AD |  if_e	jmp	#LR__0654
074a4     C6 32 0E F2 | 	cmp	local07, #198 wz
074a8     AC 03 90 AD |  if_e	jmp	#LR__0655
074ac     61 32 0E F2 | 	cmp	local07, #97 wz
074b0     B0 03 90 AD |  if_e	jmp	#LR__0656
074b4     63 32 0E F2 | 	cmp	local07, #99 wz
074b8     B4 03 90 AD |  if_e	jmp	#LR__0657
074bc     41 32 0E F2 | 	cmp	local07, #65 wz
074c0     68 05 90 AD |  if_e	jmp	#LR__0691
074c4     4B 32 0E F2 | 	cmp	local07, #75 wz
074c8     B0 03 90 AD |  if_e	jmp	#LR__0658
074cc     C1 32 0E F2 | 	cmp	local07, #193 wz
074d0     B4 03 90 AD |  if_e	jmp	#LR__0659
074d4     B3 32 0E F2 | 	cmp	local07, #179 wz
074d8     B8 03 90 AD |  if_e	jmp	#LR__0660
074dc     5E 32 0E F2 | 	cmp	local07, #94 wz
074e0     BC 03 90 AD |  if_e	jmp	#LR__0661
074e4     7C 32 0E F2 | 	cmp	local07, #124 wz
074e8     C0 03 90 AD |  if_e	jmp	#LR__0662
074ec     7D 32 0E F2 | 	cmp	local07, #125 wz
074f0     C4 03 90 AD |  if_e	jmp	#LR__0663
074f4     7E 32 0E F2 | 	cmp	local07, #126 wz
074f8     C8 03 90 AD |  if_e	jmp	#LR__0664
074fc     7F 32 0E F2 | 	cmp	local07, #127 wz
07500     CC 03 90 AD |  if_e	jmp	#LR__0665
07504     80 32 0E F2 | 	cmp	local07, #128 wz
07508     D0 03 90 AD |  if_e	jmp	#LR__0666
0750c     55 32 0E F2 | 	cmp	local07, #85 wz
07510     D4 03 90 AD |  if_e	jmp	#LR__0667
07514     75 32 0E F2 | 	cmp	local07, #117 wz
07518     D8 03 90 AD |  if_e	jmp	#LR__0668
0751c     42 32 0E F2 | 	cmp	local07, #66 wz
07520     E0 03 90 AD |  if_e	jmp	#LR__0669
07524     95 32 0E F2 | 	cmp	local07, #149 wz
07528     E8 03 90 AD |  if_e	jmp	#LR__0670
0752c     AC 32 0E F2 | 	cmp	local07, #172 wz
07530     F8 04 90 AD |  if_e	jmp	#LR__0691
07534     81 32 0E F2 | 	cmp	local07, #129 wz
07538     E4 03 90 AD |  if_e	jmp	#LR__0671
0753c     44 32 0E F2 | 	cmp	local07, #68 wz
07540     E8 03 90 AD |  if_e	jmp	#LR__0672
07544     BC 32 0E F2 | 	cmp	local07, #188 wz
07548     EC 03 90 AD |  if_e	jmp	#LR__0673
0754c     88 32 0E F2 | 	cmp	local07, #136 wz
07550     D8 04 90 AD |  if_e	jmp	#LR__0691
07554     92 32 0E F2 | 	cmp	local07, #146 wz
07558     EC 03 90 AD |  if_e	jmp	#LR__0674
0755c     BE 32 0E F2 | 	cmp	local07, #190 wz
07560     84 05 90 AD |  if_e	jmp	#LR__0692
07564     AA 32 0E F2 | 	cmp	local07, #170 wz
07568     C0 04 90 AD |  if_e	jmp	#LR__0691
0756c     4D 32 0E F2 | 	cmp	local07, #77 wz
07570     E0 03 90 AD |  if_e	jmp	#LR__0675
07574     51 32 0E F2 | 	cmp	local07, #81 wz
07578     E8 03 90 AD |  if_e	jmp	#LR__0676
0757c     8E 32 0E F2 | 	cmp	local07, #142 wz
07580     F0 03 90 AD |  if_e	jmp	#LR__0677
07584     90 32 0E F2 | 	cmp	local07, #144 wz
07588     F4 03 90 AD |  if_e	jmp	#LR__0678
0758c     8D 32 0E F2 | 	cmp	local07, #141 wz
07590     F8 03 90 AD |  if_e	jmp	#LR__0679
07594     8C 32 0E F2 | 	cmp	local07, #140 wz
07598     FC 03 90 AD |  if_e	jmp	#LR__0680
0759c     91 32 0E F2 | 	cmp	local07, #145 wz
075a0     00 04 90 AD |  if_e	jmp	#LR__0681
075a4     8B 32 0E F2 | 	cmp	local07, #139 wz
075a8     04 04 90 AD |  if_e	jmp	#LR__0682
075ac     8F 32 0E F2 | 	cmp	local07, #143 wz
075b0     08 04 90 AD |  if_e	jmp	#LR__0683
075b4     B2 32 0E F2 | 	cmp	local07, #178 wz
075b8     0C 04 90 AD |  if_e	jmp	#LR__0684
075bc     6D 32 0E F2 | 	cmp	local07, #109 wz
075c0     14 04 90 AD |  if_e	jmp	#LR__0685
075c4     70 32 0E F2 | 	cmp	local07, #112 wz
075c8     60 04 90 AD |  if_e	jmp	#LR__0691
075cc     56 32 0E F2 | 	cmp	local07, #86 wz
075d0     10 04 90 AD |  if_e	jmp	#LR__0686
075d4     57 32 0E F2 | 	cmp	local07, #87 wz
075d8     50 04 90 AD |  if_e	jmp	#LR__0691
075dc     79 32 0E F2 | 	cmp	local07, #121 wz
075e0     0C 04 90 AD |  if_e	jmp	#LR__0687
075e4     77 32 0E F2 | 	cmp	local07, #119 wz
075e8     10 04 90 AD |  if_e	jmp	#LR__0688
075ec     78 32 0E F2 | 	cmp	local07, #120 wz
075f0     14 04 90 AD |  if_e	jmp	#LR__0689
075f4     01 00 00 FF 
075f8     04 32 0E F2 | 	cmp	local07, ##516 wz
075fc     14 04 90 AD |  if_e	jmp	#LR__0690
07600     E4 04 90 FD | 	jmp	#LR__0692
07604                 | LR__0613
07604     30 0B B0 FD | 	call	#_compile_fun_2p
07608     FD 30 02 F6 | 	mov	local06, result1
0760c     1C 04 90 FD | 	jmp	#LR__0691
07610                 | LR__0614
07610     F4 0D B0 FD | 	call	#_compile_fun_varp
07614     FD 34 02 F6 | 	mov	local08, result1
07618     FE 30 02 F6 | 	mov	local06, result2
0761c     0C 04 90 FD | 	jmp	#LR__0691
07620                 | LR__0615
07620     E4 0D B0 FD | 	call	#_compile_fun_varp
07624     FD 34 02 F6 | 	mov	local08, result1
07628     FE 30 02 F6 | 	mov	local06, result2
0762c     FC 03 90 FD | 	jmp	#LR__0691
07630                 | LR__0616
07630     D4 0D B0 FD | 	call	#_compile_fun_varp
07634     FD 34 02 F6 | 	mov	local08, result1
07638     FE 30 02 F6 | 	mov	local06, result2
0763c     EC 03 90 FD | 	jmp	#LR__0691
07640                 | LR__0617
07640                 | ' return expr()
07640     B8 3B B0 FD | 	call	#_expr
07644     FD 30 02 F6 | 	mov	local06, result1
07648     E0 03 90 FD | 	jmp	#LR__0691
0764c                 | LR__0618
0764c     B8 0D B0 FD | 	call	#_compile_fun_varp
07650     FD 34 02 F6 | 	mov	local08, result1
07654     FE 30 02 F6 | 	mov	local06, result2
07658     D0 03 90 FD | 	jmp	#LR__0691
0765c                 | LR__0619
0765c                 | ' return expr()
0765c     9C 3B B0 FD | 	call	#_expr
07660     FD 30 02 F6 | 	mov	local06, result1
07664     C4 03 90 FD | 	jmp	#LR__0691
07668                 | LR__0620
07668                 | ' return expr()
07668     90 3B B0 FD | 	call	#_expr
0766c     FD 30 02 F6 | 	mov	local06, result1
07670     B8 03 90 FD | 	jmp	#LR__0691
07674                 | LR__0621
07674                 | ' return expr()
07674     84 3B B0 FD | 	call	#_expr
07678     FD 30 02 F6 | 	mov	local06, result1
0767c     AC 03 90 FD | 	jmp	#LR__0691
07680                 | LR__0622
07680     84 0D B0 FD | 	call	#_compile_fun_varp
07684     FD 34 02 F6 | 	mov	local08, result1
07688     FE 30 02 F6 | 	mov	local06, result2
0768c     9C 03 90 FD | 	jmp	#LR__0691
07690                 | LR__0623
07690     A4 0A B0 FD | 	call	#_compile_fun_2p
07694     FD 30 02 F6 | 	mov	local06, result1
07698     90 03 90 FD | 	jmp	#LR__0691
0769c                 | LR__0624
0769c     98 0A B0 FD | 	call	#_compile_fun_2p
076a0     FD 30 02 F6 | 	mov	local06, result1
076a4     84 03 90 FD | 	jmp	#LR__0691
076a8                 | LR__0625
076a8     8C 0A B0 FD | 	call	#_compile_fun_2p
076ac     FD 30 02 F6 | 	mov	local06, result1
076b0     78 03 90 FD | 	jmp	#LR__0691
076b4                 | LR__0626
076b4     80 0A B0 FD | 	call	#_compile_fun_2p
076b8     FD 30 02 F6 | 	mov	local06, result1
076bc     6C 03 90 FD | 	jmp	#LR__0691
076c0                 | LR__0627
076c0                 | ' return expr()
076c0     38 3B B0 FD | 	call	#_expr
076c4     FD 30 02 F6 | 	mov	local06, result1
076c8     60 03 90 FD | 	jmp	#LR__0691
076cc                 | LR__0628
076cc     38 0D B0 FD | 	call	#_compile_fun_varp
076d0     FD 34 02 F6 | 	mov	local08, result1
076d4     FE 30 02 F6 | 	mov	local06, result2
076d8     50 03 90 FD | 	jmp	#LR__0691
076dc                 | LR__0629
076dc     28 0D B0 FD | 	call	#_compile_fun_varp
076e0     FD 34 02 F6 | 	mov	local08, result1
076e4     FE 30 02 F6 | 	mov	local06, result2
076e8     40 03 90 FD | 	jmp	#LR__0691
076ec                 | LR__0630
076ec     18 0D B0 FD | 	call	#_compile_fun_varp
076f0     FD 34 02 F6 | 	mov	local08, result1
076f4     FE 30 02 F6 | 	mov	local06, result2
076f8     30 03 90 FD | 	jmp	#LR__0691
076fc                 | LR__0631
076fc                 | ' return expr()
076fc     FC 3A B0 FD | 	call	#_expr
07700     FD 30 02 F6 | 	mov	local06, result1
07704     24 03 90 FD | 	jmp	#LR__0691
07708                 | LR__0632
07708     30 21 B0 FD | 	call	#_compile_dim
0770c     FD 30 02 F6 | 	mov	local06, result1
07710     D4 03 90 FD | 	jmp	#LR__0692
07714                 | LR__0633
07714     F0 0C B0 FD | 	call	#_compile_fun_varp
07718     FD 34 02 F6 | 	mov	local08, result1
0771c     FE 30 02 F6 | 	mov	local06, result2
07720     08 03 90 FD | 	jmp	#LR__0691
07724                 | LR__0634
07724     10 0A B0 FD | 	call	#_compile_fun_2p
07728     FD 30 02 F6 | 	mov	local06, result1
0772c     FC 02 90 FD | 	jmp	#LR__0691
07730                 | LR__0635
07730     D4 0C B0 FD | 	call	#_compile_fun_varp
07734     FD 34 02 F6 | 	mov	local08, result1
07738     FE 30 02 F6 | 	mov	local06, result2
0773c     EC 02 90 FD | 	jmp	#LR__0691
07740                 | LR__0636
07740     17 13 02 F6 | 	mov	arg01, local05
07744     BC 1F B0 FD | 	call	#_compile_else
07748     FD 30 02 F6 | 	mov	local06, result1
0774c     98 03 90 FD | 	jmp	#LR__0692
07750                 | LR__0637
07750     B4 0C B0 FD | 	call	#_compile_fun_varp
07754     FD 34 02 F6 | 	mov	local08, result1
07758     FE 30 02 F6 | 	mov	local06, result2
0775c     CC 02 90 FD | 	jmp	#LR__0691
07760                 | LR__0638
07760     A4 0C B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     BC 02 90 FD | 	jmp	#LR__0691
07770                 | LR__0639
07770     01 2E 16 F2 | 	cmp	local05, #1 wc
07774     08 00 90 CD |  if_b	jmp	#LR__0640
07778     D4 2C B0 FD | 	call	#_compile_goto
0777c     68 03 90 FD | 	jmp	#LR__0692
07780                 | LR__0640
07780     19 12 06 F6 | 	mov	arg01, #25
07784     00 14 06 F6 | 	mov	arg02, #0
07788     F8 8B B1 FD | 	call	#_printerror
0778c     58 03 90 FD | 	jmp	#LR__0692
07790                 | LR__0641
07790     01 2E 16 F2 | 	cmp	local05, #1 wc
07794     08 00 90 CD |  if_b	jmp	#LR__0642
07798     50 2C B0 FD | 	call	#_compile_gosub
0779c     48 03 90 FD | 	jmp	#LR__0692
077a0                 | LR__0642
077a0     19 12 06 F6 | 	mov	arg01, #25
077a4     00 14 06 F6 | 	mov	arg02, #0
077a8     D8 8B B1 FD | 	call	#_printerror
077ac     38 03 90 FD | 	jmp	#LR__0692
077b0                 | LR__0643
077b0     54 0C B0 FD | 	call	#_compile_fun_varp
077b4     FD 34 02 F6 | 	mov	local08, result1
077b8     FE 30 02 F6 | 	mov	local06, result2
077bc     6C 02 90 FD | 	jmp	#LR__0691
077c0                 | LR__0644
077c0     EC 0A B0 FD | 	call	#_compile_fun_4p
077c4     FD 30 02 F6 | 	mov	local06, result1
077c8     60 02 90 FD | 	jmp	#LR__0691
077cc                 | LR__0645
077cc                 | ' return expr()
077cc     2C 3A B0 FD | 	call	#_expr
077d0     FD 30 02 F6 | 	mov	local06, result1
077d4     54 02 90 FD | 	jmp	#LR__0691
077d8                 | LR__0646
077d8     34 27 B0 FD | 	call	#_compile_for
077dc     FD 30 02 F6 | 	mov	local06, result1
077e0     04 03 90 FD | 	jmp	#LR__0692
077e4                 | LR__0647
077e4     20 0C B0 FD | 	call	#_compile_fun_varp
077e8     FD 34 02 F6 | 	mov	local08, result1
077ec     FE 30 02 F6 | 	mov	local06, result2
077f0     38 02 90 FD | 	jmp	#LR__0691
077f4                 | LR__0648
077f4     17 13 02 F6 | 	mov	arg01, local05
077f8     80 1D B0 FD | 	call	#_compile_if
077fc     FD 30 02 F6 | 	mov	local06, result1
07800     E4 02 90 FD | 	jmp	#LR__0692
07804                 | LR__0649
07804                 | ' return expr()
07804     F4 39 B0 FD | 	call	#_expr
07808     FD 30 02 F6 | 	mov	local06, result1
0780c     1C 02 90 FD | 	jmp	#LR__0691
07810                 | LR__0650
07810     D0 0C B0 FD | 	call	#_compile_input
07814     FD 34 02 F6 | 	mov	local08, result1
07818     FE 30 02 F6 | 	mov	local06, result2
0781c     0C 02 90 FD | 	jmp	#LR__0691
07820                 | LR__0651
07820                 | ' return expr()
07820     D8 39 B0 FD | 	call	#_expr
07824     FD 30 02 F6 | 	mov	local06, result1
07828     00 02 90 FD | 	jmp	#LR__0691
0782c                 | LR__0652
0782c     D8 0B B0 FD | 	call	#_compile_fun_varp
07830     FD 34 02 F6 | 	mov	local08, result1
07834     FE 30 02 F6 | 	mov	local06, result2
07838     F0 01 90 FD | 	jmp	#LR__0691
0783c                 | LR__0653
0783c     C8 0B B0 FD | 	call	#_compile_fun_varp
07840     FD 34 02 F6 | 	mov	local08, result1
07844     FE 30 02 F6 | 	mov	local06, result2
07848     E0 01 90 FD | 	jmp	#LR__0691
0784c                 | LR__0654
0784c     E8 08 B0 FD | 	call	#_compile_fun_2p
07850     FD 30 02 F6 | 	mov	local06, result1
07854     D4 01 90 FD | 	jmp	#LR__0691
07858                 | LR__0655
07858                 | ' return expr()
07858     A0 39 B0 FD | 	call	#_expr
0785c     FD 30 02 F6 | 	mov	local06, result1
07860     C8 01 90 FD | 	jmp	#LR__0691
07864                 | LR__0656
07864                 | ' return expr()
07864     94 39 B0 FD | 	call	#_expr
07868     FD 30 02 F6 | 	mov	local06, result1
0786c     BC 01 90 FD | 	jmp	#LR__0691
07870                 | LR__0657
07870                 | ' return expr()
07870     88 39 B0 FD | 	call	#_expr
07874     FD 30 02 F6 | 	mov	local06, result1
07878     B0 01 90 FD | 	jmp	#LR__0691
0787c                 | LR__0658
0787c     D4 29 B0 FD | 	call	#_compile_next
07880     FD 30 02 F6 | 	mov	local06, result1
07884     60 02 90 FD | 	jmp	#LR__0692
07888                 | LR__0659
07888     B4 2F B0 FD | 	call	#_compile_on
0788c     FD 30 02 F6 | 	mov	local06, result1
07890     54 02 90 FD | 	jmp	#LR__0692
07894                 | LR__0660
07894     28 09 B0 FD | 	call	#_compile_fun_3p
07898     FD 30 02 F6 | 	mov	local06, result1
0789c     8C 01 90 FD | 	jmp	#LR__0691
078a0                 | LR__0661
078a0                 | ' return expr()
078a0     58 39 B0 FD | 	call	#_expr
078a4     FD 30 02 F6 | 	mov	local06, result1
078a8     80 01 90 FD | 	jmp	#LR__0691
078ac                 | LR__0662
078ac                 | ' return expr()
078ac     4C 39 B0 FD | 	call	#_expr
078b0     FD 30 02 F6 | 	mov	local06, result1
078b4     74 01 90 FD | 	jmp	#LR__0691
078b8                 | LR__0663
078b8                 | ' return expr()
078b8     40 39 B0 FD | 	call	#_expr
078bc     FD 30 02 F6 | 	mov	local06, result1
078c0     68 01 90 FD | 	jmp	#LR__0691
078c4                 | LR__0664
078c4                 | ' return expr()
078c4     34 39 B0 FD | 	call	#_expr
078c8     FD 30 02 F6 | 	mov	local06, result1
078cc     5C 01 90 FD | 	jmp	#LR__0691
078d0                 | LR__0665
078d0     DC 09 B0 FD | 	call	#_compile_fun_4p
078d4     FD 30 02 F6 | 	mov	local06, result1
078d8     50 01 90 FD | 	jmp	#LR__0691
078dc                 | LR__0666
078dc                 | ' return expr()
078dc     1C 39 B0 FD | 	call	#_expr
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     44 01 90 FD | 	jmp	#LR__0691
078e8                 | LR__0667
078e8     4C 08 B0 FD | 	call	#_compile_fun_2p
078ec     FD 30 02 F6 | 	mov	local06, result1
078f0     38 01 90 FD | 	jmp	#LR__0691
078f4                 | LR__0668
078f4     10 0B B0 FD | 	call	#_compile_fun_varp
078f8     FD 34 02 F6 | 	mov	local08, result1
078fc     FE 30 02 F6 | 	mov	local06, result2
07900     28 01 90 FD | 	jmp	#LR__0691
07904                 | LR__0669
07904     00 0B B0 FD | 	call	#_compile_fun_varp
07908     FD 34 02 F6 | 	mov	local08, result1
0790c     FE 30 02 F6 | 	mov	local06, result2
07910     18 01 90 FD | 	jmp	#LR__0691
07914                 | LR__0670
07914     20 08 B0 FD | 	call	#_compile_fun_2p
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     0C 01 90 FD | 	jmp	#LR__0691
07920                 | LR__0671
07920     14 08 B0 FD | 	call	#_compile_fun_2p
07924     FD 30 02 F6 | 	mov	local06, result1
07928     00 01 90 FD | 	jmp	#LR__0691
0792c                 | LR__0672
0792c     74 15 B0 FD | 	call	#_compile_print
07930     FD 30 02 F6 | 	mov	local06, result1
07934     B0 01 90 FD | 	jmp	#LR__0692
07938                 | LR__0673
07938     CC 0A B0 FD | 	call	#_compile_fun_varp
0793c     FD 34 02 F6 | 	mov	local08, result1
07940     FE 30 02 F6 | 	mov	local06, result2
07944     E4 00 90 FD | 	jmp	#LR__0691
07948                 | LR__0674
07948                 | ' return expr()
07948     B0 38 B0 FD | 	call	#_expr
0794c     FD 30 02 F6 | 	mov	local06, result1
07950     D8 00 90 FD | 	jmp	#LR__0691
07954                 | LR__0675
07954     B0 0A B0 FD | 	call	#_compile_fun_varp
07958     FD 34 02 F6 | 	mov	local08, result1
0795c     FE 30 02 F6 | 	mov	local06, result2
07960     C8 00 90 FD | 	jmp	#LR__0691
07964                 | LR__0676
07964     A0 0A B0 FD | 	call	#_compile_fun_varp
07968     FD 34 02 F6 | 	mov	local08, result1
0796c     FE 30 02 F6 | 	mov	local06, result2
07970     B8 00 90 FD | 	jmp	#LR__0691
07974                 | LR__0677
07974     C0 07 B0 FD | 	call	#_compile_fun_2p
07978     FD 30 02 F6 | 	mov	local06, result1
0797c     AC 00 90 FD | 	jmp	#LR__0691
07980                 | LR__0678
07980     B4 07 B0 FD | 	call	#_compile_fun_2p
07984     FD 30 02 F6 | 	mov	local06, result1
07988     A0 00 90 FD | 	jmp	#LR__0691
0798c                 | LR__0679
0798c     A8 07 B0 FD | 	call	#_compile_fun_2p
07990     FD 30 02 F6 | 	mov	local06, result1
07994     94 00 90 FD | 	jmp	#LR__0691
07998                 | LR__0680
07998     9C 07 B0 FD | 	call	#_compile_fun_2p
0799c     FD 30 02 F6 | 	mov	local06, result1
079a0     88 00 90 FD | 	jmp	#LR__0691
079a4                 | LR__0681
079a4     90 07 B0 FD | 	call	#_compile_fun_2p
079a8     FD 30 02 F6 | 	mov	local06, result1
079ac     7C 00 90 FD | 	jmp	#LR__0691
079b0                 | LR__0682
079b0     84 07 B0 FD | 	call	#_compile_fun_2p
079b4     FD 30 02 F6 | 	mov	local06, result1
079b8     70 00 90 FD | 	jmp	#LR__0691
079bc                 | LR__0683
079bc     78 07 B0 FD | 	call	#_compile_fun_2p
079c0     FD 30 02 F6 | 	mov	local06, result1
079c4     64 00 90 FD | 	jmp	#LR__0691
079c8                 | LR__0684
079c8     3C 0A B0 FD | 	call	#_compile_fun_varp
079cc     FD 34 02 F6 | 	mov	local08, result1
079d0     FE 30 02 F6 | 	mov	local06, result2
079d4     54 00 90 FD | 	jmp	#LR__0691
079d8                 | LR__0685
079d8     E4 07 B0 FD | 	call	#_compile_fun_3p
079dc     FD 30 02 F6 | 	mov	local06, result1
079e0     48 00 90 FD | 	jmp	#LR__0691
079e4                 | LR__0686
079e4                 | ' return expr()
079e4     14 38 B0 FD | 	call	#_expr
079e8     FD 30 02 F6 | 	mov	local06, result1
079ec     3C 00 90 FD | 	jmp	#LR__0691
079f0                 | LR__0687
079f0     44 07 B0 FD | 	call	#_compile_fun_2p
079f4     FD 30 02 F6 | 	mov	local06, result1
079f8     30 00 90 FD | 	jmp	#LR__0691
079fc                 | LR__0688
079fc     38 07 B0 FD | 	call	#_compile_fun_2p
07a00     FD 30 02 F6 | 	mov	local06, result1
07a04     24 00 90 FD | 	jmp	#LR__0691
07a08                 | LR__0689
07a08     2C 07 B0 FD | 	call	#_compile_fun_2p
07a0c     FD 30 02 F6 | 	mov	local06, result1
07a10     18 00 90 FD | 	jmp	#LR__0691
07a14                 | LR__0690
07a14     2C 12 B0 FD | 	call	#_compile_array_assign
07a18     FD 30 02 F6 | 	mov	local06, result1
07a1c     0E 30 0E F2 | 	cmp	local06, #14 wz
07a20     C4 00 90 5D |  if_ne	jmp	#LR__0692
07a24                 | ' return 23
07a24     17 30 06 F6 | 	mov	local06, #23
07a28     BC 00 90 FD | 	jmp	#LR__0692
07a2c                 | ' return 23
07a2c                 | LR__0691
07a2c     19 2B 02 F6 | 	mov	local03, local07
07a30     1A 27 02 F6 | 	mov	local01, local08
07a34     13 37 02 F6 | 	mov	local09, local01
07a38     14 39 02 F6 | 	mov	local10, local02
07a3c     15 33 02 F6 | 	mov	local07, local03
07a40     4A 00 00 FF 
07a44     7C E4 05 F1 | 	add	objptr, ##38012
07a48     F2 26 02 FB | 	rdlong	local01, objptr
07a4c     13 35 02 F6 | 	mov	local08, local01
07a50     01 34 66 F0 | 	shl	local08, #1
07a54     13 35 02 F1 | 	add	local08, local01
07a58     02 34 66 F0 | 	shl	local08, #2
07a5c     03 00 00 FF 
07a60     00 E4 85 F1 | 	sub	objptr, ##1536
07a64     F2 34 02 F1 | 	add	local08, objptr
07a68     1A 37 62 FC | 	wrlong	local09, local08
07a6c     03 00 00 FF 
07a70     00 E4 05 F1 | 	add	objptr, ##1536
07a74     F2 26 02 FB | 	rdlong	local01, objptr
07a78     13 37 02 F6 | 	mov	local09, local01
07a7c     01 36 66 F0 | 	shl	local09, #1
07a80     13 37 02 F1 | 	add	local09, local01
07a84     02 36 66 F0 | 	shl	local09, #2
07a88     03 00 00 FF 
07a8c     00 E4 85 F1 | 	sub	objptr, ##1536
07a90     F2 36 02 F1 | 	add	local09, objptr
07a94     04 36 06 F1 | 	add	local09, #4
07a98     1B 39 62 FC | 	wrlong	local10, local09
07a9c     03 00 00 FF 
07aa0     00 E4 05 F1 | 	add	objptr, ##1536
07aa4     F2 26 02 FB | 	rdlong	local01, objptr
07aa8     13 39 02 F6 | 	mov	local10, local01
07aac     01 38 66 F0 | 	shl	local10, #1
07ab0     13 39 02 F1 | 	add	local10, local01
07ab4     02 38 66 F0 | 	shl	local10, #2
07ab8     03 00 00 FF 
07abc     00 E4 85 F1 | 	sub	objptr, ##1536
07ac0     F2 38 02 F1 | 	add	local10, objptr
07ac4     08 38 06 F1 | 	add	local10, #8
07ac8     1C 33 62 FC | 	wrlong	local07, local10
07acc     03 00 00 FF 
07ad0     00 E4 05 F1 | 	add	objptr, ##1536
07ad4     F2 36 02 FB | 	rdlong	local09, objptr
07ad8     01 36 06 F1 | 	add	local09, #1
07adc     F2 36 62 FC | 	wrlong	local09, objptr
07ae0     4A 00 00 FF 
07ae4     7C E4 85 F1 | 	sub	objptr, ##38012
07ae8                 | LR__0692
07ae8                 | ' 
07ae8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07ae8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07ae8     03 2C 0E F2 | 	cmp	local04, #3 wz
07aec     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07af0     38 00 90 5D |  if_ne	jmp	#LR__0693
07af4     4A 00 00 FF 
07af8     7C E4 05 F1 | 	add	objptr, ##38012
07afc     F2 38 02 FB | 	rdlong	local10, objptr
07b00     1C 27 02 F6 | 	mov	local01, local10
07b04     01 26 66 F0 | 	shl	local01, #1
07b08     1C 27 02 F1 | 	add	local01, local10
07b0c     02 26 66 F0 | 	shl	local01, #2
07b10     03 00 00 FF 
07b14     00 E4 85 F1 | 	sub	objptr, ##1536
07b18     F2 26 02 F1 | 	add	local01, objptr
07b1c     08 26 06 F1 | 	add	local01, #8
07b20     13 FD 6B FC | 	wrlong	#510, local01
07b24     47 00 00 FF 
07b28     7C E4 85 F1 | 	sub	objptr, ##36476
07b2c                 | LR__0693
07b2c                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07b2c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07b2c     4A 00 00 FF 
07b30     7C E4 05 F1 | 	add	objptr, ##38012
07b34     F2 26 02 FB | 	rdlong	local01, objptr
07b38     4A 00 00 FF 
07b3c     7C E4 85 F1 | 	sub	objptr, ##38012
07b40     97 58 48 FB | 	callpa	#(@LR__0696-@LR__0694)>>2,fcache_load_ptr_
07b44                 | LR__0694
07b44     13 39 02 F6 | 	mov	local10, local01
07b48     01 38 66 F0 | 	shl	local10, #1
07b4c     13 39 02 F1 | 	add	local10, local01
07b50     02 38 66 F0 | 	shl	local10, #2
07b54     47 00 00 FF 
07b58     7C E4 05 F1 | 	add	objptr, ##36476
07b5c     F2 38 02 F1 | 	add	local10, objptr
07b60     08 38 06 F1 | 	add	local10, #8
07b64     1C 39 02 FB | 	rdlong	local10, local10
07b68     9B 38 0E F2 | 	cmp	local10, #155 wz
07b6c     47 00 00 FF 
07b70     7C E4 85 F1 | 	sub	objptr, ##36476
07b74     70 00 90 5D |  if_ne	jmp	#LR__0695
07b78     13 37 02 F6 | 	mov	local09, local01
07b7c     01 36 86 F1 | 	sub	local09, #1
07b80     1B 39 02 F6 | 	mov	local10, local09
07b84     01 38 66 F0 | 	shl	local10, #1
07b88     1B 39 02 F1 | 	add	local10, local09
07b8c     02 38 66 F0 | 	shl	local10, #2
07b90     47 00 00 FF 
07b94     7C E4 05 F1 | 	add	objptr, ##36476
07b98     F2 38 02 F1 | 	add	local10, objptr
07b9c     08 38 06 F1 | 	add	local10, #8
07ba0     1C 39 02 FB | 	rdlong	local10, local10
07ba4     11 38 0E F2 | 	cmp	local10, #17 wz
07ba8     47 00 00 FF 
07bac     7C E4 85 F1 | 	sub	objptr, ##36476
07bb0     34 00 90 5D |  if_ne	jmp	#LR__0695
07bb4     13 37 02 F6 | 	mov	local09, local01
07bb8     01 36 86 F1 | 	sub	local09, #1
07bbc     1B 39 02 F6 | 	mov	local10, local09
07bc0     01 38 66 F0 | 	shl	local10, #1
07bc4     1B 39 02 F1 | 	add	local10, local09
07bc8     02 38 66 F0 | 	shl	local10, #2
07bcc     47 00 00 FF 
07bd0     7C E4 05 F1 | 	add	objptr, ##36476
07bd4     F2 38 02 F1 | 	add	local10, objptr
07bd8     08 38 06 F1 | 	add	local10, #8
07bdc     1C 25 68 FC | 	wrlong	#18, local10
07be0     47 00 00 FF 
07be4     7C E4 85 F1 | 	sub	objptr, ##36476
07be8                 | LR__0695
07be8     01 26 86 F1 | 	sub	local01, #1
07bec     01 26 56 F2 | 	cmps	local01, #1 wc
07bf0     50 FF 9F 3D |  if_ae	jmp	#LR__0694
07bf4                 | LR__0696
07bf4                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07bf4                 | ' return err
07bf4     18 FB 01 F6 | 	mov	result1, local06
07bf8     A7 F0 03 F6 | 	mov	ptra, fp
07bfc     B2 00 A0 FD | 	call	#popregs_
07c00                 | _compile_immediate_ret
07c00     2D 00 64 FD | 	ret
07c04                 | 
07c04                 | ' 
07c04                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07c04                 | ' 
07c04                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07c04                 | _compile_immediate_assign
07c04     0C 4A 05 F6 | 	mov	COUNT_, #12
07c08     A8 00 A0 FD | 	call	#pushregs_
07c0c     09 2D 02 F6 | 	mov	local04, arg01
07c10     FF 2A 06 F6 | 	mov	local03, #255
07c14     01 2E 66 F6 | 	neg	local05, #1
07c18     00 30 06 F6 | 	mov	local06, #0
07c1c                 | ' 
07c1c                 | ' t1.result_type=result_error : t1.result.uresult=0
07c1c                 | ' i=-1: j=-1 : err=0
07c1c                 | ' 
07c1c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07c1c     02 2C 0E F2 | 	cmp	local04, #2 wz
07c20     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07c24     35 00 00 AF 
07c28     0C E4 05 A1 |  if_e	add	objptr, ##27148
07c2c     F2 32 02 AB |  if_e	rdlong	local07, objptr
07c30     02 00 00 AF 
07c34     38 E4 05 A1 |  if_e	add	objptr, ##1080
07c38     F2 04 68 AC |  if_e	wrlong	#2, objptr
07c3c     37 00 00 AF 
07c40     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07c44                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07c44     04 2C 0E F2 | 	cmp	local04, #4 wz
07c48     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07c4c     2C 00 90 5D |  if_ne	jmp	#LR__0700
07c50     35 00 00 FF 
07c54     14 E4 05 F1 | 	add	objptr, ##27156
07c58     F2 32 02 FB | 	rdlong	local07, objptr
07c5c     02 00 00 FF 
07c60     30 E4 05 F1 | 	add	objptr, ##1072
07c64     F2 06 68 FC | 	wrlong	#3, objptr
07c68     13 00 00 FF 
07c6c     38 E4 05 F1 | 	add	objptr, ##9784
07c70     F2 04 68 FC | 	wrlong	#2, objptr
07c74     4A 00 00 FF 
07c78     7C E4 85 F1 | 	sub	objptr, ##38012
07c7c                 | LR__0700
07c7c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07c7c     05 2C 0E F2 | 	cmp	local04, #5 wz
07c80     3C 00 90 5D |  if_ne	jmp	#LR__0701
07c84     37 00 00 FF 
07c88     44 E4 05 F1 | 	add	objptr, ##28228
07c8c     F2 FA 01 FB | 	rdlong	result1, objptr
07c90     FD 32 02 F6 | 	mov	local07, result1
07c94     03 32 66 F0 | 	shl	local07, #3
07c98     02 00 00 FF 
07c9c     38 E4 85 F1 | 	sub	objptr, ##1080
07ca0     F2 32 02 F1 | 	add	local07, objptr
07ca4     19 33 02 FB | 	rdlong	local07, local07
07ca8     02 FA 05 F1 | 	add	result1, #2
07cac     02 00 00 FF 
07cb0     38 E4 05 F1 | 	add	objptr, ##1080
07cb4     F2 FA 61 FC | 	wrlong	result1, objptr
07cb8     37 00 00 FF 
07cbc     44 E4 85 F1 | 	sub	objptr, ##28228
07cc0                 | LR__0701
07cc0     19 13 02 F6 | 	mov	arg01, local07
07cc4     01 14 06 F6 | 	mov	arg02, #1
07cc8     4C E1 B1 FD | 	call	#__system__Right_S
07ccc     FD 34 02 F6 | 	mov	local08, result1
07cd0     28 35 B0 FD | 	call	#_expr
07cd4                 | ' 
07cd4                 | ' suffix2$=right$(varname2$,1)
07cd4                 | ' expr()
07cd4                 | ' if varnum>0 then					' try to find a variable
07cd4     35 00 00 FF 
07cd8     08 E4 05 F1 | 	add	objptr, ##27144
07cdc     F2 36 02 FB | 	rdlong	local09, objptr
07ce0     35 00 00 FF 
07ce4     08 E4 85 F1 | 	sub	objptr, ##27144
07ce8     01 36 56 F2 | 	cmps	local09, #1 wc
07cec     58 00 90 CD |  if_b	jmp	#LR__0704
07cf0                 | '   for i=0 to varnum-1
07cf0     00 38 06 F6 | 	mov	local10, #0
07cf4     35 00 00 FF 
07cf8     08 E4 05 F1 | 	add	objptr, ##27144
07cfc     F2 3A 02 FB | 	rdlong	local11, objptr
07d00     35 00 00 FF 
07d04     08 E4 85 F1 | 	sub	objptr, ##27144
07d08                 | LR__0702
07d08     1D 39 52 F2 | 	cmps	local10, local11 wc
07d0c     38 00 90 3D |  if_ae	jmp	#LR__0703
07d10                 | '     if variables(i).name=varname2$ then j=i : exit
07d10     1C 37 02 F6 | 	mov	local09, local10
07d14     04 36 66 F0 | 	shl	local09, #4
07d18     14 00 00 FF 
07d1c     F8 E5 05 F1 | 	add	objptr, ##10744
07d20     F2 36 02 F1 | 	add	local09, objptr
07d24     1B 13 02 FB | 	rdlong	arg01, local09
07d28     19 15 02 F6 | 	mov	arg02, local07
07d2c     14 00 00 FF 
07d30     F8 E5 85 F1 | 	sub	objptr, ##10744
07d34     04 C0 B1 FD | 	call	#__system___string_cmp
07d38     00 FA 0D F2 | 	cmp	result1, #0 wz
07d3c     1C 2F 02 A6 |  if_e	mov	local05, local10
07d40     01 38 06 51 |  if_ne	add	local10, #1
07d44     C0 FF 9F 5D |  if_ne	jmp	#LR__0702
07d48                 | LR__0703
07d48                 | LR__0704
07d48                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07d48     FF FF 7F FF 
07d4c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07d50     60 00 90 5D |  if_ne	jmp	#LR__0705
07d54     35 00 00 FF 
07d58     08 E4 05 F1 | 	add	objptr, ##27144
07d5c     F2 36 02 FB | 	rdlong	local09, objptr
07d60     35 00 00 FF 
07d64     08 E4 85 F1 | 	sub	objptr, ##27144
07d68     02 00 00 FF 
07d6c     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d70     40 00 90 3D |  if_ae	jmp	#LR__0705
07d74     35 00 00 FF 
07d78     08 E4 05 F1 | 	add	objptr, ##27144
07d7c     F2 3A 02 FB | 	rdlong	local11, objptr
07d80     04 3A 66 F0 | 	shl	local11, #4
07d84     20 00 00 FF 
07d88     10 E4 85 F1 | 	sub	objptr, ##16400
07d8c     F2 3A 02 F1 | 	add	local11, objptr
07d90     1D 33 62 FC | 	wrlong	local07, local11
07d94     20 00 00 FF 
07d98     10 E4 05 F1 | 	add	objptr, ##16400
07d9c     F2 36 02 FB | 	rdlong	local09, objptr
07da0     1B 2F 02 F6 | 	mov	local05, local09
07da4     01 36 06 F1 | 	add	local09, #1
07da8     F2 36 62 FC | 	wrlong	local09, objptr
07dac     35 00 00 FF 
07db0     08 E4 85 F1 | 	sub	objptr, ##27144
07db4                 | LR__0705
07db4                 | ' if varnum>=maxvars then
07db4     35 00 00 FF 
07db8     08 E4 05 F1 | 	add	objptr, ##27144
07dbc     F2 36 02 FB | 	rdlong	local09, objptr
07dc0     35 00 00 FF 
07dc4     08 E4 85 F1 | 	sub	objptr, ##27144
07dc8     02 00 00 FF 
07dcc     00 36 56 F2 | 	cmps	local09, ##1024 wc
07dd0     2D 30 06 36 |  if_ae	mov	local06, #45
07dd4     C8 01 90 3D |  if_ae	jmp	#LR__0710
07dd8     17 27 02 F6 | 	mov	local01, local05
07ddc     17 2A 06 F6 | 	mov	local03, #23
07de0     13 37 02 F6 | 	mov	local09, local01
07de4     14 3D 02 F6 | 	mov	local12, local02
07de8     15 27 02 F6 | 	mov	local01, local03
07dec     4A 00 00 FF 
07df0     7C E4 05 F1 | 	add	objptr, ##38012
07df4     F2 3A 02 FB | 	rdlong	local11, objptr
07df8     1D 39 02 F6 | 	mov	local10, local11
07dfc     01 38 66 F0 | 	shl	local10, #1
07e00     1D 39 02 F1 | 	add	local10, local11
07e04     02 38 66 F0 | 	shl	local10, #2
07e08     03 00 00 FF 
07e0c     00 E4 85 F1 | 	sub	objptr, ##1536
07e10     F2 38 02 F1 | 	add	local10, objptr
07e14     1C 37 62 FC | 	wrlong	local09, local10
07e18     03 00 00 FF 
07e1c     00 E4 05 F1 | 	add	objptr, ##1536
07e20     F2 36 02 FB | 	rdlong	local09, objptr
07e24     1B 3B 02 F6 | 	mov	local11, local09
07e28     01 3A 66 F0 | 	shl	local11, #1
07e2c     1B 3B 02 F1 | 	add	local11, local09
07e30     02 3A 66 F0 | 	shl	local11, #2
07e34     03 00 00 FF 
07e38     00 E4 85 F1 | 	sub	objptr, ##1536
07e3c     F2 3A 02 F1 | 	add	local11, objptr
07e40     04 3A 06 F1 | 	add	local11, #4
07e44     1D 3D 62 FC | 	wrlong	local12, local11
07e48     03 00 00 FF 
07e4c     00 E4 05 F1 | 	add	objptr, ##1536
07e50     F2 36 02 FB | 	rdlong	local09, objptr
07e54     1B 3D 02 F6 | 	mov	local12, local09
07e58     01 3C 66 F0 | 	shl	local12, #1
07e5c     1B 3D 02 F1 | 	add	local12, local09
07e60     02 3C 66 F0 | 	shl	local12, #2
07e64     03 00 00 FF 
07e68     00 E4 85 F1 | 	sub	objptr, ##1536
07e6c     F2 3C 02 F1 | 	add	local12, objptr
07e70     08 3C 06 F1 | 	add	local12, #8
07e74     1E 27 62 FC | 	wrlong	local01, local12
07e78     03 00 00 FF 
07e7c     00 E4 05 F1 | 	add	objptr, ##1536
07e80     F2 36 02 FB | 	rdlong	local09, objptr
07e84     01 36 06 F1 | 	add	local09, #1
07e88     F2 36 62 FC | 	wrlong	local09, objptr
07e8c     4A 00 00 FF 
07e90     7C E4 85 F1 | 	sub	objptr, ##38012
07e94                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07e94                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07e94                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07e94     03 2C 0E F2 | 	cmp	local04, #3 wz
07e98     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07e9c     38 00 90 5D |  if_ne	jmp	#LR__0706
07ea0     4A 00 00 FF 
07ea4     7C E4 05 F1 | 	add	objptr, ##38012
07ea8     F2 3C 02 FB | 	rdlong	local12, objptr
07eac     1E 27 02 F6 | 	mov	local01, local12
07eb0     01 26 66 F0 | 	shl	local01, #1
07eb4     1E 27 02 F1 | 	add	local01, local12
07eb8     02 26 66 F0 | 	shl	local01, #2
07ebc     03 00 00 FF 
07ec0     00 E4 85 F1 | 	sub	objptr, ##1536
07ec4     F2 26 02 F1 | 	add	local01, objptr
07ec8     08 26 06 F1 | 	add	local01, #8
07ecc     13 FD 6B FC | 	wrlong	#510, local01
07ed0     47 00 00 FF 
07ed4     7C E4 85 F1 | 	sub	objptr, ##36476
07ed8                 | LR__0706
07ed8                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ed8     4A 00 00 FF 
07edc     7C E4 05 F1 | 	add	objptr, ##38012
07ee0     F2 38 02 FB | 	rdlong	local10, objptr
07ee4     4A 00 00 FF 
07ee8     7C E4 85 F1 | 	sub	objptr, ##38012
07eec     97 58 48 FB | 	callpa	#(@LR__0709-@LR__0707)>>2,fcache_load_ptr_
07ef0                 | LR__0707
07ef0     1C 3D 02 F6 | 	mov	local12, local10
07ef4     01 3C 66 F0 | 	shl	local12, #1
07ef8     1C 3D 02 F1 | 	add	local12, local10
07efc     02 3C 66 F0 | 	shl	local12, #2
07f00     47 00 00 FF 
07f04     7C E4 05 F1 | 	add	objptr, ##36476
07f08     F2 3C 02 F1 | 	add	local12, objptr
07f0c     08 3C 06 F1 | 	add	local12, #8
07f10     1E 3D 02 FB | 	rdlong	local12, local12
07f14     9B 3C 0E F2 | 	cmp	local12, #155 wz
07f18     47 00 00 FF 
07f1c     7C E4 85 F1 | 	sub	objptr, ##36476
07f20     70 00 90 5D |  if_ne	jmp	#LR__0708
07f24     1C 3D 02 F6 | 	mov	local12, local10
07f28     01 3C 86 F1 | 	sub	local12, #1
07f2c     1E 27 02 F6 | 	mov	local01, local12
07f30     01 26 66 F0 | 	shl	local01, #1
07f34     1E 27 02 F1 | 	add	local01, local12
07f38     02 26 66 F0 | 	shl	local01, #2
07f3c     47 00 00 FF 
07f40     7C E4 05 F1 | 	add	objptr, ##36476
07f44     F2 26 02 F1 | 	add	local01, objptr
07f48     08 26 06 F1 | 	add	local01, #8
07f4c     13 27 02 FB | 	rdlong	local01, local01
07f50     11 26 0E F2 | 	cmp	local01, #17 wz
07f54     47 00 00 FF 
07f58     7C E4 85 F1 | 	sub	objptr, ##36476
07f5c     34 00 90 5D |  if_ne	jmp	#LR__0708
07f60     1C 3D 02 F6 | 	mov	local12, local10
07f64     01 3C 86 F1 | 	sub	local12, #1
07f68     1E 27 02 F6 | 	mov	local01, local12
07f6c     01 26 66 F0 | 	shl	local01, #1
07f70     1E 27 02 F1 | 	add	local01, local12
07f74     02 26 66 F0 | 	shl	local01, #2
07f78     47 00 00 FF 
07f7c     7C E4 05 F1 | 	add	objptr, ##36476
07f80     F2 26 02 F1 | 	add	local01, objptr
07f84     08 26 06 F1 | 	add	local01, #8
07f88     13 25 68 FC | 	wrlong	#18, local01
07f8c     47 00 00 FF 
07f90     7C E4 85 F1 | 	sub	objptr, ##36476
07f94                 | LR__0708
07f94     01 38 86 F1 | 	sub	local10, #1
07f98     01 38 56 F2 | 	cmps	local10, #1 wc
07f9c     50 FF 9F 3D |  if_ae	jmp	#LR__0707
07fa0                 | LR__0709
07fa0                 | LR__0710
07fa0                 | ' return err
07fa0     18 FB 01 F6 | 	mov	result1, local06
07fa4     A7 F0 03 F6 | 	mov	ptra, fp
07fa8     B2 00 A0 FD | 	call	#popregs_
07fac                 | _compile_immediate_assign_ret
07fac     2D 00 64 FD | 	ret
07fb0                 | 
07fb0                 | ' 
07fb0                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07fb0                 | ' 
07fb0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07fb0                 | _compile
07fb0     03 4A 05 F6 | 	mov	COUNT_, #3
07fb4     A8 00 A0 FD | 	call	#pushregs_
07fb8     09 27 02 F6 | 	mov	local01, arg01
07fbc     0B 29 02 F6 | 	mov	local02, arg03
07fc0     47 00 00 FF 
07fc4     7C E4 05 F1 | 	add	objptr, ##36476
07fc8     F2 26 62 FC | 	wrlong	local01, objptr
07fcc     04 E4 05 F1 | 	add	objptr, #4
07fd0     F2 14 62 FC | 	wrlong	arg02, objptr
07fd4     47 00 00 FF 
07fd8     80 E4 85 F1 | 	sub	objptr, ##36480
07fdc     14 13 02 F6 | 	mov	arg01, local02
07fe0     01 12 06 F1 | 	add	arg01, #1
07fe4     13 15 02 F6 | 	mov	arg02, local01
07fe8     90 F2 BF FD | 	call	#_compile_immediate
07fec     FD 2A 0A F6 | 	mov	local03, result1 wz
07ff0                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07ff0                 | ' ucompiledline(0)=alinemajor
07ff0                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07ff0                 | ' 
07ff0                 | ' ' cont: 
07ff0                 | ' ' 0 - this is the first part of the line that will continue
07ff0                 | ' ' 1 - this is the continuation of the line
07ff0                 | ' ' 2 - this is the last continued line
07ff0                 | ' ' 3 - this is the one and only part
07ff0                 | ' 
07ff0                 | ' err=compile_immediate(cont+1,alinemajor) 
07ff0                 | ' if err=0 andalso alinemajor>0 then
07ff0     74 00 90 5D |  if_ne	jmp	#LR__0725
07ff4     01 26 16 F2 | 	cmp	local01, #1 wc
07ff8     6C 00 90 CD |  if_b	jmp	#LR__0725
07ffc                 | '   if cont=3 orelse cont=2 then 
07ffc     03 28 0E F2 | 	cmp	local02, #3 wz
08000     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08004     60 00 90 5D |  if_ne	jmp	#LR__0724
08008                 | '     if alinemajor >lastline then 
08008     4A 00 00 FF 
0800c     8C E4 05 F1 | 	add	objptr, ##38028
08010     F2 14 02 FB | 	rdlong	arg02, objptr
08014     4A 00 00 FF 
08018     8C E4 85 F1 | 	sub	objptr, ##38028
0801c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08020     0C 00 90 ED |  if_be	jmp	#LR__0720
08024     13 13 02 F6 | 	mov	arg01, local01
08028     88 F1 BF FD | 	call	#_add_line_at_end
0802c     38 00 90 FD | 	jmp	#LR__0723
08030                 | LR__0720
08030     13 13 02 F6 | 	mov	arg01, local01
08034     4C EB BF FD | 	call	#_deleteline
08038                 | '       deleteline(alinemajor)  
08038                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08038     4A 00 00 FF 
0803c     8C E4 05 F1 | 	add	objptr, ##38028
08040     F2 14 02 FB | 	rdlong	arg02, objptr
08044     4A 00 00 FF 
08048     8C E4 85 F1 | 	sub	objptr, ##38028
0804c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08050     0C 00 90 ED |  if_be	jmp	#LR__0721
08054     13 13 02 F6 | 	mov	arg01, local01
08058     58 F1 BF FD | 	call	#_add_line_at_end
0805c     08 00 90 FD | 	jmp	#LR__0722
08060                 | LR__0721
08060     13 13 02 F6 | 	mov	arg01, local01
08064     30 EF BF FD | 	call	#_insertline
08068                 | LR__0722
08068                 | LR__0723
08068                 | LR__0724
08068                 | LR__0725
08068                 | ' return err
08068     15 FB 01 F6 | 	mov	result1, local03
0806c     A7 F0 03 F6 | 	mov	ptra, fp
08070     B2 00 A0 FD | 	call	#popregs_
08074                 | _compile_ret
08074     2D 00 64 FD | 	ret
08078                 | 
08078                 | ' 
08078                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08078                 | ' 
08078                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08078                 | _compile_assign
08078     03 4A 05 F6 | 	mov	COUNT_, #3
0807c     A8 00 A0 FD | 	call	#pushregs_
08080     09 27 02 F6 | 	mov	local01, arg01
08084     0B 29 02 F6 | 	mov	local02, arg03
08088     47 00 00 FF 
0808c     7C E4 05 F1 | 	add	objptr, ##36476
08090     F2 26 62 FC | 	wrlong	local01, objptr
08094     04 E4 05 F1 | 	add	objptr, #4
08098     F2 14 62 FC | 	wrlong	arg02, objptr
0809c     47 00 00 FF 
080a0     80 E4 85 F1 | 	sub	objptr, ##36480
080a4     14 13 02 F6 | 	mov	arg01, local02
080a8     01 12 06 F1 | 	add	arg01, #1
080ac     54 FB BF FD | 	call	#_compile_immediate_assign
080b0     FD 2A 02 F6 | 	mov	local03, result1
080b4                 | ' 
080b4                 | ' ucompiledline(0)=alinemajor
080b4                 | ' ucompiledline(1)=alineminor
080b4                 | ' 
080b4                 | ' err=compile_immediate_assign(cont+1) 
080b4                 | ' if alinemajor>0 then
080b4     01 26 16 F2 | 	cmp	local01, #1 wc
080b8     6C 00 90 CD |  if_b	jmp	#LR__0735
080bc                 | '   if cont=3 orelse cont=2 then 
080bc     03 28 0E F2 | 	cmp	local02, #3 wz
080c0     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
080c4     60 00 90 5D |  if_ne	jmp	#LR__0734
080c8                 | '     if alinemajor >lastline then 
080c8     4A 00 00 FF 
080cc     8C E4 05 F1 | 	add	objptr, ##38028
080d0     F2 14 02 FB | 	rdlong	arg02, objptr
080d4     4A 00 00 FF 
080d8     8C E4 85 F1 | 	sub	objptr, ##38028
080dc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080e0     0C 00 90 ED |  if_be	jmp	#LR__0730
080e4     13 13 02 F6 | 	mov	arg01, local01
080e8     C8 F0 BF FD | 	call	#_add_line_at_end
080ec     38 00 90 FD | 	jmp	#LR__0733
080f0                 | LR__0730
080f0     13 13 02 F6 | 	mov	arg01, local01
080f4     8C EA BF FD | 	call	#_deleteline
080f8                 | '       deleteline(alinemajor)  
080f8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
080f8     4A 00 00 FF 
080fc     8C E4 05 F1 | 	add	objptr, ##38028
08100     F2 14 02 FB | 	rdlong	arg02, objptr
08104     4A 00 00 FF 
08108     8C E4 85 F1 | 	sub	objptr, ##38028
0810c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08110     0C 00 90 ED |  if_be	jmp	#LR__0731
08114     13 13 02 F6 | 	mov	arg01, local01
08118     98 F0 BF FD | 	call	#_add_line_at_end
0811c     08 00 90 FD | 	jmp	#LR__0732
08120                 | LR__0731
08120     13 13 02 F6 | 	mov	arg01, local01
08124     70 EE BF FD | 	call	#_insertline
08128                 | LR__0732
08128                 | LR__0733
08128                 | LR__0734
08128                 | LR__0735
08128                 | ' return err
08128     15 FB 01 F6 | 	mov	result1, local03
0812c     A7 F0 03 F6 | 	mov	ptra, fp
08130     B2 00 A0 FD | 	call	#popregs_
08134                 | _compile_assign_ret
08134     2D 00 64 FD | 	ret
08138                 | 
08138                 | ' 
08138                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08138                 | ' 
08138                 | ' function compile_fun_2p() as ulong
08138                 | _compile_fun_2p
08138     01 4A 05 F6 | 	mov	COUNT_, #1
0813c     A8 00 A0 FD | 	call	#pushregs_
08140     B8 30 B0 FD | 	call	#_expr
08144     FD 26 02 F6 | 	mov	local01, result1
08148                 | ' err=expr() : if err>0 then return err
08148     01 26 16 F2 | 	cmp	local01, #1 wc
0814c     13 FB 01 36 |  if_ae	mov	result1, local01
08150     60 00 90 3D |  if_ae	jmp	#LR__0740
08154                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08154     37 00 00 FF 
08158     44 E4 05 F1 | 	add	objptr, ##28228
0815c     F2 26 02 FB | 	rdlong	local01, objptr
08160     03 26 66 F0 | 	shl	local01, #3
08164     02 00 00 FF 
08168     38 E4 85 F1 | 	sub	objptr, ##1080
0816c     F2 26 02 F1 | 	add	local01, objptr
08170     04 26 06 F1 | 	add	local01, #4
08174     13 27 02 FB | 	rdlong	local01, local01
08178     11 26 0E F2 | 	cmp	local01, #17 wz
0817c     35 00 00 FF 
08180     0C E4 85 F1 | 	sub	objptr, ##27148
08184     15 FA 05 56 |  if_ne	mov	result1, #21
08188     28 00 90 5D |  if_ne	jmp	#LR__0740
0818c     37 00 00 FF 
08190     44 E4 05 F1 | 	add	objptr, ##28228
08194     F2 26 02 FB | 	rdlong	local01, objptr
08198     01 26 06 F1 | 	add	local01, #1
0819c     F2 26 62 FC | 	wrlong	local01, objptr
081a0     37 00 00 FF 
081a4     44 E4 85 F1 | 	sub	objptr, ##28228
081a8     50 30 B0 FD | 	call	#_expr
081ac                 | ' err=expr() : if err>0 then return err
081ac     01 FA 15 F2 | 	cmp	result1, #1 wc
081b0                 | ' return 0
081b0     00 FA 05 C6 |  if_b	mov	result1, #0
081b4                 | LR__0740
081b4     A7 F0 03 F6 | 	mov	ptra, fp
081b8     B2 00 A0 FD | 	call	#popregs_
081bc                 | _compile_fun_2p_ret
081bc     2D 00 64 FD | 	ret
081c0                 | 
081c0                 | ' 
081c0                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
081c0                 | ' 
081c0                 | ' function compile_fun_3p() as ulong
081c0                 | _compile_fun_3p
081c0     01 4A 05 F6 | 	mov	COUNT_, #1
081c4     A8 00 A0 FD | 	call	#pushregs_
081c8     30 30 B0 FD | 	call	#_expr
081cc     FD 26 02 F6 | 	mov	local01, result1
081d0                 | ' err=expr() : if err>0 then return err
081d0     01 26 16 F2 | 	cmp	local01, #1 wc
081d4     13 FB 01 36 |  if_ae	mov	result1, local01
081d8     C8 00 90 3D |  if_ae	jmp	#LR__0750
081dc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081dc     37 00 00 FF 
081e0     44 E4 05 F1 | 	add	objptr, ##28228
081e4     F2 26 02 FB | 	rdlong	local01, objptr
081e8     03 26 66 F0 | 	shl	local01, #3
081ec     02 00 00 FF 
081f0     38 E4 85 F1 | 	sub	objptr, ##1080
081f4     F2 26 02 F1 | 	add	local01, objptr
081f8     04 26 06 F1 | 	add	local01, #4
081fc     13 27 02 FB | 	rdlong	local01, local01
08200     11 26 0E F2 | 	cmp	local01, #17 wz
08204     35 00 00 FF 
08208     0C E4 85 F1 | 	sub	objptr, ##27148
0820c     15 FA 05 56 |  if_ne	mov	result1, #21
08210     90 00 90 5D |  if_ne	jmp	#LR__0750
08214     37 00 00 FF 
08218     44 E4 05 F1 | 	add	objptr, ##28228
0821c     F2 26 02 FB | 	rdlong	local01, objptr
08220     01 26 06 F1 | 	add	local01, #1
08224     F2 26 62 FC | 	wrlong	local01, objptr
08228     37 00 00 FF 
0822c     44 E4 85 F1 | 	sub	objptr, ##28228
08230     C8 2F B0 FD | 	call	#_expr
08234     FD 26 02 F6 | 	mov	local01, result1
08238                 | ' err=expr() : if err>0 then return err
08238     01 26 16 F2 | 	cmp	local01, #1 wc
0823c     13 FB 01 36 |  if_ae	mov	result1, local01
08240     60 00 90 3D |  if_ae	jmp	#LR__0750
08244                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08244     37 00 00 FF 
08248     44 E4 05 F1 | 	add	objptr, ##28228
0824c     F2 26 02 FB | 	rdlong	local01, objptr
08250     03 26 66 F0 | 	shl	local01, #3
08254     02 00 00 FF 
08258     38 E4 85 F1 | 	sub	objptr, ##1080
0825c     F2 26 02 F1 | 	add	local01, objptr
08260     04 26 06 F1 | 	add	local01, #4
08264     13 27 02 FB | 	rdlong	local01, local01
08268     11 26 0E F2 | 	cmp	local01, #17 wz
0826c     35 00 00 FF 
08270     0C E4 85 F1 | 	sub	objptr, ##27148
08274     15 FA 05 56 |  if_ne	mov	result1, #21
08278     28 00 90 5D |  if_ne	jmp	#LR__0750
0827c     37 00 00 FF 
08280     44 E4 05 F1 | 	add	objptr, ##28228
08284     F2 26 02 FB | 	rdlong	local01, objptr
08288     01 26 06 F1 | 	add	local01, #1
0828c     F2 26 62 FC | 	wrlong	local01, objptr
08290     37 00 00 FF 
08294     44 E4 85 F1 | 	sub	objptr, ##28228
08298     60 2F B0 FD | 	call	#_expr
0829c                 | ' err=expr() : if err>0 then return err
0829c     01 FA 15 F2 | 	cmp	result1, #1 wc
082a0                 | ' return 0
082a0     00 FA 05 C6 |  if_b	mov	result1, #0
082a4                 | LR__0750
082a4     A7 F0 03 F6 | 	mov	ptra, fp
082a8     B2 00 A0 FD | 	call	#popregs_
082ac                 | _compile_fun_3p_ret
082ac     2D 00 64 FD | 	ret
082b0                 | 
082b0                 | ' 
082b0                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
082b0                 | ' 
082b0                 | ' function compile_fun_4p() as ulong
082b0                 | _compile_fun_4p
082b0     01 4A 05 F6 | 	mov	COUNT_, #1
082b4     A8 00 A0 FD | 	call	#pushregs_
082b8     40 2F B0 FD | 	call	#_expr
082bc     FD 26 02 F6 | 	mov	local01, result1
082c0                 | ' err=expr() : if err>0 then return err
082c0     01 26 16 F2 | 	cmp	local01, #1 wc
082c4     13 FB 01 36 |  if_ae	mov	result1, local01
082c8     30 01 90 3D |  if_ae	jmp	#LR__0760
082cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
082cc     37 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##28228
082d4     F2 26 02 FB | 	rdlong	local01, objptr
082d8     03 26 66 F0 | 	shl	local01, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 26 02 F1 | 	add	local01, objptr
082e8     04 26 06 F1 | 	add	local01, #4
082ec     13 27 02 FB | 	rdlong	local01, local01
082f0     11 26 0E F2 | 	cmp	local01, #17 wz
082f4     35 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##27148
082fc     15 FA 05 56 |  if_ne	mov	result1, #21
08300     F8 00 90 5D |  if_ne	jmp	#LR__0760
08304     37 00 00 FF 
08308     44 E4 05 F1 | 	add	objptr, ##28228
0830c     F2 26 02 FB | 	rdlong	local01, objptr
08310     01 26 06 F1 | 	add	local01, #1
08314     F2 26 62 FC | 	wrlong	local01, objptr
08318     37 00 00 FF 
0831c     44 E4 85 F1 | 	sub	objptr, ##28228
08320     D8 2E B0 FD | 	call	#_expr
08324     FD 26 02 F6 | 	mov	local01, result1
08328                 | ' err=expr() : if err>0 then return err
08328     01 26 16 F2 | 	cmp	local01, #1 wc
0832c     13 FB 01 36 |  if_ae	mov	result1, local01
08330     C8 00 90 3D |  if_ae	jmp	#LR__0760
08334                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08334     37 00 00 FF 
08338     44 E4 05 F1 | 	add	objptr, ##28228
0833c     F2 26 02 FB | 	rdlong	local01, objptr
08340     03 26 66 F0 | 	shl	local01, #3
08344     02 00 00 FF 
08348     38 E4 85 F1 | 	sub	objptr, ##1080
0834c     F2 26 02 F1 | 	add	local01, objptr
08350     04 26 06 F1 | 	add	local01, #4
08354     13 27 02 FB | 	rdlong	local01, local01
08358     11 26 0E F2 | 	cmp	local01, #17 wz
0835c     35 00 00 FF 
08360     0C E4 85 F1 | 	sub	objptr, ##27148
08364     15 FA 05 56 |  if_ne	mov	result1, #21
08368     90 00 90 5D |  if_ne	jmp	#LR__0760
0836c     37 00 00 FF 
08370     44 E4 05 F1 | 	add	objptr, ##28228
08374     F2 26 02 FB | 	rdlong	local01, objptr
08378     01 26 06 F1 | 	add	local01, #1
0837c     F2 26 62 FC | 	wrlong	local01, objptr
08380     37 00 00 FF 
08384     44 E4 85 F1 | 	sub	objptr, ##28228
08388     70 2E B0 FD | 	call	#_expr
0838c     FD 26 02 F6 | 	mov	local01, result1
08390                 | ' err=expr() : if err>0 then return err
08390     01 26 16 F2 | 	cmp	local01, #1 wc
08394     13 FB 01 36 |  if_ae	mov	result1, local01
08398     60 00 90 3D |  if_ae	jmp	#LR__0760
0839c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
0839c     37 00 00 FF 
083a0     44 E4 05 F1 | 	add	objptr, ##28228
083a4     F2 26 02 FB | 	rdlong	local01, objptr
083a8     03 26 66 F0 | 	shl	local01, #3
083ac     02 00 00 FF 
083b0     38 E4 85 F1 | 	sub	objptr, ##1080
083b4     F2 26 02 F1 | 	add	local01, objptr
083b8     04 26 06 F1 | 	add	local01, #4
083bc     13 27 02 FB | 	rdlong	local01, local01
083c0     11 26 0E F2 | 	cmp	local01, #17 wz
083c4     35 00 00 FF 
083c8     0C E4 85 F1 | 	sub	objptr, ##27148
083cc     15 FA 05 56 |  if_ne	mov	result1, #21
083d0     28 00 90 5D |  if_ne	jmp	#LR__0760
083d4     37 00 00 FF 
083d8     44 E4 05 F1 | 	add	objptr, ##28228
083dc     F2 26 02 FB | 	rdlong	local01, objptr
083e0     01 26 06 F1 | 	add	local01, #1
083e4     F2 26 62 FC | 	wrlong	local01, objptr
083e8     37 00 00 FF 
083ec     44 E4 85 F1 | 	sub	objptr, ##28228
083f0     08 2E B0 FD | 	call	#_expr
083f4                 | ' err=expr() : if err>0 then return err
083f4     01 FA 15 F2 | 	cmp	result1, #1 wc
083f8                 | ' return 0
083f8     00 FA 05 C6 |  if_b	mov	result1, #0
083fc                 | LR__0760
083fc     A7 F0 03 F6 | 	mov	ptra, fp
08400     B2 00 A0 FD | 	call	#popregs_
08404                 | _compile_fun_4p_ret
08404     2D 00 64 FD | 	ret
08408                 | 
08408                 | ' 
08408                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08408                 | ' 
08408                 | ' function compile_fun_varp() as ulong,ulong 
08408                 | _compile_fun_varp
08408     03 4A 05 F6 | 	mov	COUNT_, #3
0840c     A8 00 A0 FD | 	call	#pushregs_
08410     00 26 06 F6 | 	mov	local01, #0
08414                 | ' 
08414                 | ' i=0 : err=0
08414                 | ' if lparts(ct).token<>token_end then
08414     37 00 00 FF 
08418     44 E4 05 F1 | 	add	objptr, ##28228
0841c     F2 28 02 FB | 	rdlong	local02, objptr
08420     03 28 66 F0 | 	shl	local02, #3
08424     02 00 00 FF 
08428     38 E4 85 F1 | 	sub	objptr, ##1080
0842c     F2 28 02 F1 | 	add	local02, objptr
08430     04 28 06 F1 | 	add	local02, #4
08434     14 29 02 FB | 	rdlong	local02, local02
08438     FE 29 0E F2 | 	cmp	local02, #510 wz
0843c     35 00 00 FF 
08440     0C E4 85 F1 | 	sub	objptr, ##27148
08444     88 00 90 AD |  if_e	jmp	#LR__0771
08448                 | '   do
08448                 | LR__0770
08448     B0 2D B0 FD | 	call	#_expr
0844c     01 26 06 F1 | 	add	local01, #1
08450                 | '     expr()
08450                 | '     i+=1
08450                 | '     if lparts(ct).token=token_comma then ct+=1
08450     37 00 00 FF 
08454     44 E4 05 F1 | 	add	objptr, ##28228
08458     F2 28 02 FB | 	rdlong	local02, objptr
0845c     03 28 66 F0 | 	shl	local02, #3
08460     02 00 00 FF 
08464     38 E4 85 F1 | 	sub	objptr, ##1080
08468     F2 28 02 F1 | 	add	local02, objptr
0846c     04 28 06 F1 | 	add	local02, #4
08470     14 29 02 FB | 	rdlong	local02, local02
08474     11 28 0E F2 | 	cmp	local02, #17 wz
08478     35 00 00 FF 
0847c     0C E4 85 F1 | 	sub	objptr, ##27148
08480     37 00 00 AF 
08484     44 E4 05 A1 |  if_e	add	objptr, ##28228
08488     F2 2A 02 AB |  if_e	rdlong	local03, objptr
0848c     01 2A 06 A1 |  if_e	add	local03, #1
08490     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08494     37 00 00 AF 
08498     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0849c                 | '     if lparts(ct).token=token_end then exit loop
0849c     37 00 00 FF 
084a0     44 E4 05 F1 | 	add	objptr, ##28228
084a4     F2 28 02 FB | 	rdlong	local02, objptr
084a8     03 28 66 F0 | 	shl	local02, #3
084ac     02 00 00 FF 
084b0     38 E4 85 F1 | 	sub	objptr, ##1080
084b4     F2 28 02 F1 | 	add	local02, objptr
084b8     04 28 06 F1 | 	add	local02, #4
084bc     14 29 02 FB | 	rdlong	local02, local02
084c0     FE 29 0E F2 | 	cmp	local02, #510 wz
084c4     35 00 00 FF 
084c8     0C E4 85 F1 | 	sub	objptr, ##27148
084cc     78 FF 9F 5D |  if_ne	jmp	#LR__0770
084d0                 | LR__0771
084d0                 | ' return i,err
084d0     13 FB 01 F6 | 	mov	result1, local01
084d4     00 FC 05 F6 | 	mov	result2, #0
084d8     A7 F0 03 F6 | 	mov	ptra, fp
084dc     B2 00 A0 FD | 	call	#popregs_
084e0                 | _compile_fun_varp_ret
084e0     2D 00 64 FD | 	ret
084e4                 | 
084e4                 | ' 
084e4                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
084e4                 | ' 
084e4                 | ' function compile_input() as ulong,ulong 
084e4                 | _compile_input
084e4     0F 4A 05 F6 | 	mov	COUNT_, #15
084e8     A8 00 A0 FD | 	call	#pushregs_
084ec                 | ' 
084ec                 | ' if lparts(ct).token=token_string then
084ec     37 00 00 FF 
084f0     44 E4 05 F1 | 	add	objptr, ##28228
084f4     F2 16 02 FB | 	rdlong	arg03, objptr
084f8     03 16 66 F0 | 	shl	arg03, #3
084fc     02 00 00 FF 
08500     38 E4 85 F1 | 	sub	objptr, ##1080
08504     F2 16 02 F1 | 	add	arg03, objptr
08508     04 16 06 F1 | 	add	arg03, #4
0850c     0B FD 01 FB | 	rdlong	result2, arg03
08510     01 00 00 FF 
08514     03 FC 0D F2 | 	cmp	result2, ##515 wz
08518     35 00 00 FF 
0851c     0C E4 85 F1 | 	sub	objptr, ##27148
08520     38 06 90 5D |  if_ne	jmp	#LR__0787
08524     37 00 00 FF 
08528     44 E4 05 F1 | 	add	objptr, ##28228
0852c     F2 14 02 FB | 	rdlong	arg02, objptr
08530     03 14 66 F0 | 	shl	arg02, #3
08534     02 00 00 FF 
08538     38 E4 85 F1 | 	sub	objptr, ##1080
0853c     F2 14 02 F1 | 	add	arg02, objptr
08540     0A 13 02 FB | 	rdlong	arg01, arg02
08544     35 00 00 FF 
08548     0C E4 85 F1 | 	sub	objptr, ##27148
0854c     09 2D 02 F6 | 	mov	local04, arg01
08550     97 06 48 FB | 	callpa	#(@LR__0781-@LR__0780)>>2,fcache_load_ptr_
08554                 | LR__0780
08554     16 FB C9 FA | 	rdbyte	result1, local04 wz
08558     01 2C 06 51 |  if_ne	add	local04, #1
0855c     F4 FF 9F 5D |  if_ne	jmp	#LR__0780
08560                 | LR__0781
08560     09 2D 82 F1 | 	sub	local04, arg01
08564     16 FB 01 F6 | 	mov	result1, local04
08568     52 00 00 FF 
0856c     00 E4 05 F1 | 	add	objptr, ##41984
08570     F2 FA 61 FC | 	wrlong	result1, objptr
08574     54 E4 85 F1 | 	sub	objptr, #84
08578     F2 12 02 FB | 	rdlong	arg01, objptr
0857c     FD 12 82 F1 | 	sub	arg01, result1
08580     04 12 86 F1 | 	sub	arg01, #4
08584     03 12 26 F5 | 	andn	arg01, #3
08588     F2 12 62 FC | 	wrlong	arg01, objptr
0858c     54 E4 05 F1 | 	add	objptr, #84
08590     F2 14 02 FB | 	rdlong	arg02, objptr
08594     52 00 00 FF 
08598     00 E4 85 F1 | 	sub	objptr, ##41984
0859c     70 7F B1 FD | 	call	#_pslpoke
085a0                 | '   pslpoke memtop,l
085a0                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
085a0     01 2E 06 F6 | 	mov	local05, #1
085a4     52 00 00 FF 
085a8     00 E4 05 F1 | 	add	objptr, ##41984
085ac     F2 30 02 FB | 	rdlong	local06, objptr
085b0     52 00 00 FF 
085b4     00 E4 85 F1 | 	sub	objptr, ##41984
085b8     01 30 06 F1 | 	add	local06, #1
085bc                 | LR__0782
085bc     18 2F 52 F2 | 	cmps	local05, local06 wc
085c0     5C 00 90 3D |  if_ae	jmp	#LR__0783
085c4     51 00 00 FF 
085c8     AC E5 05 F1 | 	add	objptr, ##41900
085cc     F2 32 02 FB | 	rdlong	local07, objptr
085d0     03 32 06 F1 | 	add	local07, #3
085d4     17 33 02 F1 | 	add	local07, local05
085d8     1A 00 00 FF 
085dc     68 E5 85 F1 | 	sub	objptr, ##13672
085e0     F2 14 02 FB | 	rdlong	arg02, objptr
085e4     03 14 66 F0 | 	shl	arg02, #3
085e8     02 00 00 FF 
085ec     38 E4 85 F1 | 	sub	objptr, ##1080
085f0     F2 14 02 F1 | 	add	arg02, objptr
085f4     0A 13 02 FB | 	rdlong	arg01, arg02
085f8     17 15 02 F6 | 	mov	arg02, local05
085fc     01 16 06 F6 | 	mov	arg03, #1
08600     35 00 00 FF 
08604     0C E4 85 F1 | 	sub	objptr, ##27148
08608     9C D8 B1 FD | 	call	#__system__Mid_S
0860c     FD 14 C2 FA | 	rdbyte	arg02, result1
08610     19 13 02 F6 | 	mov	arg01, local07
08614     88 7F B1 FD | 	call	#_pspoke
08618     01 2E 06 F1 | 	add	local05, #1
0861c     9C FF 9F FD | 	jmp	#LR__0782
08620                 | LR__0783
08620     51 00 00 FF 
08624     AC E5 05 F1 | 	add	objptr, ##41900
08628     F2 26 02 FB | 	rdlong	local01, objptr
0862c     2B 2A 06 F6 | 	mov	local03, #43
08630     13 35 02 F6 | 	mov	local08, local01
08634     14 33 02 F6 | 	mov	local07, local02
08638     15 37 02 F6 | 	mov	local09, local03
0863c     07 00 00 FF 
08640     30 E5 85 F1 | 	sub	objptr, ##3888
08644     F2 30 02 FB | 	rdlong	local06, objptr
08648     18 2F 02 F6 | 	mov	local05, local06
0864c     01 2E 66 F0 | 	shl	local05, #1
08650     18 2F 02 F1 | 	add	local05, local06
08654     02 2E 66 F0 | 	shl	local05, #2
08658     03 00 00 FF 
0865c     00 E4 85 F1 | 	sub	objptr, ##1536
08660     F2 2E 02 F1 | 	add	local05, objptr
08664     17 35 62 FC | 	wrlong	local08, local05
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 34 02 FB | 	rdlong	local08, objptr
08674     1A 31 02 F6 | 	mov	local06, local08
08678     01 30 66 F0 | 	shl	local06, #1
0867c     1A 31 02 F1 | 	add	local06, local08
08680     02 30 66 F0 | 	shl	local06, #2
08684     03 00 00 FF 
08688     00 E4 85 F1 | 	sub	objptr, ##1536
0868c     F2 30 02 F1 | 	add	local06, objptr
08690     04 30 06 F1 | 	add	local06, #4
08694     18 33 62 FC | 	wrlong	local07, local06
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 34 02 FB | 	rdlong	local08, objptr
086a4     1A 33 02 F6 | 	mov	local07, local08
086a8     01 32 66 F0 | 	shl	local07, #1
086ac     1A 33 02 F1 | 	add	local07, local08
086b0     02 32 66 F0 | 	shl	local07, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 32 02 F1 | 	add	local07, objptr
086c0     08 32 06 F1 | 	add	local07, #8
086c4     19 37 62 FC | 	wrlong	local09, local07
086c8     03 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1536
086d0     F2 34 02 FB | 	rdlong	local08, objptr
086d4     01 34 06 F1 | 	add	local08, #1
086d8     F2 34 62 FC | 	wrlong	local08, objptr
086dc     13 00 00 FF 
086e0     38 E4 85 F1 | 	sub	objptr, ##9784
086e4     F2 34 02 FB | 	rdlong	local08, objptr
086e8     01 34 06 F1 | 	add	local08, #1
086ec     F2 34 62 FC | 	wrlong	local08, objptr
086f0                 | '   t1.result.uresult=memtop
086f0                 | '   t1.result_type=result_string2  
086f0                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
086f0                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
086f0     03 34 66 F0 | 	shl	local08, #3
086f4     02 00 00 FF 
086f8     38 E4 85 F1 | 	sub	objptr, ##1080
086fc     F2 34 02 F1 | 	add	local08, objptr
08700     04 34 06 F1 | 	add	local08, #4
08704     1A 35 02 FB | 	rdlong	local08, local08
08708     11 34 0E F2 | 	cmp	local08, #17 wz
0870c     35 00 00 FF 
08710     0C E4 85 F1 | 	sub	objptr, ##27148
08714     60 01 90 5D |  if_ne	jmp	#LR__0784
08718     21 2A 06 F6 | 	mov	local03, #33
0871c     13 35 02 F6 | 	mov	local08, local01
08720     14 33 02 F6 | 	mov	local07, local02
08724     15 39 02 F6 | 	mov	local10, local03
08728     4A 00 00 FF 
0872c     7C E4 05 F1 | 	add	objptr, ##38012
08730     F2 3A 02 FB | 	rdlong	local11, objptr
08734     1D 3D 02 F6 | 	mov	local12, local11
08738     01 3C 66 F0 | 	shl	local12, #1
0873c     1D 3D 02 F1 | 	add	local12, local11
08740     02 3C 66 F0 | 	shl	local12, #2
08744     03 00 00 FF 
08748     00 E4 85 F1 | 	sub	objptr, ##1536
0874c     F2 3C 02 F1 | 	add	local12, objptr
08750     1E 35 62 FC | 	wrlong	local08, local12
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 3E 02 FB | 	rdlong	local13, objptr
08760     1F 35 02 F6 | 	mov	local08, local13
08764     01 34 66 F0 | 	shl	local08, #1
08768     1F 35 02 F1 | 	add	local08, local13
0876c     02 34 66 F0 | 	shl	local08, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 34 02 F1 | 	add	local08, objptr
0877c     04 34 06 F1 | 	add	local08, #4
08780     1A 33 62 FC | 	wrlong	local07, local08
08784     03 00 00 FF 
08788     00 E4 05 F1 | 	add	objptr, ##1536
0878c     F2 34 02 FB | 	rdlong	local08, objptr
08790     1A 41 02 F6 | 	mov	local14, local08
08794     01 40 66 F0 | 	shl	local14, #1
08798     1A 41 02 F1 | 	add	local14, local08
0879c     02 40 66 F0 | 	shl	local14, #2
087a0     03 00 00 FF 
087a4     00 E4 85 F1 | 	sub	objptr, ##1536
087a8     F2 40 02 F1 | 	add	local14, objptr
087ac     08 40 06 F1 | 	add	local14, #8
087b0     20 39 62 FC | 	wrlong	local10, local14
087b4     03 00 00 FF 
087b8     00 E4 05 F1 | 	add	objptr, ##1536
087bc     F2 34 02 FB | 	rdlong	local08, objptr
087c0     01 34 06 F1 | 	add	local08, #1
087c4     F2 34 62 FC | 	wrlong	local08, objptr
087c8     44 2A 06 F6 | 	mov	local03, #68
087cc     13 35 02 F6 | 	mov	local08, local01
087d0     14 33 02 F6 | 	mov	local07, local02
087d4     15 39 02 F6 | 	mov	local10, local03
087d8     F2 40 02 FB | 	rdlong	local14, objptr
087dc     20 3F 02 F6 | 	mov	local13, local14
087e0     01 3E 66 F0 | 	shl	local13, #1
087e4     20 3F 02 F1 | 	add	local13, local14
087e8     02 3E 66 F0 | 	shl	local13, #2
087ec     03 00 00 FF 
087f0     00 E4 85 F1 | 	sub	objptr, ##1536
087f4     F2 3E 02 F1 | 	add	local13, objptr
087f8     1F 35 62 FC | 	wrlong	local08, local13
087fc     03 00 00 FF 
08800     00 E4 05 F1 | 	add	objptr, ##1536
08804     F2 40 02 FB | 	rdlong	local14, objptr
08808     20 3F 02 F6 | 	mov	local13, local14
0880c     01 3E 66 F0 | 	shl	local13, #1
08810     20 3F 02 F1 | 	add	local13, local14
08814     02 3E 66 F0 | 	shl	local13, #2
08818     03 00 00 FF 
0881c     00 E4 85 F1 | 	sub	objptr, ##1536
08820     F2 3E 02 F1 | 	add	local13, objptr
08824     04 3E 06 F1 | 	add	local13, #4
08828     1F 33 62 FC | 	wrlong	local07, local13
0882c     03 00 00 FF 
08830     00 E4 05 F1 | 	add	objptr, ##1536
08834     F2 3E 02 FB | 	rdlong	local13, objptr
08838     1F 41 02 F6 | 	mov	local14, local13
0883c     01 40 66 F0 | 	shl	local14, #1
08840     1F 41 02 F1 | 	add	local14, local13
08844     02 40 66 F0 | 	shl	local14, #2
08848     03 00 00 FF 
0884c     00 E4 85 F1 | 	sub	objptr, ##1536
08850     F2 40 02 F1 | 	add	local14, objptr
08854     08 40 06 F1 | 	add	local14, #8
08858     20 39 62 FC | 	wrlong	local10, local14
0885c     03 00 00 FF 
08860     00 E4 05 F1 | 	add	objptr, ##1536
08864     F2 34 02 FB | 	rdlong	local08, objptr
08868     01 34 06 F1 | 	add	local08, #1
0886c     F2 34 62 FC | 	wrlong	local08, objptr
08870     4A 00 00 FF 
08874     7C E4 85 F1 | 	sub	objptr, ##38012
08878                 | LR__0784
08878                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08878     37 00 00 FF 
0887c     44 E4 05 F1 | 	add	objptr, ##28228
08880     F2 34 02 FB | 	rdlong	local08, objptr
08884     03 34 66 F0 | 	shl	local08, #3
08888     02 00 00 FF 
0888c     38 E4 85 F1 | 	sub	objptr, ##1080
08890     F2 34 02 F1 | 	add	local08, objptr
08894     04 34 06 F1 | 	add	local08, #4
08898     1A 41 02 FB | 	rdlong	local14, local08
0889c     12 40 0E F2 | 	cmp	local14, #18 wz
088a0     35 00 00 FF 
088a4     0C E4 85 F1 | 	sub	objptr, ##27148
088a8     60 01 90 5D |  if_ne	jmp	#LR__0785
088ac     22 2A 06 F6 | 	mov	local03, #34
088b0     13 35 02 F6 | 	mov	local08, local01
088b4     14 33 02 F6 | 	mov	local07, local02
088b8     15 39 02 F6 | 	mov	local10, local03
088bc     4A 00 00 FF 
088c0     7C E4 05 F1 | 	add	objptr, ##38012
088c4     F2 40 02 FB | 	rdlong	local14, objptr
088c8     20 3F 02 F6 | 	mov	local13, local14
088cc     01 3E 66 F0 | 	shl	local13, #1
088d0     20 3F 02 F1 | 	add	local13, local14
088d4     02 3E 66 F0 | 	shl	local13, #2
088d8     03 00 00 FF 
088dc     00 E4 85 F1 | 	sub	objptr, ##1536
088e0     F2 3E 02 F1 | 	add	local13, objptr
088e4     1F 35 62 FC | 	wrlong	local08, local13
088e8     03 00 00 FF 
088ec     00 E4 05 F1 | 	add	objptr, ##1536
088f0     F2 40 02 FB | 	rdlong	local14, objptr
088f4     20 35 02 F6 | 	mov	local08, local14
088f8     01 34 66 F0 | 	shl	local08, #1
088fc     20 35 02 F1 | 	add	local08, local14
08900     02 34 66 F0 | 	shl	local08, #2
08904     03 00 00 FF 
08908     00 E4 85 F1 | 	sub	objptr, ##1536
0890c     F2 34 02 F1 | 	add	local08, objptr
08910     04 34 06 F1 | 	add	local08, #4
08914     1A 33 62 FC | 	wrlong	local07, local08
08918     03 00 00 FF 
0891c     00 E4 05 F1 | 	add	objptr, ##1536
08920     F2 34 02 FB | 	rdlong	local08, objptr
08924     1A 41 02 F6 | 	mov	local14, local08
08928     01 40 66 F0 | 	shl	local14, #1
0892c     1A 41 02 F1 | 	add	local14, local08
08930     02 40 66 F0 | 	shl	local14, #2
08934     03 00 00 FF 
08938     00 E4 85 F1 | 	sub	objptr, ##1536
0893c     F2 40 02 F1 | 	add	local14, objptr
08940     08 40 06 F1 | 	add	local14, #8
08944     20 39 62 FC | 	wrlong	local10, local14
08948     03 00 00 FF 
0894c     00 E4 05 F1 | 	add	objptr, ##1536
08950     F2 34 02 FB | 	rdlong	local08, objptr
08954     01 34 06 F1 | 	add	local08, #1
08958     F2 34 62 FC | 	wrlong	local08, objptr
0895c     44 2A 06 F6 | 	mov	local03, #68
08960     13 35 02 F6 | 	mov	local08, local01
08964     14 33 02 F6 | 	mov	local07, local02
08968     15 39 02 F6 | 	mov	local10, local03
0896c     F2 40 02 FB | 	rdlong	local14, objptr
08970     20 3F 02 F6 | 	mov	local13, local14
08974     01 3E 66 F0 | 	shl	local13, #1
08978     20 3F 02 F1 | 	add	local13, local14
0897c     02 3E 66 F0 | 	shl	local13, #2
08980     03 00 00 FF 
08984     00 E4 85 F1 | 	sub	objptr, ##1536
08988     F2 3E 02 F1 | 	add	local13, objptr
0898c     1F 35 62 FC | 	wrlong	local08, local13
08990     03 00 00 FF 
08994     00 E4 05 F1 | 	add	objptr, ##1536
08998     F2 40 02 FB | 	rdlong	local14, objptr
0899c     20 3F 02 F6 | 	mov	local13, local14
089a0     01 3E 66 F0 | 	shl	local13, #1
089a4     20 3F 02 F1 | 	add	local13, local14
089a8     02 3E 66 F0 | 	shl	local13, #2
089ac     03 00 00 FF 
089b0     00 E4 85 F1 | 	sub	objptr, ##1536
089b4     F2 3E 02 F1 | 	add	local13, objptr
089b8     04 3E 06 F1 | 	add	local13, #4
089bc     1F 33 62 FC | 	wrlong	local07, local13
089c0     03 00 00 FF 
089c4     00 E4 05 F1 | 	add	objptr, ##1536
089c8     F2 3E 02 FB | 	rdlong	local13, objptr
089cc     1F 41 02 F6 | 	mov	local14, local13
089d0     01 40 66 F0 | 	shl	local14, #1
089d4     1F 41 02 F1 | 	add	local14, local13
089d8     02 40 66 F0 | 	shl	local14, #2
089dc     03 00 00 FF 
089e0     00 E4 85 F1 | 	sub	objptr, ##1536
089e4     F2 40 02 F1 | 	add	local14, objptr
089e8     08 40 06 F1 | 	add	local14, #8
089ec     20 39 62 FC | 	wrlong	local10, local14
089f0     03 00 00 FF 
089f4     00 E4 05 F1 | 	add	objptr, ##1536
089f8     F2 34 02 FB | 	rdlong	local08, objptr
089fc     01 34 06 F1 | 	add	local08, #1
08a00     F2 34 62 FC | 	wrlong	local08, objptr
08a04     4A 00 00 FF 
08a08     7C E4 85 F1 | 	sub	objptr, ##38012
08a0c                 | LR__0785
08a0c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08a0c     37 00 00 FF 
08a10     44 E4 05 F1 | 	add	objptr, ##28228
08a14     F2 34 02 FB | 	rdlong	local08, objptr
08a18     03 34 66 F0 | 	shl	local08, #3
08a1c     02 00 00 FF 
08a20     38 E4 85 F1 | 	sub	objptr, ##1080
08a24     F2 34 02 F1 | 	add	local08, objptr
08a28     04 34 06 F1 | 	add	local08, #4
08a2c     1A 41 02 FB | 	rdlong	local14, local08
08a30     12 40 0E F2 | 	cmp	local14, #18 wz
08a34     35 00 00 FF 
08a38     0C E4 85 F1 | 	sub	objptr, ##27148
08a3c     00 01 90 AD |  if_e	jmp	#LR__0786
08a40     37 00 00 FF 
08a44     44 E4 05 F1 | 	add	objptr, ##28228
08a48     F2 34 02 FB | 	rdlong	local08, objptr
08a4c     03 34 66 F0 | 	shl	local08, #3
08a50     02 00 00 FF 
08a54     38 E4 85 F1 | 	sub	objptr, ##1080
08a58     F2 34 02 F1 | 	add	local08, objptr
08a5c     04 34 06 F1 | 	add	local08, #4
08a60     1A 41 02 FB | 	rdlong	local14, local08
08a64     11 40 0E F2 | 	cmp	local14, #17 wz
08a68     35 00 00 FF 
08a6c     0C E4 85 F1 | 	sub	objptr, ##27148
08a70     CC 00 90 AD |  if_e	jmp	#LR__0786
08a74     44 2A 06 F6 | 	mov	local03, #68
08a78     13 35 02 F6 | 	mov	local08, local01
08a7c     14 33 02 F6 | 	mov	local07, local02
08a80     15 39 02 F6 | 	mov	local10, local03
08a84     4A 00 00 FF 
08a88     7C E4 05 F1 | 	add	objptr, ##38012
08a8c     F2 40 02 FB | 	rdlong	local14, objptr
08a90     20 3F 02 F6 | 	mov	local13, local14
08a94     01 3E 66 F0 | 	shl	local13, #1
08a98     20 3F 02 F1 | 	add	local13, local14
08a9c     02 3E 66 F0 | 	shl	local13, #2
08aa0     03 00 00 FF 
08aa4     00 E4 85 F1 | 	sub	objptr, ##1536
08aa8     F2 3E 02 F1 | 	add	local13, objptr
08aac     1F 35 62 FC | 	wrlong	local08, local13
08ab0     03 00 00 FF 
08ab4     00 E4 05 F1 | 	add	objptr, ##1536
08ab8     F2 40 02 FB | 	rdlong	local14, objptr
08abc     20 3F 02 F6 | 	mov	local13, local14
08ac0     01 3E 66 F0 | 	shl	local13, #1
08ac4     20 3F 02 F1 | 	add	local13, local14
08ac8     02 3E 66 F0 | 	shl	local13, #2
08acc     03 00 00 FF 
08ad0     00 E4 85 F1 | 	sub	objptr, ##1536
08ad4     F2 3E 02 F1 | 	add	local13, objptr
08ad8     04 3E 06 F1 | 	add	local13, #4
08adc     1F 33 62 FC | 	wrlong	local07, local13
08ae0     03 00 00 FF 
08ae4     00 E4 05 F1 | 	add	objptr, ##1536
08ae8     F2 3E 02 FB | 	rdlong	local13, objptr
08aec     1F 41 02 F6 | 	mov	local14, local13
08af0     01 40 66 F0 | 	shl	local14, #1
08af4     1F 41 02 F1 | 	add	local14, local13
08af8     02 40 66 F0 | 	shl	local14, #2
08afc     03 00 00 FF 
08b00     00 E4 85 F1 | 	sub	objptr, ##1536
08b04     F2 40 02 F1 | 	add	local14, objptr
08b08     08 40 06 F1 | 	add	local14, #8
08b0c     20 39 62 FC | 	wrlong	local10, local14
08b10     03 00 00 FF 
08b14     00 E4 05 F1 | 	add	objptr, ##1536
08b18     F2 34 02 FB | 	rdlong	local08, objptr
08b1c     01 34 06 F1 | 	add	local08, #1
08b20     F2 34 62 FC | 	wrlong	local08, objptr
08b24     13 00 00 FF 
08b28     38 E4 85 F1 | 	sub	objptr, ##9784
08b2c     F2 34 02 FB | 	rdlong	local08, objptr
08b30     01 34 86 F1 | 	sub	local08, #1
08b34     F2 34 62 FC | 	wrlong	local08, objptr
08b38     37 00 00 FF 
08b3c     44 E4 85 F1 | 	sub	objptr, ##28228
08b40                 | LR__0786
08b40     37 00 00 FF 
08b44     44 E4 05 F1 | 	add	objptr, ##28228
08b48     F2 34 02 FB | 	rdlong	local08, objptr
08b4c     01 34 06 F1 | 	add	local08, #1
08b50     F2 34 62 FC | 	wrlong	local08, objptr
08b54     37 00 00 FF 
08b58     44 E4 85 F1 | 	sub	objptr, ##28228
08b5c                 | LR__0787
08b5c     00 2E 06 F6 | 	mov	local05, #0
08b60                 | ' i=0 : err=0
08b60                 | ' if lparts(ct).token<>token_end then
08b60     37 00 00 FF 
08b64     44 E4 05 F1 | 	add	objptr, ##28228
08b68     F2 40 02 FB | 	rdlong	local14, objptr
08b6c     03 40 66 F0 | 	shl	local14, #3
08b70     02 00 00 FF 
08b74     38 E4 85 F1 | 	sub	objptr, ##1080
08b78     F2 40 02 F1 | 	add	local14, objptr
08b7c     04 40 06 F1 | 	add	local14, #4
08b80     20 41 02 FB | 	rdlong	local14, local14
08b84     FE 41 0E F2 | 	cmp	local14, #510 wz
08b88     35 00 00 FF 
08b8c     0C E4 85 F1 | 	sub	objptr, ##27148
08b90     98 00 90 AD |  if_e	jmp	#LR__0789
08b94                 | '   do
08b94                 | LR__0788
08b94     D0 22 B0 FD | 	call	#_getaddr
08b98     FD 42 02 F6 | 	mov	local15, result1
08b9c     37 00 00 FF 
08ba0     44 E4 05 F1 | 	add	objptr, ##28228
08ba4     F2 40 02 FB | 	rdlong	local14, objptr
08ba8     01 40 06 F1 | 	add	local14, #1
08bac     F2 40 62 FC | 	wrlong	local14, objptr
08bb0     01 2E 06 F1 | 	add	local05, #1
08bb4                 | '     err=getaddr() :ct+=1
08bb4                 | '     i+=1 
08bb4                 | '     if lparts(ct).token=token_comma then ct+=1 
08bb4     03 40 66 F0 | 	shl	local14, #3
08bb8     02 00 00 FF 
08bbc     38 E4 85 F1 | 	sub	objptr, ##1080
08bc0     F2 40 02 F1 | 	add	local14, objptr
08bc4     04 40 06 F1 | 	add	local14, #4
08bc8     20 41 02 FB | 	rdlong	local14, local14
08bcc     11 40 0E F2 | 	cmp	local14, #17 wz
08bd0     35 00 00 FF 
08bd4     0C E4 85 F1 | 	sub	objptr, ##27148
08bd8     37 00 00 AF 
08bdc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08be0     F2 34 02 AB |  if_e	rdlong	local08, objptr
08be4     01 34 06 A1 |  if_e	add	local08, #1
08be8     F2 34 62 AC |  if_e	wrlong	local08, objptr
08bec     37 00 00 AF 
08bf0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08bf4                 | '     if lparts(ct).token=token_end then exit loop
08bf4     37 00 00 FF 
08bf8     44 E4 05 F1 | 	add	objptr, ##28228
08bfc     F2 40 02 FB | 	rdlong	local14, objptr
08c00     03 40 66 F0 | 	shl	local14, #3
08c04     02 00 00 FF 
08c08     38 E4 85 F1 | 	sub	objptr, ##1080
08c0c     F2 40 02 F1 | 	add	local14, objptr
08c10     04 40 06 F1 | 	add	local14, #4
08c14     20 41 02 FB | 	rdlong	local14, local14
08c18     FE 41 0E F2 | 	cmp	local14, #510 wz
08c1c     35 00 00 FF 
08c20     0C E4 85 F1 | 	sub	objptr, ##27148
08c24     08 00 90 AD |  if_e	jmp	#LR__0790
08c28     68 FF 9F FD | 	jmp	#LR__0788
08c2c                 | LR__0789
08c2c     36 42 06 F6 | 	mov	local15, #54
08c30                 | LR__0790
08c30                 | ' 
08c30                 | ' return i,err
08c30     17 FB 01 F6 | 	mov	result1, local05
08c34     21 FD 01 F6 | 	mov	result2, local15
08c38     A7 F0 03 F6 | 	mov	ptra, fp
08c3c     B2 00 A0 FD | 	call	#popregs_
08c40                 | _compile_input_ret
08c40     2D 00 64 FD | 	ret
08c44                 | 
08c44                 | ' 
08c44                 | ' '----- compile assign to an array element
08c44                 | ' 
08c44                 | ' function compile_array_assign() as ulong 
08c44                 | _compile_array_assign
08c44     0B 4A 05 F6 | 	mov	COUNT_, #11
08c48     A8 00 A0 FD | 	call	#pushregs_
08c4c     00 2C 06 F6 | 	mov	local04, #0
08c50     00 2E 06 F6 | 	mov	local05, #0
08c54     37 00 00 FF 
08c58     44 E4 05 F1 | 	add	objptr, ##28228
08c5c     F2 30 02 FB | 	rdlong	local06, objptr
08c60     18 FB 01 F6 | 	mov	result1, local06
08c64     01 FA 85 F1 | 	sub	result1, #1
08c68     03 FA 65 F0 | 	shl	result1, #3
08c6c     02 00 00 FF 
08c70     38 E4 85 F1 | 	sub	objptr, ##1080
08c74     F2 FA 01 F1 | 	add	result1, objptr
08c78     FD 32 02 FB | 	rdlong	local07, result1
08c7c                 | ' numpar=0 : err=0
08c7c                 | ' varname$=lparts(ct-1).part$
08c7c                 | ' if lparts(ct).token=token_lpar then
08c7c     03 30 66 F0 | 	shl	local06, #3
08c80     F2 30 02 F1 | 	add	local06, objptr
08c84     04 30 06 F1 | 	add	local06, #4
08c88     18 31 02 FB | 	rdlong	local06, local06
08c8c     15 30 0E F2 | 	cmp	local06, #21 wz
08c90     35 00 00 FF 
08c94     0C E4 85 F1 | 	sub	objptr, ##27148
08c98     F4 01 90 5D |  if_ne	jmp	#LR__0804
08c9c     37 00 00 FF 
08ca0     44 E4 05 F1 | 	add	objptr, ##28228
08ca4     F2 34 02 FB | 	rdlong	local08, objptr
08ca8     01 34 06 F1 | 	add	local08, #1
08cac     F2 34 62 FC | 	wrlong	local08, objptr
08cb0     37 00 00 FF 
08cb4     44 E4 85 F1 | 	sub	objptr, ##28228
08cb8                 | '   ct+=1 											' omit this lpar, this is for expr list
08cb8                 | '   do
08cb8                 | LR__0800
08cb8     40 25 B0 FD | 	call	#_expr
08cbc     37 00 00 FF 
08cc0     44 E4 05 F1 | 	add	objptr, ##28228
08cc4     F2 30 02 FB | 	rdlong	local06, objptr
08cc8     01 30 06 F1 | 	add	local06, #1
08ccc     F2 30 62 FC | 	wrlong	local06, objptr
08cd0     01 2C 06 F1 | 	add	local04, #1
08cd4     01 30 86 F1 | 	sub	local06, #1
08cd8     03 30 66 F0 | 	shl	local06, #3
08cdc     02 00 00 FF 
08ce0     38 E4 85 F1 | 	sub	objptr, ##1080
08ce4     F2 30 02 F1 | 	add	local06, objptr
08ce8     04 30 06 F1 | 	add	local06, #4
08cec     18 35 02 FB | 	rdlong	local08, local06
08cf0     14 34 0E F2 | 	cmp	local08, #20 wz
08cf4     35 00 00 FF 
08cf8     0C E4 85 F1 | 	sub	objptr, ##27148
08cfc     34 00 90 AD |  if_e	jmp	#LR__0801
08d00     37 00 00 FF 
08d04     44 E4 05 F1 | 	add	objptr, ##28228
08d08     F2 34 02 FB | 	rdlong	local08, objptr
08d0c     03 34 66 F0 | 	shl	local08, #3
08d10     02 00 00 FF 
08d14     38 E4 85 F1 | 	sub	objptr, ##1080
08d18     F2 34 02 F1 | 	add	local08, objptr
08d1c     04 34 06 F1 | 	add	local08, #4
08d20     1A 35 02 FB | 	rdlong	local08, local08
08d24     FE 35 0E F2 | 	cmp	local08, #510 wz
08d28     35 00 00 FF 
08d2c     0C E4 85 F1 | 	sub	objptr, ##27148
08d30     84 FF 9F 5D |  if_ne	jmp	#LR__0800
08d34                 | LR__0801
08d34     37 00 00 FF 
08d38     44 E4 05 F1 | 	add	objptr, ##28228
08d3c     F2 34 02 FB | 	rdlong	local08, objptr
08d40     01 34 06 F1 | 	add	local08, #1
08d44     F2 34 62 FC | 	wrlong	local08, objptr
08d48     37 00 00 FF 
08d4c     44 E4 85 F1 | 	sub	objptr, ##28228
08d50     A8 24 B0 FD | 	call	#_expr
08d54     01 36 66 F6 | 	neg	local09, #1
08d58     00 38 06 F6 | 	mov	local10, #0
08d5c                 | '   ct+=1 : expr()
08d5c                 | '   j=-1 : i=0 
08d5c                 | '   do 
08d5c                 | LR__0802
08d5c                 | '     if variables(i).name=varname$ then j=i: exit loop
08d5c     1C 31 02 F6 | 	mov	local06, local10
08d60     04 30 66 F0 | 	shl	local06, #4
08d64     14 00 00 FF 
08d68     F8 E5 05 F1 | 	add	objptr, ##10744
08d6c     F2 30 02 F1 | 	add	local06, objptr
08d70     18 13 02 FB | 	rdlong	arg01, local06
08d74     19 15 02 F6 | 	mov	arg02, local07
08d78     14 00 00 FF 
08d7c     F8 E5 85 F1 | 	sub	objptr, ##10744
08d80     B8 AF B1 FD | 	call	#__system___string_cmp
08d84     00 FA 0D F2 | 	cmp	result1, #0 wz
08d88     1C 37 02 A6 |  if_e	mov	local09, local10
08d8c     20 00 90 AD |  if_e	jmp	#LR__0803
08d90     01 38 06 F1 | 	add	local10, #1
08d94     35 00 00 FF 
08d98     08 E4 05 F1 | 	add	objptr, ##27144
08d9c     F2 34 02 FB | 	rdlong	local08, objptr
08da0     35 00 00 FF 
08da4     08 E4 85 F1 | 	sub	objptr, ##27144
08da8     1A 39 5A F2 | 	cmps	local10, local08 wcz
08dac     AC FF 9F ED |  if_be	jmp	#LR__0802
08db0                 | LR__0803
08db0     1B 27 02 F6 | 	mov	local01, local09
08db4     16 29 02 F6 | 	mov	local02, local04
08db8     17 2A 06 F6 | 	mov	local03, #23
08dbc     13 35 02 F6 | 	mov	local08, local01
08dc0     14 3B 02 F6 | 	mov	local11, local02
08dc4     15 33 02 F6 | 	mov	local07, local03
08dc8     4A 00 00 FF 
08dcc     7C E4 05 F1 | 	add	objptr, ##38012
08dd0     F2 26 02 FB | 	rdlong	local01, objptr
08dd4     13 37 02 F6 | 	mov	local09, local01
08dd8     01 36 66 F0 | 	shl	local09, #1
08ddc     13 37 02 F1 | 	add	local09, local01
08de0     02 36 66 F0 | 	shl	local09, #2
08de4     03 00 00 FF 
08de8     00 E4 85 F1 | 	sub	objptr, ##1536
08dec     F2 36 02 F1 | 	add	local09, objptr
08df0     1B 35 62 FC | 	wrlong	local08, local09
08df4     03 00 00 FF 
08df8     00 E4 05 F1 | 	add	objptr, ##1536
08dfc     F2 26 02 FB | 	rdlong	local01, objptr
08e00     13 37 02 F6 | 	mov	local09, local01
08e04     01 36 66 F0 | 	shl	local09, #1
08e08     13 37 02 F1 | 	add	local09, local01
08e0c     02 36 66 F0 | 	shl	local09, #2
08e10     03 00 00 FF 
08e14     00 E4 85 F1 | 	sub	objptr, ##1536
08e18     F2 36 02 F1 | 	add	local09, objptr
08e1c     04 36 06 F1 | 	add	local09, #4
08e20     1B 3B 62 FC | 	wrlong	local11, local09
08e24     03 00 00 FF 
08e28     00 E4 05 F1 | 	add	objptr, ##1536
08e2c     F2 3A 02 FB | 	rdlong	local11, objptr
08e30     1D 27 02 F6 | 	mov	local01, local11
08e34     01 26 66 F0 | 	shl	local01, #1
08e38     1D 27 02 F1 | 	add	local01, local11
08e3c     02 26 66 F0 | 	shl	local01, #2
08e40     03 00 00 FF 
08e44     00 E4 85 F1 | 	sub	objptr, ##1536
08e48     F2 26 02 F1 | 	add	local01, objptr
08e4c     08 26 06 F1 | 	add	local01, #8
08e50     13 33 62 FC | 	wrlong	local07, local01
08e54     03 00 00 FF 
08e58     00 E4 05 F1 | 	add	objptr, ##1536
08e5c     F2 34 02 FB | 	rdlong	local08, objptr
08e60     01 34 06 F1 | 	add	local08, #1
08e64     F2 34 62 FC | 	wrlong	local08, objptr
08e68                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08e68                 | '   if numpar>3 then err=45
08e68     04 2C 16 F2 | 	cmp	local04, #4 wc
08e6c     2D 2E 06 36 |  if_ae	mov	local05, #45
08e70                 | '   if i>varnum then err=20
08e70     15 00 00 FF 
08e74     74 E4 85 F1 | 	sub	objptr, ##10868
08e78     F2 34 02 FB | 	rdlong	local08, objptr
08e7c     35 00 00 FF 
08e80     08 E4 85 F1 | 	sub	objptr, ##27144
08e84     1A 39 5A F2 | 	cmps	local10, local08 wcz
08e88     14 2E 06 16 |  if_a	mov	local05, #20
08e8c     04 00 90 FD | 	jmp	#LR__0805
08e90                 | LR__0804
08e90     0E 2E 06 F6 | 	mov	local05, #14
08e94                 | LR__0805
08e94                 | ' return err
08e94     17 FB 01 F6 | 	mov	result1, local05
08e98     A7 F0 03 F6 | 	mov	ptra, fp
08e9c     B2 00 A0 FD | 	call	#popregs_
08ea0                 | _compile_array_assign_ret
08ea0     2D 00 64 FD | 	ret
08ea4                 | 
08ea4                 | ' 
08ea4                 | ' '----- compile print command with its ";" and "," modifiers
08ea4                 | ' 
08ea4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08ea4                 | _compile_print
08ea4     0B 4A 05 F6 | 	mov	COUNT_, #11
08ea8     A8 00 A0 FD | 	call	#pushregs_
08eac     00 26 06 F6 | 	mov	local01, #0
08eb0     1D 2A 06 F6 | 	mov	local03, #29
08eb4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08eb4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08eb4     37 00 00 FF 
08eb8     44 E4 05 F1 | 	add	objptr, ##28228
08ebc     F2 2C 02 FB | 	rdlong	local04, objptr
08ec0     03 2C 66 F0 | 	shl	local04, #3
08ec4     02 00 00 FF 
08ec8     38 E4 85 F1 | 	sub	objptr, ##1080
08ecc     F2 2C 02 F1 | 	add	local04, objptr
08ed0     04 2C 06 F1 | 	add	local04, #4
08ed4     16 2D 02 FB | 	rdlong	local04, local04
08ed8     FE 2D 0E F2 | 	cmp	local04, #510 wz
08edc     35 00 00 FF 
08ee0     0C E4 85 F1 | 	sub	objptr, ##27148
08ee4     68 01 90 5D |  if_ne	jmp	#LR__0810
08ee8     20 2A 06 F6 | 	mov	local03, #32
08eec     13 2F 02 F6 | 	mov	local05, local01
08ef0     14 31 02 F6 | 	mov	local06, local02
08ef4     15 33 02 F6 | 	mov	local07, local03
08ef8     4A 00 00 FF 
08efc     7C E4 05 F1 | 	add	objptr, ##38012
08f00     F2 34 02 FB | 	rdlong	local08, objptr
08f04     1A 37 02 F6 | 	mov	local09, local08
08f08     01 36 66 F0 | 	shl	local09, #1
08f0c     1A 37 02 F1 | 	add	local09, local08
08f10     02 36 66 F0 | 	shl	local09, #2
08f14     03 00 00 FF 
08f18     00 E4 85 F1 | 	sub	objptr, ##1536
08f1c     F2 36 02 F1 | 	add	local09, objptr
08f20     1B 2F 62 FC | 	wrlong	local05, local09
08f24     03 00 00 FF 
08f28     00 E4 05 F1 | 	add	objptr, ##1536
08f2c     F2 2E 02 FB | 	rdlong	local05, objptr
08f30     17 39 02 F6 | 	mov	local10, local05
08f34     01 38 66 F0 | 	shl	local10, #1
08f38     17 39 02 F1 | 	add	local10, local05
08f3c     02 38 66 F0 | 	shl	local10, #2
08f40     03 00 00 FF 
08f44     00 E4 85 F1 | 	sub	objptr, ##1536
08f48     F2 38 02 F1 | 	add	local10, objptr
08f4c     04 38 06 F1 | 	add	local10, #4
08f50     1C 31 62 FC | 	wrlong	local06, local10
08f54     03 00 00 FF 
08f58     00 E4 05 F1 | 	add	objptr, ##1536
08f5c     F2 2E 02 FB | 	rdlong	local05, objptr
08f60     17 3B 02 F6 | 	mov	local11, local05
08f64     01 3A 66 F0 | 	shl	local11, #1
08f68     17 3B 02 F1 | 	add	local11, local05
08f6c     02 3A 66 F0 | 	shl	local11, #2
08f70     03 00 00 FF 
08f74     00 E4 85 F1 | 	sub	objptr, ##1536
08f78     F2 3A 02 F1 | 	add	local11, objptr
08f7c     08 3A 06 F1 | 	add	local11, #8
08f80     1D 33 62 FC | 	wrlong	local07, local11
08f84     03 00 00 FF 
08f88     00 E4 05 F1 | 	add	objptr, ##1536
08f8c     F2 2E 02 FB | 	rdlong	local05, objptr
08f90     01 2E 06 F1 | 	add	local05, #1
08f94     F2 2E 62 FC | 	wrlong	local05, objptr
08f98     44 2A 06 F6 | 	mov	local03, #68
08f9c     13 2F 02 F6 | 	mov	local05, local01
08fa0     14 31 02 F6 | 	mov	local06, local02
08fa4     15 33 02 F6 | 	mov	local07, local03
08fa8     F2 34 02 FB | 	rdlong	local08, objptr
08fac     1A 37 02 F6 | 	mov	local09, local08
08fb0     01 36 66 F0 | 	shl	local09, #1
08fb4     1A 37 02 F1 | 	add	local09, local08
08fb8     02 36 66 F0 | 	shl	local09, #2
08fbc     03 00 00 FF 
08fc0     00 E4 85 F1 | 	sub	objptr, ##1536
08fc4     F2 36 02 F1 | 	add	local09, objptr
08fc8     1B 2F 62 FC | 	wrlong	local05, local09
08fcc     03 00 00 FF 
08fd0     00 E4 05 F1 | 	add	objptr, ##1536
08fd4     F2 3A 02 FB | 	rdlong	local11, objptr
08fd8     1D 39 02 F6 | 	mov	local10, local11
08fdc     01 38 66 F0 | 	shl	local10, #1
08fe0     1D 39 02 F1 | 	add	local10, local11
08fe4     02 38 66 F0 | 	shl	local10, #2
08fe8     03 00 00 FF 
08fec     00 E4 85 F1 | 	sub	objptr, ##1536
08ff0     F2 38 02 F1 | 	add	local10, objptr
08ff4     04 38 06 F1 | 	add	local10, #4
08ff8     1C 31 62 FC | 	wrlong	local06, local10
08ffc     03 00 00 FF 
09000     00 E4 05 F1 | 	add	objptr, ##1536
09004     F2 38 02 FB | 	rdlong	local10, objptr
09008     1C 3B 02 F6 | 	mov	local11, local10
0900c     01 3A 66 F0 | 	shl	local11, #1
09010     1C 3B 02 F1 | 	add	local11, local10
09014     02 3A 66 F0 | 	shl	local11, #2
09018     03 00 00 FF 
0901c     00 E4 85 F1 | 	sub	objptr, ##1536
09020     F2 3A 02 F1 | 	add	local11, objptr
09024     08 3A 06 F1 | 	add	local11, #8
09028     1D 33 62 FC | 	wrlong	local07, local11
0902c     03 00 00 FF 
09030     00 E4 05 F1 | 	add	objptr, ##1536
09034     F2 2E 02 FB | 	rdlong	local05, objptr
09038     01 2E 06 F1 | 	add	local05, #1
0903c     F2 2E 62 FC | 	wrlong	local05, objptr
09040     4A 00 00 FF 
09044     7C E4 85 F1 | 	sub	objptr, ##38012
09048     00 FA 05 F6 | 	mov	result1, #0
0904c     20 05 90 FD | 	jmp	#LR__0817
09050                 | LR__0810
09050                 | ' do
09050                 | LR__0811
09050     A8 21 B0 FD | 	call	#_expr
09054                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09054                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09054     37 00 00 FF 
09058     44 E4 05 F1 | 	add	objptr, ##28228
0905c     F2 2C 02 FB | 	rdlong	local04, objptr
09060     03 2C 66 F0 | 	shl	local04, #3
09064     02 00 00 FF 
09068     38 E4 85 F1 | 	sub	objptr, ##1080
0906c     F2 2C 02 F1 | 	add	local04, objptr
09070     04 2C 06 F1 | 	add	local04, #4
09074     16 35 02 FB | 	rdlong	local08, local04
09078     11 34 0E F2 | 	cmp	local08, #17 wz
0907c     35 00 00 FF 
09080     0C E4 85 F1 | 	sub	objptr, ##27148
09084     60 01 90 5D |  if_ne	jmp	#LR__0812
09088     21 2A 06 F6 | 	mov	local03, #33
0908c     13 2F 02 F6 | 	mov	local05, local01
09090     14 31 02 F6 | 	mov	local06, local02
09094     15 33 02 F6 | 	mov	local07, local03
09098     4A 00 00 FF 
0909c     7C E4 05 F1 | 	add	objptr, ##38012
090a0     F2 34 02 FB | 	rdlong	local08, objptr
090a4     1A 37 02 F6 | 	mov	local09, local08
090a8     01 36 66 F0 | 	shl	local09, #1
090ac     1A 37 02 F1 | 	add	local09, local08
090b0     02 36 66 F0 | 	shl	local09, #2
090b4     03 00 00 FF 
090b8     00 E4 85 F1 | 	sub	objptr, ##1536
090bc     F2 36 02 F1 | 	add	local09, objptr
090c0     1B 2F 62 FC | 	wrlong	local05, local09
090c4     03 00 00 FF 
090c8     00 E4 05 F1 | 	add	objptr, ##1536
090cc     F2 3A 02 FB | 	rdlong	local11, objptr
090d0     1D 39 02 F6 | 	mov	local10, local11
090d4     01 38 66 F0 | 	shl	local10, #1
090d8     1D 39 02 F1 | 	add	local10, local11
090dc     02 38 66 F0 | 	shl	local10, #2
090e0     03 00 00 FF 
090e4     00 E4 85 F1 | 	sub	objptr, ##1536
090e8     F2 38 02 F1 | 	add	local10, objptr
090ec     04 38 06 F1 | 	add	local10, #4
090f0     1C 31 62 FC | 	wrlong	local06, local10
090f4     03 00 00 FF 
090f8     00 E4 05 F1 | 	add	objptr, ##1536
090fc     F2 2E 02 FB | 	rdlong	local05, objptr
09100     17 3B 02 F6 | 	mov	local11, local05
09104     01 3A 66 F0 | 	shl	local11, #1
09108     17 3B 02 F1 | 	add	local11, local05
0910c     02 3A 66 F0 | 	shl	local11, #2
09110     03 00 00 FF 
09114     00 E4 85 F1 | 	sub	objptr, ##1536
09118     F2 3A 02 F1 | 	add	local11, objptr
0911c     08 3A 06 F1 | 	add	local11, #8
09120     1D 33 62 FC | 	wrlong	local07, local11
09124     03 00 00 FF 
09128     00 E4 05 F1 | 	add	objptr, ##1536
0912c     F2 2E 02 FB | 	rdlong	local05, objptr
09130     01 2E 06 F1 | 	add	local05, #1
09134     F2 2E 62 FC | 	wrlong	local05, objptr
09138     44 2A 06 F6 | 	mov	local03, #68
0913c     13 2F 02 F6 | 	mov	local05, local01
09140     14 31 02 F6 | 	mov	local06, local02
09144     15 33 02 F6 | 	mov	local07, local03
09148     F2 34 02 FB | 	rdlong	local08, objptr
0914c     1A 37 02 F6 | 	mov	local09, local08
09150     01 36 66 F0 | 	shl	local09, #1
09154     1A 37 02 F1 | 	add	local09, local08
09158     02 36 66 F0 | 	shl	local09, #2
0915c     03 00 00 FF 
09160     00 E4 85 F1 | 	sub	objptr, ##1536
09164     F2 36 02 F1 | 	add	local09, objptr
09168     1B 2F 62 FC | 	wrlong	local05, local09
0916c     03 00 00 FF 
09170     00 E4 05 F1 | 	add	objptr, ##1536
09174     F2 3A 02 FB | 	rdlong	local11, objptr
09178     1D 39 02 F6 | 	mov	local10, local11
0917c     01 38 66 F0 | 	shl	local10, #1
09180     1D 39 02 F1 | 	add	local10, local11
09184     02 38 66 F0 | 	shl	local10, #2
09188     03 00 00 FF 
0918c     00 E4 85 F1 | 	sub	objptr, ##1536
09190     F2 38 02 F1 | 	add	local10, objptr
09194     04 38 06 F1 | 	add	local10, #4
09198     1C 31 62 FC | 	wrlong	local06, local10
0919c     03 00 00 FF 
091a0     00 E4 05 F1 | 	add	objptr, ##1536
091a4     F2 38 02 FB | 	rdlong	local10, objptr
091a8     1C 3B 02 F6 | 	mov	local11, local10
091ac     01 3A 66 F0 | 	shl	local11, #1
091b0     1C 3B 02 F1 | 	add	local11, local10
091b4     02 3A 66 F0 | 	shl	local11, #2
091b8     03 00 00 FF 
091bc     00 E4 85 F1 | 	sub	objptr, ##1536
091c0     F2 3A 02 F1 | 	add	local11, objptr
091c4     08 3A 06 F1 | 	add	local11, #8
091c8     1D 33 62 FC | 	wrlong	local07, local11
091cc     03 00 00 FF 
091d0     00 E4 05 F1 | 	add	objptr, ##1536
091d4     F2 2E 02 FB | 	rdlong	local05, objptr
091d8     01 2E 06 F1 | 	add	local05, #1
091dc     F2 2E 62 FC | 	wrlong	local05, objptr
091e0     4A 00 00 FF 
091e4     7C E4 85 F1 | 	sub	objptr, ##38012
091e8                 | LR__0812
091e8                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
091e8     37 00 00 FF 
091ec     44 E4 05 F1 | 	add	objptr, ##28228
091f0     F2 2C 02 FB | 	rdlong	local04, objptr
091f4     03 2C 66 F0 | 	shl	local04, #3
091f8     02 00 00 FF 
091fc     38 E4 85 F1 | 	sub	objptr, ##1080
09200     F2 2C 02 F1 | 	add	local04, objptr
09204     04 2C 06 F1 | 	add	local04, #4
09208     16 35 02 FB | 	rdlong	local08, local04
0920c     12 34 0E F2 | 	cmp	local08, #18 wz
09210     35 00 00 FF 
09214     0C E4 85 F1 | 	sub	objptr, ##27148
09218     60 01 90 5D |  if_ne	jmp	#LR__0813
0921c     22 2A 06 F6 | 	mov	local03, #34
09220     13 2F 02 F6 | 	mov	local05, local01
09224     14 31 02 F6 | 	mov	local06, local02
09228     15 33 02 F6 | 	mov	local07, local03
0922c     4A 00 00 FF 
09230     7C E4 05 F1 | 	add	objptr, ##38012
09234     F2 34 02 FB | 	rdlong	local08, objptr
09238     1A 37 02 F6 | 	mov	local09, local08
0923c     01 36 66 F0 | 	shl	local09, #1
09240     1A 37 02 F1 | 	add	local09, local08
09244     02 36 66 F0 | 	shl	local09, #2
09248     03 00 00 FF 
0924c     00 E4 85 F1 | 	sub	objptr, ##1536
09250     F2 36 02 F1 | 	add	local09, objptr
09254     1B 2F 62 FC | 	wrlong	local05, local09
09258     03 00 00 FF 
0925c     00 E4 05 F1 | 	add	objptr, ##1536
09260     F2 3A 02 FB | 	rdlong	local11, objptr
09264     1D 39 02 F6 | 	mov	local10, local11
09268     01 38 66 F0 | 	shl	local10, #1
0926c     1D 39 02 F1 | 	add	local10, local11
09270     02 38 66 F0 | 	shl	local10, #2
09274     03 00 00 FF 
09278     00 E4 85 F1 | 	sub	objptr, ##1536
0927c     F2 38 02 F1 | 	add	local10, objptr
09280     04 38 06 F1 | 	add	local10, #4
09284     1C 31 62 FC | 	wrlong	local06, local10
09288     03 00 00 FF 
0928c     00 E4 05 F1 | 	add	objptr, ##1536
09290     F2 2E 02 FB | 	rdlong	local05, objptr
09294     17 3B 02 F6 | 	mov	local11, local05
09298     01 3A 66 F0 | 	shl	local11, #1
0929c     17 3B 02 F1 | 	add	local11, local05
092a0     02 3A 66 F0 | 	shl	local11, #2
092a4     03 00 00 FF 
092a8     00 E4 85 F1 | 	sub	objptr, ##1536
092ac     F2 3A 02 F1 | 	add	local11, objptr
092b0     08 3A 06 F1 | 	add	local11, #8
092b4     1D 33 62 FC | 	wrlong	local07, local11
092b8     03 00 00 FF 
092bc     00 E4 05 F1 | 	add	objptr, ##1536
092c0     F2 2E 02 FB | 	rdlong	local05, objptr
092c4     01 2E 06 F1 | 	add	local05, #1
092c8     F2 2E 62 FC | 	wrlong	local05, objptr
092cc     44 2A 06 F6 | 	mov	local03, #68
092d0     13 2F 02 F6 | 	mov	local05, local01
092d4     14 31 02 F6 | 	mov	local06, local02
092d8     15 33 02 F6 | 	mov	local07, local03
092dc     F2 34 02 FB | 	rdlong	local08, objptr
092e0     1A 37 02 F6 | 	mov	local09, local08
092e4     01 36 66 F0 | 	shl	local09, #1
092e8     1A 37 02 F1 | 	add	local09, local08
092ec     02 36 66 F0 | 	shl	local09, #2
092f0     03 00 00 FF 
092f4     00 E4 85 F1 | 	sub	objptr, ##1536
092f8     F2 36 02 F1 | 	add	local09, objptr
092fc     1B 2F 62 FC | 	wrlong	local05, local09
09300     03 00 00 FF 
09304     00 E4 05 F1 | 	add	objptr, ##1536
09308     F2 3A 02 FB | 	rdlong	local11, objptr
0930c     1D 39 02 F6 | 	mov	local10, local11
09310     01 38 66 F0 | 	shl	local10, #1
09314     1D 39 02 F1 | 	add	local10, local11
09318     02 38 66 F0 | 	shl	local10, #2
0931c     03 00 00 FF 
09320     00 E4 85 F1 | 	sub	objptr, ##1536
09324     F2 38 02 F1 | 	add	local10, objptr
09328     04 38 06 F1 | 	add	local10, #4
0932c     1C 31 62 FC | 	wrlong	local06, local10
09330     03 00 00 FF 
09334     00 E4 05 F1 | 	add	objptr, ##1536
09338     F2 38 02 FB | 	rdlong	local10, objptr
0933c     1C 3B 02 F6 | 	mov	local11, local10
09340     01 3A 66 F0 | 	shl	local11, #1
09344     1C 3B 02 F1 | 	add	local11, local10
09348     02 3A 66 F0 | 	shl	local11, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 3A 02 F1 | 	add	local11, objptr
09358     08 3A 06 F1 | 	add	local11, #8
0935c     1D 33 62 FC | 	wrlong	local07, local11
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 2E 02 FB | 	rdlong	local05, objptr
0936c     01 2E 06 F1 | 	add	local05, #1
09370     F2 2E 62 FC | 	wrlong	local05, objptr
09374     4A 00 00 FF 
09378     7C E4 85 F1 | 	sub	objptr, ##38012
0937c                 | LR__0813
0937c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0937c     37 00 00 FF 
09380     44 E4 05 F1 | 	add	objptr, ##28228
09384     F2 2C 02 FB | 	rdlong	local04, objptr
09388     03 2C 66 F0 | 	shl	local04, #3
0938c     02 00 00 FF 
09390     38 E4 85 F1 | 	sub	objptr, ##1080
09394     F2 2C 02 F1 | 	add	local04, objptr
09398     04 2C 06 F1 | 	add	local04, #4
0939c     16 35 02 FB | 	rdlong	local08, local04
093a0     FE 35 0E F2 | 	cmp	local08, #510 wz
093a4     35 00 00 FF 
093a8     0C E4 85 F1 | 	sub	objptr, ##27148
093ac     B8 00 90 5D |  if_ne	jmp	#LR__0814
093b0     44 2A 06 F6 | 	mov	local03, #68
093b4     13 2F 02 F6 | 	mov	local05, local01
093b8     14 31 02 F6 | 	mov	local06, local02
093bc     15 33 02 F6 | 	mov	local07, local03
093c0     4A 00 00 FF 
093c4     7C E4 05 F1 | 	add	objptr, ##38012
093c8     F2 34 02 FB | 	rdlong	local08, objptr
093cc     1A 37 02 F6 | 	mov	local09, local08
093d0     01 36 66 F0 | 	shl	local09, #1
093d4     1A 37 02 F1 | 	add	local09, local08
093d8     02 36 66 F0 | 	shl	local09, #2
093dc     03 00 00 FF 
093e0     00 E4 85 F1 | 	sub	objptr, ##1536
093e4     F2 36 02 F1 | 	add	local09, objptr
093e8     1B 2F 62 FC | 	wrlong	local05, local09
093ec     03 00 00 FF 
093f0     00 E4 05 F1 | 	add	objptr, ##1536
093f4     F2 3A 02 FB | 	rdlong	local11, objptr
093f8     1D 39 02 F6 | 	mov	local10, local11
093fc     01 38 66 F0 | 	shl	local10, #1
09400     1D 39 02 F1 | 	add	local10, local11
09404     02 38 66 F0 | 	shl	local10, #2
09408     03 00 00 FF 
0940c     00 E4 85 F1 | 	sub	objptr, ##1536
09410     F2 38 02 F1 | 	add	local10, objptr
09414     04 38 06 F1 | 	add	local10, #4
09418     1C 31 62 FC | 	wrlong	local06, local10
0941c     03 00 00 FF 
09420     00 E4 05 F1 | 	add	objptr, ##1536
09424     F2 38 02 FB | 	rdlong	local10, objptr
09428     1C 3B 02 F6 | 	mov	local11, local10
0942c     01 3A 66 F0 | 	shl	local11, #1
09430     1C 3B 02 F1 | 	add	local11, local10
09434     02 3A 66 F0 | 	shl	local11, #2
09438     03 00 00 FF 
0943c     00 E4 85 F1 | 	sub	objptr, ##1536
09440     F2 3A 02 F1 | 	add	local11, objptr
09444     08 3A 06 F1 | 	add	local11, #8
09448     1D 33 62 FC | 	wrlong	local07, local11
0944c     03 00 00 FF 
09450     00 E4 05 F1 | 	add	objptr, ##1536
09454     F2 2E 02 FB | 	rdlong	local05, objptr
09458     01 2E 06 F1 | 	add	local05, #1
0945c     F2 2E 62 FC | 	wrlong	local05, objptr
09460     4A 00 00 FF 
09464     7C E4 85 F1 | 	sub	objptr, ##38012
09468                 | LR__0814
09468                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09468     37 00 00 FF 
0946c     44 E4 05 F1 | 	add	objptr, ##28228
09470     F2 2C 02 FB | 	rdlong	local04, objptr
09474     03 2C 66 F0 | 	shl	local04, #3
09478     02 00 00 FF 
0947c     38 E4 85 F1 | 	sub	objptr, ##1080
09480     F2 2C 02 F1 | 	add	local04, objptr
09484     04 2C 06 F1 | 	add	local04, #4
09488     16 35 02 FB | 	rdlong	local08, local04
0948c     11 34 0E F2 | 	cmp	local08, #17 wz
09490     35 00 00 FF 
09494     0C E4 85 F1 | 	sub	objptr, ##27148
09498     6C 00 90 AD |  if_e	jmp	#LR__0815
0949c     37 00 00 FF 
094a0     44 E4 05 F1 | 	add	objptr, ##28228
094a4     F2 34 02 FB | 	rdlong	local08, objptr
094a8     03 34 66 F0 | 	shl	local08, #3
094ac     02 00 00 FF 
094b0     38 E4 85 F1 | 	sub	objptr, ##1080
094b4     F2 34 02 F1 | 	add	local08, objptr
094b8     04 34 06 F1 | 	add	local08, #4
094bc     1A 35 02 FB | 	rdlong	local08, local08
094c0     12 34 0E F2 | 	cmp	local08, #18 wz
094c4     35 00 00 FF 
094c8     0C E4 85 F1 | 	sub	objptr, ##27148
094cc     38 00 90 AD |  if_e	jmp	#LR__0815
094d0     37 00 00 FF 
094d4     44 E4 05 F1 | 	add	objptr, ##28228
094d8     F2 3A 02 FB | 	rdlong	local11, objptr
094dc     03 3A 66 F0 | 	shl	local11, #3
094e0     02 00 00 FF 
094e4     38 E4 85 F1 | 	sub	objptr, ##1080
094e8     F2 3A 02 F1 | 	add	local11, objptr
094ec     04 3A 06 F1 | 	add	local11, #4
094f0     1D 3B 02 FB | 	rdlong	local11, local11
094f4     FE 3B 0E F2 | 	cmp	local11, #510 wz
094f8     35 00 00 FF 
094fc     0C E4 85 F1 | 	sub	objptr, ##27148
09500     16 FA 05 56 |  if_ne	mov	result1, #22
09504     68 00 90 5D |  if_ne	jmp	#LR__0817
09508                 | LR__0815
09508     37 00 00 FF 
0950c     44 E4 05 F1 | 	add	objptr, ##28228
09510     F2 2C 02 FB | 	rdlong	local04, objptr
09514     01 2C 06 F1 | 	add	local04, #1
09518     F2 2C 62 FC | 	wrlong	local04, objptr
0951c     03 2C 66 F0 | 	shl	local04, #3
09520     02 00 00 FF 
09524     38 E4 85 F1 | 	sub	objptr, ##1080
09528     F2 2C 02 F1 | 	add	local04, objptr
0952c     04 2C 06 F1 | 	add	local04, #4
09530     16 35 02 FB | 	rdlong	local08, local04
09534     FE 35 0E F2 | 	cmp	local08, #510 wz
09538     35 00 00 FF 
0953c     0C E4 85 F1 | 	sub	objptr, ##27148
09540     28 00 90 AD |  if_e	jmp	#LR__0816
09544     37 00 00 FF 
09548     44 E4 05 F1 | 	add	objptr, ##28228
0954c     F2 3A 02 FB | 	rdlong	local11, objptr
09550     0E 00 00 FF 
09554     1C E4 05 F1 | 	add	objptr, ##7196
09558     F2 38 02 FB | 	rdlong	local10, objptr
0955c     45 00 00 FF 
09560     60 E4 85 F1 | 	sub	objptr, ##35424
09564     1C 3B 52 F2 | 	cmps	local11, local10 wc
09568     E4 FA 9F CD |  if_b	jmp	#LR__0811
0956c                 | LR__0816
0956c                 | ' return 0
0956c     00 FA 05 F6 | 	mov	result1, #0
09570                 | LR__0817
09570     A7 F0 03 F6 | 	mov	ptra, fp
09574     B2 00 A0 FD | 	call	#popregs_
09578                 | _compile_print_ret
09578     2D 00 64 FD | 	ret
0957c                 | 
0957c                 | ' 
0957c                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
0957c                 | ' 
0957c                 | ' function compile_if(aline as ulong) as ulong  
0957c                 | _compile_if
0957c     09 4A 05 F6 | 	mov	COUNT_, #9
09580     A8 00 A0 FD | 	call	#pushregs_
09584                 | _compile_if_enter
09584     09 2D 02 F6 | 	mov	local04, arg01
09588                 | ' return expr()
09588     70 1C B0 FD | 	call	#_expr
0958c     37 00 00 FF 
09590     44 E4 05 F1 | 	add	objptr, ##28228
09594     F2 14 02 FB | 	rdlong	arg02, objptr
09598     0A 2F 02 F6 | 	mov	local05, arg02
0959c     03 2E 66 F0 | 	shl	local05, #3
095a0     02 00 00 FF 
095a4     38 E4 85 F1 | 	sub	objptr, ##1080
095a8     F2 2E 02 F1 | 	add	local05, objptr
095ac     04 2E 06 F1 | 	add	local05, #4
095b0     17 2F 02 FB | 	rdlong	local05, local05
095b4     01 14 06 F1 | 	add	arg02, #1
095b8     02 00 00 FF 
095bc     38 E4 05 F1 | 	add	objptr, ##1080
095c0     F2 14 62 FC | 	wrlong	arg02, objptr
095c4     37 00 00 FF 
095c8     44 E4 85 F1 | 	sub	objptr, ##28228
095cc                 | ' 
095cc                 | ' err=compile_fun_1p()
095cc                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
095cc     5B 2E 0E F2 | 	cmp	local05, #91 wz
095d0     34 FA 05 56 |  if_ne	mov	result1, #52
095d4     20 01 90 5D |  if_ne	jmp	#LR__0822
095d8     58 2A 06 F6 | 	mov	local03, #88
095dc     13 31 02 F6 | 	mov	local06, local01
095e0     14 33 02 F6 | 	mov	local07, local02
095e4     15 15 02 F6 | 	mov	arg02, local03
095e8     4A 00 00 FF 
095ec     7C E4 05 F1 | 	add	objptr, ##38012
095f0     F2 12 02 FB | 	rdlong	arg01, objptr
095f4     09 35 02 F6 | 	mov	local08, arg01
095f8     01 34 66 F0 | 	shl	local08, #1
095fc     09 35 02 F1 | 	add	local08, arg01
09600     02 34 66 F0 | 	shl	local08, #2
09604     03 00 00 FF 
09608     00 E4 85 F1 | 	sub	objptr, ##1536
0960c     F2 34 02 F1 | 	add	local08, objptr
09610     1A 31 62 FC | 	wrlong	local06, local08
09614     03 00 00 FF 
09618     00 E4 05 F1 | 	add	objptr, ##1536
0961c     F2 30 02 FB | 	rdlong	local06, objptr
09620     18 13 02 F6 | 	mov	arg01, local06
09624     01 12 66 F0 | 	shl	arg01, #1
09628     18 13 02 F1 | 	add	arg01, local06
0962c     02 12 66 F0 | 	shl	arg01, #2
09630     03 00 00 FF 
09634     00 E4 85 F1 | 	sub	objptr, ##1536
09638     F2 12 02 F1 | 	add	arg01, objptr
0963c     04 12 06 F1 | 	add	arg01, #4
09640     09 33 62 FC | 	wrlong	local07, arg01
09644     03 00 00 FF 
09648     00 E4 05 F1 | 	add	objptr, ##1536
0964c     F2 30 02 FB | 	rdlong	local06, objptr
09650     18 13 02 F6 | 	mov	arg01, local06
09654     01 12 66 F0 | 	shl	arg01, #1
09658     18 13 02 F1 | 	add	arg01, local06
0965c     02 12 66 F0 | 	shl	arg01, #2
09660     03 00 00 FF 
09664     00 E4 85 F1 | 	sub	objptr, ##1536
09668     F2 12 02 F1 | 	add	arg01, objptr
0966c     08 12 06 F1 | 	add	arg01, #8
09670     09 15 62 FC | 	wrlong	arg02, arg01
09674     03 00 00 FF 
09678     00 E4 05 F1 | 	add	objptr, ##1536
0967c     F2 30 02 FB | 	rdlong	local06, objptr
09680     01 30 06 F1 | 	add	local06, #1
09684     F2 30 62 FC | 	wrlong	local06, objptr
09688                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09688                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09688     13 00 00 FF 
0968c     38 E4 85 F1 | 	sub	objptr, ##9784
09690     F2 14 02 FB | 	rdlong	arg02, objptr
09694     01 14 06 F1 | 	add	arg02, #1
09698     03 14 66 F0 | 	shl	arg02, #3
0969c     02 00 00 FF 
096a0     38 E4 85 F1 | 	sub	objptr, ##1080
096a4     F2 14 02 F1 | 	add	arg02, objptr
096a8     0A 13 02 FB | 	rdlong	arg01, arg02
096ac     35 00 00 FF 
096b0     0C E4 85 F1 | 	sub	objptr, ##27148
096b4                 | ' 
096b4                 | ' select case s
096b4     9D 01 00 FF 
096b8     44 14 06 F6 | 	mov	arg02, ##@LR__5401
096bc     7C A6 B1 FD | 	call	#__system___string_cmp
096c0     00 FA 0D F2 | 	cmp	result1, #0 wz
096c4     1B FA 05 A6 |  if_e	mov	result1, #27
096c8     00 FA 05 56 |  if_ne	mov	result1, #0
096cc     00 FA 0D F2 | 	cmp	result1, #0 wz
096d0     10 00 90 AD |  if_e	jmp	#LR__0820
096d4     05 12 06 F6 | 	mov	arg01, #5
096d8     28 E5 BF FD | 	call	#_compile_immediate_assign
096dc     FD 36 02 F6 | 	mov	local09, result1
096e0     10 00 90 FD | 	jmp	#LR__0821
096e4                 | LR__0820
096e4     05 12 06 F6 | 	mov	arg01, #5
096e8     16 15 02 F6 | 	mov	arg02, local04
096ec     8C DB BF FD | 	call	#_compile_immediate
096f0     FD 36 02 F6 | 	mov	local09, result1
096f4                 | LR__0821
096f4                 | ' return err
096f4     1B FB 01 F6 | 	mov	result1, local09
096f8                 | LR__0822
096f8     A7 F0 03 F6 | 	mov	ptra, fp
096fc     B2 00 A0 FD | 	call	#popregs_
09700                 | _compile_if_ret
09700     2D 00 64 FD | 	ret
09704                 | 
09704                 | ' 
09704                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09704                 | ' 
09704                 | ' function compile_else(aline as ulong) as ulong  
09704                 | _compile_else
09704     07 4A 05 F6 | 	mov	COUNT_, #7
09708     A8 00 A0 FD | 	call	#pushregs_
0970c                 | _compile_else_enter
0970c     09 2D 02 F6 | 	mov	local04, arg01
09710     5A 2A 06 F6 | 	mov	local03, #90
09714     13 2F 02 F6 | 	mov	local05, local01
09718     14 31 02 F6 | 	mov	local06, local02
0971c     15 27 02 F6 | 	mov	local01, local03
09720     4A 00 00 FF 
09724     7C E4 05 F1 | 	add	objptr, ##38012
09728     F2 14 02 FB | 	rdlong	arg02, objptr
0972c     0A 13 02 F6 | 	mov	arg01, arg02
09730     01 12 66 F0 | 	shl	arg01, #1
09734     0A 13 02 F1 | 	add	arg01, arg02
09738     02 12 66 F0 | 	shl	arg01, #2
0973c     03 00 00 FF 
09740     00 E4 85 F1 | 	sub	objptr, ##1536
09744     F2 12 02 F1 | 	add	arg01, objptr
09748     09 2F 62 FC | 	wrlong	local05, arg01
0974c     03 00 00 FF 
09750     00 E4 05 F1 | 	add	objptr, ##1536
09754     F2 2E 02 FB | 	rdlong	local05, objptr
09758     17 15 02 F6 | 	mov	arg02, local05
0975c     01 14 66 F0 | 	shl	arg02, #1
09760     17 15 02 F1 | 	add	arg02, local05
09764     02 14 66 F0 | 	shl	arg02, #2
09768     03 00 00 FF 
0976c     00 E4 85 F1 | 	sub	objptr, ##1536
09770     F2 14 02 F1 | 	add	arg02, objptr
09774     04 14 06 F1 | 	add	arg02, #4
09778     0A 31 62 FC | 	wrlong	local06, arg02
0977c     03 00 00 FF 
09780     00 E4 05 F1 | 	add	objptr, ##1536
09784     F2 30 02 FB | 	rdlong	local06, objptr
09788     18 2F 02 F6 | 	mov	local05, local06
0978c     01 2E 66 F0 | 	shl	local05, #1
09790     18 2F 02 F1 | 	add	local05, local06
09794     02 2E 66 F0 | 	shl	local05, #2
09798     03 00 00 FF 
0979c     00 E4 85 F1 | 	sub	objptr, ##1536
097a0     F2 2E 02 F1 | 	add	local05, objptr
097a4     08 2E 06 F1 | 	add	local05, #8
097a8     17 27 62 FC | 	wrlong	local01, local05
097ac     03 00 00 FF 
097b0     00 E4 05 F1 | 	add	objptr, ##1536
097b4     F2 2E 02 FB | 	rdlong	local05, objptr
097b8     01 2E 06 F1 | 	add	local05, #1
097bc     F2 2E 62 FC | 	wrlong	local05, objptr
097c0                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
097c0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
097c0     13 00 00 FF 
097c4     38 E4 85 F1 | 	sub	objptr, ##9784
097c8     F2 30 02 FB | 	rdlong	local06, objptr
097cc     01 30 06 F1 | 	add	local06, #1
097d0     03 30 66 F0 | 	shl	local06, #3
097d4     02 00 00 FF 
097d8     38 E4 85 F1 | 	sub	objptr, ##1080
097dc     F2 30 02 F1 | 	add	local06, objptr
097e0     18 13 02 FB | 	rdlong	arg01, local06
097e4     35 00 00 FF 
097e8     0C E4 85 F1 | 	sub	objptr, ##27148
097ec                 | ' 
097ec                 | ' select case s
097ec     9D 01 00 FF 
097f0     44 14 06 F6 | 	mov	arg02, ##@LR__5401
097f4     44 A5 B1 FD | 	call	#__system___string_cmp
097f8     00 FA 0D F2 | 	cmp	result1, #0 wz
097fc     1B FA 05 A6 |  if_e	mov	result1, #27
09800     00 FA 05 56 |  if_ne	mov	result1, #0
09804     00 FA 0D F2 | 	cmp	result1, #0 wz
09808     10 00 90 AD |  if_e	jmp	#LR__0830
0980c     05 12 06 F6 | 	mov	arg01, #5
09810     F0 E3 BF FD | 	call	#_compile_immediate_assign
09814     FD 32 02 F6 | 	mov	local07, result1
09818     10 00 90 FD | 	jmp	#LR__0831
0981c                 | LR__0830
0981c     05 12 06 F6 | 	mov	arg01, #5
09820     16 15 02 F6 | 	mov	arg02, local04
09824     54 DA BF FD | 	call	#_compile_immediate
09828     FD 32 02 F6 | 	mov	local07, result1
0982c                 | LR__0831
0982c                 | ' return err
0982c     19 FB 01 F6 | 	mov	result1, local07
09830     A7 F0 03 F6 | 	mov	ptra, fp
09834     B2 00 A0 FD | 	call	#popregs_
09838                 | _compile_else_ret
09838     2D 00 64 FD | 	ret
0983c                 | 
0983c                 | ' 
0983c                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0983c                 | ' 
0983c                 | ' function compile_dim() as ulong  
0983c                 | _compile_dim
0983c     11 4A 05 F6 | 	mov	COUNT_, #17
09840     A8 00 A0 FD | 	call	#pushregs_
09844     01 26 06 F6 | 	mov	local01, #1
09848     01 28 06 F6 | 	mov	local02, #1
0984c     01 2A 06 F6 | 	mov	local03, #1
09850                 | ' 
09850                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09850                 | ' if isname(lparts(ct).part$) then 
09850     37 00 00 FF 
09854     44 E4 05 F1 | 	add	objptr, ##28228
09858     F2 18 02 FB | 	rdlong	arg04, objptr
0985c     03 18 66 F0 | 	shl	arg04, #3
09860     02 00 00 FF 
09864     38 E4 85 F1 | 	sub	objptr, ##1080
09868     F2 18 02 F1 | 	add	arg04, objptr
0986c     0C 13 02 FB | 	rdlong	arg01, arg04
09870     35 00 00 FF 
09874     0C E4 85 F1 | 	sub	objptr, ##27148
09878     58 C8 BF FD | 	call	#_isname
0987c     00 FA 0D F2 | 	cmp	result1, #0 wz
09880     78 05 90 AD |  if_e	jmp	#LR__0863
09884     37 00 00 FF 
09888     44 E4 05 F1 | 	add	objptr, ##28228
0988c     F2 2C 02 FB | 	rdlong	local04, objptr
09890     03 2C 66 F0 | 	shl	local04, #3
09894     02 00 00 FF 
09898     38 E4 85 F1 | 	sub	objptr, ##1080
0989c     F2 2C 02 F1 | 	add	local04, objptr
098a0     16 2F 02 FB | 	rdlong	local05, local04
098a4     01 30 66 F6 | 	neg	local06, #1
098a8                 | '   varname2$=lparts(ct).part$ 
098a8                 | '   j=-1
098a8                 | '   if varnum>0 then
098a8     04 E4 85 F1 | 	sub	objptr, #4
098ac     F2 32 02 FB | 	rdlong	local07, objptr
098b0     35 00 00 FF 
098b4     08 E4 85 F1 | 	sub	objptr, ##27144
098b8     01 32 56 F2 | 	cmps	local07, #1 wc
098bc     58 00 90 CD |  if_b	jmp	#LR__0842
098c0                 | '     for i=0 to varnum-1
098c0     00 34 06 F6 | 	mov	local08, #0
098c4     35 00 00 FF 
098c8     08 E4 05 F1 | 	add	objptr, ##27144
098cc     F2 36 02 FB | 	rdlong	local09, objptr
098d0     35 00 00 FF 
098d4     08 E4 85 F1 | 	sub	objptr, ##27144
098d8                 | LR__0840
098d8     1B 35 52 F2 | 	cmps	local08, local09 wc
098dc     38 00 90 3D |  if_ae	jmp	#LR__0841
098e0                 | '       if variables(i).name=varname2$ then j=i : exit
098e0     1A 2D 02 F6 | 	mov	local04, local08
098e4     04 2C 66 F0 | 	shl	local04, #4
098e8     14 00 00 FF 
098ec     F8 E5 05 F1 | 	add	objptr, ##10744
098f0     F2 2C 02 F1 | 	add	local04, objptr
098f4     16 13 02 FB | 	rdlong	arg01, local04
098f8     17 15 02 F6 | 	mov	arg02, local05
098fc     14 00 00 FF 
09900     F8 E5 85 F1 | 	sub	objptr, ##10744
09904     34 A4 B1 FD | 	call	#__system___string_cmp
09908     00 FA 0D F2 | 	cmp	result1, #0 wz
0990c     1A 31 02 A6 |  if_e	mov	local06, local08
09910     01 34 06 51 |  if_ne	add	local08, #1
09914     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
09918                 | LR__0841
09918                 | LR__0842
09918                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09918     FF FF 7F FF 
0991c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09920     35 00 00 AF 
09924     08 E4 05 A1 |  if_e	add	objptr, ##27144
09928     F2 30 02 AB |  if_e	rdlong	local06, objptr
0992c     35 00 00 AF 
09930     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09934     78 00 90 AD |  if_e	jmp	#LR__0843
09938     00 12 06 F6 | 	mov	arg01, #0
0993c     FC 00 B2 FD | 	call	#__system___getiolock_0573
09940     FD 12 02 F6 | 	mov	arg01, result1
09944     CC A3 B1 FD | 	call	#__system___lockmem
09948     9F 01 00 FF 
0994c     8F 14 06 F6 | 	mov	arg02, ##@LR__5644
09950     00 12 06 F6 | 	mov	arg01, #0
09954     00 16 06 F6 | 	mov	arg03, #0
09958     AC B0 B1 FD | 	call	#__system___basic_print_string
0995c     51 00 00 FF 
09960     C4 E5 05 F1 | 	add	objptr, ##41924
09964     F2 14 02 FB | 	rdlong	arg02, objptr
09968     51 00 00 FF 
0996c     C4 E5 85 F1 | 	sub	objptr, ##41924
09970     00 12 06 F6 | 	mov	arg01, #0
09974     00 16 06 F6 | 	mov	arg03, #0
09978     0A 18 06 F6 | 	mov	arg04, #10
0997c     0C B1 B1 FD | 	call	#__system___basic_print_unsigned
09980     9F 01 00 FF 
09984     9D 14 06 F6 | 	mov	arg02, ##@LR__5645
09988     00 12 06 F6 | 	mov	arg01, #0
0998c     00 16 06 F6 | 	mov	arg03, #0
09990     74 B0 B1 FD | 	call	#__system___basic_print_string
09994     00 12 06 F6 | 	mov	arg01, #0
09998     0A 14 06 F6 | 	mov	arg02, #10
0999c     00 16 06 F6 | 	mov	arg03, #0
099a0     0C B0 B1 FD | 	call	#__system___basic_print_char
099a4     00 12 06 F6 | 	mov	arg01, #0
099a8     90 00 B2 FD | 	call	#__system___getiolock_0573
099ac     FD 00 68 FC | 	wrlong	#0, result1
099b0                 | LR__0843
099b0                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
099b0     37 00 00 FF 
099b4     44 E4 05 F1 | 	add	objptr, ##28228
099b8     F2 14 02 FB | 	rdlong	arg02, objptr
099bc     01 14 06 F1 | 	add	arg02, #1
099c0     03 14 66 F0 | 	shl	arg02, #3
099c4     02 00 00 FF 
099c8     38 E4 85 F1 | 	sub	objptr, ##1080
099cc     F2 14 02 F1 | 	add	arg02, objptr
099d0     0A 13 02 FB | 	rdlong	arg01, arg02
099d4     9F 01 00 FF 
099d8     BE 14 06 F6 | 	mov	arg02, ##@LR__5646
099dc     35 00 00 FF 
099e0     0C E4 85 F1 | 	sub	objptr, ##27148
099e4     54 A3 B1 FD | 	call	#__system___string_cmp
099e8     00 FA 0D F2 | 	cmp	result1, #0 wz
099ec     44 00 90 AD |  if_e	jmp	#LR__0844
099f0     37 00 00 FF 
099f4     44 E4 05 F1 | 	add	objptr, ##28228
099f8     F2 36 02 FB | 	rdlong	local09, objptr
099fc     01 36 06 F1 | 	add	local09, #1
09a00     03 36 66 F0 | 	shl	local09, #3
09a04     02 00 00 FF 
09a08     38 E4 85 F1 | 	sub	objptr, ##1080
09a0c     F2 36 02 F1 | 	add	local09, objptr
09a10     1B 13 02 FB | 	rdlong	arg01, local09
09a14     9F 01 00 FF 
09a18     C0 14 06 F6 | 	mov	arg02, ##@LR__5647
09a1c     35 00 00 FF 
09a20     0C E4 85 F1 | 	sub	objptr, ##27148
09a24     14 A3 B1 FD | 	call	#__system___string_cmp
09a28     00 FA 0D F2 | 	cmp	result1, #0 wz
09a2c     2B FA 05 56 |  if_ne	mov	result1, #43
09a30     D0 04 90 5D |  if_ne	jmp	#LR__0865
09a34                 | LR__0844
09a34                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09a34     37 00 00 FF 
09a38     44 E4 05 F1 | 	add	objptr, ##28228
09a3c     F2 14 02 FB | 	rdlong	arg02, objptr
09a40     01 14 06 F1 | 	add	arg02, #1
09a44     03 14 66 F0 | 	shl	arg02, #3
09a48     02 00 00 FF 
09a4c     38 E4 85 F1 | 	sub	objptr, ##1080
09a50     F2 14 02 F1 | 	add	arg02, objptr
09a54     0A 13 02 FB | 	rdlong	arg01, arg02
09a58     9F 01 00 FF 
09a5c     C3 14 06 F6 | 	mov	arg02, ##@LR__5648
09a60     35 00 00 FF 
09a64     0C E4 85 F1 | 	sub	objptr, ##27148
09a68     D0 A2 B1 FD | 	call	#__system___string_cmp
09a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a70     37 00 00 AF 
09a74     44 E4 05 A1 |  if_e	add	objptr, ##28228
09a78     F2 38 02 AB |  if_e	rdlong	local10, objptr
09a7c     37 00 00 AF 
09a80     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09a84     01 38 06 A1 |  if_e	add	local10, #1
09a88     5C 01 90 AD |  if_e	jmp	#LR__0849
09a8c     37 00 00 FF 
09a90     44 E4 05 F1 | 	add	objptr, ##28228
09a94     F2 38 02 FB | 	rdlong	local10, objptr
09a98     37 00 00 FF 
09a9c     44 E4 85 F1 | 	sub	objptr, ##28228
09aa0     02 38 06 F1 | 	add	local10, #2
09aa4     00 3A 06 F6 | 	mov	local11, #0
09aa8                 | '   l=ct+2 : m=0 : do
09aa8                 | LR__0845
09aa8                 | '   if isdec(lparts(l).part$) then 
09aa8     1C 2D 02 F6 | 	mov	local04, local10
09aac     03 2C 66 F0 | 	shl	local04, #3
09ab0     35 00 00 FF 
09ab4     0C E4 05 F1 | 	add	objptr, ##27148
09ab8     F2 2C 02 F1 | 	add	local04, objptr
09abc     16 13 02 FB | 	rdlong	arg01, local04
09ac0     35 00 00 FF 
09ac4     0C E4 85 F1 | 	sub	objptr, ##27148
09ac8     0C CF BF FD | 	call	#_isdec
09acc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ad0     44 00 90 AD |  if_e	jmp	#LR__0846
09ad4     1D 3D 02 F6 | 	mov	local12, local11
09ad8     13 3D 06 F1 | 	add	local12, #local01
09adc     1C 37 02 F6 | 	mov	local09, local10
09ae0     03 36 66 F0 | 	shl	local09, #3
09ae4     35 00 00 FF 
09ae8     0C E4 05 F1 | 	add	objptr, ##27148
09aec     F2 36 02 F1 | 	add	local09, objptr
09af0     1B 13 02 FB | 	rdlong	arg01, local09
09af4     00 14 06 F6 | 	mov	arg02, #0
09af8     35 00 00 FF 
09afc     0C E4 85 F1 | 	sub	objptr, ##27148
09b00     00 D7 B1 FD | 	call	#__system____builtin_atoi
09b04     FD 3E 02 F6 | 	mov	local13, result1
09b08                 | 	'.live	local13
09b08                 | 	'.live	local12
09b08     00 3C 8E F9 | 	altd	local12, #0
09b0c     1F 3D 02 F6 | 	mov	local12, local13
09b10     01 3A 06 F1 | 	add	local11, #1
09b14     08 00 90 FD | 	jmp	#LR__0847
09b18                 | LR__0846
09b18                 | '     return(17)
09b18     11 FA 05 F6 | 	mov	result1, #17
09b1c     E4 03 90 FD | 	jmp	#LR__0865
09b20                 | LR__0847
09b20                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09b20     1C 2D 02 F6 | 	mov	local04, local10
09b24     01 2C 06 F1 | 	add	local04, #1
09b28     03 2C 66 F0 | 	shl	local04, #3
09b2c     35 00 00 FF 
09b30     0C E4 05 F1 | 	add	objptr, ##27148
09b34     F2 2C 02 F1 | 	add	local04, objptr
09b38     16 13 02 FB | 	rdlong	arg01, local04
09b3c     9F 01 00 FF 
09b40     C6 14 06 F6 | 	mov	arg02, ##@LR__5649
09b44     35 00 00 FF 
09b48     0C E4 85 F1 | 	sub	objptr, ##27148
09b4c     EC A1 B1 FD | 	call	#__system___string_cmp
09b50     00 FA 0D F2 | 	cmp	result1, #0 wz
09b54     3C 00 90 AD |  if_e	jmp	#LR__0848
09b58     1C 3F 02 F6 | 	mov	local13, local10
09b5c     01 3E 06 F1 | 	add	local13, #1
09b60     03 3E 66 F0 | 	shl	local13, #3
09b64     35 00 00 FF 
09b68     0C E4 05 F1 | 	add	objptr, ##27148
09b6c     F2 3E 02 F1 | 	add	local13, objptr
09b70     1F 13 02 FB | 	rdlong	arg01, local13
09b74     9F 01 00 FF 
09b78     C8 14 06 F6 | 	mov	arg02, ##@LR__5650
09b7c     35 00 00 FF 
09b80     0C E4 85 F1 | 	sub	objptr, ##27148
09b84     B4 A1 B1 FD | 	call	#__system___string_cmp
09b88     00 FA 0D F2 | 	cmp	result1, #0 wz
09b8c     2C FA 05 56 |  if_ne	mov	result1, #44
09b90     70 03 90 5D |  if_ne	jmp	#LR__0865
09b94                 | LR__0848
09b94     02 38 06 F1 | 	add	local10, #2
09b98     1C 2D 02 F6 | 	mov	local04, local10
09b9c     01 2C 86 F1 | 	sub	local04, #1
09ba0     03 2C 66 F0 | 	shl	local04, #3
09ba4     35 00 00 FF 
09ba8     0C E4 05 F1 | 	add	objptr, ##27148
09bac     F2 2C 02 F1 | 	add	local04, objptr
09bb0     16 13 02 FB | 	rdlong	arg01, local04
09bb4     9F 01 00 FF 
09bb8     CA 14 06 F6 | 	mov	arg02, ##@LR__5651
09bbc     35 00 00 FF 
09bc0     0C E4 85 F1 | 	sub	objptr, ##27148
09bc4     74 A1 B1 FD | 	call	#__system___string_cmp
09bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
09bcc     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09bd0     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0845
09bd4                 | '   if m>3 then return 45
09bd4     04 3A 56 F2 | 	cmps	local11, #4 wc
09bd8     2D FA 05 36 |  if_ae	mov	result1, #45
09bdc     24 03 90 3D |  if_ae	jmp	#LR__0865
09be0     00 41 06 F6 | 	mov	local14, #256
09be4     0C 42 06 F6 | 	mov	local15, #12
09be8                 | LR__0849
09be8                 | '   arraytype=array_no_type : esize=12
09be8                 | ' 1350 
09be8                 | '   if lparts(l).part$="as" then
09be8     1C 2D 02 F6 | 	mov	local04, local10
09bec     03 2C 66 F0 | 	shl	local04, #3
09bf0     35 00 00 FF 
09bf4     0C E4 05 F1 | 	add	objptr, ##27148
09bf8     F2 2C 02 F1 | 	add	local04, objptr
09bfc     16 13 02 FB | 	rdlong	arg01, local04
09c00     9F 01 00 FF 
09c04     CC 14 06 F6 | 	mov	arg02, ##@LR__5652
09c08     35 00 00 FF 
09c0c     0C E4 85 F1 | 	sub	objptr, ##27148
09c10     28 A1 B1 FD | 	call	#__system___string_cmp
09c14     00 FA 0D F2 | 	cmp	result1, #0 wz
09c18     E8 01 90 5D |  if_ne	jmp	#LR__0864
09c1c                 | '     select case lparts(l+1).part$
09c1c     1C 3D 02 F6 | 	mov	local12, local10
09c20     01 3C 06 F1 | 	add	local12, #1
09c24     03 3C 66 F0 | 	shl	local12, #3
09c28     35 00 00 FF 
09c2c     0C E4 05 F1 | 	add	objptr, ##27148
09c30     F2 3C 02 F1 | 	add	local12, objptr
09c34     1E 45 02 FB | 	rdlong	local16, local12
09c38     9F 01 00 FF 
09c3c     CF 14 06 F6 | 	mov	arg02, ##@LR__5653
09c40     22 13 02 F6 | 	mov	arg01, local16
09c44     35 00 00 FF 
09c48     0C E4 85 F1 | 	sub	objptr, ##27148
09c4c     EC A0 B1 FD | 	call	#__system___string_cmp
09c50     00 FA 0D F2 | 	cmp	result1, #0 wz
09c54     0C 01 90 AD |  if_e	jmp	#LR__0850
09c58     9F 01 00 FF 
09c5c     D4 14 06 F6 | 	mov	arg02, ##@LR__5654
09c60     22 13 02 F6 | 	mov	arg01, local16
09c64     D4 A0 B1 FD | 	call	#__system___string_cmp
09c68     00 FA 0D F2 | 	cmp	result1, #0 wz
09c6c     00 01 90 AD |  if_e	jmp	#LR__0851
09c70     9F 01 00 FF 
09c74     DA 14 06 F6 | 	mov	arg02, ##@LR__5655
09c78     22 13 02 F6 | 	mov	arg01, local16
09c7c     BC A0 B1 FD | 	call	#__system___string_cmp
09c80     00 FA 0D F2 | 	cmp	result1, #0 wz
09c84     F4 00 90 AD |  if_e	jmp	#LR__0852
09c88     9F 01 00 FF 
09c8c     E0 14 06 F6 | 	mov	arg02, ##@LR__5656
09c90     22 13 02 F6 | 	mov	arg01, local16
09c94     A4 A0 B1 FD | 	call	#__system___string_cmp
09c98     00 FA 0D F2 | 	cmp	result1, #0 wz
09c9c     E8 00 90 AD |  if_e	jmp	#LR__0853
09ca0     9F 01 00 FF 
09ca4     E7 14 06 F6 | 	mov	arg02, ##@LR__5657
09ca8     22 13 02 F6 | 	mov	arg01, local16
09cac     8C A0 B1 FD | 	call	#__system___string_cmp
09cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
09cb4     DC 00 90 AD |  if_e	jmp	#LR__0854
09cb8     9F 01 00 FF 
09cbc     EC 14 06 F6 | 	mov	arg02, ##@LR__5658
09cc0     22 13 02 F6 | 	mov	arg01, local16
09cc4     74 A0 B1 FD | 	call	#__system___string_cmp
09cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
09ccc     D0 00 90 AD |  if_e	jmp	#LR__0855
09cd0     9F 01 00 FF 
09cd4     F4 14 06 F6 | 	mov	arg02, ##@LR__5659
09cd8     22 13 02 F6 | 	mov	arg01, local16
09cdc     5C A0 B1 FD | 	call	#__system___string_cmp
09ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ce4     C4 00 90 AD |  if_e	jmp	#LR__0856
09ce8     9F 01 00 FF 
09cec     FA 14 06 F6 | 	mov	arg02, ##@LR__5660
09cf0     22 13 02 F6 | 	mov	arg01, local16
09cf4     44 A0 B1 FD | 	call	#__system___string_cmp
09cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
09cfc     B8 00 90 AD |  if_e	jmp	#LR__0857
09d00     9F 01 00 FF 
09d04     00 15 06 F6 | 	mov	arg02, ##@LR__5661
09d08     22 13 02 F6 | 	mov	arg01, local16
09d0c     2C A0 B1 FD | 	call	#__system___string_cmp
09d10     00 FA 0D F2 | 	cmp	result1, #0 wz
09d14     AC 00 90 AD |  if_e	jmp	#LR__0858
09d18     9F 01 00 FF 
09d1c     07 15 06 F6 | 	mov	arg02, ##@LR__5662
09d20     22 13 02 F6 | 	mov	arg01, local16
09d24     14 A0 B1 FD | 	call	#__system___string_cmp
09d28     00 FA 0D F2 | 	cmp	result1, #0 wz
09d2c     A0 00 90 AD |  if_e	jmp	#LR__0859
09d30     9F 01 00 FF 
09d34     0E 15 06 F6 | 	mov	arg02, ##@LR__5663
09d38     22 13 02 F6 | 	mov	arg01, local16
09d3c     FC 9F B1 FD | 	call	#__system___string_cmp
09d40     00 FA 0D F2 | 	cmp	result1, #0 wz
09d44     94 00 90 AD |  if_e	jmp	#LR__0860
09d48     9F 01 00 FF 
09d4c     15 15 06 F6 | 	mov	arg02, ##@LR__5664
09d50     22 13 02 F6 | 	mov	arg01, local16
09d54     E4 9F B1 FD | 	call	#__system___string_cmp
09d58     00 FA 0D F2 | 	cmp	result1, #0 wz
09d5c     88 00 90 AD |  if_e	jmp	#LR__0861
09d60     90 00 90 FD | 	jmp	#LR__0862
09d64                 | LR__0850
09d64     01 41 06 F6 | 	mov	local14, #257
09d68     01 42 06 F6 | 	mov	local15, #1
09d6c     94 00 90 FD | 	jmp	#LR__0864
09d70                 | LR__0851
09d70     02 41 06 F6 | 	mov	local14, #258
09d74     01 42 06 F6 | 	mov	local15, #1
09d78     88 00 90 FD | 	jmp	#LR__0864
09d7c                 | LR__0852
09d7c     03 41 06 F6 | 	mov	local14, #259
09d80     02 42 06 F6 | 	mov	local15, #2
09d84     7C 00 90 FD | 	jmp	#LR__0864
09d88                 | LR__0853
09d88     04 41 06 F6 | 	mov	local14, #260
09d8c     02 42 06 F6 | 	mov	local15, #2
09d90     70 00 90 FD | 	jmp	#LR__0864
09d94                 | LR__0854
09d94     05 41 06 F6 | 	mov	local14, #261
09d98     04 42 06 F6 | 	mov	local15, #4
09d9c     64 00 90 FD | 	jmp	#LR__0864
09da0                 | LR__0855
09da0     05 41 06 F6 | 	mov	local14, #261
09da4     04 42 06 F6 | 	mov	local15, #4
09da8     58 00 90 FD | 	jmp	#LR__0864
09dac                 | LR__0856
09dac     06 41 06 F6 | 	mov	local14, #262
09db0     04 42 06 F6 | 	mov	local15, #4
09db4     4C 00 90 FD | 	jmp	#LR__0864
09db8                 | LR__0857
09db8     07 41 06 F6 | 	mov	local14, #263
09dbc     08 42 06 F6 | 	mov	local15, #8
09dc0     40 00 90 FD | 	jmp	#LR__0864
09dc4                 | LR__0858
09dc4     08 41 06 F6 | 	mov	local14, #264
09dc8     08 42 06 F6 | 	mov	local15, #8
09dcc     34 00 90 FD | 	jmp	#LR__0864
09dd0                 | LR__0859
09dd0     09 41 06 F6 | 	mov	local14, #265
09dd4     04 42 06 F6 | 	mov	local15, #4
09dd8     28 00 90 FD | 	jmp	#LR__0864
09ddc                 | LR__0860
09ddc     0A 41 06 F6 | 	mov	local14, #266
09de0     08 42 06 F6 | 	mov	local15, #8
09de4     1C 00 90 FD | 	jmp	#LR__0864
09de8                 | LR__0861
09de8     0B 41 06 F6 | 	mov	local14, #267
09dec     04 42 06 F6 | 	mov	local15, #4
09df0     10 00 90 FD | 	jmp	#LR__0864
09df4                 | LR__0862
09df4     2F FA 05 F6 | 	mov	result1, #47
09df8     08 01 90 FD | 	jmp	#LR__0865
09dfc                 | LR__0863
09dfc                 | '   return 46
09dfc     2E FA 05 F6 | 	mov	result1, #46
09e00     00 01 90 FD | 	jmp	#LR__0865
09e04                 | LR__0864
09e04     13 43 02 FD | 	qmul	local15, local01
09e08     18 32 62 FD | 	getqx	local07
09e0c     14 33 02 FD | 	qmul	local07, local02
09e10     18 44 62 FD | 	getqx	local16
09e14     15 45 02 FD | 	qmul	local16, local03
09e18     51 00 00 FF 
09e1c     AC E5 05 F1 | 	add	objptr, ##41900
09e20     F2 46 02 FB | 	rdlong	local17, objptr
09e24     20 15 02 F6 | 	mov	arg02, local14
09e28     18 44 62 FD | 	getqx	local16
09e2c     22 47 82 F1 | 	sub	local17, local16
09e30     10 46 86 F1 | 	sub	local17, #16
09e34     0F 46 26 F5 | 	andn	local17, #15
09e38     F2 46 62 FC | 	wrlong	local17, objptr
09e3c     51 00 00 FF 
09e40     AC E5 85 F1 | 	sub	objptr, ##41900
09e44     23 13 02 F6 | 	mov	arg01, local17
09e48     0C 67 B1 FD | 	call	#_psdpoke
09e4c     23 13 02 F6 | 	mov	arg01, local17
09e50     02 12 06 F1 | 	add	arg01, #2
09e54     21 15 02 F6 | 	mov	arg02, local15
09e58     FC 66 B1 FD | 	call	#_psdpoke
09e5c     23 13 02 F6 | 	mov	arg01, local17
09e60     04 12 06 F1 | 	add	arg01, #4
09e64     13 15 02 F6 | 	mov	arg02, local01
09e68     A4 66 B1 FD | 	call	#_pslpoke
09e6c     23 13 02 F6 | 	mov	arg01, local17
09e70     08 12 06 F1 | 	add	arg01, #8
09e74     14 15 02 F6 | 	mov	arg02, local02
09e78     94 66 B1 FD | 	call	#_pslpoke
09e7c     23 13 02 F6 | 	mov	arg01, local17
09e80     0C 12 06 F1 | 	add	arg01, #12
09e84     15 15 02 F6 | 	mov	arg02, local03
09e88     84 66 B1 FD | 	call	#_pslpoke
09e8c     18 3D 02 F6 | 	mov	local12, local06
09e90     04 3C 66 F0 | 	shl	local12, #4
09e94     14 00 00 FF 
09e98     F8 E5 05 F1 | 	add	objptr, ##10744
09e9c     F2 3C 02 F1 | 	add	local12, objptr
09ea0     1E 2F 62 FC | 	wrlong	local05, local12
09ea4     18 3D 02 F6 | 	mov	local12, local06
09ea8     04 3C 66 F0 | 	shl	local12, #4
09eac     F2 3C 02 F1 | 	add	local12, objptr
09eb0     04 3C 06 F1 | 	add	local12, #4
09eb4     1E 47 62 FC | 	wrlong	local17, local12
09eb8     18 3D 02 F6 | 	mov	local12, local06
09ebc     04 3C 66 F0 | 	shl	local12, #4
09ec0     F2 3C 02 F1 | 	add	local12, objptr
09ec4     0C 3C 06 F1 | 	add	local12, #12
09ec8     1E 41 62 FC | 	wrlong	local14, local12
09ecc                 | ' memtop=arrayptr
09ecc                 | ' psdpoke arrayptr,arraytype 
09ecc                 | ' psdpoke arrayptr+2,esize 
09ecc                 | ' pslpoke arrayptr+4,dims(0)
09ecc                 | ' pslpoke arrayptr+8,dims(1)
09ecc                 | ' pslpoke arrayptr+12,dims(2)
09ecc                 | ' variables(j).name=varname2$
09ecc                 | ' variables(j).value.uresult=arrayptr
09ecc                 | ' variables(j).vartype=arraytype
09ecc                 | ' if j=varnum then varnum+=1
09ecc     20 00 00 FF 
09ed0     10 E4 05 F1 | 	add	objptr, ##16400
09ed4     F2 32 02 FB | 	rdlong	local07, objptr
09ed8     35 00 00 FF 
09edc     08 E4 85 F1 | 	sub	objptr, ##27144
09ee0     19 31 0A F2 | 	cmp	local06, local07 wz
09ee4     35 00 00 AF 
09ee8     08 E4 05 A1 |  if_e	add	objptr, ##27144
09eec     F2 32 02 AB |  if_e	rdlong	local07, objptr
09ef0     01 32 06 A1 |  if_e	add	local07, #1
09ef4     F2 32 62 AC |  if_e	wrlong	local07, objptr
09ef8     35 00 00 AF 
09efc     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09f00                 | ' return 0
09f00     00 FA 05 F6 | 	mov	result1, #0
09f04                 | LR__0865
09f04     A7 F0 03 F6 | 	mov	ptra, fp
09f08     B2 00 A0 FD | 	call	#popregs_
09f0c                 | _compile_dim_ret
09f0c     2D 00 64 FD | 	ret
09f10                 | 
09f10                 | ' 
09f10                 | ' '----- compile 'for' command. 
09f10                 | ' 
09f10                 | ' function compile_for() as ulong  
09f10                 | _compile_for
09f10     05 4A 05 F6 | 	mov	COUNT_, #5
09f14     A8 00 A0 FD | 	call	#pushregs_
09f18                 | ' 
09f18                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09f18     37 00 00 FF 
09f1c     44 E4 05 F1 | 	add	objptr, ##28228
09f20     F2 14 02 FB | 	rdlong	arg02, objptr
09f24     01 14 06 F1 | 	add	arg02, #1
09f28     03 14 66 F0 | 	shl	arg02, #3
09f2c     02 00 00 FF 
09f30     38 E4 85 F1 | 	sub	objptr, ##1080
09f34     F2 14 02 F1 | 	add	arg02, objptr
09f38     0A 13 02 FB | 	rdlong	arg01, arg02
09f3c     35 00 00 FF 
09f40     0C E4 85 F1 | 	sub	objptr, ##27148
09f44                 | ' 
09f44                 | ' select case s
09f44     9D 01 00 FF 
09f48     44 14 06 F6 | 	mov	arg02, ##@LR__5401
09f4c     EC 9D B1 FD | 	call	#__system___string_cmp
09f50     00 FA 0D F2 | 	cmp	result1, #0 wz
09f54     1B FA 05 A6 |  if_e	mov	result1, #27
09f58     00 FA 05 56 |  if_ne	mov	result1, #0
09f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f60     0C 00 90 AD |  if_e	jmp	#LR__0870
09f64     05 12 06 F6 | 	mov	arg01, #5
09f68     98 DC BF FD | 	call	#_compile_immediate_assign
09f6c     08 00 90 FD | 	jmp	#LR__0871
09f70                 | LR__0870
09f70     20 FA 05 F6 | 	mov	result1, #32
09f74     D0 02 90 FD | 	jmp	#LR__0875
09f78                 | LR__0871
09f78     4A 00 00 FF 
09f7c     7C E4 05 F1 | 	add	objptr, ##38012
09f80     F2 14 02 FB | 	rdlong	arg02, objptr
09f84     0A 13 02 F6 | 	mov	arg01, arg02
09f88     01 12 86 F1 | 	sub	arg01, #1
09f8c     09 2D 02 F6 | 	mov	local04, arg01
09f90     01 2C 66 F0 | 	shl	local04, #1
09f94     09 2D 02 F1 | 	add	local04, arg01
09f98     02 2C 66 F0 | 	shl	local04, #2
09f9c     03 00 00 FF 
09fa0     00 E4 85 F1 | 	sub	objptr, ##1536
09fa4     F2 2C 02 F1 | 	add	local04, objptr
09fa8     16 27 02 FB | 	rdlong	local01, local04
09fac     04 2C 06 F1 | 	add	local04, #4
09fb0     16 2D 02 FB | 	rdlong	local04, local04
09fb4     01 14 86 F1 | 	sub	arg02, #1
09fb8     0A 13 02 F6 | 	mov	arg01, arg02
09fbc     01 12 66 F0 | 	shl	arg01, #1
09fc0     0A 13 02 F1 | 	add	arg01, arg02
09fc4     02 12 66 F0 | 	shl	arg01, #2
09fc8     F2 12 02 F1 | 	add	arg01, objptr
09fcc     08 12 06 F1 | 	add	arg01, #8
09fd0     09 15 02 FB | 	rdlong	arg02, arg01
09fd4     16 29 02 F6 | 	mov	local02, local04
09fd8     0A 2B 02 F6 | 	mov	local03, arg02
09fdc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09fdc     17 2A 0E F2 | 	cmp	local03, #23 wz
09fe0     47 00 00 FF 
09fe4     7C E4 85 F1 | 	sub	objptr, ##36476
09fe8     22 FA 05 56 |  if_ne	mov	result1, #34
09fec     58 02 90 5D |  if_ne	jmp	#LR__0875
09ff0     13 2F 02 F6 | 	mov	local05, local01
09ff4                 | ' varnum=t1.result.uresult
09ff4                 | ' if lparts(ct).part$<>"to" then return 33
09ff4     37 00 00 FF 
09ff8     44 E4 05 F1 | 	add	objptr, ##28228
09ffc     F2 26 02 FB | 	rdlong	local01, objptr
0a000     03 26 66 F0 | 	shl	local01, #3
0a004     02 00 00 FF 
0a008     38 E4 85 F1 | 	sub	objptr, ##1080
0a00c     F2 26 02 F1 | 	add	local01, objptr
0a010     13 13 02 FB | 	rdlong	arg01, local01
0a014     9F 01 00 FF 
0a018     1C 15 06 F6 | 	mov	arg02, ##@LR__5665
0a01c     35 00 00 FF 
0a020     0C E4 85 F1 | 	sub	objptr, ##27148
0a024     14 9D B1 FD | 	call	#__system___string_cmp
0a028     00 FA 0D F2 | 	cmp	result1, #0 wz
0a02c     21 FA 05 56 |  if_ne	mov	result1, #33
0a030     14 02 90 5D |  if_ne	jmp	#LR__0875
0a034     37 00 00 FF 
0a038     44 E4 05 F1 | 	add	objptr, ##28228
0a03c     F2 2C 02 FB | 	rdlong	local04, objptr
0a040     01 2C 06 F1 | 	add	local04, #1
0a044     F2 2C 62 FC | 	wrlong	local04, objptr
0a048     37 00 00 FF 
0a04c     44 E4 85 F1 | 	sub	objptr, ##28228
0a050     A8 11 B0 FD | 	call	#_expr
0a054                 | ' ct+=1
0a054                 | ' expr()  										' there is "to" value pushed on the stack
0a054                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0a054     37 00 00 FF 
0a058     44 E4 05 F1 | 	add	objptr, ##28228
0a05c     F2 2C 02 FB | 	rdlong	local04, objptr
0a060     03 2C 66 F0 | 	shl	local04, #3
0a064     02 00 00 FF 
0a068     38 E4 85 F1 | 	sub	objptr, ##1080
0a06c     F2 2C 02 F1 | 	add	local04, objptr
0a070     16 13 02 FB | 	rdlong	arg01, local04
0a074     9F 01 00 FF 
0a078     1F 15 06 F6 | 	mov	arg02, ##@LR__5666
0a07c     35 00 00 FF 
0a080     0C E4 85 F1 | 	sub	objptr, ##27148
0a084     B4 9C B1 FD | 	call	#__system___string_cmp
0a088     00 FA 0D F2 | 	cmp	result1, #0 wz
0a08c     3C 00 90 AD |  if_e	jmp	#LR__0872
0a090     37 00 00 FF 
0a094     44 E4 05 F1 | 	add	objptr, ##28228
0a098     F2 2C 02 FB | 	rdlong	local04, objptr
0a09c     03 2C 66 F0 | 	shl	local04, #3
0a0a0     02 00 00 FF 
0a0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0a8     F2 2C 02 F1 | 	add	local04, objptr
0a0ac     16 13 02 FB | 	rdlong	arg01, local04
0a0b0     9F 01 00 FF 
0a0b4     24 15 06 F6 | 	mov	arg02, ##@LR__5667
0a0b8     35 00 00 FF 
0a0bc     0C E4 85 F1 | 	sub	objptr, ##27148
0a0c0     78 9C B1 FD | 	call	#__system___string_cmp
0a0c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0c8     24 00 90 5D |  if_ne	jmp	#LR__0873
0a0cc                 | LR__0872
0a0cc     37 00 00 FF 
0a0d0     44 E4 05 F1 | 	add	objptr, ##28228
0a0d4     F2 26 02 FB | 	rdlong	local01, objptr
0a0d8     01 26 06 F1 | 	add	local01, #1
0a0dc     F2 26 62 FC | 	wrlong	local01, objptr
0a0e0     37 00 00 FF 
0a0e4     44 E4 85 F1 | 	sub	objptr, ##28228
0a0e8     10 11 B0 FD | 	call	#_expr
0a0ec     78 00 90 FD | 	jmp	#LR__0874
0a0f0                 | LR__0873
0a0f0     4A 00 00 FF 
0a0f4     7C E4 05 F1 | 	add	objptr, ##38012
0a0f8     F2 26 02 FB | 	rdlong	local01, objptr
0a0fc     13 2D 02 F6 | 	mov	local04, local01
0a100     01 2C 66 F0 | 	shl	local04, #1
0a104     13 2D 02 F1 | 	add	local04, local01
0a108     02 2C 66 F0 | 	shl	local04, #2
0a10c     03 00 00 FF 
0a110     00 E4 85 F1 | 	sub	objptr, ##1536
0a114     F2 2C 02 F1 | 	add	local04, objptr
0a118     08 2C 06 F1 | 	add	local04, #8
0a11c     16 39 68 FC | 	wrlong	#28, local04
0a120     03 00 00 FF 
0a124     00 E4 05 F1 | 	add	objptr, ##1536
0a128     F2 26 02 FB | 	rdlong	local01, objptr
0a12c     13 2D 02 F6 | 	mov	local04, local01
0a130     01 2C 66 F0 | 	shl	local04, #1
0a134     13 2D 02 F1 | 	add	local04, local01
0a138     02 2C 66 F0 | 	shl	local04, #2
0a13c     03 00 00 FF 
0a140     00 E4 85 F1 | 	sub	objptr, ##1536
0a144     F2 2C 02 F1 | 	add	local04, objptr
0a148     16 03 68 FC | 	wrlong	#1, local04
0a14c     03 00 00 FF 
0a150     00 E4 05 F1 | 	add	objptr, ##1536
0a154     F2 26 02 FB | 	rdlong	local01, objptr
0a158     01 26 06 F1 | 	add	local01, #1
0a15c     F2 26 62 FC | 	wrlong	local01, objptr
0a160     4A 00 00 FF 
0a164     7C E4 85 F1 | 	sub	objptr, ##38012
0a168                 | LR__0874
0a168     4A 00 00 FF 
0a16c     7C E4 05 F1 | 	add	objptr, ##38012
0a170     F2 26 02 FB | 	rdlong	local01, objptr
0a174     13 2D 02 F6 | 	mov	local04, local01
0a178     01 2C 66 F0 | 	shl	local04, #1
0a17c     13 2D 02 F1 | 	add	local04, local01
0a180     02 2C 66 F0 | 	shl	local04, #2
0a184     03 00 00 FF 
0a188     00 E4 85 F1 | 	sub	objptr, ##1536
0a18c     F2 2C 02 F1 | 	add	local04, objptr
0a190     08 2C 06 F1 | 	add	local04, #8
0a194     16 39 68 FC | 	wrlong	#28, local04
0a198     03 00 00 FF 
0a19c     00 E4 05 F1 | 	add	objptr, ##1536
0a1a0     F2 26 02 FB | 	rdlong	local01, objptr
0a1a4     13 2D 02 F6 | 	mov	local04, local01
0a1a8     01 2C 66 F0 | 	shl	local04, #1
0a1ac     13 2D 02 F1 | 	add	local04, local01
0a1b0     02 2C 66 F0 | 	shl	local04, #2
0a1b4     03 00 00 FF 
0a1b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a1bc     F2 2C 02 F1 | 	add	local04, objptr
0a1c0     16 2F 62 FC | 	wrlong	local05, local04
0a1c4     03 00 00 FF 
0a1c8     00 E4 05 F1 | 	add	objptr, ##1536
0a1cc     F2 2E 02 FB | 	rdlong	local05, objptr
0a1d0     01 2E 06 F1 | 	add	local05, #1
0a1d4     F2 2E 62 FC | 	wrlong	local05, objptr
0a1d8     17 27 02 F6 | 	mov	local01, local05
0a1dc     01 26 66 F0 | 	shl	local01, #1
0a1e0     17 27 02 F1 | 	add	local01, local05
0a1e4     02 26 66 F0 | 	shl	local01, #2
0a1e8     03 00 00 FF 
0a1ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a1f0     F2 26 02 F1 | 	add	local01, objptr
0a1f4     08 26 06 F1 | 	add	local01, #8
0a1f8     13 95 68 FC | 	wrlong	#74, local01
0a1fc     03 00 00 FF 
0a200     00 E4 05 F1 | 	add	objptr, ##1536
0a204     F2 2E 02 FB | 	rdlong	local05, objptr
0a208     17 27 02 F6 | 	mov	local01, local05
0a20c     01 26 66 F0 | 	shl	local01, #1
0a210     17 27 02 F1 | 	add	local01, local05
0a214     02 26 66 F0 | 	shl	local01, #2
0a218     03 00 00 FF 
0a21c     00 E4 85 F1 | 	sub	objptr, ##1536
0a220     F2 26 02 F1 | 	add	local01, objptr
0a224     13 01 68 FC | 	wrlong	#0, local01
0a228     03 00 00 FF 
0a22c     00 E4 05 F1 | 	add	objptr, ##1536
0a230     F2 2E 02 FB | 	rdlong	local05, objptr
0a234     01 2E 06 F1 | 	add	local05, #1
0a238     F2 2E 62 FC | 	wrlong	local05, objptr
0a23c     4A 00 00 FF 
0a240     7C E4 85 F1 | 	sub	objptr, ##38012
0a244                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a244                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a244                 | ' return 0
0a244     00 FA 05 F6 | 	mov	result1, #0
0a248                 | LR__0875
0a248     A7 F0 03 F6 | 	mov	ptra, fp
0a24c     B2 00 A0 FD | 	call	#popregs_
0a250                 | _compile_for_ret
0a250     2D 00 64 FD | 	ret
0a254                 | 
0a254                 | ' 
0a254                 | ' '----- compile 'next' command. 
0a254                 | ' 
0a254                 | ' function compile_next() as ulong
0a254                 | _compile_next
0a254     04 4A 05 F6 | 	mov	COUNT_, #4
0a258     A8 00 A0 FD | 	call	#pushregs_
0a25c     37 00 00 FF 
0a260     44 E4 05 F1 | 	add	objptr, ##28228
0a264     F2 14 02 FB | 	rdlong	arg02, objptr
0a268     03 14 66 F0 | 	shl	arg02, #3
0a26c     02 00 00 FF 
0a270     38 E4 85 F1 | 	sub	objptr, ##1080
0a274     F2 14 02 F1 | 	add	arg02, objptr
0a278     0A 27 02 FB | 	rdlong	local01, arg02
0a27c                 | ' 
0a27c                 | ' varname$=lparts(ct).part$ 
0a27c                 | ' if varnum=0 then return 35
0a27c     04 E4 85 F1 | 	sub	objptr, #4
0a280     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a284     35 00 00 FF 
0a288     08 E4 85 F1 | 	sub	objptr, ##27144
0a28c     23 FA 05 A6 |  if_e	mov	result1, #35
0a290     4C 01 90 AD |  if_e	jmp	#LR__0882
0a294     01 28 66 F6 | 	neg	local02, #1
0a298                 | ' j=-1
0a298                 | ' for i=0 to varnum-1
0a298     00 2A 06 F6 | 	mov	local03, #0
0a29c     35 00 00 FF 
0a2a0     08 E4 05 F1 | 	add	objptr, ##27144
0a2a4     F2 2C 02 FB | 	rdlong	local04, objptr
0a2a8     35 00 00 FF 
0a2ac     08 E4 85 F1 | 	sub	objptr, ##27144
0a2b0                 | LR__0880
0a2b0     16 2B 12 F2 | 	cmp	local03, local04 wc
0a2b4     38 00 90 3D |  if_ae	jmp	#LR__0881
0a2b8                 | '   if variables(i).name=varname$ then j=i : exit
0a2b8     15 15 02 F6 | 	mov	arg02, local03
0a2bc     04 14 66 F0 | 	shl	arg02, #4
0a2c0     14 00 00 FF 
0a2c4     F8 E5 05 F1 | 	add	objptr, ##10744
0a2c8     F2 14 02 F1 | 	add	arg02, objptr
0a2cc     0A 13 02 FB | 	rdlong	arg01, arg02
0a2d0     13 15 02 F6 | 	mov	arg02, local01
0a2d4     14 00 00 FF 
0a2d8     F8 E5 85 F1 | 	sub	objptr, ##10744
0a2dc     5C 9A B1 FD | 	call	#__system___string_cmp
0a2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2e4     15 29 02 A6 |  if_e	mov	local02, local03
0a2e8     01 2A 06 51 |  if_ne	add	local03, #1
0a2ec     C0 FF 9F 5D |  if_ne	jmp	#LR__0880
0a2f0                 | LR__0881
0a2f0                 | ' if j=-1 then return 35
0a2f0     FF FF 7F FF 
0a2f4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a2f8     23 FA 05 A6 |  if_e	mov	result1, #35
0a2fc     E0 00 90 AD |  if_e	jmp	#LR__0882
0a300     4A 00 00 FF 
0a304     7C E4 05 F1 | 	add	objptr, ##38012
0a308     F2 2C 02 FB | 	rdlong	local04, objptr
0a30c     16 2B 02 F6 | 	mov	local03, local04
0a310     01 2A 66 F0 | 	shl	local03, #1
0a314     16 2B 02 F1 | 	add	local03, local04
0a318     02 2A 66 F0 | 	shl	local03, #2
0a31c     03 00 00 FF 
0a320     00 E4 85 F1 | 	sub	objptr, ##1536
0a324     F2 2A 02 F1 | 	add	local03, objptr
0a328     08 2A 06 F1 | 	add	local03, #8
0a32c     15 39 68 FC | 	wrlong	#28, local03
0a330     03 00 00 FF 
0a334     00 E4 05 F1 | 	add	objptr, ##1536
0a338     F2 2C 02 FB | 	rdlong	local04, objptr
0a33c     16 2B 02 F6 | 	mov	local03, local04
0a340     01 2A 66 F0 | 	shl	local03, #1
0a344     16 2B 02 F1 | 	add	local03, local04
0a348     02 2A 66 F0 | 	shl	local03, #2
0a34c     03 00 00 FF 
0a350     00 E4 85 F1 | 	sub	objptr, ##1536
0a354     F2 2A 02 F1 | 	add	local03, objptr
0a358     15 29 62 FC | 	wrlong	local02, local03
0a35c     03 00 00 FF 
0a360     00 E4 05 F1 | 	add	objptr, ##1536
0a364     F2 2C 02 FB | 	rdlong	local04, objptr
0a368     01 2C 06 F1 | 	add	local04, #1
0a36c     F2 2C 62 FC | 	wrlong	local04, objptr
0a370     16 2B 02 F6 | 	mov	local03, local04
0a374     01 2A 66 F0 | 	shl	local03, #1
0a378     16 2B 02 F1 | 	add	local03, local04
0a37c     02 2A 66 F0 | 	shl	local03, #2
0a380     03 00 00 FF 
0a384     00 E4 85 F1 | 	sub	objptr, ##1536
0a388     F2 2A 02 F1 | 	add	local03, objptr
0a38c     08 2A 06 F1 | 	add	local03, #8
0a390     15 97 68 FC | 	wrlong	#75, local03
0a394     03 00 00 FF 
0a398     00 E4 05 F1 | 	add	objptr, ##1536
0a39c     F2 2C 02 FB | 	rdlong	local04, objptr
0a3a0     16 2B 02 F6 | 	mov	local03, local04
0a3a4     01 2A 66 F0 | 	shl	local03, #1
0a3a8     16 2B 02 F1 | 	add	local03, local04
0a3ac     02 2A 66 F0 | 	shl	local03, #2
0a3b0     03 00 00 FF 
0a3b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a3b8     F2 2A 02 F1 | 	add	local03, objptr
0a3bc     15 01 68 FC | 	wrlong	#0, local03
0a3c0     03 00 00 FF 
0a3c4     00 E4 05 F1 | 	add	objptr, ##1536
0a3c8     F2 2C 02 FB | 	rdlong	local04, objptr
0a3cc     01 2C 06 F1 | 	add	local04, #1
0a3d0     F2 2C 62 FC | 	wrlong	local04, objptr
0a3d4     4A 00 00 FF 
0a3d8     7C E4 85 F1 | 	sub	objptr, ##38012
0a3dc                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a3dc                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a3dc                 | ' return 0
0a3dc     00 FA 05 F6 | 	mov	result1, #0
0a3e0                 | LR__0882
0a3e0     A7 F0 03 F6 | 	mov	ptra, fp
0a3e4     B2 00 A0 FD | 	call	#popregs_
0a3e8                 | _compile_next_ret
0a3e8     2D 00 64 FD | 	ret
0a3ec                 | 
0a3ec                 | ' 
0a3ec                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a3ec                 | ' 
0a3ec                 | ' function compile_gosub() as ulong
0a3ec                 | _compile_gosub
0a3ec     02 4A 05 F6 | 	mov	COUNT_, #2
0a3f0     A8 00 A0 FD | 	call	#pushregs_
0a3f4     4A 00 00 FF 
0a3f8     7C E4 05 F1 | 	add	objptr, ##38012
0a3fc     F2 26 02 FB | 	rdlong	local01, objptr
0a400     13 29 02 F6 | 	mov	local02, local01
0a404     01 28 66 F0 | 	shl	local02, #1
0a408     13 29 02 F1 | 	add	local02, local01
0a40c     02 28 66 F0 | 	shl	local02, #2
0a410     03 00 00 FF 
0a414     00 E4 85 F1 | 	sub	objptr, ##1536
0a418     F2 28 02 F1 | 	add	local02, objptr
0a41c     08 28 06 F1 | 	add	local02, #8
0a420     14 53 69 FC | 	wrlong	#169, local02
0a424     03 00 00 FF 
0a428     00 E4 05 F1 | 	add	objptr, ##1536
0a42c     F2 28 02 FB | 	rdlong	local02, objptr
0a430     01 28 06 F1 | 	add	local02, #1
0a434     F2 28 62 FC | 	wrlong	local02, objptr
0a438     4A 00 00 FF 
0a43c     7C E4 85 F1 | 	sub	objptr, ##38012
0a440     0C 00 B0 FD | 	call	#_compile_goto
0a444                 | ' compiledline(lineptr).result_type=token_gosub
0a444                 | ' lineptr+=1
0a444                 | ' err=compile_goto()
0a444                 | ' return err
0a444     A7 F0 03 F6 | 	mov	ptra, fp
0a448     B2 00 A0 FD | 	call	#popregs_
0a44c                 | _compile_gosub_ret
0a44c     2D 00 64 FD | 	ret
0a450                 | 
0a450                 | ' 
0a450                 | ' '----- compile 'goto' 
0a450                 | ' 
0a450                 | ' function compile_goto() as ulong
0a450                 | _compile_goto
0a450     03 4A 05 F6 | 	mov	COUNT_, #3
0a454     A8 00 A0 FD | 	call	#pushregs_
0a458     34 F0 07 F1 | 	add	ptra, #52
0a45c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a45c     37 00 00 FF 
0a460     44 E4 05 F1 | 	add	objptr, ##28228
0a464     F2 16 02 FB | 	rdlong	arg03, objptr
0a468     03 16 66 F0 | 	shl	arg03, #3
0a46c     02 00 00 FF 
0a470     38 E4 85 F1 | 	sub	objptr, ##1080
0a474     F2 16 02 F1 | 	add	arg03, objptr
0a478     04 16 06 F1 | 	add	arg03, #4
0a47c     0B 17 02 FB | 	rdlong	arg03, arg03
0a480     01 00 00 FF 
0a484     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a488     35 00 00 FF 
0a48c     0C E4 85 F1 | 	sub	objptr, ##27148
0a490     CC 02 90 5D |  if_ne	jmp	#LR__0895
0a494     37 00 00 FF 
0a498     44 E4 05 F1 | 	add	objptr, ##28228
0a49c     F2 16 02 FB | 	rdlong	arg03, objptr
0a4a0     01 16 06 F1 | 	add	arg03, #1
0a4a4     03 16 66 F0 | 	shl	arg03, #3
0a4a8     02 00 00 FF 
0a4ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a4b0     F2 16 02 F1 | 	add	arg03, objptr
0a4b4     04 16 06 F1 | 	add	arg03, #4
0a4b8     0B 17 02 FB | 	rdlong	arg03, arg03
0a4bc     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a4c0     35 00 00 FF 
0a4c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4c8     94 02 90 5D |  if_ne	jmp	#LR__0895
0a4cc     37 00 00 FF 
0a4d0     44 E4 05 F1 | 	add	objptr, ##28228
0a4d4     F2 16 02 FB | 	rdlong	arg03, objptr
0a4d8     03 16 66 F0 | 	shl	arg03, #3
0a4dc     02 00 00 FF 
0a4e0     38 E4 85 F1 | 	sub	objptr, ##1080
0a4e4     F2 16 02 F1 | 	add	arg03, objptr
0a4e8     0B 13 02 FB | 	rdlong	arg01, arg03
0a4ec     00 14 06 F6 | 	mov	arg02, #0
0a4f0     35 00 00 FF 
0a4f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4f8     08 CD B1 FD | 	call	#__system____builtin_atoi
0a4fc     04 4E 05 F1 | 	add	fp, #4
0a500     A7 FA 61 FC | 	wrlong	result1, fp
0a504     4A 00 00 FF 
0a508     7C E4 05 F1 | 	add	objptr, ##38012
0a50c     F2 26 02 FB | 	rdlong	local01, objptr
0a510     13 29 02 F6 | 	mov	local02, local01
0a514     01 28 66 F0 | 	shl	local02, #1
0a518     13 29 02 F1 | 	add	local02, local01
0a51c     02 28 66 F0 | 	shl	local02, #2
0a520     03 00 00 FF 
0a524     00 E4 85 F1 | 	sub	objptr, ##1536
0a528     F2 28 02 F1 | 	add	local02, objptr
0a52c     08 28 06 F1 | 	add	local02, #8
0a530     14 9D 68 FC | 	wrlong	#78, local02
0a534     03 00 00 FF 
0a538     0C E4 05 F1 | 	add	objptr, ##1548
0a53c     F2 2A 02 FB | 	rdlong	local03, objptr
0a540     4A 00 00 FF 
0a544     88 E4 85 F1 | 	sub	objptr, ##38024
0a548     04 4E 05 F1 | 	add	fp, #4
0a54c     A7 2A 62 FC | 	wrlong	local03, fp
0a550     08 4E 85 F1 | 	sub	fp, #8
0a554                 | '   gotoline=val%(lparts(ct).part$) 
0a554                 | '   compiledline(lineptr).result_type=token_fast_goto
0a554                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a554                 | '   do
0a554                 | LR__0890
0a554     10 4E 05 F1 | 	add	fp, #16
0a558     A7 12 02 F6 | 	mov	arg01, fp
0a55c     08 4E 85 F1 | 	sub	fp, #8
0a560     A7 14 02 FB | 	rdlong	arg02, fp
0a564     08 4E 85 F1 | 	sub	fp, #8
0a568     18 16 06 F6 | 	mov	arg03, #24
0a56c     0B 00 00 FF 
0a570     CC E4 05 F1 | 	add	objptr, ##5836
0a574     5C 8B B1 FD | 	call	#_psram_spin2_read1
0a578     0B 00 00 FF 
0a57c     CC E4 85 F1 | 	sub	objptr, ##5836
0a580                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a580                 | '     if gotoheader(0)<>$FFFFFFFF then
0a580     10 4E 05 F1 | 	add	fp, #16
0a584     A7 2A 02 FB | 	rdlong	local03, fp
0a588     10 4E 85 F1 | 	sub	fp, #16
0a58c     FF FF 7F FF 
0a590     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a594     24 00 90 AD |  if_e	jmp	#LR__0891
0a598     08 4E 05 F1 | 	add	fp, #8
0a59c     A7 2A 02 FB | 	rdlong	local03, fp
0a5a0     04 4E 05 F1 | 	add	fp, #4
0a5a4     A7 2A 62 FC | 	wrlong	local03, fp
0a5a8     18 4E 05 F1 | 	add	fp, #24
0a5ac     A7 2A 02 FB | 	rdlong	local03, fp
0a5b0     1C 4E 85 F1 | 	sub	fp, #28
0a5b4     A7 2A 62 FC | 	wrlong	local03, fp
0a5b8     08 4E 85 F1 | 	sub	fp, #8
0a5bc                 | LR__0891
0a5bc     24 4E 05 F1 | 	add	fp, #36
0a5c0     A7 2A 02 FB | 	rdlong	local03, fp
0a5c4     24 4E 85 F1 | 	sub	fp, #36
0a5c8     FF FF 3F FF 
0a5cc     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a5d0     10 4E 05 51 |  if_ne	add	fp, #16
0a5d4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a5d8     10 4E 85 51 |  if_ne	sub	fp, #16
0a5dc     FF FF 7F 5F 
0a5e0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a5e4     1C 00 90 AD |  if_e	jmp	#LR__0892
0a5e8     10 4E 05 F1 | 	add	fp, #16
0a5ec     A7 2A 02 FB | 	rdlong	local03, fp
0a5f0     0C 4E 85 F1 | 	sub	fp, #12
0a5f4     A7 28 02 FB | 	rdlong	local02, fp
0a5f8     04 4E 85 F1 | 	sub	fp, #4
0a5fc     14 2B 0A F2 | 	cmp	local03, local02 wz
0a600     50 FF 9F 5D |  if_ne	jmp	#LR__0890
0a604                 | LR__0892
0a604                 | '   if gotoheader(0)=gotoline then
0a604     10 4E 05 F1 | 	add	fp, #16
0a608     A7 2A 02 FB | 	rdlong	local03, fp
0a60c     0C 4E 85 F1 | 	sub	fp, #12
0a610     A7 26 02 FB | 	rdlong	local01, fp
0a614     04 4E 85 F1 | 	sub	fp, #4
0a618     13 2B 0A F2 | 	cmp	local03, local01 wz
0a61c     7C 00 90 5D |  if_ne	jmp	#LR__0893
0a620     4A 00 00 FF 
0a624     7C E4 05 F1 | 	add	objptr, ##38012
0a628     F2 26 02 FB | 	rdlong	local01, objptr
0a62c     13 29 02 F6 | 	mov	local02, local01
0a630     01 28 66 F0 | 	shl	local02, #1
0a634     13 29 02 F1 | 	add	local02, local01
0a638     02 28 66 F0 | 	shl	local02, #2
0a63c     03 00 00 FF 
0a640     00 E4 85 F1 | 	sub	objptr, ##1536
0a644     F2 28 02 F1 | 	add	local02, objptr
0a648     0C 4E 05 F1 | 	add	fp, #12
0a64c     A7 2A 02 FB | 	rdlong	local03, fp
0a650     14 2B 62 FC | 	wrlong	local03, local02
0a654     03 00 00 FF 
0a658     00 E4 05 F1 | 	add	objptr, ##1536
0a65c     F2 26 02 FB | 	rdlong	local01, objptr
0a660     13 29 02 F6 | 	mov	local02, local01
0a664     01 28 66 F0 | 	shl	local02, #1
0a668     13 29 02 F1 | 	add	local02, local01
0a66c     02 28 66 F0 | 	shl	local02, #2
0a670     03 00 00 FF 
0a674     00 E4 85 F1 | 	sub	objptr, ##1536
0a678     F2 28 02 F1 | 	add	local02, objptr
0a67c     08 4E 85 F1 | 	sub	fp, #8
0a680     A7 2A 02 FB | 	rdlong	local03, fp
0a684     04 4E 85 F1 | 	sub	fp, #4
0a688     04 28 06 F1 | 	add	local02, #4
0a68c     14 2B 62 FC | 	wrlong	local03, local02
0a690     47 00 00 FF 
0a694     7C E4 85 F1 | 	sub	objptr, ##36476
0a698     A4 00 90 FD | 	jmp	#LR__0894
0a69c                 | LR__0893
0a69c     4A 00 00 FF 
0a6a0     7C E4 05 F1 | 	add	objptr, ##38012
0a6a4     F2 26 02 FB | 	rdlong	local01, objptr
0a6a8     13 29 02 F6 | 	mov	local02, local01
0a6ac     01 28 66 F0 | 	shl	local02, #1
0a6b0     13 29 02 F1 | 	add	local02, local01
0a6b4     02 28 66 F0 | 	shl	local02, #2
0a6b8     03 00 00 FF 
0a6bc     00 E4 85 F1 | 	sub	objptr, ##1536
0a6c0     F2 28 02 F1 | 	add	local02, objptr
0a6c4     00 00 C0 FF 
0a6c8     14 01 68 FC | 	wrlong	##-2147483648, local02
0a6cc     03 00 00 FF 
0a6d0     00 E4 05 F1 | 	add	objptr, ##1536
0a6d4     F2 26 02 FB | 	rdlong	local01, objptr
0a6d8     13 29 02 F6 | 	mov	local02, local01
0a6dc     01 28 66 F0 | 	shl	local02, #1
0a6e0     13 29 02 F1 | 	add	local02, local01
0a6e4     02 28 66 F0 | 	shl	local02, #2
0a6e8     03 00 00 FF 
0a6ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f0     F2 28 02 F1 | 	add	local02, objptr
0a6f4     04 4E 05 F1 | 	add	fp, #4
0a6f8     A7 2A 02 FB | 	rdlong	local03, fp
0a6fc     04 4E 85 F1 | 	sub	fp, #4
0a700     04 28 06 F1 | 	add	local02, #4
0a704     14 2B 62 FC | 	wrlong	local03, local02
0a708     03 00 00 FF 
0a70c     00 E4 05 F1 | 	add	objptr, ##1536
0a710     F2 26 02 FB | 	rdlong	local01, objptr
0a714     13 29 02 F6 | 	mov	local02, local01
0a718     01 28 66 F0 | 	shl	local02, #1
0a71c     13 29 02 F1 | 	add	local02, local01
0a720     02 28 66 F0 | 	shl	local02, #2
0a724     03 00 00 FF 
0a728     00 E4 85 F1 | 	sub	objptr, ##1536
0a72c     F2 28 02 F1 | 	add	local02, objptr
0a730     08 28 06 F1 | 	add	local02, #8
0a734     14 A7 68 FC | 	wrlong	#83, local02
0a738     47 00 00 FF 
0a73c     7C E4 85 F1 | 	sub	objptr, ##36476
0a740                 | LR__0894
0a740     4A 00 00 FF 
0a744     7C E4 05 F1 | 	add	objptr, ##38012
0a748     F2 2A 02 FB | 	rdlong	local03, objptr
0a74c     01 2A 06 F1 | 	add	local03, #1
0a750     F2 2A 62 FC | 	wrlong	local03, objptr
0a754     4A 00 00 FF 
0a758     7C E4 85 F1 | 	sub	objptr, ##38012
0a75c     D0 00 90 FD | 	jmp	#LR__0896
0a760                 | LR__0895
0a760     98 0A B0 FD | 	call	#_expr
0a764     30 4E 05 F1 | 	add	fp, #48
0a768     A7 9E 68 FC | 	wrlong	#79, fp
0a76c     08 4E 85 F1 | 	sub	fp, #8
0a770     A7 00 68 FC | 	wrlong	#0, fp
0a774     04 4E 05 F1 | 	add	fp, #4
0a778     A7 2A 02 FB | 	rdlong	local03, fp
0a77c     04 4E 05 F1 | 	add	fp, #4
0a780     A7 26 02 FB | 	rdlong	local01, fp
0a784     30 4E 85 F1 | 	sub	fp, #48
0a788     4A 00 00 FF 
0a78c     7C E4 05 F1 | 	add	objptr, ##38012
0a790     F2 28 02 FB | 	rdlong	local02, objptr
0a794     14 17 02 F6 | 	mov	arg03, local02
0a798     01 16 66 F0 | 	shl	arg03, #1
0a79c     14 17 02 F1 | 	add	arg03, local02
0a7a0     02 16 66 F0 | 	shl	arg03, #2
0a7a4     03 00 00 FF 
0a7a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7ac     F2 16 02 F1 | 	add	arg03, objptr
0a7b0     0B 01 68 FC | 	wrlong	#0, arg03
0a7b4     03 00 00 FF 
0a7b8     00 E4 05 F1 | 	add	objptr, ##1536
0a7bc     F2 28 02 FB | 	rdlong	local02, objptr
0a7c0     14 17 02 F6 | 	mov	arg03, local02
0a7c4     01 16 66 F0 | 	shl	arg03, #1
0a7c8     14 17 02 F1 | 	add	arg03, local02
0a7cc     02 16 66 F0 | 	shl	arg03, #2
0a7d0     03 00 00 FF 
0a7d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7d8     F2 16 02 F1 | 	add	arg03, objptr
0a7dc     04 16 06 F1 | 	add	arg03, #4
0a7e0     0B 2B 62 FC | 	wrlong	local03, arg03
0a7e4     03 00 00 FF 
0a7e8     00 E4 05 F1 | 	add	objptr, ##1536
0a7ec     F2 2A 02 FB | 	rdlong	local03, objptr
0a7f0     15 29 02 F6 | 	mov	local02, local03
0a7f4     01 28 66 F0 | 	shl	local02, #1
0a7f8     15 29 02 F1 | 	add	local02, local03
0a7fc     02 28 66 F0 | 	shl	local02, #2
0a800     03 00 00 FF 
0a804     00 E4 85 F1 | 	sub	objptr, ##1536
0a808     F2 28 02 F1 | 	add	local02, objptr
0a80c     08 28 06 F1 | 	add	local02, #8
0a810     14 27 62 FC | 	wrlong	local01, local02
0a814     03 00 00 FF 
0a818     00 E4 05 F1 | 	add	objptr, ##1536
0a81c     F2 2A 02 FB | 	rdlong	local03, objptr
0a820     01 2A 06 F1 | 	add	local03, #1
0a824     F2 2A 62 FC | 	wrlong	local03, objptr
0a828     4A 00 00 FF 
0a82c     7C E4 85 F1 | 	sub	objptr, ##38012
0a830                 | LR__0896
0a830                 | ' return 0
0a830     00 FA 05 F6 | 	mov	result1, #0
0a834     A7 F0 03 F6 | 	mov	ptra, fp
0a838     B2 00 A0 FD | 	call	#popregs_
0a83c                 | _compile_goto_ret
0a83c     2D 00 64 FD | 	ret
0a840                 | 
0a840                 | ' 
0a840                 | ' '----- compile 'on' (on..goto, on..gosub) 
0a840                 | ' 
0a840                 | ' function compile_on() as ulong
0a840                 | _compile_on
0a840     04 4A 05 F6 | 	mov	COUNT_, #4
0a844     A8 00 A0 FD | 	call	#pushregs_
0a848     B0 09 B0 FD | 	call	#_expr
0a84c     00 26 06 F6 | 	mov	local01, #0
0a850     4A 00 00 FF 
0a854     7C E4 05 F1 | 	add	objptr, ##38012
0a858     F2 14 02 FB | 	rdlong	arg02, objptr
0a85c     0A 13 02 F6 | 	mov	arg01, arg02
0a860     01 12 66 F0 | 	shl	arg01, #1
0a864     0A 13 02 F1 | 	add	arg01, arg02
0a868     02 12 66 F0 | 	shl	arg01, #2
0a86c     03 00 00 FF 
0a870     00 E4 85 F1 | 	sub	objptr, ##1536
0a874     F2 12 02 F1 | 	add	arg01, objptr
0a878     08 12 06 F1 | 	add	arg01, #8
0a87c     09 83 69 FC | 	wrlong	#193, arg01
0a880     03 00 00 FF 
0a884     00 E4 05 F1 | 	add	objptr, ##1536
0a888     F2 14 02 FB | 	rdlong	arg02, objptr
0a88c     0A 29 02 F6 | 	mov	local02, arg02
0a890     01 14 06 F1 | 	add	arg02, #1
0a894     F2 14 62 FC | 	wrlong	arg02, objptr
0a898                 | ' expr()
0a898                 | ' 'print lparts(ct).part$ 'ok
0a898                 | ' numpar=0
0a898                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0a898                 | ' if lparts(ct).part$="goto" then
0a898     13 00 00 FF 
0a89c     38 E4 85 F1 | 	sub	objptr, ##9784
0a8a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a8a4     03 14 66 F0 | 	shl	arg02, #3
0a8a8     02 00 00 FF 
0a8ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a8b0     F2 14 02 F1 | 	add	arg02, objptr
0a8b4     0A 13 02 FB | 	rdlong	arg01, arg02
0a8b8     9F 01 00 FF 
0a8bc     27 15 06 F6 | 	mov	arg02, ##@LR__5668
0a8c0     35 00 00 FF 
0a8c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a8c8     70 94 B1 FD | 	call	#__system___string_cmp
0a8cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8d0     14 02 90 5D |  if_ne	jmp	#LR__0905
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 2A 02 FB | 	rdlong	local03, objptr
0a8e0     37 00 00 FF 
0a8e4     44 E4 85 F1 | 	sub	objptr, ##28228
0a8e8     01 2A 06 F1 | 	add	local03, #1
0a8ec                 | '   i=ct+1
0a8ec                 | '   do
0a8ec                 | LR__0900
0a8ec                 | '     if lparts(i).token=token_decimal then
0a8ec     15 FB 01 F6 | 	mov	result1, local03
0a8f0     03 FA 65 F0 | 	shl	result1, #3
0a8f4     35 00 00 FF 
0a8f8     0C E4 05 F1 | 	add	objptr, ##27148
0a8fc     F2 FA 01 F1 | 	add	result1, objptr
0a900     04 FA 05 F1 | 	add	result1, #4
0a904     FD FA 01 FB | 	rdlong	result1, result1
0a908     01 00 00 FF 
0a90c     00 FA 0D F2 | 	cmp	result1, ##512 wz
0a910     35 00 00 FF 
0a914     0C E4 85 F1 | 	sub	objptr, ##27148
0a918     DC 00 90 5D |  if_ne	jmp	#LR__0901
0a91c     4A 00 00 FF 
0a920     7C E4 05 F1 | 	add	objptr, ##38012
0a924     F2 FA 01 FB | 	rdlong	result1, objptr
0a928     FD 14 02 F6 | 	mov	arg02, result1
0a92c     01 14 66 F0 | 	shl	arg02, #1
0a930     FD 14 02 F1 | 	add	arg02, result1
0a934     02 14 66 F0 | 	shl	arg02, #2
0a938     03 00 00 FF 
0a93c     00 E4 85 F1 | 	sub	objptr, ##1536
0a940     F2 14 02 F1 | 	add	arg02, objptr
0a944     00 00 C0 FF 
0a948     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0a94c     03 00 00 FF 
0a950     00 E4 05 F1 | 	add	objptr, ##1536
0a954     F2 14 02 FB | 	rdlong	arg02, objptr
0a958     0A 2D 02 F6 | 	mov	local04, arg02
0a95c     01 2C 66 F0 | 	shl	local04, #1
0a960     0A 2D 02 F1 | 	add	local04, arg02
0a964     02 2C 66 F0 | 	shl	local04, #2
0a968     03 00 00 FF 
0a96c     00 E4 85 F1 | 	sub	objptr, ##1536
0a970     F2 2C 02 F1 | 	add	local04, objptr
0a974     15 15 02 F6 | 	mov	arg02, local03
0a978     03 14 66 F0 | 	shl	arg02, #3
0a97c     12 00 00 FF 
0a980     70 E4 85 F1 | 	sub	objptr, ##9328
0a984     F2 14 02 F1 | 	add	arg02, objptr
0a988     0A 13 02 FB | 	rdlong	arg01, arg02
0a98c     00 14 06 F6 | 	mov	arg02, #0
0a990     35 00 00 FF 
0a994     0C E4 85 F1 | 	sub	objptr, ##27148
0a998     68 C8 B1 FD | 	call	#__system____builtin_atoi
0a99c     04 2C 06 F1 | 	add	local04, #4
0a9a0     16 FB 61 FC | 	wrlong	result1, local04
0a9a4     4A 00 00 FF 
0a9a8     7C E4 05 F1 | 	add	objptr, ##38012
0a9ac     F2 14 02 FB | 	rdlong	arg02, objptr
0a9b0     0A 2D 02 F6 | 	mov	local04, arg02
0a9b4     01 2C 66 F0 | 	shl	local04, #1
0a9b8     0A 2D 02 F1 | 	add	local04, arg02
0a9bc     02 2C 66 F0 | 	shl	local04, #2
0a9c0     03 00 00 FF 
0a9c4     00 E4 85 F1 | 	sub	objptr, ##1536
0a9c8     F2 2C 02 F1 | 	add	local04, objptr
0a9cc     08 2C 06 F1 | 	add	local04, #8
0a9d0     16 A7 68 FC | 	wrlong	#83, local04
0a9d4     03 00 00 FF 
0a9d8     00 E4 05 F1 | 	add	objptr, ##1536
0a9dc     F2 2C 02 FB | 	rdlong	local04, objptr
0a9e0     01 2C 06 F1 | 	add	local04, #1
0a9e4     F2 2C 62 FC | 	wrlong	local04, objptr
0a9e8     4A 00 00 FF 
0a9ec     7C E4 85 F1 | 	sub	objptr, ##38012
0a9f0     01 26 06 F1 | 	add	local01, #1
0a9f4     08 00 90 FD | 	jmp	#LR__0902
0a9f8                 | LR__0901
0a9f8                 | '       return 17
0a9f8     11 FA 05 F6 | 	mov	result1, #17
0a9fc     5C 04 90 FD | 	jmp	#LR__0915
0aa00                 | LR__0902
0aa00     01 2A 06 F1 | 	add	local03, #1
0aa04                 | '     i+=1
0aa04                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0aa04     15 2D 02 F6 | 	mov	local04, local03
0aa08     03 2C 66 F0 | 	shl	local04, #3
0aa0c     35 00 00 FF 
0aa10     0C E4 05 F1 | 	add	objptr, ##27148
0aa14     F2 2C 02 F1 | 	add	local04, objptr
0aa18     04 2C 06 F1 | 	add	local04, #4
0aa1c     16 2D 02 FB | 	rdlong	local04, local04
0aa20     11 2C 0E F2 | 	cmp	local04, #17 wz
0aa24     35 00 00 FF 
0aa28     0C E4 85 F1 | 	sub	objptr, ##27148
0aa2c     30 00 90 AD |  if_e	jmp	#LR__0903
0aa30     15 2D 02 F6 | 	mov	local04, local03
0aa34     03 2C 66 F0 | 	shl	local04, #3
0aa38     35 00 00 FF 
0aa3c     0C E4 05 F1 | 	add	objptr, ##27148
0aa40     F2 2C 02 F1 | 	add	local04, objptr
0aa44     04 2C 06 F1 | 	add	local04, #4
0aa48     16 2D 02 FB | 	rdlong	local04, local04
0aa4c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aa50     35 00 00 FF 
0aa54     0C E4 85 F1 | 	sub	objptr, ##27148
0aa58     15 FA 05 56 |  if_ne	mov	result1, #21
0aa5c     FC 03 90 5D |  if_ne	jmp	#LR__0915
0aa60                 | LR__0903
0aa60                 | '     if lparts(i).token=token_end then exit loop
0aa60     15 2D 02 F6 | 	mov	local04, local03
0aa64     03 2C 66 F0 | 	shl	local04, #3
0aa68     35 00 00 FF 
0aa6c     0C E4 05 F1 | 	add	objptr, ##27148
0aa70     F2 2C 02 F1 | 	add	local04, objptr
0aa74     04 2C 06 F1 | 	add	local04, #4
0aa78     16 2D 02 FB | 	rdlong	local04, local04
0aa7c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aa80     35 00 00 FF 
0aa84     0C E4 85 F1 | 	sub	objptr, ##27148
0aa88     30 00 90 AD |  if_e	jmp	#LR__0904
0aa8c     01 2A 06 F1 | 	add	local03, #1
0aa90     15 2D 02 F6 | 	mov	local04, local03
0aa94     03 2C 66 F0 | 	shl	local04, #3
0aa98     35 00 00 FF 
0aa9c     0C E4 05 F1 | 	add	objptr, ##27148
0aaa0     F2 2C 02 F1 | 	add	local04, objptr
0aaa4     04 2C 06 F1 | 	add	local04, #4
0aaa8     16 2D 02 FB | 	rdlong	local04, local04
0aaac     FE 2D 0E F2 | 	cmp	local04, #510 wz
0aab0     35 00 00 FF 
0aab4     0C E4 85 F1 | 	sub	objptr, ##27148
0aab8     30 FE 9F 5D |  if_ne	jmp	#LR__0900
0aabc                 | LR__0904
0aabc     14 2D 02 F6 | 	mov	local04, local02
0aac0     01 2C 66 F0 | 	shl	local04, #1
0aac4     14 2D 02 F1 | 	add	local04, local02
0aac8     02 2C 66 F0 | 	shl	local04, #2
0aacc     47 00 00 FF 
0aad0     7C E4 05 F1 | 	add	objptr, ##36476
0aad4     F2 2C 02 F1 | 	add	local04, objptr
0aad8     04 2C 06 F1 | 	add	local04, #4
0aadc     16 03 68 FC | 	wrlong	#1, local04
0aae0     47 00 00 FF 
0aae4     7C E4 85 F1 | 	sub	objptr, ##36476
0aae8                 | LR__0905
0aae8                 | ' 
0aae8                 | ' if lparts(ct).part$="gosub" then
0aae8     37 00 00 FF 
0aaec     44 E4 05 F1 | 	add	objptr, ##28228
0aaf0     F2 2A 02 FB | 	rdlong	local03, objptr
0aaf4     03 2A 66 F0 | 	shl	local03, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 2A 02 F1 | 	add	local03, objptr
0ab04     15 13 02 FB | 	rdlong	arg01, local03
0ab08     9F 01 00 FF 
0ab0c     2C 15 06 F6 | 	mov	arg02, ##@LR__5669
0ab10     35 00 00 FF 
0ab14     0C E4 85 F1 | 	sub	objptr, ##27148
0ab18     20 92 B1 FD | 	call	#__system___string_cmp
0ab1c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab20     84 02 90 5D |  if_ne	jmp	#LR__0911
0ab24     37 00 00 FF 
0ab28     44 E4 05 F1 | 	add	objptr, ##28228
0ab2c     F2 2A 02 FB | 	rdlong	local03, objptr
0ab30     37 00 00 FF 
0ab34     44 E4 85 F1 | 	sub	objptr, ##28228
0ab38     01 2A 06 F1 | 	add	local03, #1
0ab3c                 | '   i=ct+1
0ab3c                 | '   do
0ab3c                 | LR__0906
0ab3c                 | '     if lparts(i).token=token_decimal then
0ab3c     15 2D 02 F6 | 	mov	local04, local03
0ab40     03 2C 66 F0 | 	shl	local04, #3
0ab44     35 00 00 FF 
0ab48     0C E4 05 F1 | 	add	objptr, ##27148
0ab4c     F2 2C 02 F1 | 	add	local04, objptr
0ab50     04 2C 06 F1 | 	add	local04, #4
0ab54     16 2D 02 FB | 	rdlong	local04, local04
0ab58     01 00 00 FF 
0ab5c     00 2C 0E F2 | 	cmp	local04, ##512 wz
0ab60     35 00 00 FF 
0ab64     0C E4 85 F1 | 	sub	objptr, ##27148
0ab68     4C 01 90 5D |  if_ne	jmp	#LR__0907
0ab6c     4A 00 00 FF 
0ab70     7C E4 05 F1 | 	add	objptr, ##38012
0ab74     F2 FA 01 FB | 	rdlong	result1, objptr
0ab78     FD 2C 02 F6 | 	mov	local04, result1
0ab7c     01 2C 66 F0 | 	shl	local04, #1
0ab80     FD 2C 02 F1 | 	add	local04, result1
0ab84     02 2C 66 F0 | 	shl	local04, #2
0ab88     03 00 00 FF 
0ab8c     00 E4 85 F1 | 	sub	objptr, ##1536
0ab90     F2 2C 02 F1 | 	add	local04, objptr
0ab94     08 2C 06 F1 | 	add	local04, #8
0ab98     16 53 69 FC | 	wrlong	#169, local04
0ab9c     03 00 00 FF 
0aba0     00 E4 05 F1 | 	add	objptr, ##1536
0aba4     F2 FA 01 FB | 	rdlong	result1, objptr
0aba8     01 FA 05 F1 | 	add	result1, #1
0abac     F2 FA 61 FC | 	wrlong	result1, objptr
0abb0     FD 2C 02 F6 | 	mov	local04, result1
0abb4     01 2C 66 F0 | 	shl	local04, #1
0abb8     FD 2C 02 F1 | 	add	local04, result1
0abbc     02 2C 66 F0 | 	shl	local04, #2
0abc0     03 00 00 FF 
0abc4     00 E4 85 F1 | 	sub	objptr, ##1536
0abc8     F2 2C 02 F1 | 	add	local04, objptr
0abcc     00 00 C0 FF 
0abd0     16 01 68 FC | 	wrlong	##-2147483648, local04
0abd4     03 00 00 FF 
0abd8     00 E4 05 F1 | 	add	objptr, ##1536
0abdc     F2 FA 01 FB | 	rdlong	result1, objptr
0abe0     FD 2C 02 F6 | 	mov	local04, result1
0abe4     01 2C 66 F0 | 	shl	local04, #1
0abe8     FD 2C 02 F1 | 	add	local04, result1
0abec     02 2C 66 F0 | 	shl	local04, #2
0abf0     03 00 00 FF 
0abf4     00 E4 85 F1 | 	sub	objptr, ##1536
0abf8     F2 2C 02 F1 | 	add	local04, objptr
0abfc     15 13 02 F6 | 	mov	arg01, local03
0ac00     03 12 66 F0 | 	shl	arg01, #3
0ac04     12 00 00 FF 
0ac08     70 E4 85 F1 | 	sub	objptr, ##9328
0ac0c     F2 12 02 F1 | 	add	arg01, objptr
0ac10     09 13 02 FB | 	rdlong	arg01, arg01
0ac14     00 14 06 F6 | 	mov	arg02, #0
0ac18     35 00 00 FF 
0ac1c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac20     E0 C5 B1 FD | 	call	#__system____builtin_atoi
0ac24     04 2C 06 F1 | 	add	local04, #4
0ac28     16 FB 61 FC | 	wrlong	result1, local04
0ac2c     4A 00 00 FF 
0ac30     7C E4 05 F1 | 	add	objptr, ##38012
0ac34     F2 12 02 FB | 	rdlong	arg01, objptr
0ac38     09 2D 02 F6 | 	mov	local04, arg01
0ac3c     01 2C 66 F0 | 	shl	local04, #1
0ac40     09 2D 02 F1 | 	add	local04, arg01
0ac44     02 2C 66 F0 | 	shl	local04, #2
0ac48     03 00 00 FF 
0ac4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac50     F2 2C 02 F1 | 	add	local04, objptr
0ac54     08 2C 06 F1 | 	add	local04, #8
0ac58     16 A7 68 FC | 	wrlong	#83, local04
0ac5c     03 00 00 FF 
0ac60     00 E4 05 F1 | 	add	objptr, ##1536
0ac64     F2 12 02 FB | 	rdlong	arg01, objptr
0ac68     01 12 06 F1 | 	add	arg01, #1
0ac6c     F2 12 62 FC | 	wrlong	arg01, objptr
0ac70     01 26 06 F1 | 	add	local01, #1
0ac74     09 2D 02 F6 | 	mov	local04, arg01
0ac78     01 2C 66 F0 | 	shl	local04, #1
0ac7c     09 2D 02 F1 | 	add	local04, arg01
0ac80     02 2C 66 F0 | 	shl	local04, #2
0ac84     03 00 00 FF 
0ac88     00 E4 85 F1 | 	sub	objptr, ##1536
0ac8c     F2 2C 02 F1 | 	add	local04, objptr
0ac90     08 2C 06 F1 | 	add	local04, #8
0ac94     16 5B 68 FC | 	wrlong	#45, local04
0ac98     03 00 00 FF 
0ac9c     00 E4 05 F1 | 	add	objptr, ##1536
0aca0     F2 2C 02 FB | 	rdlong	local04, objptr
0aca4     01 2C 06 F1 | 	add	local04, #1
0aca8     F2 2C 62 FC | 	wrlong	local04, objptr
0acac     4A 00 00 FF 
0acb0     7C E4 85 F1 | 	sub	objptr, ##38012
0acb4     08 00 90 FD | 	jmp	#LR__0908
0acb8                 | LR__0907
0acb8                 | '       return 17
0acb8     11 FA 05 F6 | 	mov	result1, #17
0acbc     9C 01 90 FD | 	jmp	#LR__0915
0acc0                 | LR__0908
0acc0     01 2A 06 F1 | 	add	local03, #1
0acc4                 | '     i+=1
0acc4                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0acc4     15 2D 02 F6 | 	mov	local04, local03
0acc8     03 2C 66 F0 | 	shl	local04, #3
0accc     35 00 00 FF 
0acd0     0C E4 05 F1 | 	add	objptr, ##27148
0acd4     F2 2C 02 F1 | 	add	local04, objptr
0acd8     04 2C 06 F1 | 	add	local04, #4
0acdc     16 2D 02 FB | 	rdlong	local04, local04
0ace0     11 2C 0E F2 | 	cmp	local04, #17 wz
0ace4     35 00 00 FF 
0ace8     0C E4 85 F1 | 	sub	objptr, ##27148
0acec     30 00 90 AD |  if_e	jmp	#LR__0909
0acf0     15 2D 02 F6 | 	mov	local04, local03
0acf4     03 2C 66 F0 | 	shl	local04, #3
0acf8     35 00 00 FF 
0acfc     0C E4 05 F1 | 	add	objptr, ##27148
0ad00     F2 2C 02 F1 | 	add	local04, objptr
0ad04     04 2C 06 F1 | 	add	local04, #4
0ad08     16 2D 02 FB | 	rdlong	local04, local04
0ad0c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ad10     35 00 00 FF 
0ad14     0C E4 85 F1 | 	sub	objptr, ##27148
0ad18     15 FA 05 56 |  if_ne	mov	result1, #21
0ad1c     3C 01 90 5D |  if_ne	jmp	#LR__0915
0ad20                 | LR__0909
0ad20                 | '     if lparts(i).token=token_end then exit loop
0ad20     15 2D 02 F6 | 	mov	local04, local03
0ad24     03 2C 66 F0 | 	shl	local04, #3
0ad28     35 00 00 FF 
0ad2c     0C E4 05 F1 | 	add	objptr, ##27148
0ad30     F2 2C 02 F1 | 	add	local04, objptr
0ad34     04 2C 06 F1 | 	add	local04, #4
0ad38     16 2D 02 FB | 	rdlong	local04, local04
0ad3c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ad40     35 00 00 FF 
0ad44     0C E4 85 F1 | 	sub	objptr, ##27148
0ad48     30 00 90 AD |  if_e	jmp	#LR__0910
0ad4c     01 2A 06 F1 | 	add	local03, #1
0ad50     15 2D 02 F6 | 	mov	local04, local03
0ad54     03 2C 66 F0 | 	shl	local04, #3
0ad58     35 00 00 FF 
0ad5c     0C E4 05 F1 | 	add	objptr, ##27148
0ad60     F2 2C 02 F1 | 	add	local04, objptr
0ad64     04 2C 06 F1 | 	add	local04, #4
0ad68     16 2D 02 FB | 	rdlong	local04, local04
0ad6c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ad70     35 00 00 FF 
0ad74     0C E4 85 F1 | 	sub	objptr, ##27148
0ad78     C0 FD 9F 5D |  if_ne	jmp	#LR__0906
0ad7c                 | LR__0910
0ad7c     14 2D 02 F6 | 	mov	local04, local02
0ad80     01 2C 66 F0 | 	shl	local04, #1
0ad84     14 2D 02 F1 | 	add	local04, local02
0ad88     02 2C 66 F0 | 	shl	local04, #2
0ad8c     47 00 00 FF 
0ad90     7C E4 05 F1 | 	add	objptr, ##36476
0ad94     F2 2C 02 F1 | 	add	local04, objptr
0ad98     04 2C 06 F1 | 	add	local04, #4
0ad9c     16 07 68 FC | 	wrlong	#3, local04
0ada0     47 00 00 FF 
0ada4     7C E4 85 F1 | 	sub	objptr, ##36476
0ada8                 | LR__0911
0ada8     14 2B 02 F6 | 	mov	local03, local02
0adac     01 2A 66 F0 | 	shl	local03, #1
0adb0     14 2B 02 F1 | 	add	local03, local02
0adb4     02 2A 66 F0 | 	shl	local03, #2
0adb8     47 00 00 FF 
0adbc     7C E4 05 F1 | 	add	objptr, ##36476
0adc0     F2 2A 02 F1 | 	add	local03, objptr
0adc4     15 27 62 FC | 	wrlong	local01, local03
0adc8                 | ' compiledline(onlineptr).result.uresult=numpar
0adc8                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0adc8     03 00 00 FF 
0adcc     00 E4 05 F1 | 	add	objptr, ##1536
0add0     F2 2A 02 FB | 	rdlong	local03, objptr
0add4     4A 00 00 FF 
0add8     7C E4 85 F1 | 	sub	objptr, ##38012
0addc     97 3C 48 FB | 	callpa	#(@LR__0914-@LR__0912)>>2,fcache_load_ptr_
0ade0                 | LR__0912
0ade0     15 2D 02 F6 | 	mov	local04, local03
0ade4     01 2C 66 F0 | 	shl	local04, #1
0ade8     15 2D 02 F1 | 	add	local04, local03
0adec     02 2C 66 F0 | 	shl	local04, #2
0adf0     47 00 00 FF 
0adf4     7C E4 05 F1 | 	add	objptr, ##36476
0adf8     F2 2C 02 F1 | 	add	local04, objptr
0adfc     08 2C 06 F1 | 	add	local04, #8
0ae00     16 2D 02 FB | 	rdlong	local04, local04
0ae04     2D 2C 0E F2 | 	cmp	local04, #45 wz
0ae08     47 00 00 FF 
0ae0c     7C E4 85 F1 | 	sub	objptr, ##36476
0ae10     38 00 90 5D |  if_ne	jmp	#LR__0913
0ae14     15 2D 02 F6 | 	mov	local04, local03
0ae18     01 2C 66 F0 | 	shl	local04, #1
0ae1c     15 2D 02 F1 | 	add	local04, local03
0ae20     02 2C 66 F0 | 	shl	local04, #2
0ae24     47 00 00 FF 
0ae28     7C E4 05 F1 | 	add	objptr, ##36476
0ae2c     F2 2C 02 F1 | 	add	local04, objptr
0ae30     03 00 00 FF 
0ae34     00 E4 05 F1 | 	add	objptr, ##1536
0ae38     F2 26 02 FB | 	rdlong	local01, objptr
0ae3c     4A 00 00 FF 
0ae40     7C E4 85 F1 | 	sub	objptr, ##38012
0ae44     02 26 86 F1 | 	sub	local01, #2
0ae48     16 27 62 FC | 	wrlong	local01, local04
0ae4c                 | LR__0913
0ae4c     01 2A 86 F1 | 	sub	local03, #1
0ae50     14 2B 52 F2 | 	cmps	local03, local02 wc
0ae54     88 FF 9F 3D |  if_ae	jmp	#LR__0912
0ae58                 | LR__0914
0ae58                 | ' return 0
0ae58     00 FA 05 F6 | 	mov	result1, #0
0ae5c                 | LR__0915
0ae5c     A7 F0 03 F6 | 	mov	ptra, fp
0ae60     B2 00 A0 FD | 	call	#popregs_
0ae64                 | _compile_on_ret
0ae64     2D 00 64 FD | 	ret
0ae68                 | 
0ae68                 | ' 
0ae68                 | ' '----- A helper for compile_input and compile_read
0ae68                 | '  
0ae68                 | ' function getaddr() as ulong
0ae68                 | _getaddr
0ae68     0B 4A 05 F6 | 	mov	COUNT_, #11
0ae6c     A8 00 A0 FD | 	call	#pushregs_
0ae70     37 00 00 FF 
0ae74     44 E4 05 F1 | 	add	objptr, ##28228
0ae78     F2 2C 02 FB | 	rdlong	local04, objptr
0ae7c     03 2C 66 F0 | 	shl	local04, #3
0ae80     02 00 00 FF 
0ae84     38 E4 85 F1 | 	sub	objptr, ##1080
0ae88     F2 2C 02 F1 | 	add	local04, objptr
0ae8c     16 2F 02 FB | 	rdlong	local05, local04
0ae90     01 30 66 F6 | 	neg	local06, #1
0ae94                 | ' 
0ae94                 | ' varname$=lparts(ct).part$
0ae94                 | ' j=-1
0ae94                 | ' 
0ae94                 | ' for i=0 to varnum-1
0ae94     00 32 06 F6 | 	mov	local07, #0
0ae98     04 E4 85 F1 | 	sub	objptr, #4
0ae9c     F2 34 02 FB | 	rdlong	local08, objptr
0aea0     35 00 00 FF 
0aea4     08 E4 85 F1 | 	sub	objptr, ##27144
0aea8                 | LR__0920
0aea8     1A 33 52 F2 | 	cmps	local07, local08 wc
0aeac     38 00 90 3D |  if_ae	jmp	#LR__0921
0aeb0                 | '   if variables(i).name=varname$ then j=i : exit
0aeb0     19 2D 02 F6 | 	mov	local04, local07
0aeb4     04 2C 66 F0 | 	shl	local04, #4
0aeb8     14 00 00 FF 
0aebc     F8 E5 05 F1 | 	add	objptr, ##10744
0aec0     F2 2C 02 F1 | 	add	local04, objptr
0aec4     16 13 02 FB | 	rdlong	arg01, local04
0aec8     17 15 02 F6 | 	mov	arg02, local05
0aecc     14 00 00 FF 
0aed0     F8 E5 85 F1 | 	sub	objptr, ##10744
0aed4     64 8E B1 FD | 	call	#__system___string_cmp
0aed8     00 FA 0D F2 | 	cmp	result1, #0 wz
0aedc     19 31 02 A6 |  if_e	mov	local06, local07
0aee0     01 32 06 51 |  if_ne	add	local07, #1
0aee4     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0aee8                 | LR__0921
0aee8                 | ' if  j=-1 andalso varnum<maxvars then   
0aee8     FF FF 7F FF 
0aeec     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0aef0     A8 00 90 5D |  if_ne	jmp	#LR__0922
0aef4     35 00 00 FF 
0aef8     08 E4 05 F1 | 	add	objptr, ##27144
0aefc     F2 34 02 FB | 	rdlong	local08, objptr
0af00     35 00 00 FF 
0af04     08 E4 85 F1 | 	sub	objptr, ##27144
0af08     02 00 00 FF 
0af0c     00 34 56 F2 | 	cmps	local08, ##1024 wc
0af10     88 00 90 3D |  if_ae	jmp	#LR__0922
0af14     35 00 00 FF 
0af18     08 E4 05 F1 | 	add	objptr, ##27144
0af1c     F2 2C 02 FB | 	rdlong	local04, objptr
0af20     04 2C 66 F0 | 	shl	local04, #4
0af24     20 00 00 FF 
0af28     10 E4 85 F1 | 	sub	objptr, ##16400
0af2c     F2 2C 02 F1 | 	add	local04, objptr
0af30     16 2F 62 FC | 	wrlong	local05, local04
0af34     20 00 00 FF 
0af38     10 E4 05 F1 | 	add	objptr, ##16400
0af3c     F2 2C 02 FB | 	rdlong	local04, objptr
0af40     04 2C 66 F0 | 	shl	local04, #4
0af44     20 00 00 FF 
0af48     10 E4 85 F1 | 	sub	objptr, ##16400
0af4c     F2 2C 02 F1 | 	add	local04, objptr
0af50     04 2C 06 F1 | 	add	local04, #4
0af54     16 01 68 FC | 	wrlong	#0, local04
0af58     20 00 00 FF 
0af5c     10 E4 05 F1 | 	add	objptr, ##16400
0af60     F2 2C 02 FB | 	rdlong	local04, objptr
0af64     04 2C 66 F0 | 	shl	local04, #4
0af68     20 00 00 FF 
0af6c     10 E4 85 F1 | 	sub	objptr, ##16400
0af70     F2 2C 02 F1 | 	add	local04, objptr
0af74     0C 2C 06 F1 | 	add	local04, #12
0af78     16 39 68 FC | 	wrlong	#28, local04
0af7c     20 00 00 FF 
0af80     10 E4 05 F1 | 	add	objptr, ##16400
0af84     F2 34 02 FB | 	rdlong	local08, objptr
0af88     1A 31 02 F6 | 	mov	local06, local08
0af8c     01 34 06 F1 | 	add	local08, #1
0af90     F2 34 62 FC | 	wrlong	local08, objptr
0af94     35 00 00 FF 
0af98     08 E4 85 F1 | 	sub	objptr, ##27144
0af9c                 | LR__0922
0af9c     00 34 06 F6 | 	mov	local08, #0
0afa0                 | ' numpar=0
0afa0                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0afa0     37 00 00 FF 
0afa4     44 E4 05 F1 | 	add	objptr, ##28228
0afa8     F2 2C 02 FB | 	rdlong	local04, objptr
0afac     01 2C 06 F1 | 	add	local04, #1
0afb0     03 2C 66 F0 | 	shl	local04, #3
0afb4     02 00 00 FF 
0afb8     38 E4 85 F1 | 	sub	objptr, ##1080
0afbc     F2 2C 02 F1 | 	add	local04, objptr
0afc0     04 2C 06 F1 | 	add	local04, #4
0afc4     16 33 02 FB | 	rdlong	local07, local04
0afc8     15 32 0E F2 | 	cmp	local07, #21 wz
0afcc     35 00 00 FF 
0afd0     0C E4 85 F1 | 	sub	objptr, ##27148
0afd4     54 01 90 5D |  if_ne	jmp	#LR__0927
0afd8     37 00 00 FF 
0afdc     44 E4 05 F1 | 	add	objptr, ##28228
0afe0     F2 36 02 FB | 	rdlong	local09, objptr
0afe4     01 36 06 F1 | 	add	local09, #1
0afe8     F2 36 62 FC | 	wrlong	local09, objptr
0afec     37 00 00 FF 
0aff0     44 E4 85 F1 | 	sub	objptr, ##28228
0aff4                 | '   ct+=1 											' omit this lpar, this is for expr list
0aff4                 | '   do
0aff4                 | LR__0923
0aff4     37 00 00 FF 
0aff8     44 E4 05 F1 | 	add	objptr, ##28228
0affc     F2 2C 02 FB | 	rdlong	local04, objptr
0b000     01 2C 06 F1 | 	add	local04, #1
0b004     F2 2C 62 FC | 	wrlong	local04, objptr
0b008                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b008                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b008     03 2C 66 F0 | 	shl	local04, #3
0b00c     02 00 00 FF 
0b010     38 E4 85 F1 | 	sub	objptr, ##1080
0b014     F2 2C 02 F1 | 	add	local04, objptr
0b018     04 2C 06 F1 | 	add	local04, #4
0b01c     16 37 02 FB | 	rdlong	local09, local04
0b020     15 36 0E F2 | 	cmp	local09, #21 wz
0b024     35 00 00 FF 
0b028     0C E4 85 F1 | 	sub	objptr, ##27148
0b02c     44 00 90 5D |  if_ne	jmp	#LR__0924
0b030     37 00 00 FF 
0b034     44 E4 05 F1 | 	add	objptr, ##28228
0b038     F2 36 02 FB | 	rdlong	local09, objptr
0b03c     01 36 06 F1 | 	add	local09, #1
0b040     F2 36 62 FC | 	wrlong	local09, objptr
0b044     37 00 00 FF 
0b048     44 E4 85 F1 | 	sub	objptr, ##28228
0b04c     AC 01 B0 FD | 	call	#_expr
0b050     FD 38 02 F6 | 	mov	local10, result1
0b054     37 00 00 FF 
0b058     44 E4 05 F1 | 	add	objptr, ##28228
0b05c     F2 36 02 FB | 	rdlong	local09, objptr
0b060     01 36 06 F1 | 	add	local09, #1
0b064     F2 36 62 FC | 	wrlong	local09, objptr
0b068     37 00 00 FF 
0b06c     44 E4 85 F1 | 	sub	objptr, ##28228
0b070     08 00 90 FD | 	jmp	#LR__0925
0b074                 | LR__0924
0b074     84 01 B0 FD | 	call	#_expr
0b078     FD 38 02 F6 | 	mov	local10, result1
0b07c                 | LR__0925
0b07c                 | '     if err>0 then return err
0b07c     01 38 56 F2 | 	cmps	local10, #1 wc
0b080     1C FB 01 36 |  if_ae	mov	result1, local10
0b084     68 01 90 3D |  if_ae	jmp	#LR__0928
0b088     01 34 06 F1 | 	add	local08, #1
0b08c     37 00 00 FF 
0b090     44 E4 05 F1 | 	add	objptr, ##28228
0b094     F2 2C 02 FB | 	rdlong	local04, objptr
0b098     03 2C 66 F0 | 	shl	local04, #3
0b09c     02 00 00 FF 
0b0a0     38 E4 85 F1 | 	sub	objptr, ##1080
0b0a4     F2 2C 02 F1 | 	add	local04, objptr
0b0a8     04 2C 06 F1 | 	add	local04, #4
0b0ac     16 39 02 FB | 	rdlong	local10, local04
0b0b0     14 38 0E F2 | 	cmp	local10, #20 wz
0b0b4     35 00 00 FF 
0b0b8     0C E4 85 F1 | 	sub	objptr, ##27148
0b0bc     34 00 90 AD |  if_e	jmp	#LR__0926
0b0c0     37 00 00 FF 
0b0c4     44 E4 05 F1 | 	add	objptr, ##28228
0b0c8     F2 38 02 FB | 	rdlong	local10, objptr
0b0cc     03 38 66 F0 | 	shl	local10, #3
0b0d0     02 00 00 FF 
0b0d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b0d8     F2 38 02 F1 | 	add	local10, objptr
0b0dc     04 38 06 F1 | 	add	local10, #4
0b0e0     1C 39 02 FB | 	rdlong	local10, local10
0b0e4     FE 39 0E F2 | 	cmp	local10, #510 wz
0b0e8     35 00 00 FF 
0b0ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b0f0     00 FF 9F 5D |  if_ne	jmp	#LR__0923
0b0f4                 | LR__0926
0b0f4                 | '     if lparts(ct).token=token_end then return 14
0b0f4     37 00 00 FF 
0b0f8     44 E4 05 F1 | 	add	objptr, ##28228
0b0fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b100     03 2C 66 F0 | 	shl	local04, #3
0b104     02 00 00 FF 
0b108     38 E4 85 F1 | 	sub	objptr, ##1080
0b10c     F2 2C 02 F1 | 	add	local04, objptr
0b110     04 2C 06 F1 | 	add	local04, #4
0b114     16 39 02 FB | 	rdlong	local10, local04
0b118     FE 39 0E F2 | 	cmp	local10, #510 wz
0b11c     35 00 00 FF 
0b120     0C E4 85 F1 | 	sub	objptr, ##27148
0b124     0E FA 05 A6 |  if_e	mov	result1, #14
0b128     C4 00 90 AD |  if_e	jmp	#LR__0928
0b12c                 | LR__0927
0b12c     1A 29 02 F6 | 	mov	local02, local08
0b130     12 2A 06 F6 | 	mov	local03, #18
0b134     18 27 02 F6 | 	mov	local01, local06
0b138     13 37 02 F6 | 	mov	local09, local01
0b13c     14 3B 02 F6 | 	mov	local11, local02
0b140     15 27 02 F6 | 	mov	local01, local03
0b144     4A 00 00 FF 
0b148     7C E4 05 F1 | 	add	objptr, ##38012
0b14c     F2 38 02 FB | 	rdlong	local10, objptr
0b150     1C 35 02 F6 | 	mov	local08, local10
0b154     01 34 66 F0 | 	shl	local08, #1
0b158     1C 35 02 F1 | 	add	local08, local10
0b15c     02 34 66 F0 | 	shl	local08, #2
0b160     03 00 00 FF 
0b164     00 E4 85 F1 | 	sub	objptr, ##1536
0b168     F2 34 02 F1 | 	add	local08, objptr
0b16c     1A 37 62 FC | 	wrlong	local09, local08
0b170     03 00 00 FF 
0b174     00 E4 05 F1 | 	add	objptr, ##1536
0b178     F2 38 02 FB | 	rdlong	local10, objptr
0b17c     1C 37 02 F6 | 	mov	local09, local10
0b180     01 36 66 F0 | 	shl	local09, #1
0b184     1C 37 02 F1 | 	add	local09, local10
0b188     02 36 66 F0 | 	shl	local09, #2
0b18c     03 00 00 FF 
0b190     00 E4 85 F1 | 	sub	objptr, ##1536
0b194     F2 36 02 F1 | 	add	local09, objptr
0b198     04 36 06 F1 | 	add	local09, #4
0b19c     1B 3B 62 FC | 	wrlong	local11, local09
0b1a0     03 00 00 FF 
0b1a4     00 E4 05 F1 | 	add	objptr, ##1536
0b1a8     F2 3A 02 FB | 	rdlong	local11, objptr
0b1ac     1D 39 02 F6 | 	mov	local10, local11
0b1b0     01 38 66 F0 | 	shl	local10, #1
0b1b4     1D 39 02 F1 | 	add	local10, local11
0b1b8     02 38 66 F0 | 	shl	local10, #2
0b1bc     03 00 00 FF 
0b1c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b1c4     F2 38 02 F1 | 	add	local10, objptr
0b1c8     08 38 06 F1 | 	add	local10, #8
0b1cc     1C 27 62 FC | 	wrlong	local01, local10
0b1d0     03 00 00 FF 
0b1d4     00 E4 05 F1 | 	add	objptr, ##1536
0b1d8     F2 36 02 FB | 	rdlong	local09, objptr
0b1dc     01 36 06 F1 | 	add	local09, #1
0b1e0     F2 36 62 FC | 	wrlong	local09, objptr
0b1e4     4A 00 00 FF 
0b1e8     7C E4 85 F1 | 	sub	objptr, ##38012
0b1ec                 | ' t2.result.twowords(1)=numpar
0b1ec                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b1ec                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b1ec                 | ' return 0
0b1ec     00 FA 05 F6 | 	mov	result1, #0
0b1f0                 | LR__0928
0b1f0     A7 F0 03 F6 | 	mov	ptra, fp
0b1f4     B2 00 A0 FD | 	call	#popregs_
0b1f8                 | _getaddr_ret
0b1f8     2D 00 64 FD | 	ret
0b1fc                 | 
0b1fc                 | ' 
0b1fc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b1fc                 | ' '--------------------------------------------- 
0b1fc                 | ' 
0b1fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b1fc                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b1fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b1fc                 | ' 
0b1fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b1fc                 | ' '
0b1fc                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b1fc                 | ' '
0b1fc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b1fc                 | ' 
0b1fc                 | ' function expr() as ulong 
0b1fc                 | _expr
0b1fc     07 4A 05 F6 | 	mov	COUNT_, #7
0b200     A8 00 A0 FD | 	call	#pushregs_
0b204                 | _expr_enter
0b204     37 00 00 FF 
0b208     44 E4 05 F1 | 	add	objptr, ##28228
0b20c     F2 2C 02 FB | 	rdlong	local04, objptr
0b210     03 2C 66 F0 | 	shl	local04, #3
0b214     02 00 00 FF 
0b218     38 E4 85 F1 | 	sub	objptr, ##1080
0b21c     F2 2C 02 F1 | 	add	local04, objptr
0b220     04 2C 06 F1 | 	add	local04, #4
0b224     16 2F 02 FB | 	rdlong	local05, local04
0b228                 | ' 
0b228                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b228     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b22c     35 00 00 FF 
0b230     0C E4 85 F1 | 	sub	objptr, ##27148
0b234     C4 00 90 5D |  if_ne	jmp	#LR__0930
0b238     1D 26 06 F6 | 	mov	local01, #29
0b23c     FF 2A 06 F6 | 	mov	local03, #255
0b240     13 31 02 F6 | 	mov	local06, local01
0b244     14 33 02 F6 | 	mov	local07, local02
0b248     15 27 02 F6 | 	mov	local01, local03
0b24c     4A 00 00 FF 
0b250     7C E4 05 F1 | 	add	objptr, ##38012
0b254     F2 2E 02 FB | 	rdlong	local05, objptr
0b258     17 2D 02 F6 | 	mov	local04, local05
0b25c     01 2C 66 F0 | 	shl	local04, #1
0b260     17 2D 02 F1 | 	add	local04, local05
0b264     02 2C 66 F0 | 	shl	local04, #2
0b268     03 00 00 FF 
0b26c     00 E4 85 F1 | 	sub	objptr, ##1536
0b270     F2 2C 02 F1 | 	add	local04, objptr
0b274     16 31 62 FC | 	wrlong	local06, local04
0b278     03 00 00 FF 
0b27c     00 E4 05 F1 | 	add	objptr, ##1536
0b280     F2 30 02 FB | 	rdlong	local06, objptr
0b284     18 2F 02 F6 | 	mov	local05, local06
0b288     01 2E 66 F0 | 	shl	local05, #1
0b28c     18 2F 02 F1 | 	add	local05, local06
0b290     02 2E 66 F0 | 	shl	local05, #2
0b294     03 00 00 FF 
0b298     00 E4 85 F1 | 	sub	objptr, ##1536
0b29c     F2 2E 02 F1 | 	add	local05, objptr
0b2a0     04 2E 06 F1 | 	add	local05, #4
0b2a4     17 33 62 FC | 	wrlong	local07, local05
0b2a8     03 00 00 FF 
0b2ac     00 E4 05 F1 | 	add	objptr, ##1536
0b2b0     F2 32 02 FB | 	rdlong	local07, objptr
0b2b4     19 31 02 F6 | 	mov	local06, local07
0b2b8     01 30 66 F0 | 	shl	local06, #1
0b2bc     19 31 02 F1 | 	add	local06, local07
0b2c0     02 30 66 F0 | 	shl	local06, #2
0b2c4     03 00 00 FF 
0b2c8     00 E4 85 F1 | 	sub	objptr, ##1536
0b2cc     F2 30 02 F1 | 	add	local06, objptr
0b2d0     08 30 06 F1 | 	add	local06, #8
0b2d4     18 27 62 FC | 	wrlong	local01, local06
0b2d8     03 00 00 FF 
0b2dc     00 E4 05 F1 | 	add	objptr, ##1536
0b2e0     F2 30 02 FB | 	rdlong	local06, objptr
0b2e4     01 30 06 F1 | 	add	local06, #1
0b2e8     F2 30 62 FC | 	wrlong	local06, objptr
0b2ec     4A 00 00 FF 
0b2f0     7C E4 85 F1 | 	sub	objptr, ##38012
0b2f4     1D FA 05 F6 | 	mov	result1, #29
0b2f8     64 01 90 FD | 	jmp	#LR__0933
0b2fc                 | LR__0930
0b2fc     00 26 06 F6 | 	mov	local01, #0
0b300     68 01 B0 FD | 	call	#_addsub
0b304                 | ' t3.result.uresult=0
0b304                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b304                 | ' if err>0 then return err
0b304     01 FA 15 F2 | 	cmp	result1, #1 wc
0b308     54 01 90 3D |  if_ae	jmp	#LR__0933
0b30c     37 00 00 FF 
0b310     44 E4 05 F1 | 	add	objptr, ##28228
0b314     F2 2C 02 FB | 	rdlong	local04, objptr
0b318     03 2C 66 F0 | 	shl	local04, #3
0b31c     02 00 00 FF 
0b320     38 E4 85 F1 | 	sub	objptr, ##1080
0b324     F2 2C 02 F1 | 	add	local04, objptr
0b328     04 2C 06 F1 | 	add	local04, #4
0b32c     16 2F 02 FB | 	rdlong	local05, local04
0b330                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b330                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b330     35 00 00 FF 
0b334     0C E4 85 F1 | 	sub	objptr, ##27148
0b338                 | LR__0931
0b338     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b33c     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b340     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b344     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b348     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b34c     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b350     08 01 90 5D |  if_ne	jmp	#LR__0932
0b354     37 00 00 FF 
0b358     44 E4 05 F1 | 	add	objptr, ##28228
0b35c     F2 30 02 FB | 	rdlong	local06, objptr
0b360     01 30 06 F1 | 	add	local06, #1
0b364     F2 30 62 FC | 	wrlong	local06, objptr
0b368     37 00 00 FF 
0b36c     44 E4 85 F1 | 	sub	objptr, ##28228
0b370     F8 00 B0 FD | 	call	#_addsub
0b374                 | '   ct+=1
0b374                 | '   err=addsub() : if err>0 then return err
0b374     01 FA 15 F2 | 	cmp	result1, #1 wc
0b378     E4 00 90 3D |  if_ae	jmp	#LR__0933
0b37c     17 2B 02 F6 | 	mov	local03, local05
0b380     13 31 02 F6 | 	mov	local06, local01
0b384     14 33 02 F6 | 	mov	local07, local02
0b388     15 2F 02 F6 | 	mov	local05, local03
0b38c     4A 00 00 FF 
0b390     7C E4 05 F1 | 	add	objptr, ##38012
0b394     F2 2C 02 FB | 	rdlong	local04, objptr
0b398     16 FB 01 F6 | 	mov	result1, local04
0b39c     01 FA 65 F0 | 	shl	result1, #1
0b3a0     16 FB 01 F1 | 	add	result1, local04
0b3a4     02 FA 65 F0 | 	shl	result1, #2
0b3a8     03 00 00 FF 
0b3ac     00 E4 85 F1 | 	sub	objptr, ##1536
0b3b0     F2 FA 01 F1 | 	add	result1, objptr
0b3b4     FD 30 62 FC | 	wrlong	local06, result1
0b3b8     03 00 00 FF 
0b3bc     00 E4 05 F1 | 	add	objptr, ##1536
0b3c0     F2 30 02 FB | 	rdlong	local06, objptr
0b3c4     18 2D 02 F6 | 	mov	local04, local06
0b3c8     01 2C 66 F0 | 	shl	local04, #1
0b3cc     18 2D 02 F1 | 	add	local04, local06
0b3d0     02 2C 66 F0 | 	shl	local04, #2
0b3d4     03 00 00 FF 
0b3d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b3dc     F2 2C 02 F1 | 	add	local04, objptr
0b3e0     04 2C 06 F1 | 	add	local04, #4
0b3e4     16 33 62 FC | 	wrlong	local07, local04
0b3e8     03 00 00 FF 
0b3ec     00 E4 05 F1 | 	add	objptr, ##1536
0b3f0     F2 32 02 FB | 	rdlong	local07, objptr
0b3f4     19 31 02 F6 | 	mov	local06, local07
0b3f8     01 30 66 F0 | 	shl	local06, #1
0b3fc     19 31 02 F1 | 	add	local06, local07
0b400     02 30 66 F0 | 	shl	local06, #2
0b404     03 00 00 FF 
0b408     00 E4 85 F1 | 	sub	objptr, ##1536
0b40c     F2 30 02 F1 | 	add	local06, objptr
0b410     08 30 06 F1 | 	add	local06, #8
0b414     18 2F 62 FC | 	wrlong	local05, local06
0b418     03 00 00 FF 
0b41c     00 E4 05 F1 | 	add	objptr, ##1536
0b420     F2 30 02 FB | 	rdlong	local06, objptr
0b424     01 30 06 F1 | 	add	local06, #1
0b428     F2 30 62 FC | 	wrlong	local06, objptr
0b42c     13 00 00 FF 
0b430     38 E4 85 F1 | 	sub	objptr, ##9784
0b434     F2 2C 02 FB | 	rdlong	local04, objptr
0b438     03 2C 66 F0 | 	shl	local04, #3
0b43c     02 00 00 FF 
0b440     38 E4 85 F1 | 	sub	objptr, ##1080
0b444     F2 2C 02 F1 | 	add	local04, objptr
0b448     04 2C 06 F1 | 	add	local04, #4
0b44c     16 2F 02 FB | 	rdlong	local05, local04
0b450     35 00 00 FF 
0b454     0C E4 85 F1 | 	sub	objptr, ##27148
0b458     DC FE 9F FD | 	jmp	#LR__0931
0b45c                 | LR__0932
0b45c                 | ' return 0  
0b45c     00 FA 05 F6 | 	mov	result1, #0
0b460                 | LR__0933
0b460     A7 F0 03 F6 | 	mov	ptra, fp
0b464     B2 00 A0 FD | 	call	#popregs_
0b468                 | _expr_ret
0b468     2D 00 64 FD | 	ret
0b46c                 | 
0b46c                 | ' 
0b46c                 | ' ' Second level operators : add, sub, logic
0b46c                 | ' 
0b46c                 | ' function addsub() as ulong
0b46c                 | _addsub
0b46c     07 4A 05 F6 | 	mov	COUNT_, #7
0b470     A8 00 A0 FD | 	call	#pushregs_
0b474                 | _addsub_enter
0b474     00 26 06 F6 | 	mov	local01, #0
0b478     60 01 B0 FD | 	call	#_muldiv
0b47c                 | ' 
0b47c                 | ' t3.result.uresult=0
0b47c                 | ' err=muldiv() : if err>0 then return err           			 
0b47c     01 FA 15 F2 | 	cmp	result1, #1 wc
0b480     4C 01 90 3D |  if_ae	jmp	#LR__0942
0b484     37 00 00 FF 
0b488     44 E4 05 F1 | 	add	objptr, ##28228
0b48c     F2 2C 02 FB | 	rdlong	local04, objptr
0b490     03 2C 66 F0 | 	shl	local04, #3
0b494     02 00 00 FF 
0b498     38 E4 85 F1 | 	sub	objptr, ##1080
0b49c     F2 2C 02 F1 | 	add	local04, objptr
0b4a0     04 2C 06 F1 | 	add	local04, #4
0b4a4     16 2F 02 FB | 	rdlong	local05, local04
0b4a8                 | ' op = lparts(ct).token				 
0b4a8                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b4a8     35 00 00 FF 
0b4ac     0C E4 85 F1 | 	sub	objptr, ##27148
0b4b0                 | LR__0940
0b4b0     01 2E 0E F2 | 	cmp	local05, #1 wz
0b4b4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b4b8     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b4bc     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b4c0     08 01 90 5D |  if_ne	jmp	#LR__0941
0b4c4     37 00 00 FF 
0b4c8     44 E4 05 F1 | 	add	objptr, ##28228
0b4cc     F2 2C 02 FB | 	rdlong	local04, objptr
0b4d0     01 2C 06 F1 | 	add	local04, #1
0b4d4     F2 2C 62 FC | 	wrlong	local04, objptr
0b4d8     37 00 00 FF 
0b4dc     44 E4 85 F1 | 	sub	objptr, ##28228
0b4e0     F8 00 B0 FD | 	call	#_muldiv
0b4e4                 | '   ct+=1
0b4e4                 | '   err=muldiv() : if err>0 then return err   
0b4e4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b4e8     E4 00 90 3D |  if_ae	jmp	#LR__0942
0b4ec     17 2B 02 F6 | 	mov	local03, local05
0b4f0     13 31 02 F6 | 	mov	local06, local01
0b4f4     14 33 02 F6 | 	mov	local07, local02
0b4f8     15 2F 02 F6 | 	mov	local05, local03
0b4fc     4A 00 00 FF 
0b500     7C E4 05 F1 | 	add	objptr, ##38012
0b504     F2 2C 02 FB | 	rdlong	local04, objptr
0b508     16 FB 01 F6 | 	mov	result1, local04
0b50c     01 FA 65 F0 | 	shl	result1, #1
0b510     16 FB 01 F1 | 	add	result1, local04
0b514     02 FA 65 F0 | 	shl	result1, #2
0b518     03 00 00 FF 
0b51c     00 E4 85 F1 | 	sub	objptr, ##1536
0b520     F2 FA 01 F1 | 	add	result1, objptr
0b524     FD 30 62 FC | 	wrlong	local06, result1
0b528     03 00 00 FF 
0b52c     00 E4 05 F1 | 	add	objptr, ##1536
0b530     F2 30 02 FB | 	rdlong	local06, objptr
0b534     18 2D 02 F6 | 	mov	local04, local06
0b538     01 2C 66 F0 | 	shl	local04, #1
0b53c     18 2D 02 F1 | 	add	local04, local06
0b540     02 2C 66 F0 | 	shl	local04, #2
0b544     03 00 00 FF 
0b548     00 E4 85 F1 | 	sub	objptr, ##1536
0b54c     F2 2C 02 F1 | 	add	local04, objptr
0b550     04 2C 06 F1 | 	add	local04, #4
0b554     16 33 62 FC | 	wrlong	local07, local04
0b558     03 00 00 FF 
0b55c     00 E4 05 F1 | 	add	objptr, ##1536
0b560     F2 32 02 FB | 	rdlong	local07, objptr
0b564     19 31 02 F6 | 	mov	local06, local07
0b568     01 30 66 F0 | 	shl	local06, #1
0b56c     19 31 02 F1 | 	add	local06, local07
0b570     02 30 66 F0 | 	shl	local06, #2
0b574     03 00 00 FF 
0b578     00 E4 85 F1 | 	sub	objptr, ##1536
0b57c     F2 30 02 F1 | 	add	local06, objptr
0b580     08 30 06 F1 | 	add	local06, #8
0b584     18 2F 62 FC | 	wrlong	local05, local06
0b588     03 00 00 FF 
0b58c     00 E4 05 F1 | 	add	objptr, ##1536
0b590     F2 30 02 FB | 	rdlong	local06, objptr
0b594     01 30 06 F1 | 	add	local06, #1
0b598     F2 30 62 FC | 	wrlong	local06, objptr
0b59c     13 00 00 FF 
0b5a0     38 E4 85 F1 | 	sub	objptr, ##9784
0b5a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b5a8     03 2C 66 F0 | 	shl	local04, #3
0b5ac     02 00 00 FF 
0b5b0     38 E4 85 F1 | 	sub	objptr, ##1080
0b5b4     F2 2C 02 F1 | 	add	local04, objptr
0b5b8     04 2C 06 F1 | 	add	local04, #4
0b5bc     16 2F 02 FB | 	rdlong	local05, local04
0b5c0     35 00 00 FF 
0b5c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5c8     E4 FE 9F FD | 	jmp	#LR__0940
0b5cc                 | LR__0941
0b5cc                 | ' return 0
0b5cc     00 FA 05 F6 | 	mov	result1, #0
0b5d0                 | LR__0942
0b5d0     A7 F0 03 F6 | 	mov	ptra, fp
0b5d4     B2 00 A0 FD | 	call	#popregs_
0b5d8                 | _addsub_ret
0b5d8     2D 00 64 FD | 	ret
0b5dc                 | 
0b5dc                 | ' 
0b5dc                 | ' ' Third level operators : mul,div,shift,power
0b5dc                 | ' 
0b5dc                 | ' function muldiv() as ulong
0b5dc                 | _muldiv
0b5dc     07 4A 05 F6 | 	mov	COUNT_, #7
0b5e0     A8 00 A0 FD | 	call	#pushregs_
0b5e4                 | _muldiv_enter
0b5e4     00 26 06 F6 | 	mov	local01, #0
0b5e8     6C 01 B0 FD | 	call	#_getvalue
0b5ec                 | ' 
0b5ec                 | ' t3.result.uresult=0
0b5ec                 | ' err=getvalue() : if err>0 then return err     
0b5ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0b5f0     58 01 90 3D |  if_ae	jmp	#LR__0952
0b5f4     37 00 00 FF 
0b5f8     44 E4 05 F1 | 	add	objptr, ##28228
0b5fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b600     03 2C 66 F0 | 	shl	local04, #3
0b604     02 00 00 FF 
0b608     38 E4 85 F1 | 	sub	objptr, ##1080
0b60c     F2 2C 02 F1 | 	add	local04, objptr
0b610     04 2C 06 F1 | 	add	local04, #4
0b614     16 2F 02 FB | 	rdlong	local05, local04
0b618                 | ' op = lparts(ct).token
0b618                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b618     35 00 00 FF 
0b61c     0C E4 85 F1 | 	sub	objptr, ##27148
0b620                 | LR__0950
0b620     05 2E 0E F2 | 	cmp	local05, #5 wz
0b624     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b628     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b62c     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b630     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b634     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b638     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b63c     08 01 90 5D |  if_ne	jmp	#LR__0951
0b640     37 00 00 FF 
0b644     44 E4 05 F1 | 	add	objptr, ##28228
0b648     F2 2C 02 FB | 	rdlong	local04, objptr
0b64c     01 2C 06 F1 | 	add	local04, #1
0b650     F2 2C 62 FC | 	wrlong	local04, objptr
0b654     37 00 00 FF 
0b658     44 E4 85 F1 | 	sub	objptr, ##28228
0b65c     F8 00 B0 FD | 	call	#_getvalue
0b660                 | '   ct+=1
0b660                 | '   err=getvalue() :if err>0 then return err   
0b660     01 FA 15 F2 | 	cmp	result1, #1 wc
0b664     E4 00 90 3D |  if_ae	jmp	#LR__0952
0b668     17 2B 02 F6 | 	mov	local03, local05
0b66c     13 31 02 F6 | 	mov	local06, local01
0b670     14 33 02 F6 | 	mov	local07, local02
0b674     15 2F 02 F6 | 	mov	local05, local03
0b678     4A 00 00 FF 
0b67c     7C E4 05 F1 | 	add	objptr, ##38012
0b680     F2 2C 02 FB | 	rdlong	local04, objptr
0b684     16 FB 01 F6 | 	mov	result1, local04
0b688     01 FA 65 F0 | 	shl	result1, #1
0b68c     16 FB 01 F1 | 	add	result1, local04
0b690     02 FA 65 F0 | 	shl	result1, #2
0b694     03 00 00 FF 
0b698     00 E4 85 F1 | 	sub	objptr, ##1536
0b69c     F2 FA 01 F1 | 	add	result1, objptr
0b6a0     FD 30 62 FC | 	wrlong	local06, result1
0b6a4     03 00 00 FF 
0b6a8     00 E4 05 F1 | 	add	objptr, ##1536
0b6ac     F2 30 02 FB | 	rdlong	local06, objptr
0b6b0     18 2D 02 F6 | 	mov	local04, local06
0b6b4     01 2C 66 F0 | 	shl	local04, #1
0b6b8     18 2D 02 F1 | 	add	local04, local06
0b6bc     02 2C 66 F0 | 	shl	local04, #2
0b6c0     03 00 00 FF 
0b6c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b6c8     F2 2C 02 F1 | 	add	local04, objptr
0b6cc     04 2C 06 F1 | 	add	local04, #4
0b6d0     16 33 62 FC | 	wrlong	local07, local04
0b6d4     03 00 00 FF 
0b6d8     00 E4 05 F1 | 	add	objptr, ##1536
0b6dc     F2 32 02 FB | 	rdlong	local07, objptr
0b6e0     19 31 02 F6 | 	mov	local06, local07
0b6e4     01 30 66 F0 | 	shl	local06, #1
0b6e8     19 31 02 F1 | 	add	local06, local07
0b6ec     02 30 66 F0 | 	shl	local06, #2
0b6f0     03 00 00 FF 
0b6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b6f8     F2 30 02 F1 | 	add	local06, objptr
0b6fc     08 30 06 F1 | 	add	local06, #8
0b700     18 2F 62 FC | 	wrlong	local05, local06
0b704     03 00 00 FF 
0b708     00 E4 05 F1 | 	add	objptr, ##1536
0b70c     F2 30 02 FB | 	rdlong	local06, objptr
0b710     01 30 06 F1 | 	add	local06, #1
0b714     F2 30 62 FC | 	wrlong	local06, objptr
0b718     13 00 00 FF 
0b71c     38 E4 85 F1 | 	sub	objptr, ##9784
0b720     F2 2C 02 FB | 	rdlong	local04, objptr
0b724     03 2C 66 F0 | 	shl	local04, #3
0b728     02 00 00 FF 
0b72c     38 E4 85 F1 | 	sub	objptr, ##1080
0b730     F2 2C 02 F1 | 	add	local04, objptr
0b734     04 2C 06 F1 | 	add	local04, #4
0b738     16 2F 02 FB | 	rdlong	local05, local04
0b73c     35 00 00 FF 
0b740     0C E4 85 F1 | 	sub	objptr, ##27148
0b744     D8 FE 9F FD | 	jmp	#LR__0950
0b748                 | LR__0951
0b748                 | ' return 0
0b748     00 FA 05 F6 | 	mov	result1, #0
0b74c                 | LR__0952
0b74c     A7 F0 03 F6 | 	mov	ptra, fp
0b750     B2 00 A0 FD | 	call	#popregs_
0b754                 | _muldiv_ret
0b754     2D 00 64 FD | 	ret
0b758                 | 
0b758                 | ' 
0b758                 | ' ' Get a value for operations
0b758                 | ' 
0b758                 | ' function getvalue()  as ulong
0b758                 | _getvalue
0b758     0B 4A 05 F6 | 	mov	COUNT_, #11
0b75c     A8 00 A0 FD | 	call	#pushregs_
0b760                 | _getvalue_enter
0b760     01 2C 06 F6 | 	mov	local04, #1
0b764     00 26 06 F6 | 	mov	local01, #0
0b768     1D 2A 06 F6 | 	mov	local03, #29
0b76c     37 00 00 FF 
0b770     44 E4 05 F1 | 	add	objptr, ##28228
0b774     F2 16 02 FB | 	rdlong	arg03, objptr
0b778     03 16 66 F0 | 	shl	arg03, #3
0b77c     02 00 00 FF 
0b780     38 E4 85 F1 | 	sub	objptr, ##1080
0b784     F2 16 02 F1 | 	add	arg03, objptr
0b788     04 16 06 F1 | 	add	arg03, #4
0b78c     0B 2F 02 FB | 	rdlong	local05, arg03
0b790                 | ' 
0b790                 | ' m=1											' for negative numbers
0b790                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b790                 | ' op=lparts(ct).token
0b790                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b790     02 2E 0E F2 | 	cmp	local05, #2 wz
0b794     35 00 00 FF 
0b798     0C E4 85 F1 | 	sub	objptr, ##27148
0b79c     38 00 90 5D |  if_ne	jmp	#LR__0960
0b7a0     01 2C 66 F6 | 	neg	local04, #1
0b7a4     37 00 00 FF 
0b7a8     44 E4 05 F1 | 	add	objptr, ##28228
0b7ac     F2 2E 02 FB | 	rdlong	local05, objptr
0b7b0     01 2E 06 F1 | 	add	local05, #1
0b7b4     F2 2E 62 FC | 	wrlong	local05, objptr
0b7b8     03 2E 66 F0 | 	shl	local05, #3
0b7bc     02 00 00 FF 
0b7c0     38 E4 85 F1 | 	sub	objptr, ##1080
0b7c4     F2 2E 02 F1 | 	add	local05, objptr
0b7c8     04 2E 06 F1 | 	add	local05, #4
0b7cc     17 2F 02 FB | 	rdlong	local05, local05
0b7d0     35 00 00 FF 
0b7d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b7d8                 | LR__0960
0b7d8                 | ' select case op
0b7d8     01 00 00 FF 
0b7dc     00 2E 0E F2 | 	cmp	local05, ##512 wz
0b7e0     44 00 90 AD |  if_e	jmp	#LR__0961
0b7e4     01 00 00 FF 
0b7e8     01 2E 0E F2 | 	cmp	local05, ##513 wz
0b7ec     90 01 90 AD |  if_e	jmp	#LR__0964
0b7f0     01 00 00 FF 
0b7f4     02 2E 0E F2 | 	cmp	local05, ##514 wz
0b7f8     44 04 90 AD |  if_e	jmp	#LR__0971
0b7fc     01 00 00 FF 
0b800     03 2E 0E F2 | 	cmp	local05, ##515 wz
0b804     A8 05 90 AD |  if_e	jmp	#LR__0974
0b808     2C 2E 0E F2 | 	cmp	local05, #44 wz
0b80c     78 07 90 AD |  if_e	jmp	#LR__0979
0b810     01 00 00 FF 
0b814     04 2E 0E F2 | 	cmp	local05, ##516 wz
0b818     70 08 90 AD |  if_e	jmp	#LR__0980
0b81c     15 2E 0E F2 | 	cmp	local05, #21 wz
0b820     98 08 90 AD |  if_e	jmp	#LR__0981
0b824     10 09 90 FD | 	jmp	#LR__0982
0b828                 | LR__0961
0b828                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0b828     01 2C 0E F2 | 	cmp	local04, #1 wz
0b82c     3C 00 90 5D |  if_ne	jmp	#LR__0962
0b830     37 00 00 FF 
0b834     44 E4 05 F1 | 	add	objptr, ##28228
0b838     F2 2E 02 FB | 	rdlong	local05, objptr
0b83c     03 2E 66 F0 | 	shl	local05, #3
0b840     02 00 00 FF 
0b844     38 E4 85 F1 | 	sub	objptr, ##1080
0b848     F2 2E 02 F1 | 	add	local05, objptr
0b84c     17 13 02 FB | 	rdlong	arg01, local05
0b850     00 14 06 F6 | 	mov	arg02, #0
0b854     35 00 00 FF 
0b858     0C E4 85 F1 | 	sub	objptr, ##27148
0b85c     A4 B9 B1 FD | 	call	#__system____builtin_atoi
0b860     FD 2C 02 FD | 	qmul	local04, result1
0b864     18 26 62 FD | 	getqx	local01
0b868     1C 2A 06 F6 | 	mov	local03, #28
0b86c                 | LR__0962
0b86c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0b86c     FF FF 7F FF 
0b870     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b874     3C 00 90 5D |  if_ne	jmp	#LR__0963
0b878     37 00 00 FF 
0b87c     44 E4 05 F1 | 	add	objptr, ##28228
0b880     F2 2E 02 FB | 	rdlong	local05, objptr
0b884     03 2E 66 F0 | 	shl	local05, #3
0b888     02 00 00 FF 
0b88c     38 E4 85 F1 | 	sub	objptr, ##1080
0b890     F2 2E 02 F1 | 	add	local05, objptr
0b894     17 13 02 FB | 	rdlong	arg01, local05
0b898     00 14 06 F6 | 	mov	arg02, #0
0b89c     35 00 00 FF 
0b8a0     0C E4 85 F1 | 	sub	objptr, ##27148
0b8a4     5C B9 B1 FD | 	call	#__system____builtin_atoi
0b8a8     FD 2C 02 FD | 	qmul	local04, result1
0b8ac     18 26 62 FD | 	getqx	local01
0b8b0     1C 2A 06 F6 | 	mov	local03, #28
0b8b4                 | LR__0963
0b8b4     13 31 02 F6 | 	mov	local06, local01
0b8b8     14 33 02 F6 | 	mov	local07, local02
0b8bc     15 2F 02 F6 | 	mov	local05, local03
0b8c0     4A 00 00 FF 
0b8c4     7C E4 05 F1 | 	add	objptr, ##38012
0b8c8     F2 26 02 FB | 	rdlong	local01, objptr
0b8cc     13 2D 02 F6 | 	mov	local04, local01
0b8d0     01 2C 66 F0 | 	shl	local04, #1
0b8d4     13 2D 02 F1 | 	add	local04, local01
0b8d8     02 2C 66 F0 | 	shl	local04, #2
0b8dc     03 00 00 FF 
0b8e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b8e4     F2 2C 02 F1 | 	add	local04, objptr
0b8e8     16 31 62 FC | 	wrlong	local06, local04
0b8ec     03 00 00 FF 
0b8f0     00 E4 05 F1 | 	add	objptr, ##1536
0b8f4     F2 30 02 FB | 	rdlong	local06, objptr
0b8f8     18 27 02 F6 | 	mov	local01, local06
0b8fc     01 26 66 F0 | 	shl	local01, #1
0b900     18 27 02 F1 | 	add	local01, local06
0b904     02 26 66 F0 | 	shl	local01, #2
0b908     03 00 00 FF 
0b90c     00 E4 85 F1 | 	sub	objptr, ##1536
0b910     F2 26 02 F1 | 	add	local01, objptr
0b914     04 26 06 F1 | 	add	local01, #4
0b918     13 33 62 FC | 	wrlong	local07, local01
0b91c     03 00 00 FF 
0b920     00 E4 05 F1 | 	add	objptr, ##1536
0b924     F2 32 02 FB | 	rdlong	local07, objptr
0b928     19 31 02 F6 | 	mov	local06, local07
0b92c     01 30 66 F0 | 	shl	local06, #1
0b930     19 31 02 F1 | 	add	local06, local07
0b934     02 30 66 F0 | 	shl	local06, #2
0b938     03 00 00 FF 
0b93c     00 E4 85 F1 | 	sub	objptr, ##1536
0b940     F2 30 02 F1 | 	add	local06, objptr
0b944     08 30 06 F1 | 	add	local06, #8
0b948     18 2F 62 FC | 	wrlong	local05, local06
0b94c     03 00 00 FF 
0b950     00 E4 05 F1 | 	add	objptr, ##1536
0b954     F2 30 02 FB | 	rdlong	local06, objptr
0b958     01 30 06 F1 | 	add	local06, #1
0b95c     F2 30 62 FC | 	wrlong	local06, objptr
0b960     13 00 00 FF 
0b964     38 E4 85 F1 | 	sub	objptr, ##9784
0b968     F2 30 02 FB | 	rdlong	local06, objptr
0b96c     01 30 06 F1 | 	add	local06, #1
0b970     F2 30 62 FC | 	wrlong	local06, objptr
0b974     37 00 00 FF 
0b978     44 E4 85 F1 | 	sub	objptr, ##28228
0b97c     E4 07 90 FD | 	jmp	#LR__0983
0b980                 | LR__0964
0b980                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0b980     37 00 00 FF 
0b984     44 E4 05 F1 | 	add	objptr, ##28228
0b988     F2 16 02 FB | 	rdlong	arg03, objptr
0b98c     03 16 66 F0 | 	shl	arg03, #3
0b990     02 00 00 FF 
0b994     38 E4 85 F1 | 	sub	objptr, ##1080
0b998     F2 16 02 F1 | 	add	arg03, objptr
0b99c     0B 13 02 FB | 	rdlong	arg01, arg03
0b9a0     01 14 06 F6 | 	mov	arg02, #1
0b9a4     35 00 00 FF 
0b9a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9ac     E0 A3 B1 FD | 	call	#__system__Left_S
0b9b0     FD 12 02 F6 | 	mov	arg01, result1
0b9b4     9F 01 00 FF 
0b9b8     32 15 06 F6 | 	mov	arg02, ##@LR__5670
0b9bc     7C 83 B1 FD | 	call	#__system___string_cmp
0b9c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b9c4     94 00 90 5D |  if_ne	jmp	#LR__0967
0b9c8     37 00 00 FF 
0b9cc     44 E4 05 F1 | 	add	objptr, ##28228
0b9d0     F2 32 02 FB | 	rdlong	local07, objptr
0b9d4     19 31 02 F6 | 	mov	local06, local07
0b9d8     03 30 66 F0 | 	shl	local06, #3
0b9dc     02 00 00 FF 
0b9e0     38 E4 85 F1 | 	sub	objptr, ##1080
0b9e4     F2 30 02 F1 | 	add	local06, objptr
0b9e8     9F 01 00 FF 
0b9ec     34 2F 06 F6 | 	mov	local05, ##@LR__5671
0b9f0     03 32 66 F0 | 	shl	local07, #3
0b9f4     F2 32 02 F1 | 	add	local07, objptr
0b9f8     19 33 02 FB | 	rdlong	local07, local07
0b9fc     02 00 00 FF 
0ba00     38 E4 05 F1 | 	add	objptr, ##1080
0ba04     F2 26 02 FB | 	rdlong	local01, objptr
0ba08     03 26 66 F0 | 	shl	local01, #3
0ba0c     02 00 00 FF 
0ba10     38 E4 85 F1 | 	sub	objptr, ##1080
0ba14     F2 26 02 F1 | 	add	local01, objptr
0ba18     13 13 02 FB | 	rdlong	arg01, local01
0ba1c     35 00 00 FF 
0ba20     0C E4 85 F1 | 	sub	objptr, ##27148
0ba24     09 35 02 F6 | 	mov	local08, arg01
0ba28     97 06 48 FB | 	callpa	#(@LR__0966-@LR__0965)>>2,fcache_load_ptr_
0ba2c                 | LR__0965
0ba2c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0ba30     01 34 06 51 |  if_ne	add	local08, #1
0ba34     F4 FF 9F 5D |  if_ne	jmp	#LR__0965
0ba38                 | LR__0966
0ba38     09 35 82 F1 | 	sub	local08, arg01
0ba3c     1A 15 02 F6 | 	mov	arg02, local08
0ba40     01 14 86 F1 | 	sub	arg02, #1
0ba44     19 13 02 F6 | 	mov	arg01, local07
0ba48     CC A3 B1 FD | 	call	#__system__Right_S
0ba4c     FD 14 02 F6 | 	mov	arg02, result1
0ba50     17 13 02 F6 | 	mov	arg01, local05
0ba54     18 83 B1 FD | 	call	#__system___string_concat
0ba58     18 FB 61 FC | 	wrlong	result1, local06
0ba5c                 | LR__0967
0ba5c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0ba5c     37 00 00 FF 
0ba60     44 E4 05 F1 | 	add	objptr, ##28228
0ba64     F2 16 02 FB | 	rdlong	arg03, objptr
0ba68     03 16 66 F0 | 	shl	arg03, #3
0ba6c     02 00 00 FF 
0ba70     38 E4 85 F1 | 	sub	objptr, ##1080
0ba74     F2 16 02 F1 | 	add	arg03, objptr
0ba78     0B 13 02 FB | 	rdlong	arg01, arg03
0ba7c     01 14 06 F6 | 	mov	arg02, #1
0ba80     35 00 00 FF 
0ba84     0C E4 85 F1 | 	sub	objptr, ##27148
0ba88     04 A3 B1 FD | 	call	#__system__Left_S
0ba8c     FD 12 02 F6 | 	mov	arg01, result1
0ba90     9F 01 00 FF 
0ba94     37 15 06 F6 | 	mov	arg02, ##@LR__5672
0ba98     A0 82 B1 FD | 	call	#__system___string_cmp
0ba9c     00 FA 0D F2 | 	cmp	result1, #0 wz
0baa0     94 00 90 5D |  if_ne	jmp	#LR__0970
0baa4     37 00 00 FF 
0baa8     44 E4 05 F1 | 	add	objptr, ##28228
0baac     F2 32 02 FB | 	rdlong	local07, objptr
0bab0     19 31 02 F6 | 	mov	local06, local07
0bab4     03 30 66 F0 | 	shl	local06, #3
0bab8     02 00 00 FF 
0babc     38 E4 85 F1 | 	sub	objptr, ##1080
0bac0     F2 30 02 F1 | 	add	local06, objptr
0bac4     9F 01 00 FF 
0bac8     39 2F 06 F6 | 	mov	local05, ##@LR__5673
0bacc     03 32 66 F0 | 	shl	local07, #3
0bad0     F2 32 02 F1 | 	add	local07, objptr
0bad4     19 33 02 FB | 	rdlong	local07, local07
0bad8     02 00 00 FF 
0badc     38 E4 05 F1 | 	add	objptr, ##1080
0bae0     F2 26 02 FB | 	rdlong	local01, objptr
0bae4     03 26 66 F0 | 	shl	local01, #3
0bae8     02 00 00 FF 
0baec     38 E4 85 F1 | 	sub	objptr, ##1080
0baf0     F2 26 02 F1 | 	add	local01, objptr
0baf4     13 13 02 FB | 	rdlong	arg01, local01
0baf8     35 00 00 FF 
0bafc     0C E4 85 F1 | 	sub	objptr, ##27148
0bb00     09 35 02 F6 | 	mov	local08, arg01
0bb04     97 06 48 FB | 	callpa	#(@LR__0969-@LR__0968)>>2,fcache_load_ptr_
0bb08                 | LR__0968
0bb08     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bb0c     01 34 06 51 |  if_ne	add	local08, #1
0bb10     F4 FF 9F 5D |  if_ne	jmp	#LR__0968
0bb14                 | LR__0969
0bb14     09 35 82 F1 | 	sub	local08, arg01
0bb18     1A 15 02 F6 | 	mov	arg02, local08
0bb1c     01 14 86 F1 | 	sub	arg02, #1
0bb20     19 13 02 F6 | 	mov	arg01, local07
0bb24     F0 A2 B1 FD | 	call	#__system__Right_S
0bb28     FD 14 02 F6 | 	mov	arg02, result1
0bb2c     17 13 02 F6 | 	mov	arg01, local05
0bb30     3C 82 B1 FD | 	call	#__system___string_concat
0bb34     18 FB 61 FC | 	wrlong	result1, local06
0bb38                 | LR__0970
0bb38     37 00 00 FF 
0bb3c     44 E4 05 F1 | 	add	objptr, ##28228
0bb40     F2 30 02 FB | 	rdlong	local06, objptr
0bb44     03 30 66 F0 | 	shl	local06, #3
0bb48     02 00 00 FF 
0bb4c     38 E4 85 F1 | 	sub	objptr, ##1080
0bb50     F2 30 02 F1 | 	add	local06, objptr
0bb54     18 13 02 FB | 	rdlong	arg01, local06
0bb58     00 14 06 F6 | 	mov	arg02, #0
0bb5c     35 00 00 FF 
0bb60     0C E4 85 F1 | 	sub	objptr, ##27148
0bb64     9C B6 B1 FD | 	call	#__system____builtin_atoi
0bb68     FD 2C 02 FD | 	qmul	local04, result1
0bb6c     4A 00 00 FF 
0bb70     7C E4 05 F1 | 	add	objptr, ##38012
0bb74     F2 30 02 FB | 	rdlong	local06, objptr
0bb78     18 37 02 F6 | 	mov	local09, local06
0bb7c     01 36 66 F0 | 	shl	local09, #1
0bb80     18 37 02 F1 | 	add	local09, local06
0bb84     02 36 66 F0 | 	shl	local09, #2
0bb88     03 00 00 FF 
0bb8c     00 E4 85 F1 | 	sub	objptr, ##1536
0bb90     F2 36 02 F1 | 	add	local09, objptr
0bb94     03 00 00 FF 
0bb98     00 E4 05 F1 | 	add	objptr, ##1536
0bb9c     18 26 62 FD | 	getqx	local01
0bba0     1C 2A 06 F6 | 	mov	local03, #28
0bba4     13 31 02 F6 | 	mov	local06, local01
0bba8     14 33 02 F6 | 	mov	local07, local02
0bbac     1B 31 62 FC | 	wrlong	local06, local09
0bbb0     15 37 02 F6 | 	mov	local09, local03
0bbb4     F2 30 02 FB | 	rdlong	local06, objptr
0bbb8     18 2F 02 F6 | 	mov	local05, local06
0bbbc     01 2E 66 F0 | 	shl	local05, #1
0bbc0     18 2F 02 F1 | 	add	local05, local06
0bbc4     02 2E 66 F0 | 	shl	local05, #2
0bbc8     03 00 00 FF 
0bbcc     00 E4 85 F1 | 	sub	objptr, ##1536
0bbd0     F2 2E 02 F1 | 	add	local05, objptr
0bbd4     04 2E 06 F1 | 	add	local05, #4
0bbd8     17 33 62 FC | 	wrlong	local07, local05
0bbdc     03 00 00 FF 
0bbe0     00 E4 05 F1 | 	add	objptr, ##1536
0bbe4     F2 32 02 FB | 	rdlong	local07, objptr
0bbe8     19 31 02 F6 | 	mov	local06, local07
0bbec     01 30 66 F0 | 	shl	local06, #1
0bbf0     19 31 02 F1 | 	add	local06, local07
0bbf4     02 30 66 F0 | 	shl	local06, #2
0bbf8     03 00 00 FF 
0bbfc     00 E4 85 F1 | 	sub	objptr, ##1536
0bc00     F2 30 02 F1 | 	add	local06, objptr
0bc04     08 30 06 F1 | 	add	local06, #8
0bc08     18 37 62 FC | 	wrlong	local09, local06
0bc0c     03 00 00 FF 
0bc10     00 E4 05 F1 | 	add	objptr, ##1536
0bc14     F2 30 02 FB | 	rdlong	local06, objptr
0bc18     01 30 06 F1 | 	add	local06, #1
0bc1c     F2 30 62 FC | 	wrlong	local06, objptr
0bc20     13 00 00 FF 
0bc24     38 E4 85 F1 | 	sub	objptr, ##9784
0bc28     F2 30 02 FB | 	rdlong	local06, objptr
0bc2c     01 30 06 F1 | 	add	local06, #1
0bc30     F2 30 62 FC | 	wrlong	local06, objptr
0bc34     37 00 00 FF 
0bc38     44 E4 85 F1 | 	sub	objptr, ##28228
0bc3c     24 05 90 FD | 	jmp	#LR__0983
0bc40                 | LR__0971
0bc40                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bc40     01 2C 0E F2 | 	cmp	local04, #1 wz
0bc44     48 00 90 5D |  if_ne	jmp	#LR__0972
0bc48     00 C0 1F FF 
0bc4c     00 30 06 F6 | 	mov	local06, ##1065353216
0bc50     37 00 00 FF 
0bc54     44 E4 05 F1 | 	add	objptr, ##28228
0bc58     F2 36 02 FB | 	rdlong	local09, objptr
0bc5c     03 36 66 F0 | 	shl	local09, #3
0bc60     02 00 00 FF 
0bc64     38 E4 85 F1 | 	sub	objptr, ##1080
0bc68     F2 36 02 F1 | 	add	local09, objptr
0bc6c     1B 13 02 FB | 	rdlong	arg01, local09
0bc70     35 00 00 FF 
0bc74     0C E4 85 F1 | 	sub	objptr, ##27148
0bc78     1C B7 B1 FD | 	call	#__system____builtin_atof
0bc7c     FD 14 02 F6 | 	mov	arg02, result1
0bc80     18 13 02 F6 | 	mov	arg01, local06
0bc84     04 AF B1 FD | 	call	#__system___float_mul
0bc88     FD 26 02 F6 | 	mov	local01, result1
0bc8c     1E 2A 06 F6 | 	mov	local03, #30
0bc90                 | LR__0972
0bc90                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0bc90     FF FF 7F FF 
0bc94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0bc98     48 00 90 5D |  if_ne	jmp	#LR__0973
0bc9c     00 C0 5F FF 
0bca0     00 30 06 F6 | 	mov	local06, ##-1082130432
0bca4     37 00 00 FF 
0bca8     44 E4 05 F1 | 	add	objptr, ##28228
0bcac     F2 36 02 FB | 	rdlong	local09, objptr
0bcb0     03 36 66 F0 | 	shl	local09, #3
0bcb4     02 00 00 FF 
0bcb8     38 E4 85 F1 | 	sub	objptr, ##1080
0bcbc     F2 36 02 F1 | 	add	local09, objptr
0bcc0     1B 13 02 FB | 	rdlong	arg01, local09
0bcc4     35 00 00 FF 
0bcc8     0C E4 85 F1 | 	sub	objptr, ##27148
0bccc     C8 B6 B1 FD | 	call	#__system____builtin_atof
0bcd0     FD 14 02 F6 | 	mov	arg02, result1
0bcd4     18 13 02 F6 | 	mov	arg01, local06
0bcd8     B0 AE B1 FD | 	call	#__system___float_mul
0bcdc     FD 26 02 F6 | 	mov	local01, result1
0bce0     1E 2A 06 F6 | 	mov	local03, #30
0bce4                 | LR__0973
0bce4     13 31 02 F6 | 	mov	local06, local01
0bce8     14 33 02 F6 | 	mov	local07, local02
0bcec     15 2F 02 F6 | 	mov	local05, local03
0bcf0     4A 00 00 FF 
0bcf4     7C E4 05 F1 | 	add	objptr, ##38012
0bcf8     F2 26 02 FB | 	rdlong	local01, objptr
0bcfc     13 37 02 F6 | 	mov	local09, local01
0bd00     01 36 66 F0 | 	shl	local09, #1
0bd04     13 37 02 F1 | 	add	local09, local01
0bd08     02 36 66 F0 | 	shl	local09, #2
0bd0c     03 00 00 FF 
0bd10     00 E4 85 F1 | 	sub	objptr, ##1536
0bd14     F2 36 02 F1 | 	add	local09, objptr
0bd18     1B 31 62 FC | 	wrlong	local06, local09
0bd1c     03 00 00 FF 
0bd20     00 E4 05 F1 | 	add	objptr, ##1536
0bd24     F2 36 02 FB | 	rdlong	local09, objptr
0bd28     1B 31 02 F6 | 	mov	local06, local09
0bd2c     01 30 66 F0 | 	shl	local06, #1
0bd30     1B 31 02 F1 | 	add	local06, local09
0bd34     02 30 66 F0 | 	shl	local06, #2
0bd38     03 00 00 FF 
0bd3c     00 E4 85 F1 | 	sub	objptr, ##1536
0bd40     F2 30 02 F1 | 	add	local06, objptr
0bd44     04 30 06 F1 | 	add	local06, #4
0bd48     18 33 62 FC | 	wrlong	local07, local06
0bd4c     03 00 00 FF 
0bd50     00 E4 05 F1 | 	add	objptr, ##1536
0bd54     F2 36 02 FB | 	rdlong	local09, objptr
0bd58     1B 33 02 F6 | 	mov	local07, local09
0bd5c     01 32 66 F0 | 	shl	local07, #1
0bd60     1B 33 02 F1 | 	add	local07, local09
0bd64     02 32 66 F0 | 	shl	local07, #2
0bd68     03 00 00 FF 
0bd6c     00 E4 85 F1 | 	sub	objptr, ##1536
0bd70     F2 32 02 F1 | 	add	local07, objptr
0bd74     08 32 06 F1 | 	add	local07, #8
0bd78     19 2F 62 FC | 	wrlong	local05, local07
0bd7c     03 00 00 FF 
0bd80     00 E4 05 F1 | 	add	objptr, ##1536
0bd84     F2 30 02 FB | 	rdlong	local06, objptr
0bd88     01 30 06 F1 | 	add	local06, #1
0bd8c     F2 30 62 FC | 	wrlong	local06, objptr
0bd90     13 00 00 FF 
0bd94     38 E4 85 F1 | 	sub	objptr, ##9784
0bd98     F2 30 02 FB | 	rdlong	local06, objptr
0bd9c     01 30 06 F1 | 	add	local06, #1
0bda0     F2 30 62 FC | 	wrlong	local06, objptr
0bda4     37 00 00 FF 
0bda8     44 E4 85 F1 | 	sub	objptr, ##28228
0bdac     B4 03 90 FD | 	jmp	#LR__0983
0bdb0                 | LR__0974
0bdb0     37 00 00 FF 
0bdb4     44 E4 05 F1 | 	add	objptr, ##28228
0bdb8     F2 16 02 FB | 	rdlong	arg03, objptr
0bdbc     03 16 66 F0 | 	shl	arg03, #3
0bdc0     02 00 00 FF 
0bdc4     38 E4 85 F1 | 	sub	objptr, ##1080
0bdc8     F2 16 02 F1 | 	add	arg03, objptr
0bdcc     0B 13 02 FB | 	rdlong	arg01, arg03
0bdd0     35 00 00 FF 
0bdd4     0C E4 85 F1 | 	sub	objptr, ##27148
0bdd8     09 35 02 F6 | 	mov	local08, arg01
0bddc     97 06 48 FB | 	callpa	#(@LR__0976-@LR__0975)>>2,fcache_load_ptr_
0bde0                 | LR__0975
0bde0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bde4     01 34 06 51 |  if_ne	add	local08, #1
0bde8     F4 FF 9F 5D |  if_ne	jmp	#LR__0975
0bdec                 | LR__0976
0bdec     09 35 82 F1 | 	sub	local08, arg01
0bdf0     1A FB 01 F6 | 	mov	result1, local08
0bdf4     52 00 00 FF 
0bdf8     00 E4 05 F1 | 	add	objptr, ##41984
0bdfc     F2 FA 61 FC | 	wrlong	result1, objptr
0be00     54 E4 85 F1 | 	sub	objptr, #84
0be04     F2 12 02 FB | 	rdlong	arg01, objptr
0be08     FD 12 82 F1 | 	sub	arg01, result1
0be0c     04 12 86 F1 | 	sub	arg01, #4
0be10     03 12 26 F5 | 	andn	arg01, #3
0be14     F2 12 62 FC | 	wrlong	arg01, objptr
0be18     54 E4 05 F1 | 	add	objptr, #84
0be1c     F2 14 02 FB | 	rdlong	arg02, objptr
0be20     52 00 00 FF 
0be24     00 E4 85 F1 | 	sub	objptr, ##41984
0be28     E4 46 B1 FD | 	call	#_pslpoke
0be2c                 | '     pslpoke memtop,l
0be2c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0be2c     01 38 06 F6 | 	mov	local10, #1
0be30     52 00 00 FF 
0be34     00 E4 05 F1 | 	add	objptr, ##41984
0be38     F2 3A 02 FB | 	rdlong	local11, objptr
0be3c     52 00 00 FF 
0be40     00 E4 85 F1 | 	sub	objptr, ##41984
0be44     01 3A 06 F1 | 	add	local11, #1
0be48                 | LR__0977
0be48     1D 39 52 F2 | 	cmps	local10, local11 wc
0be4c     5C 00 90 3D |  if_ae	jmp	#LR__0978
0be50     51 00 00 FF 
0be54     AC E5 05 F1 | 	add	objptr, ##41900
0be58     F2 32 02 FB | 	rdlong	local07, objptr
0be5c     03 32 06 F1 | 	add	local07, #3
0be60     1C 33 02 F1 | 	add	local07, local10
0be64     1A 00 00 FF 
0be68     68 E5 85 F1 | 	sub	objptr, ##13672
0be6c     F2 36 02 FB | 	rdlong	local09, objptr
0be70     03 36 66 F0 | 	shl	local09, #3
0be74     02 00 00 FF 
0be78     38 E4 85 F1 | 	sub	objptr, ##1080
0be7c     F2 36 02 F1 | 	add	local09, objptr
0be80     1B 13 02 FB | 	rdlong	arg01, local09
0be84     1C 15 02 F6 | 	mov	arg02, local10
0be88     01 16 06 F6 | 	mov	arg03, #1
0be8c     35 00 00 FF 
0be90     0C E4 85 F1 | 	sub	objptr, ##27148
0be94     10 A0 B1 FD | 	call	#__system__Mid_S
0be98     FD 14 C2 FA | 	rdbyte	arg02, result1
0be9c     19 13 02 F6 | 	mov	arg01, local07
0bea0     FC 46 B1 FD | 	call	#_pspoke
0bea4     01 38 06 F1 | 	add	local10, #1
0bea8     9C FF 9F FD | 	jmp	#LR__0977
0beac                 | LR__0978
0beac     51 00 00 FF 
0beb0     AC E5 05 F1 | 	add	objptr, ##41900
0beb4     F2 26 02 FB | 	rdlong	local01, objptr
0beb8     2B 2A 06 F6 | 	mov	local03, #43
0bebc     13 31 02 F6 | 	mov	local06, local01
0bec0     14 33 02 F6 | 	mov	local07, local02
0bec4     15 3B 02 F6 | 	mov	local11, local03
0bec8     07 00 00 FF 
0becc     30 E5 85 F1 | 	sub	objptr, ##3888
0bed0     F2 38 02 FB | 	rdlong	local10, objptr
0bed4     1C 37 02 F6 | 	mov	local09, local10
0bed8     01 36 66 F0 | 	shl	local09, #1
0bedc     1C 37 02 F1 | 	add	local09, local10
0bee0     02 36 66 F0 | 	shl	local09, #2
0bee4     03 00 00 FF 
0bee8     00 E4 85 F1 | 	sub	objptr, ##1536
0beec     F2 36 02 F1 | 	add	local09, objptr
0bef0     1B 31 62 FC | 	wrlong	local06, local09
0bef4     03 00 00 FF 
0bef8     00 E4 05 F1 | 	add	objptr, ##1536
0befc     F2 38 02 FB | 	rdlong	local10, objptr
0bf00     1C 37 02 F6 | 	mov	local09, local10
0bf04     01 36 66 F0 | 	shl	local09, #1
0bf08     1C 37 02 F1 | 	add	local09, local10
0bf0c     02 36 66 F0 | 	shl	local09, #2
0bf10     03 00 00 FF 
0bf14     00 E4 85 F1 | 	sub	objptr, ##1536
0bf18     F2 36 02 F1 | 	add	local09, objptr
0bf1c     04 36 06 F1 | 	add	local09, #4
0bf20     1B 33 62 FC | 	wrlong	local07, local09
0bf24     03 00 00 FF 
0bf28     00 E4 05 F1 | 	add	objptr, ##1536
0bf2c     F2 38 02 FB | 	rdlong	local10, objptr
0bf30     1C 37 02 F6 | 	mov	local09, local10
0bf34     01 36 66 F0 | 	shl	local09, #1
0bf38     1C 37 02 F1 | 	add	local09, local10
0bf3c     02 36 66 F0 | 	shl	local09, #2
0bf40     03 00 00 FF 
0bf44     00 E4 85 F1 | 	sub	objptr, ##1536
0bf48     F2 36 02 F1 | 	add	local09, objptr
0bf4c     08 36 06 F1 | 	add	local09, #8
0bf50     1B 3B 62 FC | 	wrlong	local11, local09
0bf54     03 00 00 FF 
0bf58     00 E4 05 F1 | 	add	objptr, ##1536
0bf5c     F2 30 02 FB | 	rdlong	local06, objptr
0bf60     01 30 06 F1 | 	add	local06, #1
0bf64     F2 30 62 FC | 	wrlong	local06, objptr
0bf68     13 00 00 FF 
0bf6c     38 E4 85 F1 | 	sub	objptr, ##9784
0bf70     F2 30 02 FB | 	rdlong	local06, objptr
0bf74     01 30 06 F1 | 	add	local06, #1
0bf78     F2 30 62 FC | 	wrlong	local06, objptr
0bf7c     37 00 00 FF 
0bf80     44 E4 85 F1 | 	sub	objptr, ##28228
0bf84     DC 01 90 FD | 	jmp	#LR__0983
0bf88                 | LR__0979
0bf88     2C 2A 06 F6 | 	mov	local03, #44
0bf8c     37 00 00 FF 
0bf90     44 E4 05 F1 | 	add	objptr, ##28228
0bf94     F2 30 02 FB | 	rdlong	local06, objptr
0bf98     03 30 66 F0 | 	shl	local06, #3
0bf9c     02 00 00 FF 
0bfa0     38 E4 85 F1 | 	sub	objptr, ##1080
0bfa4     F2 30 02 F1 | 	add	local06, objptr
0bfa8     18 13 02 FB | 	rdlong	arg01, local06
0bfac     00 14 06 F6 | 	mov	arg02, #0
0bfb0     35 00 00 FF 
0bfb4     0C E4 85 F1 | 	sub	objptr, ##27148
0bfb8     48 B2 B1 FD | 	call	#__system____builtin_atoi
0bfbc     FD 26 02 F6 | 	mov	local01, result1
0bfc0     13 31 02 F6 | 	mov	local06, local01
0bfc4     14 33 02 F6 | 	mov	local07, local02
0bfc8     15 3B 02 F6 | 	mov	local11, local03
0bfcc     4A 00 00 FF 
0bfd0     7C E4 05 F1 | 	add	objptr, ##38012
0bfd4     F2 38 02 FB | 	rdlong	local10, objptr
0bfd8     1C 37 02 F6 | 	mov	local09, local10
0bfdc     01 36 66 F0 | 	shl	local09, #1
0bfe0     1C 37 02 F1 | 	add	local09, local10
0bfe4     02 36 66 F0 | 	shl	local09, #2
0bfe8     03 00 00 FF 
0bfec     00 E4 85 F1 | 	sub	objptr, ##1536
0bff0     F2 36 02 F1 | 	add	local09, objptr
0bff4     1B 31 62 FC | 	wrlong	local06, local09
0bff8     03 00 00 FF 
0bffc     00 E4 05 F1 | 	add	objptr, ##1536
0c000     F2 38 02 FB | 	rdlong	local10, objptr
0c004     1C 37 02 F6 | 	mov	local09, local10
0c008     01 36 66 F0 | 	shl	local09, #1
0c00c     1C 37 02 F1 | 	add	local09, local10
0c010     02 36 66 F0 | 	shl	local09, #2
0c014     03 00 00 FF 
0c018     00 E4 85 F1 | 	sub	objptr, ##1536
0c01c     F2 36 02 F1 | 	add	local09, objptr
0c020     04 36 06 F1 | 	add	local09, #4
0c024     1B 33 62 FC | 	wrlong	local07, local09
0c028     03 00 00 FF 
0c02c     00 E4 05 F1 | 	add	objptr, ##1536
0c030     F2 38 02 FB | 	rdlong	local10, objptr
0c034     1C 37 02 F6 | 	mov	local09, local10
0c038     01 36 66 F0 | 	shl	local09, #1
0c03c     1C 37 02 F1 | 	add	local09, local10
0c040     02 36 66 F0 | 	shl	local09, #2
0c044     03 00 00 FF 
0c048     00 E4 85 F1 | 	sub	objptr, ##1536
0c04c     F2 36 02 F1 | 	add	local09, objptr
0c050     08 36 06 F1 | 	add	local09, #8
0c054     1B 3B 62 FC | 	wrlong	local11, local09
0c058     03 00 00 FF 
0c05c     00 E4 05 F1 | 	add	objptr, ##1536
0c060     F2 30 02 FB | 	rdlong	local06, objptr
0c064     01 30 06 F1 | 	add	local06, #1
0c068     F2 30 62 FC | 	wrlong	local06, objptr
0c06c     13 00 00 FF 
0c070     38 E4 85 F1 | 	sub	objptr, ##9784
0c074     F2 30 02 FB | 	rdlong	local06, objptr
0c078     01 30 06 F1 | 	add	local06, #1
0c07c     F2 30 62 FC | 	wrlong	local06, objptr
0c080     37 00 00 FF 
0c084     44 E4 85 F1 | 	sub	objptr, ##28228
0c088     D8 00 90 FD | 	jmp	#LR__0983
0c08c                 | LR__0980
0c08c     16 13 02 F6 | 	mov	arg01, local04
0c090     24 04 B0 FD | 	call	#_getvar
0c094     37 00 00 FF 
0c098     44 E4 05 F1 | 	add	objptr, ##28228
0c09c     F2 30 02 FB | 	rdlong	local06, objptr
0c0a0     01 30 06 F1 | 	add	local06, #1
0c0a4     F2 30 62 FC | 	wrlong	local06, objptr
0c0a8     37 00 00 FF 
0c0ac     44 E4 85 F1 | 	sub	objptr, ##28228
0c0b0                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c0b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c0b4     B0 00 90 3D |  if_ae	jmp	#LR__0984
0c0b8     A8 00 90 FD | 	jmp	#LR__0983
0c0bc                 | LR__0981
0c0bc     37 00 00 FF 
0c0c0     44 E4 05 F1 | 	add	objptr, ##28228
0c0c4     F2 30 02 FB | 	rdlong	local06, objptr
0c0c8     01 30 06 F1 | 	add	local06, #1
0c0cc     F2 30 62 FC | 	wrlong	local06, objptr
0c0d0     37 00 00 FF 
0c0d4     44 E4 85 F1 | 	sub	objptr, ##28228
0c0d8     20 F1 BF FD | 	call	#_expr
0c0dc                 | '     ct+=1
0c0dc                 | '     err=expr() : if err>0 then return err 
0c0dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c0e0     84 00 90 3D |  if_ae	jmp	#LR__0984
0c0e4                 | '     if lparts(ct).token=token_rpar then ct+=1
0c0e4     37 00 00 FF 
0c0e8     44 E4 05 F1 | 	add	objptr, ##28228
0c0ec     F2 3A 02 FB | 	rdlong	local11, objptr
0c0f0     03 3A 66 F0 | 	shl	local11, #3
0c0f4     02 00 00 FF 
0c0f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c0fc     F2 3A 02 F1 | 	add	local11, objptr
0c100     04 3A 06 F1 | 	add	local11, #4
0c104     1D 3B 02 FB | 	rdlong	local11, local11
0c108     14 3A 0E F2 | 	cmp	local11, #20 wz
0c10c     35 00 00 FF 
0c110     0C E4 85 F1 | 	sub	objptr, ##27148
0c114     4C 00 90 5D |  if_ne	jmp	#LR__0983
0c118     37 00 00 FF 
0c11c     44 E4 05 F1 | 	add	objptr, ##28228
0c120     F2 30 02 FB | 	rdlong	local06, objptr
0c124     01 30 06 F1 | 	add	local06, #1
0c128     F2 30 62 FC | 	wrlong	local06, objptr
0c12c     37 00 00 FF 
0c130     44 E4 85 F1 | 	sub	objptr, ##28228
0c134     2C 00 90 FD | 	jmp	#LR__0983
0c138                 | LR__0982
0c138     16 13 02 F6 | 	mov	arg01, local04
0c13c     34 00 B0 FD | 	call	#_getfun
0c140     37 00 00 FF 
0c144     44 E4 05 F1 | 	add	objptr, ##28228
0c148     F2 30 02 FB | 	rdlong	local06, objptr
0c14c     01 30 06 F1 | 	add	local06, #1
0c150     F2 30 62 FC | 	wrlong	local06, objptr
0c154     37 00 00 FF 
0c158     44 E4 85 F1 | 	sub	objptr, ##28228
0c15c                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c15c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c160     04 00 90 3D |  if_ae	jmp	#LR__0984
0c164                 | LR__0983
0c164                 | ' return 0  
0c164     00 FA 05 F6 | 	mov	result1, #0
0c168                 | LR__0984
0c168     A7 F0 03 F6 | 	mov	ptra, fp
0c16c     B2 00 A0 FD | 	call	#popregs_
0c170                 | _getvalue_ret
0c170     2D 00 64 FD | 	ret
0c174                 | 
0c174                 | ' 
0c174                 | ' ' Get a function result 
0c174                 | ' 
0c174                 | ' function getfun(m as integer) as ulong
0c174                 | _getfun
0c174     0F 4A 05 F6 | 	mov	COUNT_, #15
0c178     A8 00 A0 FD | 	call	#pushregs_
0c17c                 | _getfun_enter
0c17c     09 2D 02 F6 | 	mov	local04, arg01
0c180     37 00 00 FF 
0c184     44 E4 05 F1 | 	add	objptr, ##28228
0c188     F2 2E 02 FB | 	rdlong	local05, objptr
0c18c     17 31 02 F6 | 	mov	local06, local05
0c190     00 32 06 F6 | 	mov	local07, #0
0c194                 | ' oldct=ct
0c194                 | ' numpar=0
0c194                 | ' if lparts(ct+1).token=token_lpar then
0c194     01 2E 06 F1 | 	add	local05, #1
0c198     03 2E 66 F0 | 	shl	local05, #3
0c19c     02 00 00 FF 
0c1a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c1a4     F2 2E 02 F1 | 	add	local05, objptr
0c1a8     04 2E 06 F1 | 	add	local05, #4
0c1ac     17 2F 02 FB | 	rdlong	local05, local05
0c1b0     15 2E 0E F2 | 	cmp	local05, #21 wz
0c1b4     35 00 00 FF 
0c1b8     0C E4 85 F1 | 	sub	objptr, ##27148
0c1bc     54 01 90 5D |  if_ne	jmp	#LR__0994
0c1c0     37 00 00 FF 
0c1c4     44 E4 05 F1 | 	add	objptr, ##28228
0c1c8     F2 34 02 FB | 	rdlong	local08, objptr
0c1cc     01 34 06 F1 | 	add	local08, #1
0c1d0     F2 34 62 FC | 	wrlong	local08, objptr
0c1d4     37 00 00 FF 
0c1d8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1dc                 | '   ct+=1 											' omit this lpar, this is for expr list
0c1dc                 | '   do
0c1dc                 | LR__0990
0c1dc     37 00 00 FF 
0c1e0     44 E4 05 F1 | 	add	objptr, ##28228
0c1e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c1e8     01 2E 06 F1 | 	add	local05, #1
0c1ec     F2 2E 62 FC | 	wrlong	local05, objptr
0c1f0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c1f0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c1f0     03 2E 66 F0 | 	shl	local05, #3
0c1f4     02 00 00 FF 
0c1f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c1fc     F2 2E 02 F1 | 	add	local05, objptr
0c200     04 2E 06 F1 | 	add	local05, #4
0c204     17 35 02 FB | 	rdlong	local08, local05
0c208     15 34 0E F2 | 	cmp	local08, #21 wz
0c20c     35 00 00 FF 
0c210     0C E4 85 F1 | 	sub	objptr, ##27148
0c214     44 00 90 5D |  if_ne	jmp	#LR__0991
0c218     37 00 00 FF 
0c21c     44 E4 05 F1 | 	add	objptr, ##28228
0c220     F2 34 02 FB | 	rdlong	local08, objptr
0c224     01 34 06 F1 | 	add	local08, #1
0c228     F2 34 62 FC | 	wrlong	local08, objptr
0c22c     37 00 00 FF 
0c230     44 E4 85 F1 | 	sub	objptr, ##28228
0c234     C4 EF BF FD | 	call	#_expr
0c238     FD 36 02 F6 | 	mov	local09, result1
0c23c     37 00 00 FF 
0c240     44 E4 05 F1 | 	add	objptr, ##28228
0c244     F2 34 02 FB | 	rdlong	local08, objptr
0c248     01 34 06 F1 | 	add	local08, #1
0c24c     F2 34 62 FC | 	wrlong	local08, objptr
0c250     37 00 00 FF 
0c254     44 E4 85 F1 | 	sub	objptr, ##28228
0c258     08 00 90 FD | 	jmp	#LR__0992
0c25c                 | LR__0991
0c25c     9C EF BF FD | 	call	#_expr
0c260     FD 36 02 F6 | 	mov	local09, result1
0c264                 | LR__0992
0c264                 | '     if err>0 then return err
0c264     01 36 16 F2 | 	cmp	local09, #1 wc
0c268     1B FB 01 36 |  if_ae	mov	result1, local09
0c26c     3C 02 90 3D |  if_ae	jmp	#LR__0996
0c270     01 32 06 F1 | 	add	local07, #1
0c274     37 00 00 FF 
0c278     44 E4 05 F1 | 	add	objptr, ##28228
0c27c     F2 2E 02 FB | 	rdlong	local05, objptr
0c280     03 2E 66 F0 | 	shl	local05, #3
0c284     02 00 00 FF 
0c288     38 E4 85 F1 | 	sub	objptr, ##1080
0c28c     F2 2E 02 F1 | 	add	local05, objptr
0c290     04 2E 06 F1 | 	add	local05, #4
0c294     17 37 02 FB | 	rdlong	local09, local05
0c298     14 36 0E F2 | 	cmp	local09, #20 wz
0c29c     35 00 00 FF 
0c2a0     0C E4 85 F1 | 	sub	objptr, ##27148
0c2a4     34 00 90 AD |  if_e	jmp	#LR__0993
0c2a8     37 00 00 FF 
0c2ac     44 E4 05 F1 | 	add	objptr, ##28228
0c2b0     F2 36 02 FB | 	rdlong	local09, objptr
0c2b4     03 36 66 F0 | 	shl	local09, #3
0c2b8     02 00 00 FF 
0c2bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c2c0     F2 36 02 F1 | 	add	local09, objptr
0c2c4     04 36 06 F1 | 	add	local09, #4
0c2c8     1B 37 02 FB | 	rdlong	local09, local09
0c2cc     FE 37 0E F2 | 	cmp	local09, #510 wz
0c2d0     35 00 00 FF 
0c2d4     0C E4 85 F1 | 	sub	objptr, ##27148
0c2d8     00 FF 9F 5D |  if_ne	jmp	#LR__0990
0c2dc                 | LR__0993
0c2dc                 | '   if lparts(ct).token=token_end then return 14
0c2dc     37 00 00 FF 
0c2e0     44 E4 05 F1 | 	add	objptr, ##28228
0c2e4     F2 2E 02 FB | 	rdlong	local05, objptr
0c2e8     03 2E 66 F0 | 	shl	local05, #3
0c2ec     02 00 00 FF 
0c2f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2f4     F2 2E 02 F1 | 	add	local05, objptr
0c2f8     04 2E 06 F1 | 	add	local05, #4
0c2fc     17 37 02 FB | 	rdlong	local09, local05
0c300     FE 37 0E F2 | 	cmp	local09, #510 wz
0c304     35 00 00 FF 
0c308     0C E4 85 F1 | 	sub	objptr, ##27148
0c30c     0E FA 05 A6 |  if_e	mov	result1, #14
0c310     98 01 90 AD |  if_e	jmp	#LR__0996
0c314                 | LR__0994
0c314     19 27 02 F6 | 	mov	local01, local07
0c318     03 30 66 F0 | 	shl	local06, #3
0c31c     35 00 00 FF 
0c320     0C E4 05 F1 | 	add	objptr, ##27148
0c324     F2 30 02 F1 | 	add	local06, objptr
0c328     04 30 06 F1 | 	add	local06, #4
0c32c     18 2B 02 FB | 	rdlong	local03, local06
0c330     13 35 02 F6 | 	mov	local08, local01
0c334     14 39 02 F6 | 	mov	local10, local02
0c338     15 3B 02 F6 | 	mov	local11, local03
0c33c     15 00 00 FF 
0c340     70 E4 05 F1 | 	add	objptr, ##10864
0c344     F2 3C 02 FB | 	rdlong	local12, objptr
0c348     1E 3F 02 F6 | 	mov	local13, local12
0c34c     01 3E 66 F0 | 	shl	local13, #1
0c350     1E 3F 02 F1 | 	add	local13, local12
0c354     02 3E 66 F0 | 	shl	local13, #2
0c358     03 00 00 FF 
0c35c     00 E4 85 F1 | 	sub	objptr, ##1536
0c360     F2 3E 02 F1 | 	add	local13, objptr
0c364     1F 35 62 FC | 	wrlong	local08, local13
0c368     03 00 00 FF 
0c36c     00 E4 05 F1 | 	add	objptr, ##1536
0c370     F2 34 02 FB | 	rdlong	local08, objptr
0c374     1A 41 02 F6 | 	mov	local14, local08
0c378     01 40 66 F0 | 	shl	local14, #1
0c37c     1A 41 02 F1 | 	add	local14, local08
0c380     02 40 66 F0 | 	shl	local14, #2
0c384     03 00 00 FF 
0c388     00 E4 85 F1 | 	sub	objptr, ##1536
0c38c     F2 40 02 F1 | 	add	local14, objptr
0c390     04 40 06 F1 | 	add	local14, #4
0c394     20 39 62 FC | 	wrlong	local10, local14
0c398     03 00 00 FF 
0c39c     00 E4 05 F1 | 	add	objptr, ##1536
0c3a0     F2 34 02 FB | 	rdlong	local08, objptr
0c3a4     1A 43 02 F6 | 	mov	local15, local08
0c3a8     01 42 66 F0 | 	shl	local15, #1
0c3ac     1A 43 02 F1 | 	add	local15, local08
0c3b0     02 42 66 F0 | 	shl	local15, #2
0c3b4     03 00 00 FF 
0c3b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c3bc     F2 42 02 F1 | 	add	local15, objptr
0c3c0     08 42 06 F1 | 	add	local15, #8
0c3c4     21 3B 62 FC | 	wrlong	local11, local15
0c3c8     03 00 00 FF 
0c3cc     00 E4 05 F1 | 	add	objptr, ##1536
0c3d0     F2 34 02 FB | 	rdlong	local08, objptr
0c3d4     01 34 06 F1 | 	add	local08, #1
0c3d8     F2 34 62 FC | 	wrlong	local08, objptr
0c3dc     4A 00 00 FF 
0c3e0     7C E4 85 F1 | 	sub	objptr, ##38012
0c3e4                 | ' t2.result.uresult=numpar
0c3e4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c3e4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c3e4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c3e4     FF FF 7F FF 
0c3e8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c3ec     B8 00 90 5D |  if_ne	jmp	#LR__0995
0c3f0     15 2A 06 F6 | 	mov	local03, #21
0c3f4     13 35 02 F6 | 	mov	local08, local01
0c3f8     14 39 02 F6 | 	mov	local10, local02
0c3fc     15 3B 02 F6 | 	mov	local11, local03
0c400     4A 00 00 FF 
0c404     7C E4 05 F1 | 	add	objptr, ##38012
0c408     F2 3C 02 FB | 	rdlong	local12, objptr
0c40c     1E 3F 02 F6 | 	mov	local13, local12
0c410     01 3E 66 F0 | 	shl	local13, #1
0c414     1E 3F 02 F1 | 	add	local13, local12
0c418     02 3E 66 F0 | 	shl	local13, #2
0c41c     03 00 00 FF 
0c420     00 E4 85 F1 | 	sub	objptr, ##1536
0c424     F2 3E 02 F1 | 	add	local13, objptr
0c428     1F 35 62 FC | 	wrlong	local08, local13
0c42c     03 00 00 FF 
0c430     00 E4 05 F1 | 	add	objptr, ##1536
0c434     F2 42 02 FB | 	rdlong	local15, objptr
0c438     21 41 02 F6 | 	mov	local14, local15
0c43c     01 40 66 F0 | 	shl	local14, #1
0c440     21 41 02 F1 | 	add	local14, local15
0c444     02 40 66 F0 | 	shl	local14, #2
0c448     03 00 00 FF 
0c44c     00 E4 85 F1 | 	sub	objptr, ##1536
0c450     F2 40 02 F1 | 	add	local14, objptr
0c454     04 40 06 F1 | 	add	local14, #4
0c458     20 39 62 FC | 	wrlong	local10, local14
0c45c     03 00 00 FF 
0c460     00 E4 05 F1 | 	add	objptr, ##1536
0c464     F2 40 02 FB | 	rdlong	local14, objptr
0c468     20 43 02 F6 | 	mov	local15, local14
0c46c     01 42 66 F0 | 	shl	local15, #1
0c470     20 43 02 F1 | 	add	local15, local14
0c474     02 42 66 F0 | 	shl	local15, #2
0c478     03 00 00 FF 
0c47c     00 E4 85 F1 | 	sub	objptr, ##1536
0c480     F2 42 02 F1 | 	add	local15, objptr
0c484     08 42 06 F1 | 	add	local15, #8
0c488     21 3B 62 FC | 	wrlong	local11, local15
0c48c     03 00 00 FF 
0c490     00 E4 05 F1 | 	add	objptr, ##1536
0c494     F2 34 02 FB | 	rdlong	local08, objptr
0c498     01 34 06 F1 | 	add	local08, #1
0c49c     F2 34 62 FC | 	wrlong	local08, objptr
0c4a0     4A 00 00 FF 
0c4a4     7C E4 85 F1 | 	sub	objptr, ##38012
0c4a8                 | LR__0995
0c4a8                 | ' return 0
0c4a8     00 FA 05 F6 | 	mov	result1, #0
0c4ac                 | LR__0996
0c4ac     A7 F0 03 F6 | 	mov	ptra, fp
0c4b0     B2 00 A0 FD | 	call	#popregs_
0c4b4                 | _getfun_ret
0c4b4     2D 00 64 FD | 	ret
0c4b8                 | 
0c4b8                 | '   
0c4b8                 | '   
0c4b8                 | ' function getvar(m as integer) as ulong
0c4b8                 | _getvar
0c4b8     11 4A 05 F6 | 	mov	COUNT_, #17
0c4bc     A8 00 A0 FD | 	call	#pushregs_
0c4c0                 | _getvar_enter
0c4c0     09 2D 02 F6 | 	mov	local04, arg01
0c4c4     37 00 00 FF 
0c4c8     44 E4 05 F1 | 	add	objptr, ##28228
0c4cc     F2 2E 02 FB | 	rdlong	local05, objptr
0c4d0     03 2E 66 F0 | 	shl	local05, #3
0c4d4     02 00 00 FF 
0c4d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c4dc     F2 2E 02 F1 | 	add	local05, objptr
0c4e0     17 31 02 FB | 	rdlong	local06, local05
0c4e4     01 32 66 F6 | 	neg	local07, #1
0c4e8                 | ' 
0c4e8                 | ' varname$=lparts(ct).part$
0c4e8                 | ' j=-1
0c4e8                 | ' 
0c4e8                 | ' for i=0 to varnum-1
0c4e8     00 34 06 F6 | 	mov	local08, #0
0c4ec     04 E4 85 F1 | 	sub	objptr, #4
0c4f0     F2 36 02 FB | 	rdlong	local09, objptr
0c4f4     35 00 00 FF 
0c4f8     08 E4 85 F1 | 	sub	objptr, ##27144
0c4fc                 | LR__1000
0c4fc     1B 35 52 F2 | 	cmps	local08, local09 wc
0c500     38 00 90 3D |  if_ae	jmp	#LR__1001
0c504                 | '   if variables(i).name=varname$ then j=i : exit
0c504     1A 2F 02 F6 | 	mov	local05, local08
0c508     04 2E 66 F0 | 	shl	local05, #4
0c50c     14 00 00 FF 
0c510     F8 E5 05 F1 | 	add	objptr, ##10744
0c514     F2 2E 02 F1 | 	add	local05, objptr
0c518     17 13 02 FB | 	rdlong	arg01, local05
0c51c     18 15 02 F6 | 	mov	arg02, local06
0c520     14 00 00 FF 
0c524     F8 E5 85 F1 | 	sub	objptr, ##10744
0c528     10 78 B1 FD | 	call	#__system___string_cmp
0c52c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c530     1A 33 02 A6 |  if_e	mov	local07, local08
0c534     01 34 06 51 |  if_ne	add	local08, #1
0c538     C0 FF 9F 5D |  if_ne	jmp	#LR__1000
0c53c                 | LR__1001
0c53c                 | ' if  j=-1 andalso varnum<maxvars then   
0c53c     FF FF 7F FF 
0c540     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c544     A8 00 90 5D |  if_ne	jmp	#LR__1002
0c548     35 00 00 FF 
0c54c     08 E4 05 F1 | 	add	objptr, ##27144
0c550     F2 36 02 FB | 	rdlong	local09, objptr
0c554     35 00 00 FF 
0c558     08 E4 85 F1 | 	sub	objptr, ##27144
0c55c     02 00 00 FF 
0c560     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c564     88 00 90 3D |  if_ae	jmp	#LR__1002
0c568     35 00 00 FF 
0c56c     08 E4 05 F1 | 	add	objptr, ##27144
0c570     F2 2E 02 FB | 	rdlong	local05, objptr
0c574     04 2E 66 F0 | 	shl	local05, #4
0c578     20 00 00 FF 
0c57c     10 E4 85 F1 | 	sub	objptr, ##16400
0c580     F2 2E 02 F1 | 	add	local05, objptr
0c584     17 31 62 FC | 	wrlong	local06, local05
0c588     20 00 00 FF 
0c58c     10 E4 05 F1 | 	add	objptr, ##16400
0c590     F2 2E 02 FB | 	rdlong	local05, objptr
0c594     04 2E 66 F0 | 	shl	local05, #4
0c598     20 00 00 FF 
0c59c     10 E4 85 F1 | 	sub	objptr, ##16400
0c5a0     F2 2E 02 F1 | 	add	local05, objptr
0c5a4     04 2E 06 F1 | 	add	local05, #4
0c5a8     17 01 68 FC | 	wrlong	#0, local05
0c5ac     20 00 00 FF 
0c5b0     10 E4 05 F1 | 	add	objptr, ##16400
0c5b4     F2 2E 02 FB | 	rdlong	local05, objptr
0c5b8     04 2E 66 F0 | 	shl	local05, #4
0c5bc     20 00 00 FF 
0c5c0     10 E4 85 F1 | 	sub	objptr, ##16400
0c5c4     F2 2E 02 F1 | 	add	local05, objptr
0c5c8     0C 2E 06 F1 | 	add	local05, #12
0c5cc     17 39 68 FC | 	wrlong	#28, local05
0c5d0     20 00 00 FF 
0c5d4     10 E4 05 F1 | 	add	objptr, ##16400
0c5d8     F2 36 02 FB | 	rdlong	local09, objptr
0c5dc     1B 33 02 F6 | 	mov	local07, local09
0c5e0     01 36 06 F1 | 	add	local09, #1
0c5e4     F2 36 62 FC | 	wrlong	local09, objptr
0c5e8     35 00 00 FF 
0c5ec     08 E4 85 F1 | 	sub	objptr, ##27144
0c5f0                 | LR__1002
0c5f0     00 36 06 F6 | 	mov	local09, #0
0c5f4                 | ' numpar=0
0c5f4                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c5f4     37 00 00 FF 
0c5f8     44 E4 05 F1 | 	add	objptr, ##28228
0c5fc     F2 2E 02 FB | 	rdlong	local05, objptr
0c600     01 2E 06 F1 | 	add	local05, #1
0c604     03 2E 66 F0 | 	shl	local05, #3
0c608     02 00 00 FF 
0c60c     38 E4 85 F1 | 	sub	objptr, ##1080
0c610     F2 2E 02 F1 | 	add	local05, objptr
0c614     04 2E 06 F1 | 	add	local05, #4
0c618     17 35 02 FB | 	rdlong	local08, local05
0c61c     15 34 0E F2 | 	cmp	local08, #21 wz
0c620     35 00 00 FF 
0c624     0C E4 85 F1 | 	sub	objptr, ##27148
0c628     54 01 90 5D |  if_ne	jmp	#LR__1007
0c62c     37 00 00 FF 
0c630     44 E4 05 F1 | 	add	objptr, ##28228
0c634     F2 38 02 FB | 	rdlong	local10, objptr
0c638     01 38 06 F1 | 	add	local10, #1
0c63c     F2 38 62 FC | 	wrlong	local10, objptr
0c640     37 00 00 FF 
0c644     44 E4 85 F1 | 	sub	objptr, ##28228
0c648                 | '   ct+=1 											' omit this lpar, this is for expr list
0c648                 | '   do
0c648                 | LR__1003
0c648     37 00 00 FF 
0c64c     44 E4 05 F1 | 	add	objptr, ##28228
0c650     F2 2E 02 FB | 	rdlong	local05, objptr
0c654     01 2E 06 F1 | 	add	local05, #1
0c658     F2 2E 62 FC | 	wrlong	local05, objptr
0c65c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c65c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c65c     03 2E 66 F0 | 	shl	local05, #3
0c660     02 00 00 FF 
0c664     38 E4 85 F1 | 	sub	objptr, ##1080
0c668     F2 2E 02 F1 | 	add	local05, objptr
0c66c     04 2E 06 F1 | 	add	local05, #4
0c670     17 39 02 FB | 	rdlong	local10, local05
0c674     15 38 0E F2 | 	cmp	local10, #21 wz
0c678     35 00 00 FF 
0c67c     0C E4 85 F1 | 	sub	objptr, ##27148
0c680     44 00 90 5D |  if_ne	jmp	#LR__1004
0c684     37 00 00 FF 
0c688     44 E4 05 F1 | 	add	objptr, ##28228
0c68c     F2 38 02 FB | 	rdlong	local10, objptr
0c690     01 38 06 F1 | 	add	local10, #1
0c694     F2 38 62 FC | 	wrlong	local10, objptr
0c698     37 00 00 FF 
0c69c     44 E4 85 F1 | 	sub	objptr, ##28228
0c6a0     58 EB BF FD | 	call	#_expr
0c6a4     FD 3A 02 F6 | 	mov	local11, result1
0c6a8     37 00 00 FF 
0c6ac     44 E4 05 F1 | 	add	objptr, ##28228
0c6b0     F2 38 02 FB | 	rdlong	local10, objptr
0c6b4     01 38 06 F1 | 	add	local10, #1
0c6b8     F2 38 62 FC | 	wrlong	local10, objptr
0c6bc     37 00 00 FF 
0c6c0     44 E4 85 F1 | 	sub	objptr, ##28228
0c6c4     08 00 90 FD | 	jmp	#LR__1005
0c6c8                 | LR__1004
0c6c8     30 EB BF FD | 	call	#_expr
0c6cc     FD 3A 02 F6 | 	mov	local11, result1
0c6d0                 | LR__1005
0c6d0                 | '     if err>0 then return err
0c6d0     01 3A 56 F2 | 	cmps	local11, #1 wc
0c6d4     1D FB 01 36 |  if_ae	mov	result1, local11
0c6d8     2C 02 90 3D |  if_ae	jmp	#LR__1009
0c6dc     01 36 06 F1 | 	add	local09, #1
0c6e0     37 00 00 FF 
0c6e4     44 E4 05 F1 | 	add	objptr, ##28228
0c6e8     F2 2E 02 FB | 	rdlong	local05, objptr
0c6ec     03 2E 66 F0 | 	shl	local05, #3
0c6f0     02 00 00 FF 
0c6f4     38 E4 85 F1 | 	sub	objptr, ##1080
0c6f8     F2 2E 02 F1 | 	add	local05, objptr
0c6fc     04 2E 06 F1 | 	add	local05, #4
0c700     17 3B 02 FB | 	rdlong	local11, local05
0c704     14 3A 0E F2 | 	cmp	local11, #20 wz
0c708     35 00 00 FF 
0c70c     0C E4 85 F1 | 	sub	objptr, ##27148
0c710     34 00 90 AD |  if_e	jmp	#LR__1006
0c714     37 00 00 FF 
0c718     44 E4 05 F1 | 	add	objptr, ##28228
0c71c     F2 3A 02 FB | 	rdlong	local11, objptr
0c720     03 3A 66 F0 | 	shl	local11, #3
0c724     02 00 00 FF 
0c728     38 E4 85 F1 | 	sub	objptr, ##1080
0c72c     F2 3A 02 F1 | 	add	local11, objptr
0c730     04 3A 06 F1 | 	add	local11, #4
0c734     1D 3B 02 FB | 	rdlong	local11, local11
0c738     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c73c     35 00 00 FF 
0c740     0C E4 85 F1 | 	sub	objptr, ##27148
0c744     00 FF 9F 5D |  if_ne	jmp	#LR__1003
0c748                 | LR__1006
0c748                 | '     if lparts(ct).token=token_end then return 14
0c748     37 00 00 FF 
0c74c     44 E4 05 F1 | 	add	objptr, ##28228
0c750     F2 2E 02 FB | 	rdlong	local05, objptr
0c754     03 2E 66 F0 | 	shl	local05, #3
0c758     02 00 00 FF 
0c75c     38 E4 85 F1 | 	sub	objptr, ##1080
0c760     F2 2E 02 F1 | 	add	local05, objptr
0c764     04 2E 06 F1 | 	add	local05, #4
0c768     17 3B 02 FB | 	rdlong	local11, local05
0c76c     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c770     35 00 00 FF 
0c774     0C E4 85 F1 | 	sub	objptr, ##27148
0c778     0E FA 05 A6 |  if_e	mov	result1, #14
0c77c     88 01 90 AD |  if_e	jmp	#LR__1009
0c780                 | LR__1007
0c780     1B 29 02 F6 | 	mov	local02, local09
0c784     11 2A 06 F6 | 	mov	local03, #17
0c788     19 27 02 F6 | 	mov	local01, local07
0c78c     13 39 02 F6 | 	mov	local10, local01
0c790     14 3D 02 F6 | 	mov	local12, local02
0c794     15 3F 02 F6 | 	mov	local13, local03
0c798     4A 00 00 FF 
0c79c     7C E4 05 F1 | 	add	objptr, ##38012
0c7a0     F2 40 02 FB | 	rdlong	local14, objptr
0c7a4     20 43 02 F6 | 	mov	local15, local14
0c7a8     01 42 66 F0 | 	shl	local15, #1
0c7ac     20 43 02 F1 | 	add	local15, local14
0c7b0     02 42 66 F0 | 	shl	local15, #2
0c7b4     03 00 00 FF 
0c7b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c7bc     F2 42 02 F1 | 	add	local15, objptr
0c7c0     21 39 62 FC | 	wrlong	local10, local15
0c7c4     03 00 00 FF 
0c7c8     00 E4 05 F1 | 	add	objptr, ##1536
0c7cc     F2 38 02 FB | 	rdlong	local10, objptr
0c7d0     1C 45 02 F6 | 	mov	local16, local10
0c7d4     01 44 66 F0 | 	shl	local16, #1
0c7d8     1C 45 02 F1 | 	add	local16, local10
0c7dc     02 44 66 F0 | 	shl	local16, #2
0c7e0     03 00 00 FF 
0c7e4     00 E4 85 F1 | 	sub	objptr, ##1536
0c7e8     F2 44 02 F1 | 	add	local16, objptr
0c7ec     04 44 06 F1 | 	add	local16, #4
0c7f0     22 3D 62 FC | 	wrlong	local12, local16
0c7f4     03 00 00 FF 
0c7f8     00 E4 05 F1 | 	add	objptr, ##1536
0c7fc     F2 38 02 FB | 	rdlong	local10, objptr
0c800     1C 47 02 F6 | 	mov	local17, local10
0c804     01 46 66 F0 | 	shl	local17, #1
0c808     1C 47 02 F1 | 	add	local17, local10
0c80c     02 46 66 F0 | 	shl	local17, #2
0c810     03 00 00 FF 
0c814     00 E4 85 F1 | 	sub	objptr, ##1536
0c818     F2 46 02 F1 | 	add	local17, objptr
0c81c     08 46 06 F1 | 	add	local17, #8
0c820     23 3F 62 FC | 	wrlong	local13, local17
0c824     03 00 00 FF 
0c828     00 E4 05 F1 | 	add	objptr, ##1536
0c82c     F2 38 02 FB | 	rdlong	local10, objptr
0c830     01 38 06 F1 | 	add	local10, #1
0c834     F2 38 62 FC | 	wrlong	local10, objptr
0c838     4A 00 00 FF 
0c83c     7C E4 85 F1 | 	sub	objptr, ##38012
0c840                 | ' t2.result.twowords(1)=numpar
0c840                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0c840                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c840                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c840     FF FF 7F FF 
0c844     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c848     B8 00 90 5D |  if_ne	jmp	#LR__1008
0c84c     15 2A 06 F6 | 	mov	local03, #21
0c850     13 39 02 F6 | 	mov	local10, local01
0c854     14 3D 02 F6 | 	mov	local12, local02
0c858     15 3F 02 F6 | 	mov	local13, local03
0c85c     4A 00 00 FF 
0c860     7C E4 05 F1 | 	add	objptr, ##38012
0c864     F2 40 02 FB | 	rdlong	local14, objptr
0c868     20 43 02 F6 | 	mov	local15, local14
0c86c     01 42 66 F0 | 	shl	local15, #1
0c870     20 43 02 F1 | 	add	local15, local14
0c874     02 42 66 F0 | 	shl	local15, #2
0c878     03 00 00 FF 
0c87c     00 E4 85 F1 | 	sub	objptr, ##1536
0c880     F2 42 02 F1 | 	add	local15, objptr
0c884     21 39 62 FC | 	wrlong	local10, local15
0c888     03 00 00 FF 
0c88c     00 E4 05 F1 | 	add	objptr, ##1536
0c890     F2 46 02 FB | 	rdlong	local17, objptr
0c894     23 45 02 F6 | 	mov	local16, local17
0c898     01 44 66 F0 | 	shl	local16, #1
0c89c     23 45 02 F1 | 	add	local16, local17
0c8a0     02 44 66 F0 | 	shl	local16, #2
0c8a4     03 00 00 FF 
0c8a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c8ac     F2 44 02 F1 | 	add	local16, objptr
0c8b0     04 44 06 F1 | 	add	local16, #4
0c8b4     22 3D 62 FC | 	wrlong	local12, local16
0c8b8     03 00 00 FF 
0c8bc     00 E4 05 F1 | 	add	objptr, ##1536
0c8c0     F2 44 02 FB | 	rdlong	local16, objptr
0c8c4     22 47 02 F6 | 	mov	local17, local16
0c8c8     01 46 66 F0 | 	shl	local17, #1
0c8cc     22 47 02 F1 | 	add	local17, local16
0c8d0     02 46 66 F0 | 	shl	local17, #2
0c8d4     03 00 00 FF 
0c8d8     00 E4 85 F1 | 	sub	objptr, ##1536
0c8dc     F2 46 02 F1 | 	add	local17, objptr
0c8e0     08 46 06 F1 | 	add	local17, #8
0c8e4     23 3F 62 FC | 	wrlong	local13, local17
0c8e8     03 00 00 FF 
0c8ec     00 E4 05 F1 | 	add	objptr, ##1536
0c8f0     F2 38 02 FB | 	rdlong	local10, objptr
0c8f4     01 38 06 F1 | 	add	local10, #1
0c8f8     F2 38 62 FC | 	wrlong	local10, objptr
0c8fc     4A 00 00 FF 
0c900     7C E4 85 F1 | 	sub	objptr, ##38012
0c904                 | LR__1008
0c904                 | ' return 0
0c904     00 FA 05 F6 | 	mov	result1, #0
0c908                 | LR__1009
0c908     A7 F0 03 F6 | 	mov	ptra, fp
0c90c     B2 00 A0 FD | 	call	#popregs_
0c910                 | _getvar_ret
0c910     2D 00 64 FD | 	ret
0c914                 | 
0c914                 | ' 
0c914                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c914                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0c914                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c914                 | ' 
0c914                 | ' 
0c914                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c914                 | ' '                                                                                                                                       -
0c914                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0c914                 | ' '                                                                                                                                       -
0c914                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c914                 | ' 
0c914                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c914                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0c914                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c914                 | ' 
0c914                 | ' function execute_line (astart=0 as integer) as integer
0c914                 | _execute_line
0c914     04 4A 05 F6 | 	mov	COUNT_, #4
0c918     A8 00 A0 FD | 	call	#pushregs_
0c91c     50 00 00 FF 
0c920     BC E4 05 F1 | 	add	objptr, ##41148
0c924     F2 00 68 FC | 	wrlong	#0, objptr
0c928                 | ' 
0c928                 | ' runptr2=0
0c928                 | ' for lineptr_e=astart to lineptr-1
0c928     06 00 00 FF 
0c92c     3C E4 85 F1 | 	sub	objptr, ##3132
0c930     F2 12 62 FC | 	wrlong	arg01, objptr
0c934     04 E4 85 F1 | 	sub	objptr, #4
0c938     F2 26 02 FB | 	rdlong	local01, objptr
0c93c     4A 00 00 FF 
0c940     7C E4 85 F1 | 	sub	objptr, ##38012
0c944                 | LR__1010
0c944     4A 00 00 FF 
0c948     80 E4 05 F1 | 	add	objptr, ##38016
0c94c     F2 FA 01 FB | 	rdlong	result1, objptr
0c950     4A 00 00 FF 
0c954     80 E4 85 F1 | 	sub	objptr, ##38016
0c958     13 FB 51 F2 | 	cmps	result1, local01 wc
0c95c     98 00 90 3D |  if_ae	jmp	#LR__1011
0c960     4A 00 00 FF 
0c964     80 E4 05 F1 | 	add	objptr, ##38016
0c968     F2 FA 01 FB | 	rdlong	result1, objptr
0c96c     FD 28 02 F6 | 	mov	local02, result1
0c970     01 28 66 F0 | 	shl	local02, #1
0c974     FD 28 02 F1 | 	add	local02, result1
0c978     02 28 66 F0 | 	shl	local02, #2
0c97c     03 00 00 FF 
0c980     04 E4 85 F1 | 	sub	objptr, ##1540
0c984     F2 28 02 F1 | 	add	local02, objptr
0c988     08 28 06 F1 | 	add	local02, #8
0c98c     14 29 02 FB | 	rdlong	local02, local02
0c990     14 29 E2 F8 | 	getbyte	local02, local02, #0
0c994     02 28 66 F0 | 	shl	local02, #2
0c998     04 00 00 FF 
0c99c     1C E4 85 F1 | 	sub	objptr, ##2076
0c9a0     F2 28 02 F1 | 	add	local02, objptr
0c9a4     14 29 02 FB | 	rdlong	local02, local02
0c9a8     14 2B 02 F6 | 	mov	local03, local02
0c9ac     13 28 46 F7 | 	zerox	local02, #19
0c9b0     14 2A 46 F0 | 	shr	local03, #20
0c9b4     02 2A 66 F0 | 	shl	local03, #2
0c9b8     ED 2A 02 F1 | 	add	local03, __methods__
0c9bc     15 2B 02 FB | 	rdlong	local03, local03
0c9c0     43 00 00 FF 
0c9c4     60 E4 85 F1 | 	sub	objptr, ##34400
0c9c8     F2 2C 02 F6 | 	mov	local04, objptr
0c9cc     14 E5 01 F6 | 	mov	objptr, local02
0c9d0     2D 2A 62 FD | 	call	local03
0c9d4     16 E5 01 F6 | 	mov	objptr, local04
0c9d8     4A 00 00 FF 
0c9dc     80 E4 05 F1 | 	add	objptr, ##38016
0c9e0     F2 2C 02 FB | 	rdlong	local04, objptr
0c9e4     01 2C 06 F1 | 	add	local04, #1
0c9e8     F2 2C 62 FC | 	wrlong	local04, objptr
0c9ec     4A 00 00 FF 
0c9f0     80 E4 85 F1 | 	sub	objptr, ##38016
0c9f4     4C FF 9F FD | 	jmp	#LR__1010
0c9f8                 | LR__1011
0c9f8                 | ' return runptr2
0c9f8     50 00 00 FF 
0c9fc     BC E4 05 F1 | 	add	objptr, ##41148
0ca00     F2 FA 01 FB | 	rdlong	result1, objptr
0ca04     50 00 00 FF 
0ca08     BC E4 85 F1 | 	sub	objptr, ##41148
0ca0c     A7 F0 03 F6 | 	mov	ptra, fp
0ca10     B2 00 A0 FD | 	call	#popregs_
0ca14                 | _execute_line_ret
0ca14     2D 00 64 FD | 	ret
0ca18                 | 
0ca18                 | ' 
0ca18                 | ' 
0ca18                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca18                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0ca18                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ca18                 | ' 
0ca18                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0ca18                 | ' 
0ca18                 | ' function pop() as expr_result
0ca18                 | _pop
0ca18                 | ' if stackpointer=0 then
0ca18     43 00 00 FF 
0ca1c     58 E4 05 F1 | 	add	objptr, ##34392
0ca20     F2 FA 09 FB | 	rdlong	result1, objptr wz
0ca24     43 00 00 FF 
0ca28     58 E4 85 F1 | 	sub	objptr, ##34392
0ca2c     FF 04 06 A6 |  if_e	mov	_var03, #255
0ca30     18 00 06 A6 |  if_e	mov	_var01, #24
0ca34     68 00 90 AD |  if_e	jmp	#LR__1020
0ca38     43 00 00 FF 
0ca3c     58 E4 05 F1 | 	add	objptr, ##34392
0ca40     F2 FA 01 FB | 	rdlong	result1, objptr
0ca44     01 FA 85 F1 | 	sub	result1, #1
0ca48     F2 FA 61 FC | 	wrlong	result1, objptr
0ca4c     FD FE 01 F6 | 	mov	result3, result1
0ca50     01 FE 65 F0 | 	shl	result3, #1
0ca54     FD FE 01 F1 | 	add	result3, result1
0ca58     02 FE 65 F0 | 	shl	result3, #2
0ca5c     0C 00 00 FF 
0ca60     0C E4 85 F1 | 	sub	objptr, ##6156
0ca64     F2 FE 01 F1 | 	add	result3, objptr
0ca68     FF 00 02 FB | 	rdlong	_var01, result3
0ca6c     04 FE 05 F1 | 	add	result3, #4
0ca70     FF FE 01 FB | 	rdlong	result3, result3
0ca74     FD FC 01 F6 | 	mov	result2, result1
0ca78     01 FC 65 F0 | 	shl	result2, #1
0ca7c     FD FC 01 F1 | 	add	result2, result1
0ca80     02 FC 65 F0 | 	shl	result2, #2
0ca84     F2 FC 01 F1 | 	add	result2, objptr
0ca88     08 FC 05 F1 | 	add	result2, #8
0ca8c     FE FA 01 FB | 	rdlong	result1, result2
0ca90     FF 02 02 F6 | 	mov	_var02, result3
0ca94     FD 04 02 F6 | 	mov	_var03, result1
0ca98     37 00 00 FF 
0ca9c     4C E4 85 F1 | 	sub	objptr, ##28236
0caa0                 | LR__1020
0caa0                 | ' return t1
0caa0     01 FD 01 F6 | 	mov	result2, _var02
0caa4     02 FF 01 F6 | 	mov	result3, _var03
0caa8     00 FB 01 F6 | 	mov	result1, _var01
0caac                 | _pop_ret
0caac     2D 00 64 FD | 	ret
0cab0                 | 
0cab0                 | ' 
0cab0                 | ' sub push(t1 as expr_result )
0cab0                 | _push
0cab0                 | ' if stackpointer<maxstack then 
0cab0     43 00 00 FF 
0cab4     58 E4 05 F1 | 	add	objptr, ##34392
0cab8     F2 00 02 FB | 	rdlong	_var01, objptr
0cabc     43 00 00 FF 
0cac0     58 E4 85 F1 | 	sub	objptr, ##34392
0cac4     01 00 00 FF 
0cac8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0cacc     BC 00 90 3D |  if_ae	jmp	#LR__1030
0cad0     09 01 02 FB | 	rdlong	_var01, arg01
0cad4     04 12 06 F1 | 	add	arg01, #4
0cad8     09 03 02 FB | 	rdlong	_var02, arg01
0cadc     04 12 06 F1 | 	add	arg01, #4
0cae0     09 13 02 FB | 	rdlong	arg01, arg01
0cae4     43 00 00 FF 
0cae8     58 E4 05 F1 | 	add	objptr, ##34392
0caec     F2 04 02 FB | 	rdlong	_var03, objptr
0caf0     02 07 02 F6 | 	mov	_var04, _var03
0caf4     01 06 66 F0 | 	shl	_var04, #1
0caf8     02 07 02 F1 | 	add	_var04, _var03
0cafc     02 06 66 F0 | 	shl	_var04, #2
0cb00     0C 00 00 FF 
0cb04     0C E4 85 F1 | 	sub	objptr, ##6156
0cb08     F2 06 02 F1 | 	add	_var04, objptr
0cb0c     03 01 62 FC | 	wrlong	_var01, _var04
0cb10     0C 00 00 FF 
0cb14     0C E4 05 F1 | 	add	objptr, ##6156
0cb18     F2 06 02 FB | 	rdlong	_var04, objptr
0cb1c     03 05 02 F6 | 	mov	_var03, _var04
0cb20     01 04 66 F0 | 	shl	_var03, #1
0cb24     03 05 02 F1 | 	add	_var03, _var04
0cb28     02 04 66 F0 | 	shl	_var03, #2
0cb2c     0C 00 00 FF 
0cb30     0C E4 85 F1 | 	sub	objptr, ##6156
0cb34     F2 04 02 F1 | 	add	_var03, objptr
0cb38     04 04 06 F1 | 	add	_var03, #4
0cb3c     02 03 62 FC | 	wrlong	_var02, _var03
0cb40     0C 00 00 FF 
0cb44     0C E4 05 F1 | 	add	objptr, ##6156
0cb48     F2 06 02 FB | 	rdlong	_var04, objptr
0cb4c     03 05 02 F6 | 	mov	_var03, _var04
0cb50     01 04 66 F0 | 	shl	_var03, #1
0cb54     03 05 02 F1 | 	add	_var03, _var04
0cb58     02 04 66 F0 | 	shl	_var03, #2
0cb5c     0C 00 00 FF 
0cb60     0C E4 85 F1 | 	sub	objptr, ##6156
0cb64     F2 04 02 F1 | 	add	_var03, objptr
0cb68     08 04 06 F1 | 	add	_var03, #8
0cb6c     02 13 62 FC | 	wrlong	arg01, _var03
0cb70     0C 00 00 FF 
0cb74     0C E4 05 F1 | 	add	objptr, ##6156
0cb78     F2 00 02 FB | 	rdlong	_var01, objptr
0cb7c     01 00 06 F1 | 	add	_var01, #1
0cb80     F2 00 62 FC | 	wrlong	_var01, objptr
0cb84     43 00 00 FF 
0cb88     58 E4 85 F1 | 	sub	objptr, ##34392
0cb8c                 | LR__1030
0cb8c                 | _push_ret
0cb8c     2D 00 64 FD | 	ret
0cb90                 | 
0cb90                 | ' 
0cb90                 | ' ' -------------------------------- Runtime converting functions
0cb90                 | ' 
0cb90                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0cb90                 | ' 
0cb90                 | ' function  convertstring(psaddr as ulong) as string
0cb90                 | _convertstring
0cb90     04 4A 05 F6 | 	mov	COUNT_, #4
0cb94     A8 00 A0 FD | 	call	#pushregs_
0cb98     09 27 02 F6 | 	mov	local01, arg01
0cb9c     A0 3A B1 FD | 	call	#_pslpeek
0cba0     FD 28 02 F6 | 	mov	local02, result1
0cba4     9F 01 00 FF 
0cba8     3C 2B 06 F6 | 	mov	local03, ##@LR__5674
0cbac                 | ' l=pslpeek(psaddr) 
0cbac                 | ' s="" 
0cbac                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0cbac     01 2C 06 F6 | 	mov	local04, #1
0cbb0     01 28 06 F1 | 	add	local02, #1
0cbb4                 | LR__1040
0cbb4     14 2D 52 F2 | 	cmps	local04, local02 wc
0cbb8     30 00 90 3D |  if_ae	jmp	#LR__1041
0cbbc     13 13 02 F6 | 	mov	arg01, local01
0cbc0     03 12 06 F1 | 	add	arg01, #3
0cbc4     16 13 02 F1 | 	add	arg01, local04
0cbc8     1C 3A B1 FD | 	call	#_pspeek
0cbcc     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0cbd0     80 93 B1 FD | 	call	#__system__Chr_S
0cbd4     FD 14 02 F6 | 	mov	arg02, result1
0cbd8     15 13 02 F6 | 	mov	arg01, local03
0cbdc     90 71 B1 FD | 	call	#__system___string_concat
0cbe0     FD 2A 02 F6 | 	mov	local03, result1
0cbe4     01 2C 06 F1 | 	add	local04, #1
0cbe8     C8 FF 9F FD | 	jmp	#LR__1040
0cbec                 | LR__1041
0cbec                 | ' return s
0cbec     15 FB 01 F6 | 	mov	result1, local03
0cbf0     A7 F0 03 F6 | 	mov	ptra, fp
0cbf4     B2 00 A0 FD | 	call	#popregs_
0cbf8                 | _convertstring_ret
0cbf8     2D 00 64 FD | 	ret
0cbfc                 | 
0cbfc                 | ' 
0cbfc                 | ' ' converts a variable to an integer
0cbfc                 | ' 
0cbfc                 | ' function converttoint (t1 as expr_result) as integer 
0cbfc                 | _converttoint
0cbfc     02 4A 05 F6 | 	mov	COUNT_, #2
0cc00     A8 00 A0 FD | 	call	#pushregs_
0cc04     09 27 02 F6 | 	mov	local01, arg01
0cc08                 | ' 
0cc08                 | ' select case t1.result_type
0cc08     08 26 06 F1 | 	add	local01, #8
0cc0c     13 29 02 FB | 	rdlong	local02, local01
0cc10     08 26 86 F1 | 	sub	local01, #8
0cc14     1C 28 0E F2 | 	cmp	local02, #28 wz
0cc18     2C 00 90 AD |  if_e	jmp	#LR__1050
0cc1c     1D 28 0E F2 | 	cmp	local02, #29 wz
0cc20     2C 00 90 AD |  if_e	jmp	#LR__1051
0cc24     1E 28 0E F2 | 	cmp	local02, #30 wz
0cc28     2C 00 90 AD |  if_e	jmp	#LR__1052
0cc2c     1F 28 0E F2 | 	cmp	local02, #31 wz
0cc30     34 00 90 AD |  if_e	jmp	#LR__1053
0cc34     2B 28 0E F2 | 	cmp	local02, #43 wz
0cc38     44 00 90 AD |  if_e	jmp	#LR__1054
0cc3c     2C 28 0E F2 | 	cmp	local02, #44 wz
0cc40     5C 00 90 AD |  if_e	jmp	#LR__1055
0cc44     60 00 90 FD | 	jmp	#LR__1056
0cc48                 | LR__1050
0cc48     13 FB 01 FB | 	rdlong	result1, local01
0cc4c     5C 00 90 FD | 	jmp	#LR__1057
0cc50                 | LR__1051
0cc50     13 FB 01 FB | 	rdlong	result1, local01
0cc54     54 00 90 FD | 	jmp	#LR__1057
0cc58                 | LR__1052
0cc58     13 13 02 FB | 	rdlong	arg01, local01
0cc5c     01 14 06 F6 | 	mov	arg02, #1
0cc60     F0 A3 B1 FD | 	call	#__system___float_tointeger
0cc64     44 00 90 FD | 	jmp	#LR__1057
0cc68                 | LR__1053
0cc68     13 13 02 FB | 	rdlong	arg01, local01
0cc6c     28 A7 B1 FD | 	call	#__system____builtin_atof
0cc70     FD 12 02 F6 | 	mov	arg01, result1
0cc74     01 14 06 F6 | 	mov	arg02, #1
0cc78     D8 A3 B1 FD | 	call	#__system___float_tointeger
0cc7c     2C 00 90 FD | 	jmp	#LR__1057
0cc80                 | LR__1054
0cc80     13 13 02 FB | 	rdlong	arg01, local01
0cc84     08 FF BF FD | 	call	#_convertstring
0cc88     FD 12 02 F6 | 	mov	arg01, result1
0cc8c     08 A7 B1 FD | 	call	#__system____builtin_atof
0cc90     FD 12 02 F6 | 	mov	arg01, result1
0cc94     01 14 06 F6 | 	mov	arg02, #1
0cc98     B8 A3 B1 FD | 	call	#__system___float_tointeger
0cc9c     0C 00 90 FD | 	jmp	#LR__1057
0cca0                 | LR__1055
0cca0     13 FB 01 FB | 	rdlong	result1, local01
0cca4     04 00 90 FD | 	jmp	#LR__1057
0cca8                 | LR__1056
0cca8     00 FA 05 F6 | 	mov	result1, #0
0ccac                 | LR__1057
0ccac     A7 F0 03 F6 | 	mov	ptra, fp
0ccb0     B2 00 A0 FD | 	call	#popregs_
0ccb4                 | _converttoint_ret
0ccb4     2D 00 64 FD | 	ret
0ccb8                 | 
0ccb8                 | ' 
0ccb8                 | ' ' converts a variable to float
0ccb8                 | ' 
0ccb8                 | ' function converttofloat (t1 as expr_result) as single
0ccb8                 | _converttofloat
0ccb8     03 4A 05 F6 | 	mov	COUNT_, #3
0ccbc     A8 00 A0 FD | 	call	#pushregs_
0ccc0     09 27 02 F6 | 	mov	local01, arg01
0ccc4                 | ' 
0ccc4                 | ' select case t1.result_type
0ccc4     08 26 06 F1 | 	add	local01, #8
0ccc8     13 29 02 FB | 	rdlong	local02, local01
0cccc     08 26 86 F1 | 	sub	local01, #8
0ccd0     1C 28 0E F2 | 	cmp	local02, #28 wz
0ccd4     24 00 90 AD |  if_e	jmp	#LR__1060
0ccd8     1D 28 0E F2 | 	cmp	local02, #29 wz
0ccdc     38 00 90 AD |  if_e	jmp	#LR__1061
0cce0     1E 28 0E F2 | 	cmp	local02, #30 wz
0cce4     3C 00 90 AD |  if_e	jmp	#LR__1062
0cce8     1F 28 0E F2 | 	cmp	local02, #31 wz
0ccec     3C 00 90 AD |  if_e	jmp	#LR__1063
0ccf0     2B 28 0E F2 | 	cmp	local02, #43 wz
0ccf4     40 00 90 AD |  if_e	jmp	#LR__1064
0ccf8     50 00 90 FD | 	jmp	#LR__1065
0ccfc                 | LR__1060
0ccfc     13 13 02 FB | 	rdlong	arg01, local01
0cd00     09 13 52 F6 | 	abs	arg01, arg01 wc
0cd04     1F 2A C6 C9 |  if_b	decod	local03, #31
0cd08     00 2A 06 36 |  if_ae	mov	local03, #0
0cd0c     78 9A B1 FD | 	call	#__system___float_fromuns
0cd10     15 FB 61 F5 | 	xor	result1, local03
0cd14     38 00 90 FD | 	jmp	#LR__1066
0cd18                 | LR__1061
0cd18     13 13 02 FB | 	rdlong	arg01, local01
0cd1c     68 9A B1 FD | 	call	#__system___float_fromuns
0cd20     2C 00 90 FD | 	jmp	#LR__1066
0cd24                 | LR__1062
0cd24     13 FB 01 FB | 	rdlong	result1, local01
0cd28     24 00 90 FD | 	jmp	#LR__1066
0cd2c                 | LR__1063
0cd2c     13 13 02 FB | 	rdlong	arg01, local01
0cd30     64 A6 B1 FD | 	call	#__system____builtin_atof
0cd34     18 00 90 FD | 	jmp	#LR__1066
0cd38                 | LR__1064
0cd38     13 13 02 FB | 	rdlong	arg01, local01
0cd3c     50 FE BF FD | 	call	#_convertstring
0cd40     FD 12 02 F6 | 	mov	arg01, result1
0cd44     50 A6 B1 FD | 	call	#__system____builtin_atof
0cd48     04 00 90 FD | 	jmp	#LR__1066
0cd4c                 | LR__1065
0cd4c     00 FA 05 F6 | 	mov	result1, #0
0cd50                 | LR__1066
0cd50     A7 F0 03 F6 | 	mov	ptra, fp
0cd54     B2 00 A0 FD | 	call	#popregs_
0cd58                 | _converttofloat_ret
0cd58     2D 00 64 FD | 	ret
0cd5c                 | 
0cd5c                 | ' 
0cd5c                 | ' '----------------- End of converting 
0cd5c                 | ' 
0cd5c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cd5c                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0cd5c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cd5c                 | ' 
0cd5c                 | ' sub csave_block(address as ulong)
0cd5c                 | _csave_block
0cd5c     09 01 02 F6 | 	mov	_var01, arg01
0cd60                 | ' 
0cd60                 | ' for i=0 to 63 step 2
0cd60     00 02 06 F6 | 	mov	_var02, #0
0cd64                 | LR__1070
0cd64                 | '   do: loop until lpeek(base+64*7)>32768
0cd64     37 00 00 FF 
0cd68     10 E4 05 F1 | 	add	objptr, ##28176
0cd6c     97 0C 48 FB | 	callpa	#(@LR__1072-@LR__1071)>>2,fcache_load_ptr_
0cd70                 | LR__1071
0cd70     F2 12 02 FB | 	rdlong	arg01, objptr
0cd74     C0 13 06 F1 | 	add	arg01, #448
0cd78     09 FB 01 FB | 	rdlong	result1, arg01
0cd7c     40 00 00 FF 
0cd80     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cd84     E8 FF 9F CD |  if_b	jmp	#LR__1071
0cd88                 | LR__1072
0cd88     00 13 02 F6 | 	mov	arg01, _var01
0cd8c     01 05 02 F6 | 	mov	_var03, _var02
0cd90     02 04 66 F0 | 	shl	_var03, #2
0cd94     02 13 02 F1 | 	add	arg01, _var03
0cd98     09 07 02 FB | 	rdlong	_var04, arg01
0cd9c     1B 00 00 FF 
0cda0     08 E4 05 F1 | 	add	objptr, ##13832
0cda4     F2 06 62 FC | 	wrlong	_var04, objptr
0cda8     52 00 00 FF 
0cdac     18 E4 85 F1 | 	sub	objptr, ##42008
0cdb0                 | '   q=lpeek(address+4*i)
0cdb0                 | '      for bit=0 to 31
0cdb0     00 08 06 F6 | 	mov	_var05, #0
0cdb4     97 84 48 FB | 	callpa	#(@LR__1077-@LR__1073)>>2,fcache_load_ptr_
0cdb8                 | LR__1073
0cdb8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0cdb8     52 00 00 FF 
0cdbc     18 E4 05 F1 | 	add	objptr, ##42008
0cdc0     F2 06 02 FB | 	rdlong	_var04, objptr
0cdc4     52 00 00 FF 
0cdc8     18 E4 85 F1 | 	sub	objptr, ##42008
0cdcc     04 05 C2 F9 | 	decod	_var03, _var05
0cdd0     02 07 CA F7 | 	test	_var04, _var03 wz
0cdd4     60 00 90 AD |  if_e	jmp	#LR__1074
0cdd8     04 05 02 F6 | 	mov	_var03, _var05
0cddc     02 04 66 F0 | 	shl	_var03, #2
0cde0     4D 00 00 FF 
0cde4     B4 E5 05 F1 | 	add	objptr, ##39860
0cde8     F2 04 02 F1 | 	add	_var03, objptr
0cdec     02 FF 48 FC | 	wrbyte	#127, _var03
0cdf0     04 05 02 F6 | 	mov	_var03, _var05
0cdf4     02 04 66 F0 | 	shl	_var03, #2
0cdf8     01 04 06 F1 | 	add	_var03, #1
0cdfc     F2 04 02 F1 | 	add	_var03, objptr
0ce00     02 01 49 FC | 	wrbyte	#128, _var03
0ce04     04 05 02 F6 | 	mov	_var03, _var05
0ce08     02 04 66 F0 | 	shl	_var03, #2
0ce0c     02 04 06 F1 | 	add	_var03, #2
0ce10     F2 04 02 F1 | 	add	_var03, objptr
0ce14     02 FF 48 FC | 	wrbyte	#127, _var03
0ce18     04 05 02 F6 | 	mov	_var03, _var05
0ce1c     02 04 66 F0 | 	shl	_var03, #2
0ce20     03 04 06 F1 | 	add	_var03, #3
0ce24     F2 04 02 F1 | 	add	_var03, objptr
0ce28     02 01 49 FC | 	wrbyte	#128, _var03
0ce2c     4D 00 00 FF 
0ce30     B4 E5 85 F1 | 	sub	objptr, ##39860
0ce34     5C 00 90 FD | 	jmp	#LR__1075
0ce38                 | LR__1074
0ce38     04 05 02 F6 | 	mov	_var03, _var05
0ce3c     02 04 66 F0 | 	shl	_var03, #2
0ce40     4D 00 00 FF 
0ce44     B4 E5 05 F1 | 	add	objptr, ##39860
0ce48     F2 04 02 F1 | 	add	_var03, objptr
0ce4c     02 01 49 FC | 	wrbyte	#128, _var03
0ce50     04 05 02 F6 | 	mov	_var03, _var05
0ce54     02 04 66 F0 | 	shl	_var03, #2
0ce58     01 04 06 F1 | 	add	_var03, #1
0ce5c     F2 04 02 F1 | 	add	_var03, objptr
0ce60     02 01 49 FC | 	wrbyte	#128, _var03
0ce64     04 05 02 F6 | 	mov	_var03, _var05
0ce68     02 04 66 F0 | 	shl	_var03, #2
0ce6c     02 04 06 F1 | 	add	_var03, #2
0ce70     F2 04 02 F1 | 	add	_var03, objptr
0ce74     02 FF 48 FC | 	wrbyte	#127, _var03
0ce78     04 05 02 F6 | 	mov	_var03, _var05
0ce7c     02 04 66 F0 | 	shl	_var03, #2
0ce80     03 04 06 F1 | 	add	_var03, #3
0ce84     F2 04 02 F1 | 	add	_var03, objptr
0ce88     02 FF 48 FC | 	wrbyte	#127, _var03
0ce8c     4D 00 00 FF 
0ce90     B4 E5 85 F1 | 	sub	objptr, ##39860
0ce94                 | LR__1075
0ce94     01 08 06 F1 | 	add	_var05, #1
0ce98     20 08 56 F2 | 	cmps	_var05, #32 wc
0ce9c     18 FF 9F CD |  if_b	jmp	#LR__1073
0cea0                 | '   do: loop until lpeek(base+64*7)<32768
0cea0     37 00 00 FF 
0cea4     10 E4 05 F1 | 	add	objptr, ##28176
0cea8                 | LR__1076
0cea8     F2 12 02 FB | 	rdlong	arg01, objptr
0ceac     C0 13 06 F1 | 	add	arg01, #448
0ceb0     09 FB 01 FB | 	rdlong	result1, arg01
0ceb4     40 00 00 FF 
0ceb8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0cebc     E8 FF 9F 3D |  if_ae	jmp	#LR__1076
0cec0                 | LR__1077
0cec0     00 13 02 F6 | 	mov	arg01, _var01
0cec4     04 12 06 F1 | 	add	arg01, #4
0cec8     01 05 02 F6 | 	mov	_var03, _var02
0cecc     02 04 66 F0 | 	shl	_var03, #2
0ced0     02 13 02 F1 | 	add	arg01, _var03
0ced4     09 07 02 FB | 	rdlong	_var04, arg01
0ced8     1B 00 00 FF 
0cedc     08 E4 05 F1 | 	add	objptr, ##13832
0cee0     F2 06 62 FC | 	wrlong	_var04, objptr
0cee4     52 00 00 FF 
0cee8     18 E4 85 F1 | 	sub	objptr, ##42008
0ceec                 | '   q=lpeek(address+4+4*i)
0ceec                 | '      for bit=0 to 31
0ceec     00 08 06 F6 | 	mov	_var05, #0
0cef0     97 94 48 FB | 	callpa	#(@LR__1081-@LR__1078)>>2,fcache_load_ptr_
0cef4                 | LR__1078
0cef4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0cef4     52 00 00 FF 
0cef8     18 E4 05 F1 | 	add	objptr, ##42008
0cefc     F2 06 02 FB | 	rdlong	_var04, objptr
0cf00     52 00 00 FF 
0cf04     18 E4 85 F1 | 	sub	objptr, ##42008
0cf08     04 05 C2 F9 | 	decod	_var03, _var05
0cf0c     02 07 CA F7 | 	test	_var04, _var03 wz
0cf10     80 00 90 AD |  if_e	jmp	#LR__1079
0cf14     04 0B 02 F6 | 	mov	_var06, _var05
0cf18     02 0A 66 F0 | 	shl	_var06, #2
0cf1c     80 04 06 F6 | 	mov	_var03, #128
0cf20     05 05 02 F1 | 	add	_var03, _var06
0cf24     4D 00 00 FF 
0cf28     B4 E5 05 F1 | 	add	objptr, ##39860
0cf2c     F2 04 02 F1 | 	add	_var03, objptr
0cf30     02 FF 48 FC | 	wrbyte	#127, _var03
0cf34     04 0B 02 F6 | 	mov	_var06, _var05
0cf38     02 0A 66 F0 | 	shl	_var06, #2
0cf3c     80 04 06 F6 | 	mov	_var03, #128
0cf40     05 05 02 F1 | 	add	_var03, _var06
0cf44     01 04 06 F1 | 	add	_var03, #1
0cf48     F2 04 02 F1 | 	add	_var03, objptr
0cf4c     02 01 49 FC | 	wrbyte	#128, _var03
0cf50     04 0B 02 F6 | 	mov	_var06, _var05
0cf54     02 0A 66 F0 | 	shl	_var06, #2
0cf58     80 04 06 F6 | 	mov	_var03, #128
0cf5c     05 05 02 F1 | 	add	_var03, _var06
0cf60     02 04 06 F1 | 	add	_var03, #2
0cf64     F2 04 02 F1 | 	add	_var03, objptr
0cf68     02 FF 48 FC | 	wrbyte	#127, _var03
0cf6c     04 0B 02 F6 | 	mov	_var06, _var05
0cf70     02 0A 66 F0 | 	shl	_var06, #2
0cf74     80 04 06 F6 | 	mov	_var03, #128
0cf78     05 05 02 F1 | 	add	_var03, _var06
0cf7c     03 04 06 F1 | 	add	_var03, #3
0cf80     F2 04 02 F1 | 	add	_var03, objptr
0cf84     02 01 49 FC | 	wrbyte	#128, _var03
0cf88     4D 00 00 FF 
0cf8c     B4 E5 85 F1 | 	sub	objptr, ##39860
0cf90     7C 00 90 FD | 	jmp	#LR__1080
0cf94                 | LR__1079
0cf94     04 0B 02 F6 | 	mov	_var06, _var05
0cf98     02 0A 66 F0 | 	shl	_var06, #2
0cf9c     80 04 06 F6 | 	mov	_var03, #128
0cfa0     05 05 02 F1 | 	add	_var03, _var06
0cfa4     4D 00 00 FF 
0cfa8     B4 E5 05 F1 | 	add	objptr, ##39860
0cfac     F2 04 02 F1 | 	add	_var03, objptr
0cfb0     02 01 49 FC | 	wrbyte	#128, _var03
0cfb4     04 0B 02 F6 | 	mov	_var06, _var05
0cfb8     02 0A 66 F0 | 	shl	_var06, #2
0cfbc     80 04 06 F6 | 	mov	_var03, #128
0cfc0     05 05 02 F1 | 	add	_var03, _var06
0cfc4     01 04 06 F1 | 	add	_var03, #1
0cfc8     F2 04 02 F1 | 	add	_var03, objptr
0cfcc     02 01 49 FC | 	wrbyte	#128, _var03
0cfd0     04 0B 02 F6 | 	mov	_var06, _var05
0cfd4     02 0A 66 F0 | 	shl	_var06, #2
0cfd8     80 04 06 F6 | 	mov	_var03, #128
0cfdc     05 05 02 F1 | 	add	_var03, _var06
0cfe0     02 04 06 F1 | 	add	_var03, #2
0cfe4     F2 04 02 F1 | 	add	_var03, objptr
0cfe8     02 FF 48 FC | 	wrbyte	#127, _var03
0cfec     04 0B 02 F6 | 	mov	_var06, _var05
0cff0     02 0A 66 F0 | 	shl	_var06, #2
0cff4     80 04 06 F6 | 	mov	_var03, #128
0cff8     05 05 02 F1 | 	add	_var03, _var06
0cffc     03 04 06 F1 | 	add	_var03, #3
0d000     F2 04 02 F1 | 	add	_var03, objptr
0d004     02 FF 48 FC | 	wrbyte	#127, _var03
0d008     4D 00 00 FF 
0d00c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d010                 | LR__1080
0d010     01 08 06 F1 | 	add	_var05, #1
0d014     20 08 56 F2 | 	cmps	_var05, #32 wc
0d018     D8 FE 9F CD |  if_b	jmp	#LR__1078
0d01c                 | LR__1081
0d01c     02 02 06 F1 | 	add	_var02, #2
0d020     40 02 56 F2 | 	cmps	_var02, #64 wc
0d024     3C FD 9F CD |  if_b	jmp	#LR__1070
0d028                 | ' do: loop until lpeek(base+64*7)>32768
0d028     37 00 00 FF 
0d02c     10 E4 05 F1 | 	add	objptr, ##28176
0d030     97 84 48 FB | 	callpa	#(@LR__1090-@LR__1082)>>2,fcache_load_ptr_
0d034                 | LR__1082
0d034     F2 12 02 FB | 	rdlong	arg01, objptr
0d038     C0 13 06 F1 | 	add	arg01, #448
0d03c     09 FB 01 FB | 	rdlong	result1, arg01
0d040     40 00 00 FF 
0d044     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d048     E8 FF 9F CD |  if_b	jmp	#LR__1082
0d04c     37 00 00 FF 
0d050     10 E4 85 F1 | 	sub	objptr, ##28176
0d054                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d054     00 02 06 F6 | 	mov	_var02, #0
0d058                 | LR__1083
0d058     01 07 52 F6 | 	abs	_var04, _var02 wc
0d05c     07 06 06 F5 | 	and	_var04, #7
0d060     03 07 82 F6 | 	negc	_var04, _var04
0d064     04 06 56 F2 | 	cmps	_var04, #4 wc
0d068     20 00 90 3D |  if_ae	jmp	#LR__1084
0d06c     01 0B 02 F6 | 	mov	_var06, _var02
0d070     4D 00 00 FF 
0d074     B4 E5 05 F1 | 	add	objptr, ##39860
0d078     F2 0A 02 F1 | 	add	_var06, objptr
0d07c     05 FF 48 FC | 	wrbyte	#127, _var06
0d080     4D 00 00 FF 
0d084     B4 E5 85 F1 | 	sub	objptr, ##39860
0d088     1C 00 90 FD | 	jmp	#LR__1085
0d08c                 | LR__1084
0d08c     01 0B 02 F6 | 	mov	_var06, _var02
0d090     4D 00 00 FF 
0d094     B4 E5 05 F1 | 	add	objptr, ##39860
0d098     F2 0A 02 F1 | 	add	_var06, objptr
0d09c     05 01 49 FC | 	wrbyte	#128, _var06
0d0a0     4D 00 00 FF 
0d0a4     B4 E5 85 F1 | 	sub	objptr, ##39860
0d0a8                 | LR__1085
0d0a8     01 02 06 F1 | 	add	_var02, #1
0d0ac     80 02 56 F2 | 	cmps	_var02, #128 wc
0d0b0     A4 FF 9F CD |  if_b	jmp	#LR__1083
0d0b4                 | ' 
0d0b4                 | ' do: loop until lpeek(base+64*7)<32768
0d0b4     37 00 00 FF 
0d0b8     10 E4 05 F1 | 	add	objptr, ##28176
0d0bc                 | LR__1086
0d0bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d0c0     C0 13 06 F1 | 	add	arg01, #448
0d0c4     09 FB 01 FB | 	rdlong	result1, arg01
0d0c8     40 00 00 FF 
0d0cc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0d0d0     E8 FF 9F 3D |  if_ae	jmp	#LR__1086
0d0d4     37 00 00 FF 
0d0d8     10 E4 85 F1 | 	sub	objptr, ##28176
0d0dc                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d0dc     80 02 06 F6 | 	mov	_var02, #128
0d0e0                 | LR__1087
0d0e0     01 07 52 F6 | 	abs	_var04, _var02 wc
0d0e4     07 06 06 F5 | 	and	_var04, #7
0d0e8     03 07 82 F6 | 	negc	_var04, _var04
0d0ec     04 06 56 F2 | 	cmps	_var04, #4 wc
0d0f0     20 00 90 3D |  if_ae	jmp	#LR__1088
0d0f4     01 0B 02 F6 | 	mov	_var06, _var02
0d0f8     4D 00 00 FF 
0d0fc     B4 E5 05 F1 | 	add	objptr, ##39860
0d100     F2 0A 02 F1 | 	add	_var06, objptr
0d104     05 FF 48 FC | 	wrbyte	#127, _var06
0d108     4D 00 00 FF 
0d10c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d110     1C 00 90 FD | 	jmp	#LR__1089
0d114                 | LR__1088
0d114     01 0B 02 F6 | 	mov	_var06, _var02
0d118     4D 00 00 FF 
0d11c     B4 E5 05 F1 | 	add	objptr, ##39860
0d120     F2 0A 02 F1 | 	add	_var06, objptr
0d124     05 01 49 FC | 	wrbyte	#128, _var06
0d128     4D 00 00 FF 
0d12c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d130                 | LR__1089
0d130     01 02 06 F1 | 	add	_var02, #1
0d134     00 03 16 F2 | 	cmp	_var02, #256 wc
0d138     A4 FF 9F CD |  if_b	jmp	#LR__1087
0d13c                 | LR__1090
0d13c                 | _csave_block_ret
0d13c     2D 00 64 FD | 	ret
0d140                 | 
0d140                 | ' 
0d140                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d140                 | _csave_addtoblock
0d140     04 4A 05 F6 | 	mov	COUNT_, #4
0d144     A8 00 A0 FD | 	call	#pushregs_
0d148     09 27 02 F6 | 	mov	local01, arg01
0d14c                 | ' 
0d14c                 | ' if force=0 then
0d14c     07 14 4E F7 | 	zerox	arg02, #7 wz
0d150     78 00 90 5D |  if_ne	jmp	#LR__1100
0d154     50 00 00 FF 
0d158     B4 E4 05 F1 | 	add	objptr, ##41140
0d15c     F2 14 02 FB | 	rdlong	arg02, objptr
0d160     02 00 00 FF 
0d164     00 E4 85 F1 | 	sub	objptr, ##1024
0d168     F2 14 02 F1 | 	add	arg02, objptr
0d16c     0A 27 42 FC | 	wrbyte	local01, arg02
0d170     02 00 00 FF 
0d174     00 E4 05 F1 | 	add	objptr, ##1024
0d178     F2 26 02 FB | 	rdlong	local01, objptr
0d17c     01 26 06 F1 | 	add	local01, #1
0d180     F2 26 62 FC | 	wrlong	local01, objptr
0d184                 | '   block(blockptr)=d
0d184                 | '   blockptr+=1
0d184                 | '   if blockptr>=255 then
0d184     50 00 00 FF 
0d188     B4 E4 85 F1 | 	sub	objptr, ##41140
0d18c     FF 26 16 F2 | 	cmp	local01, #255 wc
0d190     E4 00 90 CD |  if_b	jmp	#LR__1104
0d194     4E 00 00 FF 
0d198     B4 E4 05 F1 | 	add	objptr, ##40116
0d19c     F2 12 02 F6 | 	mov	arg01, objptr
0d1a0     4E 00 00 FF 
0d1a4     B4 E4 85 F1 | 	sub	objptr, ##40116
0d1a8     B0 FB BF FD | 	call	#_csave_block
0d1ac     50 00 00 FF 
0d1b0     B4 E4 05 F1 | 	add	objptr, ##41140
0d1b4     F2 00 68 FC | 	wrlong	#0, objptr
0d1b8     50 00 00 FF 
0d1bc     B4 E4 85 F1 | 	sub	objptr, ##41140
0d1c0     2C 13 06 F6 | 	mov	arg01, #300
0d1c4     40 6E B1 FD | 	call	#__system___waitms
0d1c8     AC 00 90 FD | 	jmp	#LR__1104
0d1cc                 | LR__1100
0d1cc     50 00 00 FF 
0d1d0     B4 E4 05 F1 | 	add	objptr, ##41140
0d1d4     F2 28 02 FB | 	rdlong	local02, objptr
0d1d8     02 00 00 FF 
0d1dc     00 E4 85 F1 | 	sub	objptr, ##1024
0d1e0     F2 28 02 F1 | 	add	local02, objptr
0d1e4     14 27 42 FC | 	wrbyte	local01, local02
0d1e8                 | '   block(blockptr)=d
0d1e8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d1e8     02 00 00 FF 
0d1ec     00 E4 05 F1 | 	add	objptr, ##1024
0d1f0     F2 2A 02 FB | 	rdlong	local03, objptr
0d1f4     50 00 00 FF 
0d1f8     B4 E4 85 F1 | 	sub	objptr, ##41140
0d1fc     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d200     40 00 90 3D |  if_ae	jmp	#LR__1103
0d204     50 00 00 FF 
0d208     B4 E4 05 F1 | 	add	objptr, ##41140
0d20c     F2 2C 02 FB | 	rdlong	local04, objptr
0d210     50 00 00 FF 
0d214     B4 E4 85 F1 | 	sub	objptr, ##41140
0d218                 | LR__1101
0d218     00 2D 56 F2 | 	cmps	local04, #256 wc
0d21c     24 00 90 3D |  if_ae	jmp	#LR__1102
0d220     16 29 02 F6 | 	mov	local02, local04
0d224     4E 00 00 FF 
0d228     B4 E4 05 F1 | 	add	objptr, ##40116
0d22c     F2 28 02 F1 | 	add	local02, objptr
0d230     14 01 48 FC | 	wrbyte	#0, local02
0d234     01 2C 06 F1 | 	add	local04, #1
0d238     4E 00 00 FF 
0d23c     B4 E4 85 F1 | 	sub	objptr, ##40116
0d240     D4 FF 9F FD | 	jmp	#LR__1101
0d244                 | LR__1102
0d244                 | LR__1103
0d244     4E 00 00 FF 
0d248     B4 E4 05 F1 | 	add	objptr, ##40116
0d24c     F2 12 02 F6 | 	mov	arg01, objptr
0d250     4E 00 00 FF 
0d254     B4 E4 85 F1 | 	sub	objptr, ##40116
0d258     00 FB BF FD | 	call	#_csave_block
0d25c     50 00 00 FF 
0d260     B4 E4 05 F1 | 	add	objptr, ##41140
0d264     F2 00 68 FC | 	wrlong	#0, objptr
0d268     50 00 00 FF 
0d26c     B4 E4 85 F1 | 	sub	objptr, ##41140
0d270     2C 13 06 F6 | 	mov	arg01, #300
0d274     90 6D B1 FD | 	call	#__system___waitms
0d278                 | LR__1104
0d278     A7 F0 03 F6 | 	mov	ptra, fp
0d27c     B2 00 A0 FD | 	call	#popregs_
0d280                 | _csave_addtoblock_ret
0d280     2D 00 64 FD | 	ret
0d284                 | 
0d284                 | ' 
0d284                 | ' '----------------------- csave
0d284                 | ' 
0d284                 | ' sub test_csave
0d284                 | _test_csave
0d284     04 4A 05 F6 | 	mov	COUNT_, #4
0d288     A8 00 A0 FD | 	call	#pushregs_
0d28c     C0 F0 07 F1 | 	add	ptra, #192
0d290                 | ' 'dim fileheader,savestart, saveptr as ulong
0d290                 | ' 
0d290                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d290     4A 00 00 FF 
0d294     88 E4 05 F1 | 	add	objptr, ##38024
0d298     F2 12 02 FB | 	rdlong	arg01, objptr
0d29c     4A 00 00 FF 
0d2a0     88 E4 85 F1 | 	sub	objptr, ##38024
0d2a4     98 33 B1 FD | 	call	#_pslpeek
0d2a8     FF FF 7F FF 
0d2ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d2b0     10 00 90 5D |  if_ne	jmp	#LR__1110
0d2b4     1B 12 06 F6 | 	mov	arg01, #27
0d2b8     00 14 06 F6 | 	mov	arg02, #0
0d2bc     C4 30 B1 FD | 	call	#_printerror
0d2c0     1C 03 90 FD | 	jmp	#LR__1124
0d2c4                 | LR__1110
0d2c4     50 F7 BF FD | 	call	#_pop
0d2c8     90 4E 05 F1 | 	add	fp, #144
0d2cc     A7 FA 61 FC | 	wrlong	result1, fp
0d2d0     04 4E 05 F1 | 	add	fp, #4
0d2d4     A7 FC 61 FC | 	wrlong	result2, fp
0d2d8     04 4E 05 F1 | 	add	fp, #4
0d2dc     A7 FE 61 FC | 	wrlong	result3, fp
0d2e0                 | ' t1=pop()
0d2e0                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d2e0     98 4E 85 F1 | 	sub	fp, #152
0d2e4     1F FE 0D F2 | 	cmp	result3, #31 wz
0d2e8     24 00 90 AD |  if_e	jmp	#LR__1111
0d2ec     51 00 00 FF 
0d2f0     D8 E5 05 F1 | 	add	objptr, ##41944
0d2f4     F2 1C 02 FB | 	rdlong	arg06, objptr
0d2f8     51 00 00 FF 
0d2fc     D8 E5 85 F1 | 	sub	objptr, ##41944
0d300     8C 4E 05 F1 | 	add	fp, #140
0d304     A7 1C 62 FC | 	wrlong	arg06, fp
0d308     8C 4E 85 F1 | 	sub	fp, #140
0d30c     14 00 90 FD | 	jmp	#LR__1112
0d310                 | LR__1111
0d310     90 4E 05 F1 | 	add	fp, #144
0d314     A7 1C 02 FB | 	rdlong	arg06, fp
0d318     04 4E 85 F1 | 	sub	fp, #4
0d31c     A7 1C 62 FC | 	wrlong	arg06, fp
0d320     8C 4E 85 F1 | 	sub	fp, #140
0d324                 | LR__1112
0d324                 | ' 
0d324                 | ' ' prepare 1 kHz header wave
0d324                 | ' 
0d324                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d324     A7 00 68 FC | 	wrlong	#0, fp
0d328     97 34 48 FB | 	callpa	#(@LR__1116-@LR__1113)>>2,fcache_load_ptr_
0d32c                 | LR__1113
0d32c     A7 1C 02 FB | 	rdlong	arg06, fp
0d330     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d334     07 1A 06 F5 | 	and	arg05, #7
0d338     0D 1B 82 F6 | 	negc	arg05, arg05
0d33c     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d340     20 00 90 3D |  if_ae	jmp	#LR__1114
0d344     A7 1A 02 FB | 	rdlong	arg05, fp
0d348     4D 00 00 FF 
0d34c     B4 E5 05 F1 | 	add	objptr, ##39860
0d350     F2 1A 02 F1 | 	add	arg05, objptr
0d354     0D FF 48 FC | 	wrbyte	#127, arg05
0d358     4D 00 00 FF 
0d35c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d360     1C 00 90 FD | 	jmp	#LR__1115
0d364                 | LR__1114
0d364     A7 1A 02 FB | 	rdlong	arg05, fp
0d368     4D 00 00 FF 
0d36c     B4 E5 05 F1 | 	add	objptr, ##39860
0d370     F2 1A 02 F1 | 	add	arg05, objptr
0d374     0D 01 49 FC | 	wrbyte	#128, arg05
0d378     4D 00 00 FF 
0d37c     B4 E5 85 F1 | 	sub	objptr, ##39860
0d380                 | LR__1115
0d380     A7 1A 02 FB | 	rdlong	arg05, fp
0d384     01 1A 06 F1 | 	add	arg05, #1
0d388     A7 1A 62 FC | 	wrlong	arg05, fp
0d38c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d390     98 FF 9F CD |  if_b	jmp	#LR__1113
0d394                 | LR__1116
0d394     4D 00 00 FF 
0d398     B4 E5 05 F1 | 	add	objptr, ##39860
0d39c     F2 14 02 F6 | 	mov	arg02, objptr
0d3a0     07 12 06 F6 | 	mov	arg01, #7
0d3a4     0F 00 00 FF 
0d3a8     40 17 06 F6 | 	mov	arg03, ##8000
0d3ac     0E 18 C6 F9 | 	decod	arg04, #14
0d3b0     00 1B 06 F6 | 	mov	arg05, #256
0d3b4     00 1C 06 F6 | 	mov	arg06, #0
0d3b8     42 00 00 FF 
0d3bc     E8 E4 85 F1 | 	sub	objptr, ##34024
0d3c0     AC 65 B1 FD | 	call	#_audio096_spin2_play8
0d3c4     0B 00 00 FF 
0d3c8     CC E4 85 F1 | 	sub	objptr, ##5836
0d3cc     05 00 00 FF 
0d3d0     B8 13 06 F6 | 	mov	arg01, ##3000
0d3d4     30 6C B1 FD | 	call	#__system___waitms
0d3d8     50 00 00 FF 
0d3dc     B4 E4 05 F1 | 	add	objptr, ##41140
0d3e0     F2 00 68 FC | 	wrlong	#0, objptr
0d3e4     50 00 00 FF 
0d3e8     B4 E4 85 F1 | 	sub	objptr, ##41140
0d3ec     72 12 06 F6 | 	mov	arg01, #114
0d3f0     00 14 06 F6 | 	mov	arg02, #0
0d3f4     48 FD BF FD | 	call	#_csave_addtoblock
0d3f8     62 12 06 F6 | 	mov	arg01, #98
0d3fc     00 14 06 F6 | 	mov	arg02, #0
0d400     3C FD BF FD | 	call	#_csave_addtoblock
0d404     61 12 06 F6 | 	mov	arg01, #97
0d408     00 14 06 F6 | 	mov	arg02, #0
0d40c     30 FD BF FD | 	call	#_csave_addtoblock
0d410     0D 12 06 F6 | 	mov	arg01, #13
0d414     00 14 06 F6 | 	mov	arg02, #0
0d418     24 FD BF FD | 	call	#_csave_addtoblock
0d41c                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d41c                 | ' waitms 3000 
0d41c                 | ' 
0d41c                 | ' blockptr=0
0d41c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d41c                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d41c     A7 02 68 FC | 	wrlong	#1, fp
0d420     8C 4E 05 F1 | 	add	fp, #140
0d424     A7 12 02 FB | 	rdlong	arg01, fp
0d428     8C 4E 85 F1 | 	sub	fp, #140
0d42c     09 27 02 F6 | 	mov	local01, arg01
0d430     97 06 48 FB | 	callpa	#(@LR__1118-@LR__1117)>>2,fcache_load_ptr_
0d434                 | LR__1117
0d434     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d438     01 26 06 51 |  if_ne	add	local01, #1
0d43c     F4 FF 9F 5D |  if_ne	jmp	#LR__1117
0d440                 | LR__1118
0d440     09 27 82 F1 | 	sub	local01, arg01
0d444     13 29 02 F6 | 	mov	local02, local01
0d448     01 28 06 F1 | 	add	local02, #1
0d44c                 | LR__1119
0d44c     A7 1A 02 FB | 	rdlong	arg05, fp
0d450     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d454     34 00 90 3D |  if_ae	jmp	#LR__1120
0d458     8C 4E 05 F1 | 	add	fp, #140
0d45c     A7 12 02 FB | 	rdlong	arg01, fp
0d460     8C 4E 85 F1 | 	sub	fp, #140
0d464     A7 14 02 FB | 	rdlong	arg02, fp
0d468     01 16 06 F6 | 	mov	arg03, #1
0d46c     38 8A B1 FD | 	call	#__system__Mid_S
0d470     FD 12 C2 FA | 	rdbyte	arg01, result1
0d474     00 14 06 F6 | 	mov	arg02, #0
0d478     C4 FC BF FD | 	call	#_csave_addtoblock
0d47c     A7 1A 02 FB | 	rdlong	arg05, fp
0d480     01 1A 06 F1 | 	add	arg05, #1
0d484     A7 1A 62 FC | 	wrlong	arg05, fp
0d488     C0 FF 9F FD | 	jmp	#LR__1119
0d48c                 | LR__1120
0d48c     00 12 06 F6 | 	mov	arg01, #0
0d490     00 14 06 F6 | 	mov	arg02, #0
0d494     A8 FC BF FD | 	call	#_csave_addtoblock
0d498     72 12 06 F6 | 	mov	arg01, #114
0d49c     00 14 06 F6 | 	mov	arg02, #0
0d4a0     9C FC BF FD | 	call	#_csave_addtoblock
0d4a4     62 12 06 F6 | 	mov	arg01, #98
0d4a8     00 14 06 F6 | 	mov	arg02, #0
0d4ac     90 FC BF FD | 	call	#_csave_addtoblock
0d4b0     73 12 06 F6 | 	mov	arg01, #115
0d4b4     00 14 06 F6 | 	mov	arg02, #0
0d4b8     84 FC BF FD | 	call	#_csave_addtoblock
0d4bc     0D 12 06 F6 | 	mov	arg01, #13
0d4c0     00 14 06 F6 | 	mov	arg02, #0
0d4c4     78 FC BF FD | 	call	#_csave_addtoblock
0d4c8     4A 00 00 FF 
0d4cc     88 E4 05 F1 | 	add	objptr, ##38024
0d4d0     F2 2A 02 FB | 	rdlong	local03, objptr
0d4d4     4A 00 00 FF 
0d4d8     88 E4 85 F1 | 	sub	objptr, ##38024
0d4dc     9C 4E 05 F1 | 	add	fp, #156
0d4e0     A7 2A 62 FC | 	wrlong	local03, fp
0d4e4     9C 4E 85 F1 | 	sub	fp, #156
0d4e8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d4e8                 | ' 
0d4e8                 | ' saveptr=programstart
0d4e8                 | ' do
0d4e8                 | LR__1121
0d4e8     A0 4E 05 F1 | 	add	fp, #160
0d4ec     A7 12 02 F6 | 	mov	arg01, fp
0d4f0     04 4E 85 F1 | 	sub	fp, #4
0d4f4     A7 14 02 FB | 	rdlong	arg02, fp
0d4f8     9C 4E 85 F1 | 	sub	fp, #156
0d4fc     18 16 06 F6 | 	mov	arg03, #24
0d500     0B 00 00 FF 
0d504     CC E4 05 F1 | 	add	objptr, ##5836
0d508     C8 5B B1 FD | 	call	#_psram_spin2_read1
0d50c     0C 4E 05 F1 | 	add	fp, #12
0d510     A7 12 02 F6 | 	mov	arg01, fp
0d514     9C 4E 05 F1 | 	add	fp, #156
0d518     A7 14 02 FB | 	rdlong	arg02, fp
0d51c     04 4E 05 F1 | 	add	fp, #4
0d520     A7 16 02 FB | 	rdlong	arg03, fp
0d524     AC 4E 85 F1 | 	sub	fp, #172
0d528     A8 5B B1 FD | 	call	#_psram_spin2_read1
0d52c     0B 00 00 FF 
0d530     CC E4 85 F1 | 	sub	objptr, ##5836
0d534     AC 4E 05 F1 | 	add	fp, #172
0d538     A7 12 02 FB | 	rdlong	arg01, fp
0d53c     AC 4E 85 F1 | 	sub	fp, #172
0d540     00 14 06 F6 | 	mov	arg02, #0
0d544     F8 FB BF FD | 	call	#_csave_addtoblock
0d548                 | ' 
0d548                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d548                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d548                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d548                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d548     A7 00 68 FC | 	wrlong	#0, fp
0d54c     AC 4E 05 F1 | 	add	fp, #172
0d550     A7 2C 02 FB | 	rdlong	local04, fp
0d554     AC 4E 85 F1 | 	sub	fp, #172
0d558                 | LR__1122
0d558     A7 2A 02 FB | 	rdlong	local03, fp
0d55c     16 2B 52 F2 | 	cmps	local03, local04 wc
0d560     2C 00 90 3D |  if_ae	jmp	#LR__1123
0d564     A7 2A 02 FB | 	rdlong	local03, fp
0d568     0C 4E 05 F1 | 	add	fp, #12
0d56c     A7 2A 02 F1 | 	add	local03, fp
0d570     15 13 C2 FA | 	rdbyte	arg01, local03
0d574     00 14 06 F6 | 	mov	arg02, #0
0d578     0C 4E 85 F1 | 	sub	fp, #12
0d57c     C0 FB BF FD | 	call	#_csave_addtoblock
0d580     A7 2A 02 FB | 	rdlong	local03, fp
0d584     01 2A 06 F1 | 	add	local03, #1
0d588     A7 2A 62 FC | 	wrlong	local03, fp
0d58c     C8 FF 9F FD | 	jmp	#LR__1122
0d590                 | LR__1123
0d590     B4 4E 05 F1 | 	add	fp, #180
0d594     A7 2A 02 FB | 	rdlong	local03, fp
0d598     18 4E 85 F1 | 	sub	fp, #24
0d59c     A7 2A 62 FC | 	wrlong	local03, fp
0d5a0     18 4E 05 F1 | 	add	fp, #24
0d5a4     A7 2A 02 FB | 	rdlong	local03, fp
0d5a8     B4 4E 85 F1 | 	sub	fp, #180
0d5ac     FF FF 3F FF 
0d5b0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d5b4     30 FF 9F 5D |  if_ne	jmp	#LR__1121
0d5b8     00 12 06 F6 | 	mov	arg01, #0
0d5bc     01 14 06 F6 | 	mov	arg02, #1
0d5c0     7C FB BF FD | 	call	#_csave_addtoblock
0d5c4     37 00 00 FF 
0d5c8     10 E4 05 F1 | 	add	objptr, ##28176
0d5cc     F2 12 02 FB | 	rdlong	arg01, objptr
0d5d0     37 00 00 FF 
0d5d4     10 E4 85 F1 | 	sub	objptr, ##28176
0d5d8     D4 13 06 F1 | 	add	arg01, #468
0d5dc     09 01 58 FC | 	wrword	#0, arg01
0d5e0                 | LR__1124
0d5e0     A7 F0 03 F6 | 	mov	ptra, fp
0d5e4     B2 00 A0 FD | 	call	#popregs_
0d5e8                 | _test_csave_ret
0d5e8     2D 00 64 FD | 	ret
0d5ec                 | 
0d5ec                 | ' 
0d5ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5ec                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d5ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5ec                 | ' 
0d5ec                 | ' 
0d5ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5ec                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d5ec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5ec                 | ' 
0d5ec                 | ' '-------------------- abs
0d5ec                 | ' 
0d5ec                 | ' sub do_abs
0d5ec                 | _do_abs
0d5ec     01 4A 05 F6 | 	mov	COUNT_, #1
0d5f0     A8 00 A0 FD | 	call	#pushregs_
0d5f4     0C F0 07 F1 | 	add	ptra, #12
0d5f8     1C F4 BF FD | 	call	#_pop
0d5fc     FF 26 02 F6 | 	mov	local01, result3
0d600     A7 FA 61 FC | 	wrlong	result1, fp
0d604     04 4E 05 F1 | 	add	fp, #4
0d608     A7 FC 61 FC | 	wrlong	result2, fp
0d60c     04 4E 05 F1 | 	add	fp, #4
0d610     A7 26 62 FC | 	wrlong	local01, fp
0d614                 | ' 
0d614                 | ' t1=pop()
0d614                 | ' if t1.result_type=result_int then 
0d614     08 4E 85 F1 | 	sub	fp, #8
0d618     1C 26 0E F2 | 	cmp	local01, #28 wz
0d61c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d620     09 27 42 A6 |  if_e	abs	local01, arg01
0d624     A7 26 62 AC |  if_e	wrlong	local01, fp
0d628     2C 00 90 AD |  if_e	jmp	#LR__1130
0d62c     08 4E 05 F1 | 	add	fp, #8
0d630     A7 26 02 FB | 	rdlong	local01, fp
0d634     08 4E 85 F1 | 	sub	fp, #8
0d638     1E 26 0E F2 | 	cmp	local01, #30 wz
0d63c     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d640     1F FA 05 A4 |  if_e	bitl	result1, #31
0d644     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d648     08 4E 05 51 |  if_ne	add	fp, #8
0d64c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d650     08 4E 85 51 |  if_ne	sub	fp, #8
0d654     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d658                 | LR__1130
0d658     A7 12 02 F6 | 	mov	arg01, fp
0d65c     50 F4 BF FD | 	call	#_push
0d660     A7 F0 03 F6 | 	mov	ptra, fp
0d664     B2 00 A0 FD | 	call	#popregs_
0d668                 | _do_abs_ret
0d668     2D 00 64 FD | 	ret
0d66c                 | 
0d66c                 | ' 
0d66c                 | ' '-------------------- acos
0d66c                 | ' 
0d66c                 | ' sub do_acos
0d66c                 | _do_acos
0d66c     01 4A 05 F6 | 	mov	COUNT_, #1
0d670     A8 00 A0 FD | 	call	#pushregs_
0d674     10 F0 07 F1 | 	add	ptra, #16
0d678     4A 00 00 FF 
0d67c     80 E4 05 F1 | 	add	objptr, ##38016
0d680     F2 26 02 FB | 	rdlong	local01, objptr
0d684     13 17 02 F6 | 	mov	arg03, local01
0d688     01 16 66 F0 | 	shl	arg03, #1
0d68c     13 17 02 F1 | 	add	arg03, local01
0d690     02 16 66 F0 | 	shl	arg03, #2
0d694     03 00 00 FF 
0d698     04 E4 85 F1 | 	sub	objptr, ##1540
0d69c     F2 16 02 F1 | 	add	arg03, objptr
0d6a0     0B 17 02 FB | 	rdlong	arg03, arg03
0d6a4     0C 4E 05 F1 | 	add	fp, #12
0d6a8     A7 16 62 FC | 	wrlong	arg03, fp
0d6ac                 | ' 
0d6ac                 | ' numpar=compiledline(lineptr_e).result.uresult
0d6ac                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d6ac     0C 4E 85 F1 | 	sub	fp, #12
0d6b0     02 16 16 F2 | 	cmp	arg03, #2 wc
0d6b4     47 00 00 FF 
0d6b8     7C E4 85 F1 | 	sub	objptr, ##36476
0d6bc     0C 4E 05 C1 |  if_b	add	fp, #12
0d6c0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d6c4     0C 4E 85 C1 |  if_b	sub	fp, #12
0d6c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0d6cc     00 12 06 F6 | 	mov	arg01, #0
0d6d0     68 C3 B1 FD | 	call	#__system___getiolock_0573
0d6d4     FD 12 02 F6 | 	mov	arg01, result1
0d6d8     38 66 B1 FD | 	call	#__system___lockmem
0d6dc     9F 01 00 FF 
0d6e0     3D 15 06 F6 | 	mov	arg02, ##@LR__5675
0d6e4     00 12 06 F6 | 	mov	arg01, #0
0d6e8     00 16 06 F6 | 	mov	arg03, #0
0d6ec     18 73 B1 FD | 	call	#__system___basic_print_string
0d6f0     00 12 06 F6 | 	mov	arg01, #0
0d6f4     44 C3 B1 FD | 	call	#__system___getiolock_0573
0d6f8     FD 00 68 FC | 	wrlong	#0, result1
0d6fc     27 12 06 F6 | 	mov	arg01, #39
0d700     00 14 06 F6 | 	mov	arg02, #0
0d704     7C 2C B1 FD | 	call	#_printerror
0d708     64 00 90 FD | 	jmp	#LR__1141
0d70c                 | LR__1140
0d70c     08 F3 BF FD | 	call	#_pop
0d710     FF 26 02 F6 | 	mov	local01, result3
0d714     A7 FA 61 FC | 	wrlong	result1, fp
0d718     04 4E 05 F1 | 	add	fp, #4
0d71c     A7 FC 61 FC | 	wrlong	result2, fp
0d720     04 4E 05 F1 | 	add	fp, #4
0d724     A7 26 62 FC | 	wrlong	local01, fp
0d728     08 4E 85 F1 | 	sub	fp, #8
0d72c     A7 12 02 F6 | 	mov	arg01, fp
0d730     84 F5 BF FD | 	call	#_converttofloat
0d734     FD 12 02 F6 | 	mov	arg01, result1
0d738     90 9F B1 FD | 	call	#__system____builtin_acosf
0d73c     FD 12 02 F6 | 	mov	arg01, result1
0d740     51 00 00 FF 
0d744     C0 E5 05 F1 | 	add	objptr, ##41920
0d748     F2 14 02 FB | 	rdlong	arg02, objptr
0d74c     51 00 00 FF 
0d750     C0 E5 85 F1 | 	sub	objptr, ##41920
0d754     34 94 B1 FD | 	call	#__system___float_mul
0d758     A7 FA 61 FC | 	wrlong	result1, fp
0d75c     08 4E 05 F1 | 	add	fp, #8
0d760     A7 3C 68 FC | 	wrlong	#30, fp
0d764     08 4E 85 F1 | 	sub	fp, #8
0d768     A7 12 02 F6 | 	mov	arg01, fp
0d76c     40 F3 BF FD | 	call	#_push
0d770                 | LR__1141
0d770     A7 F0 03 F6 | 	mov	ptra, fp
0d774     B2 00 A0 FD | 	call	#popregs_
0d778                 | _do_acos_ret
0d778     2D 00 64 FD | 	ret
0d77c                 | 
0d77c                 | ' 
0d77c                 | ' '-------------------- asc
0d77c                 | ' 
0d77c                 | ' sub do_asc
0d77c                 | _do_asc
0d77c     01 4A 05 F6 | 	mov	COUNT_, #1
0d780     A8 00 A0 FD | 	call	#pushregs_
0d784     14 F0 07 F1 | 	add	ptra, #20
0d788     4A 00 00 FF 
0d78c     80 E4 05 F1 | 	add	objptr, ##38016
0d790     F2 26 02 FB | 	rdlong	local01, objptr
0d794     13 17 02 F6 | 	mov	arg03, local01
0d798     01 16 66 F0 | 	shl	arg03, #1
0d79c     13 17 02 F1 | 	add	arg03, local01
0d7a0     02 16 66 F0 | 	shl	arg03, #2
0d7a4     03 00 00 FF 
0d7a8     04 E4 85 F1 | 	sub	objptr, ##1540
0d7ac     F2 16 02 F1 | 	add	arg03, objptr
0d7b0     0B 17 02 FB | 	rdlong	arg03, arg03
0d7b4     0C 4E 05 F1 | 	add	fp, #12
0d7b8     A7 16 62 FC | 	wrlong	arg03, fp
0d7bc                 | ' 
0d7bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0d7bc                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d7bc     0C 4E 85 F1 | 	sub	fp, #12
0d7c0     02 16 16 F2 | 	cmp	arg03, #2 wc
0d7c4     47 00 00 FF 
0d7c8     7C E4 85 F1 | 	sub	objptr, ##36476
0d7cc     0C 4E 05 C1 |  if_b	add	fp, #12
0d7d0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d7d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0d7d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0d7dc     00 12 06 F6 | 	mov	arg01, #0
0d7e0     58 C2 B1 FD | 	call	#__system___getiolock_0573
0d7e4     FD 12 02 F6 | 	mov	arg01, result1
0d7e8     28 65 B1 FD | 	call	#__system___lockmem
0d7ec     9F 01 00 FF 
0d7f0     44 15 06 F6 | 	mov	arg02, ##@LR__5676
0d7f4     00 12 06 F6 | 	mov	arg01, #0
0d7f8     00 16 06 F6 | 	mov	arg03, #0
0d7fc     08 72 B1 FD | 	call	#__system___basic_print_string
0d800     00 12 06 F6 | 	mov	arg01, #0
0d804     34 C2 B1 FD | 	call	#__system___getiolock_0573
0d808     FD 00 68 FC | 	wrlong	#0, result1
0d80c     27 12 06 F6 | 	mov	arg01, #39
0d810     00 14 06 F6 | 	mov	arg02, #0
0d814     6C 2B B1 FD | 	call	#_printerror
0d818     B4 00 90 FD | 	jmp	#LR__1153
0d81c                 | LR__1150
0d81c     F8 F1 BF FD | 	call	#_pop
0d820     FF 16 02 F6 | 	mov	arg03, result3
0d824     A7 FA 61 FC | 	wrlong	result1, fp
0d828     04 4E 05 F1 | 	add	fp, #4
0d82c     A7 FC 61 FC | 	wrlong	result2, fp
0d830     04 4E 05 F1 | 	add	fp, #4
0d834     A7 16 62 FC | 	wrlong	arg03, fp
0d838                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d838     08 4E 85 F1 | 	sub	fp, #8
0d83c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d840     18 00 90 5D |  if_ne	jmp	#LR__1151
0d844     A7 12 02 FB | 	rdlong	arg01, fp
0d848     44 F3 BF FD | 	call	#_convertstring
0d84c     A7 FA 61 FC | 	wrlong	result1, fp
0d850     08 4E 05 F1 | 	add	fp, #8
0d854     A7 3E 68 FC | 	wrlong	#31, fp
0d858     08 4E 85 F1 | 	sub	fp, #8
0d85c                 | LR__1151
0d85c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d85c     08 4E 05 F1 | 	add	fp, #8
0d860     A7 16 02 FB | 	rdlong	arg03, fp
0d864     08 4E 85 F1 | 	sub	fp, #8
0d868     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d86c     40 00 90 AD |  if_e	jmp	#LR__1152
0d870     00 12 06 F6 | 	mov	arg01, #0
0d874     C4 C1 B1 FD | 	call	#__system___getiolock_0573
0d878     FD 12 02 F6 | 	mov	arg01, result1
0d87c     94 64 B1 FD | 	call	#__system___lockmem
0d880     9F 01 00 FF 
0d884     4A 15 06 F6 | 	mov	arg02, ##@LR__5677
0d888     00 12 06 F6 | 	mov	arg01, #0
0d88c     00 16 06 F6 | 	mov	arg03, #0
0d890     74 71 B1 FD | 	call	#__system___basic_print_string
0d894     00 12 06 F6 | 	mov	arg01, #0
0d898     A0 C1 B1 FD | 	call	#__system___getiolock_0573
0d89c     FD 00 68 FC | 	wrlong	#0, result1
0d8a0     0F 12 06 F6 | 	mov	arg01, #15
0d8a4     00 14 06 F6 | 	mov	arg02, #0
0d8a8     D8 2A B1 FD | 	call	#_printerror
0d8ac     20 00 90 FD | 	jmp	#LR__1153
0d8b0                 | LR__1152
0d8b0     A7 26 02 FB | 	rdlong	local01, fp
0d8b4     13 27 C2 FA | 	rdbyte	local01, local01
0d8b8     A7 26 62 FC | 	wrlong	local01, fp
0d8bc     08 4E 05 F1 | 	add	fp, #8
0d8c0     A7 38 68 FC | 	wrlong	#28, fp
0d8c4     08 4E 85 F1 | 	sub	fp, #8
0d8c8     A7 12 02 F6 | 	mov	arg01, fp
0d8cc     E0 F1 BF FD | 	call	#_push
0d8d0                 | LR__1153
0d8d0     A7 F0 03 F6 | 	mov	ptra, fp
0d8d4     B2 00 A0 FD | 	call	#popregs_
0d8d8                 | _do_asc_ret
0d8d8     2D 00 64 FD | 	ret
0d8dc                 | 
0d8dc                 | ' 
0d8dc                 | ' '-------------------- asin
0d8dc                 | ' 
0d8dc                 | ' sub do_asin
0d8dc                 | _do_asin
0d8dc     01 4A 05 F6 | 	mov	COUNT_, #1
0d8e0     A8 00 A0 FD | 	call	#pushregs_
0d8e4     10 F0 07 F1 | 	add	ptra, #16
0d8e8     4A 00 00 FF 
0d8ec     80 E4 05 F1 | 	add	objptr, ##38016
0d8f0     F2 26 02 FB | 	rdlong	local01, objptr
0d8f4     13 17 02 F6 | 	mov	arg03, local01
0d8f8     01 16 66 F0 | 	shl	arg03, #1
0d8fc     13 17 02 F1 | 	add	arg03, local01
0d900     02 16 66 F0 | 	shl	arg03, #2
0d904     03 00 00 FF 
0d908     04 E4 85 F1 | 	sub	objptr, ##1540
0d90c     F2 16 02 F1 | 	add	arg03, objptr
0d910     0B 17 02 FB | 	rdlong	arg03, arg03
0d914     0C 4E 05 F1 | 	add	fp, #12
0d918     A7 16 62 FC | 	wrlong	arg03, fp
0d91c                 | ' 
0d91c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d91c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0d91c     0C 4E 85 F1 | 	sub	fp, #12
0d920     02 16 16 F2 | 	cmp	arg03, #2 wc
0d924     47 00 00 FF 
0d928     7C E4 85 F1 | 	sub	objptr, ##36476
0d92c     0C 4E 05 C1 |  if_b	add	fp, #12
0d930     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d934     0C 4E 85 C1 |  if_b	sub	fp, #12
0d938     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d93c     00 12 06 F6 | 	mov	arg01, #0
0d940     F8 C0 B1 FD | 	call	#__system___getiolock_0573
0d944     FD 12 02 F6 | 	mov	arg01, result1
0d948     C8 63 B1 FD | 	call	#__system___lockmem
0d94c     9F 01 00 FF 
0d950     50 15 06 F6 | 	mov	arg02, ##@LR__5678
0d954     00 12 06 F6 | 	mov	arg01, #0
0d958     00 16 06 F6 | 	mov	arg03, #0
0d95c     A8 70 B1 FD | 	call	#__system___basic_print_string
0d960     00 12 06 F6 | 	mov	arg01, #0
0d964     D4 C0 B1 FD | 	call	#__system___getiolock_0573
0d968     FD 00 68 FC | 	wrlong	#0, result1
0d96c     27 12 06 F6 | 	mov	arg01, #39
0d970     00 14 06 F6 | 	mov	arg02, #0
0d974     0C 2A B1 FD | 	call	#_printerror
0d978     64 00 90 FD | 	jmp	#LR__1161
0d97c                 | LR__1160
0d97c     98 F0 BF FD | 	call	#_pop
0d980     FF 26 02 F6 | 	mov	local01, result3
0d984     A7 FA 61 FC | 	wrlong	result1, fp
0d988     04 4E 05 F1 | 	add	fp, #4
0d98c     A7 FC 61 FC | 	wrlong	result2, fp
0d990     04 4E 05 F1 | 	add	fp, #4
0d994     A7 26 62 FC | 	wrlong	local01, fp
0d998     08 4E 85 F1 | 	sub	fp, #8
0d99c     A7 12 02 F6 | 	mov	arg01, fp
0d9a0     14 F3 BF FD | 	call	#_converttofloat
0d9a4     FD 12 02 F6 | 	mov	arg01, result1
0d9a8     D4 9C B1 FD | 	call	#__system____builtin_asinf
0d9ac     FD 12 02 F6 | 	mov	arg01, result1
0d9b0     51 00 00 FF 
0d9b4     C0 E5 05 F1 | 	add	objptr, ##41920
0d9b8     F2 14 02 FB | 	rdlong	arg02, objptr
0d9bc     51 00 00 FF 
0d9c0     C0 E5 85 F1 | 	sub	objptr, ##41920
0d9c4     C4 91 B1 FD | 	call	#__system___float_mul
0d9c8     A7 FA 61 FC | 	wrlong	result1, fp
0d9cc     08 4E 05 F1 | 	add	fp, #8
0d9d0     A7 3C 68 FC | 	wrlong	#30, fp
0d9d4     08 4E 85 F1 | 	sub	fp, #8
0d9d8     A7 12 02 F6 | 	mov	arg01, fp
0d9dc     D0 F0 BF FD | 	call	#_push
0d9e0                 | LR__1161
0d9e0     A7 F0 03 F6 | 	mov	ptra, fp
0d9e4     B2 00 A0 FD | 	call	#popregs_
0d9e8                 | _do_asin_ret
0d9e8     2D 00 64 FD | 	ret
0d9ec                 | 
0d9ec                 | ' 
0d9ec                 | ' '-------------------- atn
0d9ec                 | ' 
0d9ec                 | ' sub do_atn
0d9ec                 | _do_atn
0d9ec     01 4A 05 F6 | 	mov	COUNT_, #1
0d9f0     A8 00 A0 FD | 	call	#pushregs_
0d9f4     10 F0 07 F1 | 	add	ptra, #16
0d9f8     4A 00 00 FF 
0d9fc     80 E4 05 F1 | 	add	objptr, ##38016
0da00     F2 26 02 FB | 	rdlong	local01, objptr
0da04     13 17 02 F6 | 	mov	arg03, local01
0da08     01 16 66 F0 | 	shl	arg03, #1
0da0c     13 17 02 F1 | 	add	arg03, local01
0da10     02 16 66 F0 | 	shl	arg03, #2
0da14     03 00 00 FF 
0da18     04 E4 85 F1 | 	sub	objptr, ##1540
0da1c     F2 16 02 F1 | 	add	arg03, objptr
0da20     0B 17 02 FB | 	rdlong	arg03, arg03
0da24     0C 4E 05 F1 | 	add	fp, #12
0da28     A7 16 62 FC | 	wrlong	arg03, fp
0da2c                 | ' 
0da2c                 | ' numpar=compiledline(lineptr_e).result.uresult
0da2c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0da2c     0C 4E 85 F1 | 	sub	fp, #12
0da30     02 16 16 F2 | 	cmp	arg03, #2 wc
0da34     47 00 00 FF 
0da38     7C E4 85 F1 | 	sub	objptr, ##36476
0da3c     0C 4E 05 C1 |  if_b	add	fp, #12
0da40     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da44     0C 4E 85 C1 |  if_b	sub	fp, #12
0da48     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0da4c     00 12 06 F6 | 	mov	arg01, #0
0da50     E8 BF B1 FD | 	call	#__system___getiolock_0573
0da54     FD 12 02 F6 | 	mov	arg01, result1
0da58     B8 62 B1 FD | 	call	#__system___lockmem
0da5c     9F 01 00 FF 
0da60     57 15 06 F6 | 	mov	arg02, ##@LR__5679
0da64     00 12 06 F6 | 	mov	arg01, #0
0da68     00 16 06 F6 | 	mov	arg03, #0
0da6c     98 6F B1 FD | 	call	#__system___basic_print_string
0da70     00 12 06 F6 | 	mov	arg01, #0
0da74     C4 BF B1 FD | 	call	#__system___getiolock_0573
0da78     FD 00 68 FC | 	wrlong	#0, result1
0da7c     27 12 06 F6 | 	mov	arg01, #39
0da80     00 14 06 F6 | 	mov	arg02, #0
0da84     FC 28 B1 FD | 	call	#_printerror
0da88     6C 00 90 FD | 	jmp	#LR__1171
0da8c                 | LR__1170
0da8c     88 EF BF FD | 	call	#_pop
0da90     FF 26 02 F6 | 	mov	local01, result3
0da94     A7 FA 61 FC | 	wrlong	result1, fp
0da98     04 4E 05 F1 | 	add	fp, #4
0da9c     A7 FC 61 FC | 	wrlong	result2, fp
0daa0     04 4E 05 F1 | 	add	fp, #4
0daa4     A7 26 62 FC | 	wrlong	local01, fp
0daa8     08 4E 85 F1 | 	sub	fp, #8
0daac     A7 12 02 F6 | 	mov	arg01, fp
0dab0     04 F2 BF FD | 	call	#_converttofloat
0dab4     FD 12 02 F6 | 	mov	arg01, result1
0dab8     00 C0 1F FF 
0dabc     00 14 06 F6 | 	mov	arg02, ##1065353216
0dac0     54 9C B1 FD | 	call	#__system____builtin_atan2f
0dac4     FD 12 02 F6 | 	mov	arg01, result1
0dac8     51 00 00 FF 
0dacc     C0 E5 05 F1 | 	add	objptr, ##41920
0dad0     F2 14 02 FB | 	rdlong	arg02, objptr
0dad4     51 00 00 FF 
0dad8     C0 E5 85 F1 | 	sub	objptr, ##41920
0dadc     AC 90 B1 FD | 	call	#__system___float_mul
0dae0     A7 FA 61 FC | 	wrlong	result1, fp
0dae4     08 4E 05 F1 | 	add	fp, #8
0dae8     A7 3C 68 FC | 	wrlong	#30, fp
0daec     08 4E 85 F1 | 	sub	fp, #8
0daf0     A7 12 02 F6 | 	mov	arg01, fp
0daf4     B8 EF BF FD | 	call	#_push
0daf8                 | LR__1171
0daf8     A7 F0 03 F6 | 	mov	ptra, fp
0dafc     B2 00 A0 FD | 	call	#popregs_
0db00                 | _do_atn_ret
0db00     2D 00 64 FD | 	ret
0db04                 | 
0db04                 | ' 
0db04                 | ' '-------------------- beep
0db04                 | ' 
0db04                 | ' sub do_beep
0db04                 | _do_beep
0db04     02 4A 05 F6 | 	mov	COUNT_, #2
0db08     A8 00 A0 FD | 	call	#pushregs_
0db0c     20 F0 07 F1 | 	add	ptra, #32
0db10     04 EF BF FD | 	call	#_pop
0db14     FD 26 02 F6 | 	mov	local01, result1
0db18     FE 1C 02 F6 | 	mov	arg06, result2
0db1c     FF 28 02 F6 | 	mov	local02, result3
0db20     0C 4E 05 F1 | 	add	fp, #12
0db24     A7 26 62 FC | 	wrlong	local01, fp
0db28     04 4E 05 F1 | 	add	fp, #4
0db2c     A7 1C 62 FC | 	wrlong	arg06, fp
0db30     04 4E 05 F1 | 	add	fp, #4
0db34     A7 28 62 FC | 	wrlong	local02, fp
0db38     14 4E 85 F1 | 	sub	fp, #20
0db3c     D8 EE BF FD | 	call	#_pop
0db40     A7 FA 61 FC | 	wrlong	result1, fp
0db44     04 4E 05 F1 | 	add	fp, #4
0db48     A7 FC 61 FC | 	wrlong	result2, fp
0db4c     04 4E 05 F1 | 	add	fp, #4
0db50     A7 FE 61 FC | 	wrlong	result3, fp
0db54                 | ' 
0db54                 | ' t2=pop()
0db54                 | ' t1=pop()
0db54                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0db54     08 4E 85 F1 | 	sub	fp, #8
0db58     1C FE 0D F2 | 	cmp	result3, #28 wz
0db5c     08 4E 05 51 |  if_ne	add	fp, #8
0db60     A7 28 02 5B |  if_ne	rdlong	local02, fp
0db64     08 4E 85 51 |  if_ne	sub	fp, #8
0db68     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0db6c     A7 26 02 AB |  if_e	rdlong	local01, fp
0db70     18 4E 05 A1 |  if_e	add	fp, #24
0db74     A7 26 62 AC |  if_e	wrlong	local01, fp
0db78     18 4E 85 A1 |  if_e	sub	fp, #24
0db7c     14 00 90 AD |  if_e	jmp	#LR__1180
0db80     A7 12 02 F6 | 	mov	arg01, fp
0db84     74 F0 BF FD | 	call	#_converttoint
0db88     18 4E 05 F1 | 	add	fp, #24
0db8c     A7 FA 61 FC | 	wrlong	result1, fp
0db90     18 4E 85 F1 | 	sub	fp, #24
0db94                 | LR__1180
0db94     1C 4E 05 F1 | 	add	fp, #28
0db98     A7 FE 48 FC | 	wrbyte	#127, fp
0db9c     01 4E 05 F1 | 	add	fp, #1
0dba0     A7 00 49 FC | 	wrbyte	#128, fp
0dba4     01 4E 85 F1 | 	sub	fp, #1
0dba8     A7 14 02 F6 | 	mov	arg02, fp
0dbac     04 4E 85 F1 | 	sub	fp, #4
0dbb0     A7 16 02 FB | 	rdlong	arg03, fp
0dbb4     18 4E 85 F1 | 	sub	fp, #24
0dbb8     01 16 66 F0 | 	shl	arg03, #1
0dbbc     07 12 06 F6 | 	mov	arg01, #7
0dbc0     0E 18 C6 F9 | 	decod	arg04, #14
0dbc4     02 1A 06 F6 | 	mov	arg05, #2
0dbc8     00 1C 06 F6 | 	mov	arg06, #0
0dbcc     0B 00 00 FF 
0dbd0     CC E4 05 F1 | 	add	objptr, ##5836
0dbd4     98 5D B1 FD | 	call	#_audio096_spin2_play8
0dbd8     0B 00 00 FF 
0dbdc     CC E4 85 F1 | 	sub	objptr, ##5836
0dbe0     0C 4E 05 F1 | 	add	fp, #12
0dbe4     A7 12 02 F6 | 	mov	arg01, fp
0dbe8     0C 4E 85 F1 | 	sub	fp, #12
0dbec     C0 EE BF FD | 	call	#_push
0dbf0     B4 BE B0 FD | 	call	#_do_waitms
0dbf4     07 12 06 F6 | 	mov	arg01, #7
0dbf8     0B 00 00 FF 
0dbfc     CC E4 05 F1 | 	add	objptr, ##5836
0dc00     10 5E B1 FD | 	call	#_audio096_spin2_stop
0dc04     0B 00 00 FF 
0dc08     CC E4 85 F1 | 	sub	objptr, ##5836
0dc0c     A7 F0 03 F6 | 	mov	ptra, fp
0dc10     B2 00 A0 FD | 	call	#popregs_
0dc14                 | _do_beep_ret
0dc14     2D 00 64 FD | 	ret
0dc18                 | 
0dc18                 | ' 
0dc18                 | ' '-------------------- blit
0dc18                 | ' 
0dc18                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dc18                 | ' sub do_blit
0dc18                 | _do_blit
0dc18     02 4A 05 F6 | 	mov	COUNT_, #2
0dc1c     A8 00 A0 FD | 	call	#pushregs_
0dc20     3C F0 07 F1 | 	add	ptra, #60
0dc24     4A 00 00 FF 
0dc28     80 E4 05 F1 | 	add	objptr, ##38016
0dc2c     F2 26 02 FB | 	rdlong	local01, objptr
0dc30     13 25 02 F6 | 	mov	arg10, local01
0dc34     01 24 66 F0 | 	shl	arg10, #1
0dc38     13 25 02 F1 | 	add	arg10, local01
0dc3c     02 24 66 F0 | 	shl	arg10, #2
0dc40     03 00 00 FF 
0dc44     04 E4 85 F1 | 	sub	objptr, ##1540
0dc48     F2 24 02 F1 | 	add	arg10, objptr
0dc4c     12 25 02 FB | 	rdlong	arg10, arg10
0dc50     38 4E 05 F1 | 	add	fp, #56
0dc54     A7 24 62 FC | 	wrlong	arg10, fp
0dc58                 | ' 
0dc58                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc58                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dc58     38 4E 85 F1 | 	sub	fp, #56
0dc5c     0A 24 0E F2 | 	cmp	arg10, #10 wz
0dc60     47 00 00 FF 
0dc64     7C E4 85 F1 | 	sub	objptr, ##36476
0dc68     38 4E 05 51 |  if_ne	add	fp, #56
0dc6c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dc70     38 4E 85 51 |  if_ne	sub	fp, #56
0dc74     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0dc78     50 00 90 AD |  if_e	jmp	#LR__1190
0dc7c     00 12 06 F6 | 	mov	arg01, #0
0dc80     B8 BD B1 FD | 	call	#__system___getiolock_0573
0dc84     FD 12 02 F6 | 	mov	arg01, result1
0dc88     88 60 B1 FD | 	call	#__system___lockmem
0dc8c     9F 01 00 FF 
0dc90     5D 15 06 F6 | 	mov	arg02, ##@LR__5680
0dc94     00 12 06 F6 | 	mov	arg01, #0
0dc98     00 16 06 F6 | 	mov	arg03, #0
0dc9c     68 6D B1 FD | 	call	#__system___basic_print_string
0dca0     00 12 06 F6 | 	mov	arg01, #0
0dca4     94 BD B1 FD | 	call	#__system___getiolock_0573
0dca8     FD 00 68 FC | 	wrlong	#0, result1
0dcac     50 00 00 FF 
0dcb0     F0 E4 05 F1 | 	add	objptr, ##41200
0dcb4     F2 14 02 FB | 	rdlong	arg02, objptr
0dcb8     50 00 00 FF 
0dcbc     F0 E4 85 F1 | 	sub	objptr, ##41200
0dcc0     27 12 06 F6 | 	mov	arg01, #39
0dcc4     BC 26 B1 FD | 	call	#_printerror
0dcc8     44 01 90 FD | 	jmp	#LR__1195
0dccc                 | LR__1190
0dccc                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0dccc     38 4E 05 F1 | 	add	fp, #56
0dcd0     A7 28 02 FB | 	rdlong	local02, fp
0dcd4     01 28 86 F1 | 	sub	local02, #1
0dcd8     04 4E 85 F1 | 	sub	fp, #4
0dcdc     A7 28 62 FC | 	wrlong	local02, fp
0dce0     34 4E 85 F1 | 	sub	fp, #52
0dce4                 | LR__1191
0dce4     38 4E 05 F1 | 	add	fp, #56
0dce8     A7 26 02 FB | 	rdlong	local01, fp
0dcec     01 26 86 F1 | 	sub	local01, #1
0dcf0     04 4E 85 F1 | 	sub	fp, #4
0dcf4     A7 24 02 FB | 	rdlong	arg10, fp
0dcf8     34 4E 85 F1 | 	sub	fp, #52
0dcfc     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dd00     54 00 90 1D |  if_a	jmp	#LR__1192
0dd04     10 ED BF FD | 	call	#_pop
0dd08     A7 FA 61 FC | 	wrlong	result1, fp
0dd0c     04 4E 05 F1 | 	add	fp, #4
0dd10     A7 FC 61 FC | 	wrlong	result2, fp
0dd14     04 4E 05 F1 | 	add	fp, #4
0dd18     A7 FE 61 FC | 	wrlong	result3, fp
0dd1c     2C 4E 05 F1 | 	add	fp, #44
0dd20     A7 28 02 FB | 	rdlong	local02, fp
0dd24     02 28 66 F0 | 	shl	local02, #2
0dd28     28 4E 85 F1 | 	sub	fp, #40
0dd2c     A7 28 02 F1 | 	add	local02, fp
0dd30     0C 4E 85 F1 | 	sub	fp, #12
0dd34     A7 12 02 F6 | 	mov	arg01, fp
0dd38     C0 EE BF FD | 	call	#_converttoint
0dd3c     14 FB 61 FC | 	wrlong	result1, local02
0dd40     34 4E 05 F1 | 	add	fp, #52
0dd44     A7 28 02 FB | 	rdlong	local02, fp
0dd48     01 28 86 F1 | 	sub	local02, #1
0dd4c     A7 28 62 FC | 	wrlong	local02, fp
0dd50     34 4E 85 F1 | 	sub	fp, #52
0dd54     8C FF 9F FD | 	jmp	#LR__1191
0dd58                 | LR__1192
0dd58                 | ' if numpar=10 then 
0dd58     38 4E 05 F1 | 	add	fp, #56
0dd5c     A7 28 02 FB | 	rdlong	local02, fp
0dd60     38 4E 85 F1 | 	sub	fp, #56
0dd64     0A 28 0E F2 | 	cmp	local02, #10 wz
0dd68     5C 00 90 5D |  if_ne	jmp	#LR__1193
0dd6c     0C 4E 05 F1 | 	add	fp, #12
0dd70     A7 12 02 FB | 	rdlong	arg01, fp
0dd74     04 4E 05 F1 | 	add	fp, #4
0dd78     A7 14 02 FB | 	rdlong	arg02, fp
0dd7c     04 4E 05 F1 | 	add	fp, #4
0dd80     A7 16 02 FB | 	rdlong	arg03, fp
0dd84     04 4E 05 F1 | 	add	fp, #4
0dd88     A7 18 02 FB | 	rdlong	arg04, fp
0dd8c     04 4E 05 F1 | 	add	fp, #4
0dd90     A7 1A 02 FB | 	rdlong	arg05, fp
0dd94     04 4E 05 F1 | 	add	fp, #4
0dd98     A7 1C 02 FB | 	rdlong	arg06, fp
0dd9c     04 4E 05 F1 | 	add	fp, #4
0dda0     A7 1E 02 FB | 	rdlong	arg07, fp
0dda4     04 4E 05 F1 | 	add	fp, #4
0dda8     A7 20 02 FB | 	rdlong	arg08, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 22 02 FB | 	rdlong	arg09, fp
0ddb4     04 4E 05 F1 | 	add	fp, #4
0ddb8     A7 24 02 FB | 	rdlong	arg10, fp
0ddbc     30 4E 85 F1 | 	sub	fp, #48
0ddc0     84 4D B1 FD | 	call	#_hg010b_spin2_blit
0ddc4     48 00 90 FD | 	jmp	#LR__1194
0ddc8                 | LR__1193
0ddc8     F2 1E 02 FB | 	rdlong	arg07, objptr
0ddcc     0C 4E 05 F1 | 	add	fp, #12
0ddd0     A7 14 02 FB | 	rdlong	arg02, fp
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 16 02 FB | 	rdlong	arg03, fp
0dddc     04 4E 05 F1 | 	add	fp, #4
0dde0     A7 18 02 FB | 	rdlong	arg04, fp
0dde4     04 4E 05 F1 | 	add	fp, #4
0dde8     A7 1A 02 FB | 	rdlong	arg05, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 20 02 FB | 	rdlong	arg08, fp
0ddf4     04 4E 05 F1 | 	add	fp, #4
0ddf8     A7 22 02 FB | 	rdlong	arg09, fp
0ddfc     20 4E 85 F1 | 	sub	fp, #32
0de00     0F 13 02 F6 | 	mov	arg01, arg07
0de04     0A 1C C6 F9 | 	decod	arg06, #10
0de08     0A 24 C6 F9 | 	decod	arg10, #10
0de0c     38 4D B1 FD | 	call	#_hg010b_spin2_blit
0de10                 | LR__1194
0de10                 | LR__1195
0de10     A7 F0 03 F6 | 	mov	ptra, fp
0de14     B2 00 A0 FD | 	call	#popregs_
0de18                 | _do_blit_ret
0de18     2D 00 64 FD | 	ret
0de1c                 | 
0de1c                 | ' 
0de1c                 | ' 
0de1c                 | ' '-------------------- bin$
0de1c                 | ' 
0de1c                 | ' sub do_bin
0de1c                 | _do_bin
0de1c     01 4A 05 F6 | 	mov	COUNT_, #1
0de20     A8 00 A0 FD | 	call	#pushregs_
0de24     18 F0 07 F1 | 	add	ptra, #24
0de28     4A 00 00 FF 
0de2c     80 E4 05 F1 | 	add	objptr, ##38016
0de30     F2 26 02 FB | 	rdlong	local01, objptr
0de34     13 17 02 F6 | 	mov	arg03, local01
0de38     01 16 66 F0 | 	shl	arg03, #1
0de3c     13 17 02 F1 | 	add	arg03, local01
0de40     02 16 66 F0 | 	shl	arg03, #2
0de44     03 00 00 FF 
0de48     04 E4 85 F1 | 	sub	objptr, ##1540
0de4c     F2 16 02 F1 | 	add	arg03, objptr
0de50     0B 17 02 FB | 	rdlong	arg03, arg03
0de54     0C 4E 05 F1 | 	add	fp, #12
0de58     A7 16 62 FC | 	wrlong	arg03, fp
0de5c                 | ' 
0de5c                 | ' numpar=compiledline(lineptr_e).result.uresult
0de5c                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0de5c     0C 4E 85 F1 | 	sub	fp, #12
0de60     03 16 16 F2 | 	cmp	arg03, #3 wc
0de64     47 00 00 FF 
0de68     7C E4 85 F1 | 	sub	objptr, ##36476
0de6c     0C 4E 05 C1 |  if_b	add	fp, #12
0de70     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0de74     0C 4E 85 C1 |  if_b	sub	fp, #12
0de78     40 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0de7c     00 12 06 F6 | 	mov	arg01, #0
0de80     B8 BB B1 FD | 	call	#__system___getiolock_0573
0de84     FD 12 02 F6 | 	mov	arg01, result1
0de88     88 5E B1 FD | 	call	#__system___lockmem
0de8c     9F 01 00 FF 
0de90     64 15 06 F6 | 	mov	arg02, ##@LR__5681
0de94     00 12 06 F6 | 	mov	arg01, #0
0de98     00 16 06 F6 | 	mov	arg03, #0
0de9c     68 6B B1 FD | 	call	#__system___basic_print_string
0dea0     00 12 06 F6 | 	mov	arg01, #0
0dea4     94 BB B1 FD | 	call	#__system___getiolock_0573
0dea8     FD 00 68 FC | 	wrlong	#0, result1
0deac     27 12 06 F6 | 	mov	arg01, #39
0deb0     00 14 06 F6 | 	mov	arg02, #0
0deb4     CC 24 B1 FD | 	call	#_printerror
0deb8     B8 00 90 FD | 	jmp	#LR__1203
0debc                 | LR__1200
0debc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0debc     0C 4E 05 F1 | 	add	fp, #12
0dec0     A7 26 02 FB | 	rdlong	local01, fp
0dec4     0C 4E 85 F1 | 	sub	fp, #12
0dec8     02 26 0E F2 | 	cmp	local01, #2 wz
0decc     38 00 90 5D |  if_ne	jmp	#LR__1201
0ded0     44 EB BF FD | 	call	#_pop
0ded4     FF 26 02 F6 | 	mov	local01, result3
0ded8     A7 FA 61 FC | 	wrlong	result1, fp
0dedc     04 4E 05 F1 | 	add	fp, #4
0dee0     A7 FC 61 FC | 	wrlong	result2, fp
0dee4     04 4E 05 F1 | 	add	fp, #4
0dee8     A7 26 62 FC | 	wrlong	local01, fp
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     A7 12 02 F6 | 	mov	arg01, fp
0def4     04 ED BF FD | 	call	#_converttoint
0def8     14 4E 05 F1 | 	add	fp, #20
0defc     A7 FA 61 FC | 	wrlong	result1, fp
0df00     14 4E 85 F1 | 	sub	fp, #20
0df04     0C 00 90 FD | 	jmp	#LR__1202
0df08                 | LR__1201
0df08     14 4E 05 F1 | 	add	fp, #20
0df0c     A7 00 68 FC | 	wrlong	#0, fp
0df10     14 4E 85 F1 | 	sub	fp, #20
0df14                 | LR__1202
0df14     00 EB BF FD | 	call	#_pop
0df18     FF 26 02 F6 | 	mov	local01, result3
0df1c     A7 FA 61 FC | 	wrlong	result1, fp
0df20     04 4E 05 F1 | 	add	fp, #4
0df24     A7 FC 61 FC | 	wrlong	result2, fp
0df28     04 4E 05 F1 | 	add	fp, #4
0df2c     A7 26 62 FC | 	wrlong	local01, fp
0df30     08 4E 85 F1 | 	sub	fp, #8
0df34     A7 12 02 F6 | 	mov	arg01, fp
0df38     C0 EC BF FD | 	call	#_converttoint
0df3c     10 4E 05 F1 | 	add	fp, #16
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     FD 12 02 F6 | 	mov	arg01, result1
0df48     04 4E 05 F1 | 	add	fp, #4
0df4c     A7 14 02 FB | 	rdlong	arg02, fp
0df50     14 4E 85 F1 | 	sub	fp, #20
0df54     02 16 06 F6 | 	mov	arg03, #2
0df58     88 80 B1 FD | 	call	#__system__Number_S
0df5c     A7 FA 61 FC | 	wrlong	result1, fp
0df60     08 4E 05 F1 | 	add	fp, #8
0df64     A7 3E 68 FC | 	wrlong	#31, fp
0df68     08 4E 85 F1 | 	sub	fp, #8
0df6c     A7 12 02 F6 | 	mov	arg01, fp
0df70     3C EB BF FD | 	call	#_push
0df74                 | LR__1203
0df74     A7 F0 03 F6 | 	mov	ptra, fp
0df78     B2 00 A0 FD | 	call	#popregs_
0df7c                 | _do_bin_ret
0df7c     2D 00 64 FD | 	ret
0df80                 | 
0df80                 | ' 
0df80                 | ' '-------------------- box
0df80                 | ' 
0df80                 | ' sub do_box
0df80                 | _do_box
0df80     03 4A 05 F6 | 	mov	COUNT_, #3
0df84     A8 00 A0 FD | 	call	#pushregs_
0df88     30 F0 07 F1 | 	add	ptra, #48
0df8c     88 EA BF FD | 	call	#_pop
0df90     FD 1A 02 F6 | 	mov	arg05, result1
0df94     FE 18 02 F6 | 	mov	arg04, result2
0df98     FF 16 02 F6 | 	mov	arg03, result3
0df9c     24 4E 05 F1 | 	add	fp, #36
0dfa0     A7 1A 62 FC | 	wrlong	arg05, fp
0dfa4     04 4E 05 F1 | 	add	fp, #4
0dfa8     A7 18 62 FC | 	wrlong	arg04, fp
0dfac     04 4E 05 F1 | 	add	fp, #4
0dfb0     A7 16 62 FC | 	wrlong	arg03, fp
0dfb4     2C 4E 85 F1 | 	sub	fp, #44
0dfb8     5C EA BF FD | 	call	#_pop
0dfbc     FD 1A 02 F6 | 	mov	arg05, result1
0dfc0     FE 18 02 F6 | 	mov	arg04, result2
0dfc4     FF 16 02 F6 | 	mov	arg03, result3
0dfc8     18 4E 05 F1 | 	add	fp, #24
0dfcc     A7 1A 62 FC | 	wrlong	arg05, fp
0dfd0     04 4E 05 F1 | 	add	fp, #4
0dfd4     A7 18 62 FC | 	wrlong	arg04, fp
0dfd8     04 4E 05 F1 | 	add	fp, #4
0dfdc     A7 16 62 FC | 	wrlong	arg03, fp
0dfe0     20 4E 85 F1 | 	sub	fp, #32
0dfe4     30 EA BF FD | 	call	#_pop
0dfe8     FD 1A 02 F6 | 	mov	arg05, result1
0dfec     FE 18 02 F6 | 	mov	arg04, result2
0dff0     FF 26 02 F6 | 	mov	local01, result3
0dff4     0C 4E 05 F1 | 	add	fp, #12
0dff8     A7 1A 62 FC | 	wrlong	arg05, fp
0dffc     04 4E 05 F1 | 	add	fp, #4
0e000     A7 18 62 FC | 	wrlong	arg04, fp
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 26 62 FC | 	wrlong	local01, fp
0e00c     14 4E 85 F1 | 	sub	fp, #20
0e010     04 EA BF FD | 	call	#_pop
0e014     A7 FA 61 FC | 	wrlong	result1, fp
0e018     04 4E 05 F1 | 	add	fp, #4
0e01c     A7 FC 61 FC | 	wrlong	result2, fp
0e020     04 4E 05 F1 | 	add	fp, #4
0e024     A7 FE 61 FC | 	wrlong	result3, fp
0e028                 | ' 
0e028                 | ' t4=pop()
0e028                 | ' t3=pop()
0e028                 | ' t2=pop()
0e028                 | ' t1=pop()
0e028                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e028     FF 1A 02 F6 | 	mov	arg05, result3
0e02c     08 4E 85 F1 | 	sub	fp, #8
0e030     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e034     08 4E 05 51 |  if_ne	add	fp, #8
0e038     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e03c     08 4E 85 51 |  if_ne	sub	fp, #8
0e040     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e044     A8 00 90 5D |  if_ne	jmp	#LR__1210
0e048     14 4E 05 F1 | 	add	fp, #20
0e04c     A7 26 02 FB | 	rdlong	local01, fp
0e050     14 4E 85 F1 | 	sub	fp, #20
0e054     1C 26 0E F2 | 	cmp	local01, #28 wz
0e058     14 4E 05 51 |  if_ne	add	fp, #20
0e05c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e060     14 4E 85 51 |  if_ne	sub	fp, #20
0e064     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e068     84 00 90 5D |  if_ne	jmp	#LR__1210
0e06c     20 4E 05 F1 | 	add	fp, #32
0e070     A7 26 02 FB | 	rdlong	local01, fp
0e074     20 4E 85 F1 | 	sub	fp, #32
0e078     1C 26 0E F2 | 	cmp	local01, #28 wz
0e07c     20 4E 05 51 |  if_ne	add	fp, #32
0e080     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e084     20 4E 85 51 |  if_ne	sub	fp, #32
0e088     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e08c     60 00 90 5D |  if_ne	jmp	#LR__1210
0e090     2C 4E 05 F1 | 	add	fp, #44
0e094     A7 26 02 FB | 	rdlong	local01, fp
0e098     2C 4E 85 F1 | 	sub	fp, #44
0e09c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e0a0     2C 4E 05 51 |  if_ne	add	fp, #44
0e0a4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e0a8     2C 4E 85 51 |  if_ne	sub	fp, #44
0e0ac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0b0     3C 00 90 5D |  if_ne	jmp	#LR__1210
0e0b4     A7 12 02 FB | 	rdlong	arg01, fp
0e0b8     0C 4E 05 F1 | 	add	fp, #12
0e0bc     A7 14 02 FB | 	rdlong	arg02, fp
0e0c0     0C 4E 05 F1 | 	add	fp, #12
0e0c4     A7 16 02 FB | 	rdlong	arg03, fp
0e0c8     0C 4E 05 F1 | 	add	fp, #12
0e0cc     A7 18 02 FB | 	rdlong	arg04, fp
0e0d0     24 4E 85 F1 | 	sub	fp, #36
0e0d4     37 00 00 FF 
0e0d8     28 E4 05 F1 | 	add	objptr, ##28200
0e0dc     F2 1A 02 FB | 	rdlong	arg05, objptr
0e0e0     37 00 00 FF 
0e0e4     28 E4 85 F1 | 	sub	objptr, ##28200
0e0e8     24 3D B1 FD | 	call	#_hg010b_spin2_box
0e0ec                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e0ec     6C 00 90 FD | 	jmp	#LR__1211
0e0f0                 | LR__1210
0e0f0     A7 12 02 F6 | 	mov	arg01, fp
0e0f4     04 EB BF FD | 	call	#_converttoint
0e0f8     FD 28 02 F6 | 	mov	local02, result1
0e0fc     0C 4E 05 F1 | 	add	fp, #12
0e100     A7 12 02 F6 | 	mov	arg01, fp
0e104     0C 4E 85 F1 | 	sub	fp, #12
0e108     F0 EA BF FD | 	call	#_converttoint
0e10c     FD 2A 02 F6 | 	mov	local03, result1
0e110     18 4E 05 F1 | 	add	fp, #24
0e114     A7 12 02 F6 | 	mov	arg01, fp
0e118     18 4E 85 F1 | 	sub	fp, #24
0e11c     DC EA BF FD | 	call	#_converttoint
0e120     FD 26 02 F6 | 	mov	local01, result1
0e124     24 4E 05 F1 | 	add	fp, #36
0e128     A7 12 02 F6 | 	mov	arg01, fp
0e12c     24 4E 85 F1 | 	sub	fp, #36
0e130     C8 EA BF FD | 	call	#_converttoint
0e134     FD 18 02 F6 | 	mov	arg04, result1
0e138     37 00 00 FF 
0e13c     28 E4 05 F1 | 	add	objptr, ##28200
0e140     F2 1A 02 FB | 	rdlong	arg05, objptr
0e144     37 00 00 FF 
0e148     28 E4 85 F1 | 	sub	objptr, ##28200
0e14c     14 13 02 F6 | 	mov	arg01, local02
0e150     15 15 02 F6 | 	mov	arg02, local03
0e154     13 17 02 F6 | 	mov	arg03, local01
0e158     B4 3C B1 FD | 	call	#_hg010b_spin2_box
0e15c                 | LR__1211
0e15c     A7 F0 03 F6 | 	mov	ptra, fp
0e160     B2 00 A0 FD | 	call	#popregs_
0e164                 | _do_box_ret
0e164     2D 00 64 FD | 	ret
0e168                 | 
0e168                 | ' 
0e168                 | ' '-------------------- brun
0e168                 | ' 
0e168                 | ' sub do_brun
0e168                 | _do_brun
0e168     08 4A 05 F6 | 	mov	COUNT_, #8
0e16c     A8 00 A0 FD | 	call	#pushregs_
0e170     A4 E8 BF FD | 	call	#_pop
0e174     FE 1A 02 F6 | 	mov	arg05, result2
0e178     FF 18 02 F6 | 	mov	arg04, result3
0e17c     FD 26 02 F6 | 	mov	local01, result1
0e180     0D 29 02 F6 | 	mov	local02, arg05
0e184     0C 2B 02 F6 | 	mov	local03, arg04
0e188                 | ' 
0e188                 | ' t1=pop() 
0e188                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e188     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e18c     10 00 90 5D |  if_ne	jmp	#LR__1220
0e190     13 13 02 F6 | 	mov	arg01, local01
0e194     F8 E9 BF FD | 	call	#_convertstring
0e198     FD 26 02 F6 | 	mov	local01, result1
0e19c     1F 2A 06 F6 | 	mov	local03, #31
0e1a0                 | LR__1220
0e1a0                 | ' if t1.result_type=result_string then
0e1a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e1a4     EC 01 90 5D |  if_ne	jmp	#LR__1224
0e1a8     13 2D 02 F6 | 	mov	local04, local01
0e1ac                 | '   filename=t1.result.sresult
0e1ac                 | '   if left$(filename,1)="/" then 
0e1ac     16 13 02 F6 | 	mov	arg01, local04
0e1b0     01 14 06 F6 | 	mov	arg02, #1
0e1b4     D8 7B B1 FD | 	call	#__system__Left_S
0e1b8     FD 12 02 F6 | 	mov	arg01, result1
0e1bc     9F 01 00 FF 
0e1c0     6B 15 06 F6 | 	mov	arg02, ##@LR__5682
0e1c4     74 5B B1 FD | 	call	#__system___string_cmp
0e1c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e1cc     16 2F 02 A6 |  if_e	mov	local05, local04
0e1d0     14 00 90 AD |  if_e	jmp	#LR__1221
0e1d4     9F 01 00 FF 
0e1d8     6D 13 06 F6 | 	mov	arg01, ##@LR__5683
0e1dc     16 15 02 F6 | 	mov	arg02, local04
0e1e0     8C 5B B1 FD | 	call	#__system___string_concat
0e1e4     FD 2E 02 F6 | 	mov	local05, result1
0e1e8                 | LR__1221
0e1e8                 | '   open fullfilename for input as #9
0e1e8     09 12 06 F6 | 	mov	arg01, #9
0e1ec     17 15 02 F6 | 	mov	arg02, local05
0e1f0     00 16 06 F6 | 	mov	arg03, #0
0e1f4     20 67 B1 FD | 	call	#__system___basic_open_string
0e1f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e1fc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e200     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e204     FD 30 0A F6 | 	mov	local06, result1 wz
0e208                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e208     8C 00 90 AD |  if_e	jmp	#LR__1222
0e20c     00 12 06 F6 | 	mov	arg01, #0
0e210     28 B8 B1 FD | 	call	#__system___getiolock_0573
0e214     FD 12 02 F6 | 	mov	arg01, result1
0e218     F8 5A B1 FD | 	call	#__system___lockmem
0e21c     9F 01 00 FF 
0e220     76 15 06 F6 | 	mov	arg02, ##@LR__5684
0e224     00 12 06 F6 | 	mov	arg01, #0
0e228     00 16 06 F6 | 	mov	arg03, #0
0e22c     D8 67 B1 FD | 	call	#__system___basic_print_string
0e230     00 12 06 F6 | 	mov	arg01, #0
0e234     18 15 02 F6 | 	mov	arg02, local06
0e238     00 16 06 F6 | 	mov	arg03, #0
0e23c     0A 18 06 F6 | 	mov	arg04, #10
0e240     08 68 B1 FD | 	call	#__system___basic_print_integer
0e244     9F 01 00 FF 
0e248     84 15 06 F6 | 	mov	arg02, ##@LR__5685
0e24c     00 12 06 F6 | 	mov	arg01, #0
0e250     00 16 06 F6 | 	mov	arg03, #0
0e254     B0 67 B1 FD | 	call	#__system___basic_print_string
0e258     18 13 02 F6 | 	mov	arg01, local06
0e25c     40 84 B1 FD | 	call	#__system___strerror
0e260     FD 14 02 F6 | 	mov	arg02, result1
0e264     00 12 06 F6 | 	mov	arg01, #0
0e268     00 16 06 F6 | 	mov	arg03, #0
0e26c     98 67 B1 FD | 	call	#__system___basic_print_string
0e270     00 12 06 F6 | 	mov	arg01, #0
0e274     0A 14 06 F6 | 	mov	arg02, #10
0e278     00 16 06 F6 | 	mov	arg03, #0
0e27c     30 67 B1 FD | 	call	#__system___basic_print_char
0e280     00 12 06 F6 | 	mov	arg01, #0
0e284     B4 B7 B1 FD | 	call	#__system___getiolock_0573
0e288     FD 00 68 FC | 	wrlong	#0, result1
0e28c     09 12 06 F6 | 	mov	arg01, #9
0e290     D8 AD B1 FD | 	call	#__system__close
0e294     FC 00 90 FD | 	jmp	#LR__1225
0e298                 | LR__1222
0e298     01 32 06 F6 | 	mov	local07, #1
0e29c     00 34 06 F6 | 	mov	local08, #0
0e2a0                 | '   do
0e2a0                 | LR__1223
0e2a0                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e2a0     4E 00 00 FF 
0e2a4     B4 E4 05 F1 | 	add	objptr, ##40116
0e2a8     F2 16 02 F6 | 	mov	arg03, objptr
0e2ac     4E 00 00 FF 
0e2b0     B4 E4 85 F1 | 	sub	objptr, ##40116
0e2b4     09 12 06 F6 | 	mov	arg01, #9
0e2b8     19 15 02 F6 | 	mov	arg02, local07
0e2bc     0A 18 C6 F9 | 	decod	arg04, #10
0e2c0     01 1A 06 F6 | 	mov	arg05, #1
0e2c4     BC 68 B1 FD | 	call	#__system___basic_get
0e2c8     FD 30 02 F6 | 	mov	local06, result1
0e2cc     FD 32 02 F1 | 	add	local07, result1
0e2d0     4E 00 00 FF 
0e2d4     B4 E4 05 F1 | 	add	objptr, ##40116
0e2d8     F2 12 02 F6 | 	mov	arg01, objptr
0e2dc     1A 15 02 F6 | 	mov	arg02, local08
0e2e0     0A 16 C6 F9 | 	decod	arg03, #10
0e2e4     42 00 00 FF 
0e2e8     E8 E5 85 F1 | 	sub	objptr, ##34280
0e2ec     80 4E B1 FD | 	call	#_psram_spin2_write
0e2f0     0B 00 00 FF 
0e2f4     CC E4 85 F1 | 	sub	objptr, ##5836
0e2f8     18 35 02 F1 | 	add	local08, local06
0e2fc     02 00 00 FF 
0e300     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e304     E0 03 00 AF 
0e308     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e30c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1223
0e310     36 00 00 FF 
0e314     FC E5 05 F1 | 	add	objptr, ##28156
0e318     F2 12 02 FB | 	rdlong	arg01, objptr
0e31c     03 12 62 FD | 	cogstop	arg01
0e320     04 E4 05 F1 | 	add	objptr, #4
0e324     F2 12 02 FB | 	rdlong	arg01, objptr
0e328     03 12 62 FD | 	cogstop	arg01
0e32c     04 E4 05 F1 | 	add	objptr, #4
0e330     F2 12 02 FB | 	rdlong	arg01, objptr
0e334     03 12 62 FD | 	cogstop	arg01
0e338     19 00 00 FF 
0e33c     14 E5 05 F1 | 	add	objptr, ##13076
0e340     F2 12 02 FB | 	rdlong	arg01, objptr
0e344     03 12 62 FD | 	cogstop	arg01
0e348     18 00 00 FF 
0e34c     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e350     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e354     18 00 00 FF 
0e358     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e35c     19 00 00 FF 
0e360     0C E5 85 F1 | 	sub	objptr, ##13068
0e364     1E 34 06 F6 | 	mov	local08, #30
0e368     28 E4 61 FD | 	setq	objptr
0e36c     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e370     01 34 66 C6 |  if_b	neg	local08, #1
0e374     1B 00 00 FF 
0e378     1C E4 05 F1 | 	add	objptr, ##13852
0e37c     F2 34 62 FC | 	wrlong	local08, objptr
0e380     52 00 00 FF 
0e384     28 E4 85 F1 | 	sub	objptr, ##42024
0e388     00 12 06 F6 | 	mov	arg01, #0
0e38c     01 12 62 FD | 	cogid	arg01
0e390     03 12 62 FD | 	cogstop	arg01
0e394                 | LR__1224
0e394                 | LR__1225
0e394     A7 F0 03 F6 | 	mov	ptra, fp
0e398     B2 00 A0 FD | 	call	#popregs_
0e39c                 | _do_brun_ret
0e39c     2D 00 64 FD | 	ret
0e3a0                 | 
0e3a0                 | ' 
0e3a0                 | ' '-------------------- cd
0e3a0                 | ' 
0e3a0                 | ' sub do_cd
0e3a0                 | _do_cd
0e3a0     06 4A 05 F6 | 	mov	COUNT_, #6
0e3a4     A8 00 A0 FD | 	call	#pushregs_
0e3a8     9F 01 00 FF 
0e3ac     87 13 06 F6 | 	mov	arg01, ##@LR__5686
0e3b0     31 14 06 F6 | 	mov	arg02, #49
0e3b4     BC B7 B1 FD | 	call	#__system___basic_dir
0e3b8     5C E6 BF FD | 	call	#_pop
0e3bc     FE 18 02 F6 | 	mov	arg04, result2
0e3c0     FF 16 02 F6 | 	mov	arg03, result3
0e3c4     FD 26 02 F6 | 	mov	local01, result1
0e3c8     0C 29 02 F6 | 	mov	local02, arg04
0e3cc     0B 2B 02 F6 | 	mov	local03, arg03
0e3d0                 | ' t1=pop()
0e3d0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e3d0     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e3d4     10 00 90 5D |  if_ne	jmp	#LR__1230
0e3d8     13 13 02 F6 | 	mov	arg01, local01
0e3dc     B0 E7 BF FD | 	call	#_convertstring
0e3e0     FD 26 02 F6 | 	mov	local01, result1
0e3e4     1F 2A 06 F6 | 	mov	local03, #31
0e3e8                 | LR__1230
0e3e8                 | ' if t1.result_type<>result_string then printerror(15): return
0e3e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e3ec     10 00 90 AD |  if_e	jmp	#LR__1231
0e3f0     0F 12 06 F6 | 	mov	arg01, #15
0e3f4     00 14 06 F6 | 	mov	arg02, #0
0e3f8     88 1F B1 FD | 	call	#_printerror
0e3fc     48 05 90 FD | 	jmp	#LR__1249
0e400                 | LR__1231
0e400     13 2D 02 F6 | 	mov	local04, local01
0e404                 | ' newdir$=t1.result.sresult
0e404                 | ' if newdir$=".." then 
0e404     9F 01 00 FF 
0e408     89 15 06 F6 | 	mov	arg02, ##@LR__5687
0e40c     16 13 02 F6 | 	mov	arg01, local04
0e410     28 59 B1 FD | 	call	#__system___string_cmp
0e414     00 FA 0D F2 | 	cmp	result1, #0 wz
0e418     C4 01 90 5D |  if_ne	jmp	#LR__1238
0e41c     4A 00 00 FF 
0e420     94 E4 05 F1 | 	add	objptr, ##38036
0e424     F2 12 02 FB | 	rdlong	arg01, objptr
0e428     4A 00 00 FF 
0e42c     94 E4 85 F1 | 	sub	objptr, ##38036
0e430     09 2F 02 F6 | 	mov	local05, arg01
0e434     97 06 48 FB | 	callpa	#(@LR__1233-@LR__1232)>>2,fcache_load_ptr_
0e438                 | LR__1232
0e438     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e43c     01 2E 06 51 |  if_ne	add	local05, #1
0e440     F4 FF 9F 5D |  if_ne	jmp	#LR__1232
0e444                 | LR__1233
0e444     17 13 C2 F2 | 	subr	arg01, local05
0e448     4A 00 00 FF 
0e44c     94 E4 05 F1 | 	add	objptr, ##38036
0e450     F2 14 02 FB | 	rdlong	arg02, objptr
0e454     4A 00 00 FF 
0e458     94 E4 85 F1 | 	sub	objptr, ##38036
0e45c     9F 01 00 FF 
0e460     8C 17 06 F6 | 	mov	arg03, ##@LR__5688
0e464     74 7F B1 FD | 	call	#__system__InstrRev
0e468     FD 2C 02 F6 | 	mov	local04, result1
0e46c                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e46c     02 2C 56 F2 | 	cmps	local04, #2 wc
0e470     28 00 90 CD |  if_b	jmp	#LR__1234
0e474     4A 00 00 FF 
0e478     94 E4 05 F1 | 	add	objptr, ##38036
0e47c     F2 12 02 FB | 	rdlong	arg01, objptr
0e480     4A 00 00 FF 
0e484     94 E4 85 F1 | 	sub	objptr, ##38036
0e488     01 2C 86 F1 | 	sub	local04, #1
0e48c     16 15 02 F6 | 	mov	arg02, local04
0e490     FC 78 B1 FD | 	call	#__system__Left_S
0e494     FD 2C 02 F6 | 	mov	local04, result1
0e498     08 00 90 FD | 	jmp	#LR__1235
0e49c                 | LR__1234
0e49c     9F 01 00 FF 
0e4a0     8E 2D 06 F6 | 	mov	local04, ##@LR__5689
0e4a4                 | LR__1235
0e4a4     16 13 02 F6 | 	mov	arg01, local04
0e4a8     F4 5E B1 FD | 	call	#__system___chdir
0e4ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4b0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4b8     FD 30 0A F6 | 	mov	local06, result1 wz
0e4bc                 | '   chdir newdir$
0e4bc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e4bc     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e4c0     A4 00 90 AD |  if_e	jmp	#LR__1236
0e4c4     00 12 06 F6 | 	mov	arg01, #0
0e4c8     70 B5 B1 FD | 	call	#__system___getiolock_0573
0e4cc     FD 12 02 F6 | 	mov	arg01, result1
0e4d0     40 58 B1 FD | 	call	#__system___lockmem
0e4d4     9F 01 00 FF 
0e4d8     90 15 06 F6 | 	mov	arg02, ##@LR__5690
0e4dc     00 12 06 F6 | 	mov	arg01, #0
0e4e0     00 16 06 F6 | 	mov	arg03, #0
0e4e4     20 65 B1 FD | 	call	#__system___basic_print_string
0e4e8     00 12 06 F6 | 	mov	arg01, #0
0e4ec     18 15 02 F6 | 	mov	arg02, local06
0e4f0     00 16 06 F6 | 	mov	arg03, #0
0e4f4     0A 18 06 F6 | 	mov	arg04, #10
0e4f8     50 65 B1 FD | 	call	#__system___basic_print_integer
0e4fc     9F 01 00 FF 
0e500     9E 15 06 F6 | 	mov	arg02, ##@LR__5691
0e504     00 12 06 F6 | 	mov	arg01, #0
0e508     00 16 06 F6 | 	mov	arg03, #0
0e50c     F8 64 B1 FD | 	call	#__system___basic_print_string
0e510     45 00 00 FF 
0e514     50 E5 05 F1 | 	add	objptr, ##35664
0e518     F2 14 02 FB | 	rdlong	arg02, objptr
0e51c     45 00 00 FF 
0e520     50 E5 85 F1 | 	sub	objptr, ##35664
0e524     00 12 06 F6 | 	mov	arg01, #0
0e528     00 16 06 F6 | 	mov	arg03, #0
0e52c     D8 64 B1 FD | 	call	#__system___basic_print_string
0e530     00 12 06 F6 | 	mov	arg01, #0
0e534     0A 14 06 F6 | 	mov	arg02, #10
0e538     00 16 06 F6 | 	mov	arg03, #0
0e53c     70 64 B1 FD | 	call	#__system___basic_print_char
0e540     00 12 06 F6 | 	mov	arg01, #0
0e544     F4 B4 B1 FD | 	call	#__system___getiolock_0573
0e548     FD 00 68 FC | 	wrlong	#0, result1
0e54c     4A 00 00 FF 
0e550     94 E4 05 F1 | 	add	objptr, ##38036
0e554     F2 12 02 FB | 	rdlong	arg01, objptr
0e558     4A 00 00 FF 
0e55c     94 E4 85 F1 | 	sub	objptr, ##38036
0e560     3C 5E B1 FD | 	call	#__system___chdir
0e564     14 00 90 FD | 	jmp	#LR__1237
0e568                 | LR__1236
0e568     4A 00 00 FF 
0e56c     94 E4 05 F1 | 	add	objptr, ##38036
0e570     F2 2C 62 FC | 	wrlong	local04, objptr
0e574     4A 00 00 FF 
0e578     94 E4 85 F1 | 	sub	objptr, ##38036
0e57c                 | LR__1237
0e57c                 | '   print "Current directory: ";currentdir$
0e57c     00 12 06 F6 | 	mov	arg01, #0
0e580     B8 B4 B1 FD | 	call	#__system___getiolock_0573
0e584     FD 12 02 F6 | 	mov	arg01, result1
0e588     88 57 B1 FD | 	call	#__system___lockmem
0e58c     9F 01 00 FF 
0e590     A1 15 06 F6 | 	mov	arg02, ##@LR__5692
0e594     00 12 06 F6 | 	mov	arg01, #0
0e598     00 16 06 F6 | 	mov	arg03, #0
0e59c     68 64 B1 FD | 	call	#__system___basic_print_string
0e5a0     4A 00 00 FF 
0e5a4     94 E4 05 F1 | 	add	objptr, ##38036
0e5a8     F2 14 02 FB | 	rdlong	arg02, objptr
0e5ac     4A 00 00 FF 
0e5b0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5b4     00 12 06 F6 | 	mov	arg01, #0
0e5b8     00 16 06 F6 | 	mov	arg03, #0
0e5bc     48 64 B1 FD | 	call	#__system___basic_print_string
0e5c0     00 12 06 F6 | 	mov	arg01, #0
0e5c4     0A 14 06 F6 | 	mov	arg02, #10
0e5c8     00 16 06 F6 | 	mov	arg03, #0
0e5cc     E0 63 B1 FD | 	call	#__system___basic_print_char
0e5d0     00 12 06 F6 | 	mov	arg01, #0
0e5d4     64 B4 B1 FD | 	call	#__system___getiolock_0573
0e5d8     FD 00 68 FC | 	wrlong	#0, result1
0e5dc                 | '   return
0e5dc     68 03 90 FD | 	jmp	#LR__1249
0e5e0                 | LR__1238
0e5e0                 | ' if left$(newdir$,1)="/" then 
0e5e0     16 13 02 F6 | 	mov	arg01, local04
0e5e4     01 14 06 F6 | 	mov	arg02, #1
0e5e8     A4 77 B1 FD | 	call	#__system__Left_S
0e5ec     FD 12 02 F6 | 	mov	arg01, result1
0e5f0     9F 01 00 FF 
0e5f4     B5 15 06 F6 | 	mov	arg02, ##@LR__5693
0e5f8     40 57 B1 FD | 	call	#__system___string_cmp
0e5fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e600     3C 01 90 5D |  if_ne	jmp	#LR__1241
0e604     16 13 02 F6 | 	mov	arg01, local04
0e608     94 5D B1 FD | 	call	#__system___chdir
0e60c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e610     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e614     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e618     FD 30 0A F6 | 	mov	local06, result1 wz
0e61c                 | '   chdir(newdir$)
0e61c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e61c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e620     A4 00 90 AD |  if_e	jmp	#LR__1239
0e624     00 12 06 F6 | 	mov	arg01, #0
0e628     10 B4 B1 FD | 	call	#__system___getiolock_0573
0e62c     FD 12 02 F6 | 	mov	arg01, result1
0e630     E0 56 B1 FD | 	call	#__system___lockmem
0e634     9F 01 00 FF 
0e638     B7 15 06 F6 | 	mov	arg02, ##@LR__5694
0e63c     00 12 06 F6 | 	mov	arg01, #0
0e640     00 16 06 F6 | 	mov	arg03, #0
0e644     C0 63 B1 FD | 	call	#__system___basic_print_string
0e648     00 12 06 F6 | 	mov	arg01, #0
0e64c     18 15 02 F6 | 	mov	arg02, local06
0e650     00 16 06 F6 | 	mov	arg03, #0
0e654     0A 18 06 F6 | 	mov	arg04, #10
0e658     F0 63 B1 FD | 	call	#__system___basic_print_integer
0e65c     9F 01 00 FF 
0e660     C5 15 06 F6 | 	mov	arg02, ##@LR__5695
0e664     00 12 06 F6 | 	mov	arg01, #0
0e668     00 16 06 F6 | 	mov	arg03, #0
0e66c     98 63 B1 FD | 	call	#__system___basic_print_string
0e670     45 00 00 FF 
0e674     50 E5 05 F1 | 	add	objptr, ##35664
0e678     F2 14 02 FB | 	rdlong	arg02, objptr
0e67c     45 00 00 FF 
0e680     50 E5 85 F1 | 	sub	objptr, ##35664
0e684     00 12 06 F6 | 	mov	arg01, #0
0e688     00 16 06 F6 | 	mov	arg03, #0
0e68c     78 63 B1 FD | 	call	#__system___basic_print_string
0e690     00 12 06 F6 | 	mov	arg01, #0
0e694     0A 14 06 F6 | 	mov	arg02, #10
0e698     00 16 06 F6 | 	mov	arg03, #0
0e69c     10 63 B1 FD | 	call	#__system___basic_print_char
0e6a0     00 12 06 F6 | 	mov	arg01, #0
0e6a4     94 B3 B1 FD | 	call	#__system___getiolock_0573
0e6a8     FD 00 68 FC | 	wrlong	#0, result1
0e6ac     4A 00 00 FF 
0e6b0     94 E4 05 F1 | 	add	objptr, ##38036
0e6b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e6b8     4A 00 00 FF 
0e6bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e6c0     DC 5C B1 FD | 	call	#__system___chdir
0e6c4     14 00 90 FD | 	jmp	#LR__1240
0e6c8                 | LR__1239
0e6c8     4A 00 00 FF 
0e6cc     94 E4 05 F1 | 	add	objptr, ##38036
0e6d0     F2 2C 62 FC | 	wrlong	local04, objptr
0e6d4     4A 00 00 FF 
0e6d8     94 E4 85 F1 | 	sub	objptr, ##38036
0e6dc                 | LR__1240
0e6dc                 | '   print "Current directory: ";currentdir$
0e6dc     00 12 06 F6 | 	mov	arg01, #0
0e6e0     58 B3 B1 FD | 	call	#__system___getiolock_0573
0e6e4     FD 12 02 F6 | 	mov	arg01, result1
0e6e8     28 56 B1 FD | 	call	#__system___lockmem
0e6ec     9F 01 00 FF 
0e6f0     C8 15 06 F6 | 	mov	arg02, ##@LR__5696
0e6f4     00 12 06 F6 | 	mov	arg01, #0
0e6f8     00 16 06 F6 | 	mov	arg03, #0
0e6fc     08 63 B1 FD | 	call	#__system___basic_print_string
0e700     4A 00 00 FF 
0e704     94 E4 05 F1 | 	add	objptr, ##38036
0e708     F2 14 02 FB | 	rdlong	arg02, objptr
0e70c     4A 00 00 FF 
0e710     94 E4 85 F1 | 	sub	objptr, ##38036
0e714     00 12 06 F6 | 	mov	arg01, #0
0e718     00 16 06 F6 | 	mov	arg03, #0
0e71c     E8 62 B1 FD | 	call	#__system___basic_print_string
0e720     00 12 06 F6 | 	mov	arg01, #0
0e724     0A 14 06 F6 | 	mov	arg02, #10
0e728     00 16 06 F6 | 	mov	arg03, #0
0e72c     80 62 B1 FD | 	call	#__system___basic_print_char
0e730     00 12 06 F6 | 	mov	arg01, #0
0e734     04 B3 B1 FD | 	call	#__system___getiolock_0573
0e738     FD 00 68 FC | 	wrlong	#0, result1
0e73c                 | '   return
0e73c     08 02 90 FD | 	jmp	#LR__1249
0e740                 | LR__1241
0e740                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e740     4A 00 00 FF 
0e744     94 E4 05 F1 | 	add	objptr, ##38036
0e748     F2 12 02 FB | 	rdlong	arg01, objptr
0e74c     4A 00 00 FF 
0e750     94 E4 85 F1 | 	sub	objptr, ##38036
0e754     9F 01 00 FF 
0e758     DC 15 06 F6 | 	mov	arg02, ##@LR__5697
0e75c     DC 55 B1 FD | 	call	#__system___string_cmp
0e760     00 FA 0D F2 | 	cmp	result1, #0 wz
0e764     34 00 90 AD |  if_e	jmp	#LR__1242
0e768     4A 00 00 FF 
0e76c     94 E4 05 F1 | 	add	objptr, ##38036
0e770     F2 12 02 FB | 	rdlong	arg01, objptr
0e774     4A 00 00 FF 
0e778     94 E4 85 F1 | 	sub	objptr, ##38036
0e77c     9F 01 00 FF 
0e780     DE 15 06 F6 | 	mov	arg02, ##@LR__5698
0e784     E8 55 B1 FD | 	call	#__system___string_concat
0e788     FD 12 02 F6 | 	mov	arg01, result1
0e78c     16 15 02 F6 | 	mov	arg02, local04
0e790     DC 55 B1 FD | 	call	#__system___string_concat
0e794     FD 2C 02 F6 | 	mov	local04, result1
0e798     20 00 90 FD | 	jmp	#LR__1243
0e79c                 | LR__1242
0e79c     4A 00 00 FF 
0e7a0     94 E4 05 F1 | 	add	objptr, ##38036
0e7a4     F2 12 02 FB | 	rdlong	arg01, objptr
0e7a8     4A 00 00 FF 
0e7ac     94 E4 85 F1 | 	sub	objptr, ##38036
0e7b0     16 15 02 F6 | 	mov	arg02, local04
0e7b4     B8 55 B1 FD | 	call	#__system___string_concat
0e7b8     FD 2C 02 F6 | 	mov	local04, result1
0e7bc                 | LR__1243
0e7bc                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e7bc     16 13 02 F6 | 	mov	arg01, local04
0e7c0     01 14 06 F6 | 	mov	arg02, #1
0e7c4     50 76 B1 FD | 	call	#__system__Right_S
0e7c8     FD 12 02 F6 | 	mov	arg01, result1
0e7cc     9F 01 00 FF 
0e7d0     E0 15 06 F6 | 	mov	arg02, ##@LR__5699
0e7d4     64 55 B1 FD | 	call	#__system___string_cmp
0e7d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e7dc     30 00 90 5D |  if_ne	jmp	#LR__1246
0e7e0     16 13 02 F6 | 	mov	arg01, local04
0e7e4     09 2F 02 F6 | 	mov	local05, arg01
0e7e8     97 06 48 FB | 	callpa	#(@LR__1245-@LR__1244)>>2,fcache_load_ptr_
0e7ec                 | LR__1244
0e7ec     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e7f0     01 2E 06 51 |  if_ne	add	local05, #1
0e7f4     F4 FF 9F 5D |  if_ne	jmp	#LR__1244
0e7f8                 | LR__1245
0e7f8     09 2F 82 F1 | 	sub	local05, arg01
0e7fc     17 15 02 F6 | 	mov	arg02, local05
0e800     01 14 86 F1 | 	sub	arg02, #1
0e804     16 13 02 F6 | 	mov	arg01, local04
0e808     84 75 B1 FD | 	call	#__system__Left_S
0e80c     FD 2C 02 F6 | 	mov	local04, result1
0e810                 | LR__1246
0e810     16 13 02 F6 | 	mov	arg01, local04
0e814     88 5B B1 FD | 	call	#__system___chdir
0e818     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e81c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e820     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e824     FD 30 0A F6 | 	mov	local06, result1 wz
0e828                 | '   chdir(newdir$)
0e828                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e828     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e82c     A4 00 90 AD |  if_e	jmp	#LR__1247
0e830     00 12 06 F6 | 	mov	arg01, #0
0e834     04 B2 B1 FD | 	call	#__system___getiolock_0573
0e838     FD 12 02 F6 | 	mov	arg01, result1
0e83c     D4 54 B1 FD | 	call	#__system___lockmem
0e840     9F 01 00 FF 
0e844     E2 15 06 F6 | 	mov	arg02, ##@LR__5700
0e848     00 12 06 F6 | 	mov	arg01, #0
0e84c     00 16 06 F6 | 	mov	arg03, #0
0e850     B4 61 B1 FD | 	call	#__system___basic_print_string
0e854     00 12 06 F6 | 	mov	arg01, #0
0e858     18 15 02 F6 | 	mov	arg02, local06
0e85c     00 16 06 F6 | 	mov	arg03, #0
0e860     0A 18 06 F6 | 	mov	arg04, #10
0e864     E4 61 B1 FD | 	call	#__system___basic_print_integer
0e868     9F 01 00 FF 
0e86c     F0 15 06 F6 | 	mov	arg02, ##@LR__5701
0e870     00 12 06 F6 | 	mov	arg01, #0
0e874     00 16 06 F6 | 	mov	arg03, #0
0e878     8C 61 B1 FD | 	call	#__system___basic_print_string
0e87c     45 00 00 FF 
0e880     50 E5 05 F1 | 	add	objptr, ##35664
0e884     F2 14 02 FB | 	rdlong	arg02, objptr
0e888     45 00 00 FF 
0e88c     50 E5 85 F1 | 	sub	objptr, ##35664
0e890     00 12 06 F6 | 	mov	arg01, #0
0e894     00 16 06 F6 | 	mov	arg03, #0
0e898     6C 61 B1 FD | 	call	#__system___basic_print_string
0e89c     00 12 06 F6 | 	mov	arg01, #0
0e8a0     0A 14 06 F6 | 	mov	arg02, #10
0e8a4     00 16 06 F6 | 	mov	arg03, #0
0e8a8     04 61 B1 FD | 	call	#__system___basic_print_char
0e8ac     00 12 06 F6 | 	mov	arg01, #0
0e8b0     88 B1 B1 FD | 	call	#__system___getiolock_0573
0e8b4     FD 00 68 FC | 	wrlong	#0, result1
0e8b8     4A 00 00 FF 
0e8bc     94 E4 05 F1 | 	add	objptr, ##38036
0e8c0     F2 12 02 FB | 	rdlong	arg01, objptr
0e8c4     4A 00 00 FF 
0e8c8     94 E4 85 F1 | 	sub	objptr, ##38036
0e8cc     D0 5A B1 FD | 	call	#__system___chdir
0e8d0     14 00 90 FD | 	jmp	#LR__1248
0e8d4                 | LR__1247
0e8d4     4A 00 00 FF 
0e8d8     94 E4 05 F1 | 	add	objptr, ##38036
0e8dc     F2 2C 62 FC | 	wrlong	local04, objptr
0e8e0     4A 00 00 FF 
0e8e4     94 E4 85 F1 | 	sub	objptr, ##38036
0e8e8                 | LR__1248
0e8e8                 | '   print "Current directory: ";currentdir$
0e8e8     00 12 06 F6 | 	mov	arg01, #0
0e8ec     4C B1 B1 FD | 	call	#__system___getiolock_0573
0e8f0     FD 12 02 F6 | 	mov	arg01, result1
0e8f4     1C 54 B1 FD | 	call	#__system___lockmem
0e8f8     9F 01 00 FF 
0e8fc     F3 15 06 F6 | 	mov	arg02, ##@LR__5702
0e900     00 12 06 F6 | 	mov	arg01, #0
0e904     00 16 06 F6 | 	mov	arg03, #0
0e908     FC 60 B1 FD | 	call	#__system___basic_print_string
0e90c     4A 00 00 FF 
0e910     94 E4 05 F1 | 	add	objptr, ##38036
0e914     F2 14 02 FB | 	rdlong	arg02, objptr
0e918     4A 00 00 FF 
0e91c     94 E4 85 F1 | 	sub	objptr, ##38036
0e920     00 12 06 F6 | 	mov	arg01, #0
0e924     00 16 06 F6 | 	mov	arg03, #0
0e928     DC 60 B1 FD | 	call	#__system___basic_print_string
0e92c     00 12 06 F6 | 	mov	arg01, #0
0e930     0A 14 06 F6 | 	mov	arg02, #10
0e934     00 16 06 F6 | 	mov	arg03, #0
0e938     74 60 B1 FD | 	call	#__system___basic_print_char
0e93c     00 12 06 F6 | 	mov	arg01, #0
0e940     F8 B0 B1 FD | 	call	#__system___getiolock_0573
0e944     FD 00 68 FC | 	wrlong	#0, result1
0e948                 | LR__1249
0e948     A7 F0 03 F6 | 	mov	ptra, fp
0e94c     B2 00 A0 FD | 	call	#popregs_
0e950                 | _do_cd_ret
0e950     2D 00 64 FD | 	ret
0e954                 | 
0e954                 | ' 
0e954                 | ' '-------------------- changefreq
0e954                 | ' 
0e954                 | ' sub do_changefreq
0e954                 | _do_changefreq
0e954     04 4A 05 F6 | 	mov	COUNT_, #4
0e958     A8 00 A0 FD | 	call	#pushregs_
0e95c     28 F0 07 F1 | 	add	ptra, #40
0e960     B4 E0 BF FD | 	call	#_pop
0e964     FF 14 02 F6 | 	mov	arg02, result3
0e968     A7 FA 61 FC | 	wrlong	result1, fp
0e96c     04 4E 05 F1 | 	add	fp, #4
0e970     A7 FC 61 FC | 	wrlong	result2, fp
0e974     04 4E 05 F1 | 	add	fp, #4
0e978     A7 14 62 FC | 	wrlong	arg02, fp
0e97c     08 4E 85 F1 | 	sub	fp, #8
0e980     A7 12 02 F6 | 	mov	arg01, fp
0e984     30 E3 BF FD | 	call	#_converttofloat
0e988     24 4E 05 F1 | 	add	fp, #36
0e98c     A7 FA 61 FC | 	wrlong	result1, fp
0e990     24 4E 85 F1 | 	sub	fp, #36
0e994     FD 14 02 F6 | 	mov	arg02, result1
0e998     FC 16 20 FF 
0e99c     54 12 06 F6 | 	mov	arg01, ##1076754516
0e9a0     B8 91 B1 FD | 	call	#__system____builtin_logbase
0e9a4     FD 26 02 F6 | 	mov	local01, result1
0e9a8     1E 14 C6 F9 | 	decod	arg02, #30
0e9ac     FC 16 20 FF 
0e9b0     54 12 06 F6 | 	mov	arg01, ##1076754516
0e9b4     A4 91 B1 FD | 	call	#__system____builtin_logbase
0e9b8     FD 14 02 F6 | 	mov	arg02, result1
0e9bc     13 13 02 F6 | 	mov	arg01, local01
0e9c0     CC 83 B1 FD | 	call	#__system___float_div
0e9c4     FD 12 02 F6 | 	mov	arg01, result1
0e9c8     00 14 06 F6 | 	mov	arg02, #0
0e9cc     84 86 B1 FD | 	call	#__system___float_tointeger
0e9d0     10 4E 05 F1 | 	add	fp, #16
0e9d4     A7 FA 61 FC | 	wrlong	result1, fp
0e9d8     1E 26 C6 F9 | 	decod	local01, #30
0e9dc     FD 12 02 F6 | 	mov	arg01, result1
0e9e0     10 4E 85 F1 | 	sub	fp, #16
0e9e4     05 12 06 F1 | 	add	arg01, #5
0e9e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e9ec     1F 28 C6 C9 |  if_b	decod	local02, #31
0e9f0     00 28 06 36 |  if_ae	mov	local02, #0
0e9f4     90 7D B1 FD | 	call	#__system___float_fromuns
0e9f8     14 FB 61 F5 | 	xor	result1, local02
0e9fc     FD 14 02 F6 | 	mov	arg02, result1
0ea00     13 13 02 F6 | 	mov	arg01, local01
0ea04     8C 90 B1 FD | 	call	#__system____builtin_powf
0ea08     FD 12 02 F6 | 	mov	arg01, result1
0ea0c     01 14 06 F6 | 	mov	arg02, #1
0ea10     40 86 B1 FD | 	call	#__system___float_tointeger
0ea14     14 4E 05 F1 | 	add	fp, #20
0ea18     A7 FA 61 FC | 	wrlong	result1, fp
0ea1c                 | ' skip=round(2^(lfreq+5))
0ea1c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ea1c     14 4E 85 F1 | 	sub	fp, #20
0ea20     40 00 00 FF 
0ea24     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ea28     30 00 90 CD |  if_b	jmp	#LR__1250
0ea2c     14 4E 05 F1 | 	add	fp, #20
0ea30     A7 26 02 FB | 	rdlong	local01, fp
0ea34     13 27 52 F6 | 	abs	local01, local01 wc
0ea38     0F 26 46 F0 | 	shr	local01, #15
0ea3c     13 27 82 F6 | 	negc	local01, local01
0ea40     04 4E 05 F1 | 	add	fp, #4
0ea44     A7 26 62 FC | 	wrlong	local01, fp
0ea48     04 4E 85 F1 | 	sub	fp, #4
0ea4c     40 00 80 FF 
0ea50     A7 00 68 FC | 	wrlong	##32768, fp
0ea54     14 4E 85 F1 | 	sub	fp, #20
0ea58     0C 00 90 FD | 	jmp	#LR__1251
0ea5c                 | LR__1250
0ea5c     18 4E 05 F1 | 	add	fp, #24
0ea60     A7 02 68 FC | 	wrlong	#1, fp
0ea64     18 4E 85 F1 | 	sub	fp, #24
0ea68                 | LR__1251
0ea68     24 4E 05 F1 | 	add	fp, #36
0ea6c     A7 14 02 FB | 	rdlong	arg02, fp
0ea70     24 4E 85 F1 | 	sub	fp, #36
0ea74     3E 2C 25 FF 
0ea78     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ea7c     10 83 B1 FD | 	call	#__system___float_div
0ea80     FD 26 02 F6 | 	mov	local01, result1
0ea84     18 4E 05 F1 | 	add	fp, #24
0ea88     A7 12 02 FB | 	rdlong	arg01, fp
0ea8c     18 4E 85 F1 | 	sub	fp, #24
0ea90     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea94     1F 28 C6 C9 |  if_b	decod	local02, #31
0ea98     00 28 06 36 |  if_ae	mov	local02, #0
0ea9c     E8 7C B1 FD | 	call	#__system___float_fromuns
0eaa0     14 FB 61 F5 | 	xor	result1, local02
0eaa4     FD 2A 02 F6 | 	mov	local03, result1
0eaa8     1E 2C C6 F9 | 	decod	local04, #30
0eaac     0D 12 06 F6 | 	mov	arg01, #13
0eab0     10 4E 05 F1 | 	add	fp, #16
0eab4     A7 14 02 FB | 	rdlong	arg02, fp
0eab8     10 4E 85 F1 | 	sub	fp, #16
0eabc     0A 13 82 F1 | 	sub	arg01, arg02
0eac0     09 13 52 F6 | 	abs	arg01, arg01 wc
0eac4     1F 28 C6 C9 |  if_b	decod	local02, #31
0eac8     00 28 06 36 |  if_ae	mov	local02, #0
0eacc     B8 7C B1 FD | 	call	#__system___float_fromuns
0ead0     14 FB 61 F5 | 	xor	result1, local02
0ead4     FD 14 02 F6 | 	mov	arg02, result1
0ead8     16 13 02 F6 | 	mov	arg01, local04
0eadc     B4 8F B1 FD | 	call	#__system____builtin_powf
0eae0     FD 14 02 F6 | 	mov	arg02, result1
0eae4     15 13 02 F6 | 	mov	arg01, local03
0eae8     A0 80 B1 FD | 	call	#__system___float_mul
0eaec     FD 14 02 F6 | 	mov	arg02, result1
0eaf0     13 13 02 F6 | 	mov	arg01, local01
0eaf4     98 82 B1 FD | 	call	#__system___float_div
0eaf8     FD 12 02 F6 | 	mov	arg01, result1
0eafc     01 14 06 F6 | 	mov	arg02, #1
0eb00     50 85 B1 FD | 	call	#__system___float_tointeger
0eb04     FD 26 02 F6 | 	mov	local01, result1
0eb08     1C 4E 05 F1 | 	add	fp, #28
0eb0c     A7 26 62 FC | 	wrlong	local01, fp
0eb10     1C 4E 85 F1 | 	sub	fp, #28
0eb14     00 DF BF FD | 	call	#_pop
0eb18     FF 2C 02 F6 | 	mov	local04, result3
0eb1c     A7 FA 61 FC | 	wrlong	result1, fp
0eb20     04 4E 05 F1 | 	add	fp, #4
0eb24     A7 FC 61 FC | 	wrlong	result2, fp
0eb28     04 4E 05 F1 | 	add	fp, #4
0eb2c     A7 2C 62 FC | 	wrlong	local04, fp
0eb30     08 4E 85 F1 | 	sub	fp, #8
0eb34     A7 12 02 F6 | 	mov	arg01, fp
0eb38     C0 E0 BF FD | 	call	#_converttoint
0eb3c     FD 2A 52 F6 | 	abs	local03, result1 wc
0eb40     07 2A 06 F5 | 	and	local03, #7
0eb44     15 2B 82 F6 | 	negc	local03, local03
0eb48     0C 4E 05 F1 | 	add	fp, #12
0eb4c     A7 2A 62 FC | 	wrlong	local03, fp
0eb50     08 4E 05 F1 | 	add	fp, #8
0eb54     A7 26 02 FB | 	rdlong	local01, fp
0eb58     10 26 66 F0 | 	shl	local01, #16
0eb5c     08 4E 05 F1 | 	add	fp, #8
0eb60     A7 2C 02 FB | 	rdlong	local04, fp
0eb64     16 27 02 F1 | 	add	local01, local04
0eb68     04 4E 05 F1 | 	add	fp, #4
0eb6c     A7 26 62 FC | 	wrlong	local01, fp
0eb70                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0eb70     37 00 00 FF 
0eb74     10 E4 05 F1 | 	add	objptr, ##28176
0eb78     F2 12 02 FB | 	rdlong	arg01, objptr
0eb7c     37 00 00 FF 
0eb80     10 E4 85 F1 | 	sub	objptr, ##28176
0eb84     14 4E 85 F1 | 	sub	fp, #20
0eb88     A7 2C 02 FB | 	rdlong	local04, fp
0eb8c     0C 4E 85 F1 | 	sub	fp, #12
0eb90     06 2C 66 F0 | 	shl	local04, #6
0eb94     16 13 02 F1 | 	add	arg01, local04
0eb98     08 12 06 F1 | 	add	arg01, #8
0eb9c     09 FB 01 FB | 	rdlong	result1, arg01
0eba0     1B FA 2D F4 | 	testbn	result1, #27 wz
0eba4     3C 00 90 5D |  if_ne	jmp	#LR__1252
0eba8     37 00 00 FF 
0ebac     10 E4 05 F1 | 	add	objptr, ##28176
0ebb0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebb4     37 00 00 FF 
0ebb8     10 E4 85 F1 | 	sub	objptr, ##28176
0ebbc     0C 4E 05 F1 | 	add	fp, #12
0ebc0     A7 2C 02 FB | 	rdlong	local04, fp
0ebc4     06 2C 66 F0 | 	shl	local04, #6
0ebc8     16 13 02 F1 | 	add	arg01, local04
0ebcc     18 12 06 F1 | 	add	arg01, #24
0ebd0     14 4E 05 F1 | 	add	fp, #20
0ebd4     A7 14 02 FB | 	rdlong	arg02, fp
0ebd8     20 4E 85 F1 | 	sub	fp, #32
0ebdc     09 15 62 FC | 	wrlong	arg02, arg01
0ebe0     80 00 90 FD | 	jmp	#LR__1253
0ebe4                 | LR__1252
0ebe4     37 00 00 FF 
0ebe8     10 E4 05 F1 | 	add	objptr, ##28176
0ebec     F2 26 02 FB | 	rdlong	local01, objptr
0ebf0     37 00 00 FF 
0ebf4     10 E4 85 F1 | 	sub	objptr, ##28176
0ebf8     0C 4E 05 F1 | 	add	fp, #12
0ebfc     A7 2C 02 FB | 	rdlong	local04, fp
0ec00     06 2C 66 F0 | 	shl	local04, #6
0ec04     16 27 02 F1 | 	add	local01, local04
0ec08     18 26 06 F1 | 	add	local01, #24
0ec0c     18 4E 05 F1 | 	add	fp, #24
0ec10     A7 14 02 FB | 	rdlong	arg02, fp
0ec14     24 4E 85 F1 | 	sub	fp, #36
0ec18     3E 2C 25 FF 
0ec1c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ec20     6C 81 B1 FD | 	call	#__system___float_div
0ec24     FD 12 02 F6 | 	mov	arg01, result1
0ec28     01 14 06 F6 | 	mov	arg02, #1
0ec2c     24 84 B1 FD | 	call	#__system___float_tointeger
0ec30     13 FB 51 FC | 	wrword	result1, local01
0ec34     37 00 00 FF 
0ec38     10 E4 05 F1 | 	add	objptr, ##28176
0ec3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ec40     37 00 00 FF 
0ec44     10 E4 85 F1 | 	sub	objptr, ##28176
0ec48     0C 4E 05 F1 | 	add	fp, #12
0ec4c     A7 2C 02 FB | 	rdlong	local04, fp
0ec50     0C 4E 85 F1 | 	sub	fp, #12
0ec54     06 2C 66 F0 | 	shl	local04, #6
0ec58     16 13 02 F1 | 	add	arg01, local04
0ec5c     1A 12 06 F1 | 	add	arg01, #26
0ec60     09 01 5A FC | 	wrword	#256, arg01
0ec64                 | LR__1253
0ec64     A7 F0 03 F6 | 	mov	ptra, fp
0ec68     B2 00 A0 FD | 	call	#popregs_
0ec6c                 | _do_changefreq_ret
0ec6c     2D 00 64 FD | 	ret
0ec70                 | 
0ec70                 | ' 
0ec70                 | ' '-------------------- changepan
0ec70                 | ' 
0ec70                 | ' sub do_changepan
0ec70                 | _do_changepan
0ec70     01 4A 05 F6 | 	mov	COUNT_, #1
0ec74     A8 00 A0 FD | 	call	#pushregs_
0ec78     14 F0 07 F1 | 	add	ptra, #20
0ec7c     98 DD BF FD | 	call	#_pop
0ec80     A7 FA 61 FC | 	wrlong	result1, fp
0ec84     04 4E 05 F1 | 	add	fp, #4
0ec88     A7 FC 61 FC | 	wrlong	result2, fp
0ec8c     04 4E 05 F1 | 	add	fp, #4
0ec90     A7 FE 61 FC | 	wrlong	result3, fp
0ec94     08 4E 85 F1 | 	sub	fp, #8
0ec98     00 00 23 FF 
0ec9c     00 26 06 F6 | 	mov	local01, ##1174405120
0eca0     A7 12 02 F6 | 	mov	arg01, fp
0eca4     10 E0 BF FD | 	call	#_converttofloat
0eca8     FD 14 02 F6 | 	mov	arg02, result1
0ecac     13 13 02 F6 | 	mov	arg01, local01
0ecb0     D8 7E B1 FD | 	call	#__system___float_mul
0ecb4     FD 12 02 F6 | 	mov	arg01, result1
0ecb8     01 14 06 F6 | 	mov	arg02, #1
0ecbc     94 83 B1 FD | 	call	#__system___float_tointeger
0ecc0     0D 26 C6 F9 | 	decod	local01, #13
0ecc4     FD 26 02 F1 | 	add	local01, result1
0ecc8     10 4E 05 F1 | 	add	fp, #16
0eccc     A7 26 62 FC | 	wrlong	local01, fp
0ecd0                 | ' 
0ecd0                 | ' t1=pop()
0ecd0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ecd0                 | ' if pan<0 then pan=0
0ecd0     10 4E 85 F1 | 	sub	fp, #16
0ecd4     00 26 56 F2 | 	cmps	local01, #0 wc
0ecd8     10 4E 05 C1 |  if_b	add	fp, #16
0ecdc     A7 00 68 CC |  if_b	wrlong	#0, fp
0ece0     10 4E 85 C1 |  if_b	sub	fp, #16
0ece4                 | ' if pan>16384 then pan=16384
0ece4     10 4E 05 F1 | 	add	fp, #16
0ece8     A7 26 02 FB | 	rdlong	local01, fp
0ecec     10 4E 85 F1 | 	sub	fp, #16
0ecf0     20 00 00 FF 
0ecf4     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ecf8     10 4E 05 31 |  if_ae	add	fp, #16
0ecfc     20 00 80 3F 
0ed00     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ed04     10 4E 85 31 |  if_ae	sub	fp, #16
0ed08     0C DD BF FD | 	call	#_pop
0ed0c     FF 26 02 F6 | 	mov	local01, result3
0ed10     A7 FA 61 FC | 	wrlong	result1, fp
0ed14     04 4E 05 F1 | 	add	fp, #4
0ed18     A7 FC 61 FC | 	wrlong	result2, fp
0ed1c     04 4E 05 F1 | 	add	fp, #4
0ed20     A7 26 62 FC | 	wrlong	local01, fp
0ed24     08 4E 85 F1 | 	sub	fp, #8
0ed28     A7 12 02 F6 | 	mov	arg01, fp
0ed2c     CC DE BF FD | 	call	#_converttoint
0ed30     FD 26 52 F6 | 	abs	local01, result1 wc
0ed34     07 26 06 F5 | 	and	local01, #7
0ed38     13 27 82 F6 | 	negc	local01, local01
0ed3c     0C 4E 05 F1 | 	add	fp, #12
0ed40     A7 26 62 FC | 	wrlong	local01, fp
0ed44     37 00 00 FF 
0ed48     10 E4 05 F1 | 	add	objptr, ##28176
0ed4c     F2 12 02 FB | 	rdlong	arg01, objptr
0ed50     37 00 00 FF 
0ed54     10 E4 85 F1 | 	sub	objptr, ##28176
0ed58     06 26 66 F0 | 	shl	local01, #6
0ed5c     13 13 02 F1 | 	add	arg01, local01
0ed60     16 12 06 F1 | 	add	arg01, #22
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 14 02 FB | 	rdlong	arg02, fp
0ed6c     10 4E 85 F1 | 	sub	fp, #16
0ed70     09 15 52 FC | 	wrword	arg02, arg01
0ed74     A7 F0 03 F6 | 	mov	ptra, fp
0ed78     B2 00 A0 FD | 	call	#popregs_
0ed7c                 | _do_changepan_ret
0ed7c     2D 00 64 FD | 	ret
0ed80                 | 
0ed80                 | ' 
0ed80                 | ' '-------------------- changevol
0ed80                 | ' 
0ed80                 | ' sub do_changevol
0ed80                 | _do_changevol
0ed80     00 4A 05 F6 | 	mov	COUNT_, #0
0ed84     A8 00 A0 FD | 	call	#pushregs_
0ed88     14 F0 07 F1 | 	add	ptra, #20
0ed8c     88 DC BF FD | 	call	#_pop
0ed90     FF 14 02 F6 | 	mov	arg02, result3
0ed94     A7 FA 61 FC | 	wrlong	result1, fp
0ed98     04 4E 05 F1 | 	add	fp, #4
0ed9c     A7 FC 61 FC | 	wrlong	result2, fp
0eda0     04 4E 05 F1 | 	add	fp, #4
0eda4     A7 14 62 FC | 	wrlong	arg02, fp
0eda8     08 4E 85 F1 | 	sub	fp, #8
0edac     A7 12 02 F6 | 	mov	arg01, fp
0edb0     04 DF BF FD | 	call	#_converttofloat
0edb4     FD 12 02 F6 | 	mov	arg01, result1
0edb8     00 3D 22 FF 
0edbc     00 14 06 F6 | 	mov	arg02, ##1148846080
0edc0     C8 7D B1 FD | 	call	#__system___float_mul
0edc4     FD 12 02 F6 | 	mov	arg01, result1
0edc8     01 14 06 F6 | 	mov	arg02, #1
0edcc     84 82 B1 FD | 	call	#__system___float_tointeger
0edd0     FD 14 52 F6 | 	abs	arg02, result1 wc
0edd4     0D 14 46 F7 | 	zerox	arg02, #13
0edd8     0A 15 82 F6 | 	negc	arg02, arg02
0eddc     10 4E 05 F1 | 	add	fp, #16
0ede0     A7 14 62 FC | 	wrlong	arg02, fp
0ede4     10 4E 85 F1 | 	sub	fp, #16
0ede8     2C DC BF FD | 	call	#_pop
0edec     FF 14 02 F6 | 	mov	arg02, result3
0edf0     A7 FA 61 FC | 	wrlong	result1, fp
0edf4     04 4E 05 F1 | 	add	fp, #4
0edf8     A7 FC 61 FC | 	wrlong	result2, fp
0edfc     04 4E 05 F1 | 	add	fp, #4
0ee00     A7 14 62 FC | 	wrlong	arg02, fp
0ee04     08 4E 85 F1 | 	sub	fp, #8
0ee08     A7 12 02 F6 | 	mov	arg01, fp
0ee0c     EC DD BF FD | 	call	#_converttoint
0ee10     FD 14 52 F6 | 	abs	arg02, result1 wc
0ee14     07 14 06 F5 | 	and	arg02, #7
0ee18     0A 15 82 F6 | 	negc	arg02, arg02
0ee1c     0C 4E 05 F1 | 	add	fp, #12
0ee20     A7 14 62 FC | 	wrlong	arg02, fp
0ee24     37 00 00 FF 
0ee28     10 E4 05 F1 | 	add	objptr, ##28176
0ee2c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee30     37 00 00 FF 
0ee34     10 E4 85 F1 | 	sub	objptr, ##28176
0ee38     06 14 66 F0 | 	shl	arg02, #6
0ee3c     0A 13 02 F1 | 	add	arg01, arg02
0ee40     14 12 06 F1 | 	add	arg01, #20
0ee44     04 4E 05 F1 | 	add	fp, #4
0ee48     A7 14 02 FB | 	rdlong	arg02, fp
0ee4c     10 4E 85 F1 | 	sub	fp, #16
0ee50     09 15 52 FC | 	wrword	arg02, arg01
0ee54     A7 F0 03 F6 | 	mov	ptra, fp
0ee58     B2 00 A0 FD | 	call	#popregs_
0ee5c                 | _do_changevol_ret
0ee5c     2D 00 64 FD | 	ret
0ee60                 | 
0ee60                 | ' 
0ee60                 | ' '-------------------- changewav
0ee60                 | ' 
0ee60                 | ' sub do_changewav
0ee60                 | _do_changewav
0ee60     00 4A 05 F6 | 	mov	COUNT_, #0
0ee64     A8 00 A0 FD | 	call	#pushregs_
0ee68     14 F0 07 F1 | 	add	ptra, #20
0ee6c     A8 DB BF FD | 	call	#_pop
0ee70     FF 14 02 F6 | 	mov	arg02, result3
0ee74     A7 FA 61 FC | 	wrlong	result1, fp
0ee78     04 4E 05 F1 | 	add	fp, #4
0ee7c     A7 FC 61 FC | 	wrlong	result2, fp
0ee80     04 4E 05 F1 | 	add	fp, #4
0ee84     A7 14 62 FC | 	wrlong	arg02, fp
0ee88     08 4E 85 F1 | 	sub	fp, #8
0ee8c     A7 12 02 F6 | 	mov	arg01, fp
0ee90     68 DD BF FD | 	call	#_converttoint
0ee94     10 4E 05 F1 | 	add	fp, #16
0ee98     A7 FA 61 FC | 	wrlong	result1, fp
0ee9c                 | ' 
0ee9c                 | ' t1=pop()
0ee9c                 | ' wave=converttoint(t1)
0ee9c                 | ' if wave<0 then wave=0
0ee9c     FD 14 02 F6 | 	mov	arg02, result1
0eea0     10 4E 85 F1 | 	sub	fp, #16
0eea4     00 14 56 F2 | 	cmps	arg02, #0 wc
0eea8     10 4E 05 C1 |  if_b	add	fp, #16
0eeac     A7 00 68 CC |  if_b	wrlong	#0, fp
0eeb0     10 4E 85 C1 |  if_b	sub	fp, #16
0eeb4     60 DB BF FD | 	call	#_pop
0eeb8     FF 14 02 F6 | 	mov	arg02, result3
0eebc     A7 FA 61 FC | 	wrlong	result1, fp
0eec0     04 4E 05 F1 | 	add	fp, #4
0eec4     A7 FC 61 FC | 	wrlong	result2, fp
0eec8     04 4E 05 F1 | 	add	fp, #4
0eecc     A7 14 62 FC | 	wrlong	arg02, fp
0eed0     08 4E 85 F1 | 	sub	fp, #8
0eed4     A7 12 02 F6 | 	mov	arg01, fp
0eed8     20 DD BF FD | 	call	#_converttoint
0eedc     FD 14 52 F6 | 	abs	arg02, result1 wc
0eee0     07 14 06 F5 | 	and	arg02, #7
0eee4     0A 15 82 F6 | 	negc	arg02, arg02
0eee8     0C 4E 05 F1 | 	add	fp, #12
0eeec     A7 14 62 FC | 	wrlong	arg02, fp
0eef0                 | ' if wave <32 then 
0eef0     04 4E 05 F1 | 	add	fp, #4
0eef4     A7 14 02 FB | 	rdlong	arg02, fp
0eef8     10 4E 85 F1 | 	sub	fp, #16
0eefc     20 14 56 F2 | 	cmps	arg02, #32 wc
0ef00     48 00 90 3D |  if_ae	jmp	#LR__1260
0ef04     37 00 00 FF 
0ef08     10 E4 05 F1 | 	add	objptr, ##28176
0ef0c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef10     37 00 00 FF 
0ef14     10 E4 85 F1 | 	sub	objptr, ##28176
0ef18     0C 4E 05 F1 | 	add	fp, #12
0ef1c     A7 14 02 FB | 	rdlong	arg02, fp
0ef20     06 14 66 F0 | 	shl	arg02, #6
0ef24     0A 13 02 F1 | 	add	arg01, arg02
0ef28     08 12 06 F1 | 	add	arg01, #8
0ef2c     04 4E 05 F1 | 	add	fp, #4
0ef30     A7 14 02 FB | 	rdlong	arg02, fp
0ef34     10 4E 85 F1 | 	sub	fp, #16
0ef38     0B 14 66 F0 | 	shl	arg02, #11
0ef3c     00 00 40 FF 
0ef40     00 14 06 F1 | 	add	arg02, ##-2147483648
0ef44     09 15 62 FC | 	wrlong	arg02, arg01
0ef48     34 00 90 FD | 	jmp	#LR__1261
0ef4c                 | LR__1260
0ef4c     37 00 00 FF 
0ef50     10 E4 05 F1 | 	add	objptr, ##28176
0ef54     F2 12 02 FB | 	rdlong	arg01, objptr
0ef58     37 00 00 FF 
0ef5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ef60     0C 4E 05 F1 | 	add	fp, #12
0ef64     A7 14 02 FB | 	rdlong	arg02, fp
0ef68     0C 4E 85 F1 | 	sub	fp, #12
0ef6c     06 14 66 F0 | 	shl	arg02, #6
0ef70     0A 13 02 F1 | 	add	arg01, arg02
0ef74     08 12 06 F1 | 	add	arg01, #8
0ef78     00 00 C4 FF 
0ef7c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0ef80                 | LR__1261
0ef80     A7 F0 03 F6 | 	mov	ptra, fp
0ef84     B2 00 A0 FD | 	call	#popregs_
0ef88                 | _do_changewav_ret
0ef88     2D 00 64 FD | 	ret
0ef8c                 | 
0ef8c                 | ' 
0ef8c                 | ' '-------------------- chr$
0ef8c                 | ' 
0ef8c                 | ' sub do_chr
0ef8c                 | _do_chr
0ef8c     01 4A 05 F6 | 	mov	COUNT_, #1
0ef90     A8 00 A0 FD | 	call	#pushregs_
0ef94     14 F0 07 F1 | 	add	ptra, #20
0ef98     4A 00 00 FF 
0ef9c     80 E4 05 F1 | 	add	objptr, ##38016
0efa0     F2 26 02 FB | 	rdlong	local01, objptr
0efa4     13 17 02 F6 | 	mov	arg03, local01
0efa8     01 16 66 F0 | 	shl	arg03, #1
0efac     13 17 02 F1 | 	add	arg03, local01
0efb0     02 16 66 F0 | 	shl	arg03, #2
0efb4     03 00 00 FF 
0efb8     04 E4 85 F1 | 	sub	objptr, ##1540
0efbc     F2 16 02 F1 | 	add	arg03, objptr
0efc0     0B 17 02 FB | 	rdlong	arg03, arg03
0efc4     0C 4E 05 F1 | 	add	fp, #12
0efc8     A7 16 62 FC | 	wrlong	arg03, fp
0efcc                 | ' 
0efcc                 | ' numpar=compiledline(lineptr_e).result.uresult
0efcc                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0efcc     0C 4E 85 F1 | 	sub	fp, #12
0efd0     02 16 16 F2 | 	cmp	arg03, #2 wc
0efd4     47 00 00 FF 
0efd8     7C E4 85 F1 | 	sub	objptr, ##36476
0efdc     0C 4E 05 C1 |  if_b	add	fp, #12
0efe0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0efe4     0C 4E 85 C1 |  if_b	sub	fp, #12
0efe8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1270
0efec     00 12 06 F6 | 	mov	arg01, #0
0eff0     48 AA B1 FD | 	call	#__system___getiolock_0573
0eff4     FD 12 02 F6 | 	mov	arg01, result1
0eff8     18 4D B1 FD | 	call	#__system___lockmem
0effc     A0 01 00 FF 
0f000     07 14 06 F6 | 	mov	arg02, ##@LR__5703
0f004     00 12 06 F6 | 	mov	arg01, #0
0f008     00 16 06 F6 | 	mov	arg03, #0
0f00c     F8 59 B1 FD | 	call	#__system___basic_print_string
0f010     00 12 06 F6 | 	mov	arg01, #0
0f014     24 AA B1 FD | 	call	#__system___getiolock_0573
0f018     FD 00 68 FC | 	wrlong	#0, result1
0f01c     27 12 06 F6 | 	mov	arg01, #39
0f020     00 14 06 F6 | 	mov	arg02, #0
0f024     5C 13 B1 FD | 	call	#_printerror
0f028     54 00 90 FD | 	jmp	#LR__1271
0f02c                 | LR__1270
0f02c     E8 D9 BF FD | 	call	#_pop
0f030     FF 26 02 F6 | 	mov	local01, result3
0f034     A7 FA 61 FC | 	wrlong	result1, fp
0f038     04 4E 05 F1 | 	add	fp, #4
0f03c     A7 FC 61 FC | 	wrlong	result2, fp
0f040     04 4E 05 F1 | 	add	fp, #4
0f044     A7 26 62 FC | 	wrlong	local01, fp
0f048     08 4E 85 F1 | 	sub	fp, #8
0f04c     A7 12 02 F6 | 	mov	arg01, fp
0f050     A8 DB BF FD | 	call	#_converttoint
0f054     10 4E 05 F1 | 	add	fp, #16
0f058     A7 FA 61 FC | 	wrlong	result1, fp
0f05c     FD 12 02 F6 | 	mov	arg01, result1
0f060     10 4E 85 F1 | 	sub	fp, #16
0f064     EC 6E B1 FD | 	call	#__system__Chr_S
0f068     A7 FA 61 FC | 	wrlong	result1, fp
0f06c     08 4E 05 F1 | 	add	fp, #8
0f070     A7 3E 68 FC | 	wrlong	#31, fp
0f074     08 4E 85 F1 | 	sub	fp, #8
0f078     A7 12 02 F6 | 	mov	arg01, fp
0f07c     30 DA BF FD | 	call	#_push
0f080                 | LR__1271
0f080     A7 F0 03 F6 | 	mov	ptra, fp
0f084     B2 00 A0 FD | 	call	#popregs_
0f088                 | _do_chr_ret
0f088     2D 00 64 FD | 	ret
0f08c                 | 
0f08c                 | ' 
0f08c                 | ' '-------------------- circle
0f08c                 | ' 
0f08c                 | ' sub do_circle
0f08c                 | _do_circle
0f08c     02 4A 05 F6 | 	mov	COUNT_, #2
0f090     A8 00 A0 FD | 	call	#pushregs_
0f094     24 F0 07 F1 | 	add	ptra, #36
0f098     7C D9 BF FD | 	call	#_pop
0f09c     FD 18 02 F6 | 	mov	arg04, result1
0f0a0     FE 16 02 F6 | 	mov	arg03, result2
0f0a4     FF 14 02 F6 | 	mov	arg02, result3
0f0a8     18 4E 05 F1 | 	add	fp, #24
0f0ac     A7 18 62 FC | 	wrlong	arg04, fp
0f0b0     04 4E 05 F1 | 	add	fp, #4
0f0b4     A7 16 62 FC | 	wrlong	arg03, fp
0f0b8     04 4E 05 F1 | 	add	fp, #4
0f0bc     A7 14 62 FC | 	wrlong	arg02, fp
0f0c0     20 4E 85 F1 | 	sub	fp, #32
0f0c4     50 D9 BF FD | 	call	#_pop
0f0c8     FD 18 02 F6 | 	mov	arg04, result1
0f0cc     FE 16 02 F6 | 	mov	arg03, result2
0f0d0     FF 26 02 F6 | 	mov	local01, result3
0f0d4     0C 4E 05 F1 | 	add	fp, #12
0f0d8     A7 18 62 FC | 	wrlong	arg04, fp
0f0dc     04 4E 05 F1 | 	add	fp, #4
0f0e0     A7 16 62 FC | 	wrlong	arg03, fp
0f0e4     04 4E 05 F1 | 	add	fp, #4
0f0e8     A7 26 62 FC | 	wrlong	local01, fp
0f0ec     14 4E 85 F1 | 	sub	fp, #20
0f0f0     24 D9 BF FD | 	call	#_pop
0f0f4     A7 FA 61 FC | 	wrlong	result1, fp
0f0f8     04 4E 05 F1 | 	add	fp, #4
0f0fc     A7 FC 61 FC | 	wrlong	result2, fp
0f100     04 4E 05 F1 | 	add	fp, #4
0f104     A7 FE 61 FC | 	wrlong	result3, fp
0f108                 | ' 
0f108                 | ' t3=pop()
0f108                 | ' t2=pop()
0f108                 | ' t1=pop()
0f108                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f108     FF 18 02 F6 | 	mov	arg04, result3
0f10c     08 4E 85 F1 | 	sub	fp, #8
0f110     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f114     08 4E 05 51 |  if_ne	add	fp, #8
0f118     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f11c     08 4E 85 51 |  if_ne	sub	fp, #8
0f120     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f124     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f128     14 4E 05 F1 | 	add	fp, #20
0f12c     A7 26 02 FB | 	rdlong	local01, fp
0f130     14 4E 85 F1 | 	sub	fp, #20
0f134     1C 26 0E F2 | 	cmp	local01, #28 wz
0f138     14 4E 05 51 |  if_ne	add	fp, #20
0f13c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f140     14 4E 85 51 |  if_ne	sub	fp, #20
0f144     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f148     58 00 90 5D |  if_ne	jmp	#LR__1280
0f14c     20 4E 05 F1 | 	add	fp, #32
0f150     A7 26 02 FB | 	rdlong	local01, fp
0f154     20 4E 85 F1 | 	sub	fp, #32
0f158     1C 26 0E F2 | 	cmp	local01, #28 wz
0f15c     20 4E 05 51 |  if_ne	add	fp, #32
0f160     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f164     20 4E 85 51 |  if_ne	sub	fp, #32
0f168     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f16c     34 00 90 5D |  if_ne	jmp	#LR__1280
0f170     A7 12 02 FB | 	rdlong	arg01, fp
0f174     0C 4E 05 F1 | 	add	fp, #12
0f178     A7 14 02 FB | 	rdlong	arg02, fp
0f17c     0C 4E 05 F1 | 	add	fp, #12
0f180     A7 16 02 FB | 	rdlong	arg03, fp
0f184     18 4E 85 F1 | 	sub	fp, #24
0f188     37 00 00 FF 
0f18c     28 E4 05 F1 | 	add	objptr, ##28200
0f190     F2 18 02 FB | 	rdlong	arg04, objptr
0f194     37 00 00 FF 
0f198     28 E4 85 F1 | 	sub	objptr, ##28200
0f19c     A4 2A B1 FD | 	call	#_hg010b_spin2_circle
0f1a0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f1a0     54 00 90 FD | 	jmp	#LR__1281
0f1a4                 | LR__1280
0f1a4     A7 12 02 F6 | 	mov	arg01, fp
0f1a8     50 DA BF FD | 	call	#_converttoint
0f1ac     FD 26 02 F6 | 	mov	local01, result1
0f1b0     0C 4E 05 F1 | 	add	fp, #12
0f1b4     A7 12 02 F6 | 	mov	arg01, fp
0f1b8     0C 4E 85 F1 | 	sub	fp, #12
0f1bc     3C DA BF FD | 	call	#_converttoint
0f1c0     FD 28 02 F6 | 	mov	local02, result1
0f1c4     18 4E 05 F1 | 	add	fp, #24
0f1c8     A7 12 02 F6 | 	mov	arg01, fp
0f1cc     18 4E 85 F1 | 	sub	fp, #24
0f1d0     28 DA BF FD | 	call	#_converttoint
0f1d4     FD 16 02 F6 | 	mov	arg03, result1
0f1d8     37 00 00 FF 
0f1dc     28 E4 05 F1 | 	add	objptr, ##28200
0f1e0     F2 18 02 FB | 	rdlong	arg04, objptr
0f1e4     37 00 00 FF 
0f1e8     28 E4 85 F1 | 	sub	objptr, ##28200
0f1ec     13 13 02 F6 | 	mov	arg01, local01
0f1f0     14 15 02 F6 | 	mov	arg02, local02
0f1f4     4C 2A B1 FD | 	call	#_hg010b_spin2_circle
0f1f8                 | LR__1281
0f1f8     A7 F0 03 F6 | 	mov	ptra, fp
0f1fc     B2 00 A0 FD | 	call	#popregs_
0f200                 | _do_circle_ret
0f200     2D 00 64 FD | 	ret
0f204                 | 
0f204                 | ' 
0f204                 | ' '-------------------- click
0f204                 | ' 
0f204                 | ' sub do_click
0f204                 | _do_click
0f204     10 D8 BF FD | 	call	#_pop
0f208     00 FA 4D F2 | 	cmps	result1, #0 wz
0f20c                 | ' 
0f20c                 | ' t1=pop()
0f20c                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f20c     50 00 00 AF 
0f210     14 E5 05 A1 |  if_e	add	objptr, ##41236
0f214     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f218     50 00 00 FF 
0f21c     14 E5 C5 F3 | 	sumz	objptr, ##41236
0f220     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f224     50 00 00 5F 
0f228     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0f22c                 | _do_click_ret
0f22c     2D 00 64 FD | 	ret
0f230                 | 
0f230                 | ' 
0f230                 | ' '-------------------- close
0f230                 | ' 
0f230                 | ' sub do_close
0f230                 | _do_close
0f230     03 4A 05 F6 | 	mov	COUNT_, #3
0f234     A8 00 A0 FD | 	call	#pushregs_
0f238     DC D7 BF FD | 	call	#_pop
0f23c     FD 26 02 F6 | 	mov	local01, result1
0f240     FF 16 02 F6 | 	mov	arg03, result3
0f244     FE 28 02 F6 | 	mov	local02, result2
0f248     0B 2B 02 F6 | 	mov	local03, arg03
0f24c                 | ' 
0f24c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f24c                 | ' t1=pop()
0f24c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f24c     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f250     44 00 90 AD |  if_e	jmp	#LR__1290
0f254     00 12 06 F6 | 	mov	arg01, #0
0f258     E0 A7 B1 FD | 	call	#__system___getiolock_0573
0f25c     FD 12 02 F6 | 	mov	arg01, result1
0f260     B0 4A B1 FD | 	call	#__system___lockmem
0f264     A0 01 00 FF 
0f268     0E 14 06 F6 | 	mov	arg02, ##@LR__5704
0f26c     00 12 06 F6 | 	mov	arg01, #0
0f270     00 16 06 F6 | 	mov	arg03, #0
0f274     90 57 B1 FD | 	call	#__system___basic_print_string
0f278     00 12 06 F6 | 	mov	arg01, #0
0f27c     0A 14 06 F6 | 	mov	arg02, #10
0f280     00 16 06 F6 | 	mov	arg03, #0
0f284     28 57 B1 FD | 	call	#__system___basic_print_char
0f288     00 12 06 F6 | 	mov	arg01, #0
0f28c     AC A7 B1 FD | 	call	#__system___getiolock_0573
0f290     FD 00 68 FC | 	wrlong	#0, result1
0f294     08 00 90 FD | 	jmp	#LR__1291
0f298                 | LR__1290
0f298                 | ' channel  = t1.result.iresult
0f298                 | ' close #channel
0f298     13 13 02 F6 | 	mov	arg01, local01
0f29c     CC 9D B1 FD | 	call	#__system__close
0f2a0                 | LR__1291
0f2a0     A7 F0 03 F6 | 	mov	ptra, fp
0f2a4     B2 00 A0 FD | 	call	#popregs_
0f2a8                 | _do_close_ret
0f2a8     2D 00 64 FD | 	ret
0f2ac                 | 
0f2ac                 | ' 
0f2ac                 | ' '-------------------- cls
0f2ac                 | ' 
0f2ac                 | ' sub do_cls
0f2ac                 | _do_cls
0f2ac     37 00 00 FF 
0f2b0     3C E4 05 F1 | 	add	objptr, ##28220
0f2b4     F2 12 02 FB | 	rdlong	arg01, objptr
0f2b8     04 E4 85 F1 | 	sub	objptr, #4
0f2bc     F2 14 02 FB | 	rdlong	arg02, objptr
0f2c0     37 00 00 FF 
0f2c4     38 E4 85 F1 | 	sub	objptr, ##28216
0f2c8     0C 2E B1 FD | 	call	#_hg010b_spin2_cls
0f2cc     37 00 00 FF 
0f2d0     3C E4 05 F1 | 	add	objptr, ##28220
0f2d4     F2 14 02 FB | 	rdlong	arg02, objptr
0f2d8     14 E4 85 F1 | 	sub	objptr, #20
0f2dc     F2 14 62 FC | 	wrlong	arg02, objptr
0f2e0     37 00 00 FF 
0f2e4     28 E4 85 F1 | 	sub	objptr, ##28200
0f2e8                 | _do_cls_ret
0f2e8     2D 00 64 FD | 	ret
0f2ec                 | 
0f2ec                 | ' 
0f2ec                 | ' '-------------------- color
0f2ec                 | ' 
0f2ec                 | ' sub do_color
0f2ec                 | _do_color
0f2ec     03 4A 05 F6 | 	mov	COUNT_, #3
0f2f0     A8 00 A0 FD | 	call	#pushregs_
0f2f4     20 D7 BF FD | 	call	#_pop
0f2f8     FD 26 02 F6 | 	mov	local01, result1
0f2fc     FE 28 02 F6 | 	mov	local02, result2
0f300     FF 2A 02 F6 | 	mov	local03, result3
0f304     37 00 00 FF 
0f308     28 E4 05 F1 | 	add	objptr, ##28200
0f30c     F2 26 62 FC | 	wrlong	local01, objptr
0f310     37 00 00 FF 
0f314     28 E4 85 F1 | 	sub	objptr, ##28200
0f318     A7 F0 03 F6 | 	mov	ptra, fp
0f31c     B2 00 A0 FD | 	call	#popregs_
0f320                 | _do_color_ret
0f320     2D 00 64 FD | 	ret
0f324                 | 
0f324                 | ' 
0f324                 | ' '-------------------- cos
0f324                 | ' 
0f324                 | ' sub do_cos
0f324                 | _do_cos
0f324     01 4A 05 F6 | 	mov	COUNT_, #1
0f328     A8 00 A0 FD | 	call	#pushregs_
0f32c     10 F0 07 F1 | 	add	ptra, #16
0f330     4A 00 00 FF 
0f334     80 E4 05 F1 | 	add	objptr, ##38016
0f338     F2 26 02 FB | 	rdlong	local01, objptr
0f33c     13 17 02 F6 | 	mov	arg03, local01
0f340     01 16 66 F0 | 	shl	arg03, #1
0f344     13 17 02 F1 | 	add	arg03, local01
0f348     02 16 66 F0 | 	shl	arg03, #2
0f34c     03 00 00 FF 
0f350     04 E4 85 F1 | 	sub	objptr, ##1540
0f354     F2 16 02 F1 | 	add	arg03, objptr
0f358     0B 17 02 FB | 	rdlong	arg03, arg03
0f35c     0C 4E 05 F1 | 	add	fp, #12
0f360     A7 16 62 FC | 	wrlong	arg03, fp
0f364                 | ' 
0f364                 | ' numpar=compiledline(lineptr_e).result.uresult
0f364                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f364     0C 4E 85 F1 | 	sub	fp, #12
0f368     02 16 16 F2 | 	cmp	arg03, #2 wc
0f36c     47 00 00 FF 
0f370     7C E4 85 F1 | 	sub	objptr, ##36476
0f374     0C 4E 05 C1 |  if_b	add	fp, #12
0f378     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f37c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f380     40 00 90 4D |  if_c_and_nz	jmp	#LR__1300
0f384     00 12 06 F6 | 	mov	arg01, #0
0f388     B0 A6 B1 FD | 	call	#__system___getiolock_0573
0f38c     FD 12 02 F6 | 	mov	arg01, result1
0f390     80 49 B1 FD | 	call	#__system___lockmem
0f394     A0 01 00 FF 
0f398     20 14 06 F6 | 	mov	arg02, ##@LR__5705
0f39c     00 12 06 F6 | 	mov	arg01, #0
0f3a0     00 16 06 F6 | 	mov	arg03, #0
0f3a4     60 56 B1 FD | 	call	#__system___basic_print_string
0f3a8     00 12 06 F6 | 	mov	arg01, #0
0f3ac     8C A6 B1 FD | 	call	#__system___getiolock_0573
0f3b0     FD 00 68 FC | 	wrlong	#0, result1
0f3b4     27 12 06 F6 | 	mov	arg01, #39
0f3b8     00 14 06 F6 | 	mov	arg02, #0
0f3bc     C4 0F B1 FD | 	call	#_printerror
0f3c0     78 00 90 FD | 	jmp	#LR__1301
0f3c4                 | LR__1300
0f3c4     50 D6 BF FD | 	call	#_pop
0f3c8     A7 FA 61 FC | 	wrlong	result1, fp
0f3cc     04 4E 05 F1 | 	add	fp, #4
0f3d0     A7 FC 61 FC | 	wrlong	result2, fp
0f3d4     04 4E 05 F1 | 	add	fp, #4
0f3d8     A7 FE 61 FC | 	wrlong	result3, fp
0f3dc     08 4E 85 F1 | 	sub	fp, #8
0f3e0     51 00 00 FF 
0f3e4     BC E5 05 F1 | 	add	objptr, ##41916
0f3e8     F2 26 02 FB | 	rdlong	local01, objptr
0f3ec     51 00 00 FF 
0f3f0     BC E5 85 F1 | 	sub	objptr, ##41916
0f3f4     A7 12 02 F6 | 	mov	arg01, fp
0f3f8     BC D8 BF FD | 	call	#_converttofloat
0f3fc     FD 14 02 F6 | 	mov	arg02, result1
0f400     13 13 02 F6 | 	mov	arg01, local01
0f404     84 77 B1 FD | 	call	#__system___float_mul
0f408     FD 14 02 F6 | 	mov	arg02, result1
0f40c     87 E4 1F FF 
0f410     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f414     1F 14 E6 F4 | 	bitnot	arg02, #31
0f418     A0 73 B1 FD | 	call	#__system___float_add
0f41c     FD 12 02 F6 | 	mov	arg01, result1
0f420     C8 80 B1 FD | 	call	#__system____builtin_sinf
0f424     A7 FA 61 FC | 	wrlong	result1, fp
0f428     08 4E 05 F1 | 	add	fp, #8
0f42c     A7 3C 68 FC | 	wrlong	#30, fp
0f430     08 4E 85 F1 | 	sub	fp, #8
0f434     A7 12 02 F6 | 	mov	arg01, fp
0f438     74 D6 BF FD | 	call	#_push
0f43c                 | LR__1301
0f43c     A7 F0 03 F6 | 	mov	ptra, fp
0f440     B2 00 A0 FD | 	call	#popregs_
0f444                 | _do_cos_ret
0f444     2D 00 64 FD | 	ret
0f448                 | 
0f448                 | ' 
0f448                 | ' '-------------------- cursor
0f448                 | ' 
0f448                 | ' sub do_cursor
0f448                 | _do_cursor
0f448     CC D5 BF FD | 	call	#_pop
0f44c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f450                 | ' t1=pop()
0f450                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f450     14 00 90 5D |  if_ne	jmp	#LR__1310
0f454     11 12 06 F6 | 	mov	arg01, #17
0f458     00 14 06 F6 | 	mov	arg02, #0
0f45c     00 16 06 F6 | 	mov	arg03, #0
0f460     54 1F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f464     10 00 90 FD | 	jmp	#LR__1311
0f468                 | LR__1310
0f468     11 12 06 F6 | 	mov	arg01, #17
0f46c     08 14 06 F6 | 	mov	arg02, #8
0f470     10 16 06 F6 | 	mov	arg03, #16
0f474     40 1F B1 FD | 	call	#_hg010b_spin2_setspritesize
0f478                 | LR__1311
0f478                 | _do_cursor_ret
0f478     2D 00 64 FD | 	ret
0f47c                 | 
0f47c                 | ' 
0f47c                 | ' '-------------------- defenv
0f47c                 | ' 
0f47c                 | ' sub do_defenv
0f47c                 | _do_defenv
0f47c     08 4A 05 F6 | 	mov	COUNT_, #8
0f480     A8 00 A0 FD | 	call	#pushregs_
0f484     58 F0 07 F1 | 	add	ptra, #88
0f488     4A 00 00 FF 
0f48c     80 E4 05 F1 | 	add	objptr, ##38016
0f490     F2 26 02 FB | 	rdlong	local01, objptr
0f494     13 1B 02 F6 | 	mov	arg05, local01
0f498     01 1A 66 F0 | 	shl	arg05, #1
0f49c     13 1B 02 F1 | 	add	arg05, local01
0f4a0     02 1A 66 F0 | 	shl	arg05, #2
0f4a4     03 00 00 FF 
0f4a8     04 E4 85 F1 | 	sub	objptr, ##1540
0f4ac     F2 1A 02 F1 | 	add	arg05, objptr
0f4b0     0D 1B 02 FB | 	rdlong	arg05, arg05
0f4b4     10 4E 05 F1 | 	add	fp, #16
0f4b8     A7 1A 62 FC | 	wrlong	arg05, fp
0f4bc                 | ' 
0f4bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f4bc                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f4bc     10 4E 85 F1 | 	sub	fp, #16
0f4c0     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f4c4     47 00 00 FF 
0f4c8     7C E4 85 F1 | 	sub	objptr, ##36476
0f4cc     10 4E 05 51 |  if_ne	add	fp, #16
0f4d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f4d4     10 4E 85 51 |  if_ne	sub	fp, #16
0f4d8     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f4dc     8C 0A 90 5D |  if_ne	jmp	#LR__1341
0f4e0                 | ' 
0f4e0                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f4e0     10 4E 05 F1 | 	add	fp, #16
0f4e4     A7 26 02 FB | 	rdlong	local01, fp
0f4e8     10 4E 85 F1 | 	sub	fp, #16
0f4ec     02 26 0E F2 | 	cmp	local01, #2 wz
0f4f0     24 04 90 5D |  if_ne	jmp	#LR__1333
0f4f4     20 D5 BF FD | 	call	#_pop
0f4f8     FF 1A 02 F6 | 	mov	arg05, result3
0f4fc     40 4E 05 F1 | 	add	fp, #64
0f500     A7 FA 61 FC | 	wrlong	result1, fp
0f504     04 4E 05 F1 | 	add	fp, #4
0f508     A7 FC 61 FC | 	wrlong	result2, fp
0f50c     04 4E 05 F1 | 	add	fp, #4
0f510     A7 1A 62 FC | 	wrlong	arg05, fp
0f514                 | '   t1=pop()
0f514                 | '   if t1.result_type=result_string2 then 
0f514     48 4E 85 F1 | 	sub	fp, #72
0f518     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f51c     20 00 90 5D |  if_ne	jmp	#LR__1320
0f520     40 4E 05 F1 | 	add	fp, #64
0f524     A7 12 02 FB | 	rdlong	arg01, fp
0f528     40 4E 85 F1 | 	sub	fp, #64
0f52c     60 D6 BF FD | 	call	#_convertstring
0f530     4C 4E 05 F1 | 	add	fp, #76
0f534     A7 FA 61 FC | 	wrlong	result1, fp
0f538     4C 4E 85 F1 | 	sub	fp, #76
0f53c     58 00 90 FD | 	jmp	#LR__1323
0f540                 | LR__1320
0f540     48 4E 05 F1 | 	add	fp, #72
0f544     A7 26 02 FB | 	rdlong	local01, fp
0f548     48 4E 85 F1 | 	sub	fp, #72
0f54c     1F 26 0E F2 | 	cmp	local01, #31 wz
0f550     18 00 90 5D |  if_ne	jmp	#LR__1321
0f554     40 4E 05 F1 | 	add	fp, #64
0f558     A7 26 02 FB | 	rdlong	local01, fp
0f55c     0C 4E 05 F1 | 	add	fp, #12
0f560     A7 26 62 FC | 	wrlong	local01, fp
0f564     4C 4E 85 F1 | 	sub	fp, #76
0f568     2C 00 90 FD | 	jmp	#LR__1322
0f56c                 | LR__1321
0f56c     A0 01 00 FF 
0f570     26 26 06 F6 | 	mov	local01, ##@LR__5706
0f574     4C 4E 05 F1 | 	add	fp, #76
0f578     A7 26 62 FC | 	wrlong	local01, fp
0f57c     0C 4E 85 F1 | 	sub	fp, #12
0f580     A7 12 02 F6 | 	mov	arg01, fp
0f584     40 4E 85 F1 | 	sub	fp, #64
0f588     70 D6 BF FD | 	call	#_converttoint
0f58c     1C 4E 05 F1 | 	add	fp, #28
0f590     A7 FA 61 FC | 	wrlong	result1, fp
0f594     1C 4E 85 F1 | 	sub	fp, #28
0f598                 | LR__1322
0f598                 | LR__1323
0f598                 | '   if s1<>"" then 
0f598     4C 4E 05 F1 | 	add	fp, #76
0f59c     A7 12 02 FB | 	rdlong	arg01, fp
0f5a0     4C 4E 85 F1 | 	sub	fp, #76
0f5a4     A0 01 00 FF 
0f5a8     27 14 06 F6 | 	mov	arg02, ##@LR__5707
0f5ac     8C 47 B1 FD | 	call	#__system___string_cmp
0f5b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f5b4     24 02 90 AD |  if_e	jmp	#LR__1327
0f5b8     5C D4 BF FD | 	call	#_pop
0f5bc     FF 26 02 F6 | 	mov	local01, result3
0f5c0     40 4E 05 F1 | 	add	fp, #64
0f5c4     A7 FA 61 FC | 	wrlong	result1, fp
0f5c8     04 4E 05 F1 | 	add	fp, #4
0f5cc     A7 FC 61 FC | 	wrlong	result2, fp
0f5d0     04 4E 05 F1 | 	add	fp, #4
0f5d4     A7 26 62 FC | 	wrlong	local01, fp
0f5d8     08 4E 85 F1 | 	sub	fp, #8
0f5dc     A7 12 02 F6 | 	mov	arg01, fp
0f5e0     40 4E 85 F1 | 	sub	fp, #64
0f5e4     14 D6 BF FD | 	call	#_converttoint
0f5e8     18 4E 05 F1 | 	add	fp, #24
0f5ec     A7 FA 61 FC | 	wrlong	result1, fp
0f5f0     18 4E 85 F1 | 	sub	fp, #24
0f5f4                 | '     t1=pop()
0f5f4                 | '     channel=converttoint(t1) 
0f5f4                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f5f4     09 12 06 F6 | 	mov	arg01, #9
0f5f8     70 9A B1 FD | 	call	#__system__close
0f5fc     09 26 06 F6 | 	mov	local01, #9
0f600     A0 01 00 FF 
0f604     28 12 06 F6 | 	mov	arg01, ##@LR__5708
0f608     4C 4E 05 F1 | 	add	fp, #76
0f60c     A7 14 02 FB | 	rdlong	arg02, fp
0f610     4C 4E 85 F1 | 	sub	fp, #76
0f614     58 47 B1 FD | 	call	#__system___string_concat
0f618     FD 14 02 F6 | 	mov	arg02, result1
0f61c     13 13 02 F6 | 	mov	arg01, local01
0f620     00 16 06 F6 | 	mov	arg03, #0
0f624     F0 52 B1 FD | 	call	#__system___basic_open_string
0f628     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f62c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f630     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f634     0C 4E 05 F1 | 	add	fp, #12
0f638     A7 FA 61 FC | 	wrlong	result1, fp
0f63c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f63c     0C 4E 85 F1 | 	sub	fp, #12
0f640     A0 00 90 AD |  if_e	jmp	#LR__1324
0f644     00 12 06 F6 | 	mov	arg01, #0
0f648     F0 A3 B1 FD | 	call	#__system___getiolock_0573
0f64c     FD 12 02 F6 | 	mov	arg01, result1
0f650     C0 46 B1 FD | 	call	#__system___lockmem
0f654     A0 01 00 FF 
0f658     35 14 06 F6 | 	mov	arg02, ##@LR__5709
0f65c     00 12 06 F6 | 	mov	arg01, #0
0f660     00 16 06 F6 | 	mov	arg03, #0
0f664     A0 53 B1 FD | 	call	#__system___basic_print_string
0f668     0C 4E 05 F1 | 	add	fp, #12
0f66c     A7 14 02 FB | 	rdlong	arg02, fp
0f670     0C 4E 85 F1 | 	sub	fp, #12
0f674     00 12 06 F6 | 	mov	arg01, #0
0f678     00 16 06 F6 | 	mov	arg03, #0
0f67c     0A 18 06 F6 | 	mov	arg04, #10
0f680     C8 53 B1 FD | 	call	#__system___basic_print_integer
0f684     A0 01 00 FF 
0f688     43 14 06 F6 | 	mov	arg02, ##@LR__5710
0f68c     00 12 06 F6 | 	mov	arg01, #0
0f690     00 16 06 F6 | 	mov	arg03, #0
0f694     70 53 B1 FD | 	call	#__system___basic_print_string
0f698     00 26 06 F6 | 	mov	local01, #0
0f69c     0C 4E 05 F1 | 	add	fp, #12
0f6a0     A7 12 02 FB | 	rdlong	arg01, fp
0f6a4     0C 4E 85 F1 | 	sub	fp, #12
0f6a8     F4 6F B1 FD | 	call	#__system___strerror
0f6ac     FD 14 02 F6 | 	mov	arg02, result1
0f6b0     13 13 02 F6 | 	mov	arg01, local01
0f6b4     00 16 06 F6 | 	mov	arg03, #0
0f6b8     4C 53 B1 FD | 	call	#__system___basic_print_string
0f6bc     00 12 06 F6 | 	mov	arg01, #0
0f6c0     0A 14 06 F6 | 	mov	arg02, #10
0f6c4     00 16 06 F6 | 	mov	arg03, #0
0f6c8     E4 52 B1 FD | 	call	#__system___basic_print_char
0f6cc     00 12 06 F6 | 	mov	arg01, #0
0f6d0     68 A3 B1 FD | 	call	#__system___getiolock_0573
0f6d4     FD 00 68 FC | 	wrlong	#0, result1
0f6d8     09 12 06 F6 | 	mov	arg01, #9
0f6dc     8C 99 B1 FD | 	call	#__system__close
0f6e0     88 08 90 FD | 	jmp	#LR__1341
0f6e4                 | LR__1324
0f6e4                 | '     get #9,17,envbuf8(channel,0),256
0f6e4     18 4E 05 F1 | 	add	fp, #24
0f6e8     A7 1A 02 FB | 	rdlong	arg05, fp
0f6ec     18 4E 85 F1 | 	sub	fp, #24
0f6f0     0D 17 02 F6 | 	mov	arg03, arg05
0f6f4     09 16 66 F0 | 	shl	arg03, #9
0f6f8     0D 17 02 F1 | 	add	arg03, arg05
0f6fc     0C 00 00 FF 
0f700     D8 E4 05 F1 | 	add	objptr, ##6360
0f704     F2 16 02 F1 | 	add	arg03, objptr
0f708     09 12 06 F6 | 	mov	arg01, #9
0f70c     11 14 06 F6 | 	mov	arg02, #17
0f710     00 19 06 F6 | 	mov	arg04, #256
0f714     01 1A 06 F6 | 	mov	arg05, #1
0f718     0C 00 00 FF 
0f71c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f720     60 54 B1 FD | 	call	#__system___basic_get
0f724                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f724     14 4E 05 F1 | 	add	fp, #20
0f728     A7 FE 69 FC | 	wrlong	#255, fp
0f72c     14 4E 85 F1 | 	sub	fp, #20
0f730     0C 00 00 FF 
0f734     D8 E4 05 F1 | 	add	objptr, ##6360
0f738     97 30 48 FB | 	callpa	#(@LR__1326-@LR__1325)>>2,fcache_load_ptr_
0f73c                 | LR__1325
0f73c     18 4E 05 F1 | 	add	fp, #24
0f740     A7 16 02 FB | 	rdlong	arg03, fp
0f744     0B 27 02 F6 | 	mov	local01, arg03
0f748     09 26 66 F0 | 	shl	local01, #9
0f74c     F2 26 02 F1 | 	add	local01, objptr
0f750     04 4E 85 F1 | 	sub	fp, #4
0f754     A7 1A 02 FB | 	rdlong	arg05, fp
0f758     0D 19 02 F6 | 	mov	arg04, arg05
0f75c     01 18 66 F0 | 	shl	arg04, #1
0f760     13 19 02 F1 | 	add	arg04, local01
0f764     0B 27 02 F6 | 	mov	local01, arg03
0f768     09 26 66 F0 | 	shl	local01, #9
0f76c     0B 27 02 F1 | 	add	local01, arg03
0f770     F2 26 02 F1 | 	add	local01, objptr
0f774     13 1B 02 F1 | 	add	arg05, local01
0f778     0D 27 C2 FA | 	rdbyte	local01, arg05
0f77c     00 27 06 FA | 	mul	local01, #256
0f780     0C 27 52 FC | 	wrword	local01, arg04
0f784     A7 26 02 FB | 	rdlong	local01, fp
0f788     01 26 86 F1 | 	sub	local01, #1
0f78c     A7 26 62 FC | 	wrlong	local01, fp
0f790     14 4E 85 F1 | 	sub	fp, #20
0f794     00 26 56 F2 | 	cmps	local01, #0 wc
0f798     A0 FF 9F 3D |  if_ae	jmp	#LR__1325
0f79c                 | LR__1326
0f79c     0C 00 00 FF 
0f7a0     D8 E4 85 F1 | 	sub	objptr, ##6360
0f7a4                 | '     close #9
0f7a4     09 12 06 F6 | 	mov	arg01, #9
0f7a8     C0 98 B1 FD | 	call	#__system__close
0f7ac     18 4E 05 F1 | 	add	fp, #24
0f7b0     A7 26 02 FB | 	rdlong	local01, fp
0f7b4     18 4E 85 F1 | 	sub	fp, #24
0f7b8     09 26 66 F0 | 	shl	local01, #9
0f7bc     0C 00 00 FF 
0f7c0     D8 E4 05 F1 | 	add	objptr, ##6360
0f7c4     F2 26 02 F1 | 	add	local01, objptr
0f7c8     FE 27 06 F1 | 	add	local01, #510
0f7cc     13 01 58 FC | 	wrword	#0, local01
0f7d0                 | '     envbuf(channel,255)=0                                                              
0f7d0                 | '     return
0f7d0     0C 00 00 FF 
0f7d4     D8 E4 85 F1 | 	sub	objptr, ##6360
0f7d8     90 07 90 FD | 	jmp	#LR__1341
0f7dc                 | LR__1327
0f7dc                 | '     if wptr < $80000 then 
0f7dc     1C 4E 05 F1 | 	add	fp, #28
0f7e0     A7 28 02 FB | 	rdlong	local02, fp
0f7e4     1C 4E 85 F1 | 	sub	fp, #28
0f7e8     00 04 00 FF 
0f7ec     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f7f0     7C 00 90 3D |  if_ae	jmp	#LR__1330
0f7f4                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f7f4     14 4E 05 F1 | 	add	fp, #20
0f7f8     A7 00 68 FC | 	wrlong	#0, fp
0f7fc     14 4E 85 F1 | 	sub	fp, #20
0f800     0C 00 00 FF 
0f804     D8 E4 05 F1 | 	add	objptr, ##6360
0f808     97 2C 48 FB | 	callpa	#(@LR__1329-@LR__1328)>>2,fcache_load_ptr_
0f80c                 | LR__1328
0f80c     18 4E 05 F1 | 	add	fp, #24
0f810     A7 28 02 FB | 	rdlong	local02, fp
0f814     09 28 66 F0 | 	shl	local02, #9
0f818     F2 28 02 F1 | 	add	local02, objptr
0f81c     04 4E 85 F1 | 	sub	fp, #4
0f820     A7 26 02 FB | 	rdlong	local01, fp
0f824     13 1B 02 F6 | 	mov	arg05, local01
0f828     01 1A 66 F0 | 	shl	arg05, #1
0f82c     14 1B 02 F1 | 	add	arg05, local02
0f830     08 4E 05 F1 | 	add	fp, #8
0f834     A7 12 02 FB | 	rdlong	arg01, fp
0f838     01 26 66 F0 | 	shl	local01, #1
0f83c     13 13 02 F1 | 	add	arg01, local01
0f840     09 FB E1 FA | 	rdword	result1, arg01
0f844     0D FB 51 FC | 	wrword	result1, arg05
0f848     08 4E 85 F1 | 	sub	fp, #8
0f84c     A7 28 02 FB | 	rdlong	local02, fp
0f850     01 28 06 F1 | 	add	local02, #1
0f854     A7 28 62 FC | 	wrlong	local02, fp
0f858     14 4E 85 F1 | 	sub	fp, #20
0f85c     00 29 56 F2 | 	cmps	local02, #256 wc
0f860     A8 FF 9F CD |  if_b	jmp	#LR__1328
0f864                 | LR__1329
0f864     0C 00 00 FF 
0f868     D8 E4 85 F1 | 	sub	objptr, ##6360
0f86c     78 00 90 FD | 	jmp	#LR__1332
0f870                 | LR__1330
0f870                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f870     14 4E 05 F1 | 	add	fp, #20
0f874     A7 00 68 FC | 	wrlong	#0, fp
0f878     14 4E 85 F1 | 	sub	fp, #20
0f87c                 | LR__1331
0f87c     18 4E 05 F1 | 	add	fp, #24
0f880     A7 28 02 FB | 	rdlong	local02, fp
0f884     09 28 66 F0 | 	shl	local02, #9
0f888     0C 00 00 FF 
0f88c     D8 E4 05 F1 | 	add	objptr, ##6360
0f890     F2 28 02 F1 | 	add	local02, objptr
0f894     04 4E 85 F1 | 	sub	fp, #4
0f898     A7 26 02 FB | 	rdlong	local01, fp
0f89c     13 2B 02 F6 | 	mov	local03, local01
0f8a0     01 2A 66 F0 | 	shl	local03, #1
0f8a4     14 2B 02 F1 | 	add	local03, local02
0f8a8     08 4E 05 F1 | 	add	fp, #8
0f8ac     A7 12 02 FB | 	rdlong	arg01, fp
0f8b0     1C 4E 85 F1 | 	sub	fp, #28
0f8b4     01 26 66 F0 | 	shl	local01, #1
0f8b8     13 13 02 F1 | 	add	arg01, local01
0f8bc     0C 00 00 FF 
0f8c0     D8 E4 85 F1 | 	sub	objptr, ##6360
0f8c4     D0 0D B1 FD | 	call	#_psdpeek
0f8c8     15 FB 51 FC | 	wrword	result1, local03
0f8cc     14 4E 05 F1 | 	add	fp, #20
0f8d0     A7 2A 02 FB | 	rdlong	local03, fp
0f8d4     01 2A 06 F1 | 	add	local03, #1
0f8d8     A7 2A 62 FC | 	wrlong	local03, fp
0f8dc     14 4E 85 F1 | 	sub	fp, #20
0f8e0     00 2B 56 F2 | 	cmps	local03, #256 wc
0f8e4     94 FF 9F CD |  if_b	jmp	#LR__1331
0f8e8                 | LR__1332
0f8e8     18 4E 05 F1 | 	add	fp, #24
0f8ec     A7 2A 02 FB | 	rdlong	local03, fp
0f8f0     18 4E 85 F1 | 	sub	fp, #24
0f8f4     09 2A 66 F0 | 	shl	local03, #9
0f8f8     0C 00 00 FF 
0f8fc     D8 E4 05 F1 | 	add	objptr, ##6360
0f900     F2 2A 02 F1 | 	add	local03, objptr
0f904     FE 2B 06 F1 | 	add	local03, #510
0f908     15 01 58 FC | 	wrword	#0, local03
0f90c                 | '     envbuf(channel,255)=0
0f90c                 | '     return   
0f90c     0C 00 00 FF 
0f910     D8 E4 85 F1 | 	sub	objptr, ##6360
0f914     54 06 90 FD | 	jmp	#LR__1341
0f918                 | LR__1333
0f918                 | ' 
0f918                 | ' if numpar=5 then   						 'simple adsr
0f918     10 4E 05 F1 | 	add	fp, #16
0f91c     A7 28 02 FB | 	rdlong	local02, fp
0f920     10 4E 85 F1 | 	sub	fp, #16
0f924     05 28 0E F2 | 	cmp	local02, #5 wz
0f928     14 06 90 5D |  if_ne	jmp	#LR__1340
0f92c     E8 D0 BF FD | 	call	#_pop
0f930     FF 26 02 F6 | 	mov	local01, result3
0f934     40 4E 05 F1 | 	add	fp, #64
0f938     A7 FA 61 FC | 	wrlong	result1, fp
0f93c     04 4E 05 F1 | 	add	fp, #4
0f940     A7 FC 61 FC | 	wrlong	result2, fp
0f944     04 4E 05 F1 | 	add	fp, #4
0f948     A7 26 62 FC | 	wrlong	local01, fp
0f94c     08 4E 85 F1 | 	sub	fp, #8
0f950     A7 12 02 F6 | 	mov	arg01, fp
0f954     40 4E 85 F1 | 	sub	fp, #64
0f958     5C D3 BF FD | 	call	#_converttofloat
0f95c     FD 28 02 F6 | 	mov	local02, result1
0f960     2C 4E 05 F1 | 	add	fp, #44
0f964     A7 28 62 FC | 	wrlong	local02, fp
0f968     2C 4E 85 F1 | 	sub	fp, #44
0f96c     A8 D0 BF FD | 	call	#_pop
0f970     FF 26 02 F6 | 	mov	local01, result3
0f974     40 4E 05 F1 | 	add	fp, #64
0f978     A7 FA 61 FC | 	wrlong	result1, fp
0f97c     04 4E 05 F1 | 	add	fp, #4
0f980     A7 FC 61 FC | 	wrlong	result2, fp
0f984     04 4E 05 F1 | 	add	fp, #4
0f988     A7 26 62 FC | 	wrlong	local01, fp
0f98c     08 4E 85 F1 | 	sub	fp, #8
0f990     A7 12 02 F6 | 	mov	arg01, fp
0f994     40 4E 85 F1 | 	sub	fp, #64
0f998     1C D3 BF FD | 	call	#_converttofloat
0f99c     FD 28 02 F6 | 	mov	local02, result1
0f9a0     28 4E 05 F1 | 	add	fp, #40
0f9a4     A7 28 62 FC | 	wrlong	local02, fp
0f9a8     28 4E 85 F1 | 	sub	fp, #40
0f9ac     68 D0 BF FD | 	call	#_pop
0f9b0     FF 26 02 F6 | 	mov	local01, result3
0f9b4     40 4E 05 F1 | 	add	fp, #64
0f9b8     A7 FA 61 FC | 	wrlong	result1, fp
0f9bc     04 4E 05 F1 | 	add	fp, #4
0f9c0     A7 FC 61 FC | 	wrlong	result2, fp
0f9c4     04 4E 05 F1 | 	add	fp, #4
0f9c8     A7 26 62 FC | 	wrlong	local01, fp
0f9cc     08 4E 85 F1 | 	sub	fp, #8
0f9d0     A7 12 02 F6 | 	mov	arg01, fp
0f9d4     40 4E 85 F1 | 	sub	fp, #64
0f9d8     DC D2 BF FD | 	call	#_converttofloat
0f9dc     FD 28 02 F6 | 	mov	local02, result1
0f9e0     24 4E 05 F1 | 	add	fp, #36
0f9e4     A7 28 62 FC | 	wrlong	local02, fp
0f9e8     24 4E 85 F1 | 	sub	fp, #36
0f9ec     28 D0 BF FD | 	call	#_pop
0f9f0     FF 26 02 F6 | 	mov	local01, result3
0f9f4     40 4E 05 F1 | 	add	fp, #64
0f9f8     A7 FA 61 FC | 	wrlong	result1, fp
0f9fc     04 4E 05 F1 | 	add	fp, #4
0fa00     A7 FC 61 FC | 	wrlong	result2, fp
0fa04     04 4E 05 F1 | 	add	fp, #4
0fa08     A7 26 62 FC | 	wrlong	local01, fp
0fa0c     08 4E 85 F1 | 	sub	fp, #8
0fa10     A7 12 02 F6 | 	mov	arg01, fp
0fa14     40 4E 85 F1 | 	sub	fp, #64
0fa18     9C D2 BF FD | 	call	#_converttofloat
0fa1c     FD 28 02 F6 | 	mov	local02, result1
0fa20     20 4E 05 F1 | 	add	fp, #32
0fa24     A7 28 62 FC | 	wrlong	local02, fp
0fa28     20 4E 85 F1 | 	sub	fp, #32
0fa2c     E8 CF BF FD | 	call	#_pop
0fa30     FF 26 02 F6 | 	mov	local01, result3
0fa34     40 4E 05 F1 | 	add	fp, #64
0fa38     A7 FA 61 FC | 	wrlong	result1, fp
0fa3c     04 4E 05 F1 | 	add	fp, #4
0fa40     A7 FC 61 FC | 	wrlong	result2, fp
0fa44     04 4E 05 F1 | 	add	fp, #4
0fa48     A7 26 62 FC | 	wrlong	local01, fp
0fa4c     08 4E 85 F1 | 	sub	fp, #8
0fa50     A7 12 02 F6 | 	mov	arg01, fp
0fa54     40 4E 85 F1 | 	sub	fp, #64
0fa58     A0 D1 BF FD | 	call	#_converttoint
0fa5c     18 4E 05 F1 | 	add	fp, #24
0fa60     A7 FA 61 FC | 	wrlong	result1, fp
0fa64                 | '   t1=pop() : rr=converttofloat(t1)
0fa64                 | '   t1=pop() : ss=converttofloat(t1) 
0fa64                 | '   t1=pop() : dd=converttofloat(t1)
0fa64                 | '   t1=pop() : aa=converttofloat(t1)
0fa64                 | '   t1=pop() : channel=converttoint(t1)
0fa64                 | '   if ss<0.0 then ss=0.0 
0fa64     10 4E 05 F1 | 	add	fp, #16
0fa68     A7 12 02 FB | 	rdlong	arg01, fp
0fa6c     28 4E 85 F1 | 	sub	fp, #40
0fa70     00 14 06 F6 | 	mov	arg02, #0
0fa74     01 16 06 F6 | 	mov	arg03, #1
0fa78     44 75 B1 FD | 	call	#__system___float_cmp
0fa7c     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa80     28 4E 05 C1 |  if_b	add	fp, #40
0fa84     A7 00 68 CC |  if_b	wrlong	#0, fp
0fa88     28 4E 85 C1 |  if_b	sub	fp, #40
0fa8c                 | '   if ss>1.0 then ss=1.0
0fa8c     28 4E 05 F1 | 	add	fp, #40
0fa90     A7 12 02 FB | 	rdlong	arg01, fp
0fa94     28 4E 85 F1 | 	sub	fp, #40
0fa98     00 C0 1F FF 
0fa9c     00 14 06 F6 | 	mov	arg02, ##1065353216
0faa0     01 16 66 F6 | 	neg	arg03, #1
0faa4     18 75 B1 FD | 	call	#__system___float_cmp
0faa8     01 FA 55 F2 | 	cmps	result1, #1 wc
0faac     28 4E 05 31 |  if_ae	add	fp, #40
0fab0     00 C0 9F 3F 
0fab4     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fab8     28 4E 85 31 |  if_ae	sub	fp, #40
0fabc     20 4E 05 F1 | 	add	fp, #32
0fac0     A7 12 02 FB | 	rdlong	arg01, fp
0fac4     04 4E 05 F1 | 	add	fp, #4
0fac8     A7 14 02 FB | 	rdlong	arg02, fp
0facc     24 4E 85 F1 | 	sub	fp, #36
0fad0     E8 6C B1 FD | 	call	#__system___float_add
0fad4     FD 12 02 F6 | 	mov	arg01, result1
0fad8     2C 4E 05 F1 | 	add	fp, #44
0fadc     A7 14 02 FB | 	rdlong	arg02, fp
0fae0     2C 4E 85 F1 | 	sub	fp, #44
0fae4     D4 6C B1 FD | 	call	#__system___float_add
0fae8     30 4E 05 F1 | 	add	fp, #48
0faec     A7 FA 61 FC | 	wrlong	result1, fp
0faf0     FD 14 02 F6 | 	mov	arg02, result1
0faf4     30 4E 85 F1 | 	sub	fp, #48
0faf8     00 C0 21 FF 
0fafc     00 12 06 F6 | 	mov	arg01, ##1132462080
0fb00     8C 72 B1 FD | 	call	#__system___float_div
0fb04     34 4E 05 F1 | 	add	fp, #52
0fb08     A7 FA 61 FC | 	wrlong	result1, fp
0fb0c     14 4E 85 F1 | 	sub	fp, #20
0fb10     A7 12 02 FB | 	rdlong	arg01, fp
0fb14     FD 14 02 F6 | 	mov	arg02, result1
0fb18     20 4E 85 F1 | 	sub	fp, #32
0fb1c     6C 70 B1 FD | 	call	#__system___float_mul
0fb20     FD 12 02 F6 | 	mov	arg01, result1
0fb24     01 14 06 F6 | 	mov	arg02, #1
0fb28     28 75 B1 FD | 	call	#__system___float_tointeger
0fb2c     A7 FA 61 FC | 	wrlong	result1, fp
0fb30     24 4E 05 F1 | 	add	fp, #36
0fb34     A7 12 02 FB | 	rdlong	arg01, fp
0fb38     10 4E 05 F1 | 	add	fp, #16
0fb3c     A7 14 02 FB | 	rdlong	arg02, fp
0fb40     34 4E 85 F1 | 	sub	fp, #52
0fb44     44 70 B1 FD | 	call	#__system___float_mul
0fb48     FD 12 02 F6 | 	mov	arg01, result1
0fb4c     01 14 06 F6 | 	mov	arg02, #1
0fb50     00 75 B1 FD | 	call	#__system___float_tointeger
0fb54     04 4E 05 F1 | 	add	fp, #4
0fb58     A7 FA 61 FC | 	wrlong	result1, fp
0fb5c     28 4E 05 F1 | 	add	fp, #40
0fb60     A7 12 02 FB | 	rdlong	arg01, fp
0fb64     08 4E 05 F1 | 	add	fp, #8
0fb68     A7 14 02 FB | 	rdlong	arg02, fp
0fb6c     34 4E 85 F1 | 	sub	fp, #52
0fb70     18 70 B1 FD | 	call	#__system___float_mul
0fb74     FD 12 02 F6 | 	mov	arg01, result1
0fb78     01 14 06 F6 | 	mov	arg02, #1
0fb7c     D4 74 B1 FD | 	call	#__system___float_tointeger
0fb80     0C 4E 05 F1 | 	add	fp, #12
0fb84     A7 FA 61 FC | 	wrlong	result1, fp
0fb88     0C 4E 85 F1 | 	sub	fp, #12
0fb8c     F8 BF 23 FF 
0fb90     00 28 06 F6 | 	mov	local02, ##1199566848
0fb94     A7 12 02 FB | 	rdlong	arg01, fp
0fb98     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb9c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fba0     00 2C 06 36 |  if_ae	mov	local04, #0
0fba4     E0 6B B1 FD | 	call	#__system___float_fromuns
0fba8     16 FB 61 F5 | 	xor	result1, local04
0fbac     FD 14 02 F6 | 	mov	arg02, result1
0fbb0     14 13 02 F6 | 	mov	arg01, local02
0fbb4     D8 71 B1 FD | 	call	#__system___float_div
0fbb8     38 4E 05 F1 | 	add	fp, #56
0fbbc     A7 FA 61 FC | 	wrlong	result1, fp
0fbc0     F8 BF 23 FF 
0fbc4     00 28 06 F6 | 	mov	local02, ##1199566848
0fbc8     10 4E 85 F1 | 	sub	fp, #16
0fbcc     A7 14 02 FB | 	rdlong	arg02, fp
0fbd0     28 4E 85 F1 | 	sub	fp, #40
0fbd4     F8 BF 23 FF 
0fbd8     00 12 06 F6 | 	mov	arg01, ##1199566848
0fbdc     AC 6F B1 FD | 	call	#__system___float_mul
0fbe0     FD 14 02 F6 | 	mov	arg02, result1
0fbe4     14 13 02 F6 | 	mov	arg01, local02
0fbe8     1F 14 E6 F4 | 	bitnot	arg02, #31
0fbec     CC 6B B1 FD | 	call	#__system___float_add
0fbf0     FD 28 02 F6 | 	mov	local02, result1
0fbf4     04 4E 05 F1 | 	add	fp, #4
0fbf8     A7 12 02 FB | 	rdlong	arg01, fp
0fbfc     04 4E 85 F1 | 	sub	fp, #4
0fc00     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc04     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc08     00 2C 06 36 |  if_ae	mov	local04, #0
0fc0c     78 6B B1 FD | 	call	#__system___float_fromuns
0fc10     16 FB 61 F5 | 	xor	result1, local04
0fc14     FD 14 02 F6 | 	mov	arg02, result1
0fc18     14 13 02 F6 | 	mov	arg01, local02
0fc1c     70 71 B1 FD | 	call	#__system___float_div
0fc20     24 4E 05 F1 | 	add	fp, #36
0fc24     A7 FA 61 FC | 	wrlong	result1, fp
0fc28     04 4E 05 F1 | 	add	fp, #4
0fc2c     A7 14 02 FB | 	rdlong	arg02, fp
0fc30     28 4E 85 F1 | 	sub	fp, #40
0fc34     F8 BF 23 FF 
0fc38     00 12 06 F6 | 	mov	arg01, ##1199566848
0fc3c     4C 6F B1 FD | 	call	#__system___float_mul
0fc40     FD 28 02 F6 | 	mov	local02, result1
0fc44     0C 4E 05 F1 | 	add	fp, #12
0fc48     A7 12 02 FB | 	rdlong	arg01, fp
0fc4c     0C 4E 85 F1 | 	sub	fp, #12
0fc50     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc54     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc58     00 2C 06 36 |  if_ae	mov	local04, #0
0fc5c     28 6B B1 FD | 	call	#__system___float_fromuns
0fc60     16 FB 61 F5 | 	xor	result1, local04
0fc64     FD 14 02 F6 | 	mov	arg02, result1
0fc68     14 13 02 F6 | 	mov	arg01, local02
0fc6c     20 71 B1 FD | 	call	#__system___float_div
0fc70     3C 4E 05 F1 | 	add	fp, #60
0fc74     A7 FA 61 FC | 	wrlong	result1, fp
0fc78     24 4E 85 F1 | 	sub	fp, #36
0fc7c     A7 2E 02 FB | 	rdlong	local05, fp
0fc80     18 4E 85 F1 | 	sub	fp, #24
0fc84     01 2E 66 F0 | 	shl	local05, #1
0fc88     51 00 00 FF 
0fc8c     C8 E5 05 F1 | 	add	objptr, ##41928
0fc90     F2 2E 02 F1 | 	add	local05, objptr
0fc94     A7 30 02 FB | 	rdlong	local06, fp
0fc98     04 4E 05 F1 | 	add	fp, #4
0fc9c     A7 2A 02 FB | 	rdlong	local03, fp
0fca0     15 31 02 F1 | 	add	local06, local03
0fca4     17 31 52 FC | 	wrword	local06, local05
0fca8     1C 4E 05 F1 | 	add	fp, #28
0fcac     A7 00 68 FC | 	wrlong	#0, fp
0fcb0                 | '   fulltime=aa+dd+rr
0fcb0                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fcb0                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fcb0                 | '   suspoints(channel)=a+d
0fcb0                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fcb0     0C 4E 85 F1 | 	sub	fp, #12
0fcb4     A7 00 68 FC | 	wrlong	#0, fp
0fcb8     14 4E 85 F1 | 	sub	fp, #20
0fcbc     A7 32 02 FB | 	rdlong	local07, fp
0fcc0     51 00 00 FF 
0fcc4     C8 E5 85 F1 | 	sub	objptr, ##41928
0fcc8                 | LR__1334
0fcc8     14 4E 05 F1 | 	add	fp, #20
0fccc     A7 28 02 FB | 	rdlong	local02, fp
0fcd0     14 4E 85 F1 | 	sub	fp, #20
0fcd4     19 29 52 F2 | 	cmps	local02, local07 wc
0fcd8     80 00 90 3D |  if_ae	jmp	#LR__1335
0fcdc     18 4E 05 F1 | 	add	fp, #24
0fce0     A7 30 02 FB | 	rdlong	local06, fp
0fce4     09 30 66 F0 | 	shl	local06, #9
0fce8     0C 00 00 FF 
0fcec     D8 E4 05 F1 | 	add	objptr, ##6360
0fcf0     F2 30 02 F1 | 	add	local06, objptr
0fcf4     04 4E 85 F1 | 	sub	fp, #4
0fcf8     A7 2E 02 FB | 	rdlong	local05, fp
0fcfc     01 2E 66 F0 | 	shl	local05, #1
0fd00     18 2F 02 F1 | 	add	local05, local06
0fd04     0C 4E 05 F1 | 	add	fp, #12
0fd08     A7 12 02 FB | 	rdlong	arg01, fp
0fd0c     20 4E 85 F1 | 	sub	fp, #32
0fd10     0C 00 00 FF 
0fd14     D8 E4 85 F1 | 	sub	objptr, ##6360
0fd18     01 14 06 F6 | 	mov	arg02, #1
0fd1c     34 73 B1 FD | 	call	#__system___float_tointeger
0fd20     17 FB 51 FC | 	wrword	result1, local05
0fd24     20 4E 05 F1 | 	add	fp, #32
0fd28     A7 12 02 FB | 	rdlong	arg01, fp
0fd2c     18 4E 05 F1 | 	add	fp, #24
0fd30     A7 14 02 FB | 	rdlong	arg02, fp
0fd34     38 4E 85 F1 | 	sub	fp, #56
0fd38     80 6A B1 FD | 	call	#__system___float_add
0fd3c     20 4E 05 F1 | 	add	fp, #32
0fd40     A7 FA 61 FC | 	wrlong	result1, fp
0fd44     0C 4E 85 F1 | 	sub	fp, #12
0fd48     A7 30 02 FB | 	rdlong	local06, fp
0fd4c     01 30 06 F1 | 	add	local06, #1
0fd50     A7 30 62 FC | 	wrlong	local06, fp
0fd54     14 4E 85 F1 | 	sub	fp, #20
0fd58     6C FF 9F FD | 	jmp	#LR__1334
0fd5c                 | LR__1335
0fd5c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fd5c     A7 28 02 FB | 	rdlong	local02, fp
0fd60     14 4E 05 F1 | 	add	fp, #20
0fd64     A7 28 62 FC | 	wrlong	local02, fp
0fd68     14 4E 85 F1 | 	sub	fp, #20
0fd6c     A7 34 02 FB | 	rdlong	local08, fp
0fd70     04 4E 05 F1 | 	add	fp, #4
0fd74     A7 28 02 FB | 	rdlong	local02, fp
0fd78     04 4E 85 F1 | 	sub	fp, #4
0fd7c     14 35 02 F1 | 	add	local08, local02
0fd80                 | LR__1336
0fd80     14 4E 05 F1 | 	add	fp, #20
0fd84     A7 28 02 FB | 	rdlong	local02, fp
0fd88     14 4E 85 F1 | 	sub	fp, #20
0fd8c     1A 29 52 F2 | 	cmps	local02, local08 wc
0fd90     A8 00 90 3D |  if_ae	jmp	#LR__1337
0fd94     18 4E 05 F1 | 	add	fp, #24
0fd98     A7 32 02 FB | 	rdlong	local07, fp
0fd9c     09 32 66 F0 | 	shl	local07, #9
0fda0     0C 00 00 FF 
0fda4     D8 E4 05 F1 | 	add	objptr, ##6360
0fda8     F2 32 02 F1 | 	add	local07, objptr
0fdac     04 4E 85 F1 | 	sub	fp, #4
0fdb0     A7 30 02 FB | 	rdlong	local06, fp
0fdb4     01 30 66 F0 | 	shl	local06, #1
0fdb8     19 31 02 F1 | 	add	local06, local07
0fdbc     0C 4E 05 F1 | 	add	fp, #12
0fdc0     A7 12 02 FB | 	rdlong	arg01, fp
0fdc4     20 4E 85 F1 | 	sub	fp, #32
0fdc8     0C 00 00 FF 
0fdcc     D8 E4 85 F1 | 	sub	objptr, ##6360
0fdd0     01 14 06 F6 | 	mov	arg02, #1
0fdd4     7C 72 B1 FD | 	call	#__system___float_tointeger
0fdd8     18 FB 51 FC | 	wrword	result1, local06
0fddc     20 4E 05 F1 | 	add	fp, #32
0fde0     A7 12 02 FB | 	rdlong	arg01, fp
0fde4     04 4E 05 F1 | 	add	fp, #4
0fde8     A7 14 02 FB | 	rdlong	arg02, fp
0fdec     24 4E 85 F1 | 	sub	fp, #36
0fdf0     1F 14 E6 F4 | 	bitnot	arg02, #31
0fdf4     C4 69 B1 FD | 	call	#__system___float_add
0fdf8     20 4E 05 F1 | 	add	fp, #32
0fdfc     A7 FA 61 FC | 	wrlong	result1, fp
0fe00     20 4E 85 F1 | 	sub	fp, #32
0fe04     FD 12 02 F6 | 	mov	arg01, result1
0fe08     00 14 06 F6 | 	mov	arg02, #0
0fe0c     01 16 06 F6 | 	mov	arg03, #1
0fe10     AC 71 B1 FD | 	call	#__system___float_cmp
0fe14     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe18     20 4E 05 C1 |  if_b	add	fp, #32
0fe1c     A7 00 68 CC |  if_b	wrlong	#0, fp
0fe20     20 4E 85 C1 |  if_b	sub	fp, #32
0fe24     14 4E 05 F1 | 	add	fp, #20
0fe28     A7 32 02 FB | 	rdlong	local07, fp
0fe2c     01 32 06 F1 | 	add	local07, #1
0fe30     A7 32 62 FC | 	wrlong	local07, fp
0fe34     14 4E 85 F1 | 	sub	fp, #20
0fe38     44 FF 9F FD | 	jmp	#LR__1336
0fe3c                 | LR__1337
0fe3c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0fe3c     A7 28 02 FB | 	rdlong	local02, fp
0fe40     04 4E 05 F1 | 	add	fp, #4
0fe44     A7 34 02 FB | 	rdlong	local08, fp
0fe48     1A 29 02 F1 | 	add	local02, local08
0fe4c     10 4E 05 F1 | 	add	fp, #16
0fe50     A7 28 62 FC | 	wrlong	local02, fp
0fe54     14 4E 85 F1 | 	sub	fp, #20
0fe58                 | LR__1338
0fe58     14 4E 05 F1 | 	add	fp, #20
0fe5c     A7 2E 02 FB | 	rdlong	local05, fp
0fe60     14 4E 85 F1 | 	sub	fp, #20
0fe64     00 2F 56 F2 | 	cmps	local05, #256 wc
0fe68     A8 00 90 3D |  if_ae	jmp	#LR__1339
0fe6c     18 4E 05 F1 | 	add	fp, #24
0fe70     A7 34 02 FB | 	rdlong	local08, fp
0fe74     09 34 66 F0 | 	shl	local08, #9
0fe78     0C 00 00 FF 
0fe7c     D8 E4 05 F1 | 	add	objptr, ##6360
0fe80     F2 34 02 F1 | 	add	local08, objptr
0fe84     04 4E 85 F1 | 	sub	fp, #4
0fe88     A7 32 02 FB | 	rdlong	local07, fp
0fe8c     01 32 66 F0 | 	shl	local07, #1
0fe90     1A 33 02 F1 | 	add	local07, local08
0fe94     0C 4E 05 F1 | 	add	fp, #12
0fe98     A7 12 02 FB | 	rdlong	arg01, fp
0fe9c     20 4E 85 F1 | 	sub	fp, #32
0fea0     0C 00 00 FF 
0fea4     D8 E4 85 F1 | 	sub	objptr, ##6360
0fea8     01 14 06 F6 | 	mov	arg02, #1
0feac     A4 71 B1 FD | 	call	#__system___float_tointeger
0feb0     19 FB 51 FC | 	wrword	result1, local07
0feb4     20 4E 05 F1 | 	add	fp, #32
0feb8     A7 12 02 FB | 	rdlong	arg01, fp
0febc     1C 4E 05 F1 | 	add	fp, #28
0fec0     A7 14 02 FB | 	rdlong	arg02, fp
0fec4     3C 4E 85 F1 | 	sub	fp, #60
0fec8     1F 14 E6 F4 | 	bitnot	arg02, #31
0fecc     EC 68 B1 FD | 	call	#__system___float_add
0fed0     20 4E 05 F1 | 	add	fp, #32
0fed4     A7 FA 61 FC | 	wrlong	result1, fp
0fed8     20 4E 85 F1 | 	sub	fp, #32
0fedc     FD 12 02 F6 | 	mov	arg01, result1
0fee0     00 14 06 F6 | 	mov	arg02, #0
0fee4     01 16 06 F6 | 	mov	arg03, #1
0fee8     D4 70 B1 FD | 	call	#__system___float_cmp
0feec     00 FA 55 F2 | 	cmps	result1, #0 wc
0fef0     20 4E 05 C1 |  if_b	add	fp, #32
0fef4     A7 00 68 CC |  if_b	wrlong	#0, fp
0fef8     20 4E 85 C1 |  if_b	sub	fp, #32
0fefc     14 4E 05 F1 | 	add	fp, #20
0ff00     A7 34 02 FB | 	rdlong	local08, fp
0ff04     01 34 06 F1 | 	add	local08, #1
0ff08     A7 34 62 FC | 	wrlong	local08, fp
0ff0c     14 4E 85 F1 | 	sub	fp, #20
0ff10     44 FF 9F FD | 	jmp	#LR__1338
0ff14                 | LR__1339
0ff14     18 4E 05 F1 | 	add	fp, #24
0ff18     A7 2E 02 FB | 	rdlong	local05, fp
0ff1c     18 4E 85 F1 | 	sub	fp, #24
0ff20     09 2E 66 F0 | 	shl	local05, #9
0ff24     0C 00 00 FF 
0ff28     D8 E4 05 F1 | 	add	objptr, ##6360
0ff2c     F2 2E 02 F1 | 	add	local05, objptr
0ff30     FE 2F 06 F1 | 	add	local05, #510
0ff34     17 01 58 FC | 	wrword	#0, local05
0ff38     0C 00 00 FF 
0ff3c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff40                 | LR__1340
0ff40     18 4E 05 F1 | 	add	fp, #24
0ff44     A7 2E 02 FB | 	rdlong	local05, fp
0ff48     18 4E 85 F1 | 	sub	fp, #24
0ff4c     09 2E 66 F0 | 	shl	local05, #9
0ff50     0C 00 00 FF 
0ff54     D8 E4 05 F1 | 	add	objptr, ##6360
0ff58     F2 2E 02 F1 | 	add	local05, objptr
0ff5c     FE 2F 06 F1 | 	add	local05, #510
0ff60     17 01 58 FC | 	wrword	#0, local05
0ff64     0C 00 00 FF 
0ff68     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff6c                 | LR__1341
0ff6c     A7 F0 03 F6 | 	mov	ptra, fp
0ff70     B2 00 A0 FD | 	call	#popregs_
0ff74                 | _do_defenv_ret
0ff74     2D 00 64 FD | 	ret
0ff78                 | 
0ff78                 | ' 
0ff78                 | ' '-------------------- defsnd
0ff78                 | ' 
0ff78                 | ' sub do_defsnd
0ff78                 | _do_defsnd
0ff78     04 4A 05 F6 | 	mov	COUNT_, #4
0ff7c     A8 00 A0 FD | 	call	#pushregs_
0ff80     88 F0 07 F1 | 	add	ptra, #136
0ff84     4A 00 00 FF 
0ff88     80 E4 05 F1 | 	add	objptr, ##38016
0ff8c     F2 1A 02 FB | 	rdlong	arg05, objptr
0ff90     0D 19 02 F6 | 	mov	arg04, arg05
0ff94     01 18 66 F0 | 	shl	arg04, #1
0ff98     0D 19 02 F1 | 	add	arg04, arg05
0ff9c     02 18 66 F0 | 	shl	arg04, #2
0ffa0     03 00 00 FF 
0ffa4     04 E4 85 F1 | 	sub	objptr, ##1540
0ffa8     F2 18 02 F1 | 	add	arg04, objptr
0ffac     0C 1B 02 FB | 	rdlong	arg05, arg04
0ffb0     A7 1A 62 FC | 	wrlong	arg05, fp
0ffb4                 | ' 
0ffb4                 | ' numpar=compiledline(lineptr_e).result.uresult
0ffb4                 | ' 
0ffb4                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ffb4                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ffb4                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ffb4                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ffb4                 | ' 
0ffb4                 | ' if numpar<2 then return
0ffb4     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ffb8     47 00 00 FF 
0ffbc     7C E4 85 F1 | 	sub	objptr, ##36476
0ffc0     94 08 90 CD |  if_b	jmp	#LR__1373
0ffc4                 | '  
0ffc4                 | ' if numpar=2 then
0ffc4     A7 1A 02 FB | 	rdlong	arg05, fp
0ffc8     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ffcc     A0 03 90 5D |  if_ne	jmp	#LR__1360
0ffd0     44 CA BF FD | 	call	#_pop
0ffd4     FF 1A 02 F6 | 	mov	arg05, result3
0ffd8     2C 4E 05 F1 | 	add	fp, #44
0ffdc     A7 FA 61 FC | 	wrlong	result1, fp
0ffe0     04 4E 05 F1 | 	add	fp, #4
0ffe4     A7 FC 61 FC | 	wrlong	result2, fp
0ffe8     04 4E 05 F1 | 	add	fp, #4
0ffec     A7 1A 62 FC | 	wrlong	arg05, fp
0fff0                 | '   t1=pop()
0fff0                 | '   if t1.result_type=result_string2 then 
0fff0     34 4E 85 F1 | 	sub	fp, #52
0fff4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0fff8     20 00 90 5D |  if_ne	jmp	#LR__1350
0fffc     2C 4E 05 F1 | 	add	fp, #44
10000     A7 12 02 FB | 	rdlong	arg01, fp
10004     2C 4E 85 F1 | 	sub	fp, #44
10008     84 CB BF FD | 	call	#_convertstring
1000c     38 4E 05 F1 | 	add	fp, #56
10010     A7 FA 61 FC | 	wrlong	result1, fp
10014     38 4E 85 F1 | 	sub	fp, #56
10018     58 00 90 FD | 	jmp	#LR__1353
1001c                 | LR__1350
1001c     34 4E 05 F1 | 	add	fp, #52
10020     A7 1A 02 FB | 	rdlong	arg05, fp
10024     34 4E 85 F1 | 	sub	fp, #52
10028     1F 1A 0E F2 | 	cmp	arg05, #31 wz
1002c     18 00 90 5D |  if_ne	jmp	#LR__1351
10030     2C 4E 05 F1 | 	add	fp, #44
10034     A7 1A 02 FB | 	rdlong	arg05, fp
10038     0C 4E 05 F1 | 	add	fp, #12
1003c     A7 1A 62 FC | 	wrlong	arg05, fp
10040     38 4E 85 F1 | 	sub	fp, #56
10044     2C 00 90 FD | 	jmp	#LR__1352
10048                 | LR__1351
10048     A0 01 00 FF 
1004c     46 1A 06 F6 | 	mov	arg05, ##@LR__5711
10050     38 4E 05 F1 | 	add	fp, #56
10054     A7 1A 62 FC | 	wrlong	arg05, fp
10058     0C 4E 85 F1 | 	sub	fp, #12
1005c     A7 12 02 F6 | 	mov	arg01, fp
10060     2C 4E 85 F1 | 	sub	fp, #44
10064     94 CB BF FD | 	call	#_converttoint
10068     14 4E 05 F1 | 	add	fp, #20
1006c     A7 FA 61 FC | 	wrlong	result1, fp
10070     14 4E 85 F1 | 	sub	fp, #20
10074                 | LR__1352
10074                 | LR__1353
10074                 | '   if s<>"" then 
10074     38 4E 05 F1 | 	add	fp, #56
10078     A7 12 02 FB | 	rdlong	arg01, fp
1007c     38 4E 85 F1 | 	sub	fp, #56
10080     A0 01 00 FF 
10084     47 14 06 F6 | 	mov	arg02, ##@LR__5712
10088     B0 3C B1 FD | 	call	#__system___string_cmp
1008c     00 FA 0D F2 | 	cmp	result1, #0 wz
10090     E0 01 90 AD |  if_e	jmp	#LR__1356
10094     80 C9 BF FD | 	call	#_pop
10098     FF 1A 02 F6 | 	mov	arg05, result3
1009c     2C 4E 05 F1 | 	add	fp, #44
100a0     A7 FA 61 FC | 	wrlong	result1, fp
100a4     04 4E 05 F1 | 	add	fp, #4
100a8     A7 FC 61 FC | 	wrlong	result2, fp
100ac     04 4E 05 F1 | 	add	fp, #4
100b0     A7 1A 62 FC | 	wrlong	arg05, fp
100b4     08 4E 85 F1 | 	sub	fp, #8
100b8     A7 12 02 F6 | 	mov	arg01, fp
100bc     2C 4E 85 F1 | 	sub	fp, #44
100c0     38 CB BF FD | 	call	#_converttoint
100c4     10 4E 05 F1 | 	add	fp, #16
100c8     A7 FA 61 FC | 	wrlong	result1, fp
100cc                 | '     t1=pop()
100cc                 | '     channel=converttoint(t1) : if channel>31 then return
100cc     FD 1A 02 F6 | 	mov	arg05, result1
100d0     10 4E 85 F1 | 	sub	fp, #16
100d4     20 1A 56 F2 | 	cmps	arg05, #32 wc
100d8     7C 07 90 3D |  if_ae	jmp	#LR__1373
100dc                 | '     close #9 : open "/sd/media/s/"+s for input as #9
100dc     09 12 06 F6 | 	mov	arg01, #9
100e0     88 8F B1 FD | 	call	#__system__close
100e4     09 26 06 F6 | 	mov	local01, #9
100e8     A0 01 00 FF 
100ec     48 12 06 F6 | 	mov	arg01, ##@LR__5713
100f0     38 4E 05 F1 | 	add	fp, #56
100f4     A7 14 02 FB | 	rdlong	arg02, fp
100f8     38 4E 85 F1 | 	sub	fp, #56
100fc     70 3C B1 FD | 	call	#__system___string_concat
10100     FD 14 02 F6 | 	mov	arg02, result1
10104     13 13 02 F6 | 	mov	arg01, local01
10108     00 16 06 F6 | 	mov	arg03, #0
1010c     08 48 B1 FD | 	call	#__system___basic_open_string
10110     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10114     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10118     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1011c     52 00 00 FF 
10120     20 E4 05 F1 | 	add	objptr, ##42016
10124     F2 FA 61 FC | 	wrlong	result1, objptr
10128                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10128     52 00 00 FF 
1012c     20 E4 85 F1 | 	sub	objptr, ##42016
10130     B0 00 90 AD |  if_e	jmp	#LR__1354
10134     00 12 06 F6 | 	mov	arg01, #0
10138     00 99 B1 FD | 	call	#__system___getiolock_0573
1013c     FD 12 02 F6 | 	mov	arg01, result1
10140     D0 3B B1 FD | 	call	#__system___lockmem
10144     A0 01 00 FF 
10148     55 14 06 F6 | 	mov	arg02, ##@LR__5714
1014c     00 12 06 F6 | 	mov	arg01, #0
10150     00 16 06 F6 | 	mov	arg03, #0
10154     B0 48 B1 FD | 	call	#__system___basic_print_string
10158     52 00 00 FF 
1015c     20 E4 05 F1 | 	add	objptr, ##42016
10160     F2 14 02 FB | 	rdlong	arg02, objptr
10164     52 00 00 FF 
10168     20 E4 85 F1 | 	sub	objptr, ##42016
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     00 16 06 F6 | 	mov	arg03, #0
10174     0A 18 06 F6 | 	mov	arg04, #10
10178     D0 48 B1 FD | 	call	#__system___basic_print_integer
1017c     A0 01 00 FF 
10180     63 14 06 F6 | 	mov	arg02, ##@LR__5715
10184     00 12 06 F6 | 	mov	arg01, #0
10188     00 16 06 F6 | 	mov	arg03, #0
1018c     78 48 B1 FD | 	call	#__system___basic_print_string
10190     00 26 06 F6 | 	mov	local01, #0
10194     52 00 00 FF 
10198     20 E4 05 F1 | 	add	objptr, ##42016
1019c     F2 12 02 FB | 	rdlong	arg01, objptr
101a0     52 00 00 FF 
101a4     20 E4 85 F1 | 	sub	objptr, ##42016
101a8     F4 64 B1 FD | 	call	#__system___strerror
101ac     FD 14 02 F6 | 	mov	arg02, result1
101b0     13 13 02 F6 | 	mov	arg01, local01
101b4     00 16 06 F6 | 	mov	arg03, #0
101b8     4C 48 B1 FD | 	call	#__system___basic_print_string
101bc     00 12 06 F6 | 	mov	arg01, #0
101c0     0A 14 06 F6 | 	mov	arg02, #10
101c4     00 16 06 F6 | 	mov	arg03, #0
101c8     E4 47 B1 FD | 	call	#__system___basic_print_char
101cc     00 12 06 F6 | 	mov	arg01, #0
101d0     68 98 B1 FD | 	call	#__system___getiolock_0573
101d4     FD 00 68 FC | 	wrlong	#0, result1
101d8     09 12 06 F6 | 	mov	arg01, #9
101dc     8C 8E B1 FD | 	call	#__system__close
101e0     74 06 90 FD | 	jmp	#LR__1373
101e4                 | LR__1354
101e4                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
101e4     04 4E 05 F1 | 	add	fp, #4
101e8     A7 00 68 FC | 	wrlong	#0, fp
101ec                 | LR__1355
101ec     A7 26 02 FB | 	rdlong	local01, fp
101f0     01 26 66 F0 | 	shl	local01, #1
101f4     11 14 06 F6 | 	mov	arg02, #17
101f8     13 15 02 F1 | 	add	arg02, local01
101fc     78 4E 05 F1 | 	add	fp, #120
10200     A7 16 02 F6 | 	mov	arg03, fp
10204     7C 4E 85 F1 | 	sub	fp, #124
10208     09 12 06 F6 | 	mov	arg01, #9
1020c     01 18 06 F6 | 	mov	arg04, #1
10210     02 1A 06 F6 | 	mov	arg05, #2
10214     6C 49 B1 FD | 	call	#__system___basic_get
10218     10 4E 05 F1 | 	add	fp, #16
1021c     A7 12 02 FB | 	rdlong	arg01, fp
10220     0B 12 66 F0 | 	shl	arg01, #11
10224     0C 4E 85 F1 | 	sub	fp, #12
10228     A7 26 02 FB | 	rdlong	local01, fp
1022c     01 26 66 F0 | 	shl	local01, #1
10230     13 13 02 F1 | 	add	arg01, local01
10234     78 4E 05 F1 | 	add	fp, #120
10238     A7 14 E2 FA | 	rdword	arg02, fp
1023c     7C 4E 85 F1 | 	sub	fp, #124
10240     0F 14 66 F7 | 	signx	arg02, #15
10244     10 03 B1 FD | 	call	#_psdpoke
10248     04 4E 05 F1 | 	add	fp, #4
1024c     A7 26 02 FB | 	rdlong	local01, fp
10250     01 26 06 F1 | 	add	local01, #1
10254     A7 26 62 FC | 	wrlong	local01, fp
10258     02 00 00 FF 
1025c     01 26 56 F2 | 	cmps	local01, ##1025 wc
10260     88 FF 9F CD |  if_b	jmp	#LR__1355
10264     04 4E 85 F1 | 	sub	fp, #4
10268                 | '     close #9
10268     09 12 06 F6 | 	mov	arg01, #9
1026c     FC 8D B1 FD | 	call	#__system__close
10270                 | '     return
10270     E4 05 90 FD | 	jmp	#LR__1373
10274                 | LR__1356
10274                 | '     if wptr < ($80000 - 2048) then 
10274     14 4E 05 F1 | 	add	fp, #20
10278     A7 26 02 FB | 	rdlong	local01, fp
1027c     14 4E 85 F1 | 	sub	fp, #20
10280     FC 03 00 FF 
10284     00 26 56 F2 | 	cmps	local01, ##522240 wc
10288     70 00 90 3D |  if_ae	jmp	#LR__1358
1028c                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
1028c     04 4E 05 F1 | 	add	fp, #4
10290     A7 00 68 FC | 	wrlong	#0, fp
10294     04 4E 85 F1 | 	sub	fp, #4
10298                 | LR__1357
10298     10 4E 05 F1 | 	add	fp, #16
1029c     A7 26 02 FB | 	rdlong	local01, fp
102a0     0B 26 66 F0 | 	shl	local01, #11
102a4     0C 4E 85 F1 | 	sub	fp, #12
102a8     A7 1A 02 FB | 	rdlong	arg05, fp
102ac     0D 19 02 F6 | 	mov	arg04, arg05
102b0     01 18 66 F0 | 	shl	arg04, #1
102b4     0C 27 02 F1 | 	add	local01, arg04
102b8     10 4E 05 F1 | 	add	fp, #16
102bc     A7 12 02 FB | 	rdlong	arg01, fp
102c0     14 4E 85 F1 | 	sub	fp, #20
102c4     01 1A 66 F0 | 	shl	arg05, #1
102c8     0D 13 02 F1 | 	add	arg01, arg05
102cc     09 15 E2 FA | 	rdword	arg02, arg01
102d0     13 13 02 F6 | 	mov	arg01, local01
102d4     80 02 B1 FD | 	call	#_psdpoke
102d8     04 4E 05 F1 | 	add	fp, #4
102dc     A7 26 02 FB | 	rdlong	local01, fp
102e0     01 26 06 F1 | 	add	local01, #1
102e4     A7 26 62 FC | 	wrlong	local01, fp
102e8     04 4E 85 F1 | 	sub	fp, #4
102ec     02 00 00 FF 
102f0     00 26 56 F2 | 	cmps	local01, ##1024 wc
102f4     A0 FF 9F CD |  if_b	jmp	#LR__1357
102f8     5C 05 90 FD | 	jmp	#LR__1373
102fc                 | LR__1358
102fc                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
102fc     04 4E 05 F1 | 	add	fp, #4
10300     A7 00 68 FC | 	wrlong	#0, fp
10304     04 4E 85 F1 | 	sub	fp, #4
10308                 | LR__1359
10308     10 4E 05 F1 | 	add	fp, #16
1030c     A7 26 02 FB | 	rdlong	local01, fp
10310     0B 26 66 F0 | 	shl	local01, #11
10314     0C 4E 85 F1 | 	sub	fp, #12
10318     A7 1A 02 FB | 	rdlong	arg05, fp
1031c     0D 19 02 F6 | 	mov	arg04, arg05
10320     01 18 66 F0 | 	shl	arg04, #1
10324     0C 27 02 F1 | 	add	local01, arg04
10328     10 4E 05 F1 | 	add	fp, #16
1032c     A7 12 02 FB | 	rdlong	arg01, fp
10330     14 4E 85 F1 | 	sub	fp, #20
10334     01 1A 66 F0 | 	shl	arg05, #1
10338     0D 13 02 F1 | 	add	arg01, arg05
1033c     58 03 B1 FD | 	call	#_psdpeek
10340     FD 14 02 F6 | 	mov	arg02, result1
10344     13 13 02 F6 | 	mov	arg01, local01
10348     0C 02 B1 FD | 	call	#_psdpoke
1034c     04 4E 05 F1 | 	add	fp, #4
10350     A7 26 02 FB | 	rdlong	local01, fp
10354     01 26 06 F1 | 	add	local01, #1
10358     A7 26 62 FC | 	wrlong	local01, fp
1035c     04 4E 85 F1 | 	sub	fp, #4
10360     02 00 00 FF 
10364     00 26 56 F2 | 	cmps	local01, ##1024 wc
10368     9C FF 9F CD |  if_b	jmp	#LR__1359
1036c                 | '     return 
1036c     E8 04 90 FD | 	jmp	#LR__1373
10370                 | '   return
10370                 | LR__1360
10370                 | ' for i=0 to 15 : harm(i)=0: next i  
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 00 68 FC | 	wrlong	#0, fp
10378     97 16 48 FB | 	callpa	#(@LR__1362-@LR__1361)>>2,fcache_load_ptr_
1037c                 | LR__1361
1037c     A7 26 02 FB | 	rdlong	local01, fp
10380     02 26 66 F0 | 	shl	local01, #2
10384     38 4E 05 F1 | 	add	fp, #56
10388     A7 26 02 F1 | 	add	local01, fp
1038c     13 01 68 FC | 	wrlong	#0, local01
10390     38 4E 85 F1 | 	sub	fp, #56
10394     A7 26 02 FB | 	rdlong	local01, fp
10398     01 26 06 F1 | 	add	local01, #1
1039c     A7 26 62 FC | 	wrlong	local01, fp
103a0     10 26 56 F2 | 	cmps	local01, #16 wc
103a4     D4 FF 9F CD |  if_b	jmp	#LR__1361
103a8                 | LR__1362
103a8     04 4E 85 F1 | 	sub	fp, #4
103ac                 | ' for i=numpar to 2 step -1 
103ac     A7 26 02 FB | 	rdlong	local01, fp
103b0     04 4E 05 F1 | 	add	fp, #4
103b4     A7 26 62 FC | 	wrlong	local01, fp
103b8     04 4E 85 F1 | 	sub	fp, #4
103bc                 | LR__1363
103bc     58 C6 BF FD | 	call	#_pop
103c0     2C 4E 05 F1 | 	add	fp, #44
103c4     A7 FA 61 FC | 	wrlong	result1, fp
103c8     04 4E 05 F1 | 	add	fp, #4
103cc     A7 FC 61 FC | 	wrlong	result2, fp
103d0     04 4E 05 F1 | 	add	fp, #4
103d4     A7 FE 61 FC | 	wrlong	result3, fp
103d8     30 4E 85 F1 | 	sub	fp, #48
103dc     A7 26 02 FB | 	rdlong	local01, fp
103e0     02 26 86 F1 | 	sub	local01, #2
103e4     02 26 66 F0 | 	shl	local01, #2
103e8     38 4E 05 F1 | 	add	fp, #56
103ec     A7 26 02 F1 | 	add	local01, fp
103f0     10 4E 85 F1 | 	sub	fp, #16
103f4     A7 12 02 F6 | 	mov	arg01, fp
103f8     2C 4E 85 F1 | 	sub	fp, #44
103fc     B8 C8 BF FD | 	call	#_converttofloat
10400     13 FB 61 FC | 	wrlong	result1, local01
10404     04 4E 05 F1 | 	add	fp, #4
10408     A7 26 02 FB | 	rdlong	local01, fp
1040c     01 26 86 F1 | 	sub	local01, #1
10410     A7 26 62 FC | 	wrlong	local01, fp
10414     04 4E 85 F1 | 	sub	fp, #4
10418     02 26 56 F2 | 	cmps	local01, #2 wc
1041c     9C FF 9F 3D |  if_ae	jmp	#LR__1363
10420     F4 C5 BF FD | 	call	#_pop
10424     FF 26 02 F6 | 	mov	local01, result3
10428     2C 4E 05 F1 | 	add	fp, #44
1042c     A7 FA 61 FC | 	wrlong	result1, fp
10430     04 4E 05 F1 | 	add	fp, #4
10434     A7 FC 61 FC | 	wrlong	result2, fp
10438     04 4E 05 F1 | 	add	fp, #4
1043c     A7 26 62 FC | 	wrlong	local01, fp
10440     08 4E 85 F1 | 	sub	fp, #8
10444     A7 12 02 F6 | 	mov	arg01, fp
10448     2C 4E 85 F1 | 	sub	fp, #44
1044c     AC C7 BF FD | 	call	#_converttoint
10450     10 4E 05 F1 | 	add	fp, #16
10454     A7 FA 61 FC | 	wrlong	result1, fp
10458                 | ' t1=pop()
10458                 | ' channel=converttoint(t1) : : if channel>31 then return
10458     FD 26 02 F6 | 	mov	local01, result1
1045c     10 4E 85 F1 | 	sub	fp, #16
10460     20 26 56 F2 | 	cmps	local01, #32 wc
10464     F0 03 90 3D |  if_ae	jmp	#LR__1373
10468     20 4E 05 F1 | 	add	fp, #32
1046c     A7 00 68 FC | 	wrlong	#0, fp
10470                 | ' max=0
10470                 | ' if harm(0)<0 then
10470     1C 4E 05 F1 | 	add	fp, #28
10474     A7 12 02 FB | 	rdlong	arg01, fp
10478     3C 4E 85 F1 | 	sub	fp, #60
1047c     00 14 06 F6 | 	mov	arg02, #0
10480     01 16 06 F6 | 	mov	arg03, #1
10484     38 6B B1 FD | 	call	#__system___float_cmp
10488     00 FA 55 F2 | 	cmps	result1, #0 wc
1048c     04 01 90 3D |  if_ae	jmp	#LR__1366
10490     3C 4E 05 F1 | 	add	fp, #60
10494     A7 FA 01 FB | 	rdlong	result1, fp
10498     1F FA 05 F4 | 	bitl	result1, #31
1049c     24 4E 85 F1 | 	sub	fp, #36
104a0     A7 FA 61 FC | 	wrlong	result1, fp
104a4     28 4E 05 F1 | 	add	fp, #40
104a8     A7 FA 01 FB | 	rdlong	result1, fp
104ac     1F FA 05 F4 | 	bitl	result1, #31
104b0     24 4E 85 F1 | 	sub	fp, #36
104b4     A7 FA 61 FC | 	wrlong	result1, fp
104b8     20 4E 05 F1 | 	add	fp, #32
104bc     00 C0 9F FF 
104c0     A7 00 68 FC | 	wrlong	##1065353216, fp
104c4     24 4E 85 F1 | 	sub	fp, #36
104c8     A7 26 02 FB | 	rdlong	local01, fp
104cc     28 4E 05 F1 | 	add	fp, #40
104d0     A7 26 62 FC | 	wrlong	local01, fp
104d4     24 4E 85 F1 | 	sub	fp, #36
104d8     A7 26 02 FB | 	rdlong	local01, fp
104dc     28 4E 05 F1 | 	add	fp, #40
104e0     A7 26 62 FC | 	wrlong	local01, fp
104e4                 | '   harm(0)=1
104e4                 | '   harm(1)=even
104e4                 | '   harm(2)=odd
104e4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
104e4     40 4E 85 F1 | 	sub	fp, #64
104e8     A7 06 68 FC | 	wrlong	#3, fp
104ec                 | LR__1364
104ec     A7 1A 02 FB | 	rdlong	arg05, fp
104f0     0D 29 02 F6 | 	mov	local02, arg05
104f4     02 28 66 F0 | 	shl	local02, #2
104f8     38 4E 05 F1 | 	add	fp, #56
104fc     A7 28 02 F1 | 	add	local02, fp
10500     02 1A 86 F1 | 	sub	arg05, #2
10504     02 1A 66 F0 | 	shl	arg05, #2
10508     A7 1A 02 F1 | 	add	arg05, fp
1050c     0D 13 02 FB | 	rdlong	arg01, arg05
10510     24 4E 85 F1 | 	sub	fp, #36
10514     A7 14 02 FB | 	rdlong	arg02, fp
10518     18 4E 85 F1 | 	sub	fp, #24
1051c     6C 66 B1 FD | 	call	#__system___float_mul
10520     14 FB 61 FC | 	wrlong	result1, local02
10524     04 4E 05 F1 | 	add	fp, #4
10528     A7 2A 02 FB | 	rdlong	local03, fp
1052c     02 2A 06 F1 | 	add	local03, #2
10530     A7 2A 62 FC | 	wrlong	local03, fp
10534     10 2A 56 F2 | 	cmps	local03, #16 wc
10538     B0 FF 9F CD |  if_b	jmp	#LR__1364
1053c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
1053c     A7 08 68 FC | 	wrlong	#4, fp
10540                 | LR__1365
10540     A7 2A 02 FB | 	rdlong	local03, fp
10544     15 29 02 F6 | 	mov	local02, local03
10548     02 28 66 F0 | 	shl	local02, #2
1054c     38 4E 05 F1 | 	add	fp, #56
10550     A7 28 02 F1 | 	add	local02, fp
10554     02 2A 86 F1 | 	sub	local03, #2
10558     02 2A 66 F0 | 	shl	local03, #2
1055c     A7 2A 02 F1 | 	add	local03, fp
10560     15 13 02 FB | 	rdlong	arg01, local03
10564     20 4E 85 F1 | 	sub	fp, #32
10568     A7 14 02 FB | 	rdlong	arg02, fp
1056c     1C 4E 85 F1 | 	sub	fp, #28
10570     18 66 B1 FD | 	call	#__system___float_mul
10574     14 FB 61 FC | 	wrlong	result1, local02
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 2A 02 FB | 	rdlong	local03, fp
10580     02 2A 06 F1 | 	add	local03, #2
10584     A7 2A 62 FC | 	wrlong	local03, fp
10588     0F 2A 56 F2 | 	cmps	local03, #15 wc
1058c     B0 FF 9F CD |  if_b	jmp	#LR__1365
10590     04 4E 85 F1 | 	sub	fp, #4
10594                 | LR__1366
10594                 | ' if harm(0)>=0 then ' synthesize with harmonics
10594     3C 4E 05 F1 | 	add	fp, #60
10598     A7 12 02 FB | 	rdlong	arg01, fp
1059c     3C 4E 85 F1 | 	sub	fp, #60
105a0     00 14 06 F6 | 	mov	arg02, #0
105a4     01 16 66 F6 | 	neg	arg03, #1
105a8     14 6A B1 FD | 	call	#__system___float_cmp
105ac     00 FA 55 F2 | 	cmps	result1, #0 wc
105b0     A4 02 90 CD |  if_b	jmp	#LR__1372
105b4                 | '   for i=0 to 1023
105b4     04 4E 05 F1 | 	add	fp, #4
105b8     A7 00 68 FC | 	wrlong	#0, fp
105bc     04 4E 85 F1 | 	sub	fp, #4
105c0                 | LR__1367
105c0     24 4E 05 F1 | 	add	fp, #36
105c4     A7 00 68 FC | 	wrlong	#0, fp
105c8                 | '     spl=0
105c8                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
105c8     1C 4E 85 F1 | 	sub	fp, #28
105cc     A7 00 68 FC | 	wrlong	#0, fp
105d0                 | LR__1368
105d0     A7 28 02 FB | 	rdlong	local02, fp
105d4     02 28 66 F0 | 	shl	local02, #2
105d8     34 4E 05 F1 | 	add	fp, #52
105dc     A7 28 02 F1 | 	add	local02, fp
105e0     14 2B 02 FB | 	rdlong	local03, local02
105e4     87 E4 1D FF 
105e8     DB 29 06 F6 | 	mov	local02, ##1003032539
105ec     38 4E 85 F1 | 	sub	fp, #56
105f0     A7 12 02 FB | 	rdlong	arg01, fp
105f4     04 4E 85 F1 | 	sub	fp, #4
105f8     09 13 52 F6 | 	abs	arg01, arg01 wc
105fc     1F 2C C6 C9 |  if_b	decod	local04, #31
10600     00 2C 06 36 |  if_ae	mov	local04, #0
10604     80 61 B1 FD | 	call	#__system___float_fromuns
10608     16 FB 61 F5 | 	xor	result1, local04
1060c     FD 14 02 F6 | 	mov	arg02, result1
10610     14 13 02 F6 | 	mov	arg01, local02
10614     74 65 B1 FD | 	call	#__system___float_mul
10618     FD 28 02 F6 | 	mov	local02, result1
1061c     08 4E 05 F1 | 	add	fp, #8
10620     A7 12 02 FB | 	rdlong	arg01, fp
10624     08 4E 85 F1 | 	sub	fp, #8
10628     01 12 06 F1 | 	add	arg01, #1
1062c     09 13 52 F6 | 	abs	arg01, arg01 wc
10630     1F 2C C6 C9 |  if_b	decod	local04, #31
10634     00 2C 06 36 |  if_ae	mov	local04, #0
10638     4C 61 B1 FD | 	call	#__system___float_fromuns
1063c     16 FB 61 F5 | 	xor	result1, local04
10640     FD 14 02 F6 | 	mov	arg02, result1
10644     14 13 02 F6 | 	mov	arg01, local02
10648     40 65 B1 FD | 	call	#__system___float_mul
1064c     FD 12 02 F6 | 	mov	arg01, result1
10650     98 6E B1 FD | 	call	#__system____builtin_sinf
10654     FD 14 02 F6 | 	mov	arg02, result1
10658     15 13 02 F6 | 	mov	arg01, local03
1065c     2C 65 B1 FD | 	call	#__system___float_mul
10660     FD 14 02 F6 | 	mov	arg02, result1
10664     24 4E 05 F1 | 	add	fp, #36
10668     A7 12 02 FB | 	rdlong	arg01, fp
1066c     24 4E 85 F1 | 	sub	fp, #36
10670     48 61 B1 FD | 	call	#__system___float_add
10674     24 4E 05 F1 | 	add	fp, #36
10678     A7 FA 61 FC | 	wrlong	result1, fp
1067c     1C 4E 85 F1 | 	sub	fp, #28
10680     A7 16 02 FB | 	rdlong	arg03, fp
10684     01 16 06 F1 | 	add	arg03, #1
10688     A7 16 62 FC | 	wrlong	arg03, fp
1068c     10 16 56 F2 | 	cmps	arg03, #16 wc
10690     3C FF 9F CD |  if_b	jmp	#LR__1368
10694                 | '     if abs(spl)>max then max=abs(spl)  
10694     1C 4E 05 F1 | 	add	fp, #28
10698     A7 12 02 FB | 	rdlong	arg01, fp
1069c     1F 12 06 F4 | 	bitl	arg01, #31
106a0     04 4E 85 F1 | 	sub	fp, #4
106a4     A7 14 02 FB | 	rdlong	arg02, fp
106a8     20 4E 85 F1 | 	sub	fp, #32
106ac     01 16 66 F6 | 	neg	arg03, #1
106b0     0C 69 B1 FD | 	call	#__system___float_cmp
106b4     01 FA 55 F2 | 	cmps	result1, #1 wc
106b8     18 00 90 CD |  if_b	jmp	#LR__1369
106bc     24 4E 05 F1 | 	add	fp, #36
106c0     A7 FA 01 FB | 	rdlong	result1, fp
106c4     1F FA 05 F4 | 	bitl	result1, #31
106c8     04 4E 85 F1 | 	sub	fp, #4
106cc     A7 FA 61 FC | 	wrlong	result1, fp
106d0     20 4E 85 F1 | 	sub	fp, #32
106d4                 | LR__1369
106d4     04 4E 05 F1 | 	add	fp, #4
106d8     A7 2A 02 FB | 	rdlong	local03, fp
106dc     01 2A 06 F1 | 	add	local03, #1
106e0     A7 2A 62 FC | 	wrlong	local03, fp
106e4     04 4E 85 F1 | 	sub	fp, #4
106e8     02 00 00 FF 
106ec     00 2A 56 F2 | 	cmps	local03, ##1024 wc
106f0     CC FE 9F CD |  if_b	jmp	#LR__1367
106f4                 | '   for i=0 to 1023
106f4     04 4E 05 F1 | 	add	fp, #4
106f8     A7 00 68 FC | 	wrlong	#0, fp
106fc     04 4E 85 F1 | 	sub	fp, #4
10700                 | LR__1370
10700     24 4E 05 F1 | 	add	fp, #36
10704     A7 00 68 FC | 	wrlong	#0, fp
10708                 | '     spl=0
10708                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10708     1C 4E 85 F1 | 	sub	fp, #28
1070c     A7 00 68 FC | 	wrlong	#0, fp
10710                 | LR__1371
10710     A7 2A 02 FB | 	rdlong	local03, fp
10714     02 2A 66 F0 | 	shl	local03, #2
10718     34 4E 05 F1 | 	add	fp, #52
1071c     A7 2A 02 F1 | 	add	local03, fp
10720     15 2B 02 FB | 	rdlong	local03, local03
10724     1C 4E 85 F1 | 	sub	fp, #28
10728     A7 14 02 FB | 	rdlong	arg02, fp
1072c     20 4E 85 F1 | 	sub	fp, #32
10730     58 7F 23 FF 
10734     00 12 06 F6 | 	mov	arg01, ##1191096320
10738     54 66 B1 FD | 	call	#__system___float_div
1073c     FD 14 02 F6 | 	mov	arg02, result1
10740     15 13 02 F6 | 	mov	arg01, local03
10744     44 64 B1 FD | 	call	#__system___float_mul
10748     FD 2A 02 F6 | 	mov	local03, result1
1074c     87 E4 1D FF 
10750     DB 29 06 F6 | 	mov	local02, ##1003032539
10754     04 4E 05 F1 | 	add	fp, #4
10758     A7 12 02 FB | 	rdlong	arg01, fp
1075c     04 4E 85 F1 | 	sub	fp, #4
10760     09 13 52 F6 | 	abs	arg01, arg01 wc
10764     1F 2C C6 C9 |  if_b	decod	local04, #31
10768     00 2C 06 36 |  if_ae	mov	local04, #0
1076c     18 60 B1 FD | 	call	#__system___float_fromuns
10770     16 FB 61 F5 | 	xor	result1, local04
10774     FD 14 02 F6 | 	mov	arg02, result1
10778     14 13 02 F6 | 	mov	arg01, local02
1077c     0C 64 B1 FD | 	call	#__system___float_mul
10780     FD 28 02 F6 | 	mov	local02, result1
10784     08 4E 05 F1 | 	add	fp, #8
10788     A7 12 02 FB | 	rdlong	arg01, fp
1078c     08 4E 85 F1 | 	sub	fp, #8
10790     01 12 06 F1 | 	add	arg01, #1
10794     09 13 52 F6 | 	abs	arg01, arg01 wc
10798     1F 2C C6 C9 |  if_b	decod	local04, #31
1079c     00 2C 06 36 |  if_ae	mov	local04, #0
107a0     E4 5F B1 FD | 	call	#__system___float_fromuns
107a4     16 FB 61 F5 | 	xor	result1, local04
107a8     FD 14 02 F6 | 	mov	arg02, result1
107ac     14 13 02 F6 | 	mov	arg01, local02
107b0     D8 63 B1 FD | 	call	#__system___float_mul
107b4     FD 12 02 F6 | 	mov	arg01, result1
107b8     30 6D B1 FD | 	call	#__system____builtin_sinf
107bc     FD 14 02 F6 | 	mov	arg02, result1
107c0     15 13 02 F6 | 	mov	arg01, local03
107c4     C4 63 B1 FD | 	call	#__system___float_mul
107c8     FD 14 02 F6 | 	mov	arg02, result1
107cc     24 4E 05 F1 | 	add	fp, #36
107d0     A7 12 02 FB | 	rdlong	arg01, fp
107d4     24 4E 85 F1 | 	sub	fp, #36
107d8     E0 5F B1 FD | 	call	#__system___float_add
107dc     24 4E 05 F1 | 	add	fp, #36
107e0     A7 FA 61 FC | 	wrlong	result1, fp
107e4     1C 4E 85 F1 | 	sub	fp, #28
107e8     A7 2A 02 FB | 	rdlong	local03, fp
107ec     01 2A 06 F1 | 	add	local03, #1
107f0     A7 2A 62 FC | 	wrlong	local03, fp
107f4     10 2A 56 F2 | 	cmps	local03, #16 wc
107f8     14 FF 9F CD |  if_b	jmp	#LR__1371
107fc     08 4E 05 F1 | 	add	fp, #8
10800     A7 2A 02 FB | 	rdlong	local03, fp
10804     0B 2A 66 F0 | 	shl	local03, #11
10808     0C 4E 85 F1 | 	sub	fp, #12
1080c     A7 28 02 FB | 	rdlong	local02, fp
10810     01 28 66 F0 | 	shl	local02, #1
10814     14 2B 02 F1 | 	add	local03, local02
10818     20 4E 05 F1 | 	add	fp, #32
1081c     A7 12 02 FB | 	rdlong	arg01, fp
10820     24 4E 85 F1 | 	sub	fp, #36
10824     01 14 06 F6 | 	mov	arg02, #1
10828     28 68 B1 FD | 	call	#__system___float_tointeger
1082c     FD 14 02 F6 | 	mov	arg02, result1
10830     15 13 02 F6 | 	mov	arg01, local03
10834     20 FD B0 FD | 	call	#_psdpoke
10838     04 4E 05 F1 | 	add	fp, #4
1083c     A7 2A 02 FB | 	rdlong	local03, fp
10840     01 2A 06 F1 | 	add	local03, #1
10844     A7 2A 62 FC | 	wrlong	local03, fp
10848     04 4E 85 F1 | 	sub	fp, #4
1084c     02 00 00 FF 
10850     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10854     A8 FE 9F CD |  if_b	jmp	#LR__1370
10858                 | LR__1372
10858                 | LR__1373
10858     A7 F0 03 F6 | 	mov	ptra, fp
1085c     B2 00 A0 FD | 	call	#popregs_
10860                 | _do_defsnd_ret
10860     2D 00 64 FD | 	ret
10864                 | 
10864                 | ' 
10864                 | ' '-------------------- defsprite
10864                 | ' 
10864                 | ' sub do_defsprite
10864                 | _do_defsprite
10864     07 4A 05 F6 | 	mov	COUNT_, #7
10868     A8 00 A0 FD | 	call	#pushregs_
1086c     60 F0 07 F1 | 	add	ptra, #96
10870     A4 C1 BF FD | 	call	#_pop
10874     FD 16 02 F6 | 	mov	arg03, result1
10878     FE 14 02 F6 | 	mov	arg02, result2
1087c     FF 12 02 F6 | 	mov	arg01, result3
10880     30 4E 05 F1 | 	add	fp, #48
10884     A7 16 62 FC | 	wrlong	arg03, fp
10888     04 4E 05 F1 | 	add	fp, #4
1088c     A7 14 62 FC | 	wrlong	arg02, fp
10890     04 4E 05 F1 | 	add	fp, #4
10894     A7 12 62 FC | 	wrlong	arg01, fp
10898     38 4E 85 F1 | 	sub	fp, #56
1089c     78 C1 BF FD | 	call	#_pop
108a0     FD 16 02 F6 | 	mov	arg03, result1
108a4     FE 14 02 F6 | 	mov	arg02, result2
108a8     FF 12 02 F6 | 	mov	arg01, result3
108ac     24 4E 05 F1 | 	add	fp, #36
108b0     A7 16 62 FC | 	wrlong	arg03, fp
108b4     04 4E 05 F1 | 	add	fp, #4
108b8     A7 14 62 FC | 	wrlong	arg02, fp
108bc     04 4E 05 F1 | 	add	fp, #4
108c0     A7 12 62 FC | 	wrlong	arg01, fp
108c4     2C 4E 85 F1 | 	sub	fp, #44
108c8     4C C1 BF FD | 	call	#_pop
108cc     FD 16 02 F6 | 	mov	arg03, result1
108d0     FE 14 02 F6 | 	mov	arg02, result2
108d4     FF 12 02 F6 | 	mov	arg01, result3
108d8     18 4E 05 F1 | 	add	fp, #24
108dc     A7 16 62 FC | 	wrlong	arg03, fp
108e0     04 4E 05 F1 | 	add	fp, #4
108e4     A7 14 62 FC | 	wrlong	arg02, fp
108e8     04 4E 05 F1 | 	add	fp, #4
108ec     A7 12 62 FC | 	wrlong	arg01, fp
108f0     20 4E 85 F1 | 	sub	fp, #32
108f4     20 C1 BF FD | 	call	#_pop
108f8     FD 16 02 F6 | 	mov	arg03, result1
108fc     FE 14 02 F6 | 	mov	arg02, result2
10900     FF 12 02 F6 | 	mov	arg01, result3
10904     0C 4E 05 F1 | 	add	fp, #12
10908     A7 16 62 FC | 	wrlong	arg03, fp
1090c     04 4E 05 F1 | 	add	fp, #4
10910     A7 14 62 FC | 	wrlong	arg02, fp
10914     04 4E 05 F1 | 	add	fp, #4
10918     A7 12 62 FC | 	wrlong	arg01, fp
1091c     14 4E 85 F1 | 	sub	fp, #20
10920     F4 C0 BF FD | 	call	#_pop
10924     FF 16 02 F6 | 	mov	arg03, result3
10928     A7 FA 61 FC | 	wrlong	result1, fp
1092c     04 4E 05 F1 | 	add	fp, #4
10930     A7 FC 61 FC | 	wrlong	result2, fp
10934     04 4E 05 F1 | 	add	fp, #4
10938     A7 16 62 FC | 	wrlong	arg03, fp
1093c     08 4E 85 F1 | 	sub	fp, #8
10940     A7 12 02 F6 | 	mov	arg01, fp
10944     B4 C2 BF FD | 	call	#_converttoint
10948     3C 4E 05 F1 | 	add	fp, #60
1094c     A7 FA 61 FC | 	wrlong	result1, fp
10950     30 4E 85 F1 | 	sub	fp, #48
10954     A7 12 02 F6 | 	mov	arg01, fp
10958     0C 4E 85 F1 | 	sub	fp, #12
1095c     9C C2 BF FD | 	call	#_converttoint
10960     40 4E 05 F1 | 	add	fp, #64
10964     A7 FA 61 FC | 	wrlong	result1, fp
10968     28 4E 85 F1 | 	sub	fp, #40
1096c     A7 12 02 F6 | 	mov	arg01, fp
10970     18 4E 85 F1 | 	sub	fp, #24
10974     84 C2 BF FD | 	call	#_converttoint
10978     44 4E 05 F1 | 	add	fp, #68
1097c     A7 FA 61 FC | 	wrlong	result1, fp
10980     20 4E 85 F1 | 	sub	fp, #32
10984     A7 12 02 F6 | 	mov	arg01, fp
10988     24 4E 85 F1 | 	sub	fp, #36
1098c     6C C2 BF FD | 	call	#_converttoint
10990     48 4E 05 F1 | 	add	fp, #72
10994     A7 FA 61 FC | 	wrlong	result1, fp
10998     18 4E 85 F1 | 	sub	fp, #24
1099c     A7 12 02 F6 | 	mov	arg01, fp
109a0     30 4E 85 F1 | 	sub	fp, #48
109a4     54 C2 BF FD | 	call	#_converttoint
109a8     4C 4E 05 F1 | 	add	fp, #76
109ac     A7 FA 61 FC | 	wrlong	result1, fp
109b0                 | ' 
109b0                 | ' t5=pop()
109b0                 | ' t4=pop()
109b0                 | ' t3=pop()
109b0                 | ' t2=pop()
109b0                 | ' t1=pop()
109b0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
109b0                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
109b0     10 4E 85 F1 | 	sub	fp, #16
109b4     A7 16 02 FB | 	rdlong	arg03, fp
109b8     3C 4E 85 F1 | 	sub	fp, #60
109bc     02 16 66 F0 | 	shl	arg03, #2
109c0     51 00 00 FF 
109c4     68 E5 05 F1 | 	add	objptr, ##41832
109c8     F2 16 02 F1 | 	add	arg03, objptr
109cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
109d0     51 00 00 FF 
109d4     68 E5 85 F1 | 	sub	objptr, ##41832
109d8     2C 00 90 AD |  if_e	jmp	#LR__1380
109dc     3C 4E 05 F1 | 	add	fp, #60
109e0     A7 16 02 FB | 	rdlong	arg03, fp
109e4     3C 4E 85 F1 | 	sub	fp, #60
109e8     02 16 66 F0 | 	shl	arg03, #2
109ec     51 00 00 FF 
109f0     68 E5 05 F1 | 	add	objptr, ##41832
109f4     F2 16 02 F1 | 	add	arg03, objptr
109f8     0B 13 02 FB | 	rdlong	arg01, arg03
109fc     51 00 00 FF 
10a00     68 E5 85 F1 | 	sub	objptr, ##41832
10a04     E8 75 B1 FD | 	call	#__system___gc_free
10a08                 | LR__1380
10a08     3C 4E 05 F1 | 	add	fp, #60
10a0c     A7 26 02 FB | 	rdlong	local01, fp
10a10     0C 4E 05 F1 | 	add	fp, #12
10a14     A7 16 02 FB | 	rdlong	arg03, fp
10a18     04 4E 05 F1 | 	add	fp, #4
10a1c     A7 14 02 FB | 	rdlong	arg02, fp
10a20     0A 17 02 FD | 	qmul	arg03, arg02
10a24     02 26 66 F0 | 	shl	local01, #2
10a28     51 00 00 FF 
10a2c     68 E5 05 F1 | 	add	objptr, ##41832
10a30     F2 26 02 F1 | 	add	local01, objptr
10a34     4C 4E 85 F1 | 	sub	fp, #76
10a38     51 00 00 FF 
10a3c     68 E5 85 F1 | 	sub	objptr, ##41832
10a40     18 12 62 FD | 	getqx	arg01
10a44     6C 74 B1 FD | 	call	#__system___gc_alloc_managed
10a48     13 FB 61 FC | 	wrlong	result1, local01
10a4c                 | ' for y=a3 to a3+a5-1
10a4c     44 4E 05 F1 | 	add	fp, #68
10a50     A7 28 02 FB | 	rdlong	local02, fp
10a54     0C 4E 05 F1 | 	add	fp, #12
10a58     A7 28 62 FC | 	wrlong	local02, fp
10a5c     0C 4E 85 F1 | 	sub	fp, #12
10a60     A7 2A 02 FB | 	rdlong	local03, fp
10a64     08 4E 05 F1 | 	add	fp, #8
10a68     A7 2C 02 FB | 	rdlong	local04, fp
10a6c     4C 4E 85 F1 | 	sub	fp, #76
10a70     16 2B 02 F1 | 	add	local03, local04
10a74                 | LR__1381
10a74     50 4E 05 F1 | 	add	fp, #80
10a78     A7 28 02 FB | 	rdlong	local02, fp
10a7c     50 4E 85 F1 | 	sub	fp, #80
10a80     15 29 52 F2 | 	cmps	local02, local03 wc
10a84     F4 00 90 3D |  if_ae	jmp	#LR__1384
10a88                 | '   for x=a2 to a4+a2-1
10a88     40 4E 05 F1 | 	add	fp, #64
10a8c     A7 26 02 FB | 	rdlong	local01, fp
10a90     14 4E 05 F1 | 	add	fp, #20
10a94     A7 26 62 FC | 	wrlong	local01, fp
10a98     0C 4E 85 F1 | 	sub	fp, #12
10a9c     A7 2E 02 FB | 	rdlong	local05, fp
10aa0     08 4E 85 F1 | 	sub	fp, #8
10aa4     A7 30 02 FB | 	rdlong	local06, fp
10aa8     40 4E 85 F1 | 	sub	fp, #64
10aac     18 2F 02 F1 | 	add	local05, local06
10ab0                 | LR__1382
10ab0     54 4E 05 F1 | 	add	fp, #84
10ab4     A7 26 02 FB | 	rdlong	local01, fp
10ab8     54 4E 85 F1 | 	sub	fp, #84
10abc     17 27 52 F2 | 	cmps	local01, local05 wc
10ac0     A0 00 90 3D |  if_ae	jmp	#LR__1383
10ac4     3C 4E 05 F1 | 	add	fp, #60
10ac8     A7 30 02 FB | 	rdlong	local06, fp
10acc     18 4E 05 F1 | 	add	fp, #24
10ad0     A7 2C 02 FB | 	rdlong	local04, fp
10ad4     14 4E 85 F1 | 	sub	fp, #20
10ad8     A7 28 02 FB | 	rdlong	local02, fp
10adc     10 4E 05 F1 | 	add	fp, #16
10ae0     A7 26 02 FB | 	rdlong	local01, fp
10ae4     13 17 02 F6 | 	mov	arg03, local01
10ae8     0C 4E 85 F1 | 	sub	fp, #12
10aec     A7 14 02 FB | 	rdlong	arg02, fp
10af0     0A 17 82 F1 | 	sub	arg03, arg02
10af4     04 4E 05 F1 | 	add	fp, #4
10af8     A7 14 02 FB | 	rdlong	arg02, fp
10afc     0A 17 02 FD | 	qmul	arg03, arg02
10b00     02 30 66 F0 | 	shl	local06, #2
10b04     51 00 00 FF 
10b08     68 E5 05 F1 | 	add	objptr, ##41832
10b0c     F2 30 02 F1 | 	add	local06, objptr
10b10     18 31 02 FB | 	rdlong	local06, local06
10b14     16 33 02 F6 | 	mov	local07, local04
10b18     14 33 82 F1 | 	sub	local07, local02
10b1c     51 00 00 FF 
10b20     68 E5 85 F1 | 	sub	objptr, ##41832
10b24     F2 12 02 FB | 	rdlong	arg01, objptr
10b28     16 13 02 F1 | 	add	arg01, local04
10b2c     48 4E 85 F1 | 	sub	fp, #72
10b30     0A 26 66 F0 | 	shl	local01, #10
10b34     13 13 02 F1 | 	add	arg01, local01
10b38     18 2C 62 FD | 	getqx	local04
10b3c     16 33 02 F1 | 	add	local07, local04
10b40     18 33 02 F1 | 	add	local07, local06
10b44     A0 FA B0 FD | 	call	#_pspeek
10b48     19 FB 41 FC | 	wrbyte	result1, local07
10b4c     54 4E 05 F1 | 	add	fp, #84
10b50     A7 32 02 FB | 	rdlong	local07, fp
10b54     01 32 06 F1 | 	add	local07, #1
10b58     A7 32 62 FC | 	wrlong	local07, fp
10b5c     54 4E 85 F1 | 	sub	fp, #84
10b60     4C FF 9F FD | 	jmp	#LR__1382
10b64                 | LR__1383
10b64     50 4E 05 F1 | 	add	fp, #80
10b68     A7 32 02 FB | 	rdlong	local07, fp
10b6c     01 32 06 F1 | 	add	local07, #1
10b70     A7 32 62 FC | 	wrlong	local07, fp
10b74     50 4E 85 F1 | 	sub	fp, #80
10b78     F8 FE 9F FD | 	jmp	#LR__1381
10b7c                 | LR__1384
10b7c     3C 4E 05 F1 | 	add	fp, #60
10b80     A7 32 02 FB | 	rdlong	local07, fp
10b84     19 13 02 F6 | 	mov	arg01, local07
10b88     3C 4E 85 F1 | 	sub	fp, #60
10b8c     02 32 66 F0 | 	shl	local07, #2
10b90     51 00 00 FF 
10b94     68 E5 05 F1 | 	add	objptr, ##41832
10b98     F2 32 02 F1 | 	add	local07, objptr
10b9c     19 15 02 FB | 	rdlong	arg02, local07
10ba0     51 00 00 FF 
10ba4     68 E5 85 F1 | 	sub	objptr, ##41832
10ba8     7C 07 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10bac     3C 4E 05 F1 | 	add	fp, #60
10bb0     A7 12 02 FB | 	rdlong	arg01, fp
10bb4     0C 4E 05 F1 | 	add	fp, #12
10bb8     A7 14 02 FB | 	rdlong	arg02, fp
10bbc     04 4E 05 F1 | 	add	fp, #4
10bc0     A7 16 02 FB | 	rdlong	arg03, fp
10bc4     4C 4E 85 F1 | 	sub	fp, #76
10bc8     EC 07 B1 FD | 	call	#_hg010b_spin2_setspritesize
10bcc     A7 F0 03 F6 | 	mov	ptra, fp
10bd0     B2 00 A0 FD | 	call	#popregs_
10bd4                 | _do_defsprite_ret
10bd4     2D 00 64 FD | 	ret
10bd8                 | 
10bd8                 | ' 
10bd8                 | ' '-------------------- deg
10bd8                 | ' 
10bd8                 | ' sub do_deg
10bd8                 | _do_deg
10bd8     51 00 00 FF 
10bdc     BC E5 05 F1 | 	add	objptr, ##41916
10be0     7D 47 9E FF 
10be4     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10be8     04 E4 05 F1 | 	add	objptr, #4
10bec     97 32 A1 FF 
10bf0     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10bf4     51 00 00 FF 
10bf8     C0 E5 85 F1 | 	sub	objptr, ##41920
10bfc                 | _do_deg_ret
10bfc     2D 00 64 FD | 	ret
10c00                 | 
10c00                 | ' 
10c00                 | ' '-------------------- delete
10c00                 | ' 
10c00                 | ' sub do_delete
10c00                 | _do_delete
10c00     05 4A 05 F6 | 	mov	COUNT_, #5
10c04     A8 00 A0 FD | 	call	#pushregs_
10c08     0C BE BF FD | 	call	#_pop
10c0c     FE 18 02 F6 | 	mov	arg04, result2
10c10     FF 16 02 F6 | 	mov	arg03, result3
10c14     FD 26 02 F6 | 	mov	local01, result1
10c18     0C 29 02 F6 | 	mov	local02, arg04
10c1c     0B 2B 02 F6 | 	mov	local03, arg03
10c20                 | ' 
10c20                 | ' t1=pop()
10c20                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10c20     2B 2A 0E F2 | 	cmp	local03, #43 wz
10c24     10 00 90 5D |  if_ne	jmp	#LR__1390
10c28     13 13 02 F6 | 	mov	arg01, local01
10c2c     60 BF BF FD | 	call	#_convertstring
10c30     FD 26 02 F6 | 	mov	local01, result1
10c34     1F 2A 06 F6 | 	mov	local03, #31
10c38                 | LR__1390
10c38                 | ' if t1.result_type<>result_string then printerror(15): return
10c38     1F 2A 0E F2 | 	cmp	local03, #31 wz
10c3c     10 00 90 AD |  if_e	jmp	#LR__1391
10c40     0F 12 06 F6 | 	mov	arg01, #15
10c44     00 14 06 F6 | 	mov	arg02, #0
10c48     38 F7 B0 FD | 	call	#_printerror
10c4c     E0 00 90 FD | 	jmp	#LR__1395
10c50                 | LR__1391
10c50                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10c50     4A 00 00 FF 
10c54     94 E4 05 F1 | 	add	objptr, ##38036
10c58     F2 12 02 FB | 	rdlong	arg01, objptr
10c5c     4A 00 00 FF 
10c60     94 E4 85 F1 | 	sub	objptr, ##38036
10c64     A0 01 00 FF 
10c68     66 14 06 F6 | 	mov	arg02, ##@LR__5716
10c6c     CC 30 B1 FD | 	call	#__system___string_cmp
10c70     00 FA 0D F2 | 	cmp	result1, #0 wz
10c74     34 00 90 AD |  if_e	jmp	#LR__1392
10c78     4A 00 00 FF 
10c7c     94 E4 05 F1 | 	add	objptr, ##38036
10c80     F2 12 02 FB | 	rdlong	arg01, objptr
10c84     4A 00 00 FF 
10c88     94 E4 85 F1 | 	sub	objptr, ##38036
10c8c     A0 01 00 FF 
10c90     68 14 06 F6 | 	mov	arg02, ##@LR__5717
10c94     D8 30 B1 FD | 	call	#__system___string_concat
10c98     FD 12 02 F6 | 	mov	arg01, result1
10c9c     13 15 02 F6 | 	mov	arg02, local01
10ca0     CC 30 B1 FD | 	call	#__system___string_concat
10ca4     FD 2C 02 F6 | 	mov	local04, result1
10ca8     14 00 90 FD | 	jmp	#LR__1393
10cac                 | LR__1392
10cac     A0 01 00 FF 
10cb0     6A 12 06 F6 | 	mov	arg01, ##@LR__5718
10cb4     13 15 02 F6 | 	mov	arg02, local01
10cb8     B4 30 B1 FD | 	call	#__system___string_concat
10cbc     FD 2C 02 F6 | 	mov	local04, result1
10cc0                 | LR__1393
10cc0     16 13 02 F6 | 	mov	arg01, local04
10cc4     18 58 B1 FD | 	call	#__system___remove
10cc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10ccc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10cd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10cd4     FD 2E 0A F6 | 	mov	local05, result1 wz
10cd8                 | ' kill filename$
10cd8                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10cd8     54 00 90 AD |  if_e	jmp	#LR__1394
10cdc     00 12 06 F6 | 	mov	arg01, #0
10ce0     58 8D B1 FD | 	call	#__system___getiolock_0573
10ce4     FD 12 02 F6 | 	mov	arg01, result1
10ce8     28 30 B1 FD | 	call	#__system___lockmem
10cec     A0 01 00 FF 
10cf0     6C 14 06 F6 | 	mov	arg02, ##@LR__5719
10cf4     00 12 06 F6 | 	mov	arg01, #0
10cf8     00 16 06 F6 | 	mov	arg03, #0
10cfc     08 3D B1 FD | 	call	#__system___basic_print_string
10d00     00 12 06 F6 | 	mov	arg01, #0
10d04     17 15 02 F6 | 	mov	arg02, local05
10d08     00 16 06 F6 | 	mov	arg03, #0
10d0c     0A 18 06 F6 | 	mov	arg04, #10
10d10     38 3D B1 FD | 	call	#__system___basic_print_integer
10d14     00 12 06 F6 | 	mov	arg01, #0
10d18     0A 14 06 F6 | 	mov	arg02, #10
10d1c     00 16 06 F6 | 	mov	arg03, #0
10d20     8C 3C B1 FD | 	call	#__system___basic_print_char
10d24     00 12 06 F6 | 	mov	arg01, #0
10d28     10 8D B1 FD | 	call	#__system___getiolock_0573
10d2c     FD 00 68 FC | 	wrlong	#0, result1
10d30                 | LR__1394
10d30                 | LR__1395
10d30     A7 F0 03 F6 | 	mov	ptra, fp
10d34     B2 00 A0 FD | 	call	#popregs_
10d38                 | _do_delete_ret
10d38     2D 00 64 FD | 	ret
10d3c                 | 
10d3c                 | ' 
10d3c                 | ' '-------------------- dir
10d3c                 | ' 
10d3c                 | ' sub do_dir
10d3c                 | _do_dir
10d3c     13 4A 05 F6 | 	mov	COUNT_, #19
10d40     A8 00 A0 FD | 	call	#pushregs_
10d44     01 00 00 FF 
10d48     38 F0 07 F1 | 	add	ptra, ##568
10d4c                 | ' 
10d4c                 | ' print "Current directory: "; currentdir$ 
10d4c     00 12 06 F6 | 	mov	arg01, #0
10d50     E8 8C B1 FD | 	call	#__system___getiolock_0573
10d54     FD 12 02 F6 | 	mov	arg01, result1
10d58     B8 2F B1 FD | 	call	#__system___lockmem
10d5c     A0 01 00 FF 
10d60     A4 14 06 F6 | 	mov	arg02, ##@LR__5720
10d64     00 12 06 F6 | 	mov	arg01, #0
10d68     00 16 06 F6 | 	mov	arg03, #0
10d6c     98 3C B1 FD | 	call	#__system___basic_print_string
10d70     4A 00 00 FF 
10d74     94 E4 05 F1 | 	add	objptr, ##38036
10d78     F2 14 02 FB | 	rdlong	arg02, objptr
10d7c     4A 00 00 FF 
10d80     94 E4 85 F1 | 	sub	objptr, ##38036
10d84     00 12 06 F6 | 	mov	arg01, #0
10d88     00 16 06 F6 | 	mov	arg03, #0
10d8c     78 3C B1 FD | 	call	#__system___basic_print_string
10d90     00 12 06 F6 | 	mov	arg01, #0
10d94     0A 14 06 F6 | 	mov	arg02, #10
10d98     00 16 06 F6 | 	mov	arg03, #0
10d9c     10 3C B1 FD | 	call	#__system___basic_print_char
10da0     01 26 06 F6 | 	mov	local01, #1
10da4     00 12 06 F6 | 	mov	arg01, #0
10da8     90 8C B1 FD | 	call	#__system___getiolock_0573
10dac     FD 00 68 FC | 	wrlong	#0, result1
10db0     00 28 06 F6 | 	mov	local02, #0
10db4     00 2A 06 F6 | 	mov	local03, #0
10db8                 | ' px=0
10db8                 | ' for i=0 to 127: filelist(i)="" : next i
10db8     00 2C 06 F6 | 	mov	local04, #0
10dbc     1C 4E 05 F1 | 	add	fp, #28
10dc0     97 12 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
10dc4                 | LR__1400
10dc4     16 2F 02 F6 | 	mov	local05, local04
10dc8     02 2E 66 F0 | 	shl	local05, #2
10dcc     A7 2E 02 F1 | 	add	local05, fp
10dd0     A0 01 00 FF 
10dd4     B8 30 06 F6 | 	mov	local06, ##@LR__5721
10dd8     17 31 62 FC | 	wrlong	local06, local05
10ddc     01 2C 06 F1 | 	add	local04, #1
10de0     80 2C 56 F2 | 	cmps	local04, #128 wc
10de4     DC FF 9F CD |  if_b	jmp	#LR__1400
10de8                 | LR__1401
10de8     1C 4E 85 F1 | 	sub	fp, #28
10dec     A0 01 00 FF 
10df0     B9 12 06 F6 | 	mov	arg01, ##@LR__5722
10df4     10 14 06 F6 | 	mov	arg02, #16
10df8     78 8D B1 FD | 	call	#__system___basic_dir
10dfc     FD 32 02 F6 | 	mov	local07, result1
10e00     00 34 06 F6 | 	mov	local08, #0
10e04                 | ' filename=dir$("*", fbDirectory)
10e04                 | ' n=0
10e04                 | ' while filename <> "" andalso filename <> nil andalso n<128
10e04                 | LR__1402
10e04     A0 01 00 FF 
10e08     BB 36 06 F6 | 	mov	local09, ##@LR__5723
10e0c     19 13 02 F6 | 	mov	arg01, local07
10e10     1B 15 02 F6 | 	mov	arg02, local09
10e14     24 2F B1 FD | 	call	#__system___string_cmp
10e18     00 FA 0D F2 | 	cmp	result1, #0 wz
10e1c     68 00 90 AD |  if_e	jmp	#LR__1403
10e20     00 36 06 F6 | 	mov	local09, #0
10e24     19 13 02 F6 | 	mov	arg01, local07
10e28     00 14 06 F6 | 	mov	arg02, #0
10e2c     0C 2F B1 FD | 	call	#__system___string_cmp
10e30     00 FA 0D F2 | 	cmp	result1, #0 wz
10e34     50 00 90 AD |  if_e	jmp	#LR__1403
10e38     80 34 56 F2 | 	cmps	local08, #128 wc
10e3c     48 00 90 3D |  if_ae	jmp	#LR__1403
10e40     A0 01 00 FF 
10e44     BC 12 06 F6 | 	mov	arg01, ##@LR__5724
10e48     19 15 02 F6 | 	mov	arg02, local07
10e4c     20 2F B1 FD | 	call	#__system___string_concat
10e50     FD 32 02 F6 | 	mov	local07, result1
10e54     1A 2F 02 F6 | 	mov	local05, local08
10e58     02 2E 66 F0 | 	shl	local05, #2
10e5c     1C 4E 05 F1 | 	add	fp, #28
10e60     A7 2E 02 F1 | 	add	local05, fp
10e64     17 33 62 FC | 	wrlong	local07, local05
10e68     01 34 06 F1 | 	add	local08, #1
10e6c     00 2E 06 F6 | 	mov	local05, #0
10e70     00 12 06 F6 | 	mov	arg01, #0
10e74     00 14 06 F6 | 	mov	arg02, #0
10e78     1C 4E 85 F1 | 	sub	fp, #28
10e7c     F4 8C B1 FD | 	call	#__system___basic_dir
10e80     FD 32 02 F6 | 	mov	local07, result1
10e84     7C FF 9F FD | 	jmp	#LR__1402
10e88                 | LR__1403
10e88                 | ' for i=0 to n-1			' now sort this
10e88     00 2C 06 F6 | 	mov	local04, #0
10e8c     1A 39 02 F6 | 	mov	local10, local08
10e90                 | LR__1404
10e90     1C 2D 52 F2 | 	cmps	local04, local10 wc
10e94     DC 00 90 3D |  if_ae	jmp	#LR__1408
10e98     00 3A 06 F6 | 	mov	local11, #0
10e9c                 | '   swapped=false
10e9c                 | '   for j=0 to n-i-2
10e9c     00 3C 06 F6 | 	mov	local12, #0
10ea0     1A 3F 02 F6 | 	mov	local13, local08
10ea4     16 3F 82 F1 | 	sub	local13, local04
10ea8     01 3E 86 F1 | 	sub	local13, #1
10eac                 | LR__1405
10eac     1F 3D 52 F2 | 	cmps	local12, local13 wc
10eb0     B0 00 90 3D |  if_ae	jmp	#LR__1407
10eb4                 | '     if filelist(j) > filelist(j+1) then
10eb4     1E 37 02 F6 | 	mov	local09, local12
10eb8     02 36 66 F0 | 	shl	local09, #2
10ebc     1C 4E 05 F1 | 	add	fp, #28
10ec0     A7 36 02 F1 | 	add	local09, fp
10ec4     1B 13 02 FB | 	rdlong	arg01, local09
10ec8     1E 37 02 F6 | 	mov	local09, local12
10ecc     01 36 06 F1 | 	add	local09, #1
10ed0     1B 31 02 F6 | 	mov	local06, local09
10ed4     02 30 66 F0 | 	shl	local06, #2
10ed8     A7 26 02 F6 | 	mov	local01, fp
10edc     A7 30 02 F1 | 	add	local06, fp
10ee0     18 2F 02 FB | 	rdlong	local05, local06
10ee4     17 15 02 F6 | 	mov	arg02, local05
10ee8     1C 4E 85 F1 | 	sub	fp, #28
10eec     4C 2E B1 FD | 	call	#__system___string_cmp
10ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
10ef4     64 00 90 CD |  if_b	jmp	#LR__1406
10ef8     1E 37 02 F6 | 	mov	local09, local12
10efc     01 36 06 F1 | 	add	local09, #1
10f00     02 36 66 F0 | 	shl	local09, #2
10f04     1C 4E 05 F1 | 	add	fp, #28
10f08     A7 36 02 F1 | 	add	local09, fp
10f0c     1B 3B 02 FB | 	rdlong	local11, local09
10f10     1E 31 02 F6 | 	mov	local06, local12
10f14     02 30 66 F0 | 	shl	local06, #2
10f18     A7 30 02 F1 | 	add	local06, fp
10f1c     18 2F 02 FB | 	rdlong	local05, local06
10f20     1E 37 02 F6 | 	mov	local09, local12
10f24     1B 31 02 F6 | 	mov	local06, local09
10f28     02 30 66 F0 | 	shl	local06, #2
10f2c     A7 26 02 F6 | 	mov	local01, fp
10f30     A7 30 02 F1 | 	add	local06, fp
10f34     18 3B 62 FC | 	wrlong	local11, local06
10f38     1E 29 02 F6 | 	mov	local02, local12
10f3c     01 28 06 F1 | 	add	local02, #1
10f40     14 41 02 F6 | 	mov	local14, local02
10f44     02 40 66 F0 | 	shl	local14, #2
10f48     A7 42 02 F6 | 	mov	local15, fp
10f4c     A7 40 02 F1 | 	add	local14, fp
10f50     20 2F 62 FC | 	wrlong	local05, local14
10f54     01 3A 66 F6 | 	neg	local11, #1
10f58     1C 4E 85 F1 | 	sub	fp, #28
10f5c                 | LR__1406
10f5c     01 3C 06 F1 | 	add	local12, #1
10f60     48 FF 9F FD | 	jmp	#LR__1405
10f64                 | LR__1407
10f64                 | ' if not swapped then exit for
10f64     1D 45 22 F6 | 	not	local16, local11
10f68     00 44 0E F2 | 	cmp	local16, #0 wz
10f6c     01 2C 06 A1 |  if_e	add	local04, #1
10f70     1C FF 9F AD |  if_e	jmp	#LR__1404
10f74                 | LR__1408
10f74                 | ' for i=0 to n-1
10f74     00 2C 06 F6 | 	mov	local04, #0
10f78     1A 47 02 F6 | 	mov	local17, local08
10f7c                 | LR__1409
10f7c     23 2D 52 F2 | 	cmps	local04, local17 wc
10f80     94 00 90 3D |  if_ae	jmp	#LR__1411
10f84                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10f84     00 12 06 F6 | 	mov	arg01, #0
10f88     B0 8A B1 FD | 	call	#__system___getiolock_0573
10f8c     FD 12 02 F6 | 	mov	arg01, result1
10f90     80 2D B1 FD | 	call	#__system___lockmem
10f94     16 29 02 F6 | 	mov	local02, local04
10f98     02 28 66 F0 | 	shl	local02, #2
10f9c     1C 4E 05 F1 | 	add	fp, #28
10fa0     A7 40 02 F6 | 	mov	local14, fp
10fa4     A7 28 02 F1 | 	add	local02, fp
10fa8     14 15 02 FB | 	rdlong	arg02, local02
10fac     00 26 06 F6 | 	mov	local01, #0
10fb0     00 12 06 F6 | 	mov	arg01, #0
10fb4     00 16 06 F6 | 	mov	arg03, #0
10fb8     1C 4E 85 F1 | 	sub	fp, #28
10fbc     48 3A B1 FD | 	call	#__system___basic_print_string
10fc0     00 12 06 F6 | 	mov	arg01, #0
10fc4     74 8A B1 FD | 	call	#__system___getiolock_0573
10fc8     FD 00 68 FC | 	wrlong	#0, result1
10fcc     40 2A 06 F1 | 	add	local03, #64
10fd0     15 13 02 F6 | 	mov	arg01, local03
10fd4     2C 10 B1 FD | 	call	#_hg010b_spin2_setcursorx
10fd8     00 2B 56 F2 | 	cmps	local03, #256 wc
10fdc     30 00 90 CD |  if_b	jmp	#LR__1410
10fe0     00 2A 06 F6 | 	mov	local03, #0
10fe4     00 12 06 F6 | 	mov	arg01, #0
10fe8     50 8A B1 FD | 	call	#__system___getiolock_0573
10fec     FD 12 02 F6 | 	mov	arg01, result1
10ff0     20 2D B1 FD | 	call	#__system___lockmem
10ff4     00 12 06 F6 | 	mov	arg01, #0
10ff8     0A 14 06 F6 | 	mov	arg02, #10
10ffc     00 16 06 F6 | 	mov	arg03, #0
11000     AC 39 B1 FD | 	call	#__system___basic_print_char
11004     00 12 06 F6 | 	mov	arg01, #0
11008     30 8A B1 FD | 	call	#__system___getiolock_0573
1100c     FD 00 68 FC | 	wrlong	#0, result1
11010                 | LR__1410
11010     01 2C 06 F1 | 	add	local04, #1
11014     64 FF 9F FD | 	jmp	#LR__1409
11018                 | LR__1411
11018                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11018     80 34 56 F2 | 	cmps	local08, #128 wc
1101c     44 00 90 CD |  if_b	jmp	#LR__1412
11020     00 12 06 F6 | 	mov	arg01, #0
11024     14 8A B1 FD | 	call	#__system___getiolock_0573
11028     FD 12 02 F6 | 	mov	arg01, result1
1102c     E4 2C B1 FD | 	call	#__system___lockmem
11030     A0 01 00 FF 
11034     C3 14 06 F6 | 	mov	arg02, ##@LR__5725
11038     00 12 06 F6 | 	mov	arg01, #0
1103c     00 16 06 F6 | 	mov	arg03, #0
11040     C4 39 B1 FD | 	call	#__system___basic_print_string
11044     00 12 06 F6 | 	mov	arg01, #0
11048     0A 14 06 F6 | 	mov	arg02, #10
1104c     00 16 06 F6 | 	mov	arg03, #0
11050     5C 39 B1 FD | 	call	#__system___basic_print_char
11054     00 12 06 F6 | 	mov	arg01, #0
11058     E0 89 B1 FD | 	call	#__system___getiolock_0573
1105c     FD 00 68 FC | 	wrlong	#0, result1
11060     00 26 06 F6 | 	mov	local01, #0
11064                 | LR__1412
11064                 | ' print
11064     00 12 06 F6 | 	mov	arg01, #0
11068     D0 89 B1 FD | 	call	#__system___getiolock_0573
1106c     FD 12 02 F6 | 	mov	arg01, result1
11070     A0 2C B1 FD | 	call	#__system___lockmem
11074     00 12 06 F6 | 	mov	arg01, #0
11078     0A 14 06 F6 | 	mov	arg02, #10
1107c     00 16 06 F6 | 	mov	arg03, #0
11080     2C 39 B1 FD | 	call	#__system___basic_print_char
11084     00 12 06 F6 | 	mov	arg01, #0
11088     B0 89 B1 FD | 	call	#__system___getiolock_0573
1108c     FD 00 68 FC | 	wrlong	#0, result1
11090     00 30 06 F6 | 	mov	local06, #0
11094     00 34 06 F6 | 	mov	local08, #0
11098     00 2A 06 F6 | 	mov	local03, #0
1109c                 | ' return cursor_y
1109c     3E E4 05 F1 | 	add	objptr, #62
110a0     F2 48 C2 FA | 	rdbyte	local18, objptr
110a4     3E E4 85 F1 | 	sub	objptr, #62
110a8     A0 01 00 FF 
110ac     F5 12 06 F6 | 	mov	arg01, ##@LR__5726
110b0     21 14 06 F6 | 	mov	arg02, #33
110b4     BC 8A B1 FD | 	call	#__system___basic_dir
110b8     FD 32 02 F6 | 	mov	local07, result1
110bc                 | ' n=0
110bc                 | ' px=0: py=v.getcursory()
110bc                 | ' filename = dir$("*", fbNormal )   
110bc                 | ' do while filename <> "" andalso filename <> nil andalso n<128
110bc                 | LR__1413
110bc     A0 01 00 FF 
110c0     F7 36 06 F6 | 	mov	local09, ##@LR__5727
110c4     19 13 02 F6 | 	mov	arg01, local07
110c8     1B 15 02 F6 | 	mov	arg02, local09
110cc     6C 2C B1 FD | 	call	#__system___string_cmp
110d0     00 FA 0D F2 | 	cmp	result1, #0 wz
110d4     54 00 90 AD |  if_e	jmp	#LR__1414
110d8     00 36 06 F6 | 	mov	local09, #0
110dc     19 13 02 F6 | 	mov	arg01, local07
110e0     00 14 06 F6 | 	mov	arg02, #0
110e4     54 2C B1 FD | 	call	#__system___string_cmp
110e8     00 FA 0D F2 | 	cmp	result1, #0 wz
110ec     3C 00 90 AD |  if_e	jmp	#LR__1414
110f0     80 34 56 F2 | 	cmps	local08, #128 wc
110f4     34 00 90 3D |  if_ae	jmp	#LR__1414
110f8     1A 2F 02 F6 | 	mov	local05, local08
110fc     02 2E 66 F0 | 	shl	local05, #2
11100     1C 4E 05 F1 | 	add	fp, #28
11104     A7 2E 02 F1 | 	add	local05, fp
11108     17 33 62 FC | 	wrlong	local07, local05
1110c     01 34 06 F1 | 	add	local08, #1
11110     00 2E 06 F6 | 	mov	local05, #0
11114     00 12 06 F6 | 	mov	arg01, #0
11118     00 14 06 F6 | 	mov	arg02, #0
1111c     1C 4E 85 F1 | 	sub	fp, #28
11120     50 8A B1 FD | 	call	#__system___basic_dir
11124     FD 32 02 F6 | 	mov	local07, result1
11128     90 FF 9F FD | 	jmp	#LR__1413
1112c                 | LR__1414
1112c                 | ' for i =0 to n-1
1112c     00 2C 06 F6 | 	mov	local04, #0
11130                 | LR__1415
11130     1A 2D 52 F2 | 	cmps	local04, local08 wc
11134     D8 00 90 3D |  if_ae	jmp	#LR__1419
11138     00 3A 06 F6 | 	mov	local11, #0
1113c                 | '   swapped=false
1113c                 | '   for j=0 to n-i-2
1113c     00 3C 06 F6 | 	mov	local12, #0
11140     1A 4B 02 F6 | 	mov	local19, local08
11144     16 4B 82 F1 | 	sub	local19, local04
11148     01 4A 86 F1 | 	sub	local19, #1
1114c                 | LR__1416
1114c     25 3D 52 F2 | 	cmps	local12, local19 wc
11150     AC 00 90 3D |  if_ae	jmp	#LR__1418
11154                 | '     if filelist(j) > filelist(j+1) then
11154     1E 37 02 F6 | 	mov	local09, local12
11158     02 36 66 F0 | 	shl	local09, #2
1115c     1C 4E 05 F1 | 	add	fp, #28
11160     A7 36 02 F1 | 	add	local09, fp
11164     1B 13 02 FB | 	rdlong	arg01, local09
11168     1E 37 02 F6 | 	mov	local09, local12
1116c     01 36 06 F1 | 	add	local09, #1
11170     1B 31 02 F6 | 	mov	local06, local09
11174     02 30 66 F0 | 	shl	local06, #2
11178     A7 26 02 F6 | 	mov	local01, fp
1117c     A7 30 02 F1 | 	add	local06, fp
11180     18 2F 02 FB | 	rdlong	local05, local06
11184     17 15 02 F6 | 	mov	arg02, local05
11188     1C 4E 85 F1 | 	sub	fp, #28
1118c     AC 2B B1 FD | 	call	#__system___string_cmp
11190     01 FA 55 F2 | 	cmps	result1, #1 wc
11194     60 00 90 CD |  if_b	jmp	#LR__1417
11198     1E 37 02 F6 | 	mov	local09, local12
1119c     01 36 06 F1 | 	add	local09, #1
111a0     02 36 66 F0 | 	shl	local09, #2
111a4     1C 4E 05 F1 | 	add	fp, #28
111a8     A7 36 02 F1 | 	add	local09, fp
111ac     1B 45 02 FB | 	rdlong	local16, local09
111b0     1E 31 02 F6 | 	mov	local06, local12
111b4     02 30 66 F0 | 	shl	local06, #2
111b8     A7 30 02 F1 | 	add	local06, fp
111bc     18 2F 02 FB | 	rdlong	local05, local06
111c0     1E 37 02 F6 | 	mov	local09, local12
111c4     1B 31 02 F6 | 	mov	local06, local09
111c8     02 30 66 F0 | 	shl	local06, #2
111cc     A7 26 02 F6 | 	mov	local01, fp
111d0     A7 30 02 F1 | 	add	local06, fp
111d4     18 45 62 FC | 	wrlong	local16, local06
111d8     1E 41 02 F6 | 	mov	local14, local12
111dc     01 40 06 F1 | 	add	local14, #1
111e0     02 40 66 F0 | 	shl	local14, #2
111e4     A7 42 02 F6 | 	mov	local15, fp
111e8     A7 40 02 F1 | 	add	local14, fp
111ec     20 2F 62 FC | 	wrlong	local05, local14
111f0     01 3A 66 F6 | 	neg	local11, #1
111f4     1C 4E 85 F1 | 	sub	fp, #28
111f8                 | LR__1417
111f8     01 3C 06 F1 | 	add	local12, #1
111fc     4C FF 9F FD | 	jmp	#LR__1416
11200                 | LR__1418
11200                 | ' if not swapped then exit for
11200     1D 45 22 F6 | 	not	local16, local11
11204     00 44 0E F2 | 	cmp	local16, #0 wz
11208     01 2C 06 A1 |  if_e	add	local04, #1
1120c     20 FF 9F AD |  if_e	jmp	#LR__1415
11210                 | LR__1419
11210                 | ' for i=0 to n-1
11210     00 2C 06 F6 | 	mov	local04, #0
11214                 | LR__1420
11214     1A 2D 52 F2 | 	cmps	local04, local08 wc
11218     8C 00 90 3D |  if_ae	jmp	#LR__1422
1121c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1121c     00 12 06 F6 | 	mov	arg01, #0
11220     18 88 B1 FD | 	call	#__system___getiolock_0573
11224     FD 12 02 F6 | 	mov	arg01, result1
11228     E8 2A B1 FD | 	call	#__system___lockmem
1122c     16 29 02 F6 | 	mov	local02, local04
11230     02 28 66 F0 | 	shl	local02, #2
11234     1C 4E 05 F1 | 	add	fp, #28
11238     A7 28 02 F1 | 	add	local02, fp
1123c     14 15 02 FB | 	rdlong	arg02, local02
11240     00 12 06 F6 | 	mov	arg01, #0
11244     00 16 06 F6 | 	mov	arg03, #0
11248     1C 4E 85 F1 | 	sub	fp, #28
1124c     B8 37 B1 FD | 	call	#__system___basic_print_string
11250     00 12 06 F6 | 	mov	arg01, #0
11254     E4 87 B1 FD | 	call	#__system___getiolock_0573
11258     FD 00 68 FC | 	wrlong	#0, result1
1125c     40 2A 06 F1 | 	add	local03, #64
11260     15 13 02 F6 | 	mov	arg01, local03
11264     9C 0D B1 FD | 	call	#_hg010b_spin2_setcursorx
11268     00 2B 56 F2 | 	cmps	local03, #256 wc
1126c     30 00 90 CD |  if_b	jmp	#LR__1421
11270     00 2A 06 F6 | 	mov	local03, #0
11274     00 12 06 F6 | 	mov	arg01, #0
11278     C0 87 B1 FD | 	call	#__system___getiolock_0573
1127c     FD 12 02 F6 | 	mov	arg01, result1
11280     90 2A B1 FD | 	call	#__system___lockmem
11284     00 12 06 F6 | 	mov	arg01, #0
11288     0A 14 06 F6 | 	mov	arg02, #10
1128c     00 16 06 F6 | 	mov	arg03, #0
11290     1C 37 B1 FD | 	call	#__system___basic_print_char
11294     00 12 06 F6 | 	mov	arg01, #0
11298     A0 87 B1 FD | 	call	#__system___getiolock_0573
1129c     FD 00 68 FC | 	wrlong	#0, result1
112a0                 | LR__1421
112a0     01 2C 06 F1 | 	add	local04, #1
112a4     6C FF 9F FD | 	jmp	#LR__1420
112a8                 | LR__1422
112a8                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112a8     80 34 56 F2 | 	cmps	local08, #128 wc
112ac     40 00 90 CD |  if_b	jmp	#LR__1423
112b0     00 12 06 F6 | 	mov	arg01, #0
112b4     84 87 B1 FD | 	call	#__system___getiolock_0573
112b8     FD 12 02 F6 | 	mov	arg01, result1
112bc     54 2A B1 FD | 	call	#__system___lockmem
112c0     A0 01 00 FF 
112c4     F8 14 06 F6 | 	mov	arg02, ##@LR__5728
112c8     00 12 06 F6 | 	mov	arg01, #0
112cc     00 16 06 F6 | 	mov	arg03, #0
112d0     34 37 B1 FD | 	call	#__system___basic_print_string
112d4     00 12 06 F6 | 	mov	arg01, #0
112d8     0A 14 06 F6 | 	mov	arg02, #10
112dc     00 16 06 F6 | 	mov	arg03, #0
112e0     CC 36 B1 FD | 	call	#__system___basic_print_char
112e4     00 12 06 F6 | 	mov	arg01, #0
112e8     50 87 B1 FD | 	call	#__system___getiolock_0573
112ec     FD 00 68 FC | 	wrlong	#0, result1
112f0                 | LR__1423
112f0                 | ' print
112f0     00 12 06 F6 | 	mov	arg01, #0
112f4     44 87 B1 FD | 	call	#__system___getiolock_0573
112f8     FD 12 02 F6 | 	mov	arg01, result1
112fc     14 2A B1 FD | 	call	#__system___lockmem
11300     00 12 06 F6 | 	mov	arg01, #0
11304     0A 14 06 F6 | 	mov	arg02, #10
11308     00 16 06 F6 | 	mov	arg03, #0
1130c     A0 36 B1 FD | 	call	#__system___basic_print_char
11310     00 12 06 F6 | 	mov	arg01, #0
11314     24 87 B1 FD | 	call	#__system___getiolock_0573
11318     FD 00 68 FC | 	wrlong	#0, result1
1131c     A7 F0 03 F6 | 	mov	ptra, fp
11320     B2 00 A0 FD | 	call	#popregs_
11324                 | _do_dir_ret
11324     2D 00 64 FD | 	ret
11328                 | 
11328                 | ' 
11328                 | ' '-------------------- dpeek
11328                 | ' 
11328                 | ' sub do_dpeek
11328                 | _do_dpeek
11328     00 4A 05 F6 | 	mov	COUNT_, #0
1132c     A8 00 A0 FD | 	call	#pushregs_
11330     14 F0 07 F1 | 	add	ptra, #20
11334     E0 B6 BF FD | 	call	#_pop
11338     A7 FA 61 FC | 	wrlong	result1, fp
1133c     04 4E 05 F1 | 	add	fp, #4
11340     A7 FC 61 FC | 	wrlong	result2, fp
11344     04 4E 05 F1 | 	add	fp, #4
11348     A7 FE 61 FC | 	wrlong	result3, fp
1134c     08 4E 85 F1 | 	sub	fp, #8
11350     A7 12 02 F6 | 	mov	arg01, fp
11354     A4 B8 BF FD | 	call	#_converttoint
11358     0C 4E 05 F1 | 	add	fp, #12
1135c     A7 FA 61 FC | 	wrlong	result1, fp
11360                 | ' 
11360                 | ' t1=pop()
11360                 | ' a=converttoint(t1)
11360                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11360     0C 4E 85 F1 | 	sub	fp, #12
11364     00 04 00 FF 
11368     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1136c     1C 00 90 3D |  if_ae	jmp	#LR__1430
11370     0C 4E 05 F1 | 	add	fp, #12
11374     A7 12 02 FB | 	rdlong	arg01, fp
11378     09 FB E1 FA | 	rdword	result1, arg01
1137c     04 4E 05 F1 | 	add	fp, #4
11380     A7 FA 61 FC | 	wrlong	result1, fp
11384     10 4E 85 F1 | 	sub	fp, #16
11388     1C 00 90 FD | 	jmp	#LR__1431
1138c                 | LR__1430
1138c     0C 4E 05 F1 | 	add	fp, #12
11390     A7 12 02 FB | 	rdlong	arg01, fp
11394     0C 4E 85 F1 | 	sub	fp, #12
11398     FC F2 B0 FD | 	call	#_psdpeek
1139c     10 4E 05 F1 | 	add	fp, #16
113a0     A7 FA 61 FC | 	wrlong	result1, fp
113a4     10 4E 85 F1 | 	sub	fp, #16
113a8                 | LR__1431
113a8     08 4E 05 F1 | 	add	fp, #8
113ac     A7 3A 68 FC | 	wrlong	#29, fp
113b0     08 4E 05 F1 | 	add	fp, #8
113b4     A7 12 02 FB | 	rdlong	arg01, fp
113b8     10 4E 85 F1 | 	sub	fp, #16
113bc     A7 12 62 FC | 	wrlong	arg01, fp
113c0     A7 12 02 F6 | 	mov	arg01, fp
113c4     E8 B6 BF FD | 	call	#_push
113c8     A7 F0 03 F6 | 	mov	ptra, fp
113cc     B2 00 A0 FD | 	call	#popregs_
113d0                 | _do_dpeek_ret
113d0     2D 00 64 FD | 	ret
113d4                 | 
113d4                 | ' 
113d4                 | ' '-------------------- dpoke
113d4                 | ' 
113d4                 | ' sub do_dpoke
113d4                 | _do_dpoke
113d4     01 4A 05 F6 | 	mov	COUNT_, #1
113d8     A8 00 A0 FD | 	call	#pushregs_
113dc     20 F0 07 F1 | 	add	ptra, #32
113e0     34 B6 BF FD | 	call	#_pop
113e4     FD 14 02 F6 | 	mov	arg02, result1
113e8     FE 12 02 F6 | 	mov	arg01, result2
113ec     FF 26 02 F6 | 	mov	local01, result3
113f0     A7 14 62 FC | 	wrlong	arg02, fp
113f4     04 4E 05 F1 | 	add	fp, #4
113f8     A7 12 62 FC | 	wrlong	arg01, fp
113fc     04 4E 05 F1 | 	add	fp, #4
11400     A7 26 62 FC | 	wrlong	local01, fp
11404     08 4E 85 F1 | 	sub	fp, #8
11408     0C B6 BF FD | 	call	#_pop
1140c     FF 26 02 F6 | 	mov	local01, result3
11410     0C 4E 05 F1 | 	add	fp, #12
11414     A7 FA 61 FC | 	wrlong	result1, fp
11418     04 4E 05 F1 | 	add	fp, #4
1141c     A7 FC 61 FC | 	wrlong	result2, fp
11420     04 4E 05 F1 | 	add	fp, #4
11424     A7 26 62 FC | 	wrlong	local01, fp
11428     08 4E 85 F1 | 	sub	fp, #8
1142c     A7 12 02 F6 | 	mov	arg01, fp
11430     0C 4E 85 F1 | 	sub	fp, #12
11434     C4 B7 BF FD | 	call	#_converttoint
11438     18 4E 05 F1 | 	add	fp, #24
1143c     A7 FA 61 FC | 	wrlong	result1, fp
11440     18 4E 85 F1 | 	sub	fp, #24
11444     A7 12 02 F6 | 	mov	arg01, fp
11448     B0 B7 BF FD | 	call	#_converttoint
1144c     1C 4E 05 F1 | 	add	fp, #28
11450     A7 FA 61 FC | 	wrlong	result1, fp
11454                 | ' 
11454                 | ' t1=pop() 'value
11454                 | ' t2=pop() 
11454                 | ' a=converttoint(t2) : v=converttoint(t1)
11454                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11454     04 4E 85 F1 | 	sub	fp, #4
11458     A7 26 02 FB | 	rdlong	local01, fp
1145c     18 4E 85 F1 | 	sub	fp, #24
11460     00 04 00 FF 
11464     00 26 16 F2 | 	cmp	local01, ##524288 wc
11468     1C 00 90 3D |  if_ae	jmp	#LR__1440
1146c     18 4E 05 F1 | 	add	fp, #24
11470     A7 12 02 FB | 	rdlong	arg01, fp
11474     04 4E 05 F1 | 	add	fp, #4
11478     A7 14 02 FB | 	rdlong	arg02, fp
1147c     1C 4E 85 F1 | 	sub	fp, #28
11480     09 15 52 FC | 	wrword	arg02, arg01
11484     18 00 90 FD | 	jmp	#LR__1441
11488                 | LR__1440
11488     18 4E 05 F1 | 	add	fp, #24
1148c     A7 12 02 FB | 	rdlong	arg01, fp
11490     04 4E 05 F1 | 	add	fp, #4
11494     A7 14 02 FB | 	rdlong	arg02, fp
11498     1C 4E 85 F1 | 	sub	fp, #28
1149c     B8 F0 B0 FD | 	call	#_psdpoke
114a0                 | LR__1441
114a0     A7 F0 03 F6 | 	mov	ptra, fp
114a4     B2 00 A0 FD | 	call	#popregs_
114a8                 | _do_dpoke_ret
114a8     2D 00 64 FD | 	ret
114ac                 | 
114ac                 | ' '-------------------- draw
114ac                 | ' 
114ac                 | ' sub do_draw
114ac                 | _do_draw
114ac     00 4A 05 F6 | 	mov	COUNT_, #0
114b0     A8 00 A0 FD | 	call	#pushregs_
114b4     20 F0 07 F1 | 	add	ptra, #32
114b8     5C B5 BF FD | 	call	#_pop
114bc     FD 1A 02 F6 | 	mov	arg05, result1
114c0     FE 18 02 F6 | 	mov	arg04, result2
114c4     FF 16 02 F6 | 	mov	arg03, result3
114c8     0C 4E 05 F1 | 	add	fp, #12
114cc     A7 1A 62 FC | 	wrlong	arg05, fp
114d0     04 4E 05 F1 | 	add	fp, #4
114d4     A7 18 62 FC | 	wrlong	arg04, fp
114d8     04 4E 05 F1 | 	add	fp, #4
114dc     A7 16 62 FC | 	wrlong	arg03, fp
114e0     14 4E 85 F1 | 	sub	fp, #20
114e4     30 B5 BF FD | 	call	#_pop
114e8     FF 1A 02 F6 | 	mov	arg05, result3
114ec     A7 FA 61 FC | 	wrlong	result1, fp
114f0     04 4E 05 F1 | 	add	fp, #4
114f4     A7 FC 61 FC | 	wrlong	result2, fp
114f8     04 4E 05 F1 | 	add	fp, #4
114fc     A7 1A 62 FC | 	wrlong	arg05, fp
11500     08 4E 85 F1 | 	sub	fp, #8
11504     A7 12 02 F6 | 	mov	arg01, fp
11508     F0 B6 BF FD | 	call	#_converttoint
1150c     18 4E 05 F1 | 	add	fp, #24
11510     A7 FA 61 FC | 	wrlong	result1, fp
11514     0C 4E 85 F1 | 	sub	fp, #12
11518     A7 12 02 F6 | 	mov	arg01, fp
1151c     0C 4E 85 F1 | 	sub	fp, #12
11520     D8 B6 BF FD | 	call	#_converttoint
11524     1C 4E 05 F1 | 	add	fp, #28
11528     A7 FA 61 FC | 	wrlong	result1, fp
1152c     37 00 00 FF 
11530     2C E4 05 F1 | 	add	objptr, ##28204
11534     F2 12 02 FB | 	rdlong	arg01, objptr
11538     04 E4 05 F1 | 	add	objptr, #4
1153c     F2 14 02 FB | 	rdlong	arg02, objptr
11540     04 4E 85 F1 | 	sub	fp, #4
11544     A7 16 02 FB | 	rdlong	arg03, fp
11548     FD 18 02 F6 | 	mov	arg04, result1
1154c     18 4E 85 F1 | 	sub	fp, #24
11550     08 E4 85 F1 | 	sub	objptr, #8
11554     F2 1A 02 FB | 	rdlong	arg05, objptr
11558     37 00 00 FF 
1155c     28 E4 85 F1 | 	sub	objptr, ##28200
11560     50 01 B1 FD | 	call	#_hg010b_spin2_draw
11564     18 4E 05 F1 | 	add	fp, #24
11568     A7 1A 02 FB | 	rdlong	arg05, fp
1156c     37 00 00 FF 
11570     2C E4 05 F1 | 	add	objptr, ##28204
11574     F2 1A 62 FC | 	wrlong	arg05, objptr
11578     04 4E 05 F1 | 	add	fp, #4
1157c     A7 1A 02 FB | 	rdlong	arg05, fp
11580     1C 4E 85 F1 | 	sub	fp, #28
11584     04 E4 05 F1 | 	add	objptr, #4
11588     F2 1A 62 FC | 	wrlong	arg05, objptr
1158c     37 00 00 FF 
11590     30 E4 85 F1 | 	sub	objptr, ##28208
11594     A7 F0 03 F6 | 	mov	ptra, fp
11598     B2 00 A0 FD | 	call	#popregs_
1159c                 | _do_draw_ret
1159c     2D 00 64 FD | 	ret
115a0                 | 
115a0                 | ' 
115a0                 | ' '-------------------- else
115a0                 | ' 
115a0                 | ' sub do_else
115a0                 | _do_else
115a0     4A 00 00 FF 
115a4     7C E4 05 F1 | 	add	objptr, ##38012
115a8     F2 00 02 FB | 	rdlong	_var01, objptr
115ac     01 00 86 F1 | 	sub	_var01, #1
115b0     04 E4 05 F1 | 	add	objptr, #4
115b4     F2 00 62 FC | 	wrlong	_var01, objptr
115b8     4A 00 00 FF 
115bc     80 E4 85 F1 | 	sub	objptr, ##38016
115c0                 | _do_else_ret
115c0     2D 00 64 FD | 	ret
115c4                 | 
115c4                 | ' 
115c4                 | ' '-------------------- end
115c4                 | ' 
115c4                 | ' sub do_end
115c4                 | _do_end
115c4     4A 00 00 FF 
115c8     7C E4 05 F1 | 	add	objptr, ##38012
115cc     F2 00 02 FB | 	rdlong	_var01, objptr
115d0     01 00 86 F1 | 	sub	_var01, #1
115d4     04 E4 05 F1 | 	add	objptr, #4
115d8     F2 00 62 FC | 	wrlong	_var01, objptr
115dc     06 00 00 FF 
115e0     38 E4 05 F1 | 	add	objptr, ##3128
115e4     FF FF BF FF 
115e8     F2 FE 6B FC | 	wrlong	##2147483647, objptr
115ec     50 00 00 FF 
115f0     B8 E4 85 F1 | 	sub	objptr, ##41144
115f4                 | _do_end_ret
115f4     2D 00 64 FD | 	ret
115f8                 | 
115f8                 | ' 
115f8                 | ' '-------------------- enter
115f8                 | ' 
115f8                 | ' sub do_enter
115f8                 | _do_enter
115f8     02 00 00 FF 
115fc     D2 12 06 F6 | 	mov	arg01, ##1234
11600     A0 2E B0 FD | 	call	#_do_load
11604                 | _do_enter_ret
11604     2D 00 64 FD | 	ret
11608                 | 
11608                 | ' 
11608                 | ' '------------------- error processing
11608                 | ' 
11608                 | ' sub do_error
11608                 | _do_error
11608     01 4A 05 F6 | 	mov	COUNT_, #1
1160c     A8 00 A0 FD | 	call	#pushregs_
11610     4A 00 00 FF 
11614     80 E4 05 F1 | 	add	objptr, ##38016
11618     F2 18 02 FB | 	rdlong	arg04, objptr
1161c     0C 17 02 F6 | 	mov	arg03, arg04
11620     01 16 66 F0 | 	shl	arg03, #1
11624     0C 17 02 F1 | 	add	arg03, arg04
11628     02 16 66 F0 | 	shl	arg03, #2
1162c     03 00 00 FF 
11630     04 E4 85 F1 | 	sub	objptr, ##1540
11634     F2 16 02 F1 | 	add	arg03, objptr
11638     0B 27 02 FB | 	rdlong	local01, arg03
1163c                 | ' r=compiledline(lineptr_e).result.uresult
1163c                 | ' print "Error ";r;": ";errors$(r)
1163c     00 12 06 F6 | 	mov	arg01, #0
11640     47 00 00 FF 
11644     7C E4 85 F1 | 	sub	objptr, ##36476
11648     F0 83 B1 FD | 	call	#__system___getiolock_0573
1164c     FD 12 02 F6 | 	mov	arg01, result1
11650     C0 26 B1 FD | 	call	#__system___lockmem
11654     A0 01 00 FF 
11658     2A 15 06 F6 | 	mov	arg02, ##@LR__5729
1165c     00 12 06 F6 | 	mov	arg01, #0
11660     00 16 06 F6 | 	mov	arg03, #0
11664     A0 33 B1 FD | 	call	#__system___basic_print_string
11668     00 12 06 F6 | 	mov	arg01, #0
1166c     13 15 02 F6 | 	mov	arg02, local01
11670     00 16 06 F6 | 	mov	arg03, #0
11674     0A 18 06 F6 | 	mov	arg04, #10
11678     10 34 B1 FD | 	call	#__system___basic_print_unsigned
1167c     A0 01 00 FF 
11680     31 15 06 F6 | 	mov	arg02, ##@LR__5730
11684     00 12 06 F6 | 	mov	arg01, #0
11688     00 16 06 F6 | 	mov	arg03, #0
1168c     78 33 B1 FD | 	call	#__system___basic_print_string
11690     02 26 66 F0 | 	shl	local01, #2
11694     45 00 00 FF 
11698     7C E4 05 F1 | 	add	objptr, ##35452
1169c     F2 26 02 F1 | 	add	local01, objptr
116a0     13 15 02 FB | 	rdlong	arg02, local01
116a4     00 12 06 F6 | 	mov	arg01, #0
116a8     00 16 06 F6 | 	mov	arg03, #0
116ac     45 00 00 FF 
116b0     7C E4 85 F1 | 	sub	objptr, ##35452
116b4     50 33 B1 FD | 	call	#__system___basic_print_string
116b8     00 12 06 F6 | 	mov	arg01, #0
116bc     0A 14 06 F6 | 	mov	arg02, #10
116c0     00 16 06 F6 | 	mov	arg03, #0
116c4     E8 32 B1 FD | 	call	#__system___basic_print_char
116c8     00 12 06 F6 | 	mov	arg01, #0
116cc     6C 83 B1 FD | 	call	#__system___getiolock_0573
116d0     FD 00 68 FC | 	wrlong	#0, result1
116d4     A7 F0 03 F6 | 	mov	ptra, fp
116d8     B2 00 A0 FD | 	call	#popregs_
116dc                 | _do_error_ret
116dc     2D 00 64 FD | 	ret
116e0                 | 
116e0                 | ' 
116e0                 | ' '-------------------- fcircle
116e0                 | ' 
116e0                 | ' sub do_fcircle
116e0                 | _do_fcircle
116e0     02 4A 05 F6 | 	mov	COUNT_, #2
116e4     A8 00 A0 FD | 	call	#pushregs_
116e8     24 F0 07 F1 | 	add	ptra, #36
116ec     28 B3 BF FD | 	call	#_pop
116f0     FD 14 02 F6 | 	mov	arg02, result1
116f4     FE 18 02 F6 | 	mov	arg04, result2
116f8     FF 16 02 F6 | 	mov	arg03, result3
116fc     18 4E 05 F1 | 	add	fp, #24
11700     A7 14 62 FC | 	wrlong	arg02, fp
11704     04 4E 05 F1 | 	add	fp, #4
11708     A7 18 62 FC | 	wrlong	arg04, fp
1170c     04 4E 05 F1 | 	add	fp, #4
11710     A7 16 62 FC | 	wrlong	arg03, fp
11714     20 4E 85 F1 | 	sub	fp, #32
11718     FC B2 BF FD | 	call	#_pop
1171c     FD 14 02 F6 | 	mov	arg02, result1
11720     FE 18 02 F6 | 	mov	arg04, result2
11724     FF 16 02 F6 | 	mov	arg03, result3
11728     0C 4E 05 F1 | 	add	fp, #12
1172c     A7 14 62 FC | 	wrlong	arg02, fp
11730     04 4E 05 F1 | 	add	fp, #4
11734     A7 18 62 FC | 	wrlong	arg04, fp
11738     04 4E 05 F1 | 	add	fp, #4
1173c     A7 16 62 FC | 	wrlong	arg03, fp
11740     14 4E 85 F1 | 	sub	fp, #20
11744     D0 B2 BF FD | 	call	#_pop
11748     FF 14 02 F6 | 	mov	arg02, result3
1174c     A7 FA 61 FC | 	wrlong	result1, fp
11750     04 4E 05 F1 | 	add	fp, #4
11754     A7 FC 61 FC | 	wrlong	result2, fp
11758     04 4E 05 F1 | 	add	fp, #4
1175c     A7 14 62 FC | 	wrlong	arg02, fp
11760     08 4E 85 F1 | 	sub	fp, #8
11764     A7 12 02 F6 | 	mov	arg01, fp
11768     90 B4 BF FD | 	call	#_converttoint
1176c     FD 26 02 F6 | 	mov	local01, result1
11770     0C 4E 05 F1 | 	add	fp, #12
11774     A7 12 02 F6 | 	mov	arg01, fp
11778     0C 4E 85 F1 | 	sub	fp, #12
1177c     7C B4 BF FD | 	call	#_converttoint
11780     FD 28 02 F6 | 	mov	local02, result1
11784     18 4E 05 F1 | 	add	fp, #24
11788     A7 12 02 F6 | 	mov	arg01, fp
1178c     18 4E 85 F1 | 	sub	fp, #24
11790     68 B4 BF FD | 	call	#_converttoint
11794     FD 16 02 F6 | 	mov	arg03, result1
11798     37 00 00 FF 
1179c     28 E4 05 F1 | 	add	objptr, ##28200
117a0     F2 18 02 FB | 	rdlong	arg04, objptr
117a4     37 00 00 FF 
117a8     28 E4 85 F1 | 	sub	objptr, ##28200
117ac     13 13 02 F6 | 	mov	arg01, local01
117b0     14 15 02 F6 | 	mov	arg02, local02
117b4     80 03 B1 FD | 	call	#_hg010b_spin2_fcircle
117b8     A7 F0 03 F6 | 	mov	ptra, fp
117bc     B2 00 A0 FD | 	call	#popregs_
117c0                 | _do_fcircle_ret
117c0     2D 00 64 FD | 	ret
117c4                 | 
117c4                 | ' 
117c4                 | ' '-------------------- fill
117c4                 | ' 
117c4                 | ' sub do_fill
117c4                 | _do_fill
117c4     03 4A 05 F6 | 	mov	COUNT_, #3
117c8     A8 00 A0 FD | 	call	#pushregs_
117cc     30 F0 07 F1 | 	add	ptra, #48
117d0     44 B2 BF FD | 	call	#_pop
117d4     FD 16 02 F6 | 	mov	arg03, result1
117d8     FE 14 02 F6 | 	mov	arg02, result2
117dc     FF 18 02 F6 | 	mov	arg04, result3
117e0     24 4E 05 F1 | 	add	fp, #36
117e4     A7 16 62 FC | 	wrlong	arg03, fp
117e8     04 4E 05 F1 | 	add	fp, #4
117ec     A7 14 62 FC | 	wrlong	arg02, fp
117f0     04 4E 05 F1 | 	add	fp, #4
117f4     A7 18 62 FC | 	wrlong	arg04, fp
117f8     2C 4E 85 F1 | 	sub	fp, #44
117fc     18 B2 BF FD | 	call	#_pop
11800     FD 16 02 F6 | 	mov	arg03, result1
11804     FE 14 02 F6 | 	mov	arg02, result2
11808     FF 18 02 F6 | 	mov	arg04, result3
1180c     18 4E 05 F1 | 	add	fp, #24
11810     A7 16 62 FC | 	wrlong	arg03, fp
11814     04 4E 05 F1 | 	add	fp, #4
11818     A7 14 62 FC | 	wrlong	arg02, fp
1181c     04 4E 05 F1 | 	add	fp, #4
11820     A7 18 62 FC | 	wrlong	arg04, fp
11824     20 4E 85 F1 | 	sub	fp, #32
11828     EC B1 BF FD | 	call	#_pop
1182c     FD 16 02 F6 | 	mov	arg03, result1
11830     FE 14 02 F6 | 	mov	arg02, result2
11834     FF 18 02 F6 | 	mov	arg04, result3
11838     0C 4E 05 F1 | 	add	fp, #12
1183c     A7 16 62 FC | 	wrlong	arg03, fp
11840     04 4E 05 F1 | 	add	fp, #4
11844     A7 14 62 FC | 	wrlong	arg02, fp
11848     04 4E 05 F1 | 	add	fp, #4
1184c     A7 18 62 FC | 	wrlong	arg04, fp
11850     14 4E 85 F1 | 	sub	fp, #20
11854     C0 B1 BF FD | 	call	#_pop
11858     FF 16 02 F6 | 	mov	arg03, result3
1185c     A7 FA 61 FC | 	wrlong	result1, fp
11860     04 4E 05 F1 | 	add	fp, #4
11864     A7 FC 61 FC | 	wrlong	result2, fp
11868     04 4E 05 F1 | 	add	fp, #4
1186c     A7 16 62 FC | 	wrlong	arg03, fp
11870     08 4E 85 F1 | 	sub	fp, #8
11874     A7 12 02 F6 | 	mov	arg01, fp
11878     80 B3 BF FD | 	call	#_converttoint
1187c     FD 26 02 F6 | 	mov	local01, result1
11880     0C 4E 05 F1 | 	add	fp, #12
11884     A7 12 02 F6 | 	mov	arg01, fp
11888     0C 4E 85 F1 | 	sub	fp, #12
1188c     6C B3 BF FD | 	call	#_converttoint
11890     FD 28 02 F6 | 	mov	local02, result1
11894     18 4E 05 F1 | 	add	fp, #24
11898     A7 12 02 F6 | 	mov	arg01, fp
1189c     18 4E 85 F1 | 	sub	fp, #24
118a0     58 B3 BF FD | 	call	#_converttoint
118a4     FD 2A 02 F6 | 	mov	local03, result1
118a8     24 4E 05 F1 | 	add	fp, #36
118ac     A7 12 02 F6 | 	mov	arg01, fp
118b0     24 4E 85 F1 | 	sub	fp, #36
118b4     44 B3 BF FD | 	call	#_converttoint
118b8     FD 18 02 F6 | 	mov	arg04, result1
118bc     13 13 02 F6 | 	mov	arg01, local01
118c0     14 15 02 F6 | 	mov	arg02, local02
118c4     15 17 02 F6 | 	mov	arg03, local03
118c8     D8 FF B0 FD | 	call	#_hg010b_spin2_fill
118cc     A7 F0 03 F6 | 	mov	ptra, fp
118d0     B2 00 A0 FD | 	call	#popregs_
118d4                 | _do_fill_ret
118d4     2D 00 64 FD | 	ret
118d8                 | 
118d8                 | ' 
118d8                 | ' '-------------------- font
118d8                 | ' 
118d8                 | ' sub do_font
118d8                 | _do_font
118d8     03 4A 05 F6 | 	mov	COUNT_, #3
118dc     A8 00 A0 FD | 	call	#pushregs_
118e0     34 B1 BF FD | 	call	#_pop
118e4     FD 26 02 F6 | 	mov	local01, result1
118e8     FE 28 02 F6 | 	mov	local02, result2
118ec     FF 2A 02 F6 | 	mov	local03, result3
118f0                 | ' 
118f0                 | ' t1=pop() 
118f0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
118f0     1E 2A 0E F2 | 	cmp	local03, #30 wz
118f4     10 00 90 5D |  if_ne	jmp	#LR__1450
118f8     13 13 02 F6 | 	mov	arg01, local01
118fc     00 14 06 F6 | 	mov	arg02, #0
11900     50 57 B1 FD | 	call	#__system___float_tointeger
11904     FD 26 02 F6 | 	mov	local01, result1
11908                 | LR__1450
11908                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
11908     1F 2A 0E F2 | 	cmp	local03, #31 wz
1190c     18 00 90 5D |  if_ne	jmp	#LR__1451
11910     13 13 02 F6 | 	mov	arg01, local01
11914     80 5A B1 FD | 	call	#__system____builtin_atof
11918     FD 12 02 F6 | 	mov	arg01, result1
1191c     00 14 06 F6 | 	mov	arg02, #0
11920     30 57 B1 FD | 	call	#__system___float_tointeger
11924     FD 26 02 F6 | 	mov	local01, result1
11928                 | LR__1451
11928     37 00 00 FF 
1192c     40 E4 05 F1 | 	add	objptr, ##28224
11930     F2 26 62 FC | 	wrlong	local01, objptr
11934     37 00 00 FF 
11938     40 E4 85 F1 | 	sub	objptr, ##28224
1193c     02 26 66 F0 | 	shl	local01, #2
11940     13 13 02 F6 | 	mov	arg01, local01
11944     40 06 B1 FD | 	call	#_hg010b_spin2_setfontfamily
11948     A7 F0 03 F6 | 	mov	ptra, fp
1194c     B2 00 A0 FD | 	call	#popregs_
11950                 | _do_font_ret
11950     2D 00 64 FD | 	ret
11954                 | 
11954                 | ' 
11954                 | ' '-------------------- for
11954                 | ' 
11954                 | ' sub do_for()
11954                 | _do_for
11954     01 4A 05 F6 | 	mov	COUNT_, #1
11958     A8 00 A0 FD | 	call	#pushregs_
1195c     10 F0 07 F1 | 	add	ptra, #16
11960     50 00 00 FF 
11964     08 E5 05 F1 | 	add	objptr, ##41224
11968     F2 12 02 FB | 	rdlong	arg01, objptr
1196c     01 12 06 F1 | 	add	arg01, #1
11970     F2 12 62 FC | 	wrlong	arg01, objptr
11974     50 00 00 FF 
11978     08 E5 85 F1 | 	sub	objptr, ##41224
1197c     98 B0 BF FD | 	call	#_pop
11980     A7 FA 61 FC | 	wrlong	result1, fp
11984     04 4E 05 F1 | 	add	fp, #4
11988     A7 FC 61 FC | 	wrlong	result2, fp
1198c     04 4E 05 F1 | 	add	fp, #4
11990     A7 FE 61 FC | 	wrlong	result3, fp
11994     08 4E 85 F1 | 	sub	fp, #8
11998     50 00 00 FF 
1199c     08 E5 05 F1 | 	add	objptr, ##41224
119a0     F2 12 02 FB | 	rdlong	arg01, objptr
119a4     09 27 02 F6 | 	mov	local01, arg01
119a8     02 26 66 F0 | 	shl	local01, #2
119ac     09 27 02 F1 | 	add	local01, arg01
119b0     02 26 66 F0 | 	shl	local01, #2
119b4     06 00 00 FF 
119b8     70 E4 85 F1 | 	sub	objptr, ##3184
119bc     F2 26 02 F1 | 	add	local01, objptr
119c0     A7 12 02 FB | 	rdlong	arg01, fp
119c4     08 26 06 F1 | 	add	local01, #8
119c8     13 13 62 FC | 	wrlong	arg01, local01
119cc     4A 00 00 FF 
119d0     98 E4 85 F1 | 	sub	objptr, ##38040
119d4     40 B0 BF FD | 	call	#_pop
119d8     A7 FA 61 FC | 	wrlong	result1, fp
119dc     04 4E 05 F1 | 	add	fp, #4
119e0     A7 FC 61 FC | 	wrlong	result2, fp
119e4     04 4E 05 F1 | 	add	fp, #4
119e8     A7 FE 61 FC | 	wrlong	result3, fp
119ec     08 4E 85 F1 | 	sub	fp, #8
119f0     50 00 00 FF 
119f4     08 E5 05 F1 | 	add	objptr, ##41224
119f8     F2 12 02 FB | 	rdlong	arg01, objptr
119fc     09 27 02 F6 | 	mov	local01, arg01
11a00     02 26 66 F0 | 	shl	local01, #2
11a04     09 27 02 F1 | 	add	local01, arg01
11a08     02 26 66 F0 | 	shl	local01, #2
11a0c     06 00 00 FF 
11a10     70 E4 85 F1 | 	sub	objptr, ##3184
11a14     F2 26 02 F1 | 	add	local01, objptr
11a18     A7 12 02 F6 | 	mov	arg01, fp
11a1c     4A 00 00 FF 
11a20     98 E4 85 F1 | 	sub	objptr, ##38040
11a24     D4 B1 BF FD | 	call	#_converttoint
11a28     FD 12 02 F6 | 	mov	arg01, result1
11a2c     0C 26 06 F1 | 	add	local01, #12
11a30     13 13 62 FC | 	wrlong	arg01, local01
11a34     E0 AF BF FD | 	call	#_pop
11a38     A7 FA 61 FC | 	wrlong	result1, fp
11a3c     04 4E 05 F1 | 	add	fp, #4
11a40     A7 FC 61 FC | 	wrlong	result2, fp
11a44     04 4E 05 F1 | 	add	fp, #4
11a48     A7 FE 61 FC | 	wrlong	result3, fp
11a4c     08 4E 85 F1 | 	sub	fp, #8
11a50     50 00 00 FF 
11a54     08 E5 05 F1 | 	add	objptr, ##41224
11a58     F2 12 02 FB | 	rdlong	arg01, objptr
11a5c     09 27 02 F6 | 	mov	local01, arg01
11a60     02 26 66 F0 | 	shl	local01, #2
11a64     09 27 02 F1 | 	add	local01, arg01
11a68     02 26 66 F0 | 	shl	local01, #2
11a6c     06 00 00 FF 
11a70     70 E4 85 F1 | 	sub	objptr, ##3184
11a74     F2 26 02 F1 | 	add	local01, objptr
11a78     A7 12 02 F6 | 	mov	arg01, fp
11a7c     4A 00 00 FF 
11a80     98 E4 85 F1 | 	sub	objptr, ##38040
11a84     74 B1 BF FD | 	call	#_converttoint
11a88     10 26 06 F1 | 	add	local01, #16
11a8c     13 FB 61 FC | 	wrlong	result1, local01
11a90                 | ' fortop+=1
11a90                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11a90                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11a90                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11a90                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11a90     4A 00 00 FF 
11a94     80 E4 05 F1 | 	add	objptr, ##38016
11a98     F2 12 02 FB | 	rdlong	arg01, objptr
11a9c     09 27 02 F6 | 	mov	local01, arg01
11aa0     01 26 66 F0 | 	shl	local01, #1
11aa4     09 27 02 F1 | 	add	local01, arg01
11aa8     02 26 66 F0 | 	shl	local01, #2
11aac     03 00 00 FF 
11ab0     04 E4 85 F1 | 	sub	objptr, ##1540
11ab4     F2 26 02 F1 | 	add	local01, objptr
11ab8     08 26 06 F1 | 	add	local01, #8
11abc     13 27 02 FB | 	rdlong	local01, local01
11ac0     FE 27 0E F2 | 	cmp	local01, #510 wz
11ac4     47 00 00 FF 
11ac8     7C E4 85 F1 | 	sub	objptr, ##36476
11acc     70 00 90 5D |  if_ne	jmp	#LR__1460
11ad0     50 00 00 FF 
11ad4     08 E5 05 F1 | 	add	objptr, ##41224
11ad8     F2 12 02 FB | 	rdlong	arg01, objptr
11adc     09 27 02 F6 | 	mov	local01, arg01
11ae0     02 26 66 F0 | 	shl	local01, #2
11ae4     09 27 02 F1 | 	add	local01, arg01
11ae8     02 26 66 F0 | 	shl	local01, #2
11aec     06 00 00 FF 
11af0     70 E4 85 F1 | 	sub	objptr, ##3184
11af4     F2 26 02 F1 | 	add	local01, objptr
11af8     06 00 00 FF 
11afc     20 E4 05 F1 | 	add	objptr, ##3104
11b00     F2 12 02 FB | 	rdlong	arg01, objptr
11b04     13 13 62 FC | 	wrlong	arg01, local01
11b08     50 E4 05 F1 | 	add	objptr, #80
11b0c     F2 12 02 FB | 	rdlong	arg01, objptr
11b10     09 27 02 F6 | 	mov	local01, arg01
11b14     02 26 66 F0 | 	shl	local01, #2
11b18     09 27 02 F1 | 	add	local01, arg01
11b1c     02 26 66 F0 | 	shl	local01, #2
11b20     06 00 00 FF 
11b24     70 E4 85 F1 | 	sub	objptr, ##3184
11b28     F2 26 02 F1 | 	add	local01, objptr
11b2c     04 26 06 F1 | 	add	local01, #4
11b30     13 01 68 FC | 	wrlong	#0, local01
11b34     4A 00 00 FF 
11b38     98 E4 85 F1 | 	sub	objptr, ##38040
11b3c     78 00 90 FD | 	jmp	#LR__1461
11b40                 | LR__1460
11b40     50 00 00 FF 
11b44     08 E5 05 F1 | 	add	objptr, ##41224
11b48     F2 12 02 FB | 	rdlong	arg01, objptr
11b4c     09 27 02 F6 | 	mov	local01, arg01
11b50     02 26 66 F0 | 	shl	local01, #2
11b54     09 27 02 F1 | 	add	local01, arg01
11b58     02 26 66 F0 | 	shl	local01, #2
11b5c     06 00 00 FF 
11b60     70 E4 85 F1 | 	sub	objptr, ##3184
11b64     F2 26 02 F1 | 	add	local01, objptr
11b68     06 00 00 FF 
11b6c     28 E4 05 F1 | 	add	objptr, ##3112
11b70     F2 12 02 FB | 	rdlong	arg01, objptr
11b74     13 13 62 FC | 	wrlong	arg01, local01
11b78     48 E4 05 F1 | 	add	objptr, #72
11b7c     F2 12 02 FB | 	rdlong	arg01, objptr
11b80     09 27 02 F6 | 	mov	local01, arg01
11b84     02 26 66 F0 | 	shl	local01, #2
11b88     09 27 02 F1 | 	add	local01, arg01
11b8c     02 26 66 F0 | 	shl	local01, #2
11b90     06 00 00 FF 
11b94     70 E4 85 F1 | 	sub	objptr, ##3184
11b98     F2 26 02 F1 | 	add	local01, objptr
11b9c     18 E4 85 F1 | 	sub	objptr, #24
11ba0     F2 12 02 FB | 	rdlong	arg01, objptr
11ba4     4A 00 00 FF 
11ba8     80 E4 85 F1 | 	sub	objptr, ##38016
11bac     01 12 06 F1 | 	add	arg01, #1
11bb0     04 26 06 F1 | 	add	local01, #4
11bb4     13 13 62 FC | 	wrlong	arg01, local01
11bb8                 | LR__1461
11bb8     A7 F0 03 F6 | 	mov	ptra, fp
11bbc     B2 00 A0 FD | 	call	#popregs_
11bc0                 | _do_for_ret
11bc0     2D 00 64 FD | 	ret
11bc4                 | 
11bc4                 | ' 
11bc4                 | ' '-------------------- frame
11bc4                 | ' 
11bc4                 | ' sub do_frame
11bc4                 | _do_frame
11bc4     03 4A 05 F6 | 	mov	COUNT_, #3
11bc8     A8 00 A0 FD | 	call	#pushregs_
11bcc     30 F0 07 F1 | 	add	ptra, #48
11bd0     44 AE BF FD | 	call	#_pop
11bd4     FD 16 02 F6 | 	mov	arg03, result1
11bd8     FE 14 02 F6 | 	mov	arg02, result2
11bdc     FF 1A 02 F6 | 	mov	arg05, result3
11be0     24 4E 05 F1 | 	add	fp, #36
11be4     A7 16 62 FC | 	wrlong	arg03, fp
11be8     04 4E 05 F1 | 	add	fp, #4
11bec     A7 14 62 FC | 	wrlong	arg02, fp
11bf0     04 4E 05 F1 | 	add	fp, #4
11bf4     A7 1A 62 FC | 	wrlong	arg05, fp
11bf8     2C 4E 85 F1 | 	sub	fp, #44
11bfc     18 AE BF FD | 	call	#_pop
11c00     FD 16 02 F6 | 	mov	arg03, result1
11c04     FE 14 02 F6 | 	mov	arg02, result2
11c08     FF 1A 02 F6 | 	mov	arg05, result3
11c0c     18 4E 05 F1 | 	add	fp, #24
11c10     A7 16 62 FC | 	wrlong	arg03, fp
11c14     04 4E 05 F1 | 	add	fp, #4
11c18     A7 14 62 FC | 	wrlong	arg02, fp
11c1c     04 4E 05 F1 | 	add	fp, #4
11c20     A7 1A 62 FC | 	wrlong	arg05, fp
11c24     20 4E 85 F1 | 	sub	fp, #32
11c28     EC AD BF FD | 	call	#_pop
11c2c     FD 16 02 F6 | 	mov	arg03, result1
11c30     FE 14 02 F6 | 	mov	arg02, result2
11c34     FF 1A 02 F6 | 	mov	arg05, result3
11c38     0C 4E 05 F1 | 	add	fp, #12
11c3c     A7 16 62 FC | 	wrlong	arg03, fp
11c40     04 4E 05 F1 | 	add	fp, #4
11c44     A7 14 62 FC | 	wrlong	arg02, fp
11c48     04 4E 05 F1 | 	add	fp, #4
11c4c     A7 1A 62 FC | 	wrlong	arg05, fp
11c50     14 4E 85 F1 | 	sub	fp, #20
11c54     C0 AD BF FD | 	call	#_pop
11c58     FF 16 02 F6 | 	mov	arg03, result3
11c5c     A7 FA 61 FC | 	wrlong	result1, fp
11c60     04 4E 05 F1 | 	add	fp, #4
11c64     A7 FC 61 FC | 	wrlong	result2, fp
11c68     04 4E 05 F1 | 	add	fp, #4
11c6c     A7 16 62 FC | 	wrlong	arg03, fp
11c70     08 4E 85 F1 | 	sub	fp, #8
11c74     A7 12 02 F6 | 	mov	arg01, fp
11c78     80 AF BF FD | 	call	#_converttoint
11c7c     FD 26 02 F6 | 	mov	local01, result1
11c80     0C 4E 05 F1 | 	add	fp, #12
11c84     A7 12 02 F6 | 	mov	arg01, fp
11c88     0C 4E 85 F1 | 	sub	fp, #12
11c8c     6C AF BF FD | 	call	#_converttoint
11c90     FD 28 02 F6 | 	mov	local02, result1
11c94     18 4E 05 F1 | 	add	fp, #24
11c98     A7 12 02 F6 | 	mov	arg01, fp
11c9c     18 4E 85 F1 | 	sub	fp, #24
11ca0     58 AF BF FD | 	call	#_converttoint
11ca4     FD 2A 02 F6 | 	mov	local03, result1
11ca8     24 4E 05 F1 | 	add	fp, #36
11cac     A7 12 02 F6 | 	mov	arg01, fp
11cb0     24 4E 85 F1 | 	sub	fp, #36
11cb4     44 AF BF FD | 	call	#_converttoint
11cb8     FD 18 02 F6 | 	mov	arg04, result1
11cbc     37 00 00 FF 
11cc0     28 E4 05 F1 | 	add	objptr, ##28200
11cc4     F2 1A 02 FB | 	rdlong	arg05, objptr
11cc8     37 00 00 FF 
11ccc     28 E4 85 F1 | 	sub	objptr, ##28200
11cd0     13 13 02 F6 | 	mov	arg01, local01
11cd4     14 15 02 F6 | 	mov	arg02, local02
11cd8     15 17 02 F6 | 	mov	arg03, local03
11cdc     B0 00 B1 FD | 	call	#_hg010b_spin2_frame
11ce0     A7 F0 03 F6 | 	mov	ptra, fp
11ce4     B2 00 A0 FD | 	call	#popregs_
11ce8                 | _do_frame_ret
11ce8     2D 00 64 FD | 	ret
11cec                 | 
11cec                 | ' 
11cec                 | ' '-------------------- framebuf
11cec                 | ' 
11cec                 | ' sub do_framebuf
11cec                 | _do_framebuf
11cec     00 4A 05 F6 | 	mov	COUNT_, #0
11cf0     A8 00 A0 FD | 	call	#pushregs_
11cf4     0C F0 07 F1 | 	add	ptra, #12
11cf8     08 4E 05 F1 | 	add	fp, #8
11cfc     A7 3A 68 FC | 	wrlong	#29, fp
11d00     F2 12 02 FB | 	rdlong	arg01, objptr
11d04     08 4E 85 F1 | 	sub	fp, #8
11d08     A7 12 62 FC | 	wrlong	arg01, fp
11d0c     A7 12 02 F6 | 	mov	arg01, fp
11d10     9C AD BF FD | 	call	#_push
11d14     A7 F0 03 F6 | 	mov	ptra, fp
11d18     B2 00 A0 FD | 	call	#popregs_
11d1c                 | _do_framebuf_ret
11d1c     2D 00 64 FD | 	ret
11d20                 | 
11d20                 | ' '-------------------- fre
11d20                 | ' 
11d20                 | ' sub do_fre
11d20                 | _do_fre
11d20     01 4A 05 F6 | 	mov	COUNT_, #1
11d24     A8 00 A0 FD | 	call	#pushregs_
11d28     0C F0 07 F1 | 	add	ptra, #12
11d2c     51 00 00 FF 
11d30     AC E5 05 F1 | 	add	objptr, ##41900
11d34     F2 12 02 FB | 	rdlong	arg01, objptr
11d38     0E 00 00 FF 
11d3c     50 E5 85 F1 | 	sub	objptr, ##7504
11d40     F2 26 02 FB | 	rdlong	local01, objptr
11d44     13 13 82 F1 | 	sub	arg01, local01
11d48     0E 00 00 FF 
11d4c     C4 E5 05 F1 | 	add	objptr, ##7620
11d50     F2 12 62 FC | 	wrlong	arg01, objptr
11d54     08 4E 05 F1 | 	add	fp, #8
11d58     A7 3A 68 FC | 	wrlong	#29, fp
11d5c     08 4E 85 F1 | 	sub	fp, #8
11d60     F2 26 02 FB | 	rdlong	local01, objptr
11d64     52 00 00 FF 
11d68     20 E4 85 F1 | 	sub	objptr, ##42016
11d6c     A7 26 62 FC | 	wrlong	local01, fp
11d70     A7 12 02 F6 | 	mov	arg01, fp
11d74     38 AD BF FD | 	call	#_push
11d78     A7 F0 03 F6 | 	mov	ptra, fp
11d7c     B2 00 A0 FD | 	call	#popregs_
11d80                 | _do_fre_ret
11d80     2D 00 64 FD | 	ret
11d84                 | 
11d84                 | ' 
11d84                 | ' '-------------------- get
11d84                 | ' 
11d84                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11d84                 | _do_get
11d84     09 4A 05 F6 | 	mov	COUNT_, #9
11d88     A8 00 A0 FD | 	call	#pushregs_
11d8c     40 F0 07 F1 | 	add	ptra, #64
11d90     4A 00 00 FF 
11d94     80 E4 05 F1 | 	add	objptr, ##38016
11d98     F2 1A 02 FB | 	rdlong	arg05, objptr
11d9c     0D 19 02 F6 | 	mov	arg04, arg05
11da0     01 18 66 F0 | 	shl	arg04, #1
11da4     0D 19 02 F1 | 	add	arg04, arg05
11da8     02 18 66 F0 | 	shl	arg04, #2
11dac     03 00 00 FF 
11db0     04 E4 85 F1 | 	sub	objptr, ##1540
11db4     F2 18 02 F1 | 	add	arg04, objptr
11db8     0C 1B 02 FB | 	rdlong	arg05, arg04
11dbc     A7 1A 62 FC | 	wrlong	arg05, fp
11dc0                 | ' 
11dc0                 | ' numpar=compiledline(lineptr_e).result.uresult
11dc0                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11dc0     04 1A 0E F2 | 	cmp	arg05, #4 wz
11dc4     47 00 00 FF 
11dc8     7C E4 85 F1 | 	sub	objptr, ##36476
11dcc     48 00 90 5D |  if_ne	jmp	#LR__1470
11dd0     44 AC BF FD | 	call	#_pop
11dd4     FF 1A 02 F6 | 	mov	arg05, result3
11dd8     1C 4E 05 F1 | 	add	fp, #28
11ddc     A7 FA 61 FC | 	wrlong	result1, fp
11de0     04 4E 05 F1 | 	add	fp, #4
11de4     A7 FC 61 FC | 	wrlong	result2, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 1A 62 FC | 	wrlong	arg05, fp
11df0     08 4E 85 F1 | 	sub	fp, #8
11df4     A7 12 02 F6 | 	mov	arg01, fp
11df8     1C 4E 85 F1 | 	sub	fp, #28
11dfc     FC AD BF FD | 	call	#_converttoint
11e00     52 00 00 FF 
11e04     1C E4 05 F1 | 	add	objptr, ##42012
11e08     F2 FA 61 FC | 	wrlong	result1, objptr
11e0c     52 00 00 FF 
11e10     1C E4 85 F1 | 	sub	objptr, ##42012
11e14     18 00 90 FD | 	jmp	#LR__1471
11e18                 | LR__1470
11e18     52 00 00 FF 
11e1c     1C E4 05 F1 | 	add	objptr, ##42012
11e20     FF FF FF FF 
11e24     F2 FE 6B FC | 	wrlong	##-1, objptr
11e28     52 00 00 FF 
11e2c     1C E4 85 F1 | 	sub	objptr, ##42012
11e30                 | LR__1471
11e30                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11e30     A7 16 02 FB | 	rdlong	arg03, fp
11e34     03 16 56 F2 | 	cmps	arg03, #3 wc
11e38     40 00 90 CD |  if_b	jmp	#LR__1472
11e3c     D8 AB BF FD | 	call	#_pop
11e40     FF 16 02 F6 | 	mov	arg03, result3
11e44     1C 4E 05 F1 | 	add	fp, #28
11e48     A7 FA 61 FC | 	wrlong	result1, fp
11e4c     04 4E 05 F1 | 	add	fp, #4
11e50     A7 FC 61 FC | 	wrlong	result2, fp
11e54     04 4E 05 F1 | 	add	fp, #4
11e58     A7 16 62 FC | 	wrlong	arg03, fp
11e5c     08 4E 85 F1 | 	sub	fp, #8
11e60     A7 12 02 F6 | 	mov	arg01, fp
11e64     1C 4E 85 F1 | 	sub	fp, #28
11e68     90 AD BF FD | 	call	#_converttoint
11e6c     08 4E 05 F1 | 	add	fp, #8
11e70     A7 FA 61 FC | 	wrlong	result1, fp
11e74     08 4E 85 F1 | 	sub	fp, #8
11e78     0C 00 90 FD | 	jmp	#LR__1473
11e7c                 | LR__1472
11e7c     08 4E 05 F1 | 	add	fp, #8
11e80     A7 02 68 FC | 	wrlong	#1, fp
11e84     08 4E 85 F1 | 	sub	fp, #8
11e88                 | LR__1473
11e88                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
11e88     A7 16 02 FB | 	rdlong	arg03, fp
11e8c     02 16 56 F2 | 	cmps	arg03, #2 wc
11e90     3C 00 90 CD |  if_b	jmp	#LR__1474
11e94     80 AB BF FD | 	call	#_pop
11e98     FF 16 02 F6 | 	mov	arg03, result3
11e9c     1C 4E 05 F1 | 	add	fp, #28
11ea0     A7 FA 61 FC | 	wrlong	result1, fp
11ea4     04 4E 05 F1 | 	add	fp, #4
11ea8     A7 FC 61 FC | 	wrlong	result2, fp
11eac     04 4E 05 F1 | 	add	fp, #4
11eb0     A7 16 62 FC | 	wrlong	arg03, fp
11eb4     08 4E 85 F1 | 	sub	fp, #8
11eb8     A7 12 02 F6 | 	mov	arg01, fp
11ebc     1C 4E 85 F1 | 	sub	fp, #28
11ec0     38 AD BF FD | 	call	#_converttoint
11ec4     0C 4E 05 F1 | 	add	fp, #12
11ec8     A7 FA 61 FC | 	wrlong	result1, fp
11ecc     0C 4E 85 F1 | 	sub	fp, #12
11ed0                 | LR__1474
11ed0     44 AB BF FD | 	call	#_pop
11ed4     FF 16 02 F6 | 	mov	arg03, result3
11ed8     1C 4E 05 F1 | 	add	fp, #28
11edc     A7 FA 61 FC | 	wrlong	result1, fp
11ee0     04 4E 05 F1 | 	add	fp, #4
11ee4     A7 FC 61 FC | 	wrlong	result2, fp
11ee8     04 4E 05 F1 | 	add	fp, #4
11eec     A7 16 62 FC | 	wrlong	arg03, fp
11ef0     08 4E 85 F1 | 	sub	fp, #8
11ef4     A7 12 02 F6 | 	mov	arg01, fp
11ef8     1C 4E 85 F1 | 	sub	fp, #28
11efc     FC AC BF FD | 	call	#_converttoint
11f00     04 4E 05 F1 | 	add	fp, #4
11f04     A7 FA 61 FC | 	wrlong	result1, fp
11f08     10 4E 05 F1 | 	add	fp, #16
11f0c     A7 16 02 FB | 	rdlong	arg03, fp
11f10     14 4E 85 F1 | 	sub	fp, #20
11f14     02 16 66 F0 | 	shl	arg03, #2
11f18     50 00 00 FF 
11f1c     C4 E4 05 F1 | 	add	objptr, ##41156
11f20     F2 26 02 F6 | 	mov	local01, objptr
11f24     F2 16 02 F1 | 	add	arg03, objptr
11f28     0B 01 68 FC | 	wrlong	#0, arg03
11f2c                 | ' t1=pop() : channel=converttoint(t1)
11f2c                 | ' getres(j)=0
11f2c                 | ' if pos>=0 then
11f2c     01 00 00 FF 
11f30     58 E5 05 F1 | 	add	objptr, ##856
11f34     F2 28 02 FB | 	rdlong	local02, objptr
11f38     52 00 00 FF 
11f3c     1C E4 85 F1 | 	sub	objptr, ##42012
11f40     00 28 56 F2 | 	cmps	local02, #0 wc
11f44     F0 01 90 CD |  if_b	jmp	#LR__1481
11f48                 | '   for i=0 to  amount/1024
11f48     10 4E 05 F1 | 	add	fp, #16
11f4c     A7 00 68 FC | 	wrlong	#0, fp
11f50     08 4E 85 F1 | 	sub	fp, #8
11f54     A7 2A 02 FB | 	rdlong	local03, fp
11f58     08 4E 85 F1 | 	sub	fp, #8
11f5c     15 2D 52 F6 | 	abs	local04, local03 wc
11f60     0A 2C 46 F0 | 	shr	local04, #10
11f64     16 2D 82 F6 | 	negc	local04, local04
11f68     01 2C 06 F1 | 	add	local04, #1
11f6c                 | LR__1475
11f6c     10 4E 05 F1 | 	add	fp, #16
11f70     A7 2A 02 FB | 	rdlong	local03, fp
11f74     10 4E 85 F1 | 	sub	fp, #16
11f78     16 2B 52 F2 | 	cmps	local03, local04 wc
11f7c     9C 03 90 3D |  if_ae	jmp	#LR__1489
11f80                 | '     get #channel,pos+1,block(0),amount,r
11f80     04 4E 05 F1 | 	add	fp, #4
11f84     A7 12 02 FB | 	rdlong	arg01, fp
11f88     52 00 00 FF 
11f8c     1C E4 05 F1 | 	add	objptr, ##42012
11f90     F2 14 02 FB | 	rdlong	arg02, objptr
11f94     01 14 06 F1 | 	add	arg02, #1
11f98     03 00 00 FF 
11f9c     68 E5 85 F1 | 	sub	objptr, ##1896
11fa0     F2 16 02 F6 | 	mov	arg03, objptr
11fa4     4E 00 00 FF 
11fa8     B4 E4 85 F1 | 	sub	objptr, ##40116
11fac     04 4E 05 F1 | 	add	fp, #4
11fb0     A7 18 02 FB | 	rdlong	arg04, fp
11fb4     08 4E 85 F1 | 	sub	fp, #8
11fb8     01 1A 06 F6 | 	mov	arg05, #1
11fbc     C4 2B B1 FD | 	call	#__system___basic_get
11fc0     18 4E 05 F1 | 	add	fp, #24
11fc4     A7 FA 61 FC | 	wrlong	result1, fp
11fc8                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
11fc8     0C 4E 85 F1 | 	sub	fp, #12
11fcc     A7 28 02 FB | 	rdlong	local02, fp
11fd0     0C 4E 85 F1 | 	sub	fp, #12
11fd4     00 04 00 FF 
11fd8     00 28 56 F2 | 	cmps	local02, ##524288 wc
11fdc     7C 00 90 3D |  if_ae	jmp	#LR__1477
11fe0     14 4E 05 F1 | 	add	fp, #20
11fe4     A7 00 68 FC | 	wrlong	#0, fp
11fe8     04 4E 05 F1 | 	add	fp, #4
11fec     A7 2E 02 FB | 	rdlong	local05, fp
11ff0     18 4E 85 F1 | 	sub	fp, #24
11ff4                 | LR__1476
11ff4     14 4E 05 F1 | 	add	fp, #20
11ff8     A7 28 02 FB | 	rdlong	local02, fp
11ffc     14 4E 85 F1 | 	sub	fp, #20
12000     17 29 52 F2 | 	cmps	local02, local05 wc
12004     D8 00 90 3D |  if_ae	jmp	#LR__1480
12008     0C 4E 05 F1 | 	add	fp, #12
1200c     A7 12 02 FB | 	rdlong	arg01, fp
12010     04 4E 05 F1 | 	add	fp, #4
12014     A7 2A 02 FB | 	rdlong	local03, fp
12018     0A 2A 66 F0 | 	shl	local03, #10
1201c     15 13 02 F1 | 	add	arg01, local03
12020     04 4E 05 F1 | 	add	fp, #4
12024     A7 2A 02 FB | 	rdlong	local03, fp
12028     15 13 02 F1 | 	add	arg01, local03
1202c     4E 00 00 FF 
12030     B4 E4 05 F1 | 	add	objptr, ##40116
12034     F2 2A 02 F1 | 	add	local03, objptr
12038     15 15 C2 FA | 	rdbyte	arg02, local03
1203c     09 15 42 FC | 	wrbyte	arg02, arg01
12040     4E 00 00 FF 
12044     B4 E4 85 F1 | 	sub	objptr, ##40116
12048     A7 2A 02 FB | 	rdlong	local03, fp
1204c     01 2A 06 F1 | 	add	local03, #1
12050     A7 2A 62 FC | 	wrlong	local03, fp
12054     14 4E 85 F1 | 	sub	fp, #20
12058     98 FF 9F FD | 	jmp	#LR__1476
1205c                 | LR__1477
1205c     14 4E 05 F1 | 	add	fp, #20
12060     A7 00 68 FC | 	wrlong	#0, fp
12064     04 4E 05 F1 | 	add	fp, #4
12068     A7 30 02 FB | 	rdlong	local06, fp
1206c     18 4E 85 F1 | 	sub	fp, #24
12070                 | LR__1478
12070     14 4E 05 F1 | 	add	fp, #20
12074     A7 28 02 FB | 	rdlong	local02, fp
12078     14 4E 85 F1 | 	sub	fp, #20
1207c     18 29 52 F2 | 	cmps	local02, local06 wc
12080     5C 00 90 3D |  if_ae	jmp	#LR__1479
12084     0C 4E 05 F1 | 	add	fp, #12
12088     A7 12 02 FB | 	rdlong	arg01, fp
1208c     04 4E 05 F1 | 	add	fp, #4
12090     A7 2E 02 FB | 	rdlong	local05, fp
12094     0A 2E 66 F0 | 	shl	local05, #10
12098     17 13 02 F1 | 	add	arg01, local05
1209c     04 4E 05 F1 | 	add	fp, #4
120a0     A7 2E 02 FB | 	rdlong	local05, fp
120a4     17 13 02 F1 | 	add	arg01, local05
120a8     14 4E 85 F1 | 	sub	fp, #20
120ac     4E 00 00 FF 
120b0     B4 E4 05 F1 | 	add	objptr, ##40116
120b4     F2 2E 02 F1 | 	add	local05, objptr
120b8     17 15 C2 FA | 	rdbyte	arg02, local05
120bc     4E 00 00 FF 
120c0     B4 E4 85 F1 | 	sub	objptr, ##40116
120c4     D8 E4 B0 FD | 	call	#_pspoke
120c8     14 4E 05 F1 | 	add	fp, #20
120cc     A7 2E 02 FB | 	rdlong	local05, fp
120d0     01 2E 06 F1 | 	add	local05, #1
120d4     A7 2E 62 FC | 	wrlong	local05, fp
120d8     14 4E 85 F1 | 	sub	fp, #20
120dc     90 FF 9F FD | 	jmp	#LR__1478
120e0                 | LR__1479
120e0                 | LR__1480
120e0     14 4E 05 F1 | 	add	fp, #20
120e4     A7 30 02 FB | 	rdlong	local06, fp
120e8     18 2B 02 F6 | 	mov	local03, local06
120ec     02 2A 66 F0 | 	shl	local03, #2
120f0     50 00 00 FF 
120f4     C4 E4 05 F1 | 	add	objptr, ##41156
120f8     F2 2A 02 F1 | 	add	local03, objptr
120fc     02 30 66 F0 | 	shl	local06, #2
12100     F2 30 02 F1 | 	add	local06, objptr
12104     18 31 02 FB | 	rdlong	local06, local06
12108     04 4E 05 F1 | 	add	fp, #4
1210c     A7 2E 02 FB | 	rdlong	local05, fp
12110     17 31 02 F1 | 	add	local06, local05
12114     15 31 62 FC | 	wrlong	local06, local03
12118     08 4E 85 F1 | 	sub	fp, #8
1211c     A7 30 02 FB | 	rdlong	local06, fp
12120     01 30 06 F1 | 	add	local06, #1
12124     A7 30 62 FC | 	wrlong	local06, fp
12128     10 4E 85 F1 | 	sub	fp, #16
1212c     50 00 00 FF 
12130     C4 E4 85 F1 | 	sub	objptr, ##41156
12134     34 FE 9F FD | 	jmp	#LR__1475
12138                 | LR__1481
12138                 | '   for i=0 to  amount/1024
12138     10 4E 05 F1 | 	add	fp, #16
1213c     A7 00 68 FC | 	wrlong	#0, fp
12140     08 4E 85 F1 | 	sub	fp, #8
12144     A7 2A 02 FB | 	rdlong	local03, fp
12148     08 4E 85 F1 | 	sub	fp, #8
1214c     15 33 52 F6 | 	abs	local07, local03 wc
12150     0A 32 46 F0 | 	shr	local07, #10
12154     19 33 82 F6 | 	negc	local07, local07
12158     01 32 06 F1 | 	add	local07, #1
1215c                 | LR__1482
1215c     10 4E 05 F1 | 	add	fp, #16
12160     A7 2A 02 FB | 	rdlong	local03, fp
12164     10 4E 85 F1 | 	sub	fp, #16
12168     19 2B 52 F2 | 	cmps	local03, local07 wc
1216c     AC 01 90 3D |  if_ae	jmp	#LR__1488
12170                 | '     get #channel,,block(0),amount,r
12170     04 4E 05 F1 | 	add	fp, #4
12174     A7 12 02 FB | 	rdlong	arg01, fp
12178     4E 00 00 FF 
1217c     B4 E4 05 F1 | 	add	objptr, ##40116
12180     F2 16 02 F6 | 	mov	arg03, objptr
12184     4E 00 00 FF 
12188     B4 E4 85 F1 | 	sub	objptr, ##40116
1218c     04 4E 05 F1 | 	add	fp, #4
12190     A7 18 02 FB | 	rdlong	arg04, fp
12194     08 4E 85 F1 | 	sub	fp, #8
12198     00 14 06 F6 | 	mov	arg02, #0
1219c     01 1A 06 F6 | 	mov	arg05, #1
121a0     E0 29 B1 FD | 	call	#__system___basic_get
121a4     18 4E 05 F1 | 	add	fp, #24
121a8     A7 FA 61 FC | 	wrlong	result1, fp
121ac                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
121ac     0C 4E 85 F1 | 	sub	fp, #12
121b0     A7 28 02 FB | 	rdlong	local02, fp
121b4     0C 4E 85 F1 | 	sub	fp, #12
121b8     00 04 00 FF 
121bc     00 28 56 F2 | 	cmps	local02, ##524288 wc
121c0     7C 00 90 3D |  if_ae	jmp	#LR__1484
121c4     14 4E 05 F1 | 	add	fp, #20
121c8     A7 00 68 FC | 	wrlong	#0, fp
121cc     04 4E 05 F1 | 	add	fp, #4
121d0     A7 34 02 FB | 	rdlong	local08, fp
121d4     18 4E 85 F1 | 	sub	fp, #24
121d8                 | LR__1483
121d8     14 4E 05 F1 | 	add	fp, #20
121dc     A7 28 02 FB | 	rdlong	local02, fp
121e0     14 4E 85 F1 | 	sub	fp, #20
121e4     1A 29 52 F2 | 	cmps	local02, local08 wc
121e8     D8 00 90 3D |  if_ae	jmp	#LR__1487
121ec     0C 4E 05 F1 | 	add	fp, #12
121f0     A7 12 02 FB | 	rdlong	arg01, fp
121f4     04 4E 05 F1 | 	add	fp, #4
121f8     A7 30 02 FB | 	rdlong	local06, fp
121fc     0A 30 66 F0 | 	shl	local06, #10
12200     18 13 02 F1 | 	add	arg01, local06
12204     04 4E 05 F1 | 	add	fp, #4
12208     A7 30 02 FB | 	rdlong	local06, fp
1220c     18 13 02 F1 | 	add	arg01, local06
12210     4E 00 00 FF 
12214     B4 E4 05 F1 | 	add	objptr, ##40116
12218     F2 30 02 F1 | 	add	local06, objptr
1221c     18 15 C2 FA | 	rdbyte	arg02, local06
12220     09 15 42 FC | 	wrbyte	arg02, arg01
12224     4E 00 00 FF 
12228     B4 E4 85 F1 | 	sub	objptr, ##40116
1222c     A7 30 02 FB | 	rdlong	local06, fp
12230     01 30 06 F1 | 	add	local06, #1
12234     A7 30 62 FC | 	wrlong	local06, fp
12238     14 4E 85 F1 | 	sub	fp, #20
1223c     98 FF 9F FD | 	jmp	#LR__1483
12240                 | LR__1484
12240     14 4E 05 F1 | 	add	fp, #20
12244     A7 00 68 FC | 	wrlong	#0, fp
12248     04 4E 05 F1 | 	add	fp, #4
1224c     A7 36 02 FB | 	rdlong	local09, fp
12250     18 4E 85 F1 | 	sub	fp, #24
12254                 | LR__1485
12254     14 4E 05 F1 | 	add	fp, #20
12258     A7 28 02 FB | 	rdlong	local02, fp
1225c     14 4E 85 F1 | 	sub	fp, #20
12260     1B 29 52 F2 | 	cmps	local02, local09 wc
12264     5C 00 90 3D |  if_ae	jmp	#LR__1486
12268     0C 4E 05 F1 | 	add	fp, #12
1226c     A7 12 02 FB | 	rdlong	arg01, fp
12270     04 4E 05 F1 | 	add	fp, #4
12274     A7 34 02 FB | 	rdlong	local08, fp
12278     0A 34 66 F0 | 	shl	local08, #10
1227c     1A 13 02 F1 | 	add	arg01, local08
12280     04 4E 05 F1 | 	add	fp, #4
12284     A7 34 02 FB | 	rdlong	local08, fp
12288     1A 13 02 F1 | 	add	arg01, local08
1228c     14 4E 85 F1 | 	sub	fp, #20
12290     4E 00 00 FF 
12294     B4 E4 05 F1 | 	add	objptr, ##40116
12298     F2 34 02 F1 | 	add	local08, objptr
1229c     1A 15 C2 FA | 	rdbyte	arg02, local08
122a0     4E 00 00 FF 
122a4     B4 E4 85 F1 | 	sub	objptr, ##40116
122a8     F4 E2 B0 FD | 	call	#_pspoke
122ac     14 4E 05 F1 | 	add	fp, #20
122b0     A7 34 02 FB | 	rdlong	local08, fp
122b4     01 34 06 F1 | 	add	local08, #1
122b8     A7 34 62 FC | 	wrlong	local08, fp
122bc     14 4E 85 F1 | 	sub	fp, #20
122c0     90 FF 9F FD | 	jmp	#LR__1485
122c4                 | LR__1486
122c4                 | LR__1487
122c4     14 4E 05 F1 | 	add	fp, #20
122c8     A7 36 02 FB | 	rdlong	local09, fp
122cc     1B 31 02 F6 | 	mov	local06, local09
122d0     02 30 66 F0 | 	shl	local06, #2
122d4     50 00 00 FF 
122d8     C4 E4 05 F1 | 	add	objptr, ##41156
122dc     F2 30 02 F1 | 	add	local06, objptr
122e0     02 36 66 F0 | 	shl	local09, #2
122e4     F2 36 02 F1 | 	add	local09, objptr
122e8     1B 37 02 FB | 	rdlong	local09, local09
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 34 02 FB | 	rdlong	local08, fp
122f4     1A 37 02 F1 | 	add	local09, local08
122f8     18 37 62 FC | 	wrlong	local09, local06
122fc     08 4E 85 F1 | 	sub	fp, #8
12300     A7 36 02 FB | 	rdlong	local09, fp
12304     01 36 06 F1 | 	add	local09, #1
12308     A7 36 62 FC | 	wrlong	local09, fp
1230c     10 4E 85 F1 | 	sub	fp, #16
12310     50 00 00 FF 
12314     C4 E4 85 F1 | 	sub	objptr, ##41156
12318     40 FE 9F FD | 	jmp	#LR__1482
1231c                 | LR__1488
1231c                 | LR__1489
1231c     A7 F0 03 F6 | 	mov	ptra, fp
12320     B2 00 A0 FD | 	call	#popregs_
12324                 | _do_get_ret
12324     2D 00 64 FD | 	ret
12328                 | 
12328                 | ' 
12328                 | ' '-------------------- getenvsustain
12328                 | ' 
12328                 | ' sub do_getenvsustain
12328                 | _do_getenvsustain
12328     01 4A 05 F6 | 	mov	COUNT_, #1
1232c     A8 00 A0 FD | 	call	#pushregs_
12330     10 F0 07 F1 | 	add	ptra, #16
12334     4A 00 00 FF 
12338     80 E4 05 F1 | 	add	objptr, ##38016
1233c     F2 26 02 FB | 	rdlong	local01, objptr
12340     13 17 02 F6 | 	mov	arg03, local01
12344     01 16 66 F0 | 	shl	arg03, #1
12348     13 17 02 F1 | 	add	arg03, local01
1234c     02 16 66 F0 | 	shl	arg03, #2
12350     03 00 00 FF 
12354     04 E4 85 F1 | 	sub	objptr, ##1540
12358     F2 16 02 F1 | 	add	arg03, objptr
1235c     0B 17 02 FB | 	rdlong	arg03, arg03
12360     0C 4E 05 F1 | 	add	fp, #12
12364     A7 16 62 FC | 	wrlong	arg03, fp
12368                 | ' 
12368                 | ' numpar=compiledline(lineptr_e).result.uresult
12368                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12368     0C 4E 85 F1 | 	sub	fp, #12
1236c     02 16 16 F2 | 	cmp	arg03, #2 wc
12370     47 00 00 FF 
12374     7C E4 85 F1 | 	sub	objptr, ##36476
12378     0C 4E 05 C1 |  if_b	add	fp, #12
1237c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12380     0C 4E 85 C1 |  if_b	sub	fp, #12
12384     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12388     00 12 06 F6 | 	mov	arg01, #0
1238c     AC 76 B1 FD | 	call	#__system___getiolock_0573
12390     FD 12 02 F6 | 	mov	arg01, result1
12394     7C 19 B1 FD | 	call	#__system___lockmem
12398     A0 01 00 FF 
1239c     34 15 06 F6 | 	mov	arg02, ##@LR__5731
123a0     00 12 06 F6 | 	mov	arg01, #0
123a4     00 16 06 F6 | 	mov	arg03, #0
123a8     5C 26 B1 FD | 	call	#__system___basic_print_string
123ac     00 12 06 F6 | 	mov	arg01, #0
123b0     88 76 B1 FD | 	call	#__system___getiolock_0573
123b4     FD 00 68 FC | 	wrlong	#0, result1
123b8     27 12 06 F6 | 	mov	arg01, #39
123bc     00 14 06 F6 | 	mov	arg02, #0
123c0     C0 DF B0 FD | 	call	#_printerror
123c4     64 00 90 FD | 	jmp	#LR__1491
123c8                 | LR__1490
123c8     4C A6 BF FD | 	call	#_pop
123cc     FD 26 02 F6 | 	mov	local01, result1
123d0     FE 16 02 F6 | 	mov	arg03, result2
123d4     A7 26 62 FC | 	wrlong	local01, fp
123d8     04 4E 05 F1 | 	add	fp, #4
123dc     A7 16 62 FC | 	wrlong	arg03, fp
123e0     04 4E 05 F1 | 	add	fp, #4
123e4     A7 FE 61 FC | 	wrlong	result3, fp
123e8     08 4E 85 F1 | 	sub	fp, #8
123ec     A7 12 02 F6 | 	mov	arg01, fp
123f0     08 A8 BF FD | 	call	#_converttoint
123f4     FD 26 02 F6 | 	mov	local01, result1
123f8     01 26 66 F0 | 	shl	local01, #1
123fc     51 00 00 FF 
12400     C8 E5 05 F1 | 	add	objptr, ##41928
12404     F2 26 02 F1 | 	add	local01, objptr
12408     13 27 E2 FA | 	rdword	local01, local01
1240c     A7 26 62 FC | 	wrlong	local01, fp
12410     08 4E 05 F1 | 	add	fp, #8
12414     A7 38 68 FC | 	wrlong	#28, fp
12418     08 4E 85 F1 | 	sub	fp, #8
1241c     A7 12 02 F6 | 	mov	arg01, fp
12420     51 00 00 FF 
12424     C8 E5 85 F1 | 	sub	objptr, ##41928
12428     84 A6 BF FD | 	call	#_push
1242c                 | LR__1491
1242c     A7 F0 03 F6 | 	mov	ptra, fp
12430     B2 00 A0 FD | 	call	#popregs_
12434                 | _do_getenvsustain_ret
12434     2D 00 64 FD | 	ret
12438                 | 
12438                 | ' 
12438                 | ' '-------------------- getnotevalue
12438                 | ' 
12438                 | ' sub do_getnotevalue
12438                 | _do_getnotevalue
12438     01 4A 05 F6 | 	mov	COUNT_, #1
1243c     A8 00 A0 FD | 	call	#pushregs_
12440     1C F0 07 F1 | 	add	ptra, #28
12444     D0 A5 BF FD | 	call	#_pop
12448     FF 14 02 F6 | 	mov	arg02, result3
1244c     10 4E 05 F1 | 	add	fp, #16
12450     A7 FA 61 FC | 	wrlong	result1, fp
12454     04 4E 05 F1 | 	add	fp, #4
12458     A7 FC 61 FC | 	wrlong	result2, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 14 62 FC | 	wrlong	arg02, fp
12464     08 4E 85 F1 | 	sub	fp, #8
12468     A7 12 02 F6 | 	mov	arg01, fp
1246c     10 4E 85 F1 | 	sub	fp, #16
12470     88 A7 BF FD | 	call	#_converttoint
12474     FD 14 52 F6 | 	abs	arg02, result1 wc
12478     0C 14 16 FD | 	qdiv	arg02, #12
1247c     0C 4E 05 F1 | 	add	fp, #12
12480     A7 FA 61 FC | 	wrlong	result1, fp
12484     14 00 00 FF 
12488     D8 E4 05 F1 | 	add	objptr, ##10456
1248c     08 4E 85 F1 | 	sub	fp, #8
12490     19 14 62 FD | 	getqy	arg02
12494     0A 15 82 F6 | 	negc	arg02, arg02
12498     02 14 66 F0 | 	shl	arg02, #2
1249c     F2 14 02 F1 | 	add	arg02, objptr
124a0     0A 15 02 FB | 	rdlong	arg02, arg02
124a4     A7 14 62 FC | 	wrlong	arg02, fp
124a8     08 4E 05 F1 | 	add	fp, #8
124ac     A7 14 02 FB | 	rdlong	arg02, fp
124b0     0A 15 52 F6 | 	abs	arg02, arg02 wc
124b4     0C 14 16 FD | 	qdiv	arg02, #12
124b8     0C 4E 85 F1 | 	sub	fp, #12
124bc     14 00 00 FF 
124c0     D8 E4 85 F1 | 	sub	objptr, ##10456
124c4     18 14 62 FD | 	getqx	arg02
124c8     0A 13 82 F6 | 	negc	arg01, arg02
124cc     09 13 52 F6 | 	abs	arg01, arg01 wc
124d0     1F 26 C6 C9 |  if_b	decod	local01, #31
124d4     00 26 06 36 |  if_ae	mov	local01, #0
124d8     AC 42 B1 FD | 	call	#__system___float_fromuns
124dc     13 FB 61 F5 | 	xor	result1, local01
124e0     08 4E 05 F1 | 	add	fp, #8
124e4     A7 FA 61 FC | 	wrlong	result1, fp
124e8     FD 14 02 F6 | 	mov	arg02, result1
124ec     08 4E 85 F1 | 	sub	fp, #8
124f0     1E 12 C6 F9 | 	decod	arg01, #30
124f4     9C 55 B1 FD | 	call	#__system____builtin_powf
124f8     FD 12 02 F6 | 	mov	arg01, result1
124fc     04 4E 05 F1 | 	add	fp, #4
12500     A7 14 02 FB | 	rdlong	arg02, fp
12504     04 4E 85 F1 | 	sub	fp, #4
12508     80 46 B1 FD | 	call	#__system___float_mul
1250c     A7 FA 61 FC | 	wrlong	result1, fp
12510     10 4E 05 F1 | 	add	fp, #16
12514     A7 FA 61 FC | 	wrlong	result1, fp
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 3C 68 FC | 	wrlong	#30, fp
12520     08 4E 85 F1 | 	sub	fp, #8
12524     A7 12 02 F6 | 	mov	arg01, fp
12528     10 4E 85 F1 | 	sub	fp, #16
1252c     80 A5 BF FD | 	call	#_push
12530     A7 F0 03 F6 | 	mov	ptra, fp
12534     B2 00 A0 FD | 	call	#popregs_
12538                 | _do_getnotevalue_ret
12538     2D 00 64 FD | 	ret
1253c                 | 
1253c                 | ' 
1253c                 | ' '-------------------- getpixel
1253c                 | ' 
1253c                 | ' sub do_getpixel
1253c                 | _do_getpixel
1253c     00 4A 05 F6 | 	mov	COUNT_, #0
12540     A8 00 A0 FD | 	call	#pushregs_
12544     24 F0 07 F1 | 	add	ptra, #36
12548     4A 00 00 FF 
1254c     80 E4 05 F1 | 	add	objptr, ##38016
12550     F2 16 02 FB | 	rdlong	arg03, objptr
12554     0B 15 02 F6 | 	mov	arg02, arg03
12558     01 14 66 F0 | 	shl	arg02, #1
1255c     0B 15 02 F1 | 	add	arg02, arg03
12560     02 14 66 F0 | 	shl	arg02, #2
12564     03 00 00 FF 
12568     04 E4 85 F1 | 	sub	objptr, ##1540
1256c     F2 14 02 F1 | 	add	arg02, objptr
12570     0A 17 02 FB | 	rdlong	arg03, arg02
12574     18 4E 05 F1 | 	add	fp, #24
12578     A7 16 62 FC | 	wrlong	arg03, fp
1257c                 | ' 
1257c                 | ' numpar=compiledline(lineptr_e).result.uresult
1257c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
1257c     18 4E 85 F1 | 	sub	fp, #24
12580     02 16 0E F2 | 	cmp	arg03, #2 wz
12584     47 00 00 FF 
12588     7C E4 85 F1 | 	sub	objptr, ##36476
1258c     40 00 90 AD |  if_e	jmp	#LR__1500
12590     00 12 06 F6 | 	mov	arg01, #0
12594     A4 74 B1 FD | 	call	#__system___getiolock_0573
12598     FD 12 02 F6 | 	mov	arg01, result1
1259c     74 17 B1 FD | 	call	#__system___lockmem
125a0     A0 01 00 FF 
125a4     44 15 06 F6 | 	mov	arg02, ##@LR__5732
125a8     00 12 06 F6 | 	mov	arg01, #0
125ac     00 16 06 F6 | 	mov	arg03, #0
125b0     54 24 B1 FD | 	call	#__system___basic_print_string
125b4     00 12 06 F6 | 	mov	arg01, #0
125b8     80 74 B1 FD | 	call	#__system___getiolock_0573
125bc     FD 00 68 FC | 	wrlong	#0, result1
125c0     27 12 06 F6 | 	mov	arg01, #39
125c4     00 14 06 F6 | 	mov	arg02, #0
125c8     B8 DD B0 FD | 	call	#_printerror
125cc     B4 00 90 FD | 	jmp	#LR__1501
125d0                 | LR__1500
125d0     44 A4 BF FD | 	call	#_pop
125d4     FD 16 02 F6 | 	mov	arg03, result1
125d8     FE 14 02 F6 | 	mov	arg02, result2
125dc     FF 12 02 F6 | 	mov	arg01, result3
125e0     0C 4E 05 F1 | 	add	fp, #12
125e4     A7 16 62 FC | 	wrlong	arg03, fp
125e8     04 4E 05 F1 | 	add	fp, #4
125ec     A7 14 62 FC | 	wrlong	arg02, fp
125f0     04 4E 05 F1 | 	add	fp, #4
125f4     A7 12 62 FC | 	wrlong	arg01, fp
125f8     14 4E 85 F1 | 	sub	fp, #20
125fc     18 A4 BF FD | 	call	#_pop
12600     FF 16 02 F6 | 	mov	arg03, result3
12604     A7 FA 61 FC | 	wrlong	result1, fp
12608     04 4E 05 F1 | 	add	fp, #4
1260c     A7 FC 61 FC | 	wrlong	result2, fp
12610     04 4E 05 F1 | 	add	fp, #4
12614     A7 16 62 FC | 	wrlong	arg03, fp
12618     08 4E 85 F1 | 	sub	fp, #8
1261c     A7 12 02 F6 | 	mov	arg01, fp
12620     D8 A5 BF FD | 	call	#_converttoint
12624     1C 4E 05 F1 | 	add	fp, #28
12628     A7 FA 61 FC | 	wrlong	result1, fp
1262c     10 4E 85 F1 | 	sub	fp, #16
12630     A7 12 02 F6 | 	mov	arg01, fp
12634     0C 4E 85 F1 | 	sub	fp, #12
12638     C0 A5 BF FD | 	call	#_converttoint
1263c     FD 16 02 F6 | 	mov	arg03, result1
12640     20 4E 05 F1 | 	add	fp, #32
12644     A7 16 62 FC | 	wrlong	arg03, fp
12648     F2 12 02 FB | 	rdlong	arg01, objptr
1264c     04 4E 85 F1 | 	sub	fp, #4
12650     A7 FE 01 FB | 	rdlong	result3, fp
12654     FF 12 02 F1 | 	add	arg01, result3
12658     1C 4E 85 F1 | 	sub	fp, #28
1265c     0A 16 66 F0 | 	shl	arg03, #10
12660     0B 13 02 F1 | 	add	arg01, arg03
12664     80 DF B0 FD | 	call	#_pspeek
12668     FD FA E1 F8 | 	getbyte	result1, result1, #0
1266c     A7 FA 61 FC | 	wrlong	result1, fp
12670     08 4E 05 F1 | 	add	fp, #8
12674     A7 3A 68 FC | 	wrlong	#29, fp
12678     08 4E 85 F1 | 	sub	fp, #8
1267c     A7 12 02 F6 | 	mov	arg01, fp
12680     2C A4 BF FD | 	call	#_push
12684                 | LR__1501
12684     A7 F0 03 F6 | 	mov	ptra, fp
12688     B2 00 A0 FD | 	call	#popregs_
1268c                 | _do_getpixel_ret
1268c     2D 00 64 FD | 	ret
12690                 | 
12690                 | ' 
12690                 | ' '-------------------- gettime
12690                 | ' 
12690                 | ' sub do_gettime
12690                 | _do_gettime
12690     02 4A 05 F6 | 	mov	COUNT_, #2
12694     A8 00 A0 FD | 	call	#pushregs_
12698     14 F0 07 F1 | 	add	ptra, #20
1269c                 | ' 
1269c                 | ' const asm 
1269c     1A 26 72 FD | 	getct	local01 wc
126a0     1A 28 62 FD | 	getct	local02
126a4                 | ' return hi1, lo1
126a4     14 FD 01 F6 | 	mov	result2, local02
126a8     A7 26 62 FC | 	wrlong	local01, fp
126ac     04 4E 05 F1 | 	add	fp, #4
126b0     A7 FC 61 FC | 	wrlong	result2, fp
126b4     0C 4E 05 F1 | 	add	fp, #12
126b8     A7 3A 68 FC | 	wrlong	#29, fp
126bc     0C 4E 85 F1 | 	sub	fp, #12
126c0     A7 12 02 FB | 	rdlong	arg01, fp
126c4     04 4E 05 F1 | 	add	fp, #4
126c8     A7 12 62 FC | 	wrlong	arg01, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     A7 12 02 FB | 	rdlong	arg01, fp
126d4     0C 4E 05 F1 | 	add	fp, #12
126d8     A7 12 62 FC | 	wrlong	arg01, fp
126dc     04 4E 85 F1 | 	sub	fp, #4
126e0     A7 12 02 F6 | 	mov	arg01, fp
126e4     08 4E 85 F1 | 	sub	fp, #8
126e8     C4 A3 BF FD | 	call	#_push
126ec     A7 F0 03 F6 | 	mov	ptra, fp
126f0     B2 00 A0 FD | 	call	#popregs_
126f4                 | _do_gettime_ret
126f4     2D 00 64 FD | 	ret
126f8                 | 
126f8                 | ' 
126f8                 | ' '-------------------- gosub
126f8                 | ' 
126f8                 | ' sub do_gosub()
126f8                 | _do_gosub
126f8     50 00 00 FF 
126fc     0C E5 05 F1 | 	add	objptr, ##41228
12700     F2 00 02 FB | 	rdlong	_var01, objptr
12704     01 00 06 F1 | 	add	_var01, #1
12708     F2 00 62 FC | 	wrlong	_var01, objptr
1270c                 | ' gosubtop+=1
1270c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
1270c     06 00 00 FF 
12710     8C E4 85 F1 | 	sub	objptr, ##3212
12714     F2 00 02 FB | 	rdlong	_var01, objptr
12718     01 00 06 F1 | 	add	_var01, #1
1271c     00 03 02 F6 | 	mov	_var02, _var01
12720     01 02 66 F0 | 	shl	_var02, #1
12724     00 03 02 F1 | 	add	_var02, _var01
12728     02 02 66 F0 | 	shl	_var02, #2
1272c     03 00 00 FF 
12730     04 E4 85 F1 | 	sub	objptr, ##1540
12734     F2 02 02 F1 | 	add	_var02, objptr
12738     08 02 06 F1 | 	add	_var02, #8
1273c     01 03 02 FB | 	rdlong	_var02, _var02
12740     FE 03 0E F2 | 	cmp	_var02, #510 wz
12744     47 00 00 FF 
12748     7C E4 85 F1 | 	sub	objptr, ##36476
1274c     58 00 90 5D |  if_ne	jmp	#LR__1510
12750     50 00 00 FF 
12754     0C E5 05 F1 | 	add	objptr, ##41228
12758     F2 02 02 FB | 	rdlong	_var02, objptr
1275c     03 02 66 F0 | 	shl	_var02, #3
12760     03 00 00 FF 
12764     60 E5 85 F1 | 	sub	objptr, ##1888
12768     F2 02 02 F1 | 	add	_var02, objptr
1276c     03 00 00 FF 
12770     0C E5 05 F1 | 	add	objptr, ##1804
12774     F2 00 02 FB | 	rdlong	_var01, objptr
12778     01 01 62 FC | 	wrlong	_var01, _var02
1277c     54 E4 05 F1 | 	add	objptr, #84
12780     F2 02 02 FB | 	rdlong	_var02, objptr
12784     03 02 66 F0 | 	shl	_var02, #3
12788     03 00 00 FF 
1278c     60 E5 85 F1 | 	sub	objptr, ##1888
12790     F2 02 02 F1 | 	add	_var02, objptr
12794     04 02 06 F1 | 	add	_var02, #4
12798     01 01 68 FC | 	wrlong	#0, _var02
1279c     4C 00 00 FF 
127a0     AC E5 85 F1 | 	sub	objptr, ##39340
127a4     64 00 90 FD | 	jmp	#LR__1511
127a8                 | LR__1510
127a8     50 00 00 FF 
127ac     0C E5 05 F1 | 	add	objptr, ##41228
127b0     F2 02 02 FB | 	rdlong	_var02, objptr
127b4     03 02 66 F0 | 	shl	_var02, #3
127b8     03 00 00 FF 
127bc     60 E5 85 F1 | 	sub	objptr, ##1888
127c0     F2 02 02 F1 | 	add	_var02, objptr
127c4     03 00 00 FF 
127c8     14 E5 05 F1 | 	add	objptr, ##1812
127cc     F2 00 02 FB | 	rdlong	_var01, objptr
127d0     01 01 62 FC | 	wrlong	_var01, _var02
127d4     4C E4 05 F1 | 	add	objptr, #76
127d8     F2 02 02 FB | 	rdlong	_var02, objptr
127dc     03 02 66 F0 | 	shl	_var02, #3
127e0     03 00 00 FF 
127e4     60 E5 85 F1 | 	sub	objptr, ##1888
127e8     F2 02 02 F1 | 	add	_var02, objptr
127ec     02 00 00 FF 
127f0     2C E5 85 F1 | 	sub	objptr, ##1324
127f4     F2 00 02 FB | 	rdlong	_var01, objptr
127f8     4A 00 00 FF 
127fc     80 E4 85 F1 | 	sub	objptr, ##38016
12800     02 00 06 F1 | 	add	_var01, #2
12804     04 02 06 F1 | 	add	_var02, #4
12808     01 01 62 FC | 	wrlong	_var01, _var02
1280c                 | LR__1511
1280c                 | _do_gosub_ret
1280c     2D 00 64 FD | 	ret
12810                 | 
12810                 | ' 
12810                 | ' '--------------------- goto
12810                 | ' 
12810                 | ' '------- fast goto
12810                 | ' 
12810                 | ' sub do_fast_goto
12810                 | _do_fast_goto
12810     02 4A 05 F6 | 	mov	COUNT_, #2
12814     A8 00 A0 FD | 	call	#pushregs_
12818                 | _do_fast_goto_enter
12818     4A 00 00 FF 
1281c     80 E4 05 F1 | 	add	objptr, ##38016
12820     F2 12 02 FB | 	rdlong	arg01, objptr
12824     09 27 02 F6 | 	mov	local01, arg01
12828     01 26 66 F0 | 	shl	local01, #1
1282c     09 27 02 F1 | 	add	local01, arg01
12830     02 26 66 F0 | 	shl	local01, #2
12834     03 00 00 FF 
12838     04 E4 85 F1 | 	sub	objptr, ##1540
1283c     F2 26 02 F1 | 	add	local01, objptr
12840     13 29 02 FB | 	rdlong	local02, local01
12844     14 13 02 F6 | 	mov	arg01, local02
12848     47 00 00 FF 
1284c     7C E4 85 F1 | 	sub	objptr, ##36476
12850     EC DD B0 FD | 	call	#_pslpeek
12854     FD 12 02 F6 | 	mov	arg01, result1
12858                 | ' 
12858                 | ' testptr=compiledline(lineptr_e).result.uresult
12858                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12858                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12858     4A 00 00 FF 
1285c     80 E4 05 F1 | 	add	objptr, ##38016
12860     F2 FA 01 FB | 	rdlong	result1, objptr
12864     FD 26 02 F6 | 	mov	local01, result1
12868     01 26 66 F0 | 	shl	local01, #1
1286c     FD 26 02 F1 | 	add	local01, result1
12870     02 26 66 F0 | 	shl	local01, #2
12874     03 00 00 FF 
12878     04 E4 85 F1 | 	sub	objptr, ##1540
1287c     F2 26 02 F1 | 	add	local01, objptr
12880     04 26 06 F1 | 	add	local01, #4
12884     13 27 02 FB | 	rdlong	local01, local01
12888     13 13 0A F2 | 	cmp	arg01, local01 wz
1288c     47 00 00 FF 
12890     7C E4 85 F1 | 	sub	objptr, ##36476
12894     58 00 90 5D |  if_ne	jmp	#LR__1520
12898     50 00 00 FF 
1289c     B8 E4 05 F1 | 	add	objptr, ##41144
128a0     F2 28 62 FC | 	wrlong	local02, objptr
128a4     06 00 00 FF 
128a8     3C E4 85 F1 | 	sub	objptr, ##3132
128ac     F2 28 02 FB | 	rdlong	local02, objptr
128b0     01 28 86 F1 | 	sub	local02, #1
128b4     04 E4 05 F1 | 	add	objptr, #4
128b8     F2 28 62 FC | 	wrlong	local02, objptr
128bc                 | '   runptr=testptr
128bc                 | '   lineptr_e=lineptr-1
128bc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
128bc     06 00 00 FF 
128c0     84 E4 05 F1 | 	add	objptr, ##3204
128c4     F2 28 02 FB | 	rdlong	local02, objptr
128c8     50 00 00 FF 
128cc     04 E5 85 F1 | 	sub	objptr, ##41220
128d0     FF FF 3F FF 
128d4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
128d8     50 00 00 AF 
128dc     04 E5 05 A1 |  if_e	add	objptr, ##41220
128e0     F2 00 68 AC |  if_e	wrlong	#0, objptr
128e4     50 00 00 AF 
128e8     04 E5 85 A1 |  if_e	sub	objptr, ##41220
128ec     04 00 90 FD | 	jmp	#LR__1521
128f0                 | LR__1520
128f0     0C 00 B0 FD | 	call	#_do_find_goto
128f4                 | LR__1521
128f4     A7 F0 03 F6 | 	mov	ptra, fp
128f8     B2 00 A0 FD | 	call	#popregs_
128fc                 | _do_fast_goto_ret
128fc     2D 00 64 FD | 	ret
12900                 | 
12900                 | ' 
12900                 | ' '------- find goto  
12900                 | ' 
12900                 | ' sub do_find_goto
12900                 | _do_find_goto
12900     03 4A 05 F6 | 	mov	COUNT_, #3
12904     A8 00 A0 FD | 	call	#pushregs_
12908     24 F0 07 F1 | 	add	ptra, #36
1290c                 | _do_find_goto_enter
1290c     4A 00 00 FF 
12910     80 E4 05 F1 | 	add	objptr, ##38016
12914     F2 26 02 FB | 	rdlong	local01, objptr
12918     13 29 02 F6 | 	mov	local02, local01
1291c     01 28 66 F0 | 	shl	local02, #1
12920     13 29 02 F1 | 	add	local02, local01
12924     02 28 66 F0 | 	shl	local02, #2
12928     03 00 00 FF 
1292c     04 E4 85 F1 | 	sub	objptr, ##1540
12930     F2 28 02 F1 | 	add	local02, objptr
12934     04 28 06 F1 | 	add	local02, #4
12938     14 29 02 FB | 	rdlong	local02, local02
1293c     A7 28 62 FC | 	wrlong	local02, fp
12940     03 00 00 FF 
12944     0C E4 05 F1 | 	add	objptr, ##1548
12948     F2 2A 02 FB | 	rdlong	local03, objptr
1294c     4A 00 00 FF 
12950     88 E4 85 F1 | 	sub	objptr, ##38024
12954     04 4E 05 F1 | 	add	fp, #4
12958     A7 2A 62 FC | 	wrlong	local03, fp
1295c     04 4E 85 F1 | 	sub	fp, #4
12960                 | ' 
12960                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12960                 | ' gotoptr=programstart
12960                 | ' do
12960                 | LR__1530
12960     0C 4E 05 F1 | 	add	fp, #12
12964     A7 12 02 F6 | 	mov	arg01, fp
12968     08 4E 85 F1 | 	sub	fp, #8
1296c     A7 14 02 FB | 	rdlong	arg02, fp
12970     04 4E 85 F1 | 	sub	fp, #4
12974     18 16 06 F6 | 	mov	arg03, #24
12978     0B 00 00 FF 
1297c     CC E4 05 F1 | 	add	objptr, ##5836
12980     50 07 B1 FD | 	call	#_psram_spin2_read1
12984     0B 00 00 FF 
12988     CC E4 85 F1 | 	sub	objptr, ##5836
1298c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
1298c                 | '   if gotoheader(0)<>$FFFFFFFF then
1298c     0C 4E 05 F1 | 	add	fp, #12
12990     A7 2A 02 FB | 	rdlong	local03, fp
12994     0C 4E 85 F1 | 	sub	fp, #12
12998     FF FF 7F FF 
1299c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
129a0     24 00 90 AD |  if_e	jmp	#LR__1531
129a4     04 4E 05 F1 | 	add	fp, #4
129a8     A7 2A 02 FB | 	rdlong	local03, fp
129ac     04 4E 05 F1 | 	add	fp, #4
129b0     A7 2A 62 FC | 	wrlong	local03, fp
129b4     18 4E 05 F1 | 	add	fp, #24
129b8     A7 2A 02 FB | 	rdlong	local03, fp
129bc     1C 4E 85 F1 | 	sub	fp, #28
129c0     A7 2A 62 FC | 	wrlong	local03, fp
129c4     04 4E 85 F1 | 	sub	fp, #4
129c8                 | LR__1531
129c8     20 4E 05 F1 | 	add	fp, #32
129cc     A7 2A 02 FB | 	rdlong	local03, fp
129d0     20 4E 85 F1 | 	sub	fp, #32
129d4     FF FF 3F FF 
129d8     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
129dc     0C 4E 05 51 |  if_ne	add	fp, #12
129e0     A7 26 02 5B |  if_ne	rdlong	local01, fp
129e4     0C 4E 85 51 |  if_ne	sub	fp, #12
129e8     FF FF 7F 5F 
129ec     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
129f0     18 00 90 AD |  if_e	jmp	#LR__1532
129f4     0C 4E 05 F1 | 	add	fp, #12
129f8     A7 2A 02 FB | 	rdlong	local03, fp
129fc     0C 4E 85 F1 | 	sub	fp, #12
12a00     A7 28 02 FB | 	rdlong	local02, fp
12a04     14 2B 0A F2 | 	cmp	local03, local02 wz
12a08     54 FF 9F 5D |  if_ne	jmp	#LR__1530
12a0c                 | LR__1532
12a0c                 | ' 
12a0c                 | ' if gotoheader(0)=gotoline then
12a0c     0C 4E 05 F1 | 	add	fp, #12
12a10     A7 2A 02 FB | 	rdlong	local03, fp
12a14     0C 4E 85 F1 | 	sub	fp, #12
12a18     A7 26 02 FB | 	rdlong	local01, fp
12a1c     13 2B 0A F2 | 	cmp	local03, local01 wz
12a20     D8 00 90 5D |  if_ne	jmp	#LR__1533
12a24     4A 00 00 FF 
12a28     80 E4 05 F1 | 	add	objptr, ##38016
12a2c     F2 26 02 FB | 	rdlong	local01, objptr
12a30     13 29 02 F6 | 	mov	local02, local01
12a34     01 28 66 F0 | 	shl	local02, #1
12a38     13 29 02 F1 | 	add	local02, local01
12a3c     02 28 66 F0 | 	shl	local02, #2
12a40     03 00 00 FF 
12a44     04 E4 85 F1 | 	sub	objptr, ##1540
12a48     F2 28 02 F1 | 	add	local02, objptr
12a4c     08 4E 05 F1 | 	add	fp, #8
12a50     A7 2A 02 FB | 	rdlong	local03, fp
12a54     14 2B 62 FC | 	wrlong	local03, local02
12a58     03 00 00 FF 
12a5c     04 E4 05 F1 | 	add	objptr, ##1540
12a60     F2 26 02 FB | 	rdlong	local01, objptr
12a64     13 29 02 F6 | 	mov	local02, local01
12a68     01 28 66 F0 | 	shl	local02, #1
12a6c     13 29 02 F1 | 	add	local02, local01
12a70     02 28 66 F0 | 	shl	local02, #2
12a74     03 00 00 FF 
12a78     04 E4 85 F1 | 	sub	objptr, ##1540
12a7c     F2 28 02 F1 | 	add	local02, objptr
12a80     08 28 06 F1 | 	add	local02, #8
12a84     14 9D 68 FC | 	wrlong	#78, local02
12a88     03 00 00 FF 
12a8c     04 E4 05 F1 | 	add	objptr, ##1540
12a90     F2 28 02 FB | 	rdlong	local02, objptr
12a94     14 13 02 F6 | 	mov	arg01, local02
12a98     01 12 66 F0 | 	shl	arg01, #1
12a9c     14 13 02 F1 | 	add	arg01, local02
12aa0     02 12 66 F0 | 	shl	arg01, #2
12aa4     03 00 00 FF 
12aa8     04 E4 85 F1 | 	sub	objptr, ##1540
12aac     F2 12 02 F1 | 	add	arg01, objptr
12ab0     09 00 00 FF 
12ab4     44 E4 05 F1 | 	add	objptr, ##4676
12ab8     F2 14 02 FB | 	rdlong	arg02, objptr
12abc     02 2A 06 F6 | 	mov	local03, #2
12ac0     14 2B 02 F1 | 	add	local03, local02
12ac4     0B 00 00 FF 
12ac8     5C E4 85 F1 | 	sub	objptr, ##5724
12acc     F2 16 02 FB | 	rdlong	arg03, objptr
12ad0     0B 2B 02 FD | 	qmul	local03, arg03
12ad4     08 4E 85 F1 | 	sub	fp, #8
12ad8     39 00 00 FF 
12adc     98 E5 85 F1 | 	sub	objptr, ##29592
12ae0     18 2A 62 FD | 	getqx	local03
12ae4     15 15 02 F1 | 	add	arg02, local03
12ae8     84 06 B1 FD | 	call	#_psram_spin2_write
12aec     0B 00 00 FF 
12af0     CC E4 85 F1 | 	sub	objptr, ##5836
12af4     18 FD BF FD | 	call	#_do_fast_goto
12af8     0C 00 90 FD | 	jmp	#LR__1534
12afc                 | LR__1533
12afc     26 12 06 F6 | 	mov	arg01, #38
12b00     00 14 06 F6 | 	mov	arg02, #0
12b04     7C D8 B0 FD | 	call	#_printerror
12b08                 | LR__1534
12b08     A7 F0 03 F6 | 	mov	ptra, fp
12b0c     B2 00 A0 FD | 	call	#popregs_
12b10                 | _do_find_goto_ret
12b10     2D 00 64 FD | 	ret
12b14                 | 
12b14                 | ' 
12b14                 | ' '------- slow goto  
12b14                 | ' 
12b14                 | ' sub do_slow_goto
12b14                 | _do_slow_goto
12b14     02 4A 05 F6 | 	mov	COUNT_, #2
12b18     A8 00 A0 FD | 	call	#pushregs_
12b1c     30 F0 07 F1 | 	add	ptra, #48
12b20     F4 9E BF FD | 	call	#_pop
12b24     FF 26 02 F6 | 	mov	local01, result3
12b28     24 4E 05 F1 | 	add	fp, #36
12b2c     A7 FA 61 FC | 	wrlong	result1, fp
12b30     04 4E 05 F1 | 	add	fp, #4
12b34     A7 FC 61 FC | 	wrlong	result2, fp
12b38     04 4E 05 F1 | 	add	fp, #4
12b3c     A7 26 62 FC | 	wrlong	local01, fp
12b40     08 4E 85 F1 | 	sub	fp, #8
12b44     A7 12 02 F6 | 	mov	arg01, fp
12b48     24 4E 85 F1 | 	sub	fp, #36
12b4c     AC A0 BF FD | 	call	#_converttoint
12b50     A7 FA 61 FC | 	wrlong	result1, fp
12b54     4A 00 00 FF 
12b58     88 E4 05 F1 | 	add	objptr, ##38024
12b5c     F2 28 02 FB | 	rdlong	local02, objptr
12b60     4A 00 00 FF 
12b64     88 E4 85 F1 | 	sub	objptr, ##38024
12b68     04 4E 05 F1 | 	add	fp, #4
12b6c     A7 28 62 FC | 	wrlong	local02, fp
12b70     04 4E 85 F1 | 	sub	fp, #4
12b74                 | ' 
12b74                 | ' t1=pop() : gotoline=converttoint(t1)
12b74                 | ' gotoptr=programstart
12b74                 | ' do
12b74                 | LR__1540
12b74     0C 4E 05 F1 | 	add	fp, #12
12b78     A7 12 02 F6 | 	mov	arg01, fp
12b7c     08 4E 85 F1 | 	sub	fp, #8
12b80     A7 14 02 FB | 	rdlong	arg02, fp
12b84     04 4E 85 F1 | 	sub	fp, #4
12b88     18 16 06 F6 | 	mov	arg03, #24
12b8c     0B 00 00 FF 
12b90     CC E4 05 F1 | 	add	objptr, ##5836
12b94     3C 05 B1 FD | 	call	#_psram_spin2_read1
12b98     0B 00 00 FF 
12b9c     CC E4 85 F1 | 	sub	objptr, ##5836
12ba0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12ba0                 | '   if gotoheader(0)<>$FFFFFFFF then
12ba0     0C 4E 05 F1 | 	add	fp, #12
12ba4     A7 28 02 FB | 	rdlong	local02, fp
12ba8     0C 4E 85 F1 | 	sub	fp, #12
12bac     FF FF 7F FF 
12bb0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12bb4     24 00 90 AD |  if_e	jmp	#LR__1541
12bb8     04 4E 05 F1 | 	add	fp, #4
12bbc     A7 28 02 FB | 	rdlong	local02, fp
12bc0     04 4E 05 F1 | 	add	fp, #4
12bc4     A7 28 62 FC | 	wrlong	local02, fp
12bc8     18 4E 05 F1 | 	add	fp, #24
12bcc     A7 28 02 FB | 	rdlong	local02, fp
12bd0     1C 4E 85 F1 | 	sub	fp, #28
12bd4     A7 28 62 FC | 	wrlong	local02, fp
12bd8     04 4E 85 F1 | 	sub	fp, #4
12bdc                 | LR__1541
12bdc     20 4E 05 F1 | 	add	fp, #32
12be0     A7 28 02 FB | 	rdlong	local02, fp
12be4     20 4E 85 F1 | 	sub	fp, #32
12be8     FF FF 3F FF 
12bec     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12bf0     0C 4E 05 51 |  if_ne	add	fp, #12
12bf4     A7 26 02 5B |  if_ne	rdlong	local01, fp
12bf8     0C 4E 85 51 |  if_ne	sub	fp, #12
12bfc     FF FF 7F 5F 
12c00     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12c04     18 00 90 AD |  if_e	jmp	#LR__1542
12c08     0C 4E 05 F1 | 	add	fp, #12
12c0c     A7 28 02 FB | 	rdlong	local02, fp
12c10     0C 4E 85 F1 | 	sub	fp, #12
12c14     A7 16 02 FB | 	rdlong	arg03, fp
12c18     0B 29 0A F2 | 	cmp	local02, arg03 wz
12c1c     54 FF 9F 5D |  if_ne	jmp	#LR__1540
12c20                 | LR__1542
12c20                 | ' if gotoheader(0)=gotoline then  
12c20     0C 4E 05 F1 | 	add	fp, #12
12c24     A7 28 02 FB | 	rdlong	local02, fp
12c28     0C 4E 85 F1 | 	sub	fp, #12
12c2c     A7 26 02 FB | 	rdlong	local01, fp
12c30     13 29 0A F2 | 	cmp	local02, local01 wz
12c34     60 00 90 5D |  if_ne	jmp	#LR__1543
12c38     08 4E 05 F1 | 	add	fp, #8
12c3c     A7 28 02 FB | 	rdlong	local02, fp
12c40     08 4E 85 F1 | 	sub	fp, #8
12c44     50 00 00 FF 
12c48     B8 E4 05 F1 | 	add	objptr, ##41144
12c4c     F2 28 62 FC | 	wrlong	local02, objptr
12c50     06 00 00 FF 
12c54     3C E4 85 F1 | 	sub	objptr, ##3132
12c58     F2 28 02 FB | 	rdlong	local02, objptr
12c5c     01 28 86 F1 | 	sub	local02, #1
12c60     04 E4 05 F1 | 	add	objptr, #4
12c64     F2 28 62 FC | 	wrlong	local02, objptr
12c68                 | '    runptr=oldgotoptr
12c68                 | '    lineptr_e=lineptr-1
12c68                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12c68     06 00 00 FF 
12c6c     84 E4 05 F1 | 	add	objptr, ##3204
12c70     F2 28 02 FB | 	rdlong	local02, objptr
12c74     50 00 00 FF 
12c78     04 E5 85 F1 | 	sub	objptr, ##41220
12c7c     FF FF 3F FF 
12c80     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12c84     50 00 00 AF 
12c88     04 E5 05 A1 |  if_e	add	objptr, ##41220
12c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
12c90     50 00 00 AF 
12c94     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12c98                 | LR__1543
12c98     A7 F0 03 F6 | 	mov	ptra, fp
12c9c     B2 00 A0 FD | 	call	#popregs_
12ca0                 | _do_slow_goto_ret
12ca0     2D 00 64 FD | 	ret
12ca4                 | 
12ca4                 | ' 
12ca4                 | ' ' ----------------  hex$
12ca4                 | ' 
12ca4                 | ' sub do_hex
12ca4                 | _do_hex
12ca4     01 4A 05 F6 | 	mov	COUNT_, #1
12ca8     A8 00 A0 FD | 	call	#pushregs_
12cac     18 F0 07 F1 | 	add	ptra, #24
12cb0     4A 00 00 FF 
12cb4     80 E4 05 F1 | 	add	objptr, ##38016
12cb8     F2 26 02 FB | 	rdlong	local01, objptr
12cbc     13 17 02 F6 | 	mov	arg03, local01
12cc0     01 16 66 F0 | 	shl	arg03, #1
12cc4     13 17 02 F1 | 	add	arg03, local01
12cc8     02 16 66 F0 | 	shl	arg03, #2
12ccc     03 00 00 FF 
12cd0     04 E4 85 F1 | 	sub	objptr, ##1540
12cd4     F2 16 02 F1 | 	add	arg03, objptr
12cd8     0B 17 02 FB | 	rdlong	arg03, arg03
12cdc     0C 4E 05 F1 | 	add	fp, #12
12ce0     A7 16 62 FC | 	wrlong	arg03, fp
12ce4                 | ' 
12ce4                 | ' numpar=compiledline(lineptr_e).result.uresult
12ce4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12ce4     0C 4E 85 F1 | 	sub	fp, #12
12ce8     03 16 16 F2 | 	cmp	arg03, #3 wc
12cec     47 00 00 FF 
12cf0     7C E4 85 F1 | 	sub	objptr, ##36476
12cf4     0C 4E 05 C1 |  if_b	add	fp, #12
12cf8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12cfc     0C 4E 85 C1 |  if_b	sub	fp, #12
12d00     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12d04     00 12 06 F6 | 	mov	arg01, #0
12d08     30 6D B1 FD | 	call	#__system___getiolock_0573
12d0c     FD 12 02 F6 | 	mov	arg01, result1
12d10     00 10 B1 FD | 	call	#__system___lockmem
12d14     A0 01 00 FF 
12d18     4F 15 06 F6 | 	mov	arg02, ##@LR__5733
12d1c     00 12 06 F6 | 	mov	arg01, #0
12d20     00 16 06 F6 | 	mov	arg03, #0
12d24     E0 1C B1 FD | 	call	#__system___basic_print_string
12d28     00 12 06 F6 | 	mov	arg01, #0
12d2c     0C 6D B1 FD | 	call	#__system___getiolock_0573
12d30     FD 00 68 FC | 	wrlong	#0, result1
12d34     27 12 06 F6 | 	mov	arg01, #39
12d38     00 14 06 F6 | 	mov	arg02, #0
12d3c     44 D6 B0 FD | 	call	#_printerror
12d40     B8 00 90 FD | 	jmp	#LR__1553
12d44                 | LR__1550
12d44                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12d44     0C 4E 05 F1 | 	add	fp, #12
12d48     A7 26 02 FB | 	rdlong	local01, fp
12d4c     0C 4E 85 F1 | 	sub	fp, #12
12d50     02 26 0E F2 | 	cmp	local01, #2 wz
12d54     38 00 90 5D |  if_ne	jmp	#LR__1551
12d58     BC 9C BF FD | 	call	#_pop
12d5c     FF 26 02 F6 | 	mov	local01, result3
12d60     A7 FA 61 FC | 	wrlong	result1, fp
12d64     04 4E 05 F1 | 	add	fp, #4
12d68     A7 FC 61 FC | 	wrlong	result2, fp
12d6c     04 4E 05 F1 | 	add	fp, #4
12d70     A7 26 62 FC | 	wrlong	local01, fp
12d74     08 4E 85 F1 | 	sub	fp, #8
12d78     A7 12 02 F6 | 	mov	arg01, fp
12d7c     7C 9E BF FD | 	call	#_converttoint
12d80     14 4E 05 F1 | 	add	fp, #20
12d84     A7 FA 61 FC | 	wrlong	result1, fp
12d88     14 4E 85 F1 | 	sub	fp, #20
12d8c     0C 00 90 FD | 	jmp	#LR__1552
12d90                 | LR__1551
12d90     14 4E 05 F1 | 	add	fp, #20
12d94     A7 10 68 FC | 	wrlong	#8, fp
12d98     14 4E 85 F1 | 	sub	fp, #20
12d9c                 | LR__1552
12d9c     78 9C BF FD | 	call	#_pop
12da0     FF 26 02 F6 | 	mov	local01, result3
12da4     A7 FA 61 FC | 	wrlong	result1, fp
12da8     04 4E 05 F1 | 	add	fp, #4
12dac     A7 FC 61 FC | 	wrlong	result2, fp
12db0     04 4E 05 F1 | 	add	fp, #4
12db4     A7 26 62 FC | 	wrlong	local01, fp
12db8     08 4E 85 F1 | 	sub	fp, #8
12dbc     A7 12 02 F6 | 	mov	arg01, fp
12dc0     38 9E BF FD | 	call	#_converttoint
12dc4     10 4E 05 F1 | 	add	fp, #16
12dc8     A7 FA 61 FC | 	wrlong	result1, fp
12dcc     FD 12 02 F6 | 	mov	arg01, result1
12dd0     04 4E 05 F1 | 	add	fp, #4
12dd4     A7 14 02 FB | 	rdlong	arg02, fp
12dd8     14 4E 85 F1 | 	sub	fp, #20
12ddc     10 16 06 F6 | 	mov	arg03, #16
12de0     00 32 B1 FD | 	call	#__system__Number_S
12de4     A7 FA 61 FC | 	wrlong	result1, fp
12de8     08 4E 05 F1 | 	add	fp, #8
12dec     A7 3E 68 FC | 	wrlong	#31, fp
12df0     08 4E 85 F1 | 	sub	fp, #8
12df4     A7 12 02 F6 | 	mov	arg01, fp
12df8     B4 9C BF FD | 	call	#_push
12dfc                 | LR__1553
12dfc     A7 F0 03 F6 | 	mov	ptra, fp
12e00     B2 00 A0 FD | 	call	#popregs_
12e04                 | _do_hex_ret
12e04     2D 00 64 FD | 	ret
12e08                 | 
12e08                 | ' 
12e08                 | ' ' ----------------  if
12e08                 | ' 
12e08                 | ' sub do_if
12e08                 | _do_if
12e08     05 4A 05 F6 | 	mov	COUNT_, #5
12e0c     A8 00 A0 FD | 	call	#pushregs_
12e10     04 9C BF FD | 	call	#_pop
12e14     FD 26 0A F6 | 	mov	local01, result1 wz
12e18     FE 28 02 F6 | 	mov	local02, result2
12e1c     FF 2A 02 F6 | 	mov	local03, result3
12e20                 | ' t1=pop()
12e20                 | ' ' if uresult=0, jump over else
12e20                 | ' if t1.result.uresult = 0 then 
12e20     BC 00 90 5D |  if_ne	jmp	#LR__1562
12e24                 | '   for i=lineptr_e to lineptr-1
12e24     4A 00 00 FF 
12e28     80 E4 05 F1 | 	add	objptr, ##38016
12e2c     F2 2C 02 FB | 	rdlong	local04, objptr
12e30     04 E4 85 F1 | 	sub	objptr, #4
12e34     F2 2E 02 FB | 	rdlong	local05, objptr
12e38     4A 00 00 FF 
12e3c     7C E4 85 F1 | 	sub	objptr, ##38012
12e40                 | LR__1560
12e40     17 2D 52 F2 | 	cmps	local04, local05 wc
12e44     78 00 90 3D |  if_ae	jmp	#LR__1561
12e48     16 FF 01 F6 | 	mov	result3, local04
12e4c     01 FE 65 F0 | 	shl	result3, #1
12e50     16 FF 01 F1 | 	add	result3, local04
12e54     02 FE 65 F0 | 	shl	result3, #2
12e58     47 00 00 FF 
12e5c     7C E4 05 F1 | 	add	objptr, ##36476
12e60     F2 FE 01 F1 | 	add	result3, objptr
12e64     FF 26 02 FB | 	rdlong	local01, result3
12e68     04 FE 05 F1 | 	add	result3, #4
12e6c     FF FC 01 FB | 	rdlong	result2, result3
12e70     16 FF 01 F6 | 	mov	result3, local04
12e74     01 FE 65 F0 | 	shl	result3, #1
12e78     16 FF 01 F1 | 	add	result3, local04
12e7c     02 FE 65 F0 | 	shl	result3, #2
12e80     F2 FE 01 F1 | 	add	result3, objptr
12e84     08 FE 05 F1 | 	add	result3, #8
12e88     FF FE 01 FB | 	rdlong	result3, result3
12e8c     FE 28 02 F6 | 	mov	local02, result2
12e90     FF 2A 02 F6 | 	mov	local03, result3
12e94                 | '     t1=compiledline(i)
12e94                 | '     if t1.result_type=token_else then lineptr_e=i : return
12e94     5A 2A 0E F2 | 	cmp	local03, #90 wz
12e98     47 00 00 FF 
12e9c     7C E4 85 F1 | 	sub	objptr, ##36476
12ea0     4A 00 00 AF 
12ea4     80 E4 05 A1 |  if_e	add	objptr, ##38016
12ea8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
12eac     4A 00 00 AF 
12eb0     80 E4 85 A1 |  if_e	sub	objptr, ##38016
12eb4     28 00 90 AD |  if_e	jmp	#LR__1563
12eb8     01 2C 06 F1 | 	add	local04, #1
12ebc     80 FF 9F FD | 	jmp	#LR__1560
12ec0                 | LR__1561
12ec0     4A 00 00 FF 
12ec4     7C E4 05 F1 | 	add	objptr, ##38012
12ec8     F2 2E 02 FB | 	rdlong	local05, objptr
12ecc     01 2E 86 F1 | 	sub	local05, #1
12ed0     04 E4 05 F1 | 	add	objptr, #4
12ed4     F2 2E 62 FC | 	wrlong	local05, objptr
12ed8     4A 00 00 FF 
12edc     80 E4 85 F1 | 	sub	objptr, ##38016
12ee0                 | LR__1562
12ee0                 | LR__1563
12ee0     A7 F0 03 F6 | 	mov	ptra, fp
12ee4     B2 00 A0 FD | 	call	#popregs_
12ee8                 | _do_if_ret
12ee8     2D 00 64 FD | 	ret
12eec                 | 
12eec                 | ' 
12eec                 | ' ' ----------------  inkey$
12eec                 | ' 
12eec                 | ' sub do_inkey
12eec                 | _do_inkey
12eec     02 4A 05 F6 | 	mov	COUNT_, #2
12ef0     A8 00 A0 FD | 	call	#pushregs_
12ef4     0C F0 07 F1 | 	add	ptra, #12
12ef8     04 06 B1 FD | 	call	#_usbnew_spin2_get_key
12efc     45 00 00 FF 
12f00     74 E4 05 F1 | 	add	objptr, ##35444
12f04     F2 FA 61 FC | 	wrlong	result1, objptr
12f08                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12f08     45 00 00 FF 
12f0c     74 E4 85 F1 | 	sub	objptr, ##35444
12f10     00 FA 0D F2 | 	cmp	result1, #0 wz
12f14     94 00 90 AD |  if_e	jmp	#LR__1571
12f18     45 00 00 FF 
12f1c     74 E4 05 F1 | 	add	objptr, ##35444
12f20     F2 1C 02 FB | 	rdlong	arg06, objptr
12f24     45 00 00 FF 
12f28     74 E4 85 F1 | 	sub	objptr, ##35444
12f2c     00 00 40 FF 
12f30     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12f34     45 00 00 CF 
12f38     74 E4 05 C1 |  if_b	add	objptr, ##35444
12f3c     F2 26 02 CB |  if_b	rdlong	local01, objptr
12f40     45 00 00 CF 
12f44     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12f48     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12f4c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12f50     58 00 90 3D |  if_ae	jmp	#LR__1571
12f54                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12f54     50 00 00 FF 
12f58     14 E5 05 F1 | 	add	objptr, ##41236
12f5c     F2 1C 02 FB | 	rdlong	arg06, objptr
12f60     50 00 00 FF 
12f64     14 E5 85 F1 | 	sub	objptr, ##41236
12f68     01 1C 0E F2 | 	cmp	arg06, #1 wz
12f6c     3C 00 90 5D |  if_ne	jmp	#LR__1570
12f70     51 00 00 FF 
12f74     B8 E5 05 F1 | 	add	objptr, ##41912
12f78     F2 14 02 FB | 	rdlong	arg02, objptr
12f7c     04 E4 85 F1 | 	sub	objptr, #4
12f80     F2 1A 02 FB | 	rdlong	arg05, objptr
12f84     07 12 06 F6 | 	mov	arg01, #7
12f88     56 00 00 FF 
12f8c     44 16 06 F6 | 	mov	arg03, ##44100
12f90     0C 18 C6 F9 | 	decod	arg04, #12
12f94     01 1C 66 F6 | 	neg	arg06, #1
12f98     46 00 00 FF 
12f9c     E8 E4 85 F1 | 	sub	objptr, ##36072
12fa0     00 09 B1 FD | 	call	#_audio096_spin2_play
12fa4     0B 00 00 FF 
12fa8     CC E4 85 F1 | 	sub	objptr, ##5836
12fac                 | LR__1570
12fac                 | LR__1571
12fac                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12fac     45 00 00 FF 
12fb0     74 E4 05 F1 | 	add	objptr, ##35444
12fb4     F2 1C 0A FB | 	rdlong	arg06, objptr wz
12fb8     45 00 00 FF 
12fbc     74 E4 85 F1 | 	sub	objptr, ##35444
12fc0     D4 01 90 AD |  if_e	jmp	#LR__1580
12fc4     45 00 00 FF 
12fc8     74 E4 05 F1 | 	add	objptr, ##35444
12fcc     F2 1C 02 FB | 	rdlong	arg06, objptr
12fd0     45 00 00 FF 
12fd4     74 E4 85 F1 | 	sub	objptr, ##35444
12fd8     00 00 40 FF 
12fdc     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12fe0     45 00 00 CF 
12fe4     74 E4 05 C1 |  if_b	add	objptr, ##35444
12fe8     F2 26 02 CB |  if_b	rdlong	local01, objptr
12fec     45 00 00 CF 
12ff0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12ff4     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12ff8     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12ffc     98 01 90 3D |  if_ae	jmp	#LR__1580
13000                 | '   if leds and 2 = 2 then 
13000     51 00 00 FF 
13004     F0 E5 05 F1 | 	add	objptr, ##41968
13008     F2 26 0A FB | 	rdlong	local01, objptr wz
1300c     51 00 00 FF 
13010     F0 E5 85 F1 | 	sub	objptr, ##41968
13014     58 01 90 AD |  if_e	jmp	#LR__1579
13018                 | '     if key>96 andalso key<123 then
13018     45 00 00 FF 
1301c     74 E4 05 F1 | 	add	objptr, ##35444
13020     F2 26 02 FB | 	rdlong	local01, objptr
13024     45 00 00 FF 
13028     74 E4 85 F1 | 	sub	objptr, ##35444
1302c     61 26 16 F2 | 	cmp	local01, #97 wc
13030     3C 00 90 CD |  if_b	jmp	#LR__1572
13034     45 00 00 FF 
13038     74 E4 05 F1 | 	add	objptr, ##35444
1303c     F2 26 02 FB | 	rdlong	local01, objptr
13040     45 00 00 FF 
13044     74 E4 85 F1 | 	sub	objptr, ##35444
13048     7B 26 16 F2 | 	cmp	local01, #123 wc
1304c     20 00 90 3D |  if_ae	jmp	#LR__1572
13050     45 00 00 FF 
13054     74 E4 05 F1 | 	add	objptr, ##35444
13058     F2 26 02 FB | 	rdlong	local01, objptr
1305c     20 26 86 F1 | 	sub	local01, #32
13060     F2 26 62 FC | 	wrlong	local01, objptr
13064     45 00 00 FF 
13068     74 E4 85 F1 | 	sub	objptr, ##35444
1306c     00 01 90 FD | 	jmp	#LR__1578
13070                 | LR__1572
13070     45 00 00 FF 
13074     74 E4 05 F1 | 	add	objptr, ##35444
13078     F2 26 02 FB | 	rdlong	local01, objptr
1307c     45 00 00 FF 
13080     74 E4 85 F1 | 	sub	objptr, ##35444
13084     41 26 16 F2 | 	cmp	local01, #65 wc
13088     3C 00 90 CD |  if_b	jmp	#LR__1573
1308c     45 00 00 FF 
13090     74 E4 05 F1 | 	add	objptr, ##35444
13094     F2 26 02 FB | 	rdlong	local01, objptr
13098     45 00 00 FF 
1309c     74 E4 85 F1 | 	sub	objptr, ##35444
130a0     5B 26 16 F2 | 	cmp	local01, #91 wc
130a4     20 00 90 3D |  if_ae	jmp	#LR__1573
130a8     45 00 00 FF 
130ac     74 E4 05 F1 | 	add	objptr, ##35444
130b0     F2 26 02 FB | 	rdlong	local01, objptr
130b4     20 26 06 F1 | 	add	local01, #32
130b8     F2 26 62 FC | 	wrlong	local01, objptr
130bc     45 00 00 FF 
130c0     74 E4 85 F1 | 	sub	objptr, ##35444
130c4     A8 00 90 FD | 	jmp	#LR__1577
130c8                 | LR__1573
130c8     45 00 00 FF 
130cc     74 E4 05 F1 | 	add	objptr, ##35444
130d0     F2 26 02 FB | 	rdlong	local01, objptr
130d4     45 00 00 FF 
130d8     74 E4 85 F1 | 	sub	objptr, ##35444
130dc     17 26 16 F2 | 	cmp	local01, #23 wc
130e0     3C 00 90 CD |  if_b	jmp	#LR__1574
130e4     45 00 00 FF 
130e8     74 E4 05 F1 | 	add	objptr, ##35444
130ec     F2 26 02 FB | 	rdlong	local01, objptr
130f0     45 00 00 FF 
130f4     74 E4 85 F1 | 	sub	objptr, ##35444
130f8     20 26 16 F2 | 	cmp	local01, #32 wc
130fc     20 00 90 3D |  if_ae	jmp	#LR__1574
13100     45 00 00 FF 
13104     74 E4 05 F1 | 	add	objptr, ##35444
13108     F2 26 02 FB | 	rdlong	local01, objptr
1310c     09 26 86 F1 | 	sub	local01, #9
13110     F2 26 62 FC | 	wrlong	local01, objptr
13114     45 00 00 FF 
13118     74 E4 85 F1 | 	sub	objptr, ##35444
1311c     50 00 90 FD | 	jmp	#LR__1576
13120                 | LR__1574
13120     45 00 00 FF 
13124     74 E4 05 F1 | 	add	objptr, ##35444
13128     F2 28 02 FB | 	rdlong	local02, objptr
1312c     45 00 00 FF 
13130     74 E4 85 F1 | 	sub	objptr, ##35444
13134     0E 28 16 F2 | 	cmp	local02, #14 wc
13138     34 00 90 CD |  if_b	jmp	#LR__1575
1313c     45 00 00 FF 
13140     74 E4 05 F1 | 	add	objptr, ##35444
13144     F2 26 02 FB | 	rdlong	local01, objptr
13148     45 00 00 FF 
1314c     74 E4 85 F1 | 	sub	objptr, ##35444
13150     17 26 16 F2 | 	cmp	local01, #23 wc
13154     51 00 00 CF 
13158     F4 E5 05 C1 |  if_b	add	objptr, ##41972
1315c     F2 28 02 CB |  if_b	rdlong	local02, objptr
13160     27 28 06 C1 |  if_b	add	local02, #39
13164     F2 28 62 CC |  if_b	wrlong	local02, objptr
13168     51 00 00 CF 
1316c     F4 E5 85 C1 |  if_b	sub	objptr, ##41972
13170                 | LR__1575
13170                 | LR__1576
13170                 | LR__1577
13170                 | LR__1578
13170                 | LR__1579
13170     45 00 00 FF 
13174     74 E4 05 F1 | 	add	objptr, ##35444
13178     F2 12 02 FB | 	rdlong	arg01, objptr
1317c     45 00 00 FF 
13180     74 E4 85 F1 | 	sub	objptr, ##35444
13184     68 D5 B0 FD | 	call	#_scantochar
13188     FD 12 02 F6 | 	mov	arg01, result1
1318c     C4 2D B1 FD | 	call	#__system__Chr_S
13190     A7 FA 61 FC | 	wrlong	result1, fp
13194     0C 00 90 FD | 	jmp	#LR__1581
13198                 | LR__1580
13198     A0 01 00 FF 
1319c     56 29 06 F6 | 	mov	local02, ##@LR__5734
131a0     A7 28 62 FC | 	wrlong	local02, fp
131a4                 | LR__1581
131a4     08 4E 05 F1 | 	add	fp, #8
131a8     A7 3E 68 FC | 	wrlong	#31, fp
131ac     08 4E 85 F1 | 	sub	fp, #8
131b0     A7 12 02 F6 | 	mov	arg01, fp
131b4     F8 98 BF FD | 	call	#_push
131b8     A7 F0 03 F6 | 	mov	ptra, fp
131bc     B2 00 A0 FD | 	call	#popregs_
131c0                 | _do_inkey_ret
131c0     2D 00 64 FD | 	ret
131c4                 | 
131c4                 | ' 
131c4                 | ' ' ----------------  ink
131c4                 | ' 
131c4                 | ' sub do_ink
131c4                 | _do_ink
131c4     00 4A 05 F6 | 	mov	COUNT_, #0
131c8     A8 00 A0 FD | 	call	#pushregs_
131cc     0C F0 07 F1 | 	add	ptra, #12
131d0     44 98 BF FD | 	call	#_pop
131d4     FF 14 02 F6 | 	mov	arg02, result3
131d8     A7 FA 61 FC | 	wrlong	result1, fp
131dc     04 4E 05 F1 | 	add	fp, #4
131e0     A7 FC 61 FC | 	wrlong	result2, fp
131e4     04 4E 05 F1 | 	add	fp, #4
131e8     A7 14 62 FC | 	wrlong	arg02, fp
131ec     08 4E 85 F1 | 	sub	fp, #8
131f0     A7 12 02 F6 | 	mov	arg01, fp
131f4     04 9A BF FD | 	call	#_converttoint
131f8     37 00 00 FF 
131fc     3C E4 05 F1 | 	add	objptr, ##28220
13200     F2 FA 61 FC | 	wrlong	result1, objptr
13204     04 E4 85 F1 | 	sub	objptr, #4
13208     F2 14 02 FB | 	rdlong	arg02, objptr
1320c                 | ' 
1320c                 | ' write_color:=ff
1320c     36 00 00 FF 
13210     F7 E5 85 F1 | 	sub	objptr, ##28151
13214     F2 FA 61 FC | 	wrlong	result1, objptr
13218                 | ' write_background:=bb
13218     04 E4 05 F1 | 	add	objptr, #4
1321c     F2 14 62 FC | 	wrlong	arg02, objptr
13220     36 00 00 FF 
13224     F7 E5 05 F1 | 	add	objptr, ##28151
13228     F2 12 02 FB | 	rdlong	arg01, objptr
1322c     37 00 00 FF 
13230     3C E4 85 F1 | 	sub	objptr, ##28220
13234     0C DD B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13238     A7 F0 03 F6 | 	mov	ptra, fp
1323c     B2 00 A0 FD | 	call	#popregs_
13240                 | _do_ink_ret
13240     2D 00 64 FD | 	ret
13244                 | 
13244                 | ' 
13244                 | ' ' ----------------  int
13244                 | ' 
13244                 | ' sub do_int
13244                 | _do_int
13244     02 4A 05 F6 | 	mov	COUNT_, #2
13248     A8 00 A0 FD | 	call	#pushregs_
1324c     10 F0 07 F1 | 	add	ptra, #16
13250     C4 97 BF FD | 	call	#_pop
13254     FE 26 02 F6 | 	mov	local01, result2
13258     FF 28 02 F6 | 	mov	local02, result3
1325c     A7 FA 61 FC | 	wrlong	result1, fp
13260     04 4E 05 F1 | 	add	fp, #4
13264     A7 26 62 FC | 	wrlong	local01, fp
13268     04 4E 05 F1 | 	add	fp, #4
1326c     A7 28 62 FC | 	wrlong	local02, fp
13270                 | ' 
13270                 | ' t1=pop()
13270                 | ' select case t1.result_type
13270     08 4E 85 F1 | 	sub	fp, #8
13274     1E 28 0E F2 | 	cmp	local02, #30 wz
13278     14 00 90 AD |  if_e	jmp	#LR__1590
1327c     1F 28 0E F2 | 	cmp	local02, #31 wz
13280     20 00 90 AD |  if_e	jmp	#LR__1591
13284     2B 28 0E F2 | 	cmp	local02, #43 wz
13288     34 00 90 AD |  if_e	jmp	#LR__1592
1328c     50 00 90 FD | 	jmp	#LR__1593
13290                 | LR__1590
13290     A7 12 02 FB | 	rdlong	arg01, fp
13294     00 14 06 F6 | 	mov	arg02, #0
13298     B8 3D B1 FD | 	call	#__system___float_tointeger
1329c     A7 FA 61 FC | 	wrlong	result1, fp
132a0     3C 00 90 FD | 	jmp	#LR__1593
132a4                 | LR__1591
132a4     A7 12 02 FB | 	rdlong	arg01, fp
132a8     EC 40 B1 FD | 	call	#__system____builtin_atof
132ac     FD 12 02 F6 | 	mov	arg01, result1
132b0     00 14 06 F6 | 	mov	arg02, #0
132b4     9C 3D B1 FD | 	call	#__system___float_tointeger
132b8     A7 FA 61 FC | 	wrlong	result1, fp
132bc     20 00 90 FD | 	jmp	#LR__1593
132c0                 | LR__1592
132c0     A7 12 02 FB | 	rdlong	arg01, fp
132c4     C8 98 BF FD | 	call	#_convertstring
132c8     FD 12 02 F6 | 	mov	arg01, result1
132cc     C8 40 B1 FD | 	call	#__system____builtin_atof
132d0     FD 12 02 F6 | 	mov	arg01, result1
132d4     00 14 06 F6 | 	mov	arg02, #0
132d8     78 3D B1 FD | 	call	#__system___float_tointeger
132dc     A7 FA 61 FC | 	wrlong	result1, fp
132e0                 | LR__1593
132e0     08 4E 05 F1 | 	add	fp, #8
132e4     A7 38 68 FC | 	wrlong	#28, fp
132e8     08 4E 85 F1 | 	sub	fp, #8
132ec     A7 12 02 F6 | 	mov	arg01, fp
132f0     BC 97 BF FD | 	call	#_push
132f4     A7 F0 03 F6 | 	mov	ptra, fp
132f8     B2 00 A0 FD | 	call	#popregs_
132fc                 | _do_int_ret
132fc     2D 00 64 FD | 	ret
13300                 | 
13300                 | ' 
13300                 | ' ' ----------------  input
13300                 | ' 
13300                 | ' sub do_input
13300                 | _do_input
13300     11 4A 05 F6 | 	mov	COUNT_, #17
13304     A8 00 A0 FD | 	call	#pushregs_
13308     50 F1 07 F1 | 	add	ptra, #336
1330c     4A 00 00 FF 
13310     80 E4 05 F1 | 	add	objptr, ##38016
13314     F2 FE 01 FB | 	rdlong	result3, objptr
13318     FF FC 01 F6 | 	mov	result2, result3
1331c     01 FC 65 F0 | 	shl	result2, #1
13320     FF FC 01 F1 | 	add	result2, result3
13324     02 FC 65 F0 | 	shl	result2, #2
13328     03 00 00 FF 
1332c     04 E4 85 F1 | 	sub	objptr, ##1540
13330     F2 FC 01 F1 | 	add	result2, objptr
13334     FE FC 01 FB | 	rdlong	result2, result2
13338     08 4E 05 F1 | 	add	fp, #8
1333c     A7 FC 61 FC | 	wrlong	result2, fp
13340                 | ' 
13340                 | ' numpar=compiledline(lineptr_e).result.uresult
13340                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13340     08 4E 85 F1 | 	sub	fp, #8
13344     01 FC 15 F2 | 	cmp	result2, #1 wc
13348     47 00 00 FF 
1334c     7C E4 85 F1 | 	sub	objptr, ##36476
13350     14 00 90 CD |  if_b	jmp	#LR__1600
13354     08 4E 05 F1 | 	add	fp, #8
13358     A7 FC 01 FB | 	rdlong	result2, fp
1335c     08 4E 85 F1 | 	sub	fp, #8
13360     41 FC 15 F2 | 	cmp	result2, #65 wc
13364     50 00 90 CD |  if_b	jmp	#LR__1601
13368                 | LR__1600
13368     00 12 06 F6 | 	mov	arg01, #0
1336c     CC 66 B1 FD | 	call	#__system___getiolock_0573
13370     FD 12 02 F6 | 	mov	arg01, result1
13374     9C 09 B1 FD | 	call	#__system___lockmem
13378     A0 01 00 FF 
1337c     57 15 06 F6 | 	mov	arg02, ##@LR__5735
13380     00 12 06 F6 | 	mov	arg01, #0
13384     00 16 06 F6 | 	mov	arg03, #0
13388     7C 16 B1 FD | 	call	#__system___basic_print_string
1338c     00 12 06 F6 | 	mov	arg01, #0
13390     A8 66 B1 FD | 	call	#__system___getiolock_0573
13394     FD 00 68 FC | 	wrlong	#0, result1
13398     50 00 00 FF 
1339c     F0 E4 05 F1 | 	add	objptr, ##41200
133a0     F2 14 02 FB | 	rdlong	arg02, objptr
133a4     50 00 00 FF 
133a8     F0 E4 85 F1 | 	sub	objptr, ##41200
133ac     27 12 06 F6 | 	mov	arg01, #39
133b0     D0 CF B0 FD | 	call	#_printerror
133b4     44 0B 90 FD | 	jmp	#LR__1650
133b8                 | LR__1601
133b8     08 4E 05 F1 | 	add	fp, #8
133bc     A7 FC 01 FB | 	rdlong	result2, fp
133c0     01 FC 85 F1 | 	sub	result2, #1
133c4     28 4F 05 F1 | 	add	fp, #296
133c8     A7 FC 61 FC | 	wrlong	result2, fp
133cc     3C E4 05 F1 | 	add	objptr, #60
133d0     F2 FC E1 FA | 	rdword	result2, objptr
133d4     FE FC 51 F6 | 	abs	result2, result2 wc
133d8     01 FC 45 F0 | 	shr	result2, #1
133dc     FE FC 81 F6 | 	negc	result2, result2
133e0     0C 4E 05 F1 | 	add	fp, #12
133e4     A7 FC 61 FC | 	wrlong	result2, fp
133e8     02 E4 05 F1 | 	add	objptr, #2
133ec     F2 26 C2 FA | 	rdbyte	local01, objptr
133f0     3E E4 85 F1 | 	sub	objptr, #62
133f4     04 4E 05 F1 | 	add	fp, #4
133f8     A7 26 62 FC | 	wrlong	local01, fp
133fc     40 4F 85 F1 | 	sub	fp, #320
13400                 | ' i=numpar-1
13400                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13400                 | ' do
13400                 | LR__1602
13400     00 D4 BE FD | 	call	#_edit
13404     A7 FA 61 FC | 	wrlong	result1, fp
13408                 | ' 
13408                 | '   line$=edit()
13408                 | ' 
13408                 | '   if v.cursor_y=cpy+1 then
13408     3E E4 05 F1 | 	add	objptr, #62
1340c     F2 26 C2 FA | 	rdbyte	local01, objptr
13410     3E E4 85 F1 | 	sub	objptr, #62
13414     40 4F 05 F1 | 	add	fp, #320
13418     A7 16 02 FB | 	rdlong	arg03, fp
1341c     40 4F 85 F1 | 	sub	fp, #320
13420     01 16 06 F1 | 	add	arg03, #1
13424     0B 27 0A F2 | 	cmp	local01, arg03 wz
13428     6C 00 90 5D |  if_ne	jmp	#LR__1605
1342c     A7 26 02 FB | 	rdlong	local01, fp
13430     13 13 02 F6 | 	mov	arg01, local01
13434     09 29 02 F6 | 	mov	local02, arg01
13438     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
1343c                 | LR__1603
1343c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13440     01 28 06 51 |  if_ne	add	local02, #1
13444     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13448                 | LR__1604
13448     09 29 82 F1 | 	sub	local02, arg01
1344c     14 15 02 F6 | 	mov	arg02, local02
13450     3C 4F 05 F1 | 	add	fp, #316
13454     A7 16 02 FB | 	rdlong	arg03, fp
13458     3C 4F 85 F1 | 	sub	fp, #316
1345c     0B 15 82 F1 | 	sub	arg02, arg03
13460     37 00 00 FF 
13464     34 E4 05 F1 | 	add	objptr, ##28212
13468     F2 16 02 FB | 	rdlong	arg03, objptr
1346c     37 00 00 FF 
13470     34 E4 85 F1 | 	sub	objptr, ##28212
13474     0B 15 02 F1 | 	add	arg02, arg03
13478     13 13 02 F6 | 	mov	arg01, local01
1347c     98 29 B1 FD | 	call	#__system__Right_S
13480     FD 12 02 F6 | 	mov	arg01, result1
13484     98 2D B1 FD | 	call	#__system__RTrim_S
13488     FD 12 02 F6 | 	mov	arg01, result1
1348c     D0 2C B1 FD | 	call	#__system__LTrim_S
13490     A7 FA 61 FC | 	wrlong	result1, fp
13494     14 00 90 FD | 	jmp	#LR__1606
13498                 | LR__1605
13498     A7 12 02 FB | 	rdlong	arg01, fp
1349c     80 2D B1 FD | 	call	#__system__RTrim_S
134a0     FD 12 02 F6 | 	mov	arg01, result1
134a4     B8 2C B1 FD | 	call	#__system__LTrim_S
134a8     A7 FA 61 FC | 	wrlong	result1, fp
134ac                 | LR__1606
134ac                 | '   do
134ac                 | LR__1607
134ac     A7 14 02 FB | 	rdlong	arg02, fp
134b0     A0 01 00 FF 
134b4     62 17 06 F6 | 	mov	arg03, ##@LR__5736
134b8     01 12 06 F6 | 	mov	arg01, #1
134bc     18 2E B1 FD | 	call	#__system__Instr
134c0     0C 4E 05 F1 | 	add	fp, #12
134c4     A7 FA 61 FC | 	wrlong	result1, fp
134c8                 | '    comma=instr(1,line$,",")  
134c8                 | '    if comma>0  then 
134c8     0C 4E 85 F1 | 	sub	fp, #12
134cc     01 FA 15 F2 | 	cmp	result1, #1 wc
134d0     68 00 90 CD |  if_b	jmp	#LR__1610
134d4     A7 12 02 FB | 	rdlong	arg01, fp
134d8     0C 4E 05 F1 | 	add	fp, #12
134dc     A7 14 02 FB | 	rdlong	arg02, fp
134e0     0C 4E 85 F1 | 	sub	fp, #12
134e4     01 14 86 F1 | 	sub	arg02, #1
134e8     A4 28 B1 FD | 	call	#__system__Left_S
134ec     04 4E 05 F1 | 	add	fp, #4
134f0     A7 FA 61 FC | 	wrlong	result1, fp
134f4     04 4E 85 F1 | 	sub	fp, #4
134f8     A7 26 02 FB | 	rdlong	local01, fp
134fc     13 13 02 F6 | 	mov	arg01, local01
13500     09 29 02 F6 | 	mov	local02, arg01
13504     97 06 48 FB | 	callpa	#(@LR__1609-@LR__1608)>>2,fcache_load_ptr_
13508                 | LR__1608
13508     14 FB C9 FA | 	rdbyte	result1, local02 wz
1350c     01 28 06 51 |  if_ne	add	local02, #1
13510     F4 FF 9F 5D |  if_ne	jmp	#LR__1608
13514                 | LR__1609
13514     09 29 82 F1 | 	sub	local02, arg01
13518     14 15 02 F6 | 	mov	arg02, local02
1351c     0C 4E 05 F1 | 	add	fp, #12
13520     A7 16 02 FB | 	rdlong	arg03, fp
13524     0C 4E 85 F1 | 	sub	fp, #12
13528     0B 15 82 F1 | 	sub	arg02, arg03
1352c     13 13 02 F6 | 	mov	arg01, local01
13530     E4 28 B1 FD | 	call	#__system__Right_S
13534     A7 FA 61 FC | 	wrlong	result1, fp
13538     28 00 90 FD | 	jmp	#LR__1611
1353c                 | LR__1610
1353c     A7 12 02 FB | 	rdlong	arg01, fp
13540     DC 2C B1 FD | 	call	#__system__RTrim_S
13544     FD 12 02 F6 | 	mov	arg01, result1
13548     14 2C B1 FD | 	call	#__system__LTrim_S
1354c     04 4E 05 F1 | 	add	fp, #4
13550     A7 FA 61 FC | 	wrlong	result1, fp
13554     04 4E 85 F1 | 	sub	fp, #4
13558     A0 01 00 FF 
1355c     64 27 06 F6 | 	mov	local01, ##@LR__5737
13560     A7 26 62 FC | 	wrlong	local01, fp
13564                 | LR__1611
13564     30 4F 05 F1 | 	add	fp, #304
13568     A7 26 02 FB | 	rdlong	local01, fp
1356c     02 26 66 F0 | 	shl	local01, #2
13570     04 4F 85 F1 | 	sub	fp, #260
13574     A7 26 02 F1 | 	add	local01, fp
13578     28 4E 85 F1 | 	sub	fp, #40
1357c     A7 FA 01 FB | 	rdlong	result1, fp
13580     13 FB 61 FC | 	wrlong	result1, local01
13584     2C 4F 05 F1 | 	add	fp, #300
13588     A7 26 02 FB | 	rdlong	local01, fp
1358c     01 26 86 F1 | 	sub	local01, #1
13590     A7 26 62 FC | 	wrlong	local01, fp
13594     30 4F 85 F1 | 	sub	fp, #304
13598     00 26 56 F2 | 	cmps	local01, #0 wc
1359c     18 00 90 CD |  if_b	jmp	#LR__1612
135a0     A7 12 02 FB | 	rdlong	arg01, fp
135a4     A0 01 00 FF 
135a8     65 15 06 F6 | 	mov	arg02, ##@LR__5738
135ac     8C 07 B1 FD | 	call	#__system___string_cmp
135b0     00 FA 0D F2 | 	cmp	result1, #0 wz
135b4     F4 FE 9F 5D |  if_ne	jmp	#LR__1607
135b8                 | LR__1612
135b8     30 4F 05 F1 | 	add	fp, #304
135bc     A7 26 02 FB | 	rdlong	local01, fp
135c0     30 4F 85 F1 | 	sub	fp, #304
135c4     00 26 56 F2 | 	cmps	local01, #0 wc
135c8     34 FE 9F 3D |  if_ae	jmp	#LR__1602
135cc                 | ' 
135cc                 | ' for i=0 to numpar-1
135cc     30 4F 05 F1 | 	add	fp, #304
135d0     A7 00 68 FC | 	wrlong	#0, fp
135d4     28 4F 85 F1 | 	sub	fp, #296
135d8     A7 2A 02 FB | 	rdlong	local03, fp
135dc     08 4E 85 F1 | 	sub	fp, #8
135e0                 | LR__1613
135e0     30 4F 05 F1 | 	add	fp, #304
135e4     A7 2C 02 FB | 	rdlong	local04, fp
135e8     30 4F 85 F1 | 	sub	fp, #304
135ec     16 27 02 F6 | 	mov	local01, local04
135f0     15 27 52 F2 | 	cmps	local01, local03 wc
135f4     04 09 90 3D |  if_ae	jmp	#LR__1649
135f8                 | ' 
135f8                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
135f8     30 4F 05 F1 | 	add	fp, #304
135fc     A7 16 02 FB | 	rdlong	arg03, fp
13600     02 16 66 F0 | 	shl	arg03, #2
13604     04 4F 85 F1 | 	sub	fp, #260
13608     A7 16 02 F1 | 	add	arg03, fp
1360c     0B 13 02 FB | 	rdlong	arg01, arg03
13610     2C 4E 85 F1 | 	sub	fp, #44
13614     30 2D BF FD | 	call	#_isnum
13618     FD 2E 02 F6 | 	mov	local05, result1
1361c     30 4F 05 F1 | 	add	fp, #304
13620     A7 16 02 FB | 	rdlong	arg03, fp
13624     02 16 66 F0 | 	shl	arg03, #2
13628     04 4F 85 F1 | 	sub	fp, #260
1362c     A7 30 02 F6 | 	mov	local06, fp
13630     A7 16 02 F1 | 	add	arg03, fp
13634     0B 13 02 FB | 	rdlong	arg01, arg03
13638     2C 4E 85 F1 | 	sub	fp, #44
1363c     F4 30 BF FD | 	call	#_isint
13640     FD 2E 2A F5 | 	andn	local05, result1 wz
13644     52 00 00 5F 
13648     20 E4 05 51 |  if_ne	add	objptr, ##42016
1364c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13650     52 00 00 5F 
13654     20 E4 85 51 |  if_ne	sub	objptr, ##42016
13658                 | '   if isint(args(i)) then r=result_int 
13658     30 4F 05 F1 | 	add	fp, #304
1365c     A7 2E 02 FB | 	rdlong	local05, fp
13660     02 2E 66 F0 | 	shl	local05, #2
13664     04 4F 85 F1 | 	sub	fp, #260
13668     A7 2E 02 F1 | 	add	local05, fp
1366c     17 13 02 FB | 	rdlong	arg01, local05
13670     2C 4E 85 F1 | 	sub	fp, #44
13674     BC 30 BF FD | 	call	#_isint
13678     00 FA 0D F2 | 	cmp	result1, #0 wz
1367c     52 00 00 5F 
13680     20 E4 05 51 |  if_ne	add	objptr, ##42016
13684     F2 38 68 5C |  if_ne	wrlong	#28, objptr
13688     52 00 00 5F 
1368c     20 E4 85 51 |  if_ne	sub	objptr, ##42016
13690                 | '   if isdec(args(i)) then r=result_uint 
13690     30 4F 05 F1 | 	add	fp, #304
13694     A7 2E 02 FB | 	rdlong	local05, fp
13698     02 2E 66 F0 | 	shl	local05, #2
1369c     04 4F 85 F1 | 	sub	fp, #260
136a0     A7 2E 02 F1 | 	add	local05, fp
136a4     17 13 02 FB | 	rdlong	arg01, local05
136a8     2C 4E 85 F1 | 	sub	fp, #44
136ac     28 33 BF FD | 	call	#_isdec
136b0     00 FA 0D F2 | 	cmp	result1, #0 wz
136b4     52 00 00 5F 
136b8     20 E4 05 51 |  if_ne	add	objptr, ##42016
136bc     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
136c0     52 00 00 5F 
136c4     20 E4 85 51 |  if_ne	sub	objptr, ##42016
136c8                 | '   if not isnum(args(i)) then 
136c8     30 4F 05 F1 | 	add	fp, #304
136cc     A7 32 02 FB | 	rdlong	local07, fp
136d0     19 35 02 F6 | 	mov	local08, local07
136d4     02 34 66 F0 | 	shl	local08, #2
136d8     04 4F 85 F1 | 	sub	fp, #260
136dc     A7 36 02 F6 | 	mov	local09, fp
136e0     A7 34 02 F1 | 	add	local08, fp
136e4     1A 13 02 FB | 	rdlong	arg01, local08
136e8     2C 4E 85 F1 | 	sub	fp, #44
136ec     58 2C BF FD | 	call	#_isnum
136f0     FD 2E 22 F6 | 	not	local05, result1
136f4     00 2E 0E F2 | 	cmp	local05, #0 wz
136f8     44 01 90 AD |  if_e	jmp	#LR__1618
136fc     52 00 00 FF 
13700     20 E4 05 F1 | 	add	objptr, ##42016
13704     F2 56 68 FC | 	wrlong	#43, objptr
13708     52 00 00 FF 
1370c     20 E4 85 F1 | 	sub	objptr, ##42016
13710     04 4E 05 F1 | 	add	fp, #4
13714     A7 12 02 FB | 	rdlong	arg01, fp
13718     04 4E 85 F1 | 	sub	fp, #4
1371c     09 29 02 F6 | 	mov	local02, arg01
13720     97 06 48 FB | 	callpa	#(@LR__1615-@LR__1614)>>2,fcache_load_ptr_
13724                 | LR__1614
13724     14 FB C9 FA | 	rdbyte	result1, local02 wz
13728     01 28 06 51 |  if_ne	add	local02, #1
1372c     F4 FF 9F 5D |  if_ne	jmp	#LR__1614
13730                 | LR__1615
13730     09 29 82 F1 | 	sub	local02, arg01
13734     14 33 02 F6 | 	mov	local07, local02
13738     38 4F 05 F1 | 	add	fp, #312
1373c     A7 32 62 FC | 	wrlong	local07, fp
13740     51 00 00 FF 
13744     AC E5 05 F1 | 	add	objptr, ##41900
13748     F2 12 02 FB | 	rdlong	arg01, objptr
1374c     19 13 82 F1 | 	sub	arg01, local07
13750     04 12 86 F1 | 	sub	arg01, #4
13754     03 12 26 F5 | 	andn	arg01, #3
13758     F2 12 62 FC | 	wrlong	arg01, objptr
1375c     51 00 00 FF 
13760     AC E5 85 F1 | 	sub	objptr, ##41900
13764     A7 14 02 FB | 	rdlong	arg02, fp
13768     38 4F 85 F1 | 	sub	fp, #312
1376c     A0 CD B0 FD | 	call	#_pslpoke
13770                 | '     pslpoke memtop,l
13770                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
13770     34 4F 05 F1 | 	add	fp, #308
13774     A7 02 68 FC | 	wrlong	#1, fp
13778     04 4E 05 F1 | 	add	fp, #4
1377c     A7 38 02 FB | 	rdlong	local10, fp
13780     38 4F 85 F1 | 	sub	fp, #312
13784     01 38 06 F1 | 	add	local10, #1
13788                 | LR__1616
13788     34 4F 05 F1 | 	add	fp, #308
1378c     A7 2E 02 FB | 	rdlong	local05, fp
13790     34 4F 85 F1 | 	sub	fp, #308
13794     1C 2F 52 F2 | 	cmps	local05, local10 wc
13798     84 00 90 3D |  if_ae	jmp	#LR__1617
1379c     51 00 00 FF 
137a0     AC E5 05 F1 | 	add	objptr, ##41900
137a4     F2 32 02 FB | 	rdlong	local07, objptr
137a8     51 00 00 FF 
137ac     AC E5 85 F1 | 	sub	objptr, ##41900
137b0     03 32 06 F1 | 	add	local07, #3
137b4     34 4F 05 F1 | 	add	fp, #308
137b8     A7 3A 02 FB | 	rdlong	local11, fp
137bc     1D 33 02 F1 | 	add	local07, local11
137c0     04 4E 85 F1 | 	sub	fp, #4
137c4     A7 3C 02 FB | 	rdlong	local12, fp
137c8     02 3C 66 F0 | 	shl	local12, #2
137cc     04 4F 85 F1 | 	sub	fp, #260
137d0     A7 3E 02 F6 | 	mov	local13, fp
137d4     A7 3C 02 F1 | 	add	local12, fp
137d8     1E 13 02 FB | 	rdlong	arg01, local12
137dc     2C 4E 85 F1 | 	sub	fp, #44
137e0     01 40 06 F6 | 	mov	local14, #1
137e4     1D 15 02 F6 | 	mov	arg02, local11
137e8     01 16 06 F6 | 	mov	arg03, #1
137ec     B8 26 B1 FD | 	call	#__system__Mid_S
137f0     FD 14 C2 FA | 	rdbyte	arg02, result1
137f4     19 13 02 F6 | 	mov	arg01, local07
137f8     A4 CD B0 FD | 	call	#_pspoke
137fc     34 4F 05 F1 | 	add	fp, #308
13800     A7 34 02 FB | 	rdlong	local08, fp
13804     1A 33 02 F6 | 	mov	local07, local08
13808     1A 31 02 F6 | 	mov	local06, local08
1380c     18 37 02 F6 | 	mov	local09, local06
13810     01 36 06 F1 | 	add	local09, #1
13814     A7 36 62 FC | 	wrlong	local09, fp
13818     34 4F 85 F1 | 	sub	fp, #308
1381c     68 FF 9F FD | 	jmp	#LR__1616
13820                 | LR__1617
13820     51 00 00 FF 
13824     AC E5 05 F1 | 	add	objptr, ##41900
13828     F2 2E 02 FB | 	rdlong	local05, objptr
1382c     51 00 00 FF 
13830     AC E5 85 F1 | 	sub	objptr, ##41900
13834     10 4E 05 F1 | 	add	fp, #16
13838     A7 2E 62 FC | 	wrlong	local05, fp
1383c     10 4E 85 F1 | 	sub	fp, #16
13840                 | LR__1618
13840     D4 91 BF FD | 	call	#_pop
13844     FE 2E 02 F6 | 	mov	local05, result2
13848     FF 42 02 F6 | 	mov	local15, result3
1384c     1C 4E 05 F1 | 	add	fp, #28
13850     A7 FA 61 FC | 	wrlong	result1, fp
13854     04 4E 05 F1 | 	add	fp, #4
13858     A7 2E 62 FC | 	wrlong	local05, fp
1385c     04 4E 05 F1 | 	add	fp, #4
13860     A7 42 62 FC | 	wrlong	local15, fp
13864     04 4E 85 F1 | 	sub	fp, #4
13868     A7 44 02 FB | 	rdlong	local16, fp
1386c     0C 4E 85 F1 | 	sub	fp, #12
13870     A7 44 62 FC | 	wrlong	local16, fp
13874                 | '   t1=pop() : vartype=t1.result.twowords(1)
13874                 | '   select case vartype
13874     14 4E 85 F1 | 	sub	fp, #20
13878     22 47 0A F6 | 	mov	local17, local16 wz
1387c     64 00 90 AD |  if_e	jmp	#LR__1619
13880     00 47 0E F2 | 	cmp	local17, #256 wz
13884     6C 00 90 AD |  if_e	jmp	#LR__1620
13888     01 47 0E F2 | 	cmp	local17, #257 wz
1388c     74 00 90 AD |  if_e	jmp	#LR__1621
13890     02 47 0E F2 | 	cmp	local17, #258 wz
13894     7C 00 90 AD |  if_e	jmp	#LR__1622
13898     03 47 0E F2 | 	cmp	local17, #259 wz
1389c     84 00 90 AD |  if_e	jmp	#LR__1623
138a0     04 47 0E F2 | 	cmp	local17, #260 wz
138a4     8C 00 90 AD |  if_e	jmp	#LR__1624
138a8     05 47 0E F2 | 	cmp	local17, #261 wz
138ac     94 00 90 AD |  if_e	jmp	#LR__1625
138b0     06 47 0E F2 | 	cmp	local17, #262 wz
138b4     9C 00 90 AD |  if_e	jmp	#LR__1626
138b8     07 47 0E F2 | 	cmp	local17, #263 wz
138bc     A4 00 90 AD |  if_e	jmp	#LR__1627
138c0     08 47 0E F2 | 	cmp	local17, #264 wz
138c4     AC 00 90 AD |  if_e	jmp	#LR__1628
138c8     09 47 0E F2 | 	cmp	local17, #265 wz
138cc     B4 00 90 AD |  if_e	jmp	#LR__1629
138d0     0A 47 0E F2 | 	cmp	local17, #266 wz
138d4     BC 00 90 AD |  if_e	jmp	#LR__1630
138d8     0B 47 0E F2 | 	cmp	local17, #267 wz
138dc     C4 00 90 AD |  if_e	jmp	#LR__1631
138e0     D0 00 90 FD | 	jmp	#LR__1632
138e4                 | LR__1619
138e4     18 4E 05 F1 | 	add	fp, #24
138e8     A7 18 68 FC | 	wrlong	#12, fp
138ec     18 4E 85 F1 | 	sub	fp, #24
138f0     CC 00 90 FD | 	jmp	#LR__1633
138f4                 | LR__1620
138f4     18 4E 05 F1 | 	add	fp, #24
138f8     A7 18 68 FC | 	wrlong	#12, fp
138fc     18 4E 85 F1 | 	sub	fp, #24
13900     BC 00 90 FD | 	jmp	#LR__1633
13904                 | LR__1621
13904     18 4E 05 F1 | 	add	fp, #24
13908     A7 02 68 FC | 	wrlong	#1, fp
1390c     18 4E 85 F1 | 	sub	fp, #24
13910     AC 00 90 FD | 	jmp	#LR__1633
13914                 | LR__1622
13914     18 4E 05 F1 | 	add	fp, #24
13918     A7 02 68 FC | 	wrlong	#1, fp
1391c     18 4E 85 F1 | 	sub	fp, #24
13920     9C 00 90 FD | 	jmp	#LR__1633
13924                 | LR__1623
13924     18 4E 05 F1 | 	add	fp, #24
13928     A7 04 68 FC | 	wrlong	#2, fp
1392c     18 4E 85 F1 | 	sub	fp, #24
13930     8C 00 90 FD | 	jmp	#LR__1633
13934                 | LR__1624
13934     18 4E 05 F1 | 	add	fp, #24
13938     A7 04 68 FC | 	wrlong	#2, fp
1393c     18 4E 85 F1 | 	sub	fp, #24
13940     7C 00 90 FD | 	jmp	#LR__1633
13944                 | LR__1625
13944     18 4E 05 F1 | 	add	fp, #24
13948     A7 08 68 FC | 	wrlong	#4, fp
1394c     18 4E 85 F1 | 	sub	fp, #24
13950     6C 00 90 FD | 	jmp	#LR__1633
13954                 | LR__1626
13954     18 4E 05 F1 | 	add	fp, #24
13958     A7 08 68 FC | 	wrlong	#4, fp
1395c     18 4E 85 F1 | 	sub	fp, #24
13960     5C 00 90 FD | 	jmp	#LR__1633
13964                 | LR__1627
13964     18 4E 05 F1 | 	add	fp, #24
13968     A7 10 68 FC | 	wrlong	#8, fp
1396c     18 4E 85 F1 | 	sub	fp, #24
13970     4C 00 90 FD | 	jmp	#LR__1633
13974                 | LR__1628
13974     18 4E 05 F1 | 	add	fp, #24
13978     A7 10 68 FC | 	wrlong	#8, fp
1397c     18 4E 85 F1 | 	sub	fp, #24
13980     3C 00 90 FD | 	jmp	#LR__1633
13984                 | LR__1629
13984     18 4E 05 F1 | 	add	fp, #24
13988     A7 0C 68 FC | 	wrlong	#6, fp
1398c     18 4E 85 F1 | 	sub	fp, #24
13990     2C 00 90 FD | 	jmp	#LR__1633
13994                 | LR__1630
13994     18 4E 05 F1 | 	add	fp, #24
13998     A7 10 68 FC | 	wrlong	#8, fp
1399c     18 4E 85 F1 | 	sub	fp, #24
139a0     1C 00 90 FD | 	jmp	#LR__1633
139a4                 | LR__1631
139a4     18 4E 05 F1 | 	add	fp, #24
139a8     A7 0A 68 FC | 	wrlong	#5, fp
139ac     18 4E 85 F1 | 	sub	fp, #24
139b0     0C 00 90 FD | 	jmp	#LR__1633
139b4                 | LR__1632
139b4     18 4E 05 F1 | 	add	fp, #24
139b8     A7 18 68 FC | 	wrlong	#12, fp
139bc     18 4E 85 F1 | 	sub	fp, #24
139c0                 | LR__1633
139c0                 | '   if esize=12 andalso t1.result.uresult<$80000 then
139c0     18 4E 05 F1 | 	add	fp, #24
139c4     A7 44 02 FB | 	rdlong	local16, fp
139c8     18 4E 85 F1 | 	sub	fp, #24
139cc     0C 44 0E F2 | 	cmp	local16, #12 wz
139d0     74 01 90 5D |  if_ne	jmp	#LR__1638
139d4     1C 4E 05 F1 | 	add	fp, #28
139d8     A7 32 02 FB | 	rdlong	local07, fp
139dc     1C 4E 85 F1 | 	sub	fp, #28
139e0     00 04 00 FF 
139e4     00 32 16 F2 | 	cmp	local07, ##524288 wc
139e8     5C 01 90 3D |  if_ae	jmp	#LR__1638
139ec                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
139ec     52 00 00 FF 
139f0     20 E4 05 F1 | 	add	objptr, ##42016
139f4     F2 44 02 FB | 	rdlong	local16, objptr
139f8     52 00 00 FF 
139fc     20 E4 85 F1 | 	sub	objptr, ##42016
13a00     1C 44 0E F2 | 	cmp	local16, #28 wz
13a04     38 00 90 5D |  if_ne	jmp	#LR__1634
13a08     1C 4E 05 F1 | 	add	fp, #28
13a0c     A7 44 02 FB | 	rdlong	local16, fp
13a10     14 4F 05 F1 | 	add	fp, #276
13a14     A7 32 02 FB | 	rdlong	local07, fp
13a18     19 35 02 F6 | 	mov	local08, local07
13a1c     02 34 66 F0 | 	shl	local08, #2
13a20     04 4F 85 F1 | 	sub	fp, #260
13a24     A7 36 02 F6 | 	mov	local09, fp
13a28     A7 34 02 F1 | 	add	local08, fp
13a2c     1A 13 02 FB | 	rdlong	arg01, local08
13a30     00 14 06 F6 | 	mov	arg02, #0
13a34     2C 4E 85 F1 | 	sub	fp, #44
13a38     C8 37 B1 FD | 	call	#__system____builtin_atoi
13a3c     22 FB 61 FC | 	wrlong	result1, local16
13a40                 | LR__1634
13a40                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13a40     52 00 00 FF 
13a44     20 E4 05 F1 | 	add	objptr, ##42016
13a48     F2 44 02 FB | 	rdlong	local16, objptr
13a4c     52 00 00 FF 
13a50     20 E4 85 F1 | 	sub	objptr, ##42016
13a54     1D 44 0E F2 | 	cmp	local16, #29 wz
13a58     38 00 90 5D |  if_ne	jmp	#LR__1635
13a5c     1C 4E 05 F1 | 	add	fp, #28
13a60     A7 44 02 FB | 	rdlong	local16, fp
13a64     14 4F 05 F1 | 	add	fp, #276
13a68     A7 32 02 FB | 	rdlong	local07, fp
13a6c     19 35 02 F6 | 	mov	local08, local07
13a70     02 34 66 F0 | 	shl	local08, #2
13a74     04 4F 85 F1 | 	sub	fp, #260
13a78     A7 36 02 F6 | 	mov	local09, fp
13a7c     A7 34 02 F1 | 	add	local08, fp
13a80     1A 13 02 FB | 	rdlong	arg01, local08
13a84     00 14 06 F6 | 	mov	arg02, #0
13a88     2C 4E 85 F1 | 	sub	fp, #44
13a8c     74 37 B1 FD | 	call	#__system____builtin_atoi
13a90     22 FB 61 FC | 	wrlong	result1, local16
13a94                 | LR__1635
13a94                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13a94     52 00 00 FF 
13a98     20 E4 05 F1 | 	add	objptr, ##42016
13a9c     F2 44 02 FB | 	rdlong	local16, objptr
13aa0     52 00 00 FF 
13aa4     20 E4 85 F1 | 	sub	objptr, ##42016
13aa8     1E 44 0E F2 | 	cmp	local16, #30 wz
13aac     3C 00 90 5D |  if_ne	jmp	#LR__1636
13ab0     30 4F 05 F1 | 	add	fp, #304
13ab4     A7 32 02 FB | 	rdlong	local07, fp
13ab8     02 32 66 F0 | 	shl	local07, #2
13abc     04 4F 85 F1 | 	sub	fp, #260
13ac0     A7 34 02 F6 | 	mov	local08, fp
13ac4     A7 32 02 F1 | 	add	local07, fp
13ac8     19 13 02 FB | 	rdlong	arg01, local07
13acc     2C 4E 85 F1 | 	sub	fp, #44
13ad0     C4 38 B1 FD | 	call	#__system____builtin_atof
13ad4     28 4E 05 F1 | 	add	fp, #40
13ad8     A7 FA 61 FC | 	wrlong	result1, fp
13adc     0C 4E 85 F1 | 	sub	fp, #12
13ae0     A7 44 02 FB | 	rdlong	local16, fp
13ae4     1C 4E 85 F1 | 	sub	fp, #28
13ae8     22 FB 61 FC | 	wrlong	result1, local16
13aec                 | LR__1636
13aec                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13aec     52 00 00 FF 
13af0     20 E4 05 F1 | 	add	objptr, ##42016
13af4     F2 44 02 FB | 	rdlong	local16, objptr
13af8     52 00 00 FF 
13afc     20 E4 85 F1 | 	sub	objptr, ##42016
13b00     2B 44 0E F2 | 	cmp	local16, #43 wz
13b04     18 00 90 5D |  if_ne	jmp	#LR__1637
13b08     1C 4E 05 F1 | 	add	fp, #28
13b0c     A7 12 02 FB | 	rdlong	arg01, fp
13b10     0C 4E 85 F1 | 	sub	fp, #12
13b14     A7 14 02 FB | 	rdlong	arg02, fp
13b18     10 4E 85 F1 | 	sub	fp, #16
13b1c     09 15 62 FC | 	wrlong	arg02, arg01
13b20                 | LR__1637
13b20     1C 4E 05 F1 | 	add	fp, #28
13b24     A7 12 02 FB | 	rdlong	arg01, fp
13b28     1C 4E 85 F1 | 	sub	fp, #28
13b2c     08 12 06 F1 | 	add	arg01, #8
13b30     52 00 00 FF 
13b34     20 E4 05 F1 | 	add	objptr, ##42016
13b38     F2 14 02 FB | 	rdlong	arg02, objptr
13b3c     52 00 00 FF 
13b40     20 E4 85 F1 | 	sub	objptr, ##42016
13b44     09 15 62 FC | 	wrlong	arg02, arg01
13b48                 | LR__1638
13b48                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13b48     18 4E 05 F1 | 	add	fp, #24
13b4c     A7 44 02 FB | 	rdlong	local16, fp
13b50     18 4E 85 F1 | 	sub	fp, #24
13b54     0C 44 0E F2 | 	cmp	local16, #12 wz
13b58     94 01 90 5D |  if_ne	jmp	#LR__1643
13b5c     1C 4E 05 F1 | 	add	fp, #28
13b60     A7 32 02 FB | 	rdlong	local07, fp
13b64     1C 4E 85 F1 | 	sub	fp, #28
13b68     00 04 00 FF 
13b6c     00 32 16 F2 | 	cmp	local07, ##524288 wc
13b70     7C 01 90 CD |  if_b	jmp	#LR__1643
13b74                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13b74     52 00 00 FF 
13b78     20 E4 05 F1 | 	add	objptr, ##42016
13b7c     F2 44 02 FB | 	rdlong	local16, objptr
13b80     52 00 00 FF 
13b84     20 E4 85 F1 | 	sub	objptr, ##42016
13b88     1C 44 0E F2 | 	cmp	local16, #28 wz
13b8c     40 00 90 5D |  if_ne	jmp	#LR__1639
13b90     1C 4E 05 F1 | 	add	fp, #28
13b94     A7 44 02 FB | 	rdlong	local16, fp
13b98     14 4F 05 F1 | 	add	fp, #276
13b9c     A7 32 02 FB | 	rdlong	local07, fp
13ba0     19 35 02 F6 | 	mov	local08, local07
13ba4     02 34 66 F0 | 	shl	local08, #2
13ba8     04 4F 85 F1 | 	sub	fp, #260
13bac     A7 36 02 F6 | 	mov	local09, fp
13bb0     A7 34 02 F1 | 	add	local08, fp
13bb4     1A 13 02 FB | 	rdlong	arg01, local08
13bb8     00 14 06 F6 | 	mov	arg02, #0
13bbc     2C 4E 85 F1 | 	sub	fp, #44
13bc0     40 36 B1 FD | 	call	#__system____builtin_atoi
13bc4     FD 14 02 F6 | 	mov	arg02, result1
13bc8     22 13 02 F6 | 	mov	arg01, local16
13bcc     40 C9 B0 FD | 	call	#_pslpoke
13bd0                 | LR__1639
13bd0                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13bd0     52 00 00 FF 
13bd4     20 E4 05 F1 | 	add	objptr, ##42016
13bd8     F2 44 02 FB | 	rdlong	local16, objptr
13bdc     52 00 00 FF 
13be0     20 E4 85 F1 | 	sub	objptr, ##42016
13be4     1D 44 0E F2 | 	cmp	local16, #29 wz
13be8     40 00 90 5D |  if_ne	jmp	#LR__1640
13bec     1C 4E 05 F1 | 	add	fp, #28
13bf0     A7 44 02 FB | 	rdlong	local16, fp
13bf4     14 4F 05 F1 | 	add	fp, #276
13bf8     A7 32 02 FB | 	rdlong	local07, fp
13bfc     19 35 02 F6 | 	mov	local08, local07
13c00     02 34 66 F0 | 	shl	local08, #2
13c04     04 4F 85 F1 | 	sub	fp, #260
13c08     A7 36 02 F6 | 	mov	local09, fp
13c0c     A7 34 02 F1 | 	add	local08, fp
13c10     1A 13 02 FB | 	rdlong	arg01, local08
13c14     00 14 06 F6 | 	mov	arg02, #0
13c18     2C 4E 85 F1 | 	sub	fp, #44
13c1c     E4 35 B1 FD | 	call	#__system____builtin_atoi
13c20     FD 14 02 F6 | 	mov	arg02, result1
13c24     22 13 02 F6 | 	mov	arg01, local16
13c28     E4 C8 B0 FD | 	call	#_pslpoke
13c2c                 | LR__1640
13c2c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13c2c     52 00 00 FF 
13c30     20 E4 05 F1 | 	add	objptr, ##42016
13c34     F2 44 02 FB | 	rdlong	local16, objptr
13c38     52 00 00 FF 
13c3c     20 E4 85 F1 | 	sub	objptr, ##42016
13c40     1E 44 0E F2 | 	cmp	local16, #30 wz
13c44     4C 00 90 5D |  if_ne	jmp	#LR__1641
13c48     30 4F 05 F1 | 	add	fp, #304
13c4c     A7 32 02 FB | 	rdlong	local07, fp
13c50     02 32 66 F0 | 	shl	local07, #2
13c54     04 4F 85 F1 | 	sub	fp, #260
13c58     A7 34 02 F6 | 	mov	local08, fp
13c5c     A7 32 02 F1 | 	add	local07, fp
13c60     19 13 02 FB | 	rdlong	arg01, local07
13c64     2C 4E 85 F1 | 	sub	fp, #44
13c68     2C 37 B1 FD | 	call	#__system____builtin_atof
13c6c     28 4E 05 F1 | 	add	fp, #40
13c70     A7 FA 61 FC | 	wrlong	result1, fp
13c74     0C 4E 85 F1 | 	sub	fp, #12
13c78     A7 44 02 FB | 	rdlong	local16, fp
13c7c     0C 4E 05 F1 | 	add	fp, #12
13c80     A7 12 02 F6 | 	mov	arg01, fp
13c84     28 4E 85 F1 | 	sub	fp, #40
13c88     09 15 02 FB | 	rdlong	arg02, arg01
13c8c     22 13 02 F6 | 	mov	arg01, local16
13c90     7C C8 B0 FD | 	call	#_pslpoke
13c94                 | LR__1641
13c94                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13c94     52 00 00 FF 
13c98     20 E4 05 F1 | 	add	objptr, ##42016
13c9c     F2 44 02 FB | 	rdlong	local16, objptr
13ca0     52 00 00 FF 
13ca4     20 E4 85 F1 | 	sub	objptr, ##42016
13ca8     2B 44 0E F2 | 	cmp	local16, #43 wz
13cac     18 00 90 5D |  if_ne	jmp	#LR__1642
13cb0     1C 4E 05 F1 | 	add	fp, #28
13cb4     A7 12 02 FB | 	rdlong	arg01, fp
13cb8     0C 4E 85 F1 | 	sub	fp, #12
13cbc     A7 14 02 FB | 	rdlong	arg02, fp
13cc0     10 4E 85 F1 | 	sub	fp, #16
13cc4     48 C8 B0 FD | 	call	#_pslpoke
13cc8                 | LR__1642
13cc8     1C 4E 05 F1 | 	add	fp, #28
13ccc     A7 12 02 FB | 	rdlong	arg01, fp
13cd0     1C 4E 85 F1 | 	sub	fp, #28
13cd4     08 12 06 F1 | 	add	arg01, #8
13cd8     52 00 00 FF 
13cdc     20 E4 05 F1 | 	add	objptr, ##42016
13ce0     F2 14 02 FB | 	rdlong	arg02, objptr
13ce4     52 00 00 FF 
13ce8     20 E4 85 F1 | 	sub	objptr, ##42016
13cec     20 C8 B0 FD | 	call	#_pslpoke
13cf0                 | LR__1643
13cf0                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13cf0     18 4E 05 F1 | 	add	fp, #24
13cf4     A7 44 02 FB | 	rdlong	local16, fp
13cf8     18 4E 85 F1 | 	sub	fp, #24
13cfc     05 44 0E F2 | 	cmp	local16, #5 wz
13d00     52 00 00 AF 
13d04     20 E4 05 A1 |  if_e	add	objptr, ##42016
13d08     F2 42 02 AB |  if_e	rdlong	local15, objptr
13d0c     52 00 00 AF 
13d10     20 E4 85 A1 |  if_e	sub	objptr, ##42016
13d14     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13d18     18 00 90 5D |  if_ne	jmp	#LR__1644
13d1c     1C 4E 05 F1 | 	add	fp, #28
13d20     A7 12 02 FB | 	rdlong	arg01, fp
13d24     0C 4E 85 F1 | 	sub	fp, #12
13d28     A7 14 02 FB | 	rdlong	arg02, fp
13d2c     10 4E 85 F1 | 	sub	fp, #16
13d30     DC C7 B0 FD | 	call	#_pslpoke
13d34                 | LR__1644
13d34                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13d34     18 4E 05 F1 | 	add	fp, #24
13d38     A7 44 02 FB | 	rdlong	local16, fp
13d3c     18 4E 85 F1 | 	sub	fp, #24
13d40     04 44 0E F2 | 	cmp	local16, #4 wz
13d44     54 00 90 5D |  if_ne	jmp	#LR__1645
13d48     52 00 00 FF 
13d4c     20 E4 05 F1 | 	add	objptr, ##42016
13d50     F2 42 02 FB | 	rdlong	local15, objptr
13d54     52 00 00 FF 
13d58     20 E4 85 F1 | 	sub	objptr, ##42016
13d5c     2B 42 0E F2 | 	cmp	local15, #43 wz
13d60     38 00 90 AD |  if_e	jmp	#LR__1645
13d64     1C 4E 05 F1 | 	add	fp, #28
13d68     A7 44 02 FB | 	rdlong	local16, fp
13d6c     14 4F 05 F1 | 	add	fp, #276
13d70     A7 34 02 FB | 	rdlong	local08, fp
13d74     02 34 66 F0 | 	shl	local08, #2
13d78     04 4F 85 F1 | 	sub	fp, #260
13d7c     A7 34 02 F1 | 	add	local08, fp
13d80     1A 13 02 FB | 	rdlong	arg01, local08
13d84     00 14 06 F6 | 	mov	arg02, #0
13d88     2C 4E 85 F1 | 	sub	fp, #44
13d8c     74 34 B1 FD | 	call	#__system____builtin_atoi
13d90     FD 14 02 F6 | 	mov	arg02, result1
13d94     22 13 02 F6 | 	mov	arg01, local16
13d98     74 C7 B0 FD | 	call	#_pslpoke
13d9c                 | LR__1645
13d9c                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13d9c     18 4E 05 F1 | 	add	fp, #24
13da0     A7 44 02 FB | 	rdlong	local16, fp
13da4     18 4E 85 F1 | 	sub	fp, #24
13da8     02 44 0E F2 | 	cmp	local16, #2 wz
13dac     54 00 90 5D |  if_ne	jmp	#LR__1646
13db0     52 00 00 FF 
13db4     20 E4 05 F1 | 	add	objptr, ##42016
13db8     F2 42 02 FB | 	rdlong	local15, objptr
13dbc     52 00 00 FF 
13dc0     20 E4 85 F1 | 	sub	objptr, ##42016
13dc4     2B 42 0E F2 | 	cmp	local15, #43 wz
13dc8     38 00 90 AD |  if_e	jmp	#LR__1646
13dcc     1C 4E 05 F1 | 	add	fp, #28
13dd0     A7 44 02 FB | 	rdlong	local16, fp
13dd4     14 4F 05 F1 | 	add	fp, #276
13dd8     A7 34 02 FB | 	rdlong	local08, fp
13ddc     02 34 66 F0 | 	shl	local08, #2
13de0     04 4F 85 F1 | 	sub	fp, #260
13de4     A7 34 02 F1 | 	add	local08, fp
13de8     1A 13 02 FB | 	rdlong	arg01, local08
13dec     00 14 06 F6 | 	mov	arg02, #0
13df0     2C 4E 85 F1 | 	sub	fp, #44
13df4     0C 34 B1 FD | 	call	#__system____builtin_atoi
13df8     FD 14 02 F6 | 	mov	arg02, result1
13dfc     22 13 02 F6 | 	mov	arg01, local16
13e00     54 C7 B0 FD | 	call	#_psdpoke
13e04                 | LR__1646
13e04                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13e04     18 4E 05 F1 | 	add	fp, #24
13e08     A7 44 02 FB | 	rdlong	local16, fp
13e0c     18 4E 85 F1 | 	sub	fp, #24
13e10     01 44 0E F2 | 	cmp	local16, #1 wz
13e14     54 00 90 5D |  if_ne	jmp	#LR__1647
13e18     52 00 00 FF 
13e1c     20 E4 05 F1 | 	add	objptr, ##42016
13e20     F2 42 02 FB | 	rdlong	local15, objptr
13e24     52 00 00 FF 
13e28     20 E4 85 F1 | 	sub	objptr, ##42016
13e2c     2B 42 0E F2 | 	cmp	local15, #43 wz
13e30     38 00 90 AD |  if_e	jmp	#LR__1647
13e34     1C 4E 05 F1 | 	add	fp, #28
13e38     A7 44 02 FB | 	rdlong	local16, fp
13e3c     14 4F 05 F1 | 	add	fp, #276
13e40     A7 34 02 FB | 	rdlong	local08, fp
13e44     02 34 66 F0 | 	shl	local08, #2
13e48     04 4F 85 F1 | 	sub	fp, #260
13e4c     A7 34 02 F1 | 	add	local08, fp
13e50     1A 13 02 FB | 	rdlong	arg01, local08
13e54     00 14 06 F6 | 	mov	arg02, #0
13e58     2C 4E 85 F1 | 	sub	fp, #44
13e5c     A4 33 B1 FD | 	call	#__system____builtin_atoi
13e60     FD 14 02 F6 | 	mov	arg02, result1
13e64     22 13 02 F6 | 	mov	arg01, local16
13e68     34 C7 B0 FD | 	call	#_pspoke
13e6c                 | LR__1647
13e6c                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13e6c     18 4E 05 F1 | 	add	fp, #24
13e70     A7 44 02 FB | 	rdlong	local16, fp
13e74     18 4E 85 F1 | 	sub	fp, #24
13e78     06 44 0E F2 | 	cmp	local16, #6 wz
13e7c     64 00 90 5D |  if_ne	jmp	#LR__1648
13e80     52 00 00 FF 
13e84     20 E4 05 F1 | 	add	objptr, ##42016
13e88     F2 42 02 FB | 	rdlong	local15, objptr
13e8c     52 00 00 FF 
13e90     20 E4 85 F1 | 	sub	objptr, ##42016
13e94     2B 42 0E F2 | 	cmp	local15, #43 wz
13e98     48 00 90 AD |  if_e	jmp	#LR__1648
13e9c     30 4F 05 F1 | 	add	fp, #304
13ea0     A7 32 02 FB | 	rdlong	local07, fp
13ea4     02 32 66 F0 | 	shl	local07, #2
13ea8     04 4F 85 F1 | 	sub	fp, #260
13eac     A7 32 02 F1 | 	add	local07, fp
13eb0     19 13 02 FB | 	rdlong	arg01, local07
13eb4     2C 4E 85 F1 | 	sub	fp, #44
13eb8     DC 34 B1 FD | 	call	#__system____builtin_atof
13ebc     28 4E 05 F1 | 	add	fp, #40
13ec0     A7 FA 61 FC | 	wrlong	result1, fp
13ec4     0C 4E 85 F1 | 	sub	fp, #12
13ec8     A7 44 02 FB | 	rdlong	local16, fp
13ecc     0C 4E 05 F1 | 	add	fp, #12
13ed0     A7 12 02 F6 | 	mov	arg01, fp
13ed4     28 4E 85 F1 | 	sub	fp, #40
13ed8     09 15 02 FB | 	rdlong	arg02, arg01
13edc     22 13 02 F6 | 	mov	arg01, local16
13ee0     2C C6 B0 FD | 	call	#_pslpoke
13ee4                 | LR__1648
13ee4     30 4F 05 F1 | 	add	fp, #304
13ee8     A7 42 02 FB | 	rdlong	local15, fp
13eec     01 42 06 F1 | 	add	local15, #1
13ef0     A7 42 62 FC | 	wrlong	local15, fp
13ef4     30 4F 85 F1 | 	sub	fp, #304
13ef8     E4 F6 9F FD | 	jmp	#LR__1613
13efc                 | LR__1649
13efc                 | LR__1650
13efc     A7 F0 03 F6 | 	mov	ptra, fp
13f00     B2 00 A0 FD | 	call	#popregs_
13f04                 | _do_input_ret
13f04     2D 00 64 FD | 	ret
13f08                 | 
13f08                 | ' 
13f08                 | ' ' ----------------  left$
13f08                 | ' 
13f08                 | ' sub do_left
13f08                 | _do_left
13f08     00 4A 05 F6 | 	mov	COUNT_, #0
13f0c     A8 00 A0 FD | 	call	#pushregs_
13f10     14 F0 07 F1 | 	add	ptra, #20
13f14     4A 00 00 FF 
13f18     80 E4 05 F1 | 	add	objptr, ##38016
13f1c     F2 16 02 FB | 	rdlong	arg03, objptr
13f20     0B 15 02 F6 | 	mov	arg02, arg03
13f24     01 14 66 F0 | 	shl	arg02, #1
13f28     0B 15 02 F1 | 	add	arg02, arg03
13f2c     02 14 66 F0 | 	shl	arg02, #2
13f30     03 00 00 FF 
13f34     04 E4 85 F1 | 	sub	objptr, ##1540
13f38     F2 14 02 F1 | 	add	arg02, objptr
13f3c     0A 17 02 FB | 	rdlong	arg03, arg02
13f40     0C 4E 05 F1 | 	add	fp, #12
13f44     A7 16 62 FC | 	wrlong	arg03, fp
13f48                 | ' 
13f48                 | ' numpar=compiledline(lineptr_e).result.uresult
13f48                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13f48     0C 4E 85 F1 | 	sub	fp, #12
13f4c     02 16 0E F2 | 	cmp	arg03, #2 wz
13f50     47 00 00 FF 
13f54     7C E4 85 F1 | 	sub	objptr, ##36476
13f58     40 00 90 AD |  if_e	jmp	#LR__1660
13f5c     00 12 06 F6 | 	mov	arg01, #0
13f60     D8 5A B1 FD | 	call	#__system___getiolock_0573
13f64     FD 12 02 F6 | 	mov	arg01, result1
13f68     A8 FD B0 FD | 	call	#__system___lockmem
13f6c     A0 01 00 FF 
13f70     66 15 06 F6 | 	mov	arg02, ##@LR__5739
13f74     00 12 06 F6 | 	mov	arg01, #0
13f78     00 16 06 F6 | 	mov	arg03, #0
13f7c     88 0A B1 FD | 	call	#__system___basic_print_string
13f80     00 12 06 F6 | 	mov	arg01, #0
13f84     B4 5A B1 FD | 	call	#__system___getiolock_0573
13f88     FD 00 68 FC | 	wrlong	#0, result1
13f8c     27 12 06 F6 | 	mov	arg01, #39
13f90     00 14 06 F6 | 	mov	arg02, #0
13f94     EC C3 B0 FD | 	call	#_printerror
13f98     EC 00 90 FD | 	jmp	#LR__1663
13f9c                 | LR__1660
13f9c     78 8A BF FD | 	call	#_pop
13fa0     FF 16 02 F6 | 	mov	arg03, result3
13fa4     A7 FA 61 FC | 	wrlong	result1, fp
13fa8     04 4E 05 F1 | 	add	fp, #4
13fac     A7 FC 61 FC | 	wrlong	result2, fp
13fb0     04 4E 05 F1 | 	add	fp, #4
13fb4     A7 16 62 FC | 	wrlong	arg03, fp
13fb8     08 4E 85 F1 | 	sub	fp, #8
13fbc     A7 12 02 F6 | 	mov	arg01, fp
13fc0     38 8C BF FD | 	call	#_converttoint
13fc4     FD 16 02 F6 | 	mov	arg03, result1
13fc8     10 4E 05 F1 | 	add	fp, #16
13fcc     A7 16 62 FC | 	wrlong	arg03, fp
13fd0     10 4E 85 F1 | 	sub	fp, #16
13fd4     40 8A BF FD | 	call	#_pop
13fd8     FF 16 02 F6 | 	mov	arg03, result3
13fdc     A7 FA 61 FC | 	wrlong	result1, fp
13fe0     04 4E 05 F1 | 	add	fp, #4
13fe4     A7 FC 61 FC | 	wrlong	result2, fp
13fe8     04 4E 05 F1 | 	add	fp, #4
13fec     A7 16 62 FC | 	wrlong	arg03, fp
13ff0                 | ' t1=pop() : arg=converttoint(t1)
13ff0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13ff0     08 4E 85 F1 | 	sub	fp, #8
13ff4     2B 16 0E F2 | 	cmp	arg03, #43 wz
13ff8     18 00 90 5D |  if_ne	jmp	#LR__1661
13ffc     A7 12 02 FB | 	rdlong	arg01, fp
14000     8C 8B BF FD | 	call	#_convertstring
14004     A7 FA 61 FC | 	wrlong	result1, fp
14008     08 4E 05 F1 | 	add	fp, #8
1400c     A7 3E 68 FC | 	wrlong	#31, fp
14010     08 4E 85 F1 | 	sub	fp, #8
14014                 | LR__1661
14014                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14014     08 4E 05 F1 | 	add	fp, #8
14018     A7 16 02 FB | 	rdlong	arg03, fp
1401c     08 4E 85 F1 | 	sub	fp, #8
14020     1F 16 0E F2 | 	cmp	arg03, #31 wz
14024     40 00 90 AD |  if_e	jmp	#LR__1662
14028     00 12 06 F6 | 	mov	arg01, #0
1402c     0C 5A B1 FD | 	call	#__system___getiolock_0573
14030     FD 12 02 F6 | 	mov	arg01, result1
14034     DC FC B0 FD | 	call	#__system___lockmem
14038     A0 01 00 FF 
1403c     6E 15 06 F6 | 	mov	arg02, ##@LR__5740
14040     00 12 06 F6 | 	mov	arg01, #0
14044     00 16 06 F6 | 	mov	arg03, #0
14048     BC 09 B1 FD | 	call	#__system___basic_print_string
1404c     00 12 06 F6 | 	mov	arg01, #0
14050     E8 59 B1 FD | 	call	#__system___getiolock_0573
14054     FD 00 68 FC | 	wrlong	#0, result1
14058     0F 12 06 F6 | 	mov	arg01, #15
1405c     00 14 06 F6 | 	mov	arg02, #0
14060     20 C3 B0 FD | 	call	#_printerror
14064     20 00 90 FD | 	jmp	#LR__1663
14068                 | LR__1662
14068     A7 12 02 FB | 	rdlong	arg01, fp
1406c     10 4E 05 F1 | 	add	fp, #16
14070     A7 14 02 FB | 	rdlong	arg02, fp
14074     10 4E 85 F1 | 	sub	fp, #16
14078     14 1D B1 FD | 	call	#__system__Left_S
1407c     A7 FA 61 FC | 	wrlong	result1, fp
14080     A7 12 02 F6 | 	mov	arg01, fp
14084     28 8A BF FD | 	call	#_push
14088                 | LR__1663
14088     A7 F0 03 F6 | 	mov	ptra, fp
1408c     B2 00 A0 FD | 	call	#popregs_
14090                 | _do_left_ret
14090     2D 00 64 FD | 	ret
14094                 | 
14094                 | ' 
14094                 | ' ' ----------------  len
14094                 | ' 
14094                 | ' sub do_len
14094                 | _do_len
14094     02 4A 05 F6 | 	mov	COUNT_, #2
14098     A8 00 A0 FD | 	call	#pushregs_
1409c     14 F0 07 F1 | 	add	ptra, #20
140a0     4A 00 00 FF 
140a4     80 E4 05 F1 | 	add	objptr, ##38016
140a8     F2 26 02 FB | 	rdlong	local01, objptr
140ac     13 17 02 F6 | 	mov	arg03, local01
140b0     01 16 66 F0 | 	shl	arg03, #1
140b4     13 17 02 F1 | 	add	arg03, local01
140b8     02 16 66 F0 | 	shl	arg03, #2
140bc     03 00 00 FF 
140c0     04 E4 85 F1 | 	sub	objptr, ##1540
140c4     F2 16 02 F1 | 	add	arg03, objptr
140c8     0B 17 02 FB | 	rdlong	arg03, arg03
140cc     0C 4E 05 F1 | 	add	fp, #12
140d0     A7 16 62 FC | 	wrlong	arg03, fp
140d4                 | ' 
140d4                 | ' numpar=compiledline(lineptr_e).result.uresult
140d4                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
140d4     0C 4E 85 F1 | 	sub	fp, #12
140d8     02 16 16 F2 | 	cmp	arg03, #2 wc
140dc     47 00 00 FF 
140e0     7C E4 85 F1 | 	sub	objptr, ##36476
140e4     0C 4E 05 C1 |  if_b	add	fp, #12
140e8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
140ec     0C 4E 85 C1 |  if_b	sub	fp, #12
140f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1670
140f4     00 12 06 F6 | 	mov	arg01, #0
140f8     40 59 B1 FD | 	call	#__system___getiolock_0573
140fc     FD 12 02 F6 | 	mov	arg01, result1
14100     10 FC B0 FD | 	call	#__system___lockmem
14104     A0 01 00 FF 
14108     76 15 06 F6 | 	mov	arg02, ##@LR__5741
1410c     00 12 06 F6 | 	mov	arg01, #0
14110     00 16 06 F6 | 	mov	arg03, #0
14114     F0 08 B1 FD | 	call	#__system___basic_print_string
14118     00 12 06 F6 | 	mov	arg01, #0
1411c     1C 59 B1 FD | 	call	#__system___getiolock_0573
14120     FD 00 68 FC | 	wrlong	#0, result1
14124     27 12 06 F6 | 	mov	arg01, #39
14128     00 14 06 F6 | 	mov	arg02, #0
1412c     54 C2 B0 FD | 	call	#_printerror
14130     C8 00 90 FD | 	jmp	#LR__1675
14134                 | LR__1670
14134     E0 88 BF FD | 	call	#_pop
14138     FF 16 02 F6 | 	mov	arg03, result3
1413c     A7 FA 61 FC | 	wrlong	result1, fp
14140     04 4E 05 F1 | 	add	fp, #4
14144     A7 FC 61 FC | 	wrlong	result2, fp
14148     04 4E 05 F1 | 	add	fp, #4
1414c     A7 16 62 FC | 	wrlong	arg03, fp
14150                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14150     08 4E 85 F1 | 	sub	fp, #8
14154     2B 16 0E F2 | 	cmp	arg03, #43 wz
14158     18 00 90 5D |  if_ne	jmp	#LR__1671
1415c     A7 12 02 FB | 	rdlong	arg01, fp
14160     2C 8A BF FD | 	call	#_convertstring
14164     A7 FA 61 FC | 	wrlong	result1, fp
14168     08 4E 05 F1 | 	add	fp, #8
1416c     A7 3E 68 FC | 	wrlong	#31, fp
14170     08 4E 85 F1 | 	sub	fp, #8
14174                 | LR__1671
14174                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14174     08 4E 05 F1 | 	add	fp, #8
14178     A7 16 02 FB | 	rdlong	arg03, fp
1417c     08 4E 85 F1 | 	sub	fp, #8
14180     1F 16 0E F2 | 	cmp	arg03, #31 wz
14184     40 00 90 AD |  if_e	jmp	#LR__1672
14188     00 12 06 F6 | 	mov	arg01, #0
1418c     AC 58 B1 FD | 	call	#__system___getiolock_0573
14190     FD 12 02 F6 | 	mov	arg01, result1
14194     7C FB B0 FD | 	call	#__system___lockmem
14198     A0 01 00 FF 
1419c     7C 15 06 F6 | 	mov	arg02, ##@LR__5742
141a0     00 12 06 F6 | 	mov	arg01, #0
141a4     00 16 06 F6 | 	mov	arg03, #0
141a8     5C 08 B1 FD | 	call	#__system___basic_print_string
141ac     00 12 06 F6 | 	mov	arg01, #0
141b0     88 58 B1 FD | 	call	#__system___getiolock_0573
141b4     FD 00 68 FC | 	wrlong	#0, result1
141b8     0F 12 06 F6 | 	mov	arg01, #15
141bc     00 14 06 F6 | 	mov	arg02, #0
141c0     C0 C1 B0 FD | 	call	#_printerror
141c4     34 00 90 FD | 	jmp	#LR__1675
141c8                 | LR__1672
141c8     A7 12 02 FB | 	rdlong	arg01, fp
141cc     09 29 02 F6 | 	mov	local02, arg01
141d0     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
141d4                 | LR__1673
141d4     14 FB C9 FA | 	rdbyte	result1, local02 wz
141d8     01 28 06 51 |  if_ne	add	local02, #1
141dc     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
141e0                 | LR__1674
141e0     09 29 82 F1 | 	sub	local02, arg01
141e4     A7 28 62 FC | 	wrlong	local02, fp
141e8     08 4E 05 F1 | 	add	fp, #8
141ec     A7 38 68 FC | 	wrlong	#28, fp
141f0     08 4E 85 F1 | 	sub	fp, #8
141f4     A7 12 02 F6 | 	mov	arg01, fp
141f8     B4 88 BF FD | 	call	#_push
141fc                 | LR__1675
141fc     A7 F0 03 F6 | 	mov	ptra, fp
14200     B2 00 A0 FD | 	call	#popregs_
14204                 | _do_len_ret
14204     2D 00 64 FD | 	ret
14208                 | 
14208                 | ' 
14208                 | ' ' ----------------  list
14208                 | ' 
14208                 | ' sub do_list
14208                 | _do_list
14208     02 4A 05 F6 | 	mov	COUNT_, #2
1420c     A8 00 A0 FD | 	call	#pushregs_
14210     B8 F0 07 F1 | 	add	ptra, #184
14214     04 4E 05 F1 | 	add	fp, #4
14218     A7 00 68 FC | 	wrlong	#0, fp
1421c     04 4E 05 F1 | 	add	fp, #4
14220     FF FF BF FF 
14224     A7 FE 6B FC | 	wrlong	##2147483647, fp
14228     08 4E 85 F1 | 	sub	fp, #8
1422c     4A 00 00 FF 
14230     80 E4 05 F1 | 	add	objptr, ##38016
14234     F2 26 02 FB | 	rdlong	local01, objptr
14238     13 17 02 F6 | 	mov	arg03, local01
1423c     01 16 66 F0 | 	shl	arg03, #1
14240     13 17 02 F1 | 	add	arg03, local01
14244     02 16 66 F0 | 	shl	arg03, #2
14248     03 00 00 FF 
1424c     04 E4 85 F1 | 	sub	objptr, ##1540
14250     F2 16 02 F1 | 	add	arg03, objptr
14254     0B 17 02 FB | 	rdlong	arg03, arg03
14258     A7 16 62 FC | 	wrlong	arg03, fp
1425c                 | ' 
1425c                 | ' startline=0 : endline=$7FFFFFFF
1425c                 | ' numpar=compiledline(lineptr_e).result.uresult
1425c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
1425c     01 16 0E F2 | 	cmp	arg03, #1 wz
14260     47 00 00 FF 
14264     7C E4 85 F1 | 	sub	objptr, ##36476
14268     3C 00 90 5D |  if_ne	jmp	#LR__1680
1426c     A8 87 BF FD | 	call	#_pop
14270     FF 26 02 F6 | 	mov	local01, result3
14274     0C 4E 05 F1 | 	add	fp, #12
14278     A7 FA 61 FC | 	wrlong	result1, fp
1427c     04 4E 05 F1 | 	add	fp, #4
14280     A7 FC 61 FC | 	wrlong	result2, fp
14284     04 4E 05 F1 | 	add	fp, #4
14288     A7 26 62 FC | 	wrlong	local01, fp
1428c     08 4E 85 F1 | 	sub	fp, #8
14290     A7 12 02 F6 | 	mov	arg01, fp
14294     0C 4E 85 F1 | 	sub	fp, #12
14298     60 89 BF FD | 	call	#_converttoint
1429c     04 4E 05 F1 | 	add	fp, #4
142a0     A7 FA 61 FC | 	wrlong	result1, fp
142a4     04 4E 85 F1 | 	sub	fp, #4
142a8                 | LR__1680
142a8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
142a8     A7 16 02 FB | 	rdlong	arg03, fp
142ac     02 16 0E F2 | 	cmp	arg03, #2 wz
142b0     7C 00 90 5D |  if_ne	jmp	#LR__1681
142b4     60 87 BF FD | 	call	#_pop
142b8     FF 26 02 F6 | 	mov	local01, result3
142bc     0C 4E 05 F1 | 	add	fp, #12
142c0     A7 FA 61 FC | 	wrlong	result1, fp
142c4     04 4E 05 F1 | 	add	fp, #4
142c8     A7 FC 61 FC | 	wrlong	result2, fp
142cc     04 4E 05 F1 | 	add	fp, #4
142d0     A7 26 62 FC | 	wrlong	local01, fp
142d4     08 4E 85 F1 | 	sub	fp, #8
142d8     A7 12 02 F6 | 	mov	arg01, fp
142dc     0C 4E 85 F1 | 	sub	fp, #12
142e0     18 89 BF FD | 	call	#_converttoint
142e4     FD 26 02 F6 | 	mov	local01, result1
142e8     08 4E 05 F1 | 	add	fp, #8
142ec     A7 26 62 FC | 	wrlong	local01, fp
142f0     08 4E 85 F1 | 	sub	fp, #8
142f4     20 87 BF FD | 	call	#_pop
142f8     FF 26 02 F6 | 	mov	local01, result3
142fc     0C 4E 05 F1 | 	add	fp, #12
14300     A7 FA 61 FC | 	wrlong	result1, fp
14304     04 4E 05 F1 | 	add	fp, #4
14308     A7 FC 61 FC | 	wrlong	result2, fp
1430c     04 4E 05 F1 | 	add	fp, #4
14310     A7 26 62 FC | 	wrlong	local01, fp
14314     08 4E 85 F1 | 	sub	fp, #8
14318     A7 12 02 F6 | 	mov	arg01, fp
1431c     0C 4E 85 F1 | 	sub	fp, #12
14320     D8 88 BF FD | 	call	#_converttoint
14324     04 4E 05 F1 | 	add	fp, #4
14328     A7 FA 61 FC | 	wrlong	result1, fp
1432c     04 4E 85 F1 | 	sub	fp, #4
14330                 | LR__1681
14330                 | ' 
14330                 | ' 
14330                 | ' print
14330     00 12 06 F6 | 	mov	arg01, #0
14334     04 57 B1 FD | 	call	#__system___getiolock_0573
14338     FD 12 02 F6 | 	mov	arg01, result1
1433c     D4 F9 B0 FD | 	call	#__system___lockmem
14340     00 12 06 F6 | 	mov	arg01, #0
14344     0A 14 06 F6 | 	mov	arg02, #10
14348     00 16 06 F6 | 	mov	arg03, #0
1434c     60 06 B1 FD | 	call	#__system___basic_print_char
14350     00 12 06 F6 | 	mov	arg01, #0
14354     E4 56 B1 FD | 	call	#__system___getiolock_0573
14358     FD 00 68 FC | 	wrlong	#0, result1
1435c     4A 00 00 FF 
14360     88 E4 05 F1 | 	add	objptr, ##38024
14364     F2 28 02 FB | 	rdlong	local02, objptr
14368     07 00 00 FF 
1436c     A4 E5 05 F1 | 	add	objptr, ##4004
14370     F2 28 62 FC | 	wrlong	local02, objptr
14374     52 00 00 FF 
14378     2C E4 85 F1 | 	sub	objptr, ##42028
1437c                 | ' do 
1437c                 | LR__1682
1437c     20 4E 05 F1 | 	add	fp, #32
14380     A7 12 02 F6 | 	mov	arg01, fp
14384     20 4E 85 F1 | 	sub	fp, #32
14388     52 00 00 FF 
1438c     2C E4 05 F1 | 	add	objptr, ##42028
14390     F2 14 02 FB | 	rdlong	arg02, objptr
14394     18 16 06 F6 | 	mov	arg03, #24
14398     46 00 00 FF 
1439c     60 E5 85 F1 | 	sub	objptr, ##36192
143a0     30 ED B0 FD | 	call	#_psram_spin2_read1
143a4     0B 00 00 FF 
143a8     CC E4 85 F1 | 	sub	objptr, ##5836
143ac                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
143ac                 | '   
143ac                 | '   if header(0)<> $FFFFFFFF then
143ac     20 4E 05 F1 | 	add	fp, #32
143b0     A7 28 02 FB | 	rdlong	local02, fp
143b4     20 4E 85 F1 | 	sub	fp, #32
143b8     FF FF 7F FF 
143bc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
143c0     A8 00 90 AD |  if_e	jmp	#LR__1684
143c4     38 4E 05 F1 | 	add	fp, #56
143c8     3F 16 06 F6 | 	mov	arg03, #63
143cc     28 16 62 FD | 	setq	arg03
143d0     A7 00 68 FC | 	wrlong	#0, fp
143d4     A7 12 02 F6 | 	mov	arg01, fp
143d8     10 4E 85 F1 | 	sub	fp, #16
143dc     A7 14 02 FB | 	rdlong	arg02, fp
143e0     04 4E 05 F1 | 	add	fp, #4
143e4     A7 16 02 FB | 	rdlong	arg03, fp
143e8     2C 4E 85 F1 | 	sub	fp, #44
143ec     0B 00 00 FF 
143f0     CC E4 05 F1 | 	add	objptr, ##5836
143f4     DC EC B0 FD | 	call	#_psram_spin2_read1
143f8     0B 00 00 FF 
143fc     CC E4 85 F1 | 	sub	objptr, ##5836
14400                 | '     longfill(linebuf,0,64)
14400                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14400                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14400     20 4E 05 F1 | 	add	fp, #32
14404     A7 28 02 FB | 	rdlong	local02, fp
14408     1C 4E 85 F1 | 	sub	fp, #28
1440c     A7 26 02 FB | 	rdlong	local01, fp
14410     04 4E 85 F1 | 	sub	fp, #4
14414     13 29 52 F2 | 	cmps	local02, local01 wc
14418     30 00 90 CD |  if_b	jmp	#LR__1683
1441c     20 4E 05 F1 | 	add	fp, #32
14420     A7 28 02 FB | 	rdlong	local02, fp
14424     18 4E 85 F1 | 	sub	fp, #24
14428     A7 16 02 FB | 	rdlong	arg03, fp
1442c     08 4E 85 F1 | 	sub	fp, #8
14430     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14434     14 00 90 1D |  if_a	jmp	#LR__1683
14438     38 4E 05 F1 | 	add	fp, #56
1443c     A7 12 02 F6 | 	mov	arg01, fp
14440     38 4E 85 F1 | 	sub	fp, #56
14444                 | ' 
14444                 | ' write(text)
14444     50 E0 B0 FD | 	call	#_hg010b_spin2_write
14448                 | ' crlf
14448     4C E5 B0 FD | 	call	#_hg010b_spin2_crlf
1444c                 | LR__1683
1444c     34 4E 05 F1 | 	add	fp, #52
14450     A7 28 02 FB | 	rdlong	local02, fp
14454     34 4E 85 F1 | 	sub	fp, #52
14458     52 00 00 FF 
1445c     2C E4 05 F1 | 	add	objptr, ##42028
14460     F2 28 62 FC | 	wrlong	local02, objptr
14464     52 00 00 FF 
14468     2C E4 85 F1 | 	sub	objptr, ##42028
1446c                 | LR__1684
1446c     34 4E 05 F1 | 	add	fp, #52
14470     A7 28 02 FB | 	rdlong	local02, fp
14474     34 4E 85 F1 | 	sub	fp, #52
14478     FF FF 3F FF 
1447c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14480     20 4E 05 51 |  if_ne	add	fp, #32
14484     A7 26 02 5B |  if_ne	rdlong	local01, fp
14488     20 4E 85 51 |  if_ne	sub	fp, #32
1448c     FF FF 7F 5F 
14490     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14494     E4 FE 9F 5D |  if_ne	jmp	#LR__1682
14498     A7 F0 03 F6 | 	mov	ptra, fp
1449c     B2 00 A0 FD | 	call	#popregs_
144a0                 | _do_list_ret
144a0     2D 00 64 FD | 	ret
144a4                 | 
144a4                 | ' 
144a4                 | ' '-------------------- load
144a4                 | ' 
144a4                 | ' sub do_load(amode=0 as integer)  
144a4                 | _do_load
144a4     01 4A 05 F6 | 	mov	COUNT_, #1
144a8     A8 00 A0 FD | 	call	#pushregs_
144ac     AC F0 07 F1 | 	add	ptra, #172
144b0     A7 12 62 FC | 	wrlong	arg01, fp
144b4     51 00 00 FF 
144b8     E8 E5 05 F1 | 	add	objptr, ##41960
144bc     F2 02 68 FC | 	wrlong	#1, objptr
144c0     07 00 00 FF 
144c4     68 E5 85 F1 | 	sub	objptr, ##3944
144c8     F2 14 02 FB | 	rdlong	arg02, objptr
144cc     0A 13 02 F6 | 	mov	arg01, arg02
144d0     01 12 66 F0 | 	shl	arg01, #1
144d4     0A 13 02 F1 | 	add	arg01, arg02
144d8     02 12 66 F0 | 	shl	arg01, #2
144dc     03 00 00 FF 
144e0     04 E4 85 F1 | 	sub	objptr, ##1540
144e4     F2 12 02 F1 | 	add	arg01, objptr
144e8     09 15 02 FB | 	rdlong	arg02, arg01
144ec     1C 4E 05 F1 | 	add	fp, #28
144f0     A7 14 62 FC | 	wrlong	arg02, fp
144f4     8C 4E 05 F1 | 	add	fp, #140
144f8     A7 12 02 F6 | 	mov	arg01, fp
144fc     47 00 00 FF 
14500     7C E4 85 F1 | 	sub	objptr, ##36476
14504     80 4E 85 F1 | 	sub	fp, #128
14508     09 4F 61 FC | 	wrlong	fp, arg01
1450c                 | ' 
1450c                 | ' inload=1
1450c                 | ' numpar=compiledline(lineptr_e).result.uresult
1450c                 | ' lpoke varptr(line2$),varptr(line2)
1450c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1450c     0C 4E 85 F1 | 	sub	fp, #12
14510     A7 26 02 FB | 	rdlong	local01, fp
14514     1C 4E 85 F1 | 	sub	fp, #28
14518     01 26 56 F2 | 	cmps	local01, #1 wc
1451c     24 00 90 CD |  if_b	jmp	#LR__1690
14520     F4 84 BF FD | 	call	#_pop
14524     04 4E 05 F1 | 	add	fp, #4
14528     A7 FA 61 FC | 	wrlong	result1, fp
1452c     04 4E 05 F1 | 	add	fp, #4
14530     A7 FC 61 FC | 	wrlong	result2, fp
14534     04 4E 05 F1 | 	add	fp, #4
14538     A7 FE 61 FC | 	wrlong	result3, fp
1453c     0C 4E 85 F1 | 	sub	fp, #12
14540     28 00 90 FD | 	jmp	#LR__1691
14544                 | LR__1690
14544     51 00 00 FF 
14548     D8 E5 05 F1 | 	add	objptr, ##41944
1454c     F2 26 02 FB | 	rdlong	local01, objptr
14550     51 00 00 FF 
14554     D8 E5 85 F1 | 	sub	objptr, ##41944
14558     04 4E 05 F1 | 	add	fp, #4
1455c     A7 26 62 FC | 	wrlong	local01, fp
14560     08 4E 05 F1 | 	add	fp, #8
14564     A7 3E 68 FC | 	wrlong	#31, fp
14568     0C 4E 85 F1 | 	sub	fp, #12
1456c                 | LR__1691
1456c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
1456c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
1456c     0C 4E 05 F1 | 	add	fp, #12
14570     A7 26 02 FB | 	rdlong	local01, fp
14574     0C 4E 85 F1 | 	sub	fp, #12
14578     2B 26 0E F2 | 	cmp	local01, #43 wz
1457c     24 00 90 5D |  if_ne	jmp	#LR__1692
14580     04 4E 05 F1 | 	add	fp, #4
14584     A7 12 02 FB | 	rdlong	arg01, fp
14588     04 4E 85 F1 | 	sub	fp, #4
1458c     00 86 BF FD | 	call	#_convertstring
14590     04 4E 05 F1 | 	add	fp, #4
14594     A7 FA 61 FC | 	wrlong	result1, fp
14598     08 4E 05 F1 | 	add	fp, #8
1459c     A7 3E 68 FC | 	wrlong	#31, fp
145a0     0C 4E 85 F1 | 	sub	fp, #12
145a4                 | LR__1692
145a4                 | ' if t1.result_type=result_string then
145a4     0C 4E 05 F1 | 	add	fp, #12
145a8     A7 26 02 FB | 	rdlong	local01, fp
145ac     0C 4E 85 F1 | 	sub	fp, #12
145b0     1F 26 0E F2 | 	cmp	local01, #31 wz
145b4     E0 02 90 5D |  if_ne	jmp	#LR__1698
145b8                 | '   if amode<>1234 then do_new
145b8     A7 26 02 FB | 	rdlong	local01, fp
145bc     02 00 00 FF 
145c0     D2 26 0E F2 | 	cmp	local01, ##1234 wz
145c4     08 0E B0 5D |  if_ne	call	#_do_new
145c8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
145c8     04 4E 05 F1 | 	add	fp, #4
145cc     A7 12 02 FB | 	rdlong	arg01, fp
145d0     04 4E 85 F1 | 	sub	fp, #4
145d4     A0 01 00 FF 
145d8     82 15 06 F6 | 	mov	arg02, ##@LR__5743
145dc     5C F7 B0 FD | 	call	#__system___string_cmp
145e0     00 FA 0D F2 | 	cmp	result1, #0 wz
145e4     24 00 90 5D |  if_ne	jmp	#LR__1693
145e8     51 00 00 FF 
145ec     D8 E5 05 F1 | 	add	objptr, ##41944
145f0     F2 26 02 FB | 	rdlong	local01, objptr
145f4     51 00 00 FF 
145f8     D8 E5 85 F1 | 	sub	objptr, ##41944
145fc     04 4E 05 F1 | 	add	fp, #4
14600     A7 26 62 FC | 	wrlong	local01, fp
14604     04 4E 85 F1 | 	sub	fp, #4
14608     20 00 90 FD | 	jmp	#LR__1694
1460c                 | LR__1693
1460c     04 4E 05 F1 | 	add	fp, #4
14610     A7 26 02 FB | 	rdlong	local01, fp
14614     04 4E 85 F1 | 	sub	fp, #4
14618     51 00 00 FF 
1461c     D8 E5 05 F1 | 	add	objptr, ##41944
14620     F2 26 62 FC | 	wrlong	local01, objptr
14624     51 00 00 FF 
14628     D8 E5 85 F1 | 	sub	objptr, ##41944
1462c                 | LR__1694
1462c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
1462c     09 12 06 F6 | 	mov	arg01, #9
14630     38 4A B1 FD | 	call	#__system__close
14634     09 26 06 F6 | 	mov	local01, #9
14638     4A 00 00 FF 
1463c     94 E4 05 F1 | 	add	objptr, ##38036
14640     F2 12 02 FB | 	rdlong	arg01, objptr
14644     4A 00 00 FF 
14648     94 E4 85 F1 | 	sub	objptr, ##38036
1464c     A0 01 00 FF 
14650     83 15 06 F6 | 	mov	arg02, ##@LR__5744
14654     18 F7 B0 FD | 	call	#__system___string_concat
14658     FD 12 02 F6 | 	mov	arg01, result1
1465c     04 4E 05 F1 | 	add	fp, #4
14660     A7 14 02 FB | 	rdlong	arg02, fp
14664     04 4E 85 F1 | 	sub	fp, #4
14668     04 F7 B0 FD | 	call	#__system___string_concat
1466c     FD 14 02 F6 | 	mov	arg02, result1
14670     13 13 02 F6 | 	mov	arg01, local01
14674     00 16 06 F6 | 	mov	arg03, #0
14678     9C 02 B1 FD | 	call	#__system___basic_open_string
1467c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14680     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14684     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14688     14 4E 05 F1 | 	add	fp, #20
1468c     A7 FA 61 FC | 	wrlong	result1, fp
14690                 | '   r=geterr() 
14690                 | '   if r then 
14690     14 4E 85 F1 | 	sub	fp, #20
14694     50 01 90 AD |  if_e	jmp	#LR__1696
14698                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14698     09 12 06 F6 | 	mov	arg01, #9
1469c     CC 49 B1 FD | 	call	#__system__close
146a0     09 26 06 F6 | 	mov	local01, #9
146a4     4A 00 00 FF 
146a8     94 E4 05 F1 | 	add	objptr, ##38036
146ac     F2 12 02 FB | 	rdlong	arg01, objptr
146b0     4A 00 00 FF 
146b4     94 E4 85 F1 | 	sub	objptr, ##38036
146b8     A0 01 00 FF 
146bc     85 15 06 F6 | 	mov	arg02, ##@LR__5745
146c0     AC F6 B0 FD | 	call	#__system___string_concat
146c4     FD 12 02 F6 | 	mov	arg01, result1
146c8     04 4E 05 F1 | 	add	fp, #4
146cc     A7 14 02 FB | 	rdlong	arg02, fp
146d0     04 4E 85 F1 | 	sub	fp, #4
146d4     98 F6 B0 FD | 	call	#__system___string_concat
146d8     FD 12 02 F6 | 	mov	arg01, result1
146dc     A0 01 00 FF 
146e0     87 15 06 F6 | 	mov	arg02, ##@LR__5746
146e4     88 F6 B0 FD | 	call	#__system___string_concat
146e8     FD 14 02 F6 | 	mov	arg02, result1
146ec     13 13 02 F6 | 	mov	arg01, local01
146f0     00 16 06 F6 | 	mov	arg03, #0
146f4     20 02 B1 FD | 	call	#__system___basic_open_string
146f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
146fc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14700     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14704     14 4E 05 F1 | 	add	fp, #20
14708     A7 FA 61 FC | 	wrlong	result1, fp
1470c                 | '     r=geterr() 
1470c                 | '     if r then 
1470c     14 4E 85 F1 | 	sub	fp, #20
14710     A0 00 90 AD |  if_e	jmp	#LR__1695
14714                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14714     00 12 06 F6 | 	mov	arg01, #0
14718     20 53 B1 FD | 	call	#__system___getiolock_0573
1471c     FD 12 02 F6 | 	mov	arg01, result1
14720     F0 F5 B0 FD | 	call	#__system___lockmem
14724     A0 01 00 FF 
14728     8C 15 06 F6 | 	mov	arg02, ##@LR__5747
1472c     00 12 06 F6 | 	mov	arg01, #0
14730     00 16 06 F6 | 	mov	arg03, #0
14734     D0 02 B1 FD | 	call	#__system___basic_print_string
14738     14 4E 05 F1 | 	add	fp, #20
1473c     A7 14 02 FB | 	rdlong	arg02, fp
14740     14 4E 85 F1 | 	sub	fp, #20
14744     00 12 06 F6 | 	mov	arg01, #0
14748     00 16 06 F6 | 	mov	arg03, #0
1474c     0A 18 06 F6 | 	mov	arg04, #10
14750     F8 02 B1 FD | 	call	#__system___basic_print_integer
14754     A0 01 00 FF 
14758     9A 15 06 F6 | 	mov	arg02, ##@LR__5748
1475c     00 12 06 F6 | 	mov	arg01, #0
14760     00 16 06 F6 | 	mov	arg03, #0
14764     A0 02 B1 FD | 	call	#__system___basic_print_string
14768     00 26 06 F6 | 	mov	local01, #0
1476c     14 4E 05 F1 | 	add	fp, #20
14770     A7 12 02 FB | 	rdlong	arg01, fp
14774     14 4E 85 F1 | 	sub	fp, #20
14778     24 1F B1 FD | 	call	#__system___strerror
1477c     FD 14 02 F6 | 	mov	arg02, result1
14780     13 13 02 F6 | 	mov	arg01, local01
14784     00 16 06 F6 | 	mov	arg03, #0
14788     7C 02 B1 FD | 	call	#__system___basic_print_string
1478c     00 12 06 F6 | 	mov	arg01, #0
14790     0A 14 06 F6 | 	mov	arg02, #10
14794     00 16 06 F6 | 	mov	arg03, #0
14798     14 02 B1 FD | 	call	#__system___basic_print_char
1479c     00 12 06 F6 | 	mov	arg01, #0
147a0     98 52 B1 FD | 	call	#__system___getiolock_0573
147a4     FD 00 68 FC | 	wrlong	#0, result1
147a8     09 12 06 F6 | 	mov	arg01, #9
147ac     BC 48 B1 FD | 	call	#__system__close
147b0     94 01 90 FD | 	jmp	#LR__1700
147b4                 | LR__1695
147b4     51 00 00 FF 
147b8     D8 E5 05 F1 | 	add	objptr, ##41944
147bc     F2 12 02 FB | 	rdlong	arg01, objptr
147c0     51 00 00 FF 
147c4     D8 E5 85 F1 | 	sub	objptr, ##41944
147c8     A0 01 00 FF 
147cc     9D 15 06 F6 | 	mov	arg02, ##@LR__5749
147d0     9C F5 B0 FD | 	call	#__system___string_concat
147d4     51 00 00 FF 
147d8     D8 E5 05 F1 | 	add	objptr, ##41944
147dc     F2 FA 61 FC | 	wrlong	result1, objptr
147e0     51 00 00 FF 
147e4     D8 E5 85 F1 | 	sub	objptr, ##41944
147e8                 | LR__1696
147e8                 | '   close #9: open currentdir$+"/"+loadname for input as #9
147e8     09 12 06 F6 | 	mov	arg01, #9
147ec     7C 48 B1 FD | 	call	#__system__close
147f0     09 26 06 F6 | 	mov	local01, #9
147f4     4A 00 00 FF 
147f8     94 E4 05 F1 | 	add	objptr, ##38036
147fc     F2 12 02 FB | 	rdlong	arg01, objptr
14800     4A 00 00 FF 
14804     94 E4 85 F1 | 	sub	objptr, ##38036
14808     A0 01 00 FF 
1480c     A2 15 06 F6 | 	mov	arg02, ##@LR__5750
14810     5C F5 B0 FD | 	call	#__system___string_concat
14814     FD 12 02 F6 | 	mov	arg01, result1
14818     51 00 00 FF 
1481c     D8 E5 05 F1 | 	add	objptr, ##41944
14820     F2 14 02 FB | 	rdlong	arg02, objptr
14824     51 00 00 FF 
14828     D8 E5 85 F1 | 	sub	objptr, ##41944
1482c     40 F5 B0 FD | 	call	#__system___string_concat
14830     FD 14 02 F6 | 	mov	arg02, result1
14834     13 13 02 F6 | 	mov	arg01, local01
14838     00 16 06 F6 | 	mov	arg03, #0
1483c     D8 00 B1 FD | 	call	#__system___basic_open_string
14840                 | '   do
14840                 | LR__1697
14840     09 12 06 F6 | 	mov	arg01, #9
14844     D8 F6 B0 FD | 	call	#__system___basic_read_line
14848     FD 26 02 F6 | 	mov	local01, result1
1484c     37 00 00 FF 
14850     1C E4 05 F1 | 	add	objptr, ##28188
14854     F2 26 62 FC | 	wrlong	local01, objptr
14858     37 00 00 FF 
1485c     1C E4 85 F1 | 	sub	objptr, ##28188
14860     E4 CE BE FD | 	call	#_interpret
14864     37 00 00 FF 
14868     1C E4 05 F1 | 	add	objptr, ##28188
1486c     F2 12 02 FB | 	rdlong	arg01, objptr
14870     37 00 00 FF 
14874     1C E4 85 F1 | 	sub	objptr, ##28188
14878     A0 01 00 FF 
1487c     A4 15 06 F6 | 	mov	arg02, ##@LR__5751
14880     B8 F4 B0 FD | 	call	#__system___string_cmp
14884     00 FA 0D F2 | 	cmp	result1, #0 wz
14888     B4 FF 9F 5D |  if_ne	jmp	#LR__1697
1488c                 | '   close #9   
1488c     09 12 06 F6 | 	mov	arg01, #9
14890     D8 47 B1 FD | 	call	#__system__close
14894     0C 00 90 FD | 	jmp	#LR__1699
14898                 | LR__1698
14898     1E 12 06 F6 | 	mov	arg01, #30
1489c     00 14 06 F6 | 	mov	arg02, #0
148a0     E0 BA B0 FD | 	call	#_printerror
148a4                 | LR__1699
148a4                 | ' print "Loaded ";currentdir$+"/"+loadname
148a4     00 12 06 F6 | 	mov	arg01, #0
148a8     90 51 B1 FD | 	call	#__system___getiolock_0573
148ac     FD 12 02 F6 | 	mov	arg01, result1
148b0     60 F4 B0 FD | 	call	#__system___lockmem
148b4     A0 01 00 FF 
148b8     A5 15 06 F6 | 	mov	arg02, ##@LR__5752
148bc     00 12 06 F6 | 	mov	arg01, #0
148c0     00 16 06 F6 | 	mov	arg03, #0
148c4     40 01 B1 FD | 	call	#__system___basic_print_string
148c8     00 26 06 F6 | 	mov	local01, #0
148cc     4A 00 00 FF 
148d0     94 E4 05 F1 | 	add	objptr, ##38036
148d4     F2 12 02 FB | 	rdlong	arg01, objptr
148d8     4A 00 00 FF 
148dc     94 E4 85 F1 | 	sub	objptr, ##38036
148e0     A0 01 00 FF 
148e4     AD 15 06 F6 | 	mov	arg02, ##@LR__5753
148e8     84 F4 B0 FD | 	call	#__system___string_concat
148ec     FD 12 02 F6 | 	mov	arg01, result1
148f0     51 00 00 FF 
148f4     D8 E5 05 F1 | 	add	objptr, ##41944
148f8     F2 14 02 FB | 	rdlong	arg02, objptr
148fc     51 00 00 FF 
14900     D8 E5 85 F1 | 	sub	objptr, ##41944
14904     68 F4 B0 FD | 	call	#__system___string_concat
14908     FD 14 02 F6 | 	mov	arg02, result1
1490c     13 13 02 F6 | 	mov	arg01, local01
14910     00 16 06 F6 | 	mov	arg03, #0
14914     F0 00 B1 FD | 	call	#__system___basic_print_string
14918     00 12 06 F6 | 	mov	arg01, #0
1491c     0A 14 06 F6 | 	mov	arg02, #10
14920     00 16 06 F6 | 	mov	arg03, #0
14924     88 00 B1 FD | 	call	#__system___basic_print_char
14928     00 12 06 F6 | 	mov	arg01, #0
1492c     0C 51 B1 FD | 	call	#__system___getiolock_0573
14930     FD 00 68 FC | 	wrlong	#0, result1
14934     51 00 00 FF 
14938     E8 E5 05 F1 | 	add	objptr, ##41960
1493c     F2 00 68 FC | 	wrlong	#0, objptr
14940     51 00 00 FF 
14944     E8 E5 85 F1 | 	sub	objptr, ##41960
14948                 | LR__1700
14948     A7 F0 03 F6 | 	mov	ptra, fp
1494c     B2 00 A0 FD | 	call	#popregs_
14950                 | _do_load_ret
14950     2D 00 64 FD | 	ret
14954                 | 
14954                 | ' 
14954                 | ' '-------------------- log
14954                 | ' 
14954                 | ' sub do_log
14954                 | _do_log
14954     01 4A 05 F6 | 	mov	COUNT_, #1
14958     A8 00 A0 FD | 	call	#pushregs_
1495c     14 F0 07 F1 | 	add	ptra, #20
14960     4A 00 00 FF 
14964     80 E4 05 F1 | 	add	objptr, ##38016
14968     F2 26 02 FB | 	rdlong	local01, objptr
1496c     13 17 02 F6 | 	mov	arg03, local01
14970     01 16 66 F0 | 	shl	arg03, #1
14974     13 17 02 F1 | 	add	arg03, local01
14978     02 16 66 F0 | 	shl	arg03, #2
1497c     03 00 00 FF 
14980     04 E4 85 F1 | 	sub	objptr, ##1540
14984     F2 16 02 F1 | 	add	arg03, objptr
14988     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1498c     0C 4E 05 F1 | 	add	fp, #12
14990     A7 16 62 FC | 	wrlong	arg03, fp
14994                 | ' 
14994                 | ' numpar=compiledline(lineptr_e).result.uresult
14994                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
14994     0C 4E 85 F1 | 	sub	fp, #12
14998     47 00 00 FF 
1499c     7C E4 85 F1 | 	sub	objptr, ##36476
149a0     0C 4E 05 51 |  if_ne	add	fp, #12
149a4     A7 26 02 5B |  if_ne	rdlong	local01, fp
149a8     0C 4E 85 51 |  if_ne	sub	fp, #12
149ac     03 26 16 52 |  if_ne	cmp	local01, #3 wc
149b0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1710
149b4     00 12 06 F6 | 	mov	arg01, #0
149b8     80 50 B1 FD | 	call	#__system___getiolock_0573
149bc     FD 12 02 F6 | 	mov	arg01, result1
149c0     50 F3 B0 FD | 	call	#__system___lockmem
149c4     A0 01 00 FF 
149c8     AF 15 06 F6 | 	mov	arg02, ##@LR__5754
149cc     00 12 06 F6 | 	mov	arg01, #0
149d0     00 16 06 F6 | 	mov	arg03, #0
149d4     30 00 B1 FD | 	call	#__system___basic_print_string
149d8     00 12 06 F6 | 	mov	arg01, #0
149dc     5C 50 B1 FD | 	call	#__system___getiolock_0573
149e0     FD 00 68 FC | 	wrlong	#0, result1
149e4     27 12 06 F6 | 	mov	arg01, #39
149e8     00 14 06 F6 | 	mov	arg02, #0
149ec     94 B9 B0 FD | 	call	#_printerror
149f0     D0 00 90 FD | 	jmp	#LR__1713
149f4                 | LR__1710
149f4                 | ' if numpar=2 then 
149f4     0C 4E 05 F1 | 	add	fp, #12
149f8     A7 26 02 FB | 	rdlong	local01, fp
149fc     0C 4E 85 F1 | 	sub	fp, #12
14a00     02 26 0E F2 | 	cmp	local01, #2 wz
14a04     48 00 90 5D |  if_ne	jmp	#LR__1711
14a08     0C 80 BF FD | 	call	#_pop
14a0c     FF 26 02 F6 | 	mov	local01, result3
14a10     A7 FA 61 FC | 	wrlong	result1, fp
14a14     04 4E 05 F1 | 	add	fp, #4
14a18     A7 FC 61 FC | 	wrlong	result2, fp
14a1c     04 4E 05 F1 | 	add	fp, #4
14a20     A7 26 62 FC | 	wrlong	local01, fp
14a24     08 4E 85 F1 | 	sub	fp, #8
14a28     A7 12 02 F6 | 	mov	arg01, fp
14a2c     88 82 BF FD | 	call	#_converttofloat
14a30     FD 14 02 F6 | 	mov	arg02, result1
14a34     FC 16 20 FF 
14a38     54 12 06 F6 | 	mov	arg01, ##1076754516
14a3c     1C 31 B1 FD | 	call	#__system____builtin_logbase
14a40     10 4E 05 F1 | 	add	fp, #16
14a44     A7 FA 61 FC | 	wrlong	result1, fp
14a48     10 4E 85 F1 | 	sub	fp, #16
14a4c     10 00 90 FD | 	jmp	#LR__1712
14a50                 | LR__1711
14a50     10 4E 05 F1 | 	add	fp, #16
14a54     00 C0 9F FF 
14a58     A7 00 68 FC | 	wrlong	##1065353216, fp
14a5c     10 4E 85 F1 | 	sub	fp, #16
14a60                 | LR__1712
14a60     B4 7F BF FD | 	call	#_pop
14a64     FF 26 02 F6 | 	mov	local01, result3
14a68     A7 FA 61 FC | 	wrlong	result1, fp
14a6c     04 4E 05 F1 | 	add	fp, #4
14a70     A7 FC 61 FC | 	wrlong	result2, fp
14a74     04 4E 05 F1 | 	add	fp, #4
14a78     A7 26 62 FC | 	wrlong	local01, fp
14a7c     08 4E 85 F1 | 	sub	fp, #8
14a80     A7 12 02 F6 | 	mov	arg01, fp
14a84     30 82 BF FD | 	call	#_converttofloat
14a88     FD 14 02 F6 | 	mov	arg02, result1
14a8c     FC 16 20 FF 
14a90     54 12 06 F6 | 	mov	arg01, ##1076754516
14a94     C4 30 B1 FD | 	call	#__system____builtin_logbase
14a98     FD 12 02 F6 | 	mov	arg01, result1
14a9c     10 4E 05 F1 | 	add	fp, #16
14aa0     A7 14 02 FB | 	rdlong	arg02, fp
14aa4     10 4E 85 F1 | 	sub	fp, #16
14aa8     E4 22 B1 FD | 	call	#__system___float_div
14aac     A7 FA 61 FC | 	wrlong	result1, fp
14ab0     08 4E 05 F1 | 	add	fp, #8
14ab4     A7 3C 68 FC | 	wrlong	#30, fp
14ab8     08 4E 85 F1 | 	sub	fp, #8
14abc     A7 12 02 F6 | 	mov	arg01, fp
14ac0     EC 7F BF FD | 	call	#_push
14ac4                 | LR__1713
14ac4     A7 F0 03 F6 | 	mov	ptra, fp
14ac8     B2 00 A0 FD | 	call	#popregs_
14acc                 | _do_log_ret
14acc     2D 00 64 FD | 	ret
14ad0                 | 
14ad0                 | ' 
14ad0                 | ' '-------------------- lpeek
14ad0                 | ' 
14ad0                 | ' sub do_lpeek
14ad0                 | _do_lpeek
14ad0     00 4A 05 F6 | 	mov	COUNT_, #0
14ad4     A8 00 A0 FD | 	call	#pushregs_
14ad8     14 F0 07 F1 | 	add	ptra, #20
14adc     38 7F BF FD | 	call	#_pop
14ae0     A7 FA 61 FC | 	wrlong	result1, fp
14ae4     04 4E 05 F1 | 	add	fp, #4
14ae8     A7 FC 61 FC | 	wrlong	result2, fp
14aec     04 4E 05 F1 | 	add	fp, #4
14af0     A7 FE 61 FC | 	wrlong	result3, fp
14af4     08 4E 85 F1 | 	sub	fp, #8
14af8     A7 12 02 F6 | 	mov	arg01, fp
14afc     FC 80 BF FD | 	call	#_converttoint
14b00     0C 4E 05 F1 | 	add	fp, #12
14b04     A7 FA 61 FC | 	wrlong	result1, fp
14b08                 | ' 
14b08                 | ' t1=pop()
14b08                 | ' a=converttoint(t1)
14b08                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b08     0C 4E 85 F1 | 	sub	fp, #12
14b0c     00 04 00 FF 
14b10     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14b14     1C 00 90 3D |  if_ae	jmp	#LR__1720
14b18     0C 4E 05 F1 | 	add	fp, #12
14b1c     A7 12 02 FB | 	rdlong	arg01, fp
14b20     09 FB 01 FB | 	rdlong	result1, arg01
14b24     04 4E 05 F1 | 	add	fp, #4
14b28     A7 FA 61 FC | 	wrlong	result1, fp
14b2c     10 4E 85 F1 | 	sub	fp, #16
14b30     1C 00 90 FD | 	jmp	#LR__1721
14b34                 | LR__1720
14b34     0C 4E 05 F1 | 	add	fp, #12
14b38     A7 12 02 FB | 	rdlong	arg01, fp
14b3c     0C 4E 85 F1 | 	sub	fp, #12
14b40     FC BA B0 FD | 	call	#_pslpeek
14b44     10 4E 05 F1 | 	add	fp, #16
14b48     A7 FA 61 FC | 	wrlong	result1, fp
14b4c     10 4E 85 F1 | 	sub	fp, #16
14b50                 | LR__1721
14b50     08 4E 05 F1 | 	add	fp, #8
14b54     A7 3A 68 FC | 	wrlong	#29, fp
14b58     08 4E 05 F1 | 	add	fp, #8
14b5c     A7 12 02 FB | 	rdlong	arg01, fp
14b60     10 4E 85 F1 | 	sub	fp, #16
14b64     A7 12 62 FC | 	wrlong	arg01, fp
14b68     A7 12 02 F6 | 	mov	arg01, fp
14b6c     40 7F BF FD | 	call	#_push
14b70     A7 F0 03 F6 | 	mov	ptra, fp
14b74     B2 00 A0 FD | 	call	#popregs_
14b78                 | _do_lpeek_ret
14b78     2D 00 64 FD | 	ret
14b7c                 | 
14b7c                 | ' 
14b7c                 | ' '-------------------- lpoke
14b7c                 | ' 
14b7c                 | ' sub do_lpoke
14b7c                 | _do_lpoke
14b7c     01 4A 05 F6 | 	mov	COUNT_, #1
14b80     A8 00 A0 FD | 	call	#pushregs_
14b84     20 F0 07 F1 | 	add	ptra, #32
14b88     8C 7E BF FD | 	call	#_pop
14b8c     FD 14 02 F6 | 	mov	arg02, result1
14b90     FE 12 02 F6 | 	mov	arg01, result2
14b94     FF 26 02 F6 | 	mov	local01, result3
14b98     A7 14 62 FC | 	wrlong	arg02, fp
14b9c     04 4E 05 F1 | 	add	fp, #4
14ba0     A7 12 62 FC | 	wrlong	arg01, fp
14ba4     04 4E 05 F1 | 	add	fp, #4
14ba8     A7 26 62 FC | 	wrlong	local01, fp
14bac     08 4E 85 F1 | 	sub	fp, #8
14bb0     64 7E BF FD | 	call	#_pop
14bb4     FF 26 02 F6 | 	mov	local01, result3
14bb8     0C 4E 05 F1 | 	add	fp, #12
14bbc     A7 FA 61 FC | 	wrlong	result1, fp
14bc0     04 4E 05 F1 | 	add	fp, #4
14bc4     A7 FC 61 FC | 	wrlong	result2, fp
14bc8     04 4E 05 F1 | 	add	fp, #4
14bcc     A7 26 62 FC | 	wrlong	local01, fp
14bd0     08 4E 85 F1 | 	sub	fp, #8
14bd4     A7 12 02 F6 | 	mov	arg01, fp
14bd8     0C 4E 85 F1 | 	sub	fp, #12
14bdc     1C 80 BF FD | 	call	#_converttoint
14be0     18 4E 05 F1 | 	add	fp, #24
14be4     A7 FA 61 FC | 	wrlong	result1, fp
14be8     18 4E 85 F1 | 	sub	fp, #24
14bec     A7 12 02 F6 | 	mov	arg01, fp
14bf0     08 80 BF FD | 	call	#_converttoint
14bf4     1C 4E 05 F1 | 	add	fp, #28
14bf8     A7 FA 61 FC | 	wrlong	result1, fp
14bfc                 | ' 
14bfc                 | ' t1=pop() 'value
14bfc                 | ' t2=pop() 
14bfc                 | ' a=converttoint(t2) : v=converttoint(t1)
14bfc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14bfc     04 4E 85 F1 | 	sub	fp, #4
14c00     A7 26 02 FB | 	rdlong	local01, fp
14c04     18 4E 85 F1 | 	sub	fp, #24
14c08     00 04 00 FF 
14c0c     00 26 16 F2 | 	cmp	local01, ##524288 wc
14c10     1C 00 90 3D |  if_ae	jmp	#LR__1730
14c14     18 4E 05 F1 | 	add	fp, #24
14c18     A7 12 02 FB | 	rdlong	arg01, fp
14c1c     04 4E 05 F1 | 	add	fp, #4
14c20     A7 14 02 FB | 	rdlong	arg02, fp
14c24     1C 4E 85 F1 | 	sub	fp, #28
14c28     09 15 62 FC | 	wrlong	arg02, arg01
14c2c     18 00 90 FD | 	jmp	#LR__1731
14c30                 | LR__1730
14c30     18 4E 05 F1 | 	add	fp, #24
14c34     A7 12 02 FB | 	rdlong	arg01, fp
14c38     04 4E 05 F1 | 	add	fp, #4
14c3c     A7 14 02 FB | 	rdlong	arg02, fp
14c40     1C 4E 85 F1 | 	sub	fp, #28
14c44     C8 B8 B0 FD | 	call	#_pslpoke
14c48                 | LR__1731
14c48     A7 F0 03 F6 | 	mov	ptra, fp
14c4c     B2 00 A0 FD | 	call	#popregs_
14c50                 | _do_lpoke_ret
14c50     2D 00 64 FD | 	ret
14c54                 | 
14c54                 | ' 
14c54                 | ' '-------------------- mid$
14c54                 | ' 
14c54                 | ' sub do_mid
14c54                 | _do_mid
14c54     00 4A 05 F6 | 	mov	COUNT_, #0
14c58     A8 00 A0 FD | 	call	#pushregs_
14c5c     18 F0 07 F1 | 	add	ptra, #24
14c60     4A 00 00 FF 
14c64     80 E4 05 F1 | 	add	objptr, ##38016
14c68     F2 16 02 FB | 	rdlong	arg03, objptr
14c6c     0B 15 02 F6 | 	mov	arg02, arg03
14c70     01 14 66 F0 | 	shl	arg02, #1
14c74     0B 15 02 F1 | 	add	arg02, arg03
14c78     02 14 66 F0 | 	shl	arg02, #2
14c7c     03 00 00 FF 
14c80     04 E4 85 F1 | 	sub	objptr, ##1540
14c84     F2 14 02 F1 | 	add	arg02, objptr
14c88     0A 17 02 FB | 	rdlong	arg03, arg02
14c8c     0C 4E 05 F1 | 	add	fp, #12
14c90     A7 16 62 FC | 	wrlong	arg03, fp
14c94                 | ' 
14c94                 | ' numpar=compiledline(lineptr_e).result.uresult
14c94                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14c94     0C 4E 85 F1 | 	sub	fp, #12
14c98     03 16 0E F2 | 	cmp	arg03, #3 wz
14c9c     47 00 00 FF 
14ca0     7C E4 85 F1 | 	sub	objptr, ##36476
14ca4     40 00 90 AD |  if_e	jmp	#LR__1740
14ca8     00 12 06 F6 | 	mov	arg01, #0
14cac     8C 4D B1 FD | 	call	#__system___getiolock_0573
14cb0     FD 12 02 F6 | 	mov	arg01, result1
14cb4     5C F0 B0 FD | 	call	#__system___lockmem
14cb8     A0 01 00 FF 
14cbc     B5 15 06 F6 | 	mov	arg02, ##@LR__5755
14cc0     00 12 06 F6 | 	mov	arg01, #0
14cc4     00 16 06 F6 | 	mov	arg03, #0
14cc8     3C FD B0 FD | 	call	#__system___basic_print_string
14ccc     00 12 06 F6 | 	mov	arg01, #0
14cd0     68 4D B1 FD | 	call	#__system___getiolock_0573
14cd4     FD 00 68 FC | 	wrlong	#0, result1
14cd8     27 12 06 F6 | 	mov	arg01, #39
14cdc     00 14 06 F6 | 	mov	arg02, #0
14ce0     A0 B6 B0 FD | 	call	#_printerror
14ce4     2C 01 90 FD | 	jmp	#LR__1743
14ce8                 | LR__1740
14ce8     2C 7D BF FD | 	call	#_pop
14cec     FF 16 02 F6 | 	mov	arg03, result3
14cf0     A7 FA 61 FC | 	wrlong	result1, fp
14cf4     04 4E 05 F1 | 	add	fp, #4
14cf8     A7 FC 61 FC | 	wrlong	result2, fp
14cfc     04 4E 05 F1 | 	add	fp, #4
14d00     A7 16 62 FC | 	wrlong	arg03, fp
14d04     08 4E 85 F1 | 	sub	fp, #8
14d08     A7 12 02 F6 | 	mov	arg01, fp
14d0c     EC 7E BF FD | 	call	#_converttoint
14d10     FD 16 02 F6 | 	mov	arg03, result1
14d14     14 4E 05 F1 | 	add	fp, #20
14d18     A7 16 62 FC | 	wrlong	arg03, fp
14d1c     14 4E 85 F1 | 	sub	fp, #20
14d20     F4 7C BF FD | 	call	#_pop
14d24     FF 16 02 F6 | 	mov	arg03, result3
14d28     A7 FA 61 FC | 	wrlong	result1, fp
14d2c     04 4E 05 F1 | 	add	fp, #4
14d30     A7 FC 61 FC | 	wrlong	result2, fp
14d34     04 4E 05 F1 | 	add	fp, #4
14d38     A7 16 62 FC | 	wrlong	arg03, fp
14d3c     08 4E 85 F1 | 	sub	fp, #8
14d40     A7 12 02 F6 | 	mov	arg01, fp
14d44     B4 7E BF FD | 	call	#_converttoint
14d48     FD 16 02 F6 | 	mov	arg03, result1
14d4c     10 4E 05 F1 | 	add	fp, #16
14d50     A7 16 62 FC | 	wrlong	arg03, fp
14d54     10 4E 85 F1 | 	sub	fp, #16
14d58     BC 7C BF FD | 	call	#_pop
14d5c     FF 16 02 F6 | 	mov	arg03, result3
14d60     A7 FA 61 FC | 	wrlong	result1, fp
14d64     04 4E 05 F1 | 	add	fp, #4
14d68     A7 FC 61 FC | 	wrlong	result2, fp
14d6c     04 4E 05 F1 | 	add	fp, #4
14d70     A7 16 62 FC | 	wrlong	arg03, fp
14d74                 | ' t1=pop() : arg2=converttoint(t1)
14d74                 | ' t1=pop() : arg1=converttoint(t1)
14d74                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d74     08 4E 85 F1 | 	sub	fp, #8
14d78     2B 16 0E F2 | 	cmp	arg03, #43 wz
14d7c     18 00 90 5D |  if_ne	jmp	#LR__1741
14d80     A7 12 02 FB | 	rdlong	arg01, fp
14d84     08 7E BF FD | 	call	#_convertstring
14d88     A7 FA 61 FC | 	wrlong	result1, fp
14d8c     08 4E 05 F1 | 	add	fp, #8
14d90     A7 3E 68 FC | 	wrlong	#31, fp
14d94     08 4E 85 F1 | 	sub	fp, #8
14d98                 | LR__1741
14d98                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14d98     08 4E 05 F1 | 	add	fp, #8
14d9c     A7 16 02 FB | 	rdlong	arg03, fp
14da0     08 4E 85 F1 | 	sub	fp, #8
14da4     1F 16 0E F2 | 	cmp	arg03, #31 wz
14da8     40 00 90 AD |  if_e	jmp	#LR__1742
14dac     00 12 06 F6 | 	mov	arg01, #0
14db0     88 4C B1 FD | 	call	#__system___getiolock_0573
14db4     FD 12 02 F6 | 	mov	arg01, result1
14db8     58 EF B0 FD | 	call	#__system___lockmem
14dbc     A0 01 00 FF 
14dc0     BC 15 06 F6 | 	mov	arg02, ##@LR__5756
14dc4     00 12 06 F6 | 	mov	arg01, #0
14dc8     00 16 06 F6 | 	mov	arg03, #0
14dcc     38 FC B0 FD | 	call	#__system___basic_print_string
14dd0     00 12 06 F6 | 	mov	arg01, #0
14dd4     64 4C B1 FD | 	call	#__system___getiolock_0573
14dd8     FD 00 68 FC | 	wrlong	#0, result1
14ddc     0F 12 06 F6 | 	mov	arg01, #15
14de0     00 14 06 F6 | 	mov	arg02, #0
14de4     9C B5 B0 FD | 	call	#_printerror
14de8     28 00 90 FD | 	jmp	#LR__1743
14dec                 | LR__1742
14dec     A7 12 02 FB | 	rdlong	arg01, fp
14df0     10 4E 05 F1 | 	add	fp, #16
14df4     A7 14 02 FB | 	rdlong	arg02, fp
14df8     04 4E 05 F1 | 	add	fp, #4
14dfc     A7 16 02 FB | 	rdlong	arg03, fp
14e00     14 4E 85 F1 | 	sub	fp, #20
14e04     A0 10 B1 FD | 	call	#__system__Mid_S
14e08     A7 FA 61 FC | 	wrlong	result1, fp
14e0c     A7 12 02 F6 | 	mov	arg01, fp
14e10     9C 7C BF FD | 	call	#_push
14e14                 | LR__1743
14e14     A7 F0 03 F6 | 	mov	ptra, fp
14e18     B2 00 A0 FD | 	call	#popregs_
14e1c                 | _do_mid_ret
14e1c     2D 00 64 FD | 	ret
14e20                 | 
14e20                 | ' 
14e20                 | ' '-------------------- mkdir
14e20                 | ' 
14e20                 | ' sub do_mkdir
14e20                 | _do_mkdir
14e20     04 4A 05 F6 | 	mov	COUNT_, #4
14e24     A8 00 A0 FD | 	call	#pushregs_
14e28     EC 7B BF FD | 	call	#_pop
14e2c     FE 18 02 F6 | 	mov	arg04, result2
14e30     FF 16 02 F6 | 	mov	arg03, result3
14e34     FD 26 02 F6 | 	mov	local01, result1
14e38     0C 29 02 F6 | 	mov	local02, arg04
14e3c     0B 2B 02 F6 | 	mov	local03, arg03
14e40                 | ' 
14e40                 | ' t1=pop()
14e40                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e40     2B 2A 0E F2 | 	cmp	local03, #43 wz
14e44     10 00 90 5D |  if_ne	jmp	#LR__1750
14e48     13 13 02 F6 | 	mov	arg01, local01
14e4c     40 7D BF FD | 	call	#_convertstring
14e50     FD 26 02 F6 | 	mov	local01, result1
14e54     1F 2A 06 F6 | 	mov	local03, #31
14e58                 | LR__1750
14e58                 | ' if t1.result_type<>result_string then printerror(15): return
14e58     1F 2A 0E F2 | 	cmp	local03, #31 wz
14e5c     10 00 90 AD |  if_e	jmp	#LR__1751
14e60     0F 12 06 F6 | 	mov	arg01, #15
14e64     00 14 06 F6 | 	mov	arg02, #0
14e68     18 B5 B0 FD | 	call	#_printerror
14e6c     64 00 90 FD | 	jmp	#LR__1753
14e70                 | LR__1751
14e70     13 13 02 F6 | 	mov	arg01, local01
14e74     6C 17 B1 FD | 	call	#__system___mkdir
14e78     FD 2C 0A F6 | 	mov	local04, result1 wz
14e7c                 | ' filename$=t1.result.sresult
14e7c                 | ' err=mkdir(filename$)
14e7c                 | ' 'err=geterr() : 
14e7c                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14e7c     54 00 90 AD |  if_e	jmp	#LR__1752
14e80     00 12 06 F6 | 	mov	arg01, #0
14e84     B4 4B B1 FD | 	call	#__system___getiolock_0573
14e88     FD 12 02 F6 | 	mov	arg01, result1
14e8c     84 EE B0 FD | 	call	#__system___lockmem
14e90     A0 01 00 FF 
14e94     C3 15 06 F6 | 	mov	arg02, ##@LR__5757
14e98     00 12 06 F6 | 	mov	arg01, #0
14e9c     00 16 06 F6 | 	mov	arg03, #0
14ea0     64 FB B0 FD | 	call	#__system___basic_print_string
14ea4     00 12 06 F6 | 	mov	arg01, #0
14ea8     16 15 02 F6 | 	mov	arg02, local04
14eac     00 16 06 F6 | 	mov	arg03, #0
14eb0     0A 18 06 F6 | 	mov	arg04, #10
14eb4     94 FB B0 FD | 	call	#__system___basic_print_integer
14eb8     00 12 06 F6 | 	mov	arg01, #0
14ebc     0A 14 06 F6 | 	mov	arg02, #10
14ec0     00 16 06 F6 | 	mov	arg03, #0
14ec4     E8 FA B0 FD | 	call	#__system___basic_print_char
14ec8     00 12 06 F6 | 	mov	arg01, #0
14ecc     6C 4B B1 FD | 	call	#__system___getiolock_0573
14ed0     FD 00 68 FC | 	wrlong	#0, result1
14ed4                 | LR__1752
14ed4                 | LR__1753
14ed4     A7 F0 03 F6 | 	mov	ptra, fp
14ed8     B2 00 A0 FD | 	call	#popregs_
14edc                 | _do_mkdir_ret
14edc     2D 00 64 FD | 	ret
14ee0                 | 
14ee0                 | ' 
14ee0                 | ' '-------------------- mode
14ee0                 | ' 
14ee0                 | ' sub do_mode
14ee0                 | _do_mode
14ee0     05 4A 05 F6 | 	mov	COUNT_, #5
14ee4     A8 00 A0 FD | 	call	#pushregs_
14ee8     2C 7B BF FD | 	call	#_pop
14eec     FD 26 02 F6 | 	mov	local01, result1
14ef0     FE 28 02 F6 | 	mov	local02, result2
14ef4     FF 2A 02 F6 | 	mov	local03, result3
14ef8                 | ' t1=pop() 
14ef8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14ef8     1E 2A 0E F2 | 	cmp	local03, #30 wz
14efc     10 00 90 5D |  if_ne	jmp	#LR__1760
14f00     13 13 02 F6 | 	mov	arg01, local01
14f04     00 14 06 F6 | 	mov	arg02, #0
14f08     48 21 B1 FD | 	call	#__system___float_tointeger
14f0c     FD 26 02 F6 | 	mov	local01, result1
14f10                 | LR__1760
14f10                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f10     1F 2A 0E F2 | 	cmp	local03, #31 wz
14f14     18 00 90 5D |  if_ne	jmp	#LR__1761
14f18     13 13 02 F6 | 	mov	arg01, local01
14f1c     78 24 B1 FD | 	call	#__system____builtin_atof
14f20     FD 12 02 F6 | 	mov	arg01, result1
14f24     00 14 06 F6 | 	mov	arg02, #0
14f28     28 21 B1 FD | 	call	#__system___float_tointeger
14f2c     FD 26 02 F6 | 	mov	local01, result1
14f30                 | LR__1761
14f30                 | ' select case t1.result.iresult
14f30     13 2D 02 F6 | 	mov	local04, local01
14f34     05 2C 26 F3 | 	fle	local04, #5
14f38     30 2C 62 FD | 	jmprel	local04
14f3c                 | LR__1762
14f3c     14 00 90 FD | 	jmp	#LR__1763
14f40     A8 00 90 FD | 	jmp	#LR__1764
14f44     10 01 90 FD | 	jmp	#LR__1765
14f48     78 01 90 FD | 	jmp	#LR__1766
14f4c     E0 01 90 FD | 	jmp	#LR__1767
14f50     70 02 90 FD | 	jmp	#LR__1768
14f54                 | LR__1763
14f54     37 00 00 FF 
14f58     40 E4 05 F1 | 	add	objptr, ##28224
14f5c     F2 02 68 FC | 	wrlong	#1, objptr
14f60     04 E4 85 F1 | 	sub	objptr, #4
14f64     F2 34 69 FC | 	wrlong	#154, objptr
14f68     19 00 00 FF 
14f6c     D8 E4 05 F1 | 	add	objptr, ##13016
14f70     F2 02 68 FC | 	wrlong	#1, objptr
14f74     19 00 00 FF 
14f78     DC E4 85 F1 | 	sub	objptr, ##13020
14f7c     F2 26 69 FC | 	wrlong	#147, objptr
14f80     37 00 00 FF 
14f84     38 E4 85 F1 | 	sub	objptr, ##28216
14f88     04 12 06 F6 | 	mov	arg01, #4
14f8c     F8 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
14f90     37 00 00 FF 
14f94     3C E4 05 F1 | 	add	objptr, ##28220
14f98     F2 12 02 FB | 	rdlong	arg01, objptr
14f9c     04 E4 85 F1 | 	sub	objptr, #4
14fa0     F2 14 02 FB | 	rdlong	arg02, objptr
14fa4                 | ' 
14fa4                 | ' write_color:=ff
14fa4     36 00 00 FF 
14fa8     F7 E5 85 F1 | 	sub	objptr, ##28151
14fac     F2 12 62 FC | 	wrlong	arg01, objptr
14fb0                 | ' write_background:=bb
14fb0     04 E4 05 F1 | 	add	objptr, #4
14fb4     F2 14 62 FC | 	wrlong	arg02, objptr
14fb8     01 00 00 FF 
14fbc     00 EA 05 F1 | 	add	ptr__dat__, ##512
14fc0     51 00 00 FF 
14fc4     73 E5 05 F1 | 	add	objptr, ##41843
14fc8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
14fcc     04 E4 85 F1 | 	sub	objptr, #4
14fd0     03 00 80 FF 
14fd4     F2 30 69 FC | 	wrlong	##1688, objptr
14fd8     51 00 00 FF 
14fdc     B4 E5 85 F1 | 	sub	objptr, ##41908
14fe0     01 00 00 FF 
14fe4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
14fe8     D8 01 90 FD | 	jmp	#LR__1768
14fec                 | LR__1764
14fec     37 00 00 FF 
14ff0     40 E4 05 F1 | 	add	objptr, ##28224
14ff4     F2 00 68 FC | 	wrlong	#0, objptr
14ff8     04 E4 85 F1 | 	sub	objptr, #4
14ffc     F2 2E 68 FC | 	wrlong	#23, objptr
15000     19 00 00 FF 
15004     D8 E4 05 F1 | 	add	objptr, ##13016
15008     F2 00 68 FC | 	wrlong	#0, objptr
1500c     19 00 00 FF 
15010     DC E4 85 F1 | 	sub	objptr, ##13020
15014     F2 00 68 FC | 	wrlong	#0, objptr
15018     37 00 00 FF 
1501c     38 E4 85 F1 | 	sub	objptr, ##28216
15020     00 12 06 F6 | 	mov	arg01, #0
15024     60 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
15028     37 00 00 FF 
1502c     3C E4 05 F1 | 	add	objptr, ##28220
15030     F2 12 02 FB | 	rdlong	arg01, objptr
15034     04 E4 85 F1 | 	sub	objptr, #4
15038     F2 14 02 FB | 	rdlong	arg02, objptr
1503c                 | ' 
1503c                 | ' write_color:=ff
1503c     36 00 00 FF 
15040     F7 E5 85 F1 | 	sub	objptr, ##28151
15044     F2 12 62 FC | 	wrlong	arg01, objptr
15048                 | ' write_background:=bb
15048     04 E4 05 F1 | 	add	objptr, #4
1504c     F2 14 62 FC | 	wrlong	arg02, objptr
15050     45 E4 85 F1 | 	sub	objptr, #69
15054     6C 01 90 FD | 	jmp	#LR__1768
15058                 | LR__1765
15058     37 00 00 FF 
1505c     40 E4 05 F1 | 	add	objptr, ##28224
15060     F2 00 68 FC | 	wrlong	#0, objptr
15064     04 E4 85 F1 | 	sub	objptr, #4
15068     F2 6A 69 FC | 	wrlong	#181, objptr
1506c     19 00 00 FF 
15070     D8 E4 05 F1 | 	add	objptr, ##13016
15074     F2 00 68 FC | 	wrlong	#0, objptr
15078     19 00 00 FF 
1507c     DC E4 85 F1 | 	sub	objptr, ##13020
15080     F2 00 68 FC | 	wrlong	#0, objptr
15084     37 00 00 FF 
15088     38 E4 85 F1 | 	sub	objptr, ##28216
1508c     00 12 06 F6 | 	mov	arg01, #0
15090     F4 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
15094     37 00 00 FF 
15098     3C E4 05 F1 | 	add	objptr, ##28220
1509c     F2 12 02 FB | 	rdlong	arg01, objptr
150a0     04 E4 85 F1 | 	sub	objptr, #4
150a4     F2 14 02 FB | 	rdlong	arg02, objptr
150a8                 | ' 
150a8                 | ' write_color:=ff
150a8     36 00 00 FF 
150ac     F7 E5 85 F1 | 	sub	objptr, ##28151
150b0     F2 12 62 FC | 	wrlong	arg01, objptr
150b4                 | ' write_background:=bb
150b4     04 E4 05 F1 | 	add	objptr, #4
150b8     F2 14 62 FC | 	wrlong	arg02, objptr
150bc     45 E4 85 F1 | 	sub	objptr, #69
150c0     00 01 90 FD | 	jmp	#LR__1768
150c4                 | LR__1766
150c4     37 00 00 FF 
150c8     40 E4 05 F1 | 	add	objptr, ##28224
150cc     F2 00 68 FC | 	wrlong	#0, objptr
150d0     04 E4 85 F1 | 	sub	objptr, #4
150d4     F2 1E 68 FC | 	wrlong	#15, objptr
150d8     19 00 00 FF 
150dc     D8 E4 05 F1 | 	add	objptr, ##13016
150e0     F2 00 68 FC | 	wrlong	#0, objptr
150e4     19 00 00 FF 
150e8     DC E4 85 F1 | 	sub	objptr, ##13020
150ec     F2 00 68 FC | 	wrlong	#0, objptr
150f0     37 00 00 FF 
150f4     38 E4 85 F1 | 	sub	objptr, ##28216
150f8     00 12 06 F6 | 	mov	arg01, #0
150fc     88 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
15100     37 00 00 FF 
15104     3C E4 05 F1 | 	add	objptr, ##28220
15108     F2 12 02 FB | 	rdlong	arg01, objptr
1510c     04 E4 85 F1 | 	sub	objptr, #4
15110     F2 14 02 FB | 	rdlong	arg02, objptr
15114                 | ' 
15114                 | ' write_color:=ff
15114     36 00 00 FF 
15118     F7 E5 85 F1 | 	sub	objptr, ##28151
1511c     F2 12 62 FC | 	wrlong	arg01, objptr
15120                 | ' write_background:=bb
15120     04 E4 05 F1 | 	add	objptr, #4
15124     F2 14 62 FC | 	wrlong	arg02, objptr
15128     45 E4 85 F1 | 	sub	objptr, #69
1512c     94 00 90 FD | 	jmp	#LR__1768
15130                 | LR__1767
15130     37 00 00 FF 
15134     40 E4 05 F1 | 	add	objptr, ##28224
15138     F2 02 68 FC | 	wrlong	#1, objptr
1513c     04 E4 85 F1 | 	sub	objptr, #4
15140     F2 02 68 FC | 	wrlong	#1, objptr
15144     19 00 00 FF 
15148     D8 E4 05 F1 | 	add	objptr, ##13016
1514c     F2 02 68 FC | 	wrlong	#1, objptr
15150     19 00 00 FF 
15154     DC E4 85 F1 | 	sub	objptr, ##13020
15158     F2 1C 68 FC | 	wrlong	#14, objptr
1515c     37 00 00 FF 
15160     38 E4 85 F1 | 	sub	objptr, ##28216
15164     04 12 06 F6 | 	mov	arg01, #4
15168     1C CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
1516c     37 00 00 FF 
15170     3C E4 05 F1 | 	add	objptr, ##28220
15174     F2 12 02 FB | 	rdlong	arg01, objptr
15178     04 E4 85 F1 | 	sub	objptr, #4
1517c     F2 14 02 FB | 	rdlong	arg02, objptr
15180                 | ' 
15180                 | ' write_color:=ff
15180     36 00 00 FF 
15184     F7 E5 85 F1 | 	sub	objptr, ##28151
15188     F2 12 62 FC | 	wrlong	arg01, objptr
1518c                 | ' write_background:=bb
1518c     04 E4 05 F1 | 	add	objptr, #4
15190     F2 14 62 FC | 	wrlong	arg02, objptr
15194     07 00 00 FF 
15198     82 EB 05 F1 | 	add	ptr__dat__, ##3970
1519c     51 00 00 FF 
151a0     73 E5 05 F1 | 	add	objptr, ##41843
151a4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
151a8     04 E4 85 F1 | 	sub	objptr, #4
151ac     03 00 80 FF 
151b0     F2 30 69 FC | 	wrlong	##1688, objptr
151b4     51 00 00 FF 
151b8     B4 E5 85 F1 | 	sub	objptr, ##41908
151bc     07 00 00 FF 
151c0     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
151c4                 | LR__1768
151c4     51 00 00 FF 
151c8     B0 E5 05 F1 | 	add	objptr, ##41904
151cc     F2 26 62 FC | 	wrlong	local01, objptr
151d0     04 E4 85 F1 | 	sub	objptr, #4
151d4     F2 12 02 FB | 	rdlong	arg01, objptr
151d8     0E 00 00 FF 
151dc     50 E5 85 F1 | 	sub	objptr, ##7504
151e0     F2 2E 02 FB | 	rdlong	local05, objptr
151e4     43 00 00 FF 
151e8     5C E4 85 F1 | 	sub	objptr, ##34396
151ec     17 13 82 F1 | 	sub	arg01, local05
151f0     00 14 06 F6 | 	mov	arg02, #0
151f4     0A 16 06 F6 | 	mov	arg03, #10
151f8     E8 0D B1 FD | 	call	#__system__Number_S
151fc     FD 12 02 F6 | 	mov	arg01, result1
15200     A0 01 00 FF 
15204     EC 15 06 F6 | 	mov	arg02, ##@LR__5758
15208     64 EB B0 FD | 	call	#__system___string_concat
1520c     50 00 00 FF 
15210     10 E5 05 F1 | 	add	objptr, ##41232
15214     F2 FA 61 FC | 	wrlong	result1, objptr
15218     19 00 00 FF 
1521c     D4 E4 85 F1 | 	sub	objptr, ##13012
15220     F2 12 02 FB | 	rdlong	arg01, objptr
15224     04 E4 85 F1 | 	sub	objptr, #4
15228     F2 14 02 FB | 	rdlong	arg02, objptr
1522c     37 00 00 FF 
15230     38 E4 85 F1 | 	sub	objptr, ##28216
15234     A0 CE B0 FD | 	call	#_hg010b_spin2_cls
15238     A0 01 00 FF 
1523c     FE 13 06 F6 | 	mov	arg01, ##@LR__5759
15240                 | ' 
15240                 | ' write(text)
15240     54 D2 B0 FD | 	call	#_hg010b_spin2_write
15244                 | ' crlf
15244     50 D7 B0 FD | 	call	#_hg010b_spin2_crlf
15248     18 00 00 FF 
1524c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15250     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15254     18 00 00 FF 
15258     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1525c                 | ' 
1525c                 | ' write(text)
1525c     38 D2 B0 FD | 	call	#_hg010b_spin2_write
15260                 | ' crlf
15260     34 D7 B0 FD | 	call	#_hg010b_spin2_crlf
15264     50 00 00 FF 
15268     10 E5 05 F1 | 	add	objptr, ##41232
1526c     F2 12 02 FB | 	rdlong	arg01, objptr
15270     50 00 00 FF 
15274     10 E5 85 F1 | 	sub	objptr, ##41232
15278                 | ' 
15278                 | ' write(text)
15278     1C D2 B0 FD | 	call	#_hg010b_spin2_write
1527c                 | ' crlf
1527c     18 D7 B0 FD | 	call	#_hg010b_spin2_crlf
15280     A7 F0 03 F6 | 	mov	ptra, fp
15284     B2 00 A0 FD | 	call	#popregs_
15288                 | _do_mode_ret
15288     2D 00 64 FD | 	ret
1528c                 | 
1528c                 | ' 
1528c                 | ' '-------------------- mouse
1528c                 | ' 
1528c                 | ' sub do_mouse
1528c                 | _do_mouse
1528c     88 77 BF FD | 	call	#_pop
15290     00 FA 4D F2 | 	cmps	result1, #0 wz
15294                 | ' 
15294                 | ' t1=pop()
15294                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15294     14 00 90 5D |  if_ne	jmp	#LR__1770
15298     10 12 06 F6 | 	mov	arg01, #16
1529c     00 14 06 F6 | 	mov	arg02, #0
152a0     00 16 06 F6 | 	mov	arg03, #0
152a4     10 C1 B0 FD | 	call	#_hg010b_spin2_setspritesize
152a8     10 00 90 FD | 	jmp	#LR__1771
152ac                 | LR__1770
152ac     10 12 06 F6 | 	mov	arg01, #16
152b0     20 14 06 F6 | 	mov	arg02, #32
152b4     20 16 06 F6 | 	mov	arg03, #32
152b8     FC C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
152bc                 | LR__1771
152bc                 | _do_mouse_ret
152bc     2D 00 64 FD | 	ret
152c0                 | 
152c0                 | ' 
152c0                 | ' '-------------------- mousek
152c0                 | ' 
152c0                 | ' sub do_mousek
152c0                 | _do_mousek
152c0     00 4A 05 F6 | 	mov	COUNT_, #0
152c4     A8 00 A0 FD | 	call	#pushregs_
152c8     0C F0 07 F1 | 	add	ptra, #12
152cc     08 4E 05 F1 | 	add	fp, #8
152d0     A7 3A 68 FC | 	wrlong	#29, fp
152d4     08 4E 85 F1 | 	sub	fp, #8
152d8     51 00 00 FF 
152dc     28 E5 05 F1 | 	add	objptr, ##41768
152e0     F2 12 02 FB | 	rdlong	arg01, objptr
152e4     51 00 00 FF 
152e8     28 E5 85 F1 | 	sub	objptr, ##41768
152ec     A7 12 62 FC | 	wrlong	arg01, fp
152f0     A7 12 02 F6 | 	mov	arg01, fp
152f4     B8 77 BF FD | 	call	#_push
152f8     A7 F0 03 F6 | 	mov	ptra, fp
152fc     B2 00 A0 FD | 	call	#popregs_
15300                 | _do_mousek_ret
15300     2D 00 64 FD | 	ret
15304                 | 
15304                 | ' 
15304                 | ' '-------------------- mousew
15304                 | ' 
15304                 | ' sub do_mousew
15304                 | _do_mousew
15304     00 4A 05 F6 | 	mov	COUNT_, #0
15308     A8 00 A0 FD | 	call	#pushregs_
1530c     0C F0 07 F1 | 	add	ptra, #12
15310     08 4E 05 F1 | 	add	fp, #8
15314     A7 38 68 FC | 	wrlong	#28, fp
15318     08 4E 85 F1 | 	sub	fp, #8
1531c     51 00 00 FF 
15320     2C E5 05 F1 | 	add	objptr, ##41772
15324     F2 12 02 FB | 	rdlong	arg01, objptr
15328     51 00 00 FF 
1532c     2C E5 85 F1 | 	sub	objptr, ##41772
15330     A7 12 62 FC | 	wrlong	arg01, fp
15334     A7 12 02 F6 | 	mov	arg01, fp
15338     74 77 BF FD | 	call	#_push
1533c     A7 F0 03 F6 | 	mov	ptra, fp
15340     B2 00 A0 FD | 	call	#popregs_
15344                 | _do_mousew_ret
15344     2D 00 64 FD | 	ret
15348                 | 
15348                 | ' 
15348                 | ' '-------------------- mousex
15348                 | ' 
15348                 | ' sub do_mousex
15348                 | _do_mousex
15348     00 4A 05 F6 | 	mov	COUNT_, #0
1534c     A8 00 A0 FD | 	call	#pushregs_
15350     0C F0 07 F1 | 	add	ptra, #12
15354     08 4E 05 F1 | 	add	fp, #8
15358     A7 3A 68 FC | 	wrlong	#29, fp
1535c     08 4E 85 F1 | 	sub	fp, #8
15360     51 00 00 FF 
15364     20 E5 05 F1 | 	add	objptr, ##41760
15368     F2 12 02 FB | 	rdlong	arg01, objptr
1536c     51 00 00 FF 
15370     20 E5 85 F1 | 	sub	objptr, ##41760
15374     A7 12 62 FC | 	wrlong	arg01, fp
15378     A7 12 02 F6 | 	mov	arg01, fp
1537c     30 77 BF FD | 	call	#_push
15380     A7 F0 03 F6 | 	mov	ptra, fp
15384     B2 00 A0 FD | 	call	#popregs_
15388                 | _do_mousex_ret
15388     2D 00 64 FD | 	ret
1538c                 | 
1538c                 | ' 
1538c                 | ' '-------------------- mousey
1538c                 | ' 
1538c                 | ' sub do_mousey
1538c                 | _do_mousey
1538c     00 4A 05 F6 | 	mov	COUNT_, #0
15390     A8 00 A0 FD | 	call	#pushregs_
15394     0C F0 07 F1 | 	add	ptra, #12
15398     08 4E 05 F1 | 	add	fp, #8
1539c     A7 3A 68 FC | 	wrlong	#29, fp
153a0     08 4E 85 F1 | 	sub	fp, #8
153a4     51 00 00 FF 
153a8     24 E5 05 F1 | 	add	objptr, ##41764
153ac     F2 12 02 FB | 	rdlong	arg01, objptr
153b0     51 00 00 FF 
153b4     24 E5 85 F1 | 	sub	objptr, ##41764
153b8     A7 12 62 FC | 	wrlong	arg01, fp
153bc     A7 12 02 F6 | 	mov	arg01, fp
153c0     EC 76 BF FD | 	call	#_push
153c4     A7 F0 03 F6 | 	mov	ptra, fp
153c8     B2 00 A0 FD | 	call	#popregs_
153cc                 | _do_mousey_ret
153cc     2D 00 64 FD | 	ret
153d0                 | 
153d0                 | ' 
153d0                 | ' '------------------ new
153d0                 | ' 
153d0                 | ' sub do_new
153d0                 | _do_new
153d0     03 4A 05 F6 | 	mov	COUNT_, #3
153d4     A8 00 A0 FD | 	call	#pushregs_
153d8                 | ' 
153d8                 | ' if inrun=1 then inrun=2
153d8     50 00 00 FF 
153dc     EC E4 05 F1 | 	add	objptr, ##41196
153e0     F2 16 02 FB | 	rdlong	arg03, objptr
153e4     50 00 00 FF 
153e8     EC E4 85 F1 | 	sub	objptr, ##41196
153ec     01 16 0E F2 | 	cmp	arg03, #1 wz
153f0     50 00 00 AF 
153f4     EC E4 05 A1 |  if_e	add	objptr, ##41196
153f8     F2 04 68 AC |  if_e	wrlong	#2, objptr
153fc     50 00 00 AF 
15400     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15404     13 12 C6 F9 | 	decod	arg01, #19
15408     01 14 66 F6 | 	neg	arg02, #1
1540c     00 B1 B0 FD | 	call	#_pslpoke
15410     35 00 00 FF 
15414     08 E4 05 F1 | 	add	objptr, ##27144
15418     F2 00 68 FC | 	wrlong	#0, objptr
1541c                 | ' pslpoke(memlo,$FFFFFFFF)
1541c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
1541c     00 26 06 F6 | 	mov	local01, #0
15420     20 00 00 FF 
15424     10 E4 85 F1 | 	sub	objptr, ##16400
15428     97 1E 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
1542c                 | LR__1780
1542c     13 17 02 F6 | 	mov	arg03, local01
15430     04 16 66 F0 | 	shl	arg03, #4
15434     F2 16 02 F1 | 	add	arg03, objptr
15438     A0 01 00 FF 
1543c     FF 15 06 F6 | 	mov	arg02, ##@LR__5760
15440     0B 15 62 FC | 	wrlong	arg02, arg03
15444     13 29 02 F6 | 	mov	local02, local01
15448     04 28 66 F0 | 	shl	local02, #4
1544c     F2 28 02 F1 | 	add	local02, objptr
15450     0C 28 06 F1 | 	add	local02, #12
15454     14 01 68 FC | 	wrlong	#0, local02
15458     01 26 06 F1 | 	add	local01, #1
1545c     02 00 00 FF 
15460     01 26 56 F2 | 	cmps	local01, ##1025 wc
15464     C4 FF 9F CD |  if_b	jmp	#LR__1780
15468                 | LR__1781
15468     35 00 00 FF 
1546c     90 E4 05 F1 | 	add	objptr, ##27280
15470     00 04 80 FF 
15474     F2 00 68 FC | 	wrlong	##524288, objptr
15478     06 00 00 FF 
1547c     30 E4 05 F1 | 	add	objptr, ##3120
15480     00 04 80 FF 
15484     F2 00 68 FC | 	wrlong	##524288, objptr
15488     04 E4 05 F1 | 	add	objptr, #4
1548c     00 04 80 FF 
15490     F2 00 68 FC | 	wrlong	##524288, objptr
15494     0D 00 00 FF 
15498     64 E4 85 F1 | 	sub	objptr, ##6756
1549c     F2 00 68 FC | 	wrlong	#0, objptr
154a0     07 00 00 FF 
154a4     24 E4 05 F1 | 	add	objptr, ##3620
154a8     F2 00 68 FC | 	wrlong	#0, objptr
154ac     07 00 00 FF 
154b0     20 E4 85 F1 | 	sub	objptr, ##3616
154b4     00 04 80 FF 
154b8     F2 00 68 FC | 	wrlong	##524288, objptr
154bc     07 00 00 FF 
154c0     30 E4 05 F1 | 	add	objptr, ##3632
154c4     F2 00 68 FC | 	wrlong	#0, objptr
154c8     04 E4 05 F1 | 	add	objptr, #4
154cc     FF FF FF FF 
154d0     F2 FE 6B FC | 	wrlong	##-1, objptr
154d4     06 00 00 FF 
154d8     78 E4 05 F1 | 	add	objptr, ##3192
154dc     F2 00 68 FC | 	wrlong	#0, objptr
154e0     04 E4 05 F1 | 	add	objptr, #4
154e4     F2 00 68 FC | 	wrlong	#0, objptr
154e8                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
154e8                 | ' stackpointer=0
154e8                 | ' lineptr=0 
154e8                 | ' programptr=memlo ': stringptr=0
154e8                 | ' 
154e8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
154e8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
154e8     00 26 06 F6 | 	mov	local01, #0
154ec     06 00 00 FF 
154f0     74 E4 85 F1 | 	sub	objptr, ##3188
154f4     97 16 48 FB | 	callpa	#(@LR__1783-@LR__1782)>>2,fcache_load_ptr_
154f8                 | LR__1782
154f8     13 29 02 F6 | 	mov	local02, local01
154fc     02 28 66 F0 | 	shl	local02, #2
15500     13 29 02 F1 | 	add	local02, local01
15504     02 28 66 F0 | 	shl	local02, #2
15508     F2 28 02 F1 | 	add	local02, objptr
1550c     08 28 06 F1 | 	add	local02, #8
15510     FF FF FF FF 
15514     14 FF 6B FC | 	wrlong	##-1, local02
15518     01 26 06 F1 | 	add	local01, #1
1551c     41 26 56 F2 | 	cmps	local01, #65 wc
15520     D4 FF 9F CD |  if_b	jmp	#LR__1782
15524                 | LR__1783
15524     4A 00 00 FF 
15528     98 E4 85 F1 | 	sub	objptr, ##38040
1552c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
1552c     00 26 06 F6 | 	mov	local01, #0
15530                 | LR__1784
15530     13 29 02 F6 | 	mov	local02, local01
15534     02 28 66 F0 | 	shl	local02, #2
15538     51 00 00 FF 
1553c     68 E5 05 F1 | 	add	objptr, ##41832
15540     F2 28 02 F1 | 	add	local02, objptr
15544     14 2B 0A FB | 	rdlong	local03, local02 wz
15548     51 00 00 FF 
1554c     68 E5 85 F1 | 	sub	objptr, ##41832
15550     34 00 90 AD |  if_e	jmp	#LR__1785
15554     13 13 02 F6 | 	mov	arg01, local01
15558     00 14 06 F6 | 	mov	arg02, #0
1555c     00 16 06 F6 | 	mov	arg03, #0
15560     54 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
15564     13 29 02 F6 | 	mov	local02, local01
15568     02 28 66 F0 | 	shl	local02, #2
1556c     51 00 00 FF 
15570     68 E5 05 F1 | 	add	objptr, ##41832
15574     F2 28 02 F1 | 	add	local02, objptr
15578     14 13 02 FB | 	rdlong	arg01, local02
1557c     51 00 00 FF 
15580     68 E5 85 F1 | 	sub	objptr, ##41832
15584     68 2A B1 FD | 	call	#__system___gc_free
15588                 | LR__1785
15588     01 26 06 F1 | 	add	local01, #1
1558c     10 26 56 F2 | 	cmps	local01, #16 wc
15590     9C FF 9F CD |  if_b	jmp	#LR__1784
15594     51 00 00 FF 
15598     BC E5 05 F1 | 	add	objptr, ##41916
1559c     00 C0 9F FF 
155a0     F2 00 68 FC | 	wrlong	##1065353216, objptr
155a4     04 E4 05 F1 | 	add	objptr, #4
155a8     00 C0 9F FF 
155ac     F2 00 68 FC | 	wrlong	##1065353216, objptr
155b0     51 00 00 FF 
155b4     BC E5 85 F1 | 	sub	objptr, ##41916
155b8     F2 2A 02 FB | 	rdlong	local03, objptr
155bc     51 00 00 FF 
155c0     A8 E5 05 F1 | 	add	objptr, ##41896
155c4     F2 2A 62 FC | 	wrlong	local03, objptr
155c8     51 00 00 FF 
155cc     AC E5 85 F1 | 	sub	objptr, ##41900
155d0     11 12 06 F6 | 	mov	arg01, #17
155d4     08 14 06 F6 | 	mov	arg02, #8
155d8     10 16 06 F6 | 	mov	arg03, #16
155dc     D8 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
155e0     10 12 06 F6 | 	mov	arg01, #16
155e4     20 14 06 F6 | 	mov	arg02, #32
155e8     20 16 06 F6 | 	mov	arg03, #32
155ec     C8 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
155f0     A1 01 00 FF 
155f4     00 2A 06 F6 | 	mov	local03, ##@LR__5761
155f8     51 00 00 FF 
155fc     D8 E5 05 F1 | 	add	objptr, ##41944
15600     F2 2A 62 FC | 	wrlong	local03, objptr
15604     51 00 00 FF 
15608     D8 E5 85 F1 | 	sub	objptr, ##41944
1560c     7C A1 B0 FD | 	call	#_init_audio
15610     A7 F0 03 F6 | 	mov	ptra, fp
15614     B2 00 A0 FD | 	call	#popregs_
15618                 | _do_new_ret
15618     2D 00 64 FD | 	ret
1561c                 | 
1561c                 | ' 
1561c                 | ' '-------------------- next
1561c                 | ' 
1561c                 | ' sub do_next()
1561c                 | _do_next
1561c     04 4A 05 F6 | 	mov	COUNT_, #4
15620     A8 00 A0 FD | 	call	#pushregs_
15624     F0 73 BF FD | 	call	#_pop
15628     FD 26 02 F6 | 	mov	local01, result1
1562c     FE 28 02 F6 | 	mov	local02, result2
15630     FF 2A 02 F6 | 	mov	local03, result3
15634                 | ' t1=pop() :varnum=t1.result.uresult
15634                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15634     50 00 00 FF 
15638     08 E5 05 F1 | 	add	objptr, ##41224
1563c     F2 14 02 FB | 	rdlong	arg02, objptr
15640     0A 13 02 F6 | 	mov	arg01, arg02
15644     02 12 66 F0 | 	shl	arg01, #2
15648     0A 13 02 F1 | 	add	arg01, arg02
1564c     02 12 66 F0 | 	shl	arg01, #2
15650     06 00 00 FF 
15654     70 E4 85 F1 | 	sub	objptr, ##3184
15658     F2 12 02 F1 | 	add	arg01, objptr
1565c     08 12 06 F1 | 	add	arg01, #8
15660     09 15 02 FB | 	rdlong	arg02, arg01
15664     13 15 0A F2 | 	cmp	arg02, local01 wz
15668     4A 00 00 FF 
1566c     98 E4 85 F1 | 	sub	objptr, ##38040
15670     10 00 90 AD |  if_e	jmp	#LR__1790
15674     25 12 06 F6 | 	mov	arg01, #37
15678     00 14 06 F6 | 	mov	arg02, #0
1567c     04 AD B0 FD | 	call	#_printerror
15680     54 03 90 FD | 	jmp	#LR__1797
15684                 | LR__1790
15684                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15684     13 15 02 F6 | 	mov	arg02, local01
15688     04 14 66 F0 | 	shl	arg02, #4
1568c     14 00 00 FF 
15690     F8 E5 05 F1 | 	add	objptr, ##10744
15694     F2 14 02 F1 | 	add	arg02, objptr
15698     0C 14 06 F1 | 	add	arg02, #12
1569c     0A 15 02 FB | 	rdlong	arg02, arg02
156a0     1E 14 0E F2 | 	cmp	arg02, #30 wz
156a4     14 00 00 FF 
156a8     F8 E5 85 F1 | 	sub	objptr, ##10744
156ac     54 00 90 5D |  if_ne	jmp	#LR__1791
156b0     13 15 02 F6 | 	mov	arg02, local01
156b4     04 14 66 F0 | 	shl	arg02, #4
156b8     14 00 00 FF 
156bc     F8 E5 05 F1 | 	add	objptr, ##10744
156c0     F2 14 02 F1 | 	add	arg02, objptr
156c4     0C 14 06 F1 | 	add	arg02, #12
156c8     0A 39 68 FC | 	wrlong	#28, arg02
156cc     13 2D 02 F6 | 	mov	local04, local01
156d0     04 2C 66 F0 | 	shl	local04, #4
156d4     F2 2C 02 F1 | 	add	local04, objptr
156d8     13 15 02 F6 | 	mov	arg02, local01
156dc     04 14 66 F0 | 	shl	arg02, #4
156e0     F2 14 02 F1 | 	add	arg02, objptr
156e4     04 14 06 F1 | 	add	arg02, #4
156e8     0A 13 02 FB | 	rdlong	arg01, arg02
156ec     14 00 00 FF 
156f0     F8 E5 85 F1 | 	sub	objptr, ##10744
156f4     01 14 06 F6 | 	mov	arg02, #1
156f8     58 19 B1 FD | 	call	#__system___float_tointeger
156fc     04 2C 06 F1 | 	add	local04, #4
15700     16 FB 61 FC | 	wrlong	result1, local04
15704                 | LR__1791
15704     50 00 00 FF 
15708     08 E5 05 F1 | 	add	objptr, ##41224
1570c     F2 2C 02 FB | 	rdlong	local04, objptr
15710     16 15 02 F6 | 	mov	arg02, local04
15714     02 14 66 F0 | 	shl	arg02, #2
15718     16 15 02 F1 | 	add	arg02, local04
1571c     02 14 66 F0 | 	shl	arg02, #2
15720     06 00 00 FF 
15724     70 E4 85 F1 | 	sub	objptr, ##3184
15728     F2 14 02 F1 | 	add	arg02, objptr
1572c     0C 14 06 F1 | 	add	arg02, #12
15730     0A FF 01 FB | 	rdlong	result3, arg02
15734     13 2D 02 F6 | 	mov	local04, local01
15738     04 2C 66 F0 | 	shl	local04, #4
1573c     35 00 00 FF 
15740     A0 E4 85 F1 | 	sub	objptr, ##27296
15744     F2 2C 02 F1 | 	add	local04, objptr
15748     13 15 02 F6 | 	mov	arg02, local01
1574c     04 14 66 F0 | 	shl	arg02, #4
15750     F2 14 02 F1 | 	add	arg02, objptr
15754     04 14 06 F1 | 	add	arg02, #4
15758     0A 13 02 FB | 	rdlong	arg01, arg02
1575c     FF 12 02 F1 | 	add	arg01, result3
15760     04 2C 06 F1 | 	add	local04, #4
15764     16 13 62 FC | 	wrlong	arg01, local04
15768                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
15768                 | ' if fortable(fortop).stepval>=0 then
15768     3B 00 00 FF 
1576c     10 E5 05 F1 | 	add	objptr, ##30480
15770     F2 2C 02 FB | 	rdlong	local04, objptr
15774     16 13 02 F6 | 	mov	arg01, local04
15778     02 12 66 F0 | 	shl	arg01, #2
1577c     16 13 02 F1 | 	add	arg01, local04
15780     02 12 66 F0 | 	shl	arg01, #2
15784     06 00 00 FF 
15788     70 E4 85 F1 | 	sub	objptr, ##3184
1578c     F2 12 02 F1 | 	add	arg01, objptr
15790     0C 12 06 F1 | 	add	arg01, #12
15794     09 13 02 FB | 	rdlong	arg01, arg01
15798     00 12 56 F2 | 	cmps	arg01, #0 wc
1579c     4A 00 00 FF 
157a0     98 E4 85 F1 | 	sub	objptr, ##38040
157a4     78 00 90 CD |  if_b	jmp	#LR__1792
157a8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
157a8     04 26 66 F0 | 	shl	local01, #4
157ac     14 00 00 FF 
157b0     F8 E5 05 F1 | 	add	objptr, ##10744
157b4     F2 26 02 F1 | 	add	local01, objptr
157b8     3B 00 00 FF 
157bc     10 E5 05 F1 | 	add	objptr, ##30480
157c0     F2 12 02 FB | 	rdlong	arg01, objptr
157c4     09 2D 02 F6 | 	mov	local04, arg01
157c8     02 2C 66 F0 | 	shl	local04, #2
157cc     09 2D 02 F1 | 	add	local04, arg01
157d0     02 2C 66 F0 | 	shl	local04, #2
157d4     06 00 00 FF 
157d8     70 E4 85 F1 | 	sub	objptr, ##3184
157dc     F2 2C 02 F1 | 	add	local04, objptr
157e0     04 26 06 F1 | 	add	local01, #4
157e4     13 27 02 FB | 	rdlong	local01, local01
157e8     10 2C 06 F1 | 	add	local04, #16
157ec     16 2D 02 FB | 	rdlong	local04, local04
157f0     16 27 5A F2 | 	cmps	local01, local04 wcz
157f4     4A 00 00 FF 
157f8     98 E4 85 F1 | 	sub	objptr, ##38040
157fc     9C 00 90 ED |  if_be	jmp	#LR__1794
15800     50 00 00 FF 
15804     08 E5 05 F1 | 	add	objptr, ##41224
15808     F2 2C 02 FB | 	rdlong	local04, objptr
1580c     01 2C 86 F1 | 	sub	local04, #1
15810     F2 2C 62 FC | 	wrlong	local04, objptr
15814     50 00 00 FF 
15818     08 E5 85 F1 | 	sub	objptr, ##41224
1581c     B8 01 90 FD | 	jmp	#LR__1797
15820                 | LR__1792
15820                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
15820     13 2D 02 F6 | 	mov	local04, local01
15824     04 2C 66 F0 | 	shl	local04, #4
15828     14 00 00 FF 
1582c     F8 E5 05 F1 | 	add	objptr, ##10744
15830     F2 2C 02 F1 | 	add	local04, objptr
15834     3B 00 00 FF 
15838     10 E5 05 F1 | 	add	objptr, ##30480
1583c     F2 26 02 FB | 	rdlong	local01, objptr
15840     13 13 02 F6 | 	mov	arg01, local01
15844     02 12 66 F0 | 	shl	arg01, #2
15848     13 13 02 F1 | 	add	arg01, local01
1584c     02 12 66 F0 | 	shl	arg01, #2
15850     06 00 00 FF 
15854     70 E4 85 F1 | 	sub	objptr, ##3184
15858     F2 12 02 F1 | 	add	arg01, objptr
1585c     04 2C 06 F1 | 	add	local04, #4
15860     16 2D 02 FB | 	rdlong	local04, local04
15864     10 12 06 F1 | 	add	arg01, #16
15868     09 13 02 FB | 	rdlong	arg01, arg01
1586c     09 2D 52 F2 | 	cmps	local04, arg01 wc
15870     4A 00 00 FF 
15874     98 E4 85 F1 | 	sub	objptr, ##38040
15878     20 00 90 3D |  if_ae	jmp	#LR__1793
1587c     50 00 00 FF 
15880     08 E5 05 F1 | 	add	objptr, ##41224
15884     F2 2C 02 FB | 	rdlong	local04, objptr
15888     01 2C 86 F1 | 	sub	local04, #1
1588c     F2 2C 62 FC | 	wrlong	local04, objptr
15890     50 00 00 FF 
15894     08 E5 85 F1 | 	sub	objptr, ##41224
15898     3C 01 90 FD | 	jmp	#LR__1797
1589c                 | LR__1793
1589c                 | LR__1794
1589c                 | ' ' if not returned, goto pointer 
1589c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
1589c     50 00 00 FF 
158a0     EC E4 05 F1 | 	add	objptr, ##41196
158a4     F2 2C 02 FB | 	rdlong	local04, objptr
158a8     50 00 00 FF 
158ac     EC E4 85 F1 | 	sub	objptr, ##41196
158b0     01 2C 16 F2 | 	cmp	local04, #1 wc
158b4     DC 00 90 CD |  if_b	jmp	#LR__1795
158b8     50 00 00 FF 
158bc     08 E5 05 F1 | 	add	objptr, ##41224
158c0     F2 2C 02 FB | 	rdlong	local04, objptr
158c4     16 27 02 F6 | 	mov	local01, local04
158c8     02 26 66 F0 | 	shl	local01, #2
158cc     16 27 02 F1 | 	add	local01, local04
158d0     02 26 66 F0 | 	shl	local01, #2
158d4     06 00 00 FF 
158d8     70 E4 85 F1 | 	sub	objptr, ##3184
158dc     F2 26 02 F1 | 	add	local01, objptr
158e0     06 00 00 FF 
158e4     20 E4 05 F1 | 	add	objptr, ##3104
158e8     F2 2C 02 FB | 	rdlong	local04, objptr
158ec     50 00 00 FF 
158f0     B8 E4 85 F1 | 	sub	objptr, ##41144
158f4     13 27 02 FB | 	rdlong	local01, local01
158f8     13 2D 0A F2 | 	cmp	local04, local01 wz
158fc     94 00 90 AD |  if_e	jmp	#LR__1795
15900     50 00 00 FF 
15904     08 E5 05 F1 | 	add	objptr, ##41224
15908     F2 2C 02 FB | 	rdlong	local04, objptr
1590c     16 27 02 F6 | 	mov	local01, local04
15910     02 26 66 F0 | 	shl	local01, #2
15914     16 27 02 F1 | 	add	local01, local04
15918     02 26 66 F0 | 	shl	local01, #2
1591c     06 00 00 FF 
15920     70 E4 85 F1 | 	sub	objptr, ##3184
15924     F2 26 02 F1 | 	add	local01, objptr
15928     13 27 02 FB | 	rdlong	local01, local01
1592c     06 00 00 FF 
15930     20 E4 05 F1 | 	add	objptr, ##3104
15934     F2 26 62 FC | 	wrlong	local01, objptr
15938     50 E4 05 F1 | 	add	objptr, #80
1593c     F2 2C 02 FB | 	rdlong	local04, objptr
15940     16 27 02 F6 | 	mov	local01, local04
15944     02 26 66 F0 | 	shl	local01, #2
15948     16 27 02 F1 | 	add	local01, local04
1594c     02 26 66 F0 | 	shl	local01, #2
15950     06 00 00 FF 
15954     70 E4 85 F1 | 	sub	objptr, ##3184
15958     F2 26 02 F1 | 	add	local01, objptr
1595c     04 26 06 F1 | 	add	local01, #4
15960     13 27 02 FB | 	rdlong	local01, local01
15964     06 00 00 FF 
15968     24 E4 05 F1 | 	add	objptr, ##3108
1596c     F2 26 62 FC | 	wrlong	local01, objptr
15970     06 00 00 FF 
15974     40 E4 85 F1 | 	sub	objptr, ##3136
15978     F2 2C 02 FB | 	rdlong	local04, objptr
1597c     01 2C 86 F1 | 	sub	local04, #1
15980     04 E4 05 F1 | 	add	objptr, #4
15984     F2 2C 62 FC | 	wrlong	local04, objptr
15988     4A 00 00 FF 
1598c     80 E4 85 F1 | 	sub	objptr, ##38016
15990     44 00 90 FD | 	jmp	#LR__1796
15994                 | LR__1795
15994     50 00 00 FF 
15998     08 E5 05 F1 | 	add	objptr, ##41224
1599c     F2 2C 02 FB | 	rdlong	local04, objptr
159a0     16 27 02 F6 | 	mov	local01, local04
159a4     02 26 66 F0 | 	shl	local01, #2
159a8     16 27 02 F1 | 	add	local01, local04
159ac     02 26 66 F0 | 	shl	local01, #2
159b0     06 00 00 FF 
159b4     70 E4 85 F1 | 	sub	objptr, ##3184
159b8     F2 26 02 F1 | 	add	local01, objptr
159bc     04 26 06 F1 | 	add	local01, #4
159c0     13 27 02 FB | 	rdlong	local01, local01
159c4     01 26 86 F1 | 	sub	local01, #1
159c8     18 E4 85 F1 | 	sub	objptr, #24
159cc     F2 26 62 FC | 	wrlong	local01, objptr
159d0     4A 00 00 FF 
159d4     80 E4 85 F1 | 	sub	objptr, ##38016
159d8                 | LR__1796
159d8                 | LR__1797
159d8     A7 F0 03 F6 | 	mov	ptra, fp
159dc     B2 00 A0 FD | 	call	#popregs_
159e0                 | _do_next_ret
159e0     2D 00 64 FD | 	ret
159e4                 | 
159e4                 | ' 
159e4                 | ' '-------------------- no command (print "Unknown command")
159e4                 | ' 
159e4                 | ' sub do_no_command
159e4                 | _do_no_command
159e4     17 12 06 F6 | 	mov	arg01, #23
159e8     00 14 06 F6 | 	mov	arg02, #0
159ec     94 A9 B0 FD | 	call	#_printerror
159f0                 | _do_no_command_ret
159f0     2D 00 64 FD | 	ret
159f4                 | 
159f4                 | ' 
159f4                 | ' '-------------------- nothing
159f4                 | ' 
159f4                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
159f4                 | _do_nothing
159f4                 | _do_nothing_ret
159f4     2D 00 64 FD | 	ret
159f8                 | 
159f8                 | ' 
159f8                 | ' '-------------------- on
159f8                 | ' 
159f8                 | ' sub do_on
159f8                 | _do_on
159f8     01 4A 05 F6 | 	mov	COUNT_, #1
159fc     A8 00 A0 FD | 	call	#pushregs_
15a00     18 F0 07 F1 | 	add	ptra, #24
15a04     4A 00 00 FF 
15a08     80 E4 05 F1 | 	add	objptr, ##38016
15a0c     F2 12 02 FB | 	rdlong	arg01, objptr
15a10     09 FD 01 F6 | 	mov	result2, arg01
15a14     01 FC 65 F0 | 	shl	result2, #1
15a18     09 FD 01 F1 | 	add	result2, arg01
15a1c     02 FC 65 F0 | 	shl	result2, #2
15a20     03 00 00 FF 
15a24     04 E4 85 F1 | 	sub	objptr, ##1540
15a28     F2 FC 01 F1 | 	add	result2, objptr
15a2c     FE 12 02 FB | 	rdlong	arg01, result2
15a30     14 4E 05 F1 | 	add	fp, #20
15a34     A7 12 62 FC | 	wrlong	arg01, fp
15a38     03 00 00 FF 
15a3c     04 E4 05 F1 | 	add	objptr, ##1540
15a40     F2 12 02 FB | 	rdlong	arg01, objptr
15a44     09 27 02 F6 | 	mov	local01, arg01
15a48     01 26 66 F0 | 	shl	local01, #1
15a4c     09 27 02 F1 | 	add	local01, arg01
15a50     02 26 66 F0 | 	shl	local01, #2
15a54     03 00 00 FF 
15a58     04 E4 85 F1 | 	sub	objptr, ##1540
15a5c     F2 26 02 F1 | 	add	local01, objptr
15a60     04 26 06 F1 | 	add	local01, #4
15a64     13 27 02 FB | 	rdlong	local01, local01
15a68     08 4E 85 F1 | 	sub	fp, #8
15a6c     A7 26 62 FC | 	wrlong	local01, fp
15a70     0C 4E 85 F1 | 	sub	fp, #12
15a74     47 00 00 FF 
15a78     7C E4 85 F1 | 	sub	objptr, ##36476
15a7c     98 6F BF FD | 	call	#_pop
15a80     FF 26 02 F6 | 	mov	local01, result3
15a84     A7 FA 61 FC | 	wrlong	result1, fp
15a88     04 4E 05 F1 | 	add	fp, #4
15a8c     A7 FC 61 FC | 	wrlong	result2, fp
15a90     04 4E 05 F1 | 	add	fp, #4
15a94     A7 26 62 FC | 	wrlong	local01, fp
15a98     08 4E 85 F1 | 	sub	fp, #8
15a9c     A7 12 02 F6 | 	mov	arg01, fp
15aa0     58 71 BF FD | 	call	#_converttoint
15aa4     10 4E 05 F1 | 	add	fp, #16
15aa8     A7 FA 61 FC | 	wrlong	result1, fp
15aac                 | ' 
15aac                 | ' numpar=compiledline(lineptr_e).result.uresult
15aac                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15aac                 | ' t1=pop()
15aac                 | ' t=converttoint(t1)
15aac                 | ' if t<1 orelse t>numpar then return
15aac     10 4E 85 F1 | 	sub	fp, #16
15ab0     01 FA 55 F2 | 	cmps	result1, #1 wc
15ab4     58 00 90 CD |  if_b	jmp	#LR__1800
15ab8     10 4E 05 F1 | 	add	fp, #16
15abc     A7 26 02 FB | 	rdlong	local01, fp
15ac0     04 4E 05 F1 | 	add	fp, #4
15ac4     A7 12 02 FB | 	rdlong	arg01, fp
15ac8     14 4E 85 F1 | 	sub	fp, #20
15acc     09 27 5A F2 | 	cmps	local01, arg01 wcz
15ad0     3C 00 90 1D |  if_a	jmp	#LR__1800
15ad4     10 4E 05 F1 | 	add	fp, #16
15ad8     A7 26 02 FB | 	rdlong	local01, fp
15adc     01 26 86 F1 | 	sub	local01, #1
15ae0     04 4E 85 F1 | 	sub	fp, #4
15ae4     A7 12 02 FB | 	rdlong	arg01, fp
15ae8     13 13 02 FD | 	qmul	arg01, local01
15aec     4A 00 00 FF 
15af0     80 E4 05 F1 | 	add	objptr, ##38016
15af4     F2 26 02 FB | 	rdlong	local01, objptr
15af8     0C 4E 85 F1 | 	sub	fp, #12
15afc     18 12 62 FD | 	getqx	arg01
15b00     09 27 02 F1 | 	add	local01, arg01
15b04     F2 26 62 FC | 	wrlong	local01, objptr
15b08     4A 00 00 FF 
15b0c     80 E4 85 F1 | 	sub	objptr, ##38016
15b10                 | LR__1800
15b10     A7 F0 03 F6 | 	mov	ptra, fp
15b14     B2 00 A0 FD | 	call	#popregs_
15b18                 | _do_on_ret
15b18     2D 00 64 FD | 	ret
15b1c                 | 
15b1c                 | ' 
15b1c                 | ' '-------------------- open
15b1c                 | ' 
15b1c                 | ' sub do_open
15b1c                 | _do_open
15b1c     02 4A 05 F6 | 	mov	COUNT_, #2
15b20     A8 00 A0 FD | 	call	#pushregs_
15b24     20 F0 07 F1 | 	add	ptra, #32
15b28     4A 00 00 FF 
15b2c     80 E4 05 F1 | 	add	objptr, ##38016
15b30     F2 16 02 FB | 	rdlong	arg03, objptr
15b34     0B 15 02 F6 | 	mov	arg02, arg03
15b38     01 14 66 F0 | 	shl	arg02, #1
15b3c     0B 15 02 F1 | 	add	arg02, arg03
15b40     02 14 66 F0 | 	shl	arg02, #2
15b44     03 00 00 FF 
15b48     04 E4 85 F1 | 	sub	objptr, ##1540
15b4c     F2 14 02 F1 | 	add	arg02, objptr
15b50     0A 17 02 FB | 	rdlong	arg03, arg02
15b54     10 4E 05 F1 | 	add	fp, #16
15b58     A7 16 62 FC | 	wrlong	arg03, fp
15b5c     10 4E 85 F1 | 	sub	fp, #16
15b60     47 00 00 FF 
15b64     7C E4 85 F1 | 	sub	objptr, ##36476
15b68     AC 6E BF FD | 	call	#_pop
15b6c     FF 16 02 F6 | 	mov	arg03, result3
15b70     A7 FA 61 FC | 	wrlong	result1, fp
15b74     04 4E 05 F1 | 	add	fp, #4
15b78     A7 FC 61 FC | 	wrlong	result2, fp
15b7c     04 4E 05 F1 | 	add	fp, #4
15b80     A7 16 62 FC | 	wrlong	arg03, fp
15b84                 | ' 
15b84                 | ' numpar=compiledline(lineptr_e).result.uresult
15b84                 | ' 
15b84                 | ' t1=pop()
15b84                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15b84     08 4E 85 F1 | 	sub	fp, #8
15b88     2B 16 0E F2 | 	cmp	arg03, #43 wz
15b8c     18 00 90 5D |  if_ne	jmp	#LR__1810
15b90     A7 12 02 FB | 	rdlong	arg01, fp
15b94     F8 6F BF FD | 	call	#_convertstring
15b98     A7 FA 61 FC | 	wrlong	result1, fp
15b9c     08 4E 05 F1 | 	add	fp, #8
15ba0     A7 3E 68 FC | 	wrlong	#31, fp
15ba4     08 4E 85 F1 | 	sub	fp, #8
15ba8                 | LR__1810
15ba8                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15ba8     08 4E 05 F1 | 	add	fp, #8
15bac     A7 16 02 FB | 	rdlong	arg03, fp
15bb0     08 4E 85 F1 | 	sub	fp, #8
15bb4     1F 16 0E F2 | 	cmp	arg03, #31 wz
15bb8     44 00 90 AD |  if_e	jmp	#LR__1811
15bbc     00 12 06 F6 | 	mov	arg01, #0
15bc0     78 3E B1 FD | 	call	#__system___getiolock_0573
15bc4     FD 12 02 F6 | 	mov	arg01, result1
15bc8     48 E1 B0 FD | 	call	#__system___lockmem
15bcc     A1 01 00 FF 
15bd0     0B 14 06 F6 | 	mov	arg02, ##@LR__5762
15bd4     00 12 06 F6 | 	mov	arg01, #0
15bd8     00 16 06 F6 | 	mov	arg03, #0
15bdc     28 EE B0 FD | 	call	#__system___basic_print_string
15be0     00 12 06 F6 | 	mov	arg01, #0
15be4     0A 14 06 F6 | 	mov	arg02, #10
15be8     00 16 06 F6 | 	mov	arg03, #0
15bec     C0 ED B0 FD | 	call	#__system___basic_print_char
15bf0     00 12 06 F6 | 	mov	arg01, #0
15bf4     44 3E B1 FD | 	call	#__system___getiolock_0573
15bf8     FD 00 68 FC | 	wrlong	#0, result1
15bfc     28 02 90 FD | 	jmp	#LR__1822
15c00                 | LR__1811
15c00     A7 16 02 FB | 	rdlong	arg03, fp
15c04     0C 4E 05 F1 | 	add	fp, #12
15c08     A7 16 62 FC | 	wrlong	arg03, fp
15c0c     0C 4E 85 F1 | 	sub	fp, #12
15c10     04 6E BF FD | 	call	#_pop
15c14     FF 16 02 F6 | 	mov	arg03, result3
15c18     A7 FA 61 FC | 	wrlong	result1, fp
15c1c     04 4E 05 F1 | 	add	fp, #4
15c20     A7 FC 61 FC | 	wrlong	result2, fp
15c24     04 4E 05 F1 | 	add	fp, #4
15c28     A7 16 62 FC | 	wrlong	arg03, fp
15c2c                 | ' filename=t1.result.sresult
15c2c                 | ' t1=pop()
15c2c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c2c     08 4E 85 F1 | 	sub	fp, #8
15c30     2B 16 0E F2 | 	cmp	arg03, #43 wz
15c34     18 00 90 5D |  if_ne	jmp	#LR__1812
15c38     A7 12 02 FB | 	rdlong	arg01, fp
15c3c     50 6F BF FD | 	call	#_convertstring
15c40     A7 FA 61 FC | 	wrlong	result1, fp
15c44     08 4E 05 F1 | 	add	fp, #8
15c48     A7 3E 68 FC | 	wrlong	#31, fp
15c4c     08 4E 85 F1 | 	sub	fp, #8
15c50                 | LR__1812
15c50     14 4E 05 F1 | 	add	fp, #20
15c54     A7 00 68 FC | 	wrlong	#0, fp
15c58                 | ' mode=0
15c58                 | ' if t1.result_type=result_string then
15c58     0C 4E 85 F1 | 	sub	fp, #12
15c5c     A7 14 02 FB | 	rdlong	arg02, fp
15c60     08 4E 85 F1 | 	sub	fp, #8
15c64     1F 14 0E F2 | 	cmp	arg02, #31 wz
15c68     64 00 90 5D |  if_ne	jmp	#LR__1813
15c6c                 | '   if t1.result.sresult="read" then mode=1
15c6c     A7 12 02 FB | 	rdlong	arg01, fp
15c70     A1 01 00 FF 
15c74     1D 14 06 F6 | 	mov	arg02, ##@LR__5763
15c78     C0 E0 B0 FD | 	call	#__system___string_cmp
15c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
15c80     14 4E 05 A1 |  if_e	add	fp, #20
15c84     A7 02 68 AC |  if_e	wrlong	#1, fp
15c88     14 4E 85 A1 |  if_e	sub	fp, #20
15c8c                 | '   if t1.result.sresult="write" then mode=2
15c8c     A7 12 02 FB | 	rdlong	arg01, fp
15c90     A1 01 00 FF 
15c94     22 14 06 F6 | 	mov	arg02, ##@LR__5764
15c98     A0 E0 B0 FD | 	call	#__system___string_cmp
15c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
15ca0     14 4E 05 A1 |  if_e	add	fp, #20
15ca4     A7 04 68 AC |  if_e	wrlong	#2, fp
15ca8     14 4E 85 A1 |  if_e	sub	fp, #20
15cac                 | '   if t1.result.sresult="append" then mode=4
15cac     A7 12 02 FB | 	rdlong	arg01, fp
15cb0     A1 01 00 FF 
15cb4     28 14 06 F6 | 	mov	arg02, ##@LR__5765
15cb8     80 E0 B0 FD | 	call	#__system___string_cmp
15cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
15cc0     14 4E 05 A1 |  if_e	add	fp, #20
15cc4     A7 08 68 AC |  if_e	wrlong	#4, fp
15cc8     14 4E 85 A1 |  if_e	sub	fp, #20
15ccc     14 00 90 FD | 	jmp	#LR__1814
15cd0                 | LR__1813
15cd0     A7 12 02 F6 | 	mov	arg01, fp
15cd4     24 6F BF FD | 	call	#_converttoint
15cd8     14 4E 05 F1 | 	add	fp, #20
15cdc     A7 FA 61 FC | 	wrlong	result1, fp
15ce0     14 4E 85 F1 | 	sub	fp, #20
15ce4                 | LR__1814
15ce4     30 6D BF FD | 	call	#_pop
15ce8     FF 16 02 F6 | 	mov	arg03, result3
15cec     A7 FA 61 FC | 	wrlong	result1, fp
15cf0     04 4E 05 F1 | 	add	fp, #4
15cf4     A7 FC 61 FC | 	wrlong	result2, fp
15cf8     04 4E 05 F1 | 	add	fp, #4
15cfc     A7 16 62 FC | 	wrlong	arg03, fp
15d00                 | ' t1=pop()
15d00                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15d00     08 4E 85 F1 | 	sub	fp, #8
15d04     2C 16 0E F2 | 	cmp	arg03, #44 wz
15d08     44 00 90 AD |  if_e	jmp	#LR__1815
15d0c     00 12 06 F6 | 	mov	arg01, #0
15d10     28 3D B1 FD | 	call	#__system___getiolock_0573
15d14     FD 12 02 F6 | 	mov	arg01, result1
15d18     F8 DF B0 FD | 	call	#__system___lockmem
15d1c     A1 01 00 FF 
15d20     2F 14 06 F6 | 	mov	arg02, ##@LR__5766
15d24     00 12 06 F6 | 	mov	arg01, #0
15d28     00 16 06 F6 | 	mov	arg03, #0
15d2c     D8 EC B0 FD | 	call	#__system___basic_print_string
15d30     00 12 06 F6 | 	mov	arg01, #0
15d34     0A 14 06 F6 | 	mov	arg02, #10
15d38     00 16 06 F6 | 	mov	arg03, #0
15d3c     70 EC B0 FD | 	call	#__system___basic_print_char
15d40     00 12 06 F6 | 	mov	arg01, #0
15d44     F4 3C B1 FD | 	call	#__system___getiolock_0573
15d48     FD 00 68 FC | 	wrlong	#0, result1
15d4c     D8 00 90 FD | 	jmp	#LR__1822
15d50                 | LR__1815
15d50     A7 26 02 FB | 	rdlong	local01, fp
15d54     18 4E 05 F1 | 	add	fp, #24
15d58     A7 26 62 FC | 	wrlong	local01, fp
15d5c                 | ' channel  = t1.result.iresult
15d5c                 | ' select case  mode
15d5c     04 4E 85 F1 | 	sub	fp, #4
15d60     A7 28 02 FB | 	rdlong	local02, fp
15d64     14 4E 85 F1 | 	sub	fp, #20
15d68     01 28 86 F1 | 	sub	local02, #1
15d6c     04 28 26 F3 | 	fle	local02, #4
15d70     30 28 62 FD | 	jmprel	local02
15d74                 | LR__1816
15d74     10 00 90 FD | 	jmp	#LR__1817
15d78     2C 00 90 FD | 	jmp	#LR__1818
15d7c     68 00 90 FD | 	jmp	#LR__1820
15d80     44 00 90 FD | 	jmp	#LR__1819
15d84     60 00 90 FD | 	jmp	#LR__1820
15d88                 | LR__1817
15d88     18 4E 05 F1 | 	add	fp, #24
15d8c     A7 12 02 FB | 	rdlong	arg01, fp
15d90     0C 4E 85 F1 | 	sub	fp, #12
15d94     A7 14 02 FB | 	rdlong	arg02, fp
15d98     0C 4E 85 F1 | 	sub	fp, #12
15d9c     00 16 06 F6 | 	mov	arg03, #0
15da0     74 EB B0 FD | 	call	#__system___basic_open_string
15da4     80 00 90 FD | 	jmp	#LR__1821
15da8                 | LR__1818
15da8     18 4E 05 F1 | 	add	fp, #24
15dac     A7 12 02 FB | 	rdlong	arg01, fp
15db0     0C 4E 85 F1 | 	sub	fp, #12
15db4     A7 14 02 FB | 	rdlong	arg02, fp
15db8     0C 4E 85 F1 | 	sub	fp, #12
15dbc     0D 16 06 F6 | 	mov	arg03, #13
15dc0     54 EB B0 FD | 	call	#__system___basic_open_string
15dc4     60 00 90 FD | 	jmp	#LR__1821
15dc8                 | LR__1819
15dc8     18 4E 05 F1 | 	add	fp, #24
15dcc     A7 12 02 FB | 	rdlong	arg01, fp
15dd0     0C 4E 85 F1 | 	sub	fp, #12
15dd4     A7 14 02 FB | 	rdlong	arg02, fp
15dd8     0C 4E 85 F1 | 	sub	fp, #12
15ddc     25 16 06 F6 | 	mov	arg03, #37
15de0     34 EB B0 FD | 	call	#__system___basic_open_string
15de4     40 00 90 FD | 	jmp	#LR__1821
15de8                 | LR__1820
15de8     00 12 06 F6 | 	mov	arg01, #0
15dec     4C 3C B1 FD | 	call	#__system___getiolock_0573
15df0     FD 12 02 F6 | 	mov	arg01, result1
15df4     1C DF B0 FD | 	call	#__system___lockmem
15df8     A1 01 00 FF 
15dfc     41 14 06 F6 | 	mov	arg02, ##@LR__5767
15e00     00 12 06 F6 | 	mov	arg01, #0
15e04     00 16 06 F6 | 	mov	arg03, #0
15e08     FC EB B0 FD | 	call	#__system___basic_print_string
15e0c     00 12 06 F6 | 	mov	arg01, #0
15e10     0A 14 06 F6 | 	mov	arg02, #10
15e14     00 16 06 F6 | 	mov	arg03, #0
15e18     94 EB B0 FD | 	call	#__system___basic_print_char
15e1c     00 12 06 F6 | 	mov	arg01, #0
15e20     18 3C B1 FD | 	call	#__system___getiolock_0573
15e24     FD 00 68 FC | 	wrlong	#0, result1
15e28                 | LR__1821
15e28                 | LR__1822
15e28     A7 F0 03 F6 | 	mov	ptra, fp
15e2c     B2 00 A0 FD | 	call	#popregs_
15e30                 | _do_open_ret
15e30     2D 00 64 FD | 	ret
15e34                 | 
15e34                 | ' 
15e34                 | ' '-------------------- paper
15e34                 | ' 
15e34                 | ' sub do_paper
15e34                 | _do_paper
15e34     03 4A 05 F6 | 	mov	COUNT_, #3
15e38     A8 00 A0 FD | 	call	#pushregs_
15e3c     D8 6B BF FD | 	call	#_pop
15e40     FD 26 02 F6 | 	mov	local01, result1
15e44     FE 28 02 F6 | 	mov	local02, result2
15e48     FF 2A 02 F6 | 	mov	local03, result3
15e4c                 | ' t1=pop() 
15e4c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15e4c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15e50     10 00 90 5D |  if_ne	jmp	#LR__1830
15e54     13 13 02 F6 | 	mov	arg01, local01
15e58     00 14 06 F6 | 	mov	arg02, #0
15e5c     F4 11 B1 FD | 	call	#__system___float_tointeger
15e60     FD 26 02 F6 | 	mov	local01, result1
15e64                 | LR__1830
15e64                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15e64     1F 2A 0E F2 | 	cmp	local03, #31 wz
15e68     18 00 90 5D |  if_ne	jmp	#LR__1831
15e6c     13 13 02 F6 | 	mov	arg01, local01
15e70     24 15 B1 FD | 	call	#__system____builtin_atof
15e74     FD 12 02 F6 | 	mov	arg01, result1
15e78     00 14 06 F6 | 	mov	arg02, #0
15e7c     D4 11 B1 FD | 	call	#__system___float_tointeger
15e80     FD 26 02 F6 | 	mov	local01, result1
15e84                 | LR__1831
15e84     37 00 00 FF 
15e88     38 E4 05 F1 | 	add	objptr, ##28216
15e8c     F2 26 62 FC | 	wrlong	local01, objptr
15e90     04 E4 05 F1 | 	add	objptr, #4
15e94     F2 12 02 FB | 	rdlong	arg01, objptr
15e98                 | ' 
15e98                 | ' write_color:=ff
15e98     36 00 00 FF 
15e9c     FB E5 85 F1 | 	sub	objptr, ##28155
15ea0     F2 12 62 FC | 	wrlong	arg01, objptr
15ea4                 | ' write_background:=bb
15ea4     04 E4 05 F1 | 	add	objptr, #4
15ea8     F2 26 62 FC | 	wrlong	local01, objptr
15eac     45 E4 85 F1 | 	sub	objptr, #69
15eb0     A7 F0 03 F6 | 	mov	ptra, fp
15eb4     B2 00 A0 FD | 	call	#popregs_
15eb8                 | _do_paper_ret
15eb8     2D 00 64 FD | 	ret
15ebc                 | 
15ebc                 | ' 
15ebc                 | ' '-------------------- peek
15ebc                 | ' 
15ebc                 | ' sub do_peek
15ebc                 | _do_peek
15ebc     00 4A 05 F6 | 	mov	COUNT_, #0
15ec0     A8 00 A0 FD | 	call	#pushregs_
15ec4     14 F0 07 F1 | 	add	ptra, #20
15ec8     4C 6B BF FD | 	call	#_pop
15ecc     A7 FA 61 FC | 	wrlong	result1, fp
15ed0     04 4E 05 F1 | 	add	fp, #4
15ed4     A7 FC 61 FC | 	wrlong	result2, fp
15ed8     04 4E 05 F1 | 	add	fp, #4
15edc     A7 FE 61 FC | 	wrlong	result3, fp
15ee0     08 4E 85 F1 | 	sub	fp, #8
15ee4     A7 12 02 F6 | 	mov	arg01, fp
15ee8     10 6D BF FD | 	call	#_converttoint
15eec     0C 4E 05 F1 | 	add	fp, #12
15ef0     A7 FA 61 FC | 	wrlong	result1, fp
15ef4                 | ' 
15ef4                 | ' t1=pop()
15ef4                 | ' a=converttoint(t1)
15ef4                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
15ef4     0C 4E 85 F1 | 	sub	fp, #12
15ef8     00 04 00 FF 
15efc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15f00     1C 00 90 3D |  if_ae	jmp	#LR__1840
15f04     0C 4E 05 F1 | 	add	fp, #12
15f08     A7 12 02 FB | 	rdlong	arg01, fp
15f0c     09 FB C1 FA | 	rdbyte	result1, arg01
15f10     04 4E 05 F1 | 	add	fp, #4
15f14     A7 FA 61 FC | 	wrlong	result1, fp
15f18     10 4E 85 F1 | 	sub	fp, #16
15f1c     20 00 90 FD | 	jmp	#LR__1841
15f20                 | LR__1840
15f20     0C 4E 05 F1 | 	add	fp, #12
15f24     A7 12 02 FB | 	rdlong	arg01, fp
15f28     0C 4E 85 F1 | 	sub	fp, #12
15f2c     B8 A6 B0 FD | 	call	#_pspeek
15f30     FD FA E1 F8 | 	getbyte	result1, result1, #0
15f34     10 4E 05 F1 | 	add	fp, #16
15f38     A7 FA 61 FC | 	wrlong	result1, fp
15f3c     10 4E 85 F1 | 	sub	fp, #16
15f40                 | LR__1841
15f40     08 4E 05 F1 | 	add	fp, #8
15f44     A7 3A 68 FC | 	wrlong	#29, fp
15f48     08 4E 05 F1 | 	add	fp, #8
15f4c     A7 12 02 FB | 	rdlong	arg01, fp
15f50     10 4E 85 F1 | 	sub	fp, #16
15f54     A7 12 62 FC | 	wrlong	arg01, fp
15f58     A7 12 02 F6 | 	mov	arg01, fp
15f5c     50 6B BF FD | 	call	#_push
15f60     A7 F0 03 F6 | 	mov	ptra, fp
15f64     B2 00 A0 FD | 	call	#popregs_
15f68                 | _do_peek_ret
15f68     2D 00 64 FD | 	ret
15f6c                 | 
15f6c                 | ' 
15f6c                 | ' '-------------------- pinfloat
15f6c                 | ' 
15f6c                 | ' sub do_pinfloat
15f6c                 | _do_pinfloat
15f6c     00 4A 05 F6 | 	mov	COUNT_, #0
15f70     A8 00 A0 FD | 	call	#pushregs_
15f74     0C F0 07 F1 | 	add	ptra, #12
15f78     9C 6A BF FD | 	call	#_pop
15f7c     A7 FA 61 FC | 	wrlong	result1, fp
15f80     04 4E 05 F1 | 	add	fp, #4
15f84     A7 FC 61 FC | 	wrlong	result2, fp
15f88     04 4E 05 F1 | 	add	fp, #4
15f8c     A7 FE 61 FC | 	wrlong	result3, fp
15f90     08 4E 85 F1 | 	sub	fp, #8
15f94     A7 12 02 F6 | 	mov	arg01, fp
15f98     60 6C BF FD | 	call	#_converttoint
15f9c     50 FA 61 FD | 	fltl	result1
15fa0     A7 F0 03 F6 | 	mov	ptra, fp
15fa4     B2 00 A0 FD | 	call	#popregs_
15fa8                 | _do_pinfloat_ret
15fa8     2D 00 64 FD | 	ret
15fac                 | 
15fac                 | ' 
15fac                 | ' '-------------------- pinhi
15fac                 | ' 
15fac                 | ' sub do_pinhi
15fac                 | _do_pinhi
15fac     00 4A 05 F6 | 	mov	COUNT_, #0
15fb0     A8 00 A0 FD | 	call	#pushregs_
15fb4     0C F0 07 F1 | 	add	ptra, #12
15fb8     5C 6A BF FD | 	call	#_pop
15fbc     A7 FA 61 FC | 	wrlong	result1, fp
15fc0     04 4E 05 F1 | 	add	fp, #4
15fc4     A7 FC 61 FC | 	wrlong	result2, fp
15fc8     04 4E 05 F1 | 	add	fp, #4
15fcc     A7 FE 61 FC | 	wrlong	result3, fp
15fd0     08 4E 85 F1 | 	sub	fp, #8
15fd4     A7 12 02 F6 | 	mov	arg01, fp
15fd8     20 6C BF FD | 	call	#_converttoint
15fdc     59 FA 61 FD | 	drvh	result1
15fe0     A7 F0 03 F6 | 	mov	ptra, fp
15fe4     B2 00 A0 FD | 	call	#popregs_
15fe8                 | _do_pinhi_ret
15fe8     2D 00 64 FD | 	ret
15fec                 | 
15fec                 | ' 
15fec                 | ' '-------------------- pinlo
15fec                 | ' 
15fec                 | ' sub do_pinlo
15fec                 | _do_pinlo
15fec     00 4A 05 F6 | 	mov	COUNT_, #0
15ff0     A8 00 A0 FD | 	call	#pushregs_
15ff4     0C F0 07 F1 | 	add	ptra, #12
15ff8     1C 6A BF FD | 	call	#_pop
15ffc     A7 FA 61 FC | 	wrlong	result1, fp
16000     04 4E 05 F1 | 	add	fp, #4
16004     A7 FC 61 FC | 	wrlong	result2, fp
16008     04 4E 05 F1 | 	add	fp, #4
1600c     A7 FE 61 FC | 	wrlong	result3, fp
16010     08 4E 85 F1 | 	sub	fp, #8
16014     A7 12 02 F6 | 	mov	arg01, fp
16018     E0 6B BF FD | 	call	#_converttoint
1601c     58 FA 61 FD | 	drvl	result1
16020     A7 F0 03 F6 | 	mov	ptra, fp
16024     B2 00 A0 FD | 	call	#popregs_
16028                 | _do_pinlo_ret
16028     2D 00 64 FD | 	ret
1602c                 | 
1602c                 | ' 
1602c                 | ' '-------------------- pinread
1602c                 | ' 
1602c                 | ' sub do_pinread
1602c                 | _do_pinread
1602c     00 4A 05 F6 | 	mov	COUNT_, #0
16030     A8 00 A0 FD | 	call	#pushregs_
16034     0C F0 07 F1 | 	add	ptra, #12
16038     DC 69 BF FD | 	call	#_pop
1603c     A7 FA 61 FC | 	wrlong	result1, fp
16040     04 4E 05 F1 | 	add	fp, #4
16044     A7 FC 61 FC | 	wrlong	result2, fp
16048     04 4E 05 F1 | 	add	fp, #4
1604c     A7 FE 61 FC | 	wrlong	result3, fp
16050     08 4E 85 F1 | 	sub	fp, #8
16054     A7 12 02 F6 | 	mov	arg01, fp
16058     A0 6B BF FD | 	call	#_converttoint
1605c     FD 12 02 F6 | 	mov	arg01, result1
16060     20 12 CE F7 | 	test	arg01, #32 wz
16064     FF FB 01 56 |  if_ne	mov	result1, inb
16068     FE FB 01 A6 |  if_e	mov	result1, ina
1606c     09 FB 41 F0 | 	shr	result1, arg01
16070     06 12 46 F0 | 	shr	arg01, #6
16074     09 FB 41 F7 | 	zerox	result1, arg01
16078     52 00 00 FF 
1607c     20 E4 05 F1 | 	add	objptr, ##42016
16080     F2 FA 61 FC | 	wrlong	result1, objptr
16084     52 00 00 FF 
16088     20 E4 85 F1 | 	sub	objptr, ##42016
1608c     08 4E 05 F1 | 	add	fp, #8
16090     A7 3A 68 FC | 	wrlong	#29, fp
16094     08 4E 85 F1 | 	sub	fp, #8
16098     A7 08 68 FC | 	wrlong	#4, fp
1609c     A7 12 02 F6 | 	mov	arg01, fp
160a0     0C 6A BF FD | 	call	#_push
160a4     A7 F0 03 F6 | 	mov	ptra, fp
160a8     B2 00 A0 FD | 	call	#popregs_
160ac                 | _do_pinread_ret
160ac     2D 00 64 FD | 	ret
160b0                 | 
160b0                 | ' 
160b0                 | ' '-------------------- pinstart
160b0                 | ' 
160b0                 | ' sub do_pinstart
160b0                 | _do_pinstart
160b0     03 4A 05 F6 | 	mov	COUNT_, #3
160b4     A8 00 A0 FD | 	call	#pushregs_
160b8     30 F0 07 F1 | 	add	ptra, #48
160bc     58 69 BF FD | 	call	#_pop
160c0     FD 16 02 F6 | 	mov	arg03, result1
160c4     FE 14 02 F6 | 	mov	arg02, result2
160c8     FF 18 02 F6 | 	mov	arg04, result3
160cc     A7 16 62 FC | 	wrlong	arg03, fp
160d0     04 4E 05 F1 | 	add	fp, #4
160d4     A7 14 62 FC | 	wrlong	arg02, fp
160d8     04 4E 05 F1 | 	add	fp, #4
160dc     A7 18 62 FC | 	wrlong	arg04, fp
160e0     08 4E 85 F1 | 	sub	fp, #8
160e4     30 69 BF FD | 	call	#_pop
160e8     FD 16 02 F6 | 	mov	arg03, result1
160ec     FE 14 02 F6 | 	mov	arg02, result2
160f0     FF 18 02 F6 | 	mov	arg04, result3
160f4     0C 4E 05 F1 | 	add	fp, #12
160f8     A7 16 62 FC | 	wrlong	arg03, fp
160fc     04 4E 05 F1 | 	add	fp, #4
16100     A7 14 62 FC | 	wrlong	arg02, fp
16104     04 4E 05 F1 | 	add	fp, #4
16108     A7 18 62 FC | 	wrlong	arg04, fp
1610c     14 4E 85 F1 | 	sub	fp, #20
16110     04 69 BF FD | 	call	#_pop
16114     FD 16 02 F6 | 	mov	arg03, result1
16118     FE 14 02 F6 | 	mov	arg02, result2
1611c     FF 18 02 F6 | 	mov	arg04, result3
16120     18 4E 05 F1 | 	add	fp, #24
16124     A7 16 62 FC | 	wrlong	arg03, fp
16128     04 4E 05 F1 | 	add	fp, #4
1612c     A7 14 62 FC | 	wrlong	arg02, fp
16130     04 4E 05 F1 | 	add	fp, #4
16134     A7 18 62 FC | 	wrlong	arg04, fp
16138     20 4E 85 F1 | 	sub	fp, #32
1613c     D8 68 BF FD | 	call	#_pop
16140     FF 16 02 F6 | 	mov	arg03, result3
16144     24 4E 05 F1 | 	add	fp, #36
16148     A7 FA 61 FC | 	wrlong	result1, fp
1614c     04 4E 05 F1 | 	add	fp, #4
16150     A7 FC 61 FC | 	wrlong	result2, fp
16154     04 4E 05 F1 | 	add	fp, #4
16158     A7 16 62 FC | 	wrlong	arg03, fp
1615c     08 4E 85 F1 | 	sub	fp, #8
16160     A7 12 02 F6 | 	mov	arg01, fp
16164     24 4E 85 F1 | 	sub	fp, #36
16168     90 6A BF FD | 	call	#_converttoint
1616c     FD 26 02 F6 | 	mov	local01, result1
16170     18 4E 05 F1 | 	add	fp, #24
16174     A7 12 02 F6 | 	mov	arg01, fp
16178     18 4E 85 F1 | 	sub	fp, #24
1617c     7C 6A BF FD | 	call	#_converttoint
16180     FD 28 02 F6 | 	mov	local02, result1
16184     0C 4E 05 F1 | 	add	fp, #12
16188     A7 12 02 F6 | 	mov	arg01, fp
1618c     0C 4E 85 F1 | 	sub	fp, #12
16190     68 6A BF FD | 	call	#_converttoint
16194     FD 2A 02 F6 | 	mov	local03, result1
16198     A7 12 02 F6 | 	mov	arg01, fp
1619c     5C 6A BF FD | 	call	#_converttoint
161a0     40 26 62 FD | 	dirl	local01
161a4     13 29 02 FC | 	wrpin	local02, local01
161a8     13 2B 12 FC | 	wxpin	local03, local01
161ac     13 FB 21 FC | 	wypin	result1, local01
161b0     41 26 62 FD | 	dirh	local01
161b4     A7 F0 03 F6 | 	mov	ptra, fp
161b8     B2 00 A0 FD | 	call	#popregs_
161bc                 | _do_pinstart_ret
161bc     2D 00 64 FD | 	ret
161c0                 | 
161c0                 | ' 
161c0                 | ' '-------------------- pintoggle
161c0                 | ' 
161c0                 | ' sub do_pintoggle
161c0                 | _do_pintoggle
161c0     00 4A 05 F6 | 	mov	COUNT_, #0
161c4     A8 00 A0 FD | 	call	#pushregs_
161c8     0C F0 07 F1 | 	add	ptra, #12
161cc     48 68 BF FD | 	call	#_pop
161d0     A7 FA 61 FC | 	wrlong	result1, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 FC 61 FC | 	wrlong	result2, fp
161dc     04 4E 05 F1 | 	add	fp, #4
161e0     A7 FE 61 FC | 	wrlong	result3, fp
161e4     08 4E 85 F1 | 	sub	fp, #8
161e8     A7 12 02 F6 | 	mov	arg01, fp
161ec     0C 6A BF FD | 	call	#_converttoint
161f0     5F FA 61 FD | 	drvnot	result1
161f4     A7 F0 03 F6 | 	mov	ptra, fp
161f8     B2 00 A0 FD | 	call	#popregs_
161fc                 | _do_pintoggle_ret
161fc     2D 00 64 FD | 	ret
16200                 | 
16200                 | ' 
16200                 | ' '-------------------- pinwrite
16200                 | ' 
16200                 | ' sub do_pinwrite
16200                 | _do_pinwrite
16200     01 4A 05 F6 | 	mov	COUNT_, #1
16204     A8 00 A0 FD | 	call	#pushregs_
16208     18 F0 07 F1 | 	add	ptra, #24
1620c     08 68 BF FD | 	call	#_pop
16210     FD 14 02 F6 | 	mov	arg02, result1
16214     FE 12 02 F6 | 	mov	arg01, result2
16218     FF 26 02 F6 | 	mov	local01, result3
1621c     A7 14 62 FC | 	wrlong	arg02, fp
16220     04 4E 05 F1 | 	add	fp, #4
16224     A7 12 62 FC | 	wrlong	arg01, fp
16228     04 4E 05 F1 | 	add	fp, #4
1622c     A7 26 62 FC | 	wrlong	local01, fp
16230     08 4E 85 F1 | 	sub	fp, #8
16234     E0 67 BF FD | 	call	#_pop
16238     FF 26 02 F6 | 	mov	local01, result3
1623c     0C 4E 05 F1 | 	add	fp, #12
16240     A7 FA 61 FC | 	wrlong	result1, fp
16244     04 4E 05 F1 | 	add	fp, #4
16248     A7 FC 61 FC | 	wrlong	result2, fp
1624c     04 4E 05 F1 | 	add	fp, #4
16250     A7 26 62 FC | 	wrlong	local01, fp
16254     08 4E 85 F1 | 	sub	fp, #8
16258     A7 12 02 F6 | 	mov	arg01, fp
1625c     0C 4E 85 F1 | 	sub	fp, #12
16260     98 69 BF FD | 	call	#_converttoint
16264     FD 26 02 F6 | 	mov	local01, result1
16268     A7 12 02 F6 | 	mov	arg01, fp
1626c     8C 69 BF FD | 	call	#_converttoint
16270     FD 14 02 F6 | 	mov	arg02, result1
16274     13 13 02 F6 | 	mov	arg01, local01
16278     4C DC B0 FD | 	call	#__system___pinwrite
1627c     A7 F0 03 F6 | 	mov	ptra, fp
16280     B2 00 A0 FD | 	call	#popregs_
16284                 | _do_pinwrite_ret
16284     2D 00 64 FD | 	ret
16288                 | 
16288                 | ' 
16288                 | ' '-------------------- play
16288                 | ' 
16288                 | ' sub do_play
16288                 | _do_play
16288     08 4A 05 F6 | 	mov	COUNT_, #8
1628c     A8 00 A0 FD | 	call	#pushregs_
16290     7C F0 07 F1 | 	add	ptra, #124
16294     68 4E 05 F1 | 	add	fp, #104
16298     77 CC A1 FF 
1629c     A7 7C 6B FC | 	wrlong	##1134096318, fp
162a0                 | ' speed_coeff=305.873
162a0                 | ' 
162a0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
162a0     64 4E 85 F1 | 	sub	fp, #100
162a4     A7 00 68 FC | 	wrlong	#0, fp
162a8     97 18 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
162ac                 | LR__1850
162ac     A7 16 02 FB | 	rdlong	arg03, fp
162b0     02 16 66 F0 | 	shl	arg03, #2
162b4     34 4E 05 F1 | 	add	fp, #52
162b8     A7 16 02 F1 | 	add	arg03, fp
162bc     00 00 E0 FF 
162c0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
162c4     34 4E 85 F1 | 	sub	fp, #52
162c8     A7 26 02 FB | 	rdlong	local01, fp
162cc     01 26 06 F1 | 	add	local01, #1
162d0     A7 26 62 FC | 	wrlong	local01, fp
162d4     09 26 56 F2 | 	cmps	local01, #9 wc
162d8     D0 FF 9F CD |  if_b	jmp	#LR__1850
162dc                 | LR__1851
162dc     04 4E 85 F1 | 	sub	fp, #4
162e0     4A 00 00 FF 
162e4     80 E4 05 F1 | 	add	objptr, ##38016
162e8     F2 28 02 FB | 	rdlong	local02, objptr
162ec     14 2B 02 F6 | 	mov	local03, local02
162f0     01 2A 66 F0 | 	shl	local03, #1
162f4     14 2B 02 F1 | 	add	local03, local02
162f8     02 2A 66 F0 | 	shl	local03, #2
162fc     03 00 00 FF 
16300     04 E4 85 F1 | 	sub	objptr, ##1540
16304     F2 2A 02 F1 | 	add	local03, objptr
16308     15 2D 02 FB | 	rdlong	local04, local03
1630c     A7 2C 62 FC | 	wrlong	local04, fp
16310                 | ' numpar=compiledline(lineptr_e).result.uresult
16310                 | ' for i=numpar to 1 step -1 
16310     04 4E 05 F1 | 	add	fp, #4
16314     A7 2C 62 FC | 	wrlong	local04, fp
16318     04 4E 85 F1 | 	sub	fp, #4
1631c     47 00 00 FF 
16320     7C E4 85 F1 | 	sub	objptr, ##36476
16324                 | LR__1852
16324     F0 66 BF FD | 	call	#_pop
16328     5C 4E 05 F1 | 	add	fp, #92
1632c     A7 FA 61 FC | 	wrlong	result1, fp
16330     04 4E 05 F1 | 	add	fp, #4
16334     A7 FC 61 FC | 	wrlong	result2, fp
16338     04 4E 05 F1 | 	add	fp, #4
1633c     A7 FE 61 FC | 	wrlong	result3, fp
16340     60 4E 85 F1 | 	sub	fp, #96
16344     A7 2A 02 FB | 	rdlong	local03, fp
16348     01 2A 86 F1 | 	sub	local03, #1
1634c     02 2A 66 F0 | 	shl	local03, #2
16350     34 4E 05 F1 | 	add	fp, #52
16354     A7 2A 02 F1 | 	add	local03, fp
16358     24 4E 05 F1 | 	add	fp, #36
1635c     A7 2E 02 F6 | 	mov	local05, fp
16360     17 13 02 F6 | 	mov	arg01, local05
16364     5C 4E 85 F1 | 	sub	fp, #92
16368     4C 69 BF FD | 	call	#_converttofloat
1636c     15 FB 61 FC | 	wrlong	result1, local03
16370     04 4E 05 F1 | 	add	fp, #4
16374     A7 26 02 FB | 	rdlong	local01, fp
16378     01 26 86 F1 | 	sub	local01, #1
1637c     A7 26 62 FC | 	wrlong	local01, fp
16380     04 4E 85 F1 | 	sub	fp, #4
16384     01 26 56 F2 | 	cmps	local01, #1 wc
16388     98 FF 9F 3D |  if_ae	jmp	#LR__1852
1638c                 | ' 
1638c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
1638c     38 4E 05 F1 | 	add	fp, #56
16390     A7 12 02 FB | 	rdlong	arg01, fp
16394     38 4E 85 F1 | 	sub	fp, #56
16398     00 14 06 F6 | 	mov	arg02, #0
1639c     01 16 06 F6 | 	mov	arg03, #1
163a0     1C 0C B1 FD | 	call	#__system___float_cmp
163a4     00 FA 55 F2 | 	cmps	result1, #0 wc
163a8     0C 4E 05 C1 |  if_b	add	fp, #12
163ac     A7 00 68 CC |  if_b	wrlong	#0, fp
163b0     0C 4E 85 C1 |  if_b	sub	fp, #12
163b4     2C 00 90 CD |  if_b	jmp	#LR__1853
163b8     38 4E 05 F1 | 	add	fp, #56
163bc     A7 12 02 FB | 	rdlong	arg01, fp
163c0     38 4E 85 F1 | 	sub	fp, #56
163c4     01 14 06 F6 | 	mov	arg02, #1
163c8     88 0C B1 FD | 	call	#__system___float_tointeger
163cc     FD 26 52 F6 | 	abs	local01, result1 wc
163d0     07 26 06 F5 | 	and	local01, #7
163d4     13 27 82 F6 | 	negc	local01, local01
163d8     0C 4E 05 F1 | 	add	fp, #12
163dc     A7 26 62 FC | 	wrlong	local01, fp
163e0     0C 4E 85 F1 | 	sub	fp, #12
163e4                 | LR__1853
163e4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
163e4     3C 4E 05 F1 | 	add	fp, #60
163e8     A7 12 02 FB | 	rdlong	arg01, fp
163ec     3C 4E 85 F1 | 	sub	fp, #60
163f0     00 14 06 F6 | 	mov	arg02, #0
163f4     01 16 06 F6 | 	mov	arg03, #1
163f8     C4 0B B1 FD | 	call	#__system___float_cmp
163fc     00 FA 55 F2 | 	cmps	result1, #0 wc
16400     40 00 90 3D |  if_ae	jmp	#LR__1854
16404     0C 4E 05 F1 | 	add	fp, #12
16408     A7 28 02 FB | 	rdlong	local02, fp
1640c     14 2B 02 F6 | 	mov	local03, local02
16410     01 2A 66 F0 | 	shl	local03, #1
16414     14 2B 02 F1 | 	add	local03, local02
16418     03 2A 66 F0 | 	shl	local03, #3
1641c     14 00 00 FF 
16420     38 E5 05 F1 | 	add	objptr, ##10552
16424     F2 2A 02 F1 | 	add	local03, objptr
16428     15 31 02 FB | 	rdlong	local06, local03
1642c     60 4E 05 F1 | 	add	fp, #96
16430     A7 30 62 FC | 	wrlong	local06, fp
16434     6C 4E 85 F1 | 	sub	fp, #108
16438     14 00 00 FF 
1643c     38 E5 85 F1 | 	sub	objptr, ##10552
16440     44 00 90 FD | 	jmp	#LR__1855
16444                 | LR__1854
16444     3C 4E 05 F1 | 	add	fp, #60
16448     A7 2C 02 FB | 	rdlong	local04, fp
1644c     30 4E 05 F1 | 	add	fp, #48
16450     A7 2C 62 FC | 	wrlong	local04, fp
16454     60 4E 85 F1 | 	sub	fp, #96
16458     A7 28 02 FB | 	rdlong	local02, fp
1645c     14 2B 02 F6 | 	mov	local03, local02
16460     01 2A 66 F0 | 	shl	local03, #1
16464     14 2B 02 F1 | 	add	local03, local02
16468     03 2A 66 F0 | 	shl	local03, #3
1646c     14 00 00 FF 
16470     38 E5 05 F1 | 	add	objptr, ##10552
16474     F2 2A 02 F1 | 	add	local03, objptr
16478     0C 4E 85 F1 | 	sub	fp, #12
1647c     15 2D 62 FC | 	wrlong	local04, local03
16480     14 00 00 FF 
16484     38 E5 85 F1 | 	sub	objptr, ##10552
16488                 | LR__1855
16488                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
16488     40 4E 05 F1 | 	add	fp, #64
1648c     A7 12 02 FB | 	rdlong	arg01, fp
16490     40 4E 85 F1 | 	sub	fp, #64
16494     00 14 06 F6 | 	mov	arg02, #0
16498     01 16 06 F6 | 	mov	arg03, #1
1649c     20 0B B1 FD | 	call	#__system___float_cmp
164a0     00 FA 55 F2 | 	cmps	result1, #0 wc
164a4     24 00 90 CD |  if_b	jmp	#LR__1856
164a8     40 4E 05 F1 | 	add	fp, #64
164ac     A7 12 02 FB | 	rdlong	arg01, fp
164b0     40 4E 85 F1 | 	sub	fp, #64
164b4     20 0E 23 FF 
164b8     00 14 06 F6 | 	mov	arg02, ##1176256512
164bc     01 16 66 F6 | 	neg	arg03, #1
164c0     FC 0A B1 FD | 	call	#__system___float_cmp
164c4     01 FA 55 F2 | 	cmps	result1, #1 wc
164c8     48 00 90 CD |  if_b	jmp	#LR__1857
164cc                 | LR__1856
164cc     0C 4E 05 F1 | 	add	fp, #12
164d0     A7 2A 02 FB | 	rdlong	local03, fp
164d4     15 33 02 F6 | 	mov	local07, local03
164d8     01 32 66 F0 | 	shl	local07, #1
164dc     15 33 02 F1 | 	add	local07, local03
164e0     03 32 66 F0 | 	shl	local07, #3
164e4     14 00 00 FF 
164e8     38 E5 05 F1 | 	add	objptr, ##10552
164ec     F2 32 02 F1 | 	add	local07, objptr
164f0     06 32 06 F1 | 	add	local07, #6
164f4     19 2F E2 FA | 	rdword	local05, local07
164f8     17 2D 32 F9 | 	getword	local04, local05, #0
164fc     1C 4E 05 F1 | 	add	fp, #28
16500     A7 2C 62 FC | 	wrlong	local04, fp
16504     28 4E 85 F1 | 	sub	fp, #40
16508     14 00 00 FF 
1650c     38 E5 85 F1 | 	sub	objptr, ##10552
16510     54 00 90 FD | 	jmp	#LR__1858
16514                 | LR__1857
16514     40 4E 05 F1 | 	add	fp, #64
16518     A7 12 02 FB | 	rdlong	arg01, fp
1651c     40 4E 85 F1 | 	sub	fp, #64
16520     01 14 06 F6 | 	mov	arg02, #1
16524     2C 0B B1 FD | 	call	#__system___float_tointeger
16528     28 4E 05 F1 | 	add	fp, #40
1652c     A7 FA 61 FC | 	wrlong	result1, fp
16530     1C 4E 85 F1 | 	sub	fp, #28
16534     A7 28 02 FB | 	rdlong	local02, fp
16538     14 2B 02 F6 | 	mov	local03, local02
1653c     01 2A 66 F0 | 	shl	local03, #1
16540     14 2B 02 F1 | 	add	local03, local02
16544     03 2A 66 F0 | 	shl	local03, #3
16548     14 00 00 FF 
1654c     38 E5 05 F1 | 	add	objptr, ##10552
16550     F2 2A 02 F1 | 	add	local03, objptr
16554     0C 4E 85 F1 | 	sub	fp, #12
16558     06 2A 06 F1 | 	add	local03, #6
1655c     15 FB 51 FC | 	wrword	result1, local03
16560     14 00 00 FF 
16564     38 E5 85 F1 | 	sub	objptr, ##10552
16568                 | LR__1858
16568                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
16568     44 4E 05 F1 | 	add	fp, #68
1656c     A7 12 02 FB | 	rdlong	arg01, fp
16570     44 4E 85 F1 | 	sub	fp, #68
16574     00 14 06 F6 | 	mov	arg02, #0
16578     01 16 06 F6 | 	mov	arg03, #1
1657c     40 0A B1 FD | 	call	#__system___float_cmp
16580     00 FA 55 F2 | 	cmps	result1, #0 wc
16584     24 00 90 CD |  if_b	jmp	#LR__1859
16588     44 4E 05 F1 | 	add	fp, #68
1658c     A7 12 02 FB | 	rdlong	arg01, fp
16590     44 4E 85 F1 | 	sub	fp, #68
16594     89 C1 20 FF 
16598     6F 14 06 F6 | 	mov	arg02, ##1099108975
1659c     01 16 66 F6 | 	neg	arg03, #1
165a0     1C 0A B1 FD | 	call	#__system___float_cmp
165a4     01 FA 55 F2 | 	cmps	result1, #1 wc
165a8     44 00 90 CD |  if_b	jmp	#LR__1860
165ac                 | LR__1859
165ac     0C 4E 05 F1 | 	add	fp, #12
165b0     A7 28 02 FB | 	rdlong	local02, fp
165b4     14 2B 02 F6 | 	mov	local03, local02
165b8     01 2A 66 F0 | 	shl	local03, #1
165bc     14 2B 02 F1 | 	add	local03, local02
165c0     03 2A 66 F0 | 	shl	local03, #3
165c4     14 00 00 FF 
165c8     38 E5 05 F1 | 	add	objptr, ##10552
165cc     F2 2A 02 F1 | 	add	local03, objptr
165d0     0C 2A 06 F1 | 	add	local03, #12
165d4     15 31 02 FB | 	rdlong	local06, local03
165d8     68 4E 05 F1 | 	add	fp, #104
165dc     A7 30 62 FC | 	wrlong	local06, fp
165e0     74 4E 85 F1 | 	sub	fp, #116
165e4     14 00 00 FF 
165e8     38 E5 85 F1 | 	sub	objptr, ##10552
165ec     48 00 90 FD | 	jmp	#LR__1861
165f0                 | LR__1860
165f0     44 4E 05 F1 | 	add	fp, #68
165f4     A7 2C 02 FB | 	rdlong	local04, fp
165f8     30 4E 05 F1 | 	add	fp, #48
165fc     A7 2C 62 FC | 	wrlong	local04, fp
16600     68 4E 85 F1 | 	sub	fp, #104
16604     A7 28 02 FB | 	rdlong	local02, fp
16608     14 2B 02 F6 | 	mov	local03, local02
1660c     01 2A 66 F0 | 	shl	local03, #1
16610     14 2B 02 F1 | 	add	local03, local02
16614     03 2A 66 F0 | 	shl	local03, #3
16618     14 00 00 FF 
1661c     38 E5 05 F1 | 	add	objptr, ##10552
16620     F2 2A 02 F1 | 	add	local03, objptr
16624     0C 4E 85 F1 | 	sub	fp, #12
16628     0C 2A 06 F1 | 	add	local03, #12
1662c     15 2D 62 FC | 	wrlong	local04, local03
16630     14 00 00 FF 
16634     38 E5 85 F1 | 	sub	objptr, ##10552
16638                 | LR__1861
16638                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
16638     48 4E 05 F1 | 	add	fp, #72
1663c     A7 12 02 FB | 	rdlong	arg01, fp
16640     48 4E 85 F1 | 	sub	fp, #72
16644     00 14 06 F6 | 	mov	arg02, #0
16648     01 16 06 F6 | 	mov	arg03, #1
1664c     70 09 B1 FD | 	call	#__system___float_cmp
16650     00 FA 55 F2 | 	cmps	result1, #0 wc
16654     24 00 90 CD |  if_b	jmp	#LR__1862
16658     48 4E 05 F1 | 	add	fp, #72
1665c     A7 12 02 FB | 	rdlong	arg01, fp
16660     48 4E 85 F1 | 	sub	fp, #72
16664     00 00 21 FF 
16668     00 14 06 F6 | 	mov	arg02, ##1107296256
1666c     01 16 66 F6 | 	neg	arg03, #1
16670     4C 09 B1 FD | 	call	#__system___float_cmp
16674     01 FA 55 F2 | 	cmps	result1, #1 wc
16678     48 00 90 CD |  if_b	jmp	#LR__1863
1667c                 | LR__1862
1667c     0C 4E 05 F1 | 	add	fp, #12
16680     A7 2A 02 FB | 	rdlong	local03, fp
16684     15 33 02 F6 | 	mov	local07, local03
16688     01 32 66 F0 | 	shl	local07, #1
1668c     15 33 02 F1 | 	add	local07, local03
16690     03 32 66 F0 | 	shl	local07, #3
16694     14 00 00 FF 
16698     38 E5 05 F1 | 	add	objptr, ##10552
1669c     F2 32 02 F1 | 	add	local07, objptr
166a0     04 32 06 F1 | 	add	local07, #4
166a4     19 2F C2 FA | 	rdbyte	local05, local07
166a8     17 2D E2 F8 | 	getbyte	local04, local05, #0
166ac     14 4E 05 F1 | 	add	fp, #20
166b0     A7 2C 62 FC | 	wrlong	local04, fp
166b4     20 4E 85 F1 | 	sub	fp, #32
166b8     14 00 00 FF 
166bc     38 E5 85 F1 | 	sub	objptr, ##10552
166c0     54 00 90 FD | 	jmp	#LR__1864
166c4                 | LR__1863
166c4     48 4E 05 F1 | 	add	fp, #72
166c8     A7 12 02 FB | 	rdlong	arg01, fp
166cc     48 4E 85 F1 | 	sub	fp, #72
166d0     01 14 06 F6 | 	mov	arg02, #1
166d4     7C 09 B1 FD | 	call	#__system___float_tointeger
166d8     20 4E 05 F1 | 	add	fp, #32
166dc     A7 FA 61 FC | 	wrlong	result1, fp
166e0     14 4E 85 F1 | 	sub	fp, #20
166e4     A7 28 02 FB | 	rdlong	local02, fp
166e8     14 2B 02 F6 | 	mov	local03, local02
166ec     01 2A 66 F0 | 	shl	local03, #1
166f0     14 2B 02 F1 | 	add	local03, local02
166f4     03 2A 66 F0 | 	shl	local03, #3
166f8     14 00 00 FF 
166fc     38 E5 05 F1 | 	add	objptr, ##10552
16700     F2 2A 02 F1 | 	add	local03, objptr
16704     0C 4E 85 F1 | 	sub	fp, #12
16708     04 2A 06 F1 | 	add	local03, #4
1670c     15 FB 41 FC | 	wrbyte	result1, local03
16710     14 00 00 FF 
16714     38 E5 85 F1 | 	sub	objptr, ##10552
16718                 | LR__1864
16718                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
16718     4C 4E 05 F1 | 	add	fp, #76
1671c     A7 12 02 FB | 	rdlong	arg01, fp
16720     4C 4E 85 F1 | 	sub	fp, #76
16724     00 14 06 F6 | 	mov	arg02, #0
16728     01 16 06 F6 | 	mov	arg03, #1
1672c     90 08 B1 FD | 	call	#__system___float_cmp
16730     00 FA 55 F2 | 	cmps	result1, #0 wc
16734     24 00 90 CD |  if_b	jmp	#LR__1865
16738     4C 4E 05 F1 | 	add	fp, #76
1673c     A7 12 02 FB | 	rdlong	arg01, fp
16740     4C 4E 85 F1 | 	sub	fp, #76
16744     00 80 20 FF 
16748     00 14 06 F6 | 	mov	arg02, ##1090519040
1674c     01 16 66 F6 | 	neg	arg03, #1
16750     6C 08 B1 FD | 	call	#__system___float_cmp
16754     01 FA 55 F2 | 	cmps	result1, #1 wc
16758     48 00 90 CD |  if_b	jmp	#LR__1866
1675c                 | LR__1865
1675c     0C 4E 05 F1 | 	add	fp, #12
16760     A7 2A 02 FB | 	rdlong	local03, fp
16764     15 33 02 F6 | 	mov	local07, local03
16768     01 32 66 F0 | 	shl	local07, #1
1676c     15 33 02 F1 | 	add	local07, local03
16770     03 32 66 F0 | 	shl	local07, #3
16774     14 00 00 FF 
16778     38 E5 05 F1 | 	add	objptr, ##10552
1677c     F2 32 02 F1 | 	add	local07, objptr
16780     05 32 06 F1 | 	add	local07, #5
16784     19 2F C2 FA | 	rdbyte	local05, local07
16788     17 2D E2 F8 | 	getbyte	local04, local05, #0
1678c     18 4E 05 F1 | 	add	fp, #24
16790     A7 2C 62 FC | 	wrlong	local04, fp
16794     24 4E 85 F1 | 	sub	fp, #36
16798     14 00 00 FF 
1679c     38 E5 85 F1 | 	sub	objptr, ##10552
167a0     54 00 90 FD | 	jmp	#LR__1867
167a4                 | LR__1866
167a4     4C 4E 05 F1 | 	add	fp, #76
167a8     A7 12 02 FB | 	rdlong	arg01, fp
167ac     4C 4E 85 F1 | 	sub	fp, #76
167b0     01 14 06 F6 | 	mov	arg02, #1
167b4     9C 08 B1 FD | 	call	#__system___float_tointeger
167b8     24 4E 05 F1 | 	add	fp, #36
167bc     A7 FA 61 FC | 	wrlong	result1, fp
167c0     18 4E 85 F1 | 	sub	fp, #24
167c4     A7 28 02 FB | 	rdlong	local02, fp
167c8     14 2B 02 F6 | 	mov	local03, local02
167cc     01 2A 66 F0 | 	shl	local03, #1
167d0     14 2B 02 F1 | 	add	local03, local02
167d4     03 2A 66 F0 | 	shl	local03, #3
167d8     14 00 00 FF 
167dc     38 E5 05 F1 | 	add	objptr, ##10552
167e0     F2 2A 02 F1 | 	add	local03, objptr
167e4     0C 4E 85 F1 | 	sub	fp, #12
167e8     05 2A 06 F1 | 	add	local03, #5
167ec     15 FB 41 FC | 	wrbyte	result1, local03
167f0     14 00 00 FF 
167f4     38 E5 85 F1 | 	sub	objptr, ##10552
167f8                 | LR__1867
167f8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
167f8     50 4E 05 F1 | 	add	fp, #80
167fc     A7 12 02 FB | 	rdlong	arg01, fp
16800     50 4E 85 F1 | 	sub	fp, #80
16804     00 14 06 F6 | 	mov	arg02, #0
16808     01 16 06 F6 | 	mov	arg03, #1
1680c     B0 07 B1 FD | 	call	#__system___float_cmp
16810     00 FA 55 F2 | 	cmps	result1, #0 wc
16814     24 00 90 CD |  if_b	jmp	#LR__1868
16818     50 4E 05 F1 | 	add	fp, #80
1681c     A7 12 02 FB | 	rdlong	arg01, fp
16820     50 4E 85 F1 | 	sub	fp, #80
16824     00 3D 22 FF 
16828     00 14 06 F6 | 	mov	arg02, ##1148846080
1682c     01 16 66 F6 | 	neg	arg03, #1
16830     8C 07 B1 FD | 	call	#__system___float_cmp
16834     01 FA 55 F2 | 	cmps	result1, #1 wc
16838     44 00 90 CD |  if_b	jmp	#LR__1869
1683c                 | LR__1868
1683c     0C 4E 05 F1 | 	add	fp, #12
16840     A7 28 02 FB | 	rdlong	local02, fp
16844     14 2B 02 F6 | 	mov	local03, local02
16848     01 2A 66 F0 | 	shl	local03, #1
1684c     14 2B 02 F1 | 	add	local03, local02
16850     03 2A 66 F0 | 	shl	local03, #3
16854     14 00 00 FF 
16858     38 E5 05 F1 | 	add	objptr, ##10552
1685c     F2 2A 02 F1 | 	add	local03, objptr
16860     08 2A 06 F1 | 	add	local03, #8
16864     15 31 02 FB | 	rdlong	local06, local03
16868     6C 4E 05 F1 | 	add	fp, #108
1686c     A7 30 62 FC | 	wrlong	local06, fp
16870     78 4E 85 F1 | 	sub	fp, #120
16874     14 00 00 FF 
16878     38 E5 85 F1 | 	sub	objptr, ##10552
1687c     48 00 90 FD | 	jmp	#LR__1870
16880                 | LR__1869
16880     50 4E 05 F1 | 	add	fp, #80
16884     A7 30 02 FB | 	rdlong	local06, fp
16888     28 4E 05 F1 | 	add	fp, #40
1688c     A7 30 62 FC | 	wrlong	local06, fp
16890     6C 4E 85 F1 | 	sub	fp, #108
16894     A7 28 02 FB | 	rdlong	local02, fp
16898     14 2B 02 F6 | 	mov	local03, local02
1689c     01 2A 66 F0 | 	shl	local03, #1
168a0     14 2B 02 F1 | 	add	local03, local02
168a4     03 2A 66 F0 | 	shl	local03, #3
168a8     14 00 00 FF 
168ac     38 E5 05 F1 | 	add	objptr, ##10552
168b0     F2 2A 02 F1 | 	add	local03, objptr
168b4     0C 4E 85 F1 | 	sub	fp, #12
168b8     08 2A 06 F1 | 	add	local03, #8
168bc     15 31 62 FC | 	wrlong	local06, local03
168c0     14 00 00 FF 
168c4     38 E5 85 F1 | 	sub	objptr, ##10552
168c8                 | LR__1870
168c8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
168c8     54 4E 05 F1 | 	add	fp, #84
168cc     A7 12 02 FB | 	rdlong	arg01, fp
168d0     54 4E 85 F1 | 	sub	fp, #84
168d4     00 C0 5F FF 
168d8     00 14 06 F6 | 	mov	arg02, ##-1082130432
168dc     01 16 06 F6 | 	mov	arg03, #1
168e0     DC 06 B1 FD | 	call	#__system___float_cmp
168e4     00 FA 55 F2 | 	cmps	result1, #0 wc
168e8     24 00 90 CD |  if_b	jmp	#LR__1871
168ec     54 4E 05 F1 | 	add	fp, #84
168f0     A7 12 02 FB | 	rdlong	arg01, fp
168f4     54 4E 85 F1 | 	sub	fp, #84
168f8     00 C0 1F FF 
168fc     00 14 06 F6 | 	mov	arg02, ##1065353216
16900     01 16 66 F6 | 	neg	arg03, #1
16904     B8 06 B1 FD | 	call	#__system___float_cmp
16908     01 FA 55 F2 | 	cmps	result1, #1 wc
1690c     44 00 90 CD |  if_b	jmp	#LR__1872
16910                 | LR__1871
16910     0C 4E 05 F1 | 	add	fp, #12
16914     A7 28 02 FB | 	rdlong	local02, fp
16918     14 2B 02 F6 | 	mov	local03, local02
1691c     01 2A 66 F0 | 	shl	local03, #1
16920     14 2B 02 F1 | 	add	local03, local02
16924     03 2A 66 F0 | 	shl	local03, #3
16928     14 00 00 FF 
1692c     38 E5 05 F1 | 	add	objptr, ##10552
16930     F2 2A 02 F1 | 	add	local03, objptr
16934     10 2A 06 F1 | 	add	local03, #16
16938     15 31 02 FB | 	rdlong	local06, local03
1693c     64 4E 05 F1 | 	add	fp, #100
16940     A7 30 62 FC | 	wrlong	local06, fp
16944     70 4E 85 F1 | 	sub	fp, #112
16948     14 00 00 FF 
1694c     38 E5 85 F1 | 	sub	objptr, ##10552
16950     48 00 90 FD | 	jmp	#LR__1873
16954                 | LR__1872
16954     54 4E 05 F1 | 	add	fp, #84
16958     A7 30 02 FB | 	rdlong	local06, fp
1695c     1C 4E 05 F1 | 	add	fp, #28
16960     A7 30 62 FC | 	wrlong	local06, fp
16964     64 4E 85 F1 | 	sub	fp, #100
16968     A7 28 02 FB | 	rdlong	local02, fp
1696c     14 2B 02 F6 | 	mov	local03, local02
16970     01 2A 66 F0 | 	shl	local03, #1
16974     14 2B 02 F1 | 	add	local03, local02
16978     03 2A 66 F0 | 	shl	local03, #3
1697c     14 00 00 FF 
16980     38 E5 05 F1 | 	add	objptr, ##10552
16984     F2 2A 02 F1 | 	add	local03, objptr
16988     0C 4E 85 F1 | 	sub	fp, #12
1698c     10 2A 06 F1 | 	add	local03, #16
16990     15 31 62 FC | 	wrlong	local06, local03
16994     14 00 00 FF 
16998     38 E5 85 F1 | 	sub	objptr, ##10552
1699c                 | LR__1873
1699c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
1699c     58 4E 05 F1 | 	add	fp, #88
169a0     A7 12 02 FB | 	rdlong	arg01, fp
169a4     58 4E 85 F1 | 	sub	fp, #88
169a8     00 14 06 F6 | 	mov	arg02, #0
169ac     01 16 06 F6 | 	mov	arg03, #1
169b0     0C 06 B1 FD | 	call	#__system___float_cmp
169b4     00 FA 55 F2 | 	cmps	result1, #0 wc
169b8     24 00 90 CD |  if_b	jmp	#LR__1874
169bc     58 4E 05 F1 | 	add	fp, #88
169c0     A7 12 02 FB | 	rdlong	arg01, fp
169c4     58 4E 85 F1 | 	sub	fp, #88
169c8     80 BF 21 FF 
169cc     00 14 06 F6 | 	mov	arg02, ##1132396544
169d0     01 16 66 F6 | 	neg	arg03, #1
169d4     E8 05 B1 FD | 	call	#__system___float_cmp
169d8     01 FA 55 F2 | 	cmps	result1, #1 wc
169dc     44 00 90 CD |  if_b	jmp	#LR__1875
169e0                 | LR__1874
169e0     0C 4E 05 F1 | 	add	fp, #12
169e4     A7 2A 02 FB | 	rdlong	local03, fp
169e8     15 33 02 F6 | 	mov	local07, local03
169ec     01 32 66 F0 | 	shl	local07, #1
169f0     15 33 02 F1 | 	add	local07, local03
169f4     03 32 66 F0 | 	shl	local07, #3
169f8     14 00 00 FF 
169fc     38 E5 05 F1 | 	add	objptr, ##10552
16a00     F2 32 02 F1 | 	add	local07, objptr
16a04     14 32 06 F1 | 	add	local07, #20
16a08     19 2D E2 FA | 	rdword	local04, local07
16a0c     20 4E 05 F1 | 	add	fp, #32
16a10     A7 2C 62 FC | 	wrlong	local04, fp
16a14     2C 4E 85 F1 | 	sub	fp, #44
16a18     14 00 00 FF 
16a1c     38 E5 85 F1 | 	sub	objptr, ##10552
16a20     54 00 90 FD | 	jmp	#LR__1876
16a24                 | LR__1875
16a24     58 4E 05 F1 | 	add	fp, #88
16a28     A7 12 02 FB | 	rdlong	arg01, fp
16a2c     58 4E 85 F1 | 	sub	fp, #88
16a30     01 14 06 F6 | 	mov	arg02, #1
16a34     1C 06 B1 FD | 	call	#__system___float_tointeger
16a38     2C 4E 05 F1 | 	add	fp, #44
16a3c     A7 FA 61 FC | 	wrlong	result1, fp
16a40     20 4E 85 F1 | 	sub	fp, #32
16a44     A7 28 02 FB | 	rdlong	local02, fp
16a48     14 2B 02 F6 | 	mov	local03, local02
16a4c     01 2A 66 F0 | 	shl	local03, #1
16a50     14 2B 02 F1 | 	add	local03, local02
16a54     03 2A 66 F0 | 	shl	local03, #3
16a58     14 00 00 FF 
16a5c     38 E5 05 F1 | 	add	objptr, ##10552
16a60     F2 2A 02 F1 | 	add	local03, objptr
16a64     0C 4E 85 F1 | 	sub	fp, #12
16a68     14 2A 06 F1 | 	add	local03, #20
16a6c     15 FB 51 FC | 	wrword	result1, local03
16a70     14 00 00 FF 
16a74     38 E5 85 F1 | 	sub	objptr, ##10552
16a78                 | LR__1876
16a78     6C 4E 05 F1 | 	add	fp, #108
16a7c     A7 14 02 FB | 	rdlong	arg02, fp
16a80     6C 4E 85 F1 | 	sub	fp, #108
16a84     FC 16 20 FF 
16a88     54 12 06 F6 | 	mov	arg01, ##1076754516
16a8c     CC 10 B1 FD | 	call	#__system____builtin_logbase
16a90     FD 2C 02 F6 | 	mov	local04, result1
16a94     1E 14 C6 F9 | 	decod	arg02, #30
16a98     FC 16 20 FF 
16a9c     54 12 06 F6 | 	mov	arg01, ##1076754516
16aa0     B8 10 B1 FD | 	call	#__system____builtin_logbase
16aa4     FD 14 02 F6 | 	mov	arg02, result1
16aa8     16 13 02 F6 | 	mov	arg01, local04
16aac     E0 02 B1 FD | 	call	#__system___float_div
16ab0     FD 12 02 F6 | 	mov	arg01, result1
16ab4     00 14 06 F6 | 	mov	arg02, #0
16ab8     98 05 B1 FD | 	call	#__system___float_tointeger
16abc     30 4E 05 F1 | 	add	fp, #48
16ac0     A7 FA 61 FC | 	wrlong	result1, fp
16ac4     1E 2C C6 F9 | 	decod	local04, #30
16ac8     FD 12 02 F6 | 	mov	arg01, result1
16acc     30 4E 85 F1 | 	sub	fp, #48
16ad0     05 12 06 F1 | 	add	arg01, #5
16ad4     09 13 52 F6 | 	abs	arg01, arg01 wc
16ad8     1F 34 C6 C9 |  if_b	decod	local08, #31
16adc     00 34 06 36 |  if_ae	mov	local08, #0
16ae0     A4 FC B0 FD | 	call	#__system___float_fromuns
16ae4     1A FB 61 F5 | 	xor	result1, local08
16ae8     FD 14 02 F6 | 	mov	arg02, result1
16aec     16 13 02 F6 | 	mov	arg01, local04
16af0     A0 0F B1 FD | 	call	#__system____builtin_powf
16af4     FD 12 02 F6 | 	mov	arg01, result1
16af8     01 14 06 F6 | 	mov	arg02, #1
16afc     54 05 B1 FD | 	call	#__system___float_tointeger
16b00     10 4E 05 F1 | 	add	fp, #16
16b04     A7 FA 61 FC | 	wrlong	result1, fp
16b08                 | ' skip=round(2^(lfreq+5))
16b08                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
16b08     10 4E 85 F1 | 	sub	fp, #16
16b0c     40 00 00 FF 
16b10     01 FA 55 F2 | 	cmps	result1, ##32769 wc
16b14     30 00 90 CD |  if_b	jmp	#LR__1877
16b18     10 4E 05 F1 | 	add	fp, #16
16b1c     A7 26 02 FB | 	rdlong	local01, fp
16b20     13 2D 52 F6 | 	abs	local04, local01 wc
16b24     0F 2C 46 F0 | 	shr	local04, #15
16b28     16 2D 82 F6 | 	negc	local04, local04
16b2c     0C 4E 85 F1 | 	sub	fp, #12
16b30     A7 2C 62 FC | 	wrlong	local04, fp
16b34     0C 4E 05 F1 | 	add	fp, #12
16b38     40 00 80 FF 
16b3c     A7 00 68 FC | 	wrlong	##32768, fp
16b40     10 4E 85 F1 | 	sub	fp, #16
16b44     0C 00 90 FD | 	jmp	#LR__1878
16b48                 | LR__1877
16b48     04 4E 05 F1 | 	add	fp, #4
16b4c     A7 02 68 FC | 	wrlong	#1, fp
16b50     04 4E 85 F1 | 	sub	fp, #4
16b54                 | LR__1878
16b54     6C 4E 05 F1 | 	add	fp, #108
16b58     A7 14 02 FB | 	rdlong	arg02, fp
16b5c     6C 4E 85 F1 | 	sub	fp, #108
16b60     3E 2C 25 FF 
16b64     3C 12 06 F6 | 	mov	arg01, ##1247312956
16b68     24 02 B1 FD | 	call	#__system___float_div
16b6c     FD 2C 02 F6 | 	mov	local04, result1
16b70     04 4E 05 F1 | 	add	fp, #4
16b74     A7 12 02 FB | 	rdlong	arg01, fp
16b78     04 4E 85 F1 | 	sub	fp, #4
16b7c     09 13 52 F6 | 	abs	arg01, arg01 wc
16b80     1F 34 C6 C9 |  if_b	decod	local08, #31
16b84     00 34 06 36 |  if_ae	mov	local08, #0
16b88     FC FB B0 FD | 	call	#__system___float_fromuns
16b8c     1A FB 61 F5 | 	xor	result1, local08
16b90     FD 26 02 F6 | 	mov	local01, result1
16b94     1E 28 C6 F9 | 	decod	local02, #30
16b98     0D 12 06 F6 | 	mov	arg01, #13
16b9c     30 4E 05 F1 | 	add	fp, #48
16ba0     A7 30 02 FB | 	rdlong	local06, fp
16ba4     30 4E 85 F1 | 	sub	fp, #48
16ba8     18 13 82 F1 | 	sub	arg01, local06
16bac     09 13 52 F6 | 	abs	arg01, arg01 wc
16bb0     1F 34 C6 C9 |  if_b	decod	local08, #31
16bb4     00 34 06 36 |  if_ae	mov	local08, #0
16bb8     CC FB B0 FD | 	call	#__system___float_fromuns
16bbc     1A FB 61 F5 | 	xor	result1, local08
16bc0     FD 14 02 F6 | 	mov	arg02, result1
16bc4     14 13 02 F6 | 	mov	arg01, local02
16bc8     C8 0E B1 FD | 	call	#__system____builtin_powf
16bcc     FD 14 02 F6 | 	mov	arg02, result1
16bd0     13 13 02 F6 | 	mov	arg01, local01
16bd4     B4 FF B0 FD | 	call	#__system___float_mul
16bd8     FD 14 02 F6 | 	mov	arg02, result1
16bdc     16 13 02 F6 | 	mov	arg01, local04
16be0     AC 01 B1 FD | 	call	#__system___float_div
16be4     FD 12 02 F6 | 	mov	arg01, result1
16be8     01 14 06 F6 | 	mov	arg02, #1
16bec     64 04 B1 FD | 	call	#__system___float_tointeger
16bf0     34 4E 05 F1 | 	add	fp, #52
16bf4     A7 FA 61 FC | 	wrlong	result1, fp
16bf8     34 4E 05 F1 | 	add	fp, #52
16bfc     A7 12 02 FB | 	rdlong	arg01, fp
16c00     10 4E 05 F1 | 	add	fp, #16
16c04     A7 14 02 FB | 	rdlong	arg02, fp
16c08     78 4E 85 F1 | 	sub	fp, #120
16c0c     80 01 B1 FD | 	call	#__system___float_div
16c10     FD 12 02 F6 | 	mov	arg01, result1
16c14     01 14 06 F6 | 	mov	arg02, #1
16c18     38 04 B1 FD | 	call	#__system___float_tointeger
16c1c     FD 2C 02 F6 | 	mov	local04, result1
16c20     14 4E 05 F1 | 	add	fp, #20
16c24     A7 2C 62 FC | 	wrlong	local04, fp
16c28     5C 4E 05 F1 | 	add	fp, #92
16c2c     A7 14 02 FB | 	rdlong	arg02, fp
16c30     70 4E 85 F1 | 	sub	fp, #112
16c34     00 00 23 FF 
16c38     00 12 06 F6 | 	mov	arg01, ##1174405120
16c3c     4C FF B0 FD | 	call	#__system___float_mul
16c40     FD 12 02 F6 | 	mov	arg01, result1
16c44     01 14 06 F6 | 	mov	arg02, #1
16c48     08 04 B1 FD | 	call	#__system___float_tointeger
16c4c     0D 2C C6 F9 | 	decod	local04, #13
16c50     FD 2C 02 F1 | 	add	local04, result1
16c54     18 4E 05 F1 | 	add	fp, #24
16c58     A7 2C 62 FC | 	wrlong	local04, fp
16c5c     5C 4E 05 F1 | 	add	fp, #92
16c60     A7 14 02 FB | 	rdlong	arg02, fp
16c64     74 4E 85 F1 | 	sub	fp, #116
16c68     00 3D 22 FF 
16c6c     00 12 06 F6 | 	mov	arg01, ##1148846080
16c70     18 FF B0 FD | 	call	#__system___float_mul
16c74     FD 12 02 F6 | 	mov	arg01, result1
16c78     01 14 06 F6 | 	mov	arg02, #1
16c7c     D4 03 B1 FD | 	call	#__system___float_tointeger
16c80     1C 4E 05 F1 | 	add	fp, #28
16c84     A7 FA 61 FC | 	wrlong	result1, fp
16c88     37 00 00 FF 
16c8c     10 E4 05 F1 | 	add	objptr, ##28176
16c90     F2 2C 02 FB | 	rdlong	local04, objptr
16c94     37 00 00 FF 
16c98     10 E4 85 F1 | 	sub	objptr, ##28176
16c9c     10 4E 85 F1 | 	sub	fp, #16
16ca0     A7 28 02 FB | 	rdlong	local02, fp
16ca4     06 28 66 F0 | 	shl	local02, #6
16ca8     14 2D 02 F1 | 	add	local04, local02
16cac     04 4E 85 F1 | 	sub	fp, #4
16cb0     A7 2C 62 FC | 	wrlong	local04, fp
16cb4                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
16cb4                 | ' speed=round(speed_coeff/slen)
16cb4                 | ' ipan=8192+round(8192*pan)
16cb4                 | ' ivol=round(1000.0*vol)
16cb4                 | ' base2=base+64*channel
16cb4                 | ' if wave <32 then 
16cb4     18 4E 05 F1 | 	add	fp, #24
16cb8     A7 2C 02 FB | 	rdlong	local04, fp
16cbc     20 4E 85 F1 | 	sub	fp, #32
16cc0     20 2C 56 F2 | 	cmps	local04, #32 wc
16cc4     2C 00 90 3D |  if_ae	jmp	#LR__1879
16cc8     08 4E 05 F1 | 	add	fp, #8
16ccc     A7 12 02 FB | 	rdlong	arg01, fp
16cd0     08 12 06 F1 | 	add	arg01, #8
16cd4     18 4E 05 F1 | 	add	fp, #24
16cd8     A7 14 02 FB | 	rdlong	arg02, fp
16cdc     20 4E 85 F1 | 	sub	fp, #32
16ce0     0B 14 66 F0 | 	shl	arg02, #11
16ce4     00 00 60 FF 
16ce8     00 14 06 F1 | 	add	arg02, ##-1073741824
16cec     09 15 62 FC | 	wrlong	arg02, arg01
16cf0     18 00 90 FD | 	jmp	#LR__1880
16cf4                 | LR__1879
16cf4     08 4E 05 F1 | 	add	fp, #8
16cf8     A7 12 02 FB | 	rdlong	arg01, fp
16cfc     08 4E 85 F1 | 	sub	fp, #8
16d00     08 12 06 F1 | 	add	arg01, #8
16d04     00 00 E4 FF 
16d08     09 01 68 FC | 	wrlong	##-939524096, arg01
16d0c                 | LR__1880
16d0c     08 4E 05 F1 | 	add	fp, #8
16d10     A7 12 02 FB | 	rdlong	arg01, fp
16d14     10 12 06 F1 | 	add	arg01, #16
16d18     04 00 80 FF 
16d1c     09 01 68 FC | 	wrlong	##2048, arg01
16d20     A7 12 02 FB | 	rdlong	arg01, fp
16d24     0C 12 06 F1 | 	add	arg01, #12
16d28     09 01 68 FC | 	wrlong	#0, arg01
16d2c     A7 12 02 FB | 	rdlong	arg01, fp
16d30     14 12 06 F1 | 	add	arg01, #20
16d34     14 4E 05 F1 | 	add	fp, #20
16d38     A7 14 02 FB | 	rdlong	arg02, fp
16d3c     09 15 52 FC | 	wrword	arg02, arg01
16d40     14 4E 85 F1 | 	sub	fp, #20
16d44     A7 12 02 FB | 	rdlong	arg01, fp
16d48     16 12 06 F1 | 	add	arg01, #22
16d4c     10 4E 05 F1 | 	add	fp, #16
16d50     A7 14 02 FB | 	rdlong	arg02, fp
16d54     09 15 52 FC | 	wrword	arg02, arg01
16d58                 | ' lpoke base2+16,2048
16d58                 | ' lpoke base2+12,0
16d58                 | ' dpoke base2+20,ivol 
16d58                 | ' dpoke base2+22,ipan 
16d58                 | ' if wave<32 then
16d58     08 4E 05 F1 | 	add	fp, #8
16d5c     A7 2C 02 FB | 	rdlong	local04, fp
16d60     20 4E 85 F1 | 	sub	fp, #32
16d64     20 2C 56 F2 | 	cmps	local04, #32 wc
16d68     38 00 90 3D |  if_ae	jmp	#LR__1881
16d6c     08 4E 05 F1 | 	add	fp, #8
16d70     A7 12 02 FB | 	rdlong	arg01, fp
16d74     18 12 06 F1 | 	add	arg01, #24
16d78     2C 4E 05 F1 | 	add	fp, #44
16d7c     A7 14 02 FB | 	rdlong	arg02, fp
16d80     09 15 52 FC | 	wrword	arg02, arg01
16d84     2C 4E 85 F1 | 	sub	fp, #44
16d88     A7 12 02 FB | 	rdlong	arg01, fp
16d8c     1A 12 06 F1 | 	add	arg01, #26
16d90     08 4E 05 F1 | 	add	fp, #8
16d94     A7 14 02 FB | 	rdlong	arg02, fp
16d98     10 4E 85 F1 | 	sub	fp, #16
16d9c     09 15 52 FC | 	wrword	arg02, arg01
16da0     48 00 90 FD | 	jmp	#LR__1882
16da4                 | LR__1881
16da4     08 4E 05 F1 | 	add	fp, #8
16da8     A7 2C 02 FB | 	rdlong	local04, fp
16dac     18 2C 06 F1 | 	add	local04, #24
16db0     64 4E 05 F1 | 	add	fp, #100
16db4     A7 14 02 FB | 	rdlong	arg02, fp
16db8     6C 4E 85 F1 | 	sub	fp, #108
16dbc     3E 2C 25 FF 
16dc0     3C 12 06 F6 | 	mov	arg01, ##1247312956
16dc4     C8 FF B0 FD | 	call	#__system___float_div
16dc8     FD 12 02 F6 | 	mov	arg01, result1
16dcc     01 14 06 F6 | 	mov	arg02, #1
16dd0     80 02 B1 FD | 	call	#__system___float_tointeger
16dd4     16 FB 51 FC | 	wrword	result1, local04
16dd8     08 4E 05 F1 | 	add	fp, #8
16ddc     A7 12 02 FB | 	rdlong	arg01, fp
16de0     08 4E 85 F1 | 	sub	fp, #8
16de4     1A 12 06 F1 | 	add	arg01, #26
16de8     09 01 5A FC | 	wrword	#256, arg01
16dec                 | LR__1882
16dec     08 4E 05 F1 | 	add	fp, #8
16df0     A7 12 02 FB | 	rdlong	arg01, fp
16df4     1C 12 06 F1 | 	add	arg01, #28
16df8     09 01 68 FC | 	wrlong	#0, arg01
16dfc     A7 12 02 FB | 	rdlong	arg01, fp
16e00     20 12 06 F1 | 	add	arg01, #32
16e04     09 01 68 FC | 	wrlong	#0, arg01
16e08                 | ' lpoke base2+28,$0000_0000
16e08                 | ' lpoke base2+32,0 
16e08                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
16e08     1C 4E 05 F1 | 	add	fp, #28
16e0c     A7 2C 02 FB | 	rdlong	local04, fp
16e10     24 4E 85 F1 | 	sub	fp, #36
16e14     08 2C 0E F2 | 	cmp	local04, #8 wz
16e18     18 00 90 5D |  if_ne	jmp	#LR__1883
16e1c     08 4E 05 F1 | 	add	fp, #8
16e20     A7 12 02 FB | 	rdlong	arg01, fp
16e24     08 4E 85 F1 | 	sub	fp, #8
16e28     24 12 06 F1 | 	add	arg01, #36
16e2c     09 01 68 FC | 	wrlong	#0, arg01
16e30     34 00 90 FD | 	jmp	#LR__1884
16e34                 | LR__1883
16e34     08 4E 05 F1 | 	add	fp, #8
16e38     A7 12 02 FB | 	rdlong	arg01, fp
16e3c     24 12 06 F1 | 	add	arg01, #36
16e40     1C 4E 05 F1 | 	add	fp, #28
16e44     A7 14 02 FB | 	rdlong	arg02, fp
16e48     24 4E 85 F1 | 	sub	fp, #36
16e4c     09 14 66 F0 | 	shl	arg02, #9
16e50     0C 00 00 FF 
16e54     D8 E4 05 F1 | 	add	objptr, ##6360
16e58     F2 14 02 F1 | 	add	arg02, objptr
16e5c     0C 00 00 FF 
16e60     D8 E4 85 F1 | 	sub	objptr, ##6360
16e64     09 15 62 FC | 	wrlong	arg02, arg01
16e68                 | LR__1884
16e68     08 4E 05 F1 | 	add	fp, #8
16e6c     A7 12 02 FB | 	rdlong	arg01, fp
16e70     28 12 06 F1 | 	add	arg01, #40
16e74     0C 4E 05 F1 | 	add	fp, #12
16e78     A7 14 02 FB | 	rdlong	arg02, fp
16e7c     09 15 62 FC | 	wrlong	arg02, arg01
16e80     0C 4E 85 F1 | 	sub	fp, #12
16e84     A7 12 02 FB | 	rdlong	arg01, fp
16e88     2C 12 06 F1 | 	add	arg01, #44
16e8c     24 4E 05 F1 | 	add	fp, #36
16e90     A7 14 02 FB | 	rdlong	arg02, fp
16e94     09 15 62 FC | 	wrlong	arg02, arg01
16e98                 | ' lpoke base2+40,speed 
16e98                 | ' lpoke base2+44,sus 
16e98                 | ' if delay>0 then waitms(delay) 
16e98     04 4E 85 F1 | 	sub	fp, #4
16e9c     A7 2C 02 FB | 	rdlong	local04, fp
16ea0     28 4E 85 F1 | 	sub	fp, #40
16ea4     01 2C 56 F2 | 	cmps	local04, #1 wc
16ea8     28 4E 05 31 |  if_ae	add	fp, #40
16eac     A7 12 02 3B |  if_ae	rdlong	arg01, fp
16eb0     28 4E 85 31 |  if_ae	sub	fp, #40
16eb4     50 D1 B0 3D |  if_ae	call	#__system___waitms
16eb8     A7 F0 03 F6 | 	mov	ptra, fp
16ebc     B2 00 A0 FD | 	call	#popregs_
16ec0                 | _do_play_ret
16ec0     2D 00 64 FD | 	ret
16ec4                 | 
16ec4                 | ' 
16ec4                 | ' '-------------------- plot
16ec4                 | ' 
16ec4                 | ' sub do_plot
16ec4                 | _do_plot
16ec4     00 4A 05 F6 | 	mov	COUNT_, #0
16ec8     A8 00 A0 FD | 	call	#pushregs_
16ecc     20 F0 07 F1 | 	add	ptra, #32
16ed0     44 5B BF FD | 	call	#_pop
16ed4     FD 16 02 F6 | 	mov	arg03, result1
16ed8     FE 14 02 F6 | 	mov	arg02, result2
16edc     FF 12 02 F6 | 	mov	arg01, result3
16ee0     0C 4E 05 F1 | 	add	fp, #12
16ee4     A7 16 62 FC | 	wrlong	arg03, fp
16ee8     04 4E 05 F1 | 	add	fp, #4
16eec     A7 14 62 FC | 	wrlong	arg02, fp
16ef0     04 4E 05 F1 | 	add	fp, #4
16ef4     A7 12 62 FC | 	wrlong	arg01, fp
16ef8     14 4E 85 F1 | 	sub	fp, #20
16efc     18 5B BF FD | 	call	#_pop
16f00     FF 16 02 F6 | 	mov	arg03, result3
16f04     A7 FA 61 FC | 	wrlong	result1, fp
16f08     04 4E 05 F1 | 	add	fp, #4
16f0c     A7 FC 61 FC | 	wrlong	result2, fp
16f10     04 4E 05 F1 | 	add	fp, #4
16f14     A7 16 62 FC | 	wrlong	arg03, fp
16f18     08 4E 85 F1 | 	sub	fp, #8
16f1c     A7 12 02 F6 | 	mov	arg01, fp
16f20     D8 5C BF FD | 	call	#_converttoint
16f24     18 4E 05 F1 | 	add	fp, #24
16f28     A7 FA 61 FC | 	wrlong	result1, fp
16f2c     0C 4E 85 F1 | 	sub	fp, #12
16f30     A7 12 02 F6 | 	mov	arg01, fp
16f34     0C 4E 85 F1 | 	sub	fp, #12
16f38     C0 5C BF FD | 	call	#_converttoint
16f3c     1C 4E 05 F1 | 	add	fp, #28
16f40     A7 FA 61 FC | 	wrlong	result1, fp
16f44     04 4E 85 F1 | 	sub	fp, #4
16f48     A7 16 02 FB | 	rdlong	arg03, fp
16f4c     37 00 00 FF 
16f50     2C E4 05 F1 | 	add	objptr, ##28204
16f54     F2 16 62 FC | 	wrlong	arg03, objptr
16f58     04 4E 05 F1 | 	add	fp, #4
16f5c     A7 14 02 FB | 	rdlong	arg02, fp
16f60     1C 4E 85 F1 | 	sub	fp, #28
16f64     04 E4 05 F1 | 	add	objptr, #4
16f68     F2 14 62 FC | 	wrlong	arg02, objptr
16f6c     04 E4 85 F1 | 	sub	objptr, #4
16f70     F2 12 02 FB | 	rdlong	arg01, objptr
16f74     04 E4 85 F1 | 	sub	objptr, #4
16f78     F2 16 02 FB | 	rdlong	arg03, objptr
16f7c     37 00 00 FF 
16f80     28 E4 85 F1 | 	sub	objptr, ##28200
16f84     7C A4 B0 FD | 	call	#_hg010b_spin2_putpixel
16f88     A7 F0 03 F6 | 	mov	ptra, fp
16f8c     B2 00 A0 FD | 	call	#popregs_
16f90                 | _do_plot_ret
16f90     2D 00 64 FD | 	ret
16f94                 | 
16f94                 | ' 
16f94                 | ' '-------------------- poke
16f94                 | ' 
16f94                 | ' sub do_poke
16f94                 | _do_poke
16f94     01 4A 05 F6 | 	mov	COUNT_, #1
16f98     A8 00 A0 FD | 	call	#pushregs_
16f9c     20 F0 07 F1 | 	add	ptra, #32
16fa0     74 5A BF FD | 	call	#_pop
16fa4     FD 14 02 F6 | 	mov	arg02, result1
16fa8     FE 12 02 F6 | 	mov	arg01, result2
16fac     FF 26 02 F6 | 	mov	local01, result3
16fb0     A7 14 62 FC | 	wrlong	arg02, fp
16fb4     04 4E 05 F1 | 	add	fp, #4
16fb8     A7 12 62 FC | 	wrlong	arg01, fp
16fbc     04 4E 05 F1 | 	add	fp, #4
16fc0     A7 26 62 FC | 	wrlong	local01, fp
16fc4     08 4E 85 F1 | 	sub	fp, #8
16fc8     4C 5A BF FD | 	call	#_pop
16fcc     FF 26 02 F6 | 	mov	local01, result3
16fd0     0C 4E 05 F1 | 	add	fp, #12
16fd4     A7 FA 61 FC | 	wrlong	result1, fp
16fd8     04 4E 05 F1 | 	add	fp, #4
16fdc     A7 FC 61 FC | 	wrlong	result2, fp
16fe0     04 4E 05 F1 | 	add	fp, #4
16fe4     A7 26 62 FC | 	wrlong	local01, fp
16fe8     08 4E 85 F1 | 	sub	fp, #8
16fec     A7 12 02 F6 | 	mov	arg01, fp
16ff0     0C 4E 85 F1 | 	sub	fp, #12
16ff4     04 5C BF FD | 	call	#_converttoint
16ff8     18 4E 05 F1 | 	add	fp, #24
16ffc     A7 FA 61 FC | 	wrlong	result1, fp
17000     18 4E 85 F1 | 	sub	fp, #24
17004     A7 12 02 F6 | 	mov	arg01, fp
17008     F0 5B BF FD | 	call	#_converttoint
1700c     1C 4E 05 F1 | 	add	fp, #28
17010     A7 FA 61 FC | 	wrlong	result1, fp
17014                 | ' t1=pop() 'value
17014                 | ' t2=pop() 
17014                 | ' a=converttoint(t2) : v=converttoint(t1)
17014                 | ' if a<$80000 then poke a,v else pspoke a,v
17014     04 4E 85 F1 | 	sub	fp, #4
17018     A7 26 02 FB | 	rdlong	local01, fp
1701c     18 4E 85 F1 | 	sub	fp, #24
17020     00 04 00 FF 
17024     00 26 16 F2 | 	cmp	local01, ##524288 wc
17028     1C 00 90 3D |  if_ae	jmp	#LR__1890
1702c     18 4E 05 F1 | 	add	fp, #24
17030     A7 12 02 FB | 	rdlong	arg01, fp
17034     04 4E 05 F1 | 	add	fp, #4
17038     A7 14 02 FB | 	rdlong	arg02, fp
1703c     1C 4E 85 F1 | 	sub	fp, #28
17040     09 15 42 FC | 	wrbyte	arg02, arg01
17044     18 00 90 FD | 	jmp	#LR__1891
17048                 | LR__1890
17048     18 4E 05 F1 | 	add	fp, #24
1704c     A7 12 02 FB | 	rdlong	arg01, fp
17050     04 4E 05 F1 | 	add	fp, #4
17054     A7 14 02 FB | 	rdlong	arg02, fp
17058     1C 4E 85 F1 | 	sub	fp, #28
1705c     40 95 B0 FD | 	call	#_pspoke
17060                 | LR__1891
17060     A7 F0 03 F6 | 	mov	ptra, fp
17064     B2 00 A0 FD | 	call	#popregs_
17068                 | _do_poke_ret
17068     2D 00 64 FD | 	ret
1706c                 | 
1706c                 | ' 
1706c                 | ' '-------------------- pop
1706c                 | ' 
1706c                 | ' sub do_pop()
1706c                 | _do_pop
1706c                 | ' if gosubtop>0 then  gosubtop -=1 
1706c     50 00 00 FF 
17070     0C E5 05 F1 | 	add	objptr, ##41228
17074     F2 00 02 FB | 	rdlong	_var01, objptr
17078     50 00 00 FF 
1707c     0C E5 85 F1 | 	sub	objptr, ##41228
17080     01 00 56 F2 | 	cmps	_var01, #1 wc
17084     50 00 00 3F 
17088     0C E5 05 31 |  if_ae	add	objptr, ##41228
1708c     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
17090     01 00 86 31 |  if_ae	sub	_var01, #1
17094     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
17098     50 00 00 3F 
1709c     0C E5 85 31 |  if_ae	sub	objptr, ##41228
170a0                 | _do_pop_ret
170a0     2D 00 64 FD | 	ret
170a4                 | 
170a4                 | ' 
170a4                 | ' '-------------------- position
170a4                 | ' 
170a4                 | ' sub do_position
170a4                 | _do_position
170a4     01 4A 05 F6 | 	mov	COUNT_, #1
170a8     A8 00 A0 FD | 	call	#pushregs_
170ac     18 F0 07 F1 | 	add	ptra, #24
170b0     64 59 BF FD | 	call	#_pop
170b4     FD 14 02 F6 | 	mov	arg02, result1
170b8     FE 12 02 F6 | 	mov	arg01, result2
170bc     FF 26 02 F6 | 	mov	local01, result3
170c0     A7 14 62 FC | 	wrlong	arg02, fp
170c4     04 4E 05 F1 | 	add	fp, #4
170c8     A7 12 62 FC | 	wrlong	arg01, fp
170cc     04 4E 05 F1 | 	add	fp, #4
170d0     A7 26 62 FC | 	wrlong	local01, fp
170d4     08 4E 85 F1 | 	sub	fp, #8
170d8     3C 59 BF FD | 	call	#_pop
170dc     FF 26 02 F6 | 	mov	local01, result3
170e0     0C 4E 05 F1 | 	add	fp, #12
170e4     A7 FA 61 FC | 	wrlong	result1, fp
170e8     04 4E 05 F1 | 	add	fp, #4
170ec     A7 FC 61 FC | 	wrlong	result2, fp
170f0     04 4E 05 F1 | 	add	fp, #4
170f4     A7 26 62 FC | 	wrlong	local01, fp
170f8     08 4E 85 F1 | 	sub	fp, #8
170fc     A7 12 02 F6 | 	mov	arg01, fp
17100     0C 4E 85 F1 | 	sub	fp, #12
17104     F4 5A BF FD | 	call	#_converttoint
17108     FD 26 02 F6 | 	mov	local01, result1
1710c     A7 12 02 F6 | 	mov	arg01, fp
17110     E8 5A BF FD | 	call	#_converttoint
17114     FD 14 02 F6 | 	mov	arg02, result1
17118     13 13 02 F6 | 	mov	arg01, local01
1711c     A8 AE B0 FD | 	call	#_hg010b_spin2_setcursorpos
17120     A7 F0 03 F6 | 	mov	ptra, fp
17124     B2 00 A0 FD | 	call	#popregs_
17128                 | _do_position_ret
17128     2D 00 64 FD | 	ret
1712c                 | 
1712c                 | ' 
1712c                 | ' '-------------------- print
1712c                 | ' 
1712c                 | ' sub do_print  
1712c                 | _do_print
1712c     0B 4A 05 F6 | 	mov	COUNT_, #11
17130     A8 00 A0 FD | 	call	#pushregs_
17134     00 2C 06 F6 | 	mov	local04, #0
17138     DC 58 BF FD | 	call	#_pop
1713c     FD 2E 02 F6 | 	mov	local05, result1
17140     FE 30 02 F6 | 	mov	local06, result2
17144     FF 32 02 F6 | 	mov	local07, result3
17148     17 27 02 F6 | 	mov	local01, local05
1714c     18 29 02 F6 | 	mov	local02, local06
17150     19 2B 02 F6 | 	mov	local03, local07
17154                 | '  
17154                 | ' r=0
17154                 | ' t1=pop() 
17154                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
17154     21 2A 0E F2 | 	cmp	local03, #33 wz
17158     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
1715c     20 00 90 5D |  if_ne	jmp	#LR__1900
17160     15 2D 02 F6 | 	mov	local04, local03
17164     B0 58 BF FD | 	call	#_pop
17168     FD 2E 02 F6 | 	mov	local05, result1
1716c     FE 30 02 F6 | 	mov	local06, result2
17170     FF 32 02 F6 | 	mov	local07, result3
17174     17 27 02 F6 | 	mov	local01, local05
17178     18 29 02 F6 | 	mov	local02, local06
1717c     19 2B 02 F6 | 	mov	local03, local07
17180                 | LR__1900
17180                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
17180     20 2A 0E F2 | 	cmp	local03, #32 wz
17184     15 2D 02 A6 |  if_e	mov	local04, local03
17188                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
17188     FF 2A 0E F2 | 	cmp	local03, #255 wz
1718c     10 00 90 5D |  if_ne	jmp	#LR__1901
17190     13 13 02 F6 | 	mov	arg01, local01
17194     00 14 06 F6 | 	mov	arg02, #0
17198     E8 91 B0 FD | 	call	#_printerror
1719c     D4 04 90 FD | 	jmp	#LR__1920
171a0                 | LR__1901
171a0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
171a0     2B 2A 0E F2 | 	cmp	local03, #43 wz
171a4     14 00 90 5D |  if_ne	jmp	#LR__1902
171a8     13 13 02 F6 | 	mov	arg01, local01
171ac     E0 59 BF FD | 	call	#_convertstring
171b0     FD 2E 02 F6 | 	mov	local05, result1
171b4     17 27 02 F6 | 	mov	local01, local05
171b8     1F 2A 06 F6 | 	mov	local03, #31
171bc                 | LR__1902
171bc                 | ' 
171bc                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
171bc     2C 2A 0E F2 | 	cmp	local03, #44 wz
171c0     80 00 90 5D |  if_ne	jmp	#LR__1903
171c4     00 12 06 F6 | 	mov	arg01, #0
171c8     70 28 B1 FD | 	call	#__system___getiolock_0573
171cc     FD 12 02 F6 | 	mov	arg01, result1
171d0     40 CB B0 FD | 	call	#__system___lockmem
171d4     A1 01 00 FF 
171d8     54 14 06 F6 | 	mov	arg02, ##@LR__5768
171dc     00 12 06 F6 | 	mov	arg01, #0
171e0     00 16 06 F6 | 	mov	arg03, #0
171e4     20 D8 B0 FD | 	call	#__system___basic_print_string
171e8     0A 34 06 F6 | 	mov	local08, #10
171ec     00 12 06 F6 | 	mov	arg01, #0
171f0     13 15 02 F6 | 	mov	arg02, local01
171f4     00 16 06 F6 | 	mov	arg03, #0
171f8     0A 18 06 F6 | 	mov	arg04, #10
171fc     4C D8 B0 FD | 	call	#__system___basic_print_integer
17200     FD 36 02 F6 | 	mov	local09, result1
17204     00 12 06 F6 | 	mov	arg01, #0
17208     0A 14 06 F6 | 	mov	arg02, #10
1720c     00 16 06 F6 | 	mov	arg03, #0
17210     9C D7 B0 FD | 	call	#__system___basic_print_char
17214     01 38 06 F6 | 	mov	local10, #1
17218     00 12 06 F6 | 	mov	arg01, #0
1721c     1C 28 B1 FD | 	call	#__system___getiolock_0573
17220     FD 00 68 FC | 	wrlong	#0, result1
17224     00 3A 06 F6 | 	mov	local11, #0
17228     EC 57 BF FD | 	call	#_pop
1722c     FD 2E 02 F6 | 	mov	local05, result1
17230     FE 30 02 F6 | 	mov	local06, result2
17234     FF 32 02 F6 | 	mov	local07, result3
17238     17 27 02 F6 | 	mov	local01, local05
1723c     18 29 02 F6 | 	mov	local02, local06
17240     19 2B 02 F6 | 	mov	local03, local07
17244                 | LR__1903
17244                 | ' 
17244                 | ' if r=print_mod_comma  then
17244     21 2C 0E F2 | 	cmp	local04, #33 wz
17248     AC 01 90 5D |  if_ne	jmp	#LR__1908
1724c                 | '   if t1.result_type=result_int then print t1.result.iresult,
1724c     1C 2A 0E F2 | 	cmp	local03, #28 wz
17250     64 00 90 5D |  if_ne	jmp	#LR__1904
17254     00 12 06 F6 | 	mov	arg01, #0
17258     E0 27 B1 FD | 	call	#__system___getiolock_0573
1725c     FD 12 02 F6 | 	mov	arg01, result1
17260     B0 CA B0 FD | 	call	#__system___lockmem
17264     00 30 06 F6 | 	mov	local06, #0
17268     00 12 06 F6 | 	mov	arg01, #0
1726c     13 15 02 F6 | 	mov	arg02, local01
17270     00 16 06 F6 | 	mov	arg03, #0
17274     0A 18 06 F6 | 	mov	arg04, #10
17278     D0 D7 B0 FD | 	call	#__system___basic_print_integer
1727c     FD 32 02 F6 | 	mov	local07, result1
17280     18 2F 02 F6 | 	mov	local05, local06
17284     19 2F 02 F1 | 	add	local05, local07
17288     00 3A 06 F6 | 	mov	local11, #0
1728c     00 12 06 F6 | 	mov	arg01, #0
17290     09 14 06 F6 | 	mov	arg02, #9
17294     00 16 06 F6 | 	mov	arg03, #0
17298     14 D7 B0 FD | 	call	#__system___basic_print_char
1729c     FD 36 02 F6 | 	mov	local09, result1
172a0     FD 2E 02 F1 | 	add	local05, result1
172a4     00 12 06 F6 | 	mov	arg01, #0
172a8     90 27 B1 FD | 	call	#__system___getiolock_0573
172ac     FD 00 68 FC | 	wrlong	#0, result1
172b0     00 FA 05 F6 | 	mov	result1, #0
172b4     00 38 06 F6 | 	mov	local10, #0
172b8                 | LR__1904
172b8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
172b8     1D 2A 0E F2 | 	cmp	local03, #29 wz
172bc     64 00 90 5D |  if_ne	jmp	#LR__1905
172c0     00 12 06 F6 | 	mov	arg01, #0
172c4     74 27 B1 FD | 	call	#__system___getiolock_0573
172c8     FD 12 02 F6 | 	mov	arg01, result1
172cc     44 CA B0 FD | 	call	#__system___lockmem
172d0     00 30 06 F6 | 	mov	local06, #0
172d4     00 12 06 F6 | 	mov	arg01, #0
172d8     13 15 02 F6 | 	mov	arg02, local01
172dc     00 16 06 F6 | 	mov	arg03, #0
172e0     0A 18 06 F6 | 	mov	arg04, #10
172e4     A4 D7 B0 FD | 	call	#__system___basic_print_unsigned
172e8     FD 32 02 F6 | 	mov	local07, result1
172ec     18 2F 02 F6 | 	mov	local05, local06
172f0     19 2F 02 F1 | 	add	local05, local07
172f4     00 3A 06 F6 | 	mov	local11, #0
172f8     00 12 06 F6 | 	mov	arg01, #0
172fc     09 14 06 F6 | 	mov	arg02, #9
17300     00 16 06 F6 | 	mov	arg03, #0
17304     A8 D6 B0 FD | 	call	#__system___basic_print_char
17308     FD 36 02 F6 | 	mov	local09, result1
1730c     FD 2E 02 F1 | 	add	local05, result1
17310     00 12 06 F6 | 	mov	arg01, #0
17314     24 27 B1 FD | 	call	#__system___getiolock_0573
17318     FD 00 68 FC | 	wrlong	#0, result1
1731c     00 FA 05 F6 | 	mov	result1, #0
17320     00 38 06 F6 | 	mov	local10, #0
17324                 | LR__1905
17324                 | '   if t1.result_type=result_float then print t1.result.fresult,
17324     1E 2A 0E F2 | 	cmp	local03, #30 wz
17328     64 00 90 5D |  if_ne	jmp	#LR__1906
1732c     00 12 06 F6 | 	mov	arg01, #0
17330     08 27 B1 FD | 	call	#__system___getiolock_0573
17334     FD 12 02 F6 | 	mov	arg01, result1
17338     D8 C9 B0 FD | 	call	#__system___lockmem
1733c     00 30 06 F6 | 	mov	local06, #0
17340     00 12 06 F6 | 	mov	arg01, #0
17344     13 15 02 F6 | 	mov	arg02, local01
17348     00 16 06 F6 | 	mov	arg03, #0
1734c     23 18 06 F6 | 	mov	arg04, #35
17350     50 FE B0 FD | 	call	#__system___basic_print_float
17354     FD 32 02 F6 | 	mov	local07, result1
17358     18 2F 02 F6 | 	mov	local05, local06
1735c     19 2F 02 F1 | 	add	local05, local07
17360     00 3A 06 F6 | 	mov	local11, #0
17364     00 12 06 F6 | 	mov	arg01, #0
17368     09 14 06 F6 | 	mov	arg02, #9
1736c     00 16 06 F6 | 	mov	arg03, #0
17370     3C D6 B0 FD | 	call	#__system___basic_print_char
17374     FD 36 02 F6 | 	mov	local09, result1
17378     FD 2E 02 F1 | 	add	local05, result1
1737c     00 12 06 F6 | 	mov	arg01, #0
17380     B8 26 B1 FD | 	call	#__system___getiolock_0573
17384     FD 00 68 FC | 	wrlong	#0, result1
17388     00 FA 05 F6 | 	mov	result1, #0
1738c     00 38 06 F6 | 	mov	local10, #0
17390                 | LR__1906
17390                 | '   if t1.result_type=result_string then print t1.result.sresult,
17390     1F 2A 0E F2 | 	cmp	local03, #31 wz
17394     60 00 90 5D |  if_ne	jmp	#LR__1907
17398     00 12 06 F6 | 	mov	arg01, #0
1739c     9C 26 B1 FD | 	call	#__system___getiolock_0573
173a0     FD 12 02 F6 | 	mov	arg01, result1
173a4     6C C9 B0 FD | 	call	#__system___lockmem
173a8     00 30 06 F6 | 	mov	local06, #0
173ac     00 12 06 F6 | 	mov	arg01, #0
173b0     13 15 02 F6 | 	mov	arg02, local01
173b4     00 16 06 F6 | 	mov	arg03, #0
173b8     4C D6 B0 FD | 	call	#__system___basic_print_string
173bc     FD 32 02 F6 | 	mov	local07, result1
173c0     18 2F 02 F6 | 	mov	local05, local06
173c4     19 2F 02 F1 | 	add	local05, local07
173c8     00 3A 06 F6 | 	mov	local11, #0
173cc     00 12 06 F6 | 	mov	arg01, #0
173d0     09 14 06 F6 | 	mov	arg02, #9
173d4     00 16 06 F6 | 	mov	arg03, #0
173d8     D4 D5 B0 FD | 	call	#__system___basic_print_char
173dc     FD 36 02 F6 | 	mov	local09, result1
173e0     FD 2E 02 F1 | 	add	local05, result1
173e4     00 12 06 F6 | 	mov	arg01, #0
173e8     50 26 B1 FD | 	call	#__system___getiolock_0573
173ec     FD 00 68 FC | 	wrlong	#0, result1
173f0     00 FA 05 F6 | 	mov	result1, #0
173f4     00 38 06 F6 | 	mov	local10, #0
173f8                 | LR__1907
173f8                 | LR__1908
173f8                 | ' if r=print_mod_semicolon then 
173f8     22 2C 0E F2 | 	cmp	local04, #34 wz
173fc     1C 01 90 5D |  if_ne	jmp	#LR__1913
17400                 | '   if t1.result_type=result_int then print t1.result.iresult;
17400     1C 2A 0E F2 | 	cmp	local03, #28 wz
17404     50 00 90 5D |  if_ne	jmp	#LR__1909
17408     00 12 06 F6 | 	mov	arg01, #0
1740c     2C 26 B1 FD | 	call	#__system___getiolock_0573
17410     FD 12 02 F6 | 	mov	arg01, result1
17414     FC C8 B0 FD | 	call	#__system___lockmem
17418     00 30 06 F6 | 	mov	local06, #0
1741c     00 38 06 F6 | 	mov	local10, #0
17420     0A 3A 06 F6 | 	mov	local11, #10
17424     00 12 06 F6 | 	mov	arg01, #0
17428     13 15 02 F6 | 	mov	arg02, local01
1742c     00 16 06 F6 | 	mov	arg03, #0
17430     0A 18 06 F6 | 	mov	arg04, #10
17434     14 D6 B0 FD | 	call	#__system___basic_print_integer
17438     FD 32 02 F6 | 	mov	local07, result1
1743c     18 2F 02 F6 | 	mov	local05, local06
17440     19 2F 02 F1 | 	add	local05, local07
17444     00 12 06 F6 | 	mov	arg01, #0
17448     F0 25 B1 FD | 	call	#__system___getiolock_0573
1744c     FD 00 68 FC | 	wrlong	#0, result1
17450     00 FA 05 F6 | 	mov	result1, #0
17454     00 36 06 F6 | 	mov	local09, #0
17458                 | LR__1909
17458                 | '   if t1.result_type=result_uint then print t1.result.uresult;
17458     1D 2A 0E F2 | 	cmp	local03, #29 wz
1745c     50 00 90 5D |  if_ne	jmp	#LR__1910
17460     00 12 06 F6 | 	mov	arg01, #0
17464     D4 25 B1 FD | 	call	#__system___getiolock_0573
17468     FD 12 02 F6 | 	mov	arg01, result1
1746c     A4 C8 B0 FD | 	call	#__system___lockmem
17470     00 30 06 F6 | 	mov	local06, #0
17474     00 38 06 F6 | 	mov	local10, #0
17478     0A 3A 06 F6 | 	mov	local11, #10
1747c     00 12 06 F6 | 	mov	arg01, #0
17480     13 15 02 F6 | 	mov	arg02, local01
17484     00 16 06 F6 | 	mov	arg03, #0
17488     0A 18 06 F6 | 	mov	arg04, #10
1748c     FC D5 B0 FD | 	call	#__system___basic_print_unsigned
17490     FD 32 02 F6 | 	mov	local07, result1
17494     18 2F 02 F6 | 	mov	local05, local06
17498     19 2F 02 F1 | 	add	local05, local07
1749c     00 12 06 F6 | 	mov	arg01, #0
174a0     98 25 B1 FD | 	call	#__system___getiolock_0573
174a4     FD 00 68 FC | 	wrlong	#0, result1
174a8     00 FA 05 F6 | 	mov	result1, #0
174ac     00 36 06 F6 | 	mov	local09, #0
174b0                 | LR__1910
174b0                 | '   if t1.result_type=result_float then print t1.result.fresult;
174b0     1E 2A 0E F2 | 	cmp	local03, #30 wz
174b4     30 00 90 5D |  if_ne	jmp	#LR__1911
174b8     00 12 06 F6 | 	mov	arg01, #0
174bc     7C 25 B1 FD | 	call	#__system___getiolock_0573
174c0     FD 12 02 F6 | 	mov	arg01, result1
174c4     4C C8 B0 FD | 	call	#__system___lockmem
174c8     00 12 06 F6 | 	mov	arg01, #0
174cc     13 15 02 F6 | 	mov	arg02, local01
174d0     00 16 06 F6 | 	mov	arg03, #0
174d4     23 18 06 F6 | 	mov	arg04, #35
174d8     C8 FC B0 FD | 	call	#__system___basic_print_float
174dc     00 12 06 F6 | 	mov	arg01, #0
174e0     58 25 B1 FD | 	call	#__system___getiolock_0573
174e4     FD 00 68 FC | 	wrlong	#0, result1
174e8                 | LR__1911
174e8                 | '   if t1.result_type=result_string then print t1.result.sresult;
174e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
174ec     2C 00 90 5D |  if_ne	jmp	#LR__1912
174f0     00 12 06 F6 | 	mov	arg01, #0
174f4     44 25 B1 FD | 	call	#__system___getiolock_0573
174f8     FD 12 02 F6 | 	mov	arg01, result1
174fc     14 C8 B0 FD | 	call	#__system___lockmem
17500     00 12 06 F6 | 	mov	arg01, #0
17504     13 15 02 F6 | 	mov	arg02, local01
17508     00 16 06 F6 | 	mov	arg03, #0
1750c     F8 D4 B0 FD | 	call	#__system___basic_print_string
17510     00 12 06 F6 | 	mov	arg01, #0
17514     24 25 B1 FD | 	call	#__system___getiolock_0573
17518     FD 00 68 FC | 	wrlong	#0, result1
1751c                 | LR__1912
1751c                 | LR__1913
1751c                 | ' if r=0 then 
1751c     00 2C 0E F2 | 	cmp	local04, #0 wz
17520     1C 01 90 5D |  if_ne	jmp	#LR__1918
17524                 | '   if t1.result_type=result_int then print t1.result.iresult
17524     1C 2A 0E F2 | 	cmp	local03, #28 wz
17528     40 00 90 5D |  if_ne	jmp	#LR__1914
1752c     00 12 06 F6 | 	mov	arg01, #0
17530     08 25 B1 FD | 	call	#__system___getiolock_0573
17534     FD 12 02 F6 | 	mov	arg01, result1
17538     D8 C7 B0 FD | 	call	#__system___lockmem
1753c     00 12 06 F6 | 	mov	arg01, #0
17540     13 15 02 F6 | 	mov	arg02, local01
17544     00 16 06 F6 | 	mov	arg03, #0
17548     0A 18 06 F6 | 	mov	arg04, #10
1754c     FC D4 B0 FD | 	call	#__system___basic_print_integer
17550     00 12 06 F6 | 	mov	arg01, #0
17554     0A 14 06 F6 | 	mov	arg02, #10
17558     00 16 06 F6 | 	mov	arg03, #0
1755c     50 D4 B0 FD | 	call	#__system___basic_print_char
17560     00 12 06 F6 | 	mov	arg01, #0
17564     D4 24 B1 FD | 	call	#__system___getiolock_0573
17568     FD 00 68 FC | 	wrlong	#0, result1
1756c                 | LR__1914
1756c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1756c     1D 2A 0E F2 | 	cmp	local03, #29 wz
17570     40 00 90 5D |  if_ne	jmp	#LR__1915
17574     00 12 06 F6 | 	mov	arg01, #0
17578     C0 24 B1 FD | 	call	#__system___getiolock_0573
1757c     FD 12 02 F6 | 	mov	arg01, result1
17580     90 C7 B0 FD | 	call	#__system___lockmem
17584     00 12 06 F6 | 	mov	arg01, #0
17588     13 15 02 F6 | 	mov	arg02, local01
1758c     00 16 06 F6 | 	mov	arg03, #0
17590     0A 18 06 F6 | 	mov	arg04, #10
17594     F4 D4 B0 FD | 	call	#__system___basic_print_unsigned
17598     00 12 06 F6 | 	mov	arg01, #0
1759c     0A 14 06 F6 | 	mov	arg02, #10
175a0     00 16 06 F6 | 	mov	arg03, #0
175a4     08 D4 B0 FD | 	call	#__system___basic_print_char
175a8     00 12 06 F6 | 	mov	arg01, #0
175ac     8C 24 B1 FD | 	call	#__system___getiolock_0573
175b0     FD 00 68 FC | 	wrlong	#0, result1
175b4                 | LR__1915
175b4                 | '   if t1.result_type=result_float then print t1.result.fresult
175b4     1E 2A 0E F2 | 	cmp	local03, #30 wz
175b8     40 00 90 5D |  if_ne	jmp	#LR__1916
175bc     00 12 06 F6 | 	mov	arg01, #0
175c0     78 24 B1 FD | 	call	#__system___getiolock_0573
175c4     FD 12 02 F6 | 	mov	arg01, result1
175c8     48 C7 B0 FD | 	call	#__system___lockmem
175cc     00 12 06 F6 | 	mov	arg01, #0
175d0     13 15 02 F6 | 	mov	arg02, local01
175d4     00 16 06 F6 | 	mov	arg03, #0
175d8     23 18 06 F6 | 	mov	arg04, #35
175dc     C4 FB B0 FD | 	call	#__system___basic_print_float
175e0     00 12 06 F6 | 	mov	arg01, #0
175e4     0A 14 06 F6 | 	mov	arg02, #10
175e8     00 16 06 F6 | 	mov	arg03, #0
175ec     C0 D3 B0 FD | 	call	#__system___basic_print_char
175f0     00 12 06 F6 | 	mov	arg01, #0
175f4     44 24 B1 FD | 	call	#__system___getiolock_0573
175f8     FD 00 68 FC | 	wrlong	#0, result1
175fc                 | LR__1916
175fc                 | '   if t1.result_type=result_string then print t1.result.sresult
175fc     1F 2A 0E F2 | 	cmp	local03, #31 wz
17600     3C 00 90 5D |  if_ne	jmp	#LR__1917
17604     00 12 06 F6 | 	mov	arg01, #0
17608     30 24 B1 FD | 	call	#__system___getiolock_0573
1760c     FD 12 02 F6 | 	mov	arg01, result1
17610     00 C7 B0 FD | 	call	#__system___lockmem
17614     00 12 06 F6 | 	mov	arg01, #0
17618     13 15 02 F6 | 	mov	arg02, local01
1761c     00 16 06 F6 | 	mov	arg03, #0
17620     E4 D3 B0 FD | 	call	#__system___basic_print_string
17624     00 12 06 F6 | 	mov	arg01, #0
17628     0A 14 06 F6 | 	mov	arg02, #10
1762c     00 16 06 F6 | 	mov	arg03, #0
17630     7C D3 B0 FD | 	call	#__system___basic_print_char
17634     00 12 06 F6 | 	mov	arg01, #0
17638     00 24 B1 FD | 	call	#__system___getiolock_0573
1763c     FD 00 68 FC | 	wrlong	#0, result1
17640                 | LR__1917
17640                 | LR__1918
17640                 | ' if r=print_mod_empty then print
17640     20 2C 0E F2 | 	cmp	local04, #32 wz
17644     2C 00 90 5D |  if_ne	jmp	#LR__1919
17648     00 12 06 F6 | 	mov	arg01, #0
1764c     EC 23 B1 FD | 	call	#__system___getiolock_0573
17650     FD 12 02 F6 | 	mov	arg01, result1
17654     BC C6 B0 FD | 	call	#__system___lockmem
17658     00 12 06 F6 | 	mov	arg01, #0
1765c     0A 14 06 F6 | 	mov	arg02, #10
17660     00 16 06 F6 | 	mov	arg03, #0
17664     48 D3 B0 FD | 	call	#__system___basic_print_char
17668     00 12 06 F6 | 	mov	arg01, #0
1766c     CC 23 B1 FD | 	call	#__system___getiolock_0573
17670     FD 00 68 FC | 	wrlong	#0, result1
17674                 | LR__1919
17674                 | LR__1920
17674     A7 F0 03 F6 | 	mov	ptra, fp
17678     B2 00 A0 FD | 	call	#popregs_
1767c                 | _do_print_ret
1767c     2D 00 64 FD | 	ret
17680                 | 
17680                 | ' 
17680                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
17680                 | ' 
17680                 | ' sub do_push
17680                 | _do_push
17680                 | ' if stackpointer<maxstack then 
17680     43 00 00 FF 
17684     58 E4 05 F1 | 	add	objptr, ##34392
17688     F2 00 02 FB | 	rdlong	_var01, objptr
1768c     43 00 00 FF 
17690     58 E4 85 F1 | 	sub	objptr, ##34392
17694     01 00 00 FF 
17698     00 00 56 F2 | 	cmps	_var01, ##512 wc
1769c     F8 00 90 3D |  if_ae	jmp	#LR__1930
176a0     4A 00 00 FF 
176a4     80 E4 05 F1 | 	add	objptr, ##38016
176a8     F2 02 02 FB | 	rdlong	_var02, objptr
176ac     01 05 02 F6 | 	mov	_var03, _var02
176b0     01 04 66 F0 | 	shl	_var03, #1
176b4     01 05 02 F1 | 	add	_var03, _var02
176b8     02 04 66 F0 | 	shl	_var03, #2
176bc     03 00 00 FF 
176c0     04 E4 85 F1 | 	sub	objptr, ##1540
176c4     F2 04 02 F1 | 	add	_var03, objptr
176c8     02 01 02 FB | 	rdlong	_var01, _var03
176cc     04 04 06 F1 | 	add	_var03, #4
176d0     02 07 02 FB | 	rdlong	_var04, _var03
176d4     01 05 02 F6 | 	mov	_var03, _var02
176d8     01 04 66 F0 | 	shl	_var03, #1
176dc     01 05 02 F1 | 	add	_var03, _var02
176e0     02 04 66 F0 | 	shl	_var03, #2
176e4     F2 04 02 F1 | 	add	_var03, objptr
176e8     08 04 06 F1 | 	add	_var03, #8
176ec     02 03 02 FB | 	rdlong	_var02, _var03
176f0     04 00 00 FF 
176f4     24 E4 85 F1 | 	sub	objptr, ##2084
176f8     F2 04 02 FB | 	rdlong	_var03, objptr
176fc     02 09 02 F6 | 	mov	_var05, _var03
17700     01 08 66 F0 | 	shl	_var05, #1
17704     02 09 02 F1 | 	add	_var05, _var03
17708     02 08 66 F0 | 	shl	_var05, #2
1770c     0C 00 00 FF 
17710     0C E4 85 F1 | 	sub	objptr, ##6156
17714     F2 08 02 F1 | 	add	_var05, objptr
17718     04 01 62 FC | 	wrlong	_var01, _var05
1771c     0C 00 00 FF 
17720     0C E4 05 F1 | 	add	objptr, ##6156
17724     F2 08 02 FB | 	rdlong	_var05, objptr
17728     04 05 02 F6 | 	mov	_var03, _var05
1772c     01 04 66 F0 | 	shl	_var03, #1
17730     04 05 02 F1 | 	add	_var03, _var05
17734     02 04 66 F0 | 	shl	_var03, #2
17738     0C 00 00 FF 
1773c     0C E4 85 F1 | 	sub	objptr, ##6156
17740     F2 04 02 F1 | 	add	_var03, objptr
17744     04 04 06 F1 | 	add	_var03, #4
17748     02 07 62 FC | 	wrlong	_var04, _var03
1774c     0C 00 00 FF 
17750     0C E4 05 F1 | 	add	objptr, ##6156
17754     F2 08 02 FB | 	rdlong	_var05, objptr
17758     04 07 02 F6 | 	mov	_var04, _var05
1775c     01 06 66 F0 | 	shl	_var04, #1
17760     04 07 02 F1 | 	add	_var04, _var05
17764     02 06 66 F0 | 	shl	_var04, #2
17768     0C 00 00 FF 
1776c     0C E4 85 F1 | 	sub	objptr, ##6156
17770     F2 06 02 F1 | 	add	_var04, objptr
17774     08 06 06 F1 | 	add	_var04, #8
17778     03 03 62 FC | 	wrlong	_var02, _var04
1777c     0C 00 00 FF 
17780     0C E4 05 F1 | 	add	objptr, ##6156
17784     F2 00 02 FB | 	rdlong	_var01, objptr
17788     01 00 06 F1 | 	add	_var01, #1
1778c     F2 00 62 FC | 	wrlong	_var01, objptr
17790     43 00 00 FF 
17794     58 E4 85 F1 | 	sub	objptr, ##34392
17798                 | LR__1930
17798                 | _do_push_ret
17798     2D 00 64 FD | 	ret
1779c                 | 
1779c                 | ' 
1779c                 | ' '-------------------- put
1779c                 | ' 
1779c                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1779c                 | _do_put
1779c     03 4A 05 F6 | 	mov	COUNT_, #3
177a0     A8 00 A0 FD | 	call	#pushregs_
177a4     28 F0 07 F1 | 	add	ptra, #40
177a8     4A 00 00 FF 
177ac     80 E4 05 F1 | 	add	objptr, ##38016
177b0     F2 1A 02 FB | 	rdlong	arg05, objptr
177b4     0D 19 02 F6 | 	mov	arg04, arg05
177b8     01 18 66 F0 | 	shl	arg04, #1
177bc     0D 19 02 F1 | 	add	arg04, arg05
177c0     02 18 66 F0 | 	shl	arg04, #2
177c4     03 00 00 FF 
177c8     04 E4 85 F1 | 	sub	objptr, ##1540
177cc     F2 18 02 F1 | 	add	arg04, objptr
177d0     0C 1B 02 FB | 	rdlong	arg05, arg04
177d4     A7 1A 62 FC | 	wrlong	arg05, fp
177d8                 | ' 
177d8                 | ' numpar=compiledline(lineptr_e).result.uresult
177d8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
177d8     04 1A 0E F2 | 	cmp	arg05, #4 wz
177dc     47 00 00 FF 
177e0     7C E4 85 F1 | 	sub	objptr, ##36476
177e4     48 00 90 5D |  if_ne	jmp	#LR__1940
177e8     2C 52 BF FD | 	call	#_pop
177ec     FF 1A 02 F6 | 	mov	arg05, result3
177f0     1C 4E 05 F1 | 	add	fp, #28
177f4     A7 FA 61 FC | 	wrlong	result1, fp
177f8     04 4E 05 F1 | 	add	fp, #4
177fc     A7 FC 61 FC | 	wrlong	result2, fp
17800     04 4E 05 F1 | 	add	fp, #4
17804     A7 1A 62 FC | 	wrlong	arg05, fp
17808     08 4E 85 F1 | 	sub	fp, #8
1780c     A7 12 02 F6 | 	mov	arg01, fp
17810     1C 4E 85 F1 | 	sub	fp, #28
17814     E4 53 BF FD | 	call	#_converttoint
17818     52 00 00 FF 
1781c     1C E4 05 F1 | 	add	objptr, ##42012
17820     F2 FA 61 FC | 	wrlong	result1, objptr
17824     52 00 00 FF 
17828     1C E4 85 F1 | 	sub	objptr, ##42012
1782c     18 00 90 FD | 	jmp	#LR__1941
17830                 | LR__1940
17830     52 00 00 FF 
17834     1C E4 05 F1 | 	add	objptr, ##42012
17838     FF FF FF FF 
1783c     F2 FE 6B FC | 	wrlong	##-1, objptr
17840     52 00 00 FF 
17844     1C E4 85 F1 | 	sub	objptr, ##42012
17848                 | LR__1941
17848                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
17848     A7 1A 02 FB | 	rdlong	arg05, fp
1784c     03 1A 56 F2 | 	cmps	arg05, #3 wc
17850     40 00 90 CD |  if_b	jmp	#LR__1942
17854     C0 51 BF FD | 	call	#_pop
17858     FF 1A 02 F6 | 	mov	arg05, result3
1785c     1C 4E 05 F1 | 	add	fp, #28
17860     A7 FA 61 FC | 	wrlong	result1, fp
17864     04 4E 05 F1 | 	add	fp, #4
17868     A7 FC 61 FC | 	wrlong	result2, fp
1786c     04 4E 05 F1 | 	add	fp, #4
17870     A7 1A 62 FC | 	wrlong	arg05, fp
17874     08 4E 85 F1 | 	sub	fp, #8
17878     A7 12 02 F6 | 	mov	arg01, fp
1787c     1C 4E 85 F1 | 	sub	fp, #28
17880     78 53 BF FD | 	call	#_converttoint
17884     08 4E 05 F1 | 	add	fp, #8
17888     A7 FA 61 FC | 	wrlong	result1, fp
1788c     08 4E 85 F1 | 	sub	fp, #8
17890     0C 00 90 FD | 	jmp	#LR__1943
17894                 | LR__1942
17894     08 4E 05 F1 | 	add	fp, #8
17898     A7 02 68 FC | 	wrlong	#1, fp
1789c     08 4E 85 F1 | 	sub	fp, #8
178a0                 | LR__1943
178a0                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
178a0     A7 18 02 FB | 	rdlong	arg04, fp
178a4     02 18 56 F2 | 	cmps	arg04, #2 wc
178a8     3C 00 90 CD |  if_b	jmp	#LR__1944
178ac     68 51 BF FD | 	call	#_pop
178b0     FF 18 02 F6 | 	mov	arg04, result3
178b4     1C 4E 05 F1 | 	add	fp, #28
178b8     A7 FA 61 FC | 	wrlong	result1, fp
178bc     04 4E 05 F1 | 	add	fp, #4
178c0     A7 FC 61 FC | 	wrlong	result2, fp
178c4     04 4E 05 F1 | 	add	fp, #4
178c8     A7 18 62 FC | 	wrlong	arg04, fp
178cc     08 4E 85 F1 | 	sub	fp, #8
178d0     A7 12 02 F6 | 	mov	arg01, fp
178d4     1C 4E 85 F1 | 	sub	fp, #28
178d8     20 53 BF FD | 	call	#_converttoint
178dc     0C 4E 05 F1 | 	add	fp, #12
178e0     A7 FA 61 FC | 	wrlong	result1, fp
178e4     0C 4E 85 F1 | 	sub	fp, #12
178e8                 | LR__1944
178e8     2C 51 BF FD | 	call	#_pop
178ec     FF 18 02 F6 | 	mov	arg04, result3
178f0     1C 4E 05 F1 | 	add	fp, #28
178f4     A7 FA 61 FC | 	wrlong	result1, fp
178f8     04 4E 05 F1 | 	add	fp, #4
178fc     A7 FC 61 FC | 	wrlong	result2, fp
17900     04 4E 05 F1 | 	add	fp, #4
17904     A7 18 62 FC | 	wrlong	arg04, fp
17908     08 4E 85 F1 | 	sub	fp, #8
1790c     A7 12 02 F6 | 	mov	arg01, fp
17910     1C 4E 85 F1 | 	sub	fp, #28
17914     E4 52 BF FD | 	call	#_converttoint
17918     04 4E 05 F1 | 	add	fp, #4
1791c     A7 FA 61 FC | 	wrlong	result1, fp
17920     10 4E 05 F1 | 	add	fp, #16
17924     A7 26 02 FB | 	rdlong	local01, fp
17928     14 4E 85 F1 | 	sub	fp, #20
1792c     02 26 66 F0 | 	shl	local01, #2
17930     50 00 00 FF 
17934     C4 E4 05 F1 | 	add	objptr, ##41156
17938     F2 26 02 F1 | 	add	local01, objptr
1793c     13 01 68 FC | 	wrlong	#0, local01
17940                 | ' t1=pop() : channel=converttoint(t1)
17940                 | ' getres(j)=0
17940                 | ' if pos>=0 then
17940     01 00 00 FF 
17944     58 E5 05 F1 | 	add	objptr, ##856
17948     F2 28 02 FB | 	rdlong	local02, objptr
1794c     52 00 00 FF 
17950     1C E4 85 F1 | 	sub	objptr, ##42012
17954     00 28 56 F2 | 	cmps	local02, #0 wc
17958     C0 01 90 CD |  if_b	jmp	#LR__1950
1795c     10 4E 05 F1 | 	add	fp, #16
17960     A7 00 68 FC | 	wrlong	#0, fp
17964     10 4E 85 F1 | 	sub	fp, #16
17968                 | '    i=0: do
17968                 | LR__1945
17968     14 4E 05 F1 | 	add	fp, #20
1796c     A7 00 68 FC | 	wrlong	#0, fp
17970     14 4E 85 F1 | 	sub	fp, #20
17974                 | '    j=0: do    
17974                 | LR__1946
17974                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17974     0C 4E 05 F1 | 	add	fp, #12
17978     A7 28 02 FB | 	rdlong	local02, fp
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     00 04 00 FF 
17984     00 28 56 F2 | 	cmps	local02, ##524288 wc
17988     4C 00 90 3D |  if_ae	jmp	#LR__1947
1798c     14 4E 05 F1 | 	add	fp, #20
17990     A7 28 02 FB | 	rdlong	local02, fp
17994     14 27 02 F6 | 	mov	local01, local02
17998     4E 00 00 FF 
1799c     B4 E4 05 F1 | 	add	objptr, ##40116
179a0     F2 26 02 F1 | 	add	local01, objptr
179a4     08 4E 85 F1 | 	sub	fp, #8
179a8     A7 12 02 FB | 	rdlong	arg01, fp
179ac     04 4E 05 F1 | 	add	fp, #4
179b0     A7 18 02 FB | 	rdlong	arg04, fp
179b4     0A 18 66 F0 | 	shl	arg04, #10
179b8     0C 13 02 F1 | 	add	arg01, arg04
179bc     10 4E 85 F1 | 	sub	fp, #16
179c0     14 13 02 F1 | 	add	arg01, local02
179c4     09 FB C1 FA | 	rdbyte	result1, arg01
179c8     4E 00 00 FF 
179cc     B4 E4 85 F1 | 	sub	objptr, ##40116
179d0     13 FB 41 FC | 	wrbyte	result1, local01
179d4     48 00 90 FD | 	jmp	#LR__1948
179d8                 | LR__1947
179d8     14 4E 05 F1 | 	add	fp, #20
179dc     A7 28 02 FB | 	rdlong	local02, fp
179e0     14 27 02 F6 | 	mov	local01, local02
179e4     4E 00 00 FF 
179e8     B4 E4 05 F1 | 	add	objptr, ##40116
179ec     F2 26 02 F1 | 	add	local01, objptr
179f0     08 4E 85 F1 | 	sub	fp, #8
179f4     A7 12 02 FB | 	rdlong	arg01, fp
179f8     04 4E 05 F1 | 	add	fp, #4
179fc     A7 18 02 FB | 	rdlong	arg04, fp
17a00     0A 18 66 F0 | 	shl	arg04, #10
17a04     0C 13 02 F1 | 	add	arg01, arg04
17a08     10 4E 85 F1 | 	sub	fp, #16
17a0c     14 13 02 F1 | 	add	arg01, local02
17a10     4E 00 00 FF 
17a14     B4 E4 85 F1 | 	sub	objptr, ##40116
17a18     CC 8B B0 FD | 	call	#_pspeek
17a1c     13 FB 41 FC | 	wrbyte	result1, local01
17a20                 | LR__1948
17a20     14 4E 05 F1 | 	add	fp, #20
17a24     A7 28 02 FB | 	rdlong	local02, fp
17a28     01 28 06 F1 | 	add	local02, #1
17a2c     A7 28 62 FC | 	wrlong	local02, fp
17a30     14 4E 85 F1 | 	sub	fp, #20
17a34     02 00 00 FF 
17a38     00 28 56 F2 | 	cmps	local02, ##1024 wc
17a3c     2C 00 90 3D |  if_ae	jmp	#LR__1949
17a40     10 4E 05 F1 | 	add	fp, #16
17a44     A7 26 02 FB | 	rdlong	local01, fp
17a48     0A 26 66 F0 | 	shl	local01, #10
17a4c     04 4E 05 F1 | 	add	fp, #4
17a50     A7 28 02 FB | 	rdlong	local02, fp
17a54     14 27 02 F1 | 	add	local01, local02
17a58     0C 4E 85 F1 | 	sub	fp, #12
17a5c     A7 28 02 FB | 	rdlong	local02, fp
17a60     08 4E 85 F1 | 	sub	fp, #8
17a64     14 27 5A F2 | 	cmps	local01, local02 wcz
17a68     08 FF 9F ED |  if_be	jmp	#LR__1946
17a6c                 | LR__1949
17a6c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
17a6c     04 4E 05 F1 | 	add	fp, #4
17a70     A7 12 02 FB | 	rdlong	arg01, fp
17a74     52 00 00 FF 
17a78     1C E4 05 F1 | 	add	objptr, ##42012
17a7c     F2 14 02 FB | 	rdlong	arg02, objptr
17a80     01 14 06 F1 | 	add	arg02, #1
17a84     03 00 00 FF 
17a88     68 E5 85 F1 | 	sub	objptr, ##1896
17a8c     F2 16 02 F6 | 	mov	arg03, objptr
17a90     4E 00 00 FF 
17a94     B4 E4 85 F1 | 	sub	objptr, ##40116
17a98     04 4E 05 F1 | 	add	fp, #4
17a9c     A7 18 02 FB | 	rdlong	arg04, fp
17aa0     08 4E 85 F1 | 	sub	fp, #8
17aa4     01 1A 06 F6 | 	mov	arg05, #1
17aa8     6C D0 B0 FD | 	call	#__system___basic_put
17aac     18 4E 05 F1 | 	add	fp, #24
17ab0     A7 FA 61 FC | 	wrlong	result1, fp
17ab4     14 4E 85 F1 | 	sub	fp, #20
17ab8     A7 26 02 FB | 	rdlong	local01, fp
17abc     02 26 66 F0 | 	shl	local01, #2
17ac0     50 00 00 FF 
17ac4     C4 E4 05 F1 | 	add	objptr, ##41156
17ac8     F2 26 02 F1 | 	add	local01, objptr
17acc     13 FB 61 FC | 	wrlong	result1, local01
17ad0                 | '    if 1024*i+j>amount then exit loop
17ad0     0C 4E 05 F1 | 	add	fp, #12
17ad4     A7 28 02 FB | 	rdlong	local02, fp
17ad8     0A 28 66 F0 | 	shl	local02, #10
17adc     04 4E 05 F1 | 	add	fp, #4
17ae0     A7 26 02 FB | 	rdlong	local01, fp
17ae4     13 29 02 F1 | 	add	local02, local01
17ae8     0C 4E 85 F1 | 	sub	fp, #12
17aec     A7 26 02 FB | 	rdlong	local01, fp
17af0     08 4E 85 F1 | 	sub	fp, #8
17af4     13 29 5A F2 | 	cmps	local02, local01 wcz
17af8     50 00 00 FF 
17afc     C4 E4 85 F1 | 	sub	objptr, ##41156
17b00     CC 01 90 1D |  if_a	jmp	#LR__1957
17b04     10 4E 05 F1 | 	add	fp, #16
17b08     A7 28 02 FB | 	rdlong	local02, fp
17b0c     01 28 06 F1 | 	add	local02, #1
17b10     A7 28 62 FC | 	wrlong	local02, fp
17b14     10 4E 85 F1 | 	sub	fp, #16
17b18     4C FE 9F FD | 	jmp	#LR__1945
17b1c                 | LR__1950
17b1c     10 4E 05 F1 | 	add	fp, #16
17b20     A7 00 68 FC | 	wrlong	#0, fp
17b24     10 4E 85 F1 | 	sub	fp, #16
17b28                 | '    i=0: do
17b28                 | LR__1951
17b28     14 4E 05 F1 | 	add	fp, #20
17b2c     A7 00 68 FC | 	wrlong	#0, fp
17b30     14 4E 85 F1 | 	sub	fp, #20
17b34                 | '    j=0: do  
17b34                 | LR__1952
17b34                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
17b34     0C 4E 05 F1 | 	add	fp, #12
17b38     A7 28 02 FB | 	rdlong	local02, fp
17b3c     0C 4E 85 F1 | 	sub	fp, #12
17b40     00 04 00 FF 
17b44     00 28 56 F2 | 	cmps	local02, ##524288 wc
17b48     4C 00 90 3D |  if_ae	jmp	#LR__1953
17b4c     14 4E 05 F1 | 	add	fp, #20
17b50     A7 28 02 FB | 	rdlong	local02, fp
17b54     14 27 02 F6 | 	mov	local01, local02
17b58     4E 00 00 FF 
17b5c     B4 E4 05 F1 | 	add	objptr, ##40116
17b60     F2 26 02 F1 | 	add	local01, objptr
17b64     08 4E 85 F1 | 	sub	fp, #8
17b68     A7 12 02 FB | 	rdlong	arg01, fp
17b6c     04 4E 05 F1 | 	add	fp, #4
17b70     A7 18 02 FB | 	rdlong	arg04, fp
17b74     0A 18 66 F0 | 	shl	arg04, #10
17b78     0C 13 02 F1 | 	add	arg01, arg04
17b7c     10 4E 85 F1 | 	sub	fp, #16
17b80     14 13 02 F1 | 	add	arg01, local02
17b84     09 FB C1 FA | 	rdbyte	result1, arg01
17b88     4E 00 00 FF 
17b8c     B4 E4 85 F1 | 	sub	objptr, ##40116
17b90     13 FB 41 FC | 	wrbyte	result1, local01
17b94     48 00 90 FD | 	jmp	#LR__1954
17b98                 | LR__1953
17b98     14 4E 05 F1 | 	add	fp, #20
17b9c     A7 28 02 FB | 	rdlong	local02, fp
17ba0     14 27 02 F6 | 	mov	local01, local02
17ba4     4E 00 00 FF 
17ba8     B4 E4 05 F1 | 	add	objptr, ##40116
17bac     F2 26 02 F1 | 	add	local01, objptr
17bb0     08 4E 85 F1 | 	sub	fp, #8
17bb4     A7 12 02 FB | 	rdlong	arg01, fp
17bb8     04 4E 05 F1 | 	add	fp, #4
17bbc     A7 18 02 FB | 	rdlong	arg04, fp
17bc0     0A 18 66 F0 | 	shl	arg04, #10
17bc4     0C 13 02 F1 | 	add	arg01, arg04
17bc8     10 4E 85 F1 | 	sub	fp, #16
17bcc     14 13 02 F1 | 	add	arg01, local02
17bd0     4E 00 00 FF 
17bd4     B4 E4 85 F1 | 	sub	objptr, ##40116
17bd8     0C 8A B0 FD | 	call	#_pspeek
17bdc     13 FB 41 FC | 	wrbyte	result1, local01
17be0                 | LR__1954
17be0     14 4E 05 F1 | 	add	fp, #20
17be4     A7 28 02 FB | 	rdlong	local02, fp
17be8     01 28 06 F1 | 	add	local02, #1
17bec     A7 28 62 FC | 	wrlong	local02, fp
17bf0     14 4E 85 F1 | 	sub	fp, #20
17bf4     02 00 00 FF 
17bf8     00 28 56 F2 | 	cmps	local02, ##1024 wc
17bfc     2C 00 90 3D |  if_ae	jmp	#LR__1955
17c00     10 4E 05 F1 | 	add	fp, #16
17c04     A7 26 02 FB | 	rdlong	local01, fp
17c08     0A 26 66 F0 | 	shl	local01, #10
17c0c     04 4E 05 F1 | 	add	fp, #4
17c10     A7 28 02 FB | 	rdlong	local02, fp
17c14     14 27 02 F1 | 	add	local01, local02
17c18     0C 4E 85 F1 | 	sub	fp, #12
17c1c     A7 28 02 FB | 	rdlong	local02, fp
17c20     08 4E 85 F1 | 	sub	fp, #8
17c24     14 27 5A F2 | 	cmps	local01, local02 wcz
17c28     08 FF 9F ED |  if_be	jmp	#LR__1952
17c2c                 | LR__1955
17c2c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
17c2c     04 4E 05 F1 | 	add	fp, #4
17c30     A7 12 02 FB | 	rdlong	arg01, fp
17c34     4E 00 00 FF 
17c38     B4 E4 05 F1 | 	add	objptr, ##40116
17c3c     F2 16 02 F6 | 	mov	arg03, objptr
17c40     4E 00 00 FF 
17c44     B4 E4 85 F1 | 	sub	objptr, ##40116
17c48     04 4E 05 F1 | 	add	fp, #4
17c4c     A7 18 02 FB | 	rdlong	arg04, fp
17c50     08 4E 85 F1 | 	sub	fp, #8
17c54     00 14 06 F6 | 	mov	arg02, #0
17c58     01 1A 06 F6 | 	mov	arg05, #1
17c5c     B8 CE B0 FD | 	call	#__system___basic_put
17c60     18 4E 05 F1 | 	add	fp, #24
17c64     A7 FA 61 FC | 	wrlong	result1, fp
17c68     14 4E 85 F1 | 	sub	fp, #20
17c6c     A7 26 02 FB | 	rdlong	local01, fp
17c70     02 26 66 F0 | 	shl	local01, #2
17c74     50 00 00 FF 
17c78     C4 E4 05 F1 | 	add	objptr, ##41156
17c7c     F2 26 02 F1 | 	add	local01, objptr
17c80     13 FB 61 FC | 	wrlong	result1, local01
17c84                 | '    if 1024*i+j>amount then exit loop
17c84     0C 4E 05 F1 | 	add	fp, #12
17c88     A7 28 02 FB | 	rdlong	local02, fp
17c8c     0A 28 66 F0 | 	shl	local02, #10
17c90     04 4E 05 F1 | 	add	fp, #4
17c94     A7 26 02 FB | 	rdlong	local01, fp
17c98     13 29 02 F1 | 	add	local02, local01
17c9c     0C 4E 85 F1 | 	sub	fp, #12
17ca0     A7 2A 02 FB | 	rdlong	local03, fp
17ca4     08 4E 85 F1 | 	sub	fp, #8
17ca8     15 29 5A F2 | 	cmps	local02, local03 wcz
17cac     50 00 00 FF 
17cb0     C4 E4 85 F1 | 	sub	objptr, ##41156
17cb4     18 00 90 1D |  if_a	jmp	#LR__1956
17cb8     10 4E 05 F1 | 	add	fp, #16
17cbc     A7 28 02 FB | 	rdlong	local02, fp
17cc0     01 28 06 F1 | 	add	local02, #1
17cc4     A7 28 62 FC | 	wrlong	local02, fp
17cc8     10 4E 85 F1 | 	sub	fp, #16
17ccc     58 FE 9F FD | 	jmp	#LR__1951
17cd0                 | LR__1956
17cd0                 | LR__1957
17cd0     A7 F0 03 F6 | 	mov	ptra, fp
17cd4     B2 00 A0 FD | 	call	#popregs_
17cd8                 | _do_put_ret
17cd8     2D 00 64 FD | 	ret
17cdc                 | 
17cdc                 | ' 
17cdc                 | ' '-------------------- rad
17cdc                 | ' 
17cdc                 | ' sub do_rad
17cdc                 | _do_rad
17cdc     51 00 00 FF 
17ce0     BC E5 05 F1 | 	add	objptr, ##41916
17ce4     00 C0 9F FF 
17ce8     F2 00 68 FC | 	wrlong	##1065353216, objptr
17cec     04 E4 05 F1 | 	add	objptr, #4
17cf0     00 C0 9F FF 
17cf4     F2 00 68 FC | 	wrlong	##1065353216, objptr
17cf8     51 00 00 FF 
17cfc     C0 E5 85 F1 | 	sub	objptr, ##41920
17d00                 | _do_rad_ret
17d00     2D 00 64 FD | 	ret
17d04                 | 
17d04                 | ' 
17d04                 | ' '-------------------- rdpin
17d04                 | ' 
17d04                 | ' sub do_rdpin
17d04                 | _do_rdpin
17d04     00 4A 05 F6 | 	mov	COUNT_, #0
17d08     A8 00 A0 FD | 	call	#pushregs_
17d0c     0C F0 07 F1 | 	add	ptra, #12
17d10     04 4D BF FD | 	call	#_pop
17d14     A7 FA 61 FC | 	wrlong	result1, fp
17d18     04 4E 05 F1 | 	add	fp, #4
17d1c     A7 FC 61 FC | 	wrlong	result2, fp
17d20     04 4E 05 F1 | 	add	fp, #4
17d24     A7 FE 61 FC | 	wrlong	result3, fp
17d28     08 4E 85 F1 | 	sub	fp, #8
17d2c     A7 12 02 F6 | 	mov	arg01, fp
17d30     C8 4E BF FD | 	call	#_converttoint
17d34     FD FA 89 FA | 	rdpin	result1, result1
17d38     52 00 00 FF 
17d3c     20 E4 05 F1 | 	add	objptr, ##42016
17d40     F2 FA 61 FC | 	wrlong	result1, objptr
17d44     52 00 00 FF 
17d48     20 E4 85 F1 | 	sub	objptr, ##42016
17d4c     08 4E 05 F1 | 	add	fp, #8
17d50     A7 3A 68 FC | 	wrlong	#29, fp
17d54     08 4E 85 F1 | 	sub	fp, #8
17d58     A7 08 68 FC | 	wrlong	#4, fp
17d5c     A7 12 02 F6 | 	mov	arg01, fp
17d60     4C 4D BF FD | 	call	#_push
17d64     A7 F0 03 F6 | 	mov	ptra, fp
17d68     B2 00 A0 FD | 	call	#popregs_
17d6c                 | _do_rdpin_ret
17d6c     2D 00 64 FD | 	ret
17d70                 | 
17d70                 | ' 
17d70                 | ' '------------------- release
17d70                 | ' 
17d70                 | ' sub do_release
17d70                 | _do_release
17d70     00 4A 05 F6 | 	mov	COUNT_, #0
17d74     A8 00 A0 FD | 	call	#pushregs_
17d78     10 F0 07 F1 | 	add	ptra, #16
17d7c     98 4C BF FD | 	call	#_pop
17d80     FF 14 02 F6 | 	mov	arg02, result3
17d84     A7 FA 61 FC | 	wrlong	result1, fp
17d88     04 4E 05 F1 | 	add	fp, #4
17d8c     A7 FC 61 FC | 	wrlong	result2, fp
17d90     04 4E 05 F1 | 	add	fp, #4
17d94     A7 14 62 FC | 	wrlong	arg02, fp
17d98     08 4E 85 F1 | 	sub	fp, #8
17d9c     A7 12 02 F6 | 	mov	arg01, fp
17da0     58 4E BF FD | 	call	#_converttoint
17da4     0C 4E 05 F1 | 	add	fp, #12
17da8     A7 FA 61 FC | 	wrlong	result1, fp
17dac                 | ' 
17dac                 | ' t1=pop()
17dac                 | ' channel=converttoint(t1)
17dac                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
17dac     0C 4E 85 F1 | 	sub	fp, #12
17db0     00 FA 55 F2 | 	cmps	result1, #0 wc
17db4     44 00 90 CD |  if_b	jmp	#LR__1960
17db8     0C 4E 05 F1 | 	add	fp, #12
17dbc     A7 14 02 FB | 	rdlong	arg02, fp
17dc0     0C 4E 85 F1 | 	sub	fp, #12
17dc4     08 14 56 F2 | 	cmps	arg02, #8 wc
17dc8     30 00 90 3D |  if_ae	jmp	#LR__1960
17dcc     37 00 00 FF 
17dd0     10 E4 05 F1 | 	add	objptr, ##28176
17dd4     F2 12 02 FB | 	rdlong	arg01, objptr
17dd8     37 00 00 FF 
17ddc     10 E4 85 F1 | 	sub	objptr, ##28176
17de0     0C 4E 05 F1 | 	add	fp, #12
17de4     A7 14 02 FB | 	rdlong	arg02, fp
17de8     0C 4E 85 F1 | 	sub	fp, #12
17dec     06 14 66 F0 | 	shl	arg02, #6
17df0     0A 13 02 F1 | 	add	arg01, arg02
17df4     2C 12 06 F1 | 	add	arg01, #44
17df8     09 FF 69 FC | 	wrlong	#255, arg01
17dfc                 | LR__1960
17dfc     A7 F0 03 F6 | 	mov	ptra, fp
17e00     B2 00 A0 FD | 	call	#popregs_
17e04                 | _do_release_ret
17e04     2D 00 64 FD | 	ret
17e08                 | 
17e08                 | ' 
17e08                 | ' '------------------- return
17e08                 | ' 
17e08                 | ' sub do_return()
17e08                 | _do_return
17e08                 | ' if gosubtop>0 then
17e08     50 00 00 FF 
17e0c     0C E5 05 F1 | 	add	objptr, ##41228
17e10     F2 00 02 FB | 	rdlong	_var01, objptr
17e14     50 00 00 FF 
17e18     0C E5 85 F1 | 	sub	objptr, ##41228
17e1c     01 00 56 F2 | 	cmps	_var01, #1 wc
17e20     8C 00 90 CD |  if_b	jmp	#LR__1970
17e24     50 00 00 FF 
17e28     0C E5 05 F1 | 	add	objptr, ##41228
17e2c     F2 00 02 FB | 	rdlong	_var01, objptr
17e30     03 00 66 F0 | 	shl	_var01, #3
17e34     03 00 00 FF 
17e38     60 E5 85 F1 | 	sub	objptr, ##1888
17e3c     F2 00 02 F1 | 	add	_var01, objptr
17e40     00 01 02 FB | 	rdlong	_var01, _var01
17e44     03 00 00 FF 
17e48     0C E5 05 F1 | 	add	objptr, ##1804
17e4c     F2 00 62 FC | 	wrlong	_var01, objptr
17e50     54 E4 05 F1 | 	add	objptr, #84
17e54     F2 00 02 FB | 	rdlong	_var01, objptr
17e58     03 00 66 F0 | 	shl	_var01, #3
17e5c     03 00 00 FF 
17e60     60 E5 85 F1 | 	sub	objptr, ##1888
17e64     F2 00 02 F1 | 	add	_var01, objptr
17e68     04 00 06 F1 | 	add	_var01, #4
17e6c     00 01 02 FB | 	rdlong	_var01, _var01
17e70     03 00 00 FF 
17e74     10 E5 05 F1 | 	add	objptr, ##1808
17e78     F2 00 62 FC | 	wrlong	_var01, objptr
17e7c     06 00 00 FF 
17e80     40 E4 85 F1 | 	sub	objptr, ##3136
17e84     F2 00 02 FB | 	rdlong	_var01, objptr
17e88     01 00 86 F1 | 	sub	_var01, #1
17e8c     04 E4 05 F1 | 	add	objptr, #4
17e90     F2 00 62 FC | 	wrlong	_var01, objptr
17e94     06 00 00 FF 
17e98     8C E4 05 F1 | 	add	objptr, ##3212
17e9c     F2 00 02 FB | 	rdlong	_var01, objptr
17ea0     01 00 86 F1 | 	sub	_var01, #1
17ea4     F2 00 62 FC | 	wrlong	_var01, objptr
17ea8     50 00 00 FF 
17eac     0C E5 85 F1 | 	sub	objptr, ##41228
17eb0                 | LR__1970
17eb0                 | _do_return_ret
17eb0     2D 00 64 FD | 	ret
17eb4                 | 
17eb4                 | ' 
17eb4                 | ' '------------------- right$
17eb4                 | ' 
17eb4                 | ' sub do_right
17eb4                 | _do_right
17eb4     00 4A 05 F6 | 	mov	COUNT_, #0
17eb8     A8 00 A0 FD | 	call	#pushregs_
17ebc     14 F0 07 F1 | 	add	ptra, #20
17ec0     4A 00 00 FF 
17ec4     80 E4 05 F1 | 	add	objptr, ##38016
17ec8     F2 16 02 FB | 	rdlong	arg03, objptr
17ecc     0B 15 02 F6 | 	mov	arg02, arg03
17ed0     01 14 66 F0 | 	shl	arg02, #1
17ed4     0B 15 02 F1 | 	add	arg02, arg03
17ed8     02 14 66 F0 | 	shl	arg02, #2
17edc     03 00 00 FF 
17ee0     04 E4 85 F1 | 	sub	objptr, ##1540
17ee4     F2 14 02 F1 | 	add	arg02, objptr
17ee8     0A 17 02 FB | 	rdlong	arg03, arg02
17eec     0C 4E 05 F1 | 	add	fp, #12
17ef0     A7 16 62 FC | 	wrlong	arg03, fp
17ef4                 | ' 
17ef4                 | ' numpar=compiledline(lineptr_e).result.uresult
17ef4                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
17ef4     0C 4E 85 F1 | 	sub	fp, #12
17ef8     02 16 0E F2 | 	cmp	arg03, #2 wz
17efc     47 00 00 FF 
17f00     7C E4 85 F1 | 	sub	objptr, ##36476
17f04     40 00 90 AD |  if_e	jmp	#LR__1980
17f08     00 12 06 F6 | 	mov	arg01, #0
17f0c     2C 1B B1 FD | 	call	#__system___getiolock_0573
17f10     FD 12 02 F6 | 	mov	arg01, result1
17f14     FC BD B0 FD | 	call	#__system___lockmem
17f18     A1 01 00 FF 
17f1c     7B 14 06 F6 | 	mov	arg02, ##@LR__5769
17f20     00 12 06 F6 | 	mov	arg01, #0
17f24     00 16 06 F6 | 	mov	arg03, #0
17f28     DC CA B0 FD | 	call	#__system___basic_print_string
17f2c     00 12 06 F6 | 	mov	arg01, #0
17f30     08 1B B1 FD | 	call	#__system___getiolock_0573
17f34     FD 00 68 FC | 	wrlong	#0, result1
17f38     27 12 06 F6 | 	mov	arg01, #39
17f3c     00 14 06 F6 | 	mov	arg02, #0
17f40     40 84 B0 FD | 	call	#_printerror
17f44     EC 00 90 FD | 	jmp	#LR__1983
17f48                 | LR__1980
17f48     CC 4A BF FD | 	call	#_pop
17f4c     FF 16 02 F6 | 	mov	arg03, result3
17f50     A7 FA 61 FC | 	wrlong	result1, fp
17f54     04 4E 05 F1 | 	add	fp, #4
17f58     A7 FC 61 FC | 	wrlong	result2, fp
17f5c     04 4E 05 F1 | 	add	fp, #4
17f60     A7 16 62 FC | 	wrlong	arg03, fp
17f64     08 4E 85 F1 | 	sub	fp, #8
17f68     A7 12 02 F6 | 	mov	arg01, fp
17f6c     8C 4C BF FD | 	call	#_converttoint
17f70     FD 16 02 F6 | 	mov	arg03, result1
17f74     10 4E 05 F1 | 	add	fp, #16
17f78     A7 16 62 FC | 	wrlong	arg03, fp
17f7c     10 4E 85 F1 | 	sub	fp, #16
17f80     94 4A BF FD | 	call	#_pop
17f84     FF 16 02 F6 | 	mov	arg03, result3
17f88     A7 FA 61 FC | 	wrlong	result1, fp
17f8c     04 4E 05 F1 | 	add	fp, #4
17f90     A7 FC 61 FC | 	wrlong	result2, fp
17f94     04 4E 05 F1 | 	add	fp, #4
17f98     A7 16 62 FC | 	wrlong	arg03, fp
17f9c                 | ' t1=pop() : arg=converttoint(t1)
17f9c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17f9c     08 4E 85 F1 | 	sub	fp, #8
17fa0     2B 16 0E F2 | 	cmp	arg03, #43 wz
17fa4     18 00 90 5D |  if_ne	jmp	#LR__1981
17fa8     A7 12 02 FB | 	rdlong	arg01, fp
17fac     E0 4B BF FD | 	call	#_convertstring
17fb0     A7 FA 61 FC | 	wrlong	result1, fp
17fb4     08 4E 05 F1 | 	add	fp, #8
17fb8     A7 3E 68 FC | 	wrlong	#31, fp
17fbc     08 4E 85 F1 | 	sub	fp, #8
17fc0                 | LR__1981
17fc0                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
17fc0     08 4E 05 F1 | 	add	fp, #8
17fc4     A7 16 02 FB | 	rdlong	arg03, fp
17fc8     08 4E 85 F1 | 	sub	fp, #8
17fcc     1F 16 0E F2 | 	cmp	arg03, #31 wz
17fd0     40 00 90 AD |  if_e	jmp	#LR__1982
17fd4     00 12 06 F6 | 	mov	arg01, #0
17fd8     60 1A B1 FD | 	call	#__system___getiolock_0573
17fdc     FD 12 02 F6 | 	mov	arg01, result1
17fe0     30 BD B0 FD | 	call	#__system___lockmem
17fe4     A1 01 00 FF 
17fe8     84 14 06 F6 | 	mov	arg02, ##@LR__5770
17fec     00 12 06 F6 | 	mov	arg01, #0
17ff0     00 16 06 F6 | 	mov	arg03, #0
17ff4     10 CA B0 FD | 	call	#__system___basic_print_string
17ff8     00 12 06 F6 | 	mov	arg01, #0
17ffc     3C 1A B1 FD | 	call	#__system___getiolock_0573
18000     FD 00 68 FC | 	wrlong	#0, result1
18004     0F 12 06 F6 | 	mov	arg01, #15
18008     00 14 06 F6 | 	mov	arg02, #0
1800c     74 83 B0 FD | 	call	#_printerror
18010     20 00 90 FD | 	jmp	#LR__1983
18014                 | LR__1982
18014     A7 12 02 FB | 	rdlong	arg01, fp
18018     10 4E 05 F1 | 	add	fp, #16
1801c     A7 14 02 FB | 	rdlong	arg02, fp
18020     10 4E 85 F1 | 	sub	fp, #16
18024     F0 DD B0 FD | 	call	#__system__Right_S
18028     A7 FA 61 FC | 	wrlong	result1, fp
1802c     A7 12 02 F6 | 	mov	arg01, fp
18030     7C 4A BF FD | 	call	#_push
18034                 | LR__1983
18034     A7 F0 03 F6 | 	mov	ptra, fp
18038     B2 00 A0 FD | 	call	#popregs_
1803c                 | _do_right_ret
1803c     2D 00 64 FD | 	ret
18040                 | 
18040                 | ' 
18040                 | ' '------------------- rnd
18040                 | ' 
18040                 | ' sub do_rnd
18040                 | _do_rnd
18040     01 4A 05 F6 | 	mov	COUNT_, #1
18044     A8 00 A0 FD | 	call	#pushregs_
18048     10 F0 07 F1 | 	add	ptra, #16
1804c     4A 00 00 FF 
18050     80 E4 05 F1 | 	add	objptr, ##38016
18054     F2 26 02 FB | 	rdlong	local01, objptr
18058     13 17 02 F6 | 	mov	arg03, local01
1805c     01 16 66 F0 | 	shl	arg03, #1
18060     13 17 02 F1 | 	add	arg03, local01
18064     02 16 66 F0 | 	shl	arg03, #2
18068     03 00 00 FF 
1806c     04 E4 85 F1 | 	sub	objptr, ##1540
18070     F2 16 02 F1 | 	add	arg03, objptr
18074     0B 17 02 FB | 	rdlong	arg03, arg03
18078     0C 4E 05 F1 | 	add	fp, #12
1807c     A7 16 62 FC | 	wrlong	arg03, fp
18080                 | ' 
18080                 | ' numpar=compiledline(lineptr_e).result.uresult
18080                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
18080     0C 4E 85 F1 | 	sub	fp, #12
18084     02 16 16 F2 | 	cmp	arg03, #2 wc
18088     47 00 00 FF 
1808c     7C E4 85 F1 | 	sub	objptr, ##36476
18090     40 00 90 CD |  if_b	jmp	#LR__1990
18094     00 12 06 F6 | 	mov	arg01, #0
18098     A0 19 B1 FD | 	call	#__system___getiolock_0573
1809c     FD 12 02 F6 | 	mov	arg01, result1
180a0     70 BC B0 FD | 	call	#__system___lockmem
180a4     A1 01 00 FF 
180a8     8D 14 06 F6 | 	mov	arg02, ##@LR__5771
180ac     00 12 06 F6 | 	mov	arg01, #0
180b0     00 16 06 F6 | 	mov	arg03, #0
180b4     50 C9 B0 FD | 	call	#__system___basic_print_string
180b8     00 12 06 F6 | 	mov	arg01, #0
180bc     7C 19 B1 FD | 	call	#__system___getiolock_0573
180c0     FD 00 68 FC | 	wrlong	#0, result1
180c4     27 12 06 F6 | 	mov	arg01, #39
180c8     00 14 06 F6 | 	mov	arg02, #0
180cc     B4 82 B0 FD | 	call	#_printerror
180d0     30 01 90 FD | 	jmp	#LR__1997
180d4                 | LR__1990
180d4                 | ' if numpar=0 then
180d4     0C 4E 05 F1 | 	add	fp, #12
180d8     A7 FE 09 FB | 	rdlong	result3, fp wz
180dc     0C 4E 85 F1 | 	sub	fp, #12
180e0     20 00 90 5D |  if_ne	jmp	#LR__1991
180e4     08 4E 05 F1 | 	add	fp, #8
180e8     A7 3A 68 FC | 	wrlong	#29, fp
180ec     08 4E 85 F1 | 	sub	fp, #8
180f0     1B FA 61 FD | 	getrnd	result1
180f4     A7 FA 61 FC | 	wrlong	result1, fp
180f8     A7 12 02 F6 | 	mov	arg01, fp
180fc     B0 49 BF FD | 	call	#_push
18100     00 01 90 FD | 	jmp	#LR__1996
18104                 | LR__1991
18104     10 49 BF FD | 	call	#_pop
18108     A7 FA 61 FC | 	wrlong	result1, fp
1810c     04 4E 05 F1 | 	add	fp, #4
18110     A7 FC 61 FC | 	wrlong	result2, fp
18114     04 4E 05 F1 | 	add	fp, #4
18118     A7 FE 61 FC | 	wrlong	result3, fp
1811c                 | '   t1=pop()
1811c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1811c     08 4E 85 F1 | 	sub	fp, #8
18120     1C FE 0D F2 | 	cmp	result3, #28 wz
18124     08 4E 05 51 |  if_ne	add	fp, #8
18128     A7 26 02 5B |  if_ne	rdlong	local01, fp
1812c     08 4E 85 51 |  if_ne	sub	fp, #8
18130     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
18134     2C 00 90 5D |  if_ne	jmp	#LR__1992
18138     1B FA 61 FD | 	getrnd	result1
1813c     A7 26 02 FB | 	rdlong	local01, fp
18140     13 FB 11 FD | 	qdiv	result1, local01
18144     A7 12 02 F6 | 	mov	arg01, fp
18148     19 26 62 FD | 	getqy	local01
1814c     A7 26 62 FC | 	wrlong	local01, fp
18150     08 4E 05 F1 | 	add	fp, #8
18154     A7 3A 68 FC | 	wrlong	#29, fp
18158     08 4E 85 F1 | 	sub	fp, #8
1815c     50 49 BF FD | 	call	#_push
18160     A0 00 90 FD | 	jmp	#LR__1995
18164                 | LR__1992
18164     08 4E 05 F1 | 	add	fp, #8
18168     A7 26 02 FB | 	rdlong	local01, fp
1816c     08 4E 85 F1 | 	sub	fp, #8
18170     1E 26 0E F2 | 	cmp	local01, #30 wz
18174     48 00 90 5D |  if_ne	jmp	#LR__1993
18178     A7 12 02 FB | 	rdlong	arg01, fp
1817c     00 C0 24 FF 
18180     00 14 06 F6 | 	mov	arg02, ##1233125376
18184     08 EC B0 FD | 	call	#__system___float_div
18188     FD 26 02 F6 | 	mov	local01, result1
1818c     1B 12 62 FD | 	getrnd	arg01
18190     74 13 06 F4 | 	bitl	arg01, #372
18194     F0 E5 B0 FD | 	call	#__system___float_fromuns
18198     FD 14 02 F6 | 	mov	arg02, result1
1819c     13 13 02 F6 | 	mov	arg01, local01
181a0     E8 E9 B0 FD | 	call	#__system___float_mul
181a4     A7 FA 61 FC | 	wrlong	result1, fp
181a8     08 4E 05 F1 | 	add	fp, #8
181ac     A7 3C 68 FC | 	wrlong	#30, fp
181b0     08 4E 85 F1 | 	sub	fp, #8
181b4     A7 12 02 F6 | 	mov	arg01, fp
181b8     F4 48 BF FD | 	call	#_push
181bc     44 00 90 FD | 	jmp	#LR__1994
181c0                 | LR__1993
181c0                 | '     print "rnd: "; : printerror(40) 
181c0     00 12 06 F6 | 	mov	arg01, #0
181c4     74 18 B1 FD | 	call	#__system___getiolock_0573
181c8     FD 12 02 F6 | 	mov	arg01, result1
181cc     44 BB B0 FD | 	call	#__system___lockmem
181d0     A1 01 00 FF 
181d4     93 14 06 F6 | 	mov	arg02, ##@LR__5772
181d8     00 12 06 F6 | 	mov	arg01, #0
181dc     00 16 06 F6 | 	mov	arg03, #0
181e0     24 C8 B0 FD | 	call	#__system___basic_print_string
181e4     00 12 06 F6 | 	mov	arg01, #0
181e8     50 18 B1 FD | 	call	#__system___getiolock_0573
181ec     FD 00 68 FC | 	wrlong	#0, result1
181f0     28 12 06 F6 | 	mov	arg01, #40
181f4     00 14 06 F6 | 	mov	arg02, #0
181f8     88 81 B0 FD | 	call	#_printerror
181fc     A7 12 02 F6 | 	mov	arg01, fp
18200     AC 48 BF FD | 	call	#_push
18204                 | LR__1994
18204                 | LR__1995
18204                 | LR__1996
18204                 | LR__1997
18204     A7 F0 03 F6 | 	mov	ptra, fp
18208     B2 00 A0 FD | 	call	#popregs_
1820c                 | _do_rnd_ret
1820c     2D 00 64 FD | 	ret
18210                 | 
18210                 | ' 
18210                 | ' '-------------------- round
18210                 | ' 
18210                 | ' sub do_round
18210                 | _do_round
18210     00 4A 05 F6 | 	mov	COUNT_, #0
18214     A8 00 A0 FD | 	call	#pushregs_
18218     0C F0 07 F1 | 	add	ptra, #12
1821c     F8 47 BF FD | 	call	#_pop
18220     A7 FA 61 FC | 	wrlong	result1, fp
18224     04 4E 05 F1 | 	add	fp, #4
18228     A7 FC 61 FC | 	wrlong	result2, fp
1822c     04 4E 05 F1 | 	add	fp, #4
18230     A7 FE 61 FC | 	wrlong	result3, fp
18234     08 4E 85 F1 | 	sub	fp, #8
18238     A7 12 02 F6 | 	mov	arg01, fp
1823c     BC 49 BF FD | 	call	#_converttoint
18240     A7 FA 61 FC | 	wrlong	result1, fp
18244     08 4E 05 F1 | 	add	fp, #8
18248     A7 38 68 FC | 	wrlong	#28, fp
1824c     08 4E 85 F1 | 	sub	fp, #8
18250     A7 12 02 F6 | 	mov	arg01, fp
18254     58 48 BF FD | 	call	#_push
18258     A7 F0 03 F6 | 	mov	ptra, fp
1825c     B2 00 A0 FD | 	call	#popregs_
18260                 | _do_round_ret
18260     2D 00 64 FD | 	ret
18264                 | 
18264                 | ' 
18264                 | ' '-------------------- rqpin
18264                 | ' 
18264                 | ' sub do_rqpin
18264                 | _do_rqpin
18264     00 4A 05 F6 | 	mov	COUNT_, #0
18268     A8 00 A0 FD | 	call	#pushregs_
1826c     0C F0 07 F1 | 	add	ptra, #12
18270     A4 47 BF FD | 	call	#_pop
18274     A7 FA 61 FC | 	wrlong	result1, fp
18278     04 4E 05 F1 | 	add	fp, #4
1827c     A7 FC 61 FC | 	wrlong	result2, fp
18280     04 4E 05 F1 | 	add	fp, #4
18284     A7 FE 61 FC | 	wrlong	result3, fp
18288     08 4E 85 F1 | 	sub	fp, #8
1828c     A7 12 02 F6 | 	mov	arg01, fp
18290     68 49 BF FD | 	call	#_converttoint
18294     FD 12 02 F6 | 	mov	arg01, result1
18298     00 FA 05 F6 | 	mov	result1, #0
1829c     09 FB 81 FA | 	rqpin	result1, arg01
182a0     52 00 00 FF 
182a4     20 E4 05 F1 | 	add	objptr, ##42016
182a8     F2 FA 61 FC | 	wrlong	result1, objptr
182ac     52 00 00 FF 
182b0     20 E4 85 F1 | 	sub	objptr, ##42016
182b4     08 4E 05 F1 | 	add	fp, #8
182b8     A7 3A 68 FC | 	wrlong	#29, fp
182bc     08 4E 85 F1 | 	sub	fp, #8
182c0     A7 08 68 FC | 	wrlong	#4, fp
182c4     A7 12 02 F6 | 	mov	arg01, fp
182c8     E4 47 BF FD | 	call	#_push
182cc     A7 F0 03 F6 | 	mov	ptra, fp
182d0     B2 00 A0 FD | 	call	#popregs_
182d4                 | _do_rqpin_ret
182d4     2D 00 64 FD | 	ret
182d8                 | 
182d8                 | ' 
182d8                 | ' ' ------------------ run
182d8                 | ' 
182d8                 | ' sub do_run
182d8                 | _do_run
182d8     04 4A 05 F6 | 	mov	COUNT_, #4
182dc     A8 00 A0 FD | 	call	#pushregs_
182e0     4A 00 00 FF 
182e4     80 E4 05 F1 | 	add	objptr, ##38016
182e8     F2 26 02 FB | 	rdlong	local01, objptr
182ec     06 00 00 FF 
182f0     38 E4 05 F1 | 	add	objptr, ##3128
182f4     F2 28 02 FB | 	rdlong	local02, objptr
182f8     04 E4 05 F1 | 	add	objptr, #4
182fc     F2 2A 02 FB | 	rdlong	local03, objptr
18300     13 19 02 F6 | 	mov	arg04, local01
18304     0C 17 02 F6 | 	mov	arg03, arg04
18308     01 16 66 F0 | 	shl	arg03, #1
1830c     0C 17 02 F1 | 	add	arg03, arg04
18310     02 16 66 F0 | 	shl	arg03, #2
18314     09 00 00 FF 
18318     40 E4 85 F1 | 	sub	objptr, ##4672
1831c     F2 16 02 F1 | 	add	arg03, objptr
18320     0B 15 02 FB | 	rdlong	arg02, arg03
18324                 | ' 
18324                 | ' r_lineptr_e=lineptr_e
18324                 | ' r_runptr=runptr
18324                 | ' r_runptr2=runptr2
18324                 | ' 
18324                 | ' numpar=compiledline(lineptr_e).result.uresult
18324                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
18324     01 14 0E F2 | 	cmp	arg02, #1 wz
18328     47 00 00 FF 
1832c     7C E4 85 F1 | 	sub	objptr, ##36476
18330     00 12 06 A6 |  if_e	mov	arg01, #0
18334     6C C1 BF AD |  if_e	call	#_do_load
18338     4A 00 00 FF 
1833c     88 E4 05 F1 | 	add	objptr, ##38024
18340     F2 18 02 FB | 	rdlong	arg04, objptr
18344     06 00 00 FF 
18348     30 E4 05 F1 | 	add	objptr, ##3120
1834c     F2 18 62 FC | 	wrlong	arg04, objptr
18350     04 E4 05 F1 | 	add	objptr, #4
18354     F2 00 68 FC | 	wrlong	#0, objptr
18358     04 E4 05 F1 | 	add	objptr, #4
1835c     FF FF FF FF 
18360     F2 FE 6B FC | 	wrlong	##-1, objptr
18364                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
18364                 | ' if inrun>0 then 
18364     2C E4 05 F1 | 	add	objptr, #44
18368     F2 18 02 FB | 	rdlong	arg04, objptr
1836c     50 00 00 FF 
18370     EC E4 85 F1 | 	sub	objptr, ##41196
18374     01 18 16 F2 | 	cmp	arg04, #1 wc
18378     30 00 90 CD |  if_b	jmp	#LR__2000
1837c     50 00 00 FF 
18380     F0 E4 05 F1 | 	add	objptr, ##41200
18384     F2 12 02 F6 | 	mov	arg01, objptr
18388     38 E4 85 F1 | 	sub	objptr, #56
1838c     F2 14 02 FB | 	rdlong	arg02, objptr
18390     18 16 06 F6 | 	mov	arg03, #24
18394     44 00 00 FF 
18398     EC E5 85 F1 | 	sub	objptr, ##35308
1839c     34 AD B0 FD | 	call	#_psram_spin2_read1
183a0     0B 00 00 FF 
183a4     CC E4 85 F1 | 	sub	objptr, ##5836
183a8                 | '   psram.read1(varptr(runheader),runptr,24)  
183a8                 | '   return
183a8     0C 03 90 FD | 	jmp	#LR__2007
183ac                 | LR__2000
183ac     50 00 00 FF 
183b0     EC E4 05 F1 | 	add	objptr, ##41196
183b4     F2 02 68 FC | 	wrlong	#1, objptr
183b8     04 E4 05 F1 | 	add	objptr, #4
183bc     F2 12 02 F6 | 	mov	arg01, objptr
183c0     38 E4 85 F1 | 	sub	objptr, #56
183c4     F2 14 02 FB | 	rdlong	arg02, objptr
183c8     18 16 06 F6 | 	mov	arg03, #24
183cc     44 00 00 FF 
183d0     EC E5 85 F1 | 	sub	objptr, ##35308
183d4     FC AC B0 FD | 	call	#_psram_spin2_read1
183d8                 | ' inrun=1
183d8                 | ' psram.read1(varptr(runheader),runptr,24) 
183d8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
183d8     45 00 00 FF 
183dc     24 E4 05 F1 | 	add	objptr, ##35364
183e0     F2 2C 02 FB | 	rdlong	local04, objptr
183e4     50 00 00 FF 
183e8     F0 E4 85 F1 | 	sub	objptr, ##41200
183ec     FF FF 7F FF 
183f0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
183f4     50 00 00 AF 
183f8     EC E4 05 A1 |  if_e	add	objptr, ##41196
183fc     F2 00 68 AC |  if_e	wrlong	#0, objptr
18400     50 00 00 AF 
18404     EC E4 85 A1 |  if_e	sub	objptr, ##41196
18408     AC 02 90 AD |  if_e	jmp	#LR__2007
1840c                 | ' do 
1840c                 | LR__2001
1840c                 | '   if runptr<>oldrunptr then
1840c     50 00 00 FF 
18410     B8 E4 05 F1 | 	add	objptr, ##41144
18414     F2 2C 02 FB | 	rdlong	local04, objptr
18418     08 E4 05 F1 | 	add	objptr, #8
1841c     F2 18 02 FB | 	rdlong	arg04, objptr
18420     50 00 00 FF 
18424     C0 E4 85 F1 | 	sub	objptr, ##41152
18428     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1842c     CC 00 90 AD |  if_e	jmp	#LR__2002
18430     50 00 00 FF 
18434     F0 E4 05 F1 | 	add	objptr, ##41200
18438     F2 12 02 F6 | 	mov	arg01, objptr
1843c     38 E4 85 F1 | 	sub	objptr, #56
18440     F2 14 02 FB | 	rdlong	arg02, objptr
18444     18 16 06 F6 | 	mov	arg03, #24
18448     44 00 00 FF 
1844c     EC E5 85 F1 | 	sub	objptr, ##35308
18450     80 AC B0 FD | 	call	#_psram_spin2_read1
18454     3B 00 00 FF 
18458     B0 E5 05 F1 | 	add	objptr, ##30640
1845c     F2 12 02 F6 | 	mov	arg01, objptr
18460     09 00 00 FF 
18464     3C E4 05 F1 | 	add	objptr, ##4668
18468     F2 14 02 FB | 	rdlong	arg02, objptr
1846c     0B 00 00 FF 
18470     54 E4 85 F1 | 	sub	objptr, ##5716
18474     F2 2C 02 FB | 	rdlong	local04, objptr
18478     01 2C 66 F0 | 	shl	local04, #1
1847c     16 15 02 F1 | 	add	arg02, local04
18480     0B 00 00 FF 
18484     94 E4 05 F1 | 	add	objptr, ##5780
18488     F2 16 02 FB | 	rdlong	arg03, objptr
1848c     40 E4 85 F1 | 	sub	objptr, #64
18490     F2 2C 02 FB | 	rdlong	local04, objptr
18494     16 17 82 F1 | 	sub	arg03, local04
18498     44 00 00 FF 
1849c     EC E5 85 F1 | 	sub	objptr, ##35308
184a0     30 AC B0 FD | 	call	#_psram_spin2_read1
184a4     45 00 00 FF 
184a8     2C E4 05 F1 | 	add	objptr, ##35372
184ac     F2 2C 02 FB | 	rdlong	local04, objptr
184b0     40 E4 85 F1 | 	sub	objptr, #64
184b4     F2 14 02 FB | 	rdlong	arg02, objptr
184b8     0A 2D 82 F1 | 	sub	local04, arg02
184bc     0B 00 00 FF 
184c0     54 E4 85 F1 | 	sub	objptr, ##5716
184c4     F2 14 02 FB | 	rdlong	arg02, objptr
184c8     0A 2D 12 FD | 	qdiv	local04, arg02
184cc     05 00 00 FF 
184d0     18 E4 05 F1 | 	add	objptr, ##2584
184d4     18 2C 62 FD | 	getqx	local04
184d8     03 2C 86 F1 | 	sub	local04, #3
184dc     F2 2C 62 FC | 	wrlong	local04, objptr
184e0     06 00 00 FF 
184e4     3C E4 05 F1 | 	add	objptr, ##3132
184e8     F2 2C 02 FB | 	rdlong	local04, objptr
184ec     08 E4 05 F1 | 	add	objptr, #8
184f0     F2 2C 62 FC | 	wrlong	local04, objptr
184f4     50 00 00 FF 
184f8     C0 E4 85 F1 | 	sub	objptr, ##41152
184fc                 | LR__2002
184fc     50 00 00 FF 
18500     04 E5 05 F1 | 	add	objptr, ##41220
18504     F2 2C 02 FB | 	rdlong	local04, objptr
18508     4C E4 85 F1 | 	sub	objptr, #76
1850c     F2 2C 62 FC | 	wrlong	local04, objptr
18510     04 E4 05 F1 | 	add	objptr, #4
18514     F2 12 02 FB | 	rdlong	arg01, objptr
18518     50 00 00 FF 
1851c     BC E4 85 F1 | 	sub	objptr, ##41148
18520     F0 43 BF FD | 	call	#_execute_line
18524     50 00 00 FF 
18528     BC E4 05 F1 | 	add	objptr, ##41148
1852c     F2 FA 61 FC | 	wrlong	result1, objptr
18530     04 E4 85 F1 | 	sub	objptr, #4
18534     F2 2C 02 FB | 	rdlong	local04, objptr
18538     50 00 00 FF 
1853c     B8 E4 85 F1 | 	sub	objptr, ##41144
18540     FF FF 3F FF 
18544     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
18548     4C 00 90 AD |  if_e	jmp	#LR__2005
1854c     E0 12 06 F6 | 	mov	arg01, #224
18550     10 AF B0 FD | 	call	#_usbnew_spin2_keystate
18554     00 FA 0D F2 | 	cmp	result1, #0 wz
18558     10 00 90 5D |  if_ne	jmp	#LR__2003
1855c     E4 12 06 F6 | 	mov	arg01, #228
18560     00 AF B0 FD | 	call	#_usbnew_spin2_keystate
18564     00 FA 0D F2 | 	cmp	result1, #0 wz
18568     10 00 90 AD |  if_e	jmp	#LR__2004
1856c                 | LR__2003
1856c     06 12 06 F6 | 	mov	arg01, #6
18570     F0 AE B0 FD | 	call	#_usbnew_spin2_keystate
18574     00 FA 0D F2 | 	cmp	result1, #0 wz
18578     1C 00 90 5D |  if_ne	jmp	#LR__2005
1857c                 | LR__2004
1857c     50 00 00 FF 
18580     EC E4 05 F1 | 	add	objptr, ##41196
18584     F2 2C 02 FB | 	rdlong	local04, objptr
18588     50 00 00 FF 
1858c     EC E4 85 F1 | 	sub	objptr, ##41196
18590     02 2C 0E F2 | 	cmp	local04, #2 wz
18594     74 FE 9F 5D |  if_ne	jmp	#LR__2001
18598                 | LR__2005
18598                 | '   ''do whatever kbm.peek_latest_key()=$106 
18598                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
18598     50 00 00 FF 
1859c     B8 E4 05 F1 | 	add	objptr, ##41144
185a0     F2 2C 02 FB | 	rdlong	local04, objptr
185a4     50 00 00 FF 
185a8     B8 E4 85 F1 | 	sub	objptr, ##41144
185ac     FF FF 3F FF 
185b0     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
185b4     AC 00 90 AD |  if_e	jmp	#LR__2006
185b8     50 00 00 FF 
185bc     EC E4 05 F1 | 	add	objptr, ##41196
185c0     F2 2C 02 FB | 	rdlong	local04, objptr
185c4     50 00 00 FF 
185c8     EC E4 85 F1 | 	sub	objptr, ##41196
185cc     01 2C 0E F2 | 	cmp	local04, #1 wz
185d0     90 00 90 5D |  if_ne	jmp	#LR__2006
185d4                 | '   print: print "Stopped at line ";runheader(0) 
185d4     00 12 06 F6 | 	mov	arg01, #0
185d8     60 14 B1 FD | 	call	#__system___getiolock_0573
185dc     FD 12 02 F6 | 	mov	arg01, result1
185e0     30 B7 B0 FD | 	call	#__system___lockmem
185e4     00 12 06 F6 | 	mov	arg01, #0
185e8     0A 14 06 F6 | 	mov	arg02, #10
185ec     00 16 06 F6 | 	mov	arg03, #0
185f0     BC C3 B0 FD | 	call	#__system___basic_print_char
185f4     00 12 06 F6 | 	mov	arg01, #0
185f8     40 14 B1 FD | 	call	#__system___getiolock_0573
185fc     FD 00 68 FC | 	wrlong	#0, result1
18600     00 12 06 F6 | 	mov	arg01, #0
18604     34 14 B1 FD | 	call	#__system___getiolock_0573
18608     FD 12 02 F6 | 	mov	arg01, result1
1860c     04 B7 B0 FD | 	call	#__system___lockmem
18610     A1 01 00 FF 
18614     99 14 06 F6 | 	mov	arg02, ##@LR__5773
18618     00 12 06 F6 | 	mov	arg01, #0
1861c     00 16 06 F6 | 	mov	arg03, #0
18620     E4 C3 B0 FD | 	call	#__system___basic_print_string
18624     50 00 00 FF 
18628     F0 E4 05 F1 | 	add	objptr, ##41200
1862c     F2 14 02 FB | 	rdlong	arg02, objptr
18630     50 00 00 FF 
18634     F0 E4 85 F1 | 	sub	objptr, ##41200
18638     00 12 06 F6 | 	mov	arg01, #0
1863c     00 16 06 F6 | 	mov	arg03, #0
18640     0A 18 06 F6 | 	mov	arg04, #10
18644     44 C4 B0 FD | 	call	#__system___basic_print_unsigned
18648     00 12 06 F6 | 	mov	arg01, #0
1864c     0A 14 06 F6 | 	mov	arg02, #10
18650     00 16 06 F6 | 	mov	arg03, #0
18654     58 C3 B0 FD | 	call	#__system___basic_print_char
18658     00 12 06 F6 | 	mov	arg01, #0
1865c     DC 13 B1 FD | 	call	#__system___getiolock_0573
18660     FD 00 68 FC | 	wrlong	#0, result1
18664                 | LR__2006
18664     50 00 00 FF 
18668     EC E4 05 F1 | 	add	objptr, ##41196
1866c     F2 00 68 FC | 	wrlong	#0, objptr
18670     06 00 00 FF 
18674     6C E4 85 F1 | 	sub	objptr, ##3180
18678     F2 26 62 FC | 	wrlong	local01, objptr
1867c     06 00 00 FF 
18680     38 E4 05 F1 | 	add	objptr, ##3128
18684     F2 28 62 FC | 	wrlong	local02, objptr
18688     04 E4 05 F1 | 	add	objptr, #4
1868c     F2 2A 62 FC | 	wrlong	local03, objptr
18690     50 00 00 FF 
18694     BC E4 85 F1 | 	sub	objptr, ##41148
18698     11 12 06 F6 | 	mov	arg01, #17
1869c     08 14 06 F6 | 	mov	arg02, #8
186a0     10 16 06 F6 | 	mov	arg03, #16
186a4     10 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
186a8     10 12 06 F6 | 	mov	arg01, #16
186ac     20 14 06 F6 | 	mov	arg02, #32
186b0     20 16 06 F6 | 	mov	arg03, #32
186b4     00 8D B0 FD | 	call	#_hg010b_spin2_setspritesize
186b8                 | LR__2007
186b8     A7 F0 03 F6 | 	mov	ptra, fp
186bc     B2 00 A0 FD | 	call	#popregs_
186c0                 | _do_run_ret
186c0     2D 00 64 FD | 	ret
186c4                 | 
186c4                 | ' 
186c4                 | ' ' ------------------ save
186c4                 | ' 
186c4                 | ' sub do_save                        
186c4                 | _do_save
186c4     04 4A 05 F6 | 	mov	COUNT_, #4
186c8     A8 00 A0 FD | 	call	#pushregs_
186cc     B8 F0 07 F1 | 	add	ptra, #184
186d0     4A 00 00 FF 
186d4     80 E4 05 F1 | 	add	objptr, ##38016
186d8     F2 26 02 FB | 	rdlong	local01, objptr
186dc     13 29 02 F6 | 	mov	local02, local01
186e0     01 28 66 F0 | 	shl	local02, #1
186e4     13 29 02 F1 | 	add	local02, local01
186e8     02 28 66 F0 | 	shl	local02, #2
186ec     03 00 00 FF 
186f0     04 E4 85 F1 | 	sub	objptr, ##1540
186f4     F2 28 02 F1 | 	add	local02, objptr
186f8     14 2B 02 FB | 	rdlong	local03, local02
186fc     10 4E 05 F1 | 	add	fp, #16
18700     A7 2A 62 FC | 	wrlong	local03, fp
18704                 | ' 
18704                 | ' numpar=compiledline(lineptr_e).result.uresult
18704                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
18704     10 4E 85 F1 | 	sub	fp, #16
18708     01 2A 56 F2 | 	cmps	local03, #1 wc
1870c     47 00 00 FF 
18710     7C E4 85 F1 | 	sub	objptr, ##36476
18714     20 00 90 CD |  if_b	jmp	#LR__2010
18718     FC 42 BF FD | 	call	#_pop
1871c     A7 FA 61 FC | 	wrlong	result1, fp
18720     04 4E 05 F1 | 	add	fp, #4
18724     A7 FC 61 FC | 	wrlong	result2, fp
18728     04 4E 05 F1 | 	add	fp, #4
1872c     A7 FE 61 FC | 	wrlong	result3, fp
18730     08 4E 85 F1 | 	sub	fp, #8
18734     24 00 90 FD | 	jmp	#LR__2011
18738                 | LR__2010
18738     51 00 00 FF 
1873c     D8 E5 05 F1 | 	add	objptr, ##41944
18740     F2 2A 02 FB | 	rdlong	local03, objptr
18744     51 00 00 FF 
18748     D8 E5 85 F1 | 	sub	objptr, ##41944
1874c     A7 2A 62 FC | 	wrlong	local03, fp
18750     08 4E 05 F1 | 	add	fp, #8
18754     A7 3E 68 FC | 	wrlong	#31, fp
18758     08 4E 85 F1 | 	sub	fp, #8
1875c                 | LR__2011
1875c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1875c     4A 00 00 FF 
18760     88 E4 05 F1 | 	add	objptr, ##38024
18764     F2 12 02 FB | 	rdlong	arg01, objptr
18768     4A 00 00 FF 
1876c     88 E4 85 F1 | 	sub	objptr, ##38024
18770     CC 7E B0 FD | 	call	#_pslpeek
18774     FF FF 7F FF 
18778     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1877c     10 00 90 5D |  if_ne	jmp	#LR__2012
18780     1B 12 06 F6 | 	mov	arg01, #27
18784     00 14 06 F6 | 	mov	arg02, #0
18788     F8 7B B0 FD | 	call	#_printerror
1878c     CC 02 90 FD | 	jmp	#LR__2018
18790                 | LR__2012
18790                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
18790     08 4E 05 F1 | 	add	fp, #8
18794     A7 2A 02 FB | 	rdlong	local03, fp
18798     08 4E 85 F1 | 	sub	fp, #8
1879c     2B 2A 0E F2 | 	cmp	local03, #43 wz
187a0     18 00 90 5D |  if_ne	jmp	#LR__2013
187a4     A7 12 02 FB | 	rdlong	arg01, fp
187a8     E4 43 BF FD | 	call	#_convertstring
187ac     A7 FA 61 FC | 	wrlong	result1, fp
187b0     08 4E 05 F1 | 	add	fp, #8
187b4     A7 3E 68 FC | 	wrlong	#31, fp
187b8     08 4E 85 F1 | 	sub	fp, #8
187bc                 | LR__2013
187bc                 | ' if t1.result_type=result_string then
187bc     08 4E 05 F1 | 	add	fp, #8
187c0     A7 2A 02 FB | 	rdlong	local03, fp
187c4     08 4E 85 F1 | 	sub	fp, #8
187c8     1F 2A 0E F2 | 	cmp	local03, #31 wz
187cc     8C 02 90 5D |  if_ne	jmp	#LR__2017
187d0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
187d0     A7 12 02 FB | 	rdlong	arg01, fp
187d4     A1 01 00 FF 
187d8     AA 14 06 F6 | 	mov	arg02, ##@LR__5774
187dc     5C B5 B0 FD | 	call	#__system___string_cmp
187e0     00 FA 0D F2 | 	cmp	result1, #0 wz
187e4     51 00 00 AF 
187e8     D8 E5 05 A1 |  if_e	add	objptr, ##41944
187ec     F2 2A 02 AB |  if_e	rdlong	local03, objptr
187f0     A7 2A 62 AC |  if_e	wrlong	local03, fp
187f4     51 00 00 AF 
187f8     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
187fc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
18800     51 00 00 5F 
18804     D8 E5 05 51 |  if_ne	add	objptr, ##41944
18808     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1880c     51 00 00 5F 
18810     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
18814                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
18814     09 12 06 F6 | 	mov	arg01, #9
18818     50 08 B1 FD | 	call	#__system__close
1881c     09 2A 06 F6 | 	mov	local03, #9
18820     4A 00 00 FF 
18824     94 E4 05 F1 | 	add	objptr, ##38036
18828     F2 12 02 FB | 	rdlong	arg01, objptr
1882c     4A 00 00 FF 
18830     94 E4 85 F1 | 	sub	objptr, ##38036
18834     A1 01 00 FF 
18838     AB 14 06 F6 | 	mov	arg02, ##@LR__5775
1883c     30 B5 B0 FD | 	call	#__system___string_concat
18840     FD 12 02 F6 | 	mov	arg01, result1
18844     A7 14 02 FB | 	rdlong	arg02, fp
18848     24 B5 B0 FD | 	call	#__system___string_concat
1884c     FD 14 02 F6 | 	mov	arg02, result1
18850     15 13 02 F6 | 	mov	arg01, local03
18854     0D 16 06 F6 | 	mov	arg03, #13
18858     BC C0 B0 FD | 	call	#__system___basic_open_string
1885c     4A 00 00 FF 
18860     88 E4 05 F1 | 	add	objptr, ##38024
18864     F2 2A 02 FB | 	rdlong	local03, objptr
18868     4A 00 00 FF 
1886c     88 E4 85 F1 | 	sub	objptr, ##38024
18870     B0 4E 05 F1 | 	add	fp, #176
18874     A7 2A 62 FC | 	wrlong	local03, fp
18878     B0 4E 85 F1 | 	sub	fp, #176
1887c                 | '   saveptr=programstart
1887c                 | '   do
1887c                 | LR__2014
1887c     14 4E 05 F1 | 	add	fp, #20
18880     A7 12 02 F6 | 	mov	arg01, fp
18884     9C 4E 05 F1 | 	add	fp, #156
18888     A7 14 02 FB | 	rdlong	arg02, fp
1888c     B0 4E 85 F1 | 	sub	fp, #176
18890     18 16 06 F6 | 	mov	arg03, #24
18894     0B 00 00 FF 
18898     CC E4 05 F1 | 	add	objptr, ##5836
1889c     34 A8 B0 FD | 	call	#_psram_spin2_read1
188a0     2C 4E 05 F1 | 	add	fp, #44
188a4     A7 12 02 F6 | 	mov	arg01, fp
188a8     10 4E 85 F1 | 	sub	fp, #16
188ac     A7 14 02 FB | 	rdlong	arg02, fp
188b0     04 4E 05 F1 | 	add	fp, #4
188b4     A7 16 02 FB | 	rdlong	arg03, fp
188b8     20 4E 85 F1 | 	sub	fp, #32
188bc     14 A8 B0 FD | 	call	#_psram_spin2_read1
188c0     0B 00 00 FF 
188c4     CC E4 85 F1 | 	sub	objptr, ##5836
188c8     A1 01 00 FF 
188cc     AD 2A 06 F6 | 	mov	local03, ##@LR__5776
188d0     AC 4E 05 F1 | 	add	fp, #172
188d4     A7 2A 62 FC | 	wrlong	local03, fp
188d8                 | '     psram.read1(varptr(header(0)),saveptr,24)
188d8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
188d8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
188d8     A0 4E 85 F1 | 	sub	fp, #160
188dc     A7 02 68 FC | 	wrlong	#1, fp
188e0     14 4E 05 F1 | 	add	fp, #20
188e4     A7 2C 02 FB | 	rdlong	local04, fp
188e8     20 4E 85 F1 | 	sub	fp, #32
188ec     01 2C 06 F1 | 	add	local04, #1
188f0                 | LR__2015
188f0     0C 4E 05 F1 | 	add	fp, #12
188f4     A7 2A 02 FB | 	rdlong	local03, fp
188f8     0C 4E 85 F1 | 	sub	fp, #12
188fc     16 2B 52 F2 | 	cmps	local03, local04 wc
18900     54 00 90 3D |  if_ae	jmp	#LR__2016
18904     AC 4E 05 F1 | 	add	fp, #172
18908     A7 26 02 FB | 	rdlong	local01, fp
1890c     A0 4E 85 F1 | 	sub	fp, #160
18910     A7 2A 02 FB | 	rdlong	local03, fp
18914     01 2A 86 F1 | 	sub	local03, #1
18918     20 4E 05 F1 | 	add	fp, #32
1891c     A7 2A 02 F1 | 	add	local03, fp
18920     15 13 C2 FA | 	rdbyte	arg01, local03
18924     2C 4E 85 F1 | 	sub	fp, #44
18928     28 D6 B0 FD | 	call	#__system__Chr_S
1892c     FD 14 02 F6 | 	mov	arg02, result1
18930     13 13 02 F6 | 	mov	arg01, local01
18934     38 B4 B0 FD | 	call	#__system___string_concat
18938     AC 4E 05 F1 | 	add	fp, #172
1893c     A7 FA 61 FC | 	wrlong	result1, fp
18940     A0 4E 85 F1 | 	sub	fp, #160
18944     A7 2A 02 FB | 	rdlong	local03, fp
18948     01 2A 06 F1 | 	add	local03, #1
1894c     A7 2A 62 FC | 	wrlong	local03, fp
18950     0C 4E 85 F1 | 	sub	fp, #12
18954     98 FF 9F FD | 	jmp	#LR__2015
18958                 | LR__2016
18958                 | '     print #9, saveline$
18958     09 12 06 F6 | 	mov	arg01, #9
1895c     DC 10 B1 FD | 	call	#__system___getiolock_0573
18960     FD 12 02 F6 | 	mov	arg01, result1
18964     AC B3 B0 FD | 	call	#__system___lockmem
18968     AC 4E 05 F1 | 	add	fp, #172
1896c     A7 14 02 FB | 	rdlong	arg02, fp
18970     AC 4E 85 F1 | 	sub	fp, #172
18974     09 12 06 F6 | 	mov	arg01, #9
18978     00 16 06 F6 | 	mov	arg03, #0
1897c     88 C0 B0 FD | 	call	#__system___basic_print_string
18980     09 12 06 F6 | 	mov	arg01, #9
18984     0A 14 06 F6 | 	mov	arg02, #10
18988     00 16 06 F6 | 	mov	arg03, #0
1898c     20 C0 B0 FD | 	call	#__system___basic_print_char
18990     09 12 06 F6 | 	mov	arg01, #9
18994     A4 10 B1 FD | 	call	#__system___getiolock_0573
18998     FD 00 68 FC | 	wrlong	#0, result1
1899c     28 4E 05 F1 | 	add	fp, #40
189a0     A7 2A 02 FB | 	rdlong	local03, fp
189a4     88 4E 05 F1 | 	add	fp, #136
189a8     A7 2A 62 FC | 	wrlong	local03, fp
189ac     88 4E 85 F1 | 	sub	fp, #136
189b0     A7 2A 02 FB | 	rdlong	local03, fp
189b4     28 4E 85 F1 | 	sub	fp, #40
189b8     FF FF 3F FF 
189bc     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
189c0     B8 FE 9F 5D |  if_ne	jmp	#LR__2014
189c4                 | '   close #9  
189c4     09 12 06 F6 | 	mov	arg01, #9
189c8     A0 06 B1 FD | 	call	#__system__close
189cc                 | '   print "Saved as ";currentdir$+"/"+loadname
189cc     00 12 06 F6 | 	mov	arg01, #0
189d0     68 10 B1 FD | 	call	#__system___getiolock_0573
189d4     FD 12 02 F6 | 	mov	arg01, result1
189d8     38 B3 B0 FD | 	call	#__system___lockmem
189dc     A1 01 00 FF 
189e0     AE 14 06 F6 | 	mov	arg02, ##@LR__5777
189e4     00 12 06 F6 | 	mov	arg01, #0
189e8     00 16 06 F6 | 	mov	arg03, #0
189ec     18 C0 B0 FD | 	call	#__system___basic_print_string
189f0     00 28 06 F6 | 	mov	local02, #0
189f4     4A 00 00 FF 
189f8     94 E4 05 F1 | 	add	objptr, ##38036
189fc     F2 12 02 FB | 	rdlong	arg01, objptr
18a00     4A 00 00 FF 
18a04     94 E4 85 F1 | 	sub	objptr, ##38036
18a08     A1 01 00 FF 
18a0c     B8 14 06 F6 | 	mov	arg02, ##@LR__5778
18a10     5C B3 B0 FD | 	call	#__system___string_concat
18a14     FD 12 02 F6 | 	mov	arg01, result1
18a18     51 00 00 FF 
18a1c     D8 E5 05 F1 | 	add	objptr, ##41944
18a20     F2 14 02 FB | 	rdlong	arg02, objptr
18a24     51 00 00 FF 
18a28     D8 E5 85 F1 | 	sub	objptr, ##41944
18a2c     40 B3 B0 FD | 	call	#__system___string_concat
18a30     FD 14 02 F6 | 	mov	arg02, result1
18a34     14 13 02 F6 | 	mov	arg01, local02
18a38     00 16 06 F6 | 	mov	arg03, #0
18a3c     C8 BF B0 FD | 	call	#__system___basic_print_string
18a40     00 12 06 F6 | 	mov	arg01, #0
18a44     0A 14 06 F6 | 	mov	arg02, #10
18a48     00 16 06 F6 | 	mov	arg03, #0
18a4c     60 BF B0 FD | 	call	#__system___basic_print_char
18a50     00 12 06 F6 | 	mov	arg01, #0
18a54     E4 0F B1 FD | 	call	#__system___getiolock_0573
18a58     FD 00 68 FC | 	wrlong	#0, result1
18a5c                 | LR__2017
18a5c                 | LR__2018
18a5c     A7 F0 03 F6 | 	mov	ptra, fp
18a60     B2 00 A0 FD | 	call	#popregs_
18a64                 | _do_save_ret
18a64     2D 00 64 FD | 	ret
18a68                 | 
18a68                 | ' 
18a68                 | ' ' ------------------ setdelay
18a68                 | ' 
18a68                 | ' sub do_setdelay
18a68                 | _do_setdelay
18a68     02 4A 05 F6 | 	mov	COUNT_, #2
18a6c     A8 00 A0 FD | 	call	#pushregs_
18a70     18 F0 07 F1 | 	add	ptra, #24
18a74     A0 3F BF FD | 	call	#_pop
18a78     FD 12 02 F6 | 	mov	arg01, result1
18a7c     FE 26 02 F6 | 	mov	local01, result2
18a80     FF 28 02 F6 | 	mov	local02, result3
18a84     A7 12 62 FC | 	wrlong	arg01, fp
18a88     04 4E 05 F1 | 	add	fp, #4
18a8c     A7 26 62 FC | 	wrlong	local01, fp
18a90     04 4E 05 F1 | 	add	fp, #4
18a94     A7 28 62 FC | 	wrlong	local02, fp
18a98     08 4E 85 F1 | 	sub	fp, #8
18a9c     78 3F BF FD | 	call	#_pop
18aa0     FD 28 02 F6 | 	mov	local02, result1
18aa4     0C 4E 05 F1 | 	add	fp, #12
18aa8     A7 28 62 FC | 	wrlong	local02, fp
18aac     04 4E 05 F1 | 	add	fp, #4
18ab0     A7 FC 61 FC | 	wrlong	result2, fp
18ab4     04 4E 05 F1 | 	add	fp, #4
18ab8     A7 FE 61 FC | 	wrlong	result3, fp
18abc     08 4E 85 F1 | 	sub	fp, #8
18ac0     A7 12 02 F6 | 	mov	arg01, fp
18ac4     0C 4E 85 F1 | 	sub	fp, #12
18ac8     30 41 BF FD | 	call	#_converttoint
18acc     FD 28 02 F6 | 	mov	local02, result1
18ad0     14 27 02 F6 | 	mov	local01, local02
18ad4     01 26 66 F0 | 	shl	local01, #1
18ad8     14 27 02 F1 | 	add	local01, local02
18adc     03 26 66 F0 | 	shl	local01, #3
18ae0     14 00 00 FF 
18ae4     38 E5 05 F1 | 	add	objptr, ##10552
18ae8     F2 26 02 F1 | 	add	local01, objptr
18aec     A7 12 02 F6 | 	mov	arg01, fp
18af0     14 00 00 FF 
18af4     38 E5 85 F1 | 	sub	objptr, ##10552
18af8     00 41 BF FD | 	call	#_converttoint
18afc     06 26 06 F1 | 	add	local01, #6
18b00     13 FB 51 FC | 	wrword	result1, local01
18b04     A7 F0 03 F6 | 	mov	ptra, fp
18b08     B2 00 A0 FD | 	call	#popregs_
18b0c                 | _do_setdelay_ret
18b0c     2D 00 64 FD | 	ret
18b10                 | 
18b10                 | ' 
18b10                 | ' ' ------------------ setenv
18b10                 | ' 
18b10                 | ' sub do_setenv
18b10                 | _do_setenv
18b10     02 4A 05 F6 | 	mov	COUNT_, #2
18b14     A8 00 A0 FD | 	call	#pushregs_
18b18     18 F0 07 F1 | 	add	ptra, #24
18b1c     F8 3E BF FD | 	call	#_pop
18b20     FD 12 02 F6 | 	mov	arg01, result1
18b24     FE 26 02 F6 | 	mov	local01, result2
18b28     FF 28 02 F6 | 	mov	local02, result3
18b2c     A7 12 62 FC | 	wrlong	arg01, fp
18b30     04 4E 05 F1 | 	add	fp, #4
18b34     A7 26 62 FC | 	wrlong	local01, fp
18b38     04 4E 05 F1 | 	add	fp, #4
18b3c     A7 28 62 FC | 	wrlong	local02, fp
18b40     08 4E 85 F1 | 	sub	fp, #8
18b44     D0 3E BF FD | 	call	#_pop
18b48     FD 28 02 F6 | 	mov	local02, result1
18b4c     0C 4E 05 F1 | 	add	fp, #12
18b50     A7 28 62 FC | 	wrlong	local02, fp
18b54     04 4E 05 F1 | 	add	fp, #4
18b58     A7 FC 61 FC | 	wrlong	result2, fp
18b5c     04 4E 05 F1 | 	add	fp, #4
18b60     A7 FE 61 FC | 	wrlong	result3, fp
18b64     08 4E 85 F1 | 	sub	fp, #8
18b68     A7 12 02 F6 | 	mov	arg01, fp
18b6c     0C 4E 85 F1 | 	sub	fp, #12
18b70     88 40 BF FD | 	call	#_converttoint
18b74     FD 28 02 F6 | 	mov	local02, result1
18b78     14 27 02 F6 | 	mov	local01, local02
18b7c     01 26 66 F0 | 	shl	local01, #1
18b80     14 27 02 F1 | 	add	local01, local02
18b84     03 26 66 F0 | 	shl	local01, #3
18b88     14 00 00 FF 
18b8c     38 E5 05 F1 | 	add	objptr, ##10552
18b90     F2 26 02 F1 | 	add	local01, objptr
18b94     A7 12 02 F6 | 	mov	arg01, fp
18b98     14 00 00 FF 
18b9c     38 E5 85 F1 | 	sub	objptr, ##10552
18ba0     58 40 BF FD | 	call	#_converttoint
18ba4     05 26 06 F1 | 	add	local01, #5
18ba8     13 FB 41 FC | 	wrbyte	result1, local01
18bac     A7 F0 03 F6 | 	mov	ptra, fp
18bb0     B2 00 A0 FD | 	call	#popregs_
18bb4                 | _do_setenv_ret
18bb4     2D 00 64 FD | 	ret
18bb8                 | 
18bb8                 | ' 
18bb8                 | ' ' ------------------ setlen
18bb8                 | ' 
18bb8                 | ' sub do_setlen
18bb8                 | _do_setlen
18bb8     02 4A 05 F6 | 	mov	COUNT_, #2
18bbc     A8 00 A0 FD | 	call	#pushregs_
18bc0     18 F0 07 F1 | 	add	ptra, #24
18bc4     50 3E BF FD | 	call	#_pop
18bc8     FD 12 02 F6 | 	mov	arg01, result1
18bcc     FE 26 02 F6 | 	mov	local01, result2
18bd0     FF 28 02 F6 | 	mov	local02, result3
18bd4     A7 12 62 FC | 	wrlong	arg01, fp
18bd8     04 4E 05 F1 | 	add	fp, #4
18bdc     A7 26 62 FC | 	wrlong	local01, fp
18be0     04 4E 05 F1 | 	add	fp, #4
18be4     A7 28 62 FC | 	wrlong	local02, fp
18be8     08 4E 85 F1 | 	sub	fp, #8
18bec     28 3E BF FD | 	call	#_pop
18bf0     FD 28 02 F6 | 	mov	local02, result1
18bf4     0C 4E 05 F1 | 	add	fp, #12
18bf8     A7 28 62 FC | 	wrlong	local02, fp
18bfc     04 4E 05 F1 | 	add	fp, #4
18c00     A7 FC 61 FC | 	wrlong	result2, fp
18c04     04 4E 05 F1 | 	add	fp, #4
18c08     A7 FE 61 FC | 	wrlong	result3, fp
18c0c     08 4E 85 F1 | 	sub	fp, #8
18c10     A7 12 02 F6 | 	mov	arg01, fp
18c14     0C 4E 85 F1 | 	sub	fp, #12
18c18     E0 3F BF FD | 	call	#_converttoint
18c1c     FD 28 02 F6 | 	mov	local02, result1
18c20     14 27 02 F6 | 	mov	local01, local02
18c24     01 26 66 F0 | 	shl	local01, #1
18c28     14 27 02 F1 | 	add	local01, local02
18c2c     03 26 66 F0 | 	shl	local01, #3
18c30     14 00 00 FF 
18c34     38 E5 05 F1 | 	add	objptr, ##10552
18c38     F2 26 02 F1 | 	add	local01, objptr
18c3c     A7 12 02 F6 | 	mov	arg01, fp
18c40     14 00 00 FF 
18c44     38 E5 85 F1 | 	sub	objptr, ##10552
18c48     6C 40 BF FD | 	call	#_converttofloat
18c4c     08 26 06 F1 | 	add	local01, #8
18c50     13 FB 61 FC | 	wrlong	result1, local01
18c54     A7 F0 03 F6 | 	mov	ptra, fp
18c58     B2 00 A0 FD | 	call	#popregs_
18c5c                 | _do_setlen_ret
18c5c     2D 00 64 FD | 	ret
18c60                 | 
18c60                 | ' 
18c60                 | ' ' ------------------ setpan
18c60                 | ' 
18c60                 | ' sub do_setpan
18c60                 | _do_setpan
18c60     02 4A 05 F6 | 	mov	COUNT_, #2
18c64     A8 00 A0 FD | 	call	#pushregs_
18c68     18 F0 07 F1 | 	add	ptra, #24
18c6c     A8 3D BF FD | 	call	#_pop
18c70     FD 12 02 F6 | 	mov	arg01, result1
18c74     FE 26 02 F6 | 	mov	local01, result2
18c78     FF 28 02 F6 | 	mov	local02, result3
18c7c     A7 12 62 FC | 	wrlong	arg01, fp
18c80     04 4E 05 F1 | 	add	fp, #4
18c84     A7 26 62 FC | 	wrlong	local01, fp
18c88     04 4E 05 F1 | 	add	fp, #4
18c8c     A7 28 62 FC | 	wrlong	local02, fp
18c90     08 4E 85 F1 | 	sub	fp, #8
18c94     80 3D BF FD | 	call	#_pop
18c98     FD 28 02 F6 | 	mov	local02, result1
18c9c     0C 4E 05 F1 | 	add	fp, #12
18ca0     A7 28 62 FC | 	wrlong	local02, fp
18ca4     04 4E 05 F1 | 	add	fp, #4
18ca8     A7 FC 61 FC | 	wrlong	result2, fp
18cac     04 4E 05 F1 | 	add	fp, #4
18cb0     A7 FE 61 FC | 	wrlong	result3, fp
18cb4     08 4E 85 F1 | 	sub	fp, #8
18cb8     A7 12 02 F6 | 	mov	arg01, fp
18cbc     0C 4E 85 F1 | 	sub	fp, #12
18cc0     38 3F BF FD | 	call	#_converttoint
18cc4     FD 28 02 F6 | 	mov	local02, result1
18cc8     14 27 02 F6 | 	mov	local01, local02
18ccc     01 26 66 F0 | 	shl	local01, #1
18cd0     14 27 02 F1 | 	add	local01, local02
18cd4     03 26 66 F0 | 	shl	local01, #3
18cd8     14 00 00 FF 
18cdc     38 E5 05 F1 | 	add	objptr, ##10552
18ce0     F2 26 02 F1 | 	add	local01, objptr
18ce4     A7 12 02 F6 | 	mov	arg01, fp
18ce8     14 00 00 FF 
18cec     38 E5 85 F1 | 	sub	objptr, ##10552
18cf0     C4 3F BF FD | 	call	#_converttofloat
18cf4     10 26 06 F1 | 	add	local01, #16
18cf8     13 FB 61 FC | 	wrlong	result1, local01
18cfc     A7 F0 03 F6 | 	mov	ptra, fp
18d00     B2 00 A0 FD | 	call	#popregs_
18d04                 | _do_setpan_ret
18d04     2D 00 64 FD | 	ret
18d08                 | 
18d08                 | ' 
18d08                 | ' ' ------------------ setsustain
18d08                 | ' 
18d08                 | ' sub do_setsustain
18d08                 | _do_setsustain
18d08     02 4A 05 F6 | 	mov	COUNT_, #2
18d0c     A8 00 A0 FD | 	call	#pushregs_
18d10     18 F0 07 F1 | 	add	ptra, #24
18d14     00 3D BF FD | 	call	#_pop
18d18     FD 12 02 F6 | 	mov	arg01, result1
18d1c     FE 26 02 F6 | 	mov	local01, result2
18d20     FF 28 02 F6 | 	mov	local02, result3
18d24     A7 12 62 FC | 	wrlong	arg01, fp
18d28     04 4E 05 F1 | 	add	fp, #4
18d2c     A7 26 62 FC | 	wrlong	local01, fp
18d30     04 4E 05 F1 | 	add	fp, #4
18d34     A7 28 62 FC | 	wrlong	local02, fp
18d38     08 4E 85 F1 | 	sub	fp, #8
18d3c     D8 3C BF FD | 	call	#_pop
18d40     FD 28 02 F6 | 	mov	local02, result1
18d44     0C 4E 05 F1 | 	add	fp, #12
18d48     A7 28 62 FC | 	wrlong	local02, fp
18d4c     04 4E 05 F1 | 	add	fp, #4
18d50     A7 FC 61 FC | 	wrlong	result2, fp
18d54     04 4E 05 F1 | 	add	fp, #4
18d58     A7 FE 61 FC | 	wrlong	result3, fp
18d5c     08 4E 85 F1 | 	sub	fp, #8
18d60     A7 12 02 F6 | 	mov	arg01, fp
18d64     0C 4E 85 F1 | 	sub	fp, #12
18d68     90 3E BF FD | 	call	#_converttoint
18d6c     FD 28 02 F6 | 	mov	local02, result1
18d70     14 27 02 F6 | 	mov	local01, local02
18d74     01 26 66 F0 | 	shl	local01, #1
18d78     14 27 02 F1 | 	add	local01, local02
18d7c     03 26 66 F0 | 	shl	local01, #3
18d80     14 00 00 FF 
18d84     38 E5 05 F1 | 	add	objptr, ##10552
18d88     F2 26 02 F1 | 	add	local01, objptr
18d8c     A7 12 02 F6 | 	mov	arg01, fp
18d90     14 00 00 FF 
18d94     38 E5 85 F1 | 	sub	objptr, ##10552
18d98     60 3E BF FD | 	call	#_converttoint
18d9c     14 26 06 F1 | 	add	local01, #20
18da0     13 FB 51 FC | 	wrword	result1, local01
18da4     A7 F0 03 F6 | 	mov	ptra, fp
18da8     B2 00 A0 FD | 	call	#popregs_
18dac                 | _do_setsustain_ret
18dac     2D 00 64 FD | 	ret
18db0                 | 
18db0                 | ' 
18db0                 | ' ' ------------------ setvol
18db0                 | ' 
18db0                 | ' sub do_setvol
18db0                 | _do_setvol
18db0     02 4A 05 F6 | 	mov	COUNT_, #2
18db4     A8 00 A0 FD | 	call	#pushregs_
18db8     18 F0 07 F1 | 	add	ptra, #24
18dbc     58 3C BF FD | 	call	#_pop
18dc0     FD 12 02 F6 | 	mov	arg01, result1
18dc4     FE 26 02 F6 | 	mov	local01, result2
18dc8     FF 28 02 F6 | 	mov	local02, result3
18dcc     A7 12 62 FC | 	wrlong	arg01, fp
18dd0     04 4E 05 F1 | 	add	fp, #4
18dd4     A7 26 62 FC | 	wrlong	local01, fp
18dd8     04 4E 05 F1 | 	add	fp, #4
18ddc     A7 28 62 FC | 	wrlong	local02, fp
18de0     08 4E 85 F1 | 	sub	fp, #8
18de4     30 3C BF FD | 	call	#_pop
18de8     FD 28 02 F6 | 	mov	local02, result1
18dec     0C 4E 05 F1 | 	add	fp, #12
18df0     A7 28 62 FC | 	wrlong	local02, fp
18df4     04 4E 05 F1 | 	add	fp, #4
18df8     A7 FC 61 FC | 	wrlong	result2, fp
18dfc     04 4E 05 F1 | 	add	fp, #4
18e00     A7 FE 61 FC | 	wrlong	result3, fp
18e04     08 4E 85 F1 | 	sub	fp, #8
18e08     A7 12 02 F6 | 	mov	arg01, fp
18e0c     0C 4E 85 F1 | 	sub	fp, #12
18e10     E8 3D BF FD | 	call	#_converttoint
18e14     FD 28 02 F6 | 	mov	local02, result1
18e18     14 27 02 F6 | 	mov	local01, local02
18e1c     01 26 66 F0 | 	shl	local01, #1
18e20     14 27 02 F1 | 	add	local01, local02
18e24     03 26 66 F0 | 	shl	local01, #3
18e28     14 00 00 FF 
18e2c     38 E5 05 F1 | 	add	objptr, ##10552
18e30     F2 26 02 F1 | 	add	local01, objptr
18e34     A7 12 02 F6 | 	mov	arg01, fp
18e38     14 00 00 FF 
18e3c     38 E5 85 F1 | 	sub	objptr, ##10552
18e40     74 3E BF FD | 	call	#_converttofloat
18e44     0C 26 06 F1 | 	add	local01, #12
18e48     13 FB 61 FC | 	wrlong	result1, local01
18e4c     A7 F0 03 F6 | 	mov	ptra, fp
18e50     B2 00 A0 FD | 	call	#popregs_
18e54                 | _do_setvol_ret
18e54     2D 00 64 FD | 	ret
18e58                 | 
18e58                 | ' 
18e58                 | ' ' ------------------ setwave
18e58                 | ' 
18e58                 | ' sub do_setwave
18e58                 | _do_setwave
18e58     02 4A 05 F6 | 	mov	COUNT_, #2
18e5c     A8 00 A0 FD | 	call	#pushregs_
18e60     18 F0 07 F1 | 	add	ptra, #24
18e64     B0 3B BF FD | 	call	#_pop
18e68     FD 12 02 F6 | 	mov	arg01, result1
18e6c     FE 26 02 F6 | 	mov	local01, result2
18e70     FF 28 02 F6 | 	mov	local02, result3
18e74     A7 12 62 FC | 	wrlong	arg01, fp
18e78     04 4E 05 F1 | 	add	fp, #4
18e7c     A7 26 62 FC | 	wrlong	local01, fp
18e80     04 4E 05 F1 | 	add	fp, #4
18e84     A7 28 62 FC | 	wrlong	local02, fp
18e88     08 4E 85 F1 | 	sub	fp, #8
18e8c     88 3B BF FD | 	call	#_pop
18e90     FD 28 02 F6 | 	mov	local02, result1
18e94     0C 4E 05 F1 | 	add	fp, #12
18e98     A7 28 62 FC | 	wrlong	local02, fp
18e9c     04 4E 05 F1 | 	add	fp, #4
18ea0     A7 FC 61 FC | 	wrlong	result2, fp
18ea4     04 4E 05 F1 | 	add	fp, #4
18ea8     A7 FE 61 FC | 	wrlong	result3, fp
18eac     08 4E 85 F1 | 	sub	fp, #8
18eb0     A7 12 02 F6 | 	mov	arg01, fp
18eb4     0C 4E 85 F1 | 	sub	fp, #12
18eb8     40 3D BF FD | 	call	#_converttoint
18ebc     FD 28 02 F6 | 	mov	local02, result1
18ec0     14 27 02 F6 | 	mov	local01, local02
18ec4     01 26 66 F0 | 	shl	local01, #1
18ec8     14 27 02 F1 | 	add	local01, local02
18ecc     03 26 66 F0 | 	shl	local01, #3
18ed0     14 00 00 FF 
18ed4     38 E5 05 F1 | 	add	objptr, ##10552
18ed8     F2 26 02 F1 | 	add	local01, objptr
18edc     A7 12 02 F6 | 	mov	arg01, fp
18ee0     14 00 00 FF 
18ee4     38 E5 85 F1 | 	sub	objptr, ##10552
18ee8     10 3D BF FD | 	call	#_converttoint
18eec     04 26 06 F1 | 	add	local01, #4
18ef0     13 FB 41 FC | 	wrbyte	result1, local01
18ef4     A7 F0 03 F6 | 	mov	ptra, fp
18ef8     B2 00 A0 FD | 	call	#popregs_
18efc                 | _do_setwave_ret
18efc     2D 00 64 FD | 	ret
18f00                 | 
18f00                 | ' 
18f00                 | ' ' ------------------ shutup
18f00                 | ' 
18f00                 | ' sub do_shutup
18f00                 | _do_shutup
18f00     03 4A 05 F6 | 	mov	COUNT_, #3
18f04     A8 00 A0 FD | 	call	#pushregs_
18f08     18 F0 07 F1 | 	add	ptra, #24
18f0c     4A 00 00 FF 
18f10     80 E4 05 F1 | 	add	objptr, ##38016
18f14     F2 26 02 FB | 	rdlong	local01, objptr
18f18     13 29 02 F6 | 	mov	local02, local01
18f1c     01 28 66 F0 | 	shl	local02, #1
18f20     13 29 02 F1 | 	add	local02, local01
18f24     02 28 66 F0 | 	shl	local02, #2
18f28     03 00 00 FF 
18f2c     04 E4 85 F1 | 	sub	objptr, ##1540
18f30     F2 28 02 F1 | 	add	local02, objptr
18f34     14 2B 0A FB | 	rdlong	local03, local02 wz
18f38     14 4E 05 F1 | 	add	fp, #20
18f3c     A7 2A 62 FC | 	wrlong	local03, fp
18f40                 | ' 
18f40                 | ' numpar=compiledline(lineptr_e).result.uresult
18f40                 | ' if numpar=0 then
18f40     14 4E 85 F1 | 	sub	fp, #20
18f44     47 00 00 FF 
18f48     7C E4 85 F1 | 	sub	objptr, ##36476
18f4c     50 00 90 5D |  if_ne	jmp	#LR__2022
18f50                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
18f50     10 4E 05 F1 | 	add	fp, #16
18f54     A7 00 68 FC | 	wrlong	#0, fp
18f58     37 00 00 FF 
18f5c     10 E4 05 F1 | 	add	objptr, ##28176
18f60     97 16 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
18f64                 | LR__2020
18f64     F2 12 02 FB | 	rdlong	arg01, objptr
18f68     A7 2A 02 FB | 	rdlong	local03, fp
18f6c     06 2A 66 F0 | 	shl	local03, #6
18f70     15 13 02 F1 | 	add	arg01, local03
18f74     14 12 06 F1 | 	add	arg01, #20
18f78     09 01 58 FC | 	wrword	#0, arg01
18f7c     A7 2A 02 FB | 	rdlong	local03, fp
18f80     01 2A 06 F1 | 	add	local03, #1
18f84     A7 2A 62 FC | 	wrlong	local03, fp
18f88     08 2A 56 F2 | 	cmps	local03, #8 wc
18f8c     D4 FF 9F CD |  if_b	jmp	#LR__2020
18f90                 | LR__2021
18f90     37 00 00 FF 
18f94     10 E4 85 F1 | 	sub	objptr, ##28176
18f98     10 4E 85 F1 | 	sub	fp, #16
18f9c     64 00 90 FD | 	jmp	#LR__2023
18fa0                 | LR__2022
18fa0     74 3A BF FD | 	call	#_pop
18fa4     FF 26 02 F6 | 	mov	local01, result3
18fa8     A7 FA 61 FC | 	wrlong	result1, fp
18fac     04 4E 05 F1 | 	add	fp, #4
18fb0     A7 FC 61 FC | 	wrlong	result2, fp
18fb4     04 4E 05 F1 | 	add	fp, #4
18fb8     A7 26 62 FC | 	wrlong	local01, fp
18fbc     08 4E 85 F1 | 	sub	fp, #8
18fc0     A7 12 02 F6 | 	mov	arg01, fp
18fc4     34 3C BF FD | 	call	#_converttoint
18fc8     FD 2A 52 F6 | 	abs	local03, result1 wc
18fcc     07 2A 06 F5 | 	and	local03, #7
18fd0     15 29 82 F6 | 	negc	local02, local03
18fd4     0C 4E 05 F1 | 	add	fp, #12
18fd8     A7 28 62 FC | 	wrlong	local02, fp
18fdc     37 00 00 FF 
18fe0     10 E4 05 F1 | 	add	objptr, ##28176
18fe4     F2 12 02 FB | 	rdlong	arg01, objptr
18fe8     37 00 00 FF 
18fec     10 E4 85 F1 | 	sub	objptr, ##28176
18ff0     0C 4E 85 F1 | 	sub	fp, #12
18ff4     06 28 66 F0 | 	shl	local02, #6
18ff8     14 13 02 F1 | 	add	arg01, local02
18ffc     14 12 06 F1 | 	add	arg01, #20
19000     09 01 58 FC | 	wrword	#0, arg01
19004                 | LR__2023
19004     A7 F0 03 F6 | 	mov	ptra, fp
19008     B2 00 A0 FD | 	call	#popregs_
1900c                 | _do_shutup_ret
1900c     2D 00 64 FD | 	ret
19010                 | 
19010                 | ' 
19010                 | ' ' ------------------ sin
19010                 | ' 
19010                 | ' sub do_sin
19010                 | _do_sin
19010     01 4A 05 F6 | 	mov	COUNT_, #1
19014     A8 00 A0 FD | 	call	#pushregs_
19018     10 F0 07 F1 | 	add	ptra, #16
1901c     4A 00 00 FF 
19020     80 E4 05 F1 | 	add	objptr, ##38016
19024     F2 26 02 FB | 	rdlong	local01, objptr
19028     13 17 02 F6 | 	mov	arg03, local01
1902c     01 16 66 F0 | 	shl	arg03, #1
19030     13 17 02 F1 | 	add	arg03, local01
19034     02 16 66 F0 | 	shl	arg03, #2
19038     03 00 00 FF 
1903c     04 E4 85 F1 | 	sub	objptr, ##1540
19040     F2 16 02 F1 | 	add	arg03, objptr
19044     0B 17 02 FB | 	rdlong	arg03, arg03
19048     0C 4E 05 F1 | 	add	fp, #12
1904c     A7 16 62 FC | 	wrlong	arg03, fp
19050                 | ' 
19050                 | ' numpar=compiledline(lineptr_e).result.uresult
19050                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
19050     0C 4E 85 F1 | 	sub	fp, #12
19054     02 16 16 F2 | 	cmp	arg03, #2 wc
19058     47 00 00 FF 
1905c     7C E4 85 F1 | 	sub	objptr, ##36476
19060     0C 4E 05 C1 |  if_b	add	fp, #12
19064     A7 26 0A CB |  if_b	rdlong	local01, fp wz
19068     0C 4E 85 C1 |  if_b	sub	fp, #12
1906c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2030
19070     00 12 06 F6 | 	mov	arg01, #0
19074     C4 09 B1 FD | 	call	#__system___getiolock_0573
19078     FD 12 02 F6 | 	mov	arg01, result1
1907c     94 AC B0 FD | 	call	#__system___lockmem
19080     A1 01 00 FF 
19084     BA 14 06 F6 | 	mov	arg02, ##@LR__5779
19088     00 12 06 F6 | 	mov	arg01, #0
1908c     00 16 06 F6 | 	mov	arg03, #0
19090     74 B9 B0 FD | 	call	#__system___basic_print_string
19094     00 12 06 F6 | 	mov	arg01, #0
19098     A0 09 B1 FD | 	call	#__system___getiolock_0573
1909c     FD 00 68 FC | 	wrlong	#0, result1
190a0     27 12 06 F6 | 	mov	arg01, #39
190a4     00 14 06 F6 | 	mov	arg02, #0
190a8     D8 72 B0 FD | 	call	#_printerror
190ac     64 00 90 FD | 	jmp	#LR__2031
190b0                 | LR__2030
190b0     64 39 BF FD | 	call	#_pop
190b4     A7 FA 61 FC | 	wrlong	result1, fp
190b8     04 4E 05 F1 | 	add	fp, #4
190bc     A7 FC 61 FC | 	wrlong	result2, fp
190c0     04 4E 05 F1 | 	add	fp, #4
190c4     A7 FE 61 FC | 	wrlong	result3, fp
190c8     08 4E 85 F1 | 	sub	fp, #8
190cc     51 00 00 FF 
190d0     BC E5 05 F1 | 	add	objptr, ##41916
190d4     F2 26 02 FB | 	rdlong	local01, objptr
190d8     51 00 00 FF 
190dc     BC E5 85 F1 | 	sub	objptr, ##41916
190e0     A7 12 02 F6 | 	mov	arg01, fp
190e4     D0 3B BF FD | 	call	#_converttofloat
190e8     FD 14 02 F6 | 	mov	arg02, result1
190ec     13 13 02 F6 | 	mov	arg01, local01
190f0     98 DA B0 FD | 	call	#__system___float_mul
190f4     FD 12 02 F6 | 	mov	arg01, result1
190f8     F0 E3 B0 FD | 	call	#__system____builtin_sinf
190fc     A7 FA 61 FC | 	wrlong	result1, fp
19100     08 4E 05 F1 | 	add	fp, #8
19104     A7 3C 68 FC | 	wrlong	#30, fp
19108     08 4E 85 F1 | 	sub	fp, #8
1910c     A7 12 02 F6 | 	mov	arg01, fp
19110     9C 39 BF FD | 	call	#_push
19114                 | LR__2031
19114     A7 F0 03 F6 | 	mov	ptra, fp
19118     B2 00 A0 FD | 	call	#popregs_
1911c                 | _do_sin_ret
1911c     2D 00 64 FD | 	ret
19120                 | 
19120                 | ' 
19120                 | ' ' ------------------ skip
19120                 | ' ' A helper token for on-gosub: skips the rest of gosubs
19120                 | ' 
19120                 | ' sub do_skip
19120                 | _do_skip
19120     4A 00 00 FF 
19124     80 E4 05 F1 | 	add	objptr, ##38016
19128     F2 00 02 FB | 	rdlong	_var01, objptr
1912c     00 03 02 F6 | 	mov	_var02, _var01
19130     01 02 66 F0 | 	shl	_var02, #1
19134     00 03 02 F1 | 	add	_var02, _var01
19138     02 02 66 F0 | 	shl	_var02, #2
1913c     03 00 00 FF 
19140     04 E4 85 F1 | 	sub	objptr, ##1540
19144     F2 02 02 F1 | 	add	_var02, objptr
19148     01 03 02 FB | 	rdlong	_var02, _var02
1914c     01 02 86 F1 | 	sub	_var02, #1
19150     03 00 00 FF 
19154     04 E4 05 F1 | 	add	objptr, ##1540
19158     F2 02 62 FC | 	wrlong	_var02, objptr
1915c     4A 00 00 FF 
19160     80 E4 85 F1 | 	sub	objptr, ##38016
19164                 | _do_skip_ret
19164     2D 00 64 FD | 	ret
19168                 | 
19168                 | ' 
19168                 | ' ' ------------------ sprite
19168                 | ' 
19168                 | ' sub do_sprite
19168                 | _do_sprite
19168     00 4A 05 F6 | 	mov	COUNT_, #0
1916c     A8 00 A0 FD | 	call	#pushregs_
19170     30 F0 07 F1 | 	add	ptra, #48
19174     A0 38 BF FD | 	call	#_pop
19178     FD 16 02 F6 | 	mov	arg03, result1
1917c     FE 14 02 F6 | 	mov	arg02, result2
19180     FF 12 02 F6 | 	mov	arg01, result3
19184     18 4E 05 F1 | 	add	fp, #24
19188     A7 16 62 FC | 	wrlong	arg03, fp
1918c     04 4E 05 F1 | 	add	fp, #4
19190     A7 14 62 FC | 	wrlong	arg02, fp
19194     04 4E 05 F1 | 	add	fp, #4
19198     A7 12 62 FC | 	wrlong	arg01, fp
1919c     20 4E 85 F1 | 	sub	fp, #32
191a0     74 38 BF FD | 	call	#_pop
191a4     FD 16 02 F6 | 	mov	arg03, result1
191a8     FE 14 02 F6 | 	mov	arg02, result2
191ac     FF 12 02 F6 | 	mov	arg01, result3
191b0     0C 4E 05 F1 | 	add	fp, #12
191b4     A7 16 62 FC | 	wrlong	arg03, fp
191b8     04 4E 05 F1 | 	add	fp, #4
191bc     A7 14 62 FC | 	wrlong	arg02, fp
191c0     04 4E 05 F1 | 	add	fp, #4
191c4     A7 12 62 FC | 	wrlong	arg01, fp
191c8     14 4E 85 F1 | 	sub	fp, #20
191cc     48 38 BF FD | 	call	#_pop
191d0     FF 16 02 F6 | 	mov	arg03, result3
191d4     A7 FA 61 FC | 	wrlong	result1, fp
191d8     04 4E 05 F1 | 	add	fp, #4
191dc     A7 FC 61 FC | 	wrlong	result2, fp
191e0     04 4E 05 F1 | 	add	fp, #4
191e4     A7 16 62 FC | 	wrlong	arg03, fp
191e8     08 4E 85 F1 | 	sub	fp, #8
191ec     A7 12 02 F6 | 	mov	arg01, fp
191f0     08 3A BF FD | 	call	#_converttoint
191f4     24 4E 05 F1 | 	add	fp, #36
191f8     A7 FA 61 FC | 	wrlong	result1, fp
191fc     18 4E 85 F1 | 	sub	fp, #24
19200     A7 12 02 F6 | 	mov	arg01, fp
19204     0C 4E 85 F1 | 	sub	fp, #12
19208     F0 39 BF FD | 	call	#_converttoint
1920c     28 4E 05 F1 | 	add	fp, #40
19210     A7 FA 61 FC | 	wrlong	result1, fp
19214     10 4E 85 F1 | 	sub	fp, #16
19218     A7 12 02 F6 | 	mov	arg01, fp
1921c     18 4E 85 F1 | 	sub	fp, #24
19220     D8 39 BF FD | 	call	#_converttoint
19224     2C 4E 05 F1 | 	add	fp, #44
19228     A7 FA 61 FC | 	wrlong	result1, fp
1922c     08 4E 85 F1 | 	sub	fp, #8
19230     A7 12 02 FB | 	rdlong	arg01, fp
19234     04 4E 05 F1 | 	add	fp, #4
19238     A7 14 02 FB | 	rdlong	arg02, fp
1923c     FD 16 02 F6 | 	mov	arg03, result1
19240     28 4E 85 F1 | 	sub	fp, #40
19244     08 81 B0 FD | 	call	#_hg010b_spin2_setspritepos
19248     A7 F0 03 F6 | 	mov	ptra, fp
1924c     B2 00 A0 FD | 	call	#popregs_
19250                 | _do_sprite_ret
19250     2D 00 64 FD | 	ret
19254                 | 
19254                 | ' 
19254                 | ' ' ------------------ sqr
19254                 | ' 
19254                 | ' sub do_sqr
19254                 | _do_sqr
19254     01 4A 05 F6 | 	mov	COUNT_, #1
19258     A8 00 A0 FD | 	call	#pushregs_
1925c     10 F0 07 F1 | 	add	ptra, #16
19260     4A 00 00 FF 
19264     80 E4 05 F1 | 	add	objptr, ##38016
19268     F2 26 02 FB | 	rdlong	local01, objptr
1926c     13 17 02 F6 | 	mov	arg03, local01
19270     01 16 66 F0 | 	shl	arg03, #1
19274     13 17 02 F1 | 	add	arg03, local01
19278     02 16 66 F0 | 	shl	arg03, #2
1927c     03 00 00 FF 
19280     04 E4 85 F1 | 	sub	objptr, ##1540
19284     F2 16 02 F1 | 	add	arg03, objptr
19288     0B 17 02 FB | 	rdlong	arg03, arg03
1928c     0C 4E 05 F1 | 	add	fp, #12
19290     A7 16 62 FC | 	wrlong	arg03, fp
19294                 | ' 
19294                 | ' numpar=compiledline(lineptr_e).result.uresult
19294                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
19294     0C 4E 85 F1 | 	sub	fp, #12
19298     02 16 16 F2 | 	cmp	arg03, #2 wc
1929c     47 00 00 FF 
192a0     7C E4 85 F1 | 	sub	objptr, ##36476
192a4     0C 4E 05 C1 |  if_b	add	fp, #12
192a8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
192ac     0C 4E 85 C1 |  if_b	sub	fp, #12
192b0     40 00 90 4D |  if_c_and_nz	jmp	#LR__2040
192b4     00 12 06 F6 | 	mov	arg01, #0
192b8     80 07 B1 FD | 	call	#__system___getiolock_0573
192bc     FD 12 02 F6 | 	mov	arg01, result1
192c0     50 AA B0 FD | 	call	#__system___lockmem
192c4     A1 01 00 FF 
192c8     C0 14 06 F6 | 	mov	arg02, ##@LR__5780
192cc     00 12 06 F6 | 	mov	arg01, #0
192d0     00 16 06 F6 | 	mov	arg03, #0
192d4     30 B7 B0 FD | 	call	#__system___basic_print_string
192d8     00 12 06 F6 | 	mov	arg01, #0
192dc     5C 07 B1 FD | 	call	#__system___getiolock_0573
192e0     FD 00 68 FC | 	wrlong	#0, result1
192e4     27 12 06 F6 | 	mov	arg01, #39
192e8     00 14 06 F6 | 	mov	arg02, #0
192ec     94 70 B0 FD | 	call	#_printerror
192f0     48 00 90 FD | 	jmp	#LR__2041
192f4                 | LR__2040
192f4     20 37 BF FD | 	call	#_pop
192f8     FF 26 02 F6 | 	mov	local01, result3
192fc     A7 FA 61 FC | 	wrlong	result1, fp
19300     04 4E 05 F1 | 	add	fp, #4
19304     A7 FC 61 FC | 	wrlong	result2, fp
19308     04 4E 05 F1 | 	add	fp, #4
1930c     A7 26 62 FC | 	wrlong	local01, fp
19310     08 4E 85 F1 | 	sub	fp, #8
19314     A7 12 02 F6 | 	mov	arg01, fp
19318     9C 39 BF FD | 	call	#_converttofloat
1931c     FD 12 02 F6 | 	mov	arg01, result1
19320     90 D7 B0 FD | 	call	#__system___float_sqrt
19324     A7 FA 61 FC | 	wrlong	result1, fp
19328     08 4E 05 F1 | 	add	fp, #8
1932c     A7 3C 68 FC | 	wrlong	#30, fp
19330     08 4E 85 F1 | 	sub	fp, #8
19334     A7 12 02 F6 | 	mov	arg01, fp
19338     74 37 BF FD | 	call	#_push
1933c                 | LR__2041
1933c     A7 F0 03 F6 | 	mov	ptra, fp
19340     B2 00 A0 FD | 	call	#popregs_
19344                 | _do_sqr_ret
19344     2D 00 64 FD | 	ret
19348                 | 
19348                 | ' 
19348                 | ' ' ------------------ stick
19348                 | ' 
19348                 | ' sub do_stick
19348                 | _do_stick
19348     01 4A 05 F6 | 	mov	COUNT_, #1
1934c     A8 00 A0 FD | 	call	#pushregs_
19350     10 F0 07 F1 | 	add	ptra, #16
19354     4A 00 00 FF 
19358     80 E4 05 F1 | 	add	objptr, ##38016
1935c     F2 26 02 FB | 	rdlong	local01, objptr
19360     13 17 02 F6 | 	mov	arg03, local01
19364     01 16 66 F0 | 	shl	arg03, #1
19368     13 17 02 F1 | 	add	arg03, local01
1936c     02 16 66 F0 | 	shl	arg03, #2
19370     03 00 00 FF 
19374     04 E4 85 F1 | 	sub	objptr, ##1540
19378     F2 16 02 F1 | 	add	arg03, objptr
1937c     0B 17 02 FB | 	rdlong	arg03, arg03
19380     0C 4E 05 F1 | 	add	fp, #12
19384     A7 16 62 FC | 	wrlong	arg03, fp
19388                 | ' 
19388                 | ' numpar=compiledline(lineptr_e).result.uresult
19388                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
19388     0C 4E 85 F1 | 	sub	fp, #12
1938c     02 16 16 F2 | 	cmp	arg03, #2 wc
19390     47 00 00 FF 
19394     7C E4 85 F1 | 	sub	objptr, ##36476
19398     40 00 90 CD |  if_b	jmp	#LR__2050
1939c     00 12 06 F6 | 	mov	arg01, #0
193a0     98 06 B1 FD | 	call	#__system___getiolock_0573
193a4     FD 12 02 F6 | 	mov	arg01, result1
193a8     68 A9 B0 FD | 	call	#__system___lockmem
193ac     A1 01 00 FF 
193b0     C6 14 06 F6 | 	mov	arg02, ##@LR__5781
193b4     00 12 06 F6 | 	mov	arg01, #0
193b8     00 16 06 F6 | 	mov	arg03, #0
193bc     48 B6 B0 FD | 	call	#__system___basic_print_string
193c0     00 12 06 F6 | 	mov	arg01, #0
193c4     74 06 B1 FD | 	call	#__system___getiolock_0573
193c8     FD 00 68 FC | 	wrlong	#0, result1
193cc     27 12 06 F6 | 	mov	arg01, #39
193d0     00 14 06 F6 | 	mov	arg02, #0
193d4     AC 6F B0 FD | 	call	#_printerror
193d8     F0 00 90 FD | 	jmp	#LR__2054
193dc                 | LR__2050
193dc                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
193dc     0C 4E 05 F1 | 	add	fp, #12
193e0     A7 FE 09 FB | 	rdlong	result3, fp wz
193e4     0C 4E 85 F1 | 	sub	fp, #12
193e8     30 00 90 5D |  if_ne	jmp	#LR__2051
193ec     51 00 00 FF 
193f0     30 E5 05 F1 | 	add	objptr, ##41776
193f4     F2 26 02 FB | 	rdlong	local01, objptr
193f8     51 00 00 FF 
193fc     30 E5 85 F1 | 	sub	objptr, ##41776
19400     A7 26 62 FC | 	wrlong	local01, fp
19404     08 4E 05 F1 | 	add	fp, #8
19408     A7 3A 68 FC | 	wrlong	#29, fp
1940c     08 4E 85 F1 | 	sub	fp, #8
19410     A7 12 02 F6 | 	mov	arg01, fp
19414     98 36 BF FD | 	call	#_push
19418     B0 00 90 FD | 	jmp	#LR__2054
1941c                 | LR__2051
1941c     F8 35 BF FD | 	call	#_pop
19420     A7 FA 61 FC | 	wrlong	result1, fp
19424     04 4E 05 F1 | 	add	fp, #4
19428     A7 FC 61 FC | 	wrlong	result2, fp
1942c     04 4E 05 F1 | 	add	fp, #4
19430     A7 FE 61 FC | 	wrlong	result3, fp
19434                 | ' t1=pop()
19434                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
19434     08 4E 85 F1 | 	sub	fp, #8
19438     1C FE 0D F2 | 	cmp	result3, #28 wz
1943c     08 4E 05 51 |  if_ne	add	fp, #8
19440     A7 26 02 5B |  if_ne	rdlong	local01, fp
19444     08 4E 85 51 |  if_ne	sub	fp, #8
19448     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1944c     70 00 90 5D |  if_ne	jmp	#LR__2053
19450     A7 26 02 FB | 	rdlong	local01, fp
19454     52 00 00 FF 
19458     18 E4 05 F1 | 	add	objptr, ##42008
1945c     F2 26 62 FC | 	wrlong	local01, objptr
19460                 | '   q=t1.result.uresult
19460                 | '   if q<7 then 
19460     52 00 00 FF 
19464     18 E4 85 F1 | 	sub	objptr, ##42008
19468     07 26 56 F2 | 	cmps	local01, #7 wc
1946c     40 00 90 3D |  if_ae	jmp	#LR__2052
19470     52 00 00 FF 
19474     18 E4 05 F1 | 	add	objptr, ##42008
19478     F2 26 02 FB | 	rdlong	local01, objptr
1947c     02 26 66 F0 | 	shl	local01, #2
19480     E8 E4 85 F1 | 	sub	objptr, #232
19484     F2 26 02 F1 | 	add	local01, objptr
19488     13 27 02 FB | 	rdlong	local01, local01
1948c     A7 26 62 FC | 	wrlong	local01, fp
19490     08 4E 05 F1 | 	add	fp, #8
19494     A7 3A 68 FC | 	wrlong	#29, fp
19498     08 4E 85 F1 | 	sub	fp, #8
1949c     A7 12 02 F6 | 	mov	arg01, fp
194a0     51 00 00 FF 
194a4     30 E5 85 F1 | 	sub	objptr, ##41776
194a8     04 36 BF FD | 	call	#_push
194ac                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
194ac     1C 00 90 FD | 	jmp	#LR__2054
194b0                 | LR__2052
194b0     29 12 06 F6 | 	mov	arg01, #41
194b4     00 14 06 F6 | 	mov	arg02, #0
194b8     C8 6E B0 FD | 	call	#_printerror
194bc                 | '      printerror(41) : return
194bc     0C 00 90 FD | 	jmp	#LR__2054
194c0                 | LR__2053
194c0     29 12 06 F6 | 	mov	arg01, #41
194c4     00 14 06 F6 | 	mov	arg02, #0
194c8     B8 6E B0 FD | 	call	#_printerror
194cc                 | LR__2054
194cc     A7 F0 03 F6 | 	mov	ptra, fp
194d0     B2 00 A0 FD | 	call	#popregs_
194d4                 | _do_stick_ret
194d4     2D 00 64 FD | 	ret
194d8                 | 
194d8                 | ' 
194d8                 | ' ' ------------------ strig
194d8                 | ' 
194d8                 | ' sub do_strig
194d8                 | _do_strig
194d8     01 4A 05 F6 | 	mov	COUNT_, #1
194dc     A8 00 A0 FD | 	call	#pushregs_
194e0     10 F0 07 F1 | 	add	ptra, #16
194e4     4A 00 00 FF 
194e8     80 E4 05 F1 | 	add	objptr, ##38016
194ec     F2 26 02 FB | 	rdlong	local01, objptr
194f0     13 17 02 F6 | 	mov	arg03, local01
194f4     01 16 66 F0 | 	shl	arg03, #1
194f8     13 17 02 F1 | 	add	arg03, local01
194fc     02 16 66 F0 | 	shl	arg03, #2
19500     03 00 00 FF 
19504     04 E4 85 F1 | 	sub	objptr, ##1540
19508     F2 16 02 F1 | 	add	arg03, objptr
1950c     0B 17 02 FB | 	rdlong	arg03, arg03
19510     0C 4E 05 F1 | 	add	fp, #12
19514     A7 16 62 FC | 	wrlong	arg03, fp
19518                 | ' 
19518                 | ' numpar=compiledline(lineptr_e).result.uresult
19518                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
19518     0C 4E 85 F1 | 	sub	fp, #12
1951c     02 16 16 F2 | 	cmp	arg03, #2 wc
19520     47 00 00 FF 
19524     7C E4 85 F1 | 	sub	objptr, ##36476
19528     40 00 90 CD |  if_b	jmp	#LR__2060
1952c     00 12 06 F6 | 	mov	arg01, #0
19530     08 05 B1 FD | 	call	#__system___getiolock_0573
19534     FD 12 02 F6 | 	mov	arg01, result1
19538     D8 A7 B0 FD | 	call	#__system___lockmem
1953c     A1 01 00 FF 
19540     CE 14 06 F6 | 	mov	arg02, ##@LR__5782
19544     00 12 06 F6 | 	mov	arg01, #0
19548     00 16 06 F6 | 	mov	arg03, #0
1954c     B8 B4 B0 FD | 	call	#__system___basic_print_string
19550     00 12 06 F6 | 	mov	arg01, #0
19554     E4 04 B1 FD | 	call	#__system___getiolock_0573
19558     FD 00 68 FC | 	wrlong	#0, result1
1955c     27 12 06 F6 | 	mov	arg01, #39
19560     00 14 06 F6 | 	mov	arg02, #0
19564     1C 6E B0 FD | 	call	#_printerror
19568     F0 00 90 FD | 	jmp	#LR__2064
1956c                 | LR__2060
1956c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1956c     0C 4E 05 F1 | 	add	fp, #12
19570     A7 FE 09 FB | 	rdlong	result3, fp wz
19574     0C 4E 85 F1 | 	sub	fp, #12
19578     30 00 90 5D |  if_ne	jmp	#LR__2061
1957c     51 00 00 FF 
19580     4C E5 05 F1 | 	add	objptr, ##41804
19584     F2 26 02 FB | 	rdlong	local01, objptr
19588     51 00 00 FF 
1958c     4C E5 85 F1 | 	sub	objptr, ##41804
19590     A7 26 62 FC | 	wrlong	local01, fp
19594     08 4E 05 F1 | 	add	fp, #8
19598     A7 3A 68 FC | 	wrlong	#29, fp
1959c     08 4E 85 F1 | 	sub	fp, #8
195a0     A7 12 02 F6 | 	mov	arg01, fp
195a4     08 35 BF FD | 	call	#_push
195a8     B0 00 90 FD | 	jmp	#LR__2064
195ac                 | LR__2061
195ac     68 34 BF FD | 	call	#_pop
195b0     A7 FA 61 FC | 	wrlong	result1, fp
195b4     04 4E 05 F1 | 	add	fp, #4
195b8     A7 FC 61 FC | 	wrlong	result2, fp
195bc     04 4E 05 F1 | 	add	fp, #4
195c0     A7 FE 61 FC | 	wrlong	result3, fp
195c4                 | ' t1=pop()
195c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
195c4     08 4E 85 F1 | 	sub	fp, #8
195c8     1C FE 0D F2 | 	cmp	result3, #28 wz
195cc     08 4E 05 51 |  if_ne	add	fp, #8
195d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
195d4     08 4E 85 51 |  if_ne	sub	fp, #8
195d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
195dc     70 00 90 5D |  if_ne	jmp	#LR__2063
195e0     A7 26 02 FB | 	rdlong	local01, fp
195e4     52 00 00 FF 
195e8     18 E4 05 F1 | 	add	objptr, ##42008
195ec     F2 26 62 FC | 	wrlong	local01, objptr
195f0                 | '   q=t1.result.uresult
195f0                 | '   if q<7 then 
195f0     52 00 00 FF 
195f4     18 E4 85 F1 | 	sub	objptr, ##42008
195f8     07 26 56 F2 | 	cmps	local01, #7 wc
195fc     40 00 90 3D |  if_ae	jmp	#LR__2062
19600     52 00 00 FF 
19604     18 E4 05 F1 | 	add	objptr, ##42008
19608     F2 26 02 FB | 	rdlong	local01, objptr
1960c     02 26 66 F0 | 	shl	local01, #2
19610     CC E4 85 F1 | 	sub	objptr, #204
19614     F2 26 02 F1 | 	add	local01, objptr
19618     13 27 02 FB | 	rdlong	local01, local01
1961c     A7 26 62 FC | 	wrlong	local01, fp
19620     08 4E 05 F1 | 	add	fp, #8
19624     A7 3A 68 FC | 	wrlong	#29, fp
19628     08 4E 85 F1 | 	sub	fp, #8
1962c     A7 12 02 F6 | 	mov	arg01, fp
19630     51 00 00 FF 
19634     4C E5 85 F1 | 	sub	objptr, ##41804
19638     74 34 BF FD | 	call	#_push
1963c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1963c     1C 00 90 FD | 	jmp	#LR__2064
19640                 | LR__2062
19640     29 12 06 F6 | 	mov	arg01, #41
19644     00 14 06 F6 | 	mov	arg02, #0
19648     38 6D B0 FD | 	call	#_printerror
1964c                 | '      printerror(41) : return
1964c     0C 00 90 FD | 	jmp	#LR__2064
19650                 | LR__2063
19650     29 12 06 F6 | 	mov	arg01, #41
19654     00 14 06 F6 | 	mov	arg02, #0
19658     28 6D B0 FD | 	call	#_printerror
1965c                 | LR__2064
1965c     A7 F0 03 F6 | 	mov	ptra, fp
19660     B2 00 A0 FD | 	call	#popregs_
19664                 | _do_strig_ret
19664     2D 00 64 FD | 	ret
19668                 | 
19668                 | ' 
19668                 | ' ' ------------------ tan
19668                 | ' 
19668                 | ' sub do_tan
19668                 | _do_tan
19668     01 4A 05 F6 | 	mov	COUNT_, #1
1966c     A8 00 A0 FD | 	call	#pushregs_
19670     10 F0 07 F1 | 	add	ptra, #16
19674     4A 00 00 FF 
19678     80 E4 05 F1 | 	add	objptr, ##38016
1967c     F2 26 02 FB | 	rdlong	local01, objptr
19680     13 17 02 F6 | 	mov	arg03, local01
19684     01 16 66 F0 | 	shl	arg03, #1
19688     13 17 02 F1 | 	add	arg03, local01
1968c     02 16 66 F0 | 	shl	arg03, #2
19690     03 00 00 FF 
19694     04 E4 85 F1 | 	sub	objptr, ##1540
19698     F2 16 02 F1 | 	add	arg03, objptr
1969c     0B 17 02 FB | 	rdlong	arg03, arg03
196a0     0C 4E 05 F1 | 	add	fp, #12
196a4     A7 16 62 FC | 	wrlong	arg03, fp
196a8                 | ' 
196a8                 | ' numpar=compiledline(lineptr_e).result.uresult
196a8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
196a8     0C 4E 85 F1 | 	sub	fp, #12
196ac     02 16 16 F2 | 	cmp	arg03, #2 wc
196b0     47 00 00 FF 
196b4     7C E4 85 F1 | 	sub	objptr, ##36476
196b8     0C 4E 05 C1 |  if_b	add	fp, #12
196bc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
196c0     0C 4E 85 C1 |  if_b	sub	fp, #12
196c4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2070
196c8     00 12 06 F6 | 	mov	arg01, #0
196cc     6C 03 B1 FD | 	call	#__system___getiolock_0573
196d0     FD 12 02 F6 | 	mov	arg01, result1
196d4     3C A6 B0 FD | 	call	#__system___lockmem
196d8     A1 01 00 FF 
196dc     D6 14 06 F6 | 	mov	arg02, ##@LR__5783
196e0     00 12 06 F6 | 	mov	arg01, #0
196e4     00 16 06 F6 | 	mov	arg03, #0
196e8     1C B3 B0 FD | 	call	#__system___basic_print_string
196ec     00 12 06 F6 | 	mov	arg01, #0
196f0     48 03 B1 FD | 	call	#__system___getiolock_0573
196f4     FD 00 68 FC | 	wrlong	#0, result1
196f8     27 12 06 F6 | 	mov	arg01, #39
196fc     00 14 06 F6 | 	mov	arg02, #0
19700     80 6C B0 FD | 	call	#_printerror
19704     64 00 90 FD | 	jmp	#LR__2071
19708                 | LR__2070
19708     0C 33 BF FD | 	call	#_pop
1970c     A7 FA 61 FC | 	wrlong	result1, fp
19710     04 4E 05 F1 | 	add	fp, #4
19714     A7 FC 61 FC | 	wrlong	result2, fp
19718     04 4E 05 F1 | 	add	fp, #4
1971c     A7 FE 61 FC | 	wrlong	result3, fp
19720     08 4E 85 F1 | 	sub	fp, #8
19724     51 00 00 FF 
19728     BC E5 05 F1 | 	add	objptr, ##41916
1972c     F2 26 02 FB | 	rdlong	local01, objptr
19730     51 00 00 FF 
19734     BC E5 85 F1 | 	sub	objptr, ##41916
19738     A7 12 02 F6 | 	mov	arg01, fp
1973c     78 35 BF FD | 	call	#_converttofloat
19740     FD 14 02 F6 | 	mov	arg02, result1
19744     13 13 02 F6 | 	mov	arg01, local01
19748     40 D4 B0 FD | 	call	#__system___float_mul
1974c     FD 12 02 F6 | 	mov	arg01, result1
19750     E4 DE B0 FD | 	call	#__system____builtin_tanf
19754     A7 FA 61 FC | 	wrlong	result1, fp
19758     08 4E 05 F1 | 	add	fp, #8
1975c     A7 3C 68 FC | 	wrlong	#30, fp
19760     08 4E 85 F1 | 	sub	fp, #8
19764     A7 12 02 F6 | 	mov	arg01, fp
19768     44 33 BF FD | 	call	#_push
1976c                 | LR__2071
1976c     A7 F0 03 F6 | 	mov	ptra, fp
19770     B2 00 A0 FD | 	call	#popregs_
19774                 | _do_tan_ret
19774     2D 00 64 FD | 	ret
19778                 | 
19778                 | ' 
19778                 | ' ' ------------------ val
19778                 | ' 
19778                 | ' sub do_val
19778                 | _do_val
19778     03 4A 05 F6 | 	mov	COUNT_, #3
1977c     A8 00 A0 FD | 	call	#pushregs_
19780     20 F0 07 F1 | 	add	ptra, #32
19784     4A 00 00 FF 
19788     80 E4 05 F1 | 	add	objptr, ##38016
1978c     F2 16 02 FB | 	rdlong	arg03, objptr
19790     0B 27 02 F6 | 	mov	local01, arg03
19794     01 26 66 F0 | 	shl	local01, #1
19798     0B 27 02 F1 | 	add	local01, arg03
1979c     02 26 66 F0 | 	shl	local01, #2
197a0     03 00 00 FF 
197a4     04 E4 85 F1 | 	sub	objptr, ##1540
197a8     F2 26 02 F1 | 	add	local01, objptr
197ac     13 17 02 FB | 	rdlong	arg03, local01
197b0     0C 4E 05 F1 | 	add	fp, #12
197b4     A7 16 62 FC | 	wrlong	arg03, fp
197b8                 | ' 
197b8                 | ' numpar=compiledline(lineptr_e).result.uresult
197b8                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
197b8     0C 4E 85 F1 | 	sub	fp, #12
197bc     02 16 16 F2 | 	cmp	arg03, #2 wc
197c0     47 00 00 FF 
197c4     7C E4 85 F1 | 	sub	objptr, ##36476
197c8     0C 4E 05 C1 |  if_b	add	fp, #12
197cc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
197d0     0C 4E 85 C1 |  if_b	sub	fp, #12
197d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2080
197d8     00 12 06 F6 | 	mov	arg01, #0
197dc     5C 02 B1 FD | 	call	#__system___getiolock_0573
197e0     FD 12 02 F6 | 	mov	arg01, result1
197e4     2C A5 B0 FD | 	call	#__system___lockmem
197e8     A1 01 00 FF 
197ec     DC 14 06 F6 | 	mov	arg02, ##@LR__5784
197f0     00 12 06 F6 | 	mov	arg01, #0
197f4     00 16 06 F6 | 	mov	arg03, #0
197f8     0C B2 B0 FD | 	call	#__system___basic_print_string
197fc     00 12 06 F6 | 	mov	arg01, #0
19800     38 02 B1 FD | 	call	#__system___getiolock_0573
19804     FD 00 68 FC | 	wrlong	#0, result1
19808     27 12 06 F6 | 	mov	arg01, #39
1980c     00 14 06 F6 | 	mov	arg02, #0
19810     70 6B B0 FD | 	call	#_printerror
19814     60 02 90 FD | 	jmp	#LR__2093
19818                 | LR__2080
19818     FC 31 BF FD | 	call	#_pop
1981c     FF 16 02 F6 | 	mov	arg03, result3
19820     A7 FA 61 FC | 	wrlong	result1, fp
19824     04 4E 05 F1 | 	add	fp, #4
19828     A7 FC 61 FC | 	wrlong	result2, fp
1982c     04 4E 05 F1 | 	add	fp, #4
19830     A7 16 62 FC | 	wrlong	arg03, fp
19834                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
19834     08 4E 85 F1 | 	sub	fp, #8
19838     2B 16 0E F2 | 	cmp	arg03, #43 wz
1983c     18 00 90 5D |  if_ne	jmp	#LR__2081
19840     A7 12 02 FB | 	rdlong	arg01, fp
19844     48 33 BF FD | 	call	#_convertstring
19848     A7 FA 61 FC | 	wrlong	result1, fp
1984c     08 4E 05 F1 | 	add	fp, #8
19850     A7 3E 68 FC | 	wrlong	#31, fp
19854     08 4E 85 F1 | 	sub	fp, #8
19858                 | LR__2081
19858                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
19858     08 4E 05 F1 | 	add	fp, #8
1985c     A7 16 02 FB | 	rdlong	arg03, fp
19860     08 4E 85 F1 | 	sub	fp, #8
19864     1F 16 0E F2 | 	cmp	arg03, #31 wz
19868     40 00 90 AD |  if_e	jmp	#LR__2082
1986c     00 12 06 F6 | 	mov	arg01, #0
19870     C8 01 B1 FD | 	call	#__system___getiolock_0573
19874     FD 12 02 F6 | 	mov	arg01, result1
19878     98 A4 B0 FD | 	call	#__system___lockmem
1987c     A1 01 00 FF 
19880     E2 14 06 F6 | 	mov	arg02, ##@LR__5785
19884     00 12 06 F6 | 	mov	arg01, #0
19888     00 16 06 F6 | 	mov	arg03, #0
1988c     78 B1 B0 FD | 	call	#__system___basic_print_string
19890     00 12 06 F6 | 	mov	arg01, #0
19894     A4 01 B1 FD | 	call	#__system___getiolock_0573
19898     FD 00 68 FC | 	wrlong	#0, result1
1989c     0F 12 06 F6 | 	mov	arg01, #15
198a0     00 14 06 F6 | 	mov	arg02, #0
198a4     DC 6A B0 FD | 	call	#_printerror
198a8     CC 01 90 FD | 	jmp	#LR__2093
198ac                 | LR__2082
198ac                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
198ac     A7 12 02 FB | 	rdlong	arg01, fp
198b0     01 14 06 F6 | 	mov	arg02, #1
198b4     D8 C4 B0 FD | 	call	#__system__Left_S
198b8     FD 12 02 F6 | 	mov	arg01, result1
198bc     A1 01 00 FF 
198c0     E8 14 06 F6 | 	mov	arg02, ##@LR__5786
198c4     74 A4 B0 FD | 	call	#__system___string_cmp
198c8     00 FA 0D F2 | 	cmp	result1, #0 wz
198cc     48 00 90 5D |  if_ne	jmp	#LR__2085
198d0     A1 01 00 FF 
198d4     EA 26 06 F6 | 	mov	local01, ##@LR__5787
198d8     A7 16 02 FB | 	rdlong	arg03, fp
198dc     0B 13 02 F6 | 	mov	arg01, arg03
198e0     09 29 02 F6 | 	mov	local02, arg01
198e4     97 06 48 FB | 	callpa	#(@LR__2084-@LR__2083)>>2,fcache_load_ptr_
198e8                 | LR__2083
198e8     14 FB C9 FA | 	rdbyte	result1, local02 wz
198ec     01 28 06 51 |  if_ne	add	local02, #1
198f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2083
198f4                 | LR__2084
198f4     09 29 82 F1 | 	sub	local02, arg01
198f8     14 15 02 F6 | 	mov	arg02, local02
198fc     01 14 86 F1 | 	sub	arg02, #1
19900     0B 13 02 F6 | 	mov	arg01, arg03
19904     10 C5 B0 FD | 	call	#__system__Right_S
19908     FD 14 02 F6 | 	mov	arg02, result1
1990c     13 13 02 F6 | 	mov	arg01, local01
19910     5C A4 B0 FD | 	call	#__system___string_concat
19914     A7 FA 61 FC | 	wrlong	result1, fp
19918                 | LR__2085
19918                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
19918     A7 12 02 FB | 	rdlong	arg01, fp
1991c     01 14 06 F6 | 	mov	arg02, #1
19920     6C C4 B0 FD | 	call	#__system__Left_S
19924     FD 12 02 F6 | 	mov	arg01, result1
19928     A1 01 00 FF 
1992c     ED 14 06 F6 | 	mov	arg02, ##@LR__5788
19930     08 A4 B0 FD | 	call	#__system___string_cmp
19934     00 FA 0D F2 | 	cmp	result1, #0 wz
19938     48 00 90 5D |  if_ne	jmp	#LR__2088
1993c     A1 01 00 FF 
19940     EF 26 06 F6 | 	mov	local01, ##@LR__5789
19944     A7 16 02 FB | 	rdlong	arg03, fp
19948     0B 13 02 F6 | 	mov	arg01, arg03
1994c     09 29 02 F6 | 	mov	local02, arg01
19950     97 06 48 FB | 	callpa	#(@LR__2087-@LR__2086)>>2,fcache_load_ptr_
19954                 | LR__2086
19954     14 FB C9 FA | 	rdbyte	result1, local02 wz
19958     01 28 06 51 |  if_ne	add	local02, #1
1995c     F4 FF 9F 5D |  if_ne	jmp	#LR__2086
19960                 | LR__2087
19960     09 29 82 F1 | 	sub	local02, arg01
19964     14 15 02 F6 | 	mov	arg02, local02
19968     01 14 86 F1 | 	sub	arg02, #1
1996c     0B 13 02 F6 | 	mov	arg01, arg03
19970     A4 C4 B0 FD | 	call	#__system__Right_S
19974     FD 14 02 F6 | 	mov	arg02, result1
19978     13 13 02 F6 | 	mov	arg01, local01
1997c     F0 A3 B0 FD | 	call	#__system___string_concat
19980     A7 FA 61 FC | 	wrlong	result1, fp
19984                 | LR__2088
19984     A7 12 02 FB | 	rdlong	arg01, fp
19988     0C DA B0 FD | 	call	#__system____builtin_atof
1998c     1C 4E 05 F1 | 	add	fp, #28
19990     A7 FA 61 FC | 	wrlong	result1, fp
19994     1C 4E 85 F1 | 	sub	fp, #28
19998     A7 12 02 FB | 	rdlong	arg01, fp
1999c     00 14 06 F6 | 	mov	arg02, #0
199a0     60 D8 B0 FD | 	call	#__system____builtin_atoi
199a4     18 4E 05 F1 | 	add	fp, #24
199a8     A7 FA 61 FC | 	wrlong	result1, fp
199ac                 | ' fval=val(t1.result.sresult)
199ac                 | ' ival=val%(t1.result.sresult)
199ac                 | ' if fval=ival then
199ac     04 4E 05 F1 | 	add	fp, #4
199b0     A7 26 02 FB | 	rdlong	local01, fp
199b4     1C 4E 85 F1 | 	sub	fp, #28
199b8     FD 12 52 F6 | 	abs	arg01, result1 wc
199bc     1F 2A C6 C9 |  if_b	decod	local03, #31
199c0     00 2A 06 36 |  if_ae	mov	local03, #0
199c4     C0 CD B0 FD | 	call	#__system___float_fromuns
199c8     15 FB 61 F5 | 	xor	result1, local03
199cc     FD 14 02 F6 | 	mov	arg02, result1
199d0     13 13 02 F6 | 	mov	arg01, local01
199d4     01 16 06 F6 | 	mov	arg03, #1
199d8     E4 D5 B0 FD | 	call	#__system___float_cmp
199dc     00 FA 0D F2 | 	cmp	result1, #0 wz
199e0     20 00 90 5D |  if_ne	jmp	#LR__2089
199e4     18 4E 05 F1 | 	add	fp, #24
199e8     A7 26 02 FB | 	rdlong	local01, fp
199ec     18 4E 85 F1 | 	sub	fp, #24
199f0     A7 26 62 FC | 	wrlong	local01, fp
199f4     08 4E 05 F1 | 	add	fp, #8
199f8     A7 38 68 FC | 	wrlong	#28, fp
199fc     08 4E 85 F1 | 	sub	fp, #8
19a00     6C 00 90 FD | 	jmp	#LR__2092
19a04                 | LR__2089
19a04                 | '   if fval=0 andalso ival<>0 then
19a04     1C 4E 05 F1 | 	add	fp, #28
19a08     A7 12 02 FB | 	rdlong	arg01, fp
19a0c     1C 4E 85 F1 | 	sub	fp, #28
19a10     00 14 06 F6 | 	mov	arg02, #0
19a14     01 16 06 F6 | 	mov	arg03, #1
19a18     A4 D5 B0 FD | 	call	#__system___float_cmp
19a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
19a20     30 00 90 5D |  if_ne	jmp	#LR__2090
19a24     18 4E 05 F1 | 	add	fp, #24
19a28     A7 26 0A FB | 	rdlong	local01, fp wz
19a2c     18 4E 85 F1 | 	sub	fp, #24
19a30     20 00 90 AD |  if_e	jmp	#LR__2090
19a34     18 4E 05 F1 | 	add	fp, #24
19a38     A7 26 02 FB | 	rdlong	local01, fp
19a3c     18 4E 85 F1 | 	sub	fp, #24
19a40     A7 26 62 FC | 	wrlong	local01, fp
19a44     08 4E 05 F1 | 	add	fp, #8
19a48     A7 38 68 FC | 	wrlong	#28, fp
19a4c     08 4E 85 F1 | 	sub	fp, #8
19a50     1C 00 90 FD | 	jmp	#LR__2091
19a54                 | LR__2090
19a54     1C 4E 05 F1 | 	add	fp, #28
19a58     A7 26 02 FB | 	rdlong	local01, fp
19a5c     1C 4E 85 F1 | 	sub	fp, #28
19a60     A7 26 62 FC | 	wrlong	local01, fp
19a64     08 4E 05 F1 | 	add	fp, #8
19a68     A7 3C 68 FC | 	wrlong	#30, fp
19a6c     08 4E 85 F1 | 	sub	fp, #8
19a70                 | LR__2091
19a70                 | LR__2092
19a70     A7 12 02 F6 | 	mov	arg01, fp
19a74     38 30 BF FD | 	call	#_push
19a78                 | LR__2093
19a78     A7 F0 03 F6 | 	mov	ptra, fp
19a7c     B2 00 A0 FD | 	call	#popregs_
19a80                 | _do_val_ret
19a80     2D 00 64 FD | 	ret
19a84                 | 
19a84                 | ' 
19a84                 | ' ' ------------------ waitclock
19a84                 | ' 
19a84                 | ' sub do_waitclock
19a84                 | _do_waitclock
19a84     51 00 00 FF 
19a88     A8 E5 05 F1 | 	add	objptr, ##41896
19a8c     F2 00 02 FB | 	rdlong	_var01, objptr
19a90                 | ' c=hkcnt
19a90                 | ' do: loop until hkcnt<>c
19a90                 | LR__2100
19a90     F2 02 02 FB | 	rdlong	_var02, objptr
19a94     00 03 0A F2 | 	cmp	_var02, _var01 wz
19a98     F4 FF 9F AD |  if_e	jmp	#LR__2100
19a9c     51 00 00 FF 
19aa0     A8 E5 85 F1 | 	sub	objptr, ##41896
19aa4                 | _do_waitclock_ret
19aa4     2D 00 64 FD | 	ret
19aa8                 | 
19aa8                 | ' 
19aa8                 | ' ' ------------------ waitms
19aa8                 | ' 
19aa8                 | ' sub do_waitms
19aa8                 | _do_waitms
19aa8     01 4A 05 F6 | 	mov	COUNT_, #1
19aac     A8 00 A0 FD | 	call	#pushregs_
19ab0     18 F0 07 F1 | 	add	ptra, #24
19ab4     60 2F BF FD | 	call	#_pop
19ab8     A7 FA 61 FC | 	wrlong	result1, fp
19abc     04 4E 05 F1 | 	add	fp, #4
19ac0     A7 FC 61 FC | 	wrlong	result2, fp
19ac4     04 4E 05 F1 | 	add	fp, #4
19ac8     A7 FE 61 FC | 	wrlong	result3, fp
19acc     08 4E 85 F1 | 	sub	fp, #8
19ad0     A7 12 02 F6 | 	mov	arg01, fp
19ad4     24 31 BF FD | 	call	#_converttoint
19ad8     0C 4E 05 F1 | 	add	fp, #12
19adc     A7 FA 61 FC | 	wrlong	result1, fp
19ae0                 | ' 
19ae0                 | ' t1=pop()  
19ae0                 | ' t=converttoint(t1)
19ae0                 | ' if t<0 then return
19ae0     0C 4E 85 F1 | 	sub	fp, #12
19ae4     00 FA 55 F2 | 	cmps	result1, #0 wc
19ae8     E4 00 90 CD |  if_b	jmp	#LR__2116
19aec                 | ' if t < 1000 then 
19aec     0C 4E 05 F1 | 	add	fp, #12
19af0     A7 12 02 FB | 	rdlong	arg01, fp
19af4     0C 4E 85 F1 | 	sub	fp, #12
19af8     01 00 00 FF 
19afc     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
19b00     14 00 90 3D |  if_ae	jmp	#LR__2110
19b04     0C 4E 05 F1 | 	add	fp, #12
19b08     A7 12 02 FB | 	rdlong	arg01, fp
19b0c     0C 4E 85 F1 | 	sub	fp, #12
19b10     F4 A4 B0 FD | 	call	#__system___waitms
19b14     B8 00 90 FD | 	jmp	#LR__2115
19b18                 | LR__2110
19b18     10 4E 05 F1 | 	add	fp, #16
19b1c     A7 02 68 FC | 	wrlong	#1, fp
19b20     04 4E 85 F1 | 	sub	fp, #4
19b24     A7 12 02 FB | 	rdlong	arg01, fp
19b28     09 13 52 F6 | 	abs	arg01, arg01 wc
19b2c     01 00 00 FF 
19b30     E8 13 16 FD | 	qdiv	arg01, ##1000
19b34                 | '   for i=1 to t/1000
19b34     0C 4E 85 F1 | 	sub	fp, #12
19b38     18 26 62 FD | 	getqx	local01
19b3c     13 27 82 F6 | 	negc	local01, local01
19b40     01 26 06 F1 | 	add	local01, #1
19b44                 | LR__2111
19b44     10 4E 05 F1 | 	add	fp, #16
19b48     A7 12 02 FB | 	rdlong	arg01, fp
19b4c     10 4E 85 F1 | 	sub	fp, #16
19b50     13 13 52 F2 | 	cmps	arg01, local01 wc
19b54     54 00 90 3D |  if_ae	jmp	#LR__2114
19b58     01 00 00 FF 
19b5c     E8 13 06 F6 | 	mov	arg01, ##1000
19b60     A4 A4 B0 FD | 	call	#__system___waitms
19b64                 | '     waitms(1000)
19b64                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
19b64     E0 12 06 F6 | 	mov	arg01, #224
19b68     F8 98 B0 FD | 	call	#_usbnew_spin2_keystate
19b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
19b70     10 00 90 5D |  if_ne	jmp	#LR__2112
19b74     E4 12 06 F6 | 	mov	arg01, #228
19b78     E8 98 B0 FD | 	call	#_usbnew_spin2_keystate
19b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
19b80     10 00 90 AD |  if_e	jmp	#LR__2113
19b84                 | LR__2112
19b84     06 12 06 F6 | 	mov	arg01, #6
19b88     D8 98 B0 FD | 	call	#_usbnew_spin2_keystate
19b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
19b90     3C 00 90 5D |  if_ne	jmp	#LR__2116
19b94                 | LR__2113
19b94     10 4E 05 F1 | 	add	fp, #16
19b98     A7 12 02 FB | 	rdlong	arg01, fp
19b9c     01 12 06 F1 | 	add	arg01, #1
19ba0     A7 12 62 FC | 	wrlong	arg01, fp
19ba4     10 4E 85 F1 | 	sub	fp, #16
19ba8     98 FF 9F FD | 	jmp	#LR__2111
19bac                 | LR__2114
19bac     0C 4E 05 F1 | 	add	fp, #12
19bb0     A7 26 02 FB | 	rdlong	local01, fp
19bb4     13 27 52 F6 | 	abs	local01, local01 wc
19bb8     01 00 00 FF 
19bbc     E8 27 16 FD | 	qdiv	local01, ##1000
19bc0     0C 4E 85 F1 | 	sub	fp, #12
19bc4     19 26 62 FD | 	getqy	local01
19bc8     13 13 82 F6 | 	negc	arg01, local01
19bcc     38 A4 B0 FD | 	call	#__system___waitms
19bd0                 | LR__2115
19bd0                 | LR__2116
19bd0     A7 F0 03 F6 | 	mov	ptra, fp
19bd4     B2 00 A0 FD | 	call	#popregs_
19bd8                 | _do_waitms_ret
19bd8     2D 00 64 FD | 	ret
19bdc                 | 
19bdc                 | ' 
19bdc                 | ' ' ------------------ waitvbl
19bdc                 | ' 
19bdc                 | ' sub do_waitvbl
19bdc                 | _do_waitvbl
19bdc     01 12 06 F6 | 	mov	arg01, #1
19be0     84 84 B0 FD | 	call	#_hg010b_spin2_waitvbl
19be4                 | _do_waitvbl_ret
19be4     2D 00 64 FD | 	ret
19be8                 | 
19be8                 | ' 
19be8                 | ' ' ------------------ wrpin
19be8                 | ' 
19be8                 | ' sub do_wrpin
19be8                 | _do_wrpin
19be8     01 4A 05 F6 | 	mov	COUNT_, #1
19bec     A8 00 A0 FD | 	call	#pushregs_
19bf0     18 F0 07 F1 | 	add	ptra, #24
19bf4     20 2E BF FD | 	call	#_pop
19bf8     FD 14 02 F6 | 	mov	arg02, result1
19bfc     FE 12 02 F6 | 	mov	arg01, result2
19c00     FF 26 02 F6 | 	mov	local01, result3
19c04     A7 14 62 FC | 	wrlong	arg02, fp
19c08     04 4E 05 F1 | 	add	fp, #4
19c0c     A7 12 62 FC | 	wrlong	arg01, fp
19c10     04 4E 05 F1 | 	add	fp, #4
19c14     A7 26 62 FC | 	wrlong	local01, fp
19c18     08 4E 85 F1 | 	sub	fp, #8
19c1c     F8 2D BF FD | 	call	#_pop
19c20     FF 26 02 F6 | 	mov	local01, result3
19c24     0C 4E 05 F1 | 	add	fp, #12
19c28     A7 FA 61 FC | 	wrlong	result1, fp
19c2c     04 4E 05 F1 | 	add	fp, #4
19c30     A7 FC 61 FC | 	wrlong	result2, fp
19c34     04 4E 05 F1 | 	add	fp, #4
19c38     A7 26 62 FC | 	wrlong	local01, fp
19c3c     08 4E 85 F1 | 	sub	fp, #8
19c40     A7 12 02 F6 | 	mov	arg01, fp
19c44     0C 4E 85 F1 | 	sub	fp, #12
19c48     B0 2F BF FD | 	call	#_converttoint
19c4c     FD 26 02 F6 | 	mov	local01, result1
19c50     A7 12 02 F6 | 	mov	arg01, fp
19c54     A4 2F BF FD | 	call	#_converttoint
19c58     13 FB 01 FC | 	wrpin	result1, local01
19c5c     A7 F0 03 F6 | 	mov	ptra, fp
19c60     B2 00 A0 FD | 	call	#popregs_
19c64                 | _do_wrpin_ret
19c64     2D 00 64 FD | 	ret
19c68                 | 
19c68                 | ' 
19c68                 | ' ' ------------------ wxpin
19c68                 | ' 
19c68                 | ' sub do_wxpin
19c68                 | _do_wxpin
19c68     01 4A 05 F6 | 	mov	COUNT_, #1
19c6c     A8 00 A0 FD | 	call	#pushregs_
19c70     18 F0 07 F1 | 	add	ptra, #24
19c74     A0 2D BF FD | 	call	#_pop
19c78     FD 14 02 F6 | 	mov	arg02, result1
19c7c     FE 12 02 F6 | 	mov	arg01, result2
19c80     FF 26 02 F6 | 	mov	local01, result3
19c84     A7 14 62 FC | 	wrlong	arg02, fp
19c88     04 4E 05 F1 | 	add	fp, #4
19c8c     A7 12 62 FC | 	wrlong	arg01, fp
19c90     04 4E 05 F1 | 	add	fp, #4
19c94     A7 26 62 FC | 	wrlong	local01, fp
19c98     08 4E 85 F1 | 	sub	fp, #8
19c9c     78 2D BF FD | 	call	#_pop
19ca0     FF 26 02 F6 | 	mov	local01, result3
19ca4     0C 4E 05 F1 | 	add	fp, #12
19ca8     A7 FA 61 FC | 	wrlong	result1, fp
19cac     04 4E 05 F1 | 	add	fp, #4
19cb0     A7 FC 61 FC | 	wrlong	result2, fp
19cb4     04 4E 05 F1 | 	add	fp, #4
19cb8     A7 26 62 FC | 	wrlong	local01, fp
19cbc     08 4E 85 F1 | 	sub	fp, #8
19cc0     A7 12 02 F6 | 	mov	arg01, fp
19cc4     0C 4E 85 F1 | 	sub	fp, #12
19cc8     30 2F BF FD | 	call	#_converttoint
19ccc     FD 26 02 F6 | 	mov	local01, result1
19cd0     A7 12 02 F6 | 	mov	arg01, fp
19cd4     24 2F BF FD | 	call	#_converttoint
19cd8     13 FB 11 FC | 	wxpin	result1, local01
19cdc     A7 F0 03 F6 | 	mov	ptra, fp
19ce0     B2 00 A0 FD | 	call	#popregs_
19ce4                 | _do_wxpin_ret
19ce4     2D 00 64 FD | 	ret
19ce8                 | 
19ce8                 | ' 
19ce8                 | ' ' ------------------ wypin
19ce8                 | ' 
19ce8                 | ' sub do_wypin
19ce8                 | _do_wypin
19ce8     01 4A 05 F6 | 	mov	COUNT_, #1
19cec     A8 00 A0 FD | 	call	#pushregs_
19cf0     18 F0 07 F1 | 	add	ptra, #24
19cf4     20 2D BF FD | 	call	#_pop
19cf8     FD 14 02 F6 | 	mov	arg02, result1
19cfc     FE 12 02 F6 | 	mov	arg01, result2
19d00     FF 26 02 F6 | 	mov	local01, result3
19d04     A7 14 62 FC | 	wrlong	arg02, fp
19d08     04 4E 05 F1 | 	add	fp, #4
19d0c     A7 12 62 FC | 	wrlong	arg01, fp
19d10     04 4E 05 F1 | 	add	fp, #4
19d14     A7 26 62 FC | 	wrlong	local01, fp
19d18     08 4E 85 F1 | 	sub	fp, #8
19d1c     F8 2C BF FD | 	call	#_pop
19d20     FF 26 02 F6 | 	mov	local01, result3
19d24     0C 4E 05 F1 | 	add	fp, #12
19d28     A7 FA 61 FC | 	wrlong	result1, fp
19d2c     04 4E 05 F1 | 	add	fp, #4
19d30     A7 FC 61 FC | 	wrlong	result2, fp
19d34     04 4E 05 F1 | 	add	fp, #4
19d38     A7 26 62 FC | 	wrlong	local01, fp
19d3c     08 4E 85 F1 | 	sub	fp, #8
19d40     A7 12 02 F6 | 	mov	arg01, fp
19d44     0C 4E 85 F1 | 	sub	fp, #12
19d48     B0 2E BF FD | 	call	#_converttoint
19d4c     FD 26 02 F6 | 	mov	local01, result1
19d50     A7 12 02 F6 | 	mov	arg01, fp
19d54     A4 2E BF FD | 	call	#_converttoint
19d58     13 FB 21 FC | 	wypin	result1, local01
19d5c     A7 F0 03 F6 | 	mov	ptra, fp
19d60     B2 00 A0 FD | 	call	#popregs_
19d64                 | _do_wypin_ret
19d64     2D 00 64 FD | 	ret
19d68                 | 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' 
19d68                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
19d68                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
19d68                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
19d68                 | ' 
19d68                 | ' 
19d68                 | ' '------------------ Assign
19d68                 | ' 
19d68                 | ' sub do_assign
19d68                 | _do_assign
19d68     05 4A 05 F6 | 	mov	COUNT_, #5
19d6c     A8 00 A0 FD | 	call	#pushregs_
19d70     44 F0 07 F1 | 	add	ptra, #68
19d74     4A 00 00 FF 
19d78     80 E4 05 F1 | 	add	objptr, ##38016
19d7c     F2 16 02 FB | 	rdlong	arg03, objptr
19d80     0B 15 02 F6 | 	mov	arg02, arg03
19d84     01 14 66 F0 | 	shl	arg02, #1
19d88     0B 15 02 F1 | 	add	arg02, arg03
19d8c     02 14 66 F0 | 	shl	arg02, #2
19d90     03 00 00 FF 
19d94     04 E4 85 F1 | 	sub	objptr, ##1540
19d98     F2 14 02 F1 | 	add	arg02, objptr
19d9c     0A 15 02 FB | 	rdlong	arg02, arg02
19da0     18 4E 05 F1 | 	add	fp, #24
19da4     A7 14 62 FC | 	wrlong	arg02, fp
19da8                 | ' 
19da8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
19da8                 | ' if variables(varnum).vartype<array_no_type then 
19da8     18 4E 85 F1 | 	sub	fp, #24
19dac     04 14 66 F0 | 	shl	arg02, #4
19db0     32 00 00 FF 
19db4     84 E4 85 F1 | 	sub	objptr, ##25732
19db8     F2 14 02 F1 | 	add	arg02, objptr
19dbc     0C 14 06 F1 | 	add	arg02, #12
19dc0     0A 17 02 FB | 	rdlong	arg03, arg02
19dc4     00 17 16 F2 | 	cmp	arg03, #256 wc
19dc8     14 00 00 FF 
19dcc     F8 E5 85 F1 | 	sub	objptr, ##10744
19dd0     18 01 90 3D |  if_ae	jmp	#LR__2120
19dd4     40 2C BF FD | 	call	#_pop
19dd8     A7 FA 61 FC | 	wrlong	result1, fp
19ddc     04 4E 05 F1 | 	add	fp, #4
19de0     A7 FC 61 FC | 	wrlong	result2, fp
19de4     04 4E 05 F1 | 	add	fp, #4
19de8     A7 FE 61 FC | 	wrlong	result3, fp
19dec     08 4E 85 F1 | 	sub	fp, #8
19df0     A7 16 02 FB | 	rdlong	arg03, fp
19df4     04 4E 05 F1 | 	add	fp, #4
19df8     A7 14 02 FB | 	rdlong	arg02, fp
19dfc     14 4E 05 F1 | 	add	fp, #20
19e00     A7 12 02 FB | 	rdlong	arg01, fp
19e04     04 12 66 F0 | 	shl	arg01, #4
19e08     14 00 00 FF 
19e0c     F8 E5 05 F1 | 	add	objptr, ##10744
19e10     F2 12 02 F1 | 	add	arg01, objptr
19e14     04 12 06 F1 | 	add	arg01, #4
19e18     09 17 62 FC | 	wrlong	arg03, arg01
19e1c     A7 16 02 FB | 	rdlong	arg03, fp
19e20     04 16 66 F0 | 	shl	arg03, #4
19e24     F2 16 02 F1 | 	add	arg03, objptr
19e28     08 16 06 F1 | 	add	arg03, #8
19e2c     0B 15 62 FC | 	wrlong	arg02, arg03
19e30     A7 16 02 FB | 	rdlong	arg03, fp
19e34     04 16 66 F0 | 	shl	arg03, #4
19e38     F2 16 02 F1 | 	add	arg03, objptr
19e3c     10 4E 85 F1 | 	sub	fp, #16
19e40     A7 14 02 FB | 	rdlong	arg02, fp
19e44     0C 16 06 F1 | 	add	arg03, #12
19e48     0B 15 62 FC | 	wrlong	arg02, arg03
19e4c                 | '   t1=pop() 
19e4c                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
19e4c                 | '   if variables(varnum).vartype<>result_string2 then return
19e4c     10 4E 05 F1 | 	add	fp, #16
19e50     A7 16 02 FB | 	rdlong	arg03, fp
19e54     18 4E 85 F1 | 	sub	fp, #24
19e58     04 16 66 F0 | 	shl	arg03, #4
19e5c     F2 16 02 F1 | 	add	arg03, objptr
19e60     0C 16 06 F1 | 	add	arg03, #12
19e64     0B 17 02 FB | 	rdlong	arg03, arg03
19e68     2B 16 0E F2 | 	cmp	arg03, #43 wz
19e6c     14 00 00 FF 
19e70     F8 E5 85 F1 | 	sub	objptr, ##10744
19e74     EC 04 90 5D |  if_ne	jmp	#LR__2143
19e78     18 4E 05 F1 | 	add	fp, #24
19e7c     A7 16 02 FB | 	rdlong	arg03, fp
19e80     0B 27 02 F6 | 	mov	local01, arg03
19e84     04 26 66 F0 | 	shl	local01, #4
19e88     14 00 00 FF 
19e8c     F8 E5 05 F1 | 	add	objptr, ##10744
19e90     F2 26 02 F1 | 	add	local01, objptr
19e94     18 4E 85 F1 | 	sub	fp, #24
19e98     04 16 66 F0 | 	shl	arg03, #4
19e9c     F2 16 02 F1 | 	add	arg03, objptr
19ea0     04 16 06 F1 | 	add	arg03, #4
19ea4     0B 13 02 FB | 	rdlong	arg01, arg03
19ea8     14 00 00 FF 
19eac     F8 E5 85 F1 | 	sub	objptr, ##10744
19eb0     DC 2C BF FD | 	call	#_convertstring
19eb4     04 26 06 F1 | 	add	local01, #4
19eb8     13 FB 61 FC | 	wrlong	result1, local01
19ebc     18 4E 05 F1 | 	add	fp, #24
19ec0     A7 26 02 FB | 	rdlong	local01, fp
19ec4     18 4E 85 F1 | 	sub	fp, #24
19ec8     04 26 66 F0 | 	shl	local01, #4
19ecc     14 00 00 FF 
19ed0     F8 E5 05 F1 | 	add	objptr, ##10744
19ed4     F2 26 02 F1 | 	add	local01, objptr
19ed8     0C 26 06 F1 | 	add	local01, #12
19edc     13 3F 68 FC | 	wrlong	#31, local01
19ee0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
19ee0                 | '   variables(varnum).vartype=result_string
19ee0                 | '   return
19ee0     14 00 00 FF 
19ee4     F8 E5 85 F1 | 	sub	objptr, ##10744
19ee8     78 04 90 FD | 	jmp	#LR__2143
19eec                 | LR__2120
19eec                 | ' for i=0 to 2 : arrid(i)=0 : next i
19eec     1C 4E 05 F1 | 	add	fp, #28
19ef0     A7 00 68 FC | 	wrlong	#0, fp
19ef4     97 16 48 FB | 	callpa	#(@LR__2122-@LR__2121)>>2,fcache_load_ptr_
19ef8                 | LR__2121
19ef8     A7 26 02 FB | 	rdlong	local01, fp
19efc     02 26 66 F0 | 	shl	local01, #2
19f00     18 4E 05 F1 | 	add	fp, #24
19f04     A7 26 02 F1 | 	add	local01, fp
19f08     13 01 68 FC | 	wrlong	#0, local01
19f0c     18 4E 85 F1 | 	sub	fp, #24
19f10     A7 26 02 FB | 	rdlong	local01, fp
19f14     01 26 06 F1 | 	add	local01, #1
19f18     A7 26 62 FC | 	wrlong	local01, fp
19f1c     03 26 16 F2 | 	cmp	local01, #3 wc
19f20     D4 FF 9F CD |  if_b	jmp	#LR__2121
19f24                 | LR__2122
19f24     4A 00 00 FF 
19f28     80 E4 05 F1 | 	add	objptr, ##38016
19f2c     F2 16 02 FB | 	rdlong	arg03, objptr
19f30     0B 27 02 F6 | 	mov	local01, arg03
19f34     01 26 66 F0 | 	shl	local01, #1
19f38     0B 27 02 F1 | 	add	local01, arg03
19f3c     02 26 66 F0 | 	shl	local01, #2
19f40     03 00 00 FF 
19f44     04 E4 85 F1 | 	sub	objptr, ##1540
19f48     F2 26 02 F1 | 	add	local01, objptr
19f4c     04 26 06 F1 | 	add	local01, #4
19f50     13 29 02 FB | 	rdlong	local02, local01
19f54     04 4E 05 F1 | 	add	fp, #4
19f58     A7 28 62 FC | 	wrlong	local02, fp
19f5c     20 4E 85 F1 | 	sub	fp, #32
19f60     47 00 00 FF 
19f64     7C E4 85 F1 | 	sub	objptr, ##36476
19f68     AC 2A BF FD | 	call	#_pop
19f6c     A7 FA 61 FC | 	wrlong	result1, fp
19f70     04 4E 05 F1 | 	add	fp, #4
19f74     A7 FC 61 FC | 	wrlong	result2, fp
19f78     04 4E 05 F1 | 	add	fp, #4
19f7c     A7 FE 61 FC | 	wrlong	result3, fp
19f80                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
19f80                 | ' t1=pop() ' var value
19f80                 | ' if numpar>0 then
19f80     18 4E 05 F1 | 	add	fp, #24
19f84     A7 2A 02 FB | 	rdlong	local03, fp
19f88     20 4E 85 F1 | 	sub	fp, #32
19f8c     01 2A 16 F2 | 	cmp	local03, #1 wc
19f90     78 00 90 CD |  if_b	jmp	#LR__2125
19f94                 | '   for i=numpar to 1 step -1
19f94     20 4E 05 F1 | 	add	fp, #32
19f98     A7 2C 0A FB | 	rdlong	local04, fp wz
19f9c     04 4E 85 F1 | 	sub	fp, #4
19fa0     A7 2C 62 FC | 	wrlong	local04, fp
19fa4     1C 4E 85 F1 | 	sub	fp, #28
19fa8     60 00 90 AD |  if_e	jmp	#LR__2124
19fac                 | LR__2123
19fac     68 2A BF FD | 	call	#_pop
19fb0     0C 4E 05 F1 | 	add	fp, #12
19fb4     A7 FA 61 FC | 	wrlong	result1, fp
19fb8     04 4E 05 F1 | 	add	fp, #4
19fbc     A7 FC 61 FC | 	wrlong	result2, fp
19fc0     04 4E 05 F1 | 	add	fp, #4
19fc4     A7 FE 61 FC | 	wrlong	result3, fp
19fc8     08 4E 05 F1 | 	add	fp, #8
19fcc     A7 2A 02 FB | 	rdlong	local03, fp
19fd0     01 2A 86 F1 | 	sub	local03, #1
19fd4     02 2A 66 F0 | 	shl	local03, #2
19fd8     18 4E 05 F1 | 	add	fp, #24
19fdc     A7 2A 02 F1 | 	add	local03, fp
19fe0     28 4E 85 F1 | 	sub	fp, #40
19fe4     A7 12 02 F6 | 	mov	arg01, fp
19fe8     0C 4E 85 F1 | 	sub	fp, #12
19fec     0C 2C BF FD | 	call	#_converttoint
19ff0     15 FB 61 FC | 	wrlong	result1, local03
19ff4     1C 4E 05 F1 | 	add	fp, #28
19ff8     A7 2C 02 FB | 	rdlong	local04, fp
19ffc     01 2C 8E F1 | 	sub	local04, #1 wz
1a000     A7 2C 62 FC | 	wrlong	local04, fp
1a004     1C 4E 85 F1 | 	sub	fp, #28
1a008     A0 FF 9F 5D |  if_ne	jmp	#LR__2123
1a00c                 | LR__2124
1a00c                 | LR__2125
1a00c     18 4E 05 F1 | 	add	fp, #24
1a010     A7 26 02 FB | 	rdlong	local01, fp
1a014     04 26 66 F0 | 	shl	local01, #4
1a018     14 00 00 FF 
1a01c     F8 E5 05 F1 | 	add	objptr, ##10744
1a020     F2 26 02 F1 | 	add	local01, objptr
1a024     04 26 06 F1 | 	add	local01, #4
1a028     13 13 02 FB | 	rdlong	arg01, local01
1a02c     0C 4E 05 F1 | 	add	fp, #12
1a030     A7 12 62 FC | 	wrlong	arg01, fp
1a034     24 4E 85 F1 | 	sub	fp, #36
1a038     14 00 00 FF 
1a03c     F8 E5 85 F1 | 	sub	objptr, ##10744
1a040     FC 65 B0 FD | 	call	#_pslpeek
1a044     FD 2C 32 F9 | 	getword	local04, result1, #0
1a048     28 4E 05 F1 | 	add	fp, #40
1a04c     A7 2C 62 FC | 	wrlong	local04, fp
1a050     04 4E 85 F1 | 	sub	fp, #4
1a054     A7 12 02 FB | 	rdlong	arg01, fp
1a058     24 4E 85 F1 | 	sub	fp, #36
1a05c     02 12 06 F1 | 	add	arg01, #2
1a060     84 65 B0 FD | 	call	#_pspeek
1a064     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a068     2C 4E 05 F1 | 	add	fp, #44
1a06c     A7 FA 61 FC | 	wrlong	result1, fp
1a070                 | ' esize=pspeek(arrptr+2)
1a070                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1a070     08 4E 85 F1 | 	sub	fp, #8
1a074     A7 12 02 FB | 	rdlong	arg01, fp
1a078     24 4E 85 F1 | 	sub	fp, #36
1a07c     04 12 06 F1 | 	add	arg01, #4
1a080     BC 65 B0 FD | 	call	#_pslpeek
1a084     FD 2C 02 F6 | 	mov	local04, result1
1a088     34 4E 05 F1 | 	add	fp, #52
1a08c     A7 26 02 FB | 	rdlong	local01, fp
1a090     34 4E 85 F1 | 	sub	fp, #52
1a094     16 27 12 F2 | 	cmp	local01, local04 wc
1a098     54 00 90 3D |  if_ae	jmp	#LR__2126
1a09c     24 4E 05 F1 | 	add	fp, #36
1a0a0     A7 12 02 FB | 	rdlong	arg01, fp
1a0a4     24 4E 85 F1 | 	sub	fp, #36
1a0a8     08 12 06 F1 | 	add	arg01, #8
1a0ac     90 65 B0 FD | 	call	#_pslpeek
1a0b0     FD 26 02 F6 | 	mov	local01, result1
1a0b4     38 4E 05 F1 | 	add	fp, #56
1a0b8     A7 2C 02 FB | 	rdlong	local04, fp
1a0bc     38 4E 85 F1 | 	sub	fp, #56
1a0c0     13 2D 12 F2 | 	cmp	local04, local01 wc
1a0c4     28 00 90 3D |  if_ae	jmp	#LR__2126
1a0c8     24 4E 05 F1 | 	add	fp, #36
1a0cc     A7 12 02 FB | 	rdlong	arg01, fp
1a0d0     24 4E 85 F1 | 	sub	fp, #36
1a0d4     0C 12 06 F1 | 	add	arg01, #12
1a0d8     64 65 B0 FD | 	call	#_pslpeek
1a0dc     3C 4E 05 F1 | 	add	fp, #60
1a0e0     A7 2C 02 FB | 	rdlong	local04, fp
1a0e4     3C 4E 85 F1 | 	sub	fp, #60
1a0e8     FD 2C 12 F2 | 	cmp	local04, result1 wc
1a0ec     10 00 90 CD |  if_b	jmp	#LR__2127
1a0f0                 | LR__2126
1a0f0     31 12 06 F6 | 	mov	arg01, #49
1a0f4     00 14 06 F6 | 	mov	arg02, #0
1a0f8     88 62 B0 FD | 	call	#_printerror
1a0fc     64 02 90 FD | 	jmp	#LR__2143
1a100                 | LR__2127
1a100     24 4E 05 F1 | 	add	fp, #36
1a104     A7 12 02 FB | 	rdlong	arg01, fp
1a108     09 2D 02 F6 | 	mov	local04, arg01
1a10c     10 2C 06 F1 | 	add	local04, #16
1a110     24 4E 85 F1 | 	sub	fp, #36
1a114     04 12 06 F1 | 	add	arg01, #4
1a118     24 65 B0 FD | 	call	#_pslpeek
1a11c     FD 26 02 F6 | 	mov	local01, result1
1a120     38 4E 05 F1 | 	add	fp, #56
1a124     A7 28 02 FB | 	rdlong	local02, fp
1a128     14 27 02 FD | 	qmul	local01, local02
1a12c     04 4E 85 F1 | 	sub	fp, #4
1a130     A7 2A 02 FB | 	rdlong	local03, fp
1a134     10 4E 85 F1 | 	sub	fp, #16
1a138     A7 12 02 FB | 	rdlong	arg01, fp
1a13c     24 4E 85 F1 | 	sub	fp, #36
1a140     08 12 06 F1 | 	add	arg01, #8
1a144     18 28 62 FD | 	getqx	local02
1a148     14 2B 02 F1 | 	add	local03, local02
1a14c     F0 64 B0 FD | 	call	#_pslpeek
1a150     FD 28 02 F6 | 	mov	local02, result1
1a154     24 4E 05 F1 | 	add	fp, #36
1a158     A7 12 02 FB | 	rdlong	arg01, fp
1a15c     24 4E 85 F1 | 	sub	fp, #36
1a160     04 12 06 F1 | 	add	arg01, #4
1a164     D8 64 B0 FD | 	call	#_pslpeek
1a168     FD 28 02 FD | 	qmul	local02, result1
1a16c     3C 4E 05 F1 | 	add	fp, #60
1a170     A7 28 02 FB | 	rdlong	local02, fp
1a174     18 26 62 FD | 	getqx	local01
1a178     14 27 02 FD | 	qmul	local01, local02
1a17c     10 4E 85 F1 | 	sub	fp, #16
1a180     A7 28 02 FB | 	rdlong	local02, fp
1a184     18 26 62 FD | 	getqx	local01
1a188     13 2B 02 F1 | 	add	local03, local01
1a18c     15 29 02 FD | 	qmul	local02, local03
1a190     04 4E 05 F1 | 	add	fp, #4
1a194                 | ' 
1a194                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1a194                 | ' select case arrtype
1a194     18 2A 62 FD | 	getqx	local03
1a198     15 2D 02 F1 | 	add	local04, local03
1a19c     A7 2C 62 FC | 	wrlong	local04, fp
1a1a0     08 4E 85 F1 | 	sub	fp, #8
1a1a4     A7 2E 02 FB | 	rdlong	local05, fp
1a1a8     28 4E 85 F1 | 	sub	fp, #40
1a1ac     00 2F 86 F1 | 	sub	local05, #256
1a1b0     0C 2E 26 F3 | 	fle	local05, #12
1a1b4     30 2E 62 FD | 	jmprel	local05
1a1b8                 | LR__2128
1a1b8     30 00 90 FD | 	jmp	#LR__2129
1a1bc     58 00 90 FD | 	jmp	#LR__2130
1a1c0     6C 00 90 FD | 	jmp	#LR__2131
1a1c4     80 00 90 FD | 	jmp	#LR__2132
1a1c8     B0 00 90 FD | 	jmp	#LR__2133
1a1cc     E0 00 90 FD | 	jmp	#LR__2134
1a1d0     F4 00 90 FD | 	jmp	#LR__2135
1a1d4     08 01 90 FD | 	jmp	#LR__2136
1a1d8     1C 01 90 FD | 	jmp	#LR__2137
1a1dc     30 01 90 FD | 	jmp	#LR__2138
1a1e0     44 01 90 FD | 	jmp	#LR__2139
1a1e4     58 01 90 FD | 	jmp	#LR__2140
1a1e8     6C 01 90 FD | 	jmp	#LR__2141
1a1ec                 | LR__2129
1a1ec     A7 12 02 F6 | 	mov	arg01, fp
1a1f0     30 4E 05 F1 | 	add	fp, #48
1a1f4     A7 14 02 FB | 	rdlong	arg02, fp
1a1f8     30 4E 85 F1 | 	sub	fp, #48
1a1fc     0C 16 06 F6 | 	mov	arg03, #12
1a200     0B 00 00 FF 
1a204     CC E4 05 F1 | 	add	objptr, ##5836
1a208     64 8F B0 FD | 	call	#_psram_spin2_write
1a20c     0B 00 00 FF 
1a210     CC E4 85 F1 | 	sub	objptr, ##5836
1a214     4C 01 90 FD | 	jmp	#LR__2142
1a218                 | LR__2130
1a218     30 4E 05 F1 | 	add	fp, #48
1a21c     A7 12 02 FB | 	rdlong	arg01, fp
1a220     30 4E 85 F1 | 	sub	fp, #48
1a224     A7 14 02 FB | 	rdlong	arg02, fp
1a228     74 63 B0 FD | 	call	#_pspoke
1a22c     34 01 90 FD | 	jmp	#LR__2142
1a230                 | LR__2131
1a230     30 4E 05 F1 | 	add	fp, #48
1a234     A7 12 02 FB | 	rdlong	arg01, fp
1a238     30 4E 85 F1 | 	sub	fp, #48
1a23c     A7 14 02 FB | 	rdlong	arg02, fp
1a240     5C 63 B0 FD | 	call	#_pspoke
1a244     1C 01 90 FD | 	jmp	#LR__2142
1a248                 | LR__2132
1a248     30 4E 05 F1 | 	add	fp, #48
1a24c     A7 12 02 FB | 	rdlong	arg01, fp
1a250     30 4E 85 F1 | 	sub	fp, #48
1a254     A7 14 02 FB | 	rdlong	arg02, fp
1a258     44 63 B0 FD | 	call	#_pspoke
1a25c     30 4E 05 F1 | 	add	fp, #48
1a260     A7 12 02 FB | 	rdlong	arg01, fp
1a264     30 4E 85 F1 | 	sub	fp, #48
1a268     01 12 06 F1 | 	add	arg01, #1
1a26c     A7 14 02 FB | 	rdlong	arg02, fp
1a270     08 14 46 F0 | 	shr	arg02, #8
1a274     28 63 B0 FD | 	call	#_pspoke
1a278     E8 00 90 FD | 	jmp	#LR__2142
1a27c                 | LR__2133
1a27c     30 4E 05 F1 | 	add	fp, #48
1a280     A7 12 02 FB | 	rdlong	arg01, fp
1a284     30 4E 85 F1 | 	sub	fp, #48
1a288     A7 14 02 FB | 	rdlong	arg02, fp
1a28c     10 63 B0 FD | 	call	#_pspoke
1a290     30 4E 05 F1 | 	add	fp, #48
1a294     A7 12 02 FB | 	rdlong	arg01, fp
1a298     30 4E 85 F1 | 	sub	fp, #48
1a29c     01 12 06 F1 | 	add	arg01, #1
1a2a0     A7 14 02 FB | 	rdlong	arg02, fp
1a2a4     08 14 46 F0 | 	shr	arg02, #8
1a2a8     F4 62 B0 FD | 	call	#_pspoke
1a2ac     B4 00 90 FD | 	jmp	#LR__2142
1a2b0                 | LR__2134
1a2b0     30 4E 05 F1 | 	add	fp, #48
1a2b4     A7 12 02 FB | 	rdlong	arg01, fp
1a2b8     30 4E 85 F1 | 	sub	fp, #48
1a2bc     A7 14 02 FB | 	rdlong	arg02, fp
1a2c0     4C 62 B0 FD | 	call	#_pslpoke
1a2c4     9C 00 90 FD | 	jmp	#LR__2142
1a2c8                 | LR__2135
1a2c8     30 4E 05 F1 | 	add	fp, #48
1a2cc     A7 12 02 FB | 	rdlong	arg01, fp
1a2d0     30 4E 85 F1 | 	sub	fp, #48
1a2d4     A7 14 02 FB | 	rdlong	arg02, fp
1a2d8     34 62 B0 FD | 	call	#_pslpoke
1a2dc     84 00 90 FD | 	jmp	#LR__2142
1a2e0                 | LR__2136
1a2e0     30 4E 05 F1 | 	add	fp, #48
1a2e4     A7 12 02 FB | 	rdlong	arg01, fp
1a2e8     30 4E 85 F1 | 	sub	fp, #48
1a2ec     A7 14 02 FB | 	rdlong	arg02, fp
1a2f0     1C 62 B0 FD | 	call	#_pslpoke
1a2f4     6C 00 90 FD | 	jmp	#LR__2142
1a2f8                 | LR__2137
1a2f8     30 4E 05 F1 | 	add	fp, #48
1a2fc     A7 12 02 FB | 	rdlong	arg01, fp
1a300     30 4E 85 F1 | 	sub	fp, #48
1a304     A7 14 02 FB | 	rdlong	arg02, fp
1a308     04 62 B0 FD | 	call	#_pslpoke
1a30c     54 00 90 FD | 	jmp	#LR__2142
1a310                 | LR__2138
1a310     30 4E 05 F1 | 	add	fp, #48
1a314     A7 12 02 FB | 	rdlong	arg01, fp
1a318     30 4E 85 F1 | 	sub	fp, #48
1a31c     A7 14 02 FB | 	rdlong	arg02, fp
1a320     EC 61 B0 FD | 	call	#_pslpoke
1a324     3C 00 90 FD | 	jmp	#LR__2142
1a328                 | LR__2139
1a328     30 4E 05 F1 | 	add	fp, #48
1a32c     A7 12 02 FB | 	rdlong	arg01, fp
1a330     30 4E 85 F1 | 	sub	fp, #48
1a334     A7 14 02 FB | 	rdlong	arg02, fp
1a338     D4 61 B0 FD | 	call	#_pslpoke
1a33c     24 00 90 FD | 	jmp	#LR__2142
1a340                 | LR__2140
1a340     30 4E 05 F1 | 	add	fp, #48
1a344     A7 12 02 FB | 	rdlong	arg01, fp
1a348     30 4E 85 F1 | 	sub	fp, #48
1a34c     A7 14 02 FB | 	rdlong	arg02, fp
1a350     BC 61 B0 FD | 	call	#_pslpoke
1a354     0C 00 90 FD | 	jmp	#LR__2142
1a358                 | LR__2141
1a358     32 12 06 F6 | 	mov	arg01, #50
1a35c     00 14 06 F6 | 	mov	arg02, #0
1a360     20 60 B0 FD | 	call	#_printerror
1a364                 | LR__2142
1a364                 | LR__2143
1a364     A7 F0 03 F6 | 	mov	ptra, fp
1a368     B2 00 A0 FD | 	call	#popregs_
1a36c                 | _do_assign_ret
1a36c     2D 00 64 FD | 	ret
1a370                 | 
1a370                 | ' 
1a370                 | ' 
1a370                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1a370                 | ' 
1a370                 | ' sub do_getvar
1a370                 | _do_getvar
1a370     04 4A 05 F6 | 	mov	COUNT_, #4
1a374     A8 00 A0 FD | 	call	#pushregs_
1a378     3C F0 07 F1 | 	add	ptra, #60
1a37c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1a37c     4A 00 00 FF 
1a380     80 E4 05 F1 | 	add	objptr, ##38016
1a384     F2 26 02 FB | 	rdlong	local01, objptr
1a388     13 17 02 F6 | 	mov	arg03, local01
1a38c     01 16 66 F0 | 	shl	arg03, #1
1a390     13 17 02 F1 | 	add	arg03, local01
1a394     02 16 66 F0 | 	shl	arg03, #2
1a398     03 00 00 FF 
1a39c     04 E4 85 F1 | 	sub	objptr, ##1540
1a3a0     F2 16 02 F1 | 	add	arg03, objptr
1a3a4     04 16 06 F1 | 	add	arg03, #4
1a3a8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1a3ac     47 00 00 FF 
1a3b0     7C E4 85 F1 | 	sub	objptr, ##36476
1a3b4     C4 00 90 5D |  if_ne	jmp	#LR__2151
1a3b8     4A 00 00 FF 
1a3bc     80 E4 05 F1 | 	add	objptr, ##38016
1a3c0     F2 26 02 FB | 	rdlong	local01, objptr
1a3c4     13 13 02 F6 | 	mov	arg01, local01
1a3c8     01 12 66 F0 | 	shl	arg01, #1
1a3cc     13 13 02 F1 | 	add	arg01, local01
1a3d0     02 12 66 F0 | 	shl	arg01, #2
1a3d4     03 00 00 FF 
1a3d8     04 E4 85 F1 | 	sub	objptr, ##1540
1a3dc     F2 12 02 F1 | 	add	arg01, objptr
1a3e0     09 27 02 FB | 	rdlong	local01, arg01
1a3e4     04 26 66 F0 | 	shl	local01, #4
1a3e8     32 00 00 FF 
1a3ec     84 E4 85 F1 | 	sub	objptr, ##25732
1a3f0     F2 26 02 F1 | 	add	local01, objptr
1a3f4     04 26 06 F1 | 	add	local01, #4
1a3f8     13 13 02 FB | 	rdlong	arg01, local01
1a3fc     04 26 06 F1 | 	add	local01, #4
1a400     13 27 02 FB | 	rdlong	local01, local01
1a404     A7 12 62 FC | 	wrlong	arg01, fp
1a408     04 4E 05 F1 | 	add	fp, #4
1a40c     A7 26 62 FC | 	wrlong	local01, fp
1a410     35 00 00 FF 
1a414     88 E4 05 F1 | 	add	objptr, ##27272
1a418     F2 26 02 FB | 	rdlong	local01, objptr
1a41c     13 13 02 F6 | 	mov	arg01, local01
1a420     01 12 66 F0 | 	shl	arg01, #1
1a424     13 13 02 F1 | 	add	arg01, local01
1a428     02 12 66 F0 | 	shl	arg01, #2
1a42c     03 00 00 FF 
1a430     04 E4 85 F1 | 	sub	objptr, ##1540
1a434     F2 12 02 F1 | 	add	arg01, objptr
1a438     09 27 02 FB | 	rdlong	local01, arg01
1a43c     04 26 66 F0 | 	shl	local01, #4
1a440     32 00 00 FF 
1a444     84 E4 85 F1 | 	sub	objptr, ##25732
1a448     F2 26 02 F1 | 	add	local01, objptr
1a44c     0C 26 06 F1 | 	add	local01, #12
1a450     13 27 02 FB | 	rdlong	local01, local01
1a454     04 4E 05 F1 | 	add	fp, #4
1a458     A7 26 62 FC | 	wrlong	local01, fp
1a45c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1a45c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1a45c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1a45c     08 4E 85 F1 | 	sub	fp, #8
1a460     00 27 16 F2 | 	cmp	local01, #256 wc
1a464     14 00 00 FF 
1a468     F8 E5 85 F1 | 	sub	objptr, ##10744
1a46c     0C 00 90 3D |  if_ae	jmp	#LR__2150
1a470     A7 12 02 F6 | 	mov	arg01, fp
1a474     38 26 BF FD | 	call	#_push
1a478     A0 04 90 FD | 	jmp	#LR__2172
1a47c                 | LR__2150
1a47c                 | LR__2151
1a47c     4A 00 00 FF 
1a480     80 E4 05 F1 | 	add	objptr, ##38016
1a484     F2 16 02 FB | 	rdlong	arg03, objptr
1a488     0B 15 02 F6 | 	mov	arg02, arg03
1a48c     01 14 66 F0 | 	shl	arg02, #1
1a490     0B 15 02 F1 | 	add	arg02, arg03
1a494     02 14 66 F0 | 	shl	arg02, #2
1a498     03 00 00 FF 
1a49c     04 E4 85 F1 | 	sub	objptr, ##1540
1a4a0     F2 14 02 F1 | 	add	arg02, objptr
1a4a4     0A 17 02 FB | 	rdlong	arg03, arg02
1a4a8     04 16 66 F0 | 	shl	arg03, #4
1a4ac     32 00 00 FF 
1a4b0     84 E4 85 F1 | 	sub	objptr, ##25732
1a4b4     F2 16 02 F1 | 	add	arg03, objptr
1a4b8     04 16 06 F1 | 	add	arg03, #4
1a4bc     0B 13 02 FB | 	rdlong	arg01, arg03
1a4c0     0C 4E 05 F1 | 	add	fp, #12
1a4c4     A7 12 62 FC | 	wrlong	arg01, fp
1a4c8     0C 4E 85 F1 | 	sub	fp, #12
1a4cc     14 00 00 FF 
1a4d0     F8 E5 85 F1 | 	sub	objptr, ##10744
1a4d4     68 61 B0 FD | 	call	#_pslpeek
1a4d8     FD FA 31 F9 | 	getword	result1, result1, #0
1a4dc     10 4E 05 F1 | 	add	fp, #16
1a4e0     A7 FA 61 FC | 	wrlong	result1, fp
1a4e4     4A 00 00 FF 
1a4e8     80 E4 05 F1 | 	add	objptr, ##38016
1a4ec     F2 16 02 FB | 	rdlong	arg03, objptr
1a4f0     0B 15 02 F6 | 	mov	arg02, arg03
1a4f4     01 14 66 F0 | 	shl	arg02, #1
1a4f8     0B 15 02 F1 | 	add	arg02, arg03
1a4fc     02 14 66 F0 | 	shl	arg02, #2
1a500     03 00 00 FF 
1a504     04 E4 85 F1 | 	sub	objptr, ##1540
1a508     F2 14 02 F1 | 	add	arg02, objptr
1a50c     04 14 06 F1 | 	add	arg02, #4
1a510     0A 17 02 FB | 	rdlong	arg03, arg02
1a514     04 4E 05 F1 | 	add	fp, #4
1a518     A7 16 62 FC | 	wrlong	arg03, fp
1a51c     08 4E 85 F1 | 	sub	fp, #8
1a520     A7 12 02 FB | 	rdlong	arg01, fp
1a524     0C 4E 85 F1 | 	sub	fp, #12
1a528     02 12 06 F1 | 	add	arg01, #2
1a52c     47 00 00 FF 
1a530     7C E4 85 F1 | 	sub	objptr, ##36476
1a534     B0 60 B0 FD | 	call	#_pspeek
1a538     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a53c     18 4E 05 F1 | 	add	fp, #24
1a540     A7 FA 61 FC | 	wrlong	result1, fp
1a544     0C 4E 85 F1 | 	sub	fp, #12
1a548     A7 12 02 FB | 	rdlong	arg01, fp
1a54c     0C 4E 85 F1 | 	sub	fp, #12
1a550     04 12 06 F1 | 	add	arg01, #4
1a554     E8 60 B0 FD | 	call	#_pslpeek
1a558     1C 4E 05 F1 | 	add	fp, #28
1a55c     A7 FA 61 FC | 	wrlong	result1, fp
1a560     10 4E 85 F1 | 	sub	fp, #16
1a564     A7 12 02 FB | 	rdlong	arg01, fp
1a568     0C 4E 85 F1 | 	sub	fp, #12
1a56c     08 12 06 F1 | 	add	arg01, #8
1a570     CC 60 B0 FD | 	call	#_pslpeek
1a574     20 4E 05 F1 | 	add	fp, #32
1a578     A7 FA 61 FC | 	wrlong	result1, fp
1a57c     14 4E 85 F1 | 	sub	fp, #20
1a580     A7 12 02 FB | 	rdlong	arg01, fp
1a584     0C 4E 85 F1 | 	sub	fp, #12
1a588     0C 12 06 F1 | 	add	arg01, #12
1a58c     B0 60 B0 FD | 	call	#_pslpeek
1a590     24 4E 05 F1 | 	add	fp, #36
1a594     A7 FA 61 FC | 	wrlong	result1, fp
1a598                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1a598                 | ' esize=pspeek(arrptr+2)
1a598                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1a598                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1a598                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1a598                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1a598     10 4E 85 F1 | 	sub	fp, #16
1a59c     A7 16 02 FB | 	rdlong	arg03, fp
1a5a0     14 4E 85 F1 | 	sub	fp, #20
1a5a4     03 16 16 F2 | 	cmp	arg03, #3 wc
1a5a8     38 00 90 CD |  if_b	jmp	#LR__2152
1a5ac     68 24 BF FD | 	call	#_pop
1a5b0     FF 16 02 F6 | 	mov	arg03, result3
1a5b4     A7 FA 61 FC | 	wrlong	result1, fp
1a5b8     04 4E 05 F1 | 	add	fp, #4
1a5bc     A7 FC 61 FC | 	wrlong	result2, fp
1a5c0     04 4E 05 F1 | 	add	fp, #4
1a5c4     A7 16 62 FC | 	wrlong	arg03, fp
1a5c8     08 4E 85 F1 | 	sub	fp, #8
1a5cc     A7 12 02 F6 | 	mov	arg01, fp
1a5d0     28 26 BF FD | 	call	#_converttoint
1a5d4     30 4E 05 F1 | 	add	fp, #48
1a5d8     A7 FA 61 FC | 	wrlong	result1, fp
1a5dc     30 4E 85 F1 | 	sub	fp, #48
1a5e0     0C 00 90 FD | 	jmp	#LR__2153
1a5e4                 | LR__2152
1a5e4     30 4E 05 F1 | 	add	fp, #48
1a5e8     A7 00 68 FC | 	wrlong	#0, fp
1a5ec     30 4E 85 F1 | 	sub	fp, #48
1a5f0                 | LR__2153
1a5f0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1a5f0     14 4E 05 F1 | 	add	fp, #20
1a5f4     A7 16 02 FB | 	rdlong	arg03, fp
1a5f8     14 4E 85 F1 | 	sub	fp, #20
1a5fc     02 16 16 F2 | 	cmp	arg03, #2 wc
1a600     38 00 90 CD |  if_b	jmp	#LR__2154
1a604     10 24 BF FD | 	call	#_pop
1a608     FF 16 02 F6 | 	mov	arg03, result3
1a60c     A7 FA 61 FC | 	wrlong	result1, fp
1a610     04 4E 05 F1 | 	add	fp, #4
1a614     A7 FC 61 FC | 	wrlong	result2, fp
1a618     04 4E 05 F1 | 	add	fp, #4
1a61c     A7 16 62 FC | 	wrlong	arg03, fp
1a620     08 4E 85 F1 | 	sub	fp, #8
1a624     A7 12 02 F6 | 	mov	arg01, fp
1a628     D0 25 BF FD | 	call	#_converttoint
1a62c     2C 4E 05 F1 | 	add	fp, #44
1a630     A7 FA 61 FC | 	wrlong	result1, fp
1a634     2C 4E 85 F1 | 	sub	fp, #44
1a638     0C 00 90 FD | 	jmp	#LR__2155
1a63c                 | LR__2154
1a63c     2C 4E 05 F1 | 	add	fp, #44
1a640     A7 00 68 FC | 	wrlong	#0, fp
1a644     2C 4E 85 F1 | 	sub	fp, #44
1a648                 | LR__2155
1a648                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1a648     14 4E 05 F1 | 	add	fp, #20
1a64c     A7 16 02 FB | 	rdlong	arg03, fp
1a650     14 4E 85 F1 | 	sub	fp, #20
1a654     01 16 16 F2 | 	cmp	arg03, #1 wc
1a658     38 00 90 CD |  if_b	jmp	#LR__2156
1a65c     B8 23 BF FD | 	call	#_pop
1a660     FF 16 02 F6 | 	mov	arg03, result3
1a664     A7 FA 61 FC | 	wrlong	result1, fp
1a668     04 4E 05 F1 | 	add	fp, #4
1a66c     A7 FC 61 FC | 	wrlong	result2, fp
1a670     04 4E 05 F1 | 	add	fp, #4
1a674     A7 16 62 FC | 	wrlong	arg03, fp
1a678     08 4E 85 F1 | 	sub	fp, #8
1a67c     A7 12 02 F6 | 	mov	arg01, fp
1a680     78 25 BF FD | 	call	#_converttoint
1a684     28 4E 05 F1 | 	add	fp, #40
1a688     A7 FA 61 FC | 	wrlong	result1, fp
1a68c     28 4E 85 F1 | 	sub	fp, #40
1a690     0C 00 90 FD | 	jmp	#LR__2157
1a694                 | LR__2156
1a694     28 4E 05 F1 | 	add	fp, #40
1a698     A7 00 68 FC | 	wrlong	#0, fp
1a69c     28 4E 85 F1 | 	sub	fp, #40
1a6a0                 | LR__2157
1a6a0     0C 4E 05 F1 | 	add	fp, #12
1a6a4     A7 28 02 FB | 	rdlong	local02, fp
1a6a8     1C 4E 05 F1 | 	add	fp, #28
1a6ac     A7 2A 02 FB | 	rdlong	local03, fp
1a6b0     04 4E 05 F1 | 	add	fp, #4
1a6b4     A7 FC 01 FB | 	rdlong	result2, fp
1a6b8     10 4E 85 F1 | 	sub	fp, #16
1a6bc     A7 FE 01 FB | 	rdlong	result3, fp
1a6c0     FF FC 01 FD | 	qmul	result2, result3
1a6c4     10 28 06 F1 | 	add	local02, #16
1a6c8     14 4E 05 F1 | 	add	fp, #20
1a6cc     A7 FC 01 FB | 	rdlong	result2, fp
1a6d0     18 FA 61 FD | 	getqx	result1
1a6d4     FF FC 01 FD | 	qmul	result2, result3
1a6d8     FD 2A 02 F1 | 	add	local03, result1
1a6dc     10 4E 85 F1 | 	sub	fp, #16
1a6e0     A7 FE 01 FB | 	rdlong	result3, fp
1a6e4     18 FC 61 FD | 	getqx	result2
1a6e8     FF FC 01 FD | 	qmul	result2, result3
1a6ec     08 4E 85 F1 | 	sub	fp, #8
1a6f0     A7 FE 01 FB | 	rdlong	result3, fp
1a6f4     18 FC 61 FD | 	getqx	result2
1a6f8     FE 2A 02 F1 | 	add	local03, result2
1a6fc     FF 2A 02 FD | 	qmul	local03, result3
1a700     1C 4E 05 F1 | 	add	fp, #28
1a704                 | ' 
1a704                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1a704                 | ' 
1a704                 | ' select case vartype
1a704     18 FC 61 FD | 	getqx	result2
1a708     FE 28 02 F1 | 	add	local02, result2
1a70c     A7 28 62 FC | 	wrlong	local02, fp
1a710     24 4E 85 F1 | 	sub	fp, #36
1a714     A7 2C 02 FB | 	rdlong	local04, fp
1a718     10 4E 85 F1 | 	sub	fp, #16
1a71c     00 2D 86 F1 | 	sub	local04, #256
1a720     0C 2C 26 F3 | 	fle	local04, #12
1a724     30 2C 62 FD | 	jmprel	local04
1a728                 | LR__2158
1a728     30 00 90 FD | 	jmp	#LR__2159
1a72c     58 00 90 FD | 	jmp	#LR__2160
1a730     8C 00 90 FD | 	jmp	#LR__2161
1a734     AC 00 90 FD | 	jmp	#LR__2162
1a738     E8 00 90 FD | 	jmp	#LR__2163
1a73c     08 01 90 FD | 	jmp	#LR__2164
1a740     24 01 90 FD | 	jmp	#LR__2165
1a744     40 01 90 FD | 	jmp	#LR__2166
1a748     50 01 90 FD | 	jmp	#LR__2167
1a74c     60 01 90 FD | 	jmp	#LR__2168
1a750     7C 01 90 FD | 	jmp	#LR__2169
1a754     8C 01 90 FD | 	jmp	#LR__2170
1a758     B8 01 90 FD | 	jmp	#LR__2171
1a75c                 | LR__2159
1a75c     A7 12 02 F6 | 	mov	arg01, fp
1a760     34 4E 05 F1 | 	add	fp, #52
1a764     A7 14 02 FB | 	rdlong	arg02, fp
1a768     34 4E 85 F1 | 	sub	fp, #52
1a76c     0C 16 06 F6 | 	mov	arg03, #12
1a770     0B 00 00 FF 
1a774     CC E4 05 F1 | 	add	objptr, ##5836
1a778     58 89 B0 FD | 	call	#_psram_spin2_read1
1a77c     0B 00 00 FF 
1a780     CC E4 85 F1 | 	sub	objptr, ##5836
1a784     8C 01 90 FD | 	jmp	#LR__2171
1a788                 | LR__2160
1a788     08 4E 05 F1 | 	add	fp, #8
1a78c     A7 38 68 FC | 	wrlong	#28, fp
1a790     2C 4E 05 F1 | 	add	fp, #44
1a794     A7 12 02 FB | 	rdlong	arg01, fp
1a798     34 4E 85 F1 | 	sub	fp, #52
1a79c     48 5E B0 FD | 	call	#_pspeek
1a7a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a7a4     A7 FA 61 FC | 	wrlong	result1, fp
1a7a8     80 FA 15 F2 | 	cmp	result1, #128 wc
1a7ac     00 27 66 36 |  if_ae	neg	local01, #256
1a7b0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1a7b4     15 27 42 35 |  if_ae	or	local01, local03
1a7b8     A7 26 62 3C |  if_ae	wrlong	local01, fp
1a7bc     54 01 90 FD | 	jmp	#LR__2171
1a7c0                 | LR__2161
1a7c0     08 4E 05 F1 | 	add	fp, #8
1a7c4     A7 3A 68 FC | 	wrlong	#29, fp
1a7c8     2C 4E 05 F1 | 	add	fp, #44
1a7cc     A7 12 02 FB | 	rdlong	arg01, fp
1a7d0     34 4E 85 F1 | 	sub	fp, #52
1a7d4     10 5E B0 FD | 	call	#_pspeek
1a7d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a7dc     A7 FA 61 FC | 	wrlong	result1, fp
1a7e0     30 01 90 FD | 	jmp	#LR__2171
1a7e4                 | LR__2162
1a7e4     08 4E 05 F1 | 	add	fp, #8
1a7e8     A7 38 68 FC | 	wrlong	#28, fp
1a7ec     2C 4E 05 F1 | 	add	fp, #44
1a7f0     A7 12 02 FB | 	rdlong	arg01, fp
1a7f4     34 4E 85 F1 | 	sub	fp, #52
1a7f8     44 5E B0 FD | 	call	#_pslpeek
1a7fc     FD FA 31 F9 | 	getword	result1, result1, #0
1a800     A7 FA 61 FC | 	wrlong	result1, fp
1a804     40 00 00 FF 
1a808     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1a80c     FF 7F 00 3F 
1a810     00 27 06 36 |  if_ae	mov	local01, ##16776960
1a814     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1a818     15 27 42 35 |  if_ae	or	local01, local03
1a81c     A7 26 62 3C |  if_ae	wrlong	local01, fp
1a820     F0 00 90 FD | 	jmp	#LR__2171
1a824                 | LR__2163
1a824     08 4E 05 F1 | 	add	fp, #8
1a828     A7 3A 68 FC | 	wrlong	#29, fp
1a82c     2C 4E 05 F1 | 	add	fp, #44
1a830     A7 12 02 FB | 	rdlong	arg01, fp
1a834     34 4E 85 F1 | 	sub	fp, #52
1a838     04 5E B0 FD | 	call	#_pslpeek
1a83c     FD FA 31 F9 | 	getword	result1, result1, #0
1a840     A7 FA 61 FC | 	wrlong	result1, fp
1a844     CC 00 90 FD | 	jmp	#LR__2171
1a848                 | LR__2164
1a848     08 4E 05 F1 | 	add	fp, #8
1a84c     A7 38 68 FC | 	wrlong	#28, fp
1a850     2C 4E 05 F1 | 	add	fp, #44
1a854     A7 12 02 FB | 	rdlong	arg01, fp
1a858     34 4E 85 F1 | 	sub	fp, #52
1a85c     E0 5D B0 FD | 	call	#_pslpeek
1a860     A7 FA 61 FC | 	wrlong	result1, fp
1a864     AC 00 90 FD | 	jmp	#LR__2171
1a868                 | LR__2165
1a868     08 4E 05 F1 | 	add	fp, #8
1a86c     A7 3A 68 FC | 	wrlong	#29, fp
1a870     2C 4E 05 F1 | 	add	fp, #44
1a874     A7 12 02 FB | 	rdlong	arg01, fp
1a878     34 4E 85 F1 | 	sub	fp, #52
1a87c     C0 5D B0 FD | 	call	#_pslpeek
1a880     A7 FA 61 FC | 	wrlong	result1, fp
1a884     8C 00 90 FD | 	jmp	#LR__2171
1a888                 | LR__2166
1a888     08 4E 05 F1 | 	add	fp, #8
1a88c     A7 FE 69 FC | 	wrlong	#255, fp
1a890     08 4E 85 F1 | 	sub	fp, #8
1a894     A7 60 68 FC | 	wrlong	#48, fp
1a898     78 00 90 FD | 	jmp	#LR__2171
1a89c                 | LR__2167
1a89c     08 4E 05 F1 | 	add	fp, #8
1a8a0     A7 FE 69 FC | 	wrlong	#255, fp
1a8a4     08 4E 85 F1 | 	sub	fp, #8
1a8a8     A7 60 68 FC | 	wrlong	#48, fp
1a8ac     64 00 90 FD | 	jmp	#LR__2171
1a8b0                 | LR__2168
1a8b0     08 4E 05 F1 | 	add	fp, #8
1a8b4     A7 3C 68 FC | 	wrlong	#30, fp
1a8b8     2C 4E 05 F1 | 	add	fp, #44
1a8bc     A7 12 02 FB | 	rdlong	arg01, fp
1a8c0     34 4E 85 F1 | 	sub	fp, #52
1a8c4     78 5D B0 FD | 	call	#_pslpeek
1a8c8     A7 FA 61 FC | 	wrlong	result1, fp
1a8cc     44 00 90 FD | 	jmp	#LR__2171
1a8d0                 | LR__2169
1a8d0     08 4E 05 F1 | 	add	fp, #8
1a8d4     A7 FE 69 FC | 	wrlong	#255, fp
1a8d8     08 4E 85 F1 | 	sub	fp, #8
1a8dc     A7 60 68 FC | 	wrlong	#48, fp
1a8e0     30 00 90 FD | 	jmp	#LR__2171
1a8e4                 | LR__2170
1a8e4     08 4E 05 F1 | 	add	fp, #8
1a8e8     A7 3E 68 FC | 	wrlong	#31, fp
1a8ec     2C 4E 05 F1 | 	add	fp, #44
1a8f0     A7 12 02 FB | 	rdlong	arg01, fp
1a8f4     34 4E 85 F1 | 	sub	fp, #52
1a8f8     44 5D B0 FD | 	call	#_pslpeek
1a8fc     A7 FA 61 FC | 	wrlong	result1, fp
1a900     00 04 00 FF 
1a904     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a908     08 4E 05 31 |  if_ae	add	fp, #8
1a90c     A7 56 68 3C |  if_ae	wrlong	#43, fp
1a910     08 4E 85 31 |  if_ae	sub	fp, #8
1a914                 | LR__2171
1a914     A7 12 02 F6 | 	mov	arg01, fp
1a918     94 21 BF FD | 	call	#_push
1a91c                 | LR__2172
1a91c     A7 F0 03 F6 | 	mov	ptra, fp
1a920     B2 00 A0 FD | 	call	#popregs_
1a924                 | _do_getvar_ret
1a924     2D 00 64 FD | 	ret
1a928                 | 
1a928                 | ' 
1a928                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1a928                 | ' 
1a928                 | ' sub do_getaddr
1a928                 | _do_getaddr
1a928     01 4A 05 F6 | 	mov	COUNT_, #1
1a92c     A8 00 A0 FD | 	call	#pushregs_
1a930     38 F0 07 F1 | 	add	ptra, #56
1a934                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1a934                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1a934     4A 00 00 FF 
1a938     80 E4 05 F1 | 	add	objptr, ##38016
1a93c     F2 12 02 FB | 	rdlong	arg01, objptr
1a940     09 FD 01 F6 | 	mov	result2, arg01
1a944     01 FC 65 F0 | 	shl	result2, #1
1a948     09 FD 01 F1 | 	add	result2, arg01
1a94c     02 FC 65 F0 | 	shl	result2, #2
1a950     03 00 00 FF 
1a954     04 E4 85 F1 | 	sub	objptr, ##1540
1a958     F2 FC 01 F1 | 	add	result2, objptr
1a95c     04 FC 05 F1 | 	add	result2, #4
1a960     FE FC 09 FB | 	rdlong	result2, result2 wz
1a964     47 00 00 FF 
1a968     7C E4 85 F1 | 	sub	objptr, ##36476
1a96c     10 01 90 5D |  if_ne	jmp	#LR__2180
1a970     4A 00 00 FF 
1a974     80 E4 05 F1 | 	add	objptr, ##38016
1a978     F2 12 02 FB | 	rdlong	arg01, objptr
1a97c     09 FD 01 F6 | 	mov	result2, arg01
1a980     01 FC 65 F0 | 	shl	result2, #1
1a984     09 FD 01 F1 | 	add	result2, arg01
1a988     02 FC 65 F0 | 	shl	result2, #2
1a98c     03 00 00 FF 
1a990     04 E4 85 F1 | 	sub	objptr, ##1540
1a994     F2 FC 01 F1 | 	add	result2, objptr
1a998     FE 12 02 FB | 	rdlong	arg01, result2
1a99c     04 12 66 F0 | 	shl	arg01, #4
1a9a0     32 00 00 FF 
1a9a4     84 E4 85 F1 | 	sub	objptr, ##25732
1a9a8     F2 12 02 F1 | 	add	arg01, objptr
1a9ac     0C 12 06 F1 | 	add	arg01, #12
1a9b0     09 13 02 FB | 	rdlong	arg01, arg01
1a9b4     08 4E 05 F1 | 	add	fp, #8
1a9b8     A7 12 62 FC | 	wrlong	arg01, fp
1a9bc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1a9bc                 | '    if t1.result_type>=array_no_type then goto 2200
1a9bc     08 4E 85 F1 | 	sub	fp, #8
1a9c0     00 13 16 F2 | 	cmp	arg01, #256 wc
1a9c4     14 00 00 FF 
1a9c8     F8 E5 85 F1 | 	sub	objptr, ##10744
1a9cc     B0 00 90 3D |  if_ae	jmp	#LR__2181
1a9d0     4A 00 00 FF 
1a9d4     80 E4 05 F1 | 	add	objptr, ##38016
1a9d8     F2 12 02 FB | 	rdlong	arg01, objptr
1a9dc     09 FF 01 F6 | 	mov	result3, arg01
1a9e0     01 FE 65 F0 | 	shl	result3, #1
1a9e4     09 FF 01 F1 | 	add	result3, arg01
1a9e8     02 FE 65 F0 | 	shl	result3, #2
1a9ec     03 00 00 FF 
1a9f0     04 E4 85 F1 | 	sub	objptr, ##1540
1a9f4     F2 FE 01 F1 | 	add	result3, objptr
1a9f8     FF FA 01 FB | 	rdlong	result1, result3
1a9fc     04 FA 65 F0 | 	shl	result1, #4
1aa00     32 00 00 FF 
1aa04     84 E4 85 F1 | 	sub	objptr, ##25732
1aa08     F2 FA 01 F1 | 	add	result1, objptr
1aa0c     04 FA 05 F1 | 	add	result1, #4
1aa10     A7 FA 61 FC | 	wrlong	result1, fp
1aa14     35 00 00 FF 
1aa18     88 E4 05 F1 | 	add	objptr, ##27272
1aa1c     F2 FE 01 FB | 	rdlong	result3, objptr
1aa20     FF 12 02 F6 | 	mov	arg01, result3
1aa24     01 12 66 F0 | 	shl	arg01, #1
1aa28     FF 12 02 F1 | 	add	arg01, result3
1aa2c     02 12 66 F0 | 	shl	arg01, #2
1aa30     03 00 00 FF 
1aa34     04 E4 85 F1 | 	sub	objptr, ##1540
1aa38     F2 12 02 F1 | 	add	arg01, objptr
1aa3c     09 13 02 FB | 	rdlong	arg01, arg01
1aa40     04 12 66 F0 | 	shl	arg01, #4
1aa44     32 00 00 FF 
1aa48     84 E4 85 F1 | 	sub	objptr, ##25732
1aa4c     F2 12 02 F1 | 	add	arg01, objptr
1aa50     0C 12 06 F1 | 	add	arg01, #12
1aa54     09 13 02 FB | 	rdlong	arg01, arg01
1aa58     04 4E 05 F1 | 	add	fp, #4
1aa5c     A7 12 62 FC | 	wrlong	arg01, fp
1aa60     04 4E 05 F1 | 	add	fp, #4
1aa64     A7 3A 68 FC | 	wrlong	#29, fp
1aa68     08 4E 85 F1 | 	sub	fp, #8
1aa6c     A7 12 02 F6 | 	mov	arg01, fp
1aa70     14 00 00 FF 
1aa74     F8 E5 85 F1 | 	sub	objptr, ##10744
1aa78     34 20 BF FD | 	call	#_push
1aa7c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1aa7c                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1aa7c                 | '   t1.result_type=result_uint
1aa7c                 | '   push t1 : return
1aa7c     2C 03 90 FD | 	jmp	#LR__2190
1aa80                 | LR__2180
1aa80                 | LR__2181
1aa80     4A 00 00 FF 
1aa84     80 E4 05 F1 | 	add	objptr, ##38016
1aa88     F2 FE 01 FB | 	rdlong	result3, objptr
1aa8c     FF FC 01 F6 | 	mov	result2, result3
1aa90     01 FC 65 F0 | 	shl	result2, #1
1aa94     FF FC 01 F1 | 	add	result2, result3
1aa98     02 FC 65 F0 | 	shl	result2, #2
1aa9c     03 00 00 FF 
1aaa0     04 E4 85 F1 | 	sub	objptr, ##1540
1aaa4     F2 FC 01 F1 | 	add	result2, objptr
1aaa8     FE FE 01 FB | 	rdlong	result3, result2
1aaac     04 FE 65 F0 | 	shl	result3, #4
1aab0     32 00 00 FF 
1aab4     84 E4 85 F1 | 	sub	objptr, ##25732
1aab8     F2 FE 01 F1 | 	add	result3, objptr
1aabc     04 FE 05 F1 | 	add	result3, #4
1aac0     FF FE 01 FB | 	rdlong	result3, result3
1aac4     0C 4E 05 F1 | 	add	fp, #12
1aac8     A7 FE 61 FC | 	wrlong	result3, fp
1aacc     35 00 00 FF 
1aad0     88 E4 05 F1 | 	add	objptr, ##27272
1aad4     F2 FE 01 FB | 	rdlong	result3, objptr
1aad8     FF 12 02 F6 | 	mov	arg01, result3
1aadc     01 12 66 F0 | 	shl	arg01, #1
1aae0     FF 12 02 F1 | 	add	arg01, result3
1aae4     02 12 66 F0 | 	shl	arg01, #2
1aae8     03 00 00 FF 
1aaec     04 E4 85 F1 | 	sub	objptr, ##1540
1aaf0     F2 12 02 F1 | 	add	arg01, objptr
1aaf4     09 13 02 FB | 	rdlong	arg01, arg01
1aaf8     04 12 66 F0 | 	shl	arg01, #4
1aafc     32 00 00 FF 
1ab00     84 E4 85 F1 | 	sub	objptr, ##25732
1ab04     F2 12 02 F1 | 	add	arg01, objptr
1ab08     0C 12 06 F1 | 	add	arg01, #12
1ab0c     09 13 02 FB | 	rdlong	arg01, arg01
1ab10     08 4E 85 F1 | 	sub	fp, #8
1ab14     A7 12 62 FC | 	wrlong	arg01, fp
1ab18     08 4E 05 F1 | 	add	fp, #8
1ab1c     A7 12 02 FB | 	rdlong	arg01, fp
1ab20     0C 4E 85 F1 | 	sub	fp, #12
1ab24     14 00 00 FF 
1ab28     F8 E5 85 F1 | 	sub	objptr, ##10744
1ab2c     10 5B B0 FD | 	call	#_pslpeek
1ab30     FD FA 31 F9 | 	getword	result1, result1, #0
1ab34     10 4E 05 F1 | 	add	fp, #16
1ab38     A7 FA 61 FC | 	wrlong	result1, fp
1ab3c     4A 00 00 FF 
1ab40     80 E4 05 F1 | 	add	objptr, ##38016
1ab44     F2 FE 01 FB | 	rdlong	result3, objptr
1ab48     FF 12 02 F6 | 	mov	arg01, result3
1ab4c     01 12 66 F0 | 	shl	arg01, #1
1ab50     FF 12 02 F1 | 	add	arg01, result3
1ab54     02 12 66 F0 | 	shl	arg01, #2
1ab58     03 00 00 FF 
1ab5c     04 E4 85 F1 | 	sub	objptr, ##1540
1ab60     F2 12 02 F1 | 	add	arg01, objptr
1ab64     04 12 06 F1 | 	add	arg01, #4
1ab68     09 13 02 FB | 	rdlong	arg01, arg01
1ab6c     04 4E 05 F1 | 	add	fp, #4
1ab70     A7 12 62 FC | 	wrlong	arg01, fp
1ab74     08 4E 85 F1 | 	sub	fp, #8
1ab78     A7 12 02 FB | 	rdlong	arg01, fp
1ab7c     0C 4E 85 F1 | 	sub	fp, #12
1ab80     02 12 06 F1 | 	add	arg01, #2
1ab84     47 00 00 FF 
1ab88     7C E4 85 F1 | 	sub	objptr, ##36476
1ab8c     58 5A B0 FD | 	call	#_pspeek
1ab90     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ab94     18 4E 05 F1 | 	add	fp, #24
1ab98     A7 FA 61 FC | 	wrlong	result1, fp
1ab9c     0C 4E 85 F1 | 	sub	fp, #12
1aba0     A7 12 02 FB | 	rdlong	arg01, fp
1aba4     0C 4E 85 F1 | 	sub	fp, #12
1aba8     04 12 06 F1 | 	add	arg01, #4
1abac     90 5A B0 FD | 	call	#_pslpeek
1abb0     1C 4E 05 F1 | 	add	fp, #28
1abb4     A7 FA 61 FC | 	wrlong	result1, fp
1abb8     10 4E 85 F1 | 	sub	fp, #16
1abbc     A7 12 02 FB | 	rdlong	arg01, fp
1abc0     0C 4E 85 F1 | 	sub	fp, #12
1abc4     08 12 06 F1 | 	add	arg01, #8
1abc8     74 5A B0 FD | 	call	#_pslpeek
1abcc     20 4E 05 F1 | 	add	fp, #32
1abd0     A7 FA 61 FC | 	wrlong	result1, fp
1abd4     14 4E 85 F1 | 	sub	fp, #20
1abd8     A7 12 02 FB | 	rdlong	arg01, fp
1abdc     0C 4E 85 F1 | 	sub	fp, #12
1abe0     0C 12 06 F1 | 	add	arg01, #12
1abe4     58 5A B0 FD | 	call	#_pslpeek
1abe8     24 4E 05 F1 | 	add	fp, #36
1abec     A7 FA 61 FC | 	wrlong	result1, fp
1abf0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1abf0                 | ' esize=pspeek(arrptr+2)
1abf0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1abf0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1abf0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1abf0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1abf0     10 4E 85 F1 | 	sub	fp, #16
1abf4     A7 12 02 FB | 	rdlong	arg01, fp
1abf8     14 4E 85 F1 | 	sub	fp, #20
1abfc     03 12 16 F2 | 	cmp	arg01, #3 wc
1ac00     34 00 90 CD |  if_b	jmp	#LR__2182
1ac04     10 1E BF FD | 	call	#_pop
1ac08     A7 FA 61 FC | 	wrlong	result1, fp
1ac0c     04 4E 05 F1 | 	add	fp, #4
1ac10     A7 FC 61 FC | 	wrlong	result2, fp
1ac14     04 4E 05 F1 | 	add	fp, #4
1ac18     A7 FE 61 FC | 	wrlong	result3, fp
1ac1c     08 4E 85 F1 | 	sub	fp, #8
1ac20     A7 12 02 F6 | 	mov	arg01, fp
1ac24     D4 1F BF FD | 	call	#_converttoint
1ac28     30 4E 05 F1 | 	add	fp, #48
1ac2c     A7 FA 61 FC | 	wrlong	result1, fp
1ac30     30 4E 85 F1 | 	sub	fp, #48
1ac34     0C 00 90 FD | 	jmp	#LR__2183
1ac38                 | LR__2182
1ac38     30 4E 05 F1 | 	add	fp, #48
1ac3c     A7 00 68 FC | 	wrlong	#0, fp
1ac40     30 4E 85 F1 | 	sub	fp, #48
1ac44                 | LR__2183
1ac44                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1ac44     14 4E 05 F1 | 	add	fp, #20
1ac48     A7 12 02 FB | 	rdlong	arg01, fp
1ac4c     14 4E 85 F1 | 	sub	fp, #20
1ac50     02 12 16 F2 | 	cmp	arg01, #2 wc
1ac54     34 00 90 CD |  if_b	jmp	#LR__2184
1ac58     BC 1D BF FD | 	call	#_pop
1ac5c     A7 FA 61 FC | 	wrlong	result1, fp
1ac60     04 4E 05 F1 | 	add	fp, #4
1ac64     A7 FC 61 FC | 	wrlong	result2, fp
1ac68     04 4E 05 F1 | 	add	fp, #4
1ac6c     A7 FE 61 FC | 	wrlong	result3, fp
1ac70     08 4E 85 F1 | 	sub	fp, #8
1ac74     A7 12 02 F6 | 	mov	arg01, fp
1ac78     80 1F BF FD | 	call	#_converttoint
1ac7c     2C 4E 05 F1 | 	add	fp, #44
1ac80     A7 FA 61 FC | 	wrlong	result1, fp
1ac84     2C 4E 85 F1 | 	sub	fp, #44
1ac88     0C 00 90 FD | 	jmp	#LR__2185
1ac8c                 | LR__2184
1ac8c     2C 4E 05 F1 | 	add	fp, #44
1ac90     A7 00 68 FC | 	wrlong	#0, fp
1ac94     2C 4E 85 F1 | 	sub	fp, #44
1ac98                 | LR__2185
1ac98                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1ac98     14 4E 05 F1 | 	add	fp, #20
1ac9c     A7 12 02 FB | 	rdlong	arg01, fp
1aca0     14 4E 85 F1 | 	sub	fp, #20
1aca4     01 12 16 F2 | 	cmp	arg01, #1 wc
1aca8     34 00 90 CD |  if_b	jmp	#LR__2186
1acac     68 1D BF FD | 	call	#_pop
1acb0     A7 FA 61 FC | 	wrlong	result1, fp
1acb4     04 4E 05 F1 | 	add	fp, #4
1acb8     A7 FC 61 FC | 	wrlong	result2, fp
1acbc     04 4E 05 F1 | 	add	fp, #4
1acc0     A7 FE 61 FC | 	wrlong	result3, fp
1acc4     08 4E 85 F1 | 	sub	fp, #8
1acc8     A7 12 02 F6 | 	mov	arg01, fp
1accc     2C 1F BF FD | 	call	#_converttoint
1acd0     28 4E 05 F1 | 	add	fp, #40
1acd4     A7 FA 61 FC | 	wrlong	result1, fp
1acd8     28 4E 85 F1 | 	sub	fp, #40
1acdc     0C 00 90 FD | 	jmp	#LR__2187
1ace0                 | LR__2186
1ace0     28 4E 05 F1 | 	add	fp, #40
1ace4     A7 00 68 FC | 	wrlong	#0, fp
1ace8     28 4E 85 F1 | 	sub	fp, #40
1acec                 | LR__2187
1acec                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1acec                 | ' if numpar>0 then
1acec     14 4E 05 F1 | 	add	fp, #20
1acf0     A7 FE 01 FB | 	rdlong	result3, fp
1acf4     14 4E 85 F1 | 	sub	fp, #20
1acf8     01 FE 15 F2 | 	cmp	result3, #1 wc
1acfc     8C 00 90 CD |  if_b	jmp	#LR__2188
1ad00     0C 4E 05 F1 | 	add	fp, #12
1ad04     A7 FC 01 FB | 	rdlong	result2, fp
1ad08     1C 4E 05 F1 | 	add	fp, #28
1ad0c     A7 FE 01 FB | 	rdlong	result3, fp
1ad10     04 4E 05 F1 | 	add	fp, #4
1ad14     A7 12 02 FB | 	rdlong	arg01, fp
1ad18     10 4E 85 F1 | 	sub	fp, #16
1ad1c     A7 FA 01 FB | 	rdlong	result1, fp
1ad20     FD 12 02 FD | 	qmul	arg01, result1
1ad24     10 FC 05 F1 | 	add	result2, #16
1ad28     14 4E 05 F1 | 	add	fp, #20
1ad2c     A7 26 02 FB | 	rdlong	local01, fp
1ad30     18 12 62 FD | 	getqx	arg01
1ad34     FD 26 02 FD | 	qmul	local01, result1
1ad38     09 FF 01 F1 | 	add	result3, arg01
1ad3c     10 4E 85 F1 | 	sub	fp, #16
1ad40     A7 26 02 FB | 	rdlong	local01, fp
1ad44     18 FA 61 FD | 	getqx	result1
1ad48     13 FB 01 FD | 	qmul	result1, local01
1ad4c     08 4E 85 F1 | 	sub	fp, #8
1ad50     A7 26 02 FB | 	rdlong	local01, fp
1ad54     18 FA 61 FD | 	getqx	result1
1ad58     FD FE 01 F1 | 	add	result3, result1
1ad5c     13 FF 01 FD | 	qmul	result3, local01
1ad60     1C 4E 05 F1 | 	add	fp, #28
1ad64     18 26 62 FD | 	getqx	local01
1ad68     13 FD 01 F1 | 	add	result2, local01
1ad6c     A7 FC 61 FC | 	wrlong	result2, fp
1ad70     2C 4E 85 F1 | 	sub	fp, #44
1ad74     A7 3A 68 FC | 	wrlong	#29, fp
1ad78     2C 4E 05 F1 | 	add	fp, #44
1ad7c     A7 26 02 FB | 	rdlong	local01, fp
1ad80     34 4E 85 F1 | 	sub	fp, #52
1ad84     A7 26 62 FC | 	wrlong	local01, fp
1ad88     18 00 90 FD | 	jmp	#LR__2189
1ad8c                 | LR__2188
1ad8c     08 4E 05 F1 | 	add	fp, #8
1ad90     A7 3A 68 FC | 	wrlong	#29, fp
1ad94     04 4E 05 F1 | 	add	fp, #4
1ad98     A7 26 02 FB | 	rdlong	local01, fp
1ad9c     0C 4E 85 F1 | 	sub	fp, #12
1ada0     A7 26 62 FC | 	wrlong	local01, fp
1ada4                 | LR__2189
1ada4     A7 12 02 F6 | 	mov	arg01, fp
1ada8     04 1D BF FD | 	call	#_push
1adac                 | LR__2190
1adac     A7 F0 03 F6 | 	mov	ptra, fp
1adb0     B2 00 A0 FD | 	call	#popregs_
1adb4                 | _do_getaddr_ret
1adb4     2D 00 64 FD | 	ret
1adb8                 | 
1adb8                 | ' 
1adb8                 | ' 
1adb8                 | ' 
1adb8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1adb8                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1adb8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1adb8                 | ' 
1adb8                 | ' '--------------------------------- AND 
1adb8                 | ' 
1adb8                 | ' sub do_and 
1adb8                 | _do_and
1adb8     03 4A 05 F6 | 	mov	COUNT_, #3
1adbc     A8 00 A0 FD | 	call	#pushregs_
1adc0     18 F0 07 F1 | 	add	ptra, #24
1adc4     50 1C BF FD | 	call	#_pop
1adc8     FD 12 02 F6 | 	mov	arg01, result1
1adcc     FE 26 02 F6 | 	mov	local01, result2
1add0     FF 28 02 F6 | 	mov	local02, result3
1add4     0C 4E 05 F1 | 	add	fp, #12
1add8     A7 12 62 FC | 	wrlong	arg01, fp
1addc     04 4E 05 F1 | 	add	fp, #4
1ade0     A7 26 62 FC | 	wrlong	local01, fp
1ade4     04 4E 05 F1 | 	add	fp, #4
1ade8     A7 28 62 FC | 	wrlong	local02, fp
1adec     14 4E 85 F1 | 	sub	fp, #20
1adf0     24 1C BF FD | 	call	#_pop
1adf4     FF 2A 02 F6 | 	mov	local03, result3
1adf8     A7 FA 61 FC | 	wrlong	result1, fp
1adfc     04 4E 05 F1 | 	add	fp, #4
1ae00     A7 FC 61 FC | 	wrlong	result2, fp
1ae04     04 4E 05 F1 | 	add	fp, #4
1ae08     A7 2A 62 FC | 	wrlong	local03, fp
1ae0c                 | ' 
1ae0c                 | ' t2=pop()
1ae0c                 | ' t1=pop()
1ae0c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ae0c     08 4E 85 F1 | 	sub	fp, #8
1ae10     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ae14     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ae18     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ae1c     08 4E 05 A1 |  if_e	add	fp, #8
1ae20     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ae24     08 4E 85 A1 |  if_e	sub	fp, #8
1ae28                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ae28     14 4E 05 F1 | 	add	fp, #20
1ae2c     A7 2A 02 FB | 	rdlong	local03, fp
1ae30     14 4E 85 F1 | 	sub	fp, #20
1ae34     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ae38     18 00 90 5D |  if_ne	jmp	#LR__2200
1ae3c     0C 4E 05 F1 | 	add	fp, #12
1ae40     A7 2A 02 FB | 	rdlong	local03, fp
1ae44     A7 2A 62 FC | 	wrlong	local03, fp
1ae48     08 4E 05 F1 | 	add	fp, #8
1ae4c     A7 3A 68 FC | 	wrlong	#29, fp
1ae50     14 4E 85 F1 | 	sub	fp, #20
1ae54                 | LR__2200
1ae54                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1ae54     08 4E 05 F1 | 	add	fp, #8
1ae58     A7 2A 02 FB | 	rdlong	local03, fp
1ae5c     08 4E 85 F1 | 	sub	fp, #8
1ae60     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ae64     14 4E 05 51 |  if_ne	add	fp, #20
1ae68     A7 28 02 5B |  if_ne	rdlong	local02, fp
1ae6c     14 4E 85 51 |  if_ne	sub	fp, #20
1ae70     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1ae74     08 4E 05 51 |  if_ne	add	fp, #8
1ae78     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ae7c     08 4E 85 51 |  if_ne	sub	fp, #8
1ae80     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1ae84     14 4E 05 51 |  if_ne	add	fp, #20
1ae88     14 4E 85 51 |  if_ne	sub	fp, #20
1ae8c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1ae90     A7 0C 68 AC |  if_e	wrlong	#6, fp
1ae94     08 4E 05 A1 |  if_e	add	fp, #8
1ae98     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ae9c     08 4E 85 A1 |  if_e	sub	fp, #8
1aea0     18 00 90 AD |  if_e	jmp	#LR__2201
1aea4     A7 2A 02 FB | 	rdlong	local03, fp
1aea8     0C 4E 05 F1 | 	add	fp, #12
1aeac     A7 26 02 FB | 	rdlong	local01, fp
1aeb0     0C 4E 85 F1 | 	sub	fp, #12
1aeb4     13 2B 02 F5 | 	and	local03, local01
1aeb8     A7 2A 62 FC | 	wrlong	local03, fp
1aebc                 | LR__2201
1aebc     A7 12 02 F6 | 	mov	arg01, fp
1aec0     EC 1B BF FD | 	call	#_push
1aec4     A7 F0 03 F6 | 	mov	ptra, fp
1aec8     B2 00 A0 FD | 	call	#popregs_
1aecc                 | _do_and_ret
1aecc     2D 00 64 FD | 	ret
1aed0                 | 
1aed0                 | ' 
1aed0                 | ' '--------------------------------- DIV (integer divide)
1aed0                 | ' 
1aed0                 | ' sub do_div 
1aed0                 | _do_div
1aed0     01 4A 05 F6 | 	mov	COUNT_, #1
1aed4     A8 00 A0 FD | 	call	#pushregs_
1aed8     18 F0 07 F1 | 	add	ptra, #24
1aedc     38 1B BF FD | 	call	#_pop
1aee0     FD 8A 02 F6 | 	mov	muldivb_, result1
1aee4     FE 88 02 F6 | 	mov	muldiva_, result2
1aee8     FF 26 02 F6 | 	mov	local01, result3
1aeec     0C 4E 05 F1 | 	add	fp, #12
1aef0     A7 8A 62 FC | 	wrlong	muldivb_, fp
1aef4     04 4E 05 F1 | 	add	fp, #4
1aef8     A7 88 62 FC | 	wrlong	muldiva_, fp
1aefc     04 4E 05 F1 | 	add	fp, #4
1af00     A7 26 62 FC | 	wrlong	local01, fp
1af04     14 4E 85 F1 | 	sub	fp, #20
1af08     0C 1B BF FD | 	call	#_pop
1af0c     A7 FA 61 FC | 	wrlong	result1, fp
1af10     04 4E 05 F1 | 	add	fp, #4
1af14     A7 FC 61 FC | 	wrlong	result2, fp
1af18     04 4E 05 F1 | 	add	fp, #4
1af1c     A7 FE 61 FC | 	wrlong	result3, fp
1af20                 | ' 
1af20                 | ' t2=pop()
1af20                 | ' t1=pop()
1af20                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1af20     08 4E 85 F1 | 	sub	fp, #8
1af24     1F FE 0D F2 | 	cmp	result3, #31 wz
1af28     14 4E 05 51 |  if_ne	add	fp, #20
1af2c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1af30     14 4E 85 51 |  if_ne	sub	fp, #20
1af34     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1af38     A7 14 68 AC |  if_e	wrlong	#10, fp
1af3c     08 4E 05 A1 |  if_e	add	fp, #8
1af40     A7 FE 69 AC |  if_e	wrlong	#255, fp
1af44     08 4E 85 A1 |  if_e	sub	fp, #8
1af48     90 01 90 AD |  if_e	jmp	#LR__2216
1af4c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1af4c     08 4E 05 F1 | 	add	fp, #8
1af50     A7 8A 02 FB | 	rdlong	muldivb_, fp
1af54     08 4E 85 F1 | 	sub	fp, #8
1af58     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1af5c     1C 00 90 5D |  if_ne	jmp	#LR__2210
1af60     08 4E 05 F1 | 	add	fp, #8
1af64     A7 38 68 FC | 	wrlong	#28, fp
1af68     08 4E 85 F1 | 	sub	fp, #8
1af6c     A7 12 02 FB | 	rdlong	arg01, fp
1af70     00 14 06 F6 | 	mov	arg02, #0
1af74     DC C0 B0 FD | 	call	#__system___float_tointeger
1af78     A7 FA 61 FC | 	wrlong	result1, fp
1af7c                 | LR__2210
1af7c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1af7c     14 4E 05 F1 | 	add	fp, #20
1af80     A7 8A 02 FB | 	rdlong	muldivb_, fp
1af84     14 4E 85 F1 | 	sub	fp, #20
1af88     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1af8c     28 00 90 5D |  if_ne	jmp	#LR__2211
1af90     14 4E 05 F1 | 	add	fp, #20
1af94     A7 38 68 FC | 	wrlong	#28, fp
1af98     08 4E 85 F1 | 	sub	fp, #8
1af9c     A7 12 02 FB | 	rdlong	arg01, fp
1afa0     0C 4E 85 F1 | 	sub	fp, #12
1afa4     00 14 06 F6 | 	mov	arg02, #0
1afa8     A8 C0 B0 FD | 	call	#__system___float_tointeger
1afac     0C 4E 05 F1 | 	add	fp, #12
1afb0     A7 FA 61 FC | 	wrlong	result1, fp
1afb4     0C 4E 85 F1 | 	sub	fp, #12
1afb8                 | LR__2211
1afb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1afb8     08 4E 05 F1 | 	add	fp, #8
1afbc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1afc0     08 4E 85 F1 | 	sub	fp, #8
1afc4     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1afc8     14 4E 05 A1 |  if_e	add	fp, #20
1afcc     A7 26 02 AB |  if_e	rdlong	local01, fp
1afd0     14 4E 85 A1 |  if_e	sub	fp, #20
1afd4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1afd8     20 00 90 5D |  if_ne	jmp	#LR__2212
1afdc     0C 4E 05 F1 | 	add	fp, #12
1afe0     A7 26 02 FB | 	rdlong	local01, fp
1afe4     0C 4E 85 F1 | 	sub	fp, #12
1afe8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1afec     13 8B 12 FD | 	qdiv	muldivb_, local01
1aff0     18 26 62 FD | 	getqx	local01
1aff4     A7 26 62 FC | 	wrlong	local01, fp
1aff8     E0 00 90 FD | 	jmp	#LR__2216
1affc                 | LR__2212
1affc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1affc     08 4E 05 F1 | 	add	fp, #8
1b000     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b004     08 4E 85 F1 | 	sub	fp, #8
1b008     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b00c     14 4E 05 A1 |  if_e	add	fp, #20
1b010     A7 26 02 AB |  if_e	rdlong	local01, fp
1b014     14 4E 85 A1 |  if_e	sub	fp, #20
1b018     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b01c     2C 00 90 5D |  if_ne	jmp	#LR__2213
1b020     0C 4E 05 F1 | 	add	fp, #12
1b024     A7 26 02 FB | 	rdlong	local01, fp
1b028     0C 4E 85 F1 | 	sub	fp, #12
1b02c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b030     13 8B 12 FD | 	qdiv	muldivb_, local01
1b034     18 26 62 FD | 	getqx	local01
1b038     A7 26 62 FC | 	wrlong	local01, fp
1b03c     08 4E 05 F1 | 	add	fp, #8
1b040     A7 38 68 FC | 	wrlong	#28, fp
1b044     08 4E 85 F1 | 	sub	fp, #8
1b048     90 00 90 FD | 	jmp	#LR__2216
1b04c                 | LR__2213
1b04c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1b04c     08 4E 05 F1 | 	add	fp, #8
1b050     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b054     08 4E 85 F1 | 	sub	fp, #8
1b058     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b05c     14 4E 05 A1 |  if_e	add	fp, #20
1b060     A7 26 02 AB |  if_e	rdlong	local01, fp
1b064     14 4E 85 A1 |  if_e	sub	fp, #20
1b068     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b06c     1C 00 90 5D |  if_ne	jmp	#LR__2214
1b070     A7 88 02 FB | 	rdlong	muldiva_, fp
1b074     0C 4E 05 F1 | 	add	fp, #12
1b078     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b07c     0C 4E 85 F1 | 	sub	fp, #12
1b080     BA 00 A0 FD | 	call	#divide_
1b084     A7 8A 62 FC | 	wrlong	muldivb_, fp
1b088     50 00 90 FD | 	jmp	#LR__2216
1b08c                 | LR__2214
1b08c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1b08c     08 4E 05 F1 | 	add	fp, #8
1b090     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b094     08 4E 85 F1 | 	sub	fp, #8
1b098     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b09c     14 4E 05 A1 |  if_e	add	fp, #20
1b0a0     A7 26 02 AB |  if_e	rdlong	local01, fp
1b0a4     14 4E 85 A1 |  if_e	sub	fp, #20
1b0a8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b0ac     1C 00 90 5D |  if_ne	jmp	#LR__2215
1b0b0     A7 88 02 FB | 	rdlong	muldiva_, fp
1b0b4     0C 4E 05 F1 | 	add	fp, #12
1b0b8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0bc     0C 4E 85 F1 | 	sub	fp, #12
1b0c0     BA 00 A0 FD | 	call	#divide_
1b0c4     A7 8A 62 FC | 	wrlong	muldivb_, fp
1b0c8     10 00 90 FD | 	jmp	#LR__2216
1b0cc                 | LR__2215
1b0cc     A7 16 68 FC | 	wrlong	#11, fp
1b0d0     08 4E 05 F1 | 	add	fp, #8
1b0d4     A7 FE 69 FC | 	wrlong	#255, fp
1b0d8     08 4E 85 F1 | 	sub	fp, #8
1b0dc                 | LR__2216
1b0dc     A7 12 02 F6 | 	mov	arg01, fp
1b0e0     CC 19 BF FD | 	call	#_push
1b0e4     A7 F0 03 F6 | 	mov	ptra, fp
1b0e8     B2 00 A0 FD | 	call	#popregs_
1b0ec                 | _do_div_ret
1b0ec     2D 00 64 FD | 	ret
1b0f0                 | 
1b0f0                 | ' 
1b0f0                 | ' '--------------------------------- equal (=)
1b0f0                 | ' 
1b0f0                 | ' sub do_eq
1b0f0                 | _do_eq
1b0f0     05 4A 05 F6 | 	mov	COUNT_, #5
1b0f4     A8 00 A0 FD | 	call	#pushregs_
1b0f8     18 F0 07 F1 | 	add	ptra, #24
1b0fc     18 19 BF FD | 	call	#_pop
1b100     FD 26 02 F6 | 	mov	local01, result1
1b104     FE 28 02 F6 | 	mov	local02, result2
1b108     FF 2A 02 F6 | 	mov	local03, result3
1b10c     0C 4E 05 F1 | 	add	fp, #12
1b110     A7 26 62 FC | 	wrlong	local01, fp
1b114     04 4E 05 F1 | 	add	fp, #4
1b118     A7 28 62 FC | 	wrlong	local02, fp
1b11c     04 4E 05 F1 | 	add	fp, #4
1b120     A7 2A 62 FC | 	wrlong	local03, fp
1b124     14 4E 85 F1 | 	sub	fp, #20
1b128     EC 18 BF FD | 	call	#_pop
1b12c     FF 2A 02 F6 | 	mov	local03, result3
1b130     A7 FA 61 FC | 	wrlong	result1, fp
1b134     04 4E 05 F1 | 	add	fp, #4
1b138     A7 FC 61 FC | 	wrlong	result2, fp
1b13c     04 4E 05 F1 | 	add	fp, #4
1b140     A7 2A 62 FC | 	wrlong	local03, fp
1b144                 | ' 
1b144                 | ' t2=pop()
1b144                 | ' t1=pop()
1b144                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1b144     08 4E 85 F1 | 	sub	fp, #8
1b148     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b14c     14 4E 05 A1 |  if_e	add	fp, #20
1b150     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b154     14 4E 85 A1 |  if_e	sub	fp, #20
1b158     16 2B 02 A6 |  if_e	mov	local03, local04
1b15c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b160     28 00 90 5D |  if_ne	jmp	#LR__2220
1b164     00 26 06 F6 | 	mov	local01, #0
1b168     A7 12 02 FB | 	rdlong	arg01, fp
1b16c     0C 4E 05 F1 | 	add	fp, #12
1b170     A7 14 02 FB | 	rdlong	arg02, fp
1b174     0C 4E 85 F1 | 	sub	fp, #12
1b178     C0 8B B0 FD | 	call	#__system___string_cmp
1b17c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b180     00 26 26 A6 |  if_e	not	local01, #0
1b184     A7 26 62 FC | 	wrlong	local01, fp
1b188     20 04 90 FD | 	jmp	#LR__2233
1b18c                 | LR__2220
1b18c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1b18c     08 4E 05 F1 | 	add	fp, #8
1b190     A7 26 02 FB | 	rdlong	local01, fp
1b194     08 4E 85 F1 | 	sub	fp, #8
1b198     1E 26 0E F2 | 	cmp	local01, #30 wz
1b19c     14 4E 05 A1 |  if_e	add	fp, #20
1b1a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b1a4     14 4E 85 A1 |  if_e	sub	fp, #20
1b1a8     16 2B 02 A6 |  if_e	mov	local03, local04
1b1ac     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b1b0     2C 00 90 5D |  if_ne	jmp	#LR__2221
1b1b4     00 26 06 F6 | 	mov	local01, #0
1b1b8     A7 12 02 FB | 	rdlong	arg01, fp
1b1bc     0C 4E 05 F1 | 	add	fp, #12
1b1c0     A7 14 02 FB | 	rdlong	arg02, fp
1b1c4     0C 4E 85 F1 | 	sub	fp, #12
1b1c8     01 16 06 F6 | 	mov	arg03, #1
1b1cc     F0 BD B0 FD | 	call	#__system___float_cmp
1b1d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1d4     00 26 26 A6 |  if_e	not	local01, #0
1b1d8     A7 26 62 FC | 	wrlong	local01, fp
1b1dc     CC 03 90 FD | 	jmp	#LR__2233
1b1e0                 | LR__2221
1b1e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1b1e0     08 4E 05 F1 | 	add	fp, #8
1b1e4     A7 26 02 FB | 	rdlong	local01, fp
1b1e8     08 4E 85 F1 | 	sub	fp, #8
1b1ec     1E 26 0E F2 | 	cmp	local01, #30 wz
1b1f0     14 4E 05 A1 |  if_e	add	fp, #20
1b1f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b1f8     14 4E 85 A1 |  if_e	sub	fp, #20
1b1fc     16 2B 02 A6 |  if_e	mov	local03, local04
1b200     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b204     48 00 90 5D |  if_ne	jmp	#LR__2222
1b208     00 26 06 F6 | 	mov	local01, #0
1b20c     A7 28 02 FB | 	rdlong	local02, fp
1b210     0C 4E 05 F1 | 	add	fp, #12
1b214     A7 12 02 FB | 	rdlong	arg01, fp
1b218     0C 4E 85 F1 | 	sub	fp, #12
1b21c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b220     1F 2E C6 C9 |  if_b	decod	local05, #31
1b224     00 2E 06 36 |  if_ae	mov	local05, #0
1b228     5C B5 B0 FD | 	call	#__system___float_fromuns
1b22c     17 FB 61 F5 | 	xor	result1, local05
1b230     FD 14 02 F6 | 	mov	arg02, result1
1b234     14 13 02 F6 | 	mov	arg01, local02
1b238     01 16 06 F6 | 	mov	arg03, #1
1b23c     80 BD B0 FD | 	call	#__system___float_cmp
1b240     00 FA 0D F2 | 	cmp	result1, #0 wz
1b244     00 26 26 A6 |  if_e	not	local01, #0
1b248     A7 26 62 FC | 	wrlong	local01, fp
1b24c     5C 03 90 FD | 	jmp	#LR__2233
1b250                 | LR__2222
1b250                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1b250     08 4E 05 F1 | 	add	fp, #8
1b254     A7 26 02 FB | 	rdlong	local01, fp
1b258     08 4E 85 F1 | 	sub	fp, #8
1b25c     1E 26 0E F2 | 	cmp	local01, #30 wz
1b260     14 4E 05 A1 |  if_e	add	fp, #20
1b264     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b268     14 4E 85 A1 |  if_e	sub	fp, #20
1b26c     16 2B 02 A6 |  if_e	mov	local03, local04
1b270     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b274     38 00 90 5D |  if_ne	jmp	#LR__2223
1b278     00 26 06 F6 | 	mov	local01, #0
1b27c     A7 28 02 FB | 	rdlong	local02, fp
1b280     0C 4E 05 F1 | 	add	fp, #12
1b284     A7 12 02 FB | 	rdlong	arg01, fp
1b288     0C 4E 85 F1 | 	sub	fp, #12
1b28c     F8 B4 B0 FD | 	call	#__system___float_fromuns
1b290     FD 14 02 F6 | 	mov	arg02, result1
1b294     14 13 02 F6 | 	mov	arg01, local02
1b298     01 16 06 F6 | 	mov	arg03, #1
1b29c     20 BD B0 FD | 	call	#__system___float_cmp
1b2a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2a4     00 26 26 A6 |  if_e	not	local01, #0
1b2a8     A7 26 62 FC | 	wrlong	local01, fp
1b2ac     FC 02 90 FD | 	jmp	#LR__2233
1b2b0                 | LR__2223
1b2b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1b2b0     08 4E 05 F1 | 	add	fp, #8
1b2b4     A7 26 02 FB | 	rdlong	local01, fp
1b2b8     08 4E 85 F1 | 	sub	fp, #8
1b2bc     1C 26 0E F2 | 	cmp	local01, #28 wz
1b2c0     14 4E 05 A1 |  if_e	add	fp, #20
1b2c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b2c8     14 4E 85 A1 |  if_e	sub	fp, #20
1b2cc     16 2B 02 A6 |  if_e	mov	local03, local04
1b2d0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b2d4     44 00 90 5D |  if_ne	jmp	#LR__2224
1b2d8     00 26 06 F6 | 	mov	local01, #0
1b2dc     A7 12 02 FB | 	rdlong	arg01, fp
1b2e0     09 13 52 F6 | 	abs	arg01, arg01 wc
1b2e4     1F 2E C6 C9 |  if_b	decod	local05, #31
1b2e8     00 2E 06 36 |  if_ae	mov	local05, #0
1b2ec     98 B4 B0 FD | 	call	#__system___float_fromuns
1b2f0     17 FB 61 F5 | 	xor	result1, local05
1b2f4     FD 12 02 F6 | 	mov	arg01, result1
1b2f8     0C 4E 05 F1 | 	add	fp, #12
1b2fc     A7 14 02 FB | 	rdlong	arg02, fp
1b300     0C 4E 85 F1 | 	sub	fp, #12
1b304     01 16 06 F6 | 	mov	arg03, #1
1b308     B4 BC B0 FD | 	call	#__system___float_cmp
1b30c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b310     00 26 26 A6 |  if_e	not	local01, #0
1b314     A7 26 62 FC | 	wrlong	local01, fp
1b318     90 02 90 FD | 	jmp	#LR__2233
1b31c                 | LR__2224
1b31c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1b31c     08 4E 05 F1 | 	add	fp, #8
1b320     A7 26 02 FB | 	rdlong	local01, fp
1b324     08 4E 85 F1 | 	sub	fp, #8
1b328     1C 26 0E F2 | 	cmp	local01, #28 wz
1b32c     14 4E 05 A1 |  if_e	add	fp, #20
1b330     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b334     14 4E 85 A1 |  if_e	sub	fp, #20
1b338     16 2B 02 A6 |  if_e	mov	local03, local04
1b33c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b340     24 00 90 5D |  if_ne	jmp	#LR__2225
1b344     00 26 06 F6 | 	mov	local01, #0
1b348     A7 28 02 FB | 	rdlong	local02, fp
1b34c     0C 4E 05 F1 | 	add	fp, #12
1b350     A7 2A 02 FB | 	rdlong	local03, fp
1b354     0C 4E 85 F1 | 	sub	fp, #12
1b358     15 29 0A F2 | 	cmp	local02, local03 wz
1b35c     01 26 66 A6 |  if_e	neg	local01, #1
1b360     A7 26 62 FC | 	wrlong	local01, fp
1b364     44 02 90 FD | 	jmp	#LR__2233
1b368                 | LR__2225
1b368                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1b368     08 4E 05 F1 | 	add	fp, #8
1b36c     A7 26 02 FB | 	rdlong	local01, fp
1b370     08 4E 85 F1 | 	sub	fp, #8
1b374     1C 26 0E F2 | 	cmp	local01, #28 wz
1b378     14 4E 05 A1 |  if_e	add	fp, #20
1b37c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b380     14 4E 85 A1 |  if_e	sub	fp, #20
1b384     16 2B 02 A6 |  if_e	mov	local03, local04
1b388     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b38c     24 00 90 5D |  if_ne	jmp	#LR__2226
1b390     00 26 06 F6 | 	mov	local01, #0
1b394     A7 28 02 FB | 	rdlong	local02, fp
1b398     0C 4E 05 F1 | 	add	fp, #12
1b39c     A7 2A 02 FB | 	rdlong	local03, fp
1b3a0     0C 4E 85 F1 | 	sub	fp, #12
1b3a4     15 29 0A F2 | 	cmp	local02, local03 wz
1b3a8     01 26 66 A6 |  if_e	neg	local01, #1
1b3ac     A7 26 62 FC | 	wrlong	local01, fp
1b3b0     F8 01 90 FD | 	jmp	#LR__2233
1b3b4                 | LR__2226
1b3b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1b3b4     08 4E 05 F1 | 	add	fp, #8
1b3b8     A7 26 02 FB | 	rdlong	local01, fp
1b3bc     08 4E 85 F1 | 	sub	fp, #8
1b3c0     1D 26 0E F2 | 	cmp	local01, #29 wz
1b3c4     14 4E 05 A1 |  if_e	add	fp, #20
1b3c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b3cc     14 4E 85 A1 |  if_e	sub	fp, #20
1b3d0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1b3d4     34 00 90 5D |  if_ne	jmp	#LR__2227
1b3d8     00 26 06 F6 | 	mov	local01, #0
1b3dc     A7 12 02 FB | 	rdlong	arg01, fp
1b3e0     A4 B3 B0 FD | 	call	#__system___float_fromuns
1b3e4     FD 12 02 F6 | 	mov	arg01, result1
1b3e8     0C 4E 05 F1 | 	add	fp, #12
1b3ec     A7 14 02 FB | 	rdlong	arg02, fp
1b3f0     0C 4E 85 F1 | 	sub	fp, #12
1b3f4     01 16 06 F6 | 	mov	arg03, #1
1b3f8     C4 BB B0 FD | 	call	#__system___float_cmp
1b3fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b400     00 26 26 A6 |  if_e	not	local01, #0
1b404     A7 26 62 FC | 	wrlong	local01, fp
1b408     A0 01 90 FD | 	jmp	#LR__2233
1b40c                 | LR__2227
1b40c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1b40c     08 4E 05 F1 | 	add	fp, #8
1b410     A7 26 02 FB | 	rdlong	local01, fp
1b414     08 4E 85 F1 | 	sub	fp, #8
1b418     1D 26 0E F2 | 	cmp	local01, #29 wz
1b41c     14 4E 05 A1 |  if_e	add	fp, #20
1b420     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b424     14 4E 85 A1 |  if_e	sub	fp, #20
1b428     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b42c     24 00 90 5D |  if_ne	jmp	#LR__2228
1b430     00 26 06 F6 | 	mov	local01, #0
1b434     A7 28 02 FB | 	rdlong	local02, fp
1b438     0C 4E 05 F1 | 	add	fp, #12
1b43c     A7 2A 02 FB | 	rdlong	local03, fp
1b440     0C 4E 85 F1 | 	sub	fp, #12
1b444     15 29 0A F2 | 	cmp	local02, local03 wz
1b448     01 26 66 A6 |  if_e	neg	local01, #1
1b44c     A7 26 62 FC | 	wrlong	local01, fp
1b450     58 01 90 FD | 	jmp	#LR__2233
1b454                 | LR__2228
1b454                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1b454     08 4E 05 F1 | 	add	fp, #8
1b458     A7 26 02 FB | 	rdlong	local01, fp
1b45c     08 4E 85 F1 | 	sub	fp, #8
1b460     1D 26 0E F2 | 	cmp	local01, #29 wz
1b464     14 4E 05 A1 |  if_e	add	fp, #20
1b468     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b46c     14 4E 85 A1 |  if_e	sub	fp, #20
1b470     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b474     24 00 90 5D |  if_ne	jmp	#LR__2229
1b478     00 26 06 F6 | 	mov	local01, #0
1b47c     A7 28 02 FB | 	rdlong	local02, fp
1b480     0C 4E 05 F1 | 	add	fp, #12
1b484     A7 2A 02 FB | 	rdlong	local03, fp
1b488     0C 4E 85 F1 | 	sub	fp, #12
1b48c     15 29 0A F2 | 	cmp	local02, local03 wz
1b490     01 26 66 A6 |  if_e	neg	local01, #1
1b494     A7 26 62 FC | 	wrlong	local01, fp
1b498     10 01 90 FD | 	jmp	#LR__2233
1b49c                 | LR__2229
1b49c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1b49c     08 4E 05 F1 | 	add	fp, #8
1b4a0     A7 26 02 FB | 	rdlong	local01, fp
1b4a4     08 4E 85 F1 | 	sub	fp, #8
1b4a8     2B 26 0E F2 | 	cmp	local01, #43 wz
1b4ac     14 4E 05 A1 |  if_e	add	fp, #20
1b4b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b4b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b4b8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b4bc     30 00 90 5D |  if_ne	jmp	#LR__2230
1b4c0     00 26 06 F6 | 	mov	local01, #0
1b4c4     A7 12 02 FB | 	rdlong	arg01, fp
1b4c8     C4 16 BF FD | 	call	#_convertstring
1b4cc     FD 12 02 F6 | 	mov	arg01, result1
1b4d0     0C 4E 05 F1 | 	add	fp, #12
1b4d4     A7 14 02 FB | 	rdlong	arg02, fp
1b4d8     0C 4E 85 F1 | 	sub	fp, #12
1b4dc     5C 88 B0 FD | 	call	#__system___string_cmp
1b4e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b4e4     00 26 26 A6 |  if_e	not	local01, #0
1b4e8     A7 26 62 FC | 	wrlong	local01, fp
1b4ec     BC 00 90 FD | 	jmp	#LR__2233
1b4f0                 | LR__2230
1b4f0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1b4f0     08 4E 05 F1 | 	add	fp, #8
1b4f4     A7 26 02 FB | 	rdlong	local01, fp
1b4f8     08 4E 85 F1 | 	sub	fp, #8
1b4fc     1F 26 0E F2 | 	cmp	local01, #31 wz
1b500     14 4E 05 A1 |  if_e	add	fp, #20
1b504     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b508     14 4E 85 A1 |  if_e	sub	fp, #20
1b50c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b510     34 00 90 5D |  if_ne	jmp	#LR__2231
1b514     00 26 06 F6 | 	mov	local01, #0
1b518     A7 28 02 FB | 	rdlong	local02, fp
1b51c     0C 4E 05 F1 | 	add	fp, #12
1b520     A7 12 02 FB | 	rdlong	arg01, fp
1b524     0C 4E 85 F1 | 	sub	fp, #12
1b528     64 16 BF FD | 	call	#_convertstring
1b52c     FD 14 02 F6 | 	mov	arg02, result1
1b530     14 13 02 F6 | 	mov	arg01, local02
1b534     04 88 B0 FD | 	call	#__system___string_cmp
1b538     00 FA 0D F2 | 	cmp	result1, #0 wz
1b53c     00 26 26 A6 |  if_e	not	local01, #0
1b540     A7 26 62 FC | 	wrlong	local01, fp
1b544     64 00 90 FD | 	jmp	#LR__2233
1b548                 | LR__2231
1b548                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1b548     08 4E 05 F1 | 	add	fp, #8
1b54c     A7 26 02 FB | 	rdlong	local01, fp
1b550     08 4E 85 F1 | 	sub	fp, #8
1b554     2B 26 0E F2 | 	cmp	local01, #43 wz
1b558     14 4E 05 A1 |  if_e	add	fp, #20
1b55c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b560     14 4E 85 A1 |  if_e	sub	fp, #20
1b564     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b568     3C 00 90 5D |  if_ne	jmp	#LR__2232
1b56c     00 26 06 F6 | 	mov	local01, #0
1b570     A7 12 02 FB | 	rdlong	arg01, fp
1b574     18 16 BF FD | 	call	#_convertstring
1b578     FD 28 02 F6 | 	mov	local02, result1
1b57c     0C 4E 05 F1 | 	add	fp, #12
1b580     A7 12 02 FB | 	rdlong	arg01, fp
1b584     0C 4E 85 F1 | 	sub	fp, #12
1b588     04 16 BF FD | 	call	#_convertstring
1b58c     FD 14 02 F6 | 	mov	arg02, result1
1b590     14 13 02 F6 | 	mov	arg01, local02
1b594     A4 87 B0 FD | 	call	#__system___string_cmp
1b598     00 FA 0D F2 | 	cmp	result1, #0 wz
1b59c     00 26 26 A6 |  if_e	not	local01, #0
1b5a0     A7 26 62 FC | 	wrlong	local01, fp
1b5a4     04 00 90 FD | 	jmp	#LR__2233
1b5a8                 | LR__2232
1b5a8     A7 00 68 FC | 	wrlong	#0, fp
1b5ac                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1b5ac                 | LR__2233
1b5ac     08 4E 05 F1 | 	add	fp, #8
1b5b0     A7 38 68 FC | 	wrlong	#28, fp
1b5b4     08 4E 85 F1 | 	sub	fp, #8
1b5b8     A7 12 02 F6 | 	mov	arg01, fp
1b5bc     F0 14 BF FD | 	call	#_push
1b5c0     A7 F0 03 F6 | 	mov	ptra, fp
1b5c4     B2 00 A0 FD | 	call	#popregs_
1b5c8                 | _do_eq_ret
1b5c8     2D 00 64 FD | 	ret
1b5cc                 | 
1b5cc                 | ' 
1b5cc                 | ' '--------------------------------- fdiv (/) - float divide
1b5cc                 | ' 
1b5cc                 | ' sub do_fdiv 
1b5cc                 | _do_fdiv
1b5cc     02 4A 05 F6 | 	mov	COUNT_, #2
1b5d0     A8 00 A0 FD | 	call	#pushregs_
1b5d4     18 F0 07 F1 | 	add	ptra, #24
1b5d8     3C 14 BF FD | 	call	#_pop
1b5dc     FD 14 02 F6 | 	mov	arg02, result1
1b5e0     FE 12 02 F6 | 	mov	arg01, result2
1b5e4     FF 26 02 F6 | 	mov	local01, result3
1b5e8     0C 4E 05 F1 | 	add	fp, #12
1b5ec     A7 14 62 FC | 	wrlong	arg02, fp
1b5f0     04 4E 05 F1 | 	add	fp, #4
1b5f4     A7 12 62 FC | 	wrlong	arg01, fp
1b5f8     04 4E 05 F1 | 	add	fp, #4
1b5fc     A7 26 62 FC | 	wrlong	local01, fp
1b600     14 4E 85 F1 | 	sub	fp, #20
1b604     10 14 BF FD | 	call	#_pop
1b608     A7 FA 61 FC | 	wrlong	result1, fp
1b60c     04 4E 05 F1 | 	add	fp, #4
1b610     A7 FC 61 FC | 	wrlong	result2, fp
1b614     04 4E 05 F1 | 	add	fp, #4
1b618     A7 FE 61 FC | 	wrlong	result3, fp
1b61c                 | ' 
1b61c                 | ' t2=pop()
1b61c                 | ' t1=pop()
1b61c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1b61c     08 4E 85 F1 | 	sub	fp, #8
1b620     1F FE 0D F2 | 	cmp	result3, #31 wz
1b624     14 4E 05 51 |  if_ne	add	fp, #20
1b628     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b62c     14 4E 85 51 |  if_ne	sub	fp, #20
1b630     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1b634     A7 14 68 AC |  if_e	wrlong	#10, fp
1b638     08 4E 05 A1 |  if_e	add	fp, #8
1b63c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b640     08 4E 85 A1 |  if_e	sub	fp, #8
1b644     38 01 90 AD |  if_e	jmp	#LR__2245
1b648                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1b648     08 4E 05 F1 | 	add	fp, #8
1b64c     A7 14 02 FB | 	rdlong	arg02, fp
1b650     08 4E 85 F1 | 	sub	fp, #8
1b654     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b658     28 00 90 5D |  if_ne	jmp	#LR__2240
1b65c     08 4E 05 F1 | 	add	fp, #8
1b660     A7 3C 68 FC | 	wrlong	#30, fp
1b664     08 4E 85 F1 | 	sub	fp, #8
1b668     A7 12 02 FB | 	rdlong	arg01, fp
1b66c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b670     1F 28 C6 C9 |  if_b	decod	local02, #31
1b674     00 28 06 36 |  if_ae	mov	local02, #0
1b678     0C B1 B0 FD | 	call	#__system___float_fromuns
1b67c     14 FB 61 F5 | 	xor	result1, local02
1b680     A7 FA 61 FC | 	wrlong	result1, fp
1b684                 | LR__2240
1b684                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1b684     08 4E 05 F1 | 	add	fp, #8
1b688     A7 14 02 FB | 	rdlong	arg02, fp
1b68c     08 4E 85 F1 | 	sub	fp, #8
1b690     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b694     18 00 90 5D |  if_ne	jmp	#LR__2241
1b698     08 4E 05 F1 | 	add	fp, #8
1b69c     A7 3C 68 FC | 	wrlong	#30, fp
1b6a0     08 4E 85 F1 | 	sub	fp, #8
1b6a4     A7 12 02 FB | 	rdlong	arg01, fp
1b6a8     DC B0 B0 FD | 	call	#__system___float_fromuns
1b6ac     A7 FA 61 FC | 	wrlong	result1, fp
1b6b0                 | LR__2241
1b6b0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1b6b0     14 4E 05 F1 | 	add	fp, #20
1b6b4     A7 14 02 FB | 	rdlong	arg02, fp
1b6b8     14 4E 85 F1 | 	sub	fp, #20
1b6bc     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b6c0     34 00 90 5D |  if_ne	jmp	#LR__2242
1b6c4     14 4E 05 F1 | 	add	fp, #20
1b6c8     A7 3C 68 FC | 	wrlong	#30, fp
1b6cc     08 4E 85 F1 | 	sub	fp, #8
1b6d0     A7 12 02 FB | 	rdlong	arg01, fp
1b6d4     0C 4E 85 F1 | 	sub	fp, #12
1b6d8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b6dc     1F 28 C6 C9 |  if_b	decod	local02, #31
1b6e0     00 28 06 36 |  if_ae	mov	local02, #0
1b6e4     A0 B0 B0 FD | 	call	#__system___float_fromuns
1b6e8     14 FB 61 F5 | 	xor	result1, local02
1b6ec     0C 4E 05 F1 | 	add	fp, #12
1b6f0     A7 FA 61 FC | 	wrlong	result1, fp
1b6f4     0C 4E 85 F1 | 	sub	fp, #12
1b6f8                 | LR__2242
1b6f8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1b6f8     14 4E 05 F1 | 	add	fp, #20
1b6fc     A7 14 02 FB | 	rdlong	arg02, fp
1b700     14 4E 85 F1 | 	sub	fp, #20
1b704     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b708     24 00 90 5D |  if_ne	jmp	#LR__2243
1b70c     14 4E 05 F1 | 	add	fp, #20
1b710     A7 3C 68 FC | 	wrlong	#30, fp
1b714     08 4E 85 F1 | 	sub	fp, #8
1b718     A7 12 02 FB | 	rdlong	arg01, fp
1b71c     0C 4E 85 F1 | 	sub	fp, #12
1b720     64 B0 B0 FD | 	call	#__system___float_fromuns
1b724     0C 4E 05 F1 | 	add	fp, #12
1b728     A7 FA 61 FC | 	wrlong	result1, fp
1b72c     0C 4E 85 F1 | 	sub	fp, #12
1b730                 | LR__2243
1b730                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1b730     08 4E 05 F1 | 	add	fp, #8
1b734     A7 14 02 FB | 	rdlong	arg02, fp
1b738     08 4E 85 F1 | 	sub	fp, #8
1b73c     1E 14 0E F2 | 	cmp	arg02, #30 wz
1b740     14 4E 05 A1 |  if_e	add	fp, #20
1b744     A7 26 02 AB |  if_e	rdlong	local01, fp
1b748     14 4E 85 A1 |  if_e	sub	fp, #20
1b74c     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1b750     1C 00 90 5D |  if_ne	jmp	#LR__2244
1b754     A7 12 02 FB | 	rdlong	arg01, fp
1b758     0C 4E 05 F1 | 	add	fp, #12
1b75c     A7 14 02 FB | 	rdlong	arg02, fp
1b760     0C 4E 85 F1 | 	sub	fp, #12
1b764     28 B6 B0 FD | 	call	#__system___float_div
1b768     A7 FA 61 FC | 	wrlong	result1, fp
1b76c     10 00 90 FD | 	jmp	#LR__2245
1b770                 | LR__2244
1b770     A7 16 68 FC | 	wrlong	#11, fp
1b774     08 4E 05 F1 | 	add	fp, #8
1b778     A7 FE 69 FC | 	wrlong	#255, fp
1b77c     08 4E 85 F1 | 	sub	fp, #8
1b780                 | LR__2245
1b780     A7 12 02 F6 | 	mov	arg01, fp
1b784     28 13 BF FD | 	call	#_push
1b788     A7 F0 03 F6 | 	mov	ptra, fp
1b78c     B2 00 A0 FD | 	call	#popregs_
1b790                 | _do_fdiv_ret
1b790     2D 00 64 FD | 	ret
1b794                 | 
1b794                 | ' 
1b794                 | ' '--------------------------------- greater or equal (>=)
1b794                 | ' 
1b794                 | ' sub do_ge
1b794                 | _do_ge
1b794     05 4A 05 F6 | 	mov	COUNT_, #5
1b798     A8 00 A0 FD | 	call	#pushregs_
1b79c     18 F0 07 F1 | 	add	ptra, #24
1b7a0     74 12 BF FD | 	call	#_pop
1b7a4     FD 26 02 F6 | 	mov	local01, result1
1b7a8     FE 28 02 F6 | 	mov	local02, result2
1b7ac     FF 2A 02 F6 | 	mov	local03, result3
1b7b0     0C 4E 05 F1 | 	add	fp, #12
1b7b4     A7 26 62 FC | 	wrlong	local01, fp
1b7b8     04 4E 05 F1 | 	add	fp, #4
1b7bc     A7 28 62 FC | 	wrlong	local02, fp
1b7c0     04 4E 05 F1 | 	add	fp, #4
1b7c4     A7 2A 62 FC | 	wrlong	local03, fp
1b7c8     14 4E 85 F1 | 	sub	fp, #20
1b7cc     48 12 BF FD | 	call	#_pop
1b7d0     FF 2A 02 F6 | 	mov	local03, result3
1b7d4     A7 FA 61 FC | 	wrlong	result1, fp
1b7d8     04 4E 05 F1 | 	add	fp, #4
1b7dc     A7 FC 61 FC | 	wrlong	result2, fp
1b7e0     04 4E 05 F1 | 	add	fp, #4
1b7e4     A7 2A 62 FC | 	wrlong	local03, fp
1b7e8                 | ' 
1b7e8                 | ' t2=pop()
1b7e8                 | ' t1=pop()
1b7e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1b7e8     08 4E 85 F1 | 	sub	fp, #8
1b7ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b7f0     14 4E 05 A1 |  if_e	add	fp, #20
1b7f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b7f8     14 4E 85 A1 |  if_e	sub	fp, #20
1b7fc     16 2B 02 A6 |  if_e	mov	local03, local04
1b800     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b804     28 00 90 5D |  if_ne	jmp	#LR__2250
1b808     00 26 06 F6 | 	mov	local01, #0
1b80c     A7 12 02 FB | 	rdlong	arg01, fp
1b810     0C 4E 05 F1 | 	add	fp, #12
1b814     A7 14 02 FB | 	rdlong	arg02, fp
1b818     0C 4E 85 F1 | 	sub	fp, #12
1b81c     1C 85 B0 FD | 	call	#__system___string_cmp
1b820     00 FA 55 F2 | 	cmps	result1, #0 wc
1b824     00 26 26 36 |  if_ae	not	local01, #0
1b828     A7 26 62 FC | 	wrlong	local01, fp
1b82c     24 04 90 FD | 	jmp	#LR__2263
1b830                 | LR__2250
1b830                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1b830     08 4E 05 F1 | 	add	fp, #8
1b834     A7 26 02 FB | 	rdlong	local01, fp
1b838     08 4E 85 F1 | 	sub	fp, #8
1b83c     1E 26 0E F2 | 	cmp	local01, #30 wz
1b840     14 4E 05 A1 |  if_e	add	fp, #20
1b844     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b848     14 4E 85 A1 |  if_e	sub	fp, #20
1b84c     16 2B 02 A6 |  if_e	mov	local03, local04
1b850     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b854     2C 00 90 5D |  if_ne	jmp	#LR__2251
1b858     00 26 06 F6 | 	mov	local01, #0
1b85c     A7 12 02 FB | 	rdlong	arg01, fp
1b860     0C 4E 05 F1 | 	add	fp, #12
1b864     A7 14 02 FB | 	rdlong	arg02, fp
1b868     0C 4E 85 F1 | 	sub	fp, #12
1b86c     01 16 66 F6 | 	neg	arg03, #1
1b870     4C B7 B0 FD | 	call	#__system___float_cmp
1b874     00 FA 55 F2 | 	cmps	result1, #0 wc
1b878     00 26 26 36 |  if_ae	not	local01, #0
1b87c     A7 26 62 FC | 	wrlong	local01, fp
1b880     D0 03 90 FD | 	jmp	#LR__2263
1b884                 | LR__2251
1b884                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1b884     08 4E 05 F1 | 	add	fp, #8
1b888     A7 26 02 FB | 	rdlong	local01, fp
1b88c     08 4E 85 F1 | 	sub	fp, #8
1b890     1E 26 0E F2 | 	cmp	local01, #30 wz
1b894     14 4E 05 A1 |  if_e	add	fp, #20
1b898     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b89c     14 4E 85 A1 |  if_e	sub	fp, #20
1b8a0     16 2B 02 A6 |  if_e	mov	local03, local04
1b8a4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b8a8     48 00 90 5D |  if_ne	jmp	#LR__2252
1b8ac     00 26 06 F6 | 	mov	local01, #0
1b8b0     A7 28 02 FB | 	rdlong	local02, fp
1b8b4     0C 4E 05 F1 | 	add	fp, #12
1b8b8     A7 12 02 FB | 	rdlong	arg01, fp
1b8bc     0C 4E 85 F1 | 	sub	fp, #12
1b8c0     09 13 52 F6 | 	abs	arg01, arg01 wc
1b8c4     1F 2E C6 C9 |  if_b	decod	local05, #31
1b8c8     00 2E 06 36 |  if_ae	mov	local05, #0
1b8cc     B8 AE B0 FD | 	call	#__system___float_fromuns
1b8d0     17 FB 61 F5 | 	xor	result1, local05
1b8d4     FD 14 02 F6 | 	mov	arg02, result1
1b8d8     14 13 02 F6 | 	mov	arg01, local02
1b8dc     01 16 66 F6 | 	neg	arg03, #1
1b8e0     DC B6 B0 FD | 	call	#__system___float_cmp
1b8e4     00 FA 55 F2 | 	cmps	result1, #0 wc
1b8e8     00 26 26 36 |  if_ae	not	local01, #0
1b8ec     A7 26 62 FC | 	wrlong	local01, fp
1b8f0     60 03 90 FD | 	jmp	#LR__2263
1b8f4                 | LR__2252
1b8f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1b8f4     08 4E 05 F1 | 	add	fp, #8
1b8f8     A7 26 02 FB | 	rdlong	local01, fp
1b8fc     08 4E 85 F1 | 	sub	fp, #8
1b900     1E 26 0E F2 | 	cmp	local01, #30 wz
1b904     14 4E 05 A1 |  if_e	add	fp, #20
1b908     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b90c     14 4E 85 A1 |  if_e	sub	fp, #20
1b910     16 2B 02 A6 |  if_e	mov	local03, local04
1b914     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b918     38 00 90 5D |  if_ne	jmp	#LR__2253
1b91c     00 26 06 F6 | 	mov	local01, #0
1b920     A7 28 02 FB | 	rdlong	local02, fp
1b924     0C 4E 05 F1 | 	add	fp, #12
1b928     A7 12 02 FB | 	rdlong	arg01, fp
1b92c     0C 4E 85 F1 | 	sub	fp, #12
1b930     54 AE B0 FD | 	call	#__system___float_fromuns
1b934     FD 14 02 F6 | 	mov	arg02, result1
1b938     14 13 02 F6 | 	mov	arg01, local02
1b93c     01 16 66 F6 | 	neg	arg03, #1
1b940     7C B6 B0 FD | 	call	#__system___float_cmp
1b944     00 FA 55 F2 | 	cmps	result1, #0 wc
1b948     00 26 26 36 |  if_ae	not	local01, #0
1b94c     A7 26 62 FC | 	wrlong	local01, fp
1b950     00 03 90 FD | 	jmp	#LR__2263
1b954                 | LR__2253
1b954                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1b954     08 4E 05 F1 | 	add	fp, #8
1b958     A7 26 02 FB | 	rdlong	local01, fp
1b95c     08 4E 85 F1 | 	sub	fp, #8
1b960     1C 26 0E F2 | 	cmp	local01, #28 wz
1b964     14 4E 05 A1 |  if_e	add	fp, #20
1b968     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b96c     14 4E 85 A1 |  if_e	sub	fp, #20
1b970     16 2B 02 A6 |  if_e	mov	local03, local04
1b974     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b978     44 00 90 5D |  if_ne	jmp	#LR__2254
1b97c     00 26 06 F6 | 	mov	local01, #0
1b980     A7 12 02 FB | 	rdlong	arg01, fp
1b984     09 13 52 F6 | 	abs	arg01, arg01 wc
1b988     1F 2E C6 C9 |  if_b	decod	local05, #31
1b98c     00 2E 06 36 |  if_ae	mov	local05, #0
1b990     F4 AD B0 FD | 	call	#__system___float_fromuns
1b994     17 FB 61 F5 | 	xor	result1, local05
1b998     FD 12 02 F6 | 	mov	arg01, result1
1b99c     0C 4E 05 F1 | 	add	fp, #12
1b9a0     A7 14 02 FB | 	rdlong	arg02, fp
1b9a4     0C 4E 85 F1 | 	sub	fp, #12
1b9a8     01 16 66 F6 | 	neg	arg03, #1
1b9ac     10 B6 B0 FD | 	call	#__system___float_cmp
1b9b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1b9b4     00 26 26 36 |  if_ae	not	local01, #0
1b9b8     A7 26 62 FC | 	wrlong	local01, fp
1b9bc     94 02 90 FD | 	jmp	#LR__2263
1b9c0                 | LR__2254
1b9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1b9c0     08 4E 05 F1 | 	add	fp, #8
1b9c4     A7 26 02 FB | 	rdlong	local01, fp
1b9c8     08 4E 85 F1 | 	sub	fp, #8
1b9cc     1C 26 0E F2 | 	cmp	local01, #28 wz
1b9d0     14 4E 05 A1 |  if_e	add	fp, #20
1b9d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b9d8     14 4E 85 A1 |  if_e	sub	fp, #20
1b9dc     16 2B 02 A6 |  if_e	mov	local03, local04
1b9e0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b9e4     24 00 90 5D |  if_ne	jmp	#LR__2255
1b9e8     00 26 06 F6 | 	mov	local01, #0
1b9ec     A7 28 02 FB | 	rdlong	local02, fp
1b9f0     0C 4E 05 F1 | 	add	fp, #12
1b9f4     A7 2A 02 FB | 	rdlong	local03, fp
1b9f8     0C 4E 85 F1 | 	sub	fp, #12
1b9fc     15 29 52 F2 | 	cmps	local02, local03 wc
1ba00     01 26 66 36 |  if_ae	neg	local01, #1
1ba04     A7 26 62 FC | 	wrlong	local01, fp
1ba08     48 02 90 FD | 	jmp	#LR__2263
1ba0c                 | LR__2255
1ba0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1ba0c     08 4E 05 F1 | 	add	fp, #8
1ba10     A7 26 02 FB | 	rdlong	local01, fp
1ba14     08 4E 85 F1 | 	sub	fp, #8
1ba18     1C 26 0E F2 | 	cmp	local01, #28 wz
1ba1c     14 4E 05 A1 |  if_e	add	fp, #20
1ba20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba24     14 4E 85 A1 |  if_e	sub	fp, #20
1ba28     16 2B 02 A6 |  if_e	mov	local03, local04
1ba2c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ba30     24 00 90 5D |  if_ne	jmp	#LR__2256
1ba34     00 26 06 F6 | 	mov	local01, #0
1ba38     A7 28 02 FB | 	rdlong	local02, fp
1ba3c     0C 4E 05 F1 | 	add	fp, #12
1ba40     A7 2A 02 FB | 	rdlong	local03, fp
1ba44     0C 4E 85 F1 | 	sub	fp, #12
1ba48     15 29 52 F2 | 	cmps	local02, local03 wc
1ba4c     01 26 66 36 |  if_ae	neg	local01, #1
1ba50     A7 26 62 FC | 	wrlong	local01, fp
1ba54     FC 01 90 FD | 	jmp	#LR__2263
1ba58                 | LR__2256
1ba58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1ba58     08 4E 05 F1 | 	add	fp, #8
1ba5c     A7 26 02 FB | 	rdlong	local01, fp
1ba60     08 4E 85 F1 | 	sub	fp, #8
1ba64     1D 26 0E F2 | 	cmp	local01, #29 wz
1ba68     14 4E 05 A1 |  if_e	add	fp, #20
1ba6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba70     14 4E 85 A1 |  if_e	sub	fp, #20
1ba74     16 2B 02 A6 |  if_e	mov	local03, local04
1ba78     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ba7c     34 00 90 5D |  if_ne	jmp	#LR__2257
1ba80     00 26 06 F6 | 	mov	local01, #0
1ba84     A7 12 02 FB | 	rdlong	arg01, fp
1ba88     FC AC B0 FD | 	call	#__system___float_fromuns
1ba8c     FD 12 02 F6 | 	mov	arg01, result1
1ba90     0C 4E 05 F1 | 	add	fp, #12
1ba94     A7 14 02 FB | 	rdlong	arg02, fp
1ba98     0C 4E 85 F1 | 	sub	fp, #12
1ba9c     01 16 66 F6 | 	neg	arg03, #1
1baa0     1C B5 B0 FD | 	call	#__system___float_cmp
1baa4     00 FA 55 F2 | 	cmps	result1, #0 wc
1baa8     00 26 26 36 |  if_ae	not	local01, #0
1baac     A7 26 62 FC | 	wrlong	local01, fp
1bab0     A0 01 90 FD | 	jmp	#LR__2263
1bab4                 | LR__2257
1bab4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1bab4     08 4E 05 F1 | 	add	fp, #8
1bab8     A7 26 02 FB | 	rdlong	local01, fp
1babc     08 4E 85 F1 | 	sub	fp, #8
1bac0     1D 26 0E F2 | 	cmp	local01, #29 wz
1bac4     14 4E 05 A1 |  if_e	add	fp, #20
1bac8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bacc     14 4E 85 A1 |  if_e	sub	fp, #20
1bad0     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1bad4     24 00 90 5D |  if_ne	jmp	#LR__2258
1bad8     00 26 06 F6 | 	mov	local01, #0
1badc     A7 28 02 FB | 	rdlong	local02, fp
1bae0     0C 4E 05 F1 | 	add	fp, #12
1bae4     A7 2A 02 FB | 	rdlong	local03, fp
1bae8     0C 4E 85 F1 | 	sub	fp, #12
1baec     15 29 52 F2 | 	cmps	local02, local03 wc
1baf0     01 26 66 36 |  if_ae	neg	local01, #1
1baf4     A7 26 62 FC | 	wrlong	local01, fp
1baf8     58 01 90 FD | 	jmp	#LR__2263
1bafc                 | LR__2258
1bafc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1bafc     08 4E 05 F1 | 	add	fp, #8
1bb00     A7 26 02 FB | 	rdlong	local01, fp
1bb04     08 4E 85 F1 | 	sub	fp, #8
1bb08     1D 26 0E F2 | 	cmp	local01, #29 wz
1bb0c     14 4E 05 A1 |  if_e	add	fp, #20
1bb10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bb14     14 4E 85 A1 |  if_e	sub	fp, #20
1bb18     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bb1c     24 00 90 5D |  if_ne	jmp	#LR__2259
1bb20     00 26 06 F6 | 	mov	local01, #0
1bb24     A7 28 02 FB | 	rdlong	local02, fp
1bb28     0C 4E 05 F1 | 	add	fp, #12
1bb2c     A7 2A 02 FB | 	rdlong	local03, fp
1bb30     0C 4E 85 F1 | 	sub	fp, #12
1bb34     15 29 12 F2 | 	cmp	local02, local03 wc
1bb38     01 26 66 36 |  if_ae	neg	local01, #1
1bb3c     A7 26 62 FC | 	wrlong	local01, fp
1bb40     10 01 90 FD | 	jmp	#LR__2263
1bb44                 | LR__2259
1bb44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1bb44     08 4E 05 F1 | 	add	fp, #8
1bb48     A7 26 02 FB | 	rdlong	local01, fp
1bb4c     08 4E 85 F1 | 	sub	fp, #8
1bb50     2B 26 0E F2 | 	cmp	local01, #43 wz
1bb54     14 4E 05 A1 |  if_e	add	fp, #20
1bb58     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bb5c     14 4E 85 A1 |  if_e	sub	fp, #20
1bb60     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bb64     30 00 90 5D |  if_ne	jmp	#LR__2260
1bb68     00 26 06 F6 | 	mov	local01, #0
1bb6c     A7 12 02 FB | 	rdlong	arg01, fp
1bb70     1C 10 BF FD | 	call	#_convertstring
1bb74     FD 12 02 F6 | 	mov	arg01, result1
1bb78     0C 4E 05 F1 | 	add	fp, #12
1bb7c     A7 14 02 FB | 	rdlong	arg02, fp
1bb80     0C 4E 85 F1 | 	sub	fp, #12
1bb84     B4 81 B0 FD | 	call	#__system___string_cmp
1bb88     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb8c     00 26 26 36 |  if_ae	not	local01, #0
1bb90     A7 26 62 FC | 	wrlong	local01, fp
1bb94     BC 00 90 FD | 	jmp	#LR__2263
1bb98                 | LR__2260
1bb98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1bb98     08 4E 05 F1 | 	add	fp, #8
1bb9c     A7 26 02 FB | 	rdlong	local01, fp
1bba0     08 4E 85 F1 | 	sub	fp, #8
1bba4     1F 26 0E F2 | 	cmp	local01, #31 wz
1bba8     14 4E 05 A1 |  if_e	add	fp, #20
1bbac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bbb0     14 4E 85 A1 |  if_e	sub	fp, #20
1bbb4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bbb8     34 00 90 5D |  if_ne	jmp	#LR__2261
1bbbc     00 26 06 F6 | 	mov	local01, #0
1bbc0     A7 28 02 FB | 	rdlong	local02, fp
1bbc4     0C 4E 05 F1 | 	add	fp, #12
1bbc8     A7 12 02 FB | 	rdlong	arg01, fp
1bbcc     0C 4E 85 F1 | 	sub	fp, #12
1bbd0     BC 0F BF FD | 	call	#_convertstring
1bbd4     FD 14 02 F6 | 	mov	arg02, result1
1bbd8     14 13 02 F6 | 	mov	arg01, local02
1bbdc     5C 81 B0 FD | 	call	#__system___string_cmp
1bbe0     00 FA 55 F2 | 	cmps	result1, #0 wc
1bbe4     00 26 26 36 |  if_ae	not	local01, #0
1bbe8     A7 26 62 FC | 	wrlong	local01, fp
1bbec     64 00 90 FD | 	jmp	#LR__2263
1bbf0                 | LR__2261
1bbf0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1bbf0     08 4E 05 F1 | 	add	fp, #8
1bbf4     A7 26 02 FB | 	rdlong	local01, fp
1bbf8     08 4E 85 F1 | 	sub	fp, #8
1bbfc     2B 26 0E F2 | 	cmp	local01, #43 wz
1bc00     14 4E 05 A1 |  if_e	add	fp, #20
1bc04     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bc08     14 4E 85 A1 |  if_e	sub	fp, #20
1bc0c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bc10     3C 00 90 5D |  if_ne	jmp	#LR__2262
1bc14     00 26 06 F6 | 	mov	local01, #0
1bc18     A7 12 02 FB | 	rdlong	arg01, fp
1bc1c     70 0F BF FD | 	call	#_convertstring
1bc20     FD 28 02 F6 | 	mov	local02, result1
1bc24     0C 4E 05 F1 | 	add	fp, #12
1bc28     A7 12 02 FB | 	rdlong	arg01, fp
1bc2c     0C 4E 85 F1 | 	sub	fp, #12
1bc30     5C 0F BF FD | 	call	#_convertstring
1bc34     FD 14 02 F6 | 	mov	arg02, result1
1bc38     14 13 02 F6 | 	mov	arg01, local02
1bc3c     FC 80 B0 FD | 	call	#__system___string_cmp
1bc40     00 FA 55 F2 | 	cmps	result1, #0 wc
1bc44     00 26 26 36 |  if_ae	not	local01, #0
1bc48     A7 26 62 FC | 	wrlong	local01, fp
1bc4c     04 00 90 FD | 	jmp	#LR__2263
1bc50                 | LR__2262
1bc50     A7 00 68 FC | 	wrlong	#0, fp
1bc54                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1bc54                 | LR__2263
1bc54     08 4E 05 F1 | 	add	fp, #8
1bc58     A7 38 68 FC | 	wrlong	#28, fp
1bc5c     08 4E 85 F1 | 	sub	fp, #8
1bc60                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1bc60     A7 26 0A FB | 	rdlong	local01, fp wz
1bc64     A7 02 68 5C |  if_ne	wrlong	#1, fp
1bc68     A7 12 02 F6 | 	mov	arg01, fp
1bc6c     40 0E BF FD | 	call	#_push
1bc70     A7 F0 03 F6 | 	mov	ptra, fp
1bc74     B2 00 A0 FD | 	call	#popregs_
1bc78                 | _do_ge_ret
1bc78     2D 00 64 FD | 	ret
1bc7c                 | 
1bc7c                 | ' 
1bc7c                 | ' '--------------------------------- greater than (>)
1bc7c                 | ' 
1bc7c                 | ' sub do_gt
1bc7c                 | _do_gt
1bc7c     05 4A 05 F6 | 	mov	COUNT_, #5
1bc80     A8 00 A0 FD | 	call	#pushregs_
1bc84     18 F0 07 F1 | 	add	ptra, #24
1bc88     8C 0D BF FD | 	call	#_pop
1bc8c     FD 26 02 F6 | 	mov	local01, result1
1bc90     FE 28 02 F6 | 	mov	local02, result2
1bc94     FF 2A 02 F6 | 	mov	local03, result3
1bc98     0C 4E 05 F1 | 	add	fp, #12
1bc9c     A7 26 62 FC | 	wrlong	local01, fp
1bca0     04 4E 05 F1 | 	add	fp, #4
1bca4     A7 28 62 FC | 	wrlong	local02, fp
1bca8     04 4E 05 F1 | 	add	fp, #4
1bcac     A7 2A 62 FC | 	wrlong	local03, fp
1bcb0     14 4E 85 F1 | 	sub	fp, #20
1bcb4     60 0D BF FD | 	call	#_pop
1bcb8     FF 2A 02 F6 | 	mov	local03, result3
1bcbc     A7 FA 61 FC | 	wrlong	result1, fp
1bcc0     04 4E 05 F1 | 	add	fp, #4
1bcc4     A7 FC 61 FC | 	wrlong	result2, fp
1bcc8     04 4E 05 F1 | 	add	fp, #4
1bccc     A7 2A 62 FC | 	wrlong	local03, fp
1bcd0                 | ' 
1bcd0                 | ' t2=pop()
1bcd0                 | ' t1=pop()
1bcd0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1bcd0     08 4E 85 F1 | 	sub	fp, #8
1bcd4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1bcd8     14 4E 05 A1 |  if_e	add	fp, #20
1bcdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bce0     14 4E 85 A1 |  if_e	sub	fp, #20
1bce4     16 2B 02 A6 |  if_e	mov	local03, local04
1bce8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bcec     28 00 90 5D |  if_ne	jmp	#LR__2270
1bcf0     00 26 06 F6 | 	mov	local01, #0
1bcf4     A7 12 02 FB | 	rdlong	arg01, fp
1bcf8     0C 4E 05 F1 | 	add	fp, #12
1bcfc     A7 14 02 FB | 	rdlong	arg02, fp
1bd00     0C 4E 85 F1 | 	sub	fp, #12
1bd04     34 80 B0 FD | 	call	#__system___string_cmp
1bd08     01 FA 55 F2 | 	cmps	result1, #1 wc
1bd0c     00 26 26 36 |  if_ae	not	local01, #0
1bd10     A7 26 62 FC | 	wrlong	local01, fp
1bd14     20 04 90 FD | 	jmp	#LR__2283
1bd18                 | LR__2270
1bd18                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1bd18     08 4E 05 F1 | 	add	fp, #8
1bd1c     A7 26 02 FB | 	rdlong	local01, fp
1bd20     08 4E 85 F1 | 	sub	fp, #8
1bd24     1E 26 0E F2 | 	cmp	local01, #30 wz
1bd28     14 4E 05 A1 |  if_e	add	fp, #20
1bd2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd30     14 4E 85 A1 |  if_e	sub	fp, #20
1bd34     16 2B 02 A6 |  if_e	mov	local03, local04
1bd38     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bd3c     2C 00 90 5D |  if_ne	jmp	#LR__2271
1bd40     00 26 06 F6 | 	mov	local01, #0
1bd44     A7 12 02 FB | 	rdlong	arg01, fp
1bd48     0C 4E 05 F1 | 	add	fp, #12
1bd4c     A7 14 02 FB | 	rdlong	arg02, fp
1bd50     0C 4E 85 F1 | 	sub	fp, #12
1bd54     01 16 66 F6 | 	neg	arg03, #1
1bd58     64 B2 B0 FD | 	call	#__system___float_cmp
1bd5c     01 FA 55 F2 | 	cmps	result1, #1 wc
1bd60     00 26 26 36 |  if_ae	not	local01, #0
1bd64     A7 26 62 FC | 	wrlong	local01, fp
1bd68     CC 03 90 FD | 	jmp	#LR__2283
1bd6c                 | LR__2271
1bd6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1bd6c     08 4E 05 F1 | 	add	fp, #8
1bd70     A7 26 02 FB | 	rdlong	local01, fp
1bd74     08 4E 85 F1 | 	sub	fp, #8
1bd78     1E 26 0E F2 | 	cmp	local01, #30 wz
1bd7c     14 4E 05 A1 |  if_e	add	fp, #20
1bd80     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd84     14 4E 85 A1 |  if_e	sub	fp, #20
1bd88     16 2B 02 A6 |  if_e	mov	local03, local04
1bd8c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bd90     48 00 90 5D |  if_ne	jmp	#LR__2272
1bd94     00 26 06 F6 | 	mov	local01, #0
1bd98     A7 28 02 FB | 	rdlong	local02, fp
1bd9c     0C 4E 05 F1 | 	add	fp, #12
1bda0     A7 12 02 FB | 	rdlong	arg01, fp
1bda4     0C 4E 85 F1 | 	sub	fp, #12
1bda8     09 13 52 F6 | 	abs	arg01, arg01 wc
1bdac     1F 2E C6 C9 |  if_b	decod	local05, #31
1bdb0     00 2E 06 36 |  if_ae	mov	local05, #0
1bdb4     D0 A9 B0 FD | 	call	#__system___float_fromuns
1bdb8     17 FB 61 F5 | 	xor	result1, local05
1bdbc     FD 14 02 F6 | 	mov	arg02, result1
1bdc0     14 13 02 F6 | 	mov	arg01, local02
1bdc4     01 16 66 F6 | 	neg	arg03, #1
1bdc8     F4 B1 B0 FD | 	call	#__system___float_cmp
1bdcc     01 FA 55 F2 | 	cmps	result1, #1 wc
1bdd0     00 26 26 36 |  if_ae	not	local01, #0
1bdd4     A7 26 62 FC | 	wrlong	local01, fp
1bdd8     5C 03 90 FD | 	jmp	#LR__2283
1bddc                 | LR__2272
1bddc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1bddc     08 4E 05 F1 | 	add	fp, #8
1bde0     A7 26 02 FB | 	rdlong	local01, fp
1bde4     08 4E 85 F1 | 	sub	fp, #8
1bde8     1E 26 0E F2 | 	cmp	local01, #30 wz
1bdec     14 4E 05 A1 |  if_e	add	fp, #20
1bdf0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bdf4     14 4E 85 A1 |  if_e	sub	fp, #20
1bdf8     16 2B 02 A6 |  if_e	mov	local03, local04
1bdfc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1be00     38 00 90 5D |  if_ne	jmp	#LR__2273
1be04     00 26 06 F6 | 	mov	local01, #0
1be08     A7 28 02 FB | 	rdlong	local02, fp
1be0c     0C 4E 05 F1 | 	add	fp, #12
1be10     A7 12 02 FB | 	rdlong	arg01, fp
1be14     0C 4E 85 F1 | 	sub	fp, #12
1be18     6C A9 B0 FD | 	call	#__system___float_fromuns
1be1c     FD 14 02 F6 | 	mov	arg02, result1
1be20     14 13 02 F6 | 	mov	arg01, local02
1be24     01 16 66 F6 | 	neg	arg03, #1
1be28     94 B1 B0 FD | 	call	#__system___float_cmp
1be2c     01 FA 55 F2 | 	cmps	result1, #1 wc
1be30     00 26 26 36 |  if_ae	not	local01, #0
1be34     A7 26 62 FC | 	wrlong	local01, fp
1be38     FC 02 90 FD | 	jmp	#LR__2283
1be3c                 | LR__2273
1be3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1be3c     08 4E 05 F1 | 	add	fp, #8
1be40     A7 26 02 FB | 	rdlong	local01, fp
1be44     08 4E 85 F1 | 	sub	fp, #8
1be48     1C 26 0E F2 | 	cmp	local01, #28 wz
1be4c     14 4E 05 A1 |  if_e	add	fp, #20
1be50     A7 2C 02 AB |  if_e	rdlong	local04, fp
1be54     14 4E 85 A1 |  if_e	sub	fp, #20
1be58     16 2B 02 A6 |  if_e	mov	local03, local04
1be5c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1be60     44 00 90 5D |  if_ne	jmp	#LR__2274
1be64     00 26 06 F6 | 	mov	local01, #0
1be68     A7 12 02 FB | 	rdlong	arg01, fp
1be6c     09 13 52 F6 | 	abs	arg01, arg01 wc
1be70     1F 2E C6 C9 |  if_b	decod	local05, #31
1be74     00 2E 06 36 |  if_ae	mov	local05, #0
1be78     0C A9 B0 FD | 	call	#__system___float_fromuns
1be7c     17 FB 61 F5 | 	xor	result1, local05
1be80     FD 12 02 F6 | 	mov	arg01, result1
1be84     0C 4E 05 F1 | 	add	fp, #12
1be88     A7 14 02 FB | 	rdlong	arg02, fp
1be8c     0C 4E 85 F1 | 	sub	fp, #12
1be90     01 16 66 F6 | 	neg	arg03, #1
1be94     28 B1 B0 FD | 	call	#__system___float_cmp
1be98     01 FA 55 F2 | 	cmps	result1, #1 wc
1be9c     00 26 26 36 |  if_ae	not	local01, #0
1bea0     A7 26 62 FC | 	wrlong	local01, fp
1bea4     90 02 90 FD | 	jmp	#LR__2283
1bea8                 | LR__2274
1bea8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1bea8     08 4E 05 F1 | 	add	fp, #8
1beac     A7 26 02 FB | 	rdlong	local01, fp
1beb0     08 4E 85 F1 | 	sub	fp, #8
1beb4     1C 26 0E F2 | 	cmp	local01, #28 wz
1beb8     14 4E 05 A1 |  if_e	add	fp, #20
1bebc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bec0     14 4E 85 A1 |  if_e	sub	fp, #20
1bec4     16 2B 02 A6 |  if_e	mov	local03, local04
1bec8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1becc     24 00 90 5D |  if_ne	jmp	#LR__2275
1bed0     00 26 06 F6 | 	mov	local01, #0
1bed4     A7 28 02 FB | 	rdlong	local02, fp
1bed8     0C 4E 05 F1 | 	add	fp, #12
1bedc     A7 2A 02 FB | 	rdlong	local03, fp
1bee0     0C 4E 85 F1 | 	sub	fp, #12
1bee4     15 29 5A F2 | 	cmps	local02, local03 wcz
1bee8     01 26 66 16 |  if_a	neg	local01, #1
1beec     A7 26 62 FC | 	wrlong	local01, fp
1bef0     44 02 90 FD | 	jmp	#LR__2283
1bef4                 | LR__2275
1bef4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1bef4     08 4E 05 F1 | 	add	fp, #8
1bef8     A7 26 02 FB | 	rdlong	local01, fp
1befc     08 4E 85 F1 | 	sub	fp, #8
1bf00     1C 26 0E F2 | 	cmp	local01, #28 wz
1bf04     14 4E 05 A1 |  if_e	add	fp, #20
1bf08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf0c     14 4E 85 A1 |  if_e	sub	fp, #20
1bf10     16 2B 02 A6 |  if_e	mov	local03, local04
1bf14     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bf18     24 00 90 5D |  if_ne	jmp	#LR__2276
1bf1c     00 26 06 F6 | 	mov	local01, #0
1bf20     A7 28 02 FB | 	rdlong	local02, fp
1bf24     0C 4E 05 F1 | 	add	fp, #12
1bf28     A7 2A 02 FB | 	rdlong	local03, fp
1bf2c     0C 4E 85 F1 | 	sub	fp, #12
1bf30     15 29 5A F2 | 	cmps	local02, local03 wcz
1bf34     01 26 66 16 |  if_a	neg	local01, #1
1bf38     A7 26 62 FC | 	wrlong	local01, fp
1bf3c     F8 01 90 FD | 	jmp	#LR__2283
1bf40                 | LR__2276
1bf40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1bf40     08 4E 05 F1 | 	add	fp, #8
1bf44     A7 26 02 FB | 	rdlong	local01, fp
1bf48     08 4E 85 F1 | 	sub	fp, #8
1bf4c     1D 26 0E F2 | 	cmp	local01, #29 wz
1bf50     14 4E 05 A1 |  if_e	add	fp, #20
1bf54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf58     14 4E 85 A1 |  if_e	sub	fp, #20
1bf5c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1bf60     34 00 90 5D |  if_ne	jmp	#LR__2277
1bf64     00 26 06 F6 | 	mov	local01, #0
1bf68     A7 12 02 FB | 	rdlong	arg01, fp
1bf6c     18 A8 B0 FD | 	call	#__system___float_fromuns
1bf70     FD 12 02 F6 | 	mov	arg01, result1
1bf74     0C 4E 05 F1 | 	add	fp, #12
1bf78     A7 14 02 FB | 	rdlong	arg02, fp
1bf7c     0C 4E 85 F1 | 	sub	fp, #12
1bf80     01 16 66 F6 | 	neg	arg03, #1
1bf84     38 B0 B0 FD | 	call	#__system___float_cmp
1bf88     01 FA 55 F2 | 	cmps	result1, #1 wc
1bf8c     00 26 26 36 |  if_ae	not	local01, #0
1bf90     A7 26 62 FC | 	wrlong	local01, fp
1bf94     A0 01 90 FD | 	jmp	#LR__2283
1bf98                 | LR__2277
1bf98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1bf98     08 4E 05 F1 | 	add	fp, #8
1bf9c     A7 26 02 FB | 	rdlong	local01, fp
1bfa0     08 4E 85 F1 | 	sub	fp, #8
1bfa4     1D 26 0E F2 | 	cmp	local01, #29 wz
1bfa8     14 4E 05 A1 |  if_e	add	fp, #20
1bfac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bfb0     14 4E 85 A1 |  if_e	sub	fp, #20
1bfb4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bfb8     24 00 90 5D |  if_ne	jmp	#LR__2278
1bfbc     00 26 06 F6 | 	mov	local01, #0
1bfc0     A7 28 02 FB | 	rdlong	local02, fp
1bfc4     0C 4E 05 F1 | 	add	fp, #12
1bfc8     A7 2A 02 FB | 	rdlong	local03, fp
1bfcc     0C 4E 85 F1 | 	sub	fp, #12
1bfd0     15 29 5A F2 | 	cmps	local02, local03 wcz
1bfd4     01 26 66 16 |  if_a	neg	local01, #1
1bfd8     A7 26 62 FC | 	wrlong	local01, fp
1bfdc     58 01 90 FD | 	jmp	#LR__2283
1bfe0                 | LR__2278
1bfe0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1bfe0     08 4E 05 F1 | 	add	fp, #8
1bfe4     A7 26 02 FB | 	rdlong	local01, fp
1bfe8     08 4E 85 F1 | 	sub	fp, #8
1bfec     1D 26 0E F2 | 	cmp	local01, #29 wz
1bff0     14 4E 05 A1 |  if_e	add	fp, #20
1bff4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bff8     14 4E 85 A1 |  if_e	sub	fp, #20
1bffc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c000     24 00 90 5D |  if_ne	jmp	#LR__2279
1c004     00 26 06 F6 | 	mov	local01, #0
1c008     A7 28 02 FB | 	rdlong	local02, fp
1c00c     0C 4E 05 F1 | 	add	fp, #12
1c010     A7 2A 02 FB | 	rdlong	local03, fp
1c014     0C 4E 85 F1 | 	sub	fp, #12
1c018     15 29 1A F2 | 	cmp	local02, local03 wcz
1c01c     01 26 66 16 |  if_a	neg	local01, #1
1c020     A7 26 62 FC | 	wrlong	local01, fp
1c024     10 01 90 FD | 	jmp	#LR__2283
1c028                 | LR__2279
1c028                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1c028     08 4E 05 F1 | 	add	fp, #8
1c02c     A7 26 02 FB | 	rdlong	local01, fp
1c030     08 4E 85 F1 | 	sub	fp, #8
1c034     2B 26 0E F2 | 	cmp	local01, #43 wz
1c038     14 4E 05 A1 |  if_e	add	fp, #20
1c03c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c040     14 4E 85 A1 |  if_e	sub	fp, #20
1c044     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c048     30 00 90 5D |  if_ne	jmp	#LR__2280
1c04c     00 26 06 F6 | 	mov	local01, #0
1c050     A7 12 02 FB | 	rdlong	arg01, fp
1c054     38 0B BF FD | 	call	#_convertstring
1c058     FD 12 02 F6 | 	mov	arg01, result1
1c05c     0C 4E 05 F1 | 	add	fp, #12
1c060     A7 14 02 FB | 	rdlong	arg02, fp
1c064     0C 4E 85 F1 | 	sub	fp, #12
1c068     D0 7C B0 FD | 	call	#__system___string_cmp
1c06c     01 FA 55 F2 | 	cmps	result1, #1 wc
1c070     00 26 26 36 |  if_ae	not	local01, #0
1c074     A7 26 62 FC | 	wrlong	local01, fp
1c078     BC 00 90 FD | 	jmp	#LR__2283
1c07c                 | LR__2280
1c07c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1c07c     08 4E 05 F1 | 	add	fp, #8
1c080     A7 26 02 FB | 	rdlong	local01, fp
1c084     08 4E 85 F1 | 	sub	fp, #8
1c088     1F 26 0E F2 | 	cmp	local01, #31 wz
1c08c     14 4E 05 A1 |  if_e	add	fp, #20
1c090     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c094     14 4E 85 A1 |  if_e	sub	fp, #20
1c098     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c09c     34 00 90 5D |  if_ne	jmp	#LR__2281
1c0a0     00 26 06 F6 | 	mov	local01, #0
1c0a4     A7 28 02 FB | 	rdlong	local02, fp
1c0a8     0C 4E 05 F1 | 	add	fp, #12
1c0ac     A7 12 02 FB | 	rdlong	arg01, fp
1c0b0     0C 4E 85 F1 | 	sub	fp, #12
1c0b4     D8 0A BF FD | 	call	#_convertstring
1c0b8     FD 14 02 F6 | 	mov	arg02, result1
1c0bc     14 13 02 F6 | 	mov	arg01, local02
1c0c0     78 7C B0 FD | 	call	#__system___string_cmp
1c0c4     01 FA 55 F2 | 	cmps	result1, #1 wc
1c0c8     00 26 26 36 |  if_ae	not	local01, #0
1c0cc     A7 26 62 FC | 	wrlong	local01, fp
1c0d0     64 00 90 FD | 	jmp	#LR__2283
1c0d4                 | LR__2281
1c0d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1c0d4     08 4E 05 F1 | 	add	fp, #8
1c0d8     A7 26 02 FB | 	rdlong	local01, fp
1c0dc     08 4E 85 F1 | 	sub	fp, #8
1c0e0     2B 26 0E F2 | 	cmp	local01, #43 wz
1c0e4     14 4E 05 A1 |  if_e	add	fp, #20
1c0e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c0ec     14 4E 85 A1 |  if_e	sub	fp, #20
1c0f0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c0f4     3C 00 90 5D |  if_ne	jmp	#LR__2282
1c0f8     00 26 06 F6 | 	mov	local01, #0
1c0fc     A7 12 02 FB | 	rdlong	arg01, fp
1c100     8C 0A BF FD | 	call	#_convertstring
1c104     FD 28 02 F6 | 	mov	local02, result1
1c108     0C 4E 05 F1 | 	add	fp, #12
1c10c     A7 12 02 FB | 	rdlong	arg01, fp
1c110     0C 4E 85 F1 | 	sub	fp, #12
1c114     78 0A BF FD | 	call	#_convertstring
1c118     FD 14 02 F6 | 	mov	arg02, result1
1c11c     14 13 02 F6 | 	mov	arg01, local02
1c120     18 7C B0 FD | 	call	#__system___string_cmp
1c124     01 FA 55 F2 | 	cmps	result1, #1 wc
1c128     00 26 26 36 |  if_ae	not	local01, #0
1c12c     A7 26 62 FC | 	wrlong	local01, fp
1c130     04 00 90 FD | 	jmp	#LR__2283
1c134                 | LR__2282
1c134     A7 00 68 FC | 	wrlong	#0, fp
1c138                 | LR__2283
1c138     08 4E 05 F1 | 	add	fp, #8
1c13c     A7 38 68 FC | 	wrlong	#28, fp
1c140     08 4E 85 F1 | 	sub	fp, #8
1c144                 | ' t1.result.uresult=0
1c144                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c144     A7 26 0A FB | 	rdlong	local01, fp wz
1c148     A7 02 68 5C |  if_ne	wrlong	#1, fp
1c14c     A7 12 02 F6 | 	mov	arg01, fp
1c150     5C 09 BF FD | 	call	#_push
1c154     A7 F0 03 F6 | 	mov	ptra, fp
1c158     B2 00 A0 FD | 	call	#popregs_
1c15c                 | _do_gt_ret
1c15c     2D 00 64 FD | 	ret
1c160                 | 
1c160                 | ' 
1c160                 | ' '--------------------------------- less or equal (<=)
1c160                 | ' 
1c160                 | ' sub do_le
1c160                 | _do_le
1c160     05 4A 05 F6 | 	mov	COUNT_, #5
1c164     A8 00 A0 FD | 	call	#pushregs_
1c168     18 F0 07 F1 | 	add	ptra, #24
1c16c     A8 08 BF FD | 	call	#_pop
1c170     FD 26 02 F6 | 	mov	local01, result1
1c174     FE 28 02 F6 | 	mov	local02, result2
1c178     FF 2A 02 F6 | 	mov	local03, result3
1c17c     0C 4E 05 F1 | 	add	fp, #12
1c180     A7 26 62 FC | 	wrlong	local01, fp
1c184     04 4E 05 F1 | 	add	fp, #4
1c188     A7 28 62 FC | 	wrlong	local02, fp
1c18c     04 4E 05 F1 | 	add	fp, #4
1c190     A7 2A 62 FC | 	wrlong	local03, fp
1c194     14 4E 85 F1 | 	sub	fp, #20
1c198     7C 08 BF FD | 	call	#_pop
1c19c     FF 2A 02 F6 | 	mov	local03, result3
1c1a0     A7 FA 61 FC | 	wrlong	result1, fp
1c1a4     04 4E 05 F1 | 	add	fp, #4
1c1a8     A7 FC 61 FC | 	wrlong	result2, fp
1c1ac     04 4E 05 F1 | 	add	fp, #4
1c1b0     A7 2A 62 FC | 	wrlong	local03, fp
1c1b4                 | ' 
1c1b4                 | ' t2=pop()
1c1b4                 | ' t1=pop()
1c1b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1c1b4     08 4E 85 F1 | 	sub	fp, #8
1c1b8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c1bc     14 4E 05 A1 |  if_e	add	fp, #20
1c1c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c1c4     14 4E 85 A1 |  if_e	sub	fp, #20
1c1c8     16 2B 02 A6 |  if_e	mov	local03, local04
1c1cc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c1d0     28 00 90 5D |  if_ne	jmp	#LR__2290
1c1d4     00 26 06 F6 | 	mov	local01, #0
1c1d8     A7 12 02 FB | 	rdlong	arg01, fp
1c1dc     0C 4E 05 F1 | 	add	fp, #12
1c1e0     A7 14 02 FB | 	rdlong	arg02, fp
1c1e4     0C 4E 85 F1 | 	sub	fp, #12
1c1e8     50 7B B0 FD | 	call	#__system___string_cmp
1c1ec     01 FA 55 F2 | 	cmps	result1, #1 wc
1c1f0     00 26 26 C6 |  if_b	not	local01, #0
1c1f4     A7 26 62 FC | 	wrlong	local01, fp
1c1f8     20 04 90 FD | 	jmp	#LR__2303
1c1fc                 | LR__2290
1c1fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1c1fc     08 4E 05 F1 | 	add	fp, #8
1c200     A7 26 02 FB | 	rdlong	local01, fp
1c204     08 4E 85 F1 | 	sub	fp, #8
1c208     1E 26 0E F2 | 	cmp	local01, #30 wz
1c20c     14 4E 05 A1 |  if_e	add	fp, #20
1c210     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c214     14 4E 85 A1 |  if_e	sub	fp, #20
1c218     16 2B 02 A6 |  if_e	mov	local03, local04
1c21c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c220     2C 00 90 5D |  if_ne	jmp	#LR__2291
1c224     00 26 06 F6 | 	mov	local01, #0
1c228     A7 12 02 FB | 	rdlong	arg01, fp
1c22c     0C 4E 05 F1 | 	add	fp, #12
1c230     A7 14 02 FB | 	rdlong	arg02, fp
1c234     0C 4E 85 F1 | 	sub	fp, #12
1c238     01 16 06 F6 | 	mov	arg03, #1
1c23c     80 AD B0 FD | 	call	#__system___float_cmp
1c240     01 FA 55 F2 | 	cmps	result1, #1 wc
1c244     00 26 26 C6 |  if_b	not	local01, #0
1c248     A7 26 62 FC | 	wrlong	local01, fp
1c24c     CC 03 90 FD | 	jmp	#LR__2303
1c250                 | LR__2291
1c250                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1c250     08 4E 05 F1 | 	add	fp, #8
1c254     A7 26 02 FB | 	rdlong	local01, fp
1c258     08 4E 85 F1 | 	sub	fp, #8
1c25c     1E 26 0E F2 | 	cmp	local01, #30 wz
1c260     14 4E 05 A1 |  if_e	add	fp, #20
1c264     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c268     14 4E 85 A1 |  if_e	sub	fp, #20
1c26c     16 2B 02 A6 |  if_e	mov	local03, local04
1c270     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c274     48 00 90 5D |  if_ne	jmp	#LR__2292
1c278     00 26 06 F6 | 	mov	local01, #0
1c27c     A7 28 02 FB | 	rdlong	local02, fp
1c280     0C 4E 05 F1 | 	add	fp, #12
1c284     A7 12 02 FB | 	rdlong	arg01, fp
1c288     0C 4E 85 F1 | 	sub	fp, #12
1c28c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c290     1F 2E C6 C9 |  if_b	decod	local05, #31
1c294     00 2E 06 36 |  if_ae	mov	local05, #0
1c298     EC A4 B0 FD | 	call	#__system___float_fromuns
1c29c     17 FB 61 F5 | 	xor	result1, local05
1c2a0     FD 14 02 F6 | 	mov	arg02, result1
1c2a4     14 13 02 F6 | 	mov	arg01, local02
1c2a8     01 16 06 F6 | 	mov	arg03, #1
1c2ac     10 AD B0 FD | 	call	#__system___float_cmp
1c2b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1c2b4     00 26 26 C6 |  if_b	not	local01, #0
1c2b8     A7 26 62 FC | 	wrlong	local01, fp
1c2bc     5C 03 90 FD | 	jmp	#LR__2303
1c2c0                 | LR__2292
1c2c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1c2c0     08 4E 05 F1 | 	add	fp, #8
1c2c4     A7 26 02 FB | 	rdlong	local01, fp
1c2c8     08 4E 85 F1 | 	sub	fp, #8
1c2cc     1E 26 0E F2 | 	cmp	local01, #30 wz
1c2d0     14 4E 05 A1 |  if_e	add	fp, #20
1c2d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c2d8     14 4E 85 A1 |  if_e	sub	fp, #20
1c2dc     16 2B 02 A6 |  if_e	mov	local03, local04
1c2e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c2e4     38 00 90 5D |  if_ne	jmp	#LR__2293
1c2e8     00 26 06 F6 | 	mov	local01, #0
1c2ec     A7 28 02 FB | 	rdlong	local02, fp
1c2f0     0C 4E 05 F1 | 	add	fp, #12
1c2f4     A7 12 02 FB | 	rdlong	arg01, fp
1c2f8     0C 4E 85 F1 | 	sub	fp, #12
1c2fc     88 A4 B0 FD | 	call	#__system___float_fromuns
1c300     FD 14 02 F6 | 	mov	arg02, result1
1c304     14 13 02 F6 | 	mov	arg01, local02
1c308     01 16 06 F6 | 	mov	arg03, #1
1c30c     B0 AC B0 FD | 	call	#__system___float_cmp
1c310     01 FA 55 F2 | 	cmps	result1, #1 wc
1c314     00 26 26 C6 |  if_b	not	local01, #0
1c318     A7 26 62 FC | 	wrlong	local01, fp
1c31c     FC 02 90 FD | 	jmp	#LR__2303
1c320                 | LR__2293
1c320                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1c320     08 4E 05 F1 | 	add	fp, #8
1c324     A7 26 02 FB | 	rdlong	local01, fp
1c328     08 4E 85 F1 | 	sub	fp, #8
1c32c     1C 26 0E F2 | 	cmp	local01, #28 wz
1c330     14 4E 05 A1 |  if_e	add	fp, #20
1c334     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c338     14 4E 85 A1 |  if_e	sub	fp, #20
1c33c     16 2B 02 A6 |  if_e	mov	local03, local04
1c340     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c344     44 00 90 5D |  if_ne	jmp	#LR__2294
1c348     00 26 06 F6 | 	mov	local01, #0
1c34c     A7 12 02 FB | 	rdlong	arg01, fp
1c350     09 13 52 F6 | 	abs	arg01, arg01 wc
1c354     1F 2E C6 C9 |  if_b	decod	local05, #31
1c358     00 2E 06 36 |  if_ae	mov	local05, #0
1c35c     28 A4 B0 FD | 	call	#__system___float_fromuns
1c360     17 FB 61 F5 | 	xor	result1, local05
1c364     FD 12 02 F6 | 	mov	arg01, result1
1c368     0C 4E 05 F1 | 	add	fp, #12
1c36c     A7 14 02 FB | 	rdlong	arg02, fp
1c370     0C 4E 85 F1 | 	sub	fp, #12
1c374     01 16 06 F6 | 	mov	arg03, #1
1c378     44 AC B0 FD | 	call	#__system___float_cmp
1c37c     01 FA 55 F2 | 	cmps	result1, #1 wc
1c380     00 26 26 C6 |  if_b	not	local01, #0
1c384     A7 26 62 FC | 	wrlong	local01, fp
1c388     90 02 90 FD | 	jmp	#LR__2303
1c38c                 | LR__2294
1c38c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1c38c     08 4E 05 F1 | 	add	fp, #8
1c390     A7 26 02 FB | 	rdlong	local01, fp
1c394     08 4E 85 F1 | 	sub	fp, #8
1c398     1C 26 0E F2 | 	cmp	local01, #28 wz
1c39c     14 4E 05 A1 |  if_e	add	fp, #20
1c3a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3a4     14 4E 85 A1 |  if_e	sub	fp, #20
1c3a8     16 2B 02 A6 |  if_e	mov	local03, local04
1c3ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c3b0     24 00 90 5D |  if_ne	jmp	#LR__2295
1c3b4     00 26 06 F6 | 	mov	local01, #0
1c3b8     A7 28 02 FB | 	rdlong	local02, fp
1c3bc     0C 4E 05 F1 | 	add	fp, #12
1c3c0     A7 2A 02 FB | 	rdlong	local03, fp
1c3c4     0C 4E 85 F1 | 	sub	fp, #12
1c3c8     15 29 5A F2 | 	cmps	local02, local03 wcz
1c3cc     01 26 66 E6 |  if_be	neg	local01, #1
1c3d0     A7 26 62 FC | 	wrlong	local01, fp
1c3d4     44 02 90 FD | 	jmp	#LR__2303
1c3d8                 | LR__2295
1c3d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1c3d8     08 4E 05 F1 | 	add	fp, #8
1c3dc     A7 26 02 FB | 	rdlong	local01, fp
1c3e0     08 4E 85 F1 | 	sub	fp, #8
1c3e4     1C 26 0E F2 | 	cmp	local01, #28 wz
1c3e8     14 4E 05 A1 |  if_e	add	fp, #20
1c3ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3f0     14 4E 85 A1 |  if_e	sub	fp, #20
1c3f4     16 2B 02 A6 |  if_e	mov	local03, local04
1c3f8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c3fc     24 00 90 5D |  if_ne	jmp	#LR__2296
1c400     00 26 06 F6 | 	mov	local01, #0
1c404     A7 28 02 FB | 	rdlong	local02, fp
1c408     0C 4E 05 F1 | 	add	fp, #12
1c40c     A7 2A 02 FB | 	rdlong	local03, fp
1c410     0C 4E 85 F1 | 	sub	fp, #12
1c414     15 29 5A F2 | 	cmps	local02, local03 wcz
1c418     01 26 66 E6 |  if_be	neg	local01, #1
1c41c     A7 26 62 FC | 	wrlong	local01, fp
1c420     F8 01 90 FD | 	jmp	#LR__2303
1c424                 | LR__2296
1c424                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1c424     08 4E 05 F1 | 	add	fp, #8
1c428     A7 26 02 FB | 	rdlong	local01, fp
1c42c     08 4E 85 F1 | 	sub	fp, #8
1c430     1D 26 0E F2 | 	cmp	local01, #29 wz
1c434     14 4E 05 A1 |  if_e	add	fp, #20
1c438     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c43c     14 4E 85 A1 |  if_e	sub	fp, #20
1c440     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c444     34 00 90 5D |  if_ne	jmp	#LR__2297
1c448     00 26 06 F6 | 	mov	local01, #0
1c44c     A7 12 02 FB | 	rdlong	arg01, fp
1c450     34 A3 B0 FD | 	call	#__system___float_fromuns
1c454     FD 12 02 F6 | 	mov	arg01, result1
1c458     0C 4E 05 F1 | 	add	fp, #12
1c45c     A7 14 02 FB | 	rdlong	arg02, fp
1c460     0C 4E 85 F1 | 	sub	fp, #12
1c464     01 16 06 F6 | 	mov	arg03, #1
1c468     54 AB B0 FD | 	call	#__system___float_cmp
1c46c     01 FA 55 F2 | 	cmps	result1, #1 wc
1c470     00 26 26 C6 |  if_b	not	local01, #0
1c474     A7 26 62 FC | 	wrlong	local01, fp
1c478     A0 01 90 FD | 	jmp	#LR__2303
1c47c                 | LR__2297
1c47c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1c47c     08 4E 05 F1 | 	add	fp, #8
1c480     A7 26 02 FB | 	rdlong	local01, fp
1c484     08 4E 85 F1 | 	sub	fp, #8
1c488     1D 26 0E F2 | 	cmp	local01, #29 wz
1c48c     14 4E 05 A1 |  if_e	add	fp, #20
1c490     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c494     14 4E 85 A1 |  if_e	sub	fp, #20
1c498     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c49c     24 00 90 5D |  if_ne	jmp	#LR__2298
1c4a0     00 26 06 F6 | 	mov	local01, #0
1c4a4     A7 28 02 FB | 	rdlong	local02, fp
1c4a8     0C 4E 05 F1 | 	add	fp, #12
1c4ac     A7 2A 02 FB | 	rdlong	local03, fp
1c4b0     0C 4E 85 F1 | 	sub	fp, #12
1c4b4     15 29 5A F2 | 	cmps	local02, local03 wcz
1c4b8     01 26 66 E6 |  if_be	neg	local01, #1
1c4bc     A7 26 62 FC | 	wrlong	local01, fp
1c4c0     58 01 90 FD | 	jmp	#LR__2303
1c4c4                 | LR__2298
1c4c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1c4c4     08 4E 05 F1 | 	add	fp, #8
1c4c8     A7 26 02 FB | 	rdlong	local01, fp
1c4cc     08 4E 85 F1 | 	sub	fp, #8
1c4d0     1D 26 0E F2 | 	cmp	local01, #29 wz
1c4d4     14 4E 05 A1 |  if_e	add	fp, #20
1c4d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c4dc     14 4E 85 A1 |  if_e	sub	fp, #20
1c4e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c4e4     24 00 90 5D |  if_ne	jmp	#LR__2299
1c4e8     00 26 06 F6 | 	mov	local01, #0
1c4ec     A7 28 02 FB | 	rdlong	local02, fp
1c4f0     0C 4E 05 F1 | 	add	fp, #12
1c4f4     A7 2A 02 FB | 	rdlong	local03, fp
1c4f8     0C 4E 85 F1 | 	sub	fp, #12
1c4fc     15 29 1A F2 | 	cmp	local02, local03 wcz
1c500     01 26 66 E6 |  if_be	neg	local01, #1
1c504     A7 26 62 FC | 	wrlong	local01, fp
1c508     10 01 90 FD | 	jmp	#LR__2303
1c50c                 | LR__2299
1c50c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1c50c     08 4E 05 F1 | 	add	fp, #8
1c510     A7 26 02 FB | 	rdlong	local01, fp
1c514     08 4E 85 F1 | 	sub	fp, #8
1c518     2B 26 0E F2 | 	cmp	local01, #43 wz
1c51c     14 4E 05 A1 |  if_e	add	fp, #20
1c520     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c524     14 4E 85 A1 |  if_e	sub	fp, #20
1c528     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c52c     30 00 90 5D |  if_ne	jmp	#LR__2300
1c530     00 26 06 F6 | 	mov	local01, #0
1c534     A7 12 02 FB | 	rdlong	arg01, fp
1c538     54 06 BF FD | 	call	#_convertstring
1c53c     FD 12 02 F6 | 	mov	arg01, result1
1c540     0C 4E 05 F1 | 	add	fp, #12
1c544     A7 14 02 FB | 	rdlong	arg02, fp
1c548     0C 4E 85 F1 | 	sub	fp, #12
1c54c     EC 77 B0 FD | 	call	#__system___string_cmp
1c550     01 FA 55 F2 | 	cmps	result1, #1 wc
1c554     00 26 26 C6 |  if_b	not	local01, #0
1c558     A7 26 62 FC | 	wrlong	local01, fp
1c55c     BC 00 90 FD | 	jmp	#LR__2303
1c560                 | LR__2300
1c560                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1c560     08 4E 05 F1 | 	add	fp, #8
1c564     A7 26 02 FB | 	rdlong	local01, fp
1c568     08 4E 85 F1 | 	sub	fp, #8
1c56c     1F 26 0E F2 | 	cmp	local01, #31 wz
1c570     14 4E 05 A1 |  if_e	add	fp, #20
1c574     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c578     14 4E 85 A1 |  if_e	sub	fp, #20
1c57c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c580     34 00 90 5D |  if_ne	jmp	#LR__2301
1c584     00 26 06 F6 | 	mov	local01, #0
1c588     A7 28 02 FB | 	rdlong	local02, fp
1c58c     0C 4E 05 F1 | 	add	fp, #12
1c590     A7 12 02 FB | 	rdlong	arg01, fp
1c594     0C 4E 85 F1 | 	sub	fp, #12
1c598     F4 05 BF FD | 	call	#_convertstring
1c59c     FD 14 02 F6 | 	mov	arg02, result1
1c5a0     14 13 02 F6 | 	mov	arg01, local02
1c5a4     94 77 B0 FD | 	call	#__system___string_cmp
1c5a8     01 FA 55 F2 | 	cmps	result1, #1 wc
1c5ac     00 26 26 C6 |  if_b	not	local01, #0
1c5b0     A7 26 62 FC | 	wrlong	local01, fp
1c5b4     64 00 90 FD | 	jmp	#LR__2303
1c5b8                 | LR__2301
1c5b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1c5b8     08 4E 05 F1 | 	add	fp, #8
1c5bc     A7 26 02 FB | 	rdlong	local01, fp
1c5c0     08 4E 85 F1 | 	sub	fp, #8
1c5c4     2B 26 0E F2 | 	cmp	local01, #43 wz
1c5c8     14 4E 05 A1 |  if_e	add	fp, #20
1c5cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c5d0     14 4E 85 A1 |  if_e	sub	fp, #20
1c5d4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c5d8     3C 00 90 5D |  if_ne	jmp	#LR__2302
1c5dc     00 26 06 F6 | 	mov	local01, #0
1c5e0     A7 12 02 FB | 	rdlong	arg01, fp
1c5e4     A8 05 BF FD | 	call	#_convertstring
1c5e8     FD 28 02 F6 | 	mov	local02, result1
1c5ec     0C 4E 05 F1 | 	add	fp, #12
1c5f0     A7 12 02 FB | 	rdlong	arg01, fp
1c5f4     0C 4E 85 F1 | 	sub	fp, #12
1c5f8     94 05 BF FD | 	call	#_convertstring
1c5fc     FD 14 02 F6 | 	mov	arg02, result1
1c600     14 13 02 F6 | 	mov	arg01, local02
1c604     34 77 B0 FD | 	call	#__system___string_cmp
1c608     01 FA 55 F2 | 	cmps	result1, #1 wc
1c60c     00 26 26 C6 |  if_b	not	local01, #0
1c610     A7 26 62 FC | 	wrlong	local01, fp
1c614     04 00 90 FD | 	jmp	#LR__2303
1c618                 | LR__2302
1c618     A7 00 68 FC | 	wrlong	#0, fp
1c61c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c61c                 | LR__2303
1c61c     08 4E 05 F1 | 	add	fp, #8
1c620     A7 38 68 FC | 	wrlong	#28, fp
1c624     08 4E 85 F1 | 	sub	fp, #8
1c628     A7 12 02 F6 | 	mov	arg01, fp
1c62c     80 04 BF FD | 	call	#_push
1c630     A7 F0 03 F6 | 	mov	ptra, fp
1c634     B2 00 A0 FD | 	call	#popregs_
1c638                 | _do_le_ret
1c638     2D 00 64 FD | 	ret
1c63c                 | 
1c63c                 | ' 
1c63c                 | ' '--------------------------------- less than (<)
1c63c                 | ' 
1c63c                 | ' sub do_lt
1c63c                 | _do_lt
1c63c     05 4A 05 F6 | 	mov	COUNT_, #5
1c640     A8 00 A0 FD | 	call	#pushregs_
1c644     18 F0 07 F1 | 	add	ptra, #24
1c648     CC 03 BF FD | 	call	#_pop
1c64c     FD 26 02 F6 | 	mov	local01, result1
1c650     FE 28 02 F6 | 	mov	local02, result2
1c654     FF 2A 02 F6 | 	mov	local03, result3
1c658     0C 4E 05 F1 | 	add	fp, #12
1c65c     A7 26 62 FC | 	wrlong	local01, fp
1c660     04 4E 05 F1 | 	add	fp, #4
1c664     A7 28 62 FC | 	wrlong	local02, fp
1c668     04 4E 05 F1 | 	add	fp, #4
1c66c     A7 2A 62 FC | 	wrlong	local03, fp
1c670     14 4E 85 F1 | 	sub	fp, #20
1c674     A0 03 BF FD | 	call	#_pop
1c678     FF 2A 02 F6 | 	mov	local03, result3
1c67c     A7 FA 61 FC | 	wrlong	result1, fp
1c680     04 4E 05 F1 | 	add	fp, #4
1c684     A7 FC 61 FC | 	wrlong	result2, fp
1c688     04 4E 05 F1 | 	add	fp, #4
1c68c     A7 2A 62 FC | 	wrlong	local03, fp
1c690                 | ' 
1c690                 | ' t2=pop()
1c690                 | ' t1=pop()
1c690                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1c690     08 4E 85 F1 | 	sub	fp, #8
1c694     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c698     14 4E 05 A1 |  if_e	add	fp, #20
1c69c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c6a0     14 4E 85 A1 |  if_e	sub	fp, #20
1c6a4     16 2B 02 A6 |  if_e	mov	local03, local04
1c6a8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c6ac     28 00 90 5D |  if_ne	jmp	#LR__2310
1c6b0     00 26 06 F6 | 	mov	local01, #0
1c6b4     A7 12 02 FB | 	rdlong	arg01, fp
1c6b8     0C 4E 05 F1 | 	add	fp, #12
1c6bc     A7 14 02 FB | 	rdlong	arg02, fp
1c6c0     0C 4E 85 F1 | 	sub	fp, #12
1c6c4     74 76 B0 FD | 	call	#__system___string_cmp
1c6c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c6cc     00 26 26 C6 |  if_b	not	local01, #0
1c6d0     A7 26 62 FC | 	wrlong	local01, fp
1c6d4     10 04 90 FD | 	jmp	#LR__2323
1c6d8                 | LR__2310
1c6d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1c6d8     08 4E 05 F1 | 	add	fp, #8
1c6dc     A7 26 02 FB | 	rdlong	local01, fp
1c6e0     08 4E 85 F1 | 	sub	fp, #8
1c6e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1c6e8     14 4E 05 A1 |  if_e	add	fp, #20
1c6ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c6f0     14 4E 85 A1 |  if_e	sub	fp, #20
1c6f4     16 2B 02 A6 |  if_e	mov	local03, local04
1c6f8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c6fc     2C 00 90 5D |  if_ne	jmp	#LR__2311
1c700     00 26 06 F6 | 	mov	local01, #0
1c704     A7 12 02 FB | 	rdlong	arg01, fp
1c708     0C 4E 05 F1 | 	add	fp, #12
1c70c     A7 14 02 FB | 	rdlong	arg02, fp
1c710     0C 4E 85 F1 | 	sub	fp, #12
1c714     01 16 06 F6 | 	mov	arg03, #1
1c718     A4 A8 B0 FD | 	call	#__system___float_cmp
1c71c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c720     00 26 26 C6 |  if_b	not	local01, #0
1c724     A7 26 62 FC | 	wrlong	local01, fp
1c728     BC 03 90 FD | 	jmp	#LR__2323
1c72c                 | LR__2311
1c72c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1c72c     08 4E 05 F1 | 	add	fp, #8
1c730     A7 26 02 FB | 	rdlong	local01, fp
1c734     08 4E 85 F1 | 	sub	fp, #8
1c738     1E 26 0E F2 | 	cmp	local01, #30 wz
1c73c     14 4E 05 A1 |  if_e	add	fp, #20
1c740     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c744     14 4E 85 A1 |  if_e	sub	fp, #20
1c748     16 2B 02 A6 |  if_e	mov	local03, local04
1c74c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c750     48 00 90 5D |  if_ne	jmp	#LR__2312
1c754     00 26 06 F6 | 	mov	local01, #0
1c758     A7 28 02 FB | 	rdlong	local02, fp
1c75c     0C 4E 05 F1 | 	add	fp, #12
1c760     A7 12 02 FB | 	rdlong	arg01, fp
1c764     0C 4E 85 F1 | 	sub	fp, #12
1c768     09 13 52 F6 | 	abs	arg01, arg01 wc
1c76c     1F 2E C6 C9 |  if_b	decod	local05, #31
1c770     00 2E 06 36 |  if_ae	mov	local05, #0
1c774     10 A0 B0 FD | 	call	#__system___float_fromuns
1c778     17 FB 61 F5 | 	xor	result1, local05
1c77c     FD 14 02 F6 | 	mov	arg02, result1
1c780     14 13 02 F6 | 	mov	arg01, local02
1c784     01 16 06 F6 | 	mov	arg03, #1
1c788     34 A8 B0 FD | 	call	#__system___float_cmp
1c78c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c790     00 26 26 C6 |  if_b	not	local01, #0
1c794     A7 26 62 FC | 	wrlong	local01, fp
1c798     4C 03 90 FD | 	jmp	#LR__2323
1c79c                 | LR__2312
1c79c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1c79c     08 4E 05 F1 | 	add	fp, #8
1c7a0     A7 26 02 FB | 	rdlong	local01, fp
1c7a4     08 4E 85 F1 | 	sub	fp, #8
1c7a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1c7ac     14 4E 05 A1 |  if_e	add	fp, #20
1c7b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c7b4     14 4E 85 A1 |  if_e	sub	fp, #20
1c7b8     16 2B 02 A6 |  if_e	mov	local03, local04
1c7bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c7c0     38 00 90 5D |  if_ne	jmp	#LR__2313
1c7c4     00 26 06 F6 | 	mov	local01, #0
1c7c8     A7 28 02 FB | 	rdlong	local02, fp
1c7cc     0C 4E 05 F1 | 	add	fp, #12
1c7d0     A7 12 02 FB | 	rdlong	arg01, fp
1c7d4     0C 4E 85 F1 | 	sub	fp, #12
1c7d8     AC 9F B0 FD | 	call	#__system___float_fromuns
1c7dc     FD 14 02 F6 | 	mov	arg02, result1
1c7e0     14 13 02 F6 | 	mov	arg01, local02
1c7e4     01 16 06 F6 | 	mov	arg03, #1
1c7e8     D4 A7 B0 FD | 	call	#__system___float_cmp
1c7ec     00 FA 55 F2 | 	cmps	result1, #0 wc
1c7f0     00 26 26 C6 |  if_b	not	local01, #0
1c7f4     A7 26 62 FC | 	wrlong	local01, fp
1c7f8     EC 02 90 FD | 	jmp	#LR__2323
1c7fc                 | LR__2313
1c7fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1c7fc     08 4E 05 F1 | 	add	fp, #8
1c800     A7 26 02 FB | 	rdlong	local01, fp
1c804     08 4E 85 F1 | 	sub	fp, #8
1c808     1C 26 0E F2 | 	cmp	local01, #28 wz
1c80c     14 4E 05 A1 |  if_e	add	fp, #20
1c810     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c814     14 4E 85 A1 |  if_e	sub	fp, #20
1c818     16 2B 02 A6 |  if_e	mov	local03, local04
1c81c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c820     44 00 90 5D |  if_ne	jmp	#LR__2314
1c824     00 26 06 F6 | 	mov	local01, #0
1c828     A7 12 02 FB | 	rdlong	arg01, fp
1c82c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c830     1F 2E C6 C9 |  if_b	decod	local05, #31
1c834     00 2E 06 36 |  if_ae	mov	local05, #0
1c838     4C 9F B0 FD | 	call	#__system___float_fromuns
1c83c     17 FB 61 F5 | 	xor	result1, local05
1c840     FD 12 02 F6 | 	mov	arg01, result1
1c844     0C 4E 05 F1 | 	add	fp, #12
1c848     A7 14 02 FB | 	rdlong	arg02, fp
1c84c     0C 4E 85 F1 | 	sub	fp, #12
1c850     01 16 06 F6 | 	mov	arg03, #1
1c854     68 A7 B0 FD | 	call	#__system___float_cmp
1c858     00 FA 55 F2 | 	cmps	result1, #0 wc
1c85c     00 26 26 C6 |  if_b	not	local01, #0
1c860     A7 26 62 FC | 	wrlong	local01, fp
1c864     80 02 90 FD | 	jmp	#LR__2323
1c868                 | LR__2314
1c868                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1c868     08 4E 05 F1 | 	add	fp, #8
1c86c     A7 26 02 FB | 	rdlong	local01, fp
1c870     08 4E 85 F1 | 	sub	fp, #8
1c874     1C 26 0E F2 | 	cmp	local01, #28 wz
1c878     14 4E 05 A1 |  if_e	add	fp, #20
1c87c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c880     14 4E 85 A1 |  if_e	sub	fp, #20
1c884     16 2B 02 A6 |  if_e	mov	local03, local04
1c888     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c88c     20 00 90 5D |  if_ne	jmp	#LR__2315
1c890     A7 28 02 FB | 	rdlong	local02, fp
1c894     0C 4E 05 F1 | 	add	fp, #12
1c898     A7 2A 02 FB | 	rdlong	local03, fp
1c89c     0C 4E 85 F1 | 	sub	fp, #12
1c8a0     15 29 52 F2 | 	cmps	local02, local03 wc
1c8a4     13 27 A2 F1 | 	subx	local01, local01
1c8a8     A7 26 62 FC | 	wrlong	local01, fp
1c8ac     38 02 90 FD | 	jmp	#LR__2323
1c8b0                 | LR__2315
1c8b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1c8b0     08 4E 05 F1 | 	add	fp, #8
1c8b4     A7 26 02 FB | 	rdlong	local01, fp
1c8b8     08 4E 85 F1 | 	sub	fp, #8
1c8bc     1C 26 0E F2 | 	cmp	local01, #28 wz
1c8c0     14 4E 05 A1 |  if_e	add	fp, #20
1c8c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c8c8     14 4E 85 A1 |  if_e	sub	fp, #20
1c8cc     16 2B 02 A6 |  if_e	mov	local03, local04
1c8d0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c8d4     20 00 90 5D |  if_ne	jmp	#LR__2316
1c8d8     A7 28 02 FB | 	rdlong	local02, fp
1c8dc     0C 4E 05 F1 | 	add	fp, #12
1c8e0     A7 2A 02 FB | 	rdlong	local03, fp
1c8e4     0C 4E 85 F1 | 	sub	fp, #12
1c8e8     15 29 52 F2 | 	cmps	local02, local03 wc
1c8ec     13 27 A2 F1 | 	subx	local01, local01
1c8f0     A7 26 62 FC | 	wrlong	local01, fp
1c8f4     F0 01 90 FD | 	jmp	#LR__2323
1c8f8                 | LR__2316
1c8f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1c8f8     08 4E 05 F1 | 	add	fp, #8
1c8fc     A7 26 02 FB | 	rdlong	local01, fp
1c900     08 4E 85 F1 | 	sub	fp, #8
1c904     1D 26 0E F2 | 	cmp	local01, #29 wz
1c908     14 4E 05 A1 |  if_e	add	fp, #20
1c90c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c910     14 4E 85 A1 |  if_e	sub	fp, #20
1c914     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c918     34 00 90 5D |  if_ne	jmp	#LR__2317
1c91c     00 26 06 F6 | 	mov	local01, #0
1c920     A7 12 02 FB | 	rdlong	arg01, fp
1c924     60 9E B0 FD | 	call	#__system___float_fromuns
1c928     FD 12 02 F6 | 	mov	arg01, result1
1c92c     0C 4E 05 F1 | 	add	fp, #12
1c930     A7 14 02 FB | 	rdlong	arg02, fp
1c934     0C 4E 85 F1 | 	sub	fp, #12
1c938     01 16 06 F6 | 	mov	arg03, #1
1c93c     80 A6 B0 FD | 	call	#__system___float_cmp
1c940     00 FA 55 F2 | 	cmps	result1, #0 wc
1c944     00 26 26 C6 |  if_b	not	local01, #0
1c948     A7 26 62 FC | 	wrlong	local01, fp
1c94c     98 01 90 FD | 	jmp	#LR__2323
1c950                 | LR__2317
1c950                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1c950     08 4E 05 F1 | 	add	fp, #8
1c954     A7 26 02 FB | 	rdlong	local01, fp
1c958     08 4E 85 F1 | 	sub	fp, #8
1c95c     1D 26 0E F2 | 	cmp	local01, #29 wz
1c960     14 4E 05 A1 |  if_e	add	fp, #20
1c964     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c968     14 4E 85 A1 |  if_e	sub	fp, #20
1c96c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c970     20 00 90 5D |  if_ne	jmp	#LR__2318
1c974     A7 28 02 FB | 	rdlong	local02, fp
1c978     0C 4E 05 F1 | 	add	fp, #12
1c97c     A7 2A 02 FB | 	rdlong	local03, fp
1c980     0C 4E 85 F1 | 	sub	fp, #12
1c984     15 29 52 F2 | 	cmps	local02, local03 wc
1c988     13 27 A2 F1 | 	subx	local01, local01
1c98c     A7 26 62 FC | 	wrlong	local01, fp
1c990     54 01 90 FD | 	jmp	#LR__2323
1c994                 | LR__2318
1c994                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1c994     08 4E 05 F1 | 	add	fp, #8
1c998     A7 26 02 FB | 	rdlong	local01, fp
1c99c     08 4E 85 F1 | 	sub	fp, #8
1c9a0     1D 26 0E F2 | 	cmp	local01, #29 wz
1c9a4     14 4E 05 A1 |  if_e	add	fp, #20
1c9a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c9ac     14 4E 85 A1 |  if_e	sub	fp, #20
1c9b0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c9b4     20 00 90 5D |  if_ne	jmp	#LR__2319
1c9b8     A7 28 02 FB | 	rdlong	local02, fp
1c9bc     0C 4E 05 F1 | 	add	fp, #12
1c9c0     A7 2A 02 FB | 	rdlong	local03, fp
1c9c4     0C 4E 85 F1 | 	sub	fp, #12
1c9c8     15 29 12 F2 | 	cmp	local02, local03 wc
1c9cc     13 27 A2 F1 | 	subx	local01, local01
1c9d0     A7 26 62 FC | 	wrlong	local01, fp
1c9d4     10 01 90 FD | 	jmp	#LR__2323
1c9d8                 | LR__2319
1c9d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1c9d8     08 4E 05 F1 | 	add	fp, #8
1c9dc     A7 26 02 FB | 	rdlong	local01, fp
1c9e0     08 4E 85 F1 | 	sub	fp, #8
1c9e4     2B 26 0E F2 | 	cmp	local01, #43 wz
1c9e8     14 4E 05 A1 |  if_e	add	fp, #20
1c9ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c9f0     14 4E 85 A1 |  if_e	sub	fp, #20
1c9f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c9f8     30 00 90 5D |  if_ne	jmp	#LR__2320
1c9fc     00 26 06 F6 | 	mov	local01, #0
1ca00     A7 12 02 FB | 	rdlong	arg01, fp
1ca04     88 01 BF FD | 	call	#_convertstring
1ca08     FD 12 02 F6 | 	mov	arg01, result1
1ca0c     0C 4E 05 F1 | 	add	fp, #12
1ca10     A7 14 02 FB | 	rdlong	arg02, fp
1ca14     0C 4E 85 F1 | 	sub	fp, #12
1ca18     20 73 B0 FD | 	call	#__system___string_cmp
1ca1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ca20     00 26 26 C6 |  if_b	not	local01, #0
1ca24     A7 26 62 FC | 	wrlong	local01, fp
1ca28     BC 00 90 FD | 	jmp	#LR__2323
1ca2c                 | LR__2320
1ca2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1ca2c     08 4E 05 F1 | 	add	fp, #8
1ca30     A7 26 02 FB | 	rdlong	local01, fp
1ca34     08 4E 85 F1 | 	sub	fp, #8
1ca38     1F 26 0E F2 | 	cmp	local01, #31 wz
1ca3c     14 4E 05 A1 |  if_e	add	fp, #20
1ca40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ca44     14 4E 85 A1 |  if_e	sub	fp, #20
1ca48     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ca4c     34 00 90 5D |  if_ne	jmp	#LR__2321
1ca50     00 26 06 F6 | 	mov	local01, #0
1ca54     A7 28 02 FB | 	rdlong	local02, fp
1ca58     0C 4E 05 F1 | 	add	fp, #12
1ca5c     A7 12 02 FB | 	rdlong	arg01, fp
1ca60     0C 4E 85 F1 | 	sub	fp, #12
1ca64     28 01 BF FD | 	call	#_convertstring
1ca68     FD 14 02 F6 | 	mov	arg02, result1
1ca6c     14 13 02 F6 | 	mov	arg01, local02
1ca70     C8 72 B0 FD | 	call	#__system___string_cmp
1ca74     00 FA 55 F2 | 	cmps	result1, #0 wc
1ca78     00 26 26 C6 |  if_b	not	local01, #0
1ca7c     A7 26 62 FC | 	wrlong	local01, fp
1ca80     64 00 90 FD | 	jmp	#LR__2323
1ca84                 | LR__2321
1ca84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1ca84     08 4E 05 F1 | 	add	fp, #8
1ca88     A7 26 02 FB | 	rdlong	local01, fp
1ca8c     08 4E 85 F1 | 	sub	fp, #8
1ca90     2B 26 0E F2 | 	cmp	local01, #43 wz
1ca94     14 4E 05 A1 |  if_e	add	fp, #20
1ca98     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ca9c     14 4E 85 A1 |  if_e	sub	fp, #20
1caa0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1caa4     3C 00 90 5D |  if_ne	jmp	#LR__2322
1caa8     00 26 06 F6 | 	mov	local01, #0
1caac     A7 12 02 FB | 	rdlong	arg01, fp
1cab0     DC 00 BF FD | 	call	#_convertstring
1cab4     FD 28 02 F6 | 	mov	local02, result1
1cab8     0C 4E 05 F1 | 	add	fp, #12
1cabc     A7 12 02 FB | 	rdlong	arg01, fp
1cac0     0C 4E 85 F1 | 	sub	fp, #12
1cac4     C8 00 BF FD | 	call	#_convertstring
1cac8     FD 14 02 F6 | 	mov	arg02, result1
1cacc     14 13 02 F6 | 	mov	arg01, local02
1cad0     68 72 B0 FD | 	call	#__system___string_cmp
1cad4     00 FA 55 F2 | 	cmps	result1, #0 wc
1cad8     00 26 26 C6 |  if_b	not	local01, #0
1cadc     A7 26 62 FC | 	wrlong	local01, fp
1cae0     04 00 90 FD | 	jmp	#LR__2323
1cae4                 | LR__2322
1cae4     A7 00 68 FC | 	wrlong	#0, fp
1cae8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cae8                 | LR__2323
1cae8     08 4E 05 F1 | 	add	fp, #8
1caec     A7 38 68 FC | 	wrlong	#28, fp
1caf0     08 4E 85 F1 | 	sub	fp, #8
1caf4     A7 12 02 F6 | 	mov	arg01, fp
1caf8     B4 FF BE FD | 	call	#_push
1cafc     A7 F0 03 F6 | 	mov	ptra, fp
1cb00     B2 00 A0 FD | 	call	#popregs_
1cb04                 | _do_lt_ret
1cb04     2D 00 64 FD | 	ret
1cb08                 | 
1cb08                 | ' 
1cb08                 | ' '--------------------------------- minus (-)
1cb08                 | ' 
1cb08                 | ' sub do_minus
1cb08                 | _do_minus
1cb08     05 4A 05 F6 | 	mov	COUNT_, #5
1cb0c     A8 00 A0 FD | 	call	#pushregs_
1cb10     18 F0 07 F1 | 	add	ptra, #24
1cb14     00 FF BE FD | 	call	#_pop
1cb18     FD 26 02 F6 | 	mov	local01, result1
1cb1c     FE 28 02 F6 | 	mov	local02, result2
1cb20     FF 2A 02 F6 | 	mov	local03, result3
1cb24     0C 4E 05 F1 | 	add	fp, #12
1cb28     A7 26 62 FC | 	wrlong	local01, fp
1cb2c     04 4E 05 F1 | 	add	fp, #4
1cb30     A7 28 62 FC | 	wrlong	local02, fp
1cb34     04 4E 05 F1 | 	add	fp, #4
1cb38     A7 2A 62 FC | 	wrlong	local03, fp
1cb3c     14 4E 85 F1 | 	sub	fp, #20
1cb40     D4 FE BE FD | 	call	#_pop
1cb44     FF 2A 02 F6 | 	mov	local03, result3
1cb48     A7 FA 61 FC | 	wrlong	result1, fp
1cb4c     04 4E 05 F1 | 	add	fp, #4
1cb50     A7 FC 61 FC | 	wrlong	result2, fp
1cb54     04 4E 05 F1 | 	add	fp, #4
1cb58     A7 2A 62 FC | 	wrlong	local03, fp
1cb5c                 | ' 
1cb5c                 | ' t2=pop()
1cb5c                 | ' t1=pop()
1cb5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1cb5c     08 4E 85 F1 | 	sub	fp, #8
1cb60     1D 2A 0E F2 | 	cmp	local03, #29 wz
1cb64     14 4E 05 A1 |  if_e	add	fp, #20
1cb68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cb6c     14 4E 85 A1 |  if_e	sub	fp, #20
1cb70     16 2B 02 A6 |  if_e	mov	local03, local04
1cb74     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cb78     5C 00 90 5D |  if_ne	jmp	#LR__2331
1cb7c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1cb7c     0C 4E 05 F1 | 	add	fp, #12
1cb80     A7 26 02 FB | 	rdlong	local01, fp
1cb84     0C 4E 85 F1 | 	sub	fp, #12
1cb88     A7 2A 02 FB | 	rdlong	local03, fp
1cb8c     15 27 12 F2 | 	cmp	local01, local03 wc
1cb90     1C 00 90 3D |  if_ae	jmp	#LR__2330
1cb94     A7 26 02 FB | 	rdlong	local01, fp
1cb98     0C 4E 05 F1 | 	add	fp, #12
1cb9c     A7 28 02 FB | 	rdlong	local02, fp
1cba0     0C 4E 85 F1 | 	sub	fp, #12
1cba4     14 27 82 F1 | 	sub	local01, local02
1cba8     A7 26 62 FC | 	wrlong	local01, fp
1cbac     F4 02 90 FD | 	jmp	#LR__2340
1cbb0                 | LR__2330
1cbb0     A7 26 02 FB | 	rdlong	local01, fp
1cbb4     0C 4E 05 F1 | 	add	fp, #12
1cbb8     A7 28 02 FB | 	rdlong	local02, fp
1cbbc     0C 4E 85 F1 | 	sub	fp, #12
1cbc0     14 27 82 F1 | 	sub	local01, local02
1cbc4     A7 26 62 FC | 	wrlong	local01, fp
1cbc8     08 4E 05 F1 | 	add	fp, #8
1cbcc     A7 38 68 FC | 	wrlong	#28, fp
1cbd0     08 4E 85 F1 | 	sub	fp, #8
1cbd4     CC 02 90 FD | 	jmp	#LR__2340
1cbd8                 | LR__2331
1cbd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1cbd8     08 4E 05 F1 | 	add	fp, #8
1cbdc     A7 26 02 FB | 	rdlong	local01, fp
1cbe0     08 4E 85 F1 | 	sub	fp, #8
1cbe4     1D 26 0E F2 | 	cmp	local01, #29 wz
1cbe8     14 4E 05 A1 |  if_e	add	fp, #20
1cbec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cbf0     14 4E 85 A1 |  if_e	sub	fp, #20
1cbf4     16 2B 02 A6 |  if_e	mov	local03, local04
1cbf8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cbfc     28 00 90 5D |  if_ne	jmp	#LR__2332
1cc00     A7 26 02 FB | 	rdlong	local01, fp
1cc04     0C 4E 05 F1 | 	add	fp, #12
1cc08     A7 28 02 FB | 	rdlong	local02, fp
1cc0c     0C 4E 85 F1 | 	sub	fp, #12
1cc10     14 27 82 F1 | 	sub	local01, local02
1cc14     A7 26 62 FC | 	wrlong	local01, fp
1cc18     08 4E 05 F1 | 	add	fp, #8
1cc1c     A7 38 68 FC | 	wrlong	#28, fp
1cc20     08 4E 85 F1 | 	sub	fp, #8
1cc24     7C 02 90 FD | 	jmp	#LR__2340
1cc28                 | LR__2332
1cc28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1cc28     08 4E 05 F1 | 	add	fp, #8
1cc2c     A7 26 02 FB | 	rdlong	local01, fp
1cc30     08 4E 85 F1 | 	sub	fp, #8
1cc34     1D 26 0E F2 | 	cmp	local01, #29 wz
1cc38     14 4E 05 A1 |  if_e	add	fp, #20
1cc3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cc40     14 4E 85 A1 |  if_e	sub	fp, #20
1cc44     16 2B 02 A6 |  if_e	mov	local03, local04
1cc48     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cc4c     34 00 90 5D |  if_ne	jmp	#LR__2333
1cc50     A7 12 02 FB | 	rdlong	arg01, fp
1cc54     30 9B B0 FD | 	call	#__system___float_fromuns
1cc58     FD 12 02 F6 | 	mov	arg01, result1
1cc5c     0C 4E 05 F1 | 	add	fp, #12
1cc60     A7 14 02 FB | 	rdlong	arg02, fp
1cc64     0C 4E 85 F1 | 	sub	fp, #12
1cc68     1F 14 E6 F4 | 	bitnot	arg02, #31
1cc6c     4C 9B B0 FD | 	call	#__system___float_add
1cc70     A7 FA 61 FC | 	wrlong	result1, fp
1cc74     08 4E 05 F1 | 	add	fp, #8
1cc78     A7 3C 68 FC | 	wrlong	#30, fp
1cc7c     08 4E 85 F1 | 	sub	fp, #8
1cc80     20 02 90 FD | 	jmp	#LR__2340
1cc84                 | LR__2333
1cc84                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1cc84     08 4E 05 F1 | 	add	fp, #8
1cc88     A7 26 02 FB | 	rdlong	local01, fp
1cc8c     08 4E 85 F1 | 	sub	fp, #8
1cc90     1C 26 0E F2 | 	cmp	local01, #28 wz
1cc94     14 4E 05 A1 |  if_e	add	fp, #20
1cc98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cc9c     14 4E 85 A1 |  if_e	sub	fp, #20
1cca0     16 2B 02 A6 |  if_e	mov	local03, local04
1cca4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cca8     1C 00 90 5D |  if_ne	jmp	#LR__2334
1ccac     A7 26 02 FB | 	rdlong	local01, fp
1ccb0     0C 4E 05 F1 | 	add	fp, #12
1ccb4     A7 28 02 FB | 	rdlong	local02, fp
1ccb8     0C 4E 85 F1 | 	sub	fp, #12
1ccbc     14 27 82 F1 | 	sub	local01, local02
1ccc0     A7 26 62 FC | 	wrlong	local01, fp
1ccc4     DC 01 90 FD | 	jmp	#LR__2340
1ccc8                 | LR__2334
1ccc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1ccc8     08 4E 05 F1 | 	add	fp, #8
1cccc     A7 26 02 FB | 	rdlong	local01, fp
1ccd0     08 4E 85 F1 | 	sub	fp, #8
1ccd4     1C 26 0E F2 | 	cmp	local01, #28 wz
1ccd8     14 4E 05 A1 |  if_e	add	fp, #20
1ccdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cce0     14 4E 85 A1 |  if_e	sub	fp, #20
1cce4     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1cce8     1C 00 90 5D |  if_ne	jmp	#LR__2335
1ccec     A7 26 02 FB | 	rdlong	local01, fp
1ccf0     0C 4E 05 F1 | 	add	fp, #12
1ccf4     A7 28 02 FB | 	rdlong	local02, fp
1ccf8     0C 4E 85 F1 | 	sub	fp, #12
1ccfc     14 27 82 F1 | 	sub	local01, local02
1cd00     A7 26 62 FC | 	wrlong	local01, fp
1cd04     9C 01 90 FD | 	jmp	#LR__2340
1cd08                 | LR__2335
1cd08                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1cd08     08 4E 05 F1 | 	add	fp, #8
1cd0c     A7 26 02 FB | 	rdlong	local01, fp
1cd10     08 4E 85 F1 | 	sub	fp, #8
1cd14     1C 26 0E F2 | 	cmp	local01, #28 wz
1cd18     14 4E 05 A1 |  if_e	add	fp, #20
1cd1c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cd20     14 4E 85 A1 |  if_e	sub	fp, #20
1cd24     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cd28     44 00 90 5D |  if_ne	jmp	#LR__2336
1cd2c     A7 12 02 FB | 	rdlong	arg01, fp
1cd30     09 13 52 F6 | 	abs	arg01, arg01 wc
1cd34     1F 2E C6 C9 |  if_b	decod	local05, #31
1cd38     00 2E 06 36 |  if_ae	mov	local05, #0
1cd3c     48 9A B0 FD | 	call	#__system___float_fromuns
1cd40     17 FB 61 F5 | 	xor	result1, local05
1cd44     FD 12 02 F6 | 	mov	arg01, result1
1cd48     0C 4E 05 F1 | 	add	fp, #12
1cd4c     A7 14 02 FB | 	rdlong	arg02, fp
1cd50     0C 4E 85 F1 | 	sub	fp, #12
1cd54     1F 14 E6 F4 | 	bitnot	arg02, #31
1cd58     60 9A B0 FD | 	call	#__system___float_add
1cd5c     A7 FA 61 FC | 	wrlong	result1, fp
1cd60     08 4E 05 F1 | 	add	fp, #8
1cd64     A7 3C 68 FC | 	wrlong	#30, fp
1cd68     08 4E 85 F1 | 	sub	fp, #8
1cd6c     34 01 90 FD | 	jmp	#LR__2340
1cd70                 | LR__2336
1cd70                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1cd70     08 4E 05 F1 | 	add	fp, #8
1cd74     A7 26 02 FB | 	rdlong	local01, fp
1cd78     08 4E 85 F1 | 	sub	fp, #8
1cd7c     1E 26 0E F2 | 	cmp	local01, #30 wz
1cd80     14 4E 05 A1 |  if_e	add	fp, #20
1cd84     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cd88     14 4E 85 A1 |  if_e	sub	fp, #20
1cd8c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cd90     2C 00 90 5D |  if_ne	jmp	#LR__2337
1cd94     A7 26 02 FB | 	rdlong	local01, fp
1cd98     0C 4E 05 F1 | 	add	fp, #12
1cd9c     A7 12 02 FB | 	rdlong	arg01, fp
1cda0     0C 4E 85 F1 | 	sub	fp, #12
1cda4     E0 99 B0 FD | 	call	#__system___float_fromuns
1cda8     FD 14 02 F6 | 	mov	arg02, result1
1cdac     13 13 02 F6 | 	mov	arg01, local01
1cdb0     1F 14 E6 F4 | 	bitnot	arg02, #31
1cdb4     04 9A B0 FD | 	call	#__system___float_add
1cdb8     A7 FA 61 FC | 	wrlong	result1, fp
1cdbc     E4 00 90 FD | 	jmp	#LR__2340
1cdc0                 | LR__2337
1cdc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1cdc0     08 4E 05 F1 | 	add	fp, #8
1cdc4     A7 26 02 FB | 	rdlong	local01, fp
1cdc8     08 4E 85 F1 | 	sub	fp, #8
1cdcc     1E 26 0E F2 | 	cmp	local01, #30 wz
1cdd0     14 4E 05 A1 |  if_e	add	fp, #20
1cdd4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cdd8     14 4E 85 A1 |  if_e	sub	fp, #20
1cddc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cde0     3C 00 90 5D |  if_ne	jmp	#LR__2338
1cde4     A7 26 02 FB | 	rdlong	local01, fp
1cde8     0C 4E 05 F1 | 	add	fp, #12
1cdec     A7 12 02 FB | 	rdlong	arg01, fp
1cdf0     0C 4E 85 F1 | 	sub	fp, #12
1cdf4     09 13 52 F6 | 	abs	arg01, arg01 wc
1cdf8     1F 2E C6 C9 |  if_b	decod	local05, #31
1cdfc     00 2E 06 36 |  if_ae	mov	local05, #0
1ce00     84 99 B0 FD | 	call	#__system___float_fromuns
1ce04     17 FB 61 F5 | 	xor	result1, local05
1ce08     FD 14 02 F6 | 	mov	arg02, result1
1ce0c     13 13 02 F6 | 	mov	arg01, local01
1ce10     1F 14 E6 F4 | 	bitnot	arg02, #31
1ce14     A4 99 B0 FD | 	call	#__system___float_add
1ce18     A7 FA 61 FC | 	wrlong	result1, fp
1ce1c     84 00 90 FD | 	jmp	#LR__2340
1ce20                 | LR__2338
1ce20                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ce20     08 4E 05 F1 | 	add	fp, #8
1ce24     A7 26 02 FB | 	rdlong	local01, fp
1ce28     08 4E 85 F1 | 	sub	fp, #8
1ce2c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ce30     14 4E 05 A1 |  if_e	add	fp, #20
1ce34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ce38     14 4E 85 A1 |  if_e	sub	fp, #20
1ce3c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ce40     20 00 90 5D |  if_ne	jmp	#LR__2339
1ce44     A7 12 02 FB | 	rdlong	arg01, fp
1ce48     0C 4E 05 F1 | 	add	fp, #12
1ce4c     A7 14 02 FB | 	rdlong	arg02, fp
1ce50     0C 4E 85 F1 | 	sub	fp, #12
1ce54     1F 14 E6 F4 | 	bitnot	arg02, #31
1ce58     60 99 B0 FD | 	call	#__system___float_add
1ce5c     A7 FA 61 FC | 	wrlong	result1, fp
1ce60     40 00 90 FD | 	jmp	#LR__2340
1ce64                 | LR__2339
1ce64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1ce64     08 4E 05 F1 | 	add	fp, #8
1ce68     A7 26 02 FB | 	rdlong	local01, fp
1ce6c     08 4E 85 F1 | 	sub	fp, #8
1ce70     1F 26 0E F2 | 	cmp	local01, #31 wz
1ce74     14 4E 05 51 |  if_ne	add	fp, #20
1ce78     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ce7c     14 4E 85 51 |  if_ne	sub	fp, #20
1ce80     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1ce84     A7 06 68 AC |  if_e	wrlong	#3, fp
1ce88     08 4E 05 A1 |  if_e	add	fp, #8
1ce8c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ce90     08 4E 85 A1 |  if_e	sub	fp, #8
1ce94     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1ce98     08 4E 05 51 |  if_ne	add	fp, #8
1ce9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1cea0     08 4E 85 51 |  if_ne	sub	fp, #8
1cea4                 | LR__2340
1cea4     A7 12 02 F6 | 	mov	arg01, fp
1cea8     04 FC BE FD | 	call	#_push
1ceac     A7 F0 03 F6 | 	mov	ptra, fp
1ceb0     B2 00 A0 FD | 	call	#popregs_
1ceb4                 | _do_minus_ret
1ceb4     2D 00 64 FD | 	ret
1ceb8                 | 
1ceb8                 | ' 
1ceb8                 | ' '--------------------------------- negative (-), one argument negative
1ceb8                 | ' 
1ceb8                 | ' sub do_negative
1ceb8                 | _do_negative
1ceb8     02 4A 05 F6 | 	mov	COUNT_, #2
1cebc     A8 00 A0 FD | 	call	#pushregs_
1cec0     0C F0 07 F1 | 	add	ptra, #12
1cec4     50 FB BE FD | 	call	#_pop
1cec8     FF 26 02 F6 | 	mov	local01, result3
1cecc     A7 FA 61 FC | 	wrlong	result1, fp
1ced0     04 4E 05 F1 | 	add	fp, #4
1ced4     A7 FC 61 FC | 	wrlong	result2, fp
1ced8     04 4E 05 F1 | 	add	fp, #4
1cedc     A7 26 62 FC | 	wrlong	local01, fp
1cee0                 | ' 
1cee0                 | ' t1=pop()
1cee0                 | ' if t1.result_type=result_int then 
1cee0     08 4E 85 F1 | 	sub	fp, #8
1cee4     1C 26 0E F2 | 	cmp	local01, #28 wz
1cee8     A7 28 02 AB |  if_e	rdlong	local02, fp
1ceec     14 27 62 A6 |  if_e	neg	local01, local02
1cef0     A7 26 62 AC |  if_e	wrlong	local01, fp
1cef4     5C 00 90 AD |  if_e	jmp	#LR__2352
1cef8     08 4E 05 F1 | 	add	fp, #8
1cefc     A7 26 02 FB | 	rdlong	local01, fp
1cf00     08 4E 85 F1 | 	sub	fp, #8
1cf04     1D 26 0E F2 | 	cmp	local01, #29 wz
1cf08     1C 00 90 5D |  if_ne	jmp	#LR__2350
1cf0c     A7 28 02 FB | 	rdlong	local02, fp
1cf10     14 27 62 F6 | 	neg	local01, local02
1cf14     A7 26 62 FC | 	wrlong	local01, fp
1cf18     08 4E 05 F1 | 	add	fp, #8
1cf1c     A7 38 68 FC | 	wrlong	#28, fp
1cf20     08 4E 85 F1 | 	sub	fp, #8
1cf24     2C 00 90 FD | 	jmp	#LR__2351
1cf28                 | LR__2350
1cf28     08 4E 05 F1 | 	add	fp, #8
1cf2c     A7 26 02 FB | 	rdlong	local01, fp
1cf30     08 4E 85 F1 | 	sub	fp, #8
1cf34     1E 26 0E F2 | 	cmp	local01, #30 wz
1cf38     A7 FA 01 AB |  if_e	rdlong	result1, fp
1cf3c     1F FA E5 A4 |  if_e	bitnot	result1, #31
1cf40     A7 FA 61 AC |  if_e	wrlong	result1, fp
1cf44     08 4E 05 51 |  if_ne	add	fp, #8
1cf48     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1cf4c     08 4E 85 51 |  if_ne	sub	fp, #8
1cf50     A7 50 68 5C |  if_ne	wrlong	#40, fp
1cf54                 | LR__2351
1cf54                 | LR__2352
1cf54     A7 12 02 F6 | 	mov	arg01, fp
1cf58     54 FB BE FD | 	call	#_push
1cf5c     A7 F0 03 F6 | 	mov	ptra, fp
1cf60     B2 00 A0 FD | 	call	#popregs_
1cf64                 | _do_negative_ret
1cf64     2D 00 64 FD | 	ret
1cf68                 | 
1cf68                 | ' 
1cf68                 | ' '--------------------------------- MOD (modulo)
1cf68                 | ' 
1cf68                 | ' sub do_mod 
1cf68                 | _do_mod
1cf68     01 4A 05 F6 | 	mov	COUNT_, #1
1cf6c     A8 00 A0 FD | 	call	#pushregs_
1cf70     18 F0 07 F1 | 	add	ptra, #24
1cf74     A0 FA BE FD | 	call	#_pop
1cf78     FD 8A 02 F6 | 	mov	muldivb_, result1
1cf7c     FE 88 02 F6 | 	mov	muldiva_, result2
1cf80     FF 26 02 F6 | 	mov	local01, result3
1cf84     0C 4E 05 F1 | 	add	fp, #12
1cf88     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cf8c     04 4E 05 F1 | 	add	fp, #4
1cf90     A7 88 62 FC | 	wrlong	muldiva_, fp
1cf94     04 4E 05 F1 | 	add	fp, #4
1cf98     A7 26 62 FC | 	wrlong	local01, fp
1cf9c     14 4E 85 F1 | 	sub	fp, #20
1cfa0     74 FA BE FD | 	call	#_pop
1cfa4     A7 FA 61 FC | 	wrlong	result1, fp
1cfa8     04 4E 05 F1 | 	add	fp, #4
1cfac     A7 FC 61 FC | 	wrlong	result2, fp
1cfb0     04 4E 05 F1 | 	add	fp, #4
1cfb4     A7 FE 61 FC | 	wrlong	result3, fp
1cfb8                 | ' 
1cfb8                 | ' t2=pop()
1cfb8                 | ' t1=pop()
1cfb8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1cfb8     08 4E 85 F1 | 	sub	fp, #8
1cfbc     1F FE 0D F2 | 	cmp	result3, #31 wz
1cfc0     14 4E 05 51 |  if_ne	add	fp, #20
1cfc4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1cfc8     14 4E 85 51 |  if_ne	sub	fp, #20
1cfcc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1cfd0     A7 14 68 AC |  if_e	wrlong	#10, fp
1cfd4     08 4E 05 A1 |  if_e	add	fp, #8
1cfd8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cfdc     08 4E 85 A1 |  if_e	sub	fp, #8
1cfe0     90 01 90 AD |  if_e	jmp	#LR__2366
1cfe4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1cfe4     08 4E 05 F1 | 	add	fp, #8
1cfe8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cfec     08 4E 85 F1 | 	sub	fp, #8
1cff0     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1cff4     1C 00 90 5D |  if_ne	jmp	#LR__2360
1cff8     08 4E 05 F1 | 	add	fp, #8
1cffc     A7 38 68 FC | 	wrlong	#28, fp
1d000     08 4E 85 F1 | 	sub	fp, #8
1d004     A7 12 02 FB | 	rdlong	arg01, fp
1d008     00 14 06 F6 | 	mov	arg02, #0
1d00c     44 A0 B0 FD | 	call	#__system___float_tointeger
1d010     A7 FA 61 FC | 	wrlong	result1, fp
1d014                 | LR__2360
1d014                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d014     14 4E 05 F1 | 	add	fp, #20
1d018     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d01c     14 4E 85 F1 | 	sub	fp, #20
1d020     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1d024     28 00 90 5D |  if_ne	jmp	#LR__2361
1d028     14 4E 05 F1 | 	add	fp, #20
1d02c     A7 38 68 FC | 	wrlong	#28, fp
1d030     08 4E 85 F1 | 	sub	fp, #8
1d034     A7 12 02 FB | 	rdlong	arg01, fp
1d038     0C 4E 85 F1 | 	sub	fp, #12
1d03c     00 14 06 F6 | 	mov	arg02, #0
1d040     10 A0 B0 FD | 	call	#__system___float_tointeger
1d044     0C 4E 05 F1 | 	add	fp, #12
1d048     A7 FA 61 FC | 	wrlong	result1, fp
1d04c     0C 4E 85 F1 | 	sub	fp, #12
1d050                 | LR__2361
1d050                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1d050     08 4E 05 F1 | 	add	fp, #8
1d054     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d058     08 4E 85 F1 | 	sub	fp, #8
1d05c     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d060     14 4E 05 A1 |  if_e	add	fp, #20
1d064     A7 26 02 AB |  if_e	rdlong	local01, fp
1d068     14 4E 85 A1 |  if_e	sub	fp, #20
1d06c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d070     20 00 90 5D |  if_ne	jmp	#LR__2362
1d074     0C 4E 05 F1 | 	add	fp, #12
1d078     A7 26 02 FB | 	rdlong	local01, fp
1d07c     0C 4E 85 F1 | 	sub	fp, #12
1d080     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d084     13 8B 12 FD | 	qdiv	muldivb_, local01
1d088     19 26 62 FD | 	getqy	local01
1d08c     A7 26 62 FC | 	wrlong	local01, fp
1d090     E0 00 90 FD | 	jmp	#LR__2366
1d094                 | LR__2362
1d094                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1d094     08 4E 05 F1 | 	add	fp, #8
1d098     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d09c     08 4E 85 F1 | 	sub	fp, #8
1d0a0     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d0a4     14 4E 05 A1 |  if_e	add	fp, #20
1d0a8     A7 26 02 AB |  if_e	rdlong	local01, fp
1d0ac     14 4E 85 A1 |  if_e	sub	fp, #20
1d0b0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d0b4     2C 00 90 5D |  if_ne	jmp	#LR__2363
1d0b8     0C 4E 05 F1 | 	add	fp, #12
1d0bc     A7 26 02 FB | 	rdlong	local01, fp
1d0c0     0C 4E 85 F1 | 	sub	fp, #12
1d0c4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0c8     13 8B 12 FD | 	qdiv	muldivb_, local01
1d0cc     19 26 62 FD | 	getqy	local01
1d0d0     A7 26 62 FC | 	wrlong	local01, fp
1d0d4     08 4E 05 F1 | 	add	fp, #8
1d0d8     A7 38 68 FC | 	wrlong	#28, fp
1d0dc     08 4E 85 F1 | 	sub	fp, #8
1d0e0     90 00 90 FD | 	jmp	#LR__2366
1d0e4                 | LR__2363
1d0e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1d0e4     08 4E 05 F1 | 	add	fp, #8
1d0e8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0ec     08 4E 85 F1 | 	sub	fp, #8
1d0f0     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d0f4     14 4E 05 A1 |  if_e	add	fp, #20
1d0f8     A7 26 02 AB |  if_e	rdlong	local01, fp
1d0fc     14 4E 85 A1 |  if_e	sub	fp, #20
1d100     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d104     1C 00 90 5D |  if_ne	jmp	#LR__2364
1d108     A7 88 02 FB | 	rdlong	muldiva_, fp
1d10c     0C 4E 05 F1 | 	add	fp, #12
1d110     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d114     0C 4E 85 F1 | 	sub	fp, #12
1d118     BA 00 A0 FD | 	call	#divide_
1d11c     A7 88 62 FC | 	wrlong	muldiva_, fp
1d120     50 00 90 FD | 	jmp	#LR__2366
1d124                 | LR__2364
1d124                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1d124     08 4E 05 F1 | 	add	fp, #8
1d128     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d12c     08 4E 85 F1 | 	sub	fp, #8
1d130     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d134     14 4E 05 A1 |  if_e	add	fp, #20
1d138     A7 26 02 AB |  if_e	rdlong	local01, fp
1d13c     14 4E 85 A1 |  if_e	sub	fp, #20
1d140     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d144     1C 00 90 5D |  if_ne	jmp	#LR__2365
1d148     A7 88 02 FB | 	rdlong	muldiva_, fp
1d14c     0C 4E 05 F1 | 	add	fp, #12
1d150     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d154     0C 4E 85 F1 | 	sub	fp, #12
1d158     BA 00 A0 FD | 	call	#divide_
1d15c     A7 88 62 FC | 	wrlong	muldiva_, fp
1d160     10 00 90 FD | 	jmp	#LR__2366
1d164                 | LR__2365
1d164     A7 16 68 FC | 	wrlong	#11, fp
1d168     08 4E 05 F1 | 	add	fp, #8
1d16c     A7 FE 69 FC | 	wrlong	#255, fp
1d170     08 4E 85 F1 | 	sub	fp, #8
1d174                 | LR__2366
1d174     A7 12 02 F6 | 	mov	arg01, fp
1d178     34 F9 BE FD | 	call	#_push
1d17c     A7 F0 03 F6 | 	mov	ptra, fp
1d180     B2 00 A0 FD | 	call	#popregs_
1d184                 | _do_mod_ret
1d184     2D 00 64 FD | 	ret
1d188                 | 
1d188                 | ' 
1d188                 | ' '--------------------------------- mul (*)
1d188                 | ' 
1d188                 | ' sub do_mul
1d188                 | _do_mul
1d188     05 4A 05 F6 | 	mov	COUNT_, #5
1d18c     A8 00 A0 FD | 	call	#pushregs_
1d190     18 F0 07 F1 | 	add	ptra, #24
1d194     80 F8 BE FD | 	call	#_pop
1d198     FD 26 02 F6 | 	mov	local01, result1
1d19c     FE 28 02 F6 | 	mov	local02, result2
1d1a0     FF 2A 02 F6 | 	mov	local03, result3
1d1a4     0C 4E 05 F1 | 	add	fp, #12
1d1a8     A7 26 62 FC | 	wrlong	local01, fp
1d1ac     04 4E 05 F1 | 	add	fp, #4
1d1b0     A7 28 62 FC | 	wrlong	local02, fp
1d1b4     04 4E 05 F1 | 	add	fp, #4
1d1b8     A7 2A 62 FC | 	wrlong	local03, fp
1d1bc     14 4E 85 F1 | 	sub	fp, #20
1d1c0     54 F8 BE FD | 	call	#_pop
1d1c4     FF 2A 02 F6 | 	mov	local03, result3
1d1c8     A7 FA 61 FC | 	wrlong	result1, fp
1d1cc     04 4E 05 F1 | 	add	fp, #4
1d1d0     A7 FC 61 FC | 	wrlong	result2, fp
1d1d4     04 4E 05 F1 | 	add	fp, #4
1d1d8     A7 2A 62 FC | 	wrlong	local03, fp
1d1dc                 | ' 
1d1dc                 | ' t2=pop()
1d1dc                 | ' t1=pop()
1d1dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1d1dc     08 4E 85 F1 | 	sub	fp, #8
1d1e0     1D 2A 0E F2 | 	cmp	local03, #29 wz
1d1e4     14 4E 05 A1 |  if_e	add	fp, #20
1d1e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d1ec     14 4E 85 A1 |  if_e	sub	fp, #20
1d1f0     16 2B 02 A6 |  if_e	mov	local03, local04
1d1f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d1f8     20 00 90 5D |  if_ne	jmp	#LR__2370
1d1fc     A7 28 02 FB | 	rdlong	local02, fp
1d200     0C 4E 05 F1 | 	add	fp, #12
1d204     A7 2A 02 FB | 	rdlong	local03, fp
1d208     15 29 02 FD | 	qmul	local02, local03
1d20c     0C 4E 85 F1 | 	sub	fp, #12
1d210     18 26 62 FD | 	getqx	local01
1d214     A7 26 62 FC | 	wrlong	local01, fp
1d218     C4 02 90 FD | 	jmp	#LR__2379
1d21c                 | LR__2370
1d21c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1d21c     08 4E 05 F1 | 	add	fp, #8
1d220     A7 26 02 FB | 	rdlong	local01, fp
1d224     08 4E 85 F1 | 	sub	fp, #8
1d228     1D 26 0E F2 | 	cmp	local01, #29 wz
1d22c     14 4E 05 A1 |  if_e	add	fp, #20
1d230     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d234     14 4E 85 A1 |  if_e	sub	fp, #20
1d238     16 2B 02 A6 |  if_e	mov	local03, local04
1d23c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d240     2C 00 90 5D |  if_ne	jmp	#LR__2371
1d244     A7 28 02 FB | 	rdlong	local02, fp
1d248     0C 4E 05 F1 | 	add	fp, #12
1d24c     A7 2A 02 FB | 	rdlong	local03, fp
1d250     15 29 02 FD | 	qmul	local02, local03
1d254     0C 4E 85 F1 | 	sub	fp, #12
1d258     18 26 62 FD | 	getqx	local01
1d25c     A7 26 62 FC | 	wrlong	local01, fp
1d260     08 4E 05 F1 | 	add	fp, #8
1d264     A7 38 68 FC | 	wrlong	#28, fp
1d268     08 4E 85 F1 | 	sub	fp, #8
1d26c     70 02 90 FD | 	jmp	#LR__2379
1d270                 | LR__2371
1d270                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1d270     08 4E 05 F1 | 	add	fp, #8
1d274     A7 26 02 FB | 	rdlong	local01, fp
1d278     08 4E 85 F1 | 	sub	fp, #8
1d27c     1D 26 0E F2 | 	cmp	local01, #29 wz
1d280     14 4E 05 A1 |  if_e	add	fp, #20
1d284     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d288     14 4E 85 A1 |  if_e	sub	fp, #20
1d28c     16 2B 02 A6 |  if_e	mov	local03, local04
1d290     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d294     30 00 90 5D |  if_ne	jmp	#LR__2372
1d298     A7 12 02 FB | 	rdlong	arg01, fp
1d29c     E8 94 B0 FD | 	call	#__system___float_fromuns
1d2a0     FD 12 02 F6 | 	mov	arg01, result1
1d2a4     0C 4E 05 F1 | 	add	fp, #12
1d2a8     A7 14 02 FB | 	rdlong	arg02, fp
1d2ac     0C 4E 85 F1 | 	sub	fp, #12
1d2b0     D8 98 B0 FD | 	call	#__system___float_mul
1d2b4     A7 FA 61 FC | 	wrlong	result1, fp
1d2b8     08 4E 05 F1 | 	add	fp, #8
1d2bc     A7 3C 68 FC | 	wrlong	#30, fp
1d2c0     08 4E 85 F1 | 	sub	fp, #8
1d2c4     18 02 90 FD | 	jmp	#LR__2379
1d2c8                 | LR__2372
1d2c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1d2c8     08 4E 05 F1 | 	add	fp, #8
1d2cc     A7 26 02 FB | 	rdlong	local01, fp
1d2d0     08 4E 85 F1 | 	sub	fp, #8
1d2d4     1C 26 0E F2 | 	cmp	local01, #28 wz
1d2d8     14 4E 05 A1 |  if_e	add	fp, #20
1d2dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d2e0     14 4E 85 A1 |  if_e	sub	fp, #20
1d2e4     16 2B 02 A6 |  if_e	mov	local03, local04
1d2e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d2ec     20 00 90 5D |  if_ne	jmp	#LR__2373
1d2f0     A7 28 02 FB | 	rdlong	local02, fp
1d2f4     0C 4E 05 F1 | 	add	fp, #12
1d2f8     A7 2A 02 FB | 	rdlong	local03, fp
1d2fc     15 29 02 FD | 	qmul	local02, local03
1d300     0C 4E 85 F1 | 	sub	fp, #12
1d304     18 26 62 FD | 	getqx	local01
1d308     A7 26 62 FC | 	wrlong	local01, fp
1d30c     D0 01 90 FD | 	jmp	#LR__2379
1d310                 | LR__2373
1d310                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1d310     08 4E 05 F1 | 	add	fp, #8
1d314     A7 26 02 FB | 	rdlong	local01, fp
1d318     08 4E 85 F1 | 	sub	fp, #8
1d31c     1C 26 0E F2 | 	cmp	local01, #28 wz
1d320     14 4E 05 A1 |  if_e	add	fp, #20
1d324     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d328     14 4E 85 A1 |  if_e	sub	fp, #20
1d32c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1d330     20 00 90 5D |  if_ne	jmp	#LR__2374
1d334     A7 28 02 FB | 	rdlong	local02, fp
1d338     0C 4E 05 F1 | 	add	fp, #12
1d33c     A7 2A 02 FB | 	rdlong	local03, fp
1d340     15 29 02 FD | 	qmul	local02, local03
1d344     0C 4E 85 F1 | 	sub	fp, #12
1d348     18 26 62 FD | 	getqx	local01
1d34c     A7 26 62 FC | 	wrlong	local01, fp
1d350     8C 01 90 FD | 	jmp	#LR__2379
1d354                 | LR__2374
1d354                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1d354     08 4E 05 F1 | 	add	fp, #8
1d358     A7 26 02 FB | 	rdlong	local01, fp
1d35c     08 4E 85 F1 | 	sub	fp, #8
1d360     1C 26 0E F2 | 	cmp	local01, #28 wz
1d364     14 4E 05 A1 |  if_e	add	fp, #20
1d368     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d36c     14 4E 85 A1 |  if_e	sub	fp, #20
1d370     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d374     40 00 90 5D |  if_ne	jmp	#LR__2375
1d378     A7 12 02 FB | 	rdlong	arg01, fp
1d37c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d380     1F 2E C6 C9 |  if_b	decod	local05, #31
1d384     00 2E 06 36 |  if_ae	mov	local05, #0
1d388     FC 93 B0 FD | 	call	#__system___float_fromuns
1d38c     17 FB 61 F5 | 	xor	result1, local05
1d390     FD 12 02 F6 | 	mov	arg01, result1
1d394     0C 4E 05 F1 | 	add	fp, #12
1d398     A7 14 02 FB | 	rdlong	arg02, fp
1d39c     0C 4E 85 F1 | 	sub	fp, #12
1d3a0     E8 97 B0 FD | 	call	#__system___float_mul
1d3a4     A7 FA 61 FC | 	wrlong	result1, fp
1d3a8     08 4E 05 F1 | 	add	fp, #8
1d3ac     A7 3C 68 FC | 	wrlong	#30, fp
1d3b0     08 4E 85 F1 | 	sub	fp, #8
1d3b4     28 01 90 FD | 	jmp	#LR__2379
1d3b8                 | LR__2375
1d3b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1d3b8     08 4E 05 F1 | 	add	fp, #8
1d3bc     A7 26 02 FB | 	rdlong	local01, fp
1d3c0     08 4E 85 F1 | 	sub	fp, #8
1d3c4     1E 26 0E F2 | 	cmp	local01, #30 wz
1d3c8     14 4E 05 A1 |  if_e	add	fp, #20
1d3cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d3d0     14 4E 85 A1 |  if_e	sub	fp, #20
1d3d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d3d8     28 00 90 5D |  if_ne	jmp	#LR__2376
1d3dc     A7 26 02 FB | 	rdlong	local01, fp
1d3e0     0C 4E 05 F1 | 	add	fp, #12
1d3e4     A7 12 02 FB | 	rdlong	arg01, fp
1d3e8     0C 4E 85 F1 | 	sub	fp, #12
1d3ec     98 93 B0 FD | 	call	#__system___float_fromuns
1d3f0     FD 14 02 F6 | 	mov	arg02, result1
1d3f4     13 13 02 F6 | 	mov	arg01, local01
1d3f8     90 97 B0 FD | 	call	#__system___float_mul
1d3fc     A7 FA 61 FC | 	wrlong	result1, fp
1d400     DC 00 90 FD | 	jmp	#LR__2379
1d404                 | LR__2376
1d404                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1d404     08 4E 05 F1 | 	add	fp, #8
1d408     A7 26 02 FB | 	rdlong	local01, fp
1d40c     08 4E 85 F1 | 	sub	fp, #8
1d410     1E 26 0E F2 | 	cmp	local01, #30 wz
1d414     14 4E 05 A1 |  if_e	add	fp, #20
1d418     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d41c     14 4E 85 A1 |  if_e	sub	fp, #20
1d420     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d424     38 00 90 5D |  if_ne	jmp	#LR__2377
1d428     A7 26 02 FB | 	rdlong	local01, fp
1d42c     0C 4E 05 F1 | 	add	fp, #12
1d430     A7 12 02 FB | 	rdlong	arg01, fp
1d434     0C 4E 85 F1 | 	sub	fp, #12
1d438     09 13 52 F6 | 	abs	arg01, arg01 wc
1d43c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d440     00 2E 06 36 |  if_ae	mov	local05, #0
1d444     40 93 B0 FD | 	call	#__system___float_fromuns
1d448     17 FB 61 F5 | 	xor	result1, local05
1d44c     FD 14 02 F6 | 	mov	arg02, result1
1d450     13 13 02 F6 | 	mov	arg01, local01
1d454     34 97 B0 FD | 	call	#__system___float_mul
1d458     A7 FA 61 FC | 	wrlong	result1, fp
1d45c     80 00 90 FD | 	jmp	#LR__2379
1d460                 | LR__2377
1d460                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1d460     08 4E 05 F1 | 	add	fp, #8
1d464     A7 26 02 FB | 	rdlong	local01, fp
1d468     08 4E 85 F1 | 	sub	fp, #8
1d46c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d470     14 4E 05 A1 |  if_e	add	fp, #20
1d474     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d478     14 4E 85 A1 |  if_e	sub	fp, #20
1d47c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d480     1C 00 90 5D |  if_ne	jmp	#LR__2378
1d484     A7 12 02 FB | 	rdlong	arg01, fp
1d488     0C 4E 05 F1 | 	add	fp, #12
1d48c     A7 14 02 FB | 	rdlong	arg02, fp
1d490     0C 4E 85 F1 | 	sub	fp, #12
1d494     F4 96 B0 FD | 	call	#__system___float_mul
1d498     A7 FA 61 FC | 	wrlong	result1, fp
1d49c     40 00 90 FD | 	jmp	#LR__2379
1d4a0                 | LR__2378
1d4a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1d4a0     08 4E 05 F1 | 	add	fp, #8
1d4a4     A7 26 02 FB | 	rdlong	local01, fp
1d4a8     08 4E 85 F1 | 	sub	fp, #8
1d4ac     1F 26 0E F2 | 	cmp	local01, #31 wz
1d4b0     14 4E 05 51 |  if_ne	add	fp, #20
1d4b4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d4b8     14 4E 85 51 |  if_ne	sub	fp, #20
1d4bc     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1d4c0     A7 10 68 AC |  if_e	wrlong	#8, fp
1d4c4     08 4E 05 A1 |  if_e	add	fp, #8
1d4c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d4cc     08 4E 85 A1 |  if_e	sub	fp, #8
1d4d0     A7 12 68 5C |  if_ne	wrlong	#9, fp
1d4d4     08 4E 05 51 |  if_ne	add	fp, #8
1d4d8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1d4dc     08 4E 85 51 |  if_ne	sub	fp, #8
1d4e0                 | LR__2379
1d4e0     A7 12 02 F6 | 	mov	arg01, fp
1d4e4     C8 F5 BE FD | 	call	#_push
1d4e8     A7 F0 03 F6 | 	mov	ptra, fp
1d4ec     B2 00 A0 FD | 	call	#popregs_
1d4f0                 | _do_mul_ret
1d4f0     2D 00 64 FD | 	ret
1d4f4                 | 
1d4f4                 | ' 
1d4f4                 | ' '--------------------------------- not equal (<>)
1d4f4                 | ' 
1d4f4                 | ' sub do_ne
1d4f4                 | _do_ne
1d4f4     05 4A 05 F6 | 	mov	COUNT_, #5
1d4f8     A8 00 A0 FD | 	call	#pushregs_
1d4fc     18 F0 07 F1 | 	add	ptra, #24
1d500     14 F5 BE FD | 	call	#_pop
1d504     FD 26 02 F6 | 	mov	local01, result1
1d508     FE 28 02 F6 | 	mov	local02, result2
1d50c     FF 2A 02 F6 | 	mov	local03, result3
1d510     0C 4E 05 F1 | 	add	fp, #12
1d514     A7 26 62 FC | 	wrlong	local01, fp
1d518     04 4E 05 F1 | 	add	fp, #4
1d51c     A7 28 62 FC | 	wrlong	local02, fp
1d520     04 4E 05 F1 | 	add	fp, #4
1d524     A7 2A 62 FC | 	wrlong	local03, fp
1d528     14 4E 85 F1 | 	sub	fp, #20
1d52c     E8 F4 BE FD | 	call	#_pop
1d530     FF 2A 02 F6 | 	mov	local03, result3
1d534     A7 FA 61 FC | 	wrlong	result1, fp
1d538     04 4E 05 F1 | 	add	fp, #4
1d53c     A7 FC 61 FC | 	wrlong	result2, fp
1d540     04 4E 05 F1 | 	add	fp, #4
1d544     A7 2A 62 FC | 	wrlong	local03, fp
1d548                 | ' 
1d548                 | ' t2=pop()
1d548                 | ' t1=pop()
1d548                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1d548     08 4E 85 F1 | 	sub	fp, #8
1d54c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d550     14 4E 05 A1 |  if_e	add	fp, #20
1d554     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d558     14 4E 85 A1 |  if_e	sub	fp, #20
1d55c     16 2B 02 A6 |  if_e	mov	local03, local04
1d560     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d564     28 00 90 5D |  if_ne	jmp	#LR__2380
1d568     00 26 06 F6 | 	mov	local01, #0
1d56c     A7 12 02 FB | 	rdlong	arg01, fp
1d570     0C 4E 05 F1 | 	add	fp, #12
1d574     A7 14 02 FB | 	rdlong	arg02, fp
1d578     0C 4E 85 F1 | 	sub	fp, #12
1d57c     BC 67 B0 FD | 	call	#__system___string_cmp
1d580     00 FA 0D F2 | 	cmp	result1, #0 wz
1d584     00 26 26 56 |  if_ne	not	local01, #0
1d588     A7 26 62 FC | 	wrlong	local01, fp
1d58c     20 04 90 FD | 	jmp	#LR__2393
1d590                 | LR__2380
1d590                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1d590     08 4E 05 F1 | 	add	fp, #8
1d594     A7 26 02 FB | 	rdlong	local01, fp
1d598     08 4E 85 F1 | 	sub	fp, #8
1d59c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d5a0     14 4E 05 A1 |  if_e	add	fp, #20
1d5a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d5a8     14 4E 85 A1 |  if_e	sub	fp, #20
1d5ac     16 2B 02 A6 |  if_e	mov	local03, local04
1d5b0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d5b4     2C 00 90 5D |  if_ne	jmp	#LR__2381
1d5b8     00 26 06 F6 | 	mov	local01, #0
1d5bc     A7 12 02 FB | 	rdlong	arg01, fp
1d5c0     0C 4E 05 F1 | 	add	fp, #12
1d5c4     A7 14 02 FB | 	rdlong	arg02, fp
1d5c8     0C 4E 85 F1 | 	sub	fp, #12
1d5cc     01 16 06 F6 | 	mov	arg03, #1
1d5d0     EC 99 B0 FD | 	call	#__system___float_cmp
1d5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d5d8     00 26 26 56 |  if_ne	not	local01, #0
1d5dc     A7 26 62 FC | 	wrlong	local01, fp
1d5e0     CC 03 90 FD | 	jmp	#LR__2393
1d5e4                 | LR__2381
1d5e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1d5e4     08 4E 05 F1 | 	add	fp, #8
1d5e8     A7 26 02 FB | 	rdlong	local01, fp
1d5ec     08 4E 85 F1 | 	sub	fp, #8
1d5f0     1E 26 0E F2 | 	cmp	local01, #30 wz
1d5f4     14 4E 05 A1 |  if_e	add	fp, #20
1d5f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d5fc     14 4E 85 A1 |  if_e	sub	fp, #20
1d600     16 2B 02 A6 |  if_e	mov	local03, local04
1d604     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d608     48 00 90 5D |  if_ne	jmp	#LR__2382
1d60c     00 26 06 F6 | 	mov	local01, #0
1d610     A7 28 02 FB | 	rdlong	local02, fp
1d614     0C 4E 05 F1 | 	add	fp, #12
1d618     A7 12 02 FB | 	rdlong	arg01, fp
1d61c     0C 4E 85 F1 | 	sub	fp, #12
1d620     09 13 52 F6 | 	abs	arg01, arg01 wc
1d624     1F 2E C6 C9 |  if_b	decod	local05, #31
1d628     00 2E 06 36 |  if_ae	mov	local05, #0
1d62c     58 91 B0 FD | 	call	#__system___float_fromuns
1d630     17 FB 61 F5 | 	xor	result1, local05
1d634     FD 14 02 F6 | 	mov	arg02, result1
1d638     14 13 02 F6 | 	mov	arg01, local02
1d63c     01 16 06 F6 | 	mov	arg03, #1
1d640     7C 99 B0 FD | 	call	#__system___float_cmp
1d644     00 FA 0D F2 | 	cmp	result1, #0 wz
1d648     00 26 26 56 |  if_ne	not	local01, #0
1d64c     A7 26 62 FC | 	wrlong	local01, fp
1d650     5C 03 90 FD | 	jmp	#LR__2393
1d654                 | LR__2382
1d654                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1d654     08 4E 05 F1 | 	add	fp, #8
1d658     A7 26 02 FB | 	rdlong	local01, fp
1d65c     08 4E 85 F1 | 	sub	fp, #8
1d660     1E 26 0E F2 | 	cmp	local01, #30 wz
1d664     14 4E 05 A1 |  if_e	add	fp, #20
1d668     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d66c     14 4E 85 A1 |  if_e	sub	fp, #20
1d670     16 2B 02 A6 |  if_e	mov	local03, local04
1d674     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d678     38 00 90 5D |  if_ne	jmp	#LR__2383
1d67c     00 26 06 F6 | 	mov	local01, #0
1d680     A7 28 02 FB | 	rdlong	local02, fp
1d684     0C 4E 05 F1 | 	add	fp, #12
1d688     A7 12 02 FB | 	rdlong	arg01, fp
1d68c     0C 4E 85 F1 | 	sub	fp, #12
1d690     F4 90 B0 FD | 	call	#__system___float_fromuns
1d694     FD 14 02 F6 | 	mov	arg02, result1
1d698     14 13 02 F6 | 	mov	arg01, local02
1d69c     01 16 06 F6 | 	mov	arg03, #1
1d6a0     1C 99 B0 FD | 	call	#__system___float_cmp
1d6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d6a8     00 26 26 56 |  if_ne	not	local01, #0
1d6ac     A7 26 62 FC | 	wrlong	local01, fp
1d6b0     FC 02 90 FD | 	jmp	#LR__2393
1d6b4                 | LR__2383
1d6b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1d6b4     08 4E 05 F1 | 	add	fp, #8
1d6b8     A7 26 02 FB | 	rdlong	local01, fp
1d6bc     08 4E 85 F1 | 	sub	fp, #8
1d6c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1d6c4     14 4E 05 A1 |  if_e	add	fp, #20
1d6c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d6cc     14 4E 85 A1 |  if_e	sub	fp, #20
1d6d0     16 2B 02 A6 |  if_e	mov	local03, local04
1d6d4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d6d8     44 00 90 5D |  if_ne	jmp	#LR__2384
1d6dc     00 26 06 F6 | 	mov	local01, #0
1d6e0     A7 12 02 FB | 	rdlong	arg01, fp
1d6e4     09 13 52 F6 | 	abs	arg01, arg01 wc
1d6e8     1F 2E C6 C9 |  if_b	decod	local05, #31
1d6ec     00 2E 06 36 |  if_ae	mov	local05, #0
1d6f0     94 90 B0 FD | 	call	#__system___float_fromuns
1d6f4     17 FB 61 F5 | 	xor	result1, local05
1d6f8     FD 12 02 F6 | 	mov	arg01, result1
1d6fc     0C 4E 05 F1 | 	add	fp, #12
1d700     A7 14 02 FB | 	rdlong	arg02, fp
1d704     0C 4E 85 F1 | 	sub	fp, #12
1d708     01 16 06 F6 | 	mov	arg03, #1
1d70c     B0 98 B0 FD | 	call	#__system___float_cmp
1d710     00 FA 0D F2 | 	cmp	result1, #0 wz
1d714     00 26 26 56 |  if_ne	not	local01, #0
1d718     A7 26 62 FC | 	wrlong	local01, fp
1d71c     90 02 90 FD | 	jmp	#LR__2393
1d720                 | LR__2384
1d720                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1d720     08 4E 05 F1 | 	add	fp, #8
1d724     A7 26 02 FB | 	rdlong	local01, fp
1d728     08 4E 85 F1 | 	sub	fp, #8
1d72c     1C 26 0E F2 | 	cmp	local01, #28 wz
1d730     14 4E 05 A1 |  if_e	add	fp, #20
1d734     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d738     14 4E 85 A1 |  if_e	sub	fp, #20
1d73c     16 2B 02 A6 |  if_e	mov	local03, local04
1d740     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d744     24 00 90 5D |  if_ne	jmp	#LR__2385
1d748     00 26 06 F6 | 	mov	local01, #0
1d74c     A7 28 02 FB | 	rdlong	local02, fp
1d750     0C 4E 05 F1 | 	add	fp, #12
1d754     A7 2A 02 FB | 	rdlong	local03, fp
1d758     0C 4E 85 F1 | 	sub	fp, #12
1d75c     15 29 0A F2 | 	cmp	local02, local03 wz
1d760     01 26 66 56 |  if_ne	neg	local01, #1
1d764     A7 26 62 FC | 	wrlong	local01, fp
1d768     44 02 90 FD | 	jmp	#LR__2393
1d76c                 | LR__2385
1d76c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1d76c     08 4E 05 F1 | 	add	fp, #8
1d770     A7 26 02 FB | 	rdlong	local01, fp
1d774     08 4E 85 F1 | 	sub	fp, #8
1d778     1C 26 0E F2 | 	cmp	local01, #28 wz
1d77c     14 4E 05 A1 |  if_e	add	fp, #20
1d780     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d784     14 4E 85 A1 |  if_e	sub	fp, #20
1d788     16 2B 02 A6 |  if_e	mov	local03, local04
1d78c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d790     24 00 90 5D |  if_ne	jmp	#LR__2386
1d794     00 26 06 F6 | 	mov	local01, #0
1d798     A7 28 02 FB | 	rdlong	local02, fp
1d79c     0C 4E 05 F1 | 	add	fp, #12
1d7a0     A7 2A 02 FB | 	rdlong	local03, fp
1d7a4     0C 4E 85 F1 | 	sub	fp, #12
1d7a8     15 29 0A F2 | 	cmp	local02, local03 wz
1d7ac     01 26 66 56 |  if_ne	neg	local01, #1
1d7b0     A7 26 62 FC | 	wrlong	local01, fp
1d7b4     F8 01 90 FD | 	jmp	#LR__2393
1d7b8                 | LR__2386
1d7b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1d7b8     08 4E 05 F1 | 	add	fp, #8
1d7bc     A7 26 02 FB | 	rdlong	local01, fp
1d7c0     08 4E 85 F1 | 	sub	fp, #8
1d7c4     1D 26 0E F2 | 	cmp	local01, #29 wz
1d7c8     14 4E 05 A1 |  if_e	add	fp, #20
1d7cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d7d0     14 4E 85 A1 |  if_e	sub	fp, #20
1d7d4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d7d8     34 00 90 5D |  if_ne	jmp	#LR__2387
1d7dc     00 26 06 F6 | 	mov	local01, #0
1d7e0     A7 12 02 FB | 	rdlong	arg01, fp
1d7e4     A0 8F B0 FD | 	call	#__system___float_fromuns
1d7e8     FD 12 02 F6 | 	mov	arg01, result1
1d7ec     0C 4E 05 F1 | 	add	fp, #12
1d7f0     A7 14 02 FB | 	rdlong	arg02, fp
1d7f4     0C 4E 85 F1 | 	sub	fp, #12
1d7f8     01 16 06 F6 | 	mov	arg03, #1
1d7fc     C0 97 B0 FD | 	call	#__system___float_cmp
1d800     00 FA 0D F2 | 	cmp	result1, #0 wz
1d804     00 26 26 56 |  if_ne	not	local01, #0
1d808     A7 26 62 FC | 	wrlong	local01, fp
1d80c     A0 01 90 FD | 	jmp	#LR__2393
1d810                 | LR__2387
1d810                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1d810     08 4E 05 F1 | 	add	fp, #8
1d814     A7 26 02 FB | 	rdlong	local01, fp
1d818     08 4E 85 F1 | 	sub	fp, #8
1d81c     1D 26 0E F2 | 	cmp	local01, #29 wz
1d820     14 4E 05 A1 |  if_e	add	fp, #20
1d824     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d828     14 4E 85 A1 |  if_e	sub	fp, #20
1d82c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d830     24 00 90 5D |  if_ne	jmp	#LR__2388
1d834     00 26 06 F6 | 	mov	local01, #0
1d838     A7 28 02 FB | 	rdlong	local02, fp
1d83c     0C 4E 05 F1 | 	add	fp, #12
1d840     A7 2A 02 FB | 	rdlong	local03, fp
1d844     0C 4E 85 F1 | 	sub	fp, #12
1d848     15 29 0A F2 | 	cmp	local02, local03 wz
1d84c     01 26 66 56 |  if_ne	neg	local01, #1
1d850     A7 26 62 FC | 	wrlong	local01, fp
1d854     58 01 90 FD | 	jmp	#LR__2393
1d858                 | LR__2388
1d858                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1d858     08 4E 05 F1 | 	add	fp, #8
1d85c     A7 26 02 FB | 	rdlong	local01, fp
1d860     08 4E 85 F1 | 	sub	fp, #8
1d864     1D 26 0E F2 | 	cmp	local01, #29 wz
1d868     14 4E 05 A1 |  if_e	add	fp, #20
1d86c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d870     14 4E 85 A1 |  if_e	sub	fp, #20
1d874     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d878     24 00 90 5D |  if_ne	jmp	#LR__2389
1d87c     00 26 06 F6 | 	mov	local01, #0
1d880     A7 28 02 FB | 	rdlong	local02, fp
1d884     0C 4E 05 F1 | 	add	fp, #12
1d888     A7 2A 02 FB | 	rdlong	local03, fp
1d88c     0C 4E 85 F1 | 	sub	fp, #12
1d890     15 29 0A F2 | 	cmp	local02, local03 wz
1d894     01 26 66 56 |  if_ne	neg	local01, #1
1d898     A7 26 62 FC | 	wrlong	local01, fp
1d89c     10 01 90 FD | 	jmp	#LR__2393
1d8a0                 | LR__2389
1d8a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1d8a0     08 4E 05 F1 | 	add	fp, #8
1d8a4     A7 26 02 FB | 	rdlong	local01, fp
1d8a8     08 4E 85 F1 | 	sub	fp, #8
1d8ac     2B 26 0E F2 | 	cmp	local01, #43 wz
1d8b0     14 4E 05 A1 |  if_e	add	fp, #20
1d8b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d8b8     14 4E 85 A1 |  if_e	sub	fp, #20
1d8bc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d8c0     30 00 90 5D |  if_ne	jmp	#LR__2390
1d8c4     00 26 06 F6 | 	mov	local01, #0
1d8c8     A7 12 02 FB | 	rdlong	arg01, fp
1d8cc     C0 F2 BE FD | 	call	#_convertstring
1d8d0     FD 12 02 F6 | 	mov	arg01, result1
1d8d4     0C 4E 05 F1 | 	add	fp, #12
1d8d8     A7 14 02 FB | 	rdlong	arg02, fp
1d8dc     0C 4E 85 F1 | 	sub	fp, #12
1d8e0     58 64 B0 FD | 	call	#__system___string_cmp
1d8e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d8e8     00 26 26 56 |  if_ne	not	local01, #0
1d8ec     A7 26 62 FC | 	wrlong	local01, fp
1d8f0     BC 00 90 FD | 	jmp	#LR__2393
1d8f4                 | LR__2390
1d8f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1d8f4     08 4E 05 F1 | 	add	fp, #8
1d8f8     A7 26 02 FB | 	rdlong	local01, fp
1d8fc     08 4E 85 F1 | 	sub	fp, #8
1d900     1F 26 0E F2 | 	cmp	local01, #31 wz
1d904     14 4E 05 A1 |  if_e	add	fp, #20
1d908     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d90c     14 4E 85 A1 |  if_e	sub	fp, #20
1d910     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d914     34 00 90 5D |  if_ne	jmp	#LR__2391
1d918     00 26 06 F6 | 	mov	local01, #0
1d91c     A7 28 02 FB | 	rdlong	local02, fp
1d920     0C 4E 05 F1 | 	add	fp, #12
1d924     A7 12 02 FB | 	rdlong	arg01, fp
1d928     0C 4E 85 F1 | 	sub	fp, #12
1d92c     60 F2 BE FD | 	call	#_convertstring
1d930     FD 14 02 F6 | 	mov	arg02, result1
1d934     14 13 02 F6 | 	mov	arg01, local02
1d938     00 64 B0 FD | 	call	#__system___string_cmp
1d93c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d940     00 26 26 56 |  if_ne	not	local01, #0
1d944     A7 26 62 FC | 	wrlong	local01, fp
1d948     64 00 90 FD | 	jmp	#LR__2393
1d94c                 | LR__2391
1d94c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1d94c     08 4E 05 F1 | 	add	fp, #8
1d950     A7 26 02 FB | 	rdlong	local01, fp
1d954     08 4E 85 F1 | 	sub	fp, #8
1d958     2B 26 0E F2 | 	cmp	local01, #43 wz
1d95c     14 4E 05 A1 |  if_e	add	fp, #20
1d960     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d964     14 4E 85 A1 |  if_e	sub	fp, #20
1d968     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d96c     3C 00 90 5D |  if_ne	jmp	#LR__2392
1d970     00 26 06 F6 | 	mov	local01, #0
1d974     A7 12 02 FB | 	rdlong	arg01, fp
1d978     14 F2 BE FD | 	call	#_convertstring
1d97c     FD 28 02 F6 | 	mov	local02, result1
1d980     0C 4E 05 F1 | 	add	fp, #12
1d984     A7 12 02 FB | 	rdlong	arg01, fp
1d988     0C 4E 85 F1 | 	sub	fp, #12
1d98c     00 F2 BE FD | 	call	#_convertstring
1d990     FD 14 02 F6 | 	mov	arg02, result1
1d994     14 13 02 F6 | 	mov	arg01, local02
1d998     A0 63 B0 FD | 	call	#__system___string_cmp
1d99c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d9a0     00 26 26 56 |  if_ne	not	local01, #0
1d9a4     A7 26 62 FC | 	wrlong	local01, fp
1d9a8     04 00 90 FD | 	jmp	#LR__2393
1d9ac                 | LR__2392
1d9ac     A7 00 68 FC | 	wrlong	#0, fp
1d9b0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d9b0                 | LR__2393
1d9b0     08 4E 05 F1 | 	add	fp, #8
1d9b4     A7 38 68 FC | 	wrlong	#28, fp
1d9b8     08 4E 85 F1 | 	sub	fp, #8
1d9bc     A7 12 02 F6 | 	mov	arg01, fp
1d9c0     EC F0 BE FD | 	call	#_push
1d9c4     A7 F0 03 F6 | 	mov	ptra, fp
1d9c8     B2 00 A0 FD | 	call	#popregs_
1d9cc                 | _do_ne_ret
1d9cc     2D 00 64 FD | 	ret
1d9d0                 | 
1d9d0                 | ' 
1d9d0                 | ' '--------------------------------- OR
1d9d0                 | ' 
1d9d0                 | ' sub do_or 
1d9d0                 | _do_or
1d9d0     03 4A 05 F6 | 	mov	COUNT_, #3
1d9d4     A8 00 A0 FD | 	call	#pushregs_
1d9d8     18 F0 07 F1 | 	add	ptra, #24
1d9dc     38 F0 BE FD | 	call	#_pop
1d9e0     FD 12 02 F6 | 	mov	arg01, result1
1d9e4     FE 26 02 F6 | 	mov	local01, result2
1d9e8     FF 28 02 F6 | 	mov	local02, result3
1d9ec     0C 4E 05 F1 | 	add	fp, #12
1d9f0     A7 12 62 FC | 	wrlong	arg01, fp
1d9f4     04 4E 05 F1 | 	add	fp, #4
1d9f8     A7 26 62 FC | 	wrlong	local01, fp
1d9fc     04 4E 05 F1 | 	add	fp, #4
1da00     A7 28 62 FC | 	wrlong	local02, fp
1da04     14 4E 85 F1 | 	sub	fp, #20
1da08     0C F0 BE FD | 	call	#_pop
1da0c     FF 2A 02 F6 | 	mov	local03, result3
1da10     A7 FA 61 FC | 	wrlong	result1, fp
1da14     04 4E 05 F1 | 	add	fp, #4
1da18     A7 FC 61 FC | 	wrlong	result2, fp
1da1c     04 4E 05 F1 | 	add	fp, #4
1da20     A7 2A 62 FC | 	wrlong	local03, fp
1da24                 | ' 
1da24                 | ' t2=pop()
1da24                 | ' t1=pop()
1da24                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1da24     08 4E 85 F1 | 	sub	fp, #8
1da28     1C 2A 0E F2 | 	cmp	local03, #28 wz
1da2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1da30     A7 2A 62 AC |  if_e	wrlong	local03, fp
1da34     08 4E 05 A1 |  if_e	add	fp, #8
1da38     A7 3A 68 AC |  if_e	wrlong	#29, fp
1da3c     08 4E 85 A1 |  if_e	sub	fp, #8
1da40                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1da40     14 4E 05 F1 | 	add	fp, #20
1da44     A7 2A 02 FB | 	rdlong	local03, fp
1da48     14 4E 85 F1 | 	sub	fp, #20
1da4c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1da50     18 00 90 5D |  if_ne	jmp	#LR__2400
1da54     0C 4E 05 F1 | 	add	fp, #12
1da58     A7 2A 02 FB | 	rdlong	local03, fp
1da5c     A7 2A 62 FC | 	wrlong	local03, fp
1da60     08 4E 05 F1 | 	add	fp, #8
1da64     A7 3A 68 FC | 	wrlong	#29, fp
1da68     14 4E 85 F1 | 	sub	fp, #20
1da6c                 | LR__2400
1da6c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1da6c     08 4E 05 F1 | 	add	fp, #8
1da70     A7 2A 02 FB | 	rdlong	local03, fp
1da74     08 4E 85 F1 | 	sub	fp, #8
1da78     1F 2A 0E F2 | 	cmp	local03, #31 wz
1da7c     14 4E 05 51 |  if_ne	add	fp, #20
1da80     A7 28 02 5B |  if_ne	rdlong	local02, fp
1da84     14 4E 85 51 |  if_ne	sub	fp, #20
1da88     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1da8c     08 4E 05 51 |  if_ne	add	fp, #8
1da90     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1da94     08 4E 85 51 |  if_ne	sub	fp, #8
1da98     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1da9c     14 4E 05 51 |  if_ne	add	fp, #20
1daa0     14 4E 85 51 |  if_ne	sub	fp, #20
1daa4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1daa8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1daac     08 4E 05 A1 |  if_e	add	fp, #8
1dab0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1dab4     08 4E 85 A1 |  if_e	sub	fp, #8
1dab8     18 00 90 AD |  if_e	jmp	#LR__2401
1dabc     A7 2A 02 FB | 	rdlong	local03, fp
1dac0     0C 4E 05 F1 | 	add	fp, #12
1dac4     A7 26 02 FB | 	rdlong	local01, fp
1dac8     0C 4E 85 F1 | 	sub	fp, #12
1dacc     13 2B 42 F5 | 	or	local03, local01
1dad0     A7 2A 62 FC | 	wrlong	local03, fp
1dad4                 | LR__2401
1dad4     A7 12 02 F6 | 	mov	arg01, fp
1dad8     D4 EF BE FD | 	call	#_push
1dadc     A7 F0 03 F6 | 	mov	ptra, fp
1dae0     B2 00 A0 FD | 	call	#popregs_
1dae4                 | _do_or_ret
1dae4     2D 00 64 FD | 	ret
1dae8                 | 
1dae8                 | ' 
1dae8                 | ' '--------------------------------- plus (+)
1dae8                 | ' 
1dae8                 | ' sub do_plus 
1dae8                 | _do_plus
1dae8     05 4A 05 F6 | 	mov	COUNT_, #5
1daec     A8 00 A0 FD | 	call	#pushregs_
1daf0     18 F0 07 F1 | 	add	ptra, #24
1daf4     20 EF BE FD | 	call	#_pop
1daf8     FD 26 02 F6 | 	mov	local01, result1
1dafc     FE 28 02 F6 | 	mov	local02, result2
1db00     FF 2A 02 F6 | 	mov	local03, result3
1db04     0C 4E 05 F1 | 	add	fp, #12
1db08     A7 26 62 FC | 	wrlong	local01, fp
1db0c     04 4E 05 F1 | 	add	fp, #4
1db10     A7 28 62 FC | 	wrlong	local02, fp
1db14     04 4E 05 F1 | 	add	fp, #4
1db18     A7 2A 62 FC | 	wrlong	local03, fp
1db1c     14 4E 85 F1 | 	sub	fp, #20
1db20     F4 EE BE FD | 	call	#_pop
1db24     FF 2A 02 F6 | 	mov	local03, result3
1db28     A7 FA 61 FC | 	wrlong	result1, fp
1db2c     04 4E 05 F1 | 	add	fp, #4
1db30     A7 FC 61 FC | 	wrlong	result2, fp
1db34     04 4E 05 F1 | 	add	fp, #4
1db38     A7 2A 62 FC | 	wrlong	local03, fp
1db3c                 | ' 
1db3c                 | ' t2=pop()
1db3c                 | ' t1=pop()
1db3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1db3c     08 4E 85 F1 | 	sub	fp, #8
1db40     1D 2A 0E F2 | 	cmp	local03, #29 wz
1db44     14 4E 05 A1 |  if_e	add	fp, #20
1db48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db4c     14 4E 85 A1 |  if_e	sub	fp, #20
1db50     16 2B 02 A6 |  if_e	mov	local03, local04
1db54     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1db58     1C 00 90 5D |  if_ne	jmp	#LR__2410
1db5c     A7 26 02 FB | 	rdlong	local01, fp
1db60     0C 4E 05 F1 | 	add	fp, #12
1db64     A7 28 02 FB | 	rdlong	local02, fp
1db68     0C 4E 85 F1 | 	sub	fp, #12
1db6c     14 27 02 F1 | 	add	local01, local02
1db70     A7 26 62 FC | 	wrlong	local01, fp
1db74     48 04 90 FD | 	jmp	#LR__2425
1db78                 | LR__2410
1db78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1db78     08 4E 05 F1 | 	add	fp, #8
1db7c     A7 26 02 FB | 	rdlong	local01, fp
1db80     08 4E 85 F1 | 	sub	fp, #8
1db84     1D 26 0E F2 | 	cmp	local01, #29 wz
1db88     14 4E 05 A1 |  if_e	add	fp, #20
1db8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db90     14 4E 85 A1 |  if_e	sub	fp, #20
1db94     16 2B 02 A6 |  if_e	mov	local03, local04
1db98     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1db9c     28 00 90 5D |  if_ne	jmp	#LR__2411
1dba0     A7 26 02 FB | 	rdlong	local01, fp
1dba4     0C 4E 05 F1 | 	add	fp, #12
1dba8     A7 28 02 FB | 	rdlong	local02, fp
1dbac     0C 4E 85 F1 | 	sub	fp, #12
1dbb0     14 27 02 F1 | 	add	local01, local02
1dbb4     A7 26 62 FC | 	wrlong	local01, fp
1dbb8     08 4E 05 F1 | 	add	fp, #8
1dbbc     A7 38 68 FC | 	wrlong	#28, fp
1dbc0     08 4E 85 F1 | 	sub	fp, #8
1dbc4     F8 03 90 FD | 	jmp	#LR__2425
1dbc8                 | LR__2411
1dbc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1dbc8     08 4E 05 F1 | 	add	fp, #8
1dbcc     A7 26 02 FB | 	rdlong	local01, fp
1dbd0     08 4E 85 F1 | 	sub	fp, #8
1dbd4     1D 26 0E F2 | 	cmp	local01, #29 wz
1dbd8     14 4E 05 A1 |  if_e	add	fp, #20
1dbdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dbe0     14 4E 85 A1 |  if_e	sub	fp, #20
1dbe4     16 2B 02 A6 |  if_e	mov	local03, local04
1dbe8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dbec     30 00 90 5D |  if_ne	jmp	#LR__2412
1dbf0     A7 12 02 FB | 	rdlong	arg01, fp
1dbf4     90 8B B0 FD | 	call	#__system___float_fromuns
1dbf8     FD 12 02 F6 | 	mov	arg01, result1
1dbfc     0C 4E 05 F1 | 	add	fp, #12
1dc00     A7 14 02 FB | 	rdlong	arg02, fp
1dc04     0C 4E 85 F1 | 	sub	fp, #12
1dc08     B0 8B B0 FD | 	call	#__system___float_add
1dc0c     A7 FA 61 FC | 	wrlong	result1, fp
1dc10     08 4E 05 F1 | 	add	fp, #8
1dc14     A7 3C 68 FC | 	wrlong	#30, fp
1dc18     08 4E 85 F1 | 	sub	fp, #8
1dc1c     A0 03 90 FD | 	jmp	#LR__2425
1dc20                 | LR__2412
1dc20                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1dc20     08 4E 05 F1 | 	add	fp, #8
1dc24     A7 26 02 FB | 	rdlong	local01, fp
1dc28     08 4E 85 F1 | 	sub	fp, #8
1dc2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1dc30     14 4E 05 A1 |  if_e	add	fp, #20
1dc34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc38     14 4E 85 A1 |  if_e	sub	fp, #20
1dc3c     16 2B 02 A6 |  if_e	mov	local03, local04
1dc40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dc44     1C 00 90 5D |  if_ne	jmp	#LR__2413
1dc48     A7 26 02 FB | 	rdlong	local01, fp
1dc4c     0C 4E 05 F1 | 	add	fp, #12
1dc50     A7 28 02 FB | 	rdlong	local02, fp
1dc54     0C 4E 85 F1 | 	sub	fp, #12
1dc58     14 27 02 F1 | 	add	local01, local02
1dc5c     A7 26 62 FC | 	wrlong	local01, fp
1dc60     5C 03 90 FD | 	jmp	#LR__2425
1dc64                 | LR__2413
1dc64                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1dc64     08 4E 05 F1 | 	add	fp, #8
1dc68     A7 26 02 FB | 	rdlong	local01, fp
1dc6c     08 4E 85 F1 | 	sub	fp, #8
1dc70     1C 26 0E F2 | 	cmp	local01, #28 wz
1dc74     14 4E 05 A1 |  if_e	add	fp, #20
1dc78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc7c     14 4E 85 A1 |  if_e	sub	fp, #20
1dc80     16 2B 02 A6 |  if_e	mov	local03, local04
1dc84     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dc88     1C 00 90 5D |  if_ne	jmp	#LR__2414
1dc8c     A7 26 02 FB | 	rdlong	local01, fp
1dc90     0C 4E 05 F1 | 	add	fp, #12
1dc94     A7 28 02 FB | 	rdlong	local02, fp
1dc98     0C 4E 85 F1 | 	sub	fp, #12
1dc9c     14 27 02 F1 | 	add	local01, local02
1dca0     A7 26 62 FC | 	wrlong	local01, fp
1dca4     18 03 90 FD | 	jmp	#LR__2425
1dca8                 | LR__2414
1dca8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1dca8     08 4E 05 F1 | 	add	fp, #8
1dcac     A7 26 02 FB | 	rdlong	local01, fp
1dcb0     08 4E 85 F1 | 	sub	fp, #8
1dcb4     1C 26 0E F2 | 	cmp	local01, #28 wz
1dcb8     14 4E 05 A1 |  if_e	add	fp, #20
1dcbc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcc0     14 4E 85 A1 |  if_e	sub	fp, #20
1dcc4     16 2B 02 A6 |  if_e	mov	local03, local04
1dcc8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dccc     40 00 90 5D |  if_ne	jmp	#LR__2415
1dcd0     A7 12 02 FB | 	rdlong	arg01, fp
1dcd4     09 13 52 F6 | 	abs	arg01, arg01 wc
1dcd8     1F 2E C6 C9 |  if_b	decod	local05, #31
1dcdc     00 2E 06 36 |  if_ae	mov	local05, #0
1dce0     A4 8A B0 FD | 	call	#__system___float_fromuns
1dce4     17 FB 61 F5 | 	xor	result1, local05
1dce8     FD 12 02 F6 | 	mov	arg01, result1
1dcec     0C 4E 05 F1 | 	add	fp, #12
1dcf0     A7 14 02 FB | 	rdlong	arg02, fp
1dcf4     0C 4E 85 F1 | 	sub	fp, #12
1dcf8     C0 8A B0 FD | 	call	#__system___float_add
1dcfc     A7 FA 61 FC | 	wrlong	result1, fp
1dd00     08 4E 05 F1 | 	add	fp, #8
1dd04     A7 3C 68 FC | 	wrlong	#30, fp
1dd08     08 4E 85 F1 | 	sub	fp, #8
1dd0c     B0 02 90 FD | 	jmp	#LR__2425
1dd10                 | LR__2415
1dd10                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1dd10     08 4E 05 F1 | 	add	fp, #8
1dd14     A7 26 02 FB | 	rdlong	local01, fp
1dd18     08 4E 85 F1 | 	sub	fp, #8
1dd1c     1E 26 0E F2 | 	cmp	local01, #30 wz
1dd20     14 4E 05 A1 |  if_e	add	fp, #20
1dd24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd28     14 4E 85 A1 |  if_e	sub	fp, #20
1dd2c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd30     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dd34     28 00 90 5D |  if_ne	jmp	#LR__2416
1dd38     A7 26 02 FB | 	rdlong	local01, fp
1dd3c     0C 4E 05 F1 | 	add	fp, #12
1dd40     A7 12 02 FB | 	rdlong	arg01, fp
1dd44     0C 4E 85 F1 | 	sub	fp, #12
1dd48     3C 8A B0 FD | 	call	#__system___float_fromuns
1dd4c     FD 14 02 F6 | 	mov	arg02, result1
1dd50     13 13 02 F6 | 	mov	arg01, local01
1dd54     64 8A B0 FD | 	call	#__system___float_add
1dd58     A7 FA 61 FC | 	wrlong	result1, fp
1dd5c     60 02 90 FD | 	jmp	#LR__2425
1dd60                 | LR__2416
1dd60                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1dd60     08 4E 05 F1 | 	add	fp, #8
1dd64     A7 26 02 FB | 	rdlong	local01, fp
1dd68     08 4E 85 F1 | 	sub	fp, #8
1dd6c     1E 26 0E F2 | 	cmp	local01, #30 wz
1dd70     14 4E 05 A1 |  if_e	add	fp, #20
1dd74     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd78     14 4E 85 A1 |  if_e	sub	fp, #20
1dd7c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd80     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd84     38 00 90 5D |  if_ne	jmp	#LR__2417
1dd88     A7 26 02 FB | 	rdlong	local01, fp
1dd8c     0C 4E 05 F1 | 	add	fp, #12
1dd90     A7 12 02 FB | 	rdlong	arg01, fp
1dd94     0C 4E 85 F1 | 	sub	fp, #12
1dd98     09 13 52 F6 | 	abs	arg01, arg01 wc
1dd9c     1F 2E C6 C9 |  if_b	decod	local05, #31
1dda0     00 2E 06 36 |  if_ae	mov	local05, #0
1dda4     E0 89 B0 FD | 	call	#__system___float_fromuns
1dda8     17 FB 61 F5 | 	xor	result1, local05
1ddac     FD 14 02 F6 | 	mov	arg02, result1
1ddb0     13 13 02 F6 | 	mov	arg01, local01
1ddb4     04 8A B0 FD | 	call	#__system___float_add
1ddb8     A7 FA 61 FC | 	wrlong	result1, fp
1ddbc     00 02 90 FD | 	jmp	#LR__2425
1ddc0                 | LR__2417
1ddc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1ddc0     08 4E 05 F1 | 	add	fp, #8
1ddc4     A7 26 02 FB | 	rdlong	local01, fp
1ddc8     08 4E 85 F1 | 	sub	fp, #8
1ddcc     1E 26 0E F2 | 	cmp	local01, #30 wz
1ddd0     14 4E 05 A1 |  if_e	add	fp, #20
1ddd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddd8     14 4E 85 A1 |  if_e	sub	fp, #20
1dddc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1dde0     1C 00 90 5D |  if_ne	jmp	#LR__2418
1dde4     A7 12 02 FB | 	rdlong	arg01, fp
1dde8     0C 4E 05 F1 | 	add	fp, #12
1ddec     A7 14 02 FB | 	rdlong	arg02, fp
1ddf0     0C 4E 85 F1 | 	sub	fp, #12
1ddf4     C4 89 B0 FD | 	call	#__system___float_add
1ddf8     A7 FA 61 FC | 	wrlong	result1, fp
1ddfc     C0 01 90 FD | 	jmp	#LR__2425
1de00                 | LR__2418
1de00                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1de00     08 4E 05 F1 | 	add	fp, #8
1de04     A7 26 02 FB | 	rdlong	local01, fp
1de08     08 4E 85 F1 | 	sub	fp, #8
1de0c     1F 26 0E F2 | 	cmp	local01, #31 wz
1de10     24 00 90 5D |  if_ne	jmp	#LR__2419
1de14     14 4E 05 F1 | 	add	fp, #20
1de18     A7 2A 02 FB | 	rdlong	local03, fp
1de1c     14 4E 85 F1 | 	sub	fp, #20
1de20     1F 2A 0E F2 | 	cmp	local03, #31 wz
1de24     A7 04 68 5C |  if_ne	wrlong	#2, fp
1de28     08 4E 05 51 |  if_ne	add	fp, #8
1de2c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1de30     08 4E 85 51 |  if_ne	sub	fp, #8
1de34     88 01 90 5D |  if_ne	jmp	#LR__2425
1de38                 | LR__2419
1de38                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1de38     14 4E 05 F1 | 	add	fp, #20
1de3c     A7 26 02 FB | 	rdlong	local01, fp
1de40     14 4E 85 F1 | 	sub	fp, #20
1de44     1F 26 0E F2 | 	cmp	local01, #31 wz
1de48     24 00 90 5D |  if_ne	jmp	#LR__2420
1de4c     08 4E 05 F1 | 	add	fp, #8
1de50     A7 2A 02 FB | 	rdlong	local03, fp
1de54     08 4E 85 F1 | 	sub	fp, #8
1de58     1F 2A 0E F2 | 	cmp	local03, #31 wz
1de5c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1de60     08 4E 05 51 |  if_ne	add	fp, #8
1de64     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1de68     08 4E 85 51 |  if_ne	sub	fp, #8
1de6c     50 01 90 5D |  if_ne	jmp	#LR__2425
1de70                 | LR__2420
1de70                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1de70     08 4E 05 F1 | 	add	fp, #8
1de74     A7 26 02 FB | 	rdlong	local01, fp
1de78     08 4E 85 F1 | 	sub	fp, #8
1de7c     1F 26 0E F2 | 	cmp	local01, #31 wz
1de80     14 4E 05 A1 |  if_e	add	fp, #20
1de84     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de88     14 4E 85 A1 |  if_e	sub	fp, #20
1de8c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1de90     1C 00 90 5D |  if_ne	jmp	#LR__2421
1de94     A7 12 02 FB | 	rdlong	arg01, fp
1de98     0C 4E 05 F1 | 	add	fp, #12
1de9c     A7 14 02 FB | 	rdlong	arg02, fp
1dea0     0C 4E 85 F1 | 	sub	fp, #12
1dea4     C8 5E B0 FD | 	call	#__system___string_concat
1dea8     A7 FA 61 FC | 	wrlong	result1, fp
1deac     10 01 90 FD | 	jmp	#LR__2425
1deb0                 | LR__2421
1deb0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1deb0     08 4E 05 F1 | 	add	fp, #8
1deb4     A7 26 02 FB | 	rdlong	local01, fp
1deb8     08 4E 85 F1 | 	sub	fp, #8
1debc     2B 26 0E F2 | 	cmp	local01, #43 wz
1dec0     14 4E 05 A1 |  if_e	add	fp, #20
1dec4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dec8     14 4E 85 A1 |  if_e	sub	fp, #20
1decc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ded0     30 00 90 5D |  if_ne	jmp	#LR__2422
1ded4     A7 12 02 FB | 	rdlong	arg01, fp
1ded8     B4 EC BE FD | 	call	#_convertstring
1dedc     FD 12 02 F6 | 	mov	arg01, result1
1dee0     0C 4E 05 F1 | 	add	fp, #12
1dee4     A7 14 02 FB | 	rdlong	arg02, fp
1dee8     0C 4E 85 F1 | 	sub	fp, #12
1deec     80 5E B0 FD | 	call	#__system___string_concat
1def0     A7 FA 61 FC | 	wrlong	result1, fp
1def4     08 4E 05 F1 | 	add	fp, #8
1def8     A7 3E 68 FC | 	wrlong	#31, fp
1defc     08 4E 85 F1 | 	sub	fp, #8
1df00     BC 00 90 FD | 	jmp	#LR__2425
1df04                 | LR__2422
1df04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1df04     08 4E 05 F1 | 	add	fp, #8
1df08     A7 26 02 FB | 	rdlong	local01, fp
1df0c     08 4E 85 F1 | 	sub	fp, #8
1df10     1F 26 0E F2 | 	cmp	local01, #31 wz
1df14     14 4E 05 A1 |  if_e	add	fp, #20
1df18     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df1c     14 4E 85 A1 |  if_e	sub	fp, #20
1df20     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df24     28 00 90 5D |  if_ne	jmp	#LR__2423
1df28     A7 26 02 FB | 	rdlong	local01, fp
1df2c     0C 4E 05 F1 | 	add	fp, #12
1df30     A7 12 02 FB | 	rdlong	arg01, fp
1df34     0C 4E 85 F1 | 	sub	fp, #12
1df38     54 EC BE FD | 	call	#_convertstring
1df3c     FD 14 02 F6 | 	mov	arg02, result1
1df40     13 13 02 F6 | 	mov	arg01, local01
1df44     28 5E B0 FD | 	call	#__system___string_concat
1df48     A7 FA 61 FC | 	wrlong	result1, fp
1df4c     70 00 90 FD | 	jmp	#LR__2425
1df50                 | LR__2423
1df50                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1df50     08 4E 05 F1 | 	add	fp, #8
1df54     A7 26 02 FB | 	rdlong	local01, fp
1df58     08 4E 85 F1 | 	sub	fp, #8
1df5c     2B 26 0E F2 | 	cmp	local01, #43 wz
1df60     14 4E 05 A1 |  if_e	add	fp, #20
1df64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df68     14 4E 85 A1 |  if_e	sub	fp, #20
1df6c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df70     3C 00 90 5D |  if_ne	jmp	#LR__2424
1df74     A7 12 02 FB | 	rdlong	arg01, fp
1df78     14 EC BE FD | 	call	#_convertstring
1df7c     FD 26 02 F6 | 	mov	local01, result1
1df80     0C 4E 05 F1 | 	add	fp, #12
1df84     A7 12 02 FB | 	rdlong	arg01, fp
1df88     0C 4E 85 F1 | 	sub	fp, #12
1df8c     00 EC BE FD | 	call	#_convertstring
1df90     FD 14 02 F6 | 	mov	arg02, result1
1df94     13 13 02 F6 | 	mov	arg01, local01
1df98     D4 5D B0 FD | 	call	#__system___string_concat
1df9c     A7 FA 61 FC | 	wrlong	result1, fp
1dfa0     08 4E 05 F1 | 	add	fp, #8
1dfa4     A7 3E 68 FC | 	wrlong	#31, fp
1dfa8     08 4E 85 F1 | 	sub	fp, #8
1dfac     10 00 90 FD | 	jmp	#LR__2425
1dfb0                 | LR__2424
1dfb0     A7 08 68 FC | 	wrlong	#4, fp
1dfb4     08 4E 05 F1 | 	add	fp, #8
1dfb8     A7 FE 69 FC | 	wrlong	#255, fp
1dfbc     08 4E 85 F1 | 	sub	fp, #8
1dfc0                 | LR__2425
1dfc0     A7 12 02 F6 | 	mov	arg01, fp
1dfc4     E8 EA BE FD | 	call	#_push
1dfc8     A7 F0 03 F6 | 	mov	ptra, fp
1dfcc     B2 00 A0 FD | 	call	#popregs_
1dfd0                 | _do_plus_ret
1dfd0     2D 00 64 FD | 	ret
1dfd4                 | 
1dfd4                 | ' 
1dfd4                 | ' '--------------------------------- power (^)
1dfd4                 | ' 
1dfd4                 | ' sub do_power 
1dfd4                 | _do_power
1dfd4     02 4A 05 F6 | 	mov	COUNT_, #2
1dfd8     A8 00 A0 FD | 	call	#pushregs_
1dfdc     18 F0 07 F1 | 	add	ptra, #24
1dfe0     34 EA BE FD | 	call	#_pop
1dfe4     FD 14 02 F6 | 	mov	arg02, result1
1dfe8     FE 12 02 F6 | 	mov	arg01, result2
1dfec     FF 26 02 F6 | 	mov	local01, result3
1dff0     0C 4E 05 F1 | 	add	fp, #12
1dff4     A7 14 62 FC | 	wrlong	arg02, fp
1dff8     04 4E 05 F1 | 	add	fp, #4
1dffc     A7 12 62 FC | 	wrlong	arg01, fp
1e000     04 4E 05 F1 | 	add	fp, #4
1e004     A7 26 62 FC | 	wrlong	local01, fp
1e008     14 4E 85 F1 | 	sub	fp, #20
1e00c     08 EA BE FD | 	call	#_pop
1e010     A7 FA 61 FC | 	wrlong	result1, fp
1e014     04 4E 05 F1 | 	add	fp, #4
1e018     A7 FC 61 FC | 	wrlong	result2, fp
1e01c     04 4E 05 F1 | 	add	fp, #4
1e020     A7 FE 61 FC | 	wrlong	result3, fp
1e024                 | ' 
1e024                 | ' t2=pop()
1e024                 | ' t1=pop()
1e024                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1e024     08 4E 85 F1 | 	sub	fp, #8
1e028     1F FE 0D F2 | 	cmp	result3, #31 wz
1e02c     14 4E 05 51 |  if_ne	add	fp, #20
1e030     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e034     14 4E 85 51 |  if_ne	sub	fp, #20
1e038     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e03c     A7 18 68 AC |  if_e	wrlong	#12, fp
1e040     08 4E 05 A1 |  if_e	add	fp, #8
1e044     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e048     08 4E 85 A1 |  if_e	sub	fp, #8
1e04c     38 01 90 AD |  if_e	jmp	#LR__2435
1e050                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e050     08 4E 05 F1 | 	add	fp, #8
1e054     A7 14 02 FB | 	rdlong	arg02, fp
1e058     08 4E 85 F1 | 	sub	fp, #8
1e05c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e060     28 00 90 5D |  if_ne	jmp	#LR__2430
1e064     08 4E 05 F1 | 	add	fp, #8
1e068     A7 3C 68 FC | 	wrlong	#30, fp
1e06c     08 4E 85 F1 | 	sub	fp, #8
1e070     A7 12 02 FB | 	rdlong	arg01, fp
1e074     09 13 52 F6 | 	abs	arg01, arg01 wc
1e078     1F 28 C6 C9 |  if_b	decod	local02, #31
1e07c     00 28 06 36 |  if_ae	mov	local02, #0
1e080     04 87 B0 FD | 	call	#__system___float_fromuns
1e084     14 FB 61 F5 | 	xor	result1, local02
1e088     A7 FA 61 FC | 	wrlong	result1, fp
1e08c                 | LR__2430
1e08c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1e08c     08 4E 05 F1 | 	add	fp, #8
1e090     A7 14 02 FB | 	rdlong	arg02, fp
1e094     08 4E 85 F1 | 	sub	fp, #8
1e098     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e09c     18 00 90 5D |  if_ne	jmp	#LR__2431
1e0a0     08 4E 05 F1 | 	add	fp, #8
1e0a4     A7 3C 68 FC | 	wrlong	#30, fp
1e0a8     08 4E 85 F1 | 	sub	fp, #8
1e0ac     A7 12 02 FB | 	rdlong	arg01, fp
1e0b0     D4 86 B0 FD | 	call	#__system___float_fromuns
1e0b4     A7 FA 61 FC | 	wrlong	result1, fp
1e0b8                 | LR__2431
1e0b8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e0b8     14 4E 05 F1 | 	add	fp, #20
1e0bc     A7 14 02 FB | 	rdlong	arg02, fp
1e0c0     14 4E 85 F1 | 	sub	fp, #20
1e0c4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e0c8     34 00 90 5D |  if_ne	jmp	#LR__2432
1e0cc     14 4E 05 F1 | 	add	fp, #20
1e0d0     A7 3C 68 FC | 	wrlong	#30, fp
1e0d4     08 4E 85 F1 | 	sub	fp, #8
1e0d8     A7 12 02 FB | 	rdlong	arg01, fp
1e0dc     0C 4E 85 F1 | 	sub	fp, #12
1e0e0     09 13 52 F6 | 	abs	arg01, arg01 wc
1e0e4     1F 28 C6 C9 |  if_b	decod	local02, #31
1e0e8     00 28 06 36 |  if_ae	mov	local02, #0
1e0ec     98 86 B0 FD | 	call	#__system___float_fromuns
1e0f0     14 FB 61 F5 | 	xor	result1, local02
1e0f4     0C 4E 05 F1 | 	add	fp, #12
1e0f8     A7 FA 61 FC | 	wrlong	result1, fp
1e0fc     0C 4E 85 F1 | 	sub	fp, #12
1e100                 | LR__2432
1e100                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e100     14 4E 05 F1 | 	add	fp, #20
1e104     A7 14 02 FB | 	rdlong	arg02, fp
1e108     14 4E 85 F1 | 	sub	fp, #20
1e10c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e110     24 00 90 5D |  if_ne	jmp	#LR__2433
1e114     14 4E 05 F1 | 	add	fp, #20
1e118     A7 3C 68 FC | 	wrlong	#30, fp
1e11c     08 4E 85 F1 | 	sub	fp, #8
1e120     A7 12 02 FB | 	rdlong	arg01, fp
1e124     0C 4E 85 F1 | 	sub	fp, #12
1e128     5C 86 B0 FD | 	call	#__system___float_fromuns
1e12c     0C 4E 05 F1 | 	add	fp, #12
1e130     A7 FA 61 FC | 	wrlong	result1, fp
1e134     0C 4E 85 F1 | 	sub	fp, #12
1e138                 | LR__2433
1e138                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1e138     08 4E 05 F1 | 	add	fp, #8
1e13c     A7 14 02 FB | 	rdlong	arg02, fp
1e140     08 4E 85 F1 | 	sub	fp, #8
1e144     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e148     14 4E 05 A1 |  if_e	add	fp, #20
1e14c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e150     14 4E 85 A1 |  if_e	sub	fp, #20
1e154     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e158     1C 00 90 5D |  if_ne	jmp	#LR__2434
1e15c     A7 12 02 FB | 	rdlong	arg01, fp
1e160     0C 4E 05 F1 | 	add	fp, #12
1e164     A7 14 02 FB | 	rdlong	arg02, fp
1e168     0C 4E 85 F1 | 	sub	fp, #12
1e16c     24 99 B0 FD | 	call	#__system____builtin_powf
1e170     A7 FA 61 FC | 	wrlong	result1, fp
1e174     10 00 90 FD | 	jmp	#LR__2435
1e178                 | LR__2434
1e178     A7 1A 68 FC | 	wrlong	#13, fp
1e17c     08 4E 05 F1 | 	add	fp, #8
1e180     A7 FE 69 FC | 	wrlong	#255, fp
1e184     08 4E 85 F1 | 	sub	fp, #8
1e188                 | LR__2435
1e188     A7 12 02 F6 | 	mov	arg01, fp
1e18c     20 E9 BE FD | 	call	#_push
1e190     A7 F0 03 F6 | 	mov	ptra, fp
1e194     B2 00 A0 FD | 	call	#popregs_
1e198                 | _do_power_ret
1e198     2D 00 64 FD | 	ret
1e19c                 | 
1e19c                 | ' 
1e19c                 | ' '--------------------------------- SHL
1e19c                 | ' 
1e19c                 | ' sub do_shl 
1e19c                 | _do_shl
1e19c     03 4A 05 F6 | 	mov	COUNT_, #3
1e1a0     A8 00 A0 FD | 	call	#pushregs_
1e1a4     18 F0 07 F1 | 	add	ptra, #24
1e1a8     6C E8 BE FD | 	call	#_pop
1e1ac     FD 12 02 F6 | 	mov	arg01, result1
1e1b0     FE 26 02 F6 | 	mov	local01, result2
1e1b4     FF 28 02 F6 | 	mov	local02, result3
1e1b8     0C 4E 05 F1 | 	add	fp, #12
1e1bc     A7 12 62 FC | 	wrlong	arg01, fp
1e1c0     04 4E 05 F1 | 	add	fp, #4
1e1c4     A7 26 62 FC | 	wrlong	local01, fp
1e1c8     04 4E 05 F1 | 	add	fp, #4
1e1cc     A7 28 62 FC | 	wrlong	local02, fp
1e1d0     14 4E 85 F1 | 	sub	fp, #20
1e1d4     40 E8 BE FD | 	call	#_pop
1e1d8     FF 2A 02 F6 | 	mov	local03, result3
1e1dc     A7 FA 61 FC | 	wrlong	result1, fp
1e1e0     04 4E 05 F1 | 	add	fp, #4
1e1e4     A7 FC 61 FC | 	wrlong	result2, fp
1e1e8     04 4E 05 F1 | 	add	fp, #4
1e1ec     A7 2A 62 FC | 	wrlong	local03, fp
1e1f0                 | ' 
1e1f0                 | ' t2=pop()
1e1f0                 | ' t1=pop()
1e1f0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e1f0     08 4E 85 F1 | 	sub	fp, #8
1e1f4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e1f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e1fc     A7 2A 62 AC |  if_e	wrlong	local03, fp
1e200     08 4E 05 A1 |  if_e	add	fp, #8
1e204     A7 3A 68 AC |  if_e	wrlong	#29, fp
1e208     08 4E 85 A1 |  if_e	sub	fp, #8
1e20c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e20c     14 4E 05 F1 | 	add	fp, #20
1e210     A7 2A 02 FB | 	rdlong	local03, fp
1e214     14 4E 85 F1 | 	sub	fp, #20
1e218     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e21c     18 00 90 5D |  if_ne	jmp	#LR__2440
1e220     0C 4E 05 F1 | 	add	fp, #12
1e224     A7 2A 02 FB | 	rdlong	local03, fp
1e228     A7 2A 62 FC | 	wrlong	local03, fp
1e22c     08 4E 05 F1 | 	add	fp, #8
1e230     A7 3A 68 FC | 	wrlong	#29, fp
1e234     14 4E 85 F1 | 	sub	fp, #20
1e238                 | LR__2440
1e238                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1e238     08 4E 05 F1 | 	add	fp, #8
1e23c     A7 2A 02 FB | 	rdlong	local03, fp
1e240     08 4E 85 F1 | 	sub	fp, #8
1e244     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e248     14 4E 05 51 |  if_ne	add	fp, #20
1e24c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1e250     14 4E 85 51 |  if_ne	sub	fp, #20
1e254     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1e258     08 4E 05 51 |  if_ne	add	fp, #8
1e25c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e260     08 4E 85 51 |  if_ne	sub	fp, #8
1e264     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1e268     14 4E 05 51 |  if_ne	add	fp, #20
1e26c     14 4E 85 51 |  if_ne	sub	fp, #20
1e270     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1e274     A7 0C 68 AC |  if_e	wrlong	#6, fp
1e278     08 4E 05 A1 |  if_e	add	fp, #8
1e27c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e280     08 4E 85 A1 |  if_e	sub	fp, #8
1e284     18 00 90 AD |  if_e	jmp	#LR__2441
1e288     A7 2A 02 FB | 	rdlong	local03, fp
1e28c     0C 4E 05 F1 | 	add	fp, #12
1e290     A7 26 02 FB | 	rdlong	local01, fp
1e294     0C 4E 85 F1 | 	sub	fp, #12
1e298     13 2B 62 F0 | 	shl	local03, local01
1e29c     A7 2A 62 FC | 	wrlong	local03, fp
1e2a0                 | LR__2441
1e2a0     A7 12 02 F6 | 	mov	arg01, fp
1e2a4     08 E8 BE FD | 	call	#_push
1e2a8     A7 F0 03 F6 | 	mov	ptra, fp
1e2ac     B2 00 A0 FD | 	call	#popregs_
1e2b0                 | _do_shl_ret
1e2b0     2D 00 64 FD | 	ret
1e2b4                 | 
1e2b4                 | ' 
1e2b4                 | ' '--------------------------------- SHR
1e2b4                 | ' 
1e2b4                 | ' sub do_shr 
1e2b4                 | _do_shr
1e2b4     03 4A 05 F6 | 	mov	COUNT_, #3
1e2b8     A8 00 A0 FD | 	call	#pushregs_
1e2bc     18 F0 07 F1 | 	add	ptra, #24
1e2c0     54 E7 BE FD | 	call	#_pop
1e2c4     FD 12 02 F6 | 	mov	arg01, result1
1e2c8     FE 26 02 F6 | 	mov	local01, result2
1e2cc     FF 28 02 F6 | 	mov	local02, result3
1e2d0     0C 4E 05 F1 | 	add	fp, #12
1e2d4     A7 12 62 FC | 	wrlong	arg01, fp
1e2d8     04 4E 05 F1 | 	add	fp, #4
1e2dc     A7 26 62 FC | 	wrlong	local01, fp
1e2e0     04 4E 05 F1 | 	add	fp, #4
1e2e4     A7 28 62 FC | 	wrlong	local02, fp
1e2e8     14 4E 85 F1 | 	sub	fp, #20
1e2ec     28 E7 BE FD | 	call	#_pop
1e2f0     FF 2A 02 F6 | 	mov	local03, result3
1e2f4     A7 FA 61 FC | 	wrlong	result1, fp
1e2f8     04 4E 05 F1 | 	add	fp, #4
1e2fc     A7 FC 61 FC | 	wrlong	result2, fp
1e300     04 4E 05 F1 | 	add	fp, #4
1e304     A7 2A 62 FC | 	wrlong	local03, fp
1e308                 | ' 
1e308                 | ' t2=pop()
1e308                 | ' t1=pop()
1e308                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e308     08 4E 85 F1 | 	sub	fp, #8
1e30c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e310     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e314     A7 2A 62 AC |  if_e	wrlong	local03, fp
1e318     08 4E 05 A1 |  if_e	add	fp, #8
1e31c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1e320     08 4E 85 A1 |  if_e	sub	fp, #8
1e324                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e324     14 4E 05 F1 | 	add	fp, #20
1e328     A7 2A 02 FB | 	rdlong	local03, fp
1e32c     14 4E 85 F1 | 	sub	fp, #20
1e330     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e334     18 00 90 5D |  if_ne	jmp	#LR__2450
1e338     0C 4E 05 F1 | 	add	fp, #12
1e33c     A7 2A 02 FB | 	rdlong	local03, fp
1e340     A7 2A 62 FC | 	wrlong	local03, fp
1e344     08 4E 05 F1 | 	add	fp, #8
1e348     A7 3A 68 FC | 	wrlong	#29, fp
1e34c     14 4E 85 F1 | 	sub	fp, #20
1e350                 | LR__2450
1e350                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1e350     08 4E 05 F1 | 	add	fp, #8
1e354     A7 2A 02 FB | 	rdlong	local03, fp
1e358     08 4E 85 F1 | 	sub	fp, #8
1e35c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e360     14 4E 05 51 |  if_ne	add	fp, #20
1e364     A7 28 02 5B |  if_ne	rdlong	local02, fp
1e368     14 4E 85 51 |  if_ne	sub	fp, #20
1e36c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1e370     08 4E 05 51 |  if_ne	add	fp, #8
1e374     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e378     08 4E 85 51 |  if_ne	sub	fp, #8
1e37c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1e380     14 4E 05 51 |  if_ne	add	fp, #20
1e384     14 4E 85 51 |  if_ne	sub	fp, #20
1e388     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1e38c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1e390     08 4E 05 A1 |  if_e	add	fp, #8
1e394     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e398     08 4E 85 A1 |  if_e	sub	fp, #8
1e39c     18 00 90 AD |  if_e	jmp	#LR__2451
1e3a0     A7 2A 02 FB | 	rdlong	local03, fp
1e3a4     0C 4E 05 F1 | 	add	fp, #12
1e3a8     A7 26 02 FB | 	rdlong	local01, fp
1e3ac     0C 4E 85 F1 | 	sub	fp, #12
1e3b0     13 2B 42 F0 | 	shr	local03, local01
1e3b4     A7 2A 62 FC | 	wrlong	local03, fp
1e3b8                 | LR__2451
1e3b8     A7 12 02 F6 | 	mov	arg01, fp
1e3bc     F0 E6 BE FD | 	call	#_push
1e3c0     A7 F0 03 F6 | 	mov	ptra, fp
1e3c4     B2 00 A0 FD | 	call	#popregs_
1e3c8                 | _do_shr_ret
1e3c8     2D 00 64 FD | 	ret
1e3cc                 | 
1e3cc                 | ' 
1e3cc                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1e3cc                 | ' 
1e3cc                 | ' ''----------------------------------------------------------------------------------------------------
1e3cc                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1e3cc                 | ' ''----------------------------------------------------------------------------------------------------
1e3cc                 | ' 
1e3cc                 | ' ''--------------------------- Command function pointers
1e3cc                 | ' 
1e3cc                 | ' sub init_commands
1e3cc                 | _init_commands
1e3cc                 | ' 
1e3cc                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1e3cc     00 00 06 F6 | 	mov	_var01, #0
1e3d0     97 16 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1e3d4                 | LR__2460
1e3d4     00 FB 01 F6 | 	mov	result1, _var01
1e3d8     02 FA 65 F0 | 	shl	result1, #2
1e3dc     43 00 00 FF 
1e3e0     60 E4 05 F1 | 	add	objptr, ##34400
1e3e4     F2 FA 01 F1 | 	add	result1, objptr
1e3e8     43 00 00 FF 
1e3ec     60 E4 85 F1 | 	sub	objptr, ##34400
1e3f0     FD E4 61 FC | 	wrlong	objptr, result1
1e3f4     01 00 06 F1 | 	add	_var01, #1
1e3f8     00 01 56 F2 | 	cmps	_var01, #256 wc
1e3fc     D4 FF 9F CD |  if_b	jmp	#LR__2460
1e400                 | LR__2461
1e400     F2 FA 01 F6 | 	mov	result1, objptr
1e404     14 FA 25 F4 | 	bith	result1, #20
1e408     43 00 00 FF 
1e40c     64 E4 05 F1 | 	add	objptr, ##34404
1e410     F2 FA 61 FC | 	wrlong	result1, objptr
1e414     43 00 00 FF 
1e418     64 E4 85 F1 | 	sub	objptr, ##34404
1e41c     F2 FA 01 F6 | 	mov	result1, objptr
1e420     15 FA 25 F4 | 	bith	result1, #21
1e424     43 00 00 FF 
1e428     68 E4 05 F1 | 	add	objptr, ##34408
1e42c     F2 FA 61 FC | 	wrlong	result1, objptr
1e430     43 00 00 FF 
1e434     68 E4 85 F1 | 	sub	objptr, ##34408
1e438     F2 FA 01 F6 | 	mov	result1, objptr
1e43c     34 FA 25 F4 | 	bith	result1, #52
1e440     43 00 00 FF 
1e444     6C E4 05 F1 | 	add	objptr, ##34412
1e448     F2 FA 61 FC | 	wrlong	result1, objptr
1e44c     43 00 00 FF 
1e450     6C E4 85 F1 | 	sub	objptr, ##34412
1e454     F2 FA 01 F6 | 	mov	result1, objptr
1e458     16 FA 25 F4 | 	bith	result1, #22
1e45c     43 00 00 FF 
1e460     74 E4 05 F1 | 	add	objptr, ##34420
1e464     F2 FA 61 FC | 	wrlong	result1, objptr
1e468     43 00 00 FF 
1e46c     74 E4 85 F1 | 	sub	objptr, ##34420
1e470     F2 FA 01 F6 | 	mov	result1, objptr
1e474     00 28 00 FF 
1e478     00 FA 45 F5 | 	or	result1, ##5242880
1e47c     43 00 00 FF 
1e480     78 E4 05 F1 | 	add	objptr, ##34424
1e484     F2 FA 61 FC | 	wrlong	result1, objptr
1e488     43 00 00 FF 
1e48c     78 E4 85 F1 | 	sub	objptr, ##34424
1e490     F2 FA 01 F6 | 	mov	result1, objptr
1e494     35 FA 25 F4 | 	bith	result1, #53
1e498     43 00 00 FF 
1e49c     7C E4 05 F1 | 	add	objptr, ##34428
1e4a0     F2 FA 61 FC | 	wrlong	result1, objptr
1e4a4     43 00 00 FF 
1e4a8     7C E4 85 F1 | 	sub	objptr, ##34428
1e4ac     F2 FA 01 F6 | 	mov	result1, objptr
1e4b0     54 FA 25 F4 | 	bith	result1, #84
1e4b4     43 00 00 FF 
1e4b8     80 E4 05 F1 | 	add	objptr, ##34432
1e4bc     F2 FA 61 FC | 	wrlong	result1, objptr
1e4c0     43 00 00 FF 
1e4c4     80 E4 85 F1 | 	sub	objptr, ##34432
1e4c8     F2 FA 01 F6 | 	mov	result1, objptr
1e4cc     17 FA 25 F4 | 	bith	result1, #23
1e4d0     43 00 00 FF 
1e4d4     84 E4 05 F1 | 	add	objptr, ##34436
1e4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1e4dc     43 00 00 FF 
1e4e0     84 E4 85 F1 | 	sub	objptr, ##34436
1e4e4     F2 FA 01 F6 | 	mov	result1, objptr
1e4e8     00 48 00 FF 
1e4ec     00 FA 45 F5 | 	or	result1, ##9437184
1e4f0     43 00 00 FF 
1e4f4     88 E4 05 F1 | 	add	objptr, ##34440
1e4f8     F2 FA 61 FC | 	wrlong	result1, objptr
1e4fc     43 00 00 FF 
1e500     88 E4 85 F1 | 	sub	objptr, ##34440
1e504     F2 FA 01 F6 | 	mov	result1, objptr
1e508     00 50 00 FF 
1e50c     00 FA 45 F5 | 	or	result1, ##10485760
1e510     43 00 00 FF 
1e514     8C E4 05 F1 | 	add	objptr, ##34444
1e518     F2 FA 61 FC | 	wrlong	result1, objptr
1e51c     43 00 00 FF 
1e520     8C E4 85 F1 | 	sub	objptr, ##34444
1e524     F2 FA 01 F6 | 	mov	result1, objptr
1e528     00 58 00 FF 
1e52c     00 FA 45 F5 | 	or	result1, ##11534336
1e530     43 00 00 FF 
1e534     90 E4 05 F1 | 	add	objptr, ##34448
1e538     F2 FA 61 FC | 	wrlong	result1, objptr
1e53c     43 00 00 FF 
1e540     90 E4 85 F1 | 	sub	objptr, ##34448
1e544     F2 FA 01 F6 | 	mov	result1, objptr
1e548     36 FA 25 F4 | 	bith	result1, #54
1e54c     43 00 00 FF 
1e550     A4 E4 05 F1 | 	add	objptr, ##34468
1e554     F2 FA 61 FC | 	wrlong	result1, objptr
1e558     43 00 00 FF 
1e55c     A4 E4 85 F1 | 	sub	objptr, ##34468
1e560     F2 FA 01 F6 | 	mov	result1, objptr
1e564     00 68 00 FF 
1e568     00 FA 45 F5 | 	or	result1, ##13631488
1e56c     43 00 00 FF 
1e570     D4 E4 05 F1 | 	add	objptr, ##34516
1e574     F2 FA 61 FC | 	wrlong	result1, objptr
1e578     43 00 00 FF 
1e57c     D4 E4 85 F1 | 	sub	objptr, ##34516
1e580     F2 FA 01 F6 | 	mov	result1, objptr
1e584     00 68 00 FF 
1e588     00 FA 45 F5 | 	or	result1, ##13631488
1e58c     43 00 00 FF 
1e590     D0 E4 05 F1 | 	add	objptr, ##34512
1e594     F2 FA 61 FC | 	wrlong	result1, objptr
1e598     43 00 00 FF 
1e59c     D0 E4 85 F1 | 	sub	objptr, ##34512
1e5a0     F2 FA 01 F6 | 	mov	result1, objptr
1e5a4     00 68 00 FF 
1e5a8     00 FA 45 F5 | 	or	result1, ##13631488
1e5ac     43 00 00 FF 
1e5b0     D8 E4 05 F1 | 	add	objptr, ##34520
1e5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e5b8     43 00 00 FF 
1e5bc     D8 E4 85 F1 | 	sub	objptr, ##34520
1e5c0     F2 FA 01 F6 | 	mov	result1, objptr
1e5c4     00 68 00 FF 
1e5c8     00 FA 45 F5 | 	or	result1, ##13631488
1e5cc     43 00 00 FF 
1e5d0     DC E4 05 F1 | 	add	objptr, ##34524
1e5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e5d8     43 00 00 FF 
1e5dc     DC E4 85 F1 | 	sub	objptr, ##34524
1e5e0     F2 FA 01 F6 | 	mov	result1, objptr
1e5e4     00 68 00 FF 
1e5e8     00 FA 45 F5 | 	or	result1, ##13631488
1e5ec     43 00 00 FF 
1e5f0     0C E5 05 F1 | 	add	objptr, ##34572
1e5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1e5f8     43 00 00 FF 
1e5fc     0C E5 85 F1 | 	sub	objptr, ##34572
1e600     F2 FA 01 F6 | 	mov	result1, objptr
1e604     55 FA 25 F4 | 	bith	result1, #85
1e608     43 00 00 FF 
1e60c     BC E4 05 F1 | 	add	objptr, ##34492
1e610     F2 FA 61 FC | 	wrlong	result1, objptr
1e614     43 00 00 FF 
1e618     BC E4 85 F1 | 	sub	objptr, ##34492
1e61c     F2 FA 01 F6 | 	mov	result1, objptr
1e620     00 68 00 FF 
1e624     00 FA 45 F5 | 	or	result1, ##13631488
1e628     43 00 00 FF 
1e62c     10 E5 05 F1 | 	add	objptr, ##34576
1e630     F2 FA 61 FC | 	wrlong	result1, objptr
1e634     43 00 00 FF 
1e638     10 E5 85 F1 | 	sub	objptr, ##34576
1e63c     F2 FA 01 F6 | 	mov	result1, objptr
1e640     00 68 00 FF 
1e644     00 FA 45 F5 | 	or	result1, ##13631488
1e648     43 00 00 FF 
1e64c     E0 E4 05 F1 | 	add	objptr, ##34528
1e650     F2 FA 61 FC | 	wrlong	result1, objptr
1e654     43 00 00 FF 
1e658     E0 E4 85 F1 | 	sub	objptr, ##34528
1e65c     F2 FA 01 F6 | 	mov	result1, objptr
1e660     00 68 00 FF 
1e664     00 FA 45 F5 | 	or	result1, ##13631488
1e668     43 00 00 FF 
1e66c     E4 E4 05 F1 | 	add	objptr, ##34532
1e670     F2 FA 61 FC | 	wrlong	result1, objptr
1e674     43 00 00 FF 
1e678     E4 E4 85 F1 | 	sub	objptr, ##34532
1e67c     F2 FA 01 F6 | 	mov	result1, objptr
1e680     00 68 00 FF 
1e684     00 FA 45 F5 | 	or	result1, ##13631488
1e688     43 00 00 FF 
1e68c     E8 E4 05 F1 | 	add	objptr, ##34536
1e690     F2 FA 61 FC | 	wrlong	result1, objptr
1e694     43 00 00 FF 
1e698     E8 E4 85 F1 | 	sub	objptr, ##34536
1e69c     F2 FA 01 F6 | 	mov	result1, objptr
1e6a0     74 FA 25 F4 | 	bith	result1, #116
1e6a4     43 00 00 FF 
1e6a8     60 E5 05 F1 | 	add	objptr, ##34656
1e6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e6b0     43 00 00 FF 
1e6b4     60 E5 85 F1 | 	sub	objptr, ##34656
1e6b8     F2 FA 01 F6 | 	mov	result1, objptr
1e6bc     18 FA 25 F4 | 	bith	result1, #24
1e6c0     43 00 00 FF 
1e6c4     64 E5 05 F1 | 	add	objptr, ##34660
1e6c8     F2 FA 61 FC | 	wrlong	result1, objptr
1e6cc     43 00 00 FF 
1e6d0     64 E5 85 F1 | 	sub	objptr, ##34660
1e6d4     F2 FA 01 F6 | 	mov	result1, objptr
1e6d8     00 88 00 FF 
1e6dc     00 FA 45 F5 | 	or	result1, ##17825792
1e6e0     43 00 00 FF 
1e6e4     68 E5 05 F1 | 	add	objptr, ##34664
1e6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1e6ec     43 00 00 FF 
1e6f0     68 E5 85 F1 | 	sub	objptr, ##34664
1e6f4     F2 FA 01 F6 | 	mov	result1, objptr
1e6f8     00 90 00 FF 
1e6fc     00 FA 45 F5 | 	or	result1, ##18874368
1e700     43 00 00 FF 
1e704     6C E5 05 F1 | 	add	objptr, ##34668
1e708     F2 FA 61 FC | 	wrlong	result1, objptr
1e70c     43 00 00 FF 
1e710     6C E5 85 F1 | 	sub	objptr, ##34668
1e714     F2 FA 01 F6 | 	mov	result1, objptr
1e718     00 98 00 FF 
1e71c     00 FA 45 F5 | 	or	result1, ##19922944
1e720     43 00 00 FF 
1e724     70 E5 05 F1 | 	add	objptr, ##34672
1e728     F2 FA 61 FC | 	wrlong	result1, objptr
1e72c     43 00 00 FF 
1e730     70 E5 85 F1 | 	sub	objptr, ##34672
1e734     F2 FA 01 F6 | 	mov	result1, objptr
1e738     00 A0 00 FF 
1e73c     00 FA 45 F5 | 	or	result1, ##20971520
1e740     43 00 00 FF 
1e744     74 E5 05 F1 | 	add	objptr, ##34676
1e748     F2 FA 61 FC | 	wrlong	result1, objptr
1e74c     43 00 00 FF 
1e750     74 E5 85 F1 | 	sub	objptr, ##34676
1e754     F2 FA 01 F6 | 	mov	result1, objptr
1e758     00 A8 00 FF 
1e75c     00 FA 45 F5 | 	or	result1, ##22020096
1e760     43 00 00 FF 
1e764     78 E5 05 F1 | 	add	objptr, ##34680
1e768     F2 FA 61 FC | 	wrlong	result1, objptr
1e76c     43 00 00 FF 
1e770     78 E5 85 F1 | 	sub	objptr, ##34680
1e774     F2 FA 01 F6 | 	mov	result1, objptr
1e778     00 B0 00 FF 
1e77c     00 FA 45 F5 | 	or	result1, ##23068672
1e780     43 00 00 FF 
1e784     7C E5 05 F1 | 	add	objptr, ##34684
1e788     F2 FA 61 FC | 	wrlong	result1, objptr
1e78c     43 00 00 FF 
1e790     7C E5 85 F1 | 	sub	objptr, ##34684
1e794     F2 FA 01 F6 | 	mov	result1, objptr
1e798     00 B8 00 FF 
1e79c     00 FA 45 F5 | 	or	result1, ##24117248
1e7a0     43 00 00 FF 
1e7a4     80 E5 05 F1 | 	add	objptr, ##34688
1e7a8     F2 FA 61 FC | 	wrlong	result1, objptr
1e7ac     43 00 00 FF 
1e7b0     80 E5 85 F1 | 	sub	objptr, ##34688
1e7b4     F2 FA 01 F6 | 	mov	result1, objptr
1e7b8     37 FA 25 F4 | 	bith	result1, #55
1e7bc     43 00 00 FF 
1e7c0     84 E5 05 F1 | 	add	objptr, ##34692
1e7c4     F2 FA 61 FC | 	wrlong	result1, objptr
1e7c8     43 00 00 FF 
1e7cc     84 E5 85 F1 | 	sub	objptr, ##34692
1e7d0     F2 FA 01 F6 | 	mov	result1, objptr
1e7d4     00 C8 00 FF 
1e7d8     00 FA 45 F5 | 	or	result1, ##26214400
1e7dc     43 00 00 FF 
1e7e0     88 E5 05 F1 | 	add	objptr, ##34696
1e7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1e7e8     43 00 00 FF 
1e7ec     88 E5 85 F1 | 	sub	objptr, ##34696
1e7f0     F2 FA 01 F6 | 	mov	result1, objptr
1e7f4     00 D0 00 FF 
1e7f8     00 FA 45 F5 | 	or	result1, ##27262976
1e7fc     43 00 00 FF 
1e800     8C E5 05 F1 | 	add	objptr, ##34700
1e804     F2 FA 61 FC | 	wrlong	result1, objptr
1e808     43 00 00 FF 
1e80c     8C E5 85 F1 | 	sub	objptr, ##34700
1e810     F2 FA 01 F6 | 	mov	result1, objptr
1e814     00 D8 00 FF 
1e818     00 FA 45 F5 | 	or	result1, ##28311552
1e81c     43 00 00 FF 
1e820     90 E5 05 F1 | 	add	objptr, ##34704
1e824     F2 FA 61 FC | 	wrlong	result1, objptr
1e828     43 00 00 FF 
1e82c     90 E5 85 F1 | 	sub	objptr, ##34704
1e830     F2 FA 01 F6 | 	mov	result1, objptr
1e834     56 FA 25 F4 | 	bith	result1, #86
1e838     43 00 00 FF 
1e83c     94 E5 05 F1 | 	add	objptr, ##34708
1e840     F2 FA 61 FC | 	wrlong	result1, objptr
1e844     43 00 00 FF 
1e848     94 E5 85 F1 | 	sub	objptr, ##34708
1e84c     F2 FA 01 F6 | 	mov	result1, objptr
1e850     00 E8 00 FF 
1e854     00 FA 45 F5 | 	or	result1, ##30408704
1e858     45 00 00 FF 
1e85c     5C E4 05 F1 | 	add	objptr, ##35420
1e860     F2 FA 61 FC | 	wrlong	result1, objptr
1e864     45 00 00 FF 
1e868     5C E4 85 F1 | 	sub	objptr, ##35420
1e86c     F2 FA 01 F6 | 	mov	result1, objptr
1e870     75 FA 25 F4 | 	bith	result1, #117
1e874     43 00 00 FF 
1e878     98 E5 05 F1 | 	add	objptr, ##34712
1e87c     F2 FA 61 FC | 	wrlong	result1, objptr
1e880     43 00 00 FF 
1e884     98 E5 85 F1 | 	sub	objptr, ##34712
1e888     F2 FA 01 F6 | 	mov	result1, objptr
1e88c     94 FA 25 F4 | 	bith	result1, #148
1e890     43 00 00 FF 
1e894     AC E5 05 F1 | 	add	objptr, ##34732
1e898     F2 FA 61 FC | 	wrlong	result1, objptr
1e89c     43 00 00 FF 
1e8a0     AC E5 85 F1 | 	sub	objptr, ##34732
1e8a4     F2 FA 01 F6 | 	mov	result1, objptr
1e8a8     19 FA 25 F4 | 	bith	result1, #25
1e8ac     43 00 00 FF 
1e8b0     9C E5 05 F1 | 	add	objptr, ##34716
1e8b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8b8     43 00 00 FF 
1e8bc     9C E5 85 F1 | 	sub	objptr, ##34716
1e8c0     F2 FA 01 F6 | 	mov	result1, objptr
1e8c4     00 08 01 FF 
1e8c8     00 FA 45 F5 | 	or	result1, ##34603008
1e8cc     43 00 00 FF 
1e8d0     B8 E4 05 F1 | 	add	objptr, ##34488
1e8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8d8     43 00 00 FF 
1e8dc     B8 E4 85 F1 | 	sub	objptr, ##34488
1e8e0     F2 FA 01 F6 | 	mov	result1, objptr
1e8e4     00 10 01 FF 
1e8e8     00 FA 45 F5 | 	or	result1, ##35651584
1e8ec     43 00 00 FF 
1e8f0     A0 E5 05 F1 | 	add	objptr, ##34720
1e8f4     F2 FA 61 FC | 	wrlong	result1, objptr
1e8f8     43 00 00 FF 
1e8fc     A0 E5 85 F1 | 	sub	objptr, ##34720
1e900     F2 FA 01 F6 | 	mov	result1, objptr
1e904     00 18 01 FF 
1e908     00 FA 45 F5 | 	or	result1, ##36700160
1e90c     43 00 00 FF 
1e910     A4 E5 05 F1 | 	add	objptr, ##34724
1e914     F2 FA 61 FC | 	wrlong	result1, objptr
1e918     43 00 00 FF 
1e91c     A4 E5 85 F1 | 	sub	objptr, ##34724
1e920     F2 FA 01 F6 | 	mov	result1, objptr
1e924     00 20 01 FF 
1e928     00 FA 45 F5 | 	or	result1, ##37748736
1e92c     43 00 00 FF 
1e930     A8 E5 05 F1 | 	add	objptr, ##34728
1e934     F2 FA 61 FC | 	wrlong	result1, objptr
1e938     43 00 00 FF 
1e93c     A8 E5 85 F1 | 	sub	objptr, ##34728
1e940     F2 FA 01 F6 | 	mov	result1, objptr
1e944     00 28 01 FF 
1e948     00 FA 45 F5 | 	or	result1, ##38797312
1e94c     43 00 00 FF 
1e950     B4 E5 05 F1 | 	add	objptr, ##34740
1e954     F2 FA 61 FC | 	wrlong	result1, objptr
1e958     43 00 00 FF 
1e95c     B4 E5 85 F1 | 	sub	objptr, ##34740
1e960     F2 FA 01 F6 | 	mov	result1, objptr
1e964     00 30 01 FF 
1e968     00 FA 45 F5 | 	or	result1, ##39845888
1e96c     43 00 00 FF 
1e970     B8 E5 05 F1 | 	add	objptr, ##34744
1e974     F2 FA 61 FC | 	wrlong	result1, objptr
1e978     43 00 00 FF 
1e97c     B8 E5 85 F1 | 	sub	objptr, ##34744
1e980     F2 FA 01 F6 | 	mov	result1, objptr
1e984     00 38 01 FF 
1e988     00 FA 45 F5 | 	or	result1, ##40894464
1e98c     43 00 00 FF 
1e990     BC E5 05 F1 | 	add	objptr, ##34748
1e994     F2 FA 61 FC | 	wrlong	result1, objptr
1e998     43 00 00 FF 
1e99c     BC E5 85 F1 | 	sub	objptr, ##34748
1e9a0     F2 FA 01 F6 | 	mov	result1, objptr
1e9a4     00 40 01 FF 
1e9a8     00 FA 45 F5 | 	or	result1, ##41943040
1e9ac     43 00 00 FF 
1e9b0     C0 E5 05 F1 | 	add	objptr, ##34752
1e9b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e9b8     43 00 00 FF 
1e9bc     C0 E5 85 F1 | 	sub	objptr, ##34752
1e9c0     F2 FA 01 F6 | 	mov	result1, objptr
1e9c4     00 48 01 FF 
1e9c8     00 FA 45 F5 | 	or	result1, ##42991616
1e9cc     43 00 00 FF 
1e9d0     C8 E5 05 F1 | 	add	objptr, ##34760
1e9d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e9d8     43 00 00 FF 
1e9dc     C8 E5 85 F1 | 	sub	objptr, ##34760
1e9e0     F2 FA 01 F6 | 	mov	result1, objptr
1e9e4     00 08 01 FF 
1e9e8     00 FA 45 F5 | 	or	result1, ##34603008
1e9ec     43 00 00 FF 
1e9f0     CC E5 05 F1 | 	add	objptr, ##34764
1e9f4     F2 FA 61 FC | 	wrlong	result1, objptr
1e9f8     43 00 00 FF 
1e9fc     CC E5 85 F1 | 	sub	objptr, ##34764
1ea00     F2 FA 01 F6 | 	mov	result1, objptr
1ea04     00 50 01 FF 
1ea08     00 FA 45 F5 | 	or	result1, ##44040192
1ea0c     43 00 00 FF 
1ea10     CC E4 05 F1 | 	add	objptr, ##34508
1ea14     F2 FA 61 FC | 	wrlong	result1, objptr
1ea18     43 00 00 FF 
1ea1c     CC E4 85 F1 | 	sub	objptr, ##34508
1ea20     F2 FA 01 F6 | 	mov	result1, objptr
1ea24     00 58 01 FF 
1ea28     00 FA 45 F5 | 	or	result1, ##45088768
1ea2c     43 00 00 FF 
1ea30     FC E4 05 F1 | 	add	objptr, ##34556
1ea34     F2 FA 61 FC | 	wrlong	result1, objptr
1ea38     43 00 00 FF 
1ea3c     FC E4 85 F1 | 	sub	objptr, ##34556
1ea40     F2 FA 01 F6 | 	mov	result1, objptr
1ea44     00 60 01 FF 
1ea48     00 FA 45 F5 | 	or	result1, ##46137344
1ea4c     43 00 00 FF 
1ea50     F8 E4 05 F1 | 	add	objptr, ##34552
1ea54     F2 FA 61 FC | 	wrlong	result1, objptr
1ea58     43 00 00 FF 
1ea5c     F8 E4 85 F1 | 	sub	objptr, ##34552
1ea60     F2 FA 01 F6 | 	mov	result1, objptr
1ea64     00 68 01 FF 
1ea68     00 FA 45 F5 | 	or	result1, ##47185920
1ea6c     43 00 00 FF 
1ea70     9C E4 05 F1 | 	add	objptr, ##34460
1ea74     F2 FA 61 FC | 	wrlong	result1, objptr
1ea78     43 00 00 FF 
1ea7c     9C E4 85 F1 | 	sub	objptr, ##34460
1ea80     F2 FA 01 F6 | 	mov	result1, objptr
1ea84     00 70 01 FF 
1ea88     00 FA 45 F5 | 	or	result1, ##48234496
1ea8c     43 00 00 FF 
1ea90     A0 E4 05 F1 | 	add	objptr, ##34464
1ea94     F2 FA 61 FC | 	wrlong	result1, objptr
1ea98     43 00 00 FF 
1ea9c     A0 E4 85 F1 | 	sub	objptr, ##34464
1eaa0     F2 FA 01 F6 | 	mov	result1, objptr
1eaa4     00 78 01 FF 
1eaa8     00 FA 45 F5 | 	or	result1, ##49283072
1eaac     43 00 00 FF 
1eab0     08 E5 05 F1 | 	add	objptr, ##34568
1eab4     F2 FA 61 FC | 	wrlong	result1, objptr
1eab8     43 00 00 FF 
1eabc     08 E5 85 F1 | 	sub	objptr, ##34568
1eac0     F2 FA 01 F6 | 	mov	result1, objptr
1eac4     38 FA 25 F4 | 	bith	result1, #56
1eac8     43 00 00 FF 
1eacc     B0 E5 05 F1 | 	add	objptr, ##34736
1ead0     F2 FA 61 FC | 	wrlong	result1, objptr
1ead4     43 00 00 FF 
1ead8     B0 E5 85 F1 | 	sub	objptr, ##34736
1eadc     F2 FA 01 F6 | 	mov	result1, objptr
1eae0     00 88 01 FF 
1eae4     00 FA 45 F5 | 	or	result1, ##51380224
1eae8     43 00 00 FF 
1eaec     C4 E5 05 F1 | 	add	objptr, ##34756
1eaf0     F2 FA 61 FC | 	wrlong	result1, objptr
1eaf4     43 00 00 FF 
1eaf8     C4 E5 85 F1 | 	sub	objptr, ##34756
1eafc     F2 FA 01 F6 | 	mov	result1, objptr
1eb00     00 90 01 FF 
1eb04     00 FA 45 F5 | 	or	result1, ##52428800
1eb08     43 00 00 FF 
1eb0c     D0 E5 05 F1 | 	add	objptr, ##34768
1eb10     F2 FA 61 FC | 	wrlong	result1, objptr
1eb14     43 00 00 FF 
1eb18     D0 E5 85 F1 | 	sub	objptr, ##34768
1eb1c     F2 FA 01 F6 | 	mov	result1, objptr
1eb20     00 98 01 FF 
1eb24     00 FA 45 F5 | 	or	result1, ##53477376
1eb28     43 00 00 FF 
1eb2c     D4 E5 05 F1 | 	add	objptr, ##34772
1eb30     F2 FA 61 FC | 	wrlong	result1, objptr
1eb34     43 00 00 FF 
1eb38     D4 E5 85 F1 | 	sub	objptr, ##34772
1eb3c     F2 FA 01 F6 | 	mov	result1, objptr
1eb40     00 A0 01 FF 
1eb44     00 FA 45 F5 | 	or	result1, ##54525952
1eb48     43 00 00 FF 
1eb4c     D8 E5 05 F1 | 	add	objptr, ##34776
1eb50     F2 FA 61 FC | 	wrlong	result1, objptr
1eb54     43 00 00 FF 
1eb58     D8 E5 85 F1 | 	sub	objptr, ##34776
1eb5c     F2 FA 01 F6 | 	mov	result1, objptr
1eb60     00 A8 01 FF 
1eb64     00 FA 45 F5 | 	or	result1, ##55574528
1eb68     43 00 00 FF 
1eb6c     DC E5 05 F1 | 	add	objptr, ##34780
1eb70     F2 FA 61 FC | 	wrlong	result1, objptr
1eb74     43 00 00 FF 
1eb78     DC E5 85 F1 | 	sub	objptr, ##34780
1eb7c     F2 FA 01 F6 | 	mov	result1, objptr
1eb80     00 B0 01 FF 
1eb84     00 FA 45 F5 | 	or	result1, ##56623104
1eb88     43 00 00 FF 
1eb8c     E0 E5 05 F1 | 	add	objptr, ##34784
1eb90     F2 FA 61 FC | 	wrlong	result1, objptr
1eb94     43 00 00 FF 
1eb98     E0 E5 85 F1 | 	sub	objptr, ##34784
1eb9c     F2 FA 01 F6 | 	mov	result1, objptr
1eba0     00 B8 01 FF 
1eba4     00 FA 45 F5 | 	or	result1, ##57671680
1eba8     43 00 00 FF 
1ebac     E4 E5 05 F1 | 	add	objptr, ##34788
1ebb0     F2 FA 61 FC | 	wrlong	result1, objptr
1ebb4     43 00 00 FF 
1ebb8     E4 E5 85 F1 | 	sub	objptr, ##34788
1ebbc     F2 FA 01 F6 | 	mov	result1, objptr
1ebc0     94 FA 25 F4 | 	bith	result1, #148
1ebc4     43 00 00 FF 
1ebc8     AC E5 05 F1 | 	add	objptr, ##34732
1ebcc     F2 FA 61 FC | 	wrlong	result1, objptr
1ebd0     43 00 00 FF 
1ebd4     AC E5 85 F1 | 	sub	objptr, ##34732
1ebd8     F2 FA 01 F6 | 	mov	result1, objptr
1ebdc     57 FA 25 F4 | 	bith	result1, #87
1ebe0     43 00 00 FF 
1ebe4     EC E5 05 F1 | 	add	objptr, ##34796
1ebe8     F2 FA 61 FC | 	wrlong	result1, objptr
1ebec     43 00 00 FF 
1ebf0     EC E5 85 F1 | 	sub	objptr, ##34796
1ebf4     F2 FA 01 F6 | 	mov	result1, objptr
1ebf8     00 C8 01 FF 
1ebfc     00 FA 45 F5 | 	or	result1, ##59768832
1ec00     43 00 00 FF 
1ec04     E8 E5 05 F1 | 	add	objptr, ##34792
1ec08     F2 FA 61 FC | 	wrlong	result1, objptr
1ec0c     43 00 00 FF 
1ec10     E8 E5 85 F1 | 	sub	objptr, ##34792
1ec14     F2 FA 01 F6 | 	mov	result1, objptr
1ec18     00 D0 01 FF 
1ec1c     00 FA 45 F5 | 	or	result1, ##60817408
1ec20     44 00 00 FF 
1ec24     00 E4 05 F1 | 	add	objptr, ##34816
1ec28     F2 FA 61 FC | 	wrlong	result1, objptr
1ec2c     44 00 00 FF 
1ec30     00 E4 85 F1 | 	sub	objptr, ##34816
1ec34     F2 FA 01 F6 | 	mov	result1, objptr
1ec38     00 D8 01 FF 
1ec3c     00 FA 45 F5 | 	or	result1, ##61865984
1ec40     44 00 00 FF 
1ec44     04 E4 05 F1 | 	add	objptr, ##34820
1ec48     F2 FA 61 FC | 	wrlong	result1, objptr
1ec4c     44 00 00 FF 
1ec50     04 E4 85 F1 | 	sub	objptr, ##34820
1ec54     F2 FA 01 F6 | 	mov	result1, objptr
1ec58     76 FA 25 F4 | 	bith	result1, #118
1ec5c     43 00 00 FF 
1ec60     F0 E5 05 F1 | 	add	objptr, ##34800
1ec64     F2 FA 61 FC | 	wrlong	result1, objptr
1ec68     43 00 00 FF 
1ec6c     F0 E5 85 F1 | 	sub	objptr, ##34800
1ec70     F2 FA 01 F6 | 	mov	result1, objptr
1ec74     00 E8 01 FF 
1ec78     00 FA 45 F5 | 	or	result1, ##63963136
1ec7c     43 00 00 FF 
1ec80     F4 E5 05 F1 | 	add	objptr, ##34804
1ec84     F2 FA 61 FC | 	wrlong	result1, objptr
1ec88     43 00 00 FF 
1ec8c     F4 E5 85 F1 | 	sub	objptr, ##34804
1ec90     F2 FA 01 F6 | 	mov	result1, objptr
1ec94     95 FA 25 F4 | 	bith	result1, #149
1ec98     43 00 00 FF 
1ec9c     F8 E5 05 F1 | 	add	objptr, ##34808
1eca0     F2 FA 61 FC | 	wrlong	result1, objptr
1eca4     43 00 00 FF 
1eca8     F8 E5 85 F1 | 	sub	objptr, ##34808
1ecac     F2 FA 01 F6 | 	mov	result1, objptr
1ecb0     B4 FA 25 F4 | 	bith	result1, #180
1ecb4     43 00 00 FF 
1ecb8     FC E5 05 F1 | 	add	objptr, ##34812
1ecbc     F2 FA 61 FC | 	wrlong	result1, objptr
1ecc0     43 00 00 FF 
1ecc4     FC E5 85 F1 | 	sub	objptr, ##34812
1ecc8     F2 FA 01 F6 | 	mov	result1, objptr
1eccc     1A FA 25 F4 | 	bith	result1, #26
1ecd0     44 00 00 FF 
1ecd4     0C E4 05 F1 | 	add	objptr, ##34828
1ecd8     F2 FA 61 FC | 	wrlong	result1, objptr
1ecdc     44 00 00 FF 
1ece0     0C E4 85 F1 | 	sub	objptr, ##34828
1ece4     F2 FA 01 F6 | 	mov	result1, objptr
1ece8     00 08 02 FF 
1ecec     00 FA 45 F5 | 	or	result1, ##68157440
1ecf0     44 00 00 FF 
1ecf4     08 E4 05 F1 | 	add	objptr, ##34824
1ecf8     F2 FA 61 FC | 	wrlong	result1, objptr
1ecfc     44 00 00 FF 
1ed00     08 E4 85 F1 | 	sub	objptr, ##34824
1ed04     F2 FA 01 F6 | 	mov	result1, objptr
1ed08     00 10 02 FF 
1ed0c     00 FA 45 F5 | 	or	result1, ##69206016
1ed10     44 00 00 FF 
1ed14     18 E4 05 F1 | 	add	objptr, ##34840
1ed18     F2 FA 61 FC | 	wrlong	result1, objptr
1ed1c     44 00 00 FF 
1ed20     18 E4 85 F1 | 	sub	objptr, ##34840
1ed24     F2 FA 01 F6 | 	mov	result1, objptr
1ed28     00 18 02 FF 
1ed2c     00 FA 45 F5 | 	or	result1, ##70254592
1ed30     44 00 00 FF 
1ed34     14 E4 05 F1 | 	add	objptr, ##34836
1ed38     F2 FA 61 FC | 	wrlong	result1, objptr
1ed3c     44 00 00 FF 
1ed40     14 E4 85 F1 | 	sub	objptr, ##34836
1ed44     F2 FA 01 F6 | 	mov	result1, objptr
1ed48     00 20 02 FF 
1ed4c     00 FA 45 F5 | 	or	result1, ##71303168
1ed50     44 00 00 FF 
1ed54     10 E4 05 F1 | 	add	objptr, ##34832
1ed58     F2 FA 61 FC | 	wrlong	result1, objptr
1ed5c     44 00 00 FF 
1ed60     10 E4 85 F1 | 	sub	objptr, ##34832
1ed64     F2 FA 01 F6 | 	mov	result1, objptr
1ed68     00 28 02 FF 
1ed6c     00 FA 45 F5 | 	or	result1, ##72351744
1ed70     44 00 00 FF 
1ed74     1C E4 05 F1 | 	add	objptr, ##34844
1ed78     F2 FA 61 FC | 	wrlong	result1, objptr
1ed7c     44 00 00 FF 
1ed80     1C E4 85 F1 | 	sub	objptr, ##34844
1ed84     F2 FA 01 F6 | 	mov	result1, objptr
1ed88     00 30 02 FF 
1ed8c     00 FA 45 F5 | 	or	result1, ##73400320
1ed90     44 00 00 FF 
1ed94     20 E4 05 F1 | 	add	objptr, ##34848
1ed98     F2 FA 61 FC | 	wrlong	result1, objptr
1ed9c     44 00 00 FF 
1eda0     20 E4 85 F1 | 	sub	objptr, ##34848
1eda4     F2 FA 01 F6 | 	mov	result1, objptr
1eda8     00 38 02 FF 
1edac     00 FA 45 F5 | 	or	result1, ##74448896
1edb0     43 00 00 FF 
1edb4     B4 E4 05 F1 | 	add	objptr, ##34484
1edb8     F2 FA 61 FC | 	wrlong	result1, objptr
1edbc     43 00 00 FF 
1edc0     B4 E4 85 F1 | 	sub	objptr, ##34484
1edc4     F2 FA 01 F6 | 	mov	result1, objptr
1edc8     00 40 02 FF 
1edcc     00 FA 45 F5 | 	or	result1, ##75497472
1edd0     44 00 00 FF 
1edd4     38 E4 05 F1 | 	add	objptr, ##34872
1edd8     F2 FA 61 FC | 	wrlong	result1, objptr
1eddc     44 00 00 FF 
1ede0     38 E4 85 F1 | 	sub	objptr, ##34872
1ede4     F2 FA 01 F6 | 	mov	result1, objptr
1ede8     00 48 02 FF 
1edec     00 FA 45 F5 | 	or	result1, ##76546048
1edf0     44 00 00 FF 
1edf4     48 E4 05 F1 | 	add	objptr, ##34888
1edf8     F2 FA 61 FC | 	wrlong	result1, objptr
1edfc     44 00 00 FF 
1ee00     48 E4 85 F1 | 	sub	objptr, ##34888
1ee04     F2 FA 01 F6 | 	mov	result1, objptr
1ee08     00 50 02 FF 
1ee0c     00 FA 45 F5 | 	or	result1, ##77594624
1ee10     44 00 00 FF 
1ee14     4C E4 05 F1 | 	add	objptr, ##34892
1ee18     F2 FA 61 FC | 	wrlong	result1, objptr
1ee1c     44 00 00 FF 
1ee20     4C E4 85 F1 | 	sub	objptr, ##34892
1ee24     F2 FA 01 F6 | 	mov	result1, objptr
1ee28     00 58 02 FF 
1ee2c     00 FA 45 F5 | 	or	result1, ##78643200
1ee30     44 00 00 FF 
1ee34     44 E4 05 F1 | 	add	objptr, ##34884
1ee38     F2 FA 61 FC | 	wrlong	result1, objptr
1ee3c     44 00 00 FF 
1ee40     44 E4 85 F1 | 	sub	objptr, ##34884
1ee44     F2 FA 01 F6 | 	mov	result1, objptr
1ee48     00 60 02 FF 
1ee4c     00 FA 45 F5 | 	or	result1, ##79691776
1ee50     44 00 00 FF 
1ee54     3C E4 05 F1 | 	add	objptr, ##34876
1ee58     F2 FA 61 FC | 	wrlong	result1, objptr
1ee5c     44 00 00 FF 
1ee60     3C E4 85 F1 | 	sub	objptr, ##34876
1ee64     F2 FA 01 F6 | 	mov	result1, objptr
1ee68     00 68 02 FF 
1ee6c     00 FA 45 F5 | 	or	result1, ##80740352
1ee70     44 00 00 FF 
1ee74     40 E4 05 F1 | 	add	objptr, ##34880
1ee78     F2 FA 61 FC | 	wrlong	result1, objptr
1ee7c     44 00 00 FF 
1ee80     40 E4 85 F1 | 	sub	objptr, ##34880
1ee84     F2 FA 01 F6 | 	mov	result1, objptr
1ee88     00 70 02 FF 
1ee8c     00 FA 45 F5 | 	or	result1, ##81788928
1ee90     44 00 00 FF 
1ee94     50 E4 05 F1 | 	add	objptr, ##34896
1ee98     F2 FA 61 FC | 	wrlong	result1, objptr
1ee9c     44 00 00 FF 
1eea0     50 E4 85 F1 | 	sub	objptr, ##34896
1eea4     F2 FA 01 F6 | 	mov	result1, objptr
1eea8     00 78 02 FF 
1eeac     00 FA 45 F5 | 	or	result1, ##82837504
1eeb0     44 00 00 FF 
1eeb4     54 E4 05 F1 | 	add	objptr, ##34900
1eeb8     F2 FA 61 FC | 	wrlong	result1, objptr
1eebc     44 00 00 FF 
1eec0     54 E4 85 F1 | 	sub	objptr, ##34900
1eec4     F2 FA 01 F6 | 	mov	result1, objptr
1eec8     00 80 02 FF 
1eecc     00 FA 45 F5 | 	or	result1, ##83886080
1eed0     44 00 00 FF 
1eed4     58 E4 05 F1 | 	add	objptr, ##34904
1eed8     F2 FA 61 FC | 	wrlong	result1, objptr
1eedc     44 00 00 FF 
1eee0     58 E4 85 F1 | 	sub	objptr, ##34904
1eee4     F2 FA 01 F6 | 	mov	result1, objptr
1eee8     00 88 02 FF 
1eeec     00 FA 45 F5 | 	or	result1, ##84934656
1eef0     44 00 00 FF 
1eef4     5C E4 05 F1 | 	add	objptr, ##34908
1eef8     F2 FA 61 FC | 	wrlong	result1, objptr
1eefc     44 00 00 FF 
1ef00     5C E4 85 F1 | 	sub	objptr, ##34908
1ef04     F2 FA 01 F6 | 	mov	result1, objptr
1ef08     00 90 02 FF 
1ef0c     00 FA 45 F5 | 	or	result1, ##85983232
1ef10     44 00 00 FF 
1ef14     60 E4 05 F1 | 	add	objptr, ##34912
1ef18     F2 FA 61 FC | 	wrlong	result1, objptr
1ef1c     44 00 00 FF 
1ef20     60 E4 85 F1 | 	sub	objptr, ##34912
1ef24     F2 FA 01 F6 | 	mov	result1, objptr
1ef28     00 98 02 FF 
1ef2c     00 FA 45 F5 | 	or	result1, ##87031808
1ef30     44 00 00 FF 
1ef34     64 E4 05 F1 | 	add	objptr, ##34916
1ef38     F2 FA 61 FC | 	wrlong	result1, objptr
1ef3c     44 00 00 FF 
1ef40     64 E4 85 F1 | 	sub	objptr, ##34916
1ef44     F2 FA 01 F6 | 	mov	result1, objptr
1ef48     00 A0 02 FF 
1ef4c     00 FA 45 F5 | 	or	result1, ##88080384
1ef50     44 00 00 FF 
1ef54     68 E4 05 F1 | 	add	objptr, ##34920
1ef58     F2 FA 61 FC | 	wrlong	result1, objptr
1ef5c     44 00 00 FF 
1ef60     68 E4 85 F1 | 	sub	objptr, ##34920
1ef64     F2 FA 01 F6 | 	mov	result1, objptr
1ef68     00 A8 02 FF 
1ef6c     00 FA 45 F5 | 	or	result1, ##89128960
1ef70     44 00 00 FF 
1ef74     6C E4 05 F1 | 	add	objptr, ##34924
1ef78     F2 FA 61 FC | 	wrlong	result1, objptr
1ef7c     44 00 00 FF 
1ef80     6C E4 85 F1 | 	sub	objptr, ##34924
1ef84     F2 FA 01 F6 | 	mov	result1, objptr
1ef88     00 B0 02 FF 
1ef8c     00 FA 45 F5 | 	or	result1, ##90177536
1ef90     44 00 00 FF 
1ef94     78 E4 05 F1 | 	add	objptr, ##34936
1ef98     F2 FA 61 FC | 	wrlong	result1, objptr
1ef9c     44 00 00 FF 
1efa0     78 E4 85 F1 | 	sub	objptr, ##34936
1efa4     F2 FA 01 F6 | 	mov	result1, objptr
1efa8     00 B8 02 FF 
1efac     00 FA 45 F5 | 	or	result1, ##91226112
1efb0     44 00 00 FF 
1efb4     70 E4 05 F1 | 	add	objptr, ##34928
1efb8     F2 FA 61 FC | 	wrlong	result1, objptr
1efbc     44 00 00 FF 
1efc0     70 E4 85 F1 | 	sub	objptr, ##34928
1efc4     F2 FA 01 F6 | 	mov	result1, objptr
1efc8     00 C0 02 FF 
1efcc     00 FA 45 F5 | 	or	result1, ##92274688
1efd0     44 00 00 FF 
1efd4     74 E4 05 F1 | 	add	objptr, ##34932
1efd8     F2 FA 61 FC | 	wrlong	result1, objptr
1efdc     44 00 00 FF 
1efe0     74 E4 85 F1 | 	sub	objptr, ##34932
1efe4     F2 FA 01 F6 | 	mov	result1, objptr
1efe8     00 C8 02 FF 
1efec     00 FA 45 F5 | 	or	result1, ##93323264
1eff0     44 00 00 FF 
1eff4     7C E4 05 F1 | 	add	objptr, ##34940
1eff8     F2 FA 61 FC | 	wrlong	result1, objptr
1effc     44 00 00 FF 
1f000     7C E4 85 F1 | 	sub	objptr, ##34940
1f004     F2 FA 01 F6 | 	mov	result1, objptr
1f008     00 D0 02 FF 
1f00c     00 FA 45 F5 | 	or	result1, ##94371840
1f010     44 00 00 FF 
1f014     24 E4 05 F1 | 	add	objptr, ##34852
1f018     F2 FA 61 FC | 	wrlong	result1, objptr
1f01c     44 00 00 FF 
1f020     24 E4 85 F1 | 	sub	objptr, ##34852
1f024     F2 FA 01 F6 | 	mov	result1, objptr
1f028     00 D8 02 FF 
1f02c     00 FA 45 F5 | 	or	result1, ##95420416
1f030     44 00 00 FF 
1f034     2C E4 05 F1 | 	add	objptr, ##34860
1f038     F2 FA 61 FC | 	wrlong	result1, objptr
1f03c     44 00 00 FF 
1f040     2C E4 85 F1 | 	sub	objptr, ##34860
1f044     F2 FA 01 F6 | 	mov	result1, objptr
1f048     00 E0 02 FF 
1f04c     00 FA 45 F5 | 	or	result1, ##96468992
1f050     44 00 00 FF 
1f054     30 E4 05 F1 | 	add	objptr, ##34864
1f058     F2 FA 61 FC | 	wrlong	result1, objptr
1f05c     44 00 00 FF 
1f060     30 E4 85 F1 | 	sub	objptr, ##34864
1f064     F2 FA 01 F6 | 	mov	result1, objptr
1f068     00 E8 02 FF 
1f06c     00 FA 45 F5 | 	or	result1, ##97517568
1f070     44 00 00 FF 
1f074     80 E4 05 F1 | 	add	objptr, ##34944
1f078     F2 FA 61 FC | 	wrlong	result1, objptr
1f07c     44 00 00 FF 
1f080     80 E4 85 F1 | 	sub	objptr, ##34944
1f084     F2 FA 01 F6 | 	mov	result1, objptr
1f088     00 F0 02 FF 
1f08c     00 FA 45 F5 | 	or	result1, ##98566144
1f090     44 00 00 FF 
1f094     84 E4 05 F1 | 	add	objptr, ##34948
1f098     F2 FA 61 FC | 	wrlong	result1, objptr
1f09c     44 00 00 FF 
1f0a0     84 E4 85 F1 | 	sub	objptr, ##34948
1f0a4     F2 FA 01 F6 | 	mov	result1, objptr
1f0a8     00 F8 02 FF 
1f0ac     00 FA 45 F5 | 	or	result1, ##99614720
1f0b0     44 00 00 FF 
1f0b4     88 E4 05 F1 | 	add	objptr, ##34952
1f0b8     F2 FA 61 FC | 	wrlong	result1, objptr
1f0bc     44 00 00 FF 
1f0c0     88 E4 85 F1 | 	sub	objptr, ##34952
1f0c4     F2 FA 01 F6 | 	mov	result1, objptr
1f0c8     39 FA 25 F4 | 	bith	result1, #57
1f0cc     44 00 00 FF 
1f0d0     34 E4 05 F1 | 	add	objptr, ##34868
1f0d4     F2 FA 61 FC | 	wrlong	result1, objptr
1f0d8     44 00 00 FF 
1f0dc     34 E4 85 F1 | 	sub	objptr, ##34868
1f0e0     F2 FA 01 F6 | 	mov	result1, objptr
1f0e4     00 08 03 FF 
1f0e8     00 FA 45 F5 | 	or	result1, ##101711872
1f0ec     44 00 00 FF 
1f0f0     98 E4 05 F1 | 	add	objptr, ##34968
1f0f4     F2 FA 61 FC | 	wrlong	result1, objptr
1f0f8     44 00 00 FF 
1f0fc     98 E4 85 F1 | 	sub	objptr, ##34968
1f100     F2 FA 01 F6 | 	mov	result1, objptr
1f104     00 10 03 FF 
1f108     00 FA 45 F5 | 	or	result1, ##102760448
1f10c     44 00 00 FF 
1f110     A0 E4 05 F1 | 	add	objptr, ##34976
1f114     F2 FA 61 FC | 	wrlong	result1, objptr
1f118     44 00 00 FF 
1f11c     A0 E4 85 F1 | 	sub	objptr, ##34976
1f120     F2 FA 01 F6 | 	mov	result1, objptr
1f124     00 18 03 FF 
1f128     00 FA 45 F5 | 	or	result1, ##103809024
1f12c     44 00 00 FF 
1f130     94 E4 05 F1 | 	add	objptr, ##34964
1f134     F2 FA 61 FC | 	wrlong	result1, objptr
1f138     44 00 00 FF 
1f13c     94 E4 85 F1 | 	sub	objptr, ##34964
1f140     F2 FA 01 F6 | 	mov	result1, objptr
1f144     00 20 03 FF 
1f148     00 FA 45 F5 | 	or	result1, ##104857600
1f14c     44 00 00 FF 
1f150     90 E4 05 F1 | 	add	objptr, ##34960
1f154     F2 FA 61 FC | 	wrlong	result1, objptr
1f158     44 00 00 FF 
1f15c     90 E4 85 F1 | 	sub	objptr, ##34960
1f160     F2 FA 01 F6 | 	mov	result1, objptr
1f164     00 28 03 FF 
1f168     00 FA 45 F5 | 	or	result1, ##105906176
1f16c     44 00 00 FF 
1f170     8C E4 05 F1 | 	add	objptr, ##34956
1f174     F2 FA 61 FC | 	wrlong	result1, objptr
1f178     44 00 00 FF 
1f17c     8C E4 85 F1 | 	sub	objptr, ##34956
1f180     F2 FA 01 F6 | 	mov	result1, objptr
1f184     00 30 03 FF 
1f188     00 FA 45 F5 | 	or	result1, ##106954752
1f18c     44 00 00 FF 
1f190     9C E4 05 F1 | 	add	objptr, ##34972
1f194     F2 FA 61 FC | 	wrlong	result1, objptr
1f198     44 00 00 FF 
1f19c     9C E4 85 F1 | 	sub	objptr, ##34972
1f1a0     F2 FA 01 F6 | 	mov	result1, objptr
1f1a4     00 38 03 FF 
1f1a8     00 FA 45 F5 | 	or	result1, ##108003328
1f1ac     44 00 00 FF 
1f1b0     A4 E4 05 F1 | 	add	objptr, ##34980
1f1b4     F2 FA 61 FC | 	wrlong	result1, objptr
1f1b8     44 00 00 FF 
1f1bc     A4 E4 85 F1 | 	sub	objptr, ##34980
1f1c0     F2 FA 01 F6 | 	mov	result1, objptr
1f1c4     00 40 03 FF 
1f1c8     00 FA 45 F5 | 	or	result1, ##109051904
1f1cc     44 00 00 FF 
1f1d0     A8 E4 05 F1 | 	add	objptr, ##34984
1f1d4     F2 FA 61 FC | 	wrlong	result1, objptr
1f1d8     44 00 00 FF 
1f1dc     A8 E4 85 F1 | 	sub	objptr, ##34984
1f1e0     F2 FA 01 F6 | 	mov	result1, objptr
1f1e4     00 48 03 FF 
1f1e8     00 FA 45 F5 | 	or	result1, ##110100480
1f1ec     44 00 00 FF 
1f1f0     AC E4 05 F1 | 	add	objptr, ##34988
1f1f4     F2 FA 61 FC | 	wrlong	result1, objptr
1f1f8     44 00 00 FF 
1f1fc     AC E4 85 F1 | 	sub	objptr, ##34988
1f200     F2 FA 01 F6 | 	mov	result1, objptr
1f204     00 50 03 FF 
1f208     00 FA 45 F5 | 	or	result1, ##111149056
1f20c     44 00 00 FF 
1f210     B4 E4 05 F1 | 	add	objptr, ##34996
1f214     F2 FA 61 FC | 	wrlong	result1, objptr
1f218     44 00 00 FF 
1f21c     B4 E4 85 F1 | 	sub	objptr, ##34996
1f220     F2 FA 01 F6 | 	mov	result1, objptr
1f224     00 58 03 FF 
1f228     00 FA 45 F5 | 	or	result1, ##112197632
1f22c     44 00 00 FF 
1f230     B8 E4 05 F1 | 	add	objptr, ##35000
1f234     F2 FA 61 FC | 	wrlong	result1, objptr
1f238     44 00 00 FF 
1f23c     B8 E4 85 F1 | 	sub	objptr, ##35000
1f240     F2 FA 01 F6 | 	mov	result1, objptr
1f244     00 60 03 FF 
1f248     00 FA 45 F5 | 	or	result1, ##113246208
1f24c     44 00 00 FF 
1f250     BC E4 05 F1 | 	add	objptr, ##35004
1f254     F2 FA 61 FC | 	wrlong	result1, objptr
1f258     44 00 00 FF 
1f25c     BC E4 85 F1 | 	sub	objptr, ##35004
1f260     F2 FA 01 F6 | 	mov	result1, objptr
1f264     00 68 03 FF 
1f268     00 FA 45 F5 | 	or	result1, ##114294784
1f26c     44 00 00 FF 
1f270     C0 E4 05 F1 | 	add	objptr, ##35008
1f274     F2 FA 61 FC | 	wrlong	result1, objptr
1f278     44 00 00 FF 
1f27c     C0 E4 85 F1 | 	sub	objptr, ##35008
1f280     F2 FA 01 F6 | 	mov	result1, objptr
1f284     00 70 03 FF 
1f288     00 FA 45 F5 | 	or	result1, ##115343360
1f28c     44 00 00 FF 
1f290     C4 E4 05 F1 | 	add	objptr, ##35012
1f294     F2 FA 61 FC | 	wrlong	result1, objptr
1f298     44 00 00 FF 
1f29c     C4 E4 85 F1 | 	sub	objptr, ##35012
1f2a0     F2 FA 01 F6 | 	mov	result1, objptr
1f2a4     00 78 03 FF 
1f2a8     00 FA 45 F5 | 	or	result1, ##116391936
1f2ac     44 00 00 FF 
1f2b0     C8 E4 05 F1 | 	add	objptr, ##35016
1f2b4     F2 FA 61 FC | 	wrlong	result1, objptr
1f2b8     44 00 00 FF 
1f2bc     C8 E4 85 F1 | 	sub	objptr, ##35016
1f2c0     F2 FA 01 F6 | 	mov	result1, objptr
1f2c4     00 08 01 FF 
1f2c8     00 FA 45 F5 | 	or	result1, ##34603008
1f2cc     44 00 00 FF 
1f2d0     CC E4 05 F1 | 	add	objptr, ##35020
1f2d4     F2 FA 61 FC | 	wrlong	result1, objptr
1f2d8     44 00 00 FF 
1f2dc     CC E4 85 F1 | 	sub	objptr, ##35020
1f2e0     F2 FA 01 F6 | 	mov	result1, objptr
1f2e4     58 FA 25 F4 | 	bith	result1, #88
1f2e8     44 00 00 FF 
1f2ec     D0 E4 05 F1 | 	add	objptr, ##35024
1f2f0     F2 FA 61 FC | 	wrlong	result1, objptr
1f2f4     44 00 00 FF 
1f2f8     D0 E4 85 F1 | 	sub	objptr, ##35024
1f2fc     F2 FA 01 F6 | 	mov	result1, objptr
1f300     00 88 03 FF 
1f304     00 FA 45 F5 | 	or	result1, ##118489088
1f308     44 00 00 FF 
1f30c     B0 E4 05 F1 | 	add	objptr, ##34992
1f310     F2 FA 61 FC | 	wrlong	result1, objptr
1f314     44 00 00 FF 
1f318     B0 E4 85 F1 | 	sub	objptr, ##34992
1f31c     F2 FA 01 F6 | 	mov	result1, objptr
1f320     00 90 03 FF 
1f324     00 FA 45 F5 | 	or	result1, ##119537664
1f328     43 00 00 FF 
1f32c     A8 E4 05 F1 | 	add	objptr, ##34472
1f330     F2 FA 61 FC | 	wrlong	result1, objptr
1f334     43 00 00 FF 
1f338     A8 E4 85 F1 | 	sub	objptr, ##34472
1f33c     F2 FA 01 F6 | 	mov	result1, objptr
1f340     00 98 03 FF 
1f344     00 FA 45 F5 | 	or	result1, ##120586240
1f348     44 00 00 FF 
1f34c     D4 E4 05 F1 | 	add	objptr, ##35028
1f350     F2 FA 61 FC | 	wrlong	result1, objptr
1f354     44 00 00 FF 
1f358     D4 E4 85 F1 | 	sub	objptr, ##35028
1f35c     F2 FA 01 F6 | 	mov	result1, objptr
1f360     00 A0 03 FF 
1f364     00 FA 45 F5 | 	or	result1, ##121634816
1f368     44 00 00 FF 
1f36c     D8 E4 05 F1 | 	add	objptr, ##35032
1f370     F2 FA 61 FC | 	wrlong	result1, objptr
1f374     44 00 00 FF 
1f378     D8 E4 85 F1 | 	sub	objptr, ##35032
1f37c     F2 FA 01 F6 | 	mov	result1, objptr
1f380     00 A8 03 FF 
1f384     00 FA 45 F5 | 	or	result1, ##122683392
1f388     44 00 00 FF 
1f38c     EC E4 05 F1 | 	add	objptr, ##35052
1f390     F2 FA 61 FC | 	wrlong	result1, objptr
1f394     44 00 00 FF 
1f398     EC E4 85 F1 | 	sub	objptr, ##35052
1f39c     F2 FA 01 F6 | 	mov	result1, objptr
1f3a0     00 B0 03 FF 
1f3a4     00 FA 45 F5 | 	or	result1, ##123731968
1f3a8     44 00 00 FF 
1f3ac     E8 E4 05 F1 | 	add	objptr, ##35048
1f3b0     F2 FA 61 FC | 	wrlong	result1, objptr
1f3b4     44 00 00 FF 
1f3b8     E8 E4 85 F1 | 	sub	objptr, ##35048
1f3bc     F2 FA 01 F6 | 	mov	result1, objptr
1f3c0     00 B8 03 FF 
1f3c4     00 FA 45 F5 | 	or	result1, ##124780544
1f3c8     44 00 00 FF 
1f3cc     E0 E4 05 F1 | 	add	objptr, ##35040
1f3d0     F2 FA 61 FC | 	wrlong	result1, objptr
1f3d4     44 00 00 FF 
1f3d8     E0 E4 85 F1 | 	sub	objptr, ##35040
1f3dc     F2 FA 01 F6 | 	mov	result1, objptr
1f3e0     77 FA 25 F4 | 	bith	result1, #119
1f3e4     44 00 00 FF 
1f3e8     DC E4 05 F1 | 	add	objptr, ##35036
1f3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1f3f0     44 00 00 FF 
1f3f4     DC E4 85 F1 | 	sub	objptr, ##35036
1f3f8     F2 FA 01 F6 | 	mov	result1, objptr
1f3fc     00 C8 03 FF 
1f400     00 FA 45 F5 | 	or	result1, ##126877696
1f404     44 00 00 FF 
1f408     FC E4 05 F1 | 	add	objptr, ##35068
1f40c     F2 FA 61 FC | 	wrlong	result1, objptr
1f410     44 00 00 FF 
1f414     FC E4 85 F1 | 	sub	objptr, ##35068
1f418     F2 FA 01 F6 | 	mov	result1, objptr
1f41c     00 D0 03 FF 
1f420     00 FA 45 F5 | 	or	result1, ##127926272
1f424     44 00 00 FF 
1f428     F0 E4 05 F1 | 	add	objptr, ##35056
1f42c     F2 FA 61 FC | 	wrlong	result1, objptr
1f430     44 00 00 FF 
1f434     F0 E4 85 F1 | 	sub	objptr, ##35056
1f438     F2 FA 01 F6 | 	mov	result1, objptr
1f43c     00 D8 03 FF 
1f440     00 FA 45 F5 | 	or	result1, ##128974848
1f444     44 00 00 FF 
1f448     F4 E4 05 F1 | 	add	objptr, ##35060
1f44c     F2 FA 61 FC | 	wrlong	result1, objptr
1f450     44 00 00 FF 
1f454     F4 E4 85 F1 | 	sub	objptr, ##35060
1f458     F2 FA 01 F6 | 	mov	result1, objptr
1f45c     96 FA 25 F4 | 	bith	result1, #150
1f460     44 00 00 FF 
1f464     F8 E4 05 F1 | 	add	objptr, ##35064
1f468     F2 FA 61 FC | 	wrlong	result1, objptr
1f46c     44 00 00 FF 
1f470     F8 E4 85 F1 | 	sub	objptr, ##35064
1f474     F2 FA 01 F6 | 	mov	result1, objptr
1f478     00 E8 03 FF 
1f47c     00 FA 45 F5 | 	or	result1, ##131072000
1f480     44 00 00 FF 
1f484     00 E5 05 F1 | 	add	objptr, ##35072
1f488     F2 FA 61 FC | 	wrlong	result1, objptr
1f48c     44 00 00 FF 
1f490     00 E5 85 F1 | 	sub	objptr, ##35072
1f494     F2 FA 01 F6 | 	mov	result1, objptr
1f498     B5 FA 25 F4 | 	bith	result1, #181
1f49c     44 00 00 FF 
1f4a0     04 E5 05 F1 | 	add	objptr, ##35076
1f4a4     F2 FA 61 FC | 	wrlong	result1, objptr
1f4a8     44 00 00 FF 
1f4ac     04 E5 85 F1 | 	sub	objptr, ##35076
1f4b0     F2 FA 01 F6 | 	mov	result1, objptr
1f4b4     D4 FA 25 F4 | 	bith	result1, #212
1f4b8     44 00 00 FF 
1f4bc     08 E5 05 F1 | 	add	objptr, ##35080
1f4c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f4c4     44 00 00 FF 
1f4c8     08 E5 85 F1 | 	sub	objptr, ##35080
1f4cc     F2 FA 01 F6 | 	mov	result1, objptr
1f4d0     1B FA 25 F4 | 	bith	result1, #27
1f4d4     44 00 00 FF 
1f4d8     0C E5 05 F1 | 	add	objptr, ##35084
1f4dc     F2 FA 61 FC | 	wrlong	result1, objptr
1f4e0     44 00 00 FF 
1f4e4     0C E5 85 F1 | 	sub	objptr, ##35084
1f4e8     F2 FA 01 F6 | 	mov	result1, objptr
1f4ec     00 08 04 FF 
1f4f0     00 FA 45 F5 | 	or	result1, ##135266304
1f4f4     44 00 00 FF 
1f4f8     10 E5 05 F1 | 	add	objptr, ##35088
1f4fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f500     44 00 00 FF 
1f504     10 E5 85 F1 | 	sub	objptr, ##35088
1f508     F2 FA 01 F6 | 	mov	result1, objptr
1f50c     00 10 04 FF 
1f510     00 FA 45 F5 | 	or	result1, ##136314880
1f514     44 00 00 FF 
1f518     14 E5 05 F1 | 	add	objptr, ##35092
1f51c     F2 FA 61 FC | 	wrlong	result1, objptr
1f520     44 00 00 FF 
1f524     14 E5 85 F1 | 	sub	objptr, ##35092
1f528     F2 FA 01 F6 | 	mov	result1, objptr
1f52c     00 18 04 FF 
1f530     00 FA 45 F5 | 	or	result1, ##137363456
1f534     44 00 00 FF 
1f538     1C E5 05 F1 | 	add	objptr, ##35100
1f53c     F2 FA 61 FC | 	wrlong	result1, objptr
1f540     44 00 00 FF 
1f544     1C E5 85 F1 | 	sub	objptr, ##35100
1f548     F2 FA 01 F6 | 	mov	result1, objptr
1f54c     00 20 04 FF 
1f550     00 FA 45 F5 | 	or	result1, ##138412032
1f554     44 00 00 FF 
1f558     20 E5 05 F1 | 	add	objptr, ##35104
1f55c     F2 FA 61 FC | 	wrlong	result1, objptr
1f560     44 00 00 FF 
1f564     20 E5 85 F1 | 	sub	objptr, ##35104
1f568     F2 FA 01 F6 | 	mov	result1, objptr
1f56c     00 28 04 FF 
1f570     00 FA 45 F5 | 	or	result1, ##139460608
1f574     44 00 00 FF 
1f578     24 E5 05 F1 | 	add	objptr, ##35108
1f57c     F2 FA 61 FC | 	wrlong	result1, objptr
1f580     44 00 00 FF 
1f584     24 E5 85 F1 | 	sub	objptr, ##35108
1f588     F2 FA 01 F6 | 	mov	result1, objptr
1f58c     00 30 04 FF 
1f590     00 FA 45 F5 | 	or	result1, ##140509184
1f594     44 00 00 FF 
1f598     18 E5 05 F1 | 	add	objptr, ##35096
1f59c     F2 FA 61 FC | 	wrlong	result1, objptr
1f5a0     44 00 00 FF 
1f5a4     18 E5 85 F1 | 	sub	objptr, ##35096
1f5a8     F2 FA 01 F6 | 	mov	result1, objptr
1f5ac     00 38 04 FF 
1f5b0     00 FA 45 F5 | 	or	result1, ##141557760
1f5b4     44 00 00 FF 
1f5b8     28 E5 05 F1 | 	add	objptr, ##35112
1f5bc     F2 FA 61 FC | 	wrlong	result1, objptr
1f5c0     44 00 00 FF 
1f5c4     28 E5 85 F1 | 	sub	objptr, ##35112
1f5c8     F2 FA 01 F6 | 	mov	result1, objptr
1f5cc     00 40 04 FF 
1f5d0     00 FA 45 F5 | 	or	result1, ##142606336
1f5d4     44 00 00 FF 
1f5d8     5C E5 05 F1 | 	add	objptr, ##35164
1f5dc     F2 FA 61 FC | 	wrlong	result1, objptr
1f5e0     44 00 00 FF 
1f5e4     5C E5 85 F1 | 	sub	objptr, ##35164
1f5e8     F2 FA 01 F6 | 	mov	result1, objptr
1f5ec     00 48 04 FF 
1f5f0     00 FA 45 F5 | 	or	result1, ##143654912
1f5f4     44 00 00 FF 
1f5f8     54 E5 05 F1 | 	add	objptr, ##35156
1f5fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f600     44 00 00 FF 
1f604     54 E5 85 F1 | 	sub	objptr, ##35156
1f608     F2 FA 01 F6 | 	mov	result1, objptr
1f60c     00 50 04 FF 
1f610     00 FA 45 F5 | 	or	result1, ##144703488
1f614     44 00 00 FF 
1f618     2C E5 05 F1 | 	add	objptr, ##35116
1f61c     F2 FA 61 FC | 	wrlong	result1, objptr
1f620     44 00 00 FF 
1f624     2C E5 85 F1 | 	sub	objptr, ##35116
1f628     F2 FA 01 F6 | 	mov	result1, objptr
1f62c     00 58 04 FF 
1f630     00 FA 45 F5 | 	or	result1, ##145752064
1f634     44 00 00 FF 
1f638     30 E5 05 F1 | 	add	objptr, ##35120
1f63c     F2 FA 61 FC | 	wrlong	result1, objptr
1f640     44 00 00 FF 
1f644     30 E5 85 F1 | 	sub	objptr, ##35120
1f648     F2 FA 01 F6 | 	mov	result1, objptr
1f64c     00 60 04 FF 
1f650     00 FA 45 F5 | 	or	result1, ##146800640
1f654     44 00 00 FF 
1f658     4C E5 05 F1 | 	add	objptr, ##35148
1f65c     F2 FA 61 FC | 	wrlong	result1, objptr
1f660     44 00 00 FF 
1f664     4C E5 85 F1 | 	sub	objptr, ##35148
1f668     F2 FA 01 F6 | 	mov	result1, objptr
1f66c     00 68 04 FF 
1f670     00 FA 45 F5 | 	or	result1, ##147849216
1f674     44 00 00 FF 
1f678     50 E5 05 F1 | 	add	objptr, ##35152
1f67c     F2 FA 61 FC | 	wrlong	result1, objptr
1f680     44 00 00 FF 
1f684     50 E5 85 F1 | 	sub	objptr, ##35152
1f688     F2 FA 01 F6 | 	mov	result1, objptr
1f68c     00 70 04 FF 
1f690     00 FA 45 F5 | 	or	result1, ##148897792
1f694     44 00 00 FF 
1f698     6C E5 05 F1 | 	add	objptr, ##35180
1f69c     F2 FA 61 FC | 	wrlong	result1, objptr
1f6a0     44 00 00 FF 
1f6a4     6C E5 85 F1 | 	sub	objptr, ##35180
1f6a8     F2 FA 01 F6 | 	mov	result1, objptr
1f6ac     00 78 04 FF 
1f6b0     00 FA 45 F5 | 	or	result1, ##149946368
1f6b4     44 00 00 FF 
1f6b8     68 E5 05 F1 | 	add	objptr, ##35176
1f6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1f6c0     44 00 00 FF 
1f6c4     68 E5 85 F1 | 	sub	objptr, ##35176
1f6c8     F2 FA 01 F6 | 	mov	result1, objptr
1f6cc     00 80 04 FF 
1f6d0     00 FA 45 F5 | 	or	result1, ##150994944
1f6d4     44 00 00 FF 
1f6d8     78 E5 05 F1 | 	add	objptr, ##35192
1f6dc     F2 FA 61 FC | 	wrlong	result1, objptr
1f6e0     44 00 00 FF 
1f6e4     78 E5 85 F1 | 	sub	objptr, ##35192
1f6e8     F2 FA 01 F6 | 	mov	result1, objptr
1f6ec     00 88 04 FF 
1f6f0     00 FA 45 F5 | 	or	result1, ##152043520
1f6f4     44 00 00 FF 
1f6f8     44 E5 05 F1 | 	add	objptr, ##35140
1f6fc     F2 FA 61 FC | 	wrlong	result1, objptr
1f700     44 00 00 FF 
1f704     44 E5 85 F1 | 	sub	objptr, ##35140
1f708     F2 FA 01 F6 | 	mov	result1, objptr
1f70c     00 90 04 FF 
1f710     00 FA 45 F5 | 	or	result1, ##153092096
1f714     44 00 00 FF 
1f718     74 E5 05 F1 | 	add	objptr, ##35188
1f71c     F2 FA 61 FC | 	wrlong	result1, objptr
1f720     44 00 00 FF 
1f724     74 E5 85 F1 | 	sub	objptr, ##35188
1f728     F2 FA 01 F6 | 	mov	result1, objptr
1f72c     00 98 04 FF 
1f730     00 FA 45 F5 | 	or	result1, ##154140672
1f734     44 00 00 FF 
1f738     64 E5 05 F1 | 	add	objptr, ##35172
1f73c     F2 FA 61 FC | 	wrlong	result1, objptr
1f740     44 00 00 FF 
1f744     64 E5 85 F1 | 	sub	objptr, ##35172
1f748     F2 FA 01 F6 | 	mov	result1, objptr
1f74c     00 A0 04 FF 
1f750     00 FA 45 F5 | 	or	result1, ##155189248
1f754     43 00 00 FF 
1f758     14 E5 05 F1 | 	add	objptr, ##34580
1f75c     F2 FA 61 FC | 	wrlong	result1, objptr
1f760     43 00 00 FF 
1f764     14 E5 85 F1 | 	sub	objptr, ##34580
1f768     F2 FA 01 F6 | 	mov	result1, objptr
1f76c     00 A8 04 FF 
1f770     00 FA 45 F5 | 	or	result1, ##156237824
1f774     44 00 00 FF 
1f778     34 E5 05 F1 | 	add	objptr, ##35124
1f77c     F2 FA 61 FC | 	wrlong	result1, objptr
1f780     44 00 00 FF 
1f784     34 E5 85 F1 | 	sub	objptr, ##35124
1f788                 | _init_commands_ret
1f788     2D 00 64 FD | 	ret
1f78c                 | 
1f78c                 | ' 
1f78c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1f78c                 | ' 
1f78c                 | ' sub init_audio
1f78c                 | _init_audio
1f78c     06 4A 05 F6 | 	mov	COUNT_, #6
1f790     A8 00 A0 FD | 	call	#pushregs_
1f794     00 C0 1F FF 
1f798     00 26 06 F6 | 	mov	local01, ##1065353216
1f79c                 | ' 
1f79c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1f79c     00 28 06 F6 | 	mov	local02, #0
1f7a0                 | LR__2470
1f7a0     14 2B 02 F6 | 	mov	local03, local02
1f7a4     01 2A 66 F0 | 	shl	local03, #1
1f7a8     58 7F 23 FF 
1f7ac     00 2C 06 F6 | 	mov	local04, ##1191096320
1f7b0     14 13 52 F6 | 	abs	arg01, local02 wc
1f7b4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f7b8     00 2E 06 36 |  if_ae	mov	local05, #0
1f7bc     C8 6F B0 FD | 	call	#__system___float_fromuns
1f7c0     17 FB 61 F5 | 	xor	result1, local05
1f7c4     FD 12 02 F6 | 	mov	arg01, result1
1f7c8     87 24 20 FF 
1f7cc     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f7d0     B8 73 B0 FD | 	call	#__system___float_mul
1f7d4     FD 12 02 F6 | 	mov	arg01, result1
1f7d8     00 00 22 FF 
1f7dc     00 14 06 F6 | 	mov	arg02, ##1140850688
1f7e0     AC 75 B0 FD | 	call	#__system___float_div
1f7e4     FD 12 02 F6 | 	mov	arg01, result1
1f7e8     00 7D B0 FD | 	call	#__system____builtin_sinf
1f7ec     FD 14 02 F6 | 	mov	arg02, result1
1f7f0     16 13 02 F6 | 	mov	arg01, local04
1f7f4     94 73 B0 FD | 	call	#__system___float_mul
1f7f8     FD 12 02 F6 | 	mov	arg01, result1
1f7fc     01 14 06 F6 | 	mov	arg02, #1
1f800     50 78 B0 FD | 	call	#__system___float_tointeger
1f804     FD 14 02 F6 | 	mov	arg02, result1
1f808     15 13 02 F6 | 	mov	arg01, local03
1f80c     48 0D B0 FD | 	call	#_psdpoke
1f810     01 28 06 F1 | 	add	local02, #1
1f814     02 00 00 FF 
1f818     00 28 56 F2 | 	cmps	local02, ##1024 wc
1f81c     80 FF 9F CD |  if_b	jmp	#LR__2470
1f820                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1f820     00 28 06 F6 | 	mov	local02, #0
1f824                 | LR__2471
1f824     14 15 02 F6 | 	mov	arg02, local02
1f828     01 14 66 F0 | 	shl	arg02, #1
1f82c     0B 12 C6 F9 | 	decod	arg01, #11
1f830     0A 13 02 F1 | 	add	arg01, arg02
1f834     14 2D 02 F6 | 	mov	local04, local02
1f838     07 2C 66 F0 | 	shl	local04, #7
1f83c     14 2D 82 F1 | 	sub	local04, local02
1f840     C0 FF 7F FF 
1f844     00 15 06 F6 | 	mov	arg02, ##-32512
1f848     16 15 02 F1 | 	add	arg02, local04
1f84c     08 0D B0 FD | 	call	#_psdpoke
1f850     09 2C C6 F9 | 	decod	local04, #9
1f854     14 2D 02 F1 | 	add	local04, local02
1f858     01 2C 66 F0 | 	shl	local04, #1
1f85c     0B 12 C6 F9 | 	decod	arg01, #11
1f860     16 13 02 F1 | 	add	arg01, local04
1f864     14 2F 02 F6 | 	mov	local05, local02
1f868     07 2E 66 F0 | 	shl	local05, #7
1f86c     14 2F 82 F1 | 	sub	local05, local02
1f870     3F 00 00 FF 
1f874     00 15 06 F6 | 	mov	arg02, ##32512
1f878     17 15 82 F1 | 	sub	arg02, local05
1f87c     D8 0C B0 FD | 	call	#_psdpoke
1f880     01 28 06 F1 | 	add	local02, #1
1f884     01 00 00 FF 
1f888     00 28 56 F2 | 	cmps	local02, ##512 wc
1f88c     94 FF 9F CD |  if_b	jmp	#LR__2471
1f890                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1f890     00 28 06 F6 | 	mov	local02, #0
1f894                 | LR__2472
1f894     14 2F 02 F6 | 	mov	local05, local02
1f898     01 2E 66 F0 | 	shl	local05, #1
1f89c     0C 12 C6 F9 | 	decod	arg01, #12
1f8a0     17 13 02 F1 | 	add	arg01, local05
1f8a4     14 2F 02 F6 | 	mov	local05, local02
1f8a8     06 2E 66 F0 | 	shl	local05, #6
1f8ac     14 2F 82 F1 | 	sub	local05, local02
1f8b0     C1 FF 7F FF 
1f8b4     00 14 06 F6 | 	mov	arg02, ##-32256
1f8b8     17 15 02 F1 | 	add	arg02, local05
1f8bc     98 0C B0 FD | 	call	#_psdpoke
1f8c0     01 28 06 F1 | 	add	local02, #1
1f8c4     02 00 00 FF 
1f8c8     00 28 56 F2 | 	cmps	local02, ##1024 wc
1f8cc     C4 FF 9F CD |  if_b	jmp	#LR__2472
1f8d0                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1f8d0     00 28 06 F6 | 	mov	local02, #0
1f8d4                 | LR__2473
1f8d4     14 2F 02 F6 | 	mov	local05, local02
1f8d8     01 2E 66 F0 | 	shl	local05, #1
1f8dc     0C 00 00 FF 
1f8e0     00 12 06 F6 | 	mov	arg01, ##6144
1f8e4     17 13 02 F1 | 	add	arg01, local05
1f8e8     C0 FF 7F FF 
1f8ec     A8 14 06 F6 | 	mov	arg02, ##-32600
1f8f0     64 0C B0 FD | 	call	#_psdpoke
1f8f4     01 28 06 F1 | 	add	local02, #1
1f8f8     80 28 56 F2 | 	cmps	local02, #128 wc
1f8fc     D4 FF 9F CD |  if_b	jmp	#LR__2473
1f900     80 28 06 F6 | 	mov	local02, #128
1f904                 | LR__2474
1f904     14 2F 02 F6 | 	mov	local05, local02
1f908     01 2E 66 F0 | 	shl	local05, #1
1f90c     0C 00 00 FF 
1f910     00 12 06 F6 | 	mov	arg01, ##6144
1f914     17 13 02 F1 | 	add	arg01, local05
1f918     3F 00 00 FF 
1f91c     58 15 06 F6 | 	mov	arg02, ##32600
1f920     34 0C B0 FD | 	call	#_psdpoke
1f924     01 28 06 F1 | 	add	local02, #1
1f928     02 00 00 FF 
1f92c     00 28 16 F2 | 	cmp	local02, ##1024 wc
1f930     D0 FF 9F CD |  if_b	jmp	#LR__2474
1f934                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1f934     00 28 06 F6 | 	mov	local02, #0
1f938                 | LR__2475
1f938     14 2F 02 F6 | 	mov	local05, local02
1f93c     01 2E 66 F0 | 	shl	local05, #1
1f940     0D 12 C6 F9 | 	decod	arg01, #13
1f944     17 13 02 F1 | 	add	arg01, local05
1f948     C0 FF 7F FF 
1f94c     A8 14 06 F6 | 	mov	arg02, ##-32600
1f950     04 0C B0 FD | 	call	#_psdpoke
1f954     01 28 06 F1 | 	add	local02, #1
1f958     01 00 00 FF 
1f95c     00 28 56 F2 | 	cmps	local02, ##512 wc
1f960     D4 FF 9F CD |  if_b	jmp	#LR__2475
1f964     09 28 C6 F9 | 	decod	local02, #9
1f968                 | LR__2476
1f968     14 2F 02 F6 | 	mov	local05, local02
1f96c     01 2E 66 F0 | 	shl	local05, #1
1f970     0D 12 C6 F9 | 	decod	arg01, #13
1f974     17 13 02 F1 | 	add	arg01, local05
1f978     3F 00 00 FF 
1f97c     58 15 06 F6 | 	mov	arg02, ##32600
1f980     D4 0B B0 FD | 	call	#_psdpoke
1f984     01 28 06 F1 | 	add	local02, #1
1f988     02 00 00 FF 
1f98c     00 28 16 F2 | 	cmp	local02, ##1024 wc
1f990     D4 FF 9F CD |  if_b	jmp	#LR__2476
1f994                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1f994     00 28 06 F6 | 	mov	local02, #0
1f998                 | LR__2477
1f998     14 2F 02 F6 | 	mov	local05, local02
1f99c     01 2E 66 F0 | 	shl	local05, #1
1f9a0     14 00 00 FF 
1f9a4     00 12 06 F6 | 	mov	arg01, ##10240
1f9a8     17 13 02 F1 | 	add	arg01, local05
1f9ac     C0 FF 7F FF 
1f9b0     A8 14 06 F6 | 	mov	arg02, ##-32600
1f9b4     A0 0B B0 FD | 	call	#_psdpoke
1f9b8     01 28 06 F1 | 	add	local02, #1
1f9bc     00 29 56 F2 | 	cmps	local02, #256 wc
1f9c0     D4 FF 9F CD |  if_b	jmp	#LR__2477
1f9c4     00 29 06 F6 | 	mov	local02, #256
1f9c8                 | LR__2478
1f9c8     14 2F 02 F6 | 	mov	local05, local02
1f9cc     01 2E 66 F0 | 	shl	local05, #1
1f9d0     14 00 00 FF 
1f9d4     00 12 06 F6 | 	mov	arg01, ##10240
1f9d8     17 13 02 F1 | 	add	arg01, local05
1f9dc     3F 00 00 FF 
1f9e0     58 15 06 F6 | 	mov	arg02, ##32600
1f9e4     70 0B B0 FD | 	call	#_psdpoke
1f9e8     01 28 06 F1 | 	add	local02, #1
1f9ec     02 00 00 FF 
1f9f0     00 28 16 F2 | 	cmp	local02, ##1024 wc
1f9f4     D0 FF 9F CD |  if_b	jmp	#LR__2478
1f9f8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1f9f8     18 00 00 FF 
1f9fc     00 28 06 F6 | 	mov	local02, ##12288
1fa00                 | LR__2479
1fa00     14 13 02 F6 | 	mov	arg01, local02
1fa04     00 14 06 F6 | 	mov	arg02, #0
1fa08     04 0B B0 FD | 	call	#_pslpoke
1fa0c     04 28 06 F1 | 	add	local02, #4
1fa10     77 00 00 FF 
1fa14     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1fa18     E4 FF 9F CD |  if_b	jmp	#LR__2479
1fa1c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1fa1c     00 28 06 F6 | 	mov	local02, #0
1fa20                 | LR__2480
1fa20     14 2F 02 F6 | 	mov	local05, local02
1fa24     01 2E 66 F0 | 	shl	local05, #1
1fa28     78 00 00 FF 
1fa2c     00 2A 06 F6 | 	mov	local03, ##61440
1fa30     17 2B 02 F1 | 	add	local03, local05
1fa34     12 00 00 FF 
1fa38     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1fa3c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1fa40     12 00 00 FF 
1fa44     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1fa48     10 12 06 F1 | 	add	arg01, #16
1fa4c     14 15 02 F6 | 	mov	arg02, local02
1fa50     01 14 66 F0 | 	shl	arg02, #1
1fa54     0A 13 02 F1 | 	add	arg01, arg02
1fa58     09 15 E2 FA | 	rdword	arg02, arg01
1fa5c     15 13 02 F6 | 	mov	arg01, local03
1fa60     F4 0A B0 FD | 	call	#_psdpoke
1fa64     01 28 06 F1 | 	add	local02, #1
1fa68     02 00 00 FF 
1fa6c     00 28 56 F2 | 	cmps	local02, ##1024 wc
1fa70     AC FF 9F CD |  if_b	jmp	#LR__2480
1fa74                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1fa74     00 28 06 F6 | 	mov	local02, #0
1fa78                 | LR__2481
1fa78     14 2F 02 F6 | 	mov	local05, local02
1fa7c     01 2E 66 F0 | 	shl	local05, #1
1fa80     7C 00 00 FF 
1fa84     00 2A 06 F6 | 	mov	local03, ##63488
1fa88     17 2B 02 F1 | 	add	local03, local05
1fa8c     0E 00 00 FF 
1fa90     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1fa94     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1fa98     0E 00 00 FF 
1fa9c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1faa0     10 12 06 F1 | 	add	arg01, #16
1faa4     14 15 02 F6 | 	mov	arg02, local02
1faa8     01 14 66 F0 | 	shl	arg02, #1
1faac     0A 13 02 F1 | 	add	arg01, arg02
1fab0     09 15 E2 FA | 	rdword	arg02, arg01
1fab4     15 13 02 F6 | 	mov	arg01, local03
1fab8     9C 0A B0 FD | 	call	#_psdpoke
1fabc     01 28 06 F1 | 	add	local02, #1
1fac0     02 00 00 FF 
1fac4     00 28 56 F2 | 	cmps	local02, ##1024 wc
1fac8     AC FF 9F CD |  if_b	jmp	#LR__2481
1facc                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1facc     00 28 06 F6 | 	mov	local02, #0
1fad0     0C 00 00 FF 
1fad4     D8 E4 05 F1 | 	add	objptr, ##6360
1fad8     97 18 48 FB | 	callpa	#(@LR__2483-@LR__2482)>>2,fcache_load_ptr_
1fadc                 | LR__2482
1fadc     14 2F 02 F6 | 	mov	local05, local02
1fae0     01 2E 66 F0 | 	shl	local05, #1
1fae4     F2 2E 02 F1 | 	add	local05, objptr
1fae8     14 2B 02 F6 | 	mov	local03, local02
1faec     08 2A 66 F0 | 	shl	local03, #8
1faf0     7F 00 00 FF 
1faf4     00 31 06 F6 | 	mov	local06, ##65280
1faf8     15 31 82 F1 | 	sub	local06, local03
1fafc     17 31 52 FC | 	wrword	local06, local05
1fb00     01 28 06 F1 | 	add	local02, #1
1fb04     00 29 56 F2 | 	cmps	local02, #256 wc
1fb08     D0 FF 9F CD |  if_b	jmp	#LR__2482
1fb0c                 | LR__2483
1fb0c     0C 00 00 FF 
1fb10     D8 E4 85 F1 | 	sub	objptr, ##6360
1fb14                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1fb14     00 28 06 F6 | 	mov	local02, #0
1fb18                 | LR__2484
1fb18     14 2F 02 F6 | 	mov	local05, local02
1fb1c     01 2E 66 F0 | 	shl	local05, #1
1fb20     0D 00 00 FF 
1fb24     D8 E4 05 F1 | 	add	objptr, ##6872
1fb28     F2 2E 02 F1 | 	add	local05, objptr
1fb2c     80 BF 23 FF 
1fb30     00 12 06 F6 | 	mov	arg01, ##1199505408
1fb34     13 15 02 F6 | 	mov	arg02, local01
1fb38     0D 00 00 FF 
1fb3c     D8 E4 85 F1 | 	sub	objptr, ##6872
1fb40     48 70 B0 FD | 	call	#__system___float_mul
1fb44     FD 12 02 F6 | 	mov	arg01, result1
1fb48     01 14 06 F6 | 	mov	arg02, #1
1fb4c     04 75 B0 FD | 	call	#__system___float_tointeger
1fb50     17 FB 51 FC | 	wrword	result1, local05
1fb54     13 13 02 F6 | 	mov	arg01, local01
1fb58     CC BC 1F FF 
1fb5c     9A 15 06 F6 | 	mov	arg02, ##1064933786
1fb60     28 70 B0 FD | 	call	#__system___float_mul
1fb64     FD 26 02 F6 | 	mov	local01, result1
1fb68     01 28 06 F1 | 	add	local02, #1
1fb6c     00 29 56 F2 | 	cmps	local02, #256 wc
1fb70     A4 FF 9F CD |  if_b	jmp	#LR__2484
1fb74     0E 00 00 FF 
1fb78     D6 E4 05 F1 | 	add	objptr, ##7382
1fb7c     F2 00 58 FC | 	wrword	#0, objptr
1fb80                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1fb80     00 28 06 F6 | 	mov	local02, #0
1fb84     02 E4 05 F1 | 	add	objptr, #2
1fb88     97 10 48 FB | 	callpa	#(@LR__2486-@LR__2485)>>2,fcache_load_ptr_
1fb8c                 | LR__2485
1fb8c     14 2F 02 F6 | 	mov	local05, local02
1fb90     01 2E 66 F0 | 	shl	local05, #1
1fb94     F2 2E 02 F1 | 	add	local05, objptr
1fb98     7F 00 80 FF 
1fb9c     17 01 5A FC | 	wrword	##65280, local05
1fba0     01 28 06 F1 | 	add	local02, #1
1fba4     FF 28 56 F2 | 	cmps	local02, #255 wc
1fba8     E0 FF 9F CD |  if_b	jmp	#LR__2485
1fbac                 | LR__2486
1fbac     FE E5 05 F1 | 	add	objptr, #510
1fbb0     F2 00 58 FC | 	wrword	#0, objptr
1fbb4                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1fbb4     00 28 06 F6 | 	mov	local02, #0
1fbb8     02 E4 05 F1 | 	add	objptr, #2
1fbbc     97 52 48 FB | 	callpa	#(@LR__2491-@LR__2487)>>2,fcache_load_ptr_
1fbc0                 | LR__2487
1fbc0     14 2F 02 F6 | 	mov	local05, local02
1fbc4     01 2E 66 F0 | 	shl	local05, #1
1fbc8     F2 2E 02 F1 | 	add	local05, objptr
1fbcc     14 31 02 F6 | 	mov	local06, local02
1fbd0     0C 30 66 F0 | 	shl	local06, #12
1fbd4     17 31 52 FC | 	wrword	local06, local05
1fbd8     01 28 06 F1 | 	add	local02, #1
1fbdc     10 28 56 F2 | 	cmps	local02, #16 wc
1fbe0     DC FF 9F CD |  if_b	jmp	#LR__2487
1fbe4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1fbe4     10 28 06 F6 | 	mov	local02, #16
1fbe8                 | LR__2488
1fbe8     14 2F 02 F6 | 	mov	local05, local02
1fbec     01 2E 66 F0 | 	shl	local05, #1
1fbf0     F2 2E 02 F1 | 	add	local05, objptr
1fbf4     7F 00 80 FF 
1fbf8     17 01 5A FC | 	wrword	##65280, local05
1fbfc     01 28 06 F1 | 	add	local02, #1
1fc00     F0 28 16 F2 | 	cmp	local02, #240 wc
1fc04     E0 FF 9F CD |  if_b	jmp	#LR__2488
1fc08                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1fc08     F0 28 06 F6 | 	mov	local02, #240
1fc0c                 | LR__2489
1fc0c     14 2F 02 F6 | 	mov	local05, local02
1fc10     01 2E 66 F0 | 	shl	local05, #1
1fc14     F2 2E 02 F1 | 	add	local05, objptr
1fc18     FF 2A 06 F6 | 	mov	local03, #255
1fc1c     14 2B 82 F1 | 	sub	local03, local02
1fc20     0C 2A 66 F0 | 	shl	local03, #12
1fc24     17 2B 52 FC | 	wrword	local03, local05
1fc28     01 28 06 F1 | 	add	local02, #1
1fc2c     00 29 16 F2 | 	cmp	local02, #256 wc
1fc30     D8 FF 9F CD |  if_b	jmp	#LR__2489
1fc34                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1fc34     00 28 06 F6 | 	mov	local02, #0
1fc38     01 00 00 FF 
1fc3c     00 E4 05 F1 | 	add	objptr, ##512
1fc40                 | LR__2490
1fc40     14 2F 02 F6 | 	mov	local05, local02
1fc44     01 2E 66 F0 | 	shl	local05, #1
1fc48     F2 2E 02 F1 | 	add	local05, objptr
1fc4c     14 31 02 F6 | 	mov	local06, local02
1fc50     08 30 66 F0 | 	shl	local06, #8
1fc54     17 31 52 FC | 	wrword	local06, local05
1fc58     01 28 06 F1 | 	add	local02, #1
1fc5c     00 29 56 F2 | 	cmps	local02, #256 wc
1fc60     DC FF 9F CD |  if_b	jmp	#LR__2490
1fc64                 | LR__2491
1fc64     FE E5 05 F1 | 	add	objptr, #510
1fc68     F2 00 58 FC | 	wrword	#0, objptr
1fc6c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1fc6c     00 28 06 F6 | 	mov	local02, #0
1fc70     02 E4 05 F1 | 	add	objptr, #2
1fc74     97 6A 48 FB | 	callpa	#(@LR__2496-@LR__2492)>>2,fcache_load_ptr_
1fc78                 | LR__2492
1fc78     14 2F 02 F6 | 	mov	local05, local02
1fc7c     01 2E 66 F0 | 	shl	local05, #1
1fc80     F2 2E 02 F1 | 	add	local05, objptr
1fc84     14 31 02 F6 | 	mov	local06, local02
1fc88     04 30 66 F0 | 	shl	local06, #4
1fc8c     14 31 02 F1 | 	add	local06, local02
1fc90     04 30 66 F0 | 	shl	local06, #4
1fc94     17 31 52 FC | 	wrword	local06, local05
1fc98     01 28 06 F1 | 	add	local02, #1
1fc9c     F0 28 56 F2 | 	cmps	local02, #240 wc
1fca0     D4 FF 9F CD |  if_b	jmp	#LR__2492
1fca4     F0 28 06 F6 | 	mov	local02, #240
1fca8                 | LR__2493
1fca8     14 2F 02 F6 | 	mov	local05, local02
1fcac     01 2E 66 F0 | 	shl	local05, #1
1fcb0     F2 2E 02 F1 | 	add	local05, objptr
1fcb4     FF 2A 06 F6 | 	mov	local03, #255
1fcb8     14 2B 82 F1 | 	sub	local03, local02
1fcbc     0C 2A 66 F0 | 	shl	local03, #12
1fcc0     17 2B 52 FC | 	wrword	local03, local05
1fcc4     01 28 06 F1 | 	add	local02, #1
1fcc8     00 29 16 F2 | 	cmp	local02, #256 wc
1fccc     D8 FF 9F CD |  if_b	jmp	#LR__2493
1fcd0                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1fcd0     00 28 06 F6 | 	mov	local02, #0
1fcd4     01 00 00 FF 
1fcd8     00 E4 05 F1 | 	add	objptr, ##512
1fcdc                 | LR__2494
1fcdc     14 2F 02 F6 | 	mov	local05, local02
1fce0     01 2E 66 F0 | 	shl	local05, #1
1fce4     F2 2E 02 F1 | 	add	local05, objptr
1fce8     14 31 02 F6 | 	mov	local06, local02
1fcec     09 30 66 F0 | 	shl	local06, #9
1fcf0     17 31 52 FC | 	wrword	local06, local05
1fcf4     FF 2E 06 F6 | 	mov	local05, #255
1fcf8     14 2F 82 F1 | 	sub	local05, local02
1fcfc     01 2E 66 F0 | 	shl	local05, #1
1fd00     F2 2E 02 F1 | 	add	local05, objptr
1fd04     14 31 02 F6 | 	mov	local06, local02
1fd08     09 30 66 F0 | 	shl	local06, #9
1fd0c     17 31 52 FC | 	wrword	local06, local05
1fd10     01 28 06 F1 | 	add	local02, #1
1fd14     80 28 56 F2 | 	cmps	local02, #128 wc
1fd18     C0 FF 9F CD |  if_b	jmp	#LR__2494
1fd1c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1fd1c     00 28 06 F6 | 	mov	local02, #0
1fd20     01 00 00 FF 
1fd24     00 E4 05 F1 | 	add	objptr, ##512
1fd28                 | LR__2495
1fd28     14 2F 02 F6 | 	mov	local05, local02
1fd2c     01 2E 66 F0 | 	shl	local05, #1
1fd30     F2 2E 02 F1 | 	add	local05, objptr
1fd34     14 31 02 F6 | 	mov	local06, local02
1fd38     0D 30 66 F0 | 	shl	local06, #13
1fd3c     17 31 52 FC | 	wrword	local06, local05
1fd40     01 28 06 F1 | 	add	local02, #1
1fd44     08 28 56 F2 | 	cmps	local02, #8 wc
1fd48     DC FF 9F CD |  if_b	jmp	#LR__2495
1fd4c                 | LR__2496
1fd4c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1fd4c     08 28 06 F6 | 	mov	local02, #8
1fd50     97 42 48 FB | 	callpa	#(@LR__2500-@LR__2497)>>2,fcache_load_ptr_
1fd54                 | LR__2497
1fd54     14 2F 02 F6 | 	mov	local05, local02
1fd58     01 2E 66 F0 | 	shl	local05, #1
1fd5c     F2 2E 02 F1 | 	add	local05, objptr
1fd60     14 27 02 F6 | 	mov	local01, local02
1fd64     08 26 86 F1 | 	sub	local01, #8
1fd68     0B 26 66 F0 | 	shl	local01, #11
1fd6c     7F 00 00 FF 
1fd70     00 31 06 F6 | 	mov	local06, ##65280
1fd74     13 31 82 F1 | 	sub	local06, local01
1fd78     17 31 52 FC | 	wrword	local06, local05
1fd7c     01 28 06 F1 | 	add	local02, #1
1fd80     18 28 16 F2 | 	cmp	local02, #24 wc
1fd84     CC FF 9F CD |  if_b	jmp	#LR__2497
1fd88                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1fd88     18 28 06 F6 | 	mov	local02, #24
1fd8c                 | LR__2498
1fd8c     14 2F 02 F6 | 	mov	local05, local02
1fd90     01 2E 66 F0 | 	shl	local05, #1
1fd94     F2 2E 02 F1 | 	add	local05, objptr
1fd98     40 00 80 FF 
1fd9c     17 01 58 FC | 	wrword	##32768, local05
1fda0     01 28 06 F1 | 	add	local02, #1
1fda4     81 28 16 F2 | 	cmp	local02, #129 wc
1fda8     E0 FF 9F CD |  if_b	jmp	#LR__2498
1fdac                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1fdac     81 28 06 F6 | 	mov	local02, #129
1fdb0                 | LR__2499
1fdb0     14 2F 02 F6 | 	mov	local05, local02
1fdb4     01 2E 66 F0 | 	shl	local05, #1
1fdb8     F2 2E 02 F1 | 	add	local05, objptr
1fdbc     FF 2A 06 F6 | 	mov	local03, #255
1fdc0     14 2B 82 F1 | 	sub	local03, local02
1fdc4     08 2A 66 F0 | 	shl	local03, #8
1fdc8     17 2B 52 FC | 	wrword	local03, local05
1fdcc     01 28 06 F1 | 	add	local02, #1
1fdd0     00 29 16 F2 | 	cmp	local02, #256 wc
1fdd4     D8 FF 9F CD |  if_b	jmp	#LR__2499
1fdd8                 | LR__2500
1fdd8     3E 00 00 FF 
1fddc     FE E4 05 F1 | 	add	objptr, ##31998
1fde0     F2 00 59 FC | 	wrword	#128, objptr
1fde4     51 00 00 FF 
1fde8     D6 E5 85 F1 | 	sub	objptr, ##41942
1fdec                 | ' for i=0 to 7
1fdec     00 28 06 F6 | 	mov	local02, #0
1fdf0     97 8E 48 FB | 	callpa	#(@LR__2502-@LR__2501)>>2,fcache_load_ptr_
1fdf4                 | LR__2501
1fdf4     14 2F 02 F6 | 	mov	local05, local02
1fdf8     01 2E 66 F0 | 	shl	local05, #1
1fdfc     14 2F 02 F1 | 	add	local05, local02
1fe00     03 2E 66 F0 | 	shl	local05, #3
1fe04     14 00 00 FF 
1fe08     38 E5 05 F1 | 	add	objptr, ##10552
1fe0c     F2 2E 02 F1 | 	add	local05, objptr
1fe10     00 EE A1 FF 
1fe14     17 01 68 FC | 	wrlong	##1138491392, local05
1fe18     14 2F 02 F6 | 	mov	local05, local02
1fe1c     01 2E 66 F0 | 	shl	local05, #1
1fe20     14 2F 02 F1 | 	add	local05, local02
1fe24     03 2E 66 F0 | 	shl	local05, #3
1fe28     F2 2E 02 F1 | 	add	local05, objptr
1fe2c     04 2E 06 F1 | 	add	local05, #4
1fe30     17 29 42 FC | 	wrbyte	local02, local05
1fe34     14 2F 02 F6 | 	mov	local05, local02
1fe38     01 2E 66 F0 | 	shl	local05, #1
1fe3c     14 2F 02 F1 | 	add	local05, local02
1fe40     03 2E 66 F0 | 	shl	local05, #3
1fe44     F2 2E 02 F1 | 	add	local05, objptr
1fe48     05 2E 06 F1 | 	add	local05, #5
1fe4c     17 29 42 FC | 	wrbyte	local02, local05
1fe50     14 2F 02 F6 | 	mov	local05, local02
1fe54     01 2E 66 F0 | 	shl	local05, #1
1fe58     14 2F 02 F1 | 	add	local05, local02
1fe5c     03 2E 66 F0 | 	shl	local05, #3
1fe60     F2 2E 02 F1 | 	add	local05, objptr
1fe64     06 2E 06 F1 | 	add	local05, #6
1fe68     17 01 58 FC | 	wrword	#0, local05
1fe6c     14 2F 02 F6 | 	mov	local05, local02
1fe70     01 2E 66 F0 | 	shl	local05, #1
1fe74     14 2F 02 F1 | 	add	local05, local02
1fe78     03 2E 66 F0 | 	shl	local05, #3
1fe7c     F2 2E 02 F1 | 	add	local05, objptr
1fe80     08 2E 06 F1 | 	add	local05, #8
1fe84     00 C0 9F FF 
1fe88     17 01 68 FC | 	wrlong	##1065353216, local05
1fe8c     14 2F 02 F6 | 	mov	local05, local02
1fe90     01 2E 66 F0 | 	shl	local05, #1
1fe94     14 2F 02 F1 | 	add	local05, local02
1fe98     03 2E 66 F0 | 	shl	local05, #3
1fe9c     F2 2E 02 F1 | 	add	local05, objptr
1fea0     0C 2E 06 F1 | 	add	local05, #12
1fea4     00 40 A0 FF 
1fea8     17 01 68 FC | 	wrlong	##1082130432, local05
1feac     14 2F 02 F6 | 	mov	local05, local02
1feb0     01 2E 66 F0 | 	shl	local05, #1
1feb4     14 2F 02 F1 | 	add	local05, local02
1feb8     03 2E 66 F0 | 	shl	local05, #3
1febc     F2 2E 02 F1 | 	add	local05, objptr
1fec0     10 2E 06 F1 | 	add	local05, #16
1fec4     17 01 68 FC | 	wrlong	#0, local05
1fec8     14 2F 02 F6 | 	mov	local05, local02
1fecc     01 2E 66 F0 | 	shl	local05, #1
1fed0     14 2F 02 F1 | 	add	local05, local02
1fed4     03 2E 66 F0 | 	shl	local05, #3
1fed8     F2 2E 02 F1 | 	add	local05, objptr
1fedc     14 2E 06 F1 | 	add	local05, #20
1fee0     17 FF 59 FC | 	wrword	#255, local05
1fee4     14 2F 02 F6 | 	mov	local05, local02
1fee8     01 2E 66 F0 | 	shl	local05, #1
1feec     3D 00 00 FF 
1fef0     90 E4 05 F1 | 	add	objptr, ##31376
1fef4     F2 2E 02 F1 | 	add	local05, objptr
1fef8     17 FF 59 FC | 	wrword	#255, local05
1fefc     01 28 06 F1 | 	add	local02, #1
1ff00     08 28 56 F2 | 	cmps	local02, #8 wc
1ff04     51 00 00 FF 
1ff08     C8 E5 85 F1 | 	sub	objptr, ##41928
1ff0c     E4 FE 9F CD |  if_b	jmp	#LR__2501
1ff10                 | LR__2502
1ff10     00 6E 20 FF 
1ff14     00 30 06 F6 | 	mov	local06, ##1088159744
1ff18                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1ff18     03 2E 06 F6 | 	mov	local05, #3
1ff1c                 | LR__2503
1ff1c     18 13 02 F6 | 	mov	arg01, local06
1ff20     CE C3 1F FF 
1ff24     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ff28     60 6C B0 FD | 	call	#__system___float_mul
1ff2c     FD 30 02 F6 | 	mov	local06, result1
1ff30     FA 2F 6E FB | 	djnz	local05, #LR__2503
1ff34     00 28 06 F6 | 	mov	local02, #0
1ff38                 | LR__2504
1ff38     14 2D 02 F6 | 	mov	local04, local02
1ff3c     02 2C 66 F0 | 	shl	local04, #2
1ff40     14 00 00 FF 
1ff44     D8 E4 05 F1 | 	add	objptr, ##10456
1ff48     F2 2C 02 F1 | 	add	local04, objptr
1ff4c     16 31 62 FC | 	wrlong	local06, local04
1ff50     18 13 02 F6 | 	mov	arg01, local06
1ff54     CE C3 1F FF 
1ff58     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ff5c     14 00 00 FF 
1ff60     D8 E4 85 F1 | 	sub	objptr, ##10456
1ff64     24 6C B0 FD | 	call	#__system___float_mul
1ff68     FD 30 02 F6 | 	mov	local06, result1
1ff6c     01 28 06 F1 | 	add	local02, #1
1ff70     0C 28 56 F2 | 	cmps	local02, #12 wc
1ff74     C0 FF 9F CD |  if_b	jmp	#LR__2504
1ff78     14 00 00 FF 
1ff7c     08 E5 05 F1 | 	add	objptr, ##10504
1ff80     F2 50 6B FC | 	wrlong	#424, objptr
1ff84     04 E4 05 F1 | 	add	objptr, #4
1ff88     F2 20 6B FC | 	wrlong	#400, objptr
1ff8c     04 E4 05 F1 | 	add	objptr, #4
1ff90     F2 F2 6A FC | 	wrlong	#377, objptr
1ff94     04 E4 05 F1 | 	add	objptr, #4
1ff98     F2 C8 6A FC | 	wrlong	#356, objptr
1ff9c     04 E4 05 F1 | 	add	objptr, #4
1ffa0     F2 A0 6A FC | 	wrlong	#336, objptr
1ffa4     04 E4 05 F1 | 	add	objptr, #4
1ffa8     F2 7A 6A FC | 	wrlong	#317, objptr
1ffac     04 E4 05 F1 | 	add	objptr, #4
1ffb0     F2 58 6A FC | 	wrlong	#300, objptr
1ffb4     04 E4 05 F1 | 	add	objptr, #4
1ffb8     F2 36 6A FC | 	wrlong	#283, objptr
1ffbc     04 E4 05 F1 | 	add	objptr, #4
1ffc0     F2 16 6A FC | 	wrlong	#267, objptr
1ffc4     04 E4 05 F1 | 	add	objptr, #4
1ffc8     F2 F8 69 FC | 	wrlong	#252, objptr
1ffcc     04 E4 05 F1 | 	add	objptr, #4
1ffd0     F2 DC 69 FC | 	wrlong	#238, objptr
1ffd4     04 E4 05 F1 | 	add	objptr, #4
1ffd8     F2 C0 69 FC | 	wrlong	#224, objptr
1ffdc     3D 00 00 FF 
1ffe0     A2 E4 05 F1 | 	add	objptr, ##31394
1ffe4     F2 00 59 FC | 	wrword	#128, objptr
1ffe8     02 E4 85 F1 | 	sub	objptr, #2
1ffec     F2 00 59 FC | 	wrword	#128, objptr
1fff0     51 00 00 FF 
1fff4     D4 E5 85 F1 | 	sub	objptr, ##41940
1fff8     A7 F0 03 F6 | 	mov	ptra, fp
1fffc     B2 00 A0 FD | 	call	#popregs_
20000                 | _init_audio_ret
20000     2D 00 64 FD | 	ret
20004                 | 
20004                 | ' 
20004                 | ' '------------------- Error messages
20004                 | ' 
20004                 | ' sub init_error_strings
20004                 | _init_error_strings
20004     A1 01 00 FF 
20008     F2 00 06 F6 | 	mov	_var01, ##@LR__5790
2000c     45 00 00 FF 
20010     7C E4 05 F1 | 	add	objptr, ##35452
20014     F2 00 62 FC | 	wrlong	_var01, objptr
20018     A1 01 00 FF 
2001c     F3 00 06 F6 | 	mov	_var01, ##@LR__5791
20020     04 E4 05 F1 | 	add	objptr, #4
20024     F2 00 62 FC | 	wrlong	_var01, objptr
20028     A1 01 00 FF 
2002c     17 01 06 F6 | 	mov	_var01, ##@LR__5792
20030     04 E4 05 F1 | 	add	objptr, #4
20034     F2 00 62 FC | 	wrlong	_var01, objptr
20038     A1 01 00 FF 
2003c     37 01 06 F6 | 	mov	_var01, ##@LR__5793
20040     04 E4 05 F1 | 	add	objptr, #4
20044     F2 00 62 FC | 	wrlong	_var01, objptr
20048     A1 01 00 FF 
2004c     50 01 06 F6 | 	mov	_var01, ##@LR__5794
20050     04 E4 05 F1 | 	add	objptr, #4
20054     F2 00 62 FC | 	wrlong	_var01, objptr
20058     A1 01 00 FF 
2005c     6B 01 06 F6 | 	mov	_var01, ##@LR__5795
20060     04 E4 05 F1 | 	add	objptr, #4
20064     F2 00 62 FC | 	wrlong	_var01, objptr
20068     A1 01 00 FF 
2006c     8C 01 06 F6 | 	mov	_var01, ##@LR__5796
20070     04 E4 05 F1 | 	add	objptr, #4
20074     F2 00 62 FC | 	wrlong	_var01, objptr
20078     A1 01 00 FF 
2007c     B9 01 06 F6 | 	mov	_var01, ##@LR__5797
20080     04 E4 05 F1 | 	add	objptr, #4
20084     F2 00 62 FC | 	wrlong	_var01, objptr
20088     A1 01 00 FF 
2008c     E3 01 06 F6 | 	mov	_var01, ##@LR__5798
20090     04 E4 05 F1 | 	add	objptr, #4
20094     F2 00 62 FC | 	wrlong	_var01, objptr
20098     A1 01 00 FF 
2009c     FB 01 06 F6 | 	mov	_var01, ##@LR__5799
200a0     04 E4 05 F1 | 	add	objptr, #4
200a4     F2 00 62 FC | 	wrlong	_var01, objptr
200a8     A2 01 00 FF 
200ac     1B 00 06 F6 | 	mov	_var01, ##@LR__5800
200b0     04 E4 05 F1 | 	add	objptr, #4
200b4     F2 00 62 FC | 	wrlong	_var01, objptr
200b8     A2 01 00 FF 
200bc     31 00 06 F6 | 	mov	_var01, ##@LR__5801
200c0     04 E4 05 F1 | 	add	objptr, #4
200c4     F2 00 62 FC | 	wrlong	_var01, objptr
200c8     A2 01 00 FF 
200cc     4E 00 06 F6 | 	mov	_var01, ##@LR__5802
200d0     04 E4 05 F1 | 	add	objptr, #4
200d4     F2 00 62 FC | 	wrlong	_var01, objptr
200d8     A2 01 00 FF 
200dc     71 00 06 F6 | 	mov	_var01, ##@LR__5803
200e0     04 E4 05 F1 | 	add	objptr, #4
200e4     F2 00 62 FC | 	wrlong	_var01, objptr
200e8     A2 01 00 FF 
200ec     97 00 06 F6 | 	mov	_var01, ##@LR__5804
200f0     04 E4 05 F1 | 	add	objptr, #4
200f4     F2 00 62 FC | 	wrlong	_var01, objptr
200f8     A2 01 00 FF 
200fc     B2 00 06 F6 | 	mov	_var01, ##@LR__5805
20100     04 E4 05 F1 | 	add	objptr, #4
20104     F2 00 62 FC | 	wrlong	_var01, objptr
20108     A2 01 00 FF 
2010c     C2 00 06 F6 | 	mov	_var01, ##@LR__5806
20110     04 E4 05 F1 | 	add	objptr, #4
20114     F2 00 62 FC | 	wrlong	_var01, objptr
20118     A2 01 00 FF 
2011c     D1 00 06 F6 | 	mov	_var01, ##@LR__5807
20120     04 E4 05 F1 | 	add	objptr, #4
20124     F2 00 62 FC | 	wrlong	_var01, objptr
20128     A2 01 00 FF 
2012c     EB 00 06 F6 | 	mov	_var01, ##@LR__5808
20130     04 E4 05 F1 | 	add	objptr, #4
20134     F2 00 62 FC | 	wrlong	_var01, objptr
20138     A2 01 00 FF 
2013c     FC 00 06 F6 | 	mov	_var01, ##@LR__5809
20140     04 E4 05 F1 | 	add	objptr, #4
20144     F2 00 62 FC | 	wrlong	_var01, objptr
20148     A2 01 00 FF 
2014c     13 01 06 F6 | 	mov	_var01, ##@LR__5810
20150     04 E4 05 F1 | 	add	objptr, #4
20154     F2 00 62 FC | 	wrlong	_var01, objptr
20158     A2 01 00 FF 
2015c     26 01 06 F6 | 	mov	_var01, ##@LR__5811
20160     04 E4 05 F1 | 	add	objptr, #4
20164     F2 00 62 FC | 	wrlong	_var01, objptr
20168     A2 01 00 FF 
2016c     35 01 06 F6 | 	mov	_var01, ##@LR__5812
20170     04 E4 05 F1 | 	add	objptr, #4
20174     F2 00 62 FC | 	wrlong	_var01, objptr
20178     A2 01 00 FF 
2017c     51 01 06 F6 | 	mov	_var01, ##@LR__5813
20180     04 E4 05 F1 | 	add	objptr, #4
20184     F2 00 62 FC | 	wrlong	_var01, objptr
20188     A2 01 00 FF 
2018c     61 01 06 F6 | 	mov	_var01, ##@LR__5814
20190     04 E4 05 F1 | 	add	objptr, #4
20194     F2 00 62 FC | 	wrlong	_var01, objptr
20198     A2 01 00 FF 
2019c     71 01 06 F6 | 	mov	_var01, ##@LR__5815
201a0     04 E4 05 F1 | 	add	objptr, #4
201a4     F2 00 62 FC | 	wrlong	_var01, objptr
201a8     A2 01 00 FF 
201ac     A4 01 06 F6 | 	mov	_var01, ##@LR__5816
201b0     04 E4 05 F1 | 	add	objptr, #4
201b4     F2 00 62 FC | 	wrlong	_var01, objptr
201b8     A2 01 00 FF 
201bc     BF 01 06 F6 | 	mov	_var01, ##@LR__5817
201c0     04 E4 05 F1 | 	add	objptr, #4
201c4     F2 00 62 FC | 	wrlong	_var01, objptr
201c8     A2 01 00 FF 
201cc     D4 01 06 F6 | 	mov	_var01, ##@LR__5818
201d0     04 E4 05 F1 | 	add	objptr, #4
201d4     F2 00 62 FC | 	wrlong	_var01, objptr
201d8     A2 01 00 FF 
201dc     E0 01 06 F6 | 	mov	_var01, ##@LR__5819
201e0     04 E4 05 F1 | 	add	objptr, #4
201e4     F2 00 62 FC | 	wrlong	_var01, objptr
201e8     A2 01 00 FF 
201ec     F1 01 06 F6 | 	mov	_var01, ##@LR__5820
201f0     04 E4 05 F1 | 	add	objptr, #4
201f4     F2 00 62 FC | 	wrlong	_var01, objptr
201f8     A3 01 00 FF 
201fc     01 00 06 F6 | 	mov	_var01, ##@LR__5821
20200     04 E4 05 F1 | 	add	objptr, #4
20204     F2 00 62 FC | 	wrlong	_var01, objptr
20208     A3 01 00 FF 
2020c     1C 00 06 F6 | 	mov	_var01, ##@LR__5822
20210     04 E4 05 F1 | 	add	objptr, #4
20214     F2 00 62 FC | 	wrlong	_var01, objptr
20218     A3 01 00 FF 
2021c     2C 00 06 F6 | 	mov	_var01, ##@LR__5823
20220     04 E4 05 F1 | 	add	objptr, #4
20224     F2 00 62 FC | 	wrlong	_var01, objptr
20228     A3 01 00 FF 
2022c     3A 00 06 F6 | 	mov	_var01, ##@LR__5824
20230     04 E4 05 F1 | 	add	objptr, #4
20234     F2 00 62 FC | 	wrlong	_var01, objptr
20238     A3 01 00 FF 
2023c     54 00 06 F6 | 	mov	_var01, ##@LR__5825
20240     04 E4 05 F1 | 	add	objptr, #4
20244     F2 00 62 FC | 	wrlong	_var01, objptr
20248     A3 01 00 FF 
2024c     87 00 06 F6 | 	mov	_var01, ##@LR__5826
20250     04 E4 05 F1 | 	add	objptr, #4
20254     F2 00 62 FC | 	wrlong	_var01, objptr
20258     A3 01 00 FF 
2025c     9F 00 06 F6 | 	mov	_var01, ##@LR__5827
20260     04 E4 05 F1 | 	add	objptr, #4
20264     F2 00 62 FC | 	wrlong	_var01, objptr
20268     A3 01 00 FF 
2026c     BA 00 06 F6 | 	mov	_var01, ##@LR__5828
20270     04 E4 05 F1 | 	add	objptr, #4
20274     F2 00 62 FC | 	wrlong	_var01, objptr
20278     A3 01 00 FF 
2027c     D7 00 06 F6 | 	mov	_var01, ##@LR__5829
20280     04 E4 05 F1 | 	add	objptr, #4
20284     F2 00 62 FC | 	wrlong	_var01, objptr
20288     A3 01 00 FF 
2028c     F0 00 06 F6 | 	mov	_var01, ##@LR__5830
20290     04 E4 05 F1 | 	add	objptr, #4
20294     F2 00 62 FC | 	wrlong	_var01, objptr
20298     A3 01 00 FF 
2029c     0F 01 06 F6 | 	mov	_var01, ##@LR__5831
202a0     04 E4 05 F1 | 	add	objptr, #4
202a4     F2 00 62 FC | 	wrlong	_var01, objptr
202a8     A3 01 00 FF 
202ac     1D 01 06 F6 | 	mov	_var01, ##@LR__5832
202b0     04 E4 05 F1 | 	add	objptr, #4
202b4     F2 00 62 FC | 	wrlong	_var01, objptr
202b8     A3 01 00 FF 
202bc     4A 01 06 F6 | 	mov	_var01, ##@LR__5833
202c0     04 E4 05 F1 | 	add	objptr, #4
202c4     F2 00 62 FC | 	wrlong	_var01, objptr
202c8     A3 01 00 FF 
202cc     57 01 06 F6 | 	mov	_var01, ##@LR__5834
202d0     04 E4 05 F1 | 	add	objptr, #4
202d4     F2 00 62 FC | 	wrlong	_var01, objptr
202d8     A3 01 00 FF 
202dc     6B 01 06 F6 | 	mov	_var01, ##@LR__5835
202e0     04 E4 05 F1 | 	add	objptr, #4
202e4     F2 00 62 FC | 	wrlong	_var01, objptr
202e8     A3 01 00 FF 
202ec     8F 01 06 F6 | 	mov	_var01, ##@LR__5836
202f0     04 E4 05 F1 | 	add	objptr, #4
202f4     F2 00 62 FC | 	wrlong	_var01, objptr
202f8     A3 01 00 FF 
202fc     A6 01 06 F6 | 	mov	_var01, ##@LR__5837
20300     04 E4 05 F1 | 	add	objptr, #4
20304     F2 00 62 FC | 	wrlong	_var01, objptr
20308     A3 01 00 FF 
2030c     B9 01 06 F6 | 	mov	_var01, ##@LR__5838
20310     04 E4 05 F1 | 	add	objptr, #4
20314     F2 00 62 FC | 	wrlong	_var01, objptr
20318     A3 01 00 FF 
2031c     D0 01 06 F6 | 	mov	_var01, ##@LR__5839
20320     04 E4 05 F1 | 	add	objptr, #4
20324     F2 00 62 FC | 	wrlong	_var01, objptr
20328     A3 01 00 FF 
2032c     E9 01 06 F6 | 	mov	_var01, ##@LR__5840
20330     04 E4 05 F1 | 	add	objptr, #4
20334     F2 00 62 FC | 	wrlong	_var01, objptr
20338     A4 01 00 FF 
2033c     0B 00 06 F6 | 	mov	_var01, ##@LR__5841
20340     04 E4 05 F1 | 	add	objptr, #4
20344     F2 00 62 FC | 	wrlong	_var01, objptr
20348     A4 01 00 FF 
2034c     1E 00 06 F6 | 	mov	_var01, ##@LR__5842
20350     04 E4 05 F1 | 	add	objptr, #4
20354     F2 00 62 FC | 	wrlong	_var01, objptr
20358     A4 01 00 FF 
2035c     2E 00 06 F6 | 	mov	_var01, ##@LR__5843
20360     04 E4 05 F1 | 	add	objptr, #4
20364     F2 00 62 FC | 	wrlong	_var01, objptr
20368     A4 01 00 FF 
2036c     46 00 06 F6 | 	mov	_var01, ##@LR__5844
20370     04 E4 05 F1 | 	add	objptr, #4
20374     F2 00 62 FC | 	wrlong	_var01, objptr
20378     45 00 00 FF 
2037c     54 E5 85 F1 | 	sub	objptr, ##35668
20380                 | _init_error_strings_ret
20380     2D 00 64 FD | 	ret
20384                 | 
20384                 | '         
20384                 | ' sub printerror(err as integer, linenum=0 as integer)
20384                 | _printerror
20384     02 4A 05 F6 | 	mov	COUNT_, #2
20388     A8 00 A0 FD | 	call	#pushregs_
2038c     09 27 02 F6 | 	mov	local01, arg01
20390     0A 29 02 F6 | 	mov	local02, arg02
20394     A4 01 00 FF 
20398     5D 12 06 F6 | 	mov	arg01, ##@LR__5845
2039c     F8 20 B0 FD | 	call	#_hg010b_spin2_write
203a0     13 13 02 F6 | 	mov	arg01, local01
203a4     94 26 B0 FD | 	call	#_hg010b_spin2_inttostr
203a8     FD 12 02 F6 | 	mov	arg01, result1
203ac     E8 20 B0 FD | 	call	#_hg010b_spin2_write
203b0     A4 01 00 FF 
203b4     64 12 06 F6 | 	mov	arg01, ##@LR__5846
203b8     DC 20 B0 FD | 	call	#_hg010b_spin2_write
203bc     02 26 66 F0 | 	shl	local01, #2
203c0     45 00 00 FF 
203c4     7C E4 05 F1 | 	add	objptr, ##35452
203c8     F2 26 02 F1 | 	add	local01, objptr
203cc     13 13 02 FB | 	rdlong	arg01, local01
203d0     45 00 00 FF 
203d4     7C E4 85 F1 | 	sub	objptr, ##35452
203d8     BC 20 B0 FD | 	call	#_hg010b_spin2_write
203dc                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
203dc                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
203dc     01 28 56 F2 | 	cmps	local02, #1 wc
203e0     20 00 90 CD |  if_b	jmp	#LR__2510
203e4     A4 01 00 FF 
203e8     68 12 06 F6 | 	mov	arg01, ##@LR__5847
203ec     A8 20 B0 FD | 	call	#_hg010b_spin2_write
203f0     14 13 02 F6 | 	mov	arg01, local02
203f4     44 26 B0 FD | 	call	#_hg010b_spin2_inttostr
203f8     FD 12 02 F6 | 	mov	arg01, result1
203fc                 | ' 
203fc                 | ' write(text)
203fc     98 20 B0 FD | 	call	#_hg010b_spin2_write
20400                 | ' crlf
20400     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
20404                 | LR__2510
20404     A7 F0 03 F6 | 	mov	ptra, fp
20408     B2 00 A0 FD | 	call	#popregs_
2040c                 | _printerror_ret
2040c     2D 00 64 FD | 	ret
20410                 | 
20410                 | ' 
20410                 | ' '' ------------------------------- Hardware start/stop/initialization 
20410                 | ' 
20410                 | ' sub startpsram
20410                 | _startpsram
20410     00 12 06 F6 | 	mov	arg01, #0
20414     0A 14 C6 F9 | 	decod	arg02, #10
20418     0B 16 06 F6 | 	mov	arg03, #11
2041c     07 18 06 F6 | 	mov	arg04, #7
20420     0B 00 00 FF 
20424     CC E4 05 F1 | 	add	objptr, ##5836
20428     7C 2A B0 FD | 	call	#_psram_spin2_startx
2042c     2B 00 00 FF 
20430     3C E5 05 F1 | 	add	objptr, ##22332
20434     F2 FA 61 FC | 	wrlong	result1, objptr
20438                 | '     return $7FF00 + cog*12
20438     0C E4 05 F1 | 	add	objptr, #12
2043c     FF 03 80 FF 
20440     F2 00 6A FC | 	wrlong	##524032, objptr
20444     37 00 00 FF 
20448     14 E4 85 F1 | 	sub	objptr, ##28180
2044c                 | _startpsram_ret
2044c     2D 00 64 FD | 	ret
20450                 | 
20450                 | ' 
20450                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
20450                 | _startvideo
20450     01 4A 05 F6 | 	mov	COUNT_, #1
20454     A8 00 A0 FD | 	call	#pushregs_
20458     37 00 00 FF 
2045c     14 E4 05 F1 | 	add	objptr, ##28180
20460     F2 18 02 FB | 	rdlong	arg04, objptr
20464     37 00 00 FF 
20468     14 E4 85 F1 | 	sub	objptr, ##28180
2046c     0A 13 02 F6 | 	mov	arg01, arg02
20470     0C 15 02 F6 | 	mov	arg02, arg04
20474     18 08 B0 FD | 	call	#_hg010b_spin2_start
20478     37 00 00 FF 
2047c     00 E4 05 F1 | 	add	objptr, ##28160
20480     F2 FA 61 FC | 	wrlong	result1, objptr
20484                 | ' 
20484                 | ' videocog=v.start(pin,mbox)
20484                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
20484     00 26 06 F6 | 	mov	local01, #0
20488     2B 00 00 FF 
2048c     34 E5 85 F1 | 	sub	objptr, ##22324
20490                 | LR__2520
20490     13 13 02 F6 | 	mov	arg01, local01
20494     00 28 00 FF 
20498     00 14 06 F6 | 	mov	arg02, ##5242880
2049c     60 2E B0 FD | 	call	#_psram_spin2_setQos
204a0     01 26 06 F1 | 	add	local01, #1
204a4     08 26 56 F2 | 	cmps	local01, #8 wc
204a8     E4 FF 9F CD |  if_b	jmp	#LR__2520
204ac     2B 00 00 FF 
204b0     34 E5 05 F1 | 	add	objptr, ##22324
204b4     F2 12 02 FB | 	rdlong	arg01, objptr
204b8     7A 00 02 FF 
204bc     00 14 06 F6 | 	mov	arg02, ##67171328
204c0     2B 00 00 FF 
204c4     34 E5 85 F1 | 	sub	objptr, ##22324
204c8     34 2E B0 FD | 	call	#_psram_spin2_setQos
204cc     0B 00 00 FF 
204d0     CC E4 85 F1 | 	sub	objptr, ##5836
204d4                 | ' psram.setQoS(videocog, $0400f400) 
204d4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
204d4     F2 14 02 F6 | 	mov	arg02, objptr
204d8     00 B0 04 FF 
204dc     00 14 46 F5 | 	or	arg02, ##157286400
204e0     00 16 06 F6 | 	mov	arg03, #0
204e4     00 18 06 F6 | 	mov	arg04, #0
204e8     00 12 06 F6 | 	mov	arg01, #0
204ec     CC 42 B0 FD | 	call	#__system___basic_open
204f0                 | ' return videocog
204f0     37 00 00 FF 
204f4     00 E4 05 F1 | 	add	objptr, ##28160
204f8     F2 FA 01 FB | 	rdlong	result1, objptr
204fc     37 00 00 FF 
20500     00 E4 85 F1 | 	sub	objptr, ##28160
20504     A7 F0 03 F6 | 	mov	ptra, fp
20508     B2 00 A0 FD | 	call	#popregs_
2050c                 | _startvideo_ret
2050c     2D 00 64 FD | 	ret
20510                 | 
20510                 | ' 
20510                 | ' 
20510                 | ' 
20510                 | ' '' ------------------------------- Convenient psram peek/poke
20510                 | ' 
20510                 | ' sub pslpoke(addr as ulong,value as ulong)
20510                 | _pslpoke
20510     00 4A 05 F6 | 	mov	COUNT_, #0
20514     A8 00 A0 FD | 	call	#pushregs_
20518     08 F0 07 F1 | 	add	ptra, #8
2051c     A7 12 62 FC | 	wrlong	arg01, fp
20520     04 4E 05 F1 | 	add	fp, #4
20524     A7 14 62 FC | 	wrlong	arg02, fp
20528     A7 12 02 F6 | 	mov	arg01, fp
2052c     04 4E 85 F1 | 	sub	fp, #4
20530     A7 14 02 FB | 	rdlong	arg02, fp
20534     04 16 06 F6 | 	mov	arg03, #4
20538     0B 00 00 FF 
2053c     CC E4 05 F1 | 	add	objptr, ##5836
20540     2C 2C B0 FD | 	call	#_psram_spin2_write
20544     0B 00 00 FF 
20548     CC E4 85 F1 | 	sub	objptr, ##5836
2054c     A7 F0 03 F6 | 	mov	ptra, fp
20550     B2 00 A0 FD | 	call	#popregs_
20554                 | _pslpoke_ret
20554     2D 00 64 FD | 	ret
20558                 | 
20558                 | ' 
20558                 | ' sub psdpoke(addr as ulong,value as ulong)
20558                 | _psdpoke
20558     00 4A 05 F6 | 	mov	COUNT_, #0
2055c     A8 00 A0 FD | 	call	#pushregs_
20560     08 F0 07 F1 | 	add	ptra, #8
20564     A7 12 62 FC | 	wrlong	arg01, fp
20568     04 4E 05 F1 | 	add	fp, #4
2056c     A7 14 62 FC | 	wrlong	arg02, fp
20570     A7 12 02 F6 | 	mov	arg01, fp
20574     04 4E 85 F1 | 	sub	fp, #4
20578     A7 14 02 FB | 	rdlong	arg02, fp
2057c     02 16 06 F6 | 	mov	arg03, #2
20580     0B 00 00 FF 
20584     CC E4 05 F1 | 	add	objptr, ##5836
20588     E4 2B B0 FD | 	call	#_psram_spin2_write
2058c     0B 00 00 FF 
20590     CC E4 85 F1 | 	sub	objptr, ##5836
20594     A7 F0 03 F6 | 	mov	ptra, fp
20598     B2 00 A0 FD | 	call	#popregs_
2059c                 | _psdpoke_ret
2059c     2D 00 64 FD | 	ret
205a0                 | 
205a0                 | ' 
205a0                 | ' sub pspoke(addr as ulong,value as ulong)
205a0                 | _pspoke
205a0     00 4A 05 F6 | 	mov	COUNT_, #0
205a4     A8 00 A0 FD | 	call	#pushregs_
205a8     08 F0 07 F1 | 	add	ptra, #8
205ac     A7 12 62 FC | 	wrlong	arg01, fp
205b0     04 4E 05 F1 | 	add	fp, #4
205b4     A7 14 62 FC | 	wrlong	arg02, fp
205b8     A7 12 02 F6 | 	mov	arg01, fp
205bc     04 4E 85 F1 | 	sub	fp, #4
205c0     A7 14 02 FB | 	rdlong	arg02, fp
205c4     01 16 06 F6 | 	mov	arg03, #1
205c8     0B 00 00 FF 
205cc     CC E4 05 F1 | 	add	objptr, ##5836
205d0     9C 2B B0 FD | 	call	#_psram_spin2_write
205d4     0B 00 00 FF 
205d8     CC E4 85 F1 | 	sub	objptr, ##5836
205dc     A7 F0 03 F6 | 	mov	ptra, fp
205e0     B2 00 A0 FD | 	call	#popregs_
205e4                 | _pspoke_ret
205e4     2D 00 64 FD | 	ret
205e8                 | 
205e8                 | ' 
205e8                 | ' function pspeek(adr as ulong) as ubyte
205e8                 | _pspeek
205e8     00 4A 05 F6 | 	mov	COUNT_, #0
205ec     A8 00 A0 FD | 	call	#pushregs_
205f0     0C F0 07 F1 | 	add	ptra, #12
205f4     04 4E 05 F1 | 	add	fp, #4
205f8     A7 12 62 FC | 	wrlong	arg01, fp
205fc     04 4E 05 F1 | 	add	fp, #4
20600     A7 12 02 F6 | 	mov	arg01, fp
20604     04 4E 85 F1 | 	sub	fp, #4
20608     A7 14 02 FB | 	rdlong	arg02, fp
2060c     04 4E 85 F1 | 	sub	fp, #4
20610     01 16 06 F6 | 	mov	arg03, #1
20614     0B 00 00 FF 
20618     CC E4 05 F1 | 	add	objptr, ##5836
2061c     B4 2A B0 FD | 	call	#_psram_spin2_read1
20620     0B 00 00 FF 
20624     CC E4 85 F1 | 	sub	objptr, ##5836
20628                 | ' psram.read1(varptr(res),adr,1)
20628                 | ' return res
20628     08 4E 05 F1 | 	add	fp, #8
2062c     A7 FA C1 FA | 	rdbyte	result1, fp
20630     08 4E 85 F1 | 	sub	fp, #8
20634     A7 F0 03 F6 | 	mov	ptra, fp
20638     B2 00 A0 FD | 	call	#popregs_
2063c                 | _pspeek_ret
2063c     2D 00 64 FD | 	ret
20640                 | 
20640                 | ' 
20640                 | ' function pslpeek(adr as ulong) as ulong
20640                 | _pslpeek
20640     00 4A 05 F6 | 	mov	COUNT_, #0
20644     A8 00 A0 FD | 	call	#pushregs_
20648     0C F0 07 F1 | 	add	ptra, #12
2064c     04 4E 05 F1 | 	add	fp, #4
20650     A7 12 62 FC | 	wrlong	arg01, fp
20654     04 4E 05 F1 | 	add	fp, #4
20658     A7 12 02 F6 | 	mov	arg01, fp
2065c     04 4E 85 F1 | 	sub	fp, #4
20660     A7 14 02 FB | 	rdlong	arg02, fp
20664     04 4E 85 F1 | 	sub	fp, #4
20668     04 16 06 F6 | 	mov	arg03, #4
2066c     0B 00 00 FF 
20670     CC E4 05 F1 | 	add	objptr, ##5836
20674     5C 2A B0 FD | 	call	#_psram_spin2_read1
20678     0B 00 00 FF 
2067c     CC E4 85 F1 | 	sub	objptr, ##5836
20680                 | ' psram.read1(varptr(res),adr,4)
20680                 | ' return res
20680     08 4E 05 F1 | 	add	fp, #8
20684     A7 FA 01 FB | 	rdlong	result1, fp
20688     08 4E 85 F1 | 	sub	fp, #8
2068c     A7 F0 03 F6 | 	mov	ptra, fp
20690     B2 00 A0 FD | 	call	#popregs_
20694                 | _pslpeek_ret
20694     2D 00 64 FD | 	ret
20698                 | 
20698                 | ' 
20698                 | ' function psdpeek(adr as ulong) as ulong
20698                 | _psdpeek
20698     00 4A 05 F6 | 	mov	COUNT_, #0
2069c     A8 00 A0 FD | 	call	#pushregs_
206a0     0C F0 07 F1 | 	add	ptra, #12
206a4     04 4E 05 F1 | 	add	fp, #4
206a8     A7 12 62 FC | 	wrlong	arg01, fp
206ac     04 4E 05 F1 | 	add	fp, #4
206b0     A7 12 02 F6 | 	mov	arg01, fp
206b4     04 4E 85 F1 | 	sub	fp, #4
206b8     A7 14 02 FB | 	rdlong	arg02, fp
206bc     04 4E 85 F1 | 	sub	fp, #4
206c0     02 16 06 F6 | 	mov	arg03, #2
206c4     0B 00 00 FF 
206c8     CC E4 05 F1 | 	add	objptr, ##5836
206cc     04 2A B0 FD | 	call	#_psram_spin2_read1
206d0     0B 00 00 FF 
206d4     CC E4 85 F1 | 	sub	objptr, ##5836
206d8                 | ' psram.read1(varptr(res),adr,2)
206d8                 | ' return res
206d8     08 4E 05 F1 | 	add	fp, #8
206dc     A7 FA E1 FA | 	rdword	result1, fp
206e0     08 4E 85 F1 | 	sub	fp, #8
206e4     A7 F0 03 F6 | 	mov	ptra, fp
206e8     B2 00 A0 FD | 	call	#popregs_
206ec                 | _psdpeek_ret
206ec     2D 00 64 FD | 	ret
206f0                 | 
206f0                 | ' 
206f0                 | ' '' ------------------------------- USB keyboard scan to char translator
206f0                 | ' 
206f0                 | ' function scantochar(key)
206f0                 | _scantochar
206f0                 | ' 
206f0                 | ' select case (key shr 8) and 255
206f0     09 01 02 F6 | 	mov	_var01, arg01
206f4     08 00 C6 F0 | 	sar	_var01, #8
206f8     FF 00 0E F5 | 	and	_var01, #255 wz
206fc     24 00 90 AD |  if_e	jmp	#LR__2530
20700     02 00 0E F2 | 	cmp	_var01, #2 wz
20704     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
20708     30 00 90 AD |  if_e	jmp	#LR__2531
2070c     40 00 0E F2 | 	cmp	_var01, #64 wz
20710     44 00 90 AD |  if_e	jmp	#LR__2532
20714     42 00 0E F2 | 	cmp	_var01, #66 wz
20718     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
2071c     70 00 90 5D |  if_ne	jmp	#LR__2534
20720     50 00 90 FD | 	jmp	#LR__2533
20724                 | LR__2530
20724     09 FB 01 F6 | 	mov	result1, arg01
20728     7F FA 05 F5 | 	and	result1, #127
2072c     02 FA 65 F0 | 	shl	result1, #2
20730     F5 FA 01 F1 | 	add	result1, ptr__dat__
20734     FD FA C1 FA | 	rdbyte	result1, result1
20738     54 00 90 FD | 	jmp	#_scantochar_ret
2073c                 | LR__2531
2073c     09 FB 01 F6 | 	mov	result1, arg01
20740     7F FA 05 F5 | 	and	result1, #127
20744     02 FA 65 F0 | 	shl	result1, #2
20748     01 FA 05 F1 | 	add	result1, #1
2074c     F5 FA 01 F1 | 	add	result1, ptr__dat__
20750     FD FA C1 FA | 	rdbyte	result1, result1
20754     38 00 90 FD | 	jmp	#_scantochar_ret
20758                 | LR__2532
20758     09 FB 01 F6 | 	mov	result1, arg01
2075c     7F FA 05 F5 | 	and	result1, #127
20760     02 FA 65 F0 | 	shl	result1, #2
20764     02 FA 05 F1 | 	add	result1, #2
20768     F5 FA 01 F1 | 	add	result1, ptr__dat__
2076c     FD FA C1 FA | 	rdbyte	result1, result1
20770     1C 00 90 FD | 	jmp	#_scantochar_ret
20774                 | LR__2533
20774     09 FB 01 F6 | 	mov	result1, arg01
20778     7F FA 05 F5 | 	and	result1, #127
2077c     02 FA 65 F0 | 	shl	result1, #2
20780     03 FA 05 F1 | 	add	result1, #3
20784     F5 FA 01 F1 | 	add	result1, ptr__dat__
20788     FD FA C1 FA | 	rdbyte	result1, result1
2078c     00 00 90 FD | 	jmp	#_scantochar_ret
20790                 | LR__2534
20790                 | _scantochar_ret
20790     2D 00 64 FD | 	ret
20794                 | 
20794                 | _program
20794     01 4A 05 F6 | 	mov	COUNT_, #1
20798     A8 00 A0 FD | 	call	#pushregs_
2079c     70 FC BF FD | 	call	#_startpsram
207a0     40 12 06 F6 | 	mov	arg01, #64
207a4     00 14 06 F6 | 	mov	arg02, #0
207a8     00 16 06 F6 | 	mov	arg03, #0
207ac     A0 FC BF FD | 	call	#_startvideo
207b0     37 00 00 FF 
207b4     14 E4 05 F1 | 	add	objptr, ##28180
207b8     F2 12 02 FB | 	rdlong	arg01, objptr
207bc     00 14 06 F6 | 	mov	arg02, #0
207c0     FB 03 00 FF 
207c4     00 17 06 F6 | 	mov	arg03, ##521984
207c8     2B 00 00 FF 
207cc     48 E5 85 F1 | 	sub	objptr, ##22344
207d0     DC 2E B0 FD | 	call	#_audio096_spin2_start
207d4     FE 16 02 F6 | 	mov	arg03, result2
207d8     2B 00 00 FF 
207dc     30 E5 05 F1 | 	add	objptr, ##22320
207e0     F2 FA 61 FC | 	wrlong	result1, objptr
207e4     14 E4 05 F1 | 	add	objptr, #20
207e8     F2 16 62 FC | 	wrlong	arg03, objptr
207ec     37 00 00 FF 
207f0     10 E4 85 F1 | 	sub	objptr, ##28176
207f4     32 12 06 F6 | 	mov	arg01, #50
207f8     0C 38 B0 FD | 	call	#__system___waitms
207fc     37 00 00 FF 
20800     10 E4 05 F1 | 	add	objptr, ##28176
20804     F2 12 02 FB | 	rdlong	arg01, objptr
20808     37 00 00 FF 
2080c     10 E4 85 F1 | 	sub	objptr, ##28176
20810     14 12 06 F1 | 	add	arg01, #20
20814     20 00 80 FF 
20818     09 01 58 FC | 	wrword	##16384, arg01
2081c     E8 2B B0 FD | 	call	#_usbnew_spin2_start
20820     37 00 00 FF 
20824     04 E4 05 F1 | 	add	objptr, ##28164
20828     F2 FA 61 FC | 	wrlong	result1, objptr
2082c                 | '   mouse_limits[0] := xlim
2082c     0F 00 00 FF 
20830     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
20834     01 00 80 FF 
20838     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
2083c                 | '   mouse_limits[1] := ylim
2083c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20840     01 00 80 FF 
20844     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
20848     36 00 00 FF 
2084c     F3 E4 85 F1 | 	sub	objptr, ##27891
20850     F2 12 02 F6 | 	mov	arg01, objptr
20854     11 E5 85 F1 | 	sub	objptr, #273
20858     C4 12 06 F1 | 	add	arg01, #196
2085c                 | '   mouse_outptr := ptr
2085c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20860     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
20864     0F 00 00 FF 
20868     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
2086c     16 00 00 FF 
20870     CA EA 05 F1 | 	add	ptr__dat__, ##11466
20874     F5 14 02 F6 | 	mov	arg02, ptr__dat__
20878     16 00 00 FF 
2087c     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
20880     10 12 06 F6 | 	mov	arg01, #16
20884     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
20888     10 12 06 F6 | 	mov	arg01, #16
2088c     20 14 06 F6 | 	mov	arg02, #32
20890     20 16 06 F6 | 	mov	arg03, #32
20894     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
20898     09 12 C6 F9 | 	decod	arg01, #9
2089c     2C 15 06 F6 | 	mov	arg02, #300
208a0     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
208a4     F2 16 02 F6 | 	mov	arg03, objptr
208a8     50 00 00 FF 
208ac     1C E5 05 F1 | 	add	objptr, ##41244
208b0     F2 14 02 F6 | 	mov	arg02, objptr
208b4     0A 17 62 FC | 	wrlong	arg03, arg02
208b8     04 14 06 F1 | 	add	arg02, #4
208bc     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
208c0     EF 14 02 F6 | 	mov	arg02, entryptr__
208c4     1E FA 05 F6 | 	mov	result1, #30
208c8     28 E4 61 FD | 	setq	objptr
208cc     0A FB F1 FC | 	coginit	result1, arg02 wc
208d0     01 FA 65 C6 |  if_b	neg	result1, #1
208d4     04 E4 85 F1 | 	sub	objptr, #4
208d8     F2 FA 61 FC | 	wrlong	result1, objptr
208dc     01 00 00 FF 
208e0     90 E4 05 F1 | 	add	objptr, ##656
208e4     F2 00 68 FC | 	wrlong	#0, objptr
208e8     1A 00 00 FF 
208ec     74 E5 85 F1 | 	sub	objptr, ##13684
208f0     F2 04 68 FC | 	wrlong	#2, objptr
208f4     04 E4 05 F1 | 	add	objptr, #4
208f8     F2 26 69 FC | 	wrlong	#147, objptr
208fc     04 E4 05 F1 | 	add	objptr, #4
20900     F2 34 69 FC | 	wrlong	#154, objptr
20904     04 E4 05 F1 | 	add	objptr, #4
20908     F2 08 68 FC | 	wrlong	#4, objptr
2090c     04 E4 85 F1 | 	sub	objptr, #4
20910     F2 16 02 FB | 	rdlong	arg03, objptr
20914     14 E4 85 F1 | 	sub	objptr, #20
20918     F2 16 62 FC | 	wrlong	arg03, objptr
2091c     04 E4 05 F1 | 	add	objptr, #4
20920     F2 00 68 FC | 	wrlong	#0, objptr
20924     04 E4 05 F1 | 	add	objptr, #4
20928     F2 00 68 FC | 	wrlong	#0, objptr
2092c     19 00 00 FF 
20930     E4 E4 05 F1 | 	add	objptr, ##13028
20934     F2 02 68 FC | 	wrlong	#1, objptr
20938     01 00 00 FF 
2093c     9C E4 05 F1 | 	add	objptr, ##668
20940     F2 00 68 FC | 	wrlong	#0, objptr
20944     01 00 00 FF 
20948     00 EA 05 F1 | 	add	ptr__dat__, ##512
2094c     08 E4 05 F1 | 	add	objptr, #8
20950     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
20954     04 E4 85 F1 | 	sub	objptr, #4
20958     03 00 80 FF 
2095c     F2 3C 69 FC | 	wrlong	##1694, objptr
20960     0C 00 00 FF 
20964     50 E5 85 F1 | 	sub	objptr, ##6480
20968     F2 18 68 FC | 	wrlong	#12, objptr
2096c     45 00 00 FF 
20970     64 E4 85 F1 | 	sub	objptr, ##35428
20974     01 00 00 FF 
20978     00 EA 85 F1 | 	sub	ptr__dat__, ##512
2097c     4C DA BF FD | 	call	#_init_commands
20980     80 F6 BF FD | 	call	#_init_error_strings
20984     04 EE BF FD | 	call	#_init_audio
20988     44 4A BF FD | 	call	#_do_new
2098c     37 00 00 FF 
20990     3C E4 05 F1 | 	add	objptr, ##28220
20994     F2 12 02 FB | 	rdlong	arg01, objptr
20998     04 E4 85 F1 | 	sub	objptr, #4
2099c     F2 14 02 FB | 	rdlong	arg02, objptr
209a0     37 00 00 FF 
209a4     38 E4 85 F1 | 	sub	objptr, ##28216
209a8     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
209ac     37 00 00 FF 
209b0     40 E4 05 F1 | 	add	objptr, ##28224
209b4     F2 12 02 FB | 	rdlong	arg01, objptr
209b8     37 00 00 FF 
209bc     40 E4 85 F1 | 	sub	objptr, ##28224
209c0     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
209c4                 | ' 
209c4                 | ' leading_spaces:=amount
209c4     01 00 00 FF 
209c8     B6 E4 05 F1 | 	add	objptr, ##694
209cc     F2 04 68 FC | 	wrlong	#2, objptr
209d0     01 00 00 FF 
209d4     B6 E4 85 F1 | 	sub	objptr, ##694
209d8     A4 01 00 FF 
209dc     72 26 06 F6 | 	mov	local01, ##@LR__5848
209e0     3D 12 06 F6 | 	mov	arg01, #61
209e4     3C 14 06 F6 | 	mov	arg02, #60
209e8     3B 16 06 F6 | 	mov	arg03, #59
209ec     3A 18 06 F6 | 	mov	arg04, #58
209f0     A4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
209f4     FD 14 02 F6 | 	mov	arg02, result1
209f8     13 13 02 F6 | 	mov	arg01, local01
209fc     E0 36 B0 FD | 	call	#__system___mount
20a00     A4 01 00 FF 
20a04     76 12 06 F6 | 	mov	arg01, ##@LR__5849
20a08     94 39 B0 FD | 	call	#__system___chdir
20a0c     A4 01 00 FF 
20a10     7E 26 06 F6 | 	mov	local01, ##@LR__5850
20a14     4A 00 00 FF 
20a18     94 E4 05 F1 | 	add	objptr, ##38036
20a1c     F2 26 62 FC | 	wrlong	local01, objptr
20a20     13 00 00 FF 
20a24     60 E4 85 F1 | 	sub	objptr, ##9824
20a28     F2 12 02 FB | 	rdlong	arg01, objptr
20a2c     37 00 00 FF 
20a30     34 E4 85 F1 | 	sub	objptr, ##28212
20a34     01 12 66 F0 | 	shl	arg01, #1
20a38     01 14 06 F6 | 	mov	arg02, #1
20a3c     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
20a40                 | ' init_commands
20a40                 | ' init_error_strings
20a40                 | ' init_audio
20a40                 | ' do_new
20a40                 | ' cls(ink, paper)
20a40                 | ' v.setfontfamily(font) 				' use ST Mono font
20a40                 | ' v.setleadingspaces(2)
20a40                 | ' mount "/sd", _vfs_open_sdcard()
20a40                 | ' chdir "/sd/bas"
20a40                 | ' currentdir$="/sd/bas"
20a40                 | ' position 2*editor_spaces,1 : print ver$
20a40     00 12 06 F6 | 	mov	arg01, #0
20a44     F4 8F B0 FD | 	call	#__system___getiolock_0573
20a48     FD 12 02 F6 | 	mov	arg01, result1
20a4c     C4 32 B0 FD | 	call	#__system___lockmem
20a50     18 00 00 FF 
20a54     40 EB 05 F1 | 	add	ptr__dat__, ##12608
20a58     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
20a5c     18 00 00 FF 
20a60     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
20a64     00 12 06 F6 | 	mov	arg01, #0
20a68     00 16 06 F6 | 	mov	arg03, #0
20a6c     98 3F B0 FD | 	call	#__system___basic_print_string
20a70     00 12 06 F6 | 	mov	arg01, #0
20a74     0A 14 06 F6 | 	mov	arg02, #10
20a78     00 16 06 F6 | 	mov	arg03, #0
20a7c     30 3F B0 FD | 	call	#__system___basic_print_char
20a80     00 12 06 F6 | 	mov	arg01, #0
20a84     B4 8F B0 FD | 	call	#__system___getiolock_0573
20a88     FD 00 68 FC | 	wrlong	#0, result1
20a8c     51 00 00 FF 
20a90     AC E5 05 F1 | 	add	objptr, ##41900
20a94     F2 12 02 FB | 	rdlong	arg01, objptr
20a98     0E 00 00 FF 
20a9c     50 E5 85 F1 | 	sub	objptr, ##7504
20aa0     F2 26 02 FB | 	rdlong	local01, objptr
20aa4     43 00 00 FF 
20aa8     5C E4 85 F1 | 	sub	objptr, ##34396
20aac     13 13 82 F1 | 	sub	arg01, local01
20ab0     00 14 06 F6 | 	mov	arg02, #0
20ab4     0A 16 06 F6 | 	mov	arg03, #10
20ab8     28 55 B0 FD | 	call	#__system__Number_S
20abc     FD 12 02 F6 | 	mov	arg01, result1
20ac0     A4 01 00 FF 
20ac4     86 14 06 F6 | 	mov	arg02, ##@LR__5851
20ac8     A4 32 B0 FD | 	call	#__system___string_concat
20acc     FD 26 02 F6 | 	mov	local01, result1
20ad0     50 00 00 FF 
20ad4     10 E5 05 F1 | 	add	objptr, ##41232
20ad8     F2 26 62 FC | 	wrlong	local01, objptr
20adc     50 00 00 FF 
20ae0     10 E5 85 F1 | 	sub	objptr, ##41232
20ae4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
20ae4     00 12 06 F6 | 	mov	arg01, #0
20ae8     50 8F B0 FD | 	call	#__system___getiolock_0573
20aec     FD 12 02 F6 | 	mov	arg01, result1
20af0     20 32 B0 FD | 	call	#__system___lockmem
20af4     50 00 00 FF 
20af8     10 E5 05 F1 | 	add	objptr, ##41232
20afc     F2 14 02 FB | 	rdlong	arg02, objptr
20b00     50 00 00 FF 
20b04     10 E5 85 F1 | 	sub	objptr, ##41232
20b08     00 12 06 F6 | 	mov	arg01, #0
20b0c     00 16 06 F6 | 	mov	arg03, #0
20b10     F4 3E B0 FD | 	call	#__system___basic_print_string
20b14     00 12 06 F6 | 	mov	arg01, #0
20b18     0A 14 06 F6 | 	mov	arg02, #10
20b1c     00 16 06 F6 | 	mov	arg03, #0
20b20     8C 3E B0 FD | 	call	#__system___basic_print_char
20b24     00 12 06 F6 | 	mov	arg01, #0
20b28     10 8F B0 FD | 	call	#__system___getiolock_0573
20b2c     FD 00 68 FC | 	wrlong	#0, result1
20b30     37 00 00 FF 
20b34     34 E4 05 F1 | 	add	objptr, ##28212
20b38     F2 12 02 FB | 	rdlong	arg01, objptr
20b3c     37 00 00 FF 
20b40     34 E4 85 F1 | 	sub	objptr, ##28212
20b44     01 12 66 F0 | 	shl	arg01, #1
20b48     04 14 06 F6 | 	mov	arg02, #4
20b4c     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
20b50                 | ' position 2*editor_spaces,4 : print "Ready"
20b50     00 12 06 F6 | 	mov	arg01, #0
20b54     E4 8E B0 FD | 	call	#__system___getiolock_0573
20b58     FD 12 02 F6 | 	mov	arg01, result1
20b5c     B4 31 B0 FD | 	call	#__system___lockmem
20b60     A4 01 00 FF 
20b64     98 14 06 F6 | 	mov	arg02, ##@LR__5852
20b68     00 12 06 F6 | 	mov	arg01, #0
20b6c     00 16 06 F6 | 	mov	arg03, #0
20b70     94 3E B0 FD | 	call	#__system___basic_print_string
20b74     00 12 06 F6 | 	mov	arg01, #0
20b78     0A 14 06 F6 | 	mov	arg02, #10
20b7c     00 16 06 F6 | 	mov	arg03, #0
20b80     2C 3E B0 FD | 	call	#__system___basic_print_char
20b84     00 12 06 F6 | 	mov	arg01, #0
20b88     B0 8E B0 FD | 	call	#__system___getiolock_0573
20b8c     FD 00 68 FC | 	wrlong	#0, result1
20b90     00 14 06 F6 | 	mov	arg02, #0
20b94     01 14 D6 F7 | 	test	arg02, #1 wc
20b98     5A 4C 64 FD | 	drvc	#38
20b9c     01 14 D6 F7 | 	test	arg02, #1 wc
20ba0     5A 4E 64 FD | 	drvc	#39
20ba4     A4 01 00 FF 
20ba8     9E 26 06 F6 | 	mov	local01, ##@LR__5853
20bac     51 00 00 FF 
20bb0     D8 E5 05 F1 | 	add	objptr, ##41944
20bb4     F2 26 62 FC | 	wrlong	local01, objptr
20bb8     04 E4 05 F1 | 	add	objptr, #4
20bbc     FF FF FF FF 
20bc0     F2 FE 6B FC | 	wrlong	##-1, objptr
20bc4     0C E4 05 F1 | 	add	objptr, #12
20bc8     F2 00 68 FC | 	wrlong	#0, objptr
20bcc     51 00 00 FF 
20bd0     E8 E5 85 F1 | 	sub	objptr, ##41960
20bd4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
20bd4                 | ' loadname="noname.bas"
20bd4                 | ' do_insert=-1
20bd4                 | ' inload=0
20bd4                 | ' 
20bd4                 | ' open "/sd/bas/autorun.bas" for input as #9
20bd4     A4 01 00 FF 
20bd8     A9 14 06 F6 | 	mov	arg02, ##@LR__5854
20bdc     09 12 06 F6 | 	mov	arg01, #9
20be0     00 16 06 F6 | 	mov	arg03, #0
20be4     30 3D B0 FD | 	call	#__system___basic_open_string
20be8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20bec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20bf0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20bf4     51 00 00 FF 
20bf8     EC E5 05 F1 | 	add	objptr, ##41964
20bfc     F2 FA 61 FC | 	wrlong	result1, objptr
20c00     51 00 00 FF 
20c04     EC E5 85 F1 | 	sub	objptr, ##41964
20c08                 | ' err=geterr()
20c08                 | ' close #9
20c08     09 12 06 F6 | 	mov	arg01, #9
20c0c     5C 84 B0 FD | 	call	#__system__close
20c10                 | ' if err=0 then line$="run autorun.bas" : interpret
20c10     51 00 00 FF 
20c14     EC E5 05 F1 | 	add	objptr, ##41964
20c18     F2 26 0A FB | 	rdlong	local01, objptr wz
20c1c     51 00 00 FF 
20c20     EC E5 85 F1 | 	sub	objptr, ##41964
20c24     A4 01 00 AF 
20c28     BD 26 06 A6 |  if_e	mov	local01, ##@LR__5855
20c2c     37 00 00 AF 
20c30     1C E4 05 A1 |  if_e	add	objptr, ##28188
20c34     F2 26 62 AC |  if_e	wrlong	local01, objptr
20c38     37 00 00 AF 
20c3c     1C E4 85 A1 |  if_e	sub	objptr, ##28188
20c40     04 0B BE AD |  if_e	call	#_interpret
20c44                 | ' 
20c44                 | ' 
20c44                 | ' '-------------------------------------------------------------------------------------------------------- 
20c44                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
20c44                 | ' '--------------------------------------------------------------------------------------------------------
20c44                 | ' 
20c44                 | ' do
20c44                 | LR__2540
20c44     BC FB BD FD | 	call	#_edit
20c48     FD 26 02 F6 | 	mov	local01, result1
20c4c     37 00 00 FF 
20c50     1C E4 05 F1 | 	add	objptr, ##28188
20c54     F2 26 62 FC | 	wrlong	local01, objptr
20c58     37 00 00 FF 
20c5c     1C E4 85 F1 | 	sub	objptr, ##28188
20c60     E4 0A BE FD | 	call	#_interpret
20c64     A4 01 00 FF 
20c68     CD 26 06 F6 | 	mov	local01, ##@LR__5856
20c6c     37 00 00 FF 
20c70     1C E4 05 F1 | 	add	objptr, ##28188
20c74     F2 26 62 FC | 	wrlong	local01, objptr
20c78     37 00 00 FF 
20c7c     1C E4 85 F1 | 	sub	objptr, ##28188
20c80     C0 FF 9F FD | 	jmp	#LR__2540
20c84     A7 F0 03 F6 | 	mov	ptra, fp
20c88     B2 00 A0 FD | 	call	#popregs_
20c8c                 | _program_ret
20c8c     2D 00 64 FD | 	ret
20c90                 | 
20c90                 | ' '' this is not a main program.
20c90                 | ' 
20c90                 | ' '****************************************************************************************************************
20c90                 | ' '                                                                                                             	*
20c90                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
20c90                 | ' '                                                                                                            	*
20c90                 | ' ' base - HDMI base pin												*
20c90                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
20c90                 | ' '														*
20c90                 | ' '														*
20c90                 | ' '****************************************************************************************************************
20c90                 | ' 
20c90                 | ' pub start(base,mb):result |i
20c90                 | _hg010b_spin2_start
20c90                 | ' 
20c90                 | ' '--------------------------- initialize pointers and variables
20c90                 | ' 
20c90                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
20c90     34 E4 05 F1 | 	add	objptr, #52
20c94     F2 FA 01 F6 | 	mov	result1, objptr
20c98     28 E4 85 F1 | 	sub	objptr, #40
20c9c     F2 FA 61 FC | 	wrlong	result1, objptr
20ca0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
20ca0                 | ' hdmibase:=base							' HDMI base pin, 8*n
20ca0     18 E4 05 F1 | 	add	objptr, #24
20ca4     F2 12 62 FC | 	wrlong	arg01, objptr
20ca8                 | ' mailbox_ptr:=mb		
20ca8     04 E4 05 F1 | 	add	objptr, #4
20cac     F2 14 62 FC | 	wrlong	arg02, objptr
20cb0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
20cb0     C1 E5 05 F1 | 	add	objptr, #449
20cb4     F2 14 62 FC | 	wrlong	arg02, objptr
20cb8                 | ' sprite_ptr:=@spr1ptr
20cb8     D8 E4 85 F1 | 	sub	objptr, #216
20cbc     F2 FA 01 F6 | 	mov	result1, objptr
20cc0     E5 E4 85 F1 | 	sub	objptr, #229
20cc4     F2 FA 61 FC | 	wrlong	result1, objptr
20cc8                 | ' 
20cc8                 | ' 		'
20cc8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
20cc8     E5 E4 05 F1 | 	add	objptr, #229
20ccc     F2 FA 01 FB | 	rdlong	result1, objptr
20cd0     D0 FA 05 F1 | 	add	result1, #208
20cd4     FD 10 58 FC | 	wrword	#8, result1
20cd8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
20cd8     F2 16 02 FB | 	rdlong	arg03, objptr
20cdc     D2 16 06 F1 | 	add	arg03, #210
20ce0     0B 21 58 FC | 	wrword	#16, arg03
20ce4                 | ' leading_spaces:=0				'
20ce4     A5 E5 05 F1 | 	add	objptr, #421
20ce8     F2 00 68 FC | 	wrlong	#0, objptr
20cec                 | ' 
20cec                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
20cec     99 E4 85 F1 | 	sub	objptr, #153
20cf0     00 00 A0 FF 
20cf4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
20cf8                 | ' emptydl[1]:=0
20cf8     04 E4 05 F1 | 	add	objptr, #4
20cfc     F2 00 68 FC | 	wrlong	#0, objptr
20d00                 | ' 
20d00                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
20d00                 | ' 
20d00                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
20d00     28 E5 85 F1 | 	sub	objptr, #296
20d04     F2 02 68 FC | 	wrlong	#1, objptr
20d08                 | ' if s_debug<>0
20d08                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
20d08     20 00 80 FF 
20d0c     F2 00 68 FC | 	wrlong	##16384, objptr
20d10     F9 E4 85 F1 | 	sub	objptr, #249
20d14                 | ' setmode()							' set the mode, see below
20d14     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
20d18                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
20d18     49 E4 05 F1 | 	add	objptr, #73
20d1c     F2 FA 01 F6 | 	mov	result1, objptr
20d20     35 E4 85 F1 | 	sub	objptr, #53
20d24     F2 FA 61 FC | 	wrlong	result1, objptr
20d28                 | ' cursor_ptr:=@cursor_x						
20d28     28 E4 05 F1 | 	add	objptr, #40
20d2c     F2 16 02 F6 | 	mov	arg03, objptr
20d30     2C E4 85 F1 | 	sub	objptr, #44
20d34     F2 16 62 FC | 	wrlong	arg03, objptr
20d38                 | ' fontnum:=0  							' start with a PC type font 
20d38     55 E4 05 F1 | 	add	objptr, #85
20d3c     F2 00 68 FC | 	wrlong	#0, objptr
20d40                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
20d40     1C E4 05 F1 | 	add	objptr, #28
20d44     F2 12 02 F6 | 	mov	arg01, objptr
20d48     81 E4 85 F1 | 	sub	objptr, #129
20d4c     10 00 00 FF 
20d50     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
20d54     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
20d58     10 00 00 FF 
20d5c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
20d60     10 16 06 F6 | 	mov	arg03, #16
20d64     CC 2E B0 FD | 	call	#__system____builtin_memmove
20d68                 | ' leading_spaces:=0
20d68     01 00 00 FF 
20d6c     B6 E4 05 F1 | 	add	objptr, ##694
20d70     F2 00 68 FC | 	wrlong	#0, objptr
20d74     01 00 00 FF 
20d78     B6 E4 85 F1 | 	sub	objptr, ##694
20d7c                 | ' '---------------------------- initialize a cursor (MSDOS type)
20d7c                 | ' 
20d7c                 | ' initcursor(154)
20d7c     9A 12 06 F6 | 	mov	arg01, #154
20d80     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
20d84                 | ' 
20d84                 | ' '---------------------------- start the cog
20d84                 | ' 
20d84                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
20d84     10 00 00 FF 
20d88     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
20d8c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
20d90     10 00 00 FF 
20d94     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
20d98     14 E4 05 F1 | 	add	objptr, #20
20d9c     10 FA 05 F6 | 	mov	result1, #16
20da0     28 E4 61 FD | 	setq	objptr
20da4     0A FB F1 FC | 	coginit	result1, arg02 wc
20da8     01 FA 65 C6 |  if_b	neg	result1, #1
20dac     1C E4 05 F1 | 	add	objptr, #28
20db0     F2 FA 61 FC | 	wrlong	result1, objptr
20db4     30 E4 85 F1 | 	sub	objptr, #48
20db8                 | ' waitms(40)							' wait for stabilize
20db8     28 12 06 F6 | 	mov	arg01, #40
20dbc     48 32 B0 FD | 	call	#__system___waitms
20dc0                 | ' return cog							' return the driver's cog #
20dc0     30 E4 05 F1 | 	add	objptr, #48
20dc4     F2 FA 01 FB | 	rdlong	result1, objptr
20dc8     30 E4 85 F1 | 	sub	objptr, #48
20dcc                 | _hg010b_spin2_start_ret
20dcc     2D 00 64 FD | 	ret
20dd0                 | 
20dd0                 | ' 
20dd0                 | ' 
20dd0                 | ' '**************************************************************************************************************** 
20dd0                 | ' '                                                                                                             	*
20dd0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
20dd0                 | ' '  Mode number - see start() above or bits below								*
20dd0                 | ' '                                                                                                             	*
20dd0                 | ' '****************************************************************************************************************
20dd0                 | ' 
20dd0                 | ' '---------------------------- initialize a cursor (MSDOS type)
20dd0                 | ' pub initcursor(color) |i
20dd0                 | _hg010b_spin2_initcursor
20dd0     03 4A 05 F6 | 	mov	COUNT_, #3
20dd4     A8 00 A0 FD | 	call	#pushregs_
20dd8     09 27 02 F6 | 	mov	local01, arg01
20ddc                 | ' 
20ddc                 | ' cursor_x:=0							' place the cursor at 0:0
20ddc     3C E4 05 F1 | 	add	objptr, #60
20de0     F2 00 58 FC | 	wrword	#0, objptr
20de4                 | ' cursor_y:=0
20de4     02 E4 05 F1 | 	add	objptr, #2
20de8     F2 00 48 FC | 	wrbyte	#0, objptr
20dec                 | ' repeat i from 0 to 111
20dec     00 28 06 F6 | 	mov	local02, #0
20df0     F8 E5 05 F1 | 	add	objptr, #504
20df4     97 1A 48 FB | 	callpa	#(@LR__2552-@LR__2550)>>2,fcache_load_ptr_
20df8                 | LR__2550
20df8                 | '   cursor[i]:=0
20df8     14 2B 02 F6 | 	mov	local03, local02
20dfc     F2 2A 02 F1 | 	add	local03, objptr
20e00     15 01 48 FC | 	wrbyte	#0, local03
20e04     01 28 06 F1 | 	add	local02, #1
20e08     70 28 56 F2 | 	cmps	local02, #112 wc
20e0c     E8 FF 9F CD |  if_b	jmp	#LR__2550
20e10                 | ' repeat i from 112 to 127
20e10     70 28 06 F6 | 	mov	local02, #112
20e14                 | LR__2551
20e14                 | '   cursor[i]:=color  
20e14     14 2B 02 F6 | 	mov	local03, local02
20e18     F2 2A 02 F1 | 	add	local03, objptr
20e1c     15 27 42 FC | 	wrbyte	local01, local03
20e20     01 28 06 F1 | 	add	local02, #1
20e24     80 28 16 F2 | 	cmp	local02, #128 wc
20e28     E8 FF 9F CD |  if_b	jmp	#LR__2551
20e2c                 | LR__2552
20e2c                 | ' 'repeat i from 0 to 127
20e2c                 | ' '  if ((i/8)//2)
20e2c                 | ' '    cursor[i]:=15
20e2c                 | ' '  else
20e2c                 | ' '    cursor[i]:=0
20e2c                 | ' '  if i>=120    
20e2c                 | ' '    cursor[i]:=40
20e2c                 | ' setspriteptr(17,@cursor)
20e2c     F2 14 02 F6 | 	mov	arg02, objptr
20e30     01 00 00 FF 
20e34     36 E4 85 F1 | 	sub	objptr, ##566
20e38     11 12 06 F6 | 	mov	arg01, #17
20e3c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
20e40                 | ' setspritesize(17,8,16)
20e40     11 12 06 F6 | 	mov	arg01, #17
20e44     08 14 06 F6 | 	mov	arg02, #8
20e48     10 16 06 F6 | 	mov	arg03, #16
20e4c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
20e50                 | ' setspritepos(17,0,0)
20e50     11 12 06 F6 | 	mov	arg01, #17
20e54     00 14 06 F6 | 	mov	arg02, #0
20e58     00 16 06 F6 | 	mov	arg03, #0
20e5c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
20e60                 | ' cursorshape:=14
20e60     0B 00 00 FF 
20e64     C6 E4 05 F1 | 	add	objptr, ##5830
20e68     F2 1C 68 FC | 	wrlong	#14, objptr
20e6c                 | ' cursorcolor:=color
20e6c     04 E4 85 F1 | 	sub	objptr, #4
20e70     F2 26 62 FC | 	wrlong	local01, objptr
20e74     0B 00 00 FF 
20e78     C2 E4 85 F1 | 	sub	objptr, ##5826
20e7c     A7 F0 03 F6 | 	mov	ptra, fp
20e80     B2 00 A0 FD | 	call	#popregs_
20e84                 | _hg010b_spin2_initcursor_ret
20e84     2D 00 64 FD | 	ret
20e88                 | 
20e88                 | ' 
20e88                 | ' pub setcursorshape(shape) | i
20e88                 | _hg010b_spin2_setcursorshape
20e88                 | ' 
20e88                 | ' cursorshape:=shape
20e88     0B 00 00 FF 
20e8c     C6 E4 05 F1 | 	add	objptr, ##5830
20e90     F2 12 62 FC | 	wrlong	arg01, objptr
20e94                 | ' repeat i from 0 to (8*cursorshape)-1
20e94     00 00 06 F6 | 	mov	_var01, #0
20e98     09 03 02 F6 | 	mov	_var02, arg01
20e9c     03 02 66 F0 | 	shl	_var02, #3
20ea0     01 02 86 F1 | 	sub	_var02, #1
20ea4     00 02 56 F2 | 	cmps	_var02, #0 wc
20ea8     01 04 86 F6 | 	negc	_var03, #1
20eac     02 07 02 F6 | 	mov	_var04, _var03
20eb0     02 03 02 F1 | 	add	_var02, _var03
20eb4     0A 00 00 FF 
20eb8     90 E4 85 F1 | 	sub	objptr, ##5264
20ebc     97 0C 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
20ec0                 | LR__2560
20ec0                 | '   cursor[i]:=0
20ec0     00 05 02 F6 | 	mov	_var03, _var01
20ec4     F2 04 02 F1 | 	add	_var03, objptr
20ec8     02 01 48 FC | 	wrbyte	#0, _var03
20ecc     03 01 02 F1 | 	add	_var01, _var04
20ed0     01 01 0A F2 | 	cmp	_var01, _var02 wz
20ed4     E8 FF 9F 5D |  if_ne	jmp	#LR__2560
20ed8                 | LR__2561
20ed8                 | ' repeat i from 8*cursorshape to 127
20ed8     0A 00 00 FF 
20edc     90 E4 05 F1 | 	add	objptr, ##5264
20ee0     F2 06 02 FB | 	rdlong	_var04, objptr
20ee4     03 01 02 F6 | 	mov	_var01, _var04
20ee8     03 00 66 F0 | 	shl	_var01, #3
20eec     0B 00 00 FF 
20ef0     C6 E4 85 F1 | 	sub	objptr, ##5830
20ef4     03 06 66 F0 | 	shl	_var04, #3
20ef8     80 06 56 F2 | 	cmps	_var04, #128 wc
20efc     01 04 A6 F6 | 	negnc	_var03, #1
20f00     7F 02 06 F6 | 	mov	_var02, #127
20f04     02 03 02 F1 | 	add	_var02, _var03
20f08     97 1A 48 FB | 	callpa	#(@LR__2563-@LR__2562)>>2,fcache_load_ptr_
20f0c                 | LR__2562
20f0c                 | '   cursor[i]:=cursorcolor
20f0c     00 07 02 F6 | 	mov	_var04, _var01
20f10     01 00 00 FF 
20f14     36 E4 05 F1 | 	add	objptr, ##566
20f18     F2 06 02 F1 | 	add	_var04, objptr
20f1c     0A 00 00 FF 
20f20     8C E4 05 F1 | 	add	objptr, ##5260
20f24     F2 12 02 FB | 	rdlong	arg01, objptr
20f28     0B 00 00 FF 
20f2c     C2 E4 85 F1 | 	sub	objptr, ##5826
20f30     03 13 42 FC | 	wrbyte	arg01, _var04
20f34     02 01 02 F1 | 	add	_var01, _var03
20f38     01 01 0A F2 | 	cmp	_var01, _var02 wz
20f3c     CC FF 9F 5D |  if_ne	jmp	#LR__2562
20f40                 | LR__2563
20f40                 | _hg010b_spin2_setcursorshape_ret
20f40     2D 00 64 FD | 	ret
20f44                 | 
20f44                 | ' 
20f44                 | ' pub setcursorcolor(color) | i
20f44                 | _hg010b_spin2_setcursorcolor
20f44                 | ' 
20f44                 | ' cursorcolor:=color
20f44     0B 00 00 FF 
20f48     C2 E4 05 F1 | 	add	objptr, ##5826
20f4c     F2 12 62 FC | 	wrlong	arg01, objptr
20f50                 | ' repeat i from 0 to (8*cursorshape)-1
20f50     00 12 06 F6 | 	mov	arg01, #0
20f54     04 E4 05 F1 | 	add	objptr, #4
20f58     F2 00 02 FB | 	rdlong	_var01, objptr
20f5c     03 00 66 F0 | 	shl	_var01, #3
20f60     01 00 86 F1 | 	sub	_var01, #1
20f64     00 00 56 F2 | 	cmps	_var01, #0 wc
20f68     01 02 86 F6 | 	negc	_var02, #1
20f6c     01 05 02 F6 | 	mov	_var03, _var02
20f70     01 01 02 F1 | 	add	_var01, _var02
20f74     0A 00 00 FF 
20f78     90 E4 85 F1 | 	sub	objptr, ##5264
20f7c     97 0C 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
20f80                 | LR__2570
20f80                 | '   cursor[i]:=0
20f80     09 03 02 F6 | 	mov	_var02, arg01
20f84     F2 02 02 F1 | 	add	_var02, objptr
20f88     01 01 48 FC | 	wrbyte	#0, _var02
20f8c     02 13 02 F1 | 	add	arg01, _var03
20f90     00 13 0A F2 | 	cmp	arg01, _var01 wz
20f94     E8 FF 9F 5D |  if_ne	jmp	#LR__2570
20f98                 | LR__2571
20f98                 | ' repeat i from 8*cursorshape to 127
20f98     0A 00 00 FF 
20f9c     90 E4 05 F1 | 	add	objptr, ##5264
20fa0     F2 04 02 FB | 	rdlong	_var03, objptr
20fa4     02 13 02 F6 | 	mov	arg01, _var03
20fa8     03 12 66 F0 | 	shl	arg01, #3
20fac     0B 00 00 FF 
20fb0     C6 E4 85 F1 | 	sub	objptr, ##5830
20fb4     03 04 66 F0 | 	shl	_var03, #3
20fb8     80 04 56 F2 | 	cmps	_var03, #128 wc
20fbc     01 02 A6 F6 | 	negnc	_var02, #1
20fc0     7F 00 06 F6 | 	mov	_var01, #127
20fc4     01 01 02 F1 | 	add	_var01, _var02
20fc8     97 1A 48 FB | 	callpa	#(@LR__2573-@LR__2572)>>2,fcache_load_ptr_
20fcc                 | LR__2572
20fcc                 | '   cursor[i]:=cursorcolor
20fcc     09 05 02 F6 | 	mov	_var03, arg01
20fd0     01 00 00 FF 
20fd4     36 E4 05 F1 | 	add	objptr, ##566
20fd8     F2 04 02 F1 | 	add	_var03, objptr
20fdc     0A 00 00 FF 
20fe0     8C E4 05 F1 | 	add	objptr, ##5260
20fe4     F2 06 02 FB | 	rdlong	_var04, objptr
20fe8     0B 00 00 FF 
20fec     C2 E4 85 F1 | 	sub	objptr, ##5826
20ff0     02 07 42 FC | 	wrbyte	_var04, _var03
20ff4     01 13 02 F1 | 	add	arg01, _var02
20ff8     00 13 0A F2 | 	cmp	arg01, _var01 wz
20ffc     CC FF 9F 5D |  if_ne	jmp	#LR__2572
21000                 | LR__2573
21000                 | _hg010b_spin2_setcursorcolor_ret
21000     2D 00 64 FD | 	ret
21004                 | 
21004                 | '   
21004                 | '   
21004                 | '   
21004                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
21004                 | _hg010b_spin2_setmode
21004     02 4A 05 F6 | 	mov	COUNT_, #2
21008     A8 00 A0 FD | 	call	#pushregs_
2100c                 | ' 
2100c                 | ' 
2100c                 | ' dl_ptr:=@emptydl[0]
2100c     01 00 00 FF 
21010     1D E4 05 F1 | 	add	objptr, ##541
21014     F2 1A 02 F6 | 	mov	arg05, objptr
21018     FD E5 85 F1 | 	sub	objptr, #509
2101c     F2 1A 62 FC | 	wrlong	arg05, objptr
21020                 | ' 
21020                 | ' if cog>0 
21020     10 E4 05 F1 | 	add	objptr, #16
21024     F2 1A 02 FB | 	rdlong	arg05, objptr
21028     30 E4 85 F1 | 	sub	objptr, #48
2102c     01 1A 56 F2 | 	cmps	arg05, #1 wc
21030                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
21030     01 12 06 36 |  if_ae	mov	arg01, #1
21034     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
21038                 | ' xres:=1024
21038     01 00 00 FF 
2103c     26 E4 05 F1 | 	add	objptr, ##550
21040     02 00 80 FF 
21044     F2 00 68 FC | 	wrlong	##1024, objptr
21048                 | ' yres:=600
21048     04 E4 05 F1 | 	add	objptr, #4
2104c     01 00 80 FF 
21050     F2 B0 68 FC | 	wrlong	##600, objptr
21054                 | ' ppl:=(timings[3])
21054     10 00 00 FF 
21058     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
2105c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21060     51 E5 85 F1 | 	sub	objptr, #337
21064     F2 1A 62 FC | 	wrlong	arg05, objptr
21068                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
21068     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
2106c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
21070     01 26 66 F0 | 	shl	local01, #1
21074     80 E4 85 F1 | 	sub	objptr, #128
21078     F2 26 62 FC | 	wrlong	local01, objptr
2107c                 | ' cpl1:=cpl '' todo remove
2107c     04 E4 05 F1 | 	add	objptr, #4
21080     F2 26 62 FC | 	wrlong	local01, objptr
21084                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
21084     02 00 00 FF 
21088     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
2108c     41 E4 85 F1 | 	sub	objptr, #65
21090     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
21094                 | ' repeat i from 0 to 3
21094     00 28 06 F6 | 	mov	local02, #0
21098     02 00 00 FF 
2109c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
210a0     08 E4 05 F1 | 	add	objptr, #8
210a4     97 20 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
210a8                 | LR__2580
210a8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
210a8     14 27 02 F6 | 	mov	local01, local02
210ac     02 26 66 F0 | 	shl	local01, #2
210b0     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
210b4     F2 1A 02 FB | 	rdlong	arg05, objptr
210b8     11 1A 66 F0 | 	shl	arg05, #17
210bc     13 27 02 FB | 	rdlong	local01, local01
210c0     0D 27 02 F1 | 	add	local01, arg05
210c4     80 40 38 FF 
210c8     00 26 06 F1 | 	add	local01, ##1887502336
210cc     14 1B 02 F6 | 	mov	arg05, local02
210d0     02 1A 66 F0 | 	shl	arg05, #2
210d4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
210d8     0D 27 62 FC | 	wrlong	local01, arg05
210dc     01 28 06 F1 | 	add	local02, #1
210e0     04 28 56 F2 | 	cmps	local02, #4 wc
210e4     C0 FF 9F CD |  if_b	jmp	#LR__2580
210e8                 | LR__2581
210e8     24 E4 85 F1 | 	sub	objptr, #36
210ec                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
210ec     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
210f0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
210f4     14 26 66 FC | 	wrlong	local01, #20
210f8                 | ' hubset(timings[10])
210f8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
210fc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
21100     10 00 00 FF 
21104     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
21108     00 12 62 FD | 	hubset	arg01
2110c                 | ' waitms(1)                                                   	' wait for stabilization
2110c     01 12 06 F6 | 	mov	arg01, #1
21110     F4 2E B0 FD | 	call	#__system___waitms
21114     10 00 00 FF 
21118     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
2111c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
21120     61 E4 05 F1 | 	add	objptr, #97
21124     F2 28 62 FC | 	wrlong	local02, objptr
21128     14 27 52 F6 | 	abs	local01, local02 wc
2112c     04 26 46 F0 | 	shr	local01, #4
21130     13 27 82 F6 | 	negc	local01, local01
21134     9C E4 05 F1 | 	add	objptr, #156
21138     F2 26 62 FC | 	wrlong	local01, objptr
2113c     A4 E4 85 F1 | 	sub	objptr, #164
21140     F2 28 02 FB | 	rdlong	local02, objptr
21144     08 E4 05 F1 | 	add	objptr, #8
21148     F2 26 02 FB | 	rdlong	local01, objptr
2114c     13 29 02 FD | 	qmul	local02, local01
21150                 | ' lines:=timings[11]
21150                 | ' t_lines:=lines/16
21150                 | ' buflen:=cpl*lines						' framebuffer length in longs
21150     29 E4 85 F1 | 	sub	objptr, #41
21154     19 26 C6 F9 | 	decod	local01, #25
21158     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
2115c     18 28 62 FD | 	getqx	local02
21160     F2 28 62 FC | 	wrlong	local02, objptr
21164     38 E4 85 F1 | 	sub	objptr, #56
21168     02 28 66 F0 | 	shl	local02, #2
2116c     14 27 82 F1 | 	sub	local01, local02
21170     F2 26 62 FC | 	wrlong	local01, objptr
21174     FD E4 05 F1 | 	add	objptr, #253
21178     F2 28 02 FB | 	rdlong	local02, objptr
2117c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21180     0D 29 02 FD | 	qmul	local02, arg05
21184                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
21184                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
21184     F9 E4 85 F1 | 	sub	objptr, #249
21188                 | ' mode_ptr:=@timings						' set pointers to timings
21188     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
2118c                 | ' graphmode:=1024+512+192+48							' det global variable
2118c                 | ' makedl(graphmode)							' make a DL for the mode
2118c     03 00 00 FF 
21190     F0 12 06 F6 | 	mov	arg01, ##1776
21194     18 28 62 FD | 	getqx	local02
21198     14 27 82 F1 | 	sub	local01, local02
2119c     F2 26 62 FC | 	wrlong	local01, objptr
211a0     14 E4 05 F1 | 	add	objptr, #20
211a4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
211a8     79 E4 05 F1 | 	add	objptr, #121
211ac     03 00 80 FF 
211b0     F2 E0 69 FC | 	wrlong	##1776, objptr
211b4     91 E4 85 F1 | 	sub	objptr, #145
211b8     10 00 00 FF 
211bc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
211c0     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
211c4                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
211c4     F2 26 02 FB | 	rdlong	local01, objptr
211c8     DD E4 05 F1 | 	add	objptr, #221
211cc     F2 26 62 FC | 	wrlong	local01, objptr
211d0                 | ' s_font_ptr:=font_ptr
211d0     D5 E4 85 F1 | 	sub	objptr, #213
211d4     F2 26 02 FB | 	rdlong	local01, objptr
211d8     D9 E4 05 F1 | 	add	objptr, #217
211dc     F2 26 62 FC | 	wrlong	local01, objptr
211e0                 | ' s_lines:=lines
211e0     80 E4 85 F1 | 	sub	objptr, #128
211e4     F2 26 02 FB | 	rdlong	local01, objptr
211e8     84 E4 05 F1 | 	add	objptr, #132
211ec     F2 26 62 FC | 	wrlong	local01, objptr
211f0                 | ' s_buflen:=buflen
211f0     AD E4 85 F1 | 	sub	objptr, #173
211f4     F2 26 02 FB | 	rdlong	local01, objptr
211f8     B5 E4 05 F1 | 	add	objptr, #181
211fc     F2 26 62 FC | 	wrlong	local01, objptr
21200                 | ' s_cpl:=cpl
21200     94 E4 85 F1 | 	sub	objptr, #148
21204     F2 26 02 FB | 	rdlong	local01, objptr
21208     90 E4 05 F1 | 	add	objptr, #144
2120c     F2 26 62 FC | 	wrlong	local01, objptr
21210                 | ' s_cpl1:=cpl
21210     90 E4 85 F1 | 	sub	objptr, #144
21214     F2 26 02 FB | 	rdlong	local01, objptr
21218     98 E4 05 F1 | 	add	objptr, #152
2121c     F2 26 62 FC | 	wrlong	local01, objptr
21220                 | ' st_lines:=t_lines
21220     0C E4 05 F1 | 	add	objptr, #12
21224     F2 26 02 FB | 	rdlong	local01, objptr
21228     04 E4 05 F1 | 	add	objptr, #4
2122c     F2 26 62 FC | 	wrlong	local01, objptr
21230                 | ' ppl:=ppl/xzoom  
21230     28 E4 85 F1 | 	sub	objptr, #40
21234     F2 88 02 FB | 	rdlong	muldiva_, objptr
21238     2C E4 05 F1 | 	add	objptr, #44
2123c     F2 8A 02 FB | 	rdlong	muldivb_, objptr
21240     05 E5 85 F1 | 	sub	objptr, #261
21244     BA 00 A0 FD | 	call	#divide_
21248     D9 E4 05 F1 | 	add	objptr, #217
2124c     F2 8A 62 FC | 	wrlong	muldivb_, objptr
21250                 | ' s_ppl:=ppl
21250     1C E4 05 F1 | 	add	objptr, #28
21254     F2 8A 62 FC | 	wrlong	muldivb_, objptr
21258     F5 E4 85 F1 | 	sub	objptr, #245
2125c                 | ' waitms(20)							' wait 
2125c     14 12 06 F6 | 	mov	arg01, #20
21260     A4 2D B0 FD | 	call	#__system___waitms
21264                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21264     04 E4 05 F1 | 	add	objptr, #4
21268     F2 12 02 FB | 	rdlong	arg01, objptr
2126c     04 E4 85 F1 | 	sub	objptr, #4
21270     F2 16 02 FB | 	rdlong	arg03, objptr
21274     09 17 82 F1 | 	sub	arg03, arg01
21278     20 14 06 F6 | 	mov	arg02, #32
2127c     00 18 06 F6 | 	mov	arg04, #0
21280     01 1A 06 F6 | 	mov	arg05, #1
21284     0B 00 00 FF 
21288     CC E4 05 F1 | 	add	objptr, ##5836
2128c     7C 1F B0 FD | 	call	#_psram_spin2_fill
21290     0B 00 00 FF 
21294     CC E4 85 F1 | 	sub	objptr, ##5836
21298     A7 F0 03 F6 | 	mov	ptra, fp
2129c     B2 00 A0 FD | 	call	#popregs_
212a0                 | _hg010b_spin2_setmode_ret
212a0     2D 00 64 FD | 	ret
212a4                 | 
212a4                 | ' 
212a4                 | ' '****************************************************************************************************************
212a4                 | ' '                                                                                                             	*
212a4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
212a4                 | ' '                                                                                                             	*
212a4                 | ' '****************************************************************************************************************
212a4                 | ' 
212a4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
212a4                 | _hg010b_spin2_makedl
212a4                 | ' 
212a4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
212a4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
212a4                 | ' repeat i from 0 to 11                                                           ' clear DL
212a4     00 00 06 F6 | 	mov	_var01, #0
212a8     ED E5 05 F1 | 	add	objptr, #493
212ac     97 0E 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
212b0                 | LR__2590
212b0                 | '   displaylist[i]:=0 
212b0     00 03 02 F6 | 	mov	_var02, _var01
212b4     02 02 66 F0 | 	shl	_var02, #2
212b8     F2 02 02 F1 | 	add	_var02, objptr
212bc     01 01 68 FC | 	wrlong	#0, _var02
212c0     01 00 06 F1 | 	add	_var01, #1
212c4     0C 00 56 F2 | 	cmps	_var01, #12 wc
212c8     E4 FF 9F CD |  if_b	jmp	#LR__2590
212cc                 | LR__2591
212cc                 | '                         ' 
212cc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
212cc     8C E5 85 F1 | 	sub	objptr, #396
212d0     F2 02 02 FB | 	rdlong	_var02, objptr
212d4     14 02 66 F0 | 	shl	_var02, #20
212d8     01 02 06 F1 | 	add	_var02, #1
212dc     04 E4 85 F1 | 	sub	objptr, #4
212e0     F2 00 02 FB | 	rdlong	_var01, objptr
212e4     02 00 66 F0 | 	shl	_var01, #2
212e8     04 00 66 F0 | 	shl	_var01, #4
212ec     00 03 02 F1 | 	add	_var02, _var01
212f0     90 E5 05 F1 | 	add	objptr, #400
212f4     F2 02 62 FC | 	wrlong	_var02, objptr
212f8     ED E5 85 F1 | 	sub	objptr, #493
212fc                 | ' displaylist[1]:=buf_ptr<<4+%10  
212fc     F2 02 02 FB | 	rdlong	_var02, objptr
21300     04 02 66 F0 | 	shl	_var02, #4
21304     02 02 06 F1 | 	add	_var02, #2
21308     F1 E5 05 F1 | 	add	objptr, #497
2130c     F2 02 62 FC | 	wrlong	_var02, objptr
21310                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
21310     04 E4 85 F1 | 	sub	objptr, #4
21314     F2 02 02 F6 | 	mov	_var02, objptr
21318     CD E5 85 F1 | 	sub	objptr, #461
2131c     F2 02 62 FC | 	wrlong	_var02, objptr
21320     20 E4 85 F1 | 	sub	objptr, #32
21324                 | _hg010b_spin2_makedl_ret
21324     2D 00 64 FD | 	ret
21328                 | 
21328                 | ' 
21328                 | ' 
21328                 | ' '****************************************************************************************************************
21328                 | ' '                                                                        					*
21328                 | ' '  Graphic primitives                                                    					*
21328                 | ' '                                                                        					*
21328                 | ' '****************************************************************************************************************
21328                 | ' 
21328                 | ' pub setspriteptr(num,ptr)
21328                 | _hg010b_spin2_setspriteptr
21328                 | ' long[@spr1ptr+12*num]:=ptr
21328     11 E5 05 F1 | 	add	objptr, #273
2132c     F2 00 02 F6 | 	mov	_var01, objptr
21330     09 03 02 F6 | 	mov	_var02, arg01
21334     01 02 66 F0 | 	shl	_var02, #1
21338     09 03 02 F1 | 	add	_var02, arg01
2133c     02 02 66 F0 | 	shl	_var02, #2
21340     01 01 02 F1 | 	add	_var01, _var02
21344     00 15 62 FC | 	wrlong	arg02, _var01
21348     11 E5 85 F1 | 	sub	objptr, #273
2134c                 | _hg010b_spin2_setspriteptr_ret
2134c     2D 00 64 FD | 	ret
21350                 | 
21350                 | ' 
21350                 | ' pub setspritepos(num,x,y)
21350                 | _hg010b_spin2_setspritepos
21350                 | ' if y>601
21350     01 00 00 FF 
21354     5A 16 56 F2 | 	cmps	arg03, ##602 wc
21358                 | '   y:=601
21358     01 00 00 3F 
2135c     59 16 06 36 |  if_ae	mov	arg03, ##601
21360                 | ' if x>1024
21360     02 00 00 FF 
21364     01 14 56 F2 | 	cmps	arg02, ##1025 wc
21368                 | '   x:=1024
21368     0A 14 C6 39 |  if_ae	decod	arg02, #10
2136c                 | ' word[@spr1ptr+12*num+4]:=x
2136c     11 E5 05 F1 | 	add	objptr, #273
21370     F2 00 02 F6 | 	mov	_var01, objptr
21374     09 03 02 F6 | 	mov	_var02, arg01
21378     01 02 66 F0 | 	shl	_var02, #1
2137c     09 03 02 F1 | 	add	_var02, arg01
21380     02 02 66 F0 | 	shl	_var02, #2
21384     01 01 02 F1 | 	add	_var01, _var02
21388     04 00 06 F1 | 	add	_var01, #4
2138c     00 15 52 FC | 	wrword	arg02, _var01
21390                 | ' word[@spr1ptr+12*num+6]:=y
21390     F2 00 02 F6 | 	mov	_var01, objptr
21394     09 03 02 F6 | 	mov	_var02, arg01
21398     01 02 66 F0 | 	shl	_var02, #1
2139c     09 03 02 F1 | 	add	_var02, arg01
213a0     02 02 66 F0 | 	shl	_var02, #2
213a4     01 01 02 F1 | 	add	_var01, _var02
213a8     06 00 06 F1 | 	add	_var01, #6
213ac     00 17 52 FC | 	wrword	arg03, _var01
213b0     11 E5 85 F1 | 	sub	objptr, #273
213b4                 | _hg010b_spin2_setspritepos_ret
213b4     2D 00 64 FD | 	ret
213b8                 | 
213b8                 | ' 
213b8                 | ' pub setspritesize(num,w,h)
213b8                 | _hg010b_spin2_setspritesize
213b8                 | ' word[@spr1ptr+12*num+8]:=w
213b8     11 E5 05 F1 | 	add	objptr, #273
213bc     F2 00 02 F6 | 	mov	_var01, objptr
213c0     09 03 02 F6 | 	mov	_var02, arg01
213c4     01 02 66 F0 | 	shl	_var02, #1
213c8     09 03 02 F1 | 	add	_var02, arg01
213cc     02 02 66 F0 | 	shl	_var02, #2
213d0     01 01 02 F1 | 	add	_var01, _var02
213d4     08 00 06 F1 | 	add	_var01, #8
213d8     00 15 52 FC | 	wrword	arg02, _var01
213dc                 | ' word[@spr1ptr+12*num+10]:=h
213dc     F2 00 02 F6 | 	mov	_var01, objptr
213e0     09 03 02 F6 | 	mov	_var02, arg01
213e4     01 02 66 F0 | 	shl	_var02, #1
213e8     09 03 02 F1 | 	add	_var02, arg01
213ec     02 02 66 F0 | 	shl	_var02, #2
213f0     01 01 02 F1 | 	add	_var01, _var02
213f4     0A 00 06 F1 | 	add	_var01, #10
213f8     00 17 52 FC | 	wrword	arg03, _var01
213fc     11 E5 85 F1 | 	sub	objptr, #273
21400                 | _hg010b_spin2_setspritesize_ret
21400     2D 00 64 FD | 	ret
21404                 | 
21404                 | ' 
21404                 | ' 
21404                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
21404                 | ' 
21404                 | ' 
21404                 | ' pub putpixel(x,y,c)
21404                 | _hg010b_spin2_putpixel
21404     04 4A 05 F6 | 	mov	COUNT_, #4
21408     A8 00 A0 FD | 	call	#pushregs_
2140c     09 27 02 F6 | 	mov	local01, arg01
21410                 | ' 
21410                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
21410     00 28 06 F6 | 	mov	local02, #0
21414     00 26 56 F2 | 	cmps	local01, #0 wc
21418     01 28 66 36 |  if_ae	neg	local02, #1
2141c     E9 E4 05 F1 | 	add	objptr, #233
21420     F2 1A 02 FB | 	rdlong	arg05, objptr
21424     02 1A 66 F0 | 	shl	arg05, #2
21428     0D 27 52 F2 | 	cmps	local01, arg05 wc
2142c     15 2B A2 F1 | 	subx	local03, local03
21430     15 29 02 F5 | 	and	local02, local03
21434     00 2A 06 F6 | 	mov	local03, #0
21438     00 14 56 F2 | 	cmps	arg02, #0 wc
2143c     01 2A 66 36 |  if_ae	neg	local03, #1
21440     15 29 02 F5 | 	and	local02, local03
21444     04 E4 85 F1 | 	sub	objptr, #4
21448     F2 2A 02 FB | 	rdlong	local03, objptr
2144c     E5 E4 85 F1 | 	sub	objptr, #229
21450     15 15 52 F2 | 	cmps	arg02, local03 wc
21454     16 2D A2 F1 | 	subx	local04, local04
21458     16 29 CA F7 | 	test	local02, local04 wz
2145c     48 00 90 AD |  if_e	jmp	#LR__2600
21460     DD E4 05 F1 | 	add	objptr, #221
21464     F2 12 02 FB | 	rdlong	arg01, objptr
21468     14 E4 05 F1 | 	add	objptr, #20
2146c     F2 2C 02 FB | 	rdlong	local04, objptr
21470     02 2C 66 F0 | 	shl	local04, #2
21474     0A 2D 02 FD | 	qmul	local04, arg02
21478                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
21478     0B 15 02 F6 | 	mov	arg02, arg03
2147c     01 16 06 F6 | 	mov	arg03, #1
21480     00 18 06 F6 | 	mov	arg04, #0
21484     01 1A 06 F6 | 	mov	arg05, #1
21488     0A 00 00 FF 
2148c     DB E5 05 F1 | 	add	objptr, ##5595
21490     18 2C 62 FD | 	getqx	local04
21494     13 2D 02 F1 | 	add	local04, local01
21498     16 13 02 F1 | 	add	arg01, local04
2149c     6C 1D B0 FD | 	call	#_psram_spin2_fill
214a0     0B 00 00 FF 
214a4     CC E4 85 F1 | 	sub	objptr, ##5836
214a8                 | LR__2600
214a8     A7 F0 03 F6 | 	mov	ptra, fp
214ac     B2 00 A0 FD | 	call	#popregs_
214b0                 | _hg010b_spin2_putpixel_ret
214b0     2D 00 64 FD | 	ret
214b4                 | 
214b4                 | ' 
214b4                 | ' pub putpixel2(x,y,c)
214b4                 | _hg010b_spin2_putpixel2
214b4     02 4A 05 F6 | 	mov	COUNT_, #2
214b8     A8 00 A0 FD | 	call	#pushregs_
214bc     DD E4 05 F1 | 	add	objptr, #221
214c0     F2 26 02 FB | 	rdlong	local01, objptr
214c4     14 E4 05 F1 | 	add	objptr, #20
214c8     F2 1A 02 FB | 	rdlong	arg05, objptr
214cc     02 1A 66 F0 | 	shl	arg05, #2
214d0     0A 1B 02 FD | 	qmul	arg05, arg02
214d4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
214d4     0B 15 02 F6 | 	mov	arg02, arg03
214d8     01 16 06 F6 | 	mov	arg03, #1
214dc     00 18 06 F6 | 	mov	arg04, #0
214e0     01 1A 06 F6 | 	mov	arg05, #1
214e4     0A 00 00 FF 
214e8     DB E5 05 F1 | 	add	objptr, ##5595
214ec     18 28 62 FD | 	getqx	local02
214f0     09 29 02 F1 | 	add	local02, arg01
214f4     14 27 02 F1 | 	add	local01, local02
214f8     13 13 02 F6 | 	mov	arg01, local01
214fc     0C 1D B0 FD | 	call	#_psram_spin2_fill
21500     0B 00 00 FF 
21504     CC E4 85 F1 | 	sub	objptr, ##5836
21508     A7 F0 03 F6 | 	mov	ptra, fp
2150c     B2 00 A0 FD | 	call	#popregs_
21510                 | _hg010b_spin2_putpixel2_ret
21510     2D 00 64 FD | 	ret
21514                 | 
21514                 | ' 
21514                 | ' pub getpixel2(x,y): c 
21514                 | _hg010b_spin2_getpixel2
21514     02 4A 05 F6 | 	mov	COUNT_, #2
21518     A8 00 A0 FD | 	call	#pushregs_
2151c     0C F0 07 F1 | 	add	ptra, #12
21520     04 4E 05 F1 | 	add	fp, #4
21524     A7 12 62 FC | 	wrlong	arg01, fp
21528     04 4E 05 F1 | 	add	fp, #4
2152c     A7 14 62 FC | 	wrlong	arg02, fp
21530     08 4E 85 F1 | 	sub	fp, #8
21534     A7 00 68 FC | 	wrlong	#0, fp
21538     A7 12 02 F6 | 	mov	arg01, fp
2153c     DD E4 05 F1 | 	add	objptr, #221
21540     F2 14 02 FB | 	rdlong	arg02, objptr
21544     14 E4 05 F1 | 	add	objptr, #20
21548     F2 16 02 FB | 	rdlong	arg03, objptr
2154c     02 16 66 F0 | 	shl	arg03, #2
21550     08 4E 05 F1 | 	add	fp, #8
21554     A7 FA 01 FB | 	rdlong	result1, fp
21558     FD 16 02 FD | 	qmul	arg03, result1
2155c                 | ' 
2155c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
2155c     04 4E 85 F1 | 	sub	fp, #4
21560     A7 26 02 FB | 	rdlong	local01, fp
21564     04 4E 85 F1 | 	sub	fp, #4
21568     01 16 06 F6 | 	mov	arg03, #1
2156c     0A 00 00 FF 
21570     DB E5 05 F1 | 	add	objptr, ##5595
21574     18 28 62 FD | 	getqx	local02
21578     13 29 02 F1 | 	add	local02, local01
2157c     14 15 02 F1 | 	add	arg02, local02
21580     50 1B B0 FD | 	call	#_psram_spin2_read1
21584     0B 00 00 FF 
21588     CC E4 85 F1 | 	sub	objptr, ##5836
2158c                 | ' return c
2158c     A7 FA 01 FB | 	rdlong	result1, fp
21590     A7 F0 03 F6 | 	mov	ptra, fp
21594     B2 00 A0 FD | 	call	#popregs_
21598                 | _hg010b_spin2_getpixel2_ret
21598     2D 00 64 FD | 	ret
2159c                 | 
2159c                 | '   
2159c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
2159c                 | ' 
2159c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
2159c                 | _hg010b_spin2_fastline
2159c     02 4A 05 F6 | 	mov	COUNT_, #2
215a0     A8 00 A0 FD | 	call	#pushregs_
215a4     09 27 02 F6 | 	mov	local01, arg01
215a8     0A 29 02 F6 | 	mov	local02, arg02
215ac                 | ' 
215ac                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
215ac     00 16 56 F2 | 	cmps	arg03, #0 wc
215b0     F4 00 90 CD |  if_b	jmp	#LR__2610
215b4     01 00 00 FF 
215b8     2A E4 05 F1 | 	add	objptr, ##554
215bc     F2 1A 02 FB | 	rdlong	arg05, objptr
215c0     01 00 00 FF 
215c4     2A E4 85 F1 | 	sub	objptr, ##554
215c8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
215cc     D8 00 90 3D |  if_ae	jmp	#LR__2610
215d0     00 26 56 F2 | 	cmps	local01, #0 wc
215d4     00 28 56 C2 |  if_b	cmps	local02, #0 wc
215d8     CC 00 90 CD |  if_b	jmp	#LR__2610
215dc     01 00 00 FF 
215e0     26 E4 05 F1 | 	add	objptr, ##550
215e4     F2 1A 02 FB | 	rdlong	arg05, objptr
215e8     01 00 00 FF 
215ec     26 E4 85 F1 | 	sub	objptr, ##550
215f0     0D 27 5A F2 | 	cmps	local01, arg05 wcz
215f4     01 00 00 1F 
215f8     26 E4 05 11 |  if_a	add	objptr, ##550
215fc     F2 12 02 1B |  if_a	rdlong	arg01, objptr
21600     01 00 00 1F 
21604     26 E4 85 11 |  if_a	sub	objptr, ##550
21608     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
2160c                 | '   return
2160c     98 00 90 1D |  if_a	jmp	#LR__2610
21610     14 27 5A F2 | 	cmps	local01, local02 wcz
21614     13 1B 02 16 |  if_a	mov	arg05, local01
21618     14 27 02 16 |  if_a	mov	local01, local02
2161c     0D 29 02 16 |  if_a	mov	local02, arg05
21620     00 26 56 F2 | 	cmps	local01, #0 wc
21624     00 26 06 C6 |  if_b	mov	local01, #0
21628     01 00 00 FF 
2162c     26 E4 05 F1 | 	add	objptr, ##550
21630     F2 1A 02 FB | 	rdlong	arg05, objptr
21634     01 00 00 FF 
21638     26 E4 85 F1 | 	sub	objptr, ##550
2163c     0D 29 52 F2 | 	cmps	local02, arg05 wc
21640     01 00 00 3F 
21644     26 E4 05 31 |  if_ae	add	objptr, ##550
21648     F2 28 02 3B |  if_ae	rdlong	local02, objptr
2164c     01 00 00 3F 
21650     26 E4 85 31 |  if_ae	sub	objptr, ##550
21654     DD E4 05 F1 | 	add	objptr, #221
21658     F2 12 02 FB | 	rdlong	arg01, objptr
2165c     14 E4 05 F1 | 	add	objptr, #20
21660     F2 1A 02 FB | 	rdlong	arg05, objptr
21664     02 1A 66 F0 | 	shl	arg05, #2
21668     0B 1B 02 FD | 	qmul	arg05, arg03
2166c                 | ' if x1>x2
2166c                 | '   x1,x2:=x2,x1
2166c                 | ' if x1<0 
2166c                 | '   x1:=0
2166c                 | ' if x2>=xres
2166c                 | '   x2:=xres-1  
2166c     01 28 86 31 |  if_ae	sub	local02, #1
21670                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
21670     01 16 06 F6 | 	mov	arg03, #1
21674     14 17 02 F1 | 	add	arg03, local02
21678     13 17 82 F1 | 	sub	arg03, local01
2167c     0C 15 02 F6 | 	mov	arg02, arg04
21680     00 18 06 F6 | 	mov	arg04, #0
21684     01 1A 06 F6 | 	mov	arg05, #1
21688     0A 00 00 FF 
2168c     DB E5 05 F1 | 	add	objptr, ##5595
21690     18 28 62 FD | 	getqx	local02
21694     13 29 02 F1 | 	add	local02, local01
21698     14 13 02 F1 | 	add	arg01, local02
2169c     6C 1B B0 FD | 	call	#_psram_spin2_fill
216a0     0B 00 00 FF 
216a4     CC E4 85 F1 | 	sub	objptr, ##5836
216a8                 | LR__2610
216a8     A7 F0 03 F6 | 	mov	ptra, fp
216ac     B2 00 A0 FD | 	call	#popregs_
216b0                 | _hg010b_spin2_fastline_ret
216b0     2D 00 64 FD | 	ret
216b4                 | 
216b4                 | ' 
216b4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
216b4                 | _hg010b_spin2_draw
216b4     0E 4A 05 F6 | 	mov	COUNT_, #14
216b8     A8 00 A0 FD | 	call	#pushregs_
216bc     09 27 02 F6 | 	mov	local01, arg01
216c0     0A 29 02 F6 | 	mov	local02, arg02
216c4     0B 2B 02 F6 | 	mov	local03, arg03
216c8     0C 2D 02 F6 | 	mov	local04, arg04
216cc     0D 2F 02 F6 | 	mov	local05, arg05
216d0                 | ' 
216d0                 | ' if (y1==y2)
216d0     16 29 0A F2 | 	cmp	local02, local04 wz
216d4     18 00 90 5D |  if_ne	jmp	#LR__2620
216d8                 | '   fastline(x1,x2,y1,c)
216d8     13 13 02 F6 | 	mov	arg01, local01
216dc     15 15 02 F6 | 	mov	arg02, local03
216e0     14 17 02 F6 | 	mov	arg03, local02
216e4     17 19 02 F6 | 	mov	arg04, local05
216e8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
216ec     F8 00 90 FD | 	jmp	#LR__2626
216f0                 | LR__2620
216f0                 | ' else  
216f0                 | '   x:=x1
216f0     13 31 02 F6 | 	mov	local06, local01
216f4                 | '   y:=y1
216f4     14 33 02 F6 | 	mov	local07, local02
216f8                 | ' 
216f8                 | '   if (x1<x2) 
216f8     15 27 52 F2 | 	cmps	local01, local03 wc
216fc                 | '     xi:=1
216fc     01 34 06 C6 |  if_b	mov	local08, #1
21700                 | '     dx:=x2-x1
21700     15 37 02 C6 |  if_b	mov	local09, local03
21704     13 37 82 C1 |  if_b	sub	local09, local01
21708                 | '   else
21708                 | '     xi:=-1
21708     01 34 66 36 |  if_ae	neg	local08, #1
2170c                 | '     dx:=x1-x2
2170c     15 27 82 31 |  if_ae	sub	local01, local03
21710     13 37 02 36 |  if_ae	mov	local09, local01
21714                 | '   
21714                 | '   if (y1<y2) 
21714     16 29 52 F2 | 	cmps	local02, local04 wc
21718                 | '     yi:=1
21718     01 38 06 C6 |  if_b	mov	local10, #1
2171c                 | '     dy:=y2-y1
2171c     16 3B 02 C6 |  if_b	mov	local11, local04
21720     14 3B 82 C1 |  if_b	sub	local11, local02
21724                 | '   else
21724                 | '     yi:=-1
21724     01 38 66 36 |  if_ae	neg	local10, #1
21728                 | '     dy:=y1-y2
21728     16 29 82 31 |  if_ae	sub	local02, local04
2172c     14 3B 02 36 |  if_ae	mov	local11, local02
21730                 | ' 
21730                 | '   putpixel(x,y,c)
21730     17 17 02 F6 | 	mov	arg03, local05
21734     18 13 02 F6 | 	mov	arg01, local06
21738     19 15 02 F6 | 	mov	arg02, local07
2173c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
21740                 | ' 
21740                 | '   if (dx>dy)
21740     1D 37 5A F2 | 	cmps	local09, local11 wcz
21744     50 00 90 ED |  if_be	jmp	#LR__2622
21748                 | '     ai:=(dy-dx)*2
21748     1D 3D 02 F6 | 	mov	local12, local11
2174c     1B 3D 82 F1 | 	sub	local12, local09
21750     01 3C 66 F0 | 	shl	local12, #1
21754                 | '     bi:=dy*2
21754     01 3A 66 F0 | 	shl	local11, #1
21758     1D 3F 02 F6 | 	mov	local13, local11
2175c                 | '     d:= bi-dx
2175c     1F 41 02 F6 | 	mov	local14, local13
21760     1B 41 82 F1 | 	sub	local14, local09
21764                 | '     repeat while (x<>x2) 
21764                 | LR__2621
21764     15 31 0A F2 | 	cmp	local06, local03 wz
21768     7C 00 90 AD |  if_e	jmp	#LR__2625
2176c                 | '       if (d>=0) 
2176c     00 40 56 F2 | 	cmps	local14, #0 wc
21770                 | '         x+=xi
21770     1A 31 02 31 |  if_ae	add	local06, local08
21774                 | '         y+=yi
21774     1C 33 02 31 |  if_ae	add	local07, local10
21778                 | '         d+=ai
21778     1E 41 02 31 |  if_ae	add	local14, local12
2177c                 | '       else
2177c                 | '         d+=bi
2177c     1F 41 02 C1 |  if_b	add	local14, local13
21780                 | '         x+=xi
21780     1A 31 02 C1 |  if_b	add	local06, local08
21784                 | '       putpixel(x,y,c)
21784     18 13 02 F6 | 	mov	arg01, local06
21788     19 15 02 F6 | 	mov	arg02, local07
2178c     17 17 02 F6 | 	mov	arg03, local05
21790     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
21794     CC FF 9F FD | 	jmp	#LR__2621
21798                 | LR__2622
21798                 | '   else
21798                 | '     ai:=(dx-dy)*2
21798     1B 3D 02 F6 | 	mov	local12, local09
2179c     1D 3D 82 F1 | 	sub	local12, local11
217a0     01 3C 66 F0 | 	shl	local12, #1
217a4                 | '     bi:=dx*2
217a4     01 36 66 F0 | 	shl	local09, #1
217a8     1B 3F 02 F6 | 	mov	local13, local09
217ac                 | '     d:=bi-dy
217ac     1F 41 02 F6 | 	mov	local14, local13
217b0     1D 41 82 F1 | 	sub	local14, local11
217b4                 | '     repeat while (y<>y2)
217b4                 | LR__2623
217b4     16 33 0A F2 | 	cmp	local07, local04 wz
217b8     2C 00 90 AD |  if_e	jmp	#LR__2624
217bc                 | '       if (d>=0)
217bc     00 40 56 F2 | 	cmps	local14, #0 wc
217c0                 | '         x+=xi
217c0     1A 31 02 31 |  if_ae	add	local06, local08
217c4                 | '         y+=yi
217c4     1C 33 02 31 |  if_ae	add	local07, local10
217c8                 | '         d+=ai
217c8     1E 41 02 31 |  if_ae	add	local14, local12
217cc                 | '       else
217cc                 | '         d+=bi
217cc     1F 41 02 C1 |  if_b	add	local14, local13
217d0                 | '         y+=yi
217d0     1C 33 02 C1 |  if_b	add	local07, local10
217d4                 | '       putpixel(x, y,c)
217d4     18 13 02 F6 | 	mov	arg01, local06
217d8     19 15 02 F6 | 	mov	arg02, local07
217dc     17 17 02 F6 | 	mov	arg03, local05
217e0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
217e4     CC FF 9F FD | 	jmp	#LR__2623
217e8                 | LR__2624
217e8                 | LR__2625
217e8                 | LR__2626
217e8     A7 F0 03 F6 | 	mov	ptra, fp
217ec     B2 00 A0 FD | 	call	#popregs_
217f0                 | _hg010b_spin2_draw_ret
217f0     2D 00 64 FD | 	ret
217f4                 | 
217f4                 | '  
217f4                 | ' pub fillpush(val) 
217f4                 | _hg010b_spin2_fillpush
217f4                 | ' fillstack[fillptr]:=val
217f4     0B 00 00 FF 
217f8     BA E4 05 F1 | 	add	objptr, ##5818
217fc     F2 00 02 FB | 	rdlong	_var01, objptr
21800     02 00 66 F0 | 	shl	_var01, #2
21804     0A 00 00 FF 
21808     00 E4 85 F1 | 	sub	objptr, ##5120
2180c     F2 00 02 F1 | 	add	_var01, objptr
21810     00 13 62 FC | 	wrlong	arg01, _var01
21814                 | ' fillptr+=1   
21814     0A 00 00 FF 
21818     00 E4 05 F1 | 	add	objptr, ##5120
2181c     F2 00 02 FB | 	rdlong	_var01, objptr
21820     01 00 06 F1 | 	add	_var01, #1
21824     F2 00 62 FC | 	wrlong	_var01, objptr
21828     0B 00 00 FF 
2182c     BA E4 85 F1 | 	sub	objptr, ##5818
21830                 | _hg010b_spin2_fillpush_ret
21830     2D 00 64 FD | 	ret
21834                 | 
21834                 | ' 
21834                 | '     
21834                 | ' pub fillpop() : val
21834                 | _hg010b_spin2_fillpop
21834                 | ' 
21834                 | ' fillptr-=1
21834     0B 00 00 FF 
21838     BA E4 05 F1 | 	add	objptr, ##5818
2183c     F2 FA 01 FB | 	rdlong	result1, objptr
21840     01 FA 85 F1 | 	sub	result1, #1
21844     F2 FA 61 FC | 	wrlong	result1, objptr
21848                 | ' if fillptr<0
21848     0B 00 00 FF 
2184c     BA E4 85 F1 | 	sub	objptr, ##5818
21850     00 FA 55 F2 | 	cmps	result1, #0 wc
21854                 | '   fillptr:=0
21854     0B 00 00 CF 
21858     BA E4 05 C1 |  if_b	add	objptr, ##5818
2185c     F2 00 68 CC |  if_b	wrlong	#0, objptr
21860     0B 00 00 CF 
21864     BA E4 85 C1 |  if_b	sub	objptr, ##5818
21868                 | '   val:=-12345
21868     E7 FF 7F CF 
2186c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
21870     28 00 90 CD |  if_b	jmp	#LR__2630
21874                 | ' else 
21874                 | '   val:=fillstack[fillptr]
21874     0B 00 00 FF 
21878     BA E4 05 F1 | 	add	objptr, ##5818
2187c     F2 00 02 FB | 	rdlong	_var01, objptr
21880     02 00 66 F0 | 	shl	_var01, #2
21884     0A 00 00 FF 
21888     00 E4 85 F1 | 	sub	objptr, ##5120
2188c     F2 00 02 F1 | 	add	_var01, objptr
21890     00 01 02 FB | 	rdlong	_var01, _var01
21894     01 00 00 FF 
21898     BA E4 85 F1 | 	sub	objptr, ##698
2189c                 | LR__2630
2189c                 | ' return val
2189c     00 FB 01 F6 | 	mov	result1, _var01
218a0                 | _hg010b_spin2_fillpop_ret
218a0     2D 00 64 FD | 	ret
218a4                 | 
218a4                 | ' 
218a4                 | '       
218a4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
218a4                 | _hg010b_spin2_fill
218a4     0B 4A 05 F6 | 	mov	COUNT_, #11
218a8     A8 00 A0 FD | 	call	#pushregs_
218ac                 | ' 
218ac                 | ' newcolor:=newcolor & 255
218ac     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
218b0                 | ' oldcolor:=oldcolor & 255
218b0     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
218b4                 | ' 
218b4                 | ' if (oldcolor == newcolor) 
218b4     13 29 0A F2 | 	cmp	local02, local01 wz
218b8                 | '   return
218b8     70 02 90 AD |  if_e	jmp	#LR__2649
218bc                 | ' 
218bc                 | ' fillptr:=0
218bc     0B 00 00 FF 
218c0     BA E4 05 F1 | 	add	objptr, ##5818
218c4     F2 00 68 FC | 	wrlong	#0, objptr
218c8                 | ' fillmax:=0
218c8     04 E4 05 F1 | 	add	objptr, #4
218cc     F2 00 68 FC | 	wrlong	#0, objptr
218d0     0B 00 00 FF 
218d4     BE E4 85 F1 | 	sub	objptr, ##5822
218d8                 | ' fillpush(x)
218d8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
218dc                 | ' fillpush(y)
218dc     0A 13 02 F6 | 	mov	arg01, arg02
218e0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
218e4                 | ' y:=fillpop()
218e4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
218e8     FD 2A 02 F6 | 	mov	local03, result1
218ec                 | ' x:=fillpop()
218ec     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
218f0     FD 2C 02 F6 | 	mov	local04, result1
218f4                 | ' 'pinhigh(38)
218f4                 | ' repeat while (x>-1)       
218f4                 | LR__2640
218f4     00 2C 56 F2 | 	cmps	local04, #0 wc
218f8     30 02 90 CD |  if_b	jmp	#LR__2648
218fc                 | '  ' pintoggle(39)
218fc                 | '   x1 := x
218fc     16 2F 02 F6 | 	mov	local05, local04
21900                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
21900                 | LR__2641
21900     00 30 06 F6 | 	mov	local06, #0
21904     00 32 06 F6 | 	mov	local07, #0
21908     00 2E 56 F2 | 	cmps	local05, #0 wc
2190c     01 32 66 36 |  if_ae	neg	local07, #1
21910     00 32 0E F2 | 	cmp	local07, #0 wz
21914     00 30 26 56 |  if_ne	not	local06, #0
21918     00 34 06 F6 | 	mov	local08, #0
2191c     00 36 06 F6 | 	mov	local09, #0
21920     15 15 02 F6 | 	mov	arg02, local03
21924     17 13 02 F6 | 	mov	arg01, local05
21928     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
2192c     14 FB 09 F2 | 	cmp	result1, local02 wz
21930     00 36 26 A6 |  if_e	not	local09, #0
21934     00 36 0E F2 | 	cmp	local09, #0 wz
21938     00 34 26 56 |  if_ne	not	local08, #0
2193c     1A 31 CA F7 | 	test	local06, local08 wz
21940                 | '     x1--
21940     01 2E 86 51 |  if_ne	sub	local05, #1
21944     B8 FF 9F 5D |  if_ne	jmp	#LR__2641
21948                 | '   x1++
21948     01 2E 06 F1 | 	add	local05, #1
2194c                 | '   spanabove := 0
2194c     00 38 06 F6 | 	mov	local10, #0
21950                 | '   spanbelow := 0
21950     00 3A 06 F6 | 	mov	local11, #0
21954                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
21954                 | LR__2642
21954     00 30 06 F6 | 	mov	local06, #0
21958     02 00 00 FF 
2195c     00 2E 56 F2 | 	cmps	local05, ##1024 wc
21960     00 30 26 C6 |  if_b	not	local06, #0
21964     00 34 06 F6 | 	mov	local08, #0
21968     00 36 06 F6 | 	mov	local09, #0
2196c     15 15 02 F6 | 	mov	arg02, local03
21970     17 13 02 F6 | 	mov	arg01, local05
21974     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
21978     14 FB 09 F2 | 	cmp	result1, local02 wz
2197c     00 36 26 A6 |  if_e	not	local09, #0
21980     00 36 0E F2 | 	cmp	local09, #0 wz
21984     00 34 26 56 |  if_ne	not	local08, #0
21988     1A 31 CA F7 | 	test	local06, local08 wz
2198c     88 01 90 AD |  if_e	jmp	#LR__2647
21990                 | '     putpixel2 (x1,y, newcolor & 255)
21990     13 17 E2 F8 | 	getbyte	arg03, local01, #0
21994     17 13 02 F6 | 	mov	arg01, local05
21998     15 15 02 F6 | 	mov	arg02, local03
2199c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
219a0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
219a0     00 30 06 F6 | 	mov	local06, #0
219a4     00 32 06 F6 | 	mov	local07, #0
219a8     00 38 0E F2 | 	cmp	local10, #0 wz
219ac     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
219b0     01 32 66 26 |  if_nc_and_z	neg	local07, #1
219b4     00 32 0E F2 | 	cmp	local07, #0 wz
219b8     00 30 26 56 |  if_ne	not	local06, #0
219bc     00 34 06 F6 | 	mov	local08, #0
219c0     00 36 06 F6 | 	mov	local09, #0
219c4     15 15 02 F6 | 	mov	arg02, local03
219c8     01 14 86 F1 | 	sub	arg02, #1
219cc     17 13 02 F6 | 	mov	arg01, local05
219d0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
219d4     14 FB 09 F2 | 	cmp	result1, local02 wz
219d8     00 36 26 A6 |  if_e	not	local09, #0
219dc     00 36 0E F2 | 	cmp	local09, #0 wz
219e0     00 34 26 56 |  if_ne	not	local08, #0
219e4     1A 31 CA F7 | 	test	local06, local08 wz
219e8     1C 00 90 AD |  if_e	jmp	#LR__2643
219ec                 | '       fillpush(x1)
219ec     17 13 02 F6 | 	mov	arg01, local05
219f0     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
219f4                 | '       fillpush(y-1)
219f4     15 13 02 F6 | 	mov	arg01, local03
219f8     01 12 86 F1 | 	sub	arg01, #1
219fc     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
21a00                 | '       spanabove := 1 
21a00     01 38 06 F6 | 	mov	local10, #1
21a04     4C 00 90 FD | 	jmp	#LR__2644
21a08                 | LR__2643
21a08                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
21a08     00 30 06 F6 | 	mov	local06, #0
21a0c     00 32 06 F6 | 	mov	local07, #0
21a10     00 38 0E F2 | 	cmp	local10, #0 wz
21a14     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
21a18     01 32 66 16 |  if_a	neg	local07, #1
21a1c     00 32 0E F2 | 	cmp	local07, #0 wz
21a20     00 30 26 56 |  if_ne	not	local06, #0
21a24     00 34 06 F6 | 	mov	local08, #0
21a28     00 36 06 F6 | 	mov	local09, #0
21a2c     15 15 02 F6 | 	mov	arg02, local03
21a30     01 14 86 F1 | 	sub	arg02, #1
21a34     17 13 02 F6 | 	mov	arg01, local05
21a38     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
21a3c     14 FB 09 F2 | 	cmp	result1, local02 wz
21a40     00 36 26 56 |  if_ne	not	local09, #0
21a44     00 36 0E F2 | 	cmp	local09, #0 wz
21a48     00 34 26 56 |  if_ne	not	local08, #0
21a4c     1A 31 CA F7 | 	test	local06, local08 wz
21a50                 | '       spanabove := 0 
21a50     00 38 06 56 |  if_ne	mov	local10, #0
21a54                 | LR__2644
21a54                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
21a54     00 30 06 F6 | 	mov	local06, #0
21a58     00 32 06 F6 | 	mov	local07, #0
21a5c     00 3A 0E F2 | 	cmp	local11, #0 wz
21a60     01 00 00 AF 
21a64     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
21a68     01 32 66 86 |  if_c_and_z	neg	local07, #1
21a6c     00 32 0E F2 | 	cmp	local07, #0 wz
21a70     00 30 26 56 |  if_ne	not	local06, #0
21a74     00 34 06 F6 | 	mov	local08, #0
21a78     00 36 06 F6 | 	mov	local09, #0
21a7c     15 15 02 F6 | 	mov	arg02, local03
21a80     01 14 06 F1 | 	add	arg02, #1
21a84     17 13 02 F6 | 	mov	arg01, local05
21a88     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
21a8c     14 FB 09 F2 | 	cmp	result1, local02 wz
21a90     00 36 26 A6 |  if_e	not	local09, #0
21a94     00 36 0E F2 | 	cmp	local09, #0 wz
21a98     00 34 26 56 |  if_ne	not	local08, #0
21a9c     1A 31 CA F7 | 	test	local06, local08 wz
21aa0     1C 00 90 AD |  if_e	jmp	#LR__2645
21aa4                 | '       fillpush(x1)
21aa4     17 13 02 F6 | 	mov	arg01, local05
21aa8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
21aac                 | '       fillpush(y + 1)
21aac     15 13 02 F6 | 	mov	arg01, local03
21ab0     01 12 06 F1 | 	add	arg01, #1
21ab4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
21ab8                 | '       spanBelow := 1
21ab8     01 3A 06 F6 | 	mov	local11, #1
21abc     50 00 90 FD | 	jmp	#LR__2646
21ac0                 | LR__2645
21ac0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
21ac0     00 30 06 F6 | 	mov	local06, #0
21ac4     00 32 06 F6 | 	mov	local07, #0
21ac8     00 3A 0E F2 | 	cmp	local11, #0 wz
21acc     01 00 00 5F 
21ad0     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
21ad4     01 32 66 46 |  if_c_and_nz	neg	local07, #1
21ad8     00 32 0E F2 | 	cmp	local07, #0 wz
21adc     00 30 26 56 |  if_ne	not	local06, #0
21ae0     00 34 06 F6 | 	mov	local08, #0
21ae4     00 36 06 F6 | 	mov	local09, #0
21ae8     15 15 02 F6 | 	mov	arg02, local03
21aec     01 14 06 F1 | 	add	arg02, #1
21af0     17 13 02 F6 | 	mov	arg01, local05
21af4     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
21af8     14 FB 09 F2 | 	cmp	result1, local02 wz
21afc     00 36 26 56 |  if_ne	not	local09, #0
21b00     00 36 0E F2 | 	cmp	local09, #0 wz
21b04     00 34 26 56 |  if_ne	not	local08, #0
21b08     1A 31 CA F7 | 	test	local06, local08 wz
21b0c                 | '       spanbelow := 0
21b0c     00 3A 06 56 |  if_ne	mov	local11, #0
21b10                 | LR__2646
21b10                 | '     x1++
21b10     01 2E 06 F1 | 	add	local05, #1
21b14     3C FE 9F FD | 	jmp	#LR__2642
21b18                 | LR__2647
21b18                 | '   y:=fillpop()
21b18     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
21b1c     FD 2A 02 F6 | 	mov	local03, result1
21b20                 | '   x:=fillpop()
21b20     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
21b24     FD 2C 02 F6 | 	mov	local04, result1
21b28     C8 FD 9F FD | 	jmp	#LR__2640
21b2c                 | LR__2648
21b2c                 | LR__2649
21b2c     A7 F0 03 F6 | 	mov	ptra, fp
21b30     B2 00 A0 FD | 	call	#popregs_
21b34                 | _hg010b_spin2_fill_ret
21b34     2D 00 64 FD | 	ret
21b38                 | 
21b38                 | ' 'pinlow(38)    
21b38                 | ' 
21b38                 | ' '-- A filled circle -----------------------------------------------------
21b38                 | ' 
21b38                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
21b38                 | _hg010b_spin2_fcircle
21b38     08 4A 05 F6 | 	mov	COUNT_, #8
21b3c     A8 00 A0 FD | 	call	#pushregs_
21b40     0B 27 02 F6 | 	mov	local01, arg03
21b44     FF FF 7F FF 
21b48     FE 27 06 FD | 	qmul	local01, ##-2
21b4c     09 29 02 F6 | 	mov	local02, arg01
21b50     0A 2B 02 F6 | 	mov	local03, arg02
21b54     0C 2D 02 F6 | 	mov	local04, arg04
21b58                 | ' 
21b58                 | ' d:=5-4*r
21b58     13 19 02 F6 | 	mov	arg04, local01
21b5c     02 18 66 F0 | 	shl	arg04, #2
21b60     05 2E 06 F6 | 	mov	local05, #5
21b64     0C 2F 82 F1 | 	sub	local05, arg04
21b68                 | ' x:=0
21b68     00 30 06 F6 | 	mov	local06, #0
21b6c                 | ' y:=r
21b6c                 | ' da:=(-2*r+5)*4
21b6c                 | ' db:=3*4
21b6c     0C 32 06 F6 | 	mov	local07, #12
21b70                 | ' repeat while (x<=y) 
21b70     18 34 62 FD | 	getqx	local08
21b74     05 34 06 F1 | 	add	local08, #5
21b78     02 34 66 F0 | 	shl	local08, #2
21b7c                 | LR__2650
21b7c     13 31 5A F2 | 	cmps	local06, local01 wcz
21b80     B4 00 90 1D |  if_a	jmp	#LR__2652
21b84                 | '   fastline(x0-x,x0+x,y0-y,c)
21b84     14 13 02 F6 | 	mov	arg01, local02
21b88     18 13 82 F1 | 	sub	arg01, local06
21b8c     14 15 02 F6 | 	mov	arg02, local02
21b90     18 15 02 F1 | 	add	arg02, local06
21b94     15 17 02 F6 | 	mov	arg03, local03
21b98     13 17 82 F1 | 	sub	arg03, local01
21b9c     16 19 02 F6 | 	mov	arg04, local04
21ba0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
21ba4                 | '   fastline(x0-x,x0+x,y0+y,c)
21ba4     14 13 02 F6 | 	mov	arg01, local02
21ba8     18 13 82 F1 | 	sub	arg01, local06
21bac     14 15 02 F6 | 	mov	arg02, local02
21bb0     18 15 02 F1 | 	add	arg02, local06
21bb4     15 17 02 F6 | 	mov	arg03, local03
21bb8     13 17 02 F1 | 	add	arg03, local01
21bbc     16 19 02 F6 | 	mov	arg04, local04
21bc0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
21bc4                 | '   fastline(x0-y,x0+y,y0-x,c)
21bc4     14 13 02 F6 | 	mov	arg01, local02
21bc8     13 13 82 F1 | 	sub	arg01, local01
21bcc     14 15 02 F6 | 	mov	arg02, local02
21bd0     13 15 02 F1 | 	add	arg02, local01
21bd4     15 17 02 F6 | 	mov	arg03, local03
21bd8     18 17 82 F1 | 	sub	arg03, local06
21bdc     16 19 02 F6 | 	mov	arg04, local04
21be0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
21be4                 | '   fastline(x0-y,x0+y,y0+x,c)
21be4     14 13 02 F6 | 	mov	arg01, local02
21be8     13 13 82 F1 | 	sub	arg01, local01
21bec     14 15 02 F6 | 	mov	arg02, local02
21bf0     13 15 02 F1 | 	add	arg02, local01
21bf4     15 17 02 F6 | 	mov	arg03, local03
21bf8     18 17 02 F1 | 	add	arg03, local06
21bfc     16 19 02 F6 | 	mov	arg04, local04
21c00     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
21c04                 | '   if d>0 
21c04     01 2E 56 F2 | 	cmps	local05, #1 wc
21c08     18 00 90 CD |  if_b	jmp	#LR__2651
21c0c                 | '     d+=da
21c0c     1A 2F 02 F1 | 	add	local05, local08
21c10                 | '     y-=1
21c10     01 26 86 F1 | 	sub	local01, #1
21c14                 | '     x+=1
21c14     01 30 06 F1 | 	add	local06, #1
21c18                 | '     da+=4*4
21c18     10 34 06 F1 | 	add	local08, #16
21c1c                 | '     db+=2*4
21c1c     08 32 06 F1 | 	add	local07, #8
21c20     58 FF 9F FD | 	jmp	#LR__2650
21c24                 | LR__2651
21c24                 | '   else
21c24                 | '     d+=db
21c24     19 2F 02 F1 | 	add	local05, local07
21c28                 | '     x+=1
21c28     01 30 06 F1 | 	add	local06, #1
21c2c                 | '     da+=2*4
21c2c     08 34 06 F1 | 	add	local08, #8
21c30                 | '     db+=2*4
21c30     08 32 06 F1 | 	add	local07, #8
21c34     44 FF 9F FD | 	jmp	#LR__2650
21c38                 | LR__2652
21c38     A7 F0 03 F6 | 	mov	ptra, fp
21c3c     B2 00 A0 FD | 	call	#popregs_
21c40                 | _hg010b_spin2_fcircle_ret
21c40     2D 00 64 FD | 	ret
21c44                 | 
21c44                 | '  
21c44                 | ' '-- A circle ------------------------------------------------------------ 
21c44                 | '  
21c44                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
21c44                 | _hg010b_spin2_circle
21c44     08 4A 05 F6 | 	mov	COUNT_, #8
21c48     A8 00 A0 FD | 	call	#pushregs_
21c4c     0B 27 02 F6 | 	mov	local01, arg03
21c50     FF FF 7F FF 
21c54     FE 27 06 FD | 	qmul	local01, ##-2
21c58     09 29 02 F6 | 	mov	local02, arg01
21c5c     0A 2B 02 F6 | 	mov	local03, arg02
21c60     0C 2D 02 F6 | 	mov	local04, arg04
21c64                 | ' 
21c64                 | '  
21c64                 | ' d:=5-4*r
21c64     13 19 02 F6 | 	mov	arg04, local01
21c68     02 18 66 F0 | 	shl	arg04, #2
21c6c     05 2E 06 F6 | 	mov	local05, #5
21c70     0C 2F 82 F1 | 	sub	local05, arg04
21c74                 | ' x:=0
21c74     00 30 06 F6 | 	mov	local06, #0
21c78                 | ' y:=r
21c78                 | ' da:=(-2*r+5)*4
21c78                 | ' db:=3*4
21c78     0C 32 06 F6 | 	mov	local07, #12
21c7c                 | ' repeat while (x<=y) 
21c7c     18 34 62 FD | 	getqx	local08
21c80     05 34 06 F1 | 	add	local08, #5
21c84     02 34 66 F0 | 	shl	local08, #2
21c88                 | LR__2660
21c88     13 31 5A F2 | 	cmps	local06, local01 wcz
21c8c     F4 00 90 1D |  if_a	jmp	#LR__2662
21c90                 | '   putpixel(x0-x,y0-y,c)
21c90     14 13 02 F6 | 	mov	arg01, local02
21c94     18 13 82 F1 | 	sub	arg01, local06
21c98     15 15 02 F6 | 	mov	arg02, local03
21c9c     13 15 82 F1 | 	sub	arg02, local01
21ca0     16 17 02 F6 | 	mov	arg03, local04
21ca4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
21ca8                 | '   putpixel(x0-x,y0+y,c)
21ca8     14 13 02 F6 | 	mov	arg01, local02
21cac     18 13 82 F1 | 	sub	arg01, local06
21cb0     15 15 02 F6 | 	mov	arg02, local03
21cb4     13 15 02 F1 | 	add	arg02, local01
21cb8     16 17 02 F6 | 	mov	arg03, local04
21cbc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
21cc0                 | '   putpixel(x0+x,y0-y,c)
21cc0     14 13 02 F6 | 	mov	arg01, local02
21cc4     18 13 02 F1 | 	add	arg01, local06
21cc8     15 15 02 F6 | 	mov	arg02, local03
21ccc     13 15 82 F1 | 	sub	arg02, local01
21cd0     16 17 02 F6 | 	mov	arg03, local04
21cd4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
21cd8                 | '   putpixel(x0+x,y0+y,c)
21cd8     14 13 02 F6 | 	mov	arg01, local02
21cdc     18 13 02 F1 | 	add	arg01, local06
21ce0     15 15 02 F6 | 	mov	arg02, local03
21ce4     13 15 02 F1 | 	add	arg02, local01
21ce8     16 17 02 F6 | 	mov	arg03, local04
21cec     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
21cf0                 | '   putpixel(x0-y,y0-x,c)
21cf0     14 13 02 F6 | 	mov	arg01, local02
21cf4     13 13 82 F1 | 	sub	arg01, local01
21cf8     15 15 02 F6 | 	mov	arg02, local03
21cfc     18 15 82 F1 | 	sub	arg02, local06
21d00     16 17 02 F6 | 	mov	arg03, local04
21d04     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
21d08                 | '   putpixel(x0-y,y0+x,c)
21d08     14 13 02 F6 | 	mov	arg01, local02
21d0c     13 13 82 F1 | 	sub	arg01, local01
21d10     15 15 02 F6 | 	mov	arg02, local03
21d14     18 15 02 F1 | 	add	arg02, local06
21d18     16 17 02 F6 | 	mov	arg03, local04
21d1c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
21d20                 | '   putpixel(x0+y,y0-x,c)
21d20     14 13 02 F6 | 	mov	arg01, local02
21d24     13 13 02 F1 | 	add	arg01, local01
21d28     15 15 02 F6 | 	mov	arg02, local03
21d2c     18 15 82 F1 | 	sub	arg02, local06
21d30     16 17 02 F6 | 	mov	arg03, local04
21d34     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
21d38                 | '   putpixel(x0+y,y0+x,c)
21d38     14 13 02 F6 | 	mov	arg01, local02
21d3c     13 13 02 F1 | 	add	arg01, local01
21d40     15 15 02 F6 | 	mov	arg02, local03
21d44     18 15 02 F1 | 	add	arg02, local06
21d48     16 17 02 F6 | 	mov	arg03, local04
21d4c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
21d50                 | '   if d>0 
21d50     01 2E 56 F2 | 	cmps	local05, #1 wc
21d54     18 00 90 CD |  if_b	jmp	#LR__2661
21d58                 | '     d+=da
21d58     1A 2F 02 F1 | 	add	local05, local08
21d5c                 | '     y-=1
21d5c     01 26 86 F1 | 	sub	local01, #1
21d60                 | '     x+=1
21d60     01 30 06 F1 | 	add	local06, #1
21d64                 | '     da+=4*4
21d64     10 34 06 F1 | 	add	local08, #16
21d68                 | '     db+=2*4
21d68     08 32 06 F1 | 	add	local07, #8
21d6c     18 FF 9F FD | 	jmp	#LR__2660
21d70                 | LR__2661
21d70                 | '   else
21d70                 | '     d+=db
21d70     19 2F 02 F1 | 	add	local05, local07
21d74                 | '     x+=1
21d74     01 30 06 F1 | 	add	local06, #1
21d78                 | '     da+=2*4
21d78     08 34 06 F1 | 	add	local08, #8
21d7c                 | '     db+=2*4
21d7c     08 32 06 F1 | 	add	local07, #8
21d80     04 FF 9F FD | 	jmp	#LR__2660
21d84                 | LR__2662
21d84     A7 F0 03 F6 | 	mov	ptra, fp
21d88     B2 00 A0 FD | 	call	#popregs_
21d8c                 | _hg010b_spin2_circle_ret
21d8c     2D 00 64 FD | 	ret
21d90                 | 
21d90                 | '     
21d90                 | ' '-- A frame (an empty rectangle) ---------------------------------------
21d90                 | ' 
21d90                 | ' pub frame(x1,y1,x2,y2,c)
21d90                 | _hg010b_spin2_frame
21d90     05 4A 05 F6 | 	mov	COUNT_, #5
21d94     A8 00 A0 FD | 	call	#pushregs_
21d98     09 27 02 F6 | 	mov	local01, arg01
21d9c     0A 29 02 F6 | 	mov	local02, arg02
21da0     0B 2B 02 F6 | 	mov	local03, arg03
21da4     0C 2D 02 F6 | 	mov	local04, arg04
21da8     0D 2F 02 F6 | 	mov	local05, arg05
21dac                 | ' 
21dac                 | ' fastline(x1,x2,y1,c)
21dac     13 13 02 F6 | 	mov	arg01, local01
21db0     15 15 02 F6 | 	mov	arg02, local03
21db4     14 17 02 F6 | 	mov	arg03, local02
21db8     17 19 02 F6 | 	mov	arg04, local05
21dbc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
21dc0                 | ' fastline(x1,x2,y2,c)
21dc0     13 13 02 F6 | 	mov	arg01, local01
21dc4     15 15 02 F6 | 	mov	arg02, local03
21dc8     16 17 02 F6 | 	mov	arg03, local04
21dcc     17 19 02 F6 | 	mov	arg04, local05
21dd0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
21dd4                 | ' line(x1,y1,x1,y2,c)
21dd4     13 13 02 F6 | 	mov	arg01, local01
21dd8     14 15 02 F6 | 	mov	arg02, local02
21ddc     13 17 02 F6 | 	mov	arg03, local01
21de0     16 19 02 F6 | 	mov	arg04, local04
21de4     17 1B 02 F6 | 	mov	arg05, local05
21de8                 | ' draw(x1,y1,x2,y2,c)
21de8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
21dec                 | ' line(x2,y1,x2,y2,c)
21dec     15 13 02 F6 | 	mov	arg01, local03
21df0     14 15 02 F6 | 	mov	arg02, local02
21df4     15 17 02 F6 | 	mov	arg03, local03
21df8     16 19 02 F6 | 	mov	arg04, local04
21dfc     17 1B 02 F6 | 	mov	arg05, local05
21e00                 | ' draw(x1,y1,x2,y2,c)
21e00     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
21e04     A7 F0 03 F6 | 	mov	ptra, fp
21e08     B2 00 A0 FD | 	call	#popregs_
21e0c                 | _hg010b_spin2_frame_ret
21e0c     2D 00 64 FD | 	ret
21e10                 | 
21e10                 | ' 
21e10                 | ' '-- A box (a filled rectangle) ----------------------------------------
21e10                 | ' 
21e10                 | ' pub box(x1,y1,x2,y2,c) |yy
21e10                 | _hg010b_spin2_box
21e10     06 4A 05 F6 | 	mov	COUNT_, #6
21e14     A8 00 A0 FD | 	call	#pushregs_
21e18     09 27 02 F6 | 	mov	local01, arg01
21e1c     0A 29 02 F6 | 	mov	local02, arg02
21e20     0B 2B 02 F6 | 	mov	local03, arg03
21e24     0C 2D 02 F6 | 	mov	local04, arg04
21e28     0D 2F 02 F6 | 	mov	local05, arg05
21e2c                 | ' 
21e2c                 | ' repeat yy from y1 to y2
21e2c     14 2D 52 F2 | 	cmps	local04, local02 wc
21e30     01 30 86 F6 | 	negc	local06, #1
21e34     18 2D 02 F1 | 	add	local04, local06
21e38                 | LR__2670
21e38                 | '   fastline(x1,x2,yy,c)
21e38     13 13 02 F6 | 	mov	arg01, local01
21e3c     15 15 02 F6 | 	mov	arg02, local03
21e40     17 19 02 F6 | 	mov	arg04, local05
21e44     14 17 02 F6 | 	mov	arg03, local02
21e48     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
21e4c     18 29 02 F1 | 	add	local02, local06
21e50     16 29 0A F2 | 	cmp	local02, local04 wz
21e54     E0 FF 9F 5D |  if_ne	jmp	#LR__2670
21e58     A7 F0 03 F6 | 	mov	ptra, fp
21e5c     B2 00 A0 FD | 	call	#popregs_
21e60                 | _hg010b_spin2_box_ret
21e60     2D 00 64 FD | 	ret
21e64                 | 
21e64                 | '       
21e64                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
21e64                 | _hg010b_spin2_putcharxycgf
21e64                 | ' 
21e64                 | '  
21e64                 | ' repeat yy from 0 to 15
21e64     00 00 06 F6 | 	mov	_var01, #0
21e68     97 8C 48 FB | 	callpa	#(@LR__2682-@LR__2680)>>2,fcache_load_ptr_
21e6c                 | LR__2680
21e6c                 | ' 
21e6c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
21e6c     95 E4 05 F1 | 	add	objptr, #149
21e70     F2 02 02 FB | 	rdlong	_var02, objptr
21e74     0A 02 66 F0 | 	shl	_var02, #10
21e78     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
21e7c     01 05 02 F1 | 	add	_var03, _var02
21e80     0B 03 02 F6 | 	mov	_var02, arg03
21e84     04 02 66 F0 | 	shl	_var02, #4
21e88     01 05 02 F1 | 	add	_var03, _var02
21e8c     00 05 02 F1 | 	add	_var03, _var01
21e90     02 05 C2 FA | 	rdbyte	_var03, _var03
21e94                 | '   asm
21e94     00 04 0E F4 | 	testb	_var03, #0 wz
21e98     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
21e9c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
21ea0     01 04 0E F4 | 	testb	_var03, #1 wz
21ea4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
21ea8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
21eac     02 04 0E F4 | 	testb	_var03, #2 wz
21eb0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
21eb4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
21eb8     03 04 0E F4 | 	testb	_var03, #3 wz
21ebc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
21ec0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
21ec4     04 04 0E F4 | 	testb	_var03, #4 wz
21ec8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
21ecc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
21ed0     05 04 0E F4 | 	testb	_var03, #5 wz
21ed4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
21ed8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
21edc     06 04 0E F4 | 	testb	_var03, #6 wz
21ee0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
21ee4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
21ee8     07 04 0E F4 | 	testb	_var03, #7 wz
21eec     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
21ef0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
21ef4                 | '   
21ef4                 | '   ccc[0]:=c1
21ef4     99 E5 05 F1 | 	add	objptr, #409
21ef8     F2 06 62 FC | 	wrlong	_var04, objptr
21efc                 | '   ccc[1]:=c2 
21efc     04 E4 05 F1 | 	add	objptr, #4
21f00     F2 08 62 FC | 	wrlong	_var05, objptr
21f04                 | '   long[mailbox0][2]:=8
21f04     49 E4 85 F1 | 	sub	objptr, #73
21f08     F2 04 02 FB | 	rdlong	_var03, objptr
21f0c     08 04 06 F1 | 	add	_var03, #8
21f10     02 11 68 FC | 	wrlong	#8, _var03
21f14                 | '   long[mailbox0][1]:=@ccc
21f14     45 E4 05 F1 | 	add	objptr, #69
21f18     F2 04 02 F6 | 	mov	_var03, objptr
21f1c     45 E4 85 F1 | 	sub	objptr, #69
21f20     F2 02 02 FB | 	rdlong	_var02, objptr
21f24     04 02 06 F1 | 	add	_var02, #4
21f28     01 05 62 FC | 	wrlong	_var03, _var02
21f2c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
21f2c     0C E5 85 F1 | 	sub	objptr, #268
21f30     F2 04 02 FB | 	rdlong	_var03, objptr
21f34     0A 03 02 F6 | 	mov	_var02, arg02
21f38     00 03 02 F1 | 	add	_var02, _var01
21f3c     0A 02 66 F0 | 	shl	_var02, #10
21f40     09 0B 02 F6 | 	mov	_var06, arg01
21f44     02 0A 66 F0 | 	shl	_var06, #2
21f48     05 03 02 F1 | 	add	_var02, _var06
21f4c     01 05 02 F1 | 	add	_var03, _var02
21f50     00 00 78 FF 
21f54     00 04 06 F1 | 	add	_var03, ##-268435456
21f58     0C E5 05 F1 | 	add	objptr, #268
21f5c     F2 0A 02 FB | 	rdlong	_var06, objptr
21f60     05 05 62 FC | 	wrlong	_var03, _var06
21f64                 | '   repeat
21f64                 | LR__2681
21f64     F2 04 02 FB | 	rdlong	_var03, objptr
21f68     02 03 02 FB | 	rdlong	_var02, _var03
21f6c     00 02 56 F2 | 	cmps	_var02, #0 wc
21f70     F0 FF 9F CD |  if_b	jmp	#LR__2681
21f74     E9 E5 85 F1 | 	sub	objptr, #489
21f78     01 00 06 F1 | 	add	_var01, #1
21f7c     10 00 56 F2 | 	cmps	_var01, #16 wc
21f80     E8 FE 9F CD |  if_b	jmp	#LR__2680
21f84                 | LR__2682
21f84                 | _hg010b_spin2_putcharxycgf_ret
21f84     2D 00 64 FD | 	ret
21f88                 | 
21f88                 | ' 
21f88                 | ' 
21f88                 | ' '**********************************************************************r***
21f88                 | ' '                                                                        *
21f88                 | ' ' Font related functions                                                 *
21f88                 | ' '                                                                        *
21f88                 | ' '*************************************************************************
21f88                 | ' 
21f88                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
21f88                 | ' 
21f88                 | ' pub setfontfamily(afontnum)
21f88                 | _hg010b_spin2_setfontfamily
21f88                 | ' 
21f88                 | ' font_family:=afontnum
21f88     95 E4 05 F1 | 	add	objptr, #149
21f8c     F2 12 62 FC | 	wrlong	arg01, objptr
21f90     95 E4 85 F1 | 	sub	objptr, #149
21f94                 | ' 'if afontnum==8
21f94                 | ' '  font_ptr:=@amiga_font
21f94                 | ' 
21f94                 | ' if afontnum==4
21f94     04 12 0E F2 | 	cmp	arg01, #4 wz
21f98                 | '   font_ptr:=@st_font
21f98     08 00 00 AF 
21f9c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
21fa0     08 E4 05 A1 |  if_e	add	objptr, #8
21fa4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
21fa8     08 E4 85 A1 |  if_e	sub	objptr, #8
21fac     08 00 00 AF 
21fb0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
21fb4                 | ' if afontnum==0
21fb4     00 12 0E F2 | 	cmp	arg01, #0 wz
21fb8                 | '   font_ptr:=@vga_font
21fb8     08 E4 05 A1 |  if_e	add	objptr, #8
21fbc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
21fc0     08 E4 85 A1 |  if_e	sub	objptr, #8
21fc4                 | _hg010b_spin2_setfontfamily_ret
21fc4     2D 00 64 FD | 	ret
21fc8                 | 
21fc8                 | ' 
21fc8                 | ' '*************************************************************************
21fc8                 | ' '                                                                        *
21fc8                 | ' '  Cursor functions                                                      *
21fc8                 | ' '                                                                        *
21fc8                 | ' '*************************************************************************
21fc8                 | ' 
21fc8                 | ' 
21fc8                 | ' pub setcursorpos(x,y)
21fc8                 | _hg010b_spin2_setcursorpos
21fc8                 | ' 
21fc8                 | ' ''---------- Set the (x,y) position of cursor
21fc8                 | ' 
21fc8                 | ' cursor_x:=x
21fc8     3C E4 05 F1 | 	add	objptr, #60
21fcc     F2 12 52 FC | 	wrword	arg01, objptr
21fd0                 | ' cursor_y:=y
21fd0     02 E4 05 F1 | 	add	objptr, #2
21fd4     F2 14 42 FC | 	wrbyte	arg02, objptr
21fd8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
21fd8     02 E4 85 F1 | 	sub	objptr, #2
21fdc     F2 14 E2 FA | 	rdword	arg02, objptr
21fe0     02 14 66 F0 | 	shl	arg02, #2
21fe4     02 E4 05 F1 | 	add	objptr, #2
21fe8     F2 16 C2 FA | 	rdbyte	arg03, objptr
21fec     3E E4 85 F1 | 	sub	objptr, #62
21ff0     04 16 66 F0 | 	shl	arg03, #4
21ff4     04 16 06 F1 | 	add	arg03, #4
21ff8     11 12 06 F6 | 	mov	arg01, #17
21ffc     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22000                 | _hg010b_spin2_setcursorpos_ret
22000     2D 00 64 FD | 	ret
22004                 | 
22004                 | ' 
22004                 | ' pub setcursorx(x)
22004                 | _hg010b_spin2_setcursorx
22004                 | ' cursor_x:=x
22004     3C E4 05 F1 | 	add	objptr, #60
22008     F2 12 52 FC | 	wrword	arg01, objptr
2200c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2200c     F2 14 E2 FA | 	rdword	arg02, objptr
22010     02 14 66 F0 | 	shl	arg02, #2
22014     02 E4 05 F1 | 	add	objptr, #2
22018     F2 16 C2 FA | 	rdbyte	arg03, objptr
2201c     3E E4 85 F1 | 	sub	objptr, #62
22020     04 16 66 F0 | 	shl	arg03, #4
22024     04 16 06 F1 | 	add	arg03, #4
22028     11 12 06 F6 | 	mov	arg01, #17
2202c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
22030                 | _hg010b_spin2_setcursorx_ret
22030     2D 00 64 FD | 	ret
22034                 | 
22034                 | ' 
22034                 | ' pub setcursory(y) 
22034                 | _hg010b_spin2_setcursory
22034                 | ' cursor_y:=y
22034     3E E4 05 F1 | 	add	objptr, #62
22038     F2 12 42 FC | 	wrbyte	arg01, objptr
2203c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
2203c     02 E4 85 F1 | 	sub	objptr, #2
22040     F2 14 E2 FA | 	rdword	arg02, objptr
22044     02 14 66 F0 | 	shl	arg02, #2
22048     02 E4 05 F1 | 	add	objptr, #2
2204c     F2 16 C2 FA | 	rdbyte	arg03, objptr
22050     3E E4 85 F1 | 	sub	objptr, #62
22054     04 16 66 F0 | 	shl	arg03, #4
22058     04 16 06 F1 | 	add	arg03, #4
2205c     11 12 06 F6 | 	mov	arg01, #17
22060     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
22064                 | _hg010b_spin2_setcursory_ret
22064     2D 00 64 FD | 	ret
22068                 | 
22068                 | ' 
22068                 | ' '*************************************************************************
22068                 | ' '                                                                        *
22068                 | ' '  VBlank functions                                                      *
22068                 | ' '                                                                        *
22068                 | ' '*************************************************************************
22068                 | ' 
22068                 | ' pub waitvbl(amount) | i
22068                 | _hg010b_spin2_waitvbl
22068     03 4A 05 F6 | 	mov	COUNT_, #3
2206c     A8 00 A0 FD | 	call	#pushregs_
22070     09 27 02 F6 | 	mov	local01, arg01
22074                 | ' 
22074                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
22074                 | ' 
22074                 | ' repeat i from 1 to amount
22074     01 28 06 F6 | 	mov	local02, #1
22078     01 26 56 F2 | 	cmps	local01, #1 wc
2207c     01 2A 86 F6 | 	negc	local03, #1
22080     15 27 02 F1 | 	add	local01, local03
22084                 | LR__2690
22084                 | '   repeat until vblank==0
22084                 | LR__2691
22084     49 E4 05 F1 | 	add	objptr, #73
22088     F2 12 0A FB | 	rdlong	arg01, objptr wz
2208c     49 E4 85 F1 | 	sub	objptr, #73
22090     0C 00 90 AD |  if_e	jmp	#LR__2692
22094                 | '     waitus(100)
22094     64 12 06 F6 | 	mov	arg01, #100
22098     D8 1F B0 FD | 	call	#__system___waitus
2209c     E4 FF 9F FD | 	jmp	#LR__2691
220a0                 | LR__2692
220a0                 | '   repeat until vblank==1
220a0                 | LR__2693
220a0     49 E4 05 F1 | 	add	objptr, #73
220a4     F2 12 02 FB | 	rdlong	arg01, objptr
220a8     49 E4 85 F1 | 	sub	objptr, #73
220ac     01 12 0E F2 | 	cmp	arg01, #1 wz
220b0     0C 00 90 AD |  if_e	jmp	#LR__2694
220b4                 | '     waitus(100)
220b4     64 12 06 F6 | 	mov	arg01, #100
220b8     B8 1F B0 FD | 	call	#__system___waitus
220bc     E0 FF 9F FD | 	jmp	#LR__2693
220c0                 | LR__2694
220c0     15 29 02 F1 | 	add	local02, local03
220c4     13 29 0A F2 | 	cmp	local02, local01 wz
220c8     B8 FF 9F 5D |  if_ne	jmp	#LR__2690
220cc     A7 F0 03 F6 | 	mov	ptra, fp
220d0     B2 00 A0 FD | 	call	#popregs_
220d4                 | _hg010b_spin2_waitvbl_ret
220d4     2D 00 64 FD | 	ret
220d8                 | 
220d8                 | ' 
220d8                 | ' 
220d8                 | ' pub cls(fc,bc)   :c,i
220d8                 | _hg010b_spin2_cls
220d8     02 4A 05 F6 | 	mov	COUNT_, #2
220dc     A8 00 A0 FD | 	call	#pushregs_
220e0     09 27 02 F6 | 	mov	local01, arg01
220e4     0A 29 02 F6 | 	mov	local02, arg02
220e8                 | ' 
220e8                 | ' c:=bc
220e8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
220e8     DD E4 05 F1 | 	add	objptr, #221
220ec     F2 12 02 FB | 	rdlong	arg01, objptr
220f0     A5 E4 85 F1 | 	sub	objptr, #165
220f4     F2 16 02 FB | 	rdlong	arg03, objptr
220f8     02 16 66 F0 | 	shl	arg03, #2
220fc     14 15 02 F6 | 	mov	arg02, local02
22100     00 18 06 F6 | 	mov	arg04, #0
22104     01 1A 06 F6 | 	mov	arg05, #1
22108     0B 00 00 FF 
2210c     94 E4 05 F1 | 	add	objptr, ##5780
22110     F8 10 B0 FD | 	call	#_psram_spin2_fill
22114                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
22114     0B 00 00 FF 
22118     C8 E4 85 F1 | 	sub	objptr, ##5832
2211c     F2 12 02 FB | 	rdlong	arg01, objptr
22120     04 E4 85 F1 | 	sub	objptr, #4
22124     F2 16 02 FB | 	rdlong	arg03, objptr
22128     09 17 82 F1 | 	sub	arg03, arg01
2212c     20 14 06 F6 | 	mov	arg02, #32
22130     00 18 06 F6 | 	mov	arg04, #0
22134     01 1A 06 F6 | 	mov	arg05, #1
22138     0B 00 00 FF 
2213c     CC E4 05 F1 | 	add	objptr, ##5836
22140     C8 10 B0 FD | 	call	#_psram_spin2_fill
22144                 | ' setwritecolors(fc,bc)
22144                 | ' 
22144                 | ' write_color:=ff
22144     0B 00 00 FF 
22148     8B E4 85 F1 | 	sub	objptr, ##5771
2214c     F2 26 62 FC | 	wrlong	local01, objptr
22150                 | ' write_background:=bb
22150     04 E4 05 F1 | 	add	objptr, #4
22154     F2 28 62 FC | 	wrlong	local02, objptr
22158                 | ' cursor_x:=0
22158     09 E4 85 F1 | 	sub	objptr, #9
2215c     F2 00 58 FC | 	wrword	#0, objptr
22160                 | ' cursor_y:=0
22160     02 E4 05 F1 | 	add	objptr, #2
22164     F2 00 48 FC | 	wrbyte	#0, objptr
22168                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
22168     02 E4 85 F1 | 	sub	objptr, #2
2216c     F2 14 E2 FA | 	rdword	arg02, objptr
22170     02 14 66 F0 | 	shl	arg02, #2
22174     02 E4 05 F1 | 	add	objptr, #2
22178     F2 16 C2 FA | 	rdbyte	arg03, objptr
2217c     3E E4 85 F1 | 	sub	objptr, #62
22180     04 16 66 F0 | 	shl	arg03, #4
22184     04 16 06 F1 | 	add	arg03, #4
22188     11 12 06 F6 | 	mov	arg01, #17
2218c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
22190                 | ' setcursorcolor(fc)
22190     13 13 02 F6 | 	mov	arg01, local01
22194     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
22198     14 FB 01 F6 | 	mov	result1, local02
2219c     00 FC 05 F6 | 	mov	result2, #0
221a0     A7 F0 03 F6 | 	mov	ptra, fp
221a4     B2 00 A0 FD | 	call	#popregs_
221a8                 | _hg010b_spin2_cls_ret
221a8     2D 00 64 FD | 	ret
221ac                 | 
221ac                 | ' 
221ac                 | ' ''---------- Output a char at the cursor position, move the cursor 
221ac                 | ' 
221ac                 | ' pub putchar(achar) | c,x,y,l,newcpl
221ac                 | _hg010b_spin2_putchar
221ac     02 4A 05 F6 | 	mov	COUNT_, #2
221b0     A8 00 A0 FD | 	call	#pushregs_
221b4     09 27 02 F6 | 	mov	local01, arg01
221b8                 | ' 
221b8                 | ' if achar==10
221b8     0A 26 0E F2 | 	cmp	local01, #10 wz
221bc                 | '   crlf()
221bc     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
221c0                 | ' if achar==9
221c0     09 26 0E F2 | 	cmp	local01, #9 wz
221c4     18 00 90 5D |  if_ne	jmp	#LR__2700
221c8                 | '   cursor_x:=(cursor_x& %11110000)+16
221c8     3C E4 05 F1 | 	add	objptr, #60
221cc     F2 16 E2 FA | 	rdword	arg03, objptr
221d0     F0 16 06 F5 | 	and	arg03, #240
221d4     10 16 06 F1 | 	add	arg03, #16
221d8     F2 16 52 FC | 	wrword	arg03, objptr
221dc     3C E4 85 F1 | 	sub	objptr, #60
221e0                 | LR__2700
221e0                 | '   
221e0                 | ' if (achar<>9) && (achar<>10) 
221e0     09 26 0E F2 | 	cmp	local01, #9 wz
221e4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
221e8     A8 00 90 AD |  if_e	jmp	#LR__2701
221ec                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
221ec     3C E4 05 F1 | 	add	objptr, #60
221f0     F2 12 E2 FA | 	rdword	arg01, objptr
221f4     02 E4 05 F1 | 	add	objptr, #2
221f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
221fc     04 14 66 F0 | 	shl	arg02, #4
22200     04 14 06 F1 | 	add	arg02, #4
22204     03 E4 05 F1 | 	add	objptr, #3
22208     F2 18 02 FB | 	rdlong	arg04, objptr
2220c     04 E4 05 F1 | 	add	objptr, #4
22210     F2 1A 02 FB | 	rdlong	arg05, objptr
22214     45 E4 85 F1 | 	sub	objptr, #69
22218     13 17 02 F6 | 	mov	arg03, local01
2221c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
22220     04 E4 05 F1 | 	add	objptr, #4
22224     F2 12 02 FB | 	rdlong	arg01, objptr
22228     10 00 00 FF 
2222c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22230     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22234     3A E4 05 F1 | 	add	objptr, #58
22238     F2 1A C2 FA | 	rdbyte	arg05, objptr
2223c     0D 17 02 FD | 	qmul	arg03, arg05
22240                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
22240     10 00 00 FF 
22244     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
22248     02 E4 85 F1 | 	sub	objptr, #2
2224c     F2 28 E2 FA | 	rdword	local02, objptr
22250     01 28 46 F0 | 	shr	local02, #1
22254     13 15 02 F6 | 	mov	arg02, local01
22258     01 16 06 F6 | 	mov	arg03, #1
2225c     00 18 06 F6 | 	mov	arg04, #0
22260     01 1A 06 F6 | 	mov	arg05, #1
22264     0B 00 00 FF 
22268     90 E4 05 F1 | 	add	objptr, ##5776
2226c     18 26 62 FD | 	getqx	local01
22270     14 27 02 F1 | 	add	local01, local02
22274     13 13 02 F1 | 	add	arg01, local01
22278     90 0F B0 FD | 	call	#_psram_spin2_fill
2227c                 | '   cursor_x+=2
2227c     0B 00 00 FF 
22280     90 E4 85 F1 | 	sub	objptr, ##5776
22284     F2 28 E2 FA | 	rdword	local02, objptr
22288     02 28 06 F1 | 	add	local02, #2
2228c     F2 28 52 FC | 	wrword	local02, objptr
22290     3C E4 85 F1 | 	sub	objptr, #60
22294                 | LR__2701
22294                 | ' 
22294                 | ' if cursor_x>=256
22294     3C E4 05 F1 | 	add	objptr, #60
22298     F2 28 E2 FA | 	rdword	local02, objptr
2229c     3C E4 85 F1 | 	sub	objptr, #60
222a0     00 29 56 F2 | 	cmps	local02, #256 wc
222a4     64 00 90 CD |  if_b	jmp	#LR__2703
222a8                 | '   cursor_x:=0
222a8     3C E4 05 F1 | 	add	objptr, #60
222ac     F2 00 58 FC | 	wrword	#0, objptr
222b0                 | '   cursor_y+=1
222b0     02 E4 05 F1 | 	add	objptr, #2
222b4     F2 28 C2 FA | 	rdbyte	local02, objptr
222b8     01 28 06 F1 | 	add	local02, #1
222bc     F2 28 42 FC | 	wrbyte	local02, objptr
222c0                 | '   if cursor_y>st_lines-1
222c0     C3 E4 05 F1 | 	add	objptr, #195
222c4     F2 28 02 FB | 	rdlong	local02, objptr
222c8     01 28 86 F1 | 	sub	local02, #1
222cc     C3 E4 85 F1 | 	sub	objptr, #195
222d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
222d4     3E E4 85 F1 | 	sub	objptr, #62
222d8     14 17 5A F2 | 	cmps	arg03, local02 wcz
222dc     2C 00 90 ED |  if_be	jmp	#LR__2702
222e0                 | '     scrollup2()
222e0     00 12 06 F6 | 	mov	arg01, #0
222e4     01 00 00 FF 
222e8     58 14 06 F6 | 	mov	arg02, ##600
222ec     10 16 06 F6 | 	mov	arg03, #16
222f0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
222f4                 | '     cursor_y:=st_lines-1
222f4     01 E5 05 F1 | 	add	objptr, #257
222f8     F2 28 02 FB | 	rdlong	local02, objptr
222fc     01 28 86 F1 | 	sub	local02, #1
22300     C3 E4 85 F1 | 	sub	objptr, #195
22304     F2 28 42 FC | 	wrbyte	local02, objptr
22308     3E E4 85 F1 | 	sub	objptr, #62
2230c                 | LR__2702
2230c                 | LR__2703
2230c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2230c     3C E4 05 F1 | 	add	objptr, #60
22310     F2 14 E2 FA | 	rdword	arg02, objptr
22314     02 14 66 F0 | 	shl	arg02, #2
22318     02 E4 05 F1 | 	add	objptr, #2
2231c     F2 16 C2 FA | 	rdbyte	arg03, objptr
22320     3E E4 85 F1 | 	sub	objptr, #62
22324     04 16 66 F0 | 	shl	arg03, #4
22328     04 16 06 F1 | 	add	arg03, #4
2232c     11 12 06 F6 | 	mov	arg01, #17
22330     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
22334     A7 F0 03 F6 | 	mov	ptra, fp
22338     B2 00 A0 FD | 	call	#popregs_
2233c                 | _hg010b_spin2_putchar_ret
2233c     2D 00 64 FD | 	ret
22340                 | 
22340                 | '     
22340                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
22340                 | ' 
22340                 | ' pub putchar2(achar) | c,x,y,l,newcpl
22340                 | _hg010b_spin2_putchar2
22340     02 4A 05 F6 | 	mov	COUNT_, #2
22344     A8 00 A0 FD | 	call	#pushregs_
22348     09 27 02 F6 | 	mov	local01, arg01
2234c                 | ' 
2234c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2234c     3C E4 05 F1 | 	add	objptr, #60
22350     F2 12 E2 FA | 	rdword	arg01, objptr
22354     02 E4 05 F1 | 	add	objptr, #2
22358     F2 14 C2 FA | 	rdbyte	arg02, objptr
2235c     04 14 66 F0 | 	shl	arg02, #4
22360     04 14 06 F1 | 	add	arg02, #4
22364     03 E4 05 F1 | 	add	objptr, #3
22368     F2 18 02 FB | 	rdlong	arg04, objptr
2236c     04 E4 05 F1 | 	add	objptr, #4
22370     F2 1A 02 FB | 	rdlong	arg05, objptr
22374     45 E4 85 F1 | 	sub	objptr, #69
22378     13 17 02 F6 | 	mov	arg03, local01
2237c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
22380     04 E4 05 F1 | 	add	objptr, #4
22384     F2 12 02 FB | 	rdlong	arg01, objptr
22388     10 00 00 FF 
2238c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22390     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22394     3A E4 05 F1 | 	add	objptr, #58
22398     F2 1A C2 FA | 	rdbyte	arg05, objptr
2239c     0D 17 02 FD | 	qmul	arg03, arg05
223a0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
223a0     10 00 00 FF 
223a4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
223a8     02 E4 85 F1 | 	sub	objptr, #2
223ac     F2 28 E2 FA | 	rdword	local02, objptr
223b0     01 28 46 F0 | 	shr	local02, #1
223b4     13 15 02 F6 | 	mov	arg02, local01
223b8     01 16 06 F6 | 	mov	arg03, #1
223bc     00 18 06 F6 | 	mov	arg04, #0
223c0     01 1A 06 F6 | 	mov	arg05, #1
223c4     0B 00 00 FF 
223c8     90 E4 05 F1 | 	add	objptr, ##5776
223cc     18 26 62 FD | 	getqx	local01
223d0     14 27 02 F1 | 	add	local01, local02
223d4     13 13 02 F1 | 	add	arg01, local01
223d8     30 0E B0 FD | 	call	#_psram_spin2_fill
223dc                 | ' 
223dc                 | ' cursor_x+=2
223dc     0B 00 00 FF 
223e0     90 E4 85 F1 | 	sub	objptr, ##5776
223e4     F2 28 E2 FA | 	rdword	local02, objptr
223e8     02 28 06 F1 | 	add	local02, #2
223ec     F2 28 52 FC | 	wrword	local02, objptr
223f0                 | ' if cursor_x>=256
223f0     F2 28 E2 FA | 	rdword	local02, objptr
223f4     3C E4 85 F1 | 	sub	objptr, #60
223f8     00 29 56 F2 | 	cmps	local02, #256 wc
223fc     64 00 90 CD |  if_b	jmp	#LR__2711
22400                 | '   cursor_x:=0
22400     3C E4 05 F1 | 	add	objptr, #60
22404     F2 00 58 FC | 	wrword	#0, objptr
22408                 | '   cursor_y+=1
22408     02 E4 05 F1 | 	add	objptr, #2
2240c     F2 28 C2 FA | 	rdbyte	local02, objptr
22410     01 28 06 F1 | 	add	local02, #1
22414     F2 28 42 FC | 	wrbyte	local02, objptr
22418                 | '   if cursor_y>st_lines-1
22418     C3 E4 05 F1 | 	add	objptr, #195
2241c     F2 28 02 FB | 	rdlong	local02, objptr
22420     01 28 86 F1 | 	sub	local02, #1
22424     C3 E4 85 F1 | 	sub	objptr, #195
22428     F2 16 C2 FA | 	rdbyte	arg03, objptr
2242c     3E E4 85 F1 | 	sub	objptr, #62
22430     14 17 5A F2 | 	cmps	arg03, local02 wcz
22434     2C 00 90 ED |  if_be	jmp	#LR__2710
22438                 | '     scrollup2()
22438     00 12 06 F6 | 	mov	arg01, #0
2243c     01 00 00 FF 
22440     58 14 06 F6 | 	mov	arg02, ##600
22444     10 16 06 F6 | 	mov	arg03, #16
22448     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2244c                 | '     cursor_y:=st_lines-1
2244c     01 E5 05 F1 | 	add	objptr, #257
22450     F2 28 02 FB | 	rdlong	local02, objptr
22454     01 28 86 F1 | 	sub	local02, #1
22458     C3 E4 85 F1 | 	sub	objptr, #195
2245c     F2 28 42 FC | 	wrbyte	local02, objptr
22460     3E E4 85 F1 | 	sub	objptr, #62
22464                 | LR__2710
22464                 | LR__2711
22464                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
22464     3C E4 05 F1 | 	add	objptr, #60
22468     F2 14 E2 FA | 	rdword	arg02, objptr
2246c     02 14 66 F0 | 	shl	arg02, #2
22470     02 E4 05 F1 | 	add	objptr, #2
22474     F2 16 C2 FA | 	rdbyte	arg03, objptr
22478     3E E4 85 F1 | 	sub	objptr, #62
2247c     04 16 66 F0 | 	shl	arg03, #4
22480     04 16 06 F1 | 	add	arg03, #4
22484     11 12 06 F6 | 	mov	arg01, #17
22488     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2248c     A7 F0 03 F6 | 	mov	ptra, fp
22490     B2 00 A0 FD | 	call	#popregs_
22494                 | _hg010b_spin2_putchar2_ret
22494     2D 00 64 FD | 	ret
22498                 | 
22498                 | ' ''--------- Output a string at the cursor position, move the cursor  
22498                 | ' 
22498                 | ' pub write(text) | iii,c,ncx,ncy
22498                 | _hg010b_spin2_write
22498     04 4A 05 F6 | 	mov	COUNT_, #4
2249c     A8 00 A0 FD | 	call	#pushregs_
224a0     09 27 02 F6 | 	mov	local01, arg01
224a4                 | ' 
224a4                 | ' repeat iii from 0 to strsize(text)-1
224a4     00 28 06 F6 | 	mov	local02, #0
224a8     13 13 02 F6 | 	mov	arg01, local01
224ac     09 2B 02 F6 | 	mov	local03, arg01
224b0     97 06 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
224b4                 | LR__2720
224b4     15 FB C9 FA | 	rdbyte	result1, local03 wz
224b8     01 2A 06 51 |  if_ne	add	local03, #1
224bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2720
224c0                 | LR__2721
224c0     09 2B 82 F1 | 	sub	local03, arg01
224c4     01 2A 86 F1 | 	sub	local03, #1
224c8     00 2A 56 F2 | 	cmps	local03, #0 wc
224cc     01 2C 86 F6 | 	negc	local04, #1
224d0     16 2B 02 F1 | 	add	local03, local04
224d4                 | LR__2722
224d4                 | '   putchar2(byte[text+iii])
224d4     13 13 02 F6 | 	mov	arg01, local01
224d8     14 13 02 F1 | 	add	arg01, local02
224dc     09 13 C2 FA | 	rdbyte	arg01, arg01
224e0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
224e4     16 29 02 F1 | 	add	local02, local04
224e8     15 29 0A F2 | 	cmp	local02, local03 wz
224ec     E4 FF 9F 5D |  if_ne	jmp	#LR__2722
224f0     A7 F0 03 F6 | 	mov	ptra, fp
224f4     B2 00 A0 FD | 	call	#popregs_
224f8                 | _hg010b_spin2_write_ret
224f8     2D 00 64 FD | 	ret
224fc                 | 
224fc                 | '    
224fc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
224fc                 | ' 
224fc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
224fc                 | _hg010b_spin2_scrollup2
224fc     03 4A 05 F6 | 	mov	COUNT_, #3
22500     A8 00 A0 FD | 	call	#pushregs_
22504                 | ' 	
22504                 | ' repeat i from 4 to 579 
22504     04 26 06 F6 | 	mov	local01, #4
22508                 | LR__2730
22508     F9 E4 05 F1 | 	add	objptr, #249
2250c     F2 1A 02 FB | 	rdlong	arg05, objptr
22510     1C E4 85 F1 | 	sub	objptr, #28
22514     F2 14 02 FB | 	rdlong	arg02, objptr
22518     13 19 02 F6 | 	mov	arg04, local01
2251c     10 18 06 F1 | 	add	arg04, #16
22520     02 18 66 F0 | 	shl	arg04, #2
22524     14 E4 05 F1 | 	add	objptr, #20
22528     F2 16 02 FB | 	rdlong	arg03, objptr
2252c     0B 19 02 FD | 	qmul	arg04, arg03
22530                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
22530     F6 03 00 FF 
22534     00 12 06 F6 | 	mov	arg01, ##519168
22538     0D 13 82 F1 | 	sub	arg01, arg05
2253c     02 16 66 F0 | 	shl	arg03, #2
22540     0A 00 00 FF 
22544     DB E5 05 F1 | 	add	objptr, ##5595
22548     18 1A 62 FD | 	getqx	arg05
2254c     0D 15 02 F1 | 	add	arg02, arg05
22550     80 0B B0 FD | 	call	#_psram_spin2_read1
22554     0A 00 00 FF 
22558     D3 E5 85 F1 | 	sub	objptr, ##5587
2255c     F2 1A 02 FB | 	rdlong	arg05, objptr
22560     1C E4 85 F1 | 	sub	objptr, #28
22564     F2 14 02 FB | 	rdlong	arg02, objptr
22568     13 19 02 F6 | 	mov	arg04, local01
2256c     02 18 66 F0 | 	shl	arg04, #2
22570     14 E4 05 F1 | 	add	objptr, #20
22574     F2 16 02 FB | 	rdlong	arg03, objptr
22578     0B 19 02 FD | 	qmul	arg04, arg03
2257c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2257c     F6 03 00 FF 
22580     00 12 06 F6 | 	mov	arg01, ##519168
22584     0D 13 82 F1 | 	sub	arg01, arg05
22588     02 16 66 F0 | 	shl	arg03, #2
2258c     0A 00 00 FF 
22590     DB E5 05 F1 | 	add	objptr, ##5595
22594     18 1A 62 FD | 	getqx	arg05
22598     0D 15 02 F1 | 	add	arg02, arg05
2259c     D0 0B B0 FD | 	call	#_psram_spin2_write
225a0     0B 00 00 FF 
225a4     CC E4 85 F1 | 	sub	objptr, ##5836
225a8     01 26 06 F1 | 	add	local01, #1
225ac     01 00 00 FF 
225b0     44 26 16 F2 | 	cmp	local01, ##580 wc
225b4     50 FF 9F CD |  if_b	jmp	#LR__2730
225b8                 | ' 
225b8                 | ' repeat i from 580 to 599
225b8     01 00 00 FF 
225bc     44 26 06 F6 | 	mov	local01, ##580
225c0                 | LR__2731
225c0                 | '    fastline(0,1023,i,write_background)   
225c0     45 E4 05 F1 | 	add	objptr, #69
225c4     F2 18 02 FB | 	rdlong	arg04, objptr
225c8     45 E4 85 F1 | 	sub	objptr, #69
225cc     00 12 06 F6 | 	mov	arg01, #0
225d0     09 14 CE F9 | 	bmask	arg02, #9
225d4     13 17 02 F6 | 	mov	arg03, local01
225d8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
225dc     01 26 06 F1 | 	add	local01, #1
225e0     01 00 00 FF 
225e4     58 26 16 F2 | 	cmp	local01, ##600 wc
225e8     D4 FF 9F CD |  if_b	jmp	#LR__2731
225ec                 | ' repeat i from 0 to 3
225ec     00 26 06 F6 | 	mov	local01, #0
225f0                 | LR__2732
225f0                 | '    fastline(0,1023,i,write_background)      
225f0     45 E4 05 F1 | 	add	objptr, #69
225f4     F2 18 02 FB | 	rdlong	arg04, objptr
225f8     45 E4 85 F1 | 	sub	objptr, #69
225fc     00 12 06 F6 | 	mov	arg01, #0
22600     09 14 CE F9 | 	bmask	arg02, #9
22604     13 17 02 F6 | 	mov	arg03, local01
22608     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2260c     01 26 06 F1 | 	add	local01, #1
22610     04 26 56 F2 | 	cmps	local01, #4 wc
22614     D8 FF 9F CD |  if_b	jmp	#LR__2732
22618                 | ' 
22618                 | ' repeat i from 0 to 35
22618     00 26 06 F6 | 	mov	local01, #0
2261c                 | LR__2733
2261c     13 1B 02 F6 | 	mov	arg05, local01
22620     01 1A 06 F1 | 	add	arg05, #1
22624     10 00 00 FF 
22628     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2262c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22630     0B 1B 02 FD | 	qmul	arg05, arg03
22634                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
22634     F6 03 00 FF 
22638     00 12 06 F6 | 	mov	arg01, ##519168
2263c     F9 E4 05 F1 | 	add	objptr, #249
22640     F2 1A 02 FB | 	rdlong	arg05, objptr
22644     0D 13 82 F1 | 	sub	arg01, arg05
22648     F5 E4 85 F1 | 	sub	objptr, #245
2264c     F2 14 02 FB | 	rdlong	arg02, objptr
22650     10 00 00 FF 
22654     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
22658     0B 00 00 FF 
2265c     C8 E4 05 F1 | 	add	objptr, ##5832
22660     18 1A 62 FD | 	getqx	arg05
22664     0D 15 02 F1 | 	add	arg02, arg05
22668     68 0A B0 FD | 	call	#_psram_spin2_read1
2266c     10 00 00 FF 
22670     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22674     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
22678     0B 27 02 FD | 	qmul	local01, arg03
2267c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2267c     F6 03 00 FF 
22680     00 12 06 F6 | 	mov	arg01, ##519168
22684     0A 00 00 FF 
22688     D3 E5 85 F1 | 	sub	objptr, ##5587
2268c     F2 1A 02 FB | 	rdlong	arg05, objptr
22690     0D 13 82 F1 | 	sub	arg01, arg05
22694     F5 E4 85 F1 | 	sub	objptr, #245
22698     F2 14 02 FB | 	rdlong	arg02, objptr
2269c     10 00 00 FF 
226a0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
226a4     0B 00 00 FF 
226a8     C8 E4 05 F1 | 	add	objptr, ##5832
226ac     18 1A 62 FD | 	getqx	arg05
226b0     0D 15 02 F1 | 	add	arg02, arg05
226b4     B8 0A B0 FD | 	call	#_psram_spin2_write
226b8     0B 00 00 FF 
226bc     CC E4 85 F1 | 	sub	objptr, ##5836
226c0     01 26 06 F1 | 	add	local01, #1
226c4     24 26 56 F2 | 	cmps	local01, #36 wc
226c8     50 FF 9F CD |  if_b	jmp	#LR__2733
226cc                 | ' repeat i from 0 to timings[7]-1
226cc     00 26 06 F6 | 	mov	local01, #0
226d0     10 00 00 FF 
226d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
226d8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
226dc     10 00 00 FF 
226e0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
226e4     01 28 86 F1 | 	sub	local02, #1
226e8     00 28 56 F2 | 	cmps	local02, #0 wc
226ec     01 2A 86 F6 | 	negc	local03, #1
226f0     15 29 02 F1 | 	add	local02, local03
226f4                 | LR__2734
226f4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
226f4     04 E4 05 F1 | 	add	objptr, #4
226f8     F2 12 02 FB | 	rdlong	arg01, objptr
226fc     10 00 00 FF 
22700     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
22704     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
22708     10 00 00 FF 
2270c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
22710     0D 19 02 F6 | 	mov	arg04, arg05
22714     03 18 66 F0 | 	shl	arg04, #3
22718     0D 19 02 F1 | 	add	arg04, arg05
2271c     02 18 66 F0 | 	shl	arg04, #2
22720     13 19 02 F1 | 	add	arg04, local01
22724     0C 13 02 F1 | 	add	arg01, arg04
22728     20 14 06 F6 | 	mov	arg02, #32
2272c     01 16 06 F6 | 	mov	arg03, #1
22730     00 18 06 F6 | 	mov	arg04, #0
22734     01 1A 06 F6 | 	mov	arg05, #1
22738     0B 00 00 FF 
2273c     C8 E4 05 F1 | 	add	objptr, ##5832
22740     C8 0A B0 FD | 	call	#_psram_spin2_fill
22744     0B 00 00 FF 
22748     CC E4 85 F1 | 	sub	objptr, ##5836
2274c     15 27 02 F1 | 	add	local01, local03
22750     14 27 0A F2 | 	cmp	local01, local02 wz
22754     9C FF 9F 5D |  if_ne	jmp	#LR__2734
22758     A7 F0 03 F6 | 	mov	ptra, fp
2275c     B2 00 A0 FD | 	call	#popregs_
22760                 | _hg010b_spin2_scrollup2_ret
22760     2D 00 64 FD | 	ret
22764                 | 
22764                 | '  
22764                 | ' ''----------- Scroll the screen one line down 
22764                 | ' 
22764                 | ' pub scrolldown(start=0) | i
22764                 | _hg010b_spin2_scrolldown
22764     05 4A 05 F6 | 	mov	COUNT_, #5
22768     A8 00 A0 FD | 	call	#pushregs_
2276c     09 27 02 F6 | 	mov	local01, arg01
22770                 | ' 
22770                 | ' repeat i from 579 to (start*16)+4
22770     01 00 00 FF 
22774     43 28 06 F6 | 	mov	local02, ##579
22778     13 2B 02 F6 | 	mov	local03, local01
2277c     04 2A 66 F0 | 	shl	local03, #4
22780     04 2A 06 F1 | 	add	local03, #4
22784     01 00 00 FF 
22788     43 2A 56 F2 | 	cmps	local03, ##579 wc
2278c     01 2C 86 F6 | 	negc	local04, #1
22790     16 2F 02 F6 | 	mov	local05, local04
22794     16 2B 02 F1 | 	add	local03, local04
22798                 | LR__2740
22798     F9 E4 05 F1 | 	add	objptr, #249
2279c     F2 2C 02 FB | 	rdlong	local04, objptr
227a0     1C E4 85 F1 | 	sub	objptr, #28
227a4     F2 14 02 FB | 	rdlong	arg02, objptr
227a8     14 1B 02 F6 | 	mov	arg05, local02
227ac     02 1A 66 F0 | 	shl	arg05, #2
227b0     14 E4 05 F1 | 	add	objptr, #20
227b4     F2 16 02 FB | 	rdlong	arg03, objptr
227b8     0B 1B 02 FD | 	qmul	arg05, arg03
227bc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
227bc     F6 03 00 FF 
227c0     00 12 06 F6 | 	mov	arg01, ##519168
227c4     16 13 82 F1 | 	sub	arg01, local04
227c8     02 16 66 F0 | 	shl	arg03, #2
227cc     0A 00 00 FF 
227d0     DB E5 05 F1 | 	add	objptr, ##5595
227d4     18 2C 62 FD | 	getqx	local04
227d8     16 15 02 F1 | 	add	arg02, local04
227dc     F4 08 B0 FD | 	call	#_psram_spin2_read1
227e0     0A 00 00 FF 
227e4     D3 E5 85 F1 | 	sub	objptr, ##5587
227e8     F2 2C 02 FB | 	rdlong	local04, objptr
227ec     1C E4 85 F1 | 	sub	objptr, #28
227f0     F2 14 02 FB | 	rdlong	arg02, objptr
227f4     14 1B 02 F6 | 	mov	arg05, local02
227f8     10 1A 06 F1 | 	add	arg05, #16
227fc     02 1A 66 F0 | 	shl	arg05, #2
22800     14 E4 05 F1 | 	add	objptr, #20
22804     F2 16 02 FB | 	rdlong	arg03, objptr
22808     0B 1B 02 FD | 	qmul	arg05, arg03
2280c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2280c     F6 03 00 FF 
22810     00 12 06 F6 | 	mov	arg01, ##519168
22814     16 13 82 F1 | 	sub	arg01, local04
22818     02 16 66 F0 | 	shl	arg03, #2
2281c     0A 00 00 FF 
22820     DB E5 05 F1 | 	add	objptr, ##5595
22824     18 2C 62 FD | 	getqx	local04
22828     16 15 02 F1 | 	add	arg02, local04
2282c     40 09 B0 FD | 	call	#_psram_spin2_write
22830     0B 00 00 FF 
22834     CC E4 85 F1 | 	sub	objptr, ##5836
22838     17 29 02 F1 | 	add	local02, local05
2283c     15 29 0A F2 | 	cmp	local02, local03 wz
22840     54 FF 9F 5D |  if_ne	jmp	#LR__2740
22844                 | ' 
22844                 | ' repeat i from (start*16)+4 to (start*16)+19
22844     13 29 02 F6 | 	mov	local02, local01
22848     04 28 66 F0 | 	shl	local02, #4
2284c     04 28 06 F1 | 	add	local02, #4
22850     13 2F 02 F6 | 	mov	local05, local01
22854     04 2E 66 F0 | 	shl	local05, #4
22858     13 2E 06 F1 | 	add	local05, #19
2285c     13 2D 02 F6 | 	mov	local04, local01
22860     04 2C 66 F0 | 	shl	local04, #4
22864     04 2C 06 F1 | 	add	local04, #4
22868     16 2F 52 F2 | 	cmps	local05, local04 wc
2286c     01 2C 86 F6 | 	negc	local04, #1
22870     16 2B 02 F6 | 	mov	local03, local04
22874     16 2F 02 F1 | 	add	local05, local04
22878                 | LR__2741
22878                 | '    fastline(0,1023,i,write_background)    
22878     45 E4 05 F1 | 	add	objptr, #69
2287c     F2 18 02 FB | 	rdlong	arg04, objptr
22880     45 E4 85 F1 | 	sub	objptr, #69
22884     00 12 06 F6 | 	mov	arg01, #0
22888     09 14 CE F9 | 	bmask	arg02, #9
2288c     14 17 02 F6 | 	mov	arg03, local02
22890     08 ED BF FD | 	call	#_hg010b_spin2_fastline
22894     15 29 02 F1 | 	add	local02, local03
22898     17 29 0A F2 | 	cmp	local02, local05 wz
2289c     D8 FF 9F 5D |  if_ne	jmp	#LR__2741
228a0                 | '    
228a0                 | ' repeat i from 35 to start
228a0     23 28 06 F6 | 	mov	local02, #35
228a4     23 26 56 F2 | 	cmps	local01, #35 wc
228a8     01 2C 86 F6 | 	negc	local04, #1
228ac     13 2F 02 F6 | 	mov	local05, local01
228b0     16 2F 02 F1 | 	add	local05, local04
228b4                 | LR__2742
228b4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
228b4     F6 03 00 FF 
228b8     00 12 06 F6 | 	mov	arg01, ##519168
228bc     F9 E4 05 F1 | 	add	objptr, #249
228c0     F2 2A 02 FB | 	rdlong	local03, objptr
228c4     15 13 82 F1 | 	sub	arg01, local03
228c8     F5 E4 85 F1 | 	sub	objptr, #245
228cc     F2 14 02 FB | 	rdlong	arg02, objptr
228d0     14 2B 02 F6 | 	mov	local03, local02
228d4     07 2A 66 F0 | 	shl	local03, #7
228d8     15 15 02 F1 | 	add	arg02, local03
228dc     80 16 06 F6 | 	mov	arg03, #128
228e0     0B 00 00 FF 
228e4     C8 E4 05 F1 | 	add	objptr, ##5832
228e8     E8 07 B0 FD | 	call	#_psram_spin2_read1
228ec                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
228ec     F6 03 00 FF 
228f0     00 12 06 F6 | 	mov	arg01, ##519168
228f4     0A 00 00 FF 
228f8     D3 E5 85 F1 | 	sub	objptr, ##5587
228fc     F2 2A 02 FB | 	rdlong	local03, objptr
22900     15 13 82 F1 | 	sub	arg01, local03
22904     F5 E4 85 F1 | 	sub	objptr, #245
22908     F2 14 02 FB | 	rdlong	arg02, objptr
2290c     14 2B 02 F6 | 	mov	local03, local02
22910     01 2A 06 F1 | 	add	local03, #1
22914     07 2A 66 F0 | 	shl	local03, #7
22918     15 15 02 F1 | 	add	arg02, local03
2291c     80 16 06 F6 | 	mov	arg03, #128
22920     0B 00 00 FF 
22924     C8 E4 05 F1 | 	add	objptr, ##5832
22928     44 08 B0 FD | 	call	#_psram_spin2_write
2292c     0B 00 00 FF 
22930     CC E4 85 F1 | 	sub	objptr, ##5836
22934     16 29 02 F1 | 	add	local02, local04
22938     17 29 0A F2 | 	cmp	local02, local05 wz
2293c     74 FF 9F 5D |  if_ne	jmp	#LR__2742
22940                 | ' repeat i from 0 to 127
22940     00 28 06 F6 | 	mov	local02, #0
22944                 | LR__2743
22944                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
22944     04 E4 05 F1 | 	add	objptr, #4
22948     F2 12 02 FB | 	rdlong	arg01, objptr
2294c     13 2F 02 F6 | 	mov	local05, local01
22950     07 2E 66 F0 | 	shl	local05, #7
22954     17 13 02 F1 | 	add	arg01, local05
22958     14 13 02 F1 | 	add	arg01, local02
2295c     20 14 06 F6 | 	mov	arg02, #32
22960     01 16 06 F6 | 	mov	arg03, #1
22964     00 18 06 F6 | 	mov	arg04, #0
22968     01 1A 06 F6 | 	mov	arg05, #1
2296c     0B 00 00 FF 
22970     C8 E4 05 F1 | 	add	objptr, ##5832
22974     94 08 B0 FD | 	call	#_psram_spin2_fill
22978     0B 00 00 FF 
2297c     CC E4 85 F1 | 	sub	objptr, ##5836
22980     01 28 06 F1 | 	add	local02, #1
22984     80 28 56 F2 | 	cmps	local02, #128 wc
22988     B8 FF 9F CD |  if_b	jmp	#LR__2743
2298c     A7 F0 03 F6 | 	mov	ptra, fp
22990     B2 00 A0 FD | 	call	#popregs_
22994                 | _hg010b_spin2_scrolldown_ret
22994     2D 00 64 FD | 	ret
22998                 | 
22998                 | ' 
22998                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
22998                 | ' 
22998                 | ' pub crlf()
22998                 | _hg010b_spin2_crlf
22998                 | ' 
22998                 | ' cursor_x:=leading_spaces*2
22998     01 00 00 FF 
2299c     B6 E4 05 F1 | 	add	objptr, ##694
229a0     F2 16 02 FB | 	rdlong	arg03, objptr
229a4     01 16 66 F0 | 	shl	arg03, #1
229a8     01 00 00 FF 
229ac     7A E4 85 F1 | 	sub	objptr, ##634
229b0     F2 16 52 FC | 	wrword	arg03, objptr
229b4                 | ' cursor_y+=1
229b4     02 E4 05 F1 | 	add	objptr, #2
229b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
229bc     01 16 06 F1 | 	add	arg03, #1
229c0     F2 16 42 FC | 	wrbyte	arg03, objptr
229c4                 | ' if cursor_y>st_lines-1
229c4     C3 E4 05 F1 | 	add	objptr, #195
229c8     F2 16 02 FB | 	rdlong	arg03, objptr
229cc     01 16 86 F1 | 	sub	arg03, #1
229d0     C3 E4 85 F1 | 	sub	objptr, #195
229d4     F2 14 C2 FA | 	rdbyte	arg02, objptr
229d8     3E E4 85 F1 | 	sub	objptr, #62
229dc     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
229e0     2C 00 90 ED |  if_be	jmp	#LR__2750
229e4                 | '   scrollup2()
229e4     00 12 06 F6 | 	mov	arg01, #0
229e8     01 00 00 FF 
229ec     58 14 06 F6 | 	mov	arg02, ##600
229f0     10 16 06 F6 | 	mov	arg03, #16
229f4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
229f8                 | '   cursor_y:=st_lines-1
229f8     01 E5 05 F1 | 	add	objptr, #257
229fc     F2 16 02 FB | 	rdlong	arg03, objptr
22a00     01 16 86 F1 | 	sub	arg03, #1
22a04     C3 E4 85 F1 | 	sub	objptr, #195
22a08     F2 16 42 FC | 	wrbyte	arg03, objptr
22a0c     3E E4 85 F1 | 	sub	objptr, #62
22a10                 | LR__2750
22a10                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
22a10     3C E4 05 F1 | 	add	objptr, #60
22a14     F2 14 E2 FA | 	rdword	arg02, objptr
22a18     02 14 66 F0 | 	shl	arg02, #2
22a1c     02 E4 05 F1 | 	add	objptr, #2
22a20     F2 16 C2 FA | 	rdbyte	arg03, objptr
22a24     3E E4 85 F1 | 	sub	objptr, #62
22a28     04 16 66 F0 | 	shl	arg03, #4
22a2c     04 16 06 F1 | 	add	arg03, #4
22a30     11 12 06 F6 | 	mov	arg01, #17
22a34     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
22a38                 | _hg010b_spin2_crlf_ret
22a38     2D 00 64 FD | 	ret
22a3c                 | 
22a3c                 | ' 
22a3c                 | ' 
22a3c                 | ' '*************************************************************************
22a3c                 | ' '                                                                        *
22a3c                 | ' '  Conversions                                                           *
22a3c                 | ' '                                                                        *
22a3c                 | ' '*************************************************************************
22a3c                 | ' 
22a3c                 | ' ''---------- Convert a integer to dec string, return a pointer
22a3c                 | ' 
22a3c                 | ' pub inttostr(i):result |q,pos,k,j
22a3c                 | _hg010b_spin2_inttostr
22a3c     03 4A 05 F6 | 	mov	COUNT_, #3
22a40     A8 00 A0 FD | 	call	#pushregs_
22a44     09 27 0A F6 | 	mov	local01, arg01 wz
22a48                 | ' 
22a48                 | ' j:=i
22a48                 | ' pos:=10
22a48     0A 28 06 F6 | 	mov	local02, #10
22a4c                 | ' k:=0
22a4c     00 2A 06 F6 | 	mov	local03, #0
22a50                 | ' 
22a50                 | ' if (j==0)
22a50     18 00 90 5D |  if_ne	jmp	#LR__2760
22a54                 | '   n_string[0]:=48
22a54     4D E4 05 F1 | 	add	objptr, #77
22a58     F2 60 48 FC | 	wrbyte	#48, objptr
22a5c                 | '   n_string[1]:=0
22a5c     01 E4 05 F1 | 	add	objptr, #1
22a60     F2 00 48 FC | 	wrbyte	#0, objptr
22a64     4E E4 85 F1 | 	sub	objptr, #78
22a68     C4 00 90 FD | 	jmp	#LR__2767
22a6c                 | LR__2760
22a6c                 | ' 
22a6c                 | ' else
22a6c                 | '   if (j<0)
22a6c     13 27 52 F6 | 	abs	local01, local01 wc
22a70                 | '     j:=0-j
22a70                 | '     k:=45
22a70     2D 2A 06 C6 |  if_b	mov	local03, #45
22a74                 | ' 
22a74                 | '   n_string[11]:=0
22a74     58 E4 05 F1 | 	add	objptr, #88
22a78     F2 00 48 FC | 	wrbyte	#0, objptr
22a7c     58 E4 85 F1 | 	sub	objptr, #88
22a80     97 24 48 FB | 	callpa	#(@LR__2762-@LR__2761)>>2,fcache_load_ptr_
22a84                 | '   repeat while (pos>-1)
22a84                 | LR__2761
22a84     00 28 56 F2 | 	cmps	local02, #0 wc
22a88     40 00 90 CD |  if_b	jmp	#LR__2763
22a8c     13 FB 51 F6 | 	abs	result1, local01 wc
22a90     0A FA 15 FD | 	qdiv	result1, #10
22a94                 | '     q:=j//10
22a94     19 FA 61 FD | 	getqy	result1
22a98     FD FA 81 F6 | 	negc	result1, result1
22a9c     13 27 52 F6 | 	abs	local01, local01 wc
22aa0     0A 26 16 FD | 	qdiv	local01, #10
22aa4                 | '     q:=48+q
22aa4     30 FA 05 F1 | 	add	result1, #48
22aa8                 | '     n_string[pos]:=q
22aa8     14 27 02 F6 | 	mov	local01, local02
22aac     4D E4 05 F1 | 	add	objptr, #77
22ab0     F2 26 02 F1 | 	add	local01, objptr
22ab4     13 FB 41 FC | 	wrbyte	result1, local01
22ab8                 | '     j:=j/10
22ab8     4D E4 85 F1 | 	sub	objptr, #77
22abc                 | '     pos-=1
22abc     01 28 86 F1 | 	sub	local02, #1
22ac0     18 26 62 FD | 	getqx	local01
22ac4     13 27 82 F6 | 	negc	local01, local01
22ac8     B8 FF 9F FD | 	jmp	#LR__2761
22acc                 | LR__2762
22acc                 | LR__2763
22acc                 | '   repeat while n_string[0]==48
22acc                 | LR__2764
22acc     4D E4 05 F1 | 	add	objptr, #77
22ad0     F2 16 C2 FA | 	rdbyte	arg03, objptr
22ad4     4D E4 85 F1 | 	sub	objptr, #77
22ad8     30 16 0E F2 | 	cmp	arg03, #48 wz
22adc     20 00 90 5D |  if_ne	jmp	#LR__2765
22ae0                 | '     bytemove(@n_string,@n_string+1,12)
22ae0     4D E4 05 F1 | 	add	objptr, #77
22ae4     F2 12 02 F6 | 	mov	arg01, objptr
22ae8     F2 14 02 F6 | 	mov	arg02, objptr
22aec     4D E4 85 F1 | 	sub	objptr, #77
22af0     01 14 06 F1 | 	add	arg02, #1
22af4     0C 16 06 F6 | 	mov	arg03, #12
22af8     38 11 B0 FD | 	call	#__system____builtin_memmove
22afc     CC FF 9F FD | 	jmp	#LR__2764
22b00                 | LR__2765
22b00                 | ' 
22b00                 | '   if k==45
22b00     2D 2A 0E F2 | 	cmp	local03, #45 wz
22b04     28 00 90 5D |  if_ne	jmp	#LR__2766
22b08                 | '      bytemove(@n_string+1,@n_string,12)
22b08     4D E4 05 F1 | 	add	objptr, #77
22b0c     F2 12 02 F6 | 	mov	arg01, objptr
22b10     01 12 06 F1 | 	add	arg01, #1
22b14     F2 14 02 F6 | 	mov	arg02, objptr
22b18     4D E4 85 F1 | 	sub	objptr, #77
22b1c     0C 16 06 F6 | 	mov	arg03, #12
22b20     10 11 B0 FD | 	call	#__system____builtin_memmove
22b24                 | '      n_string[0]:=k
22b24     4D E4 05 F1 | 	add	objptr, #77
22b28     F2 2A 42 FC | 	wrbyte	local03, objptr
22b2c     4D E4 85 F1 | 	sub	objptr, #77
22b30                 | LR__2766
22b30                 | LR__2767
22b30                 | ' 
22b30                 | ' q:=@n_string
22b30     4D E4 05 F1 | 	add	objptr, #77
22b34     F2 FA 01 F6 | 	mov	result1, objptr
22b38     4D E4 85 F1 | 	sub	objptr, #77
22b3c                 | ' return q
22b3c     A7 F0 03 F6 | 	mov	ptra, fp
22b40     B2 00 A0 FD | 	call	#popregs_
22b44                 | _hg010b_spin2_inttostr_ret
22b44     2D 00 64 FD | 	ret
22b48                 | 
22b48                 | ' 
22b48                 | ' '**********************************************************************************
22b48                 | ' '
22b48                 | ' '        Blitting
22b48                 | ' '
22b48                 | ' '**********************************************************************************
22b48                 | ' 
22b48                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
22b48                 | _hg010b_spin2_blit
22b48     18 4A 05 F6 | 	mov	COUNT_, #24
22b4c     A8 00 A0 FD | 	call	#pushregs_
22b50     09 27 02 F6 | 	mov	local01, arg01
22b54     0A 29 02 F6 | 	mov	local02, arg02
22b58     0B 2B 02 F6 | 	mov	local03, arg03
22b5c     0C 2D 02 F6 | 	mov	local04, arg04
22b60     0D 2F 02 F6 | 	mov	local05, arg05
22b64     0E 31 02 F6 | 	mov	local06, arg06
22b68     0F 33 02 F6 | 	mov	local07, arg07
22b6c     10 35 02 F6 | 	mov	local08, arg08
22b70     11 37 02 F6 | 	mov	local09, arg09
22b74     12 39 02 F6 | 	mov	local10, arg10
22b78                 | ' 
22b78                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
22b78     00 04 00 FF 
22b7c     00 26 56 F2 | 	cmps	local01, ##524288 wc
22b80     00 04 00 3F 
22b84     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
22b88     7C 01 90 CD |  if_b	jmp	#LR__2774
22b8c     16 29 5A F2 | 	cmps	local02, local04 wcz
22b90     14 3B 02 16 |  if_a	mov	local11, local02
22b94     16 29 02 16 |  if_a	mov	local02, local04
22b98     1D 2D 02 16 |  if_a	mov	local04, local11
22b9c     17 2B 5A F2 | 	cmps	local03, local05 wcz
22ba0     15 3B 02 16 |  if_a	mov	local11, local03
22ba4     17 2B 02 16 |  if_a	mov	local03, local05
22ba8     18 2B 02 FD | 	qmul	local03, local06
22bac                 | '   if x1a>x2a
22bac                 | '     x1a,x2a:=x2a,x1a
22bac                 | '   if y1a>y2a
22bac                 | '     y1a,y2a:=y2a,y1a  
22bac     1D 2F 02 16 |  if_a	mov	local05, local11
22bb0                 | ' 
22bb0                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
22bb0     19 3D 02 F6 | 	mov	local12, local07
22bb4     14 3D 02 F1 | 	add	local12, local02
22bb8     18 3A 62 FD | 	getqx	local11
22bbc     1C 37 02 FD | 	qmul	local09, local10
22bc0     1D 3D 02 F1 | 	add	local12, local11
22bc4     13 3F 02 F6 | 	mov	local13, local01
22bc8     1A 3F 02 F1 | 	add	local13, local08
22bcc     18 3A 62 FD | 	getqx	local11
22bd0     1D 3F 02 F1 | 	add	local13, local11
22bd4     1F 3D 5A F2 | 	cmps	local12, local13 wcz
22bd8     98 00 90 ED |  if_be	jmp	#LR__2771
22bdc                 | '     repeat y from y1a to y2a
22bdc     15 41 02 F6 | 	mov	local14, local03
22be0     15 2F 52 F2 | 	cmps	local05, local03 wc
22be4     01 42 86 F6 | 	negc	local15, #1
22be8     17 45 02 F6 | 	mov	local16, local05
22bec     21 45 02 F1 | 	add	local16, local15
22bf0     0B 00 00 FF 
22bf4     CC E4 05 F1 | 	add	objptr, ##5836
22bf8                 | LR__2770
22bf8     18 41 02 FD | 	qmul	local14, local06
22bfc                 | '   '    writeln(string("I am here"))
22bfc                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
22bfc     13 15 02 F6 | 	mov	arg02, local01
22c00     16 17 02 F6 | 	mov	arg03, local04
22c04     14 17 82 F1 | 	sub	arg03, local02
22c08     01 16 06 F1 | 	add	arg03, #1
22c0c     F6 03 00 FF 
22c10     00 12 06 F6 | 	mov	arg01, ##519168
22c14     18 3E 62 FD | 	getqx	local13
22c18     1F 15 02 F1 | 	add	arg02, local13
22c1c     14 15 02 F1 | 	add	arg02, local02
22c20     B0 04 B0 FD | 	call	#_psram_spin2_read1
22c24     1B 3F 02 F6 | 	mov	local13, local09
22c28     15 3F 82 F1 | 	sub	local13, local03
22c2c     20 3F 02 F1 | 	add	local13, local14
22c30     1C 3F 02 FD | 	qmul	local13, local10
22c34                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
22c34     19 15 02 F6 | 	mov	arg02, local07
22c38     16 17 02 F6 | 	mov	arg03, local04
22c3c     14 17 82 F1 | 	sub	arg03, local02
22c40     01 16 06 F1 | 	add	arg03, #1
22c44     F6 03 00 FF 
22c48     00 12 06 F6 | 	mov	arg01, ##519168
22c4c     18 3E 62 FD | 	getqx	local13
22c50     1F 15 02 F1 | 	add	arg02, local13
22c54     1A 15 02 F1 | 	add	arg02, local08
22c58     14 05 B0 FD | 	call	#_psram_spin2_write
22c5c     21 41 02 F1 | 	add	local14, local15
22c60     22 41 0A F2 | 	cmp	local14, local16 wz
22c64     90 FF 9F 5D |  if_ne	jmp	#LR__2770
22c68     0B 00 00 FF 
22c6c     CC E4 85 F1 | 	sub	objptr, ##5836
22c70     94 00 90 FD | 	jmp	#LR__2773
22c74                 | LR__2771
22c74                 | '   else
22c74                 | '     repeat y from y2a to y1a
22c74     17 41 02 F6 | 	mov	local14, local05
22c78     17 2B 52 F2 | 	cmps	local03, local05 wc
22c7c     01 46 86 F6 | 	negc	local17, #1
22c80     15 49 02 F6 | 	mov	local18, local03
22c84     23 49 02 F1 | 	add	local18, local17
22c88     0B 00 00 FF 
22c8c     CC E4 05 F1 | 	add	objptr, ##5836
22c90                 | LR__2772
22c90     18 41 02 FD | 	qmul	local14, local06
22c94                 | '  '     writeln(string("I am there"))
22c94                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
22c94     13 15 02 F6 | 	mov	arg02, local01
22c98     16 17 02 F6 | 	mov	arg03, local04
22c9c     14 17 82 F1 | 	sub	arg03, local02
22ca0     01 16 06 F1 | 	add	arg03, #1
22ca4     F6 03 00 FF 
22ca8     00 12 06 F6 | 	mov	arg01, ##519168
22cac     18 44 62 FD | 	getqx	local16
22cb0     22 15 02 F1 | 	add	arg02, local16
22cb4     14 15 02 F1 | 	add	arg02, local02
22cb8     18 04 B0 FD | 	call	#_psram_spin2_read1
22cbc     1B 45 02 F6 | 	mov	local16, local09
22cc0     15 45 82 F1 | 	sub	local16, local03
22cc4     20 45 02 F1 | 	add	local16, local14
22cc8     1C 45 02 FD | 	qmul	local16, local10
22ccc                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
22ccc     19 15 02 F6 | 	mov	arg02, local07
22cd0     16 17 02 F6 | 	mov	arg03, local04
22cd4     14 17 82 F1 | 	sub	arg03, local02
22cd8     01 16 06 F1 | 	add	arg03, #1
22cdc     F6 03 00 FF 
22ce0     00 12 06 F6 | 	mov	arg01, ##519168
22ce4     18 44 62 FD | 	getqx	local16
22ce8     22 15 02 F1 | 	add	arg02, local16
22cec     1A 15 02 F1 | 	add	arg02, local08
22cf0     7C 04 B0 FD | 	call	#_psram_spin2_write
22cf4     23 41 02 F1 | 	add	local14, local17
22cf8     24 41 0A F2 | 	cmp	local14, local18 wz
22cfc     90 FF 9F 5D |  if_ne	jmp	#LR__2772
22d00     0B 00 00 FF 
22d04     CC E4 85 F1 | 	sub	objptr, ##5836
22d08                 | LR__2773
22d08                 | LR__2774
22d08                 | '     
22d08                 | ' if ((f>=$80000) && (t<$80000)) 
22d08     00 04 00 FF 
22d0c     00 26 56 F2 | 	cmps	local01, ##524288 wc
22d10     80 00 90 CD |  if_b	jmp	#LR__2776
22d14     00 04 00 FF 
22d18     00 32 56 F2 | 	cmps	local07, ##524288 wc
22d1c     74 00 90 3D |  if_ae	jmp	#LR__2776
22d20                 | '   repeat y from y1a to y2a
22d20     15 41 02 F6 | 	mov	local14, local03
22d24     15 2F 52 F2 | 	cmps	local05, local03 wc
22d28     01 4A 86 F6 | 	negc	local19, #1
22d2c     17 4D 02 F6 | 	mov	local20, local05
22d30     25 4D 02 F1 | 	add	local20, local19
22d34     0B 00 00 FF 
22d38     CC E4 05 F1 | 	add	objptr, ##5836
22d3c                 | LR__2775
22d3c     1B 49 02 F6 | 	mov	local18, local09
22d40     15 49 82 F1 | 	sub	local18, local03
22d44     20 49 02 F1 | 	add	local18, local14
22d48     1C 49 02 FD | 	qmul	local18, local10
22d4c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
22d4c     19 13 02 F6 | 	mov	arg01, local07
22d50     18 48 62 FD | 	getqx	local18
22d54     18 41 02 FD | 	qmul	local14, local06
22d58     24 13 02 F1 | 	add	arg01, local18
22d5c     1A 13 02 F1 | 	add	arg01, local08
22d60     13 15 02 F6 | 	mov	arg02, local01
22d64     16 17 02 F6 | 	mov	arg03, local04
22d68     14 17 82 F1 | 	sub	arg03, local02
22d6c     01 16 06 F1 | 	add	arg03, #1
22d70     18 48 62 FD | 	getqx	local18
22d74     24 15 02 F1 | 	add	arg02, local18
22d78     14 15 02 F1 | 	add	arg02, local02
22d7c     54 03 B0 FD | 	call	#_psram_spin2_read1
22d80     25 41 02 F1 | 	add	local14, local19
22d84     26 41 0A F2 | 	cmp	local14, local20 wz
22d88     B0 FF 9F 5D |  if_ne	jmp	#LR__2775
22d8c     0B 00 00 FF 
22d90     CC E4 85 F1 | 	sub	objptr, ##5836
22d94                 | LR__2776
22d94                 | '     
22d94                 | ' if ((f<$80000) && (t>=$80000)) 
22d94     00 04 00 FF 
22d98     00 26 56 F2 | 	cmps	local01, ##524288 wc
22d9c     84 00 90 3D |  if_ae	jmp	#LR__2778
22da0     00 04 00 FF 
22da4     00 32 56 F2 | 	cmps	local07, ##524288 wc
22da8     78 00 90 CD |  if_b	jmp	#LR__2778
22dac                 | '   t:=t & $FFFFFFF
22dac     7C 32 06 F4 | 	bitl	local07, #124
22db0                 | '   repeat y from y1a to y2a
22db0     15 41 02 F6 | 	mov	local14, local03
22db4     15 2F 52 F2 | 	cmps	local05, local03 wc
22db8     01 4E 86 F6 | 	negc	local21, #1
22dbc     17 51 02 F6 | 	mov	local22, local05
22dc0     27 51 02 F1 | 	add	local22, local21
22dc4     0B 00 00 FF 
22dc8     CC E4 05 F1 | 	add	objptr, ##5836
22dcc                 | LR__2777
22dcc     18 41 02 FD | 	qmul	local14, local06
22dd0                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
22dd0     13 13 02 F6 | 	mov	arg01, local01
22dd4     1B 4D 02 F6 | 	mov	local20, local09
22dd8     15 4D 82 F1 | 	sub	local20, local03
22ddc     20 4D 02 F1 | 	add	local20, local14
22de0     18 4A 62 FD | 	getqx	local19
22de4     1C 4D 02 FD | 	qmul	local20, local10
22de8     25 13 02 F1 | 	add	arg01, local19
22dec     14 13 02 F1 | 	add	arg01, local02
22df0     19 15 02 F6 | 	mov	arg02, local07
22df4     16 17 02 F6 | 	mov	arg03, local04
22df8     14 17 82 F1 | 	sub	arg03, local02
22dfc     01 16 06 F1 | 	add	arg03, #1
22e00     18 4C 62 FD | 	getqx	local20
22e04     26 15 02 F1 | 	add	arg02, local20
22e08     1A 15 02 F1 | 	add	arg02, local08
22e0c     60 03 B0 FD | 	call	#_psram_spin2_write
22e10     27 41 02 F1 | 	add	local14, local21
22e14     28 41 0A F2 | 	cmp	local14, local22 wz
22e18     B0 FF 9F 5D |  if_ne	jmp	#LR__2777
22e1c     0B 00 00 FF 
22e20     CC E4 85 F1 | 	sub	objptr, ##5836
22e24                 | LR__2778
22e24                 | '     
22e24                 | ' if ((f<$80000) && (t<$80000)) 
22e24     00 04 00 FF 
22e28     00 26 56 F2 | 	cmps	local01, ##524288 wc
22e2c     00 04 00 CF 
22e30     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
22e34     64 00 90 3D |  if_ae	jmp	#LR__2780
22e38                 | '   repeat y from y1a to y2a
22e38     15 41 02 F6 | 	mov	local14, local03
22e3c     15 2F 52 F2 | 	cmps	local05, local03 wc
22e40     01 52 86 F6 | 	negc	local23, #1
22e44     17 55 02 F6 | 	mov	local24, local05
22e48     29 55 02 F1 | 	add	local24, local23
22e4c                 | LR__2779
22e4c     18 41 02 FD | 	qmul	local14, local06
22e50                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
22e50     13 13 02 F6 | 	mov	arg01, local01
22e54     1B 51 02 F6 | 	mov	local22, local09
22e58     15 51 82 F1 | 	sub	local22, local03
22e5c     20 51 02 F1 | 	add	local22, local14
22e60     18 4E 62 FD | 	getqx	local21
22e64     1C 51 02 FD | 	qmul	local22, local10
22e68     27 13 02 F1 | 	add	arg01, local21
22e6c     14 13 02 F1 | 	add	arg01, local02
22e70     19 15 02 F6 | 	mov	arg02, local07
22e74     16 17 02 F6 | 	mov	arg03, local04
22e78     14 17 82 F1 | 	sub	arg03, local02
22e7c     01 16 06 F1 | 	add	arg03, #1
22e80     18 50 62 FD | 	getqx	local22
22e84     28 15 02 F1 | 	add	arg02, local22
22e88     1A 15 02 F1 | 	add	arg02, local08
22e8c     A4 0D B0 FD | 	call	#__system____builtin_memmove
22e90     29 41 02 F1 | 	add	local14, local23
22e94     2A 41 0A F2 | 	cmp	local14, local24 wz
22e98     B0 FF 9F 5D |  if_ne	jmp	#LR__2779
22e9c                 | LR__2780
22e9c     A7 F0 03 F6 | 	mov	ptra, fp
22ea0     B2 00 A0 FD | 	call	#popregs_
22ea4                 | _hg010b_spin2_blit_ret
22ea4     2D 00 64 FD | 	ret
22ea8                 | 
22ea8                 | ' 
22ea8                 | ' '..............................................................................
22ea8                 | ' 
22ea8                 | ' {{
22ea8                 | ' }}
22ea8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
22ea8                 | _psram_spin2_startx
22ea8     04 4A 05 F6 | 	mov	COUNT_, #4
22eac     A8 00 A0 FD | 	call	#pushregs_
22eb0     09 27 02 F6 | 	mov	local01, arg01
22eb4     0B 29 02 F6 | 	mov	local02, arg03
22eb8     0C 2B 02 F6 | 	mov	local03, arg04
22ebc                 | '     stop() ' restart driver if required
22ebc     54 01 B0 FD | 	call	#_psram_spin2_stop
22ec0     00 26 0E F2 | 	cmp	local01, #0 wz
22ec4     14 26 06 AB |  if_e	rdlong	local01, #20
22ec8     13 15 52 F6 | 	abs	arg02, local01 wc
22ecc     A1 07 00 FF 
22ed0     40 14 16 FD | 	qdiv	arg02, ##1000000
22ed4                 | ' 
22ed4                 | '     ' use current frequency if none specified
22ed4                 | ' 
22ed4                 | '     if freq == 0 
22ed4                 | '         freq := clkfreq 
22ed4                 | ' 
22ed4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
22ed4                 | ' 
22ed4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
22ed4                 | '     if burst < 0
22ed4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
22ed4     18 14 62 FD | 	getqx	arg02
22ed8     0A 19 82 F6 | 	negc	arg04, arg02
22edc     03 18 66 F0 | 	shl	arg04, #3
22ee0     84 18 86 F1 | 	sub	arg04, #132
22ee4     04 18 46 F0 | 	shr	arg04, #4
22ee8     04 18 66 F0 | 	shl	arg04, #4
22eec     00 18 56 F2 | 	cmps	arg04, #0 wc
22ef0     0E FA 65 C6 |  if_b	neg	result1, #14
22ef4     10 01 90 CD |  if_b	jmp	#LR__2793
22ef8                 | ' 
22ef8                 | '     ' compute the input delay
22ef8                 | ' 
22ef8                 | '     if delay <= 0
22ef8     01 28 56 F2 | 	cmps	local02, #1 wc
22efc     10 00 90 3D |  if_ae	jmp	#LR__2790
22f00                 | '         delay := lookupDelay(freq)
22f00     13 13 02 F6 | 	mov	arg01, local01
22f04     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
22f08     FD 28 02 F6 | 	mov	local02, result1
22f0c     04 00 90 FD | 	jmp	#LR__2791
22f10                 | LR__2790
22f10                 | '     else
22f10                 | '         delay <#= $f ' limit to 15
22f10     0F 28 66 F3 | 	fles	local02, #15
22f14                 | LR__2791
22f14                 | ' 
22f14                 | '     ' create our lock
22f14                 | ' 
22f14                 | '     driverlock := LOCKNEW()  
22f14     00 FA 05 F6 | 	mov	result1, #0
22f18     04 FA 61 FD | 	locknew	result1
22f1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
22f20     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
22f24                 | '     if driverlock == -1
22f24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
22f28     FF FF 7F FF 
22f2c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
22f30                 | '         return ERR_NO_LOCK
22f30     1A FA 65 A6 |  if_e	neg	result1, #26
22f34     D0 00 90 AD |  if_e	jmp	#LR__2793
22f38                 | ' 
22f38                 | '     ' patch in the proper data and HUB addresses to the startup structure
22f38                 | ' 
22f38                 | '     long[@startupData][0]:=clkfreq
22f38     14 26 06 FB | 	rdlong	local01, #20
22f3c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
22f40     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
22f44                 | ' '    long[@startupData][1]:=$1000_0000
22f44                 | '     long[@startupData][5]:=@deviceData
22f44     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
22f48     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
22f4c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
22f50     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
22f54     14 14 06 F1 | 	add	arg02, #20
22f58     0A 27 62 FC | 	wrlong	local01, arg02
22f5c                 | '     long[@startupData][6]:=@qosData
22f5c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
22f60     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
22f64     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
22f68     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
22f6c     18 14 06 F1 | 	add	arg02, #24
22f70     0A 27 62 FC | 	wrlong	local01, arg02
22f74                 | '     long[@startupData][7]:=$7FF00
22f74     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
22f78     1C 26 06 F1 | 	add	local01, #28
22f7c     FF 03 80 FF 
22f80     13 01 6A FC | 	wrlong	##524032, local01
22f84                 | ' 
22f84                 | '     ' setup some default bank and QoS parameter values
22f84                 | ' 
22f84                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
22f84     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
22f88     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
22f8c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
22f90     10 18 66 F0 | 	shl	arg04, #16
22f94     0C 28 66 F0 | 	shl	local02, #12
22f98     14 19 42 F5 | 	or	arg04, local02
22f9c     18 18 46 F5 | 	or	arg04, #24
22fa0     0C 15 02 F6 | 	mov	arg02, arg04
22fa4     02 16 06 F6 | 	mov	arg03, #2
22fa8     A0 00 A0 FD | 	call	#\builtin_longfill_
22fac                 | '     longfill(@qosData, $FFFF0000, 8)
22fac     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
22fb0     07 16 06 F6 | 	mov	arg03, #7
22fb4     28 16 62 FD | 	setq	arg03
22fb8     80 FF FF FF 
22fbc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
22fc0                 | ' 
22fc0                 | '     ' get the address of the PSRAM memory driver so we can start it
22fc0                 | ' 
22fc0                 | '     driverAddr:= driver.getDriverAddr()
22fc0                 | '     return @driver_start
22fc0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
22fc4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
22fc8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
22fcc                 | ' 
22fcc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
22fcc                 | ' 
22fcc                 | '     if desiredcog < 0
22fcc     00 2A 56 F2 | 	cmps	local03, #0 wc
22fd0                 | '         desiredcog := NEWCOG
22fd0     10 2A 06 C6 |  if_b	mov	local03, #16
22fd4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
22fd4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
22fd8     15 2D 02 F6 | 	mov	local04, local03
22fdc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
22fe0     0A 2D F2 FC | 	coginit	local04, arg02 wc
22fe4     01 2C 66 C6 |  if_b	neg	local04, #1
22fe8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
22fec     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
22ff0                 | '     repeat until long[@startupData] == 0 
22ff0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
22ff4                 | LR__2792
22ff4     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
22ff8     F8 FF 9F 5D |  if_ne	jmp	#LR__2792
22ffc                 | ' 
22ffc                 | '     return drivercog
22ffc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
23000     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
23004     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23008                 | LR__2793
23008     A7 F0 03 F6 | 	mov	ptra, fp
2300c     B2 00 A0 FD | 	call	#popregs_
23010                 | _psram_spin2_startx_ret
23010     2D 00 64 FD | 	ret
23014                 | 
23014                 | ' 
23014                 | ' '..............................................................................
23014                 | ' 
23014                 | ' {{
23014                 | ' }}
23014                 | ' PUB stop() : i
23014                 | _psram_spin2_stop
23014     00 00 06 F6 | 	mov	_var01, #0
23018                 | '     if drivercog <> -1
23018     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2301c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23020     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23024     FF FF 7F FF 
23028     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
2302c     70 00 90 AD |  if_e	jmp	#LR__2803
23030                 | '         cogstop(drivercog) ' a rather brutal stop
23030     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23034     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23038     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2303c     03 12 62 FD | 	cogstop	arg01
23040     97 26 48 FB | 	callpa	#(@LR__2802-@LR__2800)>>2,fcache_load_ptr_
23044                 | '         repeat i from 0 to 7
23044                 | LR__2800
23044                 | '             if long[$7FF00][i*3] < 0
23044     00 FB 01 F6 | 	mov	result1, _var01
23048     01 FA 65 F0 | 	shl	result1, #1
2304c     00 FB 01 F1 | 	add	result1, _var01
23050     02 FA 65 F0 | 	shl	result1, #2
23054     FF 03 00 FF 
23058     00 FB 05 F1 | 	add	result1, ##524032
2305c     FD FA 01 FB | 	rdlong	result1, result1
23060     00 FA 55 F2 | 	cmps	result1, #0 wc
23064     1C 00 90 3D |  if_ae	jmp	#LR__2801
23068                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
23068     00 FB 01 F6 | 	mov	result1, _var01
2306c     01 FA 65 F0 | 	shl	result1, #1
23070     00 FB 01 F1 | 	add	result1, _var01
23074     02 FA 65 F0 | 	shl	result1, #2
23078     FF 03 00 FF 
2307c     00 FB 05 F1 | 	add	result1, ##524032
23080     FD 20 68 FC | 	wrlong	#16, result1
23084                 | LR__2801
23084     01 00 06 F1 | 	add	_var01, #1
23088     08 00 56 F2 | 	cmps	_var01, #8 wc
2308c     B4 FF 9F CD |  if_b	jmp	#LR__2800
23090                 | LR__2802
23090                 | '         drivercog := -1
23090     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23094     FF FF FF FF 
23098     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2309c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
230a0                 | LR__2803
230a0                 | '     if driverlock <> -1
230a0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
230a4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
230a8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
230ac     FF FF 7F FF 
230b0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
230b4                 | '         LOCKRET(driverlock)
230b4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
230b8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
230bc     05 12 62 5D |  if_ne	lockret	arg01
230c0                 | '         driverlock := -1
230c0     FF FF FF 5F 
230c4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
230c8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
230cc     00 FB 01 F6 | 	mov	result1, _var01
230d0                 | _psram_spin2_stop_ret
230d0     2D 00 64 FD | 	ret
230d4                 | 
230d4                 | ' 
230d4                 | ' '..............................................................................
230d4                 | ' 
230d4                 | ' {{
230d4                 | ' }}
230d4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
230d4                 | _psram_spin2_read1
230d4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
230d4                 | '     if drivercog == -1 ' driver must be running
230d4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
230d8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
230dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
230e0     FF FF 7F FF 
230e4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
230e8                 | '         return ERR_INACTIVE
230e8     0F FA 65 A6 |  if_e	neg	result1, #15
230ec     7C 00 90 AD |  if_e	jmp	#LR__2811
230f0                 | '     if count == 0 ' don't even bother reading
230f0     00 16 0E F2 | 	cmp	arg03, #0 wz
230f4                 | '         return 0
230f4     00 FA 05 A6 |  if_e	mov	result1, #0
230f8     70 00 90 AD |  if_e	jmp	#LR__2811
230fc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
230fc     00 FA 05 F6 | 	mov	result1, #0
23100     01 FA 61 FD | 	cogid	result1
23104     FD 00 02 F6 | 	mov	_var01, result1
23108     01 00 66 F0 | 	shl	_var01, #1
2310c     FD 00 02 F1 | 	add	_var01, result1
23110     02 00 66 F0 | 	shl	_var01, #2
23114     FF 03 00 FF 
23118     00 03 06 F6 | 	mov	_var02, ##524032
2311c     00 03 02 F1 | 	add	_var02, _var01
23120                 | '     if long[mailbox] < 0
23120     01 01 02 FB | 	rdlong	_var01, _var02
23124     00 00 56 F2 | 	cmps	_var01, #0 wc
23128                 | '         return ERR_MAILBOX_BUSY
23128     1C FA 65 C6 |  if_b	neg	result1, #28
2312c     3C 00 90 CD |  if_b	jmp	#LR__2811
23130                 | '     long[mailbox][2] := count
23130     08 02 06 F1 | 	add	_var02, #8
23134     01 17 62 FC | 	wrlong	arg03, _var02
23138                 | '     long[mailbox][1] := dstHubAddr
23138     04 02 86 F1 | 	sub	_var02, #4
2313c     01 13 62 FC | 	wrlong	arg01, _var02
23140     04 02 86 F1 | 	sub	_var02, #4
23144                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
23144     0A 05 02 F6 | 	mov	_var03, arg02
23148     D9 04 06 F4 | 	bitl	_var03, #217
2314c     00 00 58 FF 
23150     00 00 06 F6 | 	mov	_var01, ##-1342177280
23154     02 01 02 F1 | 	add	_var01, _var03
23158     01 01 62 FC | 	wrlong	_var01, _var02
2315c                 | '     repeat
2315c                 | LR__2810
2315c                 | '         result := long[mailbox]    
2315c     01 05 02 FB | 	rdlong	_var03, _var02
23160     00 04 56 F2 | 	cmps	_var03, #0 wc
23164     F4 FF 9F CD |  if_b	jmp	#LR__2810
23168                 | '     while result < 0   
23168                 | '     return -result                       'return success or error
23168     02 FB 61 F6 | 	neg	result1, _var03
2316c                 | LR__2811
2316c                 | _psram_spin2_read1_ret
2316c     2D 00 64 FD | 	ret
23170                 | 
23170                 | ' 
23170                 | ' '..............................................................................
23170                 | ' 
23170                 | ' {{
23170                 | ' }}
23170                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
23170                 | _psram_spin2_write
23170                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
23170                 | '     if drivercog == -1 ' driver must be running
23170     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23174     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
23178     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2317c     FF FF 7F FF 
23180     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
23184                 | '         return ERR_INACTIVE
23184     0F FA 65 A6 |  if_e	neg	result1, #15
23188     7C 00 90 AD |  if_e	jmp	#LR__2821
2318c                 | '     if count == 0 ' don't even bother writing
2318c     00 16 0E F2 | 	cmp	arg03, #0 wz
23190                 | '         return 0
23190     00 FA 05 A6 |  if_e	mov	result1, #0
23194     70 00 90 AD |  if_e	jmp	#LR__2821
23198                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
23198     00 FA 05 F6 | 	mov	result1, #0
2319c     01 FA 61 FD | 	cogid	result1
231a0     FD 00 02 F6 | 	mov	_var01, result1
231a4     01 00 66 F0 | 	shl	_var01, #1
231a8     FD 00 02 F1 | 	add	_var01, result1
231ac     02 00 66 F0 | 	shl	_var01, #2
231b0     FF 03 00 FF 
231b4     00 03 06 F6 | 	mov	_var02, ##524032
231b8     00 03 02 F1 | 	add	_var02, _var01
231bc                 | '     if long[mailbox] < 0
231bc     01 01 02 FB | 	rdlong	_var01, _var02
231c0     00 00 56 F2 | 	cmps	_var01, #0 wc
231c4                 | '         return ERR_MAILBOX_BUSY
231c4     1C FA 65 C6 |  if_b	neg	result1, #28
231c8     3C 00 90 CD |  if_b	jmp	#LR__2821
231cc                 | '     long[mailbox][2] := count
231cc     08 02 06 F1 | 	add	_var02, #8
231d0     01 17 62 FC | 	wrlong	arg03, _var02
231d4                 | '     long[mailbox][1] := srcHubAddr
231d4     04 02 86 F1 | 	sub	_var02, #4
231d8     01 13 62 FC | 	wrlong	arg01, _var02
231dc     04 02 86 F1 | 	sub	_var02, #4
231e0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
231e0     0A 05 02 F6 | 	mov	_var03, arg02
231e4     D9 04 06 F4 | 	bitl	_var03, #217
231e8     00 00 78 FF 
231ec     00 00 06 F6 | 	mov	_var01, ##-268435456
231f0     02 01 02 F1 | 	add	_var01, _var03
231f4     01 01 62 FC | 	wrlong	_var01, _var02
231f8                 | '     repeat
231f8                 | LR__2820
231f8                 | '         result := long[mailbox]    
231f8     01 05 02 FB | 	rdlong	_var03, _var02
231fc     00 04 56 F2 | 	cmps	_var03, #0 wc
23200     F4 FF 9F CD |  if_b	jmp	#LR__2820
23204                 | '     while result < 0   
23204                 | '     return -result                       'return success or error
23204     02 FB 61 F6 | 	neg	result1, _var03
23208                 | LR__2821
23208                 | _psram_spin2_write_ret
23208     2D 00 64 FD | 	ret
2320c                 | 
2320c                 | ' 
2320c                 | ' ' generalized fill
2320c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
2320c                 | _psram_spin2_fill
2320c     09 01 02 F6 | 	mov	_var01, arg01
23210     0A 03 02 F6 | 	mov	_var02, arg02
23214     0B 05 02 F6 | 	mov	_var03, arg03
23218     0D 07 02 F6 | 	mov	_var04, arg05
2321c                 | '     case datasize 
2321c     01 06 86 F1 | 	sub	_var04, #1
23220     04 06 26 F3 | 	fle	_var04, #4
23224     30 06 62 FD | 	jmprel	_var04
23228                 | LR__2830
23228     10 00 90 FD | 	jmp	#LR__2831
2322c     18 00 90 FD | 	jmp	#LR__2832
23230     2C 00 90 FD | 	jmp	#LR__2834
23234     1C 00 90 FD | 	jmp	#LR__2833
23238     24 00 90 FD | 	jmp	#LR__2834
2323c                 | LR__2831
2323c                 | '         1: req := driver.R_WRITEBYTE
2323c     00 00 60 FF 
23240     00 08 06 F6 | 	mov	_var05, ##-1073741824
23244     20 00 90 FD | 	jmp	#LR__2835
23248                 | LR__2832
23248                 | '         2: req := driver.R_WRITEWORD
23248     00 00 68 FF 
2324c     00 08 06 F6 | 	mov	_var05, ##-805306368
23250     14 00 90 FD | 	jmp	#LR__2835
23254                 | LR__2833
23254                 | '         4: req := driver.R_WRITELONG
23254     00 00 70 FF 
23258     00 08 06 F6 | 	mov	_var05, ##-536870912
2325c     08 00 90 FD | 	jmp	#LR__2835
23260                 | LR__2834
23260                 | '         other : return ERR_INVALID
23260     06 FA 65 F6 | 	neg	result1, #6
23264     94 00 90 FD | 	jmp	#LR__2837
23268                 | LR__2835
23268                 | '     if count == 0   ' nothing to do
23268     00 04 0E F2 | 	cmp	_var03, #0 wz
2326c                 | '         return 0
2326c     00 FA 05 A6 |  if_e	mov	result1, #0
23270     88 00 90 AD |  if_e	jmp	#LR__2837
23274                 | '     if drivercog == -1
23274     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23278     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2327c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23280     FF FF 7F FF 
23284     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
23288                 | '         return ERR_INACTIVE
23288     0F FA 65 A6 |  if_e	neg	result1, #15
2328c     6C 00 90 AD |  if_e	jmp	#LR__2837
23290                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
23290     00 FA 05 F6 | 	mov	result1, #0
23294     01 FA 61 FD | 	cogid	result1
23298     FD 06 02 F6 | 	mov	_var04, result1
2329c     01 06 66 F0 | 	shl	_var04, #1
232a0     FD 06 02 F1 | 	add	_var04, result1
232a4     02 06 66 F0 | 	shl	_var04, #2
232a8     FF 03 00 FF 
232ac     00 0B 06 F6 | 	mov	_var06, ##524032
232b0     03 0B 02 F1 | 	add	_var06, _var04
232b4                 | '     if long[mailbox] < 0
232b4     05 07 02 FB | 	rdlong	_var04, _var06
232b8     00 06 56 F2 | 	cmps	_var04, #0 wc
232bc                 | '         return ERR_MAILBOX_BUSY
232bc     1C FA 65 C6 |  if_b	neg	result1, #28
232c0     38 00 90 CD |  if_b	jmp	#LR__2837
232c4                 | '     long[mailbox][2] := count
232c4     08 0A 06 F1 | 	add	_var06, #8
232c8     05 05 62 FC | 	wrlong	_var03, _var06
232cc                 | '     long[mailbox][1] := pattern
232cc     04 0A 86 F1 | 	sub	_var06, #4
232d0     05 03 62 FC | 	wrlong	_var02, _var06
232d4     04 0A 86 F1 | 	sub	_var06, #4
232d8                 | '     long[mailbox] := req + (addr & $1ffffff)
232d8     04 0D 02 F6 | 	mov	_var07, _var05
232dc     00 0F 02 F6 | 	mov	_var08, _var01
232e0     D9 0E 06 F4 | 	bitl	_var08, #217
232e4     07 0D 02 F1 | 	add	_var07, _var08
232e8     05 0D 62 FC | 	wrlong	_var07, _var06
232ec                 | '     repeat
232ec                 | LR__2836
232ec                 | '         r := long[mailbox]
232ec     05 0F 02 FB | 	rdlong	_var08, _var06
232f0     00 0E 56 F2 | 	cmps	_var08, #0 wc
232f4     F4 FF 9F CD |  if_b	jmp	#LR__2836
232f8                 | '     while r < 0
232f8                 | '     return -r                  ' return 0 for success or negated error code
232f8     07 FB 61 F6 | 	neg	result1, _var08
232fc                 | LR__2837
232fc                 | _psram_spin2_fill_ret
232fc     2D 00 64 FD | 	ret
23300                 | 
23300                 | ' 
23300                 | ' '..............................................................................
23300                 | ' 
23300                 | ' {{
23300                 | ' }}
23300                 | ' PUB setQos(cog, qos) : result | mailbox
23300                 | _psram_spin2_setQos
23300     09 01 02 F6 | 	mov	_var01, arg01
23304                 | '     if drivercog == -1 ' driver must be running
23304     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
23308     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2330c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
23310     FF FF 7F FF 
23314     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
23318                 | '         return ERR_INACTIVE
23318     0F FA 65 A6 |  if_e	neg	result1, #15
2331c     9C 00 90 AD |  if_e	jmp	#LR__2844
23320                 | '     if cog < 0 or cog > 7 ' enforce cog id range
23320     00 00 56 F2 | 	cmps	_var01, #0 wc
23324     08 00 90 CD |  if_b	jmp	#LR__2840
23328     08 00 56 F2 | 	cmps	_var01, #8 wc
2332c     08 00 90 CD |  if_b	jmp	#LR__2841
23330                 | LR__2840
23330                 | '         return ERR_INVALID
23330     06 FA 65 F6 | 	neg	result1, #6
23334     84 00 90 FD | 	jmp	#LR__2844
23338                 | LR__2841
23338                 | '     long[@qosData][cog] := qos & !$1ff
23338     FF 15 26 F5 | 	andn	arg02, #511
2333c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
23340     02 00 66 F0 | 	shl	_var01, #2
23344     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
23348     00 15 62 FC | 	wrlong	arg02, _var01
2334c                 | '     mailbox := $7FF00 + drivercog*12
2334c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
23350     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
23354     02 07 02 F6 | 	mov	_var04, _var03
23358     01 06 66 F0 | 	shl	_var04, #1
2335c     02 07 02 F1 | 	add	_var04, _var03
23360     02 06 66 F0 | 	shl	_var04, #2
23364     FF 03 00 FF 
23368     00 09 06 F6 | 	mov	_var05, ##524032
2336c     03 09 02 F1 | 	add	_var05, _var04
23370                 | '     repeat until LOCKTRY(driverlock)
23370     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
23374                 | LR__2842
23374     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
23378     06 12 72 FD | 	locktry	arg01 wc
2337c     F4 FF 9F 3D |  if_ae	jmp	#LR__2842
23380     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
23384                 | '     long[mailbox] := driver.R_CONFIG + cogid()
23384     00 06 06 F6 | 	mov	_var04, #0
23388     01 06 62 FD | 	cogid	_var04
2338c     00 00 78 FF 
23390     00 02 06 F6 | 	mov	_var02, ##-268435456
23394     03 03 02 F1 | 	add	_var02, _var04
23398     04 03 62 FC | 	wrlong	_var02, _var05
2339c                 | '     repeat while long[mailbox] < 0
2339c                 | LR__2843
2339c     04 03 02 FB | 	rdlong	_var02, _var05
233a0     00 02 56 F2 | 	cmps	_var02, #0 wc
233a4     F4 FF 9F CD |  if_b	jmp	#LR__2843
233a8                 | '     LOCKREL(driverlock)
233a8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
233ac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
233b0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
233b4     07 12 72 FD | 	lockrel	arg01 wc
233b8     00 FA 05 F6 | 	mov	result1, #0
233bc                 | LR__2844
233bc                 | _psram_spin2_setQos_ret
233bc     2D 00 64 FD | 	ret
233c0                 | 
233c0                 | ' 
233c0                 | ' '..............................................................................
233c0                 | ' 
233c0                 | ' {{
233c0                 | ' }}
233c0                 | ' PRI lookupDelay(freq) : delay | profile
233c0                 | _psram_spin2_lookupDelay
233c0                 | '     profile := @delayTable
233c0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
233c4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
233c8                 | '     delay := long[profile][0]
233c8     00 03 02 FB | 	rdlong	_var02, _var01
233cc                 | '     repeat while long[profile][1] 
233cc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
233d0     97 16 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
233d4                 | LR__2850
233d4     04 00 06 F1 | 	add	_var01, #4
233d8     00 FB 09 FB | 	rdlong	result1, _var01 wz
233dc     04 00 86 F1 | 	sub	_var01, #4
233e0     1C 00 90 AD |  if_e	jmp	#LR__2852
233e4                 | '         if freq +< long[profile][1] 
233e4     04 00 06 F1 | 	add	_var01, #4
233e8     00 FB 01 FB | 	rdlong	result1, _var01
233ec     04 00 86 F1 | 	sub	_var01, #4
233f0     FD 12 12 F2 | 	cmp	arg01, result1 wc
233f4                 | '             quit
233f4                 | '         profile += 4
233f4     04 00 06 31 |  if_ae	add	_var01, #4
233f8                 | '         delay++
233f8     01 02 06 31 |  if_ae	add	_var02, #1
233fc     D4 FF 9F 3D |  if_ae	jmp	#LR__2850
23400                 | LR__2851
23400                 | LR__2852
23400     01 FB 01 F6 | 	mov	result1, _var02
23404                 | _psram_spin2_lookupDelay_ret
23404     2D 00 64 FD | 	ret
23408                 | 
23408                 | ' 
23408                 | ' PUB start() : r
23408                 | _usbnew_spin2_start
23408     00 00 06 F6 | 	mov	_var01, #0
2340c                 | '   ifnot driver_cog
2340c     15 00 00 FF 
23410     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
23414     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
23418     15 00 00 FF 
2341c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
23420     38 00 90 5D |  if_ne	jmp	#LR__2860
23424                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
23424     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
23428     10 00 06 F6 | 	mov	_var01, #16
2342c     00 16 06 F6 | 	mov	arg03, #0
23430     28 16 62 FD | 	setq	arg03
23434     0A 01 F2 FC | 	coginit	_var01, arg02 wc
23438     01 00 66 C6 |  if_b	neg	_var01, #1
2343c                 | '     if r >= 0
2343c     00 00 56 F2 | 	cmps	_var01, #0 wc
23440                 | '       driver_cog := r+1
23440     00 03 02 36 |  if_ae	mov	_var02, _var01
23444     01 02 06 31 |  if_ae	add	_var02, #1
23448     15 00 00 3F 
2344c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
23450     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
23454     15 00 00 3F 
23458     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
2345c                 | LR__2860
2345c     00 FB 01 F6 | 	mov	result1, _var01
23460                 | _usbnew_spin2_start_ret
23460     2D 00 64 FD | 	ret
23464                 | 
23464                 | '     '' (Always enabled)
23464                 | ' 
23464                 | ' '' Get current pressed state of a keyboard key
23464                 | ' PUB keystate(key) : r | buf[2],tmp
23464                 | _usbnew_spin2_keystate
23464     00 04 06 F6 | 	mov	_var03, #0
23468                 | '   if key >= $E0 && key < $E8
23468     E0 12 56 F2 | 	cmps	arg01, #224 wc
2346c     34 00 90 CD |  if_b	jmp	#LR__2870
23470     E8 12 56 F2 | 	cmps	arg01, #232 wc
23474     2C 00 90 3D |  if_ae	jmp	#LR__2870
23478                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
23478     00 FA 05 F6 | 	mov	result1, #0
2347c     13 00 00 FF 
23480     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
23484     09 07 02 F6 | 	mov	_var04, arg01
23488     E0 06 86 F1 | 	sub	_var04, #224
2348c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
23490     03 09 4A F0 | 	shr	_var05, _var04 wz
23494     13 00 00 FF 
23498     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2349c     01 FA 65 56 |  if_ne	neg	result1, #1
234a0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
234a4                 | LR__2870
234a4                 | '   else
234a4                 | '     '' Do this in inline ASM to ensure atomicity
234a4                 | '     tmp := @hkbd_report
234a4     13 00 00 FF 
234a8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
234ac     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
234b0                 | '     org
234b0     13 00 00 FF 
234b4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
234b8     97 1E 48 FB | 	callpa	#(@LR__2872-@LR__2871)>>2,fcache_load_ptr_
234bc                 | LR__2871
234bc 000             | 	org	0
234bc 000 28 02 64 FD | 	setq	#1
234c0 001 04 01 02 FB | 	rdlong	_var01, _var05
234c4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
234c8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
234cc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
234d0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
234d4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
234d8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
234dc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
234e0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
234e4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
234e8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
234ec 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
234f0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
234f4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
234f8 00f             | LR__2872
234f8                 | 	orgh
234f8     02 FB 01 F6 | 	mov	result1, _var03
234fc                 | _usbnew_spin2_keystate_ret
234fc     2D 00 64 FD | 	ret
23500                 | 
23500                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
23500                 | ' 
23500                 | ' '' Return key event from buffer if there is one
23500                 | ' PUB get_key() : r | tail
23500                 | _usbnew_spin2_get_key
23500                 | '   tail := keyq_tail
23500     0F 00 00 FF 
23504     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
23508     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2350c                 | '   if keyq_head == tail
2350c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23510     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
23514     0F 00 00 FF 
23518     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2351c     00 03 0A F2 | 	cmp	_var02, _var01 wz
23520                 | '     return 0 ' No event
23520     00 FA 05 A6 |  if_e	mov	result1, #0
23524     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
23528                 | '   r := keyq_data[tail]
23528     00 03 02 F6 | 	mov	_var02, _var01
2352c     02 02 66 F0 | 	shl	_var02, #2
23530     0F 00 00 FF 
23534     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
23538     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2353c     01 FB 01 FB | 	rdlong	result1, _var02
23540                 | '   if ++tail == KEYQUEUE_SIZE
23540     01 00 06 F1 | 	add	_var01, #1
23544     80 00 0E F2 | 	cmp	_var01, #128 wz
23548                 | '     tail := 0
23548     00 00 06 A6 |  if_e	mov	_var01, #0
2354c                 | '   keyq_tail := tail
2354c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
23550     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
23554     0F 00 00 FF 
23558     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
2355c                 | _usbnew_spin2_get_key_ret
2355c     2D 00 64 FD | 	ret
23560                 | 
23560                 | ' 
23560                 | ' '' Emulate mouse movement
23560                 | ' PUB mouse_move(x,y)
23560                 | _usbnew_spin2_mouse_move
23560     02 4A 05 F6 | 	mov	COUNT_, #2
23564     A8 00 A0 FD | 	call	#pushregs_
23568     09 27 02 F6 | 	mov	local01, arg01
2356c     0A 29 02 F6 | 	mov	local02, arg02
23570                 | '   mouse_lock := 1
23570     14 00 00 FF 
23574     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
23578     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2357c     14 00 00 FF 
23580     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
23584                 | '   waitus(2) ' hope driver is now done
23584     02 12 06 F6 | 	mov	arg01, #2
23588     E8 0A B0 FD | 	call	#__system___waitus
2358c                 | '   mouse_xacc := x
2358c     14 00 00 FF 
23590     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
23594     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
23598                 | '   mouse_yacc := y
23598     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2359c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
235a0                 | '   if mouse_outptr
235a0     04 00 00 FF 
235a4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
235a8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
235ac     0F 00 00 FF 
235b0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
235b4     24 00 90 AD |  if_e	jmp	#LR__2880
235b8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
235b8     10 28 66 F0 | 	shl	local02, #16
235bc     13 27 32 F9 | 	getword	local01, local01, #0
235c0     13 29 42 F5 | 	or	local02, local01
235c4     0F 00 00 FF 
235c8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
235cc     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
235d0     0F 00 00 FF 
235d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
235d8     13 29 62 FC | 	wrlong	local02, local01
235dc                 | LR__2880
235dc                 | '   mouse_lock := 0
235dc     14 00 00 FF 
235e0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
235e4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
235e8     14 00 00 FF 
235ec     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
235f0     A7 F0 03 F6 | 	mov	ptra, fp
235f4     B2 00 A0 FD | 	call	#popregs_
235f8                 | _usbnew_spin2_mouse_move_ret
235f8     2D 00 64 FD | 	ret
235fc                 | 
235fc                 | '     '' Set HAVE_HIDPAD to enable.
235fc                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
235fc                 | ' 
235fc                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
235fc                 | ' PUB hidpad_id(dev) : r
235fc                 | _usbnew_spin2_hidpad_id
235fc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
235fc     13 00 00 FF 
23600     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
23604     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23608     09 01 02 F6 | 	mov	_var01, arg01
2360c     03 00 66 F0 | 	shl	_var01, #3
23610     09 01 82 F1 | 	sub	_var01, arg01
23614     02 00 66 F0 | 	shl	_var01, #2
23618     00 FB 01 F1 | 	add	result1, _var01
2361c     FD FA 01 FB | 	rdlong	result1, result1
23620     13 00 00 FF 
23624     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
23628                 | _usbnew_spin2_hidpad_id_ret
23628     2D 00 64 FD | 	ret
2362c                 | 
2362c                 | ' 
2362c                 | ' '' Get all button states for a device
2362c                 | ' PUB hidpad_buttons(dev) : r 
2362c                 | _usbnew_spin2_hidpad_buttons
2362c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2362c     13 00 00 FF 
23630     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
23634     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23638     09 01 02 F6 | 	mov	_var01, arg01
2363c     03 00 66 F0 | 	shl	_var01, #3
23640     09 01 82 F1 | 	sub	_var01, arg01
23644     02 00 66 F0 | 	shl	_var01, #2
23648     00 FB 01 F1 | 	add	result1, _var01
2364c     14 FA 05 F1 | 	add	result1, #20
23650     FD FA 01 FB | 	rdlong	result1, result1
23654     13 00 00 FF 
23658     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2365c                 | _usbnew_spin2_hidpad_buttons_ret
2365c     2D 00 64 FD | 	ret
23660                 | 
23660                 | ' 
23660                 | ' '' Get state of an axis (normalized between -32768 and 32767)
23660                 | ' PUB hidpad_axis(dev,axnum) : r
23660                 | _usbnew_spin2_hidpad_axis
23660                 | '   if axnum +>= 6
23660     06 14 16 F2 | 	cmp	arg02, #6 wc
23664                 | '     return 0
23664     00 FA 05 36 |  if_ae	mov	result1, #0
23668     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2366c                 | '   else 
2366c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2366c     13 00 00 FF 
23670     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
23674     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
23678     09 01 02 F6 | 	mov	_var01, arg01
2367c     03 00 66 F0 | 	shl	_var01, #3
23680     09 01 82 F1 | 	sub	_var01, arg01
23684     02 00 66 F0 | 	shl	_var01, #2
23688     00 FB 01 F1 | 	add	result1, _var01
2368c     04 00 06 F6 | 	mov	_var01, #4
23690     0A 01 02 F1 | 	add	_var01, arg02
23694     01 00 66 F0 | 	shl	_var01, #1
23698     FD 00 02 F1 | 	add	_var01, result1
2369c     00 FB E1 FA | 	rdword	result1, _var01
236a0     0F FA 65 F7 | 	signx	result1, #15
236a4     13 00 00 FF 
236a8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
236ac                 | _usbnew_spin2_hidpad_axis_ret
236ac     2D 00 64 FD | 	ret
236b0                 | 
236b0                 | ' 
236b0                 | ' 
236b0                 | ' '--------------------------------------------------------------
236b0                 | ' '---------- Init the variables, start the cog. ----------------
236b0                 | ' '--------------------------------------------------------------
236b0                 | ' 
236b0                 | ' pub start(mbox,scope,cache) :cog,base | iii
236b0                 | _audio096_spin2_start
236b0     04 4A 05 F6 | 	mov	COUNT_, #4
236b4     A8 00 A0 FD | 	call	#pushregs_
236b8     09 27 02 F6 | 	mov	local01, arg01
236bc                 | ' 
236bc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
236bc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
236bc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
236bc                 | ' 
236bc                 | ' mailboxaddr:=mbox 
236bc     F2 26 62 FC | 	wrlong	local01, objptr
236c0                 | ' scope_ptr:=scope
236c0     04 E4 05 F1 | 	add	objptr, #4
236c4     F2 14 62 FC | 	wrlong	arg02, objptr
236c8                 | ' cache_ptr:=cache
236c8     04 E4 05 F1 | 	add	objptr, #4
236cc     F2 16 62 FC | 	wrlong	arg03, objptr
236d0                 | ' base:=@channel1[0]
236d0     04 E4 05 F1 | 	add	objptr, #4
236d4     F2 28 02 F6 | 	mov	local02, objptr
236d8                 | ' long[$40]:=mbox
236d8     40 26 66 FC | 	wrlong	local01, #64
236dc                 | ' repeat iii from 0 to 7
236dc     00 2A 06 F6 | 	mov	local03, #0
236e0     02 00 00 FF 
236e4     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
236e8     0C E4 85 F1 | 	sub	objptr, #12
236ec     97 BC 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
236f0                 | LR__2890
236f0                 | '   long[base+64*iii]:=0
236f0     14 27 02 F6 | 	mov	local01, local02
236f4     15 FD 01 F6 | 	mov	result2, local03
236f8     06 FC 65 F0 | 	shl	result2, #6
236fc     FE 26 02 F1 | 	add	local01, result2
23700     13 01 68 FC | 	wrlong	#0, local01
23704                 | '   long[base+64*iii+4]:=0
23704     14 27 02 F6 | 	mov	local01, local02
23708     15 FD 01 F6 | 	mov	result2, local03
2370c     06 FC 65 F0 | 	shl	result2, #6
23710     FE 26 02 F1 | 	add	local01, result2
23714     04 26 06 F1 | 	add	local01, #4
23718     13 01 68 FC | 	wrlong	#0, local01
2371c                 | '   long[base+64*iii+12]:=0
2371c     14 2D 02 F6 | 	mov	local04, local02
23720     15 27 02 F6 | 	mov	local01, local03
23724     06 26 66 F0 | 	shl	local01, #6
23728     13 2D 02 F1 | 	add	local04, local01
2372c     0C 2C 06 F1 | 	add	local04, #12
23730     16 01 68 FC | 	wrlong	#0, local04
23734                 | '   long[base+64*iii+16]:=2 
23734     14 2D 02 F6 | 	mov	local04, local02
23738     15 27 02 F6 | 	mov	local01, local03
2373c     06 26 66 F0 | 	shl	local01, #6
23740     13 2D 02 F1 | 	add	local04, local01
23744     10 2C 06 F1 | 	add	local04, #16
23748     16 05 68 FC | 	wrlong	#2, local04
2374c                 | '   word[base+64*iii+20]:=0
2374c     14 2D 02 F6 | 	mov	local04, local02
23750     15 27 02 F6 | 	mov	local01, local03
23754     06 26 66 F0 | 	shl	local01, #6
23758     13 2D 02 F1 | 	add	local04, local01
2375c     14 2C 06 F1 | 	add	local04, #20
23760     16 01 58 FC | 	wrword	#0, local04
23764                 | '   word[base+64*iii+22]:=8192
23764     14 2D 02 F6 | 	mov	local04, local02
23768     15 27 02 F6 | 	mov	local01, local03
2376c     06 26 66 F0 | 	shl	local01, #6
23770     13 2D 02 F1 | 	add	local04, local01
23774     16 2C 06 F1 | 	add	local04, #22
23778     10 00 80 FF 
2377c     16 01 58 FC | 	wrword	##8192, local04
23780                 | '   word[base+64*iii+24]:=4000+2*iii
23780     15 2D 02 F6 | 	mov	local04, local03
23784     01 2C 66 F0 | 	shl	local04, #1
23788     07 00 00 FF 
2378c     A0 27 06 F6 | 	mov	local01, ##4000
23790     16 27 02 F1 | 	add	local01, local04
23794     14 2D 02 F6 | 	mov	local04, local02
23798     15 FD 01 F6 | 	mov	result2, local03
2379c     06 FC 65 F0 | 	shl	result2, #6
237a0     FE 2C 02 F1 | 	add	local04, result2
237a4     18 2C 06 F1 | 	add	local04, #24
237a8     16 27 52 FC | 	wrword	local01, local04
237ac                 | '   word[base+64*iii+26]:=2
237ac     14 2D 02 F6 | 	mov	local04, local02
237b0     15 27 02 F6 | 	mov	local01, local03
237b4     06 26 66 F0 | 	shl	local01, #6
237b8     13 2D 02 F1 | 	add	local04, local01
237bc     1A 2C 06 F1 | 	add	local04, #26
237c0     16 05 58 FC | 	wrword	#2, local04
237c4                 | '   long [base+64*iii+8]:=@null | $C0000000
237c4     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
237c8     3E 26 26 F4 | 	bith	local01, #62
237cc     14 2D 02 F6 | 	mov	local04, local02
237d0     15 17 02 F6 | 	mov	arg03, local03
237d4     06 16 66 F0 | 	shl	arg03, #6
237d8     0B 2D 02 F1 | 	add	local04, arg03
237dc     08 2C 06 F1 | 	add	local04, #8
237e0     16 27 62 FC | 	wrlong	local01, local04
237e4                 | '   long[base+64*iii+32]:=0
237e4     14 2D 02 F6 | 	mov	local04, local02
237e8     15 27 02 F6 | 	mov	local01, local03
237ec     06 26 66 F0 | 	shl	local01, #6
237f0     13 2D 02 F1 | 	add	local04, local01
237f4     20 2C 06 F1 | 	add	local04, #32
237f8     16 01 68 FC | 	wrlong	#0, local04
237fc                 | '   long[base+64*iii+36]:=0
237fc     14 2D 02 F6 | 	mov	local04, local02
23800     15 27 02 F6 | 	mov	local01, local03
23804     06 26 66 F0 | 	shl	local01, #6
23808     13 2D 02 F1 | 	add	local04, local01
2380c     24 2C 06 F1 | 	add	local04, #36
23810     16 01 68 FC | 	wrlong	#0, local04
23814                 | '   long[base+64*iii+40]:=0
23814     14 2D 02 F6 | 	mov	local04, local02
23818     15 27 02 F6 | 	mov	local01, local03
2381c     06 26 66 F0 | 	shl	local01, #6
23820     13 2D 02 F1 | 	add	local04, local01
23824     28 2C 06 F1 | 	add	local04, #40
23828     16 01 68 FC | 	wrlong	#0, local04
2382c                 | '   long[base+64*iii+44]:=0
2382c     14 2D 02 F6 | 	mov	local04, local02
23830     15 27 02 F6 | 	mov	local01, local03
23834     06 26 66 F0 | 	shl	local01, #6
23838     13 2D 02 F1 | 	add	local04, local01
2383c     2C 2C 06 F1 | 	add	local04, #44
23840     16 01 68 FC | 	wrlong	#0, local04
23844                 | '   long[base+64*iii+28]:=0
23844     14 2D 02 F6 | 	mov	local04, local02
23848     15 27 02 F6 | 	mov	local01, local03
2384c     06 26 66 F0 | 	shl	local01, #6
23850     13 2D 02 F1 | 	add	local04, local01
23854     1C 2C 06 F1 | 	add	local04, #28
23858     16 01 68 FC | 	wrlong	#0, local04
2385c     01 2A 06 F1 | 	add	local03, #1
23860     08 2A 56 F2 | 	cmps	local03, #8 wc
23864     88 FE 9F CD |  if_b	jmp	#LR__2890
23868                 | LR__2891
23868     02 00 00 FF 
2386c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
23870                 | '   
23870                 | ' cog:=coginit(16,@audio,@mailboxaddr)
23870     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
23874     F2 16 02 F6 | 	mov	arg03, objptr
23878     10 2C 06 F6 | 	mov	local04, #16
2387c     28 16 62 FD | 	setq	arg03
23880     0A 2D F2 FC | 	coginit	local04, arg02 wc
23884     01 2C 66 C6 |  if_b	neg	local04, #1
23888                 | ' waitms(100)
23888     64 12 06 F6 | 	mov	arg01, #100
2388c     78 07 B0 FD | 	call	#__system___waitms
23890                 | ' return cog,base
23890     14 FD 01 F6 | 	mov	result2, local02
23894     16 FB 01 F6 | 	mov	result1, local04
23898     A7 F0 03 F6 | 	mov	ptra, fp
2389c     B2 00 A0 FD | 	call	#popregs_
238a0                 | _audio096_spin2_start_ret
238a0     2D 00 64 FD | 	ret
238a4                 | 
238a4                 | ' 
238a4                 | ' ' a simple play procedure to not poke everything. 
238a4                 | ' 
238a4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
238a4                 | _audio096_spin2_play
238a4     0C E4 05 F1 | 	add	objptr, #12
238a8     F2 00 02 F6 | 	mov	_var01, objptr
238ac     06 12 66 F0 | 	shl	arg01, #6
238b0     09 01 02 F1 | 	add	_var01, arg01
238b4     00 13 02 F6 | 	mov	arg01, _var01
238b8     0C 12 06 F1 | 	add	arg01, #12
238bc     09 1B 62 FC | 	wrlong	arg05, arg01
238c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
238c4     00 13 02 36 |  if_ae	mov	arg01, _var01
238c8     10 12 06 31 |  if_ae	add	arg01, #16
238cc     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
238d0     02 1A 06 C1 |  if_b	add	arg05, #2
238d4     00 13 02 C6 |  if_b	mov	arg01, _var01
238d8     10 12 06 C1 |  if_b	add	arg01, #16
238dc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
238e0     0B 13 52 F6 | 	abs	arg01, arg03 wc
238e4     0F 1B 80 FF 
238e8     09 1F 1A FD | 	qdiv	##3546895, arg01
238ec                 | ' 
238ec                 | ' base2:=@channel1[0]+64*channel
238ec                 | ' 
238ec                 | ' 
238ec                 | ' long[base2+12]:= len
238ec                 | ' if loop >=0 
238ec                 | '   long[base2+16]:= loop
238ec     0C E4 85 F1 | 	sub	objptr, #12
238f0                 | ' else
238f0                 | '   long[base2+16]:= len+2
238f0                 | ' word[base2+20]:=vol
238f0     00 13 02 F6 | 	mov	arg01, _var01
238f4     14 12 06 F1 | 	add	arg01, #20
238f8     09 19 52 FC | 	wrword	arg04, arg01
238fc                 | ' word[base2+24]:= 3546895/splfreq 
238fc     00 19 02 F6 | 	mov	arg04, _var01
23900     18 18 06 F1 | 	add	arg04, #24
23904                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
23904                 | ' long[base2+28]:=$40000000    
23904                 | ' long[base2+32]:=0    
23904                 | ' long[base2+36]:=0    
23904                 | ' long[base2+40]:=0    
23904                 | ' long[base2+44]:=0    
23904                 | ' long[base2+8]:=sample+$C0000000     
23904     00 00 60 FF 
23908     00 14 06 F1 | 	add	arg02, ##-1073741824
2390c     18 12 62 FD | 	getqx	arg01
23910     09 13 82 F6 | 	negc	arg01, arg01
23914     0C 13 52 FC | 	wrword	arg01, arg04
23918     00 13 02 F6 | 	mov	arg01, _var01
2391c     1A 12 06 F1 | 	add	arg01, #26
23920     09 01 5A FC | 	wrword	#256, arg01
23924     00 13 02 F6 | 	mov	arg01, _var01
23928     1C 12 06 F1 | 	add	arg01, #28
2392c     00 00 A0 FF 
23930     09 01 68 FC | 	wrlong	##1073741824, arg01
23934     00 13 02 F6 | 	mov	arg01, _var01
23938     20 12 06 F1 | 	add	arg01, #32
2393c     09 01 68 FC | 	wrlong	#0, arg01
23940     00 13 02 F6 | 	mov	arg01, _var01
23944     24 12 06 F1 | 	add	arg01, #36
23948     09 01 68 FC | 	wrlong	#0, arg01
2394c     00 13 02 F6 | 	mov	arg01, _var01
23950     28 12 06 F1 | 	add	arg01, #40
23954     09 01 68 FC | 	wrlong	#0, arg01
23958     00 13 02 F6 | 	mov	arg01, _var01
2395c     2C 12 06 F1 | 	add	arg01, #44
23960     09 01 68 FC | 	wrlong	#0, arg01
23964     08 00 06 F1 | 	add	_var01, #8
23968     00 15 62 FC | 	wrlong	arg02, _var01
2396c                 | _audio096_spin2_play_ret
2396c     2D 00 64 FD | 	ret
23970                 | 
23970                 | ' 
23970                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
23970                 | _audio096_spin2_play8
23970                 | ' 
23970                 | ' base2:=@channel1[0]+64*channel
23970     0C E4 05 F1 | 	add	objptr, #12
23974     F2 00 02 F6 | 	mov	_var01, objptr
23978     06 12 66 F0 | 	shl	arg01, #6
2397c     09 01 02 F1 | 	add	_var01, arg01
23980                 | ' long[base2]:=0
23980     00 01 68 FC | 	wrlong	#0, _var01
23984                 | ' long[base2+8]:=sample+$40000000 
23984     00 00 20 FF 
23988     00 14 06 F1 | 	add	arg02, ##1073741824
2398c     00 13 02 F6 | 	mov	arg01, _var01
23990     08 12 06 F1 | 	add	arg01, #8
23994     09 15 62 FC | 	wrlong	arg02, arg01
23998                 | ' if loop>=0
23998     00 1C 56 F2 | 	cmps	arg06, #0 wc
2399c     0C E4 85 F1 | 	sub	objptr, #12
239a0     1C 00 90 CD |  if_b	jmp	#LR__2900
239a4                 | '   long[base2+12]:=loop
239a4     00 15 02 F6 | 	mov	arg02, _var01
239a8     0C 14 06 F1 | 	add	arg02, #12
239ac     0A 1D 62 FC | 	wrlong	arg06, arg02
239b0                 | '   long[base2+16]:= len
239b0     00 1D 02 F6 | 	mov	arg06, _var01
239b4     10 1C 06 F1 | 	add	arg06, #16
239b8     0E 1B 62 FC | 	wrlong	arg05, arg06
239bc     1C 00 90 FD | 	jmp	#LR__2901
239c0                 | LR__2900
239c0                 | ' else
239c0                 | '   long[base2+12]:= len
239c0     00 1D 02 F6 | 	mov	arg06, _var01
239c4     0C 1C 06 F1 | 	add	arg06, #12
239c8     0E 1B 62 FC | 	wrlong	arg05, arg06
239cc                 | '   long[base2+16]:= len+1
239cc     01 1A 06 F1 | 	add	arg05, #1
239d0     00 13 02 F6 | 	mov	arg01, _var01
239d4     10 12 06 F1 | 	add	arg01, #16
239d8     09 1B 62 FC | 	wrlong	arg05, arg01
239dc                 | LR__2901
239dc     0B 17 52 F6 | 	abs	arg03, arg03 wc
239e0     0F 1B 80 FF 
239e4     0B 1F 1A FD | 	qdiv	##3546895, arg03
239e8                 | ' word[base2+20]:=vol
239e8     00 17 02 F6 | 	mov	arg03, _var01
239ec     14 16 06 F1 | 	add	arg03, #20
239f0     0B 19 52 FC | 	wrword	arg04, arg03
239f4                 | ' word[base2+24]:= 3546895 /splfreq 
239f4     00 13 02 F6 | 	mov	arg01, _var01
239f8     18 12 06 F1 | 	add	arg01, #24
239fc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
239fc     1A 00 06 F1 | 	add	_var01, #26
23a00     18 18 62 FD | 	getqx	arg04
23a04     0C 19 82 F6 | 	negc	arg04, arg04
23a08     09 19 52 FC | 	wrword	arg04, arg01
23a0c     00 01 5A FC | 	wrword	#256, _var01
23a10                 | _audio096_spin2_play8_ret
23a10     2D 00 64 FD | 	ret
23a14                 | 
23a14                 | ' 'long[base2+28]:=$40000000
23a14                 | ' 
23a14                 | '     
23a14                 | ' pub stop(channel) 'silence it
23a14                 | _audio096_spin2_stop
23a14                 | ' 
23a14                 | ' word[@channel1[0]+64*channel+20]:=0
23a14     0C E4 05 F1 | 	add	objptr, #12
23a18     F2 00 02 F6 | 	mov	_var01, objptr
23a1c     09 03 02 F6 | 	mov	_var02, arg01
23a20     06 02 66 F0 | 	shl	_var02, #6
23a24     01 01 02 F1 | 	add	_var01, _var02
23a28     14 00 06 F1 | 	add	_var01, #20
23a2c     00 01 58 FC | 	wrword	#0, _var01
23a30                 | ' word[@channel1[0]+64*channel+20]:=0
23a30     F2 00 02 F6 | 	mov	_var01, objptr
23a34     06 12 66 F0 | 	shl	arg01, #6
23a38     09 01 02 F1 | 	add	_var01, arg01
23a3c     14 00 06 F1 | 	add	_var01, #20
23a40     00 01 58 FC | 	wrword	#0, _var01
23a44     0C E4 85 F1 | 	sub	objptr, #12
23a48                 | _audio096_spin2_stop_ret
23a48     2D 00 64 FD | 	ret
23a4c                 | hubexit
23a4c     81 00 80 FD | 	jmp	#cogexit
23a50                 | 
23a50                 | __system___setbaud
23a50     14 88 06 FB | 	rdlong	muldiva_, #20
23a54     09 8B 02 F6 | 	mov	muldivb_, arg01
23a58     BA 00 A0 FD | 	call	#divide_
23a5c     97 06 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
23a60                 | LR__2910
23a60     3E FA 9D FA | 	rdpin	result1, #62 wc
23a64     FE FC A1 F1 | 	subx	result2, result2
23a68     F4 FF 9F CD |  if_b	jmp	#LR__2910
23a6c                 | LR__2911
23a6c     40 7C 64 FD | 	dirl	#62
23a70     40 7E 64 FD | 	dirl	#63
23a74     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
23a78     10 8A 66 F0 | 	shl	muldivb_, #16
23a7c     07 14 06 F6 | 	mov	arg02, #7
23a80     45 15 02 F1 | 	add	arg02, muldivb_
23a84     3E F8 0C FC | 	wrpin	#124, #62
23a88     3E 14 16 FC | 	wxpin	arg02, #62
23a8c     3F 7C 0C FC | 	wrpin	#62, #63
23a90     14 14 06 F1 | 	add	arg02, #20
23a94     3F 14 16 FC | 	wxpin	arg02, #63
23a98     41 7C 64 FD | 	dirh	#62
23a9c     41 7E 64 FD | 	dirh	#63
23aa0                 | __system___setbaud_ret
23aa0     2D 00 64 FD | 	ret
23aa4                 | 
23aa4                 | __system___txraw
23aa4     01 4A 05 F6 | 	mov	COUNT_, #1
23aa8     A8 00 A0 FD | 	call	#pushregs_
23aac     09 27 02 F6 | 	mov	local01, arg01
23ab0     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
23ab4                 | LR__2920
23ab4     3E FA 9D FA | 	rdpin	result1, #62 wc
23ab8     FE FC A1 F1 | 	subx	result2, result2
23abc     F4 FF 9F CD |  if_b	jmp	#LR__2920
23ac0                 | LR__2921
23ac0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
23ac4     C2 01 00 AF 
23ac8     00 12 06 A6 |  if_e	mov	arg01, ##230400
23acc     80 FF BF AD |  if_e	call	#__system___setbaud
23ad0     58 7C 64 FD | 	drvl	#62
23ad4     3E 26 26 FC | 	wypin	local01, #62
23ad8     01 FA 05 F6 | 	mov	result1, #1
23adc     A7 F0 03 F6 | 	mov	ptra, fp
23ae0     B2 00 A0 FD | 	call	#popregs_
23ae4                 | __system___txraw_ret
23ae4     2D 00 64 FD | 	ret
23ae8                 | 
23ae8                 | __system___rxraw
23ae8     0D 4A 05 F6 | 	mov	COUNT_, #13
23aec     A8 00 A0 FD | 	call	#pushregs_
23af0     09 27 02 F6 | 	mov	local01, arg01
23af4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
23af8     C2 01 00 AF 
23afc     00 12 06 A6 |  if_e	mov	arg01, ##230400
23b00     4C FF BF AD |  if_e	call	#__system___setbaud
23b04     00 26 0E F2 | 	cmp	local01, #0 wz
23b08     20 00 90 AD |  if_e	jmp	#LR__2930
23b0c     14 2A 06 FB | 	rdlong	local03, #20
23b10     0A 2A 46 F0 | 	shr	local03, #10
23b14     15 27 02 FD | 	qmul	local01, local03
23b18     1A FA 61 FD | 	getct	result1
23b1c     18 2C 62 FD | 	getqx	local04
23b20     16 FB 01 F1 | 	add	result1, local04
23b24     FD 2E 02 F6 | 	mov	local05, result1
23b28     04 00 90 FD | 	jmp	#LR__2931
23b2c                 | LR__2930
23b2c     00 2E 06 F6 | 	mov	local05, #0
23b30                 | LR__2931
23b30     01 30 66 F6 | 	neg	local06, #1
23b34     3F 32 06 F6 | 	mov	local07, #63
23b38     00 34 06 F6 | 	mov	local08, #0
23b3c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23b40     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
23b44     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
23b48                 | LR__2932
23b48     08 36 16 F4 | 	testb	local09, #8 wc
23b4c     09 36 76 F4 | 	testbn	local09, #9 andc
23b50     0A 36 46 F0 | 	shr	local09, #10
23b54     01 34 06 C6 |  if_b	mov	local08, #1
23b58     40 7E 6C 3D |  if_ae	testp	#63 wz
23b5c     01 34 06 26 |  if_nc_and_z	mov	local08, #1
23b60     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
23b64     04 36 46 20 |  if_nc_and_z	shr	local09, #4
23b68                 | LR__2933
23b68     00 28 06 F6 | 	mov	local02, #0
23b6c     00 34 0E F2 | 	cmp	local08, #0 wz
23b70     01 28 66 56 |  if_ne	neg	local02, #1
23b74     00 38 06 F6 | 	mov	local10, #0
23b78     00 2A 06 F6 | 	mov	local03, #0
23b7c     00 26 0E F2 | 	cmp	local01, #0 wz
23b80     01 2A 66 56 |  if_ne	neg	local03, #1
23b84     00 2C 06 F6 | 	mov	local04, #0
23b88     00 3A 06 F6 | 	mov	local11, #0
23b8c     17 3D 02 F6 | 	mov	local12, local05
23b90     1A FA 61 FD | 	getct	result1
23b94     FD 3E 02 F6 | 	mov	local13, result1
23b98     1F 3D 82 F1 | 	sub	local12, local13
23b9c     00 3C 56 F2 | 	cmps	local12, #0 wc
23ba0     00 3A 26 C6 |  if_b	not	local11, #0
23ba4     00 3A 0E F2 | 	cmp	local11, #0 wz
23ba8     00 2C 26 56 |  if_ne	not	local04, #0
23bac     16 2B CA F7 | 	test	local03, local04 wz
23bb0     00 38 26 56 |  if_ne	not	local10, #0
23bb4     1C 29 4A F5 | 	or	local02, local10 wz
23bb8     8C FF 9F AD |  if_e	jmp	#LR__2932
23bbc     00 34 0E F2 | 	cmp	local08, #0 wz
23bc0     1B 31 02 56 |  if_ne	mov	local06, local09
23bc4     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
23bc8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23bcc     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
23bd0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
23bd4     18 FB 01 F6 | 	mov	result1, local06
23bd8     A7 F0 03 F6 | 	mov	ptra, fp
23bdc     B2 00 A0 FD | 	call	#popregs_
23be0                 | __system___rxraw_ret
23be0     2D 00 64 FD | 	ret
23be4                 | 
23be4                 | __system___getus
23be4     1A FC 71 FD | 	getct	result2 wc
23be8     1A 00 62 FD | 	getct	_var01
23bec     10 E6 05 F1 | 	add	ptr___system__dat__, #16
23bf0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
23bf4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
23bf8     20 00 90 5D |  if_ne	jmp	#LR__2940
23bfc     14 02 06 FB | 	rdlong	_var02, #20
23c00     A1 07 00 FF 
23c04     40 02 16 FD | 	qdiv	_var02, ##1000000
23c08     10 E6 05 F1 | 	add	ptr___system__dat__, #16
23c0c     18 FA 61 FD | 	getqx	result1
23c10     FD 02 02 F6 | 	mov	_var02, result1
23c14     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
23c18     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
23c1c                 | LR__2940
23c1c     01 FD 11 FD | 	qdiv	result2, _var02
23c20     19 FC 61 FD | 	getqy	result2
23c24     28 FC 61 FD | 	setq	result2
23c28     01 01 12 FD | 	qdiv	_var01, _var02
23c2c     18 FA 61 FD | 	getqx	result1
23c30                 | __system___getus_ret
23c30     2D 00 64 FD | 	ret
23c34                 | 
23c34                 | __system____builtin_memmove
23c34     09 01 02 F6 | 	mov	_var01, arg01
23c38     0A 13 52 F2 | 	cmps	arg01, arg02 wc
23c3c     10 00 90 CD |  if_b	jmp	#LR__2950
23c40     0A 03 02 F6 | 	mov	_var02, arg02
23c44     0B 03 02 F1 | 	add	_var02, arg03
23c48     01 13 52 F2 | 	cmps	arg01, _var02 wc
23c4c     48 00 90 CD |  if_b	jmp	#LR__2956
23c50                 | LR__2950
23c50     0B 05 02 F6 | 	mov	_var03, arg03
23c54     02 04 4E F0 | 	shr	_var03, #2 wz
23c58     18 00 90 AD |  if_e	jmp	#LR__2955
23c5c     97 0A 48 FB | 	callpa	#(@LR__2953-@LR__2951)>>2,fcache_load_ptr_
23c60                 | LR__2951
23c60     02 09 D8 FC | 	rep	@LR__2954, _var03
23c64                 | LR__2952
23c64     0A 05 02 FB | 	rdlong	_var03, arg02
23c68     09 05 62 FC | 	wrlong	_var03, arg01
23c6c     04 12 06 F1 | 	add	arg01, #4
23c70     04 14 06 F1 | 	add	arg02, #4
23c74                 | LR__2953
23c74                 | LR__2954
23c74                 | LR__2955
23c74     02 16 CE F7 | 	test	arg03, #2 wz
23c78     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
23c7c     09 03 52 5C |  if_ne	wrword	_var02, arg01
23c80     02 12 06 51 |  if_ne	add	arg01, #2
23c84     02 14 06 51 |  if_ne	add	arg02, #2
23c88     01 16 CE F7 | 	test	arg03, #1 wz
23c8c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
23c90     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
23c94     28 00 90 FD | 	jmp	#LR__2962
23c98                 | LR__2956
23c98     0B 13 02 F1 | 	add	arg01, arg03
23c9c     0B 15 02 F1 | 	add	arg02, arg03
23ca0     0B 07 0A F6 | 	mov	_var04, arg03 wz
23ca4     18 00 90 AD |  if_e	jmp	#LR__2961
23ca8     97 0A 48 FB | 	callpa	#(@LR__2959-@LR__2957)>>2,fcache_load_ptr_
23cac                 | LR__2957
23cac     03 09 D8 FC | 	rep	@LR__2960, _var04
23cb0                 | LR__2958
23cb0     01 12 86 F1 | 	sub	arg01, #1
23cb4     01 14 86 F1 | 	sub	arg02, #1
23cb8     0A 03 C2 FA | 	rdbyte	_var02, arg02
23cbc     09 03 42 FC | 	wrbyte	_var02, arg01
23cc0                 | LR__2959
23cc0                 | LR__2960
23cc0                 | LR__2961
23cc0                 | LR__2962
23cc0     00 FB 01 F6 | 	mov	result1, _var01
23cc4                 | __system____builtin_memmove_ret
23cc4     2D 00 64 FD | 	ret
23cc8                 | 
23cc8                 | __system____builtin_strcpy
23cc8     09 01 02 F6 | 	mov	_var01, arg01
23ccc     97 0A 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
23cd0                 | LR__2970
23cd0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
23cd4     09 FB 41 FC | 	wrbyte	result1, arg01
23cd8     01 14 06 F1 | 	add	arg02, #1
23cdc     01 12 06 F1 | 	add	arg01, #1
23ce0     EC FF 9F 5D |  if_ne	jmp	#LR__2970
23ce4                 | LR__2971
23ce4     00 FB 01 F6 | 	mov	result1, _var01
23ce8                 | __system____builtin_strcpy_ret
23ce8     2D 00 64 FD | 	ret
23cec                 | 
23cec                 | __system____topofstack
23cec     00 4A 05 F6 | 	mov	COUNT_, #0
23cf0     A8 00 A0 FD | 	call	#pushregs_
23cf4     08 F0 07 F1 | 	add	ptra, #8
23cf8     04 4E 05 F1 | 	add	fp, #4
23cfc     A7 12 62 FC | 	wrlong	arg01, fp
23d00     A7 FA 01 F6 | 	mov	result1, fp
23d04     04 4E 85 F1 | 	sub	fp, #4
23d08     A7 F0 03 F6 | 	mov	ptra, fp
23d0c     B2 00 A0 FD | 	call	#popregs_
23d10                 | __system____topofstack_ret
23d10     2D 00 64 FD | 	ret
23d14                 | 
23d14                 | __system___lockmem
23d14     00 FA 05 F6 | 	mov	result1, #0
23d18     01 FA 61 FD | 	cogid	result1
23d1c     00 FB 05 F1 | 	add	result1, #256
23d20                 | LR__2980
23d20     09 01 0A FB | 	rdlong	_var01, arg01 wz
23d24     09 FB 61 AC |  if_e	wrlong	result1, arg01
23d28     09 01 02 AB |  if_e	rdlong	_var01, arg01
23d2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
23d30     FD 00 0A F2 | 	cmp	_var01, result1 wz
23d34     E8 FF 9F 5D |  if_ne	jmp	#LR__2980
23d38                 | __system___lockmem_ret
23d38     2D 00 64 FD | 	ret
23d3c                 | 
23d3c                 | __system___string_cmp
23d3c     97 14 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
23d40                 | LR__2990
23d40     09 01 C2 FA | 	rdbyte	_var01, arg01
23d44     0A 03 C2 FA | 	rdbyte	_var02, arg02
23d48     00 05 02 F6 | 	mov	_var03, _var01
23d4c     01 05 8A F1 | 	sub	_var03, _var02 wz
23d50     01 12 06 F1 | 	add	arg01, #1
23d54     01 14 06 F1 | 	add	arg02, #1
23d58     0C 00 90 5D |  if_ne	jmp	#LR__2992
23d5c     00 00 0E F2 | 	cmp	_var01, #0 wz
23d60     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
23d64     D8 FF 9F 5D |  if_ne	jmp	#LR__2990
23d68                 | LR__2991
23d68                 | LR__2992
23d68     02 FB 01 F6 | 	mov	result1, _var03
23d6c                 | __system___string_cmp_ret
23d6c     2D 00 64 FD | 	ret
23d70                 | 
23d70                 | __system___string_concat
23d70     05 4A 05 F6 | 	mov	COUNT_, #5
23d74     A8 00 A0 FD | 	call	#pushregs_
23d78     09 27 02 F6 | 	mov	local01, arg01
23d7c     0A 29 02 F6 | 	mov	local02, arg02
23d80     13 13 02 F6 | 	mov	arg01, local01
23d84     09 2B 02 F6 | 	mov	local03, arg01
23d88     97 06 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
23d8c                 | LR__3000
23d8c     15 FB C9 FA | 	rdbyte	result1, local03 wz
23d90     01 2A 06 51 |  if_ne	add	local03, #1
23d94     F4 FF 9F 5D |  if_ne	jmp	#LR__3000
23d98                 | LR__3001
23d98     09 2B 82 F1 | 	sub	local03, arg01
23d9c     15 2D 02 F6 | 	mov	local04, local03
23da0     14 13 02 F6 | 	mov	arg01, local02
23da4     09 2B 02 F6 | 	mov	local03, arg01
23da8     97 06 48 FB | 	callpa	#(@LR__3003-@LR__3002)>>2,fcache_load_ptr_
23dac                 | LR__3002
23dac     15 FB C9 FA | 	rdbyte	result1, local03 wz
23db0     01 2A 06 51 |  if_ne	add	local03, #1
23db4     F4 FF 9F 5D |  if_ne	jmp	#LR__3002
23db8                 | LR__3003
23db8     09 2B 82 F1 | 	sub	local03, arg01
23dbc     16 13 02 F6 | 	mov	arg01, local04
23dc0     15 13 02 F1 | 	add	arg01, local03
23dc4     01 12 06 F1 | 	add	arg01, #1
23dc8     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
23dcc     FD 2E 0A F6 | 	mov	local05, result1 wz
23dd0     28 00 90 AD |  if_e	jmp	#LR__3004
23dd4     17 13 02 F6 | 	mov	arg01, local05
23dd8     13 15 02 F6 | 	mov	arg02, local01
23ddc     16 17 02 F6 | 	mov	arg03, local04
23de0     50 FE BF FD | 	call	#__system____builtin_memmove
23de4     17 13 02 F6 | 	mov	arg01, local05
23de8     16 13 02 F1 | 	add	arg01, local04
23dec     01 2A 06 F1 | 	add	local03, #1
23df0     14 15 02 F6 | 	mov	arg02, local02
23df4     15 17 02 F6 | 	mov	arg03, local03
23df8     38 FE BF FD | 	call	#__system____builtin_memmove
23dfc                 | LR__3004
23dfc     17 FB 01 F6 | 	mov	result1, local05
23e00     A7 F0 03 F6 | 	mov	ptra, fp
23e04     B2 00 A0 FD | 	call	#popregs_
23e08                 | __system___string_concat_ret
23e08     2D 00 64 FD | 	ret
23e0c                 | 
23e0c                 | __system___tx
23e0c     02 4A 05 F6 | 	mov	COUNT_, #2
23e10     A8 00 A0 FD | 	call	#pushregs_
23e14     09 27 02 F6 | 	mov	local01, arg01
23e18     0A 26 0E F2 | 	cmp	local01, #10 wz
23e1c     18 00 90 5D |  if_ne	jmp	#LR__3010
23e20     08 E6 05 F1 | 	add	ptr___system__dat__, #8
23e24     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
23e28     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
23e2c     02 28 CE F7 | 	test	local02, #2 wz
23e30     0D 12 06 56 |  if_ne	mov	arg01, #13
23e34     6C FC BF 5D |  if_ne	call	#__system___txraw
23e38                 | LR__3010
23e38     13 13 02 F6 | 	mov	arg01, local01
23e3c     64 FC BF FD | 	call	#__system___txraw
23e40     A7 F0 03 F6 | 	mov	ptra, fp
23e44     B2 00 A0 FD | 	call	#popregs_
23e48                 | __system___tx_ret
23e48     2D 00 64 FD | 	ret
23e4c                 | 
23e4c                 | __system___rx
23e4c     01 4A 05 F6 | 	mov	COUNT_, #1
23e50     A8 00 A0 FD | 	call	#pushregs_
23e54                 | LR__3020
23e54     00 12 06 F6 | 	mov	arg01, #0
23e58     8C FC BF FD | 	call	#__system___rxraw
23e5c     FD 26 02 F6 | 	mov	local01, result1
23e60     FF FF 7F FF 
23e64     FF 27 0E F2 | 	cmp	local01, ##-1 wz
23e68     E8 FF 9F AD |  if_e	jmp	#LR__3020
23e6c     0D 26 0E F2 | 	cmp	local01, #13 wz
23e70     14 00 90 5D |  if_ne	jmp	#LR__3021
23e74     08 E6 05 F1 | 	add	ptr___system__dat__, #8
23e78     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23e7c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
23e80     02 FA CD F7 | 	test	result1, #2 wz
23e84     0A 26 06 56 |  if_ne	mov	local01, #10
23e88                 | LR__3021
23e88     08 E6 05 F1 | 	add	ptr___system__dat__, #8
23e8c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
23e90     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
23e94     01 12 CE F7 | 	test	arg01, #1 wz
23e98     1C 00 90 AD |  if_e	jmp	#LR__3024
23e9c     7F 26 0E F2 | 	cmp	local01, #127 wz
23ea0     0C 00 90 5D |  if_ne	jmp	#LR__3022
23ea4     08 12 06 F6 | 	mov	arg01, #8
23ea8     60 FF BF FD | 	call	#__system___tx
23eac     08 00 90 FD | 	jmp	#LR__3023
23eb0                 | LR__3022
23eb0     13 13 02 F6 | 	mov	arg01, local01
23eb4     54 FF BF FD | 	call	#__system___tx
23eb8                 | LR__3023
23eb8                 | LR__3024
23eb8     13 FB 01 F6 | 	mov	result1, local01
23ebc     A7 F0 03 F6 | 	mov	ptra, fp
23ec0     B2 00 A0 FD | 	call	#popregs_
23ec4                 | __system___rx_ret
23ec4     2D 00 64 FD | 	ret
23ec8                 | 
23ec8                 | __system___pinwrite
23ec8     09 01 02 F6 | 	mov	_var01, arg01
23ecc     1F 00 06 F5 | 	and	_var01, #31
23ed0     20 12 CE F7 | 	test	arg01, #32 wz
23ed4     06 12 46 F0 | 	shr	arg01, #6
23ed8     09 13 CA F9 | 	bmask	arg01, arg01
23edc     00 13 62 F0 | 	shl	arg01, _var01
23ee0     00 15 62 F0 | 	shl	arg02, _var01
23ee4     1C 00 90 AD |  if_e	jmp	#LR__3030
23ee8     09 F7 43 F5 | 	or	dirb, arg01
23eec     FD 01 02 F6 | 	mov	_var01, outb
23ef0     09 01 22 F5 | 	andn	_var01, arg01
23ef4     09 15 02 F5 | 	and	arg02, arg01
23ef8     0A 01 42 F5 | 	or	_var01, arg02
23efc     00 FB 03 F6 | 	mov	outb, _var01
23f00     18 00 90 FD | 	jmp	#LR__3031
23f04                 | LR__3030
23f04     09 F5 43 F5 | 	or	dira, arg01
23f08     FC 01 02 F6 | 	mov	_var01, outa
23f0c     09 01 22 F5 | 	andn	_var01, arg01
23f10     09 15 02 F5 | 	and	arg02, arg01
23f14     0A 01 42 F5 | 	or	_var01, arg02
23f18     00 F9 03 F6 | 	mov	outa, _var01
23f1c                 | LR__3031
23f1c                 | __system___pinwrite_ret
23f1c     2D 00 64 FD | 	ret
23f20                 | 
23f20                 | __system___basic_read_line
23f20     06 4A 05 F6 | 	mov	COUNT_, #6
23f24     A8 00 A0 FD | 	call	#pushregs_
23f28     09 27 02 F6 | 	mov	local01, arg01
23f2c     00 28 06 F6 | 	mov	local02, #0
23f30     18 2A 06 F6 | 	mov	local03, #24
23f34     00 2C 06 F6 | 	mov	local04, #0
23f38     18 12 06 F6 | 	mov	arg01, #24
23f3c     74 3F B0 FD | 	call	#__system___gc_alloc_managed
23f40     FD 2E 0A F6 | 	mov	local05, result1 wz
23f44     17 FB 01 A6 |  if_e	mov	result1, local05
23f48     B0 00 90 AD |  if_e	jmp	#LR__3043
23f4c                 | LR__3040
23f4c     13 13 02 F6 | 	mov	arg01, local01
23f50     78 0B B0 FD | 	call	#__system___basic_get_char
23f54     FD 30 02 F6 | 	mov	local06, result1
23f58     01 30 56 F2 | 	cmps	local06, #1 wc
23f5c     8C 00 90 CD |  if_b	jmp	#LR__3042
23f60     0A 30 0E F2 | 	cmp	local06, #10 wz
23f64     10 00 90 5D |  if_ne	jmp	#LR__3041
23f68     00 2C 0E F2 | 	cmp	local04, #0 wz
23f6c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
23f70     01 28 86 11 |  if_a	sub	local02, #1
23f74     74 00 90 FD | 	jmp	#LR__3042
23f78                 | LR__3041
23f78     0D 30 0E F2 | 	cmp	local06, #13 wz
23f7c     01 2C 06 A6 |  if_e	mov	local04, #1
23f80     00 2C 06 56 |  if_ne	mov	local04, #0
23f84     08 30 0E F2 | 	cmp	local06, #8 wz
23f88     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
23f8c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
23f90     01 28 86 21 |  if_nc_and_z	sub	local02, #1
23f94     B4 FF 9F AD |  if_e	jmp	#LR__3040
23f98     17 17 02 F6 | 	mov	arg03, local05
23f9c     14 17 02 F1 | 	add	arg03, local02
23fa0     0B 31 42 FC | 	wrbyte	local06, arg03
23fa4     01 28 06 F1 | 	add	local02, #1
23fa8     15 29 0A F2 | 	cmp	local02, local03 wz
23fac     9C FF 9F 5D |  if_ne	jmp	#LR__3040
23fb0     15 13 02 F6 | 	mov	arg01, local03
23fb4     20 12 06 F1 | 	add	arg01, #32
23fb8     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
23fbc     FD 30 0A F6 | 	mov	local06, result1 wz
23fc0     18 FB 01 A6 |  if_e	mov	result1, local06
23fc4     34 00 90 AD |  if_e	jmp	#LR__3043
23fc8     18 13 02 F6 | 	mov	arg01, local06
23fcc     17 15 02 F6 | 	mov	arg02, local05
23fd0     15 17 02 F6 | 	mov	arg03, local03
23fd4     5C FC BF FD | 	call	#__system____builtin_memmove
23fd8     20 2A 06 F1 | 	add	local03, #32
23fdc     17 13 02 F6 | 	mov	arg01, local05
23fe0     0C 40 B0 FD | 	call	#__system___gc_free
23fe4     18 2F 02 F6 | 	mov	local05, local06
23fe8     60 FF 9F FD | 	jmp	#LR__3040
23fec                 | LR__3042
23fec     17 31 02 F6 | 	mov	local06, local05
23ff0     14 31 02 F1 | 	add	local06, local02
23ff4     18 01 48 FC | 	wrbyte	#0, local06
23ff8     17 FB 01 F6 | 	mov	result1, local05
23ffc                 | LR__3043
23ffc     A7 F0 03 F6 | 	mov	ptra, fp
24000     B2 00 A0 FD | 	call	#popregs_
24004                 | __system___basic_read_line_ret
24004     2D 00 64 FD | 	ret
24008                 | 
24008                 | __system___waitms
24008     09 01 02 F6 | 	mov	_var01, arg01
2400c     1A 02 62 FD | 	getct	_var02
24010     14 04 06 FB | 	rdlong	_var03, #20
24014     97 14 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
24018                 | LR__3050
24018     01 00 00 FF 
2401c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
24020     1C 00 90 CD |  if_b	jmp	#LR__3052
24024     02 03 02 F1 | 	add	_var02, _var03
24028     01 13 02 F6 | 	mov	arg01, _var02
2402c     00 12 66 FA | 	addct1	arg01, #0
24030     24 22 60 FD | 	waitct1
24034     01 00 00 FF 
24038     E8 01 86 F1 | 	sub	_var01, ##1000
2403c     D8 FF 9F FD | 	jmp	#LR__3050
24040                 | LR__3051
24040                 | LR__3052
24040     01 00 56 F2 | 	cmps	_var01, #1 wc
24044     28 00 90 CD |  if_b	jmp	#LR__3053
24048     02 01 02 FD | 	qmul	_var01, _var03
2404c     01 00 00 FF 
24050     E8 17 06 F6 | 	mov	arg03, ##1000
24054     19 FA 61 FD | 	getqy	result1
24058     18 12 62 FD | 	getqx	arg01
2405c     28 FA 61 FD | 	setq	result1
24060     0B 13 12 FD | 	qdiv	arg01, arg03
24064     18 12 62 FD | 	getqx	arg01
24068     01 13 62 FA | 	addct1	arg01, _var02
2406c     24 22 60 FD | 	waitct1
24070                 | LR__3053
24070                 | __system___waitms_ret
24070     2D 00 64 FD | 	ret
24074                 | 
24074                 | __system___waitus
24074     09 01 02 F6 | 	mov	_var01, arg01
24078     1A 02 62 FD | 	getct	_var02
2407c     14 04 06 FB | 	rdlong	_var03, #20
24080     97 14 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
24084                 | LR__3060
24084     A1 07 00 FF 
24088     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2408c     1C 00 90 CD |  if_b	jmp	#LR__3062
24090     02 03 02 F1 | 	add	_var02, _var03
24094     01 13 02 F6 | 	mov	arg01, _var02
24098     00 12 66 FA | 	addct1	arg01, #0
2409c     24 22 60 FD | 	waitct1
240a0     A1 07 00 FF 
240a4     40 00 86 F1 | 	sub	_var01, ##1000000
240a8     D8 FF 9F FD | 	jmp	#LR__3060
240ac                 | LR__3061
240ac                 | LR__3062
240ac     01 00 56 F2 | 	cmps	_var01, #1 wc
240b0     28 00 90 CD |  if_b	jmp	#LR__3063
240b4     02 01 02 FD | 	qmul	_var01, _var03
240b8     A1 07 00 FF 
240bc     40 16 06 F6 | 	mov	arg03, ##1000000
240c0     19 FA 61 FD | 	getqy	result1
240c4     18 12 62 FD | 	getqx	arg01
240c8     28 FA 61 FD | 	setq	result1
240cc     0B 13 12 FD | 	qdiv	arg01, arg03
240d0     18 FA 61 FD | 	getqx	result1
240d4     FD 02 62 FA | 	addct1	_var02, result1
240d8     24 22 60 FD | 	waitct1
240dc                 | LR__3063
240dc                 | __system___waitus_ret
240dc     2D 00 64 FD | 	ret
240e0                 | 
240e0                 | __system___mount
240e0     0B 4A 05 F6 | 	mov	COUNT_, #11
240e4     A8 00 A0 FD | 	call	#pushregs_
240e8     09 27 02 F6 | 	mov	local01, arg01
240ec     0A 29 0A F6 | 	mov	local02, arg02 wz
240f0     01 2A 66 F6 | 	neg	local03, #1
240f4     01 FA 65 A6 |  if_e	neg	result1, #1
240f8     98 02 90 AD |  if_e	jmp	#LR__3085
240fc     13 FB C1 FA | 	rdbyte	result1, local01
24100     2F FA 0D F2 | 	cmp	result1, #47 wz
24104     28 00 90 5D |  if_ne	jmp	#LR__3072
24108     13 13 02 F6 | 	mov	arg01, local01
2410c     09 2D 02 F6 | 	mov	local04, arg01
24110     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
24114                 | LR__3070
24114     16 FB C9 FA | 	rdbyte	result1, local04 wz
24118     01 2C 06 51 |  if_ne	add	local04, #1
2411c     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
24120                 | LR__3071
24120     09 2D 82 F1 | 	sub	local04, arg01
24124     16 FB 01 F6 | 	mov	result1, local04
24128     10 FA 55 F2 | 	cmps	result1, #16 wc
2412c     14 00 90 CD |  if_b	jmp	#LR__3073
24130                 | LR__3072
24130     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24134     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24138     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2413c     01 FA 65 F6 | 	neg	result1, #1
24140     50 02 90 FD | 	jmp	#LR__3085
24144                 | LR__3073
24144     00 2E 06 F6 | 	mov	local05, #0
24148                 | LR__3074
24148     04 2E 56 F2 | 	cmps	local05, #4 wc
2414c     B0 00 90 3D |  if_ae	jmp	#LR__3079
24150     17 13 02 F6 | 	mov	arg01, local05
24154     02 12 66 F0 | 	shl	arg01, #2
24158     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2415c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
24160     09 FB 09 FB | 	rdlong	result1, arg01 wz
24164     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24168     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
2416c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
24170     84 00 90 8D |  if_c_and_z	jmp	#LR__3078
24174     17 13 02 F6 | 	mov	arg01, local05
24178     02 12 66 F0 | 	shl	arg01, #2
2417c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24180     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
24184     09 13 02 FB | 	rdlong	arg01, arg01
24188     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2418c     09 2D 02 F6 | 	mov	local04, arg01
24190     97 06 48 FB | 	callpa	#(@LR__3076-@LR__3075)>>2,fcache_load_ptr_
24194                 | LR__3075
24194     16 FB C9 FA | 	rdbyte	result1, local04 wz
24198     01 2C 06 51 |  if_ne	add	local04, #1
2419c     F4 FF 9F 5D |  if_ne	jmp	#LR__3075
241a0                 | LR__3076
241a0     09 2D 82 F1 | 	sub	local04, arg01
241a4     16 31 02 F6 | 	mov	local06, local04
241a8     18 13 02 F6 | 	mov	arg01, local06
241ac     13 13 02 F1 | 	add	arg01, local01
241b0     09 FB C1 FA | 	rdbyte	result1, arg01
241b4     2F FA 0D F2 | 	cmp	result1, #47 wz
241b8     18 33 02 56 |  if_ne	mov	local07, local06
241bc     13 33 02 51 |  if_ne	add	local07, local01
241c0     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
241c4     30 00 90 5D |  if_ne	jmp	#LR__3077
241c8     17 17 02 F6 | 	mov	arg03, local05
241cc     02 16 66 F0 | 	shl	arg03, #2
241d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
241d4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
241d8     0B 15 02 FB | 	rdlong	arg02, arg03
241dc     13 13 02 F6 | 	mov	arg01, local01
241e0     18 17 02 F6 | 	mov	arg03, local06
241e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
241e8     48 51 B0 FD | 	call	#__system__strncmp
241ec     00 FA 0D F2 | 	cmp	result1, #0 wz
241f0     17 2B 02 A6 |  if_e	mov	local03, local05
241f4     08 00 90 AD |  if_e	jmp	#LR__3079
241f8                 | LR__3077
241f8                 | LR__3078
241f8     01 2E 06 F1 | 	add	local05, #1
241fc     48 FF 9F FD | 	jmp	#LR__3074
24200                 | LR__3079
24200     FF FF 7F FF 
24204     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
24208     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2420c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
24210     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24214     01 FA 65 A6 |  if_e	neg	result1, #1
24218     78 01 90 AD |  if_e	jmp	#LR__3085
2421c     15 2F 02 F6 | 	mov	local05, local03
24220     17 33 02 F6 | 	mov	local07, local05
24224     02 32 66 F0 | 	shl	local07, #2
24228     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2422c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
24230     19 31 0A FB | 	rdlong	local06, local07 wz
24234     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
24238     58 00 90 AD |  if_e	jmp	#LR__3080
2423c     4C 30 06 F1 | 	add	local06, #76
24240     18 33 0A FB | 	rdlong	local07, local06 wz
24244     4C 30 86 F1 | 	sub	local06, #76
24248     48 00 90 AD |  if_e	jmp	#LR__3080
2424c     4C 30 06 F1 | 	add	local06, #76
24250     18 33 02 FB | 	rdlong	local07, local06
24254     19 2B 02 F6 | 	mov	local03, local07
24258     13 32 46 F7 | 	zerox	local07, #19
2425c     14 2A 46 F0 | 	shr	local03, #20
24260     02 2A 66 F0 | 	shl	local03, #2
24264     ED 2A 02 F1 | 	add	local03, __methods__
24268     15 2B 02 FB | 	rdlong	local03, local03
2426c     17 31 02 F6 | 	mov	local06, local05
24270     02 30 66 F0 | 	shl	local06, #2
24274     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24278     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2427c     18 13 02 FB | 	rdlong	arg01, local06
24280     F2 30 02 F6 | 	mov	local06, objptr
24284     19 E5 01 F6 | 	mov	objptr, local07
24288     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2428c     2D 2A 62 FD | 	call	local03
24290     18 E5 01 F6 | 	mov	objptr, local06
24294                 | LR__3080
24294     17 35 02 F6 | 	mov	local08, local05
24298     02 34 66 F0 | 	shl	local08, #2
2429c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
242a0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
242a4     1A 29 62 FC | 	wrlong	local02, local08
242a8     00 28 0E F2 | 	cmp	local02, #0 wz
242ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
242b0     18 00 90 5D |  if_ne	jmp	#LR__3081
242b4     02 2E 66 F0 | 	shl	local05, #2
242b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
242bc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
242c0     17 01 68 FC | 	wrlong	#0, local05
242c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
242c8     C4 00 90 FD | 	jmp	#LR__3084
242cc                 | LR__3081
242cc     17 37 02 F6 | 	mov	local09, local05
242d0     04 36 66 F0 | 	shl	local09, #4
242d4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
242d8     F3 36 02 F1 | 	add	local09, ptr___system__dat__
242dc     1B 13 02 F6 | 	mov	arg01, local09
242e0     13 15 02 F6 | 	mov	arg02, local01
242e4     10 16 06 F6 | 	mov	arg03, #16
242e8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
242ec     98 4F B0 FD | 	call	#__system__strncpy
242f0     48 28 06 F1 | 	add	local02, #72
242f4     14 35 0A FB | 	rdlong	local08, local02 wz
242f8     48 28 86 F1 | 	sub	local02, #72
242fc     7C 00 90 AD |  if_e	jmp	#LR__3083
24300     48 28 06 F1 | 	add	local02, #72
24304     14 35 02 FB | 	rdlong	local08, local02
24308     1A 39 02 F6 | 	mov	local10, local08
2430c     13 34 46 F7 | 	zerox	local08, #19
24310     14 38 46 F0 | 	shr	local10, #20
24314     02 38 66 F0 | 	shl	local10, #2
24318     ED 38 02 F1 | 	add	local10, __methods__
2431c     1C 39 02 FB | 	rdlong	local10, local10
24320     1B 13 02 F6 | 	mov	arg01, local09
24324     F2 3A 02 F6 | 	mov	local11, objptr
24328     1A E5 01 F6 | 	mov	objptr, local08
2432c     2D 38 62 FD | 	call	local10
24330     1D E5 01 F6 | 	mov	objptr, local11
24334     FD 12 0A F6 | 	mov	arg01, result1 wz
24338     40 00 90 AD |  if_e	jmp	#LR__3082
2433c     17 35 02 F6 | 	mov	local08, local05
24340     02 34 66 F0 | 	shl	local08, #2
24344     74 E6 05 F1 | 	add	ptr___system__dat__, #116
24348     F3 34 02 F1 | 	add	local08, ptr___system__dat__
2434c     1A 01 68 FC | 	wrlong	#0, local08
24350     02 2E 66 F0 | 	shl	local05, #2
24354     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
24358     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2435c     17 01 68 FC | 	wrlong	#0, local05
24360     09 13 6A F6 | 	neg	arg01, arg01 wz
24364     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
24368     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2436c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24370     01 FA 65 56 |  if_ne	neg	result1, #1
24374     00 FA 05 A6 |  if_e	mov	result1, #0
24378     18 00 90 FD | 	jmp	#LR__3085
2437c                 | LR__3082
2437c                 | LR__3083
2437c     02 2E 66 F0 | 	shl	local05, #2
24380     64 E6 05 F1 | 	add	ptr___system__dat__, #100
24384     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
24388     17 37 62 FC | 	wrlong	local09, local05
2438c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24390                 | LR__3084
24390     00 FA 05 F6 | 	mov	result1, #0
24394                 | LR__3085
24394     A7 F0 03 F6 | 	mov	ptra, fp
24398     B2 00 A0 FD | 	call	#popregs_
2439c                 | __system___mount_ret
2439c     2D 00 64 FD | 	ret
243a0                 | 
243a0                 | __system___chdir
243a0     00 4A 05 F6 | 	mov	COUNT_, #0
243a4     A8 00 A0 FD | 	call	#pushregs_
243a8     40 F0 07 F1 | 	add	ptra, #64
243ac     04 4E 05 F1 | 	add	fp, #4
243b0     A7 12 62 FC | 	wrlong	arg01, fp
243b4     04 4E 05 F1 | 	add	fp, #4
243b8     A7 14 02 F6 | 	mov	arg02, fp
243bc     08 4E 85 F1 | 	sub	fp, #8
243c0     68 4B B0 FD | 	call	#__system__stat
243c4     3C 4E 05 F1 | 	add	fp, #60
243c8     A7 FA 61 FC | 	wrlong	result1, fp
243cc     3C 4E 85 F1 | 	sub	fp, #60
243d0     00 FA 0D F2 | 	cmp	result1, #0 wz
243d4     3C 4E 05 51 |  if_ne	add	fp, #60
243d8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
243dc     3C 4E 85 51 |  if_ne	sub	fp, #60
243e0     BC 00 90 5D |  if_ne	jmp	#LR__3092
243e4     10 4E 05 F1 | 	add	fp, #16
243e8     A7 12 02 FB | 	rdlong	arg01, fp
243ec     10 4E 85 F1 | 	sub	fp, #16
243f0     78 00 00 FF 
243f4     00 12 06 F5 | 	and	arg01, ##61440
243f8     08 00 00 FF 
243fc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
24400     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
24404     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
24408     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2440c     01 FA 65 56 |  if_ne	neg	result1, #1
24410     8C 00 90 5D |  if_ne	jmp	#LR__3092
24414     04 4E 05 F1 | 	add	fp, #4
24418     A7 16 02 FB | 	rdlong	arg03, fp
2441c     04 4E 85 F1 | 	sub	fp, #4
24420     0B 17 C2 FA | 	rdbyte	arg03, arg03
24424     2F 16 0E F2 | 	cmp	arg03, #47 wz
24428     24 00 90 5D |  if_ne	jmp	#LR__3090
2442c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
24430     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24434     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24438     04 4E 05 F1 | 	add	fp, #4
2443c     A7 14 02 FB | 	rdlong	arg02, fp
24440     04 4E 85 F1 | 	sub	fp, #4
24444     00 17 06 F6 | 	mov	arg03, #256
24448     3C 4E B0 FD | 	call	#__system__strncpy
2444c     4C 00 90 FD | 	jmp	#LR__3091
24450                 | LR__3090
24450     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24454     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24458     38 4E 05 F1 | 	add	fp, #56
2445c     A7 12 62 FC | 	wrlong	arg01, fp
24460     38 4E 85 F1 | 	sub	fp, #56
24464     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
24468     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2446c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24470     00 17 06 F6 | 	mov	arg03, #256
24474     10 4E B0 FD | 	call	#__system__strncpy
24478     38 4E 05 F1 | 	add	fp, #56
2447c     A7 12 02 FB | 	rdlong	arg01, fp
24480     34 4E 85 F1 | 	sub	fp, #52
24484     A7 14 02 FB | 	rdlong	arg02, fp
24488     04 4E 85 F1 | 	sub	fp, #4
2448c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
24490     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
24494     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24498     10 00 B0 FD | 	call	#__system____getvfsforfile
2449c                 | LR__3091
2449c     00 FA 05 F6 | 	mov	result1, #0
244a0                 | LR__3092
244a0     A7 F0 03 F6 | 	mov	ptra, fp
244a4     B2 00 A0 FD | 	call	#popregs_
244a8                 | __system___chdir_ret
244a8     2D 00 64 FD | 	ret
244ac                 | 
244ac                 | __system____getvfsforfile
244ac     0E 4A 05 F6 | 	mov	COUNT_, #14
244b0     A8 00 A0 FD | 	call	#pushregs_
244b4     09 27 02 F6 | 	mov	local01, arg01
244b8     0A 29 02 F6 | 	mov	local02, arg02
244bc     0B 2B 02 F6 | 	mov	local03, arg03
244c0     97 10 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
244c4                 | LR__3100
244c4     14 FB C1 FA | 	rdbyte	result1, local02
244c8     2F FA 0D F2 | 	cmp	result1, #47 wz
244cc     01 28 06 A1 |  if_e	add	local02, #1
244d0     14 2D C2 AA |  if_e	rdbyte	local04, local02
244d4     01 28 86 A1 |  if_e	sub	local02, #1
244d8     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
244dc     01 28 06 A1 |  if_e	add	local02, #1
244e0     E0 FF 9F AD |  if_e	jmp	#LR__3100
244e4                 | LR__3101
244e4     14 2D C2 FA | 	rdbyte	local04, local02
244e8     2F 2C 0E F2 | 	cmp	local04, #47 wz
244ec     14 00 90 5D |  if_ne	jmp	#LR__3102
244f0     13 13 02 F6 | 	mov	arg01, local01
244f4     14 15 02 F6 | 	mov	arg02, local02
244f8     00 17 06 F6 | 	mov	arg03, #256
244fc     88 4D B0 FD | 	call	#__system__strncpy
24500     7C 00 90 FD | 	jmp	#LR__3104
24504                 | LR__3102
24504     84 E6 05 F1 | 	add	ptr___system__dat__, #132
24508     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2450c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
24510     13 13 02 F6 | 	mov	arg01, local01
24514     00 17 06 F6 | 	mov	arg03, #256
24518     6C 4D B0 FD | 	call	#__system__strncpy
2451c     14 2D CA FA | 	rdbyte	local04, local02 wz
24520     5C 00 90 AD |  if_e	jmp	#LR__3103
24524     14 2D C2 FA | 	rdbyte	local04, local02
24528     2E 2C 0E F2 | 	cmp	local04, #46 wz
2452c     01 28 06 A1 |  if_e	add	local02, #1
24530     14 2F C2 AA |  if_e	rdbyte	local05, local02
24534     01 28 86 A1 |  if_e	sub	local02, #1
24538     17 31 02 A6 |  if_e	mov	local06, local05
2453c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
24540     3C 00 90 AD |  if_e	jmp	#LR__3103
24544     13 2F C2 FA | 	rdbyte	local05, local01
24548     2F 2E 0E F2 | 	cmp	local05, #47 wz
2454c     01 26 06 A1 |  if_e	add	local01, #1
24550     13 2D C2 AA |  if_e	rdbyte	local04, local01
24554     01 26 86 A1 |  if_e	sub	local01, #1
24558     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
2455c     9C 01 00 5F 
24560     20 14 06 56 |  if_ne	mov	arg02, ##@LR__5230
24564     13 13 02 56 |  if_ne	mov	arg01, local01
24568     00 17 06 56 |  if_ne	mov	arg03, #256
2456c     64 4D B0 5D |  if_ne	call	#__system__strncat
24570     13 13 02 F6 | 	mov	arg01, local01
24574     14 15 02 F6 | 	mov	arg02, local02
24578     00 17 06 F6 | 	mov	arg03, #256
2457c     54 4D B0 FD | 	call	#__system__strncat
24580                 | LR__3103
24580                 | LR__3104
24580     13 13 02 F6 | 	mov	arg01, local01
24584     0C 4F B0 FD | 	call	#__system___normalizeName
24588     13 2D CA FA | 	rdbyte	local04, local01 wz
2458c     1C 00 90 AD |  if_e	jmp	#LR__3105
24590     13 2D C2 FA | 	rdbyte	local04, local01
24594     2F 2C 0E F2 | 	cmp	local04, #47 wz
24598     01 26 06 A1 |  if_e	add	local01, #1
2459c     13 31 C2 AA |  if_e	rdbyte	local06, local01
245a0     01 26 86 A1 |  if_e	sub	local01, #1
245a4     00 30 4E A2 |  if_e	cmps	local06, #0 wz
245a8     18 00 90 5D |  if_ne	jmp	#LR__3106
245ac                 | LR__3105
245ac     01 00 00 FF 
245b0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
245b4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
245b8     01 00 00 FF 
245bc     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
245c0     EC 01 90 FD | 	jmp	#LR__3120
245c4                 | LR__3106
245c4     00 32 06 F6 | 	mov	local07, #0
245c8                 | LR__3107
245c8     04 32 56 F2 | 	cmps	local07, #4 wc
245cc     CC 01 90 3D |  if_ae	jmp	#LR__3119
245d0     19 31 02 F6 | 	mov	local06, local07
245d4     02 30 66 F0 | 	shl	local06, #2
245d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
245dc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
245e0     18 31 0A FB | 	rdlong	local06, local06 wz
245e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
245e8     A8 01 90 AD |  if_e	jmp	#LR__3118
245ec     19 2D 02 F6 | 	mov	local04, local07
245f0     02 2C 66 F0 | 	shl	local04, #2
245f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
245f8     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
245fc     16 13 02 FB | 	rdlong	arg01, local04
24600     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24604     09 35 02 F6 | 	mov	local08, arg01
24608     97 06 48 FB | 	callpa	#(@LR__3109-@LR__3108)>>2,fcache_load_ptr_
2460c                 | LR__3108
2460c     1A FB C9 FA | 	rdbyte	result1, local08 wz
24610     01 34 06 51 |  if_ne	add	local08, #1
24614     F4 FF 9F 5D |  if_ne	jmp	#LR__3108
24618                 | LR__3109
24618     09 35 82 F1 | 	sub	local08, arg01
2461c     1A 37 02 F6 | 	mov	local09, local08
24620     1B 2D 02 F6 | 	mov	local04, local09
24624     13 2D 02 F1 | 	add	local04, local01
24628     16 31 C2 FA | 	rdbyte	local06, local04
2462c     2F 30 0E F2 | 	cmp	local06, #47 wz
24630     1B 39 02 56 |  if_ne	mov	local10, local09
24634     13 39 02 51 |  if_ne	add	local10, local01
24638     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
2463c     54 01 90 5D |  if_ne	jmp	#LR__3117
24640     19 17 02 F6 | 	mov	arg03, local07
24644     02 16 66 F0 | 	shl	arg03, #2
24648     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2464c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
24650     0B 15 02 FB | 	rdlong	arg02, arg03
24654     1B 17 02 F6 | 	mov	arg03, local09
24658     13 13 02 F6 | 	mov	arg01, local01
2465c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24660     D0 4C B0 FD | 	call	#__system__strncmp
24664     00 FA 4D F2 | 	cmps	result1, #0 wz
24668     28 01 90 5D |  if_ne	jmp	#LR__3117
2466c     19 3B 02 F6 | 	mov	local11, local07
24670     02 3A 66 F0 | 	shl	local11, #2
24674     74 E6 05 F1 | 	add	ptr___system__dat__, #116
24678     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
2467c     1D 3D 02 FB | 	rdlong	local12, local11
24680     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
24684     97 22 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
24688                 | LR__3110
24688     1B 31 02 F6 | 	mov	local06, local09
2468c     01 30 06 F1 | 	add	local06, #1
24690     13 31 02 F1 | 	add	local06, local01
24694     18 3B C2 FA | 	rdbyte	local11, local06
24698     2E 3A 0E F2 | 	cmp	local11, #46 wz
2469c     2C 00 90 5D |  if_ne	jmp	#LR__3112
246a0     1B 3B 02 F6 | 	mov	local11, local09
246a4     02 3A 06 F1 | 	add	local11, #2
246a8     13 3B 02 F1 | 	add	local11, local01
246ac     1D 39 C2 FA | 	rdbyte	local10, local11
246b0     2F 38 0E F2 | 	cmp	local10, #47 wz
246b4     1B 3F 02 56 |  if_ne	mov	local13, local09
246b8     02 3E 06 51 |  if_ne	add	local13, #2
246bc     13 3F 02 51 |  if_ne	add	local13, local01
246c0     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
246c4     01 36 06 A1 |  if_e	add	local09, #1
246c8     BC FF 9F AD |  if_e	jmp	#LR__3110
246cc                 | LR__3111
246cc                 | LR__3112
246cc     00 2A 0E F2 | 	cmp	local03, #0 wz
246d0     15 13 02 56 |  if_ne	mov	arg01, local03
246d4     13 15 02 56 |  if_ne	mov	arg02, local01
246d8     00 17 06 56 |  if_ne	mov	arg03, #256
246dc     A8 4B B0 5D |  if_ne	call	#__system__strncpy
246e0     13 15 02 F6 | 	mov	arg02, local01
246e4     1B 15 02 F1 | 	add	arg02, local09
246e8     01 14 06 F1 | 	add	arg02, #1
246ec     13 13 02 F6 | 	mov	arg01, local01
246f0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
246f4     13 13 02 F6 | 	mov	arg01, local01
246f8     09 35 02 F6 | 	mov	local08, arg01
246fc     97 06 48 FB | 	callpa	#(@LR__3114-@LR__3113)>>2,fcache_load_ptr_
24700                 | LR__3113
24700     1A FB C9 FA | 	rdbyte	result1, local08 wz
24704     01 34 06 51 |  if_ne	add	local08, #1
24708     F4 FF 9F 5D |  if_ne	jmp	#LR__3113
2470c                 | LR__3114
2470c     09 35 82 F1 | 	sub	local08, arg01
24710     1A 37 02 F6 | 	mov	local09, local08
24714                 | LR__3115
24714     01 36 56 F2 | 	cmps	local09, #1 wc
24718     70 00 90 CD |  if_b	jmp	#LR__3116
2471c     1B 2D 02 F6 | 	mov	local04, local09
24720     13 2D 02 F1 | 	add	local04, local01
24724     16 3B C2 FA | 	rdbyte	local11, local04
24728     2F 3A 0E F2 | 	cmp	local11, #47 wz
2472c     1B 3B 02 A6 |  if_e	mov	local11, local09
24730     13 3B 02 A1 |  if_e	add	local11, local01
24734     1D 01 48 AC |  if_e	wrbyte	#0, local11
24738     01 36 86 A1 |  if_e	sub	local09, #1
2473c     D4 FF 9F AD |  if_e	jmp	#LR__3115
24740     1B 2D 02 F6 | 	mov	local04, local09
24744     13 2D 02 F1 | 	add	local04, local01
24748     16 3B C2 FA | 	rdbyte	local11, local04
2474c     2E 3A 0E F2 | 	cmp	local11, #46 wz
24750     38 00 90 5D |  if_ne	jmp	#LR__3116
24754     02 36 56 F2 | 	cmps	local09, #2 wc
24758     30 00 90 CD |  if_b	jmp	#LR__3116
2475c     1B 41 02 F6 | 	mov	local14, local09
24760     01 40 86 F1 | 	sub	local14, #1
24764     13 41 02 F1 | 	add	local14, local01
24768     20 2F C2 FA | 	rdbyte	local05, local14
2476c     2F 2E 0E F2 | 	cmp	local05, #47 wz
24770     18 00 90 5D |  if_ne	jmp	#LR__3116
24774     1B 2D 02 F6 | 	mov	local04, local09
24778     01 2C 86 F1 | 	sub	local04, #1
2477c     13 2D 02 F1 | 	add	local04, local01
24780     16 01 48 FC | 	wrbyte	#0, local04
24784     02 36 86 F1 | 	sub	local09, #2
24788     88 FF 9F FD | 	jmp	#LR__3115
2478c                 | LR__3116
2478c     1E FB 01 F6 | 	mov	result1, local12
24790     1C 00 90 FD | 	jmp	#LR__3120
24794                 | LR__3117
24794                 | LR__3118
24794     01 32 06 F1 | 	add	local07, #1
24798     2C FE 9F FD | 	jmp	#LR__3107
2479c                 | LR__3119
2479c     02 00 00 FF 
247a0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
247a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
247a8     02 00 00 FF 
247ac     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
247b0                 | LR__3120
247b0     A7 F0 03 F6 | 	mov	ptra, fp
247b4     B2 00 A0 FD | 	call	#popregs_
247b8                 | __system____getvfsforfile_ret
247b8     2D 00 64 FD | 	ret
247bc                 | 
247bc                 | __system___basic_open
247bc     05 4A 05 F6 | 	mov	COUNT_, #5
247c0     A8 00 A0 FD | 	call	#pushregs_
247c4     0A 27 02 F6 | 	mov	local01, arg02
247c8     0B 29 02 F6 | 	mov	local02, arg03
247cc     0C 2B 02 F6 | 	mov	local03, arg04
247d0     00 2C 06 F6 | 	mov	local04, #0
247d4     88 4A B0 FD | 	call	#__system____getftab
247d8     FD 2E 0A F6 | 	mov	local05, result1 wz
247dc     18 00 90 5D |  if_ne	jmp	#LR__3130
247e0     EE 12 02 F6 | 	mov	arg01, abortchain
247e4     0C 14 06 F6 | 	mov	arg02, #12
247e8     01 16 06 F6 | 	mov	arg03, #1
247ec     DA 00 A0 FD | 	call	#__longjmp
247f0     01 FA 65 F6 | 	neg	result1, #1
247f4     14 01 90 FD | 	jmp	#LR__3139
247f8                 | LR__3130
247f8     08 2E 06 F1 | 	add	local05, #8
247fc     17 FB 09 FB | 	rdlong	result1, local05 wz
24800     08 2E 86 F1 | 	sub	local05, #8
24804     17 13 02 56 |  if_ne	mov	arg01, local05
24808     A8 41 B0 5D |  if_ne	call	#__system___closeraw
2480c     00 26 0E F2 | 	cmp	local01, #0 wz
24810     00 28 0E A2 |  if_e	cmp	local02, #0 wz
24814     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
24818     3C 00 90 AD |  if_e	jmp	#LR__3132
2481c     0C 12 06 F6 | 	mov	arg01, #12
24820     90 36 B0 FD | 	call	#__system___gc_alloc_managed
24824     FD 2C 0A F6 | 	mov	local04, result1 wz
24828     18 00 90 5D |  if_ne	jmp	#LR__3131
2482c     EE 12 02 F6 | 	mov	arg01, abortchain
24830     07 14 06 F6 | 	mov	arg02, #7
24834     01 16 06 F6 | 	mov	arg03, #1
24838     DA 00 A0 FD | 	call	#__longjmp
2483c     01 FA 65 F6 | 	neg	result1, #1
24840     C8 00 90 FD | 	jmp	#LR__3139
24844                 | LR__3131
24844     16 01 68 FC | 	wrlong	#0, local04
24848     04 2C 06 F1 | 	add	local04, #4
2484c     16 01 68 FC | 	wrlong	#0, local04
24850     04 2C 86 F1 | 	sub	local04, #4
24854     17 2D 62 FC | 	wrlong	local04, local05
24858                 | LR__3132
24858     00 26 0E F2 | 	cmp	local01, #0 wz
2485c     20 00 90 AD |  if_e	jmp	#LR__3133
24860     16 27 62 FC | 	wrlong	local01, local04
24864     16 FB 01 F6 | 	mov	result1, local04
24868     00 B8 04 FF 
2486c     00 FA 45 F5 | 	or	result1, ##158334976
24870     1C 2E 06 F1 | 	add	local05, #28
24874     17 FB 61 FC | 	wrlong	result1, local05
24878     1C 2E 86 F1 | 	sub	local05, #28
2487c     0C 00 90 FD | 	jmp	#LR__3134
24880                 | LR__3133
24880     1C 2E 06 F1 | 	add	local05, #28
24884     17 01 68 FC | 	wrlong	#0, local05
24888     1C 2E 86 F1 | 	sub	local05, #28
2488c                 | LR__3134
2488c     00 28 0E F2 | 	cmp	local02, #0 wz
24890     28 00 90 AD |  if_e	jmp	#LR__3135
24894     04 2C 06 F1 | 	add	local04, #4
24898     16 29 62 FC | 	wrlong	local02, local04
2489c     04 2C 86 F1 | 	sub	local04, #4
248a0     16 FB 01 F6 | 	mov	result1, local04
248a4     00 C0 04 FF 
248a8     00 FA 45 F5 | 	or	result1, ##159383552
248ac     20 2E 06 F1 | 	add	local05, #32
248b0     17 FB 61 FC | 	wrlong	result1, local05
248b4     20 2E 86 F1 | 	sub	local05, #32
248b8     0C 00 90 FD | 	jmp	#LR__3136
248bc                 | LR__3135
248bc     20 2E 06 F1 | 	add	local05, #32
248c0     17 01 68 FC | 	wrlong	#0, local05
248c4     20 2E 86 F1 | 	sub	local05, #32
248c8                 | LR__3136
248c8     00 2A 0E F2 | 	cmp	local03, #0 wz
248cc     24 00 90 AD |  if_e	jmp	#LR__3137
248d0     08 2C 06 F1 | 	add	local04, #8
248d4     16 2B 62 FC | 	wrlong	local03, local04
248d8     08 2C 86 F1 | 	sub	local04, #8
248dc     00 C8 04 FF 
248e0     00 2C 46 F5 | 	or	local04, ##160432128
248e4     24 2E 06 F1 | 	add	local05, #36
248e8     17 2D 62 FC | 	wrlong	local04, local05
248ec     24 2E 86 F1 | 	sub	local05, #36
248f0     0C 00 90 FD | 	jmp	#LR__3138
248f4                 | LR__3137
248f4     24 2E 06 F1 | 	add	local05, #36
248f8     17 01 68 FC | 	wrlong	#0, local05
248fc     24 2E 86 F1 | 	sub	local05, #36
24900                 | LR__3138
24900     08 2E 06 F1 | 	add	local05, #8
24904     17 0F 68 FC | 	wrlong	#7, local05
24908     00 FA 05 F6 | 	mov	result1, #0
2490c                 | LR__3139
2490c     A7 F0 03 F6 | 	mov	ptra, fp
24910     B2 00 A0 FD | 	call	#popregs_
24914                 | __system___basic_open_ret
24914     2D 00 64 FD | 	ret
24918                 | 
24918                 | __system___basic_open_string
24918     04 4A 05 F6 | 	mov	COUNT_, #4
2491c     A8 00 A0 FD | 	call	#pushregs_
24920     0A 27 02 F6 | 	mov	local01, arg02
24924     0B 29 02 F6 | 	mov	local02, arg03
24928     34 49 B0 FD | 	call	#__system____getftab
2492c     FD 2A 0A F6 | 	mov	local03, result1 wz
24930     18 00 90 5D |  if_ne	jmp	#LR__3140
24934     EE 12 02 F6 | 	mov	arg01, abortchain
24938     0C 14 06 F6 | 	mov	arg02, #12
2493c     01 16 06 F6 | 	mov	arg03, #1
24940     DA 00 A0 FD | 	call	#__longjmp
24944     01 FA 65 F6 | 	neg	result1, #1
24948     58 00 90 FD | 	jmp	#LR__3142
2494c                 | LR__3140
2494c     08 2A 06 F1 | 	add	local03, #8
24950     15 19 0A FB | 	rdlong	arg04, local03 wz
24954     08 2A 86 F1 | 	sub	local03, #8
24958     15 13 02 56 |  if_ne	mov	arg01, local03
2495c     54 40 B0 5D |  if_ne	call	#__system___closeraw
24960     13 15 02 F6 | 	mov	arg02, local01
24964     14 17 02 F6 | 	mov	arg03, local02
24968     15 13 02 F6 | 	mov	arg01, local03
2496c     B6 19 06 F6 | 	mov	arg04, #438
24970     3C 3D B0 FD | 	call	#__system___openraw
24974     FD 2C 02 F6 | 	mov	local04, result1
24978     00 2C 56 F2 | 	cmps	local04, #0 wc
2497c     20 00 90 3D |  if_ae	jmp	#LR__3141
24980     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24984     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
24988     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2498c     EE 12 02 F6 | 	mov	arg01, abortchain
24990     01 16 06 F6 | 	mov	arg03, #1
24994     DA 00 A0 FD | 	call	#__longjmp
24998     01 FA 65 F6 | 	neg	result1, #1
2499c     04 00 90 FD | 	jmp	#LR__3142
249a0                 | LR__3141
249a0     16 FB 01 F6 | 	mov	result1, local04
249a4                 | LR__3142
249a4     A7 F0 03 F6 | 	mov	ptra, fp
249a8     B2 00 A0 FD | 	call	#popregs_
249ac                 | __system___basic_open_string_ret
249ac     2D 00 64 FD | 	ret
249b0                 | 
249b0                 | __system___basic_print_char
249b0     03 4A 05 F6 | 	mov	COUNT_, #3
249b4     A8 00 A0 FD | 	call	#pushregs_
249b8     0A 27 02 F6 | 	mov	local01, arg02
249bc     F4 4F B0 FD | 	call	#__system___gettxfunc
249c0     FD 28 0A F6 | 	mov	local02, result1 wz
249c4     00 FA 05 A6 |  if_e	mov	result1, #0
249c8     30 00 90 AD |  if_e	jmp	#LR__3150
249cc     14 2B 02 F6 | 	mov	local03, local02
249d0     13 28 46 F7 | 	zerox	local02, #19
249d4     14 2A 46 F0 | 	shr	local03, #20
249d8     02 2A 66 F0 | 	shl	local03, #2
249dc     ED 2A 02 F1 | 	add	local03, __methods__
249e0     15 2B 02 FB | 	rdlong	local03, local03
249e4     13 13 02 F6 | 	mov	arg01, local01
249e8     F2 26 02 F6 | 	mov	local01, objptr
249ec     14 E5 01 F6 | 	mov	objptr, local02
249f0     2D 2A 62 FD | 	call	local03
249f4     13 E5 01 F6 | 	mov	objptr, local01
249f8     01 FA 05 F6 | 	mov	result1, #1
249fc                 | LR__3150
249fc     A7 F0 03 F6 | 	mov	ptra, fp
24a00     B2 00 A0 FD | 	call	#popregs_
24a04                 | __system___basic_print_char_ret
24a04     2D 00 64 FD | 	ret
24a08                 | 
24a08                 | __system___basic_print_string
24a08     03 4A 05 F6 | 	mov	COUNT_, #3
24a0c     A8 00 A0 FD | 	call	#pushregs_
24a10     0A 27 02 F6 | 	mov	local01, arg02
24a14     0B 29 02 F6 | 	mov	local02, arg03
24a18     98 4F B0 FD | 	call	#__system___gettxfunc
24a1c     FD 2A 0A F6 | 	mov	local03, result1 wz
24a20     00 FA 05 A6 |  if_e	mov	result1, #0
24a24     18 00 90 AD |  if_e	jmp	#LR__3160
24a28     00 26 0E F2 | 	cmp	local01, #0 wz
24a2c     00 FA 05 A6 |  if_e	mov	result1, #0
24a30     15 13 02 56 |  if_ne	mov	arg01, local03
24a34     14 15 02 56 |  if_ne	mov	arg02, local02
24a38     13 17 02 56 |  if_ne	mov	arg03, local01
24a3c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
24a40                 | LR__3160
24a40     A7 F0 03 F6 | 	mov	ptra, fp
24a44     B2 00 A0 FD | 	call	#popregs_
24a48                 | __system___basic_print_string_ret
24a48     2D 00 64 FD | 	ret
24a4c                 | 
24a4c                 | __system___basic_print_integer
24a4c     04 4A 05 F6 | 	mov	COUNT_, #4
24a50     A8 00 A0 FD | 	call	#pushregs_
24a54     0A 27 02 F6 | 	mov	local01, arg02
24a58     0B 29 02 F6 | 	mov	local02, arg03
24a5c     0C 2B 02 F6 | 	mov	local03, arg04
24a60     50 4F B0 FD | 	call	#__system___gettxfunc
24a64     FD 2C 0A F6 | 	mov	local04, result1 wz
24a68     00 FA 05 A6 |  if_e	mov	result1, #0
24a6c     16 13 02 56 |  if_ne	mov	arg01, local04
24a70     14 15 02 56 |  if_ne	mov	arg02, local02
24a74     13 17 02 56 |  if_ne	mov	arg03, local01
24a78     15 19 02 56 |  if_ne	mov	arg04, local03
24a7c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
24a80     A7 F0 03 F6 | 	mov	ptra, fp
24a84     B2 00 A0 FD | 	call	#popregs_
24a88                 | __system___basic_print_integer_ret
24a88     2D 00 64 FD | 	ret
24a8c                 | 
24a8c                 | __system___basic_print_unsigned
24a8c     03 4A 05 F6 | 	mov	COUNT_, #3
24a90     A8 00 A0 FD | 	call	#pushregs_
24a94     0A 27 02 F6 | 	mov	local01, arg02
24a98     0B 29 02 F6 | 	mov	local02, arg03
24a9c     0C 2B 02 F6 | 	mov	local03, arg04
24aa0     10 4F B0 FD | 	call	#__system___gettxfunc
24aa4     FD 12 0A F6 | 	mov	arg01, result1 wz
24aa8     00 FA 05 A6 |  if_e	mov	result1, #0
24aac     3A 28 26 54 |  if_ne	bith	local02, #58
24ab0     14 15 02 56 |  if_ne	mov	arg02, local02
24ab4     13 17 02 56 |  if_ne	mov	arg03, local01
24ab8     15 19 02 56 |  if_ne	mov	arg04, local03
24abc     74 02 B0 5D |  if_ne	call	#__system___fmtnum
24ac0     A7 F0 03 F6 | 	mov	ptra, fp
24ac4     B2 00 A0 FD | 	call	#popregs_
24ac8                 | __system___basic_print_unsigned_ret
24ac8     2D 00 64 FD | 	ret
24acc                 | 
24acc                 | __system___basic_get_char
24acc     03 4A 05 F6 | 	mov	COUNT_, #3
24ad0     A8 00 A0 FD | 	call	#pushregs_
24ad4     20 4F B0 FD | 	call	#__system___getrxfunc
24ad8     FD 26 0A F6 | 	mov	local01, result1 wz
24adc     01 FA 65 A6 |  if_e	neg	result1, #1
24ae0     28 00 90 AD |  if_e	jmp	#LR__3170
24ae4     13 29 02 F6 | 	mov	local02, local01
24ae8     13 26 46 F7 | 	zerox	local01, #19
24aec     14 28 46 F0 | 	shr	local02, #20
24af0     02 28 66 F0 | 	shl	local02, #2
24af4     ED 28 02 F1 | 	add	local02, __methods__
24af8     14 29 02 FB | 	rdlong	local02, local02
24afc     F2 2A 02 F6 | 	mov	local03, objptr
24b00     13 E5 01 F6 | 	mov	objptr, local01
24b04     2D 28 62 FD | 	call	local02
24b08     15 E5 01 F6 | 	mov	objptr, local03
24b0c                 | LR__3170
24b0c     A7 F0 03 F6 | 	mov	ptra, fp
24b10     B2 00 A0 FD | 	call	#popregs_
24b14                 | __system___basic_get_char_ret
24b14     2D 00 64 FD | 	ret
24b18                 | 
24b18                 | __system___basic_put
24b18     04 4A 05 F6 | 	mov	COUNT_, #4
24b1c     A8 00 A0 FD | 	call	#pushregs_
24b20     0D 27 02 F6 | 	mov	local01, arg05
24b24     13 19 02 FD | 	qmul	arg04, local01
24b28     09 29 02 F6 | 	mov	local02, arg01
24b2c     0B 2B 02 F6 | 	mov	local03, arg03
24b30     00 14 0E F2 | 	cmp	arg02, #0 wz
24b34     01 14 86 51 |  if_ne	sub	arg02, #1
24b38     14 13 02 56 |  if_ne	mov	arg01, local02
24b3c     00 16 06 56 |  if_ne	mov	arg03, #0
24b40     18 2C 62 FD | 	getqx	local04
24b44     60 45 B0 5D |  if_ne	call	#__system__lseek
24b48     15 15 02 F6 | 	mov	arg02, local03
24b4c     16 17 02 F6 | 	mov	arg03, local04
24b50     14 13 02 F6 | 	mov	arg01, local02
24b54     9C 44 B0 FD | 	call	#__system__write
24b58     FD 2C 02 F6 | 	mov	local04, result1
24b5c     01 2C 56 F2 | 	cmps	local04, #1 wc
24b60     10 00 90 CD |  if_b	jmp	#LR__3180
24b64     16 89 02 F6 | 	mov	muldiva_, local04
24b68     13 8B 02 F6 | 	mov	muldivb_, local01
24b6c     BA 00 A0 FD | 	call	#divide_
24b70     45 2D 02 F6 | 	mov	local04, muldivb_
24b74                 | LR__3180
24b74     16 FB 01 F6 | 	mov	result1, local04
24b78     A7 F0 03 F6 | 	mov	ptra, fp
24b7c     B2 00 A0 FD | 	call	#popregs_
24b80                 | __system___basic_put_ret
24b80     2D 00 64 FD | 	ret
24b84                 | 
24b84                 | __system___basic_get
24b84     04 4A 05 F6 | 	mov	COUNT_, #4
24b88     A8 00 A0 FD | 	call	#pushregs_
24b8c     0D 27 02 F6 | 	mov	local01, arg05
24b90     13 19 02 FD | 	qmul	arg04, local01
24b94     09 29 02 F6 | 	mov	local02, arg01
24b98     0B 2B 02 F6 | 	mov	local03, arg03
24b9c     00 14 0E F2 | 	cmp	arg02, #0 wz
24ba0     01 14 86 51 |  if_ne	sub	arg02, #1
24ba4     14 13 02 56 |  if_ne	mov	arg01, local02
24ba8     00 16 06 56 |  if_ne	mov	arg03, #0
24bac     18 2C 62 FD | 	getqx	local04
24bb0     F4 44 B0 5D |  if_ne	call	#__system__lseek
24bb4     15 15 02 F6 | 	mov	arg02, local03
24bb8     16 17 02 F6 | 	mov	arg03, local04
24bbc     14 13 02 F6 | 	mov	arg01, local02
24bc0     6C 44 B0 FD | 	call	#__system__read
24bc4     FD 2C 02 F6 | 	mov	local04, result1
24bc8     01 2C 56 F2 | 	cmps	local04, #1 wc
24bcc     10 00 90 CD |  if_b	jmp	#LR__3190
24bd0     16 89 02 F6 | 	mov	muldiva_, local04
24bd4     13 8B 02 F6 | 	mov	muldivb_, local01
24bd8     BA 00 A0 FD | 	call	#divide_
24bdc     45 2D 02 F6 | 	mov	local04, muldivb_
24be0                 | LR__3190
24be0     16 FB 01 F6 | 	mov	result1, local04
24be4     A7 F0 03 F6 | 	mov	ptra, fp
24be8     B2 00 A0 FD | 	call	#popregs_
24bec                 | __system___basic_get_ret
24bec     2D 00 64 FD | 	ret
24bf0                 | 
24bf0                 | __system___fmtchar
24bf0     00 4A 05 F6 | 	mov	COUNT_, #0
24bf4     A8 00 A0 FD | 	call	#pushregs_
24bf8     10 F0 07 F1 | 	add	ptra, #16
24bfc     04 4E 05 F1 | 	add	fp, #4
24c00     A7 12 62 FC | 	wrlong	arg01, fp
24c04     04 4E 05 F1 | 	add	fp, #4
24c08     A7 14 62 FC | 	wrlong	arg02, fp
24c0c     04 4E 05 F1 | 	add	fp, #4
24c10     A7 16 62 FC | 	wrlong	arg03, fp
24c14     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
24c18     A7 16 62 FC | 	wrlong	arg03, fp
24c1c     08 4E 85 F1 | 	sub	fp, #8
24c20     A7 12 02 FB | 	rdlong	arg01, fp
24c24     04 4E 05 F1 | 	add	fp, #4
24c28     A7 14 02 FB | 	rdlong	arg02, fp
24c2c     04 4E 05 F1 | 	add	fp, #4
24c30     A7 16 02 F6 | 	mov	arg03, fp
24c34     0C 4E 85 F1 | 	sub	fp, #12
24c38     0C 00 B0 FD | 	call	#__system___fmtstr
24c3c     A7 F0 03 F6 | 	mov	ptra, fp
24c40     B2 00 A0 FD | 	call	#popregs_
24c44                 | __system___fmtchar_ret
24c44     2D 00 64 FD | 	ret
24c48                 | 
24c48                 | __system___fmtstr
24c48     09 4A 05 F6 | 	mov	COUNT_, #9
24c4c     A8 00 A0 FD | 	call	#pushregs_
24c50     09 27 02 F6 | 	mov	local01, arg01
24c54     0A 29 02 F6 | 	mov	local02, arg02
24c58     0B 2B 02 F6 | 	mov	local03, arg03
24c5c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
24c60     15 13 02 F6 | 	mov	arg01, local03
24c64     09 2D 02 F6 | 	mov	local04, arg01
24c68     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
24c6c                 | LR__3200
24c6c     16 FB C9 FA | 	rdbyte	result1, local04 wz
24c70     01 2C 06 51 |  if_ne	add	local04, #1
24c74     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
24c78                 | LR__3201
24c78     09 2D 82 F1 | 	sub	local04, arg01
24c7c     00 18 0E F2 | 	cmp	arg04, #0 wz
24c80     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
24c84     14 15 02 F6 | 	mov	arg02, local02
24c88     16 17 02 F6 | 	mov	arg03, local04
24c8c     13 13 02 F6 | 	mov	arg01, local01
24c90     02 18 06 F6 | 	mov	arg04, #2
24c94     BC 49 B0 FD | 	call	#__system___fmtpad
24c98     FD 2E 02 F6 | 	mov	local05, result1
24c9c     00 2E 56 F2 | 	cmps	local05, #0 wc
24ca0     17 FB 01 C6 |  if_b	mov	result1, local05
24ca4     80 00 90 CD |  if_b	jmp	#LR__3204
24ca8     01 2C 56 F2 | 	cmps	local04, #1 wc
24cac     50 00 90 CD |  if_b	jmp	#LR__3203
24cb0     16 31 02 F6 | 	mov	local06, local04
24cb4                 | LR__3202
24cb4     13 33 02 F6 | 	mov	local07, local01
24cb8     13 35 02 F6 | 	mov	local08, local01
24cbc     13 32 46 F7 | 	zerox	local07, #19
24cc0     14 34 46 F0 | 	shr	local08, #20
24cc4     02 34 66 F0 | 	shl	local08, #2
24cc8     ED 34 02 F1 | 	add	local08, __methods__
24ccc     1A 35 02 FB | 	rdlong	local08, local08
24cd0     15 13 C2 FA | 	rdbyte	arg01, local03
24cd4     F2 36 02 F6 | 	mov	local09, objptr
24cd8     19 E5 01 F6 | 	mov	objptr, local07
24cdc     01 2A 06 F1 | 	add	local03, #1
24ce0     2D 34 62 FD | 	call	local08
24ce4     1B E5 01 F6 | 	mov	objptr, local09
24ce8     FD 36 02 F6 | 	mov	local09, result1
24cec     00 36 56 F2 | 	cmps	local09, #0 wc
24cf0     1B FB 01 C6 |  if_b	mov	result1, local09
24cf4     30 00 90 CD |  if_b	jmp	#LR__3204
24cf8     1B 2F 02 F1 | 	add	local05, local09
24cfc     ED 31 6E FB | 	djnz	local06, #LR__3202
24d00                 | LR__3203
24d00     14 15 02 F6 | 	mov	arg02, local02
24d04     16 17 02 F6 | 	mov	arg03, local04
24d08     13 13 02 F6 | 	mov	arg01, local01
24d0c     01 18 06 F6 | 	mov	arg04, #1
24d10     40 49 B0 FD | 	call	#__system___fmtpad
24d14     FD 36 02 F6 | 	mov	local09, result1
24d18     00 36 56 F2 | 	cmps	local09, #0 wc
24d1c     1B FB 01 C6 |  if_b	mov	result1, local09
24d20     1B 2F 02 31 |  if_ae	add	local05, local09
24d24     17 FB 01 36 |  if_ae	mov	result1, local05
24d28                 | LR__3204
24d28     A7 F0 03 F6 | 	mov	ptra, fp
24d2c     B2 00 A0 FD | 	call	#popregs_
24d30                 | __system___fmtstr_ret
24d30     2D 00 64 FD | 	ret
24d34                 | 
24d34                 | __system___fmtnum
24d34     0B 4A 05 F6 | 	mov	COUNT_, #11
24d38     A8 00 A0 FD | 	call	#pushregs_
24d3c     09 27 02 F6 | 	mov	local01, arg01
24d40     0A 29 02 F6 | 	mov	local02, arg02
24d44     0B 2B 02 F6 | 	mov	local03, arg03
24d48     0C 2D 02 F6 | 	mov	local04, arg04
24d4c     F8 2F 02 F6 | 	mov	local05, ptra
24d50     17 31 02 F6 | 	mov	local06, local05
24d54     00 32 06 F6 | 	mov	local07, #0
24d58     14 35 02 F6 | 	mov	local08, local02
24d5c     10 34 46 F0 | 	shr	local08, #16
24d60     3F 34 06 F5 | 	and	local08, #63
24d64     14 37 E2 F8 | 	getbyte	local09, local02, #0
24d68     14 39 02 F6 | 	mov	local10, local02
24d6c     1A 38 46 F0 | 	shr	local10, #26
24d70     03 38 06 F5 | 	and	local10, #3
24d74     1C 3B 02 F6 | 	mov	local11, local10
24d78     01 34 56 F2 | 	cmps	local08, #1 wc
24d7c     44 F0 07 F1 | 	add	ptra, #68
24d80     01 34 86 31 |  if_ae	sub	local08, #1
24d84     41 36 56 F2 | 	cmps	local09, #65 wc
24d88     00 36 0E C2 |  if_b	cmp	local09, #0 wz
24d8c     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
24d90     03 3A 0E F2 | 	cmp	local11, #3 wz
24d94     00 3A 06 A6 |  if_e	mov	local11, #0
24d98     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
24d9c     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
24da0     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
24da4     00 3A 0E F2 | 	cmp	local11, #0 wz
24da8     4C 00 90 AD |  if_e	jmp	#LR__3213
24dac     01 32 06 F6 | 	mov	local07, #1
24db0     1B 35 0A F2 | 	cmp	local08, local09 wz
24db4     18 00 90 5D |  if_ne	jmp	#LR__3211
24db8     05 34 6E FB | 	djnz	local08, #LR__3210
24dbc     13 13 02 F6 | 	mov	arg01, local01
24dc0     14 15 02 F6 | 	mov	arg02, local02
24dc4     23 16 06 F6 | 	mov	arg03, #35
24dc8     24 FE BF FD | 	call	#__system___fmtchar
24dcc     88 00 90 FD | 	jmp	#LR__3217
24dd0                 | LR__3210
24dd0                 | LR__3211
24dd0     02 3A 0E F2 | 	cmp	local11, #2 wz
24dd4     18 39 02 A6 |  if_e	mov	local10, local06
24dd8     01 30 06 A1 |  if_e	add	local06, #1
24ddc     1C 41 48 AC |  if_e	wrbyte	#32, local10
24de0     14 00 90 AD |  if_e	jmp	#LR__3212
24de4     04 3A 0E F2 | 	cmp	local11, #4 wz
24de8     18 5B 48 AC |  if_e	wrbyte	#45, local06
24dec     01 30 06 A1 |  if_e	add	local06, #1
24df0     18 57 48 5C |  if_ne	wrbyte	#43, local06
24df4     01 30 06 51 |  if_ne	add	local06, #1
24df8                 | LR__3212
24df8                 | LR__3213
24df8     18 13 02 F6 | 	mov	arg01, local06
24dfc     15 15 02 F6 | 	mov	arg02, local03
24e00     16 17 02 F6 | 	mov	arg03, local04
24e04     1A 19 02 F6 | 	mov	arg04, local08
24e08     00 1A 06 F6 | 	mov	arg05, #0
24e0c     1D 28 2E F4 | 	testbn	local02, #29 wz
24e10     01 1A 06 56 |  if_ne	mov	arg05, #1
24e14     04 49 B0 FD | 	call	#__system___uitoa
24e18     FD 32 02 F1 | 	add	local07, result1
24e1c     1B 33 5A F2 | 	cmps	local07, local09 wcz
24e20     24 00 90 ED |  if_be	jmp	#LR__3216
24e24     97 0E 48 FB | 	callpa	#(@LR__3215-@LR__3214)>>2,fcache_load_ptr_
24e28                 | LR__3214
24e28     1B 39 02 F6 | 	mov	local10, local09
24e2c     01 38 56 F2 | 	cmps	local10, #1 wc
24e30     01 36 86 F1 | 	sub	local09, #1
24e34     18 39 02 36 |  if_ae	mov	local10, local06
24e38     01 30 06 31 |  if_ae	add	local06, #1
24e3c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
24e40     E4 FF 9F 3D |  if_ae	jmp	#LR__3214
24e44                 | LR__3215
24e44     18 01 48 FC | 	wrbyte	#0, local06
24e48                 | LR__3216
24e48     13 13 02 F6 | 	mov	arg01, local01
24e4c     14 15 02 F6 | 	mov	arg02, local02
24e50     17 17 02 F6 | 	mov	arg03, local05
24e54     F0 FD BF FD | 	call	#__system___fmtstr
24e58                 | LR__3217
24e58     A7 F0 03 F6 | 	mov	ptra, fp
24e5c     B2 00 A0 FD | 	call	#popregs_
24e60                 | __system___fmtnum_ret
24e60     2D 00 64 FD | 	ret
24e64                 | 
24e64                 | __system___fmtfloat
24e64     10 4A 05 F6 | 	mov	COUNT_, #16
24e68     A8 00 A0 FD | 	call	#pushregs_
24e6c     24 F1 07 F1 | 	add	ptra, #292
24e70     04 4E 05 F1 | 	add	fp, #4
24e74     A7 12 62 FC | 	wrlong	arg01, fp
24e78     04 4E 05 F1 | 	add	fp, #4
24e7c     A7 14 62 FC | 	wrlong	arg02, fp
24e80     04 4E 05 F1 | 	add	fp, #4
24e84     A7 16 62 FC | 	wrlong	arg03, fp
24e88     04 4E 05 F1 | 	add	fp, #4
24e8c     A7 18 62 FC | 	wrlong	arg04, fp
24e90     0C 4E 05 F1 | 	add	fp, #12
24e94     A7 14 68 FC | 	wrlong	#10, fp
24e98     08 4E 05 F1 | 	add	fp, #8
24e9c     A7 00 68 FC | 	wrlong	#0, fp
24ea0     08 4E 05 F1 | 	add	fp, #8
24ea4     A7 00 68 FC | 	wrlong	#0, fp
24ea8     08 4E 05 F1 | 	add	fp, #8
24eac     A7 00 68 FC | 	wrlong	#0, fp
24eb0     04 4E 05 F1 | 	add	fp, #4
24eb4     A7 04 68 FC | 	wrlong	#2, fp
24eb8     04 4E 05 F1 | 	add	fp, #4
24ebc     A7 00 68 FC | 	wrlong	#0, fp
24ec0     04 4E 05 F1 | 	add	fp, #4
24ec4     A7 00 68 FC | 	wrlong	#0, fp
24ec8     04 4E 05 F1 | 	add	fp, #4
24ecc     A7 00 68 FC | 	wrlong	#0, fp
24ed0     04 4E 05 F1 | 	add	fp, #4
24ed4     A7 00 68 FC | 	wrlong	#0, fp
24ed8     18 4E 05 F1 | 	add	fp, #24
24edc     A7 00 68 FC | 	wrlong	#0, fp
24ee0     68 4E 05 F1 | 	add	fp, #104
24ee4     A7 26 02 F6 | 	mov	local01, fp
24ee8     08 4E 85 F1 | 	sub	fp, #8
24eec     A7 26 62 FC | 	wrlong	local01, fp
24ef0     04 4E 05 F1 | 	add	fp, #4
24ef4     A7 26 62 FC | 	wrlong	local01, fp
24ef8     BC 4E 85 F1 | 	sub	fp, #188
24efc     A7 26 02 FB | 	rdlong	local01, fp
24f00     10 26 46 F0 | 	shr	local01, #16
24f04     3F 26 06 F5 | 	and	local01, #63
24f08     B0 4E 05 F1 | 	add	fp, #176
24f0c     A7 26 62 FC | 	wrlong	local01, fp
24f10     B0 4E 85 F1 | 	sub	fp, #176
24f14     A7 26 02 FB | 	rdlong	local01, fp
24f18     1C 26 46 F0 | 	shr	local01, #28
24f1c     01 26 06 F5 | 	and	local01, #1
24f20     08 4F 05 F1 | 	add	fp, #264
24f24     A7 26 62 FC | 	wrlong	local01, fp
24f28     58 4E 85 F1 | 	sub	fp, #88
24f2c     A7 26 0A FB | 	rdlong	local01, fp wz
24f30     B8 4E 85 F1 | 	sub	fp, #184
24f34     3C 00 90 5D |  if_ne	jmp	#LR__3221
24f38     10 4E 05 F1 | 	add	fp, #16
24f3c     A7 26 02 FB | 	rdlong	local01, fp
24f40     10 4E 85 F1 | 	sub	fp, #16
24f44     61 26 0E F2 | 	cmp	local01, #97 wz
24f48     18 00 90 5D |  if_ne	jmp	#LR__3220
24f4c     B8 4E 05 F1 | 	add	fp, #184
24f50     A7 1A 68 FC | 	wrlong	#13, fp
24f54     84 4E 85 F1 | 	sub	fp, #132
24f58     A7 02 68 FC | 	wrlong	#1, fp
24f5c     34 4E 85 F1 | 	sub	fp, #52
24f60     24 00 90 FD | 	jmp	#LR__3222
24f64                 | LR__3220
24f64     B8 4E 05 F1 | 	add	fp, #184
24f68     A7 0C 68 FC | 	wrlong	#6, fp
24f6c     B8 4E 85 F1 | 	sub	fp, #184
24f70     14 00 90 FD | 	jmp	#LR__3222
24f74                 | LR__3221
24f74     B8 4E 05 F1 | 	add	fp, #184
24f78     A7 26 02 FB | 	rdlong	local01, fp
24f7c     01 26 86 F1 | 	sub	local01, #1
24f80     A7 26 62 FC | 	wrlong	local01, fp
24f84     B8 4E 85 F1 | 	sub	fp, #184
24f88                 | LR__3222
24f88     08 4E 05 F1 | 	add	fp, #8
24f8c     A7 26 02 FB | 	rdlong	local01, fp
24f90     16 26 46 F0 | 	shr	local01, #22
24f94     03 26 06 F5 | 	and	local01, #3
24f98     04 4F 05 F1 | 	add	fp, #260
24f9c     A7 26 62 FC | 	wrlong	local01, fp
24fa0     04 4F 85 F1 | 	sub	fp, #260
24fa4     A7 26 02 FB | 	rdlong	local01, fp
24fa8     1D 26 46 F0 | 	shr	local01, #29
24fac     01 26 06 F5 | 	and	local01, #1
24fb0     B4 4E 05 F1 | 	add	fp, #180
24fb4     A7 26 62 FC | 	wrlong	local01, fp
24fb8     B4 4E 85 F1 | 	sub	fp, #180
24fbc     A7 26 02 FB | 	rdlong	local01, fp
24fc0     13 27 EA F8 | 	getbyte	local01, local01, #1
24fc4     60 4E 05 F1 | 	add	fp, #96
24fc8     A7 26 62 FC | 	wrlong	local01, fp
24fcc     60 4E 85 F1 | 	sub	fp, #96
24fd0     A7 26 02 FB | 	rdlong	local01, fp
24fd4     13 27 E2 F8 | 	getbyte	local01, local01, #0
24fd8     64 4E 05 F1 | 	add	fp, #100
24fdc     A7 26 62 FC | 	wrlong	local01, fp
24fe0     00 26 06 F6 | 	mov	local01, #0
24fe4     5C 4E 85 F1 | 	sub	fp, #92
24fe8     A7 1A 02 FB | 	rdlong	arg05, fp
24fec     65 1A 0E F2 | 	cmp	arg05, #101 wz
24ff0     01 26 06 A6 |  if_e	mov	local01, #1
24ff4     14 4E 05 F1 | 	add	fp, #20
24ff8     A7 26 62 FC | 	wrlong	local01, fp
24ffc     98 4E 05 F1 | 	add	fp, #152
25000     A7 28 0A FB | 	rdlong	local02, fp wz
25004     45 26 06 56 |  if_ne	mov	local01, #69
25008     65 26 06 A6 |  if_e	mov	local01, #101
2500c     8C 4E 85 F1 | 	sub	fp, #140
25010     A7 26 62 FC | 	wrlong	local01, fp
25014     20 4E 85 F1 | 	sub	fp, #32
25018     A7 26 02 FB | 	rdlong	local01, fp
2501c     10 4E 85 F1 | 	sub	fp, #16
25020     61 26 0E F2 | 	cmp	local01, #97 wz
25024     4C 00 90 5D |  if_ne	jmp	#LR__3223
25028     24 4E 05 F1 | 	add	fp, #36
2502c     A7 02 68 FC | 	wrlong	#1, fp
25030     98 4E 05 F1 | 	add	fp, #152
25034     A7 28 0A FB | 	rdlong	local02, fp wz
25038     50 26 06 56 |  if_ne	mov	local01, #80
2503c     70 26 06 A6 |  if_e	mov	local01, #112
25040     8C 4E 85 F1 | 	sub	fp, #140
25044     A7 26 62 FC | 	wrlong	local01, fp
25048     14 4E 85 F1 | 	sub	fp, #20
2504c     A7 04 68 FC | 	wrlong	#2, fp
25050     1C 4E 05 F1 | 	add	fp, #28
25054     A7 02 68 FC | 	wrlong	#1, fp
25058     84 4E 05 F1 | 	add	fp, #132
2505c     A7 28 0A FB | 	rdlong	local02, fp wz
25060     58 26 06 56 |  if_ne	mov	local01, #88
25064     78 26 06 A6 |  if_e	mov	local01, #120
25068     7C 4E 85 F1 | 	sub	fp, #124
2506c     A7 26 62 FC | 	wrlong	local01, fp
25070     40 4E 85 F1 | 	sub	fp, #64
25074                 | LR__3223
25074     10 4E 05 F1 | 	add	fp, #16
25078     A7 26 02 FB | 	rdlong	local01, fp
2507c     10 4E 85 F1 | 	sub	fp, #16
25080     23 26 0E F2 | 	cmp	local01, #35 wz
25084     3C 00 90 5D |  if_ne	jmp	#LR__3226
25088     48 4E 05 F1 | 	add	fp, #72
2508c     A7 02 68 FC | 	wrlong	#1, fp
25090     C8 4E 05 F1 | 	add	fp, #200
25094     A7 26 0A FB | 	rdlong	local01, fp wz
25098     10 4F 85 F1 | 	sub	fp, #272
2509c     18 00 90 AD |  if_e	jmp	#LR__3224
250a0     10 4E 05 F1 | 	add	fp, #16
250a4     A7 CC 68 FC | 	wrlong	#102, fp
250a8     00 4F 05 F1 | 	add	fp, #256
250ac     A7 00 68 FC | 	wrlong	#0, fp
250b0     10 4F 85 F1 | 	sub	fp, #272
250b4     0C 00 90 FD | 	jmp	#LR__3225
250b8                 | LR__3224
250b8     10 4F 05 F1 | 	add	fp, #272
250bc     A7 02 68 FC | 	wrlong	#1, fp
250c0     10 4F 85 F1 | 	sub	fp, #272
250c4                 | LR__3225
250c4                 | LR__3226
250c4     08 4E 05 F1 | 	add	fp, #8
250c8     A7 26 02 FB | 	rdlong	local01, fp
250cc     1A 26 46 F0 | 	shr	local01, #26
250d0     03 26 06 F5 | 	and	local01, #3
250d4     5C 4E 05 F1 | 	add	fp, #92
250d8     A7 26 62 FC | 	wrlong	local01, fp
250dc     58 4E 85 F1 | 	sub	fp, #88
250e0     A7 FA 01 FB | 	rdlong	result1, fp
250e4     0C 4E 85 F1 | 	sub	fp, #12
250e8     1F FA 4D F0 | 	shr	result1, #31 wz
250ec     20 00 90 AD |  if_e	jmp	#LR__3227
250f0     2C 4E 05 F1 | 	add	fp, #44
250f4     A7 5A 68 FC | 	wrlong	#45, fp
250f8     20 4E 85 F1 | 	sub	fp, #32
250fc     A7 FA 01 FB | 	rdlong	result1, fp
25100     1F FA E5 F4 | 	bitnot	result1, #31
25104     A7 FA 61 FC | 	wrlong	result1, fp
25108     0C 4E 85 F1 | 	sub	fp, #12
2510c     3C 00 90 FD | 	jmp	#LR__3229
25110                 | LR__3227
25110     64 4E 05 F1 | 	add	fp, #100
25114     A7 26 02 FB | 	rdlong	local01, fp
25118     64 4E 85 F1 | 	sub	fp, #100
2511c     01 26 0E F2 | 	cmp	local01, #1 wz
25120     2C 4E 05 A1 |  if_e	add	fp, #44
25124     A7 56 68 AC |  if_e	wrlong	#43, fp
25128     2C 4E 85 A1 |  if_e	sub	fp, #44
2512c     1C 00 90 AD |  if_e	jmp	#LR__3228
25130     64 4E 05 F1 | 	add	fp, #100
25134     A7 26 02 FB | 	rdlong	local01, fp
25138     64 4E 85 F1 | 	sub	fp, #100
2513c     02 26 0E F2 | 	cmp	local01, #2 wz
25140     2C 4E 05 A1 |  if_e	add	fp, #44
25144     A7 40 68 AC |  if_e	wrlong	#32, fp
25148     2C 4E 85 A1 |  if_e	sub	fp, #44
2514c                 | LR__3228
2514c                 | LR__3229
2514c     08 4E 05 F1 | 	add	fp, #8
25150     A7 26 02 FB | 	rdlong	local01, fp
25154     18 26 46 F0 | 	shr	local01, #24
25158     03 26 06 F5 | 	and	local01, #3
2515c     3C 4E 05 F1 | 	add	fp, #60
25160     A7 26 62 FC | 	wrlong	local01, fp
25164     00 26 06 F6 | 	mov	local01, #0
25168     18 4E 85 F1 | 	sub	fp, #24
2516c     A7 2A 0A FB | 	rdlong	local03, fp wz
25170     2C 4E 85 F1 | 	sub	fp, #44
25174     18 00 90 5D |  if_ne	jmp	#LR__3230
25178     1C 4E 05 F1 | 	add	fp, #28
2517c     A7 2C 02 FB | 	rdlong	local04, fp
25180     1C 4E 85 F1 | 	sub	fp, #28
25184     16 2F 02 F6 | 	mov	local05, local04
25188     0A 2E 0E F2 | 	cmp	local05, #10 wz
2518c     04 00 90 AD |  if_e	jmp	#LR__3231
25190                 | LR__3230
25190     01 26 66 F5 | 	xor	local01, #1
25194                 | LR__3231
25194     3C 4E 05 F1 | 	add	fp, #60
25198     A7 26 62 FC | 	wrlong	local01, fp
2519c     3C 4E 85 F1 | 	sub	fp, #60
251a0     00 26 0E F2 | 	cmp	local01, #0 wz
251a4     0C 01 90 AD |  if_e	jmp	#LR__3233
251a8     44 4E 05 F1 | 	add	fp, #68
251ac     A7 2E 02 FB | 	rdlong	local05, fp
251b0     44 4E 85 F1 | 	sub	fp, #68
251b4     17 2B 02 F6 | 	mov	local03, local05
251b8     02 2A 0E F2 | 	cmp	local03, #2 wz
251bc     F4 00 90 5D |  if_ne	jmp	#LR__3233
251c0     0C 4F 05 F1 | 	add	fp, #268
251c4     A7 30 02 FB | 	rdlong	local06, fp
251c8     0C 4F 85 F1 | 	sub	fp, #268
251cc     18 2D 02 F6 | 	mov	local04, local06
251d0     02 2C 0E F2 | 	cmp	local04, #2 wz
251d4     DC 00 90 AD |  if_e	jmp	#LR__3233
251d8     C0 4E 05 F1 | 	add	fp, #192
251dc     A7 12 02 FB | 	rdlong	arg01, fp
251e0     94 4E 85 F1 | 	sub	fp, #148
251e4     A7 14 02 FB | 	rdlong	arg02, fp
251e8     14 4E 05 F1 | 	add	fp, #20
251ec     A7 16 02 FB | 	rdlong	arg03, fp
251f0     40 4E 85 F1 | 	sub	fp, #64
251f4     8C 47 B0 FD | 	call	#__system__emitsign_0533
251f8     14 4F 05 F1 | 	add	fp, #276
251fc     A7 FA 61 FC | 	wrlong	result1, fp
25200     14 4F 85 F1 | 	sub	fp, #276
25204     00 FA 55 F2 | 	cmps	result1, #0 wc
25208     14 4F 05 C1 |  if_b	add	fp, #276
2520c     A7 FA 01 CB |  if_b	rdlong	result1, fp
25210     14 4F 85 C1 |  if_b	sub	fp, #276
25214     6C 0B 90 CD |  if_b	jmp	#LR__3283
25218     C0 4E 05 F1 | 	add	fp, #192
2521c     A7 26 02 FB | 	rdlong	local01, fp
25220     54 4E 05 F1 | 	add	fp, #84
25224     A7 2E 02 FB | 	rdlong	local05, fp
25228     17 2B 02 F6 | 	mov	local03, local05
2522c     17 27 02 F1 | 	add	local01, local05
25230     54 4E 85 F1 | 	sub	fp, #84
25234     A7 26 62 FC | 	wrlong	local01, fp
25238     58 4E 85 F1 | 	sub	fp, #88
2523c     A7 26 0A FB | 	rdlong	local01, fp wz
25240     68 4E 85 F1 | 	sub	fp, #104
25244     60 00 90 AD |  if_e	jmp	#LR__3232
25248     68 4E 05 F1 | 	add	fp, #104
2524c     A7 26 02 FB | 	rdlong	local01, fp
25250     AC 4E 05 F1 | 	add	fp, #172
25254     A7 2A 02 FB | 	rdlong	local03, fp
25258     15 27 82 F1 | 	sub	local01, local03
2525c     AC 4E 85 F1 | 	sub	fp, #172
25260     A7 26 62 FC | 	wrlong	local01, fp
25264     68 4E 85 F1 | 	sub	fp, #104
25268     00 26 56 F2 | 	cmps	local01, #0 wc
2526c     68 4E 05 C1 |  if_b	add	fp, #104
25270     A7 00 68 CC |  if_b	wrlong	#0, fp
25274     68 4E 85 C1 |  if_b	sub	fp, #104
25278     08 4E 05 F1 | 	add	fp, #8
2527c     A7 26 02 FB | 	rdlong	local01, fp
25280     E8 26 06 F4 | 	bitl	local01, #232
25284     A7 26 62 FC | 	wrlong	local01, fp
25288     60 4E 05 F1 | 	add	fp, #96
2528c     A7 2E 02 FB | 	rdlong	local05, fp
25290     17 2B 02 F6 | 	mov	local03, local05
25294     08 2A 66 F0 | 	shl	local03, #8
25298     15 27 42 F5 | 	or	local01, local03
2529c     60 4E 85 F1 | 	sub	fp, #96
252a0     A7 26 62 FC | 	wrlong	local01, fp
252a4     08 4E 85 F1 | 	sub	fp, #8
252a8                 | LR__3232
252a8     3C 4E 05 F1 | 	add	fp, #60
252ac     A7 00 68 FC | 	wrlong	#0, fp
252b0     3C 4E 85 F1 | 	sub	fp, #60
252b4                 | LR__3233
252b4     0C 4E 05 F1 | 	add	fp, #12
252b8     A7 12 02 FB | 	rdlong	arg01, fp
252bc     0C 4E 85 F1 | 	sub	fp, #12
252c0     EC 21 B0 FD | 	call	#__system____builtin_ilogb
252c4     FF FF 3F FF 
252c8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
252cc     50 00 90 5D |  if_ne	jmp	#LR__3235
252d0     2C 4E 05 F1 | 	add	fp, #44
252d4     A7 26 0A FB | 	rdlong	local01, fp wz
252d8     2C 4E 85 F1 | 	sub	fp, #44
252dc     24 00 90 AD |  if_e	jmp	#LR__3234
252e0     C0 4E 05 F1 | 	add	fp, #192
252e4     A7 28 02 FB | 	rdlong	local02, fp
252e8     14 2B 02 F6 | 	mov	local03, local02
252ec     01 2A 06 F1 | 	add	local03, #1
252f0     A7 2A 62 FC | 	wrlong	local03, fp
252f4     94 4E 85 F1 | 	sub	fp, #148
252f8     A7 2C 02 FB | 	rdlong	local04, fp
252fc     2C 4E 85 F1 | 	sub	fp, #44
25300     14 2D 42 FC | 	wrbyte	local04, local02
25304                 | LR__3234
25304     C0 4E 05 F1 | 	add	fp, #192
25308     A7 12 02 FB | 	rdlong	arg01, fp
2530c     C0 4E 85 F1 | 	sub	fp, #192
25310     9C 01 00 FF 
25314     22 14 06 F6 | 	mov	arg02, ##@LR__5231
25318     AC E9 BF FD | 	call	#__system____builtin_strcpy
2531c     A4 08 90 FD | 	jmp	#LR__3271
25320                 | LR__3235
25320     0C 4E 05 F1 | 	add	fp, #12
25324     A7 28 02 FB | 	rdlong	local02, fp
25328     0C 4E 85 F1 | 	sub	fp, #12
2532c     14 13 02 F6 | 	mov	arg01, local02
25330     7C 21 B0 FD | 	call	#__system____builtin_ilogb
25334     00 00 40 FF 
25338     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2533c     50 00 90 5D |  if_ne	jmp	#LR__3237
25340     2C 4E 05 F1 | 	add	fp, #44
25344     A7 26 0A FB | 	rdlong	local01, fp wz
25348     2C 4E 85 F1 | 	sub	fp, #44
2534c     24 00 90 AD |  if_e	jmp	#LR__3236
25350     C0 4E 05 F1 | 	add	fp, #192
25354     A7 28 02 FB | 	rdlong	local02, fp
25358     14 2B 02 F6 | 	mov	local03, local02
2535c     01 2A 06 F1 | 	add	local03, #1
25360     A7 2A 62 FC | 	wrlong	local03, fp
25364     94 4E 85 F1 | 	sub	fp, #148
25368     A7 2C 02 FB | 	rdlong	local04, fp
2536c     2C 4E 85 F1 | 	sub	fp, #44
25370     14 2D 42 FC | 	wrbyte	local04, local02
25374                 | LR__3236
25374     C0 4E 05 F1 | 	add	fp, #192
25378     A7 12 02 FB | 	rdlong	arg01, fp
2537c     C0 4E 85 F1 | 	sub	fp, #192
25380     9C 01 00 FF 
25384     26 14 06 F6 | 	mov	arg02, ##@LR__5232
25388     3C E9 BF FD | 	call	#__system____builtin_strcpy
2538c     34 08 90 FD | 	jmp	#LR__3271
25390                 | LR__3237
25390     10 4E 05 F1 | 	add	fp, #16
25394     A7 26 02 FB | 	rdlong	local01, fp
25398     10 4E 85 F1 | 	sub	fp, #16
2539c     67 26 0E F2 | 	cmp	local01, #103 wz
253a0     10 4E 05 51 |  if_ne	add	fp, #16
253a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
253a8     10 4E 85 51 |  if_ne	sub	fp, #16
253ac     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
253b0     94 01 90 5D |  if_ne	jmp	#LR__3242
253b4     0C 4E 05 F1 | 	add	fp, #12
253b8     A7 12 02 FB | 	rdlong	arg01, fp
253bc     08 4E 05 F1 | 	add	fp, #8
253c0     A7 14 02 F6 | 	mov	arg02, fp
253c4     0C 4E 05 F1 | 	add	fp, #12
253c8     A7 16 02 F6 | 	mov	arg03, fp
253cc     98 4E 05 F1 | 	add	fp, #152
253d0     A7 18 02 FB | 	rdlong	arg04, fp
253d4     9C 4E 85 F1 | 	sub	fp, #156
253d8     A7 1A 02 FB | 	rdlong	arg05, fp
253dc     1C 4E 85 F1 | 	sub	fp, #28
253e0     AC 43 B0 FD | 	call	#__system__disassemble_0531
253e4     10 4E 05 F1 | 	add	fp, #16
253e8     A7 26 02 FB | 	rdlong	local01, fp
253ec     10 4E 85 F1 | 	sub	fp, #16
253f0     23 26 0E F2 | 	cmp	local01, #35 wz
253f4     A0 00 90 5D |  if_ne	jmp	#LR__3239
253f8     20 4E 05 F1 | 	add	fp, #32
253fc     A7 26 02 FB | 	rdlong	local01, fp
25400     98 4E 05 F1 | 	add	fp, #152
25404     A7 2A 02 FB | 	rdlong	local03, fp
25408     B8 4E 85 F1 | 	sub	fp, #184
2540c     15 27 5A F2 | 	cmps	local01, local03 wcz
25410     24 4E 05 11 |  if_a	add	fp, #36
25414     A7 02 68 1C |  if_a	wrlong	#1, fp
25418     24 4E 85 11 |  if_a	sub	fp, #36
2541c     A4 01 90 1D |  if_a	jmp	#LR__3245
25420     20 4E 05 F1 | 	add	fp, #32
25424     A7 26 02 FB | 	rdlong	local01, fp
25428     20 4E 85 F1 | 	sub	fp, #32
2542c     00 26 56 F2 | 	cmps	local01, #0 wc
25430     2C 00 90 3D |  if_ae	jmp	#LR__3238
25434     B8 4E 05 F1 | 	add	fp, #184
25438     A7 26 02 FB | 	rdlong	local01, fp
2543c     13 27 62 F6 | 	neg	local01, local01
25440     98 4E 85 F1 | 	sub	fp, #152
25444     A7 2A 02 FB | 	rdlong	local03, fp
25448     20 4E 85 F1 | 	sub	fp, #32
2544c     13 2B 5A F2 | 	cmps	local03, local01 wcz
25450     24 4E 05 E1 |  if_be	add	fp, #36
25454     A7 02 68 EC |  if_be	wrlong	#1, fp
25458     24 4E 85 E1 |  if_be	sub	fp, #36
2545c     64 01 90 FD | 	jmp	#LR__3245
25460                 | LR__3238
25460     20 4E 05 F1 | 	add	fp, #32
25464     A7 26 02 FB | 	rdlong	local01, fp
25468     20 4E 85 F1 | 	sub	fp, #32
2546c     01 26 56 F2 | 	cmps	local01, #1 wc
25470     50 01 90 CD |  if_b	jmp	#LR__3245
25474     B8 4E 05 F1 | 	add	fp, #184
25478     A7 26 02 FB | 	rdlong	local01, fp
2547c     98 4E 85 F1 | 	sub	fp, #152
25480     A7 2A 02 FB | 	rdlong	local03, fp
25484     15 27 82 F1 | 	sub	local01, local03
25488     98 4E 05 F1 | 	add	fp, #152
2548c     A7 26 62 FC | 	wrlong	local01, fp
25490     B8 4E 85 F1 | 	sub	fp, #184
25494     2C 01 90 FD | 	jmp	#LR__3245
25498                 | LR__3239
25498     00 26 06 F6 | 	mov	local01, #0
2549c     08 4E 05 F1 | 	add	fp, #8
254a0     A7 28 02 FB | 	rdlong	local02, fp
254a4     1C 28 46 F0 | 	shr	local02, #28
254a8     01 28 0E F5 | 	and	local02, #1 wz
254ac     01 26 06 A6 |  if_e	mov	local01, #1
254b0     2C 4E 05 F1 | 	add	fp, #44
254b4     A7 26 62 FC | 	wrlong	local01, fp
254b8     14 4E 85 F1 | 	sub	fp, #20
254bc     A7 26 02 FB | 	rdlong	local01, fp
254c0     98 4E 05 F1 | 	add	fp, #152
254c4     A7 2A 02 FB | 	rdlong	local03, fp
254c8     B8 4E 85 F1 | 	sub	fp, #184
254cc     15 27 52 F2 | 	cmps	local01, local03 wc
254d0     18 00 90 3D |  if_ae	jmp	#LR__3240
254d4     20 4E 05 F1 | 	add	fp, #32
254d8     A7 2C 02 FB | 	rdlong	local04, fp
254dc     20 4E 85 F1 | 	sub	fp, #32
254e0     FF FF 7F FF 
254e4     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
254e8     10 00 90 3D |  if_ae	jmp	#LR__3241
254ec                 | LR__3240
254ec     24 4E 05 F1 | 	add	fp, #36
254f0     A7 02 68 FC | 	wrlong	#1, fp
254f4     24 4E 85 F1 | 	sub	fp, #36
254f8     C8 00 90 FD | 	jmp	#LR__3245
254fc                 | LR__3241
254fc     B8 4E 05 F1 | 	add	fp, #184
25500     A7 2C 02 FB | 	rdlong	local04, fp
25504     98 4E 85 F1 | 	sub	fp, #152
25508     A7 2A 02 FB | 	rdlong	local03, fp
2550c     15 2D 82 F1 | 	sub	local04, local03
25510     98 4E 05 F1 | 	add	fp, #152
25514     A7 2C 62 FC | 	wrlong	local04, fp
25518     AC 4E 85 F1 | 	sub	fp, #172
2551c     A7 12 02 FB | 	rdlong	arg01, fp
25520     08 4E 05 F1 | 	add	fp, #8
25524     A7 14 02 F6 | 	mov	arg02, fp
25528     0C 4E 05 F1 | 	add	fp, #12
2552c     A7 16 02 F6 | 	mov	arg03, fp
25530     16 19 62 F6 | 	neg	arg04, local04
25534     04 4E 85 F1 | 	sub	fp, #4
25538     A7 1A 02 FB | 	rdlong	arg05, fp
2553c     1C 4E 85 F1 | 	sub	fp, #28
25540     4C 42 B0 FD | 	call	#__system__disassemble_0531
25544     7C 00 90 FD | 	jmp	#LR__3245
25548                 | LR__3242
25548     24 4E 05 F1 | 	add	fp, #36
2554c     A7 26 0A FB | 	rdlong	local01, fp wz
25550     24 4E 85 F1 | 	sub	fp, #36
25554     34 00 90 AD |  if_e	jmp	#LR__3243
25558     0C 4E 05 F1 | 	add	fp, #12
2555c     A7 12 02 FB | 	rdlong	arg01, fp
25560     08 4E 05 F1 | 	add	fp, #8
25564     A7 14 02 F6 | 	mov	arg02, fp
25568     0C 4E 05 F1 | 	add	fp, #12
2556c     A7 16 02 F6 | 	mov	arg03, fp
25570     98 4E 05 F1 | 	add	fp, #152
25574     A7 18 02 FB | 	rdlong	arg04, fp
25578     9C 4E 85 F1 | 	sub	fp, #156
2557c     A7 1A 02 FB | 	rdlong	arg05, fp
25580     1C 4E 85 F1 | 	sub	fp, #28
25584     08 42 B0 FD | 	call	#__system__disassemble_0531
25588     38 00 90 FD | 	jmp	#LR__3244
2558c                 | LR__3243
2558c     0C 4E 05 F1 | 	add	fp, #12
25590     A7 12 02 FB | 	rdlong	arg01, fp
25594     08 4E 05 F1 | 	add	fp, #8
25598     A7 14 02 F6 | 	mov	arg02, fp
2559c     0C 4E 05 F1 | 	add	fp, #12
255a0     A7 16 02 F6 | 	mov	arg03, fp
255a4     98 4E 05 F1 | 	add	fp, #152
255a8     A7 2C 02 FB | 	rdlong	local04, fp
255ac     01 2C 06 F1 | 	add	local04, #1
255b0     16 19 62 F6 | 	neg	arg04, local04
255b4     9C 4E 85 F1 | 	sub	fp, #156
255b8     A7 1A 02 FB | 	rdlong	arg05, fp
255bc     1C 4E 85 F1 | 	sub	fp, #28
255c0     CC 41 B0 FD | 	call	#__system__disassemble_0531
255c4                 | LR__3244
255c4                 | LR__3245
255c4     1C 4E 05 F1 | 	add	fp, #28
255c8     A7 26 02 FB | 	rdlong	local01, fp
255cc     1C 4E 85 F1 | 	sub	fp, #28
255d0     02 26 0E F2 | 	cmp	local01, #2 wz
255d4     4C 00 90 5D |  if_ne	jmp	#LR__3248
255d8     1C 4E 05 F1 | 	add	fp, #28
255dc     A7 20 68 FC | 	wrlong	#16, fp
255e0     1C 4E 85 F1 | 	sub	fp, #28
255e4                 | LR__3246
255e4     14 4E 05 F1 | 	add	fp, #20
255e8     A7 26 0A FB | 	rdlong	local01, fp wz
255ec     14 4E 85 F1 | 	sub	fp, #20
255f0     30 00 90 AD |  if_e	jmp	#LR__3247
255f4     14 4E 05 F1 | 	add	fp, #20
255f8     A7 2A 02 FB | 	rdlong	local03, fp
255fc     14 4E 85 F1 | 	sub	fp, #20
25600     00 80 00 FF 
25604     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
25608     18 00 90 3D |  if_ae	jmp	#LR__3247
2560c     14 4E 05 F1 | 	add	fp, #20
25610     A7 26 02 FB | 	rdlong	local01, fp
25614     01 26 66 F0 | 	shl	local01, #1
25618     A7 26 62 FC | 	wrlong	local01, fp
2561c     14 4E 85 F1 | 	sub	fp, #20
25620     C0 FF 9F FD | 	jmp	#LR__3246
25624                 | LR__3247
25624                 | LR__3248
25624     70 4E 05 F1 | 	add	fp, #112
25628     A7 12 02 F6 | 	mov	arg01, fp
2562c     5C 4E 85 F1 | 	sub	fp, #92
25630     A7 14 02 FB | 	rdlong	arg02, fp
25634     08 4E 05 F1 | 	add	fp, #8
25638     A7 16 02 FB | 	rdlong	arg03, fp
2563c     A0 4E 05 F1 | 	add	fp, #160
25640     A7 1A 02 FB | 	rdlong	arg05, fp
25644     BC 4E 85 F1 | 	sub	fp, #188
25648     01 18 06 F6 | 	mov	arg04, #1
2564c     CC 40 B0 FD | 	call	#__system___uitoa
25650     58 4E 05 F1 | 	add	fp, #88
25654     A7 FA 61 FC | 	wrlong	result1, fp
25658     38 4E 85 F1 | 	sub	fp, #56
2565c     A7 26 02 FB | 	rdlong	local01, fp
25660     20 4E 85 F1 | 	sub	fp, #32
25664     00 26 56 F2 | 	cmps	local01, #0 wc
25668     50 00 90 3D |  if_ae	jmp	#LR__3249
2566c     60 4E 05 F1 | 	add	fp, #96
25670     A7 5A 68 FC | 	wrlong	#45, fp
25674     50 4E 05 F1 | 	add	fp, #80
25678     A7 12 02 F6 | 	mov	arg01, fp
2567c     90 4E 85 F1 | 	sub	fp, #144
25680     A7 2A 02 FB | 	rdlong	local03, fp
25684     15 15 62 F6 | 	neg	arg02, local03
25688     18 4E 05 F1 | 	add	fp, #24
2568c     A7 18 02 FB | 	rdlong	arg04, fp
25690     84 4E 05 F1 | 	add	fp, #132
25694     A7 30 02 FB | 	rdlong	local06, fp
25698     BC 4E 85 F1 | 	sub	fp, #188
2569c     18 2D 02 F6 | 	mov	local04, local06
256a0     0A 16 06 F6 | 	mov	arg03, #10
256a4     16 1B 02 F6 | 	mov	arg05, local04
256a8     70 40 B0 FD | 	call	#__system___uitoa
256ac     5C 4E 05 F1 | 	add	fp, #92
256b0     A7 FA 61 FC | 	wrlong	result1, fp
256b4     5C 4E 85 F1 | 	sub	fp, #92
256b8     48 00 90 FD | 	jmp	#LR__3250
256bc                 | LR__3249
256bc     60 4E 05 F1 | 	add	fp, #96
256c0     A7 56 68 FC | 	wrlong	#43, fp
256c4     50 4E 05 F1 | 	add	fp, #80
256c8     A7 12 02 F6 | 	mov	arg01, fp
256cc     90 4E 85 F1 | 	sub	fp, #144
256d0     A7 14 02 FB | 	rdlong	arg02, fp
256d4     18 4E 05 F1 | 	add	fp, #24
256d8     A7 18 02 FB | 	rdlong	arg04, fp
256dc     84 4E 05 F1 | 	add	fp, #132
256e0     A7 30 02 FB | 	rdlong	local06, fp
256e4     BC 4E 85 F1 | 	sub	fp, #188
256e8     18 2D 02 F6 | 	mov	local04, local06
256ec     0A 16 06 F6 | 	mov	arg03, #10
256f0     16 1B 02 F6 | 	mov	arg05, local04
256f4     24 40 B0 FD | 	call	#__system___uitoa
256f8     5C 4E 05 F1 | 	add	fp, #92
256fc     A7 FA 61 FC | 	wrlong	result1, fp
25700     5C 4E 85 F1 | 	sub	fp, #92
25704                 | LR__3250
25704     24 4E 05 F1 | 	add	fp, #36
25708     A7 26 0A FB | 	rdlong	local01, fp wz
2570c     24 4E 85 F1 | 	sub	fp, #36
25710     2C 00 90 AD |  if_e	jmp	#LR__3251
25714     50 4E 05 F1 | 	add	fp, #80
25718     A7 00 68 FC | 	wrlong	#0, fp
2571c     04 4E 85 F1 | 	sub	fp, #4
25720     A7 00 68 FC | 	wrlong	#0, fp
25724     6C 4E 05 F1 | 	add	fp, #108
25728     A7 26 02 FB | 	rdlong	local01, fp
2572c     01 26 06 F1 | 	add	local01, #1
25730     64 4E 85 F1 | 	sub	fp, #100
25734     A7 26 62 FC | 	wrlong	local01, fp
25738     54 4E 85 F1 | 	sub	fp, #84
2573c     88 00 90 FD | 	jmp	#LR__3254
25740                 | LR__3251
25740     20 4E 05 F1 | 	add	fp, #32
25744     A7 26 02 FB | 	rdlong	local01, fp
25748     20 4E 85 F1 | 	sub	fp, #32
2574c     00 26 56 F2 | 	cmps	local01, #0 wc
25750     40 00 90 3D |  if_ae	jmp	#LR__3252
25754     20 4E 05 F1 | 	add	fp, #32
25758     A7 28 02 FB | 	rdlong	local02, fp
2575c     30 4E 05 F1 | 	add	fp, #48
25760     A7 28 62 FC | 	wrlong	local02, fp
25764     04 4E 85 F1 | 	sub	fp, #4
25768     A7 28 62 FC | 	wrlong	local02, fp
2576c     2C 4E 85 F1 | 	sub	fp, #44
25770     A7 26 02 FB | 	rdlong	local01, fp
25774     98 4E 05 F1 | 	add	fp, #152
25778     A7 2A 02 FB | 	rdlong	local03, fp
2577c     15 27 02 F1 | 	add	local01, local03
25780     01 26 06 F1 | 	add	local01, #1
25784     64 4E 85 F1 | 	sub	fp, #100
25788     A7 26 62 FC | 	wrlong	local01, fp
2578c     54 4E 85 F1 | 	sub	fp, #84
25790     34 00 90 FD | 	jmp	#LR__3253
25794                 | LR__3252
25794     4C 4E 05 F1 | 	add	fp, #76
25798     A7 00 68 FC | 	wrlong	#0, fp
2579c     2C 4E 85 F1 | 	sub	fp, #44
257a0     A7 26 02 FB | 	rdlong	local01, fp
257a4     30 4E 05 F1 | 	add	fp, #48
257a8     A7 26 62 FC | 	wrlong	local01, fp
257ac     68 4E 05 F1 | 	add	fp, #104
257b0     A7 2A 02 FB | 	rdlong	local03, fp
257b4     15 27 02 F1 | 	add	local01, local03
257b8     01 26 06 F1 | 	add	local01, #1
257bc     64 4E 85 F1 | 	sub	fp, #100
257c0     A7 26 62 FC | 	wrlong	local01, fp
257c4     54 4E 85 F1 | 	sub	fp, #84
257c8                 | LR__3253
257c8                 | LR__3254
257c8     54 4E 05 F1 | 	add	fp, #84
257cc     A7 26 02 FB | 	rdlong	local01, fp
257d0     08 4E 85 F1 | 	sub	fp, #8
257d4     A7 2A 02 FB | 	rdlong	local03, fp
257d8     15 27 82 F1 | 	sub	local01, local03
257dc     01 26 06 F1 | 	add	local01, #1
257e0     24 4E 85 F1 | 	sub	fp, #36
257e4     A7 26 62 FC | 	wrlong	local01, fp
257e8     04 4E 05 F1 | 	add	fp, #4
257ec     A7 26 0A FB | 	rdlong	local01, fp wz
257f0     2C 4E 85 F1 | 	sub	fp, #44
257f4     28 4E 05 51 |  if_ne	add	fp, #40
257f8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
257fc     01 2A 06 51 |  if_ne	add	local03, #1
25800     A7 2A 62 5C |  if_ne	wrlong	local03, fp
25804     28 4E 85 51 |  if_ne	sub	fp, #40
25808     1C 4E 05 F1 | 	add	fp, #28
2580c     A7 26 02 FB | 	rdlong	local01, fp
25810     1C 4E 85 F1 | 	sub	fp, #28
25814     10 26 0E F2 | 	cmp	local01, #16 wz
25818     28 4E 05 A1 |  if_e	add	fp, #40
2581c     A7 26 02 AB |  if_e	rdlong	local01, fp
25820     02 26 06 A1 |  if_e	add	local01, #2
25824     A7 26 62 AC |  if_e	wrlong	local01, fp
25828     28 4E 85 A1 |  if_e	sub	fp, #40
2582c     24 4E 05 F1 | 	add	fp, #36
25830     A7 26 0A FB | 	rdlong	local01, fp wz
25834     24 4E 85 F1 | 	sub	fp, #36
25838     28 00 90 AD |  if_e	jmp	#LR__3255
2583c     28 4E 05 F1 | 	add	fp, #40
25840     A7 26 02 FB | 	rdlong	local01, fp
25844     02 2A 06 F6 | 	mov	local03, #2
25848     34 4E 05 F1 | 	add	fp, #52
2584c     A7 2E 02 FB | 	rdlong	local05, fp
25850     17 2B 02 F1 | 	add	local03, local05
25854     15 27 02 F1 | 	add	local01, local03
25858     34 4E 85 F1 | 	sub	fp, #52
2585c     A7 26 62 FC | 	wrlong	local01, fp
25860     28 4E 85 F1 | 	sub	fp, #40
25864                 | LR__3255
25864     28 4E 05 F1 | 	add	fp, #40
25868     A7 26 02 FB | 	rdlong	local01, fp
2586c     28 4E 85 F1 | 	sub	fp, #40
25870     41 26 56 F2 | 	cmps	local01, #65 wc
25874     01 FA 65 36 |  if_ae	neg	result1, #1
25878     08 05 90 3D |  if_ae	jmp	#LR__3283
2587c     3C 4E 05 F1 | 	add	fp, #60
25880     A7 26 0A FB | 	rdlong	local01, fp wz
25884     3C 4E 85 F1 | 	sub	fp, #60
25888     60 00 90 AD |  if_e	jmp	#LR__3256
2588c     C0 4E 05 F1 | 	add	fp, #192
25890     A7 12 02 FB | 	rdlong	arg01, fp
25894     94 4E 85 F1 | 	sub	fp, #148
25898     A7 14 02 FB | 	rdlong	arg02, fp
2589c     14 4E 05 F1 | 	add	fp, #20
258a0     A7 16 02 FB | 	rdlong	arg03, fp
258a4     40 4E 85 F1 | 	sub	fp, #64
258a8     D8 40 B0 FD | 	call	#__system__emitsign_0533
258ac     18 4F 05 F1 | 	add	fp, #280
258b0     A7 FA 61 FC | 	wrlong	result1, fp
258b4     18 4F 85 F1 | 	sub	fp, #280
258b8     00 FA 55 F2 | 	cmps	result1, #0 wc
258bc     18 4F 05 C1 |  if_b	add	fp, #280
258c0     A7 FA 01 CB |  if_b	rdlong	result1, fp
258c4     18 4F 85 C1 |  if_b	sub	fp, #280
258c8     B8 04 90 CD |  if_b	jmp	#LR__3283
258cc     C0 4E 05 F1 | 	add	fp, #192
258d0     A7 26 02 FB | 	rdlong	local01, fp
258d4     58 4E 05 F1 | 	add	fp, #88
258d8     A7 2A 02 FB | 	rdlong	local03, fp
258dc     15 27 02 F1 | 	add	local01, local03
258e0     58 4E 85 F1 | 	sub	fp, #88
258e4     A7 26 62 FC | 	wrlong	local01, fp
258e8     C0 4E 85 F1 | 	sub	fp, #192
258ec                 | LR__3256
258ec     4C 4E 05 F1 | 	add	fp, #76
258f0     A7 26 02 FB | 	rdlong	local01, fp
258f4     34 4E 85 F1 | 	sub	fp, #52
258f8     A7 26 62 FC | 	wrlong	local01, fp
258fc     18 4E 85 F1 | 	sub	fp, #24
25900     97 9E 48 FB | 	callpa	#(@LR__3262-@LR__3257)>>2,fcache_load_ptr_
25904                 | LR__3257
25904     18 4E 05 F1 | 	add	fp, #24
25908     A7 28 02 FB | 	rdlong	local02, fp
2590c     3C 4E 05 F1 | 	add	fp, #60
25910     A7 2E 02 FB | 	rdlong	local05, fp
25914     54 4E 85 F1 | 	sub	fp, #84
25918     17 29 52 F2 | 	cmps	local02, local05 wc
2591c     20 01 90 3D |  if_ae	jmp	#LR__3263
25920     18 4E 05 F1 | 	add	fp, #24
25924     A7 30 02 FB | 	rdlong	local06, fp
25928     18 4E 85 F1 | 	sub	fp, #24
2592c     00 30 56 F2 | 	cmps	local06, #0 wc
25930     58 00 90 CD |  if_b	jmp	#LR__3258
25934     18 4E 05 F1 | 	add	fp, #24
25938     A7 30 02 FB | 	rdlong	local06, fp
2593c     40 4E 05 F1 | 	add	fp, #64
25940     A7 32 02 FB | 	rdlong	local07, fp
25944     58 4E 85 F1 | 	sub	fp, #88
25948     19 31 52 F2 | 	cmps	local06, local07 wc
2594c     3C 00 90 3D |  if_ae	jmp	#LR__3258
25950     C0 4E 05 F1 | 	add	fp, #192
25954     A7 34 02 FB | 	rdlong	local08, fp
25958     1A 33 02 F6 | 	mov	local07, local08
2595c     01 32 06 F1 | 	add	local07, #1
25960     A7 32 62 FC | 	wrlong	local07, fp
25964     A8 4E 85 F1 | 	sub	fp, #168
25968     A7 32 02 FB | 	rdlong	local07, fp
2596c     19 37 02 F6 | 	mov	local09, local07
25970     58 4E 05 F1 | 	add	fp, #88
25974     A7 38 02 F6 | 	mov	local10, fp
25978     A7 36 02 F1 | 	add	local09, fp
2597c     1B 3B C2 FA | 	rdbyte	local11, local09
25980     1A 3B 42 FC | 	wrbyte	local11, local08
25984     70 4E 85 F1 | 	sub	fp, #112
25988     20 00 90 FD | 	jmp	#LR__3259
2598c                 | LR__3258
2598c     C0 4E 05 F1 | 	add	fp, #192
25990     A7 34 02 FB | 	rdlong	local08, fp
25994     1A 37 02 F6 | 	mov	local09, local08
25998     01 36 06 F1 | 	add	local09, #1
2599c     A7 36 62 FC | 	wrlong	local09, fp
259a0     C0 4E 85 F1 | 	sub	fp, #192
259a4     30 36 06 F6 | 	mov	local09, #48
259a8     1A 61 48 FC | 	wrbyte	#48, local08
259ac                 | LR__3259
259ac     18 4E 05 F1 | 	add	fp, #24
259b0     A7 30 02 FB | 	rdlong	local06, fp
259b4     38 4E 05 F1 | 	add	fp, #56
259b8     A7 3C 02 FB | 	rdlong	local12, fp
259bc     50 4E 85 F1 | 	sub	fp, #80
259c0     1E 31 0A F2 | 	cmp	local06, local12 wz
259c4     5C 00 90 5D |  if_ne	jmp	#LR__3261
259c8     10 4F 05 F1 | 	add	fp, #272
259cc     A7 32 02 FB | 	rdlong	local07, fp
259d0     10 4F 85 F1 | 	sub	fp, #272
259d4     19 37 0A F6 | 	mov	local09, local07 wz
259d8     28 00 90 5D |  if_ne	jmp	#LR__3260
259dc     54 4E 05 F1 | 	add	fp, #84
259e0     A7 3A 02 FB | 	rdlong	local11, fp
259e4     1D 39 02 F6 | 	mov	local10, local11
259e8     01 38 86 F1 | 	sub	local10, #1
259ec     3C 4E 85 F1 | 	sub	fp, #60
259f0     A7 3E 02 FB | 	rdlong	local13, fp
259f4     18 4E 85 F1 | 	sub	fp, #24
259f8     1F 41 02 F6 | 	mov	local14, local13
259fc     1C 41 52 F2 | 	cmps	local14, local10 wc
25a00     20 00 90 3D |  if_ae	jmp	#LR__3261
25a04                 | LR__3260
25a04     C0 4E 05 F1 | 	add	fp, #192
25a08     A7 34 02 FB | 	rdlong	local08, fp
25a0c     1A 3D 02 F6 | 	mov	local12, local08
25a10     01 3C 06 F1 | 	add	local12, #1
25a14     A7 3C 62 FC | 	wrlong	local12, fp
25a18     C0 4E 85 F1 | 	sub	fp, #192
25a1c     2E 36 06 F6 | 	mov	local09, #46
25a20     1A 5D 48 FC | 	wrbyte	#46, local08
25a24                 | LR__3261
25a24     18 4E 05 F1 | 	add	fp, #24
25a28     A7 42 02 FB | 	rdlong	local15, fp
25a2c     21 3D 02 F6 | 	mov	local12, local15
25a30     01 3C 06 F1 | 	add	local12, #1
25a34     A7 3C 62 FC | 	wrlong	local12, fp
25a38     18 4E 85 F1 | 	sub	fp, #24
25a3c     C4 FE 9F FD | 	jmp	#LR__3257
25a40                 | LR__3262
25a40                 | LR__3263
25a40     34 4E 05 F1 | 	add	fp, #52
25a44     A7 26 0A FB | 	rdlong	local01, fp wz
25a48     34 4E 85 F1 | 	sub	fp, #52
25a4c     A0 00 90 AD |  if_e	jmp	#LR__3267
25a50     C0 4E 05 F1 | 	add	fp, #192
25a54     A7 26 02 FB | 	rdlong	local01, fp
25a58     01 26 86 F1 | 	sub	local01, #1
25a5c     A7 26 62 FC | 	wrlong	local01, fp
25a60     C0 4E 85 F1 | 	sub	fp, #192
25a64     97 26 48 FB | 	callpa	#(@LR__3265-@LR__3264)>>2,fcache_load_ptr_
25a68                 | LR__3264
25a68     C0 4E 05 F1 | 	add	fp, #192
25a6c     A7 26 02 FB | 	rdlong	local01, fp
25a70     04 4E 05 F1 | 	add	fp, #4
25a74     A7 2A 02 FB | 	rdlong	local03, fp
25a78     C4 4E 85 F1 | 	sub	fp, #196
25a7c     15 27 5A F2 | 	cmps	local01, local03 wcz
25a80     30 00 90 ED |  if_be	jmp	#LR__3266
25a84     C0 4E 05 F1 | 	add	fp, #192
25a88     A7 30 02 FB | 	rdlong	local06, fp
25a8c     C0 4E 85 F1 | 	sub	fp, #192
25a90     18 2D C2 FA | 	rdbyte	local04, local06
25a94     30 2C 0E F2 | 	cmp	local04, #48 wz
25a98     18 00 90 5D |  if_ne	jmp	#LR__3266
25a9c     C0 4E 05 F1 | 	add	fp, #192
25aa0     A7 26 02 FB | 	rdlong	local01, fp
25aa4     01 26 86 F1 | 	sub	local01, #1
25aa8     A7 26 62 FC | 	wrlong	local01, fp
25aac     C0 4E 85 F1 | 	sub	fp, #192
25ab0     B4 FF 9F FD | 	jmp	#LR__3264
25ab4                 | LR__3265
25ab4                 | LR__3266
25ab4     C0 4E 05 F1 | 	add	fp, #192
25ab8     A7 28 02 FB | 	rdlong	local02, fp
25abc     C0 4E 85 F1 | 	sub	fp, #192
25ac0     14 27 C2 FA | 	rdbyte	local01, local02
25ac4     2E 26 0E F2 | 	cmp	local01, #46 wz
25ac8     C0 4E 05 A1 |  if_e	add	fp, #192
25acc     A7 26 02 AB |  if_e	rdlong	local01, fp
25ad0     01 26 86 A1 |  if_e	sub	local01, #1
25ad4     A7 26 62 AC |  if_e	wrlong	local01, fp
25ad8     C0 4E 85 A1 |  if_e	sub	fp, #192
25adc     C0 4E 05 F1 | 	add	fp, #192
25ae0     A7 2A 02 FB | 	rdlong	local03, fp
25ae4     01 2A 06 F1 | 	add	local03, #1
25ae8     A7 2A 62 FC | 	wrlong	local03, fp
25aec     C0 4E 85 F1 | 	sub	fp, #192
25af0                 | LR__3267
25af0     24 4E 05 F1 | 	add	fp, #36
25af4     A7 26 0A FB | 	rdlong	local01, fp wz
25af8     24 4E 85 F1 | 	sub	fp, #36
25afc     B4 00 90 AD |  if_e	jmp	#LR__3270
25b00     C0 4E 05 F1 | 	add	fp, #192
25b04     A7 28 02 FB | 	rdlong	local02, fp
25b08     14 2B 02 F6 | 	mov	local03, local02
25b0c     01 2A 06 F1 | 	add	local03, #1
25b10     A7 2A 62 FC | 	wrlong	local03, fp
25b14     90 4E 85 F1 | 	sub	fp, #144
25b18     A7 2C 02 FB | 	rdlong	local04, fp
25b1c     14 2D 42 FC | 	wrbyte	local04, local02
25b20     90 4E 05 F1 | 	add	fp, #144
25b24     A7 28 02 FB | 	rdlong	local02, fp
25b28     14 2B 02 F6 | 	mov	local03, local02
25b2c     01 2A 06 F1 | 	add	local03, #1
25b30     A7 2A 62 FC | 	wrlong	local03, fp
25b34     60 4E 85 F1 | 	sub	fp, #96
25b38     A7 2C 02 FB | 	rdlong	local04, fp
25b3c     14 2D 42 FC | 	wrbyte	local04, local02
25b40     48 4E 85 F1 | 	sub	fp, #72
25b44     A7 00 68 FC | 	wrlong	#0, fp
25b48     18 4E 85 F1 | 	sub	fp, #24
25b4c                 | LR__3268
25b4c     18 4E 05 F1 | 	add	fp, #24
25b50     A7 28 02 FB | 	rdlong	local02, fp
25b54     44 4E 05 F1 | 	add	fp, #68
25b58     A7 2E 02 FB | 	rdlong	local05, fp
25b5c     5C 4E 85 F1 | 	sub	fp, #92
25b60     17 29 52 F2 | 	cmps	local02, local05 wc
25b64     4C 00 90 3D |  if_ae	jmp	#LR__3269
25b68     C0 4E 05 F1 | 	add	fp, #192
25b6c     A7 34 02 FB | 	rdlong	local08, fp
25b70     1A 3D 02 F6 | 	mov	local12, local08
25b74     01 3C 06 F1 | 	add	local12, #1
25b78     A7 3C 62 FC | 	wrlong	local12, fp
25b7c     A8 4E 85 F1 | 	sub	fp, #168
25b80     A7 32 02 FB | 	rdlong	local07, fp
25b84     19 37 02 F6 | 	mov	local09, local07
25b88     98 4E 05 F1 | 	add	fp, #152
25b8c     A7 38 02 F6 | 	mov	local10, fp
25b90     A7 36 02 F1 | 	add	local09, fp
25b94     1B 3B C2 FA | 	rdbyte	local11, local09
25b98     1A 3B 42 FC | 	wrbyte	local11, local08
25b9c     98 4E 85 F1 | 	sub	fp, #152
25ba0     A7 3C 02 FB | 	rdlong	local12, fp
25ba4     01 3C 06 F1 | 	add	local12, #1
25ba8     A7 3C 62 FC | 	wrlong	local12, fp
25bac     18 4E 85 F1 | 	sub	fp, #24
25bb0     98 FF 9F FD | 	jmp	#LR__3268
25bb4                 | LR__3269
25bb4                 | LR__3270
25bb4     C0 4E 05 F1 | 	add	fp, #192
25bb8     A7 26 02 FB | 	rdlong	local01, fp
25bbc     C0 4E 85 F1 | 	sub	fp, #192
25bc0     13 01 48 FC | 	wrbyte	#0, local01
25bc4                 | LR__3271
25bc4     6C 4E 05 F1 | 	add	fp, #108
25bc8     A7 26 0A FB | 	rdlong	local01, fp wz
25bcc     6C 4E 85 F1 | 	sub	fp, #108
25bd0     90 01 90 AD |  if_e	jmp	#LR__3282
25bd4     48 4E 05 F1 | 	add	fp, #72
25bd8     A7 2A 0A FB | 	rdlong	local03, fp wz
25bdc     48 4E 85 F1 | 	sub	fp, #72
25be0     80 01 90 AD |  if_e	jmp	#LR__3282
25be4     C4 4E 05 F1 | 	add	fp, #196
25be8     A7 12 02 FB | 	rdlong	arg01, fp
25bec     C4 4E 85 F1 | 	sub	fp, #196
25bf0     09 45 02 F6 | 	mov	local16, arg01
25bf4     97 06 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
25bf8                 | LR__3272
25bf8     22 FB C9 FA | 	rdbyte	result1, local16 wz
25bfc     01 44 06 51 |  if_ne	add	local16, #1
25c00     F4 FF 9F 5D |  if_ne	jmp	#LR__3272
25c04                 | LR__3273
25c04     09 45 82 F1 | 	sub	local16, arg01
25c08     22 2D 02 F6 | 	mov	local04, local16
25c0c     6C 4E 05 F1 | 	add	fp, #108
25c10     A7 30 02 FB | 	rdlong	local06, fp
25c14     6C 4E 85 F1 | 	sub	fp, #108
25c18     18 2D 5A F2 | 	cmps	local04, local06 wcz
25c1c     44 01 90 ED |  if_be	jmp	#LR__3282
25c20     C4 4E 05 F1 | 	add	fp, #196
25c24     A7 26 02 FB | 	rdlong	local01, fp
25c28     5C 4E 05 F1 | 	add	fp, #92
25c2c     A7 26 62 FC | 	wrlong	local01, fp
25c30     FC 4E 85 F1 | 	sub	fp, #252
25c34     A7 26 0A FB | 	rdlong	local01, fp wz
25c38     24 4E 85 F1 | 	sub	fp, #36
25c3c     20 00 90 AD |  if_e	jmp	#LR__3274
25c40     B8 4E 05 F1 | 	add	fp, #184
25c44     A7 00 68 FC | 	wrlong	#0, fp
25c48     4C 4E 85 F1 | 	sub	fp, #76
25c4c     A7 26 02 FB | 	rdlong	local01, fp
25c50     B0 4E 05 F1 | 	add	fp, #176
25c54     A7 26 62 FC | 	wrlong	local01, fp
25c58     1C 4F 85 F1 | 	sub	fp, #284
25c5c     24 00 90 FD | 	jmp	#LR__3275
25c60                 | LR__3274
25c60     6C 4E 05 F1 | 	add	fp, #108
25c64     A7 26 02 FB | 	rdlong	local01, fp
25c68     01 26 86 F1 | 	sub	local01, #1
25c6c     4C 4E 05 F1 | 	add	fp, #76
25c70     A7 2A 02 FB | 	rdlong	local03, fp
25c74     15 27 82 F1 | 	sub	local01, local03
25c78     64 4E 05 F1 | 	add	fp, #100
25c7c     A7 26 62 FC | 	wrlong	local01, fp
25c80     1C 4F 85 F1 | 	sub	fp, #284
25c84                 | LR__3275
25c84     97 20 48 FB | 	callpa	#(@LR__3277-@LR__3276)>>2,fcache_load_ptr_
25c88                 | LR__3276
25c88     1C 4F 05 F1 | 	add	fp, #284
25c8c     A7 26 0A FB | 	rdlong	local01, fp wz
25c90     1C 4F 85 F1 | 	sub	fp, #284
25c94     30 00 90 AD |  if_e	jmp	#LR__3278
25c98     20 4F 05 F1 | 	add	fp, #288
25c9c     A7 28 02 FB | 	rdlong	local02, fp
25ca0     14 2B 02 F6 | 	mov	local03, local02
25ca4     01 2A 06 F1 | 	add	local03, #1
25ca8     A7 2A 62 FC | 	wrlong	local03, fp
25cac     14 55 48 FC | 	wrbyte	#42, local02
25cb0     04 4E 85 F1 | 	sub	fp, #4
25cb4     A7 26 02 FB | 	rdlong	local01, fp
25cb8     01 26 86 F1 | 	sub	local01, #1
25cbc     A7 26 62 FC | 	wrlong	local01, fp
25cc0     1C 4F 85 F1 | 	sub	fp, #284
25cc4     C0 FF 9F FD | 	jmp	#LR__3276
25cc8                 | LR__3277
25cc8                 | LR__3278
25cc8     B8 4E 05 F1 | 	add	fp, #184
25ccc     A7 26 0A FB | 	rdlong	local01, fp wz
25cd0     B8 4E 85 F1 | 	sub	fp, #184
25cd4     70 00 90 AD |  if_e	jmp	#LR__3281
25cd8     20 4F 05 F1 | 	add	fp, #288
25cdc     A7 28 02 FB | 	rdlong	local02, fp
25ce0     14 2B 02 F6 | 	mov	local03, local02
25ce4     01 2A 06 F1 | 	add	local03, #1
25ce8     A7 2A 62 FC | 	wrlong	local03, fp
25cec     14 5D 48 FC | 	wrbyte	#46, local02
25cf0     04 4E 85 F1 | 	sub	fp, #4
25cf4     A7 00 68 FC | 	wrlong	#0, fp
25cf8     1C 4F 85 F1 | 	sub	fp, #284
25cfc                 | LR__3279
25cfc     1C 4F 05 F1 | 	add	fp, #284
25d00     A7 28 02 FB | 	rdlong	local02, fp
25d04     64 4E 85 F1 | 	sub	fp, #100
25d08     A7 2E 02 FB | 	rdlong	local05, fp
25d0c     B8 4E 85 F1 | 	sub	fp, #184
25d10     17 29 52 F2 | 	cmps	local02, local05 wc
25d14     30 00 90 3D |  if_ae	jmp	#LR__3280
25d18     20 4F 05 F1 | 	add	fp, #288
25d1c     A7 34 02 FB | 	rdlong	local08, fp
25d20     1A 3D 02 F6 | 	mov	local12, local08
25d24     01 3C 06 F1 | 	add	local12, #1
25d28     A7 3C 62 FC | 	wrlong	local12, fp
25d2c     1A 55 48 FC | 	wrbyte	#42, local08
25d30     04 4E 85 F1 | 	sub	fp, #4
25d34     A7 3C 02 FB | 	rdlong	local12, fp
25d38     01 3C 06 F1 | 	add	local12, #1
25d3c     A7 3C 62 FC | 	wrlong	local12, fp
25d40     1C 4F 85 F1 | 	sub	fp, #284
25d44     B4 FF 9F FD | 	jmp	#LR__3279
25d48                 | LR__3280
25d48                 | LR__3281
25d48     20 4F 05 F1 | 	add	fp, #288
25d4c     A7 28 02 FB | 	rdlong	local02, fp
25d50     14 2B 02 F6 | 	mov	local03, local02
25d54     01 2A 06 F1 | 	add	local03, #1
25d58     A7 2A 62 FC | 	wrlong	local03, fp
25d5c     20 4F 85 F1 | 	sub	fp, #288
25d60     14 01 48 FC | 	wrbyte	#0, local02
25d64                 | LR__3282
25d64     04 4E 05 F1 | 	add	fp, #4
25d68     A7 12 02 FB | 	rdlong	arg01, fp
25d6c     04 4E 05 F1 | 	add	fp, #4
25d70     A7 14 02 FB | 	rdlong	arg02, fp
25d74     BC 4E 05 F1 | 	add	fp, #188
25d78     A7 16 02 FB | 	rdlong	arg03, fp
25d7c     C4 4E 85 F1 | 	sub	fp, #196
25d80     C4 EE BF FD | 	call	#__system___fmtstr
25d84                 | LR__3283
25d84     A7 F0 03 F6 | 	mov	ptra, fp
25d88     B2 00 A0 FD | 	call	#popregs_
25d8c                 | __system___fmtfloat_ret
25d8c     2D 00 64 FD | 	ret
25d90                 | 
25d90                 | __system__Left_S
25d90     04 4A 05 F6 | 	mov	COUNT_, #4
25d94     A8 00 A0 FD | 	call	#pushregs_
25d98     09 27 02 F6 | 	mov	local01, arg01
25d9c     0A 29 02 F6 | 	mov	local02, arg02
25da0     01 28 56 F2 | 	cmps	local02, #1 wc
25da4     9C 01 00 CF 
25da8     2A FA 05 C6 |  if_b	mov	result1, ##@LR__5233
25dac     5C 00 90 CD |  if_b	jmp	#LR__3293
25db0     13 13 02 F6 | 	mov	arg01, local01
25db4     09 2B 02 F6 | 	mov	local03, arg01
25db8     97 06 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
25dbc                 | LR__3290
25dbc     15 FB C9 FA | 	rdbyte	result1, local03 wz
25dc0     01 2A 06 51 |  if_ne	add	local03, #1
25dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3290
25dc8                 | LR__3291
25dc8     09 2B 82 F1 | 	sub	local03, arg01
25dcc     15 FB 01 F6 | 	mov	result1, local03
25dd0     14 FB 59 F2 | 	cmps	result1, local02 wcz
25dd4     13 FB 01 E6 |  if_be	mov	result1, local01
25dd8     30 00 90 ED |  if_be	jmp	#LR__3293
25ddc     14 13 02 F6 | 	mov	arg01, local02
25de0     02 12 06 F1 | 	add	arg01, #2
25de4     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
25de8     FD 2C 0A F6 | 	mov	local04, result1 wz
25dec     18 00 90 AD |  if_e	jmp	#LR__3292
25df0     16 13 02 F6 | 	mov	arg01, local04
25df4     13 15 02 F6 | 	mov	arg02, local01
25df8     14 17 02 F6 | 	mov	arg03, local02
25dfc     34 DE BF FD | 	call	#__system____builtin_memmove
25e00     16 29 02 F1 | 	add	local02, local04
25e04     14 01 48 FC | 	wrbyte	#0, local02
25e08                 | LR__3292
25e08     16 FB 01 F6 | 	mov	result1, local04
25e0c                 | LR__3293
25e0c     A7 F0 03 F6 | 	mov	ptra, fp
25e10     B2 00 A0 FD | 	call	#popregs_
25e14                 | __system__Left_S_ret
25e14     2D 00 64 FD | 	ret
25e18                 | 
25e18                 | __system__Right_S
25e18     05 4A 05 F6 | 	mov	COUNT_, #5
25e1c     A8 00 A0 FD | 	call	#pushregs_
25e20     09 27 02 F6 | 	mov	local01, arg01
25e24     0A 29 02 F6 | 	mov	local02, arg02
25e28     01 28 56 F2 | 	cmps	local02, #1 wc
25e2c     9C 01 00 CF 
25e30     2B FA 05 C6 |  if_b	mov	result1, ##@LR__5234
25e34     64 00 90 CD |  if_b	jmp	#LR__3303
25e38     13 13 02 F6 | 	mov	arg01, local01
25e3c     09 2B 02 F6 | 	mov	local03, arg01
25e40     97 06 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
25e44                 | LR__3300
25e44     15 FB C9 FA | 	rdbyte	result1, local03 wz
25e48     01 2A 06 51 |  if_ne	add	local03, #1
25e4c     F4 FF 9F 5D |  if_ne	jmp	#LR__3300
25e50                 | LR__3301
25e50     09 2B 82 F1 | 	sub	local03, arg01
25e54     15 FB 01 F6 | 	mov	result1, local03
25e58     FD 2C 02 F6 | 	mov	local04, result1
25e5c     14 2D 5A F2 | 	cmps	local04, local02 wcz
25e60     13 FB 01 E6 |  if_be	mov	result1, local01
25e64     34 00 90 ED |  if_be	jmp	#LR__3303
25e68     14 13 02 F6 | 	mov	arg01, local02
25e6c     02 12 06 F1 | 	add	arg01, #2
25e70     40 20 B0 FD | 	call	#__system___gc_alloc_managed
25e74     FD 2E 0A F6 | 	mov	local05, result1 wz
25e78     1C 00 90 AD |  if_e	jmp	#LR__3302
25e7c     14 2D 82 F1 | 	sub	local04, local02
25e80     13 2D 02 F1 | 	add	local04, local01
25e84     01 28 06 F1 | 	add	local02, #1
25e88     17 13 02 F6 | 	mov	arg01, local05
25e8c     16 15 02 F6 | 	mov	arg02, local04
25e90     14 17 02 F6 | 	mov	arg03, local02
25e94     9C DD BF FD | 	call	#__system____builtin_memmove
25e98                 | LR__3302
25e98     17 FB 01 F6 | 	mov	result1, local05
25e9c                 | LR__3303
25e9c     A7 F0 03 F6 | 	mov	ptra, fp
25ea0     B2 00 A0 FD | 	call	#popregs_
25ea4                 | __system__Right_S_ret
25ea4     2D 00 64 FD | 	ret
25ea8                 | 
25ea8                 | __system__Mid_S
25ea8     05 4A 05 F6 | 	mov	COUNT_, #5
25eac     A8 00 A0 FD | 	call	#pushregs_
25eb0     09 27 02 F6 | 	mov	local01, arg01
25eb4     0A 29 02 F6 | 	mov	local02, arg02
25eb8     01 16 56 F2 | 	cmps	arg03, #1 wc
25ebc     9C 01 00 CF 
25ec0     2C FA 05 C6 |  if_b	mov	result1, ##@LR__5235
25ec4     80 00 90 CD |  if_b	jmp	#LR__3313
25ec8     01 28 86 F1 | 	sub	local02, #1
25ecc     00 28 56 F3 | 	fges	local02, #0 wc
25ed0     13 13 02 F6 | 	mov	arg01, local01
25ed4     09 2B 02 F6 | 	mov	local03, arg01
25ed8     97 06 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
25edc                 | LR__3310
25edc     15 FB C9 FA | 	rdbyte	result1, local03 wz
25ee0     01 2A 06 51 |  if_ne	add	local03, #1
25ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__3310
25ee8                 | LR__3311
25ee8     09 2B 82 F1 | 	sub	local03, arg01
25eec     15 FB 01 F6 | 	mov	result1, local03
25ef0     FD 14 02 F6 | 	mov	arg02, result1
25ef4     14 15 52 F2 | 	cmps	arg02, local02 wc
25ef8     9C 01 00 CF 
25efc     2D FA 05 C6 |  if_b	mov	result1, ##@LR__5236
25f00     44 00 90 CD |  if_b	jmp	#LR__3313
25f04     0A 2D 02 F6 | 	mov	local04, arg02
25f08     14 2D 82 F1 | 	sub	local04, local02
25f0c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
25f10     0B 2D 02 16 |  if_a	mov	local04, arg03
25f14     16 13 02 F6 | 	mov	arg01, local04
25f18     02 12 06 F1 | 	add	arg01, #2
25f1c     94 1F B0 FD | 	call	#__system___gc_alloc_managed
25f20     FD 2E 0A F6 | 	mov	local05, result1 wz
25f24     1C 00 90 AD |  if_e	jmp	#LR__3312
25f28     13 29 02 F1 | 	add	local02, local01
25f2c     17 13 02 F6 | 	mov	arg01, local05
25f30     14 15 02 F6 | 	mov	arg02, local02
25f34     16 17 02 F6 | 	mov	arg03, local04
25f38     F8 DC BF FD | 	call	#__system____builtin_memmove
25f3c     17 2D 02 F1 | 	add	local04, local05
25f40     16 01 48 FC | 	wrbyte	#0, local04
25f44                 | LR__3312
25f44     17 FB 01 F6 | 	mov	result1, local05
25f48                 | LR__3313
25f48     A7 F0 03 F6 | 	mov	ptra, fp
25f4c     B2 00 A0 FD | 	call	#popregs_
25f50                 | __system__Mid_S_ret
25f50     2D 00 64 FD | 	ret
25f54                 | 
25f54                 | __system__Chr_S
25f54     01 4A 05 F6 | 	mov	COUNT_, #1
25f58     A8 00 A0 FD | 	call	#pushregs_
25f5c     09 27 02 F6 | 	mov	local01, arg01
25f60     03 12 06 F6 | 	mov	arg01, #3
25f64     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
25f68     00 FA 4D F2 | 	cmps	result1, #0 wz
25f6c     FD 26 42 5C |  if_ne	wrbyte	local01, result1
25f70     01 FA 05 51 |  if_ne	add	result1, #1
25f74     FD 00 48 5C |  if_ne	wrbyte	#0, result1
25f78     01 FA 85 51 |  if_ne	sub	result1, #1
25f7c     A7 F0 03 F6 | 	mov	ptra, fp
25f80     B2 00 A0 FD | 	call	#popregs_
25f84                 | __system__Chr_S_ret
25f84     2D 00 64 FD | 	ret
25f88                 | 
25f88                 | __system__str_S
25f88     02 4A 05 F6 | 	mov	COUNT_, #2
25f8c     A8 00 A0 FD | 	call	#pushregs_
25f90     09 27 02 F6 | 	mov	local01, arg01
25f94     10 12 06 F6 | 	mov	arg01, #16
25f98     18 1F B0 FD | 	call	#__system___gc_alloc_managed
25f9c     FD 28 0A F6 | 	mov	local02, result1 wz
25fa0     30 00 90 AD |  if_e	jmp	#LR__3320
25fa4     F8 13 02 F6 | 	mov	arg01, ptra
25fa8     08 F0 07 F1 | 	add	ptra, #8
25fac     09 29 62 FC | 	wrlong	local02, arg01
25fb0     04 12 06 F1 | 	add	arg01, #4
25fb4     09 01 68 FC | 	wrlong	#0, arg01
25fb8     04 12 86 F1 | 	sub	arg01, #4
25fbc     00 E0 04 FF 
25fc0     00 12 46 F5 | 	or	arg01, ##163577856
25fc4     00 14 06 F6 | 	mov	arg02, #0
25fc8     13 17 02 F6 | 	mov	arg03, local01
25fcc     67 18 06 F6 | 	mov	arg04, #103
25fd0     90 EE BF FD | 	call	#__system___fmtfloat
25fd4                 | LR__3320
25fd4     14 FB 01 F6 | 	mov	result1, local02
25fd8     A7 F0 03 F6 | 	mov	ptra, fp
25fdc     B2 00 A0 FD | 	call	#popregs_
25fe0                 | __system__str_S_ret
25fe0     2D 00 64 FD | 	ret
25fe4                 | 
25fe4                 | __system__Number_S
25fe4     08 4A 05 F6 | 	mov	COUNT_, #8
25fe8     A8 00 A0 FD | 	call	#pushregs_
25fec     09 27 02 F6 | 	mov	local01, arg01
25ff0     0A 29 0A F6 | 	mov	local02, arg02 wz
25ff4     0B 2B 02 F6 | 	mov	local03, arg03
25ff8     3C 00 90 5D |  if_ne	jmp	#LR__3332
25ffc     01 28 06 F6 | 	mov	local02, #1
26000     15 2D 02 F6 | 	mov	local04, local03
26004     01 2E 06 F6 | 	mov	local05, #1
26008     97 16 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
2600c                 | LR__3330
2600c     00 30 06 F6 | 	mov	local06, #0
26010     13 2D 1A F2 | 	cmp	local04, local01 wcz
26014     01 30 66 E6 |  if_be	neg	local06, #1
26018     16 2F 12 F2 | 	cmp	local05, local04 wc
2601c     19 33 A2 F1 | 	subx	local07, local07
26020     19 31 CA F7 | 	test	local06, local07 wz
26024     15 2D 02 5D |  if_ne	qmul	local04, local03
26028     16 2F 02 56 |  if_ne	mov	local05, local04
2602c     01 28 06 51 |  if_ne	add	local02, #1
26030     18 2C 62 5D |  if_ne	getqx	local04
26034     D4 FF 9F 5D |  if_ne	jmp	#LR__3330
26038                 | LR__3331
26038                 | LR__3332
26038     20 28 36 F3 | 	fle	local02, #32 wc
2603c     14 13 02 F6 | 	mov	arg01, local02
26040     02 12 06 F1 | 	add	arg01, #2
26044     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
26048     FD 30 02 F6 | 	mov	local06, result1
2604c     14 33 02 F6 | 	mov	local07, local02
26050     18 33 02 F1 | 	add	local07, local06
26054     19 01 48 FC | 	wrbyte	#0, local07
26058     97 1A 48 FB | 	callpa	#(@LR__3334-@LR__3333)>>2,fcache_load_ptr_
2605c                 | LR__3333
2605c     01 28 16 F2 | 	cmp	local02, #1 wc
26060     2C 00 90 CD |  if_b	jmp	#LR__3335
26064     15 27 12 FD | 	qdiv	local01, local03
26068     01 28 86 F1 | 	sub	local02, #1
2606c     14 33 02 F6 | 	mov	local07, local02
26070     18 33 02 F1 | 	add	local07, local06
26074     19 34 62 FD | 	getqy	local08
26078     0A 34 16 F2 | 	cmp	local08, #10 wc
2607c     30 34 06 C1 |  if_b	add	local08, #48
26080     37 34 06 31 |  if_ae	add	local08, #55
26084     19 35 42 FC | 	wrbyte	local08, local07
26088     18 26 62 FD | 	getqx	local01
2608c     CC FF 9F FD | 	jmp	#LR__3333
26090                 | LR__3334
26090                 | LR__3335
26090     18 FB 01 F6 | 	mov	result1, local06
26094     A7 F0 03 F6 | 	mov	ptra, fp
26098     B2 00 A0 FD | 	call	#popregs_
2609c                 | __system__Number_S_ret
2609c     2D 00 64 FD | 	ret
260a0                 | 
260a0                 | __system__LCase_S
260a0     07 4A 05 F6 | 	mov	COUNT_, #7
260a4     A8 00 A0 FD | 	call	#pushregs_
260a8     09 27 02 F6 | 	mov	local01, arg01
260ac     09 29 02 F6 | 	mov	local02, arg01
260b0     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
260b4                 | LR__3340
260b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
260b8     01 28 06 51 |  if_ne	add	local02, #1
260bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
260c0                 | LR__3341
260c0     09 29 82 F1 | 	sub	local02, arg01
260c4     14 FB 01 F6 | 	mov	result1, local02
260c8     FD 28 0A F6 | 	mov	local02, result1 wz
260cc     9C 01 00 AF 
260d0     2E FA 05 A6 |  if_e	mov	result1, ##@LR__5237
260d4     7C 00 90 AD |  if_e	jmp	#LR__3347
260d8     14 13 02 F6 | 	mov	arg01, local02
260dc     02 12 06 F1 | 	add	arg01, #2
260e0     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
260e4     FD 2A 0A F6 | 	mov	local03, result1 wz
260e8     64 00 90 AD |  if_e	jmp	#LR__3346
260ec     01 2C 66 F6 | 	neg	local04, #1
260f0     97 26 48 FB | 	callpa	#(@LR__3345-@LR__3342)>>2,fcache_load_ptr_
260f4                 | LR__3342
260f4     01 2C 06 F1 | 	add	local04, #1
260f8     16 2F 02 F6 | 	mov	local05, local04
260fc     13 2F 02 F1 | 	add	local05, local01
26100     17 31 C2 FA | 	rdbyte	local06, local05
26104     41 30 56 F2 | 	cmps	local06, #65 wc
26108     18 00 90 CD |  if_b	jmp	#LR__3343
2610c     5B 30 56 F2 | 	cmps	local06, #91 wc
26110     16 33 02 C6 |  if_b	mov	local07, local04
26114     15 33 02 C1 |  if_b	add	local07, local03
26118     20 30 06 C1 |  if_b	add	local06, #32
2611c     19 31 42 CC |  if_b	wrbyte	local06, local07
26120     0C 00 90 CD |  if_b	jmp	#LR__3344
26124                 | LR__3343
26124     16 33 02 F6 | 	mov	local07, local04
26128     15 33 02 F1 | 	add	local07, local03
2612c     19 31 42 FC | 	wrbyte	local06, local07
26130                 | LR__3344
26130     14 31 02 F6 | 	mov	local06, local02
26134     01 30 86 F1 | 	sub	local06, #1
26138     18 2D 0A F2 | 	cmp	local04, local06 wz
2613c     B4 FF 9F 5D |  if_ne	jmp	#LR__3342
26140                 | LR__3345
26140     15 29 02 F1 | 	add	local02, local03
26144     14 01 48 FC | 	wrbyte	#0, local02
26148     15 FB 01 F6 | 	mov	result1, local03
2614c     04 00 90 FD | 	jmp	#LR__3347
26150                 | LR__3346
26150     15 FB 01 F6 | 	mov	result1, local03
26154                 | LR__3347
26154     A7 F0 03 F6 | 	mov	ptra, fp
26158     B2 00 A0 FD | 	call	#popregs_
2615c                 | __system__LCase_S_ret
2615c     2D 00 64 FD | 	ret
26160                 | 
26160                 | __system__LTrim_S
26160     05 4A 05 F6 | 	mov	COUNT_, #5
26164     A8 00 A0 FD | 	call	#pushregs_
26168     09 27 02 F6 | 	mov	local01, arg01
2616c     09 29 02 F6 | 	mov	local02, arg01
26170     97 06 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
26174                 | LR__3350
26174     14 FB C9 FA | 	rdbyte	result1, local02 wz
26178     01 28 06 51 |  if_ne	add	local02, #1
2617c     F4 FF 9F 5D |  if_ne	jmp	#LR__3350
26180                 | LR__3351
26180     09 29 82 F1 | 	sub	local02, arg01
26184     14 FB 01 F6 | 	mov	result1, local02
26188     FD 28 0A F6 | 	mov	local02, result1 wz
2618c     9C 01 00 AF 
26190     2F FA 05 A6 |  if_e	mov	result1, ##@LR__5238
26194     7C 00 90 AD |  if_e	jmp	#LR__3356
26198     00 2A 06 F6 | 	mov	local03, #0
2619c     14 2D 02 F6 | 	mov	local04, local02
261a0                 | LR__3352
261a0     16 2B 52 F2 | 	cmps	local03, local04 wc
261a4     68 00 90 3D |  if_ae	jmp	#LR__3355
261a8     15 17 02 F6 | 	mov	arg03, local03
261ac     13 17 02 F1 | 	add	arg03, local01
261b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
261b4     20 16 0E F2 | 	cmp	arg03, #32 wz
261b8     4C 00 90 AD |  if_e	jmp	#LR__3354
261bc     14 13 02 F6 | 	mov	arg01, local02
261c0     15 13 82 F1 | 	sub	arg01, local03
261c4     02 12 06 F1 | 	add	arg01, #2
261c8     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
261cc     FD 2E 0A F6 | 	mov	local05, result1 wz
261d0     2C 00 90 AD |  if_e	jmp	#LR__3353
261d4     15 15 02 F6 | 	mov	arg02, local03
261d8     13 15 02 F1 | 	add	arg02, local01
261dc     14 17 02 F6 | 	mov	arg03, local02
261e0     15 17 82 F1 | 	sub	arg03, local03
261e4     17 13 02 F6 | 	mov	arg01, local05
261e8     48 DA BF FD | 	call	#__system____builtin_memmove
261ec     15 29 82 F1 | 	sub	local02, local03
261f0     17 29 02 F1 | 	add	local02, local05
261f4     14 01 48 FC | 	wrbyte	#0, local02
261f8     17 FB 01 F6 | 	mov	result1, local05
261fc     14 00 90 FD | 	jmp	#LR__3356
26200                 | LR__3353
26200     17 FB 01 F6 | 	mov	result1, local05
26204     0C 00 90 FD | 	jmp	#LR__3356
26208                 | LR__3354
26208     01 2A 06 F1 | 	add	local03, #1
2620c     90 FF 9F FD | 	jmp	#LR__3352
26210                 | LR__3355
26210     13 FB 01 F6 | 	mov	result1, local01
26214                 | LR__3356
26214     A7 F0 03 F6 | 	mov	ptra, fp
26218     B2 00 A0 FD | 	call	#popregs_
2621c                 | __system__LTrim_S_ret
2621c     2D 00 64 FD | 	ret
26220                 | 
26220                 | __system__RTrim_S
26220     04 4A 05 F6 | 	mov	COUNT_, #4
26224     A8 00 A0 FD | 	call	#pushregs_
26228     09 27 02 F6 | 	mov	local01, arg01
2622c     09 29 02 F6 | 	mov	local02, arg01
26230     97 06 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
26234                 | LR__3360
26234     14 FB C9 FA | 	rdbyte	result1, local02 wz
26238     01 28 06 51 |  if_ne	add	local02, #1
2623c     F4 FF 9F 5D |  if_ne	jmp	#LR__3360
26240                 | LR__3361
26240     09 29 82 F1 | 	sub	local02, arg01
26244     14 FB 01 F6 | 	mov	result1, local02
26248     FD 28 0A F6 | 	mov	local02, result1 wz
2624c     9C 01 00 AF 
26250     30 FA 05 A6 |  if_e	mov	result1, ##@LR__5239
26254     74 00 90 AD |  if_e	jmp	#LR__3365
26258     14 2B 02 F6 | 	mov	local03, local02
2625c     01 2A 86 F1 | 	sub	local03, #1
26260                 | LR__3362
26260     15 15 02 F6 | 	mov	arg02, local03
26264     13 15 02 F1 | 	add	arg02, local01
26268     0A 29 C2 FA | 	rdbyte	local02, arg02
2626c     20 28 0E F2 | 	cmp	local02, #32 wz
26270     44 00 90 AD |  if_e	jmp	#LR__3364
26274     15 13 02 F6 | 	mov	arg01, local03
26278     02 12 06 F1 | 	add	arg01, #2
2627c     34 1C B0 FD | 	call	#__system___gc_alloc_managed
26280     FD 2C 0A F6 | 	mov	local04, result1 wz
26284     28 00 90 AD |  if_e	jmp	#LR__3363
26288     15 17 02 F6 | 	mov	arg03, local03
2628c     01 16 06 F1 | 	add	arg03, #1
26290     16 13 02 F6 | 	mov	arg01, local04
26294     13 15 02 F6 | 	mov	arg02, local01
26298     98 D9 BF FD | 	call	#__system____builtin_memmove
2629c     01 2A 06 F1 | 	add	local03, #1
262a0     16 2B 02 F1 | 	add	local03, local04
262a4     15 01 48 FC | 	wrbyte	#0, local03
262a8     16 FB 01 F6 | 	mov	result1, local04
262ac     1C 00 90 FD | 	jmp	#LR__3365
262b0                 | LR__3363
262b0     16 FB 01 F6 | 	mov	result1, local04
262b4     14 00 90 FD | 	jmp	#LR__3365
262b8                 | LR__3364
262b8     01 2A 86 F1 | 	sub	local03, #1
262bc     00 2A 56 F2 | 	cmps	local03, #0 wc
262c0     9C FF 9F 3D |  if_ae	jmp	#LR__3362
262c4     9C 01 00 FF 
262c8     31 FA 05 F6 | 	mov	result1, ##@LR__5240
262cc                 | LR__3365
262cc     A7 F0 03 F6 | 	mov	ptra, fp
262d0     B2 00 A0 FD | 	call	#popregs_
262d4                 | __system__RTrim_S_ret
262d4     2D 00 64 FD | 	ret
262d8                 | 
262d8                 | __system__Instr
262d8     07 4A 05 F6 | 	mov	COUNT_, #7
262dc     A8 00 A0 FD | 	call	#pushregs_
262e0     09 27 02 F6 | 	mov	local01, arg01
262e4     0A 29 02 F6 | 	mov	local02, arg02
262e8     0B 2B 02 F6 | 	mov	local03, arg03
262ec     15 13 02 F6 | 	mov	arg01, local03
262f0     09 2D 02 F6 | 	mov	local04, arg01
262f4     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
262f8                 | LR__3370
262f8     16 FB C9 FA | 	rdbyte	result1, local04 wz
262fc     01 2C 06 51 |  if_ne	add	local04, #1
26300     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
26304                 | LR__3371
26304     09 2D 82 F1 | 	sub	local04, arg01
26308     16 2F 02 F6 | 	mov	local05, local04
2630c     14 13 02 F6 | 	mov	arg01, local02
26310     09 2D 02 F6 | 	mov	local04, arg01
26314     97 06 48 FB | 	callpa	#(@LR__3373-@LR__3372)>>2,fcache_load_ptr_
26318                 | LR__3372
26318     16 FB C9 FA | 	rdbyte	result1, local04 wz
2631c     01 2C 06 51 |  if_ne	add	local04, #1
26320     F4 FF 9F 5D |  if_ne	jmp	#LR__3372
26324                 | LR__3373
26324     09 2D 82 F1 | 	sub	local04, arg01
26328     16 FB 01 F6 | 	mov	result1, local04
2632c     FD 18 0A F6 | 	mov	arg04, result1 wz
26330     00 FA 05 A6 |  if_e	mov	result1, #0
26334     98 00 90 AD |  if_e	jmp	#LR__3377
26338     00 2E 0E F2 | 	cmp	local05, #0 wz
2633c     00 FA 05 A6 |  if_e	mov	result1, #0
26340     8C 00 90 AD |  if_e	jmp	#LR__3377
26344     0C 27 5A F2 | 	cmps	local01, arg04 wcz
26348     00 FA 05 16 |  if_a	mov	result1, #0
2634c     80 00 90 1D |  if_a	jmp	#LR__3377
26350     01 26 56 F2 | 	cmps	local01, #1 wc
26354     01 26 06 C6 |  if_b	mov	local01, #1
26358     15 31 C2 FA | 	rdbyte	local06, local03
2635c     01 2E 0E F2 | 	cmp	local05, #1 wz
26360     18 00 90 5D |  if_ne	jmp	#LR__3374
26364     14 13 02 F6 | 	mov	arg01, local02
26368     18 15 02 F6 | 	mov	arg02, local06
2636c     13 17 02 F6 | 	mov	arg03, local01
26370     00 18 06 F6 | 	mov	arg04, #0
26374     14 37 B0 FD | 	call	#__system____ScanForChar
26378     54 00 90 FD | 	jmp	#LR__3377
2637c                 | LR__3374
2637c     13 33 02 F6 | 	mov	local07, local01
26380                 | LR__3375
26380     14 13 02 F6 | 	mov	arg01, local02
26384     18 15 02 F6 | 	mov	arg02, local06
26388     19 17 02 F6 | 	mov	arg03, local07
2638c     00 18 06 F6 | 	mov	arg04, #0
26390     F8 36 B0 FD | 	call	#__system____ScanForChar
26394     FD 32 0A F6 | 	mov	local07, result1 wz
26398     30 00 90 AD |  if_e	jmp	#LR__3376
2639c     17 17 02 F6 | 	mov	arg03, local05
263a0     14 13 02 F6 | 	mov	arg01, local02
263a4     19 15 02 F6 | 	mov	arg02, local07
263a8     FC FA BF FD | 	call	#__system__Mid_S
263ac     FD 12 02 F6 | 	mov	arg01, result1
263b0     15 15 02 F6 | 	mov	arg02, local03
263b4     84 D9 BF FD | 	call	#__system___string_cmp
263b8     00 FA 0D F2 | 	cmp	result1, #0 wz
263bc     19 FB 01 A6 |  if_e	mov	result1, local07
263c0     0C 00 90 AD |  if_e	jmp	#LR__3377
263c4     17 33 02 F1 | 	add	local07, local05
263c8     B4 FF 9F FD | 	jmp	#LR__3375
263cc                 | LR__3376
263cc     00 FA 05 F6 | 	mov	result1, #0
263d0                 | LR__3377
263d0     A7 F0 03 F6 | 	mov	ptra, fp
263d4     B2 00 A0 FD | 	call	#popregs_
263d8                 | __system__Instr_ret
263d8     2D 00 64 FD | 	ret
263dc                 | 
263dc                 | __system__InstrRev
263dc     07 4A 05 F6 | 	mov	COUNT_, #7
263e0     A8 00 A0 FD | 	call	#pushregs_
263e4     09 27 02 F6 | 	mov	local01, arg01
263e8     0A 29 02 F6 | 	mov	local02, arg02
263ec     0B 2B 02 F6 | 	mov	local03, arg03
263f0     15 13 02 F6 | 	mov	arg01, local03
263f4     09 2D 02 F6 | 	mov	local04, arg01
263f8     97 06 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
263fc                 | LR__3380
263fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
26400     01 2C 06 51 |  if_ne	add	local04, #1
26404     F4 FF 9F 5D |  if_ne	jmp	#LR__3380
26408                 | LR__3381
26408     09 2D 82 F1 | 	sub	local04, arg01
2640c     16 2F 02 F6 | 	mov	local05, local04
26410     14 13 02 F6 | 	mov	arg01, local02
26414     09 2D 02 F6 | 	mov	local04, arg01
26418     97 06 48 FB | 	callpa	#(@LR__3383-@LR__3382)>>2,fcache_load_ptr_
2641c                 | LR__3382
2641c     16 FB C9 FA | 	rdbyte	result1, local04 wz
26420     01 2C 06 51 |  if_ne	add	local04, #1
26424     F4 FF 9F 5D |  if_ne	jmp	#LR__3382
26428                 | LR__3383
26428     09 2D 82 F1 | 	sub	local04, arg01
2642c     16 FB 01 F6 | 	mov	result1, local04
26430     FD 18 0A F6 | 	mov	arg04, result1 wz
26434     00 FA 05 A6 |  if_e	mov	result1, #0
26438     98 00 90 AD |  if_e	jmp	#LR__3387
2643c     00 2E 0E F2 | 	cmp	local05, #0 wz
26440     00 FA 05 A6 |  if_e	mov	result1, #0
26444     8C 00 90 AD |  if_e	jmp	#LR__3387
26448     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2644c     0C 27 02 16 |  if_a	mov	local01, arg04
26450     01 26 56 F2 | 	cmps	local01, #1 wc
26454     01 26 06 C6 |  if_b	mov	local01, #1
26458     15 31 C2 FA | 	rdbyte	local06, local03
2645c     01 2E 0E F2 | 	cmp	local05, #1 wz
26460     18 00 90 5D |  if_ne	jmp	#LR__3384
26464     14 13 02 F6 | 	mov	arg01, local02
26468     18 15 02 F6 | 	mov	arg02, local06
2646c     13 17 02 F6 | 	mov	arg03, local01
26470     01 18 06 F6 | 	mov	arg04, #1
26474     14 36 B0 FD | 	call	#__system____ScanForChar
26478     58 00 90 FD | 	jmp	#LR__3387
2647c                 | LR__3384
2647c     17 33 02 F6 | 	mov	local07, local05
26480     01 32 86 F1 | 	sub	local07, #1
26484                 | LR__3385
26484     14 13 02 F6 | 	mov	arg01, local02
26488     18 15 02 F6 | 	mov	arg02, local06
2648c     19 17 02 F6 | 	mov	arg03, local07
26490     01 18 06 F6 | 	mov	arg04, #1
26494     F4 35 B0 FD | 	call	#__system____ScanForChar
26498     FD 32 0A F6 | 	mov	local07, result1 wz
2649c     30 00 90 AD |  if_e	jmp	#LR__3386
264a0     17 17 02 F6 | 	mov	arg03, local05
264a4     14 13 02 F6 | 	mov	arg01, local02
264a8     19 15 02 F6 | 	mov	arg02, local07
264ac     F8 F9 BF FD | 	call	#__system__Mid_S
264b0     FD 12 02 F6 | 	mov	arg01, result1
264b4     15 15 02 F6 | 	mov	arg02, local03
264b8     80 D8 BF FD | 	call	#__system___string_cmp
264bc     00 FA 0D F2 | 	cmp	result1, #0 wz
264c0     19 FB 01 A6 |  if_e	mov	result1, local07
264c4     0C 00 90 AD |  if_e	jmp	#LR__3387
264c8     17 33 82 F1 | 	sub	local07, local05
264cc     B4 FF 9F FD | 	jmp	#LR__3385
264d0                 | LR__3386
264d0     00 FA 05 F6 | 	mov	result1, #0
264d4                 | LR__3387
264d4     A7 F0 03 F6 | 	mov	ptra, fp
264d8     B2 00 A0 FD | 	call	#popregs_
264dc                 | __system__InstrRev_ret
264dc     2D 00 64 FD | 	ret
264e0                 | 
264e0                 | __system___remove
264e0     06 4A 05 F6 | 	mov	COUNT_, #6
264e4     A8 00 A0 FD | 	call	#pushregs_
264e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
264ec     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
264f0     09 15 02 F6 | 	mov	arg02, arg01
264f4     13 13 02 F6 | 	mov	arg01, local01
264f8     00 16 06 F6 | 	mov	arg03, #0
264fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26500     A8 DF BF FD | 	call	#__system____getvfsforfile
26504     FD 28 0A F6 | 	mov	local02, result1 wz
26508     10 00 90 AD |  if_e	jmp	#LR__3390
2650c     20 28 06 F1 | 	add	local02, #32
26510     14 13 0A FB | 	rdlong	arg01, local02 wz
26514     20 28 86 F1 | 	sub	local02, #32
26518     14 00 90 5D |  if_ne	jmp	#LR__3391
2651c                 | LR__3390
2651c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26520     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26524     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26528     01 FA 65 F6 | 	neg	result1, #1
2652c     A8 00 90 FD | 	jmp	#LR__3394
26530                 | LR__3391
26530     40 28 06 F1 | 	add	local02, #64
26534     14 2B 02 FB | 	rdlong	local03, local02
26538     15 2D 02 F6 | 	mov	local04, local03
2653c     40 28 86 F1 | 	sub	local02, #64
26540     13 2C 46 F7 | 	zerox	local04, #19
26544     14 2A 46 F0 | 	shr	local03, #20
26548     02 2A 66 F0 | 	shl	local03, #2
2654c     ED 2A 02 F1 | 	add	local03, __methods__
26550     15 2B 02 FB | 	rdlong	local03, local03
26554     13 13 02 F6 | 	mov	arg01, local01
26558     F2 2E 02 F6 | 	mov	local05, objptr
2655c     16 E5 01 F6 | 	mov	objptr, local04
26560     2D 2A 62 FD | 	call	local03
26564     17 E5 01 F6 | 	mov	objptr, local05
26568     FD 30 02 F6 | 	mov	local06, result1
2656c     FF FF 7F FF 
26570     F2 31 0E F2 | 	cmp	local06, ##-14 wz
26574     38 00 90 5D |  if_ne	jmp	#LR__3392
26578     3C 28 06 F1 | 	add	local02, #60
2657c     14 31 02 FB | 	rdlong	local06, local02
26580     18 2B 02 F6 | 	mov	local03, local06
26584     13 30 46 F7 | 	zerox	local06, #19
26588     14 2A 46 F0 | 	shr	local03, #20
2658c     02 2A 66 F0 | 	shl	local03, #2
26590     ED 2A 02 F1 | 	add	local03, __methods__
26594     15 2B 02 FB | 	rdlong	local03, local03
26598     13 13 02 F6 | 	mov	arg01, local01
2659c     F2 2E 02 F6 | 	mov	local05, objptr
265a0     18 E5 01 F6 | 	mov	objptr, local06
265a4     2D 2A 62 FD | 	call	local03
265a8     17 E5 01 F6 | 	mov	objptr, local05
265ac     FD 30 02 F6 | 	mov	local06, result1
265b0                 | LR__3392
265b0     00 30 0E F2 | 	cmp	local06, #0 wz
265b4     1C 00 90 AD |  if_e	jmp	#LR__3393
265b8     18 13 6A F6 | 	neg	arg01, local06 wz
265bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
265c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
265c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
265c8     01 FA 65 56 |  if_ne	neg	result1, #1
265cc     00 FA 05 A6 |  if_e	mov	result1, #0
265d0     04 00 90 FD | 	jmp	#LR__3394
265d4                 | LR__3393
265d4     00 FA 05 F6 | 	mov	result1, #0
265d8                 | LR__3394
265d8     A7 F0 03 F6 | 	mov	ptra, fp
265dc     B2 00 A0 FD | 	call	#popregs_
265e0                 | __system___remove_ret
265e0     2D 00 64 FD | 	ret
265e4                 | 
265e4                 | __system___mkdir
265e4     05 4A 05 F6 | 	mov	COUNT_, #5
265e8     A8 00 A0 FD | 	call	#pushregs_
265ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
265f0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
265f4     09 15 02 F6 | 	mov	arg02, arg01
265f8     13 13 02 F6 | 	mov	arg01, local01
265fc     00 16 06 F6 | 	mov	arg03, #0
26600     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26604     A4 DE BF FD | 	call	#__system____getvfsforfile
26608     FD 28 0A F6 | 	mov	local02, result1 wz
2660c     10 00 90 AD |  if_e	jmp	#LR__3400
26610     20 28 06 F1 | 	add	local02, #32
26614     14 15 0A FB | 	rdlong	arg02, local02 wz
26618     20 28 86 F1 | 	sub	local02, #32
2661c     14 00 90 5D |  if_ne	jmp	#LR__3401
26620                 | LR__3400
26620     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26624     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2662c     01 FA 65 F6 | 	neg	result1, #1
26630     60 00 90 FD | 	jmp	#LR__3403
26634                 | LR__3401
26634     38 28 06 F1 | 	add	local02, #56
26638     14 2B 02 FB | 	rdlong	local03, local02
2663c     15 2D 02 F6 | 	mov	local04, local03
26640     13 2A 46 F7 | 	zerox	local03, #19
26644     14 2C 46 F0 | 	shr	local04, #20
26648     02 2C 66 F0 | 	shl	local04, #2
2664c     ED 2C 02 F1 | 	add	local04, __methods__
26650     16 2D 02 FB | 	rdlong	local04, local04
26654     13 13 02 F6 | 	mov	arg01, local01
26658     FF 15 06 F6 | 	mov	arg02, #511
2665c     F2 2E 02 F6 | 	mov	local05, objptr
26660     15 E5 01 F6 | 	mov	objptr, local03
26664     2D 2C 62 FD | 	call	local04
26668     17 E5 01 F6 | 	mov	objptr, local05
2666c     FD 12 0A F6 | 	mov	arg01, result1 wz
26670     1C 00 90 AD |  if_e	jmp	#LR__3402
26674     09 13 6A F6 | 	neg	arg01, arg01 wz
26678     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2667c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26680     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26684     01 FA 65 56 |  if_ne	neg	result1, #1
26688     00 FA 05 A6 |  if_e	mov	result1, #0
2668c     04 00 90 FD | 	jmp	#LR__3403
26690                 | LR__3402
26690     00 FA 05 F6 | 	mov	result1, #0
26694                 | LR__3403
26694     A7 F0 03 F6 | 	mov	ptra, fp
26698     B2 00 A0 FD | 	call	#popregs_
2669c                 | __system___mkdir_ret
2669c     2D 00 64 FD | 	ret
266a0                 | 
266a0                 | __system___strerror
266a0     00 12 56 F2 | 	cmps	arg01, #0 wc
266a4     08 00 90 CD |  if_b	jmp	#LR__3410
266a8     1A 12 56 F2 | 	cmps	arg01, #26 wc
266ac     04 00 90 CD |  if_b	jmp	#LR__3411
266b0                 | LR__3410
266b0     19 12 06 F6 | 	mov	arg01, #25
266b4                 | LR__3411
266b4     02 12 66 F0 | 	shl	arg01, #2
266b8     01 00 00 FF 
266bc     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
266c0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
266c4     09 FB 01 FB | 	rdlong	result1, arg01
266c8     01 00 00 FF 
266cc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
266d0                 | __system___strerror_ret
266d0     2D 00 64 FD | 	ret
266d4                 | 
266d4                 | __system___int64_shl
266d4     20 16 CE F7 | 	test	arg03, #32 wz
266d8     09 15 02 56 |  if_ne	mov	arg02, arg01
266dc     00 12 06 56 |  if_ne	mov	arg01, #0
266e0     1F 16 CE F7 | 	test	arg03, #31 wz
266e4     18 00 90 AD |  if_e	jmp	#LR__3420
266e8     0B 15 62 F0 | 	shl	arg02, arg03
266ec     09 FB 01 F6 | 	mov	result1, arg01
266f0     0B FD 61 F6 | 	neg	result2, arg03
266f4     FE FA 41 F0 | 	shr	result1, result2
266f8     FD 14 42 F5 | 	or	arg02, result1
266fc     0B 13 62 F0 | 	shl	arg01, arg03
26700                 | LR__3420
26700     0A FD 01 F6 | 	mov	result2, arg02
26704     09 FB 01 F6 | 	mov	result1, arg01
26708                 | __system___int64_shl_ret
26708     2D 00 64 FD | 	ret
2670c                 | 
2670c                 | __system___usepins
2670c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26710     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26714     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
26718     00 13 CA F7 | 	test	arg01, _var01 wz
2671c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
26720     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
26724     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
26728     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2672c     00 FA 05 56 |  if_ne	mov	result1, #0
26730     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
26734     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26738     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2673c     09 03 42 F5 | 	or	_var02, arg01
26740     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26744     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26748     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2674c     0A 03 42 F5 | 	or	_var02, arg02
26750     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
26754     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
26758     01 FA 65 F6 | 	neg	result1, #1
2675c                 | __system___usepins_ret
2675c     2D 00 64 FD | 	ret
26760                 | 
26760                 | __system___freepins
26760     14 E6 05 F1 | 	add	ptr___system__dat__, #20
26764     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26768     09 01 22 F5 | 	andn	_var01, arg01
2676c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
26770     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26774     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
26778     0A 01 22 F5 | 	andn	_var01, arg02
2677c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
26780     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
26784                 | __system___freepins_ret
26784     2D 00 64 FD | 	ret
26788                 | 
26788                 | __system___float_fromuns
26788     09 17 0A F6 | 	mov	arg03, arg01 wz
2678c     0B FB 01 A6 |  if_e	mov	result1, arg03
26790     24 00 90 AD |  if_e	jmp	#LR__3430
26794     0B 15 92 F7 | 	encod	arg02, arg03 wc
26798     01 14 06 C1 |  if_b	add	arg02, #1
2679c     01 14 86 F1 | 	sub	arg02, #1
267a0     1F 12 06 F6 | 	mov	arg01, #31
267a4     0A 13 82 F1 | 	sub	arg01, arg02
267a8     09 17 62 F0 | 	shl	arg03, arg01
267ac     02 16 46 F0 | 	shr	arg03, #2
267b0     00 12 06 F6 | 	mov	arg01, #0
267b4     4C 09 B0 FD | 	call	#__system___float_Pack
267b8                 | LR__3430
267b8                 | __system___float_fromuns_ret
267b8     2D 00 64 FD | 	ret
267bc                 | 
267bc                 | __system___float_add
267bc     0F 4A 05 F6 | 	mov	COUNT_, #15
267c0     A8 00 A0 FD | 	call	#pushregs_
267c4     09 27 02 F6 | 	mov	local01, arg01
267c8     0A 29 02 F6 | 	mov	local02, arg02
267cc     00 2A 06 F6 | 	mov	local03, #0
267d0     13 2D 02 F6 | 	mov	local04, local01
267d4     16 2F 02 F6 | 	mov	local05, local04
267d8     16 2E 46 F7 | 	zerox	local05, #22
267dc     16 31 02 F6 | 	mov	local06, local04
267e0     01 30 66 F0 | 	shl	local06, #1
267e4     18 30 46 F0 | 	shr	local06, #24
267e8     1F 2C 46 F0 | 	shr	local04, #31
267ec     14 13 02 F6 | 	mov	arg01, local02
267f0     09 FB 01 F6 | 	mov	result1, arg01
267f4     FD 32 02 F6 | 	mov	local07, result1
267f8     19 35 02 F6 | 	mov	local08, local07
267fc     16 34 46 F7 | 	zerox	local08, #22
26800     19 37 02 F6 | 	mov	local09, local07
26804     01 36 66 F0 | 	shl	local09, #1
26808     18 36 46 F0 | 	shr	local09, #24
2680c     1B 39 02 F6 | 	mov	local10, local09
26810     1F 32 46 F0 | 	shr	local07, #31
26814     00 3A 06 F6 | 	mov	local11, #0
26818     00 3C 06 F6 | 	mov	local12, #0
2681c     1C 31 12 F2 | 	cmp	local06, local10 wc
26820     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
26824     2C 00 90 1D |  if_a	jmp	#LR__3440
26828     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2682c     24 00 90 3D |  if_ae	jmp	#LR__3440
26830     17 3F 02 F6 | 	mov	local13, local05
26834     1A 2F 02 F6 | 	mov	local05, local08
26838     1F 35 02 F6 | 	mov	local08, local13
2683c     18 3F 02 F6 | 	mov	local13, local06
26840     1C 31 02 F6 | 	mov	local06, local10
26844     1F 39 02 F6 | 	mov	local10, local13
26848     16 3F 02 F6 | 	mov	local13, local04
2684c     19 2D 02 F6 | 	mov	local04, local07
26850     1F 33 02 F6 | 	mov	local07, local13
26854                 | LR__3440
26854     FF 30 0E F2 | 	cmp	local06, #255 wz
26858     70 01 90 AD |  if_e	jmp	#LR__3455
2685c     00 30 0E F2 | 	cmp	local06, #0 wz
26860     AC 01 90 AD |  if_e	jmp	#LR__3457
26864     17 2E 26 F4 | 	bith	local05, #23
26868                 | LR__3441
26868     00 38 0E F2 | 	cmp	local10, #0 wz
2686c     F0 01 90 AD |  if_e	jmp	#LR__3461
26870     17 34 26 F4 | 	bith	local08, #23
26874                 | LR__3442
26874     7F 30 86 F1 | 	sub	local06, #127
26878     7F 38 86 F1 | 	sub	local10, #127
2687c     18 41 02 F6 | 	mov	local14, local06
26880     1C 41 82 F1 | 	sub	local14, local10
26884     97 14 48 FB | 	callpa	#(@LR__3444-@LR__3443)>>2,fcache_load_ptr_
26888                 | LR__3443
26888     20 40 56 F2 | 	cmps	local14, #32 wc
2688c     20 00 90 CD |  if_b	jmp	#LR__3445
26890     1A 37 02 F6 | 	mov	local09, local08
26894     00 3A 0E F2 | 	cmp	local11, #0 wz
26898     6F 3A 62 FD | 	wrnz	local11
2689c     1D 37 42 F5 | 	or	local09, local11
268a0     1B 3B 02 F6 | 	mov	local11, local09
268a4     00 34 06 F6 | 	mov	local08, #0
268a8     20 40 86 F1 | 	sub	local14, #32
268ac     D8 FF 9F FD | 	jmp	#LR__3443
268b0                 | LR__3444
268b0                 | LR__3445
268b0     00 40 0E F2 | 	cmp	local14, #0 wz
268b4     38 00 90 AD |  if_e	jmp	#LR__3446
268b8     1A 3F 02 F6 | 	mov	local13, local08
268bc     20 38 06 F6 | 	mov	local10, #32
268c0     20 39 82 F1 | 	sub	local10, local14
268c4     1C 3F 62 F0 | 	shl	local13, local10
268c8     1D 39 02 F6 | 	mov	local10, local11
268cc     20 36 06 F6 | 	mov	local09, #32
268d0     20 37 82 F1 | 	sub	local09, local14
268d4     1B 39 6A F0 | 	shl	local10, local09 wz
268d8     20 3B 42 F0 | 	shr	local11, local14
268dc     20 35 42 F0 | 	shr	local08, local14
268e0     1F 3B 42 F5 | 	or	local11, local13
268e4     00 42 06 F6 | 	mov	local15, #0
268e8     01 42 06 56 |  if_ne	mov	local15, #1
268ec     21 3B 42 F5 | 	or	local11, local15
268f0                 | LR__3446
268f0     16 43 02 F6 | 	mov	local15, local04
268f4     19 43 62 F5 | 	xor	local15, local07
268f8     01 42 CE F7 | 	test	local15, #1 wz
268fc     18 00 90 AD |  if_e	jmp	#LR__3447
26900     1A 35 22 F6 | 	not	local08, local08
26904     1D 3B 22 F6 | 	not	local11, local11
26908     01 3A 0E F1 | 	add	local11, #1 wz
2690c     00 42 06 F6 | 	mov	local15, #0
26910     01 42 06 A6 |  if_e	mov	local15, #1
26914     21 35 02 F1 | 	add	local08, local15
26918                 | LR__3447
26918     1D 3D 12 F1 | 	add	local12, local11 wc
2691c     1A 2F 22 F1 | 	addx	local05, local08
26920     00 2E 56 F2 | 	cmps	local05, #0 wc
26924     1C 00 90 3D |  if_ae	jmp	#LR__3448
26928     01 2C 66 F5 | 	xor	local04, #1
2692c     17 2F 22 F6 | 	not	local05, local05
26930     1E 3D 22 F6 | 	not	local12, local12
26934     01 3C 0E F1 | 	add	local12, #1 wz
26938     00 42 06 F6 | 	mov	local15, #0
2693c     01 42 06 A6 |  if_e	mov	local15, #1
26940     21 2F 02 F1 | 	add	local05, local15
26944                 | LR__3448
26944     00 80 00 FF 
26948     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2694c     28 00 90 CD |  if_b	jmp	#LR__3449
26950     01 30 06 F1 | 	add	local06, #1
26954     1E 41 02 F6 | 	mov	local14, local12
26958     01 40 06 F5 | 	and	local14, #1
2695c     01 3C 46 F0 | 	shr	local12, #1
26960     17 43 02 F6 | 	mov	local15, local05
26964     1F 42 66 F0 | 	shl	local15, #31
26968     21 3D 42 F5 | 	or	local12, local15
2696c     20 3D 42 F5 | 	or	local12, local14
26970     01 2E 46 F0 | 	shr	local05, #1
26974     3C 00 90 FD | 	jmp	#LR__3454
26978                 | LR__3449
26978     00 40 00 FF 
2697c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26980     30 00 90 3D |  if_ae	jmp	#LR__3453
26984     00 2E 0E F2 | 	cmp	local05, #0 wz
26988     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
2698c     08 2C 46 A5 |  if_e	or	local04, #8
26990     01 2C 26 A5 |  if_e	andn	local04, #1
26994     1C 00 90 AD |  if_e	jmp	#LR__3452
26998                 | LR__3450
26998     00 40 00 FF 
2699c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
269a0     10 00 90 3D |  if_ae	jmp	#LR__3451
269a4     1E 3D 12 F1 | 	add	local12, local12 wc
269a8     17 2F 22 F1 | 	addx	local05, local05
269ac     01 30 86 F1 | 	sub	local06, #1
269b0     E4 FF 9F FD | 	jmp	#LR__3450
269b4                 | LR__3451
269b4                 | LR__3452
269b4                 | LR__3453
269b4                 | LR__3454
269b4     17 13 02 F6 | 	mov	arg01, local05
269b8     1E 15 02 F6 | 	mov	arg02, local12
269bc     18 17 02 F6 | 	mov	arg03, local06
269c0     16 19 02 F6 | 	mov	arg04, local04
269c4     08 35 B0 FD | 	call	#__system__pack_0645
269c8     DC 00 90 FD | 	jmp	#LR__3465
269cc                 | LR__3455
269cc     FF 38 0E F2 | 	cmp	local10, #255 wz
269d0     10 00 90 5D |  if_ne	jmp	#LR__3456
269d4     16 33 0A F2 | 	cmp	local07, local04 wz
269d8     00 F8 3F 5F 
269dc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
269e0     C4 00 90 5D |  if_ne	jmp	#LR__3465
269e4                 | LR__3456
269e4     00 2E 0E F2 | 	cmp	local05, #0 wz
269e8     00 F8 3F 5F 
269ec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
269f0     B4 00 90 5D |  if_ne	jmp	#LR__3465
269f4     1E 15 02 F6 | 	mov	arg02, local12
269f8     18 17 02 F6 | 	mov	arg03, local06
269fc     16 19 02 F6 | 	mov	arg04, local04
26a00     02 18 46 F5 | 	or	arg04, #2
26a04     17 13 02 F6 | 	mov	arg01, local05
26a08     C4 34 B0 FD | 	call	#__system__pack_0645
26a0c     98 00 90 FD | 	jmp	#LR__3465
26a10                 | LR__3457
26a10     00 2E 0E F2 | 	cmp	local05, #0 wz
26a14     28 00 90 AD |  if_e	jmp	#LR__3460
26a18     01 2E 66 F0 | 	shl	local05, #1
26a1c     97 0E 48 FB | 	callpa	#(@LR__3459-@LR__3458)>>2,fcache_load_ptr_
26a20                 | LR__3458
26a20     00 40 00 FF 
26a24     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
26a28     18 43 02 C6 |  if_b	mov	local15, local06
26a2c     01 42 86 C1 |  if_b	sub	local15, #1
26a30     21 31 02 C6 |  if_b	mov	local06, local15
26a34     01 2E 66 C0 |  if_b	shl	local05, #1
26a38     E4 FF 9F CD |  if_b	jmp	#LR__3458
26a3c                 | LR__3459
26a3c     28 FE 9F FD | 	jmp	#LR__3441
26a40                 | LR__3460
26a40     19 2D 02 F5 | 	and	local04, local07
26a44     16 19 02 F6 | 	mov	arg04, local04
26a48     08 18 46 F5 | 	or	arg04, #8
26a4c     00 12 06 F6 | 	mov	arg01, #0
26a50     00 14 06 F6 | 	mov	arg02, #0
26a54     00 16 06 F6 | 	mov	arg03, #0
26a58     74 34 B0 FD | 	call	#__system__pack_0645
26a5c     48 00 90 FD | 	jmp	#LR__3465
26a60                 | LR__3461
26a60     00 34 0E F2 | 	cmp	local08, #0 wz
26a64     28 00 90 AD |  if_e	jmp	#LR__3464
26a68     01 34 66 F0 | 	shl	local08, #1
26a6c     97 0E 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
26a70                 | LR__3462
26a70     00 40 00 FF 
26a74     00 34 16 F2 | 	cmp	local08, ##8388608 wc
26a78     1C 43 02 C6 |  if_b	mov	local15, local10
26a7c     01 42 86 C1 |  if_b	sub	local15, #1
26a80     21 39 02 C6 |  if_b	mov	local10, local15
26a84     01 34 66 C0 |  if_b	shl	local08, #1
26a88     E4 FF 9F CD |  if_b	jmp	#LR__3462
26a8c                 | LR__3463
26a8c     E4 FD 9F FD | 	jmp	#LR__3442
26a90                 | LR__3464
26a90     7F 30 86 F1 | 	sub	local06, #127
26a94     17 13 02 F6 | 	mov	arg01, local05
26a98     1E 15 02 F6 | 	mov	arg02, local12
26a9c     18 17 02 F6 | 	mov	arg03, local06
26aa0     16 19 02 F6 | 	mov	arg04, local04
26aa4     28 34 B0 FD | 	call	#__system__pack_0645
26aa8                 | LR__3465
26aa8     A7 F0 03 F6 | 	mov	ptra, fp
26aac     B2 00 A0 FD | 	call	#popregs_
26ab0                 | __system___float_add_ret
26ab0     2D 00 64 FD | 	ret
26ab4                 | 
26ab4                 | __system___float_sqrt
26ab4     04 4A 05 F6 | 	mov	COUNT_, #4
26ab8     A8 00 A0 FD | 	call	#pushregs_
26abc     09 27 02 F6 | 	mov	local01, arg01
26ac0     09 FB 01 F6 | 	mov	result1, arg01
26ac4     FD 28 02 F6 | 	mov	local02, result1
26ac8     14 2B 02 F6 | 	mov	local03, local02
26acc     16 2A 46 F7 | 	zerox	local03, #22
26ad0     14 2D 02 F6 | 	mov	local04, local02
26ad4     01 2C 66 F0 | 	shl	local04, #1
26ad8     18 2C 4E F0 | 	shr	local04, #24 wz
26adc     1F 28 46 F0 | 	shr	local02, #31
26ae0     70 00 90 AD |  if_e	jmp	#LR__3471
26ae4     17 2A 26 F4 | 	bith	local03, #23
26ae8                 | LR__3470
26ae8     00 28 0E F2 | 	cmp	local02, #0 wz
26aec     00 F8 3F 5F 
26af0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
26af4     88 00 90 5D |  if_ne	jmp	#LR__3474
26af8     FF 2C 0E F2 | 	cmp	local04, #255 wz
26afc     13 FB 01 A6 |  if_e	mov	result1, local01
26b00     7C 00 90 AD |  if_e	jmp	#LR__3474
26b04     7F 2C 86 F1 | 	sub	local04, #127
26b08     01 2C CE F7 | 	test	local04, #1 wz
26b0c     01 2A 66 50 |  if_ne	shl	local03, #1
26b10     05 2A 66 F0 | 	shl	local03, #5
26b14     15 01 38 FD | 	qsqrt	#0, local03
26b18     01 2C 86 51 |  if_ne	sub	local04, #1
26b1c     16 2D 52 F6 | 	abs	local04, local04 wc
26b20     01 2C 46 F0 | 	shr	local04, #1
26b24     16 17 82 F6 | 	negc	arg03, local04
26b28     14 19 02 F6 | 	mov	arg04, local02
26b2c     18 12 62 FD | 	getqx	arg01
26b30     09 15 02 F6 | 	mov	arg02, arg01
26b34     19 14 66 F0 | 	shl	arg02, #25
26b38     07 12 46 F0 | 	shr	arg01, #7
26b3c     00 80 00 FF 
26b40     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
26b44     01 16 06 31 |  if_ae	add	arg03, #1
26b48     01 12 46 30 |  if_ae	shr	arg01, #1
26b4c     80 33 B0 FD | 	call	#__system__pack_0645
26b50     2C 00 90 FD | 	jmp	#LR__3474
26b54                 | LR__3471
26b54     00 2A 0E F2 | 	cmp	local03, #0 wz
26b58     13 FB 01 A6 |  if_e	mov	result1, local01
26b5c     20 00 90 AD |  if_e	jmp	#LR__3474
26b60     01 2A 66 F0 | 	shl	local03, #1
26b64     97 0A 48 FB | 	callpa	#(@LR__3473-@LR__3472)>>2,fcache_load_ptr_
26b68                 | LR__3472
26b68     00 40 00 FF 
26b6c     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
26b70     01 2C 86 C1 |  if_b	sub	local04, #1
26b74     01 2A 66 C0 |  if_b	shl	local03, #1
26b78     EC FF 9F CD |  if_b	jmp	#LR__3472
26b7c                 | LR__3473
26b7c     68 FF 9F FD | 	jmp	#LR__3470
26b80                 | LR__3474
26b80     A7 F0 03 F6 | 	mov	ptra, fp
26b84     B2 00 A0 FD | 	call	#popregs_
26b88                 | __system___float_sqrt_ret
26b88     2D 00 64 FD | 	ret
26b8c                 | 
26b8c                 | __system___float_mul
26b8c     0B 4A 05 F6 | 	mov	COUNT_, #11
26b90     A8 00 A0 FD | 	call	#pushregs_
26b94     09 27 02 F6 | 	mov	local01, arg01
26b98     0A 29 02 F6 | 	mov	local02, arg02
26b9c     13 2B 02 F6 | 	mov	local03, local01
26ba0     15 2D 02 F6 | 	mov	local04, local03
26ba4     16 2C 46 F7 | 	zerox	local04, #22
26ba8     15 2F 02 F6 | 	mov	local05, local03
26bac     01 2E 66 F0 | 	shl	local05, #1
26bb0     18 2E 46 F0 | 	shr	local05, #24
26bb4     1F 2A 46 F0 | 	shr	local03, #31
26bb8     14 FB 01 F6 | 	mov	result1, local02
26bbc     FD 30 02 F6 | 	mov	local06, result1
26bc0     18 33 02 F6 | 	mov	local07, local06
26bc4     16 32 46 F7 | 	zerox	local07, #22
26bc8     18 35 02 F6 | 	mov	local08, local06
26bcc     01 34 66 F0 | 	shl	local08, #1
26bd0     18 34 46 F0 | 	shr	local08, #24
26bd4     1F 30 46 F0 | 	shr	local06, #31
26bd8     18 2B 62 F5 | 	xor	local03, local06
26bdc     FF 2E 0E F2 | 	cmp	local05, #255 wz
26be0     90 00 90 AD |  if_e	jmp	#LR__3483
26be4     FF 34 0E F2 | 	cmp	local08, #255 wz
26be8     D8 00 90 AD |  if_e	jmp	#LR__3485
26bec     00 2E 0E F2 | 	cmp	local05, #0 wz
26bf0     0C 01 90 AD |  if_e	jmp	#LR__3486
26bf4     17 2C 26 F4 | 	bith	local04, #23
26bf8                 | LR__3480
26bf8     00 34 0E F2 | 	cmp	local08, #0 wz
26bfc     44 01 90 AD |  if_e	jmp	#LR__3490
26c00     17 32 26 F4 | 	bith	local07, #23
26c04                 | LR__3481
26c04     16 29 02 F6 | 	mov	local02, local04
26c08     04 28 66 F0 | 	shl	local02, #4
26c0c     19 31 02 F6 | 	mov	local06, local07
26c10     05 30 66 F0 | 	shl	local06, #5
26c14     18 29 02 FD | 	qmul	local02, local06
26c18     1A 2F 02 F1 | 	add	local05, local08
26c1c     FE 2E 86 F1 | 	sub	local05, #254
26c20     17 37 02 F6 | 	mov	local09, local05
26c24     04 2C 66 F0 | 	shl	local04, #4
26c28     05 32 66 F0 | 	shl	local07, #5
26c2c     18 38 62 FD | 	getqx	local10
26c30     19 2D 02 FD | 	qmul	local04, local07
26c34     19 3A 62 FD | 	getqy	local11
26c38     00 80 00 FF 
26c3c     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
26c40     18 00 90 CD |  if_b	jmp	#LR__3482
26c44     01 36 06 F1 | 	add	local09, #1
26c48     01 38 46 F0 | 	shr	local10, #1
26c4c     1D 35 02 F6 | 	mov	local08, local11
26c50     1F 34 66 F0 | 	shl	local08, #31
26c54     1A 39 42 F5 | 	or	local10, local08
26c58     01 3A 46 F0 | 	shr	local11, #1
26c5c                 | LR__3482
26c5c     1D 13 02 F6 | 	mov	arg01, local11
26c60     1C 15 02 F6 | 	mov	arg02, local10
26c64     1B 17 02 F6 | 	mov	arg03, local09
26c68     15 19 02 F6 | 	mov	arg04, local03
26c6c     60 32 B0 FD | 	call	#__system__pack_0645
26c70     10 01 90 FD | 	jmp	#LR__3494
26c74                 | LR__3483
26c74     00 2C 0E F2 | 	cmp	local04, #0 wz
26c78     13 FB 01 56 |  if_ne	mov	result1, local01
26c7c     04 01 90 5D |  if_ne	jmp	#LR__3494
26c80     FF 34 56 F2 | 	cmps	local08, #255 wc
26c84     00 34 0E C2 |  if_b	cmp	local08, #0 wz
26c88     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
26c8c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3484
26c90     00 F8 3F CF 
26c94     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
26c98     E8 00 90 CD |  if_b	jmp	#LR__3494
26c9c     00 32 0E F2 | 	cmp	local07, #0 wz
26ca0     14 FB 01 56 |  if_ne	mov	result1, local02
26ca4     DC 00 90 5D |  if_ne	jmp	#LR__3494
26ca8                 | LR__3484
26ca8     02 2A 46 F5 | 	or	local03, #2
26cac     00 12 06 F6 | 	mov	arg01, #0
26cb0     00 14 06 F6 | 	mov	arg02, #0
26cb4     17 17 02 F6 | 	mov	arg03, local05
26cb8     15 19 02 F6 | 	mov	arg04, local03
26cbc     10 32 B0 FD | 	call	#__system__pack_0645
26cc0     C0 00 90 FD | 	jmp	#LR__3494
26cc4                 | LR__3485
26cc4     00 2E 0E F2 | 	cmp	local05, #0 wz
26cc8     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
26ccc     00 F8 3F AF 
26cd0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
26cd4     AC 00 90 AD |  if_e	jmp	#LR__3494
26cd8     00 32 0E F2 | 	cmp	local07, #0 wz
26cdc     14 FB 01 56 |  if_ne	mov	result1, local02
26ce0     A0 00 90 5D |  if_ne	jmp	#LR__3494
26ce4     1A 17 02 F6 | 	mov	arg03, local08
26ce8     15 19 02 F6 | 	mov	arg04, local03
26cec     02 18 46 F5 | 	or	arg04, #2
26cf0     00 12 06 F6 | 	mov	arg01, #0
26cf4     00 14 06 F6 | 	mov	arg02, #0
26cf8     D4 31 B0 FD | 	call	#__system__pack_0645
26cfc     84 00 90 FD | 	jmp	#LR__3494
26d00                 | LR__3486
26d00     00 2C 0E F2 | 	cmp	local04, #0 wz
26d04     20 00 90 AD |  if_e	jmp	#LR__3489
26d08     01 2C 66 F0 | 	shl	local04, #1
26d0c     97 0A 48 FB | 	callpa	#(@LR__3488-@LR__3487)>>2,fcache_load_ptr_
26d10                 | LR__3487
26d10     00 40 00 FF 
26d14     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
26d18     01 2E 86 C1 |  if_b	sub	local05, #1
26d1c     01 2C 66 C0 |  if_b	shl	local04, #1
26d20     EC FF 9F CD |  if_b	jmp	#LR__3487
26d24                 | LR__3488
26d24     D0 FE 9F FD | 	jmp	#LR__3480
26d28                 | LR__3489
26d28     08 2A 46 F5 | 	or	local03, #8
26d2c     00 12 06 F6 | 	mov	arg01, #0
26d30     00 14 06 F6 | 	mov	arg02, #0
26d34     00 16 06 F6 | 	mov	arg03, #0
26d38     15 19 02 F6 | 	mov	arg04, local03
26d3c     90 31 B0 FD | 	call	#__system__pack_0645
26d40     40 00 90 FD | 	jmp	#LR__3494
26d44                 | LR__3490
26d44     00 32 0E F2 | 	cmp	local07, #0 wz
26d48     20 00 90 AD |  if_e	jmp	#LR__3493
26d4c     01 32 66 F0 | 	shl	local07, #1
26d50     97 0A 48 FB | 	callpa	#(@LR__3492-@LR__3491)>>2,fcache_load_ptr_
26d54                 | LR__3491
26d54     00 40 00 FF 
26d58     00 32 16 F2 | 	cmp	local07, ##8388608 wc
26d5c     01 34 86 C1 |  if_b	sub	local08, #1
26d60     01 32 66 C0 |  if_b	shl	local07, #1
26d64     EC FF 9F CD |  if_b	jmp	#LR__3491
26d68                 | LR__3492
26d68     98 FE 9F FD | 	jmp	#LR__3481
26d6c                 | LR__3493
26d6c     08 2A 46 F5 | 	or	local03, #8
26d70     00 12 06 F6 | 	mov	arg01, #0
26d74     00 14 06 F6 | 	mov	arg02, #0
26d78     00 16 06 F6 | 	mov	arg03, #0
26d7c     15 19 02 F6 | 	mov	arg04, local03
26d80     4C 31 B0 FD | 	call	#__system__pack_0645
26d84                 | LR__3494
26d84     A7 F0 03 F6 | 	mov	ptra, fp
26d88     B2 00 A0 FD | 	call	#popregs_
26d8c                 | __system___float_mul_ret
26d8c     2D 00 64 FD | 	ret
26d90                 | 
26d90                 | __system___float_div
26d90     0E 4A 05 F6 | 	mov	COUNT_, #14
26d94     A8 00 A0 FD | 	call	#pushregs_
26d98     09 2B 02 F6 | 	mov	local03, arg01
26d9c     0A 2D 02 F6 | 	mov	local04, arg02
26da0     15 2F 02 F6 | 	mov	local05, local03
26da4     17 31 02 F6 | 	mov	local06, local05
26da8     16 30 46 F7 | 	zerox	local06, #22
26dac     17 33 02 F6 | 	mov	local07, local05
26db0     01 32 66 F0 | 	shl	local07, #1
26db4     18 32 46 F0 | 	shr	local07, #24
26db8     1F 2E 46 F0 | 	shr	local05, #31
26dbc     16 FB 01 F6 | 	mov	result1, local04
26dc0     FD 34 02 F6 | 	mov	local08, result1
26dc4     1A 37 02 F6 | 	mov	local09, local08
26dc8     16 36 46 F7 | 	zerox	local09, #22
26dcc     1A 39 02 F6 | 	mov	local10, local08
26dd0     01 38 66 F0 | 	shl	local10, #1
26dd4     18 38 46 F0 | 	shr	local10, #24
26dd8     1F 34 46 F0 | 	shr	local08, #31
26ddc     1A 2F 62 F5 | 	xor	local05, local08
26de0     FF 32 0E F2 | 	cmp	local07, #255 wz
26de4     D4 00 90 AD |  if_e	jmp	#LR__3505
26de8     FF 38 0E F2 | 	cmp	local10, #255 wz
26dec     04 01 90 AD |  if_e	jmp	#LR__3506
26df0     00 32 0E F2 | 	cmp	local07, #0 wz
26df4     24 01 90 AD |  if_e	jmp	#LR__3507
26df8     17 30 26 F4 | 	bith	local06, #23
26dfc                 | LR__3500
26dfc     00 38 0E F2 | 	cmp	local10, #0 wz
26e00     70 01 90 AD |  if_e	jmp	#LR__3511
26e04     17 36 26 F4 | 	bith	local09, #23
26e08                 | LR__3501
26e08     1C 33 82 F1 | 	sub	local07, local10
26e0c     19 3B 02 F6 | 	mov	local11, local07
26e10     18 13 02 F6 | 	mov	arg01, local06
26e14     02 12 46 F0 | 	shr	arg01, #2
26e18     1E 30 66 F0 | 	shl	local06, #30
26e1c     18 15 02 F6 | 	mov	arg02, local06
26e20     1B 17 02 F6 | 	mov	arg03, local09
26e24     28 12 62 FD | 	setq	arg01
26e28     0B 15 12 FD | 	qdiv	arg02, arg03
26e2c     00 3C 06 F6 | 	mov	local12, #0
26e30     18 26 62 FD | 	getqx	local01
26e34     19 FC 61 FD | 	getqy	result2
26e38     FE 28 02 F6 | 	mov	local02, result2
26e3c     13 3F 02 F6 | 	mov	local13, local01
26e40     00 28 4E F2 | 	cmps	local02, #0 wz
26e44     1F 41 02 F6 | 	mov	local14, local13
26e48     19 40 66 F0 | 	shl	local14, #25
26e4c     01 3C 06 56 |  if_ne	mov	local12, #1
26e50     1E 41 42 F5 | 	or	local14, local12
26e54     07 3E 46 F0 | 	shr	local13, #7
26e58     00 80 00 FF 
26e5c     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
26e60     1C 00 90 CD |  if_b	jmp	#LR__3502
26e64     01 3A 06 F1 | 	add	local11, #1
26e68     01 40 46 F0 | 	shr	local14, #1
26e6c     1F 3D 02 F6 | 	mov	local12, local13
26e70     1F 3C 66 F0 | 	shl	local12, #31
26e74     1E 41 42 F5 | 	or	local14, local12
26e78     01 3E 46 F0 | 	shr	local13, #1
26e7c     24 00 90 FD | 	jmp	#LR__3504
26e80                 | LR__3502
26e80     00 40 00 FF 
26e84     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
26e88     18 00 90 3D |  if_ae	jmp	#LR__3503
26e8c     01 3A 86 F1 | 	sub	local11, #1
26e90     01 3E 66 F0 | 	shl	local13, #1
26e94     20 3D 02 F6 | 	mov	local12, local14
26e98     1F 3C 46 F0 | 	shr	local12, #31
26e9c     1E 3F 42 F5 | 	or	local13, local12
26ea0     01 40 66 F0 | 	shl	local14, #1
26ea4                 | LR__3503
26ea4                 | LR__3504
26ea4     1F 13 02 F6 | 	mov	arg01, local13
26ea8     20 15 02 F6 | 	mov	arg02, local14
26eac     1D 17 02 F6 | 	mov	arg03, local11
26eb0     17 19 02 F6 | 	mov	arg04, local05
26eb4     18 30 B0 FD | 	call	#__system__pack_0645
26eb8     F8 00 90 FD | 	jmp	#LR__3515
26ebc                 | LR__3505
26ebc     00 30 0E F2 | 	cmp	local06, #0 wz
26ec0     15 FB 01 56 |  if_ne	mov	result1, local03
26ec4     EC 00 90 5D |  if_ne	jmp	#LR__3515
26ec8     FF 38 0E F2 | 	cmp	local10, #255 wz
26ecc     00 F8 3F AF 
26ed0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
26ed4     DC 00 90 AD |  if_e	jmp	#LR__3515
26ed8     02 2E 46 F5 | 	or	local05, #2
26edc     00 12 06 F6 | 	mov	arg01, #0
26ee0     00 14 06 F6 | 	mov	arg02, #0
26ee4     19 17 02 F6 | 	mov	arg03, local07
26ee8     17 19 02 F6 | 	mov	arg04, local05
26eec     E0 2F B0 FD | 	call	#__system__pack_0645
26ef0     C0 00 90 FD | 	jmp	#LR__3515
26ef4                 | LR__3506
26ef4     00 36 0E F2 | 	cmp	local09, #0 wz
26ef8     16 FB 01 56 |  if_ne	mov	result1, local04
26efc     B4 00 90 5D |  if_ne	jmp	#LR__3515
26f00     17 19 02 F6 | 	mov	arg04, local05
26f04     08 18 46 F5 | 	or	arg04, #8
26f08     00 12 06 F6 | 	mov	arg01, #0
26f0c     00 14 06 F6 | 	mov	arg02, #0
26f10     00 16 06 F6 | 	mov	arg03, #0
26f14     B8 2F B0 FD | 	call	#__system__pack_0645
26f18     98 00 90 FD | 	jmp	#LR__3515
26f1c                 | LR__3507
26f1c     00 30 0E F2 | 	cmp	local06, #0 wz
26f20     20 00 90 AD |  if_e	jmp	#LR__3510
26f24     01 30 66 F0 | 	shl	local06, #1
26f28     97 0A 48 FB | 	callpa	#(@LR__3509-@LR__3508)>>2,fcache_load_ptr_
26f2c                 | LR__3508
26f2c     00 40 00 FF 
26f30     00 30 16 F2 | 	cmp	local06, ##8388608 wc
26f34     01 32 86 C1 |  if_b	sub	local07, #1
26f38     01 30 66 C0 |  if_b	shl	local06, #1
26f3c     EC FF 9F CD |  if_b	jmp	#LR__3508
26f40                 | LR__3509
26f40     B8 FE 9F FD | 	jmp	#LR__3500
26f44                 | LR__3510
26f44     00 38 0E F2 | 	cmp	local10, #0 wz
26f48     00 36 0E A2 |  if_e	cmp	local09, #0 wz
26f4c     00 F8 3F AF 
26f50     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
26f54     5C 00 90 AD |  if_e	jmp	#LR__3515
26f58     17 19 02 F6 | 	mov	arg04, local05
26f5c     08 18 46 F5 | 	or	arg04, #8
26f60     00 12 06 F6 | 	mov	arg01, #0
26f64     00 14 06 F6 | 	mov	arg02, #0
26f68     00 16 06 F6 | 	mov	arg03, #0
26f6c     60 2F B0 FD | 	call	#__system__pack_0645
26f70     40 00 90 FD | 	jmp	#LR__3515
26f74                 | LR__3511
26f74     00 36 0E F2 | 	cmp	local09, #0 wz
26f78     20 00 90 AD |  if_e	jmp	#LR__3514
26f7c     01 36 66 F0 | 	shl	local09, #1
26f80     97 0A 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
26f84                 | LR__3512
26f84     00 40 00 FF 
26f88     00 36 16 F2 | 	cmp	local09, ##8388608 wc
26f8c     01 38 86 C1 |  if_b	sub	local10, #1
26f90     01 36 66 C0 |  if_b	shl	local09, #1
26f94     EC FF 9F CD |  if_b	jmp	#LR__3512
26f98                 | LR__3513
26f98     6C FE 9F FD | 	jmp	#LR__3501
26f9c                 | LR__3514
26f9c     02 2E 46 F5 | 	or	local05, #2
26fa0     00 12 06 F6 | 	mov	arg01, #0
26fa4     00 14 06 F6 | 	mov	arg02, #0
26fa8     00 16 06 F6 | 	mov	arg03, #0
26fac     17 19 02 F6 | 	mov	arg04, local05
26fb0     1C 2F B0 FD | 	call	#__system__pack_0645
26fb4                 | LR__3515
26fb4     A7 F0 03 F6 | 	mov	ptra, fp
26fb8     B2 00 A0 FD | 	call	#popregs_
26fbc                 | __system___float_div_ret
26fbc     2D 00 64 FD | 	ret
26fc0                 | 
26fc0                 | __system___float_cmp
26fc0     00 C0 3F FF 
26fc4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
26fc8     00 C0 3F CF 
26fcc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
26fd0     0B FB 01 36 |  if_ae	mov	result1, arg03
26fd4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
26fd8     00 C0 7F FF 
26fdc     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
26fe0     00 C0 7F CF 
26fe4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
26fe8     0B FB 01 36 |  if_ae	mov	result1, arg03
26fec     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
26ff0     00 12 56 F2 | 	cmps	arg01, #0 wc
26ff4     2C 00 90 3D |  if_ae	jmp	#LR__3520
26ff8     00 14 56 F2 | 	cmps	arg02, #0 wc
26ffc     0A FB 01 C6 |  if_b	mov	result1, arg02
27000     09 FB 81 C1 |  if_b	sub	result1, arg01
27004     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27008     00 14 0E F2 | 	cmp	arg02, #0 wz
2700c     00 00 40 AF 
27010     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
27014     00 FA 05 A6 |  if_e	mov	result1, #0
27018     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2701c     01 FA 65 F6 | 	neg	result1, #1
27020     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27024                 | LR__3520
27024     00 14 56 F2 | 	cmps	arg02, #0 wc
27028     1C 00 90 3D |  if_ae	jmp	#LR__3521
2702c     00 12 0E F2 | 	cmp	arg01, #0 wz
27030     00 00 40 AF 
27034     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27038     00 FA 05 A6 |  if_e	mov	result1, #0
2703c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27040     01 FA 05 F6 | 	mov	result1, #1
27044     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27048                 | LR__3521
27048     0A 13 82 F1 | 	sub	arg01, arg02
2704c     09 FB 01 F6 | 	mov	result1, arg01
27050                 | __system___float_cmp_ret
27050     2D 00 64 FD | 	ret
27054                 | 
27054                 | __system___float_tointeger
27054     02 4A 05 F6 | 	mov	COUNT_, #2
27058     A8 00 A0 FD | 	call	#pushregs_
2705c     50 00 B0 FD | 	call	#__system___float_Unpack
27060     FF FF 7F FF 
27064     FF FD 55 F2 | 	cmps	result2, ##-1 wc
27068     34 00 90 CD |  if_b	jmp	#LR__3530
2706c     1F FC 55 F2 | 	cmps	result2, #31 wc
27070     2C 00 90 3D |  if_ae	jmp	#LR__3530
27074     02 FE 65 F0 | 	shl	result3, #2
27078     1E 26 06 F6 | 	mov	local01, #30
2707c     FE 26 82 F1 | 	sub	local01, result2
27080     13 FF 41 F0 | 	shr	result3, local01
27084     FF 28 02 F6 | 	mov	local02, result3
27088     0A 29 02 F1 | 	add	local02, arg02
2708c     01 28 46 F0 | 	shr	local02, #1
27090     00 FA 0D F2 | 	cmp	result1, #0 wz
27094     14 29 62 56 |  if_ne	neg	local02, local02
27098     14 FB 01 F6 | 	mov	result1, local02
2709c     04 00 90 FD | 	jmp	#LR__3531
270a0                 | LR__3530
270a0     00 FA 05 F6 | 	mov	result1, #0
270a4                 | LR__3531
270a4     A7 F0 03 F6 | 	mov	ptra, fp
270a8     B2 00 A0 FD | 	call	#popregs_
270ac                 | __system___float_tointeger_ret
270ac     2D 00 64 FD | 	ret
270b0                 | 
270b0                 | __system___float_Unpack
270b0     09 01 02 F6 | 	mov	_var01, arg01
270b4     1F 00 46 F0 | 	shr	_var01, #31
270b8     09 03 02 F6 | 	mov	_var02, arg01
270bc     01 02 66 F0 | 	shl	_var02, #1
270c0     18 02 4E F0 | 	shr	_var02, #24 wz
270c4     17 13 06 F4 | 	bitl	arg01, #279
270c8     06 12 66 50 |  if_ne	shl	arg01, #6
270cc     1D 12 26 54 |  if_ne	bith	arg01, #29
270d0     1C 00 90 5D |  if_ne	jmp	#LR__3540
270d4     09 05 92 F7 | 	encod	_var03, arg01 wc
270d8     01 04 06 C1 |  if_b	add	_var03, #1
270dc     17 04 86 F1 | 	sub	_var03, #23
270e0     02 03 02 F6 | 	mov	_var02, _var03
270e4     07 FC 05 F6 | 	mov	result2, #7
270e8     02 FD 81 F1 | 	sub	result2, _var03
270ec     FE 12 62 F0 | 	shl	arg01, result2
270f0                 | LR__3540
270f0     7F 02 86 F1 | 	sub	_var02, #127
270f4     09 FF 01 F6 | 	mov	result3, arg01
270f8     00 FB 01 F6 | 	mov	result1, _var01
270fc     01 FD 01 F6 | 	mov	result2, _var02
27100                 | __system___float_Unpack_ret
27100     2D 00 64 FD | 	ret
27104                 | 
27104                 | __system___float_Pack
27104     00 00 06 F6 | 	mov	_var01, #0
27108     00 16 0E F2 | 	cmp	arg03, #0 wz
2710c     8C 00 90 AD |  if_e	jmp	#LR__3551
27110     0B 03 92 F7 | 	encod	_var02, arg03 wc
27114     01 02 06 C1 |  if_b	add	_var02, #1
27118     21 00 06 F6 | 	mov	_var01, #33
2711c     01 01 82 F1 | 	sub	_var01, _var02
27120     00 17 62 F0 | 	shl	arg03, _var01
27124     03 02 06 F6 | 	mov	_var02, #3
27128     00 03 82 F1 | 	sub	_var02, _var01
2712c     01 15 02 F1 | 	add	arg02, _var02
27130     0A 05 02 F6 | 	mov	_var03, arg02
27134     00 17 06 F1 | 	add	arg03, #256
27138     0B 03 02 F6 | 	mov	_var02, arg03
2713c     FF 02 2E F5 | 	andn	_var02, #255 wz
27140     01 04 06 A1 |  if_e	add	_var03, #1
27144     7F 04 06 F1 | 	add	_var03, #127
27148     FF FF 7F FF 
2714c     E9 05 46 F3 | 	fges	_var03, ##-23
27150     FF 04 66 F3 | 	fles	_var03, #255
27154     01 04 56 F2 | 	cmps	_var03, #1 wc
27158     1C 00 90 3D |  if_ae	jmp	#LR__3550
2715c     01 16 46 F0 | 	shr	arg03, #1
27160     1F 02 C6 F9 | 	decod	_var02, #31
27164     0B 03 02 F1 | 	add	_var02, arg03
27168     02 05 62 F6 | 	neg	_var03, _var03
2716c     02 03 42 F0 | 	shr	_var02, _var03
27170     01 17 02 F6 | 	mov	arg03, _var02
27174     00 04 06 F6 | 	mov	_var03, #0
27178                 | LR__3550
27178     09 FB 01 F6 | 	mov	result1, arg01
2717c     1F FA 65 F0 | 	shl	result1, #31
27180     02 03 02 F6 | 	mov	_var02, _var03
27184     17 02 66 F0 | 	shl	_var02, #23
27188     01 FB 41 F5 | 	or	result1, _var02
2718c     0B 07 02 F6 | 	mov	_var04, arg03
27190     09 06 46 F0 | 	shr	_var04, #9
27194     03 FB 41 F5 | 	or	result1, _var04
27198     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2719c                 | LR__3551
2719c     00 FB 01 F6 | 	mov	result1, _var01
271a0                 | __system___float_Pack_ret
271a0     2D 00 64 FD | 	ret
271a4                 | 
271a4                 | __system___basic_print_float
271a4     05 4A 05 F6 | 	mov	COUNT_, #5
271a8     A8 00 A0 FD | 	call	#pushregs_
271ac     09 27 02 F6 | 	mov	local01, arg01
271b0     0A 29 02 F6 | 	mov	local02, arg02
271b4     0B 2B 0A F6 | 	mov	local03, arg03 wz
271b8     0C 2D 02 F6 | 	mov	local04, arg04
271bc     14 00 90 5D |  if_ne	jmp	#LR__3560
271c0     23 2C 0E F2 | 	cmp	local04, #35 wz
271c4     80 02 10 AF 
271c8     00 2E 06 A6 |  if_e	mov	local05, ##537198592
271cc     1D 2E C6 59 |  if_ne	decod	local05, #29
271d0     17 2B 02 F6 | 	mov	local03, local05
271d4                 | LR__3560
271d4     13 13 02 F6 | 	mov	arg01, local01
271d8     D8 27 B0 FD | 	call	#__system___gettxfunc
271dc     FD 2E 0A F6 | 	mov	local05, result1 wz
271e0     00 FA 05 A6 |  if_e	mov	result1, #0
271e4     17 13 02 56 |  if_ne	mov	arg01, local05
271e8     15 15 02 56 |  if_ne	mov	arg02, local03
271ec     14 17 02 56 |  if_ne	mov	arg03, local02
271f0     16 19 02 56 |  if_ne	mov	arg04, local04
271f4     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
271f8     A7 F0 03 F6 | 	mov	ptra, fp
271fc     B2 00 A0 FD | 	call	#popregs_
27200                 | __system___basic_print_float_ret
27200     2D 00 64 FD | 	ret
27204                 | 
27204                 | __system____builtin_atoi
27204     07 4A 05 F6 | 	mov	COUNT_, #7
27208     A8 00 A0 FD | 	call	#pushregs_
2720c                 | __system____builtin_atoi_enter
2720c     09 27 02 F6 | 	mov	local01, arg01
27210     0A 29 02 F6 | 	mov	local02, arg02
27214     00 2A 06 F6 | 	mov	local03, #0
27218     00 2C 06 F6 | 	mov	local04, #0
2721c     00 2E 06 F6 | 	mov	local05, #0
27220     97 1C 48 FB | 	callpa	#(@LR__3572-@LR__3570)>>2,fcache_load_ptr_
27224                 | LR__3570
27224     13 31 C2 FA | 	rdbyte	local06, local01
27228     20 30 0E F2 | 	cmp	local06, #32 wz
2722c     01 26 06 A1 |  if_e	add	local01, #1
27230     F0 FF 9F AD |  if_e	jmp	#LR__3570
27234     13 33 C2 FA | 	rdbyte	local07, local01
27238                 | LR__3571
27238     2D 32 0E F2 | 	cmp	local07, #45 wz
2723c     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
27240     18 00 90 5D |  if_ne	jmp	#LR__3573
27244     01 26 06 F1 | 	add	local01, #1
27248     2D 32 0E F2 | 	cmp	local07, #45 wz
2724c     01 30 06 A6 |  if_e	mov	local06, #1
27250     18 2F C2 A2 |  if_e	subr	local05, local06
27254     13 33 C2 FA | 	rdbyte	local07, local01
27258     DC FF 9F FD | 	jmp	#LR__3571
2725c                 | LR__3572
2725c                 | LR__3573
2725c     00 28 0E F2 | 	cmp	local02, #0 wz
27260     1C 00 90 5D |  if_ne	jmp	#LR__3575
27264     24 32 0E F2 | 	cmp	local07, #36 wz
27268     10 28 06 A6 |  if_e	mov	local02, #16
2726c     01 26 06 A1 |  if_e	add	local01, #1
27270     0C 00 90 AD |  if_e	jmp	#LR__3574
27274     25 32 0E F2 | 	cmp	local07, #37 wz
27278     02 28 06 A6 |  if_e	mov	local02, #2
2727c     01 26 06 A1 |  if_e	add	local01, #1
27280                 | LR__3574
27280                 | LR__3575
27280     97 48 48 FB | 	callpa	#(@LR__3583-@LR__3576)>>2,fcache_load_ptr_
27284                 | LR__3576
27284                 | LR__3577
27284     13 33 C2 FA | 	rdbyte	local07, local01
27288     5F 32 0E F2 | 	cmp	local07, #95 wz
2728c     01 26 06 F1 | 	add	local01, #1
27290     F0 FF 9F AD |  if_e	jmp	#LR__3577
27294     30 32 0E F2 | 	cmp	local07, #48 wz
27298     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2729c     00 2C 06 A6 |  if_e	mov	local04, #0
272a0     60 00 90 AD |  if_e	jmp	#LR__3582
272a4     31 32 56 F2 | 	cmps	local07, #49 wc
272a8     18 00 90 CD |  if_b	jmp	#LR__3578
272ac     3A 32 56 F2 | 	cmps	local07, #58 wc
272b0     19 2D 02 C6 |  if_b	mov	local04, local07
272b4     30 2C 86 C1 |  if_b	sub	local04, #48
272b8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
272bc     0A 28 06 86 |  if_c_and_z	mov	local02, #10
272c0     40 00 90 CD |  if_b	jmp	#LR__3581
272c4                 | LR__3578
272c4     0B 28 56 F2 | 	cmps	local02, #11 wc
272c8     61 32 56 32 |  if_ae	cmps	local07, #97 wc
272cc     14 00 90 CD |  if_b	jmp	#LR__3579
272d0     67 32 56 F2 | 	cmps	local07, #103 wc
272d4     61 32 86 C1 |  if_b	sub	local07, #97
272d8     0A 2C 06 C6 |  if_b	mov	local04, #10
272dc     19 2D 02 C1 |  if_b	add	local04, local07
272e0     20 00 90 CD |  if_b	jmp	#LR__3580
272e4                 | LR__3579
272e4     0B 28 56 F2 | 	cmps	local02, #11 wc
272e8     41 32 56 32 |  if_ae	cmps	local07, #65 wc
272ec     24 00 90 CD |  if_b	jmp	#LR__3584
272f0     47 32 56 F2 | 	cmps	local07, #71 wc
272f4     41 32 86 C1 |  if_b	sub	local07, #65
272f8     0A 2C 06 C6 |  if_b	mov	local04, #10
272fc     19 2D 02 C1 |  if_b	add	local04, local07
27300     10 00 90 3D |  if_ae	jmp	#LR__3584
27304                 | LR__3580
27304                 | LR__3581
27304                 | LR__3582
27304     15 29 02 FD | 	qmul	local02, local03
27308     18 2A 62 FD | 	getqx	local03
2730c     16 2B 02 F1 | 	add	local03, local04
27310     70 FF 9F FD | 	jmp	#LR__3576
27314                 | LR__3583
27314                 | LR__3584
27314     00 28 0E F2 | 	cmp	local02, #0 wz
27318     64 00 90 5D |  if_ne	jmp	#LR__3590
2731c     78 32 0E F2 | 	cmp	local07, #120 wz
27320     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
27324     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
27328     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2732c     14 00 90 5D |  if_ne	jmp	#LR__3585
27330     13 13 02 F6 | 	mov	arg01, local01
27334     10 14 06 F6 | 	mov	arg02, #16
27338     C8 FE BF FD | 	call	#__system____builtin_atoi
2733c     FD 2A 02 F6 | 	mov	local03, result1
27340     3C 00 90 FD | 	jmp	#LR__3589
27344                 | LR__3585
27344     62 32 0E F2 | 	cmp	local07, #98 wz
27348     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2734c     14 00 90 5D |  if_ne	jmp	#LR__3586
27350     13 13 02 F6 | 	mov	arg01, local01
27354     02 14 06 F6 | 	mov	arg02, #2
27358     A8 FE BF FD | 	call	#__system____builtin_atoi
2735c     FD 2A 02 F6 | 	mov	local03, result1
27360     1C 00 90 FD | 	jmp	#LR__3588
27364                 | LR__3586
27364     6F 32 0E F2 | 	cmp	local07, #111 wz
27368     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2736c     10 00 90 5D |  if_ne	jmp	#LR__3587
27370     13 13 02 F6 | 	mov	arg01, local01
27374     08 14 06 F6 | 	mov	arg02, #8
27378     88 FE BF FD | 	call	#__system____builtin_atoi
2737c     FD 2A 02 F6 | 	mov	local03, result1
27380                 | LR__3587
27380                 | LR__3588
27380                 | LR__3589
27380                 | LR__3590
27380     00 2E 0E F2 | 	cmp	local05, #0 wz
27384     15 2B 62 56 |  if_ne	neg	local03, local03
27388     15 FB 01 F6 | 	mov	result1, local03
2738c     A7 F0 03 F6 | 	mov	ptra, fp
27390     B2 00 A0 FD | 	call	#popregs_
27394                 | __system____builtin_atoi_ret
27394     2D 00 64 FD | 	ret
27398                 | 
27398                 | __system____builtin_atof
27398     07 4A 05 F6 | 	mov	COUNT_, #7
2739c     A8 00 A0 FD | 	call	#pushregs_
273a0     09 27 02 F6 | 	mov	local01, arg01
273a4     00 28 06 F6 | 	mov	local02, #0
273a8     00 2A 06 F6 | 	mov	local03, #0
273ac     00 2C 06 F6 | 	mov	local04, #0
273b0     00 2E 06 F6 | 	mov	local05, #0
273b4     97 08 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
273b8                 | LR__3600
273b8     13 17 C2 FA | 	rdbyte	arg03, local01
273bc     20 16 0E F2 | 	cmp	arg03, #32 wz
273c0     01 26 06 A1 |  if_e	add	local01, #1
273c4     F0 FF 9F AD |  if_e	jmp	#LR__3600
273c8                 | LR__3601
273c8     13 31 C2 FA | 	rdbyte	local06, local01
273cc                 | LR__3602
273cc     2B 30 0E F2 | 	cmp	local06, #43 wz
273d0     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
273d4     14 00 90 5D |  if_ne	jmp	#LR__3603
273d8     2D 30 0E F2 | 	cmp	local06, #45 wz
273dc     1F 2C E6 A4 |  if_e	bitnot	local04, #31
273e0     01 26 06 F1 | 	add	local01, #1
273e4     13 31 C2 FA | 	rdbyte	local06, local01
273e8     E0 FF 9F FD | 	jmp	#LR__3602
273ec                 | LR__3603
273ec                 | LR__3604
273ec     97 08 48 FB | 	callpa	#(@LR__3606-@LR__3605)>>2,fcache_load_ptr_
273f0                 | LR__3605
273f0     13 31 C2 FA | 	rdbyte	local06, local01
273f4     5F 30 0E F2 | 	cmp	local06, #95 wz
273f8     01 26 06 F1 | 	add	local01, #1
273fc     F0 FF 9F AD |  if_e	jmp	#LR__3605
27400                 | LR__3606
27400     00 30 0E F2 | 	cmp	local06, #0 wz
27404     5C 00 90 AD |  if_e	jmp	#LR__3608
27408     30 30 56 F2 | 	cmps	local06, #48 wc
2740c     44 00 90 CD |  if_b	jmp	#LR__3607
27410     3A 30 56 F2 | 	cmps	local06, #58 wc
27414     3C 00 90 3D |  if_ae	jmp	#LR__3607
27418     14 13 02 F6 | 	mov	arg01, local02
2741c     00 90 20 FF 
27420     00 14 06 F6 | 	mov	arg02, ##1092616192
27424     64 F7 BF FD | 	call	#__system___float_mul
27428     FD 28 02 F6 | 	mov	local02, result1
2742c     30 30 86 F1 | 	sub	local06, #48
27430     18 13 02 F6 | 	mov	arg01, local06
27434     50 F3 BF FD | 	call	#__system___float_fromuns
27438     FD 14 02 F6 | 	mov	arg02, result1
2743c     14 13 02 F6 | 	mov	arg01, local02
27440     78 F3 BF FD | 	call	#__system___float_add
27444     FD 28 02 F6 | 	mov	local02, result1
27448     00 2E 0E F2 | 	cmp	local05, #0 wz
2744c     01 2A 86 51 |  if_ne	sub	local03, #1
27450     98 FF 9F FD | 	jmp	#LR__3604
27454                 | LR__3607
27454     2E 30 0E F2 | 	cmp	local06, #46 wz
27458     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2745c     01 2E 06 A6 |  if_e	mov	local05, #1
27460     88 FF 9F AD |  if_e	jmp	#LR__3604
27464                 | LR__3608
27464     45 30 0E F2 | 	cmp	local06, #69 wz
27468     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2746c     18 00 90 5D |  if_ne	jmp	#LR__3609
27470     13 13 02 F6 | 	mov	arg01, local01
27474     00 14 06 F6 | 	mov	arg02, #0
27478     88 FD BF FD | 	call	#__system____builtin_atoi
2747c     15 FB 01 F1 | 	add	result1, local03
27480     FD 32 02 F6 | 	mov	local07, result1
27484     04 00 90 FD | 	jmp	#LR__3610
27488                 | LR__3609
27488     15 33 02 F6 | 	mov	local07, local03
2748c                 | LR__3610
2748c     19 17 02 F6 | 	mov	arg03, local07
27490     14 13 02 F6 | 	mov	arg01, local02
27494     00 90 20 FF 
27498     00 14 06 F6 | 	mov	arg02, ##1092616192
2749c     F4 06 B0 FD | 	call	#__system___float_pow_n
274a0     16 FB 61 F5 | 	xor	result1, local04
274a4     A7 F0 03 F6 | 	mov	ptra, fp
274a8     B2 00 A0 FD | 	call	#popregs_
274ac                 | __system____builtin_atof_ret
274ac     2D 00 64 FD | 	ret
274b0                 | 
274b0                 | __system____builtin_ilogb
274b0     FC FB BF FD | 	call	#__system___float_Unpack
274b4     00 FE 0D F2 | 	cmp	result3, #0 wz
274b8     00 00 40 AF 
274bc     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
274c0     24 00 90 AD |  if_e	jmp	#LR__3621
274c4     80 FC 0D F2 | 	cmp	result2, #128 wz
274c8     18 00 90 5D |  if_ne	jmp	#LR__3620
274cc     00 00 10 FF 
274d0     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
274d4     1E FA CD A9 |  if_e	bmask	result1, #30
274d8     0C 00 90 AD |  if_e	jmp	#LR__3621
274dc     1F FA C5 F9 | 	decod	result1, #31
274e0     04 00 90 FD | 	jmp	#LR__3621
274e4                 | LR__3620
274e4     FE FA 01 F6 | 	mov	result1, result2
274e8                 | LR__3621
274e8                 | __system____builtin_ilogb_ret
274e8     2D 00 64 FD | 	ret
274ec                 | 
274ec                 | __system____builtin_sinf
274ec     03 4A 05 F6 | 	mov	COUNT_, #3
274f0     A8 00 A0 FD | 	call	#pushregs_
274f4     09 27 02 F6 | 	mov	local01, arg01
274f8     87 64 20 FF 
274fc     DB 15 06 F6 | 	mov	arg02, ##1086918619
27500     8C F8 BF FD | 	call	#__system___float_div
27504     FD 12 02 F6 | 	mov	arg01, result1
27508     00 14 06 F6 | 	mov	arg02, #0
2750c     44 FB BF FD | 	call	#__system___float_tointeger
27510     FD 16 0A F6 | 	mov	arg03, result1 wz
27514     44 00 90 AD |  if_e	jmp	#LR__3630
27518     0B 13 52 F6 | 	abs	arg01, arg03 wc
2751c     1F 28 C6 C9 |  if_b	decod	local02, #31
27520     00 28 06 36 |  if_ae	mov	local02, #0
27524     60 F2 BF FD | 	call	#__system___float_fromuns
27528     14 FB 61 F5 | 	xor	result1, local02
2752c     FD 12 02 F6 | 	mov	arg01, result1
27530     1E 14 C6 F9 | 	decod	arg02, #30
27534     54 F6 BF FD | 	call	#__system___float_mul
27538     FD 12 02 F6 | 	mov	arg01, result1
2753c     87 24 20 FF 
27540     DB 15 06 F6 | 	mov	arg02, ##1078530011
27544     44 F6 BF FD | 	call	#__system___float_mul
27548     FD 14 02 F6 | 	mov	arg02, result1
2754c     13 13 02 F6 | 	mov	arg01, local01
27550     1F 14 E6 F4 | 	bitnot	arg02, #31
27554     64 F2 BF FD | 	call	#__system___float_add
27558     FD 26 02 F6 | 	mov	local01, result1
2755c                 | LR__3630
2755c     13 13 02 F6 | 	mov	arg01, local01
27560     66 E6 1E FF 
27564     CD 14 06 F6 | 	mov	arg02, ##1036831949
27568     01 16 06 F6 | 	mov	arg03, #1
2756c     50 FA BF FD | 	call	#__system___float_cmp
27570     00 FA 55 F2 | 	cmps	result1, #0 wc
27574     5C 00 90 3D |  if_ae	jmp	#LR__3631
27578     13 13 02 F6 | 	mov	arg01, local01
2757c     66 E6 5E FF 
27580     CD 14 06 F6 | 	mov	arg02, ##-1110651699
27584     01 16 66 F6 | 	neg	arg03, #1
27588     34 FA BF FD | 	call	#__system___float_cmp
2758c     01 FA 55 F2 | 	cmps	result1, #1 wc
27590     40 00 90 CD |  if_b	jmp	#LR__3631
27594     13 13 02 F6 | 	mov	arg01, local01
27598     13 15 02 F6 | 	mov	arg02, local01
2759c     EC F5 BF FD | 	call	#__system___float_mul
275a0     FD 12 02 F6 | 	mov	arg01, result1
275a4     13 15 02 F6 | 	mov	arg02, local01
275a8     E0 F5 BF FD | 	call	#__system___float_mul
275ac     FD 12 02 F6 | 	mov	arg01, result1
275b0     00 60 20 FF 
275b4     00 14 06 F6 | 	mov	arg02, ##1086324736
275b8     D4 F7 BF FD | 	call	#__system___float_div
275bc     FD 14 02 F6 | 	mov	arg02, result1
275c0     13 13 02 F6 | 	mov	arg01, local01
275c4     1F 14 E6 F4 | 	bitnot	arg02, #31
275c8     F0 F1 BF FD | 	call	#__system___float_add
275cc     FD 2A 02 F6 | 	mov	local03, result1
275d0     54 00 90 FD | 	jmp	#LR__3632
275d4                 | LR__3631
275d4     13 13 02 F6 | 	mov	arg01, local01
275d8     7C 91 26 FF 
275dc     83 15 06 F6 | 	mov	arg02, ##1294137731
275e0     A8 F5 BF FD | 	call	#__system___float_mul
275e4     FD 12 02 F6 | 	mov	arg01, result1
275e8     00 14 06 F6 | 	mov	arg02, #0
275ec     64 FA BF FD | 	call	#__system___float_tointeger
275f0     02 FA 65 F0 | 	shl	result1, #2
275f4     00 00 A0 FF 
275f8     FD 00 48 FD | 	qrotate	##1073741824, result1
275fc     19 12 62 FD | 	getqy	arg01
27600     09 13 52 F6 | 	abs	arg01, arg01 wc
27604     1F 28 C6 C9 |  if_b	decod	local02, #31
27608     00 28 06 36 |  if_ae	mov	local02, #0
2760c     78 F1 BF FD | 	call	#__system___float_fromuns
27610     14 FB 61 F5 | 	xor	result1, local02
27614     FD 12 02 F6 | 	mov	arg01, result1
27618     00 40 27 FF 
2761c     00 14 06 F6 | 	mov	arg02, ##1317011456
27620     6C F7 BF FD | 	call	#__system___float_div
27624     FD 2A 02 F6 | 	mov	local03, result1
27628                 | LR__3632
27628     15 FB 01 F6 | 	mov	result1, local03
2762c     A7 F0 03 F6 | 	mov	ptra, fp
27630     B2 00 A0 FD | 	call	#popregs_
27634                 | __system____builtin_sinf_ret
27634     2D 00 64 FD | 	ret
27638                 | 
27638                 | __system____builtin_tanf
27638     02 4A 05 F6 | 	mov	COUNT_, #2
2763c     A8 00 A0 FD | 	call	#pushregs_
27640     09 27 02 F6 | 	mov	local01, arg01
27644     A4 FE BF FD | 	call	#__system____builtin_sinf
27648     FD 28 02 F6 | 	mov	local02, result1
2764c     13 15 02 F6 | 	mov	arg02, local01
27650     87 E4 1F FF 
27654     DB 13 06 F6 | 	mov	arg01, ##1070141403
27658     1F 14 E6 F4 | 	bitnot	arg02, #31
2765c     5C F1 BF FD | 	call	#__system___float_add
27660     FD 12 02 F6 | 	mov	arg01, result1
27664     84 FE BF FD | 	call	#__system____builtin_sinf
27668     FD 14 02 F6 | 	mov	arg02, result1
2766c     14 13 02 F6 | 	mov	arg01, local02
27670     1C F7 BF FD | 	call	#__system___float_div
27674     A7 F0 03 F6 | 	mov	ptra, fp
27678     B2 00 A0 FD | 	call	#popregs_
2767c                 | __system____builtin_tanf_ret
2767c     2D 00 64 FD | 	ret
27680                 | 
27680                 | __system____builtin_asinf
27680     01 4A 05 F6 | 	mov	COUNT_, #1
27684     A8 00 A0 FD | 	call	#pushregs_
27688     09 27 02 F6 | 	mov	local01, arg01
2768c     13 15 02 F6 | 	mov	arg02, local01
27690     13 13 02 F6 | 	mov	arg01, local01
27694     F4 F4 BF FD | 	call	#__system___float_mul
27698     FD 14 02 F6 | 	mov	arg02, result1
2769c     00 C0 1F FF 
276a0     00 12 06 F6 | 	mov	arg01, ##1065353216
276a4     1F 14 E6 F4 | 	bitnot	arg02, #31
276a8     10 F1 BF FD | 	call	#__system___float_add
276ac     FD 12 02 F6 | 	mov	arg01, result1
276b0     00 F4 BF FD | 	call	#__system___float_sqrt
276b4     FD 14 02 F6 | 	mov	arg02, result1
276b8     13 13 02 F6 | 	mov	arg01, local01
276bc     58 00 B0 FD | 	call	#__system____builtin_atan2f
276c0     A7 F0 03 F6 | 	mov	ptra, fp
276c4     B2 00 A0 FD | 	call	#popregs_
276c8                 | __system____builtin_asinf_ret
276c8     2D 00 64 FD | 	ret
276cc                 | 
276cc                 | __system____builtin_acosf
276cc     01 4A 05 F6 | 	mov	COUNT_, #1
276d0     A8 00 A0 FD | 	call	#pushregs_
276d4     09 27 02 F6 | 	mov	local01, arg01
276d8     13 15 02 F6 | 	mov	arg02, local01
276dc     13 13 02 F6 | 	mov	arg01, local01
276e0     A8 F4 BF FD | 	call	#__system___float_mul
276e4     FD 14 02 F6 | 	mov	arg02, result1
276e8     00 C0 1F FF 
276ec     00 12 06 F6 | 	mov	arg01, ##1065353216
276f0     1F 14 E6 F4 | 	bitnot	arg02, #31
276f4     C4 F0 BF FD | 	call	#__system___float_add
276f8     FD 12 02 F6 | 	mov	arg01, result1
276fc     B4 F3 BF FD | 	call	#__system___float_sqrt
27700     FD 12 02 F6 | 	mov	arg01, result1
27704     13 15 02 F6 | 	mov	arg02, local01
27708     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2770c     A7 F0 03 F6 | 	mov	ptra, fp
27710     B2 00 A0 FD | 	call	#popregs_
27714                 | __system____builtin_acosf_ret
27714     2D 00 64 FD | 	ret
27718                 | 
27718                 | __system____builtin_atan2f
27718     04 4A 05 F6 | 	mov	COUNT_, #4
2771c     A8 00 A0 FD | 	call	#pushregs_
27720     09 27 02 F6 | 	mov	local01, arg01
27724     0A 29 02 F6 | 	mov	local02, arg02
27728     13 13 02 F6 | 	mov	arg01, local01
2772c     00 14 06 F6 | 	mov	arg02, #0
27730     01 16 06 F6 | 	mov	arg03, #1
27734     88 F8 BF FD | 	call	#__system___float_cmp
27738     00 FA 0D F2 | 	cmp	result1, #0 wz
2773c     28 00 90 5D |  if_ne	jmp	#LR__3640
27740     14 13 02 F6 | 	mov	arg01, local02
27744     00 14 06 F6 | 	mov	arg02, #0
27748     01 16 06 F6 | 	mov	arg03, #1
2774c     70 F8 BF FD | 	call	#__system___float_cmp
27750     00 FA 55 F2 | 	cmps	result1, #0 wc
27754     87 24 60 CF 
27758     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2775c     DC 00 90 CD |  if_b	jmp	#LR__3641
27760     00 FA 05 F6 | 	mov	result1, #0
27764     D4 00 90 FD | 	jmp	#LR__3641
27768                 | LR__3640
27768     14 13 02 F6 | 	mov	arg01, local02
2776c     14 15 02 F6 | 	mov	arg02, local02
27770     18 F4 BF FD | 	call	#__system___float_mul
27774     FD 2A 02 F6 | 	mov	local03, result1
27778     13 13 02 F6 | 	mov	arg01, local01
2777c     13 15 02 F6 | 	mov	arg02, local01
27780     08 F4 BF FD | 	call	#__system___float_mul
27784     FD 14 02 F6 | 	mov	arg02, result1
27788     15 13 02 F6 | 	mov	arg01, local03
2778c     2C F0 BF FD | 	call	#__system___float_add
27790     FD 12 02 F6 | 	mov	arg01, result1
27794     1C F3 BF FD | 	call	#__system___float_sqrt
27798     FD 2A 02 F6 | 	mov	local03, result1
2779c     14 13 02 F6 | 	mov	arg01, local02
277a0     15 15 02 F6 | 	mov	arg02, local03
277a4     E8 F5 BF FD | 	call	#__system___float_div
277a8     FD 28 02 F6 | 	mov	local02, result1
277ac     13 13 02 F6 | 	mov	arg01, local01
277b0     15 15 02 F6 | 	mov	arg02, local03
277b4     D8 F5 BF FD | 	call	#__system___float_div
277b8     FD 26 02 F6 | 	mov	local01, result1
277bc     00 40 27 FF 
277c0     00 12 06 F6 | 	mov	arg01, ##1317011456
277c4     14 15 02 F6 | 	mov	arg02, local02
277c8     C0 F3 BF FD | 	call	#__system___float_mul
277cc     FD 12 02 F6 | 	mov	arg01, result1
277d0     00 14 06 F6 | 	mov	arg02, #0
277d4     7C F8 BF FD | 	call	#__system___float_tointeger
277d8     FD 2A 02 F6 | 	mov	local03, result1
277dc     00 40 27 FF 
277e0     00 12 06 F6 | 	mov	arg01, ##1317011456
277e4     13 15 02 F6 | 	mov	arg02, local01
277e8     A0 F3 BF FD | 	call	#__system___float_mul
277ec     FD 12 02 F6 | 	mov	arg01, result1
277f0     00 14 06 F6 | 	mov	arg02, #0
277f4     5C F8 BF FD | 	call	#__system___float_tointeger
277f8     FD 2A 52 FD | 	qvector	local03, result1
277fc     87 24 20 FF 
27800     DB 2B 06 F6 | 	mov	local03, ##1078530011
27804     19 12 62 FD | 	getqy	arg01
27808     01 12 C6 F0 | 	sar	arg01, #1
2780c     09 13 52 F6 | 	abs	arg01, arg01 wc
27810     1F 2C C6 C9 |  if_b	decod	local04, #31
27814     00 2C 06 36 |  if_ae	mov	local04, #0
27818     6C EF BF FD | 	call	#__system___float_fromuns
2781c     16 FB 61 F5 | 	xor	result1, local04
27820     FD 12 02 F6 | 	mov	arg01, result1
27824     00 40 27 FF 
27828     00 14 06 F6 | 	mov	arg02, ##1317011456
2782c     60 F5 BF FD | 	call	#__system___float_div
27830     FD 14 02 F6 | 	mov	arg02, result1
27834     15 13 02 F6 | 	mov	arg01, local03
27838     50 F3 BF FD | 	call	#__system___float_mul
2783c                 | LR__3641
2783c     A7 F0 03 F6 | 	mov	ptra, fp
27840     B2 00 A0 FD | 	call	#popregs_
27844                 | __system____builtin_atan2f_ret
27844     2D 00 64 FD | 	ret
27848                 | 
27848                 | __system____builtin_exp2f
27848     04 4A 05 F6 | 	mov	COUNT_, #4
2784c     A8 00 A0 FD | 	call	#pushregs_
27850     09 27 02 F6 | 	mov	local01, arg01
27854     00 7F 21 FF 
27858     00 14 06 F6 | 	mov	arg02, ##1123942400
2785c     01 16 66 F6 | 	neg	arg03, #1
27860     5C F7 BF FD | 	call	#__system___float_cmp
27864     00 FA 55 F2 | 	cmps	result1, #0 wc
27868     00 C0 3F 3F 
2786c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
27870     DC 00 90 3D |  if_ae	jmp	#LR__3651
27874     13 13 02 F6 | 	mov	arg01, local01
27878     00 7F 61 FF 
2787c     00 14 06 F6 | 	mov	arg02, ##-1023541248
27880     01 16 06 F6 | 	mov	arg03, #1
27884     38 F7 BF FD | 	call	#__system___float_cmp
27888     00 FA 55 F2 | 	cmps	result1, #0 wc
2788c     00 FA 05 C6 |  if_b	mov	result1, #0
27890     BC 00 90 CD |  if_b	jmp	#LR__3651
27894     13 13 02 F6 | 	mov	arg01, local01
27898     00 14 06 F6 | 	mov	arg02, #0
2789c     B4 F7 BF FD | 	call	#__system___float_tointeger
278a0     FD 28 02 F6 | 	mov	local02, result1
278a4     14 13 52 F6 | 	abs	arg01, local02 wc
278a8     1F 2A C6 C9 |  if_b	decod	local03, #31
278ac     00 2A 06 36 |  if_ae	mov	local03, #0
278b0     D4 EE BF FD | 	call	#__system___float_fromuns
278b4     15 FB 61 F5 | 	xor	result1, local03
278b8     FD 14 02 F6 | 	mov	arg02, result1
278bc     13 13 02 F6 | 	mov	arg01, local01
278c0     1F 14 E6 F4 | 	bitnot	arg02, #31
278c4     F4 EE BF FD | 	call	#__system___float_add
278c8     FD 2C 02 F6 | 	mov	local04, result1
278cc     16 13 02 F6 | 	mov	arg01, local04
278d0     00 14 06 F6 | 	mov	arg02, #0
278d4     01 16 06 F6 | 	mov	arg03, #1
278d8     E4 F6 BF FD | 	call	#__system___float_cmp
278dc     00 FA 55 F2 | 	cmps	result1, #0 wc
278e0     18 00 90 3D |  if_ae	jmp	#LR__3650
278e4     16 13 02 F6 | 	mov	arg01, local04
278e8     00 C0 1F FF 
278ec     00 14 06 F6 | 	mov	arg02, ##1065353216
278f0     C8 EE BF FD | 	call	#__system___float_add
278f4     FD 2C 02 F6 | 	mov	local04, result1
278f8     01 28 86 F1 | 	sub	local02, #1
278fc                 | LR__3650
278fc     7F 28 06 F1 | 	add	local02, #127
27900     17 28 66 F0 | 	shl	local02, #23
27904     16 13 02 F6 | 	mov	arg01, local04
27908     00 80 26 FF 
2790c     00 14 06 F6 | 	mov	arg02, ##1291845632
27910     78 F2 BF FD | 	call	#__system___float_mul
27914     FD 12 02 F6 | 	mov	arg01, result1
27918     00 14 06 F6 | 	mov	arg02, #0
2791c     34 F7 BF FD | 	call	#__system___float_tointeger
27920     FD 2C 0A F6 | 	mov	local04, result1 wz
27924     14 FB 01 A6 |  if_e	mov	result1, local02
27928     24 00 90 AD |  if_e	jmp	#LR__3651
2792c     3E 2C 26 F4 | 	bith	local04, #62
27930     0F 2C 62 FD | 	qexp	local04
27934     14 13 02 F6 | 	mov	arg01, local02
27938     18 14 62 FD | 	getqx	arg02
2793c     01 14 06 F1 | 	add	arg02, #1
27940     01 14 46 F0 | 	shr	arg02, #1
27944     00 80 1F FF 
27948     00 14 06 F1 | 	add	arg02, ##1056964608
2794c     3C F2 BF FD | 	call	#__system___float_mul
27950                 | LR__3651
27950     A7 F0 03 F6 | 	mov	ptra, fp
27954     B2 00 A0 FD | 	call	#popregs_
27958                 | __system____builtin_exp2f_ret
27958     2D 00 64 FD | 	ret
2795c                 | 
2795c                 | __system____builtin_log2f
2795c     06 4A 05 F6 | 	mov	COUNT_, #6
27960     A8 00 A0 FD | 	call	#pushregs_
27964     09 27 02 F6 | 	mov	local01, arg01
27968     09 29 0A F6 | 	mov	local02, arg01 wz
2796c     00 00 40 5F 
27970     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
27974     00 40 00 AF 
27978     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2797c     08 01 90 AD |  if_e	jmp	#LR__3664
27980     00 28 56 F2 | 	cmps	local02, #0 wc
27984     00 E0 3F CF 
27988     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2798c     F8 00 90 CD |  if_b	jmp	#LR__3664
27990     13 13 02 F6 | 	mov	arg01, local01
27994     00 90 20 FF 
27998     00 14 06 F6 | 	mov	arg02, ##1092616192
2799c     01 16 06 F6 | 	mov	arg03, #1
279a0     1C F6 BF FD | 	call	#__system___float_cmp
279a4     00 FA 0D F2 | 	cmp	result1, #0 wz
279a8     4D 2A 20 AF 
279ac     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
279b0     D4 00 90 AD |  if_e	jmp	#LR__3664
279b4     13 13 02 F6 | 	mov	arg01, local01
279b8     FC 16 20 FF 
279bc     54 14 06 F6 | 	mov	arg02, ##1076754516
279c0     01 16 06 F6 | 	mov	arg03, #1
279c4     F8 F5 BF FD | 	call	#__system___float_cmp
279c8     00 FA 0D F2 | 	cmp	result1, #0 wz
279cc     55 DC 1F AF 
279d0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
279d4     B0 00 90 AD |  if_e	jmp	#LR__3664
279d8     14 2B 02 F6 | 	mov	local03, local02
279dc     17 2A 46 F0 | 	shr	local03, #23
279e0     15 2B E2 F8 | 	getbyte	local03, local03, #0
279e4     17 29 06 F4 | 	bitl	local02, #279
279e8     14 2D 02 F6 | 	mov	local04, local02
279ec     FF 2A 0E F2 | 	cmp	local03, #255 wz
279f0     1C 00 90 5D |  if_ne	jmp	#LR__3660
279f4     00 2C 0E F2 | 	cmp	local04, #0 wz
279f8     00 C0 3F 5F 
279fc     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
27a00     00 E0 3F AF 
27a04     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
27a08     17 FB 01 F6 | 	mov	result1, local05
27a0c     78 00 90 FD | 	jmp	#LR__3664
27a10                 | LR__3660
27a10     00 2A 0E F2 | 	cmp	local03, #0 wz
27a14     17 2C 26 54 |  if_ne	bith	local04, #23
27a18     7F 2A 86 51 |  if_ne	sub	local03, #127
27a1c     28 00 90 5D |  if_ne	jmp	#LR__3663
27a20     00 2C 0E F2 | 	cmp	local04, #0 wz
27a24     00 40 00 AF 
27a28     00 FA 65 A6 |  if_e	neg	result1, ##8388608
27a2c     58 00 90 AD |  if_e	jmp	#LR__3664
27a30     7E 2A 66 F6 | 	neg	local03, #126
27a34     97 08 48 FB | 	callpa	#(@LR__3662-@LR__3661)>>2,fcache_load_ptr_
27a38                 | LR__3661
27a38     17 2C 2E F4 | 	testbn	local04, #23 wz
27a3c     01 2C 66 A0 |  if_e	shl	local04, #1
27a40     01 2A 06 A1 |  if_e	add	local03, #1
27a44     F0 FF 9F AD |  if_e	jmp	#LR__3661
27a48                 | LR__3662
27a48                 | LR__3663
27a48     0E 2C 62 FD | 	qlog	local04
27a4c     01 2A 86 F1 | 	sub	local03, #1
27a50     15 13 52 F6 | 	abs	arg01, local03 wc
27a54     1F 30 C6 C9 |  if_b	decod	local06, #31
27a58     00 30 06 36 |  if_ae	mov	local06, #0
27a5c     18 2E 62 FD | 	getqx	local05
27a60     9B 2E 06 F4 | 	bitl	local05, #155
27a64     08 2E 06 F1 | 	add	local05, #8
27a68     04 2E 46 F0 | 	shr	local05, #4
27a6c     00 C0 1F FF 
27a70     00 2E 06 F1 | 	add	local05, ##1065353216
27a74     10 ED BF FD | 	call	#__system___float_fromuns
27a78     18 FB 61 F5 | 	xor	result1, local06
27a7c     FD 14 02 F6 | 	mov	arg02, result1
27a80     17 13 02 F6 | 	mov	arg01, local05
27a84     34 ED BF FD | 	call	#__system___float_add
27a88                 | LR__3664
27a88     A7 F0 03 F6 | 	mov	ptra, fp
27a8c     B2 00 A0 FD | 	call	#popregs_
27a90                 | __system____builtin_log2f_ret
27a90     2D 00 64 FD | 	ret
27a94                 | 
27a94                 | __system____builtin_powf
27a94     04 4A 05 F6 | 	mov	COUNT_, #4
27a98     A8 00 A0 FD | 	call	#pushregs_
27a9c     09 27 02 F6 | 	mov	local01, arg01
27aa0     0A 29 02 F6 | 	mov	local02, arg02
27aa4     14 13 02 F6 | 	mov	arg01, local02
27aa8     00 14 06 F6 | 	mov	arg02, #0
27aac     A4 F5 BF FD | 	call	#__system___float_tointeger
27ab0     FD 2A 02 F6 | 	mov	local03, result1
27ab4     15 13 52 F6 | 	abs	arg01, local03 wc
27ab8     1F 2C C6 C9 |  if_b	decod	local04, #31
27abc     00 2C 06 36 |  if_ae	mov	local04, #0
27ac0     C4 EC BF FD | 	call	#__system___float_fromuns
27ac4     16 FB 61 F5 | 	xor	result1, local04
27ac8     FD 12 02 F6 | 	mov	arg01, result1
27acc     14 15 02 F6 | 	mov	arg02, local02
27ad0     01 16 06 F6 | 	mov	arg03, #1
27ad4     E8 F4 BF FD | 	call	#__system___float_cmp
27ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
27adc     18 00 90 5D |  if_ne	jmp	#LR__3670
27ae0     00 C0 1F FF 
27ae4     00 12 06 F6 | 	mov	arg01, ##1065353216
27ae8     13 15 02 F6 | 	mov	arg02, local01
27aec     15 17 02 F6 | 	mov	arg03, local03
27af0     A0 00 B0 FD | 	call	#__system___float_pow_n
27af4     58 00 90 FD | 	jmp	#LR__3671
27af8                 | LR__3670
27af8     13 13 02 F6 | 	mov	arg01, local01
27afc     00 14 06 F6 | 	mov	arg02, #0
27b00     01 16 06 F6 | 	mov	arg03, #1
27b04     B8 F4 BF FD | 	call	#__system___float_cmp
27b08     00 FA 55 F2 | 	cmps	result1, #0 wc
27b0c     00 E0 3F CF 
27b10     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
27b14     38 00 90 CD |  if_b	jmp	#LR__3671
27b18     13 13 02 F6 | 	mov	arg01, local01
27b1c     00 14 06 F6 | 	mov	arg02, #0
27b20     01 16 06 F6 | 	mov	arg03, #1
27b24     98 F4 BF FD | 	call	#__system___float_cmp
27b28     00 FA 0D F2 | 	cmp	result1, #0 wz
27b2c     00 FA 05 A6 |  if_e	mov	result1, #0
27b30     1C 00 90 AD |  if_e	jmp	#LR__3671
27b34     13 13 02 F6 | 	mov	arg01, local01
27b38     20 FE BF FD | 	call	#__system____builtin_log2f
27b3c     FD 12 02 F6 | 	mov	arg01, result1
27b40     14 15 02 F6 | 	mov	arg02, local02
27b44     44 F0 BF FD | 	call	#__system___float_mul
27b48     FD 12 02 F6 | 	mov	arg01, result1
27b4c     F8 FC BF FD | 	call	#__system____builtin_exp2f
27b50                 | LR__3671
27b50     A7 F0 03 F6 | 	mov	ptra, fp
27b54     B2 00 A0 FD | 	call	#popregs_
27b58                 | __system____builtin_powf_ret
27b58     2D 00 64 FD | 	ret
27b5c                 | 
27b5c                 | __system____builtin_logbase
27b5c     02 4A 05 F6 | 	mov	COUNT_, #2
27b60     A8 00 A0 FD | 	call	#pushregs_
27b64     09 27 02 F6 | 	mov	local01, arg01
27b68     0A 13 02 F6 | 	mov	arg01, arg02
27b6c     EC FD BF FD | 	call	#__system____builtin_log2f
27b70     FD 28 02 F6 | 	mov	local02, result1
27b74     13 13 02 F6 | 	mov	arg01, local01
27b78     E0 FD BF FD | 	call	#__system____builtin_log2f
27b7c     FD 14 02 F6 | 	mov	arg02, result1
27b80     14 13 02 F6 | 	mov	arg01, local02
27b84     08 F2 BF FD | 	call	#__system___float_div
27b88     A7 F0 03 F6 | 	mov	ptra, fp
27b8c     B2 00 A0 FD | 	call	#popregs_
27b90                 | __system____builtin_logbase_ret
27b90     2D 00 64 FD | 	ret
27b94                 | 
27b94                 | __system___float_pow_n
27b94     05 4A 05 F6 | 	mov	COUNT_, #5
27b98     A8 00 A0 FD | 	call	#pushregs_
27b9c     09 27 02 F6 | 	mov	local01, arg01
27ba0     0A 29 02 F6 | 	mov	local02, arg02
27ba4     0B 2B 02 F6 | 	mov	local03, arg03
27ba8     00 2A 56 F2 | 	cmps	local03, #0 wc
27bac     18 00 90 3D |  if_ae	jmp	#LR__3680
27bb0     01 2C 06 F6 | 	mov	local04, #1
27bb4     15 2B 62 F6 | 	neg	local03, local03
27bb8     00 2A 56 F2 | 	cmps	local03, #0 wc
27bbc     00 FA 05 C6 |  if_b	mov	result1, #0
27bc0     94 00 90 CD |  if_b	jmp	#LR__3688
27bc4     04 00 90 FD | 	jmp	#LR__3681
27bc8                 | LR__3680
27bc8     00 2C 06 F6 | 	mov	local04, #0
27bcc                 | LR__3681
27bcc     00 C0 1F FF 
27bd0     00 2E 06 F6 | 	mov	local05, ##1065353216
27bd4                 | LR__3682
27bd4     01 2A 56 F2 | 	cmps	local03, #1 wc
27bd8     30 00 90 CD |  if_b	jmp	#LR__3684
27bdc     01 2A CE F7 | 	test	local03, #1 wz
27be0     10 00 90 AD |  if_e	jmp	#LR__3683
27be4     17 13 02 F6 | 	mov	arg01, local05
27be8     14 15 02 F6 | 	mov	arg02, local02
27bec     9C EF BF FD | 	call	#__system___float_mul
27bf0     FD 2E 02 F6 | 	mov	local05, result1
27bf4                 | LR__3683
27bf4     01 2A C6 F0 | 	sar	local03, #1
27bf8     14 13 02 F6 | 	mov	arg01, local02
27bfc     14 15 02 F6 | 	mov	arg02, local02
27c00     88 EF BF FD | 	call	#__system___float_mul
27c04     FD 28 02 F6 | 	mov	local02, result1
27c08     C8 FF 9F FD | 	jmp	#LR__3682
27c0c                 | LR__3684
27c0c     00 2C 0E F2 | 	cmp	local04, #0 wz
27c10     14 00 90 AD |  if_e	jmp	#LR__3685
27c14     13 13 02 F6 | 	mov	arg01, local01
27c18     17 15 02 F6 | 	mov	arg02, local05
27c1c     70 F1 BF FD | 	call	#__system___float_div
27c20     FD 2E 02 F6 | 	mov	local05, result1
27c24     2C 00 90 FD | 	jmp	#LR__3687
27c28                 | LR__3685
27c28     13 13 02 F6 | 	mov	arg01, local01
27c2c     00 C0 1F FF 
27c30     00 14 06 F6 | 	mov	arg02, ##1065353216
27c34     01 16 06 F6 | 	mov	arg03, #1
27c38     84 F3 BF FD | 	call	#__system___float_cmp
27c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
27c40     10 00 90 AD |  if_e	jmp	#LR__3686
27c44     13 13 02 F6 | 	mov	arg01, local01
27c48     17 15 02 F6 | 	mov	arg02, local05
27c4c     3C EF BF FD | 	call	#__system___float_mul
27c50     FD 2E 02 F6 | 	mov	local05, result1
27c54                 | LR__3686
27c54                 | LR__3687
27c54     17 FB 01 F6 | 	mov	result1, local05
27c58                 | LR__3688
27c58     A7 F0 03 F6 | 	mov	ptra, fp
27c5c     B2 00 A0 FD | 	call	#popregs_
27c60                 | __system___float_pow_n_ret
27c60     2D 00 64 FD | 	ret
27c64                 | 
27c64                 | __system___gc_ptrs
27c64     EC 00 02 F6 | 	mov	_var01, __heap_ptr
27c68     00 03 02 F6 | 	mov	_var02, _var01
27c6c     BB 00 00 FF 
27c70     F8 02 06 F1 | 	add	_var02, ##95992
27c74     00 FD 09 FB | 	rdlong	result2, _var01 wz
27c78     74 00 90 5D |  if_ne	jmp	#LR__3690
27c7c     01 FD 01 F6 | 	mov	result2, _var02
27c80     00 FD 81 F1 | 	sub	result2, _var01
27c84     00 03 58 FC | 	wrword	#1, _var01
27c88     00 FB 01 F6 | 	mov	result1, _var01
27c8c     02 FA 05 F1 | 	add	result1, #2
27c90     36 00 80 FF 
27c94     FD 20 59 FC | 	wrword	##27792, result1
27c98     00 FB 01 F6 | 	mov	result1, _var01
27c9c     04 FA 05 F1 | 	add	result1, #4
27ca0     FD 00 58 FC | 	wrword	#0, result1
27ca4     00 FB 01 F6 | 	mov	result1, _var01
27ca8     06 FA 05 F1 | 	add	result1, #6
27cac     FD 02 58 FC | 	wrword	#1, result1
27cb0     10 00 06 F1 | 	add	_var01, #16
27cb4     FE FC 51 F6 | 	abs	result2, result2 wc
27cb8     04 FC 45 F0 | 	shr	result2, #4
27cbc     FE FC 81 F6 | 	negc	result2, result2
27cc0     00 FD 51 FC | 	wrword	result2, _var01
27cc4     00 FD 01 F6 | 	mov	result2, _var01
27cc8     02 FC 05 F1 | 	add	result2, #2
27ccc     36 00 80 FF 
27cd0     FE 1E 59 FC | 	wrword	##27791, result2
27cd4     00 FD 01 F6 | 	mov	result2, _var01
27cd8     04 FC 05 F1 | 	add	result2, #4
27cdc     FE 00 58 FC | 	wrword	#0, result2
27ce0     00 FD 01 F6 | 	mov	result2, _var01
27ce4     06 FC 05 F1 | 	add	result2, #6
27ce8     FE 00 58 FC | 	wrword	#0, result2
27cec     10 00 86 F1 | 	sub	_var01, #16
27cf0                 | LR__3690
27cf0     00 FB 01 F6 | 	mov	result1, _var01
27cf4     01 FD 01 F6 | 	mov	result2, _var02
27cf8                 | __system___gc_ptrs_ret
27cf8     2D 00 64 FD | 	ret
27cfc                 | 
27cfc                 | __system___gc_tryalloc
27cfc     0B 4A 05 F6 | 	mov	COUNT_, #11
27d00     A8 00 A0 FD | 	call	#pushregs_
27d04     09 27 02 F6 | 	mov	local01, arg01
27d08     0A 29 02 F6 | 	mov	local02, arg02
27d0c     54 FF BF FD | 	call	#__system___gc_ptrs
27d10     FD 2A 02 F6 | 	mov	local03, result1
27d14     FE 2C 02 F6 | 	mov	local04, result2
27d18     15 2F 02 F6 | 	mov	local05, local03
27d1c     00 30 06 F6 | 	mov	local06, #0
27d20     97 1E 48 FB | 	callpa	#(@LR__3701-@LR__3700)>>2,fcache_load_ptr_
27d24                 | LR__3700
27d24     17 33 02 F6 | 	mov	local07, local05
27d28     06 2E 06 F1 | 	add	local05, #6
27d2c     17 15 EA FA | 	rdword	arg02, local05 wz
27d30     15 13 02 F6 | 	mov	arg01, local03
27d34     00 FA 05 A6 |  if_e	mov	result1, #0
27d38     04 14 66 50 |  if_ne	shl	arg02, #4
27d3c     0A 13 02 51 |  if_ne	add	arg01, arg02
27d40     09 FB 01 56 |  if_ne	mov	result1, arg01
27d44     FD 2E 0A F6 | 	mov	local05, result1 wz
27d48     17 31 E2 5A |  if_ne	rdword	local06, local05
27d4c     00 2E 0E F2 | 	cmp	local05, #0 wz
27d50     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
27d54     08 00 90 1D |  if_a	jmp	#LR__3702
27d58     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
27d5c     C4 FF 9F 1D |  if_a	jmp	#LR__3700
27d60                 | LR__3701
27d60                 | LR__3702
27d60     00 2E 0E F2 | 	cmp	local05, #0 wz
27d64     17 FB 01 A6 |  if_e	mov	result1, local05
27d68     3C 01 90 AD |  if_e	jmp	#LR__3705
27d6c     17 FD 01 F6 | 	mov	result2, local05
27d70     06 FC 05 F1 | 	add	result2, #6
27d74     FE 34 E2 FA | 	rdword	local08, result2
27d78     18 27 52 F2 | 	cmps	local01, local06 wc
27d7c     C0 00 90 3D |  if_ae	jmp	#LR__3704
27d80     17 27 52 FC | 	wrword	local01, local05
27d84     17 13 02 F6 | 	mov	arg01, local05
27d88     13 35 02 F6 | 	mov	local08, local01
27d8c     04 34 66 F0 | 	shl	local08, #4
27d90     1A 13 02 F1 | 	add	arg01, local08
27d94     13 31 82 F1 | 	sub	local06, local01
27d98     09 31 52 FC | 	wrword	local06, arg01
27d9c     09 35 02 F6 | 	mov	local08, arg01
27da0     02 34 06 F1 | 	add	local08, #2
27da4     36 00 80 FF 
27da8     1A 1F 59 FC | 	wrword	##27791, local08
27dac     17 15 0A F6 | 	mov	arg02, local05 wz
27db0     00 FA 05 A6 |  if_e	mov	result1, #0
27db4     15 15 82 51 |  if_ne	sub	arg02, local03
27db8     04 14 46 50 |  if_ne	shr	arg02, #4
27dbc     0A FB 01 56 |  if_ne	mov	result1, arg02
27dc0     09 35 02 F6 | 	mov	local08, arg01
27dc4     04 34 06 F1 | 	add	local08, #4
27dc8     1A FB 51 FC | 	wrword	result1, local08
27dcc     17 35 02 F6 | 	mov	local08, local05
27dd0     06 34 06 F1 | 	add	local08, #6
27dd4     09 15 02 F6 | 	mov	arg02, arg01
27dd8     1A 35 E2 FA | 	rdword	local08, local08
27ddc     06 14 06 F1 | 	add	arg02, #6
27de0     0A 35 52 FC | 	wrword	local08, arg02
27de4     09 37 02 F6 | 	mov	local09, arg01
27de8     1B 15 0A F6 | 	mov	arg02, local09 wz
27dec     00 FA 05 A6 |  if_e	mov	result1, #0
27df0     15 15 82 51 |  if_ne	sub	arg02, local03
27df4     04 14 46 50 |  if_ne	shr	arg02, #4
27df8     0A FB 01 56 |  if_ne	mov	result1, arg02
27dfc     FD 34 02 F6 | 	mov	local08, result1
27e00     09 39 EA FA | 	rdword	local10, arg01 wz
27e04     00 FA 05 A6 |  if_e	mov	result1, #0
27e08     04 38 66 50 |  if_ne	shl	local10, #4
27e0c     1C 13 02 51 |  if_ne	add	arg01, local10
27e10     09 FB 01 56 |  if_ne	mov	result1, arg01
27e14     FD 3A 0A F6 | 	mov	local11, result1 wz
27e18     24 00 90 AD |  if_e	jmp	#LR__3703
27e1c     16 3B 52 F2 | 	cmps	local11, local04 wc
27e20     1C 00 90 3D |  if_ae	jmp	#LR__3703
27e24     1B 15 0A F6 | 	mov	arg02, local09 wz
27e28     00 FA 05 A6 |  if_e	mov	result1, #0
27e2c     15 15 82 51 |  if_ne	sub	arg02, local03
27e30     04 14 46 50 |  if_ne	shr	arg02, #4
27e34     0A FB 01 56 |  if_ne	mov	result1, arg02
27e38     04 3A 06 F1 | 	add	local11, #4
27e3c     1D FB 51 FC | 	wrword	result1, local11
27e40                 | LR__3703
27e40                 | LR__3704
27e40     06 32 06 F1 | 	add	local07, #6
27e44     19 35 52 FC | 	wrword	local08, local07
27e48     36 00 00 FF 
27e4c     80 36 06 F6 | 	mov	local09, ##27776
27e50     14 37 42 F5 | 	or	local09, local02
27e54     00 FA 05 F6 | 	mov	result1, #0
27e58     01 FA 61 FD | 	cogid	result1
27e5c     FD 36 42 F5 | 	or	local09, result1
27e60     17 3B 02 F6 | 	mov	local11, local05
27e64     02 3A 06 F1 | 	add	local11, #2
27e68     1D 37 52 FC | 	wrword	local09, local11
27e6c     15 37 02 F6 | 	mov	local09, local03
27e70     08 36 06 F1 | 	add	local09, #8
27e74     17 3B 02 F6 | 	mov	local11, local05
27e78     1B 37 E2 FA | 	rdword	local09, local09
27e7c     06 3A 06 F1 | 	add	local11, #6
27e80     1D 37 52 FC | 	wrword	local09, local11
27e84     17 15 0A F6 | 	mov	arg02, local05 wz
27e88     00 FA 05 A6 |  if_e	mov	result1, #0
27e8c     15 15 82 51 |  if_ne	sub	arg02, local03
27e90     04 14 46 50 |  if_ne	shr	arg02, #4
27e94     0A FB 01 56 |  if_ne	mov	result1, arg02
27e98     08 2A 06 F1 | 	add	local03, #8
27e9c     15 FB 51 FC | 	wrword	result1, local03
27ea0     08 2E 06 F1 | 	add	local05, #8
27ea4     17 FB 01 F6 | 	mov	result1, local05
27ea8                 | LR__3705
27ea8     A7 F0 03 F6 | 	mov	ptra, fp
27eac     B2 00 A0 FD | 	call	#popregs_
27eb0                 | __system___gc_tryalloc_ret
27eb0     2D 00 64 FD | 	ret
27eb4                 | 
27eb4                 | __system___gc_alloc_managed
27eb4     01 4A 05 F6 | 	mov	COUNT_, #1
27eb8     A8 00 A0 FD | 	call	#pushregs_
27ebc     09 27 02 F6 | 	mov	local01, arg01
27ec0     00 14 06 F6 | 	mov	arg02, #0
27ec4     1C 00 B0 FD | 	call	#__system___gc_doalloc
27ec8     FD 14 0A F6 | 	mov	arg02, result1 wz
27ecc     01 26 56 A2 |  if_e	cmps	local01, #1 wc
27ed0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
27ed4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
27ed8     A7 F0 03 F6 | 	mov	ptra, fp
27edc     B2 00 A0 FD | 	call	#popregs_
27ee0                 | __system___gc_alloc_managed_ret
27ee0     2D 00 64 FD | 	ret
27ee4                 | 
27ee4                 | __system___gc_doalloc
27ee4     06 4A 05 F6 | 	mov	COUNT_, #6
27ee8     A8 00 A0 FD | 	call	#pushregs_
27eec     09 27 0A F6 | 	mov	local01, arg01 wz
27ef0     0A 29 02 F6 | 	mov	local02, arg02
27ef4     00 FA 05 A6 |  if_e	mov	result1, #0
27ef8     8C 00 90 AD |  if_e	jmp	#LR__3717
27efc     17 26 06 F1 | 	add	local01, #23
27f00     0F 26 26 F5 | 	andn	local01, #15
27f04     04 26 46 F0 | 	shr	local01, #4
27f08     1C E6 05 F1 | 	add	ptr___system__dat__, #28
27f0c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27f10     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
27f14     FC BD BF FD | 	call	#__system___lockmem
27f18     13 13 02 F6 | 	mov	arg01, local01
27f1c     14 15 02 F6 | 	mov	arg02, local02
27f20     D8 FD BF FD | 	call	#__system___gc_tryalloc
27f24     FD 2A 0A F6 | 	mov	local03, result1 wz
27f28     14 00 90 5D |  if_ne	jmp	#LR__3710
27f2c     70 03 B0 FD | 	call	#__system___gc_docollect
27f30     13 13 02 F6 | 	mov	arg01, local01
27f34     14 15 02 F6 | 	mov	arg02, local02
27f38     C0 FD BF FD | 	call	#__system___gc_tryalloc
27f3c     FD 2A 02 F6 | 	mov	local03, result1
27f40                 | LR__3710
27f40     1C E6 05 F1 | 	add	ptr___system__dat__, #28
27f44     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27f48     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
27f4c     09 01 68 FC | 	wrlong	#0, arg01
27f50     00 2A 0E F2 | 	cmp	local03, #0 wz
27f54     2C 00 90 AD |  if_e	jmp	#LR__3716
27f58     04 26 66 F0 | 	shl	local01, #4
27f5c     08 26 86 F1 | 	sub	local01, #8
27f60     13 2D 52 F6 | 	abs	local04, local01 wc
27f64     02 2C 46 F0 | 	shr	local04, #2
27f68     16 2F 8A F6 | 	negc	local05, local04 wz
27f6c     15 31 02 F6 | 	mov	local06, local03
27f70     10 00 90 AD |  if_e	jmp	#LR__3715
27f74     97 06 48 FB | 	callpa	#(@LR__3713-@LR__3711)>>2,fcache_load_ptr_
27f78                 | LR__3711
27f78     17 05 D8 FC | 	rep	@LR__3714, local05
27f7c                 | LR__3712
27f7c     18 01 68 FC | 	wrlong	#0, local06
27f80     04 30 06 F1 | 	add	local06, #4
27f84                 | LR__3713
27f84                 | LR__3714
27f84                 | LR__3715
27f84                 | LR__3716
27f84     15 FB 01 F6 | 	mov	result1, local03
27f88                 | LR__3717
27f88     A7 F0 03 F6 | 	mov	ptra, fp
27f8c     B2 00 A0 FD | 	call	#popregs_
27f90                 | __system___gc_doalloc_ret
27f90     2D 00 64 FD | 	ret
27f94                 | 
27f94                 | __system___gc_isvalidptr
27f94     F8 16 06 F4 | 	bitl	arg03, #248
27f98     08 16 86 F1 | 	sub	arg03, #8
27f9c     09 17 52 F2 | 	cmps	arg03, arg01 wc
27fa0     08 00 90 CD |  if_b	jmp	#LR__3720
27fa4     0A 17 52 F2 | 	cmps	arg03, arg02 wc
27fa8     08 00 90 CD |  if_b	jmp	#LR__3721
27fac                 | LR__3720
27fac     00 FA 05 F6 | 	mov	result1, #0
27fb0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
27fb4                 | LR__3721
27fb4     0B 01 02 F6 | 	mov	_var01, arg03
27fb8     09 01 62 F5 | 	xor	_var01, arg01
27fbc     0F 00 CE F7 | 	test	_var01, #15 wz
27fc0     00 FA 05 56 |  if_ne	mov	result1, #0
27fc4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
27fc8     0B 01 02 F6 | 	mov	_var01, arg03
27fcc     02 00 06 F1 | 	add	_var01, #2
27fd0     00 01 E2 FA | 	rdword	_var01, _var01
27fd4     7F 00 00 FF 
27fd8     C0 01 06 F5 | 	and	_var01, ##65472
27fdc     36 00 00 FF 
27fe0     80 00 0E F2 | 	cmp	_var01, ##27776 wz
27fe4     00 FA 05 56 |  if_ne	mov	result1, #0
27fe8     0B FB 01 A6 |  if_e	mov	result1, arg03
27fec                 | __system___gc_isvalidptr_ret
27fec     2D 00 64 FD | 	ret
27ff0                 | 
27ff0                 | __system___gc_free
27ff0     09 17 02 F6 | 	mov	arg03, arg01
27ff4     6C FC BF FD | 	call	#__system___gc_ptrs
27ff8     FD 12 02 F6 | 	mov	arg01, result1
27ffc     FE 14 02 F6 | 	mov	arg02, result2
28000     90 FF BF FD | 	call	#__system___gc_isvalidptr
28004     FD 14 0A F6 | 	mov	arg02, result1 wz
28008     28 00 90 AD |  if_e	jmp	#LR__3730
2800c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
28010     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28014     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
28018     F8 BC BF FD | 	call	#__system___lockmem
2801c     0A 13 02 F6 | 	mov	arg01, arg02
28020     14 00 B0 FD | 	call	#__system___gc_dofree
28024     1C E6 05 F1 | 	add	ptr___system__dat__, #28
28028     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2802c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
28030     09 01 68 FC | 	wrlong	#0, arg01
28034                 | LR__3730
28034                 | __system___gc_free_ret
28034     2D 00 64 FD | 	ret
28038                 | 
28038                 | __system___gc_dofree
28038     06 4A 05 F6 | 	mov	COUNT_, #6
2803c     A8 00 A0 FD | 	call	#pushregs_
28040     09 27 02 F6 | 	mov	local01, arg01
28044     1C FC BF FD | 	call	#__system___gc_ptrs
28048     FD 28 02 F6 | 	mov	local02, result1
2804c     FE 2A 02 F6 | 	mov	local03, result2
28050     13 15 02 F6 | 	mov	arg02, local01
28054     02 14 06 F1 | 	add	arg02, #2
28058     36 00 80 FF 
2805c     0A 1F 59 FC | 	wrword	##27791, arg02
28060     13 2D 02 F6 | 	mov	local04, local01
28064     13 13 02 F6 | 	mov	arg01, local01
28068     09 2F EA FA | 	rdword	local05, arg01 wz
2806c     00 FA 05 A6 |  if_e	mov	result1, #0
28070     04 2E 66 50 |  if_ne	shl	local05, #4
28074     17 13 02 51 |  if_ne	add	arg01, local05
28078     09 FB 01 56 |  if_ne	mov	result1, arg01
2807c     FD 30 02 F6 | 	mov	local06, result1
28080     97 24 48 FB | 	callpa	#(@LR__3741-@LR__3740)>>2,fcache_load_ptr_
28084                 | LR__3740
28084     04 2C 06 F1 | 	add	local04, #4
28088     16 15 EA FA | 	rdword	arg02, local04 wz
2808c     14 13 02 F6 | 	mov	arg01, local02
28090     00 FA 05 A6 |  if_e	mov	result1, #0
28094     04 14 66 50 |  if_ne	shl	arg02, #4
28098     0A 13 02 51 |  if_ne	add	arg01, arg02
2809c     09 FB 01 56 |  if_ne	mov	result1, arg01
280a0     FD 2C 0A F6 | 	mov	local04, result1 wz
280a4     24 00 90 AD |  if_e	jmp	#LR__3742
280a8     16 13 02 F6 | 	mov	arg01, local04
280ac     00 FA 05 F6 | 	mov	result1, #0
280b0     02 12 06 F1 | 	add	arg01, #2
280b4     09 13 E2 FA | 	rdword	arg01, arg01
280b8     36 00 00 FF 
280bc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
280c0     01 FA 65 A6 |  if_e	neg	result1, #1
280c4     00 FA 0D F2 | 	cmp	result1, #0 wz
280c8     B8 FF 9F AD |  if_e	jmp	#LR__3740
280cc                 | LR__3741
280cc                 | LR__3742
280cc     00 2C 0E F2 | 	cmp	local04, #0 wz
280d0     14 2D 02 A6 |  if_e	mov	local04, local02
280d4     16 15 02 F6 | 	mov	arg02, local04
280d8     06 14 06 F1 | 	add	arg02, #6
280dc     13 13 02 F6 | 	mov	arg01, local01
280e0     0A 15 E2 FA | 	rdword	arg02, arg02
280e4     06 12 06 F1 | 	add	arg01, #6
280e8     09 15 52 FC | 	wrword	arg02, arg01
280ec     13 15 0A F6 | 	mov	arg02, local01 wz
280f0     00 FA 05 A6 |  if_e	mov	result1, #0
280f4     14 15 82 51 |  if_ne	sub	arg02, local02
280f8     04 14 46 50 |  if_ne	shr	arg02, #4
280fc     0A FB 01 56 |  if_ne	mov	result1, arg02
28100     16 15 02 F6 | 	mov	arg02, local04
28104     06 14 06 F1 | 	add	arg02, #6
28108     0A FB 51 FC | 	wrword	result1, arg02
2810c     14 2D 0A F2 | 	cmp	local04, local02 wz
28110     A4 00 90 AD |  if_e	jmp	#LR__3745
28114     16 13 02 F6 | 	mov	arg01, local04
28118     09 2F EA FA | 	rdword	local05, arg01 wz
2811c     00 FA 05 A6 |  if_e	mov	result1, #0
28120     04 2E 66 50 |  if_ne	shl	local05, #4
28124     17 13 02 51 |  if_ne	add	arg01, local05
28128     09 FB 01 56 |  if_ne	mov	result1, arg01
2812c     13 FB 09 F2 | 	cmp	result1, local01 wz
28130     84 00 90 5D |  if_ne	jmp	#LR__3744
28134     16 31 E2 FA | 	rdword	local06, local04
28138     13 15 E2 FA | 	rdword	arg02, local01
2813c     0A 31 02 F1 | 	add	local06, arg02
28140     16 31 52 FC | 	wrword	local06, local04
28144     13 31 02 F6 | 	mov	local06, local01
28148     02 30 06 F1 | 	add	local06, #2
2814c     18 01 58 FC | 	wrword	#0, local06
28150     13 13 02 F6 | 	mov	arg01, local01
28154     09 2F EA FA | 	rdword	local05, arg01 wz
28158     00 FA 05 A6 |  if_e	mov	result1, #0
2815c     04 2E 66 50 |  if_ne	shl	local05, #4
28160     17 13 02 51 |  if_ne	add	arg01, local05
28164     09 FB 01 56 |  if_ne	mov	result1, arg01
28168     FD 30 02 F6 | 	mov	local06, result1
2816c     15 31 52 F2 | 	cmps	local06, local03 wc
28170     20 00 90 3D |  if_ae	jmp	#LR__3743
28174     16 15 0A F6 | 	mov	arg02, local04 wz
28178     00 FA 05 A6 |  if_e	mov	result1, #0
2817c     14 15 82 51 |  if_ne	sub	arg02, local02
28180     04 14 46 50 |  if_ne	shr	arg02, #4
28184     0A FB 01 56 |  if_ne	mov	result1, arg02
28188     18 15 02 F6 | 	mov	arg02, local06
2818c     04 14 06 F1 | 	add	arg02, #4
28190     0A FB 51 FC | 	wrword	result1, arg02
28194                 | LR__3743
28194     13 15 02 F6 | 	mov	arg02, local01
28198     06 14 06 F1 | 	add	arg02, #6
2819c     16 FD 01 F6 | 	mov	result2, local04
281a0     0A 15 E2 FA | 	rdword	arg02, arg02
281a4     06 FC 05 F1 | 	add	result2, #6
281a8     FE 14 52 FC | 	wrword	arg02, result2
281ac     06 26 06 F1 | 	add	local01, #6
281b0     13 01 58 FC | 	wrword	#0, local01
281b4     16 27 02 F6 | 	mov	local01, local04
281b8                 | LR__3744
281b8                 | LR__3745
281b8     13 13 02 F6 | 	mov	arg01, local01
281bc     09 2F EA FA | 	rdword	local05, arg01 wz
281c0     00 FA 05 A6 |  if_e	mov	result1, #0
281c4     04 2E 66 50 |  if_ne	shl	local05, #4
281c8     17 13 02 51 |  if_ne	add	arg01, local05
281cc     09 FB 01 56 |  if_ne	mov	result1, arg01
281d0     FD 14 0A F6 | 	mov	arg02, result1 wz
281d4     B8 00 90 AD |  if_e	jmp	#LR__3747
281d8     15 15 52 F2 | 	cmps	arg02, local03 wc
281dc     B0 00 90 3D |  if_ae	jmp	#LR__3747
281e0     0A 13 02 F6 | 	mov	arg01, arg02
281e4     00 FA 05 F6 | 	mov	result1, #0
281e8     02 12 06 F1 | 	add	arg01, #2
281ec     09 13 E2 FA | 	rdword	arg01, arg01
281f0     36 00 00 FF 
281f4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
281f8     01 FA 65 A6 |  if_e	neg	result1, #1
281fc     00 FA 0D F2 | 	cmp	result1, #0 wz
28200     8C 00 90 AD |  if_e	jmp	#LR__3747
28204     13 2D 02 F6 | 	mov	local04, local01
28208     16 31 E2 FA | 	rdword	local06, local04
2820c     0A 13 02 F6 | 	mov	arg01, arg02
28210     09 27 E2 FA | 	rdword	local01, arg01
28214     13 31 02 F1 | 	add	local06, local01
28218     16 31 52 FC | 	wrword	local06, local04
2821c     09 31 02 F6 | 	mov	local06, arg01
28220     06 30 06 F1 | 	add	local06, #6
28224     16 27 02 F6 | 	mov	local01, local04
28228     18 31 E2 FA | 	rdword	local06, local06
2822c     06 26 06 F1 | 	add	local01, #6
28230     13 31 52 FC | 	wrword	local06, local01
28234     09 31 02 F6 | 	mov	local06, arg01
28238     02 30 06 F1 | 	add	local06, #2
2823c     18 55 59 FC | 	wrword	#170, local06
28240     09 31 02 F6 | 	mov	local06, arg01
28244     06 30 06 F1 | 	add	local06, #6
28248     18 01 58 FC | 	wrword	#0, local06
2824c     09 2F EA FA | 	rdword	local05, arg01 wz
28250     00 FA 05 A6 |  if_e	mov	result1, #0
28254     04 2E 66 50 |  if_ne	shl	local05, #4
28258     17 13 02 51 |  if_ne	add	arg01, local05
2825c     09 FB 01 56 |  if_ne	mov	result1, arg01
28260     FD 30 0A F6 | 	mov	local06, result1 wz
28264     28 00 90 AD |  if_e	jmp	#LR__3746
28268     15 31 52 F2 | 	cmps	local06, local03 wc
2826c     20 00 90 3D |  if_ae	jmp	#LR__3746
28270     16 15 0A F6 | 	mov	arg02, local04 wz
28274     00 FA 05 A6 |  if_e	mov	result1, #0
28278     14 15 82 51 |  if_ne	sub	arg02, local02
2827c     04 14 46 50 |  if_ne	shr	arg02, #4
28280     0A FB 01 56 |  if_ne	mov	result1, arg02
28284     18 2D 02 F6 | 	mov	local04, local06
28288     04 2C 06 F1 | 	add	local04, #4
2828c     16 FB 51 FC | 	wrword	result1, local04
28290                 | LR__3746
28290                 | LR__3747
28290     18 FB 01 F6 | 	mov	result1, local06
28294     A7 F0 03 F6 | 	mov	ptra, fp
28298     B2 00 A0 FD | 	call	#popregs_
2829c                 | __system___gc_dofree_ret
2829c     2D 00 64 FD | 	ret
282a0                 | 
282a0                 | __system___gc_docollect
282a0     05 4A 05 F6 | 	mov	COUNT_, #5
282a4     A8 00 A0 FD | 	call	#pushregs_
282a8     B8 F9 BF FD | 	call	#__system___gc_ptrs
282ac     FE 26 02 F6 | 	mov	local01, result2
282b0     FD 28 02 F6 | 	mov	local02, result1
282b4     14 13 02 F6 | 	mov	arg01, local02
282b8     09 2B EA FA | 	rdword	local03, arg01 wz
282bc     00 FA 05 A6 |  if_e	mov	result1, #0
282c0     04 2A 66 50 |  if_ne	shl	local03, #4
282c4     15 13 02 51 |  if_ne	add	arg01, local03
282c8     09 FB 01 56 |  if_ne	mov	result1, arg01
282cc     FD 2C 0A F6 | 	mov	local04, result1 wz
282d0     00 FA 05 F6 | 	mov	result1, #0
282d4     01 FA 61 FD | 	cogid	result1
282d8     FD 2E 02 F6 | 	mov	local05, result1
282dc     48 00 90 AD |  if_e	jmp	#LR__3752
282e0     97 22 48 FB | 	callpa	#(@LR__3751-@LR__3750)>>2,fcache_load_ptr_
282e4                 | LR__3750
282e4     13 2D 52 F2 | 	cmps	local04, local01 wc
282e8     3C 00 90 3D |  if_ae	jmp	#LR__3752
282ec     16 15 02 F6 | 	mov	arg02, local04
282f0     02 14 06 F1 | 	add	arg02, #2
282f4     0A 15 E2 FA | 	rdword	arg02, arg02
282f8     20 14 26 F5 | 	andn	arg02, #32
282fc     16 13 02 F6 | 	mov	arg01, local04
28300     02 12 06 F1 | 	add	arg01, #2
28304     09 15 52 FC | 	wrword	arg02, arg01
28308     16 13 02 F6 | 	mov	arg01, local04
2830c     09 2B EA FA | 	rdword	local03, arg01 wz
28310     00 FA 05 A6 |  if_e	mov	result1, #0
28314     04 2A 66 50 |  if_ne	shl	local03, #4
28318     15 13 02 51 |  if_ne	add	arg01, local03
2831c     09 FB 01 56 |  if_ne	mov	result1, arg01
28320     FD 2C 0A F6 | 	mov	local04, result1 wz
28324     BC FF 9F 5D |  if_ne	jmp	#LR__3750
28328                 | LR__3751
28328                 | LR__3752
28328     00 2A 06 F6 | 	mov	local03, #0
2832c     00 12 06 F6 | 	mov	arg01, #0
28330     B8 B9 BF FD | 	call	#__system____topofstack
28334     FD 14 02 F6 | 	mov	arg02, result1
28338     15 13 02 F6 | 	mov	arg01, local03
2833c     90 00 B0 FD | 	call	#__system___gc_markhub
28340     1C 01 B0 FD | 	call	#__system___gc_markcog
28344     14 13 02 F6 | 	mov	arg01, local02
28348     09 2B EA FA | 	rdword	local03, arg01 wz
2834c     00 FA 05 A6 |  if_e	mov	result1, #0
28350     04 2A 66 50 |  if_ne	shl	local03, #4
28354     15 13 02 51 |  if_ne	add	arg01, local03
28358     09 FB 01 56 |  if_ne	mov	result1, arg01
2835c     FD 28 0A F6 | 	mov	local02, result1 wz
28360     60 00 90 AD |  if_e	jmp	#LR__3756
28364                 | LR__3753
28364     14 2D 02 F6 | 	mov	local04, local02
28368     16 13 02 F6 | 	mov	arg01, local04
2836c     09 2B EA FA | 	rdword	local03, arg01 wz
28370     00 FA 05 A6 |  if_e	mov	result1, #0
28374     04 2A 66 50 |  if_ne	shl	local03, #4
28378     15 13 02 51 |  if_ne	add	arg01, local03
2837c     09 FB 01 56 |  if_ne	mov	result1, arg01
28380     FD 28 02 F6 | 	mov	local02, result1
28384     16 15 02 F6 | 	mov	arg02, local04
28388     02 14 06 F1 | 	add	arg02, #2
2838c     0A 15 E2 FA | 	rdword	arg02, arg02
28390     20 14 CE F7 | 	test	arg02, #32 wz
28394     10 14 CE A7 |  if_e	test	arg02, #16 wz
28398     1C 00 90 5D |  if_ne	jmp	#LR__3755
2839c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
283a0     17 15 0A F2 | 	cmp	arg02, local05 wz
283a4     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
283a8     0C 00 90 5D |  if_ne	jmp	#LR__3754
283ac     16 13 02 F6 | 	mov	arg01, local04
283b0     84 FC BF FD | 	call	#__system___gc_dofree
283b4     FD 28 02 F6 | 	mov	local02, result1
283b8                 | LR__3754
283b8                 | LR__3755
283b8     00 28 0E F2 | 	cmp	local02, #0 wz
283bc     13 29 52 52 |  if_ne	cmps	local02, local01 wc
283c0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3753
283c4                 | LR__3756
283c4     A7 F0 03 F6 | 	mov	ptra, fp
283c8     B2 00 A0 FD | 	call	#popregs_
283cc                 | __system___gc_docollect_ret
283cc     2D 00 64 FD | 	ret
283d0                 | 
283d0                 | __system___gc_markhub
283d0     04 4A 05 F6 | 	mov	COUNT_, #4
283d4     A8 00 A0 FD | 	call	#pushregs_
283d8     09 27 02 F6 | 	mov	local01, arg01
283dc     0A 29 02 F6 | 	mov	local02, arg02
283e0     80 F8 BF FD | 	call	#__system___gc_ptrs
283e4     FD 2A 02 F6 | 	mov	local03, result1
283e8     FE 2C 02 F6 | 	mov	local04, result2
283ec                 | LR__3760
283ec     14 27 52 F2 | 	cmps	local01, local02 wc
283f0     60 00 90 3D |  if_ae	jmp	#LR__3761
283f4     13 17 02 FB | 	rdlong	arg03, local01
283f8     04 26 06 F1 | 	add	local01, #4
283fc     16 15 02 F6 | 	mov	arg02, local04
28400     15 13 02 F6 | 	mov	arg01, local03
28404     8C FB BF FD | 	call	#__system___gc_isvalidptr
28408     FD 16 0A F6 | 	mov	arg03, result1 wz
2840c     DC FF 9F AD |  if_e	jmp	#LR__3760
28410     0B 13 02 F6 | 	mov	arg01, arg03
28414     00 FA 05 F6 | 	mov	result1, #0
28418     02 12 06 F1 | 	add	arg01, #2
2841c     09 13 E2 FA | 	rdword	arg01, arg01
28420     36 00 00 FF 
28424     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
28428     01 FA 65 A6 |  if_e	neg	result1, #1
2842c     00 FA 0D F2 | 	cmp	result1, #0 wz
28430     B8 FF 9F 5D |  if_ne	jmp	#LR__3760
28434     0B FD 01 F6 | 	mov	result2, arg03
28438     02 FC 05 F1 | 	add	result2, #2
2843c     FE FC E1 FA | 	rdword	result2, result2
28440     0F FC 25 F5 | 	andn	result2, #15
28444     2E FC 45 F5 | 	or	result2, #46
28448     02 16 06 F1 | 	add	arg03, #2
2844c     0B FD 51 FC | 	wrword	result2, arg03
28450     98 FF 9F FD | 	jmp	#LR__3760
28454                 | LR__3761
28454     A7 F0 03 F6 | 	mov	ptra, fp
28458     B2 00 A0 FD | 	call	#popregs_
2845c                 | __system___gc_markhub_ret
2845c     2D 00 64 FD | 	ret
28460                 | 
28460                 | __system___gc_markcog
28460     04 4A 05 F6 | 	mov	COUNT_, #4
28464     A8 00 A0 FD | 	call	#pushregs_
28468     F8 F7 BF FD | 	call	#__system___gc_ptrs
2846c     FD 26 02 F6 | 	mov	local01, result1
28470     FE 28 02 F6 | 	mov	local02, result2
28474     EF 2B 06 F6 | 	mov	local03, #495
28478                 | LR__3770
28478                 | 	'.live	local03
28478     00 2A 96 F9 | 	alts	local03, #0
2847c     15 2D 02 F6 | 	mov	local04, local03
28480     13 13 02 F6 | 	mov	arg01, local01
28484     14 15 02 F6 | 	mov	arg02, local02
28488     16 17 02 F6 | 	mov	arg03, local04
2848c     04 FB BF FD | 	call	#__system___gc_isvalidptr
28490     00 FA 0D F2 | 	cmp	result1, #0 wz
28494     18 00 90 AD |  if_e	jmp	#LR__3771
28498     FD 2C 02 F6 | 	mov	local04, result1
2849c     02 2C 06 F1 | 	add	local04, #2
284a0     16 2D E2 FA | 	rdword	local04, local04
284a4     20 2C 46 F5 | 	or	local04, #32
284a8     02 FA 05 F1 | 	add	result1, #2
284ac     FD 2C 52 FC | 	wrword	local04, result1
284b0                 | LR__3771
284b0     01 2A 86 F1 | 	sub	local03, #1
284b4     00 2A 56 F2 | 	cmps	local03, #0 wc
284b8     BC FF 9F 3D |  if_ae	jmp	#LR__3770
284bc     A7 F0 03 F6 | 	mov	ptra, fp
284c0     B2 00 A0 FD | 	call	#popregs_
284c4                 | __system___gc_markcog_ret
284c4     2D 00 64 FD | 	ret
284c8                 | 
284c8                 | __system__opendir
284c8     06 4A 05 F6 | 	mov	COUNT_, #6
284cc     A8 00 A0 FD | 	call	#pushregs_
284d0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
284d4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
284d8     09 15 02 F6 | 	mov	arg02, arg01
284dc     13 13 02 F6 | 	mov	arg01, local01
284e0     00 16 06 F6 | 	mov	arg03, #0
284e4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
284e8     C0 BF BF FD | 	call	#__system____getvfsforfile
284ec     FD 28 0A F6 | 	mov	local02, result1 wz
284f0     10 00 90 AD |  if_e	jmp	#LR__3780
284f4     28 28 06 F1 | 	add	local02, #40
284f8     14 17 0A FB | 	rdlong	arg03, local02 wz
284fc     28 28 86 F1 | 	sub	local02, #40
28500     14 00 90 5D |  if_ne	jmp	#LR__3781
28504                 | LR__3780
28504     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28508     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2850c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28510     00 FA 05 F6 | 	mov	result1, #0
28514     90 00 90 FD | 	jmp	#LR__3783
28518                 | LR__3781
28518     5C 12 06 F6 | 	mov	arg01, #92
2851c     10 14 06 F6 | 	mov	arg02, #16
28520     C0 F9 BF FD | 	call	#__system___gc_doalloc
28524     FD 2A 0A F6 | 	mov	local03, result1 wz
28528     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2852c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
28530     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28534     00 FA 05 A6 |  if_e	mov	result1, #0
28538     6C 00 90 AD |  if_e	jmp	#LR__3783
2853c     28 28 06 F1 | 	add	local02, #40
28540     14 2D 02 FB | 	rdlong	local04, local02
28544     16 2F 02 F6 | 	mov	local05, local04
28548     28 28 86 F1 | 	sub	local02, #40
2854c     13 2E 46 F7 | 	zerox	local05, #19
28550     14 2C 46 F0 | 	shr	local04, #20
28554     02 2C 66 F0 | 	shl	local04, #2
28558     ED 2C 02 F1 | 	add	local04, __methods__
2855c     16 2D 02 FB | 	rdlong	local04, local04
28560     15 13 02 F6 | 	mov	arg01, local03
28564     13 15 02 F6 | 	mov	arg02, local01
28568     F2 30 02 F6 | 	mov	local06, objptr
2856c     17 E5 01 F6 | 	mov	objptr, local05
28570     2D 2C 62 FD | 	call	local04
28574     18 E5 01 F6 | 	mov	objptr, local06
28578     FD 16 0A F6 | 	mov	arg03, result1 wz
2857c     20 00 90 AD |  if_e	jmp	#LR__3782
28580     00 16 4E F2 | 	cmps	arg03, #0 wz
28584     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28588     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2858c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28590     15 13 02 F6 | 	mov	arg01, local03
28594     58 FA BF FD | 	call	#__system___gc_free
28598     00 FA 05 F6 | 	mov	result1, #0
2859c     08 00 90 FD | 	jmp	#LR__3783
285a0                 | LR__3782
285a0     15 29 62 FC | 	wrlong	local02, local03
285a4     15 FB 01 F6 | 	mov	result1, local03
285a8                 | LR__3783
285a8     A7 F0 03 F6 | 	mov	ptra, fp
285ac     B2 00 A0 FD | 	call	#popregs_
285b0                 | __system__opendir_ret
285b0     2D 00 64 FD | 	ret
285b4                 | 
285b4                 | __system__closedir
285b4     04 4A 05 F6 | 	mov	COUNT_, #4
285b8     A8 00 A0 FD | 	call	#pushregs_
285bc     09 27 02 F6 | 	mov	local01, arg01
285c0     13 13 02 FB | 	rdlong	arg01, local01
285c4     2C 12 06 F1 | 	add	arg01, #44
285c8     09 29 02 FB | 	rdlong	local02, arg01
285cc     14 2B 02 F6 | 	mov	local03, local02
285d0     13 2A 46 F7 | 	zerox	local03, #19
285d4     14 28 46 F0 | 	shr	local02, #20
285d8     02 28 66 F0 | 	shl	local02, #2
285dc     ED 28 02 F1 | 	add	local02, __methods__
285e0     14 29 02 FB | 	rdlong	local02, local02
285e4     13 13 02 F6 | 	mov	arg01, local01
285e8     F2 2C 02 F6 | 	mov	local04, objptr
285ec     15 E5 01 F6 | 	mov	objptr, local03
285f0     2D 28 62 FD | 	call	local02
285f4     16 E5 01 F6 | 	mov	objptr, local04
285f8     FD 2C 02 F6 | 	mov	local04, result1
285fc     13 13 02 F6 | 	mov	arg01, local01
28600     EC F9 BF FD | 	call	#__system___gc_free
28604     00 2C 4E F2 | 	cmps	local04, #0 wz
28608     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2860c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
28610     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28614     01 FA 65 56 |  if_ne	neg	result1, #1
28618     00 FA 05 A6 |  if_e	mov	result1, #0
2861c     A7 F0 03 F6 | 	mov	ptra, fp
28620     B2 00 A0 FD | 	call	#popregs_
28624                 | __system__closedir_ret
28624     2D 00 64 FD | 	ret
28628                 | 
28628                 | __system__readdir
28628     04 4A 05 F6 | 	mov	COUNT_, #4
2862c     A8 00 A0 FD | 	call	#pushregs_
28630     09 15 0A FB | 	rdlong	arg02, arg01 wz
28634     08 12 06 F1 | 	add	arg01, #8
28638     09 27 02 F6 | 	mov	local01, arg01
2863c     08 12 86 F1 | 	sub	arg01, #8
28640     00 FA 05 A6 |  if_e	mov	result1, #0
28644     5C 00 90 AD |  if_e	jmp	#LR__3791
28648     30 14 06 F1 | 	add	arg02, #48
2864c     0A 29 02 FB | 	rdlong	local02, arg02
28650     14 2B 02 F6 | 	mov	local03, local02
28654     13 2A 46 F7 | 	zerox	local03, #19
28658     14 28 46 F0 | 	shr	local02, #20
2865c     02 28 66 F0 | 	shl	local02, #2
28660     ED 28 02 F1 | 	add	local02, __methods__
28664     14 29 02 FB | 	rdlong	local02, local02
28668     13 15 02 F6 | 	mov	arg02, local01
2866c     F2 2C 02 F6 | 	mov	local04, objptr
28670     15 E5 01 F6 | 	mov	objptr, local03
28674     2D 28 62 FD | 	call	local02
28678     16 E5 01 F6 | 	mov	objptr, local04
2867c     00 FA 4D F2 | 	cmps	result1, #0 wz
28680     1C 00 90 AD |  if_e	jmp	#LR__3790
28684     01 FA 55 F2 | 	cmps	result1, #1 wc
28688     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2868c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
28690     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
28694     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
28698     00 FA 05 F6 | 	mov	result1, #0
2869c     04 00 90 FD | 	jmp	#LR__3791
286a0                 | LR__3790
286a0     13 FB 01 F6 | 	mov	result1, local01
286a4                 | LR__3791
286a4     A7 F0 03 F6 | 	mov	ptra, fp
286a8     B2 00 A0 FD | 	call	#popregs_
286ac                 | __system__readdir_ret
286ac     2D 00 64 FD | 	ret
286b0                 | 
286b0                 | __system___openraw
286b0     15 4A 05 F6 | 	mov	COUNT_, #21
286b4     A8 00 A0 FD | 	call	#pushregs_
286b8     09 27 02 F6 | 	mov	local01, arg01
286bc     0A 29 02 F6 | 	mov	local02, arg02
286c0     0B 2B 02 F6 | 	mov	local03, arg03
286c4     0C 2D 02 F6 | 	mov	local04, arg04
286c8     04 2E 06 F6 | 	mov	local05, #4
286cc     13 31 02 F6 | 	mov	local06, local01
286d0     00 32 06 F6 | 	mov	local07, #0
286d4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
286d8     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
286dc     1A 13 02 F6 | 	mov	arg01, local08
286e0     14 15 02 F6 | 	mov	arg02, local02
286e4     00 16 06 F6 | 	mov	arg03, #0
286e8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
286ec     BC BD BF FD | 	call	#__system____getvfsforfile
286f0     FD 36 0A F6 | 	mov	local09, result1 wz
286f4     10 00 90 AD |  if_e	jmp	#LR__3800
286f8     20 36 06 F1 | 	add	local09, #32
286fc     1B FB 09 FB | 	rdlong	result1, local09 wz
28700     20 36 86 F1 | 	sub	local09, #32
28704     14 00 90 5D |  if_ne	jmp	#LR__3801
28708                 | LR__3800
28708     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2870c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28710     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28714     01 FA 65 F6 | 	neg	result1, #1
28718     8C 02 90 FD | 	jmp	#LR__3814
2871c                 | LR__3801
2871c     18 13 02 F6 | 	mov	arg01, local06
28720     00 14 06 F6 | 	mov	arg02, #0
28724     34 16 06 F6 | 	mov	arg03, #52
28728     09 39 02 F6 | 	mov	local10, arg01
2872c     98 00 A0 FD | 	call	#\builtin_bytefill_
28730     20 36 06 F1 | 	add	local09, #32
28734     1B 3B 02 FB | 	rdlong	local11, local09
28738     1D 3D 02 F6 | 	mov	local12, local11
2873c     1D 3F 02 F6 | 	mov	local13, local11
28740     20 36 86 F1 | 	sub	local09, #32
28744     1F 41 02 F6 | 	mov	local14, local13
28748     13 3C 46 F7 | 	zerox	local12, #19
2874c     14 40 46 F0 | 	shr	local14, #20
28750     02 40 66 F0 | 	shl	local14, #2
28754     ED 40 02 F1 | 	add	local14, __methods__
28758     20 41 02 FB | 	rdlong	local14, local14
2875c     18 43 02 F6 | 	mov	local15, local06
28760     1A 45 02 F6 | 	mov	local16, local08
28764     15 47 02 F6 | 	mov	local17, local03
28768     21 13 02 F6 | 	mov	arg01, local15
2876c     22 15 02 F6 | 	mov	arg02, local16
28770     23 17 02 F6 | 	mov	arg03, local17
28774     F2 48 02 F6 | 	mov	local18, objptr
28778     1E E5 01 F6 | 	mov	objptr, local12
2877c     2D 40 62 FD | 	call	local14
28780     24 E5 01 F6 | 	mov	objptr, local18
28784     FD 4A 0A F6 | 	mov	local19, result1 wz
28788     04 2A CE 57 |  if_ne	test	local03, #4 wz
2878c     58 00 90 AD |  if_e	jmp	#LR__3802
28790     24 36 06 F1 | 	add	local09, #36
28794     1B 3B 02 FB | 	rdlong	local11, local09
28798     1D 3D 02 F6 | 	mov	local12, local11
2879c     1D 3F 02 F6 | 	mov	local13, local11
287a0     24 36 86 F1 | 	sub	local09, #36
287a4     1F 41 02 F6 | 	mov	local14, local13
287a8     13 3C 46 F7 | 	zerox	local12, #19
287ac     14 40 46 F0 | 	shr	local14, #20
287b0     02 40 66 F0 | 	shl	local14, #2
287b4     ED 40 02 F1 | 	add	local14, __methods__
287b8     20 41 02 FB | 	rdlong	local14, local14
287bc     18 43 02 F6 | 	mov	local15, local06
287c0     1A 45 02 F6 | 	mov	local16, local08
287c4     16 47 02 F6 | 	mov	local17, local04
287c8     21 13 02 F6 | 	mov	arg01, local15
287cc     22 15 02 F6 | 	mov	arg02, local16
287d0     23 17 02 F6 | 	mov	arg03, local17
287d4     F2 48 02 F6 | 	mov	local18, objptr
287d8     1E E5 01 F6 | 	mov	objptr, local12
287dc     2D 40 62 FD | 	call	local14
287e0     24 E5 01 F6 | 	mov	objptr, local18
287e4     FD 4A 02 F6 | 	mov	local19, result1
287e8                 | LR__3802
287e8     00 4A 0E F2 | 	cmp	local19, #0 wz
287ec     8C 01 90 5D |  if_ne	jmp	#LR__3812
287f0     15 4D 02 F6 | 	mov	local20, local03
287f4     03 4C 0E F5 | 	and	local20, #3 wz
287f8     02 2E 46 55 |  if_ne	or	local05, #2
287fc     01 4C 0E F2 | 	cmp	local20, #1 wz
28800     01 2E 46 55 |  if_ne	or	local05, #1
28804     20 2A CE F7 | 	test	local03, #32 wz
28808     C0 2E 46 55 |  if_ne	or	local05, #192
2880c     08 30 06 F1 | 	add	local06, #8
28810     18 2F 62 FC | 	wrlong	local05, local06
28814     0C 30 06 F1 | 	add	local06, #12
28818     18 4F 0A FB | 	rdlong	local21, local06 wz
2881c     14 30 86 F1 | 	sub	local06, #20
28820     18 00 90 5D |  if_ne	jmp	#LR__3803
28824     04 36 06 F1 | 	add	local09, #4
28828     1B 4F 02 FB | 	rdlong	local21, local09
2882c     04 36 86 F1 | 	sub	local09, #4
28830     14 30 06 F1 | 	add	local06, #20
28834     18 4F 62 FC | 	wrlong	local21, local06
28838     14 30 86 F1 | 	sub	local06, #20
2883c                 | LR__3803
2883c     18 30 06 F1 | 	add	local06, #24
28840     18 4F 0A FB | 	rdlong	local21, local06 wz
28844     18 30 86 F1 | 	sub	local06, #24
28848     18 00 90 5D |  if_ne	jmp	#LR__3804
2884c     08 36 06 F1 | 	add	local09, #8
28850     1B 4F 02 FB | 	rdlong	local21, local09
28854     08 36 86 F1 | 	sub	local09, #8
28858     18 30 06 F1 | 	add	local06, #24
2885c     18 4F 62 FC | 	wrlong	local21, local06
28860     18 30 86 F1 | 	sub	local06, #24
28864                 | LR__3804
28864     24 30 06 F1 | 	add	local06, #36
28868     18 4F 0A FB | 	rdlong	local21, local06 wz
2886c     24 30 86 F1 | 	sub	local06, #36
28870     1B 4F 02 AB |  if_e	rdlong	local21, local09
28874     24 30 06 A1 |  if_e	add	local06, #36
28878     18 4F 62 AC |  if_e	wrlong	local21, local06
2887c     24 30 86 A1 |  if_e	sub	local06, #36
28880     28 30 06 F1 | 	add	local06, #40
28884     18 4F 0A FB | 	rdlong	local21, local06 wz
28888     28 30 86 F1 | 	sub	local06, #40
2888c     18 00 90 5D |  if_ne	jmp	#LR__3805
28890     10 36 06 F1 | 	add	local09, #16
28894     1B 4F 02 FB | 	rdlong	local21, local09
28898     10 36 86 F1 | 	sub	local09, #16
2889c     28 30 06 F1 | 	add	local06, #40
288a0     18 4F 62 FC | 	wrlong	local21, local06
288a4     28 30 86 F1 | 	sub	local06, #40
288a8                 | LR__3805
288a8     30 30 06 F1 | 	add	local06, #48
288ac     18 4F 0A FB | 	rdlong	local21, local06 wz
288b0     30 30 86 F1 | 	sub	local06, #48
288b4     18 00 90 5D |  if_ne	jmp	#LR__3806
288b8     0C 36 06 F1 | 	add	local09, #12
288bc     1B 4F 02 FB | 	rdlong	local21, local09
288c0     0C 36 86 F1 | 	sub	local09, #12
288c4     30 30 06 F1 | 	add	local06, #48
288c8     18 4F 62 FC | 	wrlong	local21, local06
288cc     30 30 86 F1 | 	sub	local06, #48
288d0                 | LR__3806
288d0     1C 30 06 F1 | 	add	local06, #28
288d4     18 4F 0A FB | 	rdlong	local21, local06 wz
288d8     1C 30 86 F1 | 	sub	local06, #28
288dc     1C 00 90 5D |  if_ne	jmp	#LR__3807
288e0     01 32 06 F6 | 	mov	local07, #1
288e4     F2 12 02 F6 | 	mov	arg01, objptr
288e8     00 08 05 FF 
288ec     00 12 46 F5 | 	or	arg01, ##168820736
288f0     1C 30 06 F1 | 	add	local06, #28
288f4     18 13 62 FC | 	wrlong	arg01, local06
288f8     1C 30 86 F1 | 	sub	local06, #28
288fc                 | LR__3807
288fc     20 30 06 F1 | 	add	local06, #32
28900     18 4F 0A FB | 	rdlong	local21, local06 wz
28904     20 30 86 F1 | 	sub	local06, #32
28908     1C 00 90 5D |  if_ne	jmp	#LR__3808
2890c     01 32 06 F6 | 	mov	local07, #1
28910     F2 12 02 F6 | 	mov	arg01, objptr
28914     00 10 05 FF 
28918     00 12 46 F5 | 	or	arg01, ##169869312
2891c     20 30 06 F1 | 	add	local06, #32
28920     18 13 62 FC | 	wrlong	arg01, local06
28924     20 30 86 F1 | 	sub	local06, #32
28928                 | LR__3808
28928     2C 30 06 F1 | 	add	local06, #44
2892c     18 4F 0A FB | 	rdlong	local21, local06 wz
28930     2C 30 86 F1 | 	sub	local06, #44
28934     44 00 90 5D |  if_ne	jmp	#LR__3811
28938     14 36 06 F1 | 	add	local09, #20
2893c     1B 4F 0A FB | 	rdlong	local21, local09 wz
28940     14 36 86 F1 | 	sub	local09, #20
28944     18 00 90 AD |  if_e	jmp	#LR__3809
28948     14 36 06 F1 | 	add	local09, #20
2894c     1B 4F 02 FB | 	rdlong	local21, local09
28950     2C 30 06 F1 | 	add	local06, #44
28954     18 4F 62 FC | 	wrlong	local21, local06
28958     2C 30 86 F1 | 	sub	local06, #44
2895c     1C 00 90 FD | 	jmp	#LR__3810
28960                 | LR__3809
28960     01 32 06 F6 | 	mov	local07, #1
28964     F2 12 02 F6 | 	mov	arg01, objptr
28968     00 18 05 FF 
2896c     00 12 46 F5 | 	or	arg01, ##170917888
28970     2C 30 06 F1 | 	add	local06, #44
28974     18 13 62 FC | 	wrlong	arg01, local06
28978     2C 30 86 F1 | 	sub	local06, #44
2897c                 | LR__3810
2897c                 | LR__3811
2897c                 | LR__3812
2897c     00 32 0E F2 | 	cmp	local07, #0 wz
28980     18 13 02 56 |  if_ne	mov	arg01, local06
28984     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
28988     00 4A 0E F2 | 	cmp	local19, #0 wz
2898c     00 12 06 A6 |  if_e	mov	arg01, #0
28990     10 00 90 5D |  if_ne	jmp	#LR__3813
28994     00 12 4E F2 | 	cmps	arg01, #0 wz
28998     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2899c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
289a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
289a4                 | LR__3813
289a4     25 FB 01 F6 | 	mov	result1, local19
289a8                 | LR__3814
289a8     A7 F0 03 F6 | 	mov	ptra, fp
289ac     B2 00 A0 FD | 	call	#popregs_
289b0                 | __system___openraw_ret
289b0     2D 00 64 FD | 	ret
289b4                 | 
289b4                 | __system___closeraw
289b4     05 4A 05 F6 | 	mov	COUNT_, #5
289b8     A8 00 A0 FD | 	call	#pushregs_
289bc     09 27 02 F6 | 	mov	local01, arg01
289c0     00 28 06 F6 | 	mov	local02, #0
289c4     08 26 06 F1 | 	add	local01, #8
289c8     13 FB 09 FB | 	rdlong	result1, local01 wz
289cc     08 26 86 F1 | 	sub	local01, #8
289d0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
289d4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
289d8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
289dc     01 FA 65 A6 |  if_e	neg	result1, #1
289e0     A8 00 90 AD |  if_e	jmp	#LR__3822
289e4     2C 26 06 F1 | 	add	local01, #44
289e8     13 FB 09 FB | 	rdlong	result1, local01 wz
289ec     2C 26 86 F1 | 	sub	local01, #44
289f0     38 00 90 AD |  if_e	jmp	#LR__3820
289f4     2C 26 06 F1 | 	add	local01, #44
289f8     13 2B 02 FB | 	rdlong	local03, local01
289fc     15 2D 02 F6 | 	mov	local04, local03
28a00     2C 26 86 F1 | 	sub	local01, #44
28a04     13 2C 46 F7 | 	zerox	local04, #19
28a08     14 2A 46 F0 | 	shr	local03, #20
28a0c     02 2A 66 F0 | 	shl	local03, #2
28a10     ED 2A 02 F1 | 	add	local03, __methods__
28a14     15 2B 02 FB | 	rdlong	local03, local03
28a18     13 13 02 F6 | 	mov	arg01, local01
28a1c     F2 2E 02 F6 | 	mov	local05, objptr
28a20     16 E5 01 F6 | 	mov	objptr, local04
28a24     2D 2A 62 FD | 	call	local03
28a28     17 E5 01 F6 | 	mov	objptr, local05
28a2c                 | LR__3820
28a2c     24 26 06 F1 | 	add	local01, #36
28a30     13 2F 0A FB | 	rdlong	local05, local01 wz
28a34     24 26 86 F1 | 	sub	local01, #36
28a38     3C 00 90 AD |  if_e	jmp	#LR__3821
28a3c     24 26 06 F1 | 	add	local01, #36
28a40     13 2B 02 FB | 	rdlong	local03, local01
28a44     15 2D 02 F6 | 	mov	local04, local03
28a48     24 26 86 F1 | 	sub	local01, #36
28a4c     13 2C 46 F7 | 	zerox	local04, #19
28a50     14 2A 46 F0 | 	shr	local03, #20
28a54     02 2A 66 F0 | 	shl	local03, #2
28a58     ED 2A 02 F1 | 	add	local03, __methods__
28a5c     15 2B 02 FB | 	rdlong	local03, local03
28a60     13 13 02 F6 | 	mov	arg01, local01
28a64     F2 2E 02 F6 | 	mov	local05, objptr
28a68     16 E5 01 F6 | 	mov	objptr, local04
28a6c     2D 2A 62 FD | 	call	local03
28a70     17 E5 01 F6 | 	mov	objptr, local05
28a74     FD 28 02 F6 | 	mov	local02, result1
28a78                 | LR__3821
28a78     13 13 02 F6 | 	mov	arg01, local01
28a7c     00 14 06 F6 | 	mov	arg02, #0
28a80     34 16 06 F6 | 	mov	arg03, #52
28a84     98 00 A0 FD | 	call	#\builtin_bytefill_
28a88     14 FB 01 F6 | 	mov	result1, local02
28a8c                 | LR__3822
28a8c     A7 F0 03 F6 | 	mov	ptra, fp
28a90     B2 00 A0 FD | 	call	#popregs_
28a94                 | __system___closeraw_ret
28a94     2D 00 64 FD | 	ret
28a98                 | 
28a98                 | __system___vfs_open_sdcardx
28a98     0B 4A 05 F6 | 	mov	COUNT_, #11
28a9c     A8 00 A0 FD | 	call	#pushregs_
28aa0     09 2B 02 F6 | 	mov	local03, arg01
28aa4     0A 2D 02 F6 | 	mov	local04, arg02
28aa8     0B 2F 02 F6 | 	mov	local05, arg03
28aac     0C 31 02 F6 | 	mov	local06, arg04
28ab0     01 00 00 FF 
28ab4     24 12 06 F6 | 	mov	arg01, ##548
28ab8     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
28abc     FD 32 02 F6 | 	mov	local07, result1
28ac0     01 00 00 FF 
28ac4     34 12 06 F6 | 	mov	arg01, ##564
28ac8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
28acc     FD 34 02 F6 | 	mov	local08, result1
28ad0     15 19 02 F6 | 	mov	arg04, local03
28ad4     1F 18 C6 F0 | 	sar	arg04, #31
28ad8     15 17 02 F6 | 	mov	arg03, local03
28adc     01 12 06 F6 | 	mov	arg01, #1
28ae0     00 14 06 F6 | 	mov	arg02, #0
28ae4     EC DB BF FD | 	call	#__system___int64_shl
28ae8     FD 26 02 F6 | 	mov	local01, result1
28aec     FE 36 02 F6 | 	mov	local09, result2
28af0     16 19 02 F6 | 	mov	arg04, local04
28af4     1F 18 C6 F0 | 	sar	arg04, #31
28af8     16 17 02 F6 | 	mov	arg03, local04
28afc     01 12 06 F6 | 	mov	arg01, #1
28b00     00 14 06 F6 | 	mov	arg02, #0
28b04     CC DB BF FD | 	call	#__system___int64_shl
28b08     FD 26 42 F5 | 	or	local01, result1
28b0c     FE 36 42 F5 | 	or	local09, result2
28b10     17 19 02 F6 | 	mov	arg04, local05
28b14     1F 18 C6 F0 | 	sar	arg04, #31
28b18     17 17 02 F6 | 	mov	arg03, local05
28b1c     01 12 06 F6 | 	mov	arg01, #1
28b20     00 14 06 F6 | 	mov	arg02, #0
28b24     AC DB BF FD | 	call	#__system___int64_shl
28b28     FD 26 42 F5 | 	or	local01, result1
28b2c     FE 36 42 F5 | 	or	local09, result2
28b30     18 19 02 F6 | 	mov	arg04, local06
28b34     1F 18 C6 F0 | 	sar	arg04, #31
28b38     18 17 02 F6 | 	mov	arg03, local06
28b3c     01 12 06 F6 | 	mov	arg01, #1
28b40     00 14 06 F6 | 	mov	arg02, #0
28b44     8C DB BF FD | 	call	#__system___int64_shl
28b48     1B 15 02 F6 | 	mov	arg02, local09
28b4c     FD 26 42 F5 | 	or	local01, result1
28b50     0A FD 41 F5 | 	or	result2, arg02
28b54     FE 28 02 F6 | 	mov	local02, result2
28b58     13 13 02 F6 | 	mov	arg01, local01
28b5c     14 15 02 F6 | 	mov	arg02, local02
28b60     A8 DB BF FD | 	call	#__system___usepins
28b64     00 FA 0D F2 | 	cmp	result1, #0 wz
28b68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28b6c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
28b70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28b74     00 FA 05 A6 |  if_e	mov	result1, #0
28b78     B4 00 90 AD |  if_e	jmp	#LR__3832
28b7c     13 39 02 F6 | 	mov	local10, local01
28b80     14 37 02 F6 | 	mov	local09, local02
28b84     01 00 00 FF 
28b88     08 32 06 F1 | 	add	local07, ##520
28b8c     19 39 62 FC | 	wrlong	local10, local07
28b90     04 32 06 F1 | 	add	local07, #4
28b94     19 37 62 FC | 	wrlong	local09, local07
28b98     01 00 00 FF 
28b9c     0C 32 86 F1 | 	sub	local07, ##524
28ba0     18 1B 02 F6 | 	mov	arg05, local06
28ba4     00 12 06 F6 | 	mov	arg01, #0
28ba8     15 15 02 F6 | 	mov	arg02, local03
28bac     16 17 02 F6 | 	mov	arg03, local04
28bb0     17 19 02 F6 | 	mov	arg04, local05
28bb4     F2 38 02 F6 | 	mov	local10, objptr
28bb8     19 E5 01 F6 | 	mov	objptr, local07
28bbc     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
28bc0     1C E5 01 F6 | 	mov	objptr, local10
28bc4     FD 3A 0A F6 | 	mov	local11, result1 wz
28bc8     24 00 90 5D |  if_ne	jmp	#LR__3830
28bcc     9C 01 00 FF 
28bd0     8A 14 06 F6 | 	mov	arg02, ##@LR__5247
28bd4     1A 13 02 F6 | 	mov	arg01, local08
28bd8     00 16 06 F6 | 	mov	arg03, #0
28bdc     F2 3A 02 F6 | 	mov	local11, objptr
28be0     19 E5 01 F6 | 	mov	objptr, local07
28be4     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
28be8     1D E5 01 F6 | 	mov	objptr, local11
28bec     FD 3A 02 F6 | 	mov	local11, result1
28bf0                 | LR__3830
28bf0     00 3A 0E F2 | 	cmp	local11, #0 wz
28bf4     24 00 90 AD |  if_e	jmp	#LR__3831
28bf8     13 13 02 F6 | 	mov	arg01, local01
28bfc     14 15 02 F6 | 	mov	arg02, local02
28c00     5C DB BF FD | 	call	#__system___freepins
28c04     1D 13 6A F6 | 	neg	arg01, local11 wz
28c08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28c0c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28c10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28c14     00 FA 05 F6 | 	mov	result1, #0
28c18     14 00 90 FD | 	jmp	#LR__3832
28c1c                 | LR__3831
28c1c     19 13 02 F6 | 	mov	arg01, local07
28c20     F2 3A 02 F6 | 	mov	local11, objptr
28c24     19 E5 01 F6 | 	mov	objptr, local07
28c28     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
28c2c     1D E5 01 F6 | 	mov	objptr, local11
28c30                 | LR__3832
28c30     A7 F0 03 F6 | 	mov	ptra, fp
28c34     B2 00 A0 FD | 	call	#popregs_
28c38                 | __system___vfs_open_sdcardx_ret
28c38     2D 00 64 FD | 	ret
28c3c                 | 
28c3c                 | __system____default_getc
28c3c     03 4A 05 F6 | 	mov	COUNT_, #3
28c40     A8 00 A0 FD | 	call	#pushregs_
28c44     09 27 02 F6 | 	mov	local01, arg01
28c48     13 29 02 FB | 	rdlong	local02, local01
28c4c     08 28 06 F1 | 	add	local02, #8
28c50     14 2B 02 FB | 	rdlong	local03, local02
28c54     02 2A CE F7 | 	test	local03, #2 wz
28c58     13 13 02 56 |  if_ne	mov	arg01, local01
28c5c     00 01 B0 5D |  if_ne	call	#__system____default_flush
28c60     14 2B 02 FB | 	rdlong	local03, local02
28c64     01 2A 46 F5 | 	or	local03, #1
28c68     14 2B 62 FC | 	wrlong	local03, local02
28c6c     08 28 86 F1 | 	sub	local02, #8
28c70     14 2B 0A FB | 	rdlong	local03, local02 wz
28c74     0C 00 90 5D |  if_ne	jmp	#LR__3840
28c78     13 13 02 F6 | 	mov	arg01, local01
28c7c     68 18 B0 FD | 	call	#__system____default_filbuf
28c80     FD 2A 02 F6 | 	mov	local03, result1
28c84                 | LR__3840
28c84     01 2A 56 F2 | 	cmps	local03, #1 wc
28c88     01 FA 65 C6 |  if_b	neg	result1, #1
28c8c     1C 00 90 CD |  if_b	jmp	#LR__3841
28c90     01 2A 86 F1 | 	sub	local03, #1
28c94     14 2B 62 FC | 	wrlong	local03, local02
28c98     04 28 06 F1 | 	add	local02, #4
28c9c     14 2B 02 FB | 	rdlong	local03, local02
28ca0     15 FB C1 FA | 	rdbyte	result1, local03
28ca4     01 2A 06 F1 | 	add	local03, #1
28ca8     14 2B 62 FC | 	wrlong	local03, local02
28cac                 | LR__3841
28cac     A7 F0 03 F6 | 	mov	ptra, fp
28cb0     B2 00 A0 FD | 	call	#popregs_
28cb4                 | __system____default_getc_ret
28cb4     2D 00 64 FD | 	ret
28cb8                 | 
28cb8                 | __system____default_putc
28cb8     06 4A 05 F6 | 	mov	COUNT_, #6
28cbc     A8 00 A0 FD | 	call	#pushregs_
28cc0     09 27 02 F6 | 	mov	local01, arg01
28cc4     0A 29 02 F6 | 	mov	local02, arg02
28cc8     14 2B 02 FB | 	rdlong	local03, local02
28ccc     08 2A 06 F1 | 	add	local03, #8
28cd0     15 FB 01 FB | 	rdlong	result1, local03
28cd4     01 FA CD F7 | 	test	result1, #1 wz
28cd8     14 13 02 56 |  if_ne	mov	arg01, local02
28cdc     80 00 B0 5D |  if_ne	call	#__system____default_flush
28ce0     15 2D 02 FB | 	rdlong	local04, local03
28ce4     02 2C 46 F5 | 	or	local04, #2
28ce8     15 2D 62 FC | 	wrlong	local04, local03
28cec     08 2A 86 F1 | 	sub	local03, #8
28cf0     15 2F 02 FB | 	rdlong	local05, local03
28cf4     10 2A 06 F1 | 	add	local03, #16
28cf8     15 15 02 FB | 	rdlong	arg02, local03
28cfc     10 2A 86 F1 | 	sub	local03, #16
28d00     17 FB 01 F6 | 	mov	result1, local05
28d04     0A FB 01 F1 | 	add	result1, arg02
28d08     FD 26 42 FC | 	wrbyte	local01, result1
28d0c     13 27 E2 F8 | 	getbyte	local01, local01, #0
28d10     01 2E 06 F1 | 	add	local05, #1
28d14     15 2F 62 FC | 	wrlong	local05, local03
28d18     06 28 06 F1 | 	add	local02, #6
28d1c     14 31 EA FA | 	rdword	local06, local02 wz
28d20     06 28 86 F1 | 	sub	local02, #6
28d24     0C 2A 06 51 |  if_ne	add	local03, #12
28d28     15 2D 02 5B |  if_ne	rdlong	local04, local03
28d2c     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
28d30     0C 00 90 AD |  if_e	jmp	#LR__3850
28d34     0A 26 0E F2 | 	cmp	local01, #10 wz
28d38     01 30 0E A2 |  if_e	cmp	local06, #1 wz
28d3c     10 00 90 5D |  if_ne	jmp	#LR__3851
28d40                 | LR__3850
28d40     14 13 02 F6 | 	mov	arg01, local02
28d44     18 00 B0 FD | 	call	#__system____default_flush
28d48     00 FA 0D F2 | 	cmp	result1, #0 wz
28d4c     01 26 66 56 |  if_ne	neg	local01, #1
28d50                 | LR__3851
28d50     13 FB 01 F6 | 	mov	result1, local01
28d54     A7 F0 03 F6 | 	mov	ptra, fp
28d58     B2 00 A0 FD | 	call	#popregs_
28d5c                 | __system____default_putc_ret
28d5c     2D 00 64 FD | 	ret
28d60                 | 
28d60                 | __system____default_flush
28d60     06 4A 05 F6 | 	mov	COUNT_, #6
28d64     A8 00 A0 FD | 	call	#pushregs_
28d68     09 27 02 F6 | 	mov	local01, arg01
28d6c     13 29 02 FB | 	rdlong	local02, local01
28d70     14 2B 02 FB | 	rdlong	local03, local02
28d74     08 28 06 F1 | 	add	local02, #8
28d78     14 FB 01 FB | 	rdlong	result1, local02
28d7c     08 28 86 F1 | 	sub	local02, #8
28d80     02 FA CD F7 | 	test	result1, #2 wz
28d84     D0 00 90 AD |  if_e	jmp	#LR__3862
28d88     01 2A 56 F2 | 	cmps	local03, #1 wc
28d8c     20 01 90 CD |  if_b	jmp	#LR__3864
28d90     08 26 06 F1 | 	add	local01, #8
28d94     13 FB 01 FB | 	rdlong	result1, local01
28d98     08 26 86 F1 | 	sub	local01, #8
28d9c     40 FA CD F7 | 	test	result1, #64 wz
28da0     68 00 90 AD |  if_e	jmp	#LR__3861
28da4     08 26 06 F1 | 	add	local01, #8
28da8     13 17 02 FB | 	rdlong	arg03, local01
28dac     08 26 86 F1 | 	sub	local01, #8
28db0     80 16 CE F7 | 	test	arg03, #128 wz
28db4     54 00 90 AD |  if_e	jmp	#LR__3860
28db8     30 26 06 F1 | 	add	local01, #48
28dbc     13 2D 02 FB | 	rdlong	local04, local01
28dc0     16 2F 02 F6 | 	mov	local05, local04
28dc4     30 26 86 F1 | 	sub	local01, #48
28dc8     13 2E 46 F7 | 	zerox	local05, #19
28dcc     14 2C 46 F0 | 	shr	local04, #20
28dd0     02 2C 66 F0 | 	shl	local04, #2
28dd4     ED 2C 02 F1 | 	add	local04, __methods__
28dd8     16 2D 02 FB | 	rdlong	local04, local04
28ddc     13 13 02 F6 | 	mov	arg01, local01
28de0     00 14 06 F6 | 	mov	arg02, #0
28de4     02 16 06 F6 | 	mov	arg03, #2
28de8     F2 30 02 F6 | 	mov	local06, objptr
28dec     17 E5 01 F6 | 	mov	objptr, local05
28df0     2D 2C 62 FD | 	call	local04
28df4     18 E5 01 F6 | 	mov	objptr, local06
28df8     08 26 06 F1 | 	add	local01, #8
28dfc     13 31 02 FB | 	rdlong	local06, local01
28e00     80 30 26 F5 | 	andn	local06, #128
28e04     13 31 62 FC | 	wrlong	local06, local01
28e08     08 26 86 F1 | 	sub	local01, #8
28e0c                 | LR__3860
28e0c                 | LR__3861
28e0c     18 26 06 F1 | 	add	local01, #24
28e10     13 2D 02 FB | 	rdlong	local04, local01
28e14     16 2F 02 F6 | 	mov	local05, local04
28e18     18 26 86 F1 | 	sub	local01, #24
28e1c     13 2E 46 F7 | 	zerox	local05, #19
28e20     14 2C 46 F0 | 	shr	local04, #20
28e24     02 2C 66 F0 | 	shl	local04, #2
28e28     ED 2C 02 F1 | 	add	local04, __methods__
28e2c     16 2D 02 FB | 	rdlong	local04, local04
28e30     10 28 06 F1 | 	add	local02, #16
28e34     14 15 02 FB | 	rdlong	arg02, local02
28e38     10 28 86 F1 | 	sub	local02, #16
28e3c     13 13 02 F6 | 	mov	arg01, local01
28e40     15 17 02 F6 | 	mov	arg03, local03
28e44     F2 30 02 F6 | 	mov	local06, objptr
28e48     17 E5 01 F6 | 	mov	objptr, local05
28e4c     2D 2C 62 FD | 	call	local04
28e50     18 E5 01 F6 | 	mov	objptr, local06
28e54     58 00 90 FD | 	jmp	#LR__3864
28e58                 | LR__3862
28e58     08 28 06 F1 | 	add	local02, #8
28e5c     14 31 02 FB | 	rdlong	local06, local02
28e60     08 28 86 F1 | 	sub	local02, #8
28e64     01 30 CE F7 | 	test	local06, #1 wz
28e68     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
28e6c     40 00 90 AD |  if_e	jmp	#LR__3863
28e70     30 26 06 F1 | 	add	local01, #48
28e74     13 2D 02 FB | 	rdlong	local04, local01
28e78     16 2F 02 F6 | 	mov	local05, local04
28e7c     30 26 86 F1 | 	sub	local01, #48
28e80     13 2E 46 F7 | 	zerox	local05, #19
28e84     14 2C 46 F0 | 	shr	local04, #20
28e88     02 2C 66 F0 | 	shl	local04, #2
28e8c     ED 2C 02 F1 | 	add	local04, __methods__
28e90     16 2D 02 FB | 	rdlong	local04, local04
28e94     13 13 02 F6 | 	mov	arg01, local01
28e98     15 15 62 F6 | 	neg	arg02, local03
28e9c     01 16 06 F6 | 	mov	arg03, #1
28ea0     F2 30 02 F6 | 	mov	local06, objptr
28ea4     17 E5 01 F6 | 	mov	objptr, local05
28ea8     2D 2C 62 FD | 	call	local04
28eac     18 E5 01 F6 | 	mov	objptr, local06
28eb0                 | LR__3863
28eb0                 | LR__3864
28eb0     14 01 68 FC | 	wrlong	#0, local02
28eb4     04 28 06 F1 | 	add	local02, #4
28eb8     14 01 68 FC | 	wrlong	#0, local02
28ebc     04 28 06 F1 | 	add	local02, #4
28ec0     14 01 68 FC | 	wrlong	#0, local02
28ec4     00 FA 05 F6 | 	mov	result1, #0
28ec8     A7 F0 03 F6 | 	mov	ptra, fp
28ecc     B2 00 A0 FD | 	call	#popregs_
28ed0                 | __system____default_flush_ret
28ed0     2D 00 64 FD | 	ret
28ed4                 | 
28ed4                 | __system____default_buffer_init
28ed4     02 4A 05 F6 | 	mov	COUNT_, #2
28ed8     A8 00 A0 FD | 	call	#pushregs_
28edc     09 27 02 F6 | 	mov	local01, arg01
28ee0     13 29 02 FB | 	rdlong	local02, local01
28ee4     13 13 02 F6 | 	mov	arg01, local01
28ee8     34 03 B0 FD | 	call	#__system___isatty
28eec     00 FA 0D F2 | 	cmp	result1, #0 wz
28ef0     06 26 06 51 |  if_ne	add	local01, #6
28ef4     13 0B 58 5C |  if_ne	wrword	#5, local01
28ef8     06 26 06 A1 |  if_e	add	local01, #6
28efc     13 0D 58 AC |  if_e	wrword	#6, local01
28f00     14 28 06 F1 | 	add	local02, #20
28f04     14 27 02 F6 | 	mov	local01, local02
28f08     04 28 86 F1 | 	sub	local02, #4
28f0c     14 27 62 FC | 	wrlong	local01, local02
28f10     04 28 86 F1 | 	sub	local02, #4
28f14     02 00 80 FF 
28f18     14 01 68 FC | 	wrlong	##1024, local02
28f1c     00 FA 05 F6 | 	mov	result1, #0
28f20     A7 F0 03 F6 | 	mov	ptra, fp
28f24     B2 00 A0 FD | 	call	#popregs_
28f28                 | __system____default_buffer_init_ret
28f28     2D 00 64 FD | 	ret
28f2c                 | 
28f2c                 | __system__stat
28f2c     04 4A 05 F6 | 	mov	COUNT_, #4
28f30     A8 00 A0 FD | 	call	#pushregs_
28f34     0A 27 02 F6 | 	mov	local01, arg02
28f38     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28f3c     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
28f40     09 15 02 F6 | 	mov	arg02, arg01
28f44     14 13 02 F6 | 	mov	arg01, local02
28f48     00 16 06 F6 | 	mov	arg03, #0
28f4c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28f50     58 B5 BF FD | 	call	#__system____getvfsforfile
28f54     FD 2A 0A F6 | 	mov	local03, result1 wz
28f58     10 00 90 AD |  if_e	jmp	#LR__3870
28f5c     34 2A 06 F1 | 	add	local03, #52
28f60     15 17 0A FB | 	rdlong	arg03, local03 wz
28f64     34 2A 86 F1 | 	sub	local03, #52
28f68     14 00 90 5D |  if_ne	jmp	#LR__3871
28f6c                 | LR__3870
28f6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28f70     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28f74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28f78     01 FA 65 F6 | 	neg	result1, #1
28f7c     68 00 90 FD | 	jmp	#LR__3872
28f80                 | LR__3871
28f80     13 13 02 F6 | 	mov	arg01, local01
28f84     00 14 06 F6 | 	mov	arg02, #0
28f88     30 16 06 F6 | 	mov	arg03, #48
28f8c     09 2D 02 F6 | 	mov	local04, arg01
28f90     98 00 A0 FD | 	call	#\builtin_bytefill_
28f94     16 FB 01 F6 | 	mov	result1, local04
28f98     14 13 CA FA | 	rdbyte	arg01, local02 wz
28f9c     08 26 06 A1 |  if_e	add	local01, #8
28fa0     08 00 80 AF 
28fa4     13 FF 6B AC |  if_e	wrlong	##4607, local01
28fa8     00 FA 05 A6 |  if_e	mov	result1, #0
28fac     38 00 90 AD |  if_e	jmp	#LR__3872
28fb0     34 2A 06 F1 | 	add	local03, #52
28fb4     15 2B 02 FB | 	rdlong	local03, local03
28fb8     15 2D 02 F6 | 	mov	local04, local03
28fbc     13 2A 46 F7 | 	zerox	local03, #19
28fc0     14 2C 46 F0 | 	shr	local04, #20
28fc4     02 2C 66 F0 | 	shl	local04, #2
28fc8     ED 2C 02 F1 | 	add	local04, __methods__
28fcc     16 2D 02 FB | 	rdlong	local04, local04
28fd0     14 13 02 F6 | 	mov	arg01, local02
28fd4     13 15 02 F6 | 	mov	arg02, local01
28fd8     F2 28 02 F6 | 	mov	local02, objptr
28fdc     15 E5 01 F6 | 	mov	objptr, local03
28fe0     2D 2C 62 FD | 	call	local04
28fe4     14 E5 01 F6 | 	mov	objptr, local02
28fe8                 | LR__3872
28fe8     A7 F0 03 F6 | 	mov	ptra, fp
28fec     B2 00 A0 FD | 	call	#popregs_
28ff0                 | __system__stat_ret
28ff0     2D 00 64 FD | 	ret
28ff4                 | 
28ff4                 | __system__write
28ff4     0A 12 16 F2 | 	cmp	arg01, #10 wc
28ff8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
28ffc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29000     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
29004     01 FA 65 36 |  if_ae	neg	result1, #1
29008     20 00 90 3D |  if_ae	jmp	#LR__3880
2900c     34 12 06 FD | 	qmul	arg01, #52
29010     02 00 00 FF 
29014     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
29018     18 12 62 FD | 	getqx	arg01
2901c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29020     02 00 00 FF 
29024     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
29028     0C 10 B0 FD | 	call	#__system___vfswrite
2902c                 | LR__3880
2902c                 | __system__write_ret
2902c     2D 00 64 FD | 	ret
29030                 | 
29030                 | __system__read
29030     0A 12 16 F2 | 	cmp	arg01, #10 wc
29034     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
29038     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2903c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
29040     01 FA 65 36 |  if_ae	neg	result1, #1
29044     20 00 90 3D |  if_ae	jmp	#LR__3890
29048     34 12 06 FD | 	qmul	arg01, #52
2904c     02 00 00 FF 
29050     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
29054     18 12 62 FD | 	getqx	arg01
29058     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2905c     02 00 00 FF 
29060     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
29064     98 11 B0 FD | 	call	#__system___vfsread
29068                 | LR__3890
29068                 | __system__read_ret
29068     2D 00 64 FD | 	ret
2906c                 | 
2906c                 | __system__close
2906c     0A 12 16 F2 | 	cmp	arg01, #10 wc
29070     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
29074     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
29078     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2907c     01 FA 65 36 |  if_ae	neg	result1, #1
29080     20 00 90 3D |  if_ae	jmp	#LR__3900
29084     34 12 06 FD | 	qmul	arg01, #52
29088     02 00 00 FF 
2908c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
29090     18 12 62 FD | 	getqx	arg01
29094     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29098     02 00 00 FF 
2909c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
290a0     10 F9 BF FD | 	call	#__system___closeraw
290a4                 | LR__3900
290a4                 | __system__close_ret
290a4     2D 00 64 FD | 	ret
290a8                 | 
290a8                 | __system__lseek
290a8     06 4A 05 F6 | 	mov	COUNT_, #6
290ac     A8 00 A0 FD | 	call	#pushregs_
290b0     0A 12 16 F2 | 	cmp	arg01, #10 wc
290b4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
290b8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
290bc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
290c0     01 FA 65 36 |  if_ae	neg	result1, #1
290c4     C4 00 90 3D |  if_ae	jmp	#LR__3911
290c8     34 12 06 FD | 	qmul	arg01, #52
290cc     02 00 00 FF 
290d0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
290d4     18 26 62 FD | 	getqx	local01
290d8     F3 26 02 F1 | 	add	local01, ptr___system__dat__
290dc     30 26 06 F1 | 	add	local01, #48
290e0     13 13 0A FB | 	rdlong	arg01, local01 wz
290e4     30 26 86 F1 | 	sub	local01, #48
290e8     02 00 00 FF 
290ec     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
290f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
290f4     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
290f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
290fc     01 FA 65 A6 |  if_e	neg	result1, #1
29100     88 00 90 AD |  if_e	jmp	#LR__3911
29104     08 26 06 F1 | 	add	local01, #8
29108     13 29 02 FB | 	rdlong	local02, local01
2910c     08 26 86 F1 | 	sub	local01, #8
29110     40 28 CE F7 | 	test	local02, #64 wz
29114     08 26 06 51 |  if_ne	add	local01, #8
29118     13 29 02 5B |  if_ne	rdlong	local02, local01
2911c     80 28 46 55 |  if_ne	or	local02, #128
29120     13 29 62 5C |  if_ne	wrlong	local02, local01
29124     08 26 86 51 |  if_ne	sub	local01, #8
29128     30 26 06 F1 | 	add	local01, #48
2912c     13 2B 02 FB | 	rdlong	local03, local01
29130     15 2D 02 F6 | 	mov	local04, local03
29134     30 26 86 F1 | 	sub	local01, #48
29138     13 2C 46 F7 | 	zerox	local04, #19
2913c     14 2A 46 F0 | 	shr	local03, #20
29140     02 2A 66 F0 | 	shl	local03, #2
29144     ED 2A 02 F1 | 	add	local03, __methods__
29148     15 2B 02 FB | 	rdlong	local03, local03
2914c     13 13 02 F6 | 	mov	arg01, local01
29150     F2 2E 02 F6 | 	mov	local05, objptr
29154     16 E5 01 F6 | 	mov	objptr, local04
29158     2D 2A 62 FD | 	call	local03
2915c     17 E5 01 F6 | 	mov	objptr, local05
29160     FD 30 02 F6 | 	mov	local06, result1
29164     00 30 56 F2 | 	cmps	local06, #0 wc
29168     1C 00 90 3D |  if_ae	jmp	#LR__3910
2916c     18 13 6A F6 | 	neg	arg01, local06 wz
29170     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29174     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29178     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2917c     01 FA 65 56 |  if_ne	neg	result1, #1
29180     00 FA 05 A6 |  if_e	mov	result1, #0
29184     04 00 90 FD | 	jmp	#LR__3911
29188                 | LR__3910
29188     18 FB 01 F6 | 	mov	result1, local06
2918c                 | LR__3911
2918c     A7 F0 03 F6 | 	mov	ptra, fp
29190     B2 00 A0 FD | 	call	#popregs_
29194                 | __system__lseek_ret
29194     2D 00 64 FD | 	ret
29198                 | 
29198                 | __system___ioctl
29198     03 4A 05 F6 | 	mov	COUNT_, #3
2919c     A8 00 A0 FD | 	call	#pushregs_
291a0     00 12 4E F2 | 	cmps	arg01, #0 wz
291a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
291a8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
291ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
291b0     01 FA 65 A6 |  if_e	neg	result1, #1
291b4     5C 00 90 AD |  if_e	jmp	#LR__3921
291b8     28 12 06 F1 | 	add	arg01, #40
291bc     09 27 02 FB | 	rdlong	local01, arg01
291c0     13 29 02 F6 | 	mov	local02, local01
291c4     28 12 86 F1 | 	sub	arg01, #40
291c8     13 28 46 F7 | 	zerox	local02, #19
291cc     14 26 46 F0 | 	shr	local01, #20
291d0     02 26 66 F0 | 	shl	local01, #2
291d4     ED 26 02 F1 | 	add	local01, __methods__
291d8     13 27 02 FB | 	rdlong	local01, local01
291dc     F2 2A 02 F6 | 	mov	local03, objptr
291e0     14 E5 01 F6 | 	mov	objptr, local02
291e4     2D 26 62 FD | 	call	local01
291e8     15 E5 01 F6 | 	mov	objptr, local03
291ec     FD 12 0A F6 | 	mov	arg01, result1 wz
291f0     1C 00 90 AD |  if_e	jmp	#LR__3920
291f4     00 12 4E F2 | 	cmps	arg01, #0 wz
291f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
291fc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29200     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29204     01 FA 65 56 |  if_ne	neg	result1, #1
29208     00 FA 05 A6 |  if_e	mov	result1, #0
2920c     04 00 90 FD | 	jmp	#LR__3921
29210                 | LR__3920
29210     00 FA 05 F6 | 	mov	result1, #0
29214                 | LR__3921
29214     A7 F0 03 F6 | 	mov	ptra, fp
29218     B2 00 A0 FD | 	call	#popregs_
2921c                 | __system___ioctl_ret
2921c     2D 00 64 FD | 	ret
29220                 | 
29220                 | __system___isatty
29220     00 4A 05 F6 | 	mov	COUNT_, #0
29224     A8 00 A0 FD | 	call	#pushregs_
29228     0C F0 07 F1 | 	add	ptra, #12
2922c     04 4E 05 F1 | 	add	fp, #4
29230     A7 12 62 FC | 	wrlong	arg01, fp
29234     04 4E 05 F1 | 	add	fp, #4
29238     A7 16 02 F6 | 	mov	arg03, fp
2923c     08 4E 85 F1 | 	sub	fp, #8
29240     00 15 06 F6 | 	mov	arg02, #256
29244     50 FF BF FD | 	call	#__system___ioctl
29248     00 FA 0D F2 | 	cmp	result1, #0 wz
2924c     01 FA 05 A6 |  if_e	mov	result1, #1
29250     00 FA 05 56 |  if_ne	mov	result1, #0
29254     A7 F0 03 F6 | 	mov	ptra, fp
29258     B2 00 A0 FD | 	call	#popregs_
2925c                 | __system___isatty_ret
2925c     2D 00 64 FD | 	ret
29260                 | 
29260                 | __system____getftab
29260     0A 12 16 F2 | 	cmp	arg01, #10 wc
29264     34 12 06 CD |  if_b	qmul	arg01, #52
29268     00 FA 05 36 |  if_ae	mov	result1, #0
2926c     02 00 00 CF 
29270     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
29274     18 FA 61 CD |  if_b	getqx	result1
29278     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2927c     02 00 00 CF 
29280     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
29284                 | __system____getftab_ret
29284     2D 00 64 FD | 	ret
29288                 | 
29288                 | __system__strncpy
29288     09 01 02 F6 | 	mov	_var01, arg01
2928c                 | LR__3930
2928c     01 16 86 F1 | 	sub	arg03, #1
29290     00 16 56 F2 | 	cmps	arg03, #0 wc
29294     18 00 90 CD |  if_b	jmp	#LR__3931
29298     0A FB C1 FA | 	rdbyte	result1, arg02
2929c     00 FB 41 FC | 	wrbyte	result1, _var01
292a0     01 14 06 F1 | 	add	arg02, #1
292a4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
292a8     01 00 06 F1 | 	add	_var01, #1
292ac     DC FF 9F 5D |  if_ne	jmp	#LR__3930
292b0                 | LR__3931
292b0     97 0C 48 FB | 	callpa	#(@LR__3933-@LR__3932)>>2,fcache_load_ptr_
292b4                 | LR__3932
292b4     01 16 86 F1 | 	sub	arg03, #1
292b8     00 16 56 F2 | 	cmps	arg03, #0 wc
292bc     00 03 02 36 |  if_ae	mov	_var02, _var01
292c0     01 00 06 31 |  if_ae	add	_var01, #1
292c4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
292c8     E8 FF 9F 3D |  if_ae	jmp	#LR__3932
292cc                 | LR__3933
292cc     09 FB 01 F6 | 	mov	result1, arg01
292d0                 | __system__strncpy_ret
292d0     2D 00 64 FD | 	ret
292d4                 | 
292d4                 | __system__strncat
292d4     00 14 4E F2 | 	cmps	arg02, #0 wz
292d8     50 00 90 AD |  if_e	jmp	#LR__3944
292dc     01 16 16 F2 | 	cmp	arg03, #1 wc
292e0     48 00 90 CD |  if_b	jmp	#LR__3944
292e4     09 01 02 F6 | 	mov	_var01, arg01
292e8     97 1E 48 FB | 	callpa	#(@LR__3942-@LR__3940)>>2,fcache_load_ptr_
292ec                 | LR__3940
292ec     00 FB C9 FA | 	rdbyte	result1, _var01 wz
292f0     01 00 06 51 |  if_ne	add	_var01, #1
292f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3940
292f8     0B 03 02 F6 | 	mov	_var02, arg03
292fc                 | LR__3941
292fc     0A 05 C2 FA | 	rdbyte	_var03, arg02
29300     02 07 02 F6 | 	mov	_var04, _var03
29304     07 06 4E F7 | 	zerox	_var04, #7 wz
29308     01 14 06 F1 | 	add	arg02, #1
2930c     18 00 90 AD |  if_e	jmp	#LR__3943
29310     01 02 86 F1 | 	sub	_var02, #1
29314     00 02 56 F2 | 	cmps	_var02, #0 wc
29318     00 07 02 36 |  if_ae	mov	_var04, _var01
2931c     01 00 06 31 |  if_ae	add	_var01, #1
29320     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
29324     D4 FF 9F 3D |  if_ae	jmp	#LR__3941
29328                 | LR__3942
29328                 | LR__3943
29328     00 01 48 FC | 	wrbyte	#0, _var01
2932c                 | LR__3944
2932c     09 FB 01 F6 | 	mov	result1, arg01
29330                 | __system__strncat_ret
29330     2D 00 64 FD | 	ret
29334                 | 
29334                 | __system__strncmp
29334     09 01 0A F6 | 	mov	_var01, arg01 wz
29338     14 00 90 5D |  if_ne	jmp	#LR__3950
2933c     00 14 0E F2 | 	cmp	arg02, #0 wz
29340     01 02 66 56 |  if_ne	neg	_var02, #1
29344     00 02 06 A6 |  if_e	mov	_var02, #0
29348     01 FB 01 F6 | 	mov	result1, _var02
2934c     74 00 90 FD | 	jmp	#__system__strncmp_ret
29350                 | LR__3950
29350     00 14 0E F2 | 	cmp	arg02, #0 wz
29354     01 FA 05 A6 |  if_e	mov	result1, #1
29358     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2935c     0B 05 02 F6 | 	mov	_var03, arg03
29360     97 16 48 FB | 	callpa	#(@LR__3952-@LR__3951)>>2,fcache_load_ptr_
29364                 | LR__3951
29364     00 07 C2 FA | 	rdbyte	_var04, _var01
29368     0A 09 02 F6 | 	mov	_var05, arg02
2936c     04 0B C2 FA | 	rdbyte	_var06, _var05
29370     01 04 86 F1 | 	sub	_var03, #1
29374     00 04 56 F2 | 	cmps	_var03, #0 wc
29378     01 00 06 F1 | 	add	_var01, #1
2937c     01 14 06 F1 | 	add	arg02, #1
29380     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
29384     08 00 90 2D |  if_nc_and_z	jmp	#LR__3953
29388     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2938c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3951
29390                 | LR__3952
29390                 | LR__3953
29390     00 04 56 F2 | 	cmps	_var03, #0 wc
29394     00 FA 05 C6 |  if_b	mov	result1, #0
29398     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2939c     05 07 0A F2 | 	cmp	_var04, _var06 wz
293a0     00 FA 05 A6 |  if_e	mov	result1, #0
293a4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
293a8     00 06 0E F2 | 	cmp	_var04, #0 wz
293ac     01 FA 65 A6 |  if_e	neg	result1, #1
293b0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
293b4     00 0A 0E F2 | 	cmp	_var06, #0 wz
293b8     01 FA 05 A6 |  if_e	mov	result1, #1
293bc     03 FB 01 56 |  if_ne	mov	result1, _var04
293c0     05 FB 81 51 |  if_ne	sub	result1, _var06
293c4                 | __system__strncmp_ret
293c4     2D 00 64 FD | 	ret
293c8                 | 
293c8                 | __system____root_opendir
293c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
293cc     04 12 06 F1 | 	add	arg01, #4
293d0     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
293d4     00 FA 05 F6 | 	mov	result1, #0
293d8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
293dc                 | __system____root_opendir_ret
293dc     2D 00 64 FD | 	ret
293e0                 | 
293e0                 | __system____root_readdir
293e0     03 4A 05 F6 | 	mov	COUNT_, #3
293e4     A8 00 A0 FD | 	call	#pushregs_
293e8     09 27 02 F6 | 	mov	local01, arg01
293ec     0A 29 02 F6 | 	mov	local02, arg02
293f0     04 26 06 F1 | 	add	local01, #4
293f4     13 2B 02 FB | 	rdlong	local03, local01
293f8     04 26 86 F1 | 	sub	local01, #4
293fc                 | LR__3960
293fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
29400     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
29404     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
29408     01 FA 65 A6 |  if_e	neg	result1, #1
2940c     48 00 90 AD |  if_e	jmp	#LR__3961
29410     15 17 0A FB | 	rdlong	arg03, local03 wz
29414     04 2A 06 A1 |  if_e	add	local03, #4
29418     E0 FF 9F AD |  if_e	jmp	#LR__3960
2941c     15 15 02 FB | 	rdlong	arg02, local03
29420     01 14 06 F1 | 	add	arg02, #1
29424     14 13 02 F6 | 	mov	arg01, local02
29428     40 16 06 F6 | 	mov	arg03, #64
2942c     58 FE BF FD | 	call	#__system__strncpy
29430     50 28 06 F1 | 	add	local02, #80
29434     14 03 48 FC | 	wrbyte	#1, local02
29438     08 28 86 F1 | 	sub	local02, #8
2943c     14 01 68 FC | 	wrlong	#0, local02
29440     04 28 06 F1 | 	add	local02, #4
29444     14 01 68 FC | 	wrlong	#0, local02
29448     04 2A 06 F1 | 	add	local03, #4
2944c     04 26 06 F1 | 	add	local01, #4
29450     13 2B 62 FC | 	wrlong	local03, local01
29454     00 FA 05 F6 | 	mov	result1, #0
29458                 | LR__3961
29458     A7 F0 03 F6 | 	mov	ptra, fp
2945c     B2 00 A0 FD | 	call	#popregs_
29460                 | __system____root_readdir_ret
29460     2D 00 64 FD | 	ret
29464                 | 
29464                 | __system____root_closedir
29464     00 FA 05 F6 | 	mov	result1, #0
29468                 | __system____root_closedir_ret
29468     2D 00 64 FD | 	ret
2946c                 | 
2946c                 | __system____root_stat
2946c     0A 01 02 F6 | 	mov	_var01, arg02
29470     00 13 02 F6 | 	mov	arg01, _var01
29474     00 14 06 F6 | 	mov	arg02, #0
29478     30 16 06 F6 | 	mov	arg03, #48
2947c     98 00 A0 FD | 	call	#\builtin_bytefill_
29480     08 00 06 F1 | 	add	_var01, #8
29484     08 00 80 FF 
29488     00 FF 6B FC | 	wrlong	##4607, _var01
2948c     00 FA 05 F6 | 	mov	result1, #0
29490                 | __system____root_stat_ret
29490     2D 00 64 FD | 	ret
29494                 | 
29494                 | __system___normalizeName
29494     00 00 06 F6 | 	mov	_var01, #0
29498     09 03 02 F6 | 	mov	_var02, arg01
2949c     01 05 02 F6 | 	mov	_var03, _var02
294a0                 | LR__3970
294a0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
294a4     5C 01 90 AD |  if_e	jmp	#LR__3989
294a8     00 00 0E F2 | 	cmp	_var01, #0 wz
294ac     02 07 02 56 |  if_ne	mov	_var04, _var03
294b0     01 04 06 51 |  if_ne	add	_var03, #1
294b4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
294b8     00 00 06 56 |  if_ne	mov	_var01, #0
294bc     01 07 C2 FA | 	rdbyte	_var04, _var02
294c0     2E 06 0E F2 | 	cmp	_var04, #46 wz
294c4     D8 00 90 5D |  if_ne	jmp	#LR__3982
294c8     01 02 06 F1 | 	add	_var02, #1
294cc     01 07 C2 FA | 	rdbyte	_var04, _var02
294d0     01 02 86 F1 | 	sub	_var02, #1
294d4     2F 06 0E F2 | 	cmp	_var04, #47 wz
294d8     18 00 90 AD |  if_e	jmp	#LR__3971
294dc     01 02 06 F1 | 	add	_var02, #1
294e0     01 09 C2 FA | 	rdbyte	_var05, _var02
294e4     01 02 86 F1 | 	sub	_var02, #1
294e8     04 0B 02 F6 | 	mov	_var06, _var05
294ec     07 0A 4E F7 | 	zerox	_var06, #7 wz
294f0     10 00 90 5D |  if_ne	jmp	#LR__3972
294f4                 | LR__3971
294f4     01 0D 02 F6 | 	mov	_var07, _var02
294f8     01 0C 06 F1 | 	add	_var07, #1
294fc     06 03 02 F6 | 	mov	_var02, _var07
29500     E0 00 90 FD | 	jmp	#LR__3986
29504                 | LR__3972
29504     01 02 06 F1 | 	add	_var02, #1
29508     01 0D C2 FA | 	rdbyte	_var07, _var02
2950c     01 02 86 F1 | 	sub	_var02, #1
29510     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
29514     2E 06 0E F2 | 	cmp	_var04, #46 wz
29518     84 00 90 5D |  if_ne	jmp	#LR__3981
2951c     02 02 06 F1 | 	add	_var02, #2
29520     01 0D C2 FA | 	rdbyte	_var07, _var02
29524     02 02 86 F1 | 	sub	_var02, #2
29528     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2952c     2F 06 0E F2 | 	cmp	_var04, #47 wz
29530     18 00 90 AD |  if_e	jmp	#LR__3973
29534     02 02 06 F1 | 	add	_var02, #2
29538     01 09 C2 FA | 	rdbyte	_var05, _var02
2953c     02 02 86 F1 | 	sub	_var02, #2
29540     04 0B 02 F6 | 	mov	_var06, _var05
29544     07 0A 4E F7 | 	zerox	_var06, #7 wz
29548     54 00 90 5D |  if_ne	jmp	#LR__3980
2954c                 | LR__3973
2954c     02 02 06 F1 | 	add	_var02, #2
29550     09 05 5A F2 | 	cmps	_var03, arg01 wcz
29554     40 00 90 ED |  if_be	jmp	#LR__3979
29558     02 0F 02 F6 | 	mov	_var08, _var03
2955c     01 0E 86 F1 | 	sub	_var08, #1
29560                 | LR__3974
29560     07 07 C2 FA | 	rdbyte	_var04, _var08
29564     2F 06 0E F2 | 	cmp	_var04, #47 wz
29568     0C 00 90 5D |  if_ne	jmp	#LR__3975
2956c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
29570     01 0E 86 11 |  if_a	sub	_var08, #1
29574     E8 FF 9F 1D |  if_a	jmp	#LR__3974
29578                 | LR__3975
29578     97 0C 48 FB | 	callpa	#(@LR__3977-@LR__3976)>>2,fcache_load_ptr_
2957c                 | LR__3976
2957c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
29580     10 00 90 ED |  if_be	jmp	#LR__3978
29584     07 07 C2 FA | 	rdbyte	_var04, _var08
29588     2F 06 0E F2 | 	cmp	_var04, #47 wz
2958c     01 0E 86 51 |  if_ne	sub	_var08, #1
29590     E8 FF 9F 5D |  if_ne	jmp	#LR__3976
29594                 | LR__3977
29594                 | LR__3978
29594     07 05 02 F6 | 	mov	_var03, _var08
29598                 | LR__3979
29598     01 00 06 F6 | 	mov	_var01, #1
2959c     44 00 90 FD | 	jmp	#LR__3986
295a0                 | LR__3980
295a0                 | LR__3981
295a0                 | LR__3982
295a0     97 18 48 FB | 	callpa	#(@LR__3984-@LR__3983)>>2,fcache_load_ptr_
295a4                 | LR__3983
295a4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
295a8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
295ac     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
295b0     20 00 90 AD |  if_e	jmp	#LR__3985
295b4     01 0B 02 F6 | 	mov	_var06, _var02
295b8     01 09 02 F6 | 	mov	_var05, _var02
295bc     01 08 06 F1 | 	add	_var05, #1
295c0     05 11 C2 FA | 	rdbyte	_var09, _var06
295c4     04 03 02 F6 | 	mov	_var02, _var05
295c8     02 11 42 FC | 	wrbyte	_var09, _var03
295cc     01 04 06 F1 | 	add	_var03, #1
295d0     D0 FF 9F FD | 	jmp	#LR__3983
295d4                 | LR__3984
295d4                 | LR__3985
295d4     01 07 C2 FA | 	rdbyte	_var04, _var02
295d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
295dc     C0 FE 9F 5D |  if_ne	jmp	#LR__3970
295e0     01 00 06 F6 | 	mov	_var01, #1
295e4                 | LR__3986
295e4     97 0C 48 FB | 	callpa	#(@LR__3988-@LR__3987)>>2,fcache_load_ptr_
295e8                 | LR__3987
295e8     01 07 C2 FA | 	rdbyte	_var04, _var02
295ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
295f0     01 0D 02 A6 |  if_e	mov	_var07, _var02
295f4     01 0C 06 A1 |  if_e	add	_var07, #1
295f8     06 03 02 A6 |  if_e	mov	_var02, _var07
295fc     E8 FF 9F AD |  if_e	jmp	#LR__3987
29600                 | LR__3988
29600     9C FE 9F FD | 	jmp	#LR__3970
29604                 | LR__3989
29604     02 01 48 FC | 	wrbyte	#0, _var03
29608                 | __system___normalizeName_ret
29608     2D 00 64 FD | 	ret
2960c                 | 
2960c                 | __system___strrev
2960c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
29610     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
29614     09 03 02 F6 | 	mov	_var02, arg01
29618     97 1A 48 FB | 	callpa	#(@LR__3992-@LR__3990)>>2,fcache_load_ptr_
2961c                 | LR__3990
2961c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
29620     01 02 06 51 |  if_ne	add	_var02, #1
29624     F4 FF 9F 5D |  if_ne	jmp	#LR__3990
29628     01 02 86 F1 | 	sub	_var02, #1
2962c                 | LR__3991
2962c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
29630     1C 00 90 ED |  if_be	jmp	#LR__3993
29634     09 01 C2 FA | 	rdbyte	_var01, arg01
29638     01 05 C2 FA | 	rdbyte	_var03, _var02
2963c     09 05 42 FC | 	wrbyte	_var03, arg01
29640     01 01 42 FC | 	wrbyte	_var01, _var02
29644     01 12 06 F1 | 	add	arg01, #1
29648     01 02 86 F1 | 	sub	_var02, #1
2964c     DC FF 9F FD | 	jmp	#LR__3991
29650                 | LR__3992
29650                 | LR__3993
29650                 | __system___strrev_ret
29650     2D 00 64 FD | 	ret
29654                 | 
29654                 | __system___fmtpad
29654     06 4A 05 F6 | 	mov	COUNT_, #6
29658     A8 00 A0 FD | 	call	#pushregs_
2965c     09 27 02 F6 | 	mov	local01, arg01
29660     0A 29 02 F6 | 	mov	local02, arg02
29664     0B 2B 02 F6 | 	mov	local03, arg03
29668     14 13 EA F8 | 	getbyte	arg01, local02, #1
2966c     16 28 46 F0 | 	shr	local02, #22
29670     03 28 0E F5 | 	and	local02, #3 wz
29674     00 2C 06 F6 | 	mov	local04, #0
29678     01 28 06 A6 |  if_e	mov	local02, #1
2967c     0C 29 CA F7 | 	test	local02, arg04 wz
29680     00 FA 05 A6 |  if_e	mov	result1, #0
29684     88 00 90 AD |  if_e	jmp	#LR__4003
29688     09 2B C2 F2 | 	subr	local03, arg01
2968c     01 2A 56 F2 | 	cmps	local03, #1 wc
29690     00 FA 05 C6 |  if_b	mov	result1, #0
29694     78 00 90 CD |  if_b	jmp	#LR__4003
29698     03 28 0E F2 | 	cmp	local02, #3 wz
2969c     18 00 90 5D |  if_ne	jmp	#LR__4000
296a0     01 18 0E F2 | 	cmp	arg04, #1 wz
296a4     6E 28 62 FD | 	wrz	local02
296a8     14 2B 02 F1 | 	add	local03, local02
296ac     15 2B 52 F6 | 	abs	local03, local03 wc
296b0     01 2A 46 F0 | 	shr	local03, #1
296b4     15 2B 82 F6 | 	negc	local03, local03
296b8                 | LR__4000
296b8     01 2A 56 F2 | 	cmps	local03, #1 wc
296bc     4C 00 90 CD |  if_b	jmp	#LR__4002
296c0     15 2F 02 F6 | 	mov	local05, local03
296c4                 | LR__4001
296c4     13 29 02 F6 | 	mov	local02, local01
296c8     13 31 02 F6 | 	mov	local06, local01
296cc     13 28 46 F7 | 	zerox	local02, #19
296d0     14 30 46 F0 | 	shr	local06, #20
296d4     02 30 66 F0 | 	shl	local06, #2
296d8     ED 30 02 F1 | 	add	local06, __methods__
296dc     18 31 02 FB | 	rdlong	local06, local06
296e0     20 12 06 F6 | 	mov	arg01, #32
296e4     F2 2A 02 F6 | 	mov	local03, objptr
296e8     14 E5 01 F6 | 	mov	objptr, local02
296ec     2D 30 62 FD | 	call	local06
296f0     15 E5 01 F6 | 	mov	objptr, local03
296f4     FD 30 02 F6 | 	mov	local06, result1
296f8     00 30 56 F2 | 	cmps	local06, #0 wc
296fc     18 FB 01 C6 |  if_b	mov	result1, local06
29700     0C 00 90 CD |  if_b	jmp	#LR__4003
29704     18 2D 02 F1 | 	add	local04, local06
29708     EE 2F 6E FB | 	djnz	local05, #LR__4001
2970c                 | LR__4002
2970c     16 FB 01 F6 | 	mov	result1, local04
29710                 | LR__4003
29710     A7 F0 03 F6 | 	mov	ptra, fp
29714     B2 00 A0 FD | 	call	#popregs_
29718                 | __system___fmtpad_ret
29718     2D 00 64 FD | 	ret
2971c                 | 
2971c                 | __system___uitoa
2971c     04 4A 05 F6 | 	mov	COUNT_, #4
29720     A8 00 A0 FD | 	call	#pushregs_
29724     09 27 02 F6 | 	mov	local01, arg01
29728     00 1A 4E F2 | 	cmps	arg05, #0 wz
2972c     13 1B 02 F6 | 	mov	arg05, local01
29730     00 28 06 F6 | 	mov	local02, #0
29734     37 2A 06 56 |  if_ne	mov	local03, #55
29738     57 2A 06 A6 |  if_e	mov	local03, #87
2973c                 | LR__4010
2973c     0B 15 12 FD | 	qdiv	arg02, arg03
29740     19 2C 62 FD | 	getqy	local04
29744     0B 15 12 FD | 	qdiv	arg02, arg03
29748     0A 2C 16 F2 | 	cmp	local04, #10 wc
2974c     30 2C 06 C1 |  if_b	add	local04, #48
29750     15 2D 02 31 |  if_ae	add	local04, local03
29754     0D 2D 42 FC | 	wrbyte	local04, arg05
29758     01 1A 06 F1 | 	add	arg05, #1
2975c     01 28 06 F1 | 	add	local02, #1
29760     18 14 62 FD | 	getqx	arg02
29764     00 14 0E F2 | 	cmp	arg02, #0 wz
29768     D0 FF 9F 5D |  if_ne	jmp	#LR__4010
2976c     0C 29 12 F2 | 	cmp	local02, arg04 wc
29770     C8 FF 9F CD |  if_b	jmp	#LR__4010
29774     0D 01 48 FC | 	wrbyte	#0, arg05
29778     13 13 02 F6 | 	mov	arg01, local01
2977c     8C FE BF FD | 	call	#__system___strrev
29780     14 FB 01 F6 | 	mov	result1, local02
29784     A7 F0 03 F6 | 	mov	ptra, fp
29788     B2 00 A0 FD | 	call	#popregs_
2978c                 | __system___uitoa_ret
2978c     2D 00 64 FD | 	ret
29790                 | 
29790                 | __system__disassemble_0531
29790     10 4A 05 F6 | 	mov	COUNT_, #16
29794     A8 00 A0 FD | 	call	#pushregs_
29798     09 27 02 F6 | 	mov	local01, arg01
2979c     0A 29 02 F6 | 	mov	local02, arg02
297a0     0B 2B 02 F6 | 	mov	local03, arg03
297a4     0C 2D 02 F6 | 	mov	local04, arg04
297a8     0D 2F 02 F6 | 	mov	local05, arg05
297ac     17 13 52 F6 | 	abs	arg01, local05 wc
297b0     1F 30 C6 C9 |  if_b	decod	local06, #31
297b4     00 30 06 36 |  if_ae	mov	local06, #0
297b8     CC CF BF FD | 	call	#__system___float_fromuns
297bc     18 FB 61 F5 | 	xor	result1, local06
297c0     FD 32 02 F6 | 	mov	local07, result1
297c4     00 34 06 F6 | 	mov	local08, #0
297c8     13 13 02 F6 | 	mov	arg01, local01
297cc     00 14 06 F6 | 	mov	arg02, #0
297d0     01 16 06 F6 | 	mov	arg03, #1
297d4     E8 D7 BF FD | 	call	#__system___float_cmp
297d8     00 FA 0D F2 | 	cmp	result1, #0 wz
297dc     00 36 06 A6 |  if_e	mov	local09, #0
297e0     14 01 68 AC |  if_e	wrlong	#0, local02
297e4     15 37 62 AC |  if_e	wrlong	local09, local03
297e8     8C 01 90 AD |  if_e	jmp	#LR__4032
297ec     13 13 02 F6 | 	mov	arg01, local01
297f0     BC DC BF FD | 	call	#__system____builtin_ilogb
297f4     FD 38 02 F6 | 	mov	local10, result1
297f8     0A 2E 0E F2 | 	cmp	local05, #10 wz
297fc     24 00 90 5D |  if_ne	jmp	#LR__4020
29800     1C 37 02 F6 | 	mov	local09, local10
29804     01 36 66 F0 | 	shl	local09, #1
29808     1C 37 02 F1 | 	add	local09, local10
2980c     1B 39 52 F6 | 	abs	local10, local09 wc
29810     0A 38 16 FD | 	qdiv	local10, #10
29814     09 3A 06 F6 | 	mov	local11, #9
29818     18 38 62 FD | 	getqx	local10
2981c     1C 39 82 F6 | 	negc	local10, local10
29820     04 00 90 FD | 	jmp	#LR__4021
29824                 | LR__4020
29824     18 3A 06 F6 | 	mov	local11, #24
29828                 | LR__4021
29828                 | LR__4022
29828     08 34 56 F2 | 	cmps	local08, #8 wc
2982c     01 34 06 F1 | 	add	local08, #1
29830     60 00 90 3D |  if_ae	jmp	#LR__4023
29834     00 C0 1F FF 
29838     00 12 06 F6 | 	mov	arg01, ##1065353216
2983c     19 15 02 F6 | 	mov	arg02, local07
29840     1C 17 02 F6 | 	mov	arg03, local10
29844     4C E3 BF FD | 	call	#__system___float_pow_n
29848     FD 14 02 F6 | 	mov	arg02, result1
2984c     13 13 02 F6 | 	mov	arg01, local01
29850     3C D5 BF FD | 	call	#__system___float_div
29854     FD 3C 02 F6 | 	mov	local12, result1
29858     1E 13 02 F6 | 	mov	arg01, local12
2985c     00 C0 1F FF 
29860     00 14 06 F6 | 	mov	arg02, ##1065353216
29864     01 16 06 F6 | 	mov	arg03, #1
29868     54 D7 BF FD | 	call	#__system___float_cmp
2986c     00 FA 55 F2 | 	cmps	result1, #0 wc
29870     01 38 86 C1 |  if_b	sub	local10, #1
29874     B0 FF 9F CD |  if_b	jmp	#LR__4022
29878     19 15 02 F6 | 	mov	arg02, local07
2987c     1E 13 02 F6 | 	mov	arg01, local12
29880     01 16 66 F6 | 	neg	arg03, #1
29884     38 D7 BF FD | 	call	#__system___float_cmp
29888     00 FA 55 F2 | 	cmps	result1, #0 wc
2988c     01 38 06 31 |  if_ae	add	local10, #1
29890     94 FF 9F 3D |  if_ae	jmp	#LR__4022
29894                 | LR__4023
29894     1E 13 02 F6 | 	mov	arg01, local12
29898     14 DC BF FD | 	call	#__system____builtin_ilogb
2989c     FD 3E 02 F6 | 	mov	local13, result1
298a0     1E 41 02 F6 | 	mov	local14, local12
298a4     17 41 06 F4 | 	bitl	local14, #279
298a8     17 40 26 F4 | 	bith	local14, #23
298ac     1F 41 62 F0 | 	shl	local14, local13
298b0     02 2E 0E F2 | 	cmp	local05, #2 wz
298b4     02 2C 66 A0 |  if_e	shl	local04, #2
298b8     00 42 06 F6 | 	mov	local15, #0
298bc     00 2C 56 F2 | 	cmps	local04, #0 wc
298c0     10 00 90 3D |  if_ae	jmp	#LR__4024
298c4     1C 2D C2 F2 | 	subr	local04, local10
298c8     00 2C 56 F2 | 	cmps	local04, #0 wc
298cc     A0 00 90 CD |  if_b	jmp	#LR__4031
298d0     04 00 90 FD | 	jmp	#LR__4025
298d4                 | LR__4024
298d4     01 2C 06 F1 | 	add	local04, #1
298d8                 | LR__4025
298d8     1D 2D 7A F3 | 	fles	local04, local11 wcz
298dc     01 44 06 F6 | 	mov	local16, #1
298e0     97 22 48 FB | 	callpa	#(@LR__4027-@LR__4026)>>2,fcache_load_ptr_
298e4                 | LR__4026
298e4     00 40 00 FF 
298e8     00 42 16 F2 | 	cmp	local15, ##8388608 wc
298ec     38 00 90 3D |  if_ae	jmp	#LR__4028
298f0     01 2C 56 F2 | 	cmps	local04, #1 wc
298f4     01 2C 86 F1 | 	sub	local04, #1
298f8     2C 00 90 CD |  if_b	jmp	#LR__4028
298fc     17 43 02 FD | 	qmul	local15, local05
29900     20 3F 02 F6 | 	mov	local13, local14
29904     17 3E 46 F0 | 	shr	local13, #23
29908     17 41 06 F4 | 	bitl	local14, #279
2990c     18 42 62 FD | 	getqx	local15
29910     17 45 02 FD | 	qmul	local16, local05
29914     18 44 62 FD | 	getqx	local16
29918     17 41 02 FD | 	qmul	local14, local05
2991c     1F 43 02 F1 | 	add	local15, local13
29920     18 40 62 FD | 	getqx	local14
29924     BC FF 9F FD | 	jmp	#LR__4026
29928                 | LR__4027
29928                 | LR__4028
29928     17 37 02 F6 | 	mov	local09, local05
2992c     17 36 66 F0 | 	shl	local09, #23
29930     1B 3F 52 F6 | 	abs	local13, local09 wc
29934     01 3E 46 F0 | 	shr	local13, #1
29938     1F 3F 82 F6 | 	negc	local13, local13
2993c     1F 41 1A F2 | 	cmp	local14, local13 wcz
29940     20 00 90 1D |  if_a	jmp	#LR__4029
29944     17 2E 66 F0 | 	shl	local05, #23
29948     17 3F 52 F6 | 	abs	local13, local05 wc
2994c     01 3E 46 F0 | 	shr	local13, #1
29950     1F 3F 82 F6 | 	negc	local13, local13
29954     1F 41 0A F2 | 	cmp	local14, local13 wz
29958     14 00 90 5D |  if_ne	jmp	#LR__4030
2995c     01 42 CE F7 | 	test	local15, #1 wz
29960     0C 00 90 AD |  if_e	jmp	#LR__4030
29964                 | LR__4029
29964     01 42 06 F1 | 	add	local15, #1
29968     22 43 0A F2 | 	cmp	local15, local16 wz
2996c     01 38 06 A1 |  if_e	add	local10, #1
29970                 | LR__4030
29970                 | LR__4031
29970     14 43 62 FC | 	wrlong	local15, local02
29974     15 39 62 FC | 	wrlong	local10, local03
29978                 | LR__4032
29978     A7 F0 03 F6 | 	mov	ptra, fp
2997c     B2 00 A0 FD | 	call	#popregs_
29980                 | __system__disassemble_0531_ret
29980     2D 00 64 FD | 	ret
29984                 | 
29984                 | __system__emitsign_0533
29984     00 FA 05 F6 | 	mov	result1, #0
29988     00 14 0E F2 | 	cmp	arg02, #0 wz
2998c     09 01 02 56 |  if_ne	mov	_var01, arg01
29990     01 12 06 51 |  if_ne	add	arg01, #1
29994     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
29998     01 FA 05 56 |  if_ne	mov	result1, #1
2999c     00 16 0E F2 | 	cmp	arg03, #0 wz
299a0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
299a4     01 12 06 51 |  if_ne	add	arg01, #1
299a8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
299ac     02 FA 05 51 |  if_ne	add	result1, #2
299b0                 | __system__emitsign_0533_ret
299b0     2D 00 64 FD | 	ret
299b4                 | 
299b4                 | __system___gettxfunc
299b4     01 4A 05 F6 | 	mov	COUNT_, #1
299b8     A8 00 A0 FD | 	call	#pushregs_
299bc     A0 F8 BF FD | 	call	#__system____getftab
299c0     FD 26 0A F6 | 	mov	local01, result1 wz
299c4     10 00 90 AD |  if_e	jmp	#LR__4040
299c8     08 26 06 F1 | 	add	local01, #8
299cc     13 15 0A FB | 	rdlong	arg02, local01 wz
299d0     08 26 86 F1 | 	sub	local01, #8
299d4     08 00 90 5D |  if_ne	jmp	#LR__4041
299d8                 | LR__4040
299d8     00 FA 05 F6 | 	mov	result1, #0
299dc     0C 00 90 FD | 	jmp	#LR__4042
299e0                 | LR__4041
299e0     00 D0 04 FF 
299e4     00 26 46 F5 | 	or	local01, ##161480704
299e8     13 FB 01 F6 | 	mov	result1, local01
299ec                 | LR__4042
299ec     A7 F0 03 F6 | 	mov	ptra, fp
299f0     B2 00 A0 FD | 	call	#popregs_
299f4                 | __system___gettxfunc_ret
299f4     2D 00 64 FD | 	ret
299f8                 | 
299f8                 | __system___getrxfunc
299f8     01 4A 05 F6 | 	mov	COUNT_, #1
299fc     A8 00 A0 FD | 	call	#pushregs_
29a00     5C F8 BF FD | 	call	#__system____getftab
29a04     FD 26 0A F6 | 	mov	local01, result1 wz
29a08     10 00 90 AD |  if_e	jmp	#LR__4050
29a0c     08 26 06 F1 | 	add	local01, #8
29a10     13 15 0A FB | 	rdlong	arg02, local01 wz
29a14     08 26 86 F1 | 	sub	local01, #8
29a18     08 00 90 5D |  if_ne	jmp	#LR__4051
29a1c                 | LR__4050
29a1c     00 FA 05 F6 | 	mov	result1, #0
29a20     0C 00 90 FD | 	jmp	#LR__4052
29a24                 | LR__4051
29a24     00 D8 04 FF 
29a28     00 26 46 F5 | 	or	local01, ##162529280
29a2c     13 FB 01 F6 | 	mov	result1, local01
29a30                 | LR__4052
29a30     A7 F0 03 F6 | 	mov	ptra, fp
29a34     B2 00 A0 FD | 	call	#popregs_
29a38                 | __system___getrxfunc_ret
29a38     2D 00 64 FD | 	ret
29a3c                 | 
29a3c                 | __system___getiolock_0573
29a3c     01 4A 05 F6 | 	mov	COUNT_, #1
29a40     A8 00 A0 FD | 	call	#pushregs_
29a44     18 F8 BF FD | 	call	#__system____getftab
29a48     FD 26 0A F6 | 	mov	local01, result1 wz
29a4c     10 00 90 AD |  if_e	jmp	#LR__4060
29a50     08 26 06 F1 | 	add	local01, #8
29a54     13 FB 09 FB | 	rdlong	result1, local01 wz
29a58     08 26 86 F1 | 	sub	local01, #8
29a5c     18 00 90 5D |  if_ne	jmp	#LR__4061
29a60                 | LR__4060
29a60     01 00 00 FF 
29a64     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
29a68     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
29a6c     01 00 00 FF 
29a70     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
29a74     08 00 90 FD | 	jmp	#LR__4062
29a78                 | LR__4061
29a78     0C 26 06 F1 | 	add	local01, #12
29a7c     13 FB 01 F6 | 	mov	result1, local01
29a80                 | LR__4062
29a80     A7 F0 03 F6 | 	mov	ptra, fp
29a84     B2 00 A0 FD | 	call	#popregs_
29a88                 | __system___getiolock_0573_ret
29a88     2D 00 64 FD | 	ret
29a8c                 | 
29a8c                 | __system____ScanForChar
29a8c     09 01 02 F6 | 	mov	_var01, arg01
29a90     09 03 02 F6 | 	mov	_var02, arg01
29a94     97 06 48 FB | 	callpa	#(@LR__4071-@LR__4070)>>2,fcache_load_ptr_
29a98                 | LR__4070
29a98     01 FB C9 FA | 	rdbyte	result1, _var02 wz
29a9c     01 02 06 51 |  if_ne	add	_var02, #1
29aa0     F4 FF 9F 5D |  if_ne	jmp	#LR__4070
29aa4                 | LR__4071
29aa4     09 03 82 F1 | 	sub	_var02, arg01
29aa8     01 FB 01 F6 | 	mov	result1, _var02
29aac     FD 12 0A F6 | 	mov	arg01, result1 wz
29ab0     00 FA 05 A6 |  if_e	mov	result1, #0
29ab4     B8 00 90 AD |  if_e	jmp	#LR__4078
29ab8     0A 05 02 F6 | 	mov	_var03, arg02
29abc     07 04 4E F7 | 	zerox	_var03, #7 wz
29ac0     00 FA 05 A6 |  if_e	mov	result1, #0
29ac4     A8 00 90 AD |  if_e	jmp	#LR__4078
29ac8     01 16 16 F2 | 	cmp	arg03, #1 wc
29acc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
29ad0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
29ad4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
29ad8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4078
29adc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
29ae0     10 00 90 ED |  if_be	jmp	#LR__4072
29ae4     00 18 0E F2 | 	cmp	arg04, #0 wz
29ae8     00 FA 05 A6 |  if_e	mov	result1, #0
29aec     80 00 90 AD |  if_e	jmp	#LR__4078
29af0     09 17 02 F6 | 	mov	arg03, arg01
29af4                 | LR__4072
29af4     01 16 86 F1 | 	sub	arg03, #1
29af8     00 18 0E F2 | 	cmp	arg04, #0 wz
29afc     38 00 90 5D |  if_ne	jmp	#LR__4074
29b00     0B 07 02 F6 | 	mov	_var04, arg03
29b04     09 09 02 F6 | 	mov	_var05, arg01
29b08                 | LR__4073
29b08     04 07 12 F2 | 	cmp	_var04, _var05 wc
29b0c     5C 00 90 3D |  if_ae	jmp	#LR__4077
29b10     03 05 02 F6 | 	mov	_var03, _var04
29b14     00 05 02 F1 | 	add	_var03, _var01
29b18     02 05 C2 FA | 	rdbyte	_var03, _var03
29b1c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
29b20     0C 05 0A F2 | 	cmp	_var03, arg04 wz
29b24     01 06 06 A1 |  if_e	add	_var04, #1
29b28     03 FB 01 A6 |  if_e	mov	result1, _var04
29b2c     40 00 90 AD |  if_e	jmp	#LR__4078
29b30     01 06 06 F1 | 	add	_var04, #1
29b34     D0 FF 9F FD | 	jmp	#LR__4073
29b38                 | LR__4074
29b38     0B 07 02 F6 | 	mov	_var04, arg03
29b3c                 | LR__4075
29b3c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
29b40     28 00 90 1D |  if_a	jmp	#LR__4076
29b44     03 09 02 F6 | 	mov	_var05, _var04
29b48     00 09 02 F1 | 	add	_var05, _var01
29b4c     04 05 C2 FA | 	rdbyte	_var03, _var05
29b50     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
29b54     04 05 0A F2 | 	cmp	_var03, _var05 wz
29b58     01 06 06 A1 |  if_e	add	_var04, #1
29b5c     03 FB 01 A6 |  if_e	mov	result1, _var04
29b60     0C 00 90 AD |  if_e	jmp	#LR__4078
29b64     01 06 86 F1 | 	sub	_var04, #1
29b68     D0 FF 9F FD | 	jmp	#LR__4075
29b6c                 | LR__4076
29b6c                 | LR__4077
29b6c     00 FA 05 F6 | 	mov	result1, #0
29b70                 | LR__4078
29b70                 | __system____ScanForChar_ret
29b70     2D 00 64 FD | 	ret
29b74                 | 
29b74                 | __system___basic_dir
29b74     05 4A 05 F6 | 	mov	COUNT_, #5
29b78     A8 00 A0 FD | 	call	#pushregs_
29b7c     4C F0 07 F1 | 	add	ptra, #76
29b80     04 4E 05 F1 | 	add	fp, #4
29b84     A7 12 62 FC | 	wrlong	arg01, fp
29b88     04 4E 05 F1 | 	add	fp, #4
29b8c     A7 14 62 FC | 	wrlong	arg02, fp
29b90     04 4E 85 F1 | 	sub	fp, #4
29b94     A7 14 0A FB | 	rdlong	arg02, fp wz
29b98     04 4E 85 F1 | 	sub	fp, #4
29b9c     04 4E 05 51 |  if_ne	add	fp, #4
29ba0     A7 26 02 5B |  if_ne	rdlong	local01, fp
29ba4     04 4E 85 51 |  if_ne	sub	fp, #4
29ba8     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
29bac     70 00 90 AD |  if_e	jmp	#LR__4080
29bb0     03 00 00 FF 
29bb4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29bb8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
29bbc     03 00 00 FF 
29bc0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29bc4     03 00 00 5F 
29bc8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
29bcc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
29bd0     03 00 00 5F 
29bd4     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
29bd8     D8 E9 BF 5D |  if_ne	call	#__system__closedir
29bdc     9C 01 00 FF 
29be0     8C 12 06 F6 | 	mov	arg01, ##@LR__5248
29be4     E0 E8 BF FD | 	call	#__system__opendir
29be8     03 00 00 FF 
29bec     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29bf0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
29bf4     08 4E 05 F1 | 	add	fp, #8
29bf8     A7 28 02 FB | 	rdlong	local02, fp
29bfc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29c00     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
29c04     04 4E 85 F1 | 	sub	fp, #4
29c08     A7 28 02 FB | 	rdlong	local02, fp
29c0c     04 4E 85 F1 | 	sub	fp, #4
29c10     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29c14     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
29c18     03 00 00 FF 
29c1c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29c20                 | LR__4080
29c20     03 00 00 FF 
29c24     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29c28     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
29c2c     03 00 00 FF 
29c30     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29c34     9C 01 00 AF 
29c38     8E FA 05 A6 |  if_e	mov	result1, ##@LR__5249
29c3c     84 02 90 AD |  if_e	jmp	#LR__4093
29c40                 | LR__4081
29c40     03 00 00 FF 
29c44     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29c48     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
29c4c     03 00 00 FF 
29c50     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29c54     D0 E9 BF FD | 	call	#__system__readdir
29c58     0C 4E 05 F1 | 	add	fp, #12
29c5c     A7 FA 61 FC | 	wrlong	result1, fp
29c60     0C 4E 85 F1 | 	sub	fp, #12
29c64     00 FA 0D F2 | 	cmp	result1, #0 wz
29c68     38 00 90 5D |  if_ne	jmp	#LR__4082
29c6c     03 00 00 FF 
29c70     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29c74     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
29c78     03 00 00 FF 
29c7c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29c80     30 E9 BF FD | 	call	#__system__closedir
29c84     03 00 00 FF 
29c88     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
29c8c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
29c90     03 00 00 FF 
29c94     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
29c98     9C 01 00 FF 
29c9c     90 FA 05 F6 | 	mov	result1, ##@LR__5250
29ca0     20 02 90 FD | 	jmp	#LR__4093
29ca4                 | LR__4082
29ca4     0C 4E 05 F1 | 	add	fp, #12
29ca8     A7 12 02 FB | 	rdlong	arg01, fp
29cac     0C 4E 85 F1 | 	sub	fp, #12
29cb0     03 00 00 FF 
29cb4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
29cb8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
29cbc     03 00 00 FF 
29cc0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
29cc4     10 09 B0 FD | 	call	#__system___pat_match
29cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
29ccc     70 FF 9F AD |  if_e	jmp	#LR__4081
29cd0     03 00 00 FF 
29cd4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
29cd8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
29cdc     03 00 00 FF 
29ce0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
29ce4     78 01 90 AD |  if_e	jmp	#LR__4089
29ce8     0C 4E 05 F1 | 	add	fp, #12
29cec     A7 12 02 FB | 	rdlong	arg01, fp
29cf0     04 4E 05 F1 | 	add	fp, #4
29cf4     A7 14 02 F6 | 	mov	arg02, fp
29cf8     10 4E 85 F1 | 	sub	fp, #16
29cfc     2C F2 BF FD | 	call	#__system__stat
29d00     40 4E 05 F1 | 	add	fp, #64
29d04     A7 FA 61 FC | 	wrlong	result1, fp
29d08     40 4E 85 F1 | 	sub	fp, #64
29d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d10     9C 01 00 5F 
29d14     92 FA 05 56 |  if_ne	mov	result1, ##@LR__5251
29d18     A8 01 90 5D |  if_ne	jmp	#LR__4093
29d1c     18 4E 05 F1 | 	add	fp, #24
29d20     A7 28 02 FB | 	rdlong	local02, fp
29d24     78 00 00 FF 
29d28     00 28 06 F5 | 	and	local02, ##61440
29d2c     2C 4E 05 F1 | 	add	fp, #44
29d30     A7 28 62 FC | 	wrlong	local02, fp
29d34     38 4E 85 F1 | 	sub	fp, #56
29d38     A7 28 02 FB | 	rdlong	local02, fp
29d3c     0C 4E 85 F1 | 	sub	fp, #12
29d40     14 29 C2 FA | 	rdbyte	local02, local02
29d44     2E 28 0E F2 | 	cmp	local02, #46 wz
29d48     08 4E 05 A1 |  if_e	add	fp, #8
29d4c     A7 04 68 AC |  if_e	wrlong	#2, fp
29d50     08 4E C5 F3 | 	sumz	fp, #8
29d54     A7 00 68 5C |  if_ne	wrlong	#0, fp
29d58     08 4E 85 51 |  if_ne	sub	fp, #8
29d5c     44 4E 05 F1 | 	add	fp, #68
29d60     A7 28 02 FB | 	rdlong	local02, fp
29d64     44 4E 85 F1 | 	sub	fp, #68
29d68     08 00 00 FF 
29d6c     00 28 0E F2 | 	cmp	local02, ##4096 wz
29d70     18 00 90 5D |  if_ne	jmp	#LR__4083
29d74     08 4E 05 F1 | 	add	fp, #8
29d78     A7 28 02 FB | 	rdlong	local02, fp
29d7c     10 28 46 F5 | 	or	local02, #16
29d80     A7 28 62 FC | 	wrlong	local02, fp
29d84     08 4E 85 F1 | 	sub	fp, #8
29d88     AC 00 90 FD | 	jmp	#LR__4088
29d8c                 | LR__4083
29d8c     44 4E 05 F1 | 	add	fp, #68
29d90     A7 28 02 FB | 	rdlong	local02, fp
29d94     44 4E 85 F1 | 	sub	fp, #68
29d98     10 00 00 FF 
29d9c     00 28 0E F2 | 	cmp	local02, ##8192 wz
29da0     44 4E 05 51 |  if_ne	add	fp, #68
29da4     A7 26 02 5B |  if_ne	rdlong	local01, fp
29da8     44 4E 85 51 |  if_ne	sub	fp, #68
29dac     18 00 00 5F 
29db0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
29db4     44 4E 05 51 |  if_ne	add	fp, #68
29db8     13 2B 02 56 |  if_ne	mov	local03, local01
29dbc     44 4E 85 51 |  if_ne	sub	fp, #68
29dc0     20 00 00 5F 
29dc4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
29dc8     18 00 90 5D |  if_ne	jmp	#LR__4084
29dcc     08 4E 05 F1 | 	add	fp, #8
29dd0     A7 28 02 FB | 	rdlong	local02, fp
29dd4     04 28 46 F5 | 	or	local02, #4
29dd8     A7 28 62 FC | 	wrlong	local02, fp
29ddc     08 4E 85 F1 | 	sub	fp, #8
29de0     54 00 90 FD | 	jmp	#LR__4087
29de4                 | LR__4084
29de4     18 4E 05 F1 | 	add	fp, #24
29de8     A7 28 02 FB | 	rdlong	local02, fp
29dec     18 4E 85 F1 | 	sub	fp, #24
29df0     92 28 CE F7 | 	test	local02, #146 wz
29df4     18 00 90 5D |  if_ne	jmp	#LR__4085
29df8     08 4E 05 F1 | 	add	fp, #8
29dfc     A7 28 02 FB | 	rdlong	local02, fp
29e00     01 28 46 F5 | 	or	local02, #1
29e04     A7 28 62 FC | 	wrlong	local02, fp
29e08     08 4E 85 F1 | 	sub	fp, #8
29e0c     28 00 90 FD | 	jmp	#LR__4086
29e10                 | LR__4085
29e10     44 4E 05 F1 | 	add	fp, #68
29e14     A7 2C 02 FB | 	rdlong	local04, fp
29e18     44 4E 85 F1 | 	sub	fp, #68
29e1c     08 00 00 FF 
29e20     00 2C 0E F2 | 	cmp	local04, ##4096 wz
29e24     08 4E 05 51 |  if_ne	add	fp, #8
29e28     A7 2C 02 5B |  if_ne	rdlong	local04, fp
29e2c     20 2C 46 55 |  if_ne	or	local04, #32
29e30     A7 2C 62 5C |  if_ne	wrlong	local04, fp
29e34     08 4E 85 51 |  if_ne	sub	fp, #8
29e38                 | LR__4086
29e38                 | LR__4087
29e38                 | LR__4088
29e38     08 4E 05 F1 | 	add	fp, #8
29e3c     A7 2C 02 FB | 	rdlong	local04, fp
29e40     08 4E 85 F1 | 	sub	fp, #8
29e44     03 00 00 FF 
29e48     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
29e4c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
29e50     03 00 00 FF 
29e54     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
29e58     13 2D CA F7 | 	test	local04, local01 wz
29e5c     E0 FD 9F AD |  if_e	jmp	#LR__4081
29e60                 | LR__4089
29e60     0C 4E 05 F1 | 	add	fp, #12
29e64     A7 12 02 FB | 	rdlong	arg01, fp
29e68     0C 4E 85 F1 | 	sub	fp, #12
29e6c     09 2F 02 F6 | 	mov	local05, arg01
29e70     97 06 48 FB | 	callpa	#(@LR__4091-@LR__4090)>>2,fcache_load_ptr_
29e74                 | LR__4090
29e74     17 FB C9 FA | 	rdbyte	result1, local05 wz
29e78     01 2E 06 51 |  if_ne	add	local05, #1
29e7c     F4 FF 9F 5D |  if_ne	jmp	#LR__4090
29e80                 | LR__4091
29e80     17 13 C2 F2 | 	subr	arg01, local05
29e84     01 12 06 F1 | 	add	arg01, #1
29e88     28 E0 BF FD | 	call	#__system___gc_alloc_managed
29e8c     48 4E 05 F1 | 	add	fp, #72
29e90     A7 FA 61 FC | 	wrlong	result1, fp
29e94     48 4E 85 F1 | 	sub	fp, #72
29e98     00 FA 0D F2 | 	cmp	result1, #0 wz
29e9c     18 00 90 AD |  if_e	jmp	#LR__4092
29ea0     48 4E 05 F1 | 	add	fp, #72
29ea4     A7 12 02 FB | 	rdlong	arg01, fp
29ea8     3C 4E 85 F1 | 	sub	fp, #60
29eac     A7 14 02 FB | 	rdlong	arg02, fp
29eb0     0C 4E 85 F1 | 	sub	fp, #12
29eb4     10 9E BF FD | 	call	#__system____builtin_strcpy
29eb8                 | LR__4092
29eb8     48 4E 05 F1 | 	add	fp, #72
29ebc     A7 FA 01 FB | 	rdlong	result1, fp
29ec0     48 4E 85 F1 | 	sub	fp, #72
29ec4                 | LR__4093
29ec4     A7 F0 03 F6 | 	mov	ptra, fp
29ec8     B2 00 A0 FD | 	call	#popregs_
29ecc                 | __system___basic_dir_ret
29ecc     2D 00 64 FD | 	ret
29ed0                 | 
29ed0                 | __system__pack_0645
29ed0     09 01 02 F6 | 	mov	_var01, arg01
29ed4     7F 16 06 F1 | 	add	arg03, #127
29ed8     04 18 CE F7 | 	test	arg04, #4 wz
29edc     10 00 90 AD |  if_e	jmp	#LR__4100
29ee0     00 00 0E F2 | 	cmp	_var01, #0 wz
29ee4     16 00 C6 A9 |  if_e	decod	_var01, #22
29ee8     F7 00 26 F4 | 	bith	_var01, #247
29eec     B4 00 90 FD | 	jmp	#LR__4109
29ef0                 | LR__4100
29ef0     02 18 CE F7 | 	test	arg04, #2 wz
29ef4     00 C0 3F 5F 
29ef8     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
29efc     00 14 06 56 |  if_ne	mov	arg02, #0
29f00     A0 00 90 5D |  if_ne	jmp	#LR__4108
29f04     08 18 CE F7 | 	test	arg04, #8 wz
29f08     00 00 06 56 |  if_ne	mov	_var01, #0
29f0c     94 00 90 5D |  if_ne	jmp	#LR__4107
29f10     FF 16 56 F2 | 	cmps	arg03, #255 wc
29f14     00 C0 3F 3F 
29f18     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
29f1c     00 14 06 36 |  if_ae	mov	arg02, #0
29f20     80 00 90 3D |  if_ae	jmp	#LR__4106
29f24     01 16 56 F2 | 	cmps	arg03, #1 wc
29f28     6C 00 90 3D |  if_ae	jmp	#LR__4104
29f2c     01 14 46 F0 | 	shr	arg02, #1
29f30     00 03 02 F6 | 	mov	_var02, _var01
29f34     01 02 06 F5 | 	and	_var02, #1
29f38     1F 02 66 F0 | 	shl	_var02, #31
29f3c     01 15 42 F5 | 	or	arg02, _var02
29f40     01 00 46 F0 | 	shr	_var01, #1
29f44     97 1E 48 FB | 	callpa	#(@LR__4102-@LR__4101)>>2,fcache_load_ptr_
29f48                 | LR__4101
29f48     00 16 56 F2 | 	cmps	arg03, #0 wc
29f4c     34 00 90 3D |  if_ae	jmp	#LR__4103
29f50     00 00 0E F2 | 	cmp	_var01, #0 wz
29f54     2C 00 90 AD |  if_e	jmp	#LR__4103
29f58     0A 13 02 F6 | 	mov	arg01, arg02
29f5c     01 12 06 F5 | 	and	arg01, #1
29f60     01 16 06 F1 | 	add	arg03, #1
29f64     01 14 46 F0 | 	shr	arg02, #1
29f68     00 03 02 F6 | 	mov	_var02, _var01
29f6c     01 02 06 F5 | 	and	_var02, #1
29f70     1F 02 66 F0 | 	shl	_var02, #31
29f74     01 15 42 F5 | 	or	arg02, _var02
29f78     09 15 42 F5 | 	or	arg02, arg01
29f7c     01 00 46 F0 | 	shr	_var01, #1
29f80     C4 FF 9F FD | 	jmp	#LR__4101
29f84                 | LR__4102
29f84                 | LR__4103
29f84     00 16 56 F2 | 	cmps	arg03, #0 wc
29f88     18 00 90 3D |  if_ae	jmp	#LR__4105
29f8c     00 14 0E F2 | 	cmp	arg02, #0 wz
29f90     6F 14 62 FD | 	wrnz	arg02
29f94     0C 00 90 FD | 	jmp	#LR__4105
29f98                 | LR__4104
29f98     17 01 06 F4 | 	bitl	_var01, #279
29f9c     17 16 66 F0 | 	shl	arg03, #23
29fa0     0B 01 42 F5 | 	or	_var01, arg03
29fa4                 | LR__4105
29fa4                 | LR__4106
29fa4                 | LR__4107
29fa4                 | LR__4108
29fa4                 | LR__4109
29fa4     01 00 CE F7 | 	test	_var01, #1 wz
29fa8     01 14 46 55 |  if_ne	or	arg02, #1
29fac     0A 17 02 F6 | 	mov	arg03, arg02
29fb0     00 02 06 F6 | 	mov	_var02, #0
29fb4     FF FF 3F FF 
29fb8     FF 15 06 F1 | 	add	arg02, ##2147483647
29fbc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
29fc0     01 02 06 C6 |  if_b	mov	_var02, #1
29fc4     01 01 02 F1 | 	add	_var01, _var02
29fc8     01 18 CE F7 | 	test	arg04, #1 wz
29fcc     1F 00 26 54 |  if_ne	bith	_var01, #31
29fd0     00 FB 01 F6 | 	mov	result1, _var01
29fd4                 | __system__pack_0645_ret
29fd4     2D 00 64 FD | 	ret
29fd8                 | 
29fd8                 | __system___rxtxioctl_0735
29fd8     00 15 0E F2 | 	cmp	arg02, #256 wz
29fdc     0C 00 90 AD |  if_e	jmp	#LR__4110
29fe0     01 15 0E F2 | 	cmp	arg02, #257 wz
29fe4     1C 00 90 AD |  if_e	jmp	#LR__4111
29fe8     30 00 90 FD | 	jmp	#LR__4112
29fec                 | LR__4110
29fec     08 E6 05 F1 | 	add	ptr___system__dat__, #8
29ff0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
29ff4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
29ff8     0B FB 61 FC | 	wrlong	result1, arg03
29ffc     00 FA 05 F6 | 	mov	result1, #0
2a000     28 00 90 FD | 	jmp	#LR__4113
2a004                 | LR__4111
2a004     0B 13 02 FB | 	rdlong	arg01, arg03
2a008     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2a00c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a010     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2a014     00 FA 05 F6 | 	mov	result1, #0
2a018     10 00 90 FD | 	jmp	#LR__4113
2a01c                 | LR__4112
2a01c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a020     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a024     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a028     01 FA 65 F6 | 	neg	result1, #1
2a02c                 | LR__4113
2a02c                 | __system___rxtxioctl_0735_ret
2a02c     2D 00 64 FD | 	ret
2a030                 | 
2a030                 | __system____dummy_flush_0736
2a030     00 FA 05 F6 | 	mov	result1, #0
2a034                 | __system____dummy_flush_0736_ret
2a034     2D 00 64 FD | 	ret
2a038                 | 
2a038                 | __system___vfswrite
2a038     09 4A 05 F6 | 	mov	COUNT_, #9
2a03c     A8 00 A0 FD | 	call	#pushregs_
2a040     09 27 02 F6 | 	mov	local01, arg01
2a044     0A 29 02 F6 | 	mov	local02, arg02
2a048     0B 2B 02 F6 | 	mov	local03, arg03
2a04c     14 2D 02 F6 | 	mov	local04, local02
2a050     08 26 06 F1 | 	add	local01, #8
2a054     13 13 02 FB | 	rdlong	arg01, local01
2a058     08 26 86 F1 | 	sub	local01, #8
2a05c     02 12 CE F7 | 	test	arg01, #2 wz
2a060     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a064     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a068     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a06c     01 FA 65 A6 |  if_e	neg	result1, #1
2a070     80 01 90 AD |  if_e	jmp	#LR__4126
2a074     08 26 06 F1 | 	add	local01, #8
2a078     13 FB 01 FB | 	rdlong	result1, local01
2a07c     08 26 86 F1 | 	sub	local01, #8
2a080     40 FA CD F7 | 	test	result1, #64 wz
2a084     68 00 90 AD |  if_e	jmp	#LR__4121
2a088     08 26 06 F1 | 	add	local01, #8
2a08c     13 15 02 FB | 	rdlong	arg02, local01
2a090     08 26 86 F1 | 	sub	local01, #8
2a094     80 14 CE F7 | 	test	arg02, #128 wz
2a098     54 00 90 AD |  if_e	jmp	#LR__4120
2a09c     30 26 06 F1 | 	add	local01, #48
2a0a0     13 2F 02 FB | 	rdlong	local05, local01
2a0a4     17 31 02 F6 | 	mov	local06, local05
2a0a8     30 26 86 F1 | 	sub	local01, #48
2a0ac     13 30 46 F7 | 	zerox	local06, #19
2a0b0     14 2E 46 F0 | 	shr	local05, #20
2a0b4     02 2E 66 F0 | 	shl	local05, #2
2a0b8     ED 2E 02 F1 | 	add	local05, __methods__
2a0bc     17 2F 02 FB | 	rdlong	local05, local05
2a0c0     13 13 02 F6 | 	mov	arg01, local01
2a0c4     00 14 06 F6 | 	mov	arg02, #0
2a0c8     02 16 06 F6 | 	mov	arg03, #2
2a0cc     F2 32 02 F6 | 	mov	local07, objptr
2a0d0     18 E5 01 F6 | 	mov	objptr, local06
2a0d4     2D 2E 62 FD | 	call	local05
2a0d8     19 E5 01 F6 | 	mov	objptr, local07
2a0dc     08 26 06 F1 | 	add	local01, #8
2a0e0     13 33 02 FB | 	rdlong	local07, local01
2a0e4     80 32 26 F5 | 	andn	local07, #128
2a0e8     13 33 62 FC | 	wrlong	local07, local01
2a0ec     08 26 86 F1 | 	sub	local01, #8
2a0f0                 | LR__4120
2a0f0                 | LR__4121
2a0f0     18 26 06 F1 | 	add	local01, #24
2a0f4     13 33 0A FB | 	rdlong	local07, local01 wz
2a0f8     18 26 86 F1 | 	sub	local01, #24
2a0fc     80 00 90 AD |  if_e	jmp	#LR__4123
2a100     18 26 06 F1 | 	add	local01, #24
2a104     13 2F 02 FB | 	rdlong	local05, local01
2a108     17 31 02 F6 | 	mov	local06, local05
2a10c     18 26 86 F1 | 	sub	local01, #24
2a110     13 30 46 F7 | 	zerox	local06, #19
2a114     14 2E 46 F0 | 	shr	local05, #20
2a118     02 2E 66 F0 | 	shl	local05, #2
2a11c     ED 2E 02 F1 | 	add	local05, __methods__
2a120     17 2F 02 FB | 	rdlong	local05, local05
2a124     14 15 02 F6 | 	mov	arg02, local02
2a128     15 17 02 F6 | 	mov	arg03, local03
2a12c     13 13 02 F6 | 	mov	arg01, local01
2a130     F2 32 02 F6 | 	mov	local07, objptr
2a134     18 E5 01 F6 | 	mov	objptr, local06
2a138     2D 2E 62 FD | 	call	local05
2a13c     19 E5 01 F6 | 	mov	objptr, local07
2a140     FD 34 02 F6 | 	mov	local08, result1
2a144     00 34 56 F2 | 	cmps	local08, #0 wc
2a148     2C 00 90 3D |  if_ae	jmp	#LR__4122
2a14c     08 26 06 F1 | 	add	local01, #8
2a150     13 33 02 FB | 	rdlong	local07, local01
2a154     20 32 46 F5 | 	or	local07, #32
2a158     13 33 62 FC | 	wrlong	local07, local01
2a15c     00 34 4E F2 | 	cmps	local08, #0 wz
2a160     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a164     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2a168     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a16c     01 FA 65 56 |  if_ne	neg	result1, #1
2a170     00 FA 05 A6 |  if_e	mov	result1, #0
2a174     7C 00 90 FD | 	jmp	#LR__4126
2a178                 | LR__4122
2a178     1A FB 01 F6 | 	mov	result1, local08
2a17c     74 00 90 FD | 	jmp	#LR__4126
2a180                 | LR__4123
2a180     1C 26 06 F1 | 	add	local01, #28
2a184     13 37 0A FB | 	rdlong	local09, local01 wz
2a188     1C 26 86 F1 | 	sub	local01, #28
2a18c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a190     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a194     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a198     01 FA 65 A6 |  if_e	neg	result1, #1
2a19c     54 00 90 AD |  if_e	jmp	#LR__4126
2a1a0     00 34 06 F6 | 	mov	local08, #0
2a1a4                 | LR__4124
2a1a4     01 2A 16 F2 | 	cmp	local03, #1 wc
2a1a8     44 00 90 CD |  if_b	jmp	#LR__4125
2a1ac     1B 31 02 F6 | 	mov	local06, local09
2a1b0     1B 2F 02 F6 | 	mov	local05, local09
2a1b4     13 30 46 F7 | 	zerox	local06, #19
2a1b8     14 2E 46 F0 | 	shr	local05, #20
2a1bc     02 2E 66 F0 | 	shl	local05, #2
2a1c0     ED 2E 02 F1 | 	add	local05, __methods__
2a1c4     17 2F 02 FB | 	rdlong	local05, local05
2a1c8     16 13 C2 FA | 	rdbyte	arg01, local04
2a1cc     13 15 02 F6 | 	mov	arg02, local01
2a1d0     F2 32 02 F6 | 	mov	local07, objptr
2a1d4     18 E5 01 F6 | 	mov	objptr, local06
2a1d8     01 2C 06 F1 | 	add	local04, #1
2a1dc     2D 2E 62 FD | 	call	local05
2a1e0     19 E5 01 F6 | 	mov	objptr, local07
2a1e4     FD 34 02 F1 | 	add	local08, result1
2a1e8     01 2A 86 F1 | 	sub	local03, #1
2a1ec     B4 FF 9F FD | 	jmp	#LR__4124
2a1f0                 | LR__4125
2a1f0     1A FB 01 F6 | 	mov	result1, local08
2a1f4                 | LR__4126
2a1f4     A7 F0 03 F6 | 	mov	ptra, fp
2a1f8     B2 00 A0 FD | 	call	#popregs_
2a1fc                 | __system___vfswrite_ret
2a1fc     2D 00 64 FD | 	ret
2a200                 | 
2a200                 | __system___vfsread
2a200     03 4A 05 F6 | 	mov	COUNT_, #3
2a204     A8 00 A0 FD | 	call	#pushregs_
2a208     28 F0 07 F1 | 	add	ptra, #40
2a20c     04 4E 05 F1 | 	add	fp, #4
2a210     A7 12 62 FC | 	wrlong	arg01, fp
2a214     04 4E 05 F1 | 	add	fp, #4
2a218     A7 14 62 FC | 	wrlong	arg02, fp
2a21c     04 4E 05 F1 | 	add	fp, #4
2a220     A7 16 62 FC | 	wrlong	arg03, fp
2a224     04 4E 85 F1 | 	sub	fp, #4
2a228     A7 FA 01 FB | 	rdlong	result1, fp
2a22c     14 4E 05 F1 | 	add	fp, #20
2a230     A7 FA 61 FC | 	wrlong	result1, fp
2a234     04 4E 05 F1 | 	add	fp, #4
2a238     A7 00 68 FC | 	wrlong	#0, fp
2a23c     1C 4E 85 F1 | 	sub	fp, #28
2a240     A7 12 02 FB | 	rdlong	arg01, fp
2a244     04 4E 85 F1 | 	sub	fp, #4
2a248     08 12 06 F1 | 	add	arg01, #8
2a24c     09 FB 01 FB | 	rdlong	result1, arg01
2a250     01 FA CD F7 | 	test	result1, #1 wz
2a254     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a258     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a25c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a260     01 FA 65 A6 |  if_e	neg	result1, #1
2a264     74 02 90 AD |  if_e	jmp	#LR__4136
2a268     04 4E 05 F1 | 	add	fp, #4
2a26c     A7 12 02 FB | 	rdlong	arg01, fp
2a270     04 4E 85 F1 | 	sub	fp, #4
2a274     14 12 06 F1 | 	add	arg01, #20
2a278     09 FB 09 FB | 	rdlong	result1, arg01 wz
2a27c     B8 00 90 AD |  if_e	jmp	#LR__4131
2a280     04 4E 05 F1 | 	add	fp, #4
2a284     A7 12 02 FB | 	rdlong	arg01, fp
2a288     09 17 02 F6 | 	mov	arg03, arg01
2a28c     14 16 06 F1 | 	add	arg03, #20
2a290     0B 27 02 FB | 	rdlong	local01, arg03
2a294     13 29 02 F6 | 	mov	local02, local01
2a298     13 26 46 F7 | 	zerox	local01, #19
2a29c     14 28 46 F0 | 	shr	local02, #20
2a2a0     02 28 66 F0 | 	shl	local02, #2
2a2a4     ED 28 02 F1 | 	add	local02, __methods__
2a2a8     14 29 02 FB | 	rdlong	local02, local02
2a2ac     04 4E 05 F1 | 	add	fp, #4
2a2b0     A7 14 02 FB | 	rdlong	arg02, fp
2a2b4     04 4E 05 F1 | 	add	fp, #4
2a2b8     A7 16 02 FB | 	rdlong	arg03, fp
2a2bc     0C 4E 85 F1 | 	sub	fp, #12
2a2c0     F2 2A 02 F6 | 	mov	local03, objptr
2a2c4     13 E5 01 F6 | 	mov	objptr, local01
2a2c8     2D 28 62 FD | 	call	local02
2a2cc     15 E5 01 F6 | 	mov	objptr, local03
2a2d0     10 4E 05 F1 | 	add	fp, #16
2a2d4     A7 FA 61 FC | 	wrlong	result1, fp
2a2d8     10 4E 85 F1 | 	sub	fp, #16
2a2dc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a2e0     44 00 90 3D |  if_ae	jmp	#LR__4130
2a2e4     04 4E 05 F1 | 	add	fp, #4
2a2e8     A7 2A 02 FB | 	rdlong	local03, fp
2a2ec     15 27 02 F6 | 	mov	local01, local03
2a2f0     08 2A 06 F1 | 	add	local03, #8
2a2f4     15 29 02 FB | 	rdlong	local02, local03
2a2f8     20 28 46 F5 | 	or	local02, #32
2a2fc     08 26 06 F1 | 	add	local01, #8
2a300     13 29 62 FC | 	wrlong	local02, local01
2a304     0C 4E 05 F1 | 	add	fp, #12
2a308     A7 12 0A FB | 	rdlong	arg01, fp wz
2a30c     10 4E 85 F1 | 	sub	fp, #16
2a310     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a314     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a318     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a31c     01 FA 65 56 |  if_ne	neg	result1, #1
2a320     00 FA 05 A6 |  if_e	mov	result1, #0
2a324     B4 01 90 FD | 	jmp	#LR__4136
2a328                 | LR__4130
2a328     10 4E 05 F1 | 	add	fp, #16
2a32c     A7 FA 01 FB | 	rdlong	result1, fp
2a330     10 4E 85 F1 | 	sub	fp, #16
2a334     A4 01 90 FD | 	jmp	#LR__4136
2a338                 | LR__4131
2a338     04 4E 05 F1 | 	add	fp, #4
2a33c     A7 12 02 FB | 	rdlong	arg01, fp
2a340     20 12 06 F1 | 	add	arg01, #32
2a344     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a348     14 4E 05 F1 | 	add	fp, #20
2a34c     A7 12 62 FC | 	wrlong	arg01, fp
2a350     18 4E 85 F1 | 	sub	fp, #24
2a354     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a358     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2a35c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a360     01 FA 65 A6 |  if_e	neg	result1, #1
2a364     74 01 90 AD |  if_e	jmp	#LR__4136
2a368     04 4E 05 F1 | 	add	fp, #4
2a36c     A7 2A 02 FB | 	rdlong	local03, fp
2a370     04 4E 85 F1 | 	sub	fp, #4
2a374     28 2A 06 F1 | 	add	local03, #40
2a378     15 29 0A FB | 	rdlong	local02, local03 wz
2a37c     7C 00 90 AD |  if_e	jmp	#LR__4133
2a380     04 4E 05 F1 | 	add	fp, #4
2a384     A7 12 02 FB | 	rdlong	arg01, fp
2a388     09 2B 02 F6 | 	mov	local03, arg01
2a38c     28 2A 06 F1 | 	add	local03, #40
2a390     15 27 02 FB | 	rdlong	local01, local03
2a394     13 29 02 F6 | 	mov	local02, local01
2a398     13 26 46 F7 | 	zerox	local01, #19
2a39c     14 28 46 F0 | 	shr	local02, #20
2a3a0     02 28 66 F0 | 	shl	local02, #2
2a3a4     ED 28 02 F1 | 	add	local02, __methods__
2a3a8     14 29 02 FB | 	rdlong	local02, local02
2a3ac     20 4E 05 F1 | 	add	fp, #32
2a3b0     A7 16 02 F6 | 	mov	arg03, fp
2a3b4     24 4E 85 F1 | 	sub	fp, #36
2a3b8     00 15 06 F6 | 	mov	arg02, #256
2a3bc     F2 2A 02 F6 | 	mov	local03, objptr
2a3c0     13 E5 01 F6 | 	mov	objptr, local01
2a3c4     2D 28 62 FD | 	call	local02
2a3c8     15 E5 01 F6 | 	mov	objptr, local03
2a3cc     10 4E 05 F1 | 	add	fp, #16
2a3d0     A7 FA 61 FC | 	wrlong	result1, fp
2a3d4     00 FA 4D F2 | 	cmps	result1, #0 wz
2a3d8     10 4E 85 F1 | 	sub	fp, #16
2a3dc     1C 00 90 5D |  if_ne	jmp	#LR__4132
2a3e0     24 4E 05 F1 | 	add	fp, #36
2a3e4     A7 28 02 FB | 	rdlong	local02, fp
2a3e8     24 4E 85 F1 | 	sub	fp, #36
2a3ec     02 28 CE F7 | 	test	local02, #2 wz
2a3f0     20 4E 05 51 |  if_ne	add	fp, #32
2a3f4     A7 02 68 5C |  if_ne	wrlong	#1, fp
2a3f8     20 4E 85 51 |  if_ne	sub	fp, #32
2a3fc                 | LR__4132
2a3fc                 | LR__4133
2a3fc     10 4E 05 F1 | 	add	fp, #16
2a400     A7 00 68 FC | 	wrlong	#0, fp
2a404     10 4E 85 F1 | 	sub	fp, #16
2a408                 | LR__4134
2a408     0C 4E 05 F1 | 	add	fp, #12
2a40c     A7 2A 02 FB | 	rdlong	local03, fp
2a410     0C 4E 85 F1 | 	sub	fp, #12
2a414     01 2A 16 F2 | 	cmp	local03, #1 wc
2a418     B4 00 90 CD |  if_b	jmp	#LR__4135
2a41c     18 4E 05 F1 | 	add	fp, #24
2a420     A7 28 02 FB | 	rdlong	local02, fp
2a424     14 2B 02 F6 | 	mov	local03, local02
2a428     13 2A 46 F7 | 	zerox	local03, #19
2a42c     14 28 46 F0 | 	shr	local02, #20
2a430     02 28 66 F0 | 	shl	local02, #2
2a434     ED 28 02 F1 | 	add	local02, __methods__
2a438     14 29 02 FB | 	rdlong	local02, local02
2a43c     14 4E 85 F1 | 	sub	fp, #20
2a440     A7 12 02 FB | 	rdlong	arg01, fp
2a444     04 4E 85 F1 | 	sub	fp, #4
2a448     F2 26 02 F6 | 	mov	local01, objptr
2a44c     15 E5 01 F6 | 	mov	objptr, local03
2a450     2D 28 62 FD | 	call	local02
2a454     13 E5 01 F6 | 	mov	objptr, local01
2a458     14 4E 05 F1 | 	add	fp, #20
2a45c     A7 FA 61 FC | 	wrlong	result1, fp
2a460     14 4E 85 F1 | 	sub	fp, #20
2a464     00 FA 55 F2 | 	cmps	result1, #0 wc
2a468     64 00 90 CD |  if_b	jmp	#LR__4135
2a46c     1C 4E 05 F1 | 	add	fp, #28
2a470     A7 2A 02 FB | 	rdlong	local03, fp
2a474     15 29 02 F6 | 	mov	local02, local03
2a478     01 28 06 F1 | 	add	local02, #1
2a47c     A7 28 62 FC | 	wrlong	local02, fp
2a480     08 4E 85 F1 | 	sub	fp, #8
2a484     A7 28 02 FB | 	rdlong	local02, fp
2a488     15 29 42 FC | 	wrbyte	local02, local03
2a48c     04 4E 85 F1 | 	sub	fp, #4
2a490     A7 2A 02 FB | 	rdlong	local03, fp
2a494     01 2A 06 F1 | 	add	local03, #1
2a498     A7 2A 62 FC | 	wrlong	local03, fp
2a49c     04 4E 85 F1 | 	sub	fp, #4
2a4a0     A7 2A 02 FB | 	rdlong	local03, fp
2a4a4     01 2A 86 F1 | 	sub	local03, #1
2a4a8     A7 2A 62 FC | 	wrlong	local03, fp
2a4ac     14 4E 05 F1 | 	add	fp, #20
2a4b0     A7 2A 0A FB | 	rdlong	local03, fp wz
2a4b4     20 4E 85 F1 | 	sub	fp, #32
2a4b8     4C FF 9F AD |  if_e	jmp	#LR__4134
2a4bc     14 4E 05 F1 | 	add	fp, #20
2a4c0     A7 28 02 FB | 	rdlong	local02, fp
2a4c4     14 4E 85 F1 | 	sub	fp, #20
2a4c8     0A 28 0E F2 | 	cmp	local02, #10 wz
2a4cc     38 FF 9F 5D |  if_ne	jmp	#LR__4134
2a4d0                 | LR__4135
2a4d0     10 4E 05 F1 | 	add	fp, #16
2a4d4     A7 FA 01 FB | 	rdlong	result1, fp
2a4d8     10 4E 85 F1 | 	sub	fp, #16
2a4dc                 | LR__4136
2a4dc     A7 F0 03 F6 | 	mov	ptra, fp
2a4e0     B2 00 A0 FD | 	call	#popregs_
2a4e4                 | __system___vfsread_ret
2a4e4     2D 00 64 FD | 	ret
2a4e8                 | 
2a4e8                 | __system____default_filbuf
2a4e8     04 4A 05 F6 | 	mov	COUNT_, #4
2a4ec     A8 00 A0 FD | 	call	#pushregs_
2a4f0     09 27 02 F6 | 	mov	local01, arg01
2a4f4     13 29 02 FB | 	rdlong	local02, local01
2a4f8     0C 28 06 F1 | 	add	local02, #12
2a4fc     14 FB 09 FB | 	rdlong	result1, local02 wz
2a500     0C 28 86 F1 | 	sub	local02, #12
2a504     20 00 90 5D |  if_ne	jmp	#LR__4140
2a508     14 28 06 F1 | 	add	local02, #20
2a50c     14 FB 01 F6 | 	mov	result1, local02
2a510     04 28 86 F1 | 	sub	local02, #4
2a514     14 FB 61 FC | 	wrlong	result1, local02
2a518     04 28 86 F1 | 	sub	local02, #4
2a51c     02 00 80 FF 
2a520     14 01 68 FC | 	wrlong	##1024, local02
2a524     0C 28 86 F1 | 	sub	local02, #12
2a528                 | LR__4140
2a528     14 26 06 F1 | 	add	local01, #20
2a52c     13 2B 02 FB | 	rdlong	local03, local01
2a530     15 2D 02 F6 | 	mov	local04, local03
2a534     14 26 86 F1 | 	sub	local01, #20
2a538     13 2C 46 F7 | 	zerox	local04, #19
2a53c     14 2A 46 F0 | 	shr	local03, #20
2a540     02 2A 66 F0 | 	shl	local03, #2
2a544     ED 2A 02 F1 | 	add	local03, __methods__
2a548     15 2B 02 FB | 	rdlong	local03, local03
2a54c     10 28 06 F1 | 	add	local02, #16
2a550     14 15 02 FB | 	rdlong	arg02, local02
2a554     04 28 86 F1 | 	sub	local02, #4
2a558     14 17 02 FB | 	rdlong	arg03, local02
2a55c     0C 28 86 F1 | 	sub	local02, #12
2a560     13 13 02 F6 | 	mov	arg01, local01
2a564     F2 26 02 F6 | 	mov	local01, objptr
2a568     16 E5 01 F6 | 	mov	objptr, local04
2a56c     2D 2A 62 FD | 	call	local03
2a570     13 E5 01 F6 | 	mov	objptr, local01
2a574     FD 2C 02 F6 | 	mov	local04, result1
2a578     00 2C 56 F2 | 	cmps	local04, #0 wc
2a57c     01 FA 65 C6 |  if_b	neg	result1, #1
2a580     28 00 90 CD |  if_b	jmp	#LR__4141
2a584     14 2D 62 FC | 	wrlong	local04, local02
2a588     10 28 06 F1 | 	add	local02, #16
2a58c     14 2B 02 FB | 	rdlong	local03, local02
2a590     0C 28 86 F1 | 	sub	local02, #12
2a594     14 2B 62 FC | 	wrlong	local03, local02
2a598     04 28 06 F1 | 	add	local02, #4
2a59c     14 2B 02 FB | 	rdlong	local03, local02
2a5a0     01 2A 46 F5 | 	or	local03, #1
2a5a4     14 2B 62 FC | 	wrlong	local03, local02
2a5a8     16 FB 01 F6 | 	mov	result1, local04
2a5ac                 | LR__4141
2a5ac     A7 F0 03 F6 | 	mov	ptra, fp
2a5b0     B2 00 A0 FD | 	call	#popregs_
2a5b4                 | __system____default_filbuf_ret
2a5b4     2D 00 64 FD | 	ret
2a5b8                 | 
2a5b8                 | __system__getlower_1125
2a5b8     41 12 56 F2 | 	cmps	arg01, #65 wc
2a5bc     10 00 90 CD |  if_b	jmp	#LR__4150
2a5c0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2a5c4     09 FB 01 C6 |  if_b	mov	result1, arg01
2a5c8     20 FA 05 C1 |  if_b	add	result1, #32
2a5cc     04 00 90 CD |  if_b	jmp	#__system__getlower_1125_ret
2a5d0                 | LR__4150
2a5d0     09 FB 01 F6 | 	mov	result1, arg01
2a5d4                 | __system__getlower_1125_ret
2a5d4     2D 00 64 FD | 	ret
2a5d8                 | 
2a5d8                 | __system___pat_match
2a5d8     08 4A 05 F6 | 	mov	COUNT_, #8
2a5dc     A8 00 A0 FD | 	call	#pushregs_
2a5e0     09 27 02 F6 | 	mov	local01, arg01
2a5e4                 | LR__4160
2a5e4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2a5e8     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2a5ec     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2a5f0     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2a5f4     2C 00 90 AD |  if_e	jmp	#LR__4161
2a5f8     0A 13 C2 FA | 	rdbyte	arg01, arg02
2a5fc     B8 FF BF FD | 	call	#__system__getlower_1125
2a600     FD 2A 02 F6 | 	mov	local03, result1
2a604     13 13 C2 FA | 	rdbyte	arg01, local01
2a608     AC FF BF FD | 	call	#__system__getlower_1125
2a60c     15 FB 09 F2 | 	cmp	result1, local03 wz
2a610     00 FA 05 56 |  if_ne	mov	result1, #0
2a614     FC 00 90 5D |  if_ne	jmp	#LR__4169
2a618     01 26 06 F1 | 	add	local01, #1
2a61c     01 14 06 F1 | 	add	arg02, #1
2a620     C0 FF 9F FD | 	jmp	#LR__4160
2a624                 | LR__4161
2a624     0A 2B C2 FA | 	rdbyte	local03, arg02
2a628     2A 2A 0E F2 | 	cmp	local03, #42 wz
2a62c     D4 00 90 5D |  if_ne	jmp	#LR__4168
2a630     01 14 06 F1 | 	add	arg02, #1
2a634     0A 29 C2 FA | 	rdbyte	local02, arg02
2a638     01 14 86 F1 | 	sub	arg02, #1
2a63c     2E 28 0E F2 | 	cmp	local02, #46 wz
2a640     28 00 90 5D |  if_ne	jmp	#LR__4162
2a644     02 14 06 F1 | 	add	arg02, #2
2a648     0A 29 C2 FA | 	rdbyte	local02, arg02
2a64c     02 14 86 F1 | 	sub	arg02, #2
2a650     2A 28 0E F2 | 	cmp	local02, #42 wz
2a654     03 14 06 A1 |  if_e	add	arg02, #3
2a658     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2a65c     03 14 86 A1 |  if_e	sub	arg02, #3
2a660     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2a664     01 FA 05 A6 |  if_e	mov	result1, #1
2a668     A8 00 90 AD |  if_e	jmp	#LR__4169
2a66c                 | LR__4162
2a66c     01 14 06 F1 | 	add	arg02, #1
2a670     00 30 06 F6 | 	mov	local06, #0
2a674     97 1E 48 FB | 	callpa	#(@LR__4165-@LR__4163)>>2,fcache_load_ptr_
2a678                 | LR__4163
2a678     18 33 02 F6 | 	mov	local07, local06
2a67c     0A 33 02 F1 | 	add	local07, arg02
2a680     19 33 CA FA | 	rdbyte	local07, local07 wz
2a684     18 2F 02 56 |  if_ne	mov	local05, local06
2a688     01 2E 06 51 |  if_ne	add	local05, #1
2a68c     17 31 02 56 |  if_ne	mov	local06, local05
2a690     E4 FF 9F 5D |  if_ne	jmp	#LR__4163
2a694     00 34 06 F6 | 	mov	local08, #0
2a698                 | LR__4164
2a698     1A 33 02 F6 | 	mov	local07, local08
2a69c     13 33 02 F1 | 	add	local07, local01
2a6a0     19 33 CA FA | 	rdbyte	local07, local07 wz
2a6a4     1A 2F 02 56 |  if_ne	mov	local05, local08
2a6a8     01 2E 06 51 |  if_ne	add	local05, #1
2a6ac     17 35 02 56 |  if_ne	mov	local08, local05
2a6b0     E4 FF 9F 5D |  if_ne	jmp	#LR__4164
2a6b4                 | LR__4165
2a6b4     18 35 52 F2 | 	cmps	local08, local06 wc
2a6b8     00 FA 05 C6 |  if_b	mov	result1, #0
2a6bc     54 00 90 CD |  if_b	jmp	#LR__4169
2a6c0     1A 29 02 F6 | 	mov	local02, local08
2a6c4     18 29 82 F1 | 	sub	local02, local06
2a6c8     14 27 02 F1 | 	add	local01, local02
2a6cc                 | LR__4166
2a6cc     01 30 56 F2 | 	cmps	local06, #1 wc
2a6d0     30 00 90 CD |  if_b	jmp	#LR__4167
2a6d4     13 13 C2 FA | 	rdbyte	arg01, local01
2a6d8     DC FE BF FD | 	call	#__system__getlower_1125
2a6dc     FD 34 02 F6 | 	mov	local08, result1
2a6e0     0A 13 C2 FA | 	rdbyte	arg01, arg02
2a6e4     D0 FE BF FD | 	call	#__system__getlower_1125
2a6e8     FD 34 0A F2 | 	cmp	local08, result1 wz
2a6ec     00 FA 05 56 |  if_ne	mov	result1, #0
2a6f0     20 00 90 5D |  if_ne	jmp	#LR__4169
2a6f4     01 26 06 F1 | 	add	local01, #1
2a6f8     01 14 06 F1 | 	add	arg02, #1
2a6fc     01 30 86 F1 | 	sub	local06, #1
2a700     C8 FF 9F FD | 	jmp	#LR__4166
2a704                 | LR__4167
2a704                 | LR__4168
2a704     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2a708     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2a70c     01 FA 05 A6 |  if_e	mov	result1, #1
2a710     00 FA 05 56 |  if_ne	mov	result1, #0
2a714                 | LR__4169
2a714     A7 F0 03 F6 | 	mov	ptra, fp
2a718     B2 00 A0 FD | 	call	#popregs_
2a71c                 | __system___pat_match_ret
2a71c     2D 00 64 FD | 	ret
2a720                 | 
2a720                 | _fatfs_cc_ff_uni2oem
2a720     00 00 06 F6 | 	mov	_var01, #0
2a724     80 12 16 F2 | 	cmp	arg01, #128 wc
2a728     09 01 02 C6 |  if_b	mov	_var01, arg01
2a72c     58 00 90 CD |  if_b	jmp	#LR__4174
2a730     80 00 00 FF 
2a734     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2a738     4C 00 90 3D |  if_ae	jmp	#LR__4173
2a73c     0A FB 31 F9 | 	getword	result1, arg02, #0
2a740     01 00 00 FF 
2a744     52 FB 0D F2 | 	cmp	result1, ##850 wz
2a748     3C 00 90 5D |  if_ne	jmp	#LR__4173
2a74c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2a74c     00 00 06 F6 | 	mov	_var01, #0
2a750     97 14 48 FB | 	callpa	#(@LR__4171-@LR__4170)>>2,fcache_load_ptr_
2a754                 | LR__4170
2a754     00 FB 31 F9 | 	getword	result1, _var01, #0
2a758     80 FA 15 F2 | 	cmp	result1, #128 wc
2a75c     1C 00 90 3D |  if_ae	jmp	#LR__4172
2a760     00 FB 31 F9 | 	getword	result1, _var01, #0
2a764     01 FA 65 F0 | 	shl	result1, #1
2a768     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2a76c     FD FA E1 FA | 	rdword	result1, result1
2a770     FD 12 0A F2 | 	cmp	arg01, result1 wz
2a774     01 00 06 51 |  if_ne	add	_var01, #1
2a778     D8 FF 9F 5D |  if_ne	jmp	#LR__4170
2a77c                 | LR__4171
2a77c                 | LR__4172
2a77c     00 01 32 F9 | 	getword	_var01, _var01, #0
2a780     80 00 06 F1 | 	add	_var01, #128
2a784     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2a788                 | LR__4173
2a788                 | LR__4174
2a788                 | ' 			c = (c + 0x80) & 0xFF;
2a788                 | ' 		}
2a788                 | ' 	}
2a788                 | ' 
2a788                 | ' 	return c;
2a788     00 FB 01 F6 | 	mov	result1, _var01
2a78c                 | _fatfs_cc_ff_uni2oem_ret
2a78c     2D 00 64 FD | 	ret
2a790                 | 
2a790                 | _fatfs_cc_ff_oem2uni
2a790     00 00 06 F6 | 	mov	_var01, #0
2a794     09 FB 31 F9 | 	getword	result1, arg01, #0
2a798     80 FA 15 F2 | 	cmp	result1, #128 wc
2a79c     09 01 02 C6 |  if_b	mov	_var01, arg01
2a7a0     2C 00 90 CD |  if_b	jmp	#LR__4181
2a7a4     0A 15 32 F9 | 	getword	arg02, arg02, #0
2a7a8     01 00 00 FF 
2a7ac     52 15 0E F2 | 	cmp	arg02, ##850 wz
2a7b0     1C 00 90 5D |  if_ne	jmp	#LR__4180
2a7b4     09 FB 31 F9 | 	getword	result1, arg01, #0
2a7b8     00 FB 15 F2 | 	cmp	result1, #256 wc
2a7bc     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2a7c0     80 12 86 C1 |  if_b	sub	arg01, #128
2a7c4     01 12 66 C0 |  if_b	shl	arg01, #1
2a7c8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2a7cc     09 01 E2 CA |  if_b	rdword	_var01, arg01
2a7d0                 | LR__4180
2a7d0                 | LR__4181
2a7d0                 | ' 		}
2a7d0                 | ' 	}
2a7d0                 | ' 
2a7d0                 | ' 	return c;
2a7d0     00 FB 01 F6 | 	mov	result1, _var01
2a7d4                 | _fatfs_cc_ff_oem2uni_ret
2a7d4     2D 00 64 FD | 	ret
2a7d8                 | 
2a7d8                 | _fatfs_cc_ff_wtoupper
2a7d8     09 01 02 F6 | 	mov	_var01, arg01
2a7dc     80 00 00 FF 
2a7e0     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2a7e4     60 01 90 3D |  if_ae	jmp	#LR__4203
2a7e8     00 03 02 F6 | 	mov	_var02, _var01
2a7ec     01 01 32 F9 | 	getword	_var01, _var02, #0
2a7f0     08 00 00 FF 
2a7f4     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2a7f8     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2a7fc     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2a800     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2a804     01 00 00 3F 
2a808     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2a80c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2a810     01 00 00 3F 
2a814     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2a818     02 07 02 F6 | 	mov	_var04, _var03
2a81c                 | ' 		uc = (WORD)uni;
2a81c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2a81c                 | ' 		for (;;) {
2a81c                 | LR__4190
2a81c     03 09 E2 FA | 	rdword	_var05, _var04
2a820     04 05 02 F6 | 	mov	_var03, _var05
2a824     0F 04 4E F7 | 	zerox	_var03, #15 wz
2a828     02 06 06 F1 | 	add	_var04, #2
2a82c     14 01 90 AD |  if_e	jmp	#LR__4202
2a830     01 05 32 F9 | 	getword	_var03, _var02, #0
2a834     04 01 32 F9 | 	getword	_var01, _var05, #0
2a838     00 05 12 F2 | 	cmp	_var03, _var01 wc
2a83c     04 01 90 CD |  if_b	jmp	#LR__4202
2a840     03 0B E2 FA | 	rdword	_var06, _var04
2a844     05 0D 32 F9 | 	getword	_var07, _var06, #0
2a848     08 0C 46 F0 | 	shr	_var07, #8
2a84c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2a850     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2a854     01 05 32 F9 | 	getword	_var03, _var02, #0
2a858     04 0F 32 F9 | 	getword	_var08, _var05, #0
2a85c     05 01 32 F9 | 	getword	_var01, _var06, #0
2a860     00 0F 02 F1 | 	add	_var08, _var01
2a864     07 05 52 F2 | 	cmps	_var03, _var08 wc
2a868     02 06 06 F1 | 	add	_var04, #2
2a86c     C4 00 90 3D |  if_ae	jmp	#LR__4201
2a870                 | ' 				switch (cmd) {
2a870     06 11 32 F9 | 	getword	_var09, _var07, #0
2a874     09 10 26 F3 | 	fle	_var09, #9
2a878     30 10 62 FD | 	jmprel	_var09
2a87c                 | LR__4191
2a87c     24 00 90 FD | 	jmp	#LR__4192
2a880     3C 00 90 FD | 	jmp	#LR__4193
2a884     54 00 90 FD | 	jmp	#LR__4194
2a888     5C 00 90 FD | 	jmp	#LR__4195
2a88c     64 00 90 FD | 	jmp	#LR__4196
2a890     6C 00 90 FD | 	jmp	#LR__4197
2a894     74 00 90 FD | 	jmp	#LR__4198
2a898     7C 00 90 FD | 	jmp	#LR__4199
2a89c     84 00 90 FD | 	jmp	#LR__4200
2a8a0     A0 00 90 FD | 	jmp	#LR__4202
2a8a4                 | LR__4192
2a8a4     01 03 32 F9 | 	getword	_var02, _var02, #0
2a8a8     04 09 32 F9 | 	getword	_var05, _var05, #0
2a8ac     04 03 82 F1 | 	sub	_var02, _var05
2a8b0     01 02 66 F0 | 	shl	_var02, #1
2a8b4     03 03 02 F1 | 	add	_var02, _var04
2a8b8     01 03 E2 FA | 	rdword	_var02, _var02
2a8bc     84 00 90 FD | 	jmp	#LR__4202
2a8c0                 | LR__4193
2a8c0     01 05 32 F9 | 	getword	_var03, _var02, #0
2a8c4     01 03 32 F9 | 	getword	_var02, _var02, #0
2a8c8     04 09 32 F9 | 	getword	_var05, _var05, #0
2a8cc     04 03 82 F1 | 	sub	_var02, _var05
2a8d0     01 02 06 F5 | 	and	_var02, #1
2a8d4     02 03 C2 F2 | 	subr	_var02, _var03
2a8d8     68 00 90 FD | 	jmp	#LR__4202
2a8dc                 | LR__4194
2a8dc     01 03 32 F9 | 	getword	_var02, _var02, #0
2a8e0     10 02 86 F1 | 	sub	_var02, #16
2a8e4     5C 00 90 FD | 	jmp	#LR__4202
2a8e8                 | LR__4195
2a8e8     01 03 32 F9 | 	getword	_var02, _var02, #0
2a8ec     20 02 86 F1 | 	sub	_var02, #32
2a8f0     50 00 90 FD | 	jmp	#LR__4202
2a8f4                 | LR__4196
2a8f4     01 03 32 F9 | 	getword	_var02, _var02, #0
2a8f8     30 02 86 F1 | 	sub	_var02, #48
2a8fc     44 00 90 FD | 	jmp	#LR__4202
2a900                 | LR__4197
2a900     01 03 32 F9 | 	getword	_var02, _var02, #0
2a904     1A 02 86 F1 | 	sub	_var02, #26
2a908     38 00 90 FD | 	jmp	#LR__4202
2a90c                 | LR__4198
2a90c     01 03 32 F9 | 	getword	_var02, _var02, #0
2a910     08 02 06 F1 | 	add	_var02, #8
2a914     2C 00 90 FD | 	jmp	#LR__4202
2a918                 | LR__4199
2a918     01 03 32 F9 | 	getword	_var02, _var02, #0
2a91c     50 02 86 F1 | 	sub	_var02, #80
2a920     20 00 90 FD | 	jmp	#LR__4202
2a924                 | LR__4200
2a924     01 03 32 F9 | 	getword	_var02, _var02, #0
2a928     0E 00 00 FF 
2a92c     60 02 86 F1 | 	sub	_var02, ##7264
2a930                 | ' 				}
2a930                 | ' 				break;
2a930     10 00 90 FD | 	jmp	#LR__4202
2a934                 | LR__4201
2a934     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2a938     02 0A 06 AA |  if_e	mul	_var06, #2
2a93c     05 07 02 A1 |  if_e	add	_var04, _var06
2a940     D8 FE 9F FD | 	jmp	#LR__4190
2a944                 | LR__4202
2a944     01 01 32 F9 | 	getword	_var01, _var02, #0
2a948                 | LR__4203
2a948                 | ' 		}
2a948                 | ' 		uni = uc;
2a948                 | ' 	}
2a948                 | ' 
2a948                 | ' 	return uni;
2a948     00 FB 01 F6 | 	mov	result1, _var01
2a94c                 | _fatfs_cc_ff_wtoupper_ret
2a94c     2D 00 64 FD | 	ret
2a950                 | 
2a950                 | _fatfs_cc_strncpy
2a950     09 01 02 F6 | 	mov	_var01, arg01
2a954     97 12 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2a958                 | ' 
2a958                 | ' 	dscan = dst;
2a958                 | ' 	sscan = src;
2a958                 | ' 	count = n;
2a958                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2a958                 | LR__4210
2a958     01 16 86 F1 | 	sub	arg03, #1
2a95c     00 16 56 F2 | 	cmps	arg03, #0 wc
2a960     18 00 90 CD |  if_b	jmp	#LR__4212
2a964     0A FB C1 FA | 	rdbyte	result1, arg02
2a968     00 FB 41 FC | 	wrbyte	result1, _var01
2a96c     01 14 06 F1 | 	add	arg02, #1
2a970     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2a974                 | ' 		continue;
2a974     01 00 06 F1 | 	add	_var01, #1
2a978     DC FF 9F 5D |  if_ne	jmp	#LR__4210
2a97c                 | LR__4211
2a97c                 | LR__4212
2a97c     97 0C 48 FB | 	callpa	#(@LR__4214-@LR__4213)>>2,fcache_load_ptr_
2a980                 | ' 	while (--count >= 0)
2a980                 | LR__4213
2a980     01 16 86 F1 | 	sub	arg03, #1
2a984     00 16 56 F2 | 	cmps	arg03, #0 wc
2a988     00 03 02 36 |  if_ae	mov	_var02, _var01
2a98c     01 00 06 31 |  if_ae	add	_var01, #1
2a990     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2a994     E8 FF 9F 3D |  if_ae	jmp	#LR__4213
2a998                 | LR__4214
2a998                 | ' 		*dscan++ = '\0';
2a998                 | ' 	return(dst);
2a998     09 FB 01 F6 | 	mov	result1, arg01
2a99c                 | _fatfs_cc_strncpy_ret
2a99c     2D 00 64 FD | 	ret
2a9a0                 | 
2a9a0                 | _fatfs_cc_memcmp
2a9a0                 | ' 	for (n = size; n > 0; n--)
2a9a0     00 16 0E F2 | 	cmp	arg03, #0 wz
2a9a4     28 00 90 AD |  if_e	jmp	#LR__4221
2a9a8                 | LR__4220
2a9a8     09 01 C2 FA | 	rdbyte	_var01, arg01
2a9ac     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a9b0     01 01 0A F2 | 	cmp	_var01, _var02 wz
2a9b4     01 12 06 A1 |  if_e	add	arg01, #1
2a9b8     01 14 06 A1 |  if_e	add	arg02, #1
2a9bc                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2a9bc     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2a9c0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2a9c4     01 FB 81 51 |  if_ne	sub	result1, _var02
2a9c8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2a9cc     F6 17 6E FB | 	djnz	arg03, #LR__4220
2a9d0                 | LR__4221
2a9d0                 | ' 
2a9d0                 | ' 	return(0);
2a9d0     00 FA 05 F6 | 	mov	result1, #0
2a9d4                 | _fatfs_cc_memcmp_ret
2a9d4     2D 00 64 FD | 	ret
2a9d8                 | 
2a9d8                 | _fatfs_cc_strncmp
2a9d8     09 01 0A F6 | 	mov	_var01, arg01 wz
2a9dc     14 00 90 5D |  if_ne	jmp	#LR__4230
2a9e0                 | ' 		return scan2 ? -1 : 0;
2a9e0     00 14 0E F2 | 	cmp	arg02, #0 wz
2a9e4     01 02 66 56 |  if_ne	neg	_var02, #1
2a9e8     00 02 06 A6 |  if_e	mov	_var02, #0
2a9ec     01 FB 01 F6 | 	mov	result1, _var02
2a9f0     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2a9f4                 | LR__4230
2a9f4     00 14 0E F2 | 	cmp	arg02, #0 wz
2a9f8     01 FA 05 A6 |  if_e	mov	result1, #1
2a9fc     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2aa00     0B 05 02 F6 | 	mov	_var03, arg03
2aa04     97 16 48 FB | 	callpa	#(@LR__4232-@LR__4231)>>2,fcache_load_ptr_
2aa08                 | ' 	count = n;
2aa08                 | ' 	do {
2aa08                 | LR__4231
2aa08     00 07 C2 FA | 	rdbyte	_var04, _var01
2aa0c     0A 09 02 F6 | 	mov	_var05, arg02
2aa10     04 0B C2 FA | 	rdbyte	_var06, _var05
2aa14     01 04 86 F1 | 	sub	_var03, #1
2aa18     00 04 56 F2 | 	cmps	_var03, #0 wc
2aa1c     01 00 06 F1 | 	add	_var01, #1
2aa20     01 14 06 F1 | 	add	arg02, #1
2aa24     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2aa28     08 00 90 2D |  if_nc_and_z	jmp	#LR__4233
2aa2c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2aa30     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4231
2aa34                 | LR__4232
2aa34                 | LR__4233
2aa34     00 04 56 F2 | 	cmps	_var03, #0 wc
2aa38                 | ' 		return(0);
2aa38     00 FA 05 C6 |  if_b	mov	result1, #0
2aa3c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2aa40     05 07 0A F2 | 	cmp	_var04, _var06 wz
2aa44                 | ' 		return(0);
2aa44     00 FA 05 A6 |  if_e	mov	result1, #0
2aa48     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2aa4c     00 06 0E F2 | 	cmp	_var04, #0 wz
2aa50                 | ' 		return(-1);
2aa50     01 FA 65 A6 |  if_e	neg	result1, #1
2aa54     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2aa58     00 0A 0E F2 | 	cmp	_var06, #0 wz
2aa5c                 | ' 		return(1);
2aa5c     01 FA 05 A6 |  if_e	mov	result1, #1
2aa60                 | ' 		return(c1 - c2);
2aa60     03 FB 01 56 |  if_ne	mov	result1, _var04
2aa64     05 FB 81 51 |  if_ne	sub	result1, _var06
2aa68                 | _fatfs_cc_strncmp_ret
2aa68     2D 00 64 FD | 	ret
2aa6c                 | 
2aa6c                 | _fatfs_cc_strchr
2aa6c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2aa6c                 | ' 	while ((c = *s++) != (char) charwanted)
2aa6c                 | LR__4240
2aa6c     09 01 02 F6 | 	mov	_var01, arg01
2aa70     00 03 C2 FA | 	rdbyte	_var02, _var01
2aa74     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2aa78     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2aa7c     03 05 0A F2 | 	cmp	_var03, _var04 wz
2aa80     01 12 06 F1 | 	add	arg01, #1
2aa84     14 00 90 AD |  if_e	jmp	#LR__4241
2aa88     01 05 02 F6 | 	mov	_var03, _var02
2aa8c     07 04 4E F7 | 	zerox	_var03, #7 wz
2aa90     00 FA 05 A6 |  if_e	mov	result1, #0
2aa94     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2aa98     D0 FF 9F FD | 	jmp	#LR__4240
2aa9c                 | LR__4241
2aa9c                 | ' 	return((char *)--s);
2aa9c     01 12 86 F1 | 	sub	arg01, #1
2aaa0     09 FB 01 F6 | 	mov	result1, arg01
2aaa4                 | _fatfs_cc_strchr_ret
2aaa4     2D 00 64 FD | 	ret
2aaa8                 | 
2aaa8                 | _fatfs_cc_disk_initialize
2aaa8     04 4A 05 F6 | 	mov	COUNT_, #4
2aaac     A8 00 A0 FD | 	call	#pushregs_
2aab0     40 F0 07 F1 | 	add	ptra, #64
2aab4     04 4E 05 F1 | 	add	fp, #4
2aab8     A7 12 42 FC | 	wrbyte	arg01, fp
2aabc     01 00 00 FF 
2aac0     14 E4 05 F1 | 	add	objptr, ##532
2aac4     F2 18 02 FB | 	rdlong	arg04, objptr
2aac8     2C 4E 05 F1 | 	add	fp, #44
2aacc     A7 18 62 FC | 	wrlong	arg04, fp
2aad0     04 E4 85 F1 | 	sub	objptr, #4
2aad4     F2 18 02 FB | 	rdlong	arg04, objptr
2aad8     04 4E 05 F1 | 	add	fp, #4
2aadc     A7 18 62 FC | 	wrlong	arg04, fp
2aae0     08 E4 05 F1 | 	add	objptr, #8
2aae4     F2 18 02 FB | 	rdlong	arg04, objptr
2aae8     04 4E 05 F1 | 	add	fp, #4
2aaec     A7 18 62 FC | 	wrlong	arg04, fp
2aaf0     04 E4 05 F1 | 	add	objptr, #4
2aaf4     F2 18 02 FB | 	rdlong	arg04, objptr
2aaf8     04 4E 05 F1 | 	add	fp, #4
2aafc     A7 18 62 FC | 	wrlong	arg04, fp
2ab00     04 E4 05 F1 | 	add	objptr, #4
2ab04     F2 02 48 FC | 	wrbyte	#1, objptr
2ab08     01 00 00 FF 
2ab0c     20 E4 85 F1 | 	sub	objptr, ##544
2ab10     38 4E 85 F1 | 	sub	fp, #56
2ab14     A7 18 CA FA | 	rdbyte	arg04, fp wz
2ab18     04 4E 85 F1 | 	sub	fp, #4
2ab1c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ab1c                 | '             return RES_NOTRDY;
2ab1c     03 FA 05 56 |  if_ne	mov	result1, #3
2ab20     D8 05 90 5D |  if_ne	jmp	#LR__4268
2ab24     13 00 00 FF 
2ab28     10 13 06 F6 | 	mov	arg01, ##10000
2ab2c     44 95 BF FD | 	call	#__system___waitus
2ab30     30 4E 05 F1 | 	add	fp, #48
2ab34     A7 12 02 FB | 	rdlong	arg01, fp
2ab38     09 01 08 FC | 	wrpin	#0, arg01
2ab3c     04 4E 05 F1 | 	add	fp, #4
2ab40     A7 12 02 FB | 	rdlong	arg01, fp
2ab44     09 01 08 FC | 	wrpin	#0, arg01
2ab48     04 4E 05 F1 | 	add	fp, #4
2ab4c     A7 12 02 FB | 	rdlong	arg01, fp
2ab50     09 01 08 FC | 	wrpin	#0, arg01
2ab54     04 4E 05 F1 | 	add	fp, #4
2ab58     A7 12 02 FB | 	rdlong	arg01, fp
2ab5c     09 00 80 FF 
2ab60     09 01 08 FC | 	wrpin	##4608, arg01
2ab64     0C 4E 85 F1 | 	sub	fp, #12
2ab68     A7 12 02 FB | 	rdlong	arg01, fp
2ab6c     59 12 62 FD | 	drvh	arg01
2ab70     04 4E 05 F1 | 	add	fp, #4
2ab74     A7 12 02 FB | 	rdlong	arg01, fp
2ab78     59 12 62 FD | 	drvh	arg01
2ab7c     04 4E 05 F1 | 	add	fp, #4
2ab80     A7 12 02 FB | 	rdlong	arg01, fp
2ab84     59 12 62 FD | 	drvh	arg01
2ab88     04 4E 05 F1 | 	add	fp, #4
2ab8c     A7 12 02 FB | 	rdlong	arg01, fp
2ab90     59 12 62 FD | 	drvh	arg01
2ab94     20 4E 85 F1 | 	sub	fp, #32
2ab98     00 04 80 FF 
2ab9c     A7 20 68 FC | 	wrlong	##524304, fp
2aba0     04 4E 05 F1 | 	add	fp, #4
2aba4     20 03 80 FF 
2aba8     A7 90 68 FC | 	wrlong	##409672, fp
2abac     14 4E 05 F1 | 	add	fp, #20
2abb0     A7 26 02 FB | 	rdlong	local01, fp
2abb4     18 4E 85 F1 | 	sub	fp, #24
2abb8     A7 16 02 FB | 	rdlong	arg03, fp
2abbc     40 26 62 FD | 	dirl	local01
2abc0     A0 03 80 FF 
2abc4     13 91 08 FC | 	wrpin	##475208, local01
2abc8     13 17 12 FC | 	wxpin	arg03, local01
2abcc     13 01 28 FC | 	wypin	#0, local01
2abd0     41 26 62 FD | 	dirh	local01
2abd4     1C 4E 05 F1 | 	add	fp, #28
2abd8     A7 28 02 FB | 	rdlong	local02, fp
2abdc     14 27 82 F1 | 	sub	local01, local02
2abe0     07 26 06 F5 | 	and	local01, #7
2abe4     18 26 66 F0 | 	shl	local01, #24
2abe8     78 14 06 F6 | 	mov	arg02, #120
2abec     13 15 42 F5 | 	or	arg02, local01
2abf0     14 4E 85 F1 | 	sub	fp, #20
2abf4     A7 14 62 FC | 	wrlong	arg02, fp
2abf8     14 4E 05 F1 | 	add	fp, #20
2abfc     A7 12 02 FB | 	rdlong	arg01, fp
2ac00     10 14 26 F4 | 	bith	arg02, #16
2ac04     40 12 62 FD | 	dirl	arg01
2ac08     09 15 02 FC | 	wrpin	arg02, arg01
2ac0c     09 3F 18 FC | 	wxpin	#31, arg01
2ac10     FF FF FF FF 
2ac14     09 FF 2B FC | 	wypin	##-1, arg01
2ac18     41 12 62 FD | 	dirh	arg01
2ac1c     04 4E 85 F1 | 	sub	fp, #4
2ac20     A7 14 02 FB | 	rdlong	arg02, fp
2ac24     08 4E 05 F1 | 	add	fp, #8
2ac28     A7 2A 02 FB | 	rdlong	local03, fp
2ac2c     15 15 82 F1 | 	sub	arg02, local03
2ac30     07 14 06 F5 | 	and	arg02, #7
2ac34     18 14 66 F0 | 	shl	arg02, #24
2ac38     14 4E 85 F1 | 	sub	fp, #20
2ac3c     A7 14 62 FC | 	wrlong	arg02, fp
2ac40     29 00 00 FF 
2ac44     7A 14 46 F5 | 	or	arg02, ##21114
2ac48     A7 14 62 FC | 	wrlong	arg02, fp
2ac4c     14 4E 05 F1 | 	add	fp, #20
2ac50     A7 12 02 FB | 	rdlong	arg01, fp
2ac54     40 12 62 FD | 	dirl	arg01
2ac58     09 15 02 FC | 	wrpin	arg02, arg01
2ac5c     09 4F 18 FC | 	wxpin	#39, arg01
2ac60     09 01 28 FC | 	wypin	#0, arg01
2ac64     41 12 62 FD | 	dirh	arg01
2ac68     28 4E 85 F1 | 	sub	fp, #40
2ac6c     A7 12 02 F6 | 	mov	arg01, fp
2ac70     14 4E 85 F1 | 	sub	fp, #20
2ac74     0A 14 06 F6 | 	mov	arg02, #10
2ac78     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1159
2ac7c     00 12 06 F6 | 	mov	arg01, #0
2ac80     00 14 06 F6 | 	mov	arg02, #0
2ac84     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2ac88     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1169
2ac8c     64 12 06 F6 | 	mov	arg01, #100
2ac90     E0 93 BF FD | 	call	#__system___waitus
2ac94     14 4E 05 F1 | 	add	fp, #20
2ac98     A7 12 02 F6 | 	mov	arg01, fp
2ac9c     14 4E 85 F1 | 	sub	fp, #20
2aca0     0A 14 06 F6 | 	mov	arg02, #10
2aca4     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1159
2aca8     0C 4E 05 F1 | 	add	fp, #12
2acac     A7 00 48 FC | 	wrbyte	#0, fp
2acb0     0C 4E 85 F1 | 	sub	fp, #12
2acb4     00 12 06 F6 | 	mov	arg01, #0
2acb8     00 14 06 F6 | 	mov	arg02, #0
2acbc     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2acc0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2acc4     01 18 0E F2 | 	cmp	arg04, #1 wz
2acc8     B8 03 90 5D |  if_ne	jmp	#LR__4267
2accc     08 12 06 F6 | 	mov	arg01, #8
2acd0     AA 15 06 F6 | 	mov	arg02, #426
2acd4     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2acd8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2acdc     01 FA 0D F2 | 	cmp	result1, #1 wz
2ace0     98 01 90 5D |  if_ne	jmp	#LR__4253
2ace4     14 4E 05 F1 | 	add	fp, #20
2ace8     A7 12 02 F6 | 	mov	arg01, fp
2acec     14 4E 85 F1 | 	sub	fp, #20
2acf0     04 14 06 F6 | 	mov	arg02, #4
2acf4     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1159
2acf8     16 4E 05 F1 | 	add	fp, #22
2acfc     A7 2C C2 FA | 	rdbyte	local04, fp
2ad00     16 4E 85 F1 | 	sub	fp, #22
2ad04     01 2C 0E F2 | 	cmp	local04, #1 wz
2ad08     17 4E 05 A1 |  if_e	add	fp, #23
2ad0c     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2ad10     17 4E 85 A1 |  if_e	sub	fp, #23
2ad14     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2ad18     68 03 90 5D |  if_ne	jmp	#LR__4266
2ad1c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2ad1c     18 4E 05 F1 | 	add	fp, #24
2ad20     01 00 80 FF 
2ad24     A7 D0 6B FC | 	wrlong	##1000, fp
2ad28     18 4E 85 F1 | 	sub	fp, #24
2ad2c                 | LR__4250
2ad2c     18 4E 05 F1 | 	add	fp, #24
2ad30     A7 26 0A FB | 	rdlong	local01, fp wz
2ad34     18 4E 85 F1 | 	sub	fp, #24
2ad38     3C 00 90 AD |  if_e	jmp	#LR__4251
2ad3c     A9 12 06 F6 | 	mov	arg01, #169
2ad40     1E 14 C6 F9 | 	decod	arg02, #30
2ad44     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2ad48     FD 2C 02 F6 | 	mov	local04, result1
2ad4c     07 2C 4E F7 | 	zerox	local04, #7 wz
2ad50     24 00 90 AD |  if_e	jmp	#LR__4251
2ad54     01 00 00 FF 
2ad58     E8 13 06 F6 | 	mov	arg01, ##1000
2ad5c     14 93 BF FD | 	call	#__system___waitus
2ad60     18 4E 05 F1 | 	add	fp, #24
2ad64     A7 2C 02 FB | 	rdlong	local04, fp
2ad68     01 2C 86 F1 | 	sub	local04, #1
2ad6c     A7 2C 62 FC | 	wrlong	local04, fp
2ad70     18 4E 85 F1 | 	sub	fp, #24
2ad74     B4 FF 9F FD | 	jmp	#LR__4250
2ad78                 | LR__4251
2ad78     18 4E 05 F1 | 	add	fp, #24
2ad7c     A7 2C 0A FB | 	rdlong	local04, fp wz
2ad80     18 4E 85 F1 | 	sub	fp, #24
2ad84     4C 00 90 AD |  if_e	jmp	#LR__4252
2ad88     3A 12 06 F6 | 	mov	arg01, #58
2ad8c     00 14 06 F6 | 	mov	arg02, #0
2ad90     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2ad94     FD 2A 02 F6 | 	mov	local03, result1
2ad98     07 2A 4E F7 | 	zerox	local03, #7 wz
2ad9c     34 00 90 5D |  if_ne	jmp	#LR__4252
2ada0     14 4E 05 F1 | 	add	fp, #20
2ada4     A7 12 02 F6 | 	mov	arg01, fp
2ada8     14 4E 85 F1 | 	sub	fp, #20
2adac     04 14 06 F6 | 	mov	arg02, #4
2adb0     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1159
2adb4     14 4E 05 F1 | 	add	fp, #20
2adb8     A7 26 C2 FA | 	rdbyte	local01, fp
2adbc     40 26 CE F7 | 	test	local01, #64 wz
2adc0     0C 2C 06 56 |  if_ne	mov	local04, #12
2adc4     04 2C 06 A6 |  if_e	mov	local04, #4
2adc8     08 4E 85 F1 | 	sub	fp, #8
2adcc     A7 2C 42 FC | 	wrbyte	local04, fp
2add0     0C 4E 85 F1 | 	sub	fp, #12
2add4                 | LR__4252
2add4     14 2C 06 FB | 	rdlong	local04, #20
2add8     18 4E 05 F1 | 	add	fp, #24
2addc     A7 2C 62 FC | 	wrlong	local04, fp
2ade0     0C 4E 05 F1 | 	add	fp, #12
2ade4     A7 2C 02 FB | 	rdlong	local04, fp
2ade8     1B 2C 26 F4 | 	bith	local04, #27
2adec     A7 2C 62 FC | 	wrlong	local04, fp
2adf0     0C 4E 85 F1 | 	sub	fp, #12
2adf4     A7 2C 02 FB | 	rdlong	local04, fp
2adf8     18 4E 85 F1 | 	sub	fp, #24
2adfc     68 78 04 FF 
2ae00     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2ae04     1C 4E 05 C1 |  if_b	add	fp, #28
2ae08     00 01 80 CF 
2ae0c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2ae10     1C 4E 85 C1 |  if_b	sub	fp, #28
2ae14     6C 02 90 CD |  if_b	jmp	#LR__4266
2ae18     18 4E 05 F1 | 	add	fp, #24
2ae1c     A7 2C 02 FB | 	rdlong	local04, fp
2ae20     18 4E 85 F1 | 	sub	fp, #24
2ae24     E1 F5 05 FF 
2ae28     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2ae2c     1C 4E 05 C1 |  if_b	add	fp, #28
2ae30     00 01 80 CF 
2ae34     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2ae38     1C 4E 85 C1 |  if_b	sub	fp, #28
2ae3c     44 02 90 CD |  if_b	jmp	#LR__4266
2ae40     18 4E 05 F1 | 	add	fp, #24
2ae44     A7 2C 02 FB | 	rdlong	local04, fp
2ae48     18 4E 85 F1 | 	sub	fp, #24
2ae4c     3B 58 08 FF 
2ae50     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2ae54     1C 4E 05 C1 |  if_b	add	fp, #28
2ae58     00 01 80 CF 
2ae5c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2ae60     1C 4E 85 C1 |  if_b	sub	fp, #28
2ae64     1C 02 90 CD |  if_b	jmp	#LR__4266
2ae68     1C 4E 05 F1 | 	add	fp, #28
2ae6c     80 01 80 FF 
2ae70     A7 10 68 FC | 	wrlong	##196616, fp
2ae74     1C 4E 85 F1 | 	sub	fp, #28
2ae78     08 02 90 FD | 	jmp	#LR__4266
2ae7c                 | LR__4253
2ae7c     A9 12 06 F6 | 	mov	arg01, #169
2ae80     00 14 06 F6 | 	mov	arg02, #0
2ae84     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2ae88     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2ae8c     02 2C 16 F2 | 	cmp	local04, #2 wc
2ae90     18 00 90 3D |  if_ae	jmp	#LR__4254
2ae94     0C 4E 05 F1 | 	add	fp, #12
2ae98     A7 04 48 FC | 	wrbyte	#2, fp
2ae9c     04 4E 05 F1 | 	add	fp, #4
2aea0     A7 52 49 FC | 	wrbyte	#169, fp
2aea4     10 4E 85 F1 | 	sub	fp, #16
2aea8     14 00 90 FD | 	jmp	#LR__4255
2aeac                 | LR__4254
2aeac     0C 4E 05 F1 | 	add	fp, #12
2aeb0     A7 02 48 FC | 	wrbyte	#1, fp
2aeb4     04 4E 05 F1 | 	add	fp, #4
2aeb8     A7 02 48 FC | 	wrbyte	#1, fp
2aebc     10 4E 85 F1 | 	sub	fp, #16
2aec0                 | LR__4255
2aec0                 | ' 				ty =  0x01 ; cmd =  (1) ;
2aec0                 | ' 			}
2aec0                 | ' 			for (tmr = 1000; tmr; tmr--) {
2aec0     18 4E 05 F1 | 	add	fp, #24
2aec4     01 00 80 FF 
2aec8     A7 D0 6B FC | 	wrlong	##1000, fp
2aecc     18 4E 85 F1 | 	sub	fp, #24
2aed0                 | LR__4256
2aed0     18 4E 05 F1 | 	add	fp, #24
2aed4     A7 2A 0A FB | 	rdlong	local03, fp wz
2aed8     18 4E 85 F1 | 	sub	fp, #24
2aedc     44 00 90 AD |  if_e	jmp	#LR__4257
2aee0     10 4E 05 F1 | 	add	fp, #16
2aee4     A7 12 C2 FA | 	rdbyte	arg01, fp
2aee8     10 4E 85 F1 | 	sub	fp, #16
2aeec     00 14 06 F6 | 	mov	arg02, #0
2aef0     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2aef4     FD 2C 02 F6 | 	mov	local04, result1
2aef8     07 2C 4E F7 | 	zerox	local04, #7 wz
2aefc     24 00 90 AD |  if_e	jmp	#LR__4257
2af00     01 00 00 FF 
2af04     E8 13 06 F6 | 	mov	arg01, ##1000
2af08     68 91 BF FD | 	call	#__system___waitus
2af0c     18 4E 05 F1 | 	add	fp, #24
2af10     A7 2C 02 FB | 	rdlong	local04, fp
2af14     01 2C 86 F1 | 	sub	local04, #1
2af18     A7 2C 62 FC | 	wrlong	local04, fp
2af1c     18 4E 85 F1 | 	sub	fp, #24
2af20     AC FF 9F FD | 	jmp	#LR__4256
2af24                 | LR__4257
2af24     18 4E 05 F1 | 	add	fp, #24
2af28     A7 2C 0A FB | 	rdlong	local04, fp wz
2af2c     18 4E 85 F1 | 	sub	fp, #24
2af30     14 00 90 AD |  if_e	jmp	#LR__4258
2af34     10 12 06 F6 | 	mov	arg01, #16
2af38     09 14 C6 F9 | 	decod	arg02, #9
2af3c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2af40     07 FA 4D F7 | 	zerox	result1, #7 wz
2af44     0C 00 90 AD |  if_e	jmp	#LR__4259
2af48                 | LR__4258
2af48     0C 4E 05 F1 | 	add	fp, #12
2af4c     A7 00 48 FC | 	wrbyte	#0, fp
2af50     0C 4E 85 F1 | 	sub	fp, #12
2af54                 | LR__4259
2af54     14 2C 06 FB | 	rdlong	local04, #20
2af58     18 4E 05 F1 | 	add	fp, #24
2af5c     A7 2C 62 FC | 	wrlong	local04, fp
2af60     18 4E 85 F1 | 	sub	fp, #24
2af64     F0 FA 02 FF 
2af68     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2af6c     18 00 90 3D |  if_ae	jmp	#LR__4260
2af70     24 4E 05 F1 | 	add	fp, #36
2af74     A7 2C 02 FB | 	rdlong	local04, fp
2af78     1B 2C 26 F4 | 	bith	local04, #27
2af7c     A7 2C 62 FC | 	wrlong	local04, fp
2af80     24 4E 85 F1 | 	sub	fp, #36
2af84     2C 00 90 FD | 	jmp	#LR__4261
2af88                 | LR__4260
2af88     18 4E 05 F1 | 	add	fp, #24
2af8c     A7 2C 02 FB | 	rdlong	local04, fp
2af90     18 4E 85 F1 | 	sub	fp, #24
2af94     E1 F5 05 FF 
2af98     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2af9c     24 4E 05 C1 |  if_b	add	fp, #36
2afa0     A7 2C 02 CB |  if_b	rdlong	local04, fp
2afa4     80 00 04 CF 
2afa8     00 2C 46 C5 |  if_b	or	local04, ##134283264
2afac     A7 2C 62 CC |  if_b	wrlong	local04, fp
2afb0     24 4E 85 C1 |  if_b	sub	fp, #36
2afb4                 | LR__4261
2afb4     18 4E 05 F1 | 	add	fp, #24
2afb8     A7 2C 02 FB | 	rdlong	local04, fp
2afbc     18 4E 85 F1 | 	sub	fp, #24
2afc0     F0 FA 02 FF 
2afc4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2afc8     1C 4E 05 C1 |  if_b	add	fp, #28
2afcc     00 01 80 CF 
2afd0     A7 08 68 CC |  if_b	wrlong	##131076, fp
2afd4     1C 4E 85 C1 |  if_b	sub	fp, #28
2afd8     A8 00 90 CD |  if_b	jmp	#LR__4265
2afdc     18 4E 05 F1 | 	add	fp, #24
2afe0     A7 2C 02 FB | 	rdlong	local04, fp
2afe4     18 4E 85 F1 | 	sub	fp, #24
2afe8     68 78 04 FF 
2afec     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2aff0     1C 4E 05 C1 |  if_b	add	fp, #28
2aff4     80 01 80 CF 
2aff8     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2affc     1C 4E 85 C1 |  if_b	sub	fp, #28
2b000     80 00 90 CD |  if_b	jmp	#LR__4264
2b004     18 4E 05 F1 | 	add	fp, #24
2b008     A7 2C 02 FB | 	rdlong	local04, fp
2b00c     18 4E 85 F1 | 	sub	fp, #24
2b010     E1 F5 05 FF 
2b014     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2b018     1C 4E 05 C1 |  if_b	add	fp, #28
2b01c     00 02 80 CF 
2b020     A7 10 68 CC |  if_b	wrlong	##262152, fp
2b024     1C 4E 85 C1 |  if_b	sub	fp, #28
2b028     58 00 90 CD |  if_b	jmp	#LR__4263
2b02c     18 4E 05 F1 | 	add	fp, #24
2b030     A7 2C 02 FB | 	rdlong	local04, fp
2b034     18 4E 85 F1 | 	sub	fp, #24
2b038     59 73 07 FF 
2b03c     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2b040     1C 4E 05 C1 |  if_b	add	fp, #28
2b044     80 02 80 CF 
2b048     A7 14 68 CC |  if_b	wrlong	##327690, fp
2b04c     1C 4E 85 C1 |  if_b	sub	fp, #28
2b050     30 00 90 CD |  if_b	jmp	#LR__4262
2b054     18 4E 05 F1 | 	add	fp, #24
2b058     A7 2C 02 FB | 	rdlong	local04, fp
2b05c     18 4E 85 F1 | 	sub	fp, #24
2b060     D1 F0 08 FF 
2b064     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2b068     1C 4E 05 C1 |  if_b	add	fp, #28
2b06c     00 03 80 CF 
2b070     A7 18 68 CC |  if_b	wrlong	##393228, fp
2b074     1C 4E 85 F3 | 	sumc	fp, #28
2b078     80 03 80 3F 
2b07c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2b080     1C 4E 85 31 |  if_ae	sub	fp, #28
2b084                 | LR__4262
2b084                 | LR__4263
2b084                 | LR__4264
2b084                 | LR__4265
2b084                 | LR__4266
2b084                 | LR__4267
2b084     0C 4E 05 F1 | 	add	fp, #12
2b088     A7 2C C2 FA | 	rdbyte	local04, fp
2b08c     01 00 00 FF 
2b090     21 E4 05 F1 | 	add	objptr, ##545
2b094     F2 2C 42 FC | 	wrbyte	local04, objptr
2b098     A7 26 CA FA | 	rdbyte	local01, fp wz
2b09c     00 2C 06 56 |  if_ne	mov	local04, #0
2b0a0     01 2C 06 A6 |  if_e	mov	local04, #1
2b0a4     20 4E 05 F1 | 	add	fp, #32
2b0a8     A7 2C 42 FC | 	wrbyte	local04, fp
2b0ac     A7 2C C2 FA | 	rdbyte	local04, fp
2b0b0     2C 4E 85 F1 | 	sub	fp, #44
2b0b4     01 E4 85 F1 | 	sub	objptr, #1
2b0b8     F2 2C 42 FC | 	wrbyte	local04, objptr
2b0bc     01 00 00 FF 
2b0c0     20 E4 85 F1 | 	sub	objptr, ##544
2b0c4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1169
2b0c8     34 4E 05 F1 | 	add	fp, #52
2b0cc     A7 12 02 FB | 	rdlong	arg01, fp
2b0d0     18 4E 85 F1 | 	sub	fp, #24
2b0d4     A7 14 02 FB | 	rdlong	arg02, fp
2b0d8     09 15 12 FC | 	wxpin	arg02, arg01
2b0dc     1C 4E 05 F1 | 	add	fp, #28
2b0e0     A7 12 02 FB | 	rdlong	arg01, fp
2b0e4     14 4E 85 F1 | 	sub	fp, #20
2b0e8     A7 14 02 FB | 	rdlong	arg02, fp
2b0ec     09 15 02 FC | 	wrpin	arg02, arg01
2b0f0                 | ' 
2b0f0                 | ' 		}
2b0f0                 | ' 	}
2b0f0                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b0f0                 | ' 	CardType = ty;
2b0f0                 | ' 	s = ty ? 0 :  0x01 ;
2b0f0                 | ' 	Stat = s;
2b0f0                 | ' 
2b0f0                 | ' 	deselect();
2b0f0                 | ' 
2b0f0                 | ' 
2b0f0                 | ' 	_wxpin( PIN_CLK, ck_div );
2b0f0                 | ' 	_wrpin( PIN_DI, spm_tx );
2b0f0                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b0f0                 | ' 	return s;
2b0f0     08 4E 05 F1 | 	add	fp, #8
2b0f4     A7 FA C1 FA | 	rdbyte	result1, fp
2b0f8     2C 4E 85 F1 | 	sub	fp, #44
2b0fc                 | LR__4268
2b0fc     A7 F0 03 F6 | 	mov	ptra, fp
2b100     B2 00 A0 FD | 	call	#popregs_
2b104                 | _fatfs_cc_disk_initialize_ret
2b104     2D 00 64 FD | 	ret
2b108                 | 
2b108                 | _fatfs_cc_disk_read
2b108     05 4A 05 F6 | 	mov	COUNT_, #5
2b10c     A8 00 A0 FD | 	call	#pushregs_
2b110     0A 27 02 F6 | 	mov	local01, arg02
2b114     0B 29 02 F6 | 	mov	local02, arg03
2b118     0C 2B 02 F6 | 	mov	local03, arg04
2b11c     00 12 0E F2 | 	cmp	arg01, #0 wz
2b120     01 FA 05 56 |  if_ne	mov	result1, #1
2b124                 | ' 
2b124                 | ' 	return Stat;
2b124     01 00 00 AF 
2b128     20 E4 05 A1 |  if_e	add	objptr, ##544
2b12c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b130     01 00 00 AF 
2b134     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b138     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b13c     01 FA CD F7 | 	test	result1, #1 wz
2b140     03 FA 05 56 |  if_ne	mov	result1, #3
2b144     84 00 90 5D |  if_ne	jmp	#LR__4272
2b148     01 00 00 FF 
2b14c     21 E4 05 F1 | 	add	objptr, ##545
2b150     F2 2C C2 FA | 	rdbyte	local04, objptr
2b154     01 00 00 FF 
2b158     21 E4 85 F1 | 	sub	objptr, ##545
2b15c     08 2C CE F7 | 	test	local04, #8 wz
2b160     09 28 66 A0 |  if_e	shl	local02, #9
2b164     02 2A 16 F2 | 	cmp	local03, #2 wc
2b168     12 2C 06 36 |  if_ae	mov	local04, #18
2b16c     11 2C 06 C6 |  if_b	mov	local04, #17
2b170     14 15 02 F6 | 	mov	arg02, local02
2b174     16 13 02 F6 | 	mov	arg01, local04
2b178     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2b17c     FD 2E 02 F6 | 	mov	local05, result1
2b180     07 2E 4E F7 | 	zerox	local05, #7 wz
2b184     30 00 90 5D |  if_ne	jmp	#LR__4271
2b188                 | ' 		do {
2b188                 | LR__4270
2b188     13 13 02 F6 | 	mov	arg01, local01
2b18c     09 14 C6 F9 | 	decod	arg02, #9
2b190     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1177
2b194     00 FA 0D F2 | 	cmp	result1, #0 wz
2b198     01 00 00 5F 
2b19c     00 26 06 51 |  if_ne	add	local01, ##512
2b1a0     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4270
2b1a4     16 2D E2 F8 | 	getbyte	local04, local04, #0
2b1a8     12 2C 0E F2 | 	cmp	local04, #18 wz
2b1ac     0C 12 06 A6 |  if_e	mov	arg01, #12
2b1b0     00 14 06 A6 |  if_e	mov	arg02, #0
2b1b4     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1183
2b1b8                 | LR__4271
2b1b8     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1169
2b1bc                 | ' 	}
2b1bc                 | ' 	deselect();
2b1bc                 | ' 
2b1bc                 | ' 	return count ? RES_ERROR : RES_OK;
2b1bc     00 2A 0E F2 | 	cmp	local03, #0 wz
2b1c0     01 2E 06 56 |  if_ne	mov	local05, #1
2b1c4     00 2E 06 A6 |  if_e	mov	local05, #0
2b1c8     17 FB 01 F6 | 	mov	result1, local05
2b1cc                 | LR__4272
2b1cc     A7 F0 03 F6 | 	mov	ptra, fp
2b1d0     B2 00 A0 FD | 	call	#popregs_
2b1d4                 | _fatfs_cc_disk_read_ret
2b1d4     2D 00 64 FD | 	ret
2b1d8                 | 
2b1d8                 | _fatfs_cc_disk_write
2b1d8     04 4A 05 F6 | 	mov	COUNT_, #4
2b1dc     A8 00 A0 FD | 	call	#pushregs_
2b1e0     0A 27 02 F6 | 	mov	local01, arg02
2b1e4     0C 29 02 F6 | 	mov	local02, arg04
2b1e8     0B 2B 02 F6 | 	mov	local03, arg03
2b1ec     00 12 0E F2 | 	cmp	arg01, #0 wz
2b1f0     01 FA 05 56 |  if_ne	mov	result1, #1
2b1f4                 | ' 
2b1f4                 | ' 	return Stat;
2b1f4     01 00 00 AF 
2b1f8     20 E4 05 A1 |  if_e	add	objptr, ##544
2b1fc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b200     01 00 00 AF 
2b204     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b208     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b20c     01 FA CD F7 | 	test	result1, #1 wz
2b210     03 FA 05 56 |  if_ne	mov	result1, #3
2b214     D4 00 90 5D |  if_ne	jmp	#LR__4284
2b218     01 00 00 FF 
2b21c     21 E4 05 F1 | 	add	objptr, ##545
2b220     F2 16 C2 FA | 	rdbyte	arg03, objptr
2b224     01 00 00 FF 
2b228     21 E4 85 F1 | 	sub	objptr, ##545
2b22c     08 16 CE F7 | 	test	arg03, #8 wz
2b230     09 2A 66 A0 |  if_e	shl	local03, #9
2b234     01 28 0E F2 | 	cmp	local02, #1 wz
2b238     30 00 90 5D |  if_ne	jmp	#LR__4280
2b23c     18 12 06 F6 | 	mov	arg01, #24
2b240     15 15 02 F6 | 	mov	arg02, local03
2b244     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2b248     FD 2C 02 F6 | 	mov	local04, result1
2b24c     07 2C 4E F7 | 	zerox	local04, #7 wz
2b250     84 00 90 5D |  if_ne	jmp	#LR__4283
2b254     13 13 02 F6 | 	mov	arg01, local01
2b258     FE 14 06 F6 | 	mov	arg02, #254
2b25c     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1179
2b260     00 FA 0D F2 | 	cmp	result1, #0 wz
2b264     00 28 06 56 |  if_ne	mov	local02, #0
2b268     6C 00 90 FD | 	jmp	#LR__4283
2b26c                 | LR__4280
2b26c     01 00 00 FF 
2b270     21 E4 05 F1 | 	add	objptr, ##545
2b274     F2 2C C2 FA | 	rdbyte	local04, objptr
2b278     01 00 00 FF 
2b27c     21 E4 85 F1 | 	sub	objptr, ##545
2b280     06 2C CE F7 | 	test	local04, #6 wz
2b284     97 12 06 56 |  if_ne	mov	arg01, #151
2b288     14 15 02 56 |  if_ne	mov	arg02, local02
2b28c     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1183
2b290     15 15 02 F6 | 	mov	arg02, local03
2b294     19 12 06 F6 | 	mov	arg01, #25
2b298     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2b29c     FD 2C 02 F6 | 	mov	local04, result1
2b2a0     07 2C 4E F7 | 	zerox	local04, #7 wz
2b2a4     30 00 90 5D |  if_ne	jmp	#LR__4282
2b2a8                 | ' 			do {
2b2a8                 | LR__4281
2b2a8     13 13 02 F6 | 	mov	arg01, local01
2b2ac     FC 14 06 F6 | 	mov	arg02, #252
2b2b0     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1179
2b2b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2b8     01 00 00 5F 
2b2bc     00 26 06 51 |  if_ne	add	local01, ##512
2b2c0     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4281
2b2c4     00 12 06 F6 | 	mov	arg01, #0
2b2c8     FD 14 06 F6 | 	mov	arg02, #253
2b2cc     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1179
2b2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2d4     01 28 06 A6 |  if_e	mov	local02, #1
2b2d8                 | LR__4282
2b2d8                 | LR__4283
2b2d8     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1169
2b2dc                 | ' 				count = 1;
2b2dc                 | ' 		}
2b2dc                 | ' 	}
2b2dc                 | ' 	deselect();
2b2dc                 | ' 
2b2dc                 | ' 	return count ? RES_ERROR : RES_OK;
2b2dc     00 28 0E F2 | 	cmp	local02, #0 wz
2b2e0     01 2C 06 56 |  if_ne	mov	local04, #1
2b2e4     00 2C 06 A6 |  if_e	mov	local04, #0
2b2e8     16 FB 01 F6 | 	mov	result1, local04
2b2ec                 | LR__4284
2b2ec     A7 F0 03 F6 | 	mov	ptra, fp
2b2f0     B2 00 A0 FD | 	call	#popregs_
2b2f4                 | _fatfs_cc_disk_write_ret
2b2f4     2D 00 64 FD | 	ret
2b2f8                 | 
2b2f8                 | _fatfs_cc_disk_ioctl
2b2f8     01 4A 05 F6 | 	mov	COUNT_, #1
2b2fc     A8 00 A0 FD | 	call	#pushregs_
2b300     30 F0 07 F1 | 	add	ptra, #48
2b304     04 4E 05 F1 | 	add	fp, #4
2b308     A7 12 42 FC | 	wrbyte	arg01, fp
2b30c     04 4E 05 F1 | 	add	fp, #4
2b310     A7 14 42 FC | 	wrbyte	arg02, fp
2b314     04 4E 05 F1 | 	add	fp, #4
2b318     A7 16 62 FC | 	wrlong	arg03, fp
2b31c     08 4E 85 F1 | 	sub	fp, #8
2b320     A7 12 CA FA | 	rdbyte	arg01, fp wz
2b324     04 4E 85 F1 | 	sub	fp, #4
2b328     01 FA 05 56 |  if_ne	mov	result1, #1
2b32c                 | ' 
2b32c                 | ' 	return Stat;
2b32c     01 00 00 AF 
2b330     20 E4 05 A1 |  if_e	add	objptr, ##544
2b334     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b338     01 00 00 AF 
2b33c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b340     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b344     01 FA CD F7 | 	test	result1, #1 wz
2b348     03 FA 05 56 |  if_ne	mov	result1, #3
2b34c     E4 01 90 5D |  if_ne	jmp	#LR__4298
2b350     10 4E 05 F1 | 	add	fp, #16
2b354     A7 02 68 FC | 	wrlong	#1, fp
2b358                 | ' 
2b358                 | ' 	res = RES_ERROR;
2b358                 | ' 	switch (ctrl) {
2b358     08 4E 85 F1 | 	sub	fp, #8
2b35c     A7 26 C2 FA | 	rdbyte	local01, fp
2b360     08 4E 85 F1 | 	sub	fp, #8
2b364     04 26 26 F3 | 	fle	local01, #4
2b368     30 26 62 FD | 	jmprel	local01
2b36c                 | LR__4290
2b36c     10 00 90 FD | 	jmp	#LR__4291
2b370     24 00 90 FD | 	jmp	#LR__4292
2b374     A0 01 90 FD | 	jmp	#LR__4296
2b378     80 01 90 FD | 	jmp	#LR__4295
2b37c     98 01 90 FD | 	jmp	#LR__4296
2b380                 | LR__4291
2b380     B4 79 B0 FD | 	call	#_fatfs_cc_select_1173
2b384     00 FA 0D F2 | 	cmp	result1, #0 wz
2b388     10 4E 05 51 |  if_ne	add	fp, #16
2b38c     A7 00 68 5C |  if_ne	wrlong	#0, fp
2b390     10 4E 85 51 |  if_ne	sub	fp, #16
2b394                 | ' 			break;
2b394     8C 01 90 FD | 	jmp	#LR__4297
2b398                 | LR__4292
2b398     09 12 06 F6 | 	mov	arg01, #9
2b39c     00 14 06 F6 | 	mov	arg02, #0
2b3a0     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1183
2b3a4     FD 26 02 F6 | 	mov	local01, result1
2b3a8     07 26 4E F7 | 	zerox	local01, #7 wz
2b3ac     74 01 90 5D |  if_ne	jmp	#LR__4297
2b3b0     18 4E 05 F1 | 	add	fp, #24
2b3b4     A7 12 02 F6 | 	mov	arg01, fp
2b3b8     18 4E 85 F1 | 	sub	fp, #24
2b3bc     10 14 06 F6 | 	mov	arg02, #16
2b3c0     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1177
2b3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b3c8     58 01 90 AD |  if_e	jmp	#LR__4297
2b3cc     18 4E 05 F1 | 	add	fp, #24
2b3d0     A7 26 C2 FA | 	rdbyte	local01, fp
2b3d4     18 4E 85 F1 | 	sub	fp, #24
2b3d8     06 26 46 F0 | 	shr	local01, #6
2b3dc     01 26 0E F2 | 	cmp	local01, #1 wz
2b3e0     5C 00 90 5D |  if_ne	jmp	#LR__4293
2b3e4     21 4E 05 F1 | 	add	fp, #33
2b3e8     A7 26 C2 FA | 	rdbyte	local01, fp
2b3ec     01 4E 85 F1 | 	sub	fp, #1
2b3f0     A7 FA C1 FA | 	rdbyte	result1, fp
2b3f4     FD FA 31 F9 | 	getword	result1, result1, #0
2b3f8     08 FA 65 F0 | 	shl	result1, #8
2b3fc     FD 26 02 F1 | 	add	local01, result1
2b400     01 4E 85 F1 | 	sub	fp, #1
2b404     A7 FA C1 FA | 	rdbyte	result1, fp
2b408     3F FA 05 F5 | 	and	result1, #63
2b40c     10 FA 65 F0 | 	shl	result1, #16
2b410     FD 26 02 F1 | 	add	local01, result1
2b414     01 26 06 F1 | 	add	local01, #1
2b418     09 4E 05 F1 | 	add	fp, #9
2b41c     A7 26 62 FC | 	wrlong	local01, fp
2b420     1C 4E 85 F1 | 	sub	fp, #28
2b424     A7 26 02 FB | 	rdlong	local01, fp
2b428     1C 4E 05 F1 | 	add	fp, #28
2b42c     A7 FA 01 FB | 	rdlong	result1, fp
2b430     28 4E 85 F1 | 	sub	fp, #40
2b434     0A FA 65 F0 | 	shl	result1, #10
2b438     13 FB 61 FC | 	wrlong	result1, local01
2b43c     AC 00 90 FD | 	jmp	#LR__4294
2b440                 | LR__4293
2b440     1D 4E 05 F1 | 	add	fp, #29
2b444     A7 26 C2 FA | 	rdbyte	local01, fp
2b448     13 27 42 F8 | 	getnib	local01, local01, #0
2b44c     05 4E 05 F1 | 	add	fp, #5
2b450     A7 FA C1 FA | 	rdbyte	result1, fp
2b454     80 FA 05 F5 | 	and	result1, #128
2b458     07 FA C5 F0 | 	sar	result1, #7
2b45c     FD 26 02 F1 | 	add	local01, result1
2b460     01 4E 85 F1 | 	sub	fp, #1
2b464     A7 FA C1 FA | 	rdbyte	result1, fp
2b468     03 FA 05 F5 | 	and	result1, #3
2b46c     01 FA 65 F0 | 	shl	result1, #1
2b470     FD 26 02 F1 | 	add	local01, result1
2b474     02 26 06 F1 | 	add	local01, #2
2b478     0D 4E 85 F1 | 	sub	fp, #13
2b47c     A7 26 42 FC | 	wrbyte	local01, fp
2b480     0C 4E 05 F1 | 	add	fp, #12
2b484     A7 26 C2 FA | 	rdbyte	local01, fp
2b488     06 26 46 F0 | 	shr	local01, #6
2b48c     01 4E 85 F1 | 	sub	fp, #1
2b490     A7 FA C1 FA | 	rdbyte	result1, fp
2b494     FD FA 31 F9 | 	getword	result1, result1, #0
2b498     02 FA 65 F0 | 	shl	result1, #2
2b49c     FD 26 02 F1 | 	add	local01, result1
2b4a0     01 4E 85 F1 | 	sub	fp, #1
2b4a4     A7 FA C1 FA | 	rdbyte	result1, fp
2b4a8     03 FA 05 F5 | 	and	result1, #3
2b4ac     FD FA 31 F9 | 	getword	result1, result1, #0
2b4b0     0A FA 65 F0 | 	shl	result1, #10
2b4b4     FD 26 02 F1 | 	add	local01, result1
2b4b8     01 26 06 F1 | 	add	local01, #1
2b4bc     0A 4E 05 F1 | 	add	fp, #10
2b4c0     A7 26 62 FC | 	wrlong	local01, fp
2b4c4     1C 4E 85 F1 | 	sub	fp, #28
2b4c8     A7 26 02 FB | 	rdlong	local01, fp
2b4cc     1C 4E 05 F1 | 	add	fp, #28
2b4d0     A7 FA 01 FB | 	rdlong	result1, fp
2b4d4     14 4E 85 F1 | 	sub	fp, #20
2b4d8     A7 16 C2 FA | 	rdbyte	arg03, fp
2b4dc     14 4E 85 F1 | 	sub	fp, #20
2b4e0     09 16 86 F1 | 	sub	arg03, #9
2b4e4     0B FB 61 F0 | 	shl	result1, arg03
2b4e8     13 FB 61 FC | 	wrlong	result1, local01
2b4ec                 | LR__4294
2b4ec     10 4E 05 F1 | 	add	fp, #16
2b4f0     A7 00 68 FC | 	wrlong	#0, fp
2b4f4     10 4E 85 F1 | 	sub	fp, #16
2b4f8                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2b4f8                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2b4f8                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2b4f8                 | ' 				}
2b4f8                 | ' 				res = RES_OK;
2b4f8                 | ' 			}
2b4f8                 | ' 			break;
2b4f8     28 00 90 FD | 	jmp	#LR__4297
2b4fc                 | LR__4295
2b4fc     0C 4E 05 F1 | 	add	fp, #12
2b500     A7 26 02 FB | 	rdlong	local01, fp
2b504     13 01 69 FC | 	wrlong	#128, local01
2b508     04 4E 05 F1 | 	add	fp, #4
2b50c     A7 00 68 FC | 	wrlong	#0, fp
2b510     10 4E 85 F1 | 	sub	fp, #16
2b514                 | ' 			*(DWORD*)buff = 128;
2b514                 | ' 			res = RES_OK;
2b514                 | ' 			break;
2b514     0C 00 90 FD | 	jmp	#LR__4297
2b518                 | LR__4296
2b518     10 4E 05 F1 | 	add	fp, #16
2b51c     A7 08 68 FC | 	wrlong	#4, fp
2b520     10 4E 85 F1 | 	sub	fp, #16
2b524                 | LR__4297
2b524     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1169
2b528                 | ' 			res = RES_PARERR;
2b528                 | ' 	}
2b528                 | ' 
2b528                 | ' 	deselect();
2b528                 | ' 
2b528                 | ' 	return res;
2b528     10 4E 05 F1 | 	add	fp, #16
2b52c     A7 FA 01 FB | 	rdlong	result1, fp
2b530     10 4E 85 F1 | 	sub	fp, #16
2b534                 | LR__4298
2b534     A7 F0 03 F6 | 	mov	ptra, fp
2b538     B2 00 A0 FD | 	call	#popregs_
2b53c                 | _fatfs_cc_disk_ioctl_ret
2b53c     2D 00 64 FD | 	ret
2b540                 | 
2b540                 | _fatfs_cc_disk_setpins
2b540     00 12 0E F2 | 	cmp	arg01, #0 wz
2b544     01 FA 65 56 |  if_ne	neg	result1, #1
2b548     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2b54c     01 00 00 FF 
2b550     10 E4 05 F1 | 	add	objptr, ##528
2b554     F2 14 62 FC | 	wrlong	arg02, objptr
2b558     04 E4 05 F1 | 	add	objptr, #4
2b55c     F2 16 62 FC | 	wrlong	arg03, objptr
2b560     04 E4 05 F1 | 	add	objptr, #4
2b564     F2 18 62 FC | 	wrlong	arg04, objptr
2b568     04 E4 05 F1 | 	add	objptr, #4
2b56c     F2 1A 62 FC | 	wrlong	arg05, objptr
2b570     01 00 00 FF 
2b574     1C E4 85 F1 | 	sub	objptr, ##540
2b578     00 FA 05 F6 | 	mov	result1, #0
2b57c                 | _fatfs_cc_disk_setpins_ret
2b57c     2D 00 64 FD | 	ret
2b580                 | 
2b580                 | _fatfs_cc_tchar2uni
2b580     09 01 02 FB | 	rdlong	_var01, arg01
2b584     00 03 02 F6 | 	mov	_var02, _var01
2b588     01 00 06 F1 | 	add	_var01, #1
2b58c     00 05 02 F6 | 	mov	_var03, _var01
2b590     01 07 C2 FA | 	rdbyte	_var04, _var02
2b594     80 06 CE F7 | 	test	_var04, #128 wz
2b598     E8 00 90 AD |  if_e	jmp	#LR__4307
2b59c     03 09 02 F6 | 	mov	_var05, _var04
2b5a0     E0 08 06 F5 | 	and	_var05, #224
2b5a4     C0 08 0E F2 | 	cmp	_var05, #192 wz
2b5a8     1F 06 06 A5 |  if_e	and	_var04, #31
2b5ac     01 0A 06 A6 |  if_e	mov	_var06, #1
2b5b0     34 00 90 AD |  if_e	jmp	#LR__4301
2b5b4     03 09 02 F6 | 	mov	_var05, _var04
2b5b8     F0 08 06 F5 | 	and	_var05, #240
2b5bc     E0 08 0E F2 | 	cmp	_var05, #224 wz
2b5c0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2b5c4     02 0A 06 A6 |  if_e	mov	_var06, #2
2b5c8     1C 00 90 AD |  if_e	jmp	#LR__4300
2b5cc     03 09 02 F6 | 	mov	_var05, _var04
2b5d0     F8 08 06 F5 | 	and	_var05, #248
2b5d4     F0 08 0E F2 | 	cmp	_var05, #240 wz
2b5d8     07 06 06 A5 |  if_e	and	_var04, #7
2b5dc     03 0A 06 A6 |  if_e	mov	_var06, #3
2b5e0                 | ' 			return 0xFFFFFFFF;
2b5e0     01 FA 65 56 |  if_ne	neg	result1, #1
2b5e4     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2b5e8                 | LR__4300
2b5e8                 | LR__4301
2b5e8                 | ' 		}
2b5e8                 | ' 		do {
2b5e8                 | LR__4302
2b5e8     02 0D C2 FA | 	rdbyte	_var07, _var03
2b5ec     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2b5f0     C0 08 06 F5 | 	and	_var05, #192
2b5f4     80 08 0E F2 | 	cmp	_var05, #128 wz
2b5f8     01 04 06 F1 | 	add	_var03, #1
2b5fc     01 FA 65 56 |  if_ne	neg	result1, #1
2b600     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2b604     06 06 66 F0 | 	shl	_var04, #6
2b608     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2b60c     3F 02 06 F5 | 	and	_var02, #63
2b610     01 07 42 F5 | 	or	_var04, _var02
2b614     F4 0B 6E FB | 	djnz	_var06, #LR__4302
2b618     80 06 16 F2 | 	cmp	_var04, #128 wc
2b61c     24 00 90 CD |  if_b	jmp	#LR__4304
2b620     6C 00 00 FF 
2b624     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2b628     0C 00 90 CD |  if_b	jmp	#LR__4303
2b62c     70 00 00 FF 
2b630     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2b634     0C 00 90 CD |  if_b	jmp	#LR__4304
2b638                 | LR__4303
2b638     80 08 00 FF 
2b63c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2b640     08 00 90 CD |  if_b	jmp	#LR__4305
2b644                 | LR__4304
2b644     01 FA 65 F6 | 	neg	result1, #1
2b648     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2b64c                 | LR__4305
2b64c     80 00 00 FF 
2b650     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2b654     2C 00 90 CD |  if_b	jmp	#LR__4306
2b658     03 03 02 F6 | 	mov	_var02, _var04
2b65c     80 00 00 FF 
2b660     00 02 86 F1 | 	sub	_var02, ##65536
2b664     06 02 66 F0 | 	shl	_var02, #6
2b668     80 FF 01 FF 
2b66c     00 02 06 F5 | 	and	_var02, ##67043328
2b670     6E 00 6C FF 
2b674     00 08 06 F6 | 	mov	_var05, ##-671032320
2b678     01 09 42 F5 | 	or	_var05, _var02
2b67c     09 06 46 F7 | 	zerox	_var04, #9
2b680     04 07 42 F5 | 	or	_var04, _var05
2b684                 | LR__4306
2b684                 | LR__4307
2b684     09 05 62 FC | 	wrlong	_var03, arg01
2b688                 | ' 	}
2b688                 | ' #line 811 "ff.c"
2b688                 | ' 	*str = p;
2b688                 | ' 	return uc;
2b688     03 FB 01 F6 | 	mov	result1, _var04
2b68c                 | _fatfs_cc_tchar2uni_ret
2b68c     2D 00 64 FD | 	ret
2b690                 | 
2b690                 | _fatfs_cc_put_utf
2b690     80 12 16 F2 | 	cmp	arg01, #128 wc
2b694     18 00 90 3D |  if_ae	jmp	#LR__4310
2b698     01 16 16 F2 | 	cmp	arg03, #1 wc
2b69c     00 FA 05 C6 |  if_b	mov	result1, #0
2b6a0     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2b6a4     0A 13 42 FC | 	wrbyte	arg01, arg02
2b6a8                 | ' 		*buf = (TCHAR)chr;
2b6a8                 | ' 		return 1;
2b6a8     01 FA 05 F6 | 	mov	result1, #1
2b6ac     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b6b0                 | LR__4310
2b6b0     04 00 00 FF 
2b6b4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2b6b8     40 00 90 3D |  if_ae	jmp	#LR__4311
2b6bc     02 16 16 F2 | 	cmp	arg03, #2 wc
2b6c0     00 FA 05 C6 |  if_b	mov	result1, #0
2b6c4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2b6c8     09 FB 01 F6 | 	mov	result1, arg01
2b6cc     06 FA 45 F0 | 	shr	result1, #6
2b6d0     1F FA 05 F5 | 	and	result1, #31
2b6d4     C0 16 06 F6 | 	mov	arg03, #192
2b6d8     FD 16 42 F5 | 	or	arg03, result1
2b6dc     0A 17 42 FC | 	wrbyte	arg03, arg02
2b6e0     01 14 06 F1 | 	add	arg02, #1
2b6e4     3F 12 06 F5 | 	and	arg01, #63
2b6e8     80 FA 05 F6 | 	mov	result1, #128
2b6ec     09 FB 41 F5 | 	or	result1, arg01
2b6f0     0A FB 41 FC | 	wrbyte	result1, arg02
2b6f4                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2b6f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2b6f4                 | ' 		return 2;
2b6f4     02 FA 05 F6 | 	mov	result1, #2
2b6f8     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b6fc                 | LR__4311
2b6fc     80 00 00 FF 
2b700     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2b704     70 00 90 3D |  if_ae	jmp	#LR__4314
2b708     03 16 16 F2 | 	cmp	arg03, #3 wc
2b70c     18 00 90 CD |  if_b	jmp	#LR__4312
2b710     6C 00 00 FF 
2b714     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2b718     14 00 90 CD |  if_b	jmp	#LR__4313
2b71c     70 00 00 FF 
2b720     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2b724     08 00 90 3D |  if_ae	jmp	#LR__4313
2b728                 | LR__4312
2b728     00 FA 05 F6 | 	mov	result1, #0
2b72c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b730                 | LR__4313
2b730     09 FB 59 F8 | 	getnib	result1, arg01, #3
2b734     E0 16 06 F6 | 	mov	arg03, #224
2b738     FD 16 42 F5 | 	or	arg03, result1
2b73c     0A 17 42 FC | 	wrbyte	arg03, arg02
2b740     01 14 06 F1 | 	add	arg02, #1
2b744     09 FB 01 F6 | 	mov	result1, arg01
2b748     06 FA 45 F0 | 	shr	result1, #6
2b74c     3F FA 05 F5 | 	and	result1, #63
2b750     80 16 06 F6 | 	mov	arg03, #128
2b754     FD 16 42 F5 | 	or	arg03, result1
2b758     0A 17 42 FC | 	wrbyte	arg03, arg02
2b75c     01 14 06 F1 | 	add	arg02, #1
2b760     3F 12 06 F5 | 	and	arg01, #63
2b764     80 FA 05 F6 | 	mov	result1, #128
2b768     09 FB 41 F5 | 	or	result1, arg01
2b76c     0A FB 41 FC | 	wrbyte	result1, arg02
2b770                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2b770                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2b770                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2b770                 | ' 		return 3;
2b770     03 FA 05 F6 | 	mov	result1, #3
2b774     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2b778                 | LR__4314
2b778     04 16 16 F2 | 	cmp	arg03, #4 wc
2b77c     00 FA 05 C6 |  if_b	mov	result1, #0
2b780     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2b784     09 01 02 F6 | 	mov	_var01, arg01
2b788     E0 01 06 F4 | 	bitl	_var01, #480
2b78c     00 00 6C FF 
2b790     00 00 86 F1 | 	sub	_var01, ##-671088640
2b794     06 00 46 F0 | 	shr	_var01, #6
2b798     09 13 32 F9 | 	getword	arg01, arg01, #0
2b79c     6E 00 00 FF 
2b7a0     00 12 86 F1 | 	sub	arg01, ##56320
2b7a4     00 08 00 FF 
2b7a8     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2b7ac     02 00 00 CF 
2b7b0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2b7b4     00 FA 05 36 |  if_ae	mov	result1, #0
2b7b8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2b7bc     09 01 42 F5 | 	or	_var01, arg01
2b7c0     80 00 00 FF 
2b7c4     00 00 06 F1 | 	add	_var01, ##65536
2b7c8     00 FB 01 F6 | 	mov	result1, _var01
2b7cc     12 FA 45 F0 | 	shr	result1, #18
2b7d0     07 FA 05 F5 | 	and	result1, #7
2b7d4     F0 16 06 F6 | 	mov	arg03, #240
2b7d8     FD 16 42 F5 | 	or	arg03, result1
2b7dc     0A 17 42 FC | 	wrbyte	arg03, arg02
2b7e0     01 14 06 F1 | 	add	arg02, #1
2b7e4     00 FB 01 F6 | 	mov	result1, _var01
2b7e8     0C FA 45 F0 | 	shr	result1, #12
2b7ec     3F FA 05 F5 | 	and	result1, #63
2b7f0     80 16 06 F6 | 	mov	arg03, #128
2b7f4     FD 16 42 F5 | 	or	arg03, result1
2b7f8     0A 17 42 FC | 	wrbyte	arg03, arg02
2b7fc     01 14 06 F1 | 	add	arg02, #1
2b800     00 FB 01 F6 | 	mov	result1, _var01
2b804     06 FA 45 F0 | 	shr	result1, #6
2b808     3F FA 05 F5 | 	and	result1, #63
2b80c     80 16 06 F6 | 	mov	arg03, #128
2b810     FD 16 42 F5 | 	or	arg03, result1
2b814     0A 17 42 FC | 	wrbyte	arg03, arg02
2b818     01 14 06 F1 | 	add	arg02, #1
2b81c     3F 00 06 F5 | 	and	_var01, #63
2b820     80 FA 05 F6 | 	mov	result1, #128
2b824     00 FB 41 F5 | 	or	result1, _var01
2b828     0A FB 41 FC | 	wrbyte	result1, arg02
2b82c                 | ' 	chr = (hc | chr) + 0x10000;
2b82c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2b82c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2b82c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2b82c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2b82c                 | ' 	return 4;
2b82c     04 FA 05 F6 | 	mov	result1, #4
2b830                 | _fatfs_cc_put_utf_ret
2b830     2D 00 64 FD | 	ret
2b834                 | 
2b834                 | _fatfs_cc_sync_window
2b834     02 4A 05 F6 | 	mov	COUNT_, #2
2b838     A8 00 A0 FD | 	call	#pushregs_
2b83c     09 27 02 F6 | 	mov	local01, arg01
2b840     00 28 06 F6 | 	mov	local02, #0
2b844     03 26 06 F1 | 	add	local01, #3
2b848     13 FB C9 FA | 	rdbyte	result1, local01 wz
2b84c     03 26 86 F1 | 	sub	local01, #3
2b850     A4 00 90 AD |  if_e	jmp	#LR__4322
2b854     01 26 06 F1 | 	add	local01, #1
2b858     13 13 C2 FA | 	rdbyte	arg01, local01
2b85c     33 26 06 F1 | 	add	local01, #51
2b860     13 15 02 F6 | 	mov	arg02, local01
2b864     04 26 86 F1 | 	sub	local01, #4
2b868     13 17 02 FB | 	rdlong	arg03, local01
2b86c     30 26 86 F1 | 	sub	local01, #48
2b870     01 18 06 F6 | 	mov	arg04, #1
2b874     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2b878     00 FA 0D F2 | 	cmp	result1, #0 wz
2b87c     74 00 90 5D |  if_ne	jmp	#LR__4320
2b880     03 26 06 F1 | 	add	local01, #3
2b884     13 01 48 FC | 	wrbyte	#0, local01
2b888     2D 26 06 F1 | 	add	local01, #45
2b88c     13 FB 01 FB | 	rdlong	result1, local01
2b890     0C 26 86 F1 | 	sub	local01, #12
2b894     13 19 02 FB | 	rdlong	arg04, local01
2b898     0C FB 81 F1 | 	sub	result1, arg04
2b89c     08 26 86 F1 | 	sub	local01, #8
2b8a0     13 19 02 FB | 	rdlong	arg04, local01
2b8a4     1C 26 86 F1 | 	sub	local01, #28
2b8a8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2b8ac     48 00 90 3D |  if_ae	jmp	#LR__4321
2b8b0     02 26 06 F1 | 	add	local01, #2
2b8b4     13 19 C2 FA | 	rdbyte	arg04, local01
2b8b8     02 26 86 F1 | 	sub	local01, #2
2b8bc     02 18 0E F2 | 	cmp	arg04, #2 wz
2b8c0     34 00 90 5D |  if_ne	jmp	#LR__4321
2b8c4     01 26 06 F1 | 	add	local01, #1
2b8c8     13 13 C2 FA | 	rdbyte	arg01, local01
2b8cc     33 26 06 F1 | 	add	local01, #51
2b8d0     13 15 02 F6 | 	mov	arg02, local01
2b8d4     04 26 86 F1 | 	sub	local01, #4
2b8d8     13 17 02 FB | 	rdlong	arg03, local01
2b8dc     14 26 86 F1 | 	sub	local01, #20
2b8e0     13 27 02 FB | 	rdlong	local01, local01
2b8e4     13 17 02 F1 | 	add	arg03, local01
2b8e8     01 18 06 F6 | 	mov	arg04, #1
2b8ec     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2b8f0     04 00 90 FD | 	jmp	#LR__4321
2b8f4                 | LR__4320
2b8f4     01 28 06 F6 | 	mov	local02, #1
2b8f8                 | LR__4321
2b8f8                 | LR__4322
2b8f8                 | ' 			res = FR_DISK_ERR;
2b8f8                 | ' 		}
2b8f8                 | ' 	}
2b8f8                 | ' 	return res;
2b8f8     14 FB 01 F6 | 	mov	result1, local02
2b8fc     A7 F0 03 F6 | 	mov	ptra, fp
2b900     B2 00 A0 FD | 	call	#popregs_
2b904                 | _fatfs_cc_sync_window_ret
2b904     2D 00 64 FD | 	ret
2b908                 | 
2b908                 | _fatfs_cc_move_window
2b908     03 4A 05 F6 | 	mov	COUNT_, #3
2b90c     A8 00 A0 FD | 	call	#pushregs_
2b910     09 27 02 F6 | 	mov	local01, arg01
2b914     0A 29 02 F6 | 	mov	local02, arg02
2b918     00 2A 06 F6 | 	mov	local03, #0
2b91c     30 26 06 F1 | 	add	local01, #48
2b920     13 19 02 FB | 	rdlong	arg04, local01
2b924     30 26 86 F1 | 	sub	local01, #48
2b928     0C 29 0A F2 | 	cmp	local02, arg04 wz
2b92c     40 00 90 AD |  if_e	jmp	#LR__4331
2b930     13 13 02 F6 | 	mov	arg01, local01
2b934     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2b938     FD 2A 0A F6 | 	mov	local03, result1 wz
2b93c     30 00 90 5D |  if_ne	jmp	#LR__4330
2b940     01 26 06 F1 | 	add	local01, #1
2b944     13 13 C2 FA | 	rdbyte	arg01, local01
2b948     33 26 06 F1 | 	add	local01, #51
2b94c     13 15 02 F6 | 	mov	arg02, local01
2b950     14 17 02 F6 | 	mov	arg03, local02
2b954     01 18 06 F6 | 	mov	arg04, #1
2b958     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2b95c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b960     01 28 66 56 |  if_ne	neg	local02, #1
2b964     01 2A 06 56 |  if_ne	mov	local03, #1
2b968     04 26 86 F1 | 	sub	local01, #4
2b96c     13 29 62 FC | 	wrlong	local02, local01
2b970                 | LR__4330
2b970                 | LR__4331
2b970                 | ' 				sect = (LBA_t)0 - 1;
2b970                 | ' 				res = FR_DISK_ERR;
2b970                 | ' 			}
2b970                 | ' 			fs->winsect = sect;
2b970                 | ' 		}
2b970                 | ' 	}
2b970                 | ' 	return res;
2b970     15 FB 01 F6 | 	mov	result1, local03
2b974     A7 F0 03 F6 | 	mov	ptra, fp
2b978     B2 00 A0 FD | 	call	#popregs_
2b97c                 | _fatfs_cc_move_window_ret
2b97c     2D 00 64 FD | 	ret
2b980                 | 
2b980                 | _fatfs_cc_sync_fs
2b980     02 4A 05 F6 | 	mov	COUNT_, #2
2b984     A8 00 A0 FD | 	call	#pushregs_
2b988     09 27 02 F6 | 	mov	local01, arg01
2b98c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2b990     FD 28 0A F6 | 	mov	local02, result1 wz
2b994     D8 00 90 5D |  if_ne	jmp	#LR__4341
2b998     13 19 C2 FA | 	rdbyte	arg04, local01
2b99c     03 18 0E F2 | 	cmp	arg04, #3 wz
2b9a0     04 26 06 A1 |  if_e	add	local01, #4
2b9a4     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2b9a8     04 26 86 A1 |  if_e	sub	local01, #4
2b9ac     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2b9b0     A0 00 90 5D |  if_ne	jmp	#LR__4340
2b9b4     34 26 06 F1 | 	add	local01, #52
2b9b8     13 13 02 F6 | 	mov	arg01, local01
2b9bc     00 14 06 F6 | 	mov	arg02, #0
2b9c0     09 16 C6 F9 | 	decod	arg03, #9
2b9c4     98 00 A0 FD | 	call	#\builtin_bytefill_
2b9c8     13 13 02 F6 | 	mov	arg01, local01
2b9cc     FE 13 06 F1 | 	add	arg01, #510
2b9d0     55 00 80 FF 
2b9d4     09 AB 58 FC | 	wrword	##43605, arg01
2b9d8     A9 B0 A0 FF 
2b9dc     13 A5 68 FC | 	wrlong	##1096897106, local01
2b9e0     13 13 02 F6 | 	mov	arg01, local01
2b9e4     E4 13 06 F1 | 	add	arg01, #484
2b9e8     B9 A0 B0 FF 
2b9ec     09 E5 68 FC | 	wrlong	##1631679090, arg01
2b9f0     13 13 02 F6 | 	mov	arg01, local01
2b9f4     E8 13 06 F1 | 	add	arg01, #488
2b9f8     20 26 86 F1 | 	sub	local01, #32
2b9fc     13 15 02 FB | 	rdlong	arg02, local01
2ba00     09 15 62 FC | 	wrlong	arg02, arg01
2ba04     20 26 06 F1 | 	add	local01, #32
2ba08     13 13 02 F6 | 	mov	arg01, local01
2ba0c     EC 13 06 F1 | 	add	arg01, #492
2ba10     24 26 86 F1 | 	sub	local01, #36
2ba14     13 15 02 FB | 	rdlong	arg02, local01
2ba18     09 15 62 FC | 	wrlong	arg02, arg01
2ba1c     10 26 06 F1 | 	add	local01, #16
2ba20     13 17 02 FB | 	rdlong	arg03, local01
2ba24     01 16 06 F1 | 	add	arg03, #1
2ba28     10 26 06 F1 | 	add	local01, #16
2ba2c     13 17 62 FC | 	wrlong	arg03, local01
2ba30     2F 26 86 F1 | 	sub	local01, #47
2ba34     13 13 C2 FA | 	rdbyte	arg01, local01
2ba38     33 26 06 F1 | 	add	local01, #51
2ba3c     13 15 02 F6 | 	mov	arg02, local01
2ba40     01 18 06 F6 | 	mov	arg04, #1
2ba44     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2ba48     30 26 86 F1 | 	sub	local01, #48
2ba4c     13 01 48 FC | 	wrbyte	#0, local01
2ba50     04 26 86 F1 | 	sub	local01, #4
2ba54                 | LR__4340
2ba54     01 26 06 F1 | 	add	local01, #1
2ba58     13 13 C2 FA | 	rdbyte	arg01, local01
2ba5c     00 14 06 F6 | 	mov	arg02, #0
2ba60     00 16 06 F6 | 	mov	arg03, #0
2ba64     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2ba68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba6c     01 28 06 56 |  if_ne	mov	local02, #1
2ba70                 | LR__4341
2ba70                 | ' 	}
2ba70                 | ' 
2ba70                 | ' 	return res;
2ba70     14 FB 01 F6 | 	mov	result1, local02
2ba74     A7 F0 03 F6 | 	mov	ptra, fp
2ba78     B2 00 A0 FD | 	call	#popregs_
2ba7c                 | _fatfs_cc_sync_fs_ret
2ba7c     2D 00 64 FD | 	ret
2ba80                 | 
2ba80                 | _fatfs_cc_clst2sect
2ba80     02 14 86 F1 | 	sub	arg02, #2
2ba84     18 12 06 F1 | 	add	arg01, #24
2ba88     09 01 02 FB | 	rdlong	_var01, arg01
2ba8c     18 12 86 F1 | 	sub	arg01, #24
2ba90     02 00 86 F1 | 	sub	_var01, #2
2ba94     00 15 12 F2 | 	cmp	arg02, _var01 wc
2ba98     00 FA 05 36 |  if_ae	mov	result1, #0
2ba9c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2baa0     0A 12 06 F1 | 	add	arg01, #10
2baa4     09 01 E2 FA | 	rdword	_var01, arg01
2baa8     0A 01 02 FD | 	qmul	_var01, arg02
2baac                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2baac     22 12 06 F1 | 	add	arg01, #34
2bab0     09 FB 01 FB | 	rdlong	result1, arg01
2bab4     18 00 62 FD | 	getqx	_var01
2bab8     00 FB 01 F1 | 	add	result1, _var01
2babc                 | _fatfs_cc_clst2sect_ret
2babc     2D 00 64 FD | 	ret
2bac0                 | 
2bac0                 | _fatfs_cc_get_fat
2bac0     07 4A 05 F6 | 	mov	COUNT_, #7
2bac4     A8 00 A0 FD | 	call	#pushregs_
2bac8     0A 27 02 F6 | 	mov	local01, arg02
2bacc     09 29 02 FB | 	rdlong	local02, arg01
2bad0     02 26 16 F2 | 	cmp	local01, #2 wc
2bad4     14 00 90 CD |  if_b	jmp	#LR__4350
2bad8     18 28 06 F1 | 	add	local02, #24
2badc     14 2B 02 FB | 	rdlong	local03, local02
2bae0     18 28 86 F1 | 	sub	local02, #24
2bae4     15 27 12 F2 | 	cmp	local01, local03 wc
2bae8     08 00 90 CD |  if_b	jmp	#LR__4351
2baec                 | LR__4350
2baec     01 2C 06 F6 | 	mov	local04, #1
2baf0     60 01 90 FD | 	jmp	#LR__4358
2baf4                 | LR__4351
2baf4     01 2C 66 F6 | 	neg	local04, #1
2baf8                 | ' 		val = 0xFFFFFFFF;
2baf8                 | ' 
2baf8                 | ' 		switch (fs->fs_type) {
2baf8     14 2F C2 FA | 	rdbyte	local05, local02
2bafc     01 2E 86 F1 | 	sub	local05, #1
2bb00     03 2E 26 F3 | 	fle	local05, #3
2bb04     30 2E 62 FD | 	jmprel	local05
2bb08                 | LR__4352
2bb08     0C 00 90 FD | 	jmp	#LR__4353
2bb0c     B8 00 90 FD | 	jmp	#LR__4354
2bb10     F8 00 90 FD | 	jmp	#LR__4355
2bb14     38 01 90 FD | 	jmp	#LR__4356
2bb18                 | LR__4353
2bb18     13 2F 02 F6 | 	mov	local05, local01
2bb1c     13 13 02 F6 | 	mov	arg01, local01
2bb20     01 12 46 F0 | 	shr	arg01, #1
2bb24     09 2F 02 F1 | 	add	local05, arg01
2bb28     14 13 02 F6 | 	mov	arg01, local02
2bb2c     17 31 02 F6 | 	mov	local06, local05
2bb30     09 30 46 F0 | 	shr	local06, #9
2bb34     24 28 06 F1 | 	add	local02, #36
2bb38     14 15 02 FB | 	rdlong	arg02, local02
2bb3c     24 28 86 F1 | 	sub	local02, #36
2bb40     18 15 02 F1 | 	add	arg02, local06
2bb44     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2bb48     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb4c     04 01 90 5D |  if_ne	jmp	#LR__4357
2bb50     17 31 02 F6 | 	mov	local06, local05
2bb54     FF 31 06 F5 | 	and	local06, #511
2bb58     34 28 06 F1 | 	add	local02, #52
2bb5c     14 31 02 F1 | 	add	local06, local02
2bb60     18 33 C2 FA | 	rdbyte	local07, local06
2bb64     34 28 86 F1 | 	sub	local02, #52
2bb68     14 13 02 F6 | 	mov	arg01, local02
2bb6c     01 2E 06 F1 | 	add	local05, #1
2bb70     17 31 02 F6 | 	mov	local06, local05
2bb74     09 30 46 F0 | 	shr	local06, #9
2bb78     24 28 06 F1 | 	add	local02, #36
2bb7c     14 15 02 FB | 	rdlong	arg02, local02
2bb80     24 28 86 F1 | 	sub	local02, #36
2bb84     18 15 02 F1 | 	add	arg02, local06
2bb88     7C FD BF FD | 	call	#_fatfs_cc_move_window
2bb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb90     C0 00 90 5D |  if_ne	jmp	#LR__4357
2bb94     FF 2F 06 F5 | 	and	local05, #511
2bb98     34 28 06 F1 | 	add	local02, #52
2bb9c     14 2F 02 F1 | 	add	local05, local02
2bba0     17 31 C2 FA | 	rdbyte	local06, local05
2bba4     08 30 66 F0 | 	shl	local06, #8
2bba8     18 33 42 F5 | 	or	local07, local06
2bbac     01 26 CE F7 | 	test	local01, #1 wz
2bbb0     04 32 46 50 |  if_ne	shr	local07, #4
2bbb4     19 2B 02 56 |  if_ne	mov	local03, local07
2bbb8     0B 32 46 A7 |  if_e	zerox	local07, #11
2bbbc     19 2B 02 A6 |  if_e	mov	local03, local07
2bbc0     15 2D 02 F6 | 	mov	local04, local03
2bbc4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2bbc4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2bbc4                 | ' 			break;
2bbc4     8C 00 90 FD | 	jmp	#LR__4357
2bbc8                 | LR__4354
2bbc8     14 13 02 F6 | 	mov	arg01, local02
2bbcc     13 31 02 F6 | 	mov	local06, local01
2bbd0     08 30 46 F0 | 	shr	local06, #8
2bbd4     24 28 06 F1 | 	add	local02, #36
2bbd8     14 15 02 FB | 	rdlong	arg02, local02
2bbdc     24 28 86 F1 | 	sub	local02, #36
2bbe0     18 15 02 F1 | 	add	arg02, local06
2bbe4     20 FD BF FD | 	call	#_fatfs_cc_move_window
2bbe8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bbec     64 00 90 5D |  if_ne	jmp	#LR__4357
2bbf0     34 28 06 F1 | 	add	local02, #52
2bbf4     01 26 66 F0 | 	shl	local01, #1
2bbf8     FF 27 06 F5 | 	and	local01, #511
2bbfc     13 29 02 F1 | 	add	local02, local01
2bc00                 | ' {
2bc00                 | ' 
2bc00                 | ' 	return *((WORD*)ptr);
2bc00     14 FB E1 FA | 	rdword	result1, local02
2bc04     FD 2C 32 F9 | 	getword	local04, result1, #0
2bc08                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2bc08                 | ' 			break;
2bc08     48 00 90 FD | 	jmp	#LR__4357
2bc0c                 | LR__4355
2bc0c     14 13 02 F6 | 	mov	arg01, local02
2bc10     13 31 02 F6 | 	mov	local06, local01
2bc14     07 30 46 F0 | 	shr	local06, #7
2bc18     24 28 06 F1 | 	add	local02, #36
2bc1c     14 15 02 FB | 	rdlong	arg02, local02
2bc20     24 28 86 F1 | 	sub	local02, #36
2bc24     18 15 02 F1 | 	add	arg02, local06
2bc28     DC FC BF FD | 	call	#_fatfs_cc_move_window
2bc2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc30     20 00 90 5D |  if_ne	jmp	#LR__4357
2bc34     34 28 06 F1 | 	add	local02, #52
2bc38     02 26 66 F0 | 	shl	local01, #2
2bc3c     FF 27 06 F5 | 	and	local01, #511
2bc40     13 29 02 F1 | 	add	local02, local01
2bc44                 | ' {
2bc44                 | ' 
2bc44                 | ' 	return *((DWORD*)ptr);
2bc44     14 2D 02 FB | 	rdlong	local04, local02
2bc48     7C 2C 06 F4 | 	bitl	local04, #124
2bc4c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2bc4c                 | ' 			break;
2bc4c     04 00 90 FD | 	jmp	#LR__4357
2bc50                 | LR__4356
2bc50     01 2C 06 F6 | 	mov	local04, #1
2bc54                 | LR__4357
2bc54                 | LR__4358
2bc54                 | ' 			val = 1;
2bc54                 | ' 		}
2bc54                 | ' 	}
2bc54                 | ' 
2bc54                 | ' 	return val;
2bc54     16 FB 01 F6 | 	mov	result1, local04
2bc58     A7 F0 03 F6 | 	mov	ptra, fp
2bc5c     B2 00 A0 FD | 	call	#popregs_
2bc60                 | _fatfs_cc_get_fat_ret
2bc60     2D 00 64 FD | 	ret
2bc64                 | 
2bc64                 | _fatfs_cc_put_fat
2bc64     08 4A 05 F6 | 	mov	COUNT_, #8
2bc68     A8 00 A0 FD | 	call	#pushregs_
2bc6c     09 27 02 F6 | 	mov	local01, arg01
2bc70     0A 29 02 F6 | 	mov	local02, arg02
2bc74     0B 2B 02 F6 | 	mov	local03, arg03
2bc78     02 2C 06 F6 | 	mov	local04, #2
2bc7c     02 28 16 F2 | 	cmp	local02, #2 wc
2bc80     E0 01 90 CD |  if_b	jmp	#LR__4367
2bc84     18 26 06 F1 | 	add	local01, #24
2bc88     13 2F 02 FB | 	rdlong	local05, local01
2bc8c     18 26 86 F1 | 	sub	local01, #24
2bc90     17 29 12 F2 | 	cmp	local02, local05 wc
2bc94     CC 01 90 3D |  if_ae	jmp	#LR__4367
2bc98                 | ' 		switch (fs->fs_type) {
2bc98     13 31 C2 FA | 	rdbyte	local06, local01
2bc9c     01 30 86 F1 | 	sub	local06, #1
2bca0     03 30 26 F3 | 	fle	local06, #3
2bca4     30 30 62 FD | 	jmprel	local06
2bca8                 | LR__4360
2bca8     0C 00 90 FD | 	jmp	#LR__4361
2bcac     F8 00 90 FD | 	jmp	#LR__4364
2bcb0     40 01 90 FD | 	jmp	#LR__4365
2bcb4     AC 01 90 FD | 	jmp	#LR__4366
2bcb8                 | LR__4361
2bcb8     14 33 02 F6 | 	mov	local07, local02
2bcbc     14 2F 02 F6 | 	mov	local05, local02
2bcc0     01 2E 46 F0 | 	shr	local05, #1
2bcc4     17 33 02 F1 | 	add	local07, local05
2bcc8     13 13 02 F6 | 	mov	arg01, local01
2bccc     19 31 02 F6 | 	mov	local06, local07
2bcd0     09 30 46 F0 | 	shr	local06, #9
2bcd4     24 26 06 F1 | 	add	local01, #36
2bcd8     13 15 02 FB | 	rdlong	arg02, local01
2bcdc     24 26 86 F1 | 	sub	local01, #36
2bce0     18 15 02 F1 | 	add	arg02, local06
2bce4     20 FC BF FD | 	call	#_fatfs_cc_move_window
2bce8     FD 2C 0A F6 | 	mov	local04, result1 wz
2bcec     74 01 90 5D |  if_ne	jmp	#LR__4366
2bcf0     34 26 06 F1 | 	add	local01, #52
2bcf4     13 35 02 F6 | 	mov	local08, local01
2bcf8     19 2F 02 F6 | 	mov	local05, local07
2bcfc     FF 2F 06 F5 | 	and	local05, #511
2bd00     17 35 02 F1 | 	add	local08, local05
2bd04     01 28 CE F7 | 	test	local02, #1 wz
2bd08     34 26 86 F1 | 	sub	local01, #52
2bd0c     01 32 06 F1 | 	add	local07, #1
2bd10     18 00 90 AD |  if_e	jmp	#LR__4362
2bd14     1A 2F C2 FA | 	rdbyte	local05, local08
2bd18     17 2F 42 F8 | 	getnib	local05, local05, #0
2bd1c     15 31 E2 F8 | 	getbyte	local06, local03, #0
2bd20     04 30 66 F0 | 	shl	local06, #4
2bd24     18 2F 42 F5 | 	or	local05, local06
2bd28     04 00 90 FD | 	jmp	#LR__4363
2bd2c                 | LR__4362
2bd2c     15 2F 02 F6 | 	mov	local05, local03
2bd30                 | LR__4363
2bd30     1A 2F 42 FC | 	wrbyte	local05, local08
2bd34     03 26 06 F1 | 	add	local01, #3
2bd38     13 03 48 FC | 	wrbyte	#1, local01
2bd3c     03 26 86 F1 | 	sub	local01, #3
2bd40     13 13 02 F6 | 	mov	arg01, local01
2bd44     19 35 02 F6 | 	mov	local08, local07
2bd48     09 34 46 F0 | 	shr	local08, #9
2bd4c     24 26 06 F1 | 	add	local01, #36
2bd50     13 15 02 FB | 	rdlong	arg02, local01
2bd54     24 26 86 F1 | 	sub	local01, #36
2bd58     1A 15 02 F1 | 	add	arg02, local08
2bd5c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2bd60     FD 2C 0A F6 | 	mov	local04, result1 wz
2bd64     FC 00 90 5D |  if_ne	jmp	#LR__4366
2bd68     34 26 06 F1 | 	add	local01, #52
2bd6c     13 35 02 F6 | 	mov	local08, local01
2bd70     FF 33 06 F5 | 	and	local07, #511
2bd74     19 35 02 F1 | 	add	local08, local07
2bd78     01 28 CE F7 | 	test	local02, #1 wz
2bd7c     04 2A 46 50 |  if_ne	shr	local03, #4
2bd80     15 2F 02 56 |  if_ne	mov	local05, local03
2bd84     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2bd88     F0 2E 06 A5 |  if_e	and	local05, #240
2bd8c     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2bd90     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2bd94     15 2F 42 A5 |  if_e	or	local05, local03
2bd98     1A 2F 42 FC | 	wrbyte	local05, local08
2bd9c     31 26 86 F1 | 	sub	local01, #49
2bda0     13 03 48 FC | 	wrbyte	#1, local01
2bda4                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2bda4                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2bda4                 | ' 			fs->wflag = 1;
2bda4                 | ' 			break;
2bda4     BC 00 90 FD | 	jmp	#LR__4366
2bda8                 | LR__4364
2bda8     13 13 02 F6 | 	mov	arg01, local01
2bdac     14 35 02 F6 | 	mov	local08, local02
2bdb0     08 34 46 F0 | 	shr	local08, #8
2bdb4     24 26 06 F1 | 	add	local01, #36
2bdb8     13 15 02 FB | 	rdlong	arg02, local01
2bdbc     24 26 86 F1 | 	sub	local01, #36
2bdc0     1A 15 02 F1 | 	add	arg02, local08
2bdc4     40 FB BF FD | 	call	#_fatfs_cc_move_window
2bdc8     FD 2C 0A F6 | 	mov	local04, result1 wz
2bdcc     94 00 90 5D |  if_ne	jmp	#LR__4366
2bdd0     34 26 06 F1 | 	add	local01, #52
2bdd4     13 13 02 F6 | 	mov	arg01, local01
2bdd8     01 28 66 F0 | 	shl	local02, #1
2bddc     FF 29 06 F5 | 	and	local02, #511
2bde0     14 13 02 F1 | 	add	arg01, local02
2bde4     09 2B 52 FC | 	wrword	local03, arg01
2bde8     31 26 86 F1 | 	sub	local01, #49
2bdec     13 03 48 FC | 	wrbyte	#1, local01
2bdf0                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2bdf0                 | ' 			fs->wflag = 1;
2bdf0                 | ' 			break;
2bdf0     70 00 90 FD | 	jmp	#LR__4366
2bdf4                 | LR__4365
2bdf4     13 13 02 F6 | 	mov	arg01, local01
2bdf8     14 35 02 F6 | 	mov	local08, local02
2bdfc     07 34 46 F0 | 	shr	local08, #7
2be00     24 26 06 F1 | 	add	local01, #36
2be04     13 15 02 FB | 	rdlong	arg02, local01
2be08     24 26 86 F1 | 	sub	local01, #36
2be0c     1A 15 02 F1 | 	add	arg02, local08
2be10     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2be14     FD 2C 0A F6 | 	mov	local04, result1 wz
2be18     48 00 90 5D |  if_ne	jmp	#LR__4366
2be1c     7C 2A 06 F4 | 	bitl	local03, #124
2be20     34 26 06 F1 | 	add	local01, #52
2be24     14 35 02 F6 | 	mov	local08, local02
2be28     02 34 66 F0 | 	shl	local08, #2
2be2c     FF 35 06 F5 | 	and	local08, #511
2be30     13 13 02 F6 | 	mov	arg01, local01
2be34     1A 13 02 F1 | 	add	arg01, local08
2be38                 | ' {
2be38                 | ' 
2be38                 | ' 	return *((DWORD*)ptr);
2be38     09 35 02 FB | 	rdlong	local08, arg01
2be3c     00 00 78 FF 
2be40     00 34 06 F5 | 	and	local08, ##-268435456
2be44     1A 2B 42 F5 | 	or	local03, local08
2be48     13 13 02 F6 | 	mov	arg01, local01
2be4c     02 28 66 F0 | 	shl	local02, #2
2be50     FF 29 06 F5 | 	and	local02, #511
2be54     14 13 02 F1 | 	add	arg01, local02
2be58     09 2B 62 FC | 	wrlong	local03, arg01
2be5c     31 26 86 F1 | 	sub	local01, #49
2be60     13 03 48 FC | 	wrbyte	#1, local01
2be64                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2be64                 | ' 			}
2be64                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2be64                 | ' 			fs->wflag = 1;
2be64                 | ' 			break;
2be64                 | LR__4366
2be64                 | LR__4367
2be64                 | ' 		}
2be64                 | ' 	}
2be64                 | ' 	return res;
2be64     16 FB 01 F6 | 	mov	result1, local04
2be68     A7 F0 03 F6 | 	mov	ptra, fp
2be6c     B2 00 A0 FD | 	call	#popregs_
2be70                 | _fatfs_cc_put_fat_ret
2be70     2D 00 64 FD | 	ret
2be74                 | 
2be74                 | _fatfs_cc_remove_chain
2be74     05 4A 05 F6 | 	mov	COUNT_, #5
2be78     A8 00 A0 FD | 	call	#pushregs_
2be7c     09 27 02 F6 | 	mov	local01, arg01
2be80     0A 29 02 F6 | 	mov	local02, arg02
2be84     0B 2B 02 F6 | 	mov	local03, arg03
2be88     13 2D 02 FB | 	rdlong	local04, local01
2be8c     02 28 16 F2 | 	cmp	local02, #2 wc
2be90     14 00 90 CD |  if_b	jmp	#LR__4370
2be94     18 2C 06 F1 | 	add	local04, #24
2be98     16 FB 01 FB | 	rdlong	result1, local04
2be9c     18 2C 86 F1 | 	sub	local04, #24
2bea0     FD 28 12 F2 | 	cmp	local02, result1 wc
2bea4     08 00 90 CD |  if_b	jmp	#LR__4371
2bea8                 | LR__4370
2bea8     02 FA 05 F6 | 	mov	result1, #2
2beac     CC 00 90 FD | 	jmp	#LR__4376
2beb0                 | LR__4371
2beb0     00 2A 0E F2 | 	cmp	local03, #0 wz
2beb4     18 00 90 AD |  if_e	jmp	#LR__4372
2beb8     15 15 02 F6 | 	mov	arg02, local03
2bebc     16 13 02 F6 | 	mov	arg01, local04
2bec0     01 16 66 F6 | 	neg	arg03, #1
2bec4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2bec8     00 FA 0D F2 | 	cmp	result1, #0 wz
2becc     AC 00 90 5D |  if_ne	jmp	#LR__4376
2bed0                 | LR__4372
2bed0                 | ' 	}
2bed0                 | ' 
2bed0                 | ' 
2bed0                 | ' 	do {
2bed0                 | LR__4373
2bed0     14 15 02 F6 | 	mov	arg02, local02
2bed4     13 13 02 F6 | 	mov	arg01, local01
2bed8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2bedc     FD 2E 0A F6 | 	mov	local05, result1 wz
2bee0     94 00 90 AD |  if_e	jmp	#LR__4375
2bee4     01 2E 0E F2 | 	cmp	local05, #1 wz
2bee8     02 FA 05 A6 |  if_e	mov	result1, #2
2beec     8C 00 90 AD |  if_e	jmp	#LR__4376
2bef0     FF FF 7F FF 
2bef4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2bef8     01 FA 05 A6 |  if_e	mov	result1, #1
2befc     7C 00 90 AD |  if_e	jmp	#LR__4376
2bf00     14 15 02 F6 | 	mov	arg02, local02
2bf04     16 13 02 F6 | 	mov	arg01, local04
2bf08     00 16 06 F6 | 	mov	arg03, #0
2bf0c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2bf10     FD 2A 0A F6 | 	mov	local03, result1 wz
2bf14     15 FB 01 56 |  if_ne	mov	result1, local03
2bf18     60 00 90 5D |  if_ne	jmp	#LR__4376
2bf1c     18 2C 06 F1 | 	add	local04, #24
2bf20     16 2B 02 FB | 	rdlong	local03, local04
2bf24     02 2A 86 F1 | 	sub	local03, #2
2bf28     04 2C 86 F1 | 	sub	local04, #4
2bf2c     16 29 02 FB | 	rdlong	local02, local04
2bf30     14 2C 86 F1 | 	sub	local04, #20
2bf34     15 29 12 F2 | 	cmp	local02, local03 wc
2bf38     24 00 90 3D |  if_ae	jmp	#LR__4374
2bf3c     14 2C 06 F1 | 	add	local04, #20
2bf40     16 2B 02 FB | 	rdlong	local03, local04
2bf44     01 2A 06 F1 | 	add	local03, #1
2bf48     16 2B 62 FC | 	wrlong	local03, local04
2bf4c     10 2C 86 F1 | 	sub	local04, #16
2bf50     16 2B C2 FA | 	rdbyte	local03, local04
2bf54     01 2A 46 F5 | 	or	local03, #1
2bf58     16 2B 42 FC | 	wrbyte	local03, local04
2bf5c     04 2C 86 F1 | 	sub	local04, #4
2bf60                 | LR__4374
2bf60     17 29 02 F6 | 	mov	local02, local05
2bf64     18 2C 06 F1 | 	add	local04, #24
2bf68     16 2F 02 FB | 	rdlong	local05, local04
2bf6c     18 2C 86 F1 | 	sub	local04, #24
2bf70     17 29 12 F2 | 	cmp	local02, local05 wc
2bf74     58 FF 9F CD |  if_b	jmp	#LR__4373
2bf78                 | LR__4375
2bf78                 | ' #line 1500 "ff.c"
2bf78                 | ' 	return FR_OK;
2bf78     00 FA 05 F6 | 	mov	result1, #0
2bf7c                 | LR__4376
2bf7c     A7 F0 03 F6 | 	mov	ptra, fp
2bf80     B2 00 A0 FD | 	call	#popregs_
2bf84                 | _fatfs_cc_remove_chain_ret
2bf84     2D 00 64 FD | 	ret
2bf88                 | 
2bf88                 | _fatfs_cc_create_chain
2bf88     09 4A 05 F6 | 	mov	COUNT_, #9
2bf8c     A8 00 A0 FD | 	call	#pushregs_
2bf90     09 27 02 F6 | 	mov	local01, arg01
2bf94     0A 29 0A F6 | 	mov	local02, arg02 wz
2bf98     13 2B 02 FB | 	rdlong	local03, local01
2bf9c     28 00 90 5D |  if_ne	jmp	#LR__4380
2bfa0     10 2A 06 F1 | 	add	local03, #16
2bfa4     15 2D 0A FB | 	rdlong	local04, local03 wz
2bfa8     10 2A 86 F1 | 	sub	local03, #16
2bfac     18 2A 06 51 |  if_ne	add	local03, #24
2bfb0     15 2F 02 5B |  if_ne	rdlong	local05, local03
2bfb4     18 2A 86 51 |  if_ne	sub	local03, #24
2bfb8     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2bfbc     50 00 90 4D |  if_c_and_nz	jmp	#LR__4381
2bfc0     01 2C 06 F6 | 	mov	local04, #1
2bfc4     48 00 90 FD | 	jmp	#LR__4381
2bfc8                 | LR__4380
2bfc8     14 15 02 F6 | 	mov	arg02, local02
2bfcc     13 13 02 F6 | 	mov	arg01, local01
2bfd0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2bfd4     FD 2C 02 F6 | 	mov	local04, result1
2bfd8     02 2C 16 F2 | 	cmp	local04, #2 wc
2bfdc     01 FA 05 C6 |  if_b	mov	result1, #1
2bfe0     BC 01 90 CD |  if_b	jmp	#LR__4391
2bfe4     FF FF 7F FF 
2bfe8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2bfec     16 FB 01 A6 |  if_e	mov	result1, local04
2bff0     AC 01 90 AD |  if_e	jmp	#LR__4391
2bff4     18 2A 06 F1 | 	add	local03, #24
2bff8     15 2F 02 FB | 	rdlong	local05, local03
2bffc     18 2A 86 F1 | 	sub	local03, #24
2c000     17 2D 12 F2 | 	cmp	local04, local05 wc
2c004     16 FB 01 C6 |  if_b	mov	result1, local04
2c008     94 01 90 CD |  if_b	jmp	#LR__4391
2c00c     14 2D 02 F6 | 	mov	local04, local02
2c010                 | LR__4381
2c010     14 2A 06 F1 | 	add	local03, #20
2c014     15 2F 0A FB | 	rdlong	local05, local03 wz
2c018     14 2A 86 F1 | 	sub	local03, #20
2c01c     00 FA 05 A6 |  if_e	mov	result1, #0
2c020     7C 01 90 AD |  if_e	jmp	#LR__4391
2c024     00 30 06 F6 | 	mov	local06, #0
2c028     14 2D 0A F2 | 	cmp	local04, local02 wz
2c02c     74 00 90 5D |  if_ne	jmp	#LR__4384
2c030     16 31 02 F6 | 	mov	local06, local04
2c034     01 30 06 F1 | 	add	local06, #1
2c038     18 2A 06 F1 | 	add	local03, #24
2c03c     15 2F 02 FB | 	rdlong	local05, local03
2c040     18 2A 86 F1 | 	sub	local03, #24
2c044     17 31 12 F2 | 	cmp	local06, local05 wc
2c048     02 30 06 36 |  if_ae	mov	local06, #2
2c04c     18 15 02 F6 | 	mov	arg02, local06
2c050     13 13 02 F6 | 	mov	arg01, local01
2c054     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2c058     FD 2E 02 F6 | 	mov	local05, result1
2c05c     01 2E 0E F2 | 	cmp	local05, #1 wz
2c060     FF FF 7F 5F 
2c064     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2c068     17 FB 01 A6 |  if_e	mov	result1, local05
2c06c     30 01 90 AD |  if_e	jmp	#LR__4391
2c070     00 2E 0E F2 | 	cmp	local05, #0 wz
2c074     2C 00 90 AD |  if_e	jmp	#LR__4383
2c078     10 2A 06 F1 | 	add	local03, #16
2c07c     15 33 02 FB | 	rdlong	local07, local03
2c080     10 2A 86 F1 | 	sub	local03, #16
2c084     02 32 16 F2 | 	cmp	local07, #2 wc
2c088     14 00 90 CD |  if_b	jmp	#LR__4382
2c08c     18 2A 06 F1 | 	add	local03, #24
2c090     15 2F 02 FB | 	rdlong	local05, local03
2c094     18 2A 86 F1 | 	sub	local03, #24
2c098     17 33 12 F2 | 	cmp	local07, local05 wc
2c09c     19 2D 02 C6 |  if_b	mov	local04, local07
2c0a0                 | LR__4382
2c0a0     00 30 06 F6 | 	mov	local06, #0
2c0a4                 | LR__4383
2c0a4                 | LR__4384
2c0a4     00 30 0E F2 | 	cmp	local06, #0 wz
2c0a8     60 00 90 5D |  if_ne	jmp	#LR__4387
2c0ac     16 31 02 F6 | 	mov	local06, local04
2c0b0                 | ' 			ncl = scl;
2c0b0                 | ' 			for (;;) {
2c0b0                 | LR__4385
2c0b0     01 30 06 F1 | 	add	local06, #1
2c0b4     18 2A 06 F1 | 	add	local03, #24
2c0b8     15 2F 02 FB | 	rdlong	local05, local03
2c0bc     18 2A 86 F1 | 	sub	local03, #24
2c0c0     17 31 12 F2 | 	cmp	local06, local05 wc
2c0c4     02 30 06 36 |  if_ae	mov	local06, #2
2c0c8     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2c0cc     00 FA 05 16 |  if_a	mov	result1, #0
2c0d0     CC 00 90 1D |  if_a	jmp	#LR__4391
2c0d4     18 15 02 F6 | 	mov	arg02, local06
2c0d8     13 13 02 F6 | 	mov	arg01, local01
2c0dc     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2c0e0     FD 32 0A F6 | 	mov	local07, result1 wz
2c0e4     24 00 90 AD |  if_e	jmp	#LR__4386
2c0e8     01 32 0E F2 | 	cmp	local07, #1 wz
2c0ec     FF FF 7F 5F 
2c0f0     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2c0f4     19 FB 01 A6 |  if_e	mov	result1, local07
2c0f8     A4 00 90 AD |  if_e	jmp	#LR__4391
2c0fc     16 31 0A F2 | 	cmp	local06, local04 wz
2c100     00 FA 05 A6 |  if_e	mov	result1, #0
2c104     98 00 90 AD |  if_e	jmp	#LR__4391
2c108     A4 FF 9F FD | 	jmp	#LR__4385
2c10c                 | LR__4386
2c10c                 | LR__4387
2c10c     15 13 02 F6 | 	mov	arg01, local03
2c110     18 15 02 F6 | 	mov	arg02, local06
2c114     01 16 66 F6 | 	neg	arg03, #1
2c118     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2c11c     FD 34 0A F6 | 	mov	local08, result1 wz
2c120     1C 00 90 5D |  if_ne	jmp	#LR__4388
2c124     00 28 0E F2 | 	cmp	local02, #0 wz
2c128     14 00 90 AD |  if_e	jmp	#LR__4388
2c12c     15 13 02 F6 | 	mov	arg01, local03
2c130     14 15 02 F6 | 	mov	arg02, local02
2c134     18 17 02 F6 | 	mov	arg03, local06
2c138     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2c13c     FD 34 02 F6 | 	mov	local08, result1
2c140                 | LR__4388
2c140     00 34 0E F2 | 	cmp	local08, #0 wz
2c144     4C 00 90 5D |  if_ne	jmp	#LR__4389
2c148     10 2A 06 F1 | 	add	local03, #16
2c14c     15 31 62 FC | 	wrlong	local06, local03
2c150     08 2A 06 F1 | 	add	local03, #8
2c154     15 2F 02 FB | 	rdlong	local05, local03
2c158     02 2E 86 F1 | 	sub	local05, #2
2c15c     04 2A 86 F1 | 	sub	local03, #4
2c160     15 37 02 FB | 	rdlong	local09, local03
2c164     14 2A 86 F1 | 	sub	local03, #20
2c168     17 37 1A F2 | 	cmp	local09, local05 wcz
2c16c     14 2A 06 E1 |  if_be	add	local03, #20
2c170     15 37 02 EB |  if_be	rdlong	local09, local03
2c174     01 36 86 E1 |  if_be	sub	local09, #1
2c178     15 37 62 EC |  if_be	wrlong	local09, local03
2c17c     14 2A 86 E1 |  if_be	sub	local03, #20
2c180     04 2A 06 F1 | 	add	local03, #4
2c184     15 2F C2 FA | 	rdbyte	local05, local03
2c188     01 2E 46 F5 | 	or	local05, #1
2c18c     15 2F 42 FC | 	wrbyte	local05, local03
2c190     08 00 90 FD | 	jmp	#LR__4390
2c194                 | LR__4389
2c194     01 34 0E F2 | 	cmp	local08, #1 wz
2c198     01 30 C6 F6 | 	negz	local06, #1
2c19c                 | LR__4390
2c19c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2c19c                 | ' 	}
2c19c                 | ' 
2c19c                 | ' 	return ncl;
2c19c     18 FB 01 F6 | 	mov	result1, local06
2c1a0                 | LR__4391
2c1a0     A7 F0 03 F6 | 	mov	ptra, fp
2c1a4     B2 00 A0 FD | 	call	#popregs_
2c1a8                 | _fatfs_cc_create_chain_ret
2c1a8     2D 00 64 FD | 	ret
2c1ac                 | 
2c1ac                 | _fatfs_cc_dir_clear
2c1ac     06 4A 05 F6 | 	mov	COUNT_, #6
2c1b0     A8 00 A0 FD | 	call	#pushregs_
2c1b4     09 27 02 F6 | 	mov	local01, arg01
2c1b8     0A 29 02 F6 | 	mov	local02, arg02
2c1bc     13 13 02 F6 | 	mov	arg01, local01
2c1c0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2c1c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1c8     01 FA 05 56 |  if_ne	mov	result1, #1
2c1cc     90 00 90 5D |  if_ne	jmp	#LR__4402
2c1d0     13 13 02 F6 | 	mov	arg01, local01
2c1d4     14 15 02 F6 | 	mov	arg02, local02
2c1d8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2c1dc     FD 2A 02 F6 | 	mov	local03, result1
2c1e0     30 26 06 F1 | 	add	local01, #48
2c1e4     13 2B 62 FC | 	wrlong	local03, local01
2c1e8     04 26 06 F1 | 	add	local01, #4
2c1ec     13 13 02 F6 | 	mov	arg01, local01
2c1f0     00 14 06 F6 | 	mov	arg02, #0
2c1f4     09 16 C6 F9 | 	decod	arg03, #9
2c1f8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c1fc     13 2D 02 F6 | 	mov	local04, local01
2c200                 | ' #line 1667 "ff.c"
2c200                 | ' 	{
2c200                 | ' 		ibuf = fs->win; szb = 1;
2c200                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2c200     00 2E 06 F6 | 	mov	local05, #0
2c204     34 26 86 F1 | 	sub	local01, #52
2c208                 | LR__4400
2c208     0A 26 06 F1 | 	add	local01, #10
2c20c     13 31 E2 FA | 	rdword	local06, local01
2c210     0A 26 86 F1 | 	sub	local01, #10
2c214     18 2F 12 F2 | 	cmp	local05, local06 wc
2c218     2C 00 90 3D |  if_ae	jmp	#LR__4401
2c21c     01 26 06 F1 | 	add	local01, #1
2c220     13 13 C2 FA | 	rdbyte	arg01, local01
2c224     01 26 86 F1 | 	sub	local01, #1
2c228     16 15 02 F6 | 	mov	arg02, local04
2c22c     15 17 02 F6 | 	mov	arg03, local03
2c230     17 17 02 F1 | 	add	arg03, local05
2c234     01 18 06 F6 | 	mov	arg04, #1
2c238     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2c23c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c240     01 2E 06 A1 |  if_e	add	local05, #1
2c244     C0 FF 9F AD |  if_e	jmp	#LR__4400
2c248                 | LR__4401
2c248                 | ' 	}
2c248                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2c248     0A 26 06 F1 | 	add	local01, #10
2c24c     13 2D E2 FA | 	rdword	local04, local01
2c250     16 2F 0A F2 | 	cmp	local05, local04 wz
2c254     00 30 06 A6 |  if_e	mov	local06, #0
2c258     01 30 06 56 |  if_ne	mov	local06, #1
2c25c     18 FB 01 F6 | 	mov	result1, local06
2c260                 | LR__4402
2c260     A7 F0 03 F6 | 	mov	ptra, fp
2c264     B2 00 A0 FD | 	call	#popregs_
2c268                 | _fatfs_cc_dir_clear_ret
2c268     2D 00 64 FD | 	ret
2c26c                 | 
2c26c                 | _fatfs_cc_dir_sdi
2c26c     06 4A 05 F6 | 	mov	COUNT_, #6
2c270     A8 00 A0 FD | 	call	#pushregs_
2c274     09 27 02 F6 | 	mov	local01, arg01
2c278     0A 29 02 F6 | 	mov	local02, arg02
2c27c     13 2B 02 FB | 	rdlong	local03, local01
2c280     00 10 00 FF 
2c284     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2c288     1F 28 CE C7 |  if_b	test	local02, #31 wz
2c28c                 | ' 		return FR_INT_ERR;
2c28c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2c290     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4416
2c294     10 26 06 F1 | 	add	local01, #16
2c298     13 29 62 FC | 	wrlong	local02, local01
2c29c     08 26 86 F1 | 	sub	local01, #8
2c2a0     13 2D 0A FB | 	rdlong	local04, local01 wz
2c2a4     08 26 86 F1 | 	sub	local01, #8
2c2a8     15 2F C2 AA |  if_e	rdbyte	local05, local03
2c2ac     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2c2b0     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2c2b4     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2c2b8     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2c2bc     00 2C 0E F2 | 	cmp	local04, #0 wz
2c2c0     3C 00 90 5D |  if_ne	jmp	#LR__4410
2c2c4     14 2F 02 F6 | 	mov	local05, local02
2c2c8     05 2E 46 F0 | 	shr	local05, #5
2c2cc     08 2A 06 F1 | 	add	local03, #8
2c2d0     15 15 E2 FA | 	rdword	arg02, local03
2c2d4     08 2A 86 F1 | 	sub	local03, #8
2c2d8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2c2dc     02 FA 05 36 |  if_ae	mov	result1, #2
2c2e0     E4 00 90 3D |  if_ae	jmp	#LR__4416
2c2e4     28 2A 06 F1 | 	add	local03, #40
2c2e8     15 2F 02 FB | 	rdlong	local05, local03
2c2ec     28 2A 86 F1 | 	sub	local03, #40
2c2f0     18 26 06 F1 | 	add	local01, #24
2c2f4     13 2F 62 FC | 	wrlong	local05, local01
2c2f8     18 26 86 F1 | 	sub	local01, #24
2c2fc     7C 00 90 FD | 	jmp	#LR__4415
2c300                 | LR__4410
2c300     0A 2A 06 F1 | 	add	local03, #10
2c304     15 31 E2 FA | 	rdword	local06, local03
2c308     0A 2A 86 F1 | 	sub	local03, #10
2c30c     09 30 66 F0 | 	shl	local06, #9
2c310                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2c310                 | ' 		while (ofs >= csz) {
2c310                 | LR__4411
2c310     18 29 12 F2 | 	cmp	local02, local06 wc
2c314     4C 00 90 CD |  if_b	jmp	#LR__4414
2c318     13 13 02 F6 | 	mov	arg01, local01
2c31c     16 15 02 F6 | 	mov	arg02, local04
2c320     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2c324     FD 2C 02 F6 | 	mov	local04, result1
2c328     FF FF 7F FF 
2c32c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2c330     01 FA 05 A6 |  if_e	mov	result1, #1
2c334     90 00 90 AD |  if_e	jmp	#LR__4416
2c338     02 2C 16 F2 | 	cmp	local04, #2 wc
2c33c     14 00 90 CD |  if_b	jmp	#LR__4412
2c340     18 2A 06 F1 | 	add	local03, #24
2c344     15 2F 02 FB | 	rdlong	local05, local03
2c348     18 2A 86 F1 | 	sub	local03, #24
2c34c     17 2D 12 F2 | 	cmp	local04, local05 wc
2c350     08 00 90 CD |  if_b	jmp	#LR__4413
2c354                 | LR__4412
2c354     02 FA 05 F6 | 	mov	result1, #2
2c358     6C 00 90 FD | 	jmp	#LR__4416
2c35c                 | LR__4413
2c35c     18 29 82 F1 | 	sub	local02, local06
2c360     AC FF 9F FD | 	jmp	#LR__4411
2c364                 | LR__4414
2c364     15 13 02 F6 | 	mov	arg01, local03
2c368     16 15 02 F6 | 	mov	arg02, local04
2c36c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2c370     18 26 06 F1 | 	add	local01, #24
2c374     13 FB 61 FC | 	wrlong	result1, local01
2c378     18 26 86 F1 | 	sub	local01, #24
2c37c                 | LR__4415
2c37c     14 26 06 F1 | 	add	local01, #20
2c380     13 2D 62 FC | 	wrlong	local04, local01
2c384     04 26 06 F1 | 	add	local01, #4
2c388     13 2F 0A FB | 	rdlong	local05, local01 wz
2c38c     18 26 86 F1 | 	sub	local01, #24
2c390     02 FA 05 A6 |  if_e	mov	result1, #2
2c394     30 00 90 AD |  if_e	jmp	#LR__4416
2c398     14 31 02 F6 | 	mov	local06, local02
2c39c     09 30 46 F0 | 	shr	local06, #9
2c3a0     18 26 06 F1 | 	add	local01, #24
2c3a4     13 2F 02 FB | 	rdlong	local05, local01
2c3a8     18 2F 02 F1 | 	add	local05, local06
2c3ac     13 2F 62 FC | 	wrlong	local05, local01
2c3b0     34 2A 06 F1 | 	add	local03, #52
2c3b4     FF 29 06 F5 | 	and	local02, #511
2c3b8     14 2B 02 F1 | 	add	local03, local02
2c3bc     04 26 06 F1 | 	add	local01, #4
2c3c0     13 2B 62 FC | 	wrlong	local03, local01
2c3c4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2c3c4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2c3c4                 | ' 
2c3c4                 | ' 	return FR_OK;
2c3c4     00 FA 05 F6 | 	mov	result1, #0
2c3c8                 | LR__4416
2c3c8     A7 F0 03 F6 | 	mov	ptra, fp
2c3cc     B2 00 A0 FD | 	call	#popregs_
2c3d0                 | _fatfs_cc_dir_sdi_ret
2c3d0     2D 00 64 FD | 	ret
2c3d4                 | 
2c3d4                 | _fatfs_cc_dir_next
2c3d4     05 4A 05 F6 | 	mov	COUNT_, #5
2c3d8     A8 00 A0 FD | 	call	#pushregs_
2c3dc     09 27 02 F6 | 	mov	local01, arg01
2c3e0     0A 29 02 F6 | 	mov	local02, arg02
2c3e4     13 2B 02 FB | 	rdlong	local03, local01
2c3e8     10 26 06 F1 | 	add	local01, #16
2c3ec     13 2D 02 FB | 	rdlong	local04, local01
2c3f0     10 26 86 F1 | 	sub	local01, #16
2c3f4     20 2C 06 F1 | 	add	local04, #32
2c3f8     00 10 00 FF 
2c3fc     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2c400     18 26 06 31 |  if_ae	add	local01, #24
2c404     13 01 68 3C |  if_ae	wrlong	#0, local01
2c408     18 26 86 31 |  if_ae	sub	local01, #24
2c40c     18 26 06 F1 | 	add	local01, #24
2c410     13 15 0A FB | 	rdlong	arg02, local01 wz
2c414     18 26 86 F1 | 	sub	local01, #24
2c418     04 FA 05 A6 |  if_e	mov	result1, #4
2c41c     64 01 90 AD |  if_e	jmp	#LR__4425
2c420     FF 2D CE F7 | 	test	local04, #511 wz
2c424     3C 01 90 5D |  if_ne	jmp	#LR__4424
2c428     18 26 06 F1 | 	add	local01, #24
2c42c     13 15 02 FB | 	rdlong	arg02, local01
2c430     01 14 06 F1 | 	add	arg02, #1
2c434     13 15 62 FC | 	wrlong	arg02, local01
2c438     04 26 86 F1 | 	sub	local01, #4
2c43c     13 15 0A FB | 	rdlong	arg02, local01 wz
2c440     14 26 86 F1 | 	sub	local01, #20
2c444     2C 00 90 5D |  if_ne	jmp	#LR__4420
2c448     16 15 02 F6 | 	mov	arg02, local04
2c44c     05 14 46 F0 | 	shr	arg02, #5
2c450     08 2A 06 F1 | 	add	local03, #8
2c454     15 29 E2 FA | 	rdword	local02, local03
2c458     08 2A 86 F1 | 	sub	local03, #8
2c45c     14 15 12 F2 | 	cmp	arg02, local02 wc
2c460     18 26 06 31 |  if_ae	add	local01, #24
2c464     13 01 68 3C |  if_ae	wrlong	#0, local01
2c468                 | ' 				dp->sect = 0; return FR_NO_FILE;
2c468     04 FA 05 36 |  if_ae	mov	result1, #4
2c46c     14 01 90 3D |  if_ae	jmp	#LR__4425
2c470     F0 00 90 FD | 	jmp	#LR__4423
2c474                 | LR__4420
2c474     16 13 02 F6 | 	mov	arg01, local04
2c478     09 12 46 F0 | 	shr	arg01, #9
2c47c     0A 2A 06 F1 | 	add	local03, #10
2c480     15 15 E2 FA | 	rdword	arg02, local03
2c484     0A 2A 86 F1 | 	sub	local03, #10
2c488     01 14 86 F1 | 	sub	arg02, #1
2c48c     0A 13 CA F7 | 	test	arg01, arg02 wz
2c490     D0 00 90 5D |  if_ne	jmp	#LR__4422
2c494     13 13 02 F6 | 	mov	arg01, local01
2c498     14 26 06 F1 | 	add	local01, #20
2c49c     13 15 02 FB | 	rdlong	arg02, local01
2c4a0     14 26 86 F1 | 	sub	local01, #20
2c4a4     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2c4a8     FD 2E 02 F6 | 	mov	local05, result1
2c4ac     02 2E 16 F2 | 	cmp	local05, #2 wc
2c4b0     02 FA 05 C6 |  if_b	mov	result1, #2
2c4b4     CC 00 90 CD |  if_b	jmp	#LR__4425
2c4b8     FF FF 7F FF 
2c4bc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2c4c0     01 FA 05 A6 |  if_e	mov	result1, #1
2c4c4     BC 00 90 AD |  if_e	jmp	#LR__4425
2c4c8     18 2A 06 F1 | 	add	local03, #24
2c4cc     15 15 02 FB | 	rdlong	arg02, local03
2c4d0     18 2A 86 F1 | 	sub	local03, #24
2c4d4     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2c4d8     68 00 90 CD |  if_b	jmp	#LR__4421
2c4dc     00 28 0E F2 | 	cmp	local02, #0 wz
2c4e0     18 26 06 A1 |  if_e	add	local01, #24
2c4e4     13 01 68 AC |  if_e	wrlong	#0, local01
2c4e8                 | ' 						dp->sect = 0; return FR_NO_FILE;
2c4e8     04 FA 05 A6 |  if_e	mov	result1, #4
2c4ec     94 00 90 AD |  if_e	jmp	#LR__4425
2c4f0     13 13 02 F6 | 	mov	arg01, local01
2c4f4     14 26 06 F1 | 	add	local01, #20
2c4f8     13 15 02 FB | 	rdlong	arg02, local01
2c4fc     14 26 86 F1 | 	sub	local01, #20
2c500     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2c504     FD 2E 0A F6 | 	mov	local05, result1 wz
2c508     07 FA 05 A6 |  if_e	mov	result1, #7
2c50c     74 00 90 AD |  if_e	jmp	#LR__4425
2c510     01 2E 0E F2 | 	cmp	local05, #1 wz
2c514     02 FA 05 A6 |  if_e	mov	result1, #2
2c518     68 00 90 AD |  if_e	jmp	#LR__4425
2c51c     FF FF 7F FF 
2c520     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2c524     01 FA 05 A6 |  if_e	mov	result1, #1
2c528     58 00 90 AD |  if_e	jmp	#LR__4425
2c52c     17 15 02 F6 | 	mov	arg02, local05
2c530     15 13 02 F6 | 	mov	arg01, local03
2c534     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2c538     00 FA 0D F2 | 	cmp	result1, #0 wz
2c53c     01 FA 05 56 |  if_ne	mov	result1, #1
2c540     40 00 90 5D |  if_ne	jmp	#LR__4425
2c544                 | LR__4421
2c544     14 26 06 F1 | 	add	local01, #20
2c548     13 2F 62 FC | 	wrlong	local05, local01
2c54c     15 13 02 F6 | 	mov	arg01, local03
2c550     17 15 02 F6 | 	mov	arg02, local05
2c554     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2c558     04 26 06 F1 | 	add	local01, #4
2c55c     13 FB 61 FC | 	wrlong	result1, local01
2c560     18 26 86 F1 | 	sub	local01, #24
2c564                 | LR__4422
2c564                 | LR__4423
2c564                 | LR__4424
2c564     10 26 06 F1 | 	add	local01, #16
2c568     13 2D 62 FC | 	wrlong	local04, local01
2c56c     34 2A 06 F1 | 	add	local03, #52
2c570     FF 2D 06 F5 | 	and	local04, #511
2c574     16 2B 02 F1 | 	add	local03, local04
2c578     0C 26 06 F1 | 	add	local01, #12
2c57c     13 2B 62 FC | 	wrlong	local03, local01
2c580                 | ' #line 1771 "ff.c"
2c580                 | ' 				}
2c580                 | ' 				dp->clust = clst;
2c580                 | ' 				dp->sect = clst2sect(fs, clst);
2c580                 | ' 			}
2c580                 | ' 		}
2c580                 | ' 	}
2c580                 | ' 	dp->dptr = ofs;
2c580                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2c580                 | ' 
2c580                 | ' 	return FR_OK;
2c580     00 FA 05 F6 | 	mov	result1, #0
2c584                 | LR__4425
2c584     A7 F0 03 F6 | 	mov	ptra, fp
2c588     B2 00 A0 FD | 	call	#popregs_
2c58c                 | _fatfs_cc_dir_next_ret
2c58c     2D 00 64 FD | 	ret
2c590                 | 
2c590                 | _fatfs_cc_dir_alloc
2c590     08 4A 05 F6 | 	mov	COUNT_, #8
2c594     A8 00 A0 FD | 	call	#pushregs_
2c598     09 27 02 F6 | 	mov	local01, arg01
2c59c     0A 29 02 F6 | 	mov	local02, arg02
2c5a0     13 2B 02 FB | 	rdlong	local03, local01
2c5a4     13 13 02 F6 | 	mov	arg01, local01
2c5a8     00 14 06 F6 | 	mov	arg02, #0
2c5ac     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2c5b0     FD 2C 0A F6 | 	mov	local04, result1 wz
2c5b4     70 00 90 5D |  if_ne	jmp	#LR__4434
2c5b8     00 2E 06 F6 | 	mov	local05, #0
2c5bc                 | ' 		n = 0;
2c5bc                 | ' 		do {
2c5bc                 | LR__4430
2c5bc     18 26 06 F1 | 	add	local01, #24
2c5c0     13 15 02 FB | 	rdlong	arg02, local01
2c5c4     18 26 86 F1 | 	sub	local01, #24
2c5c8     15 13 02 F6 | 	mov	arg01, local03
2c5cc     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2c5d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2c5d4     50 00 90 5D |  if_ne	jmp	#LR__4433
2c5d8     1C 26 06 F1 | 	add	local01, #28
2c5dc     13 31 02 FB | 	rdlong	local06, local01
2c5e0     1C 26 86 F1 | 	sub	local01, #28
2c5e4     18 31 C2 FA | 	rdbyte	local06, local06
2c5e8     E5 30 0E F2 | 	cmp	local06, #229 wz
2c5ec     1C 26 06 51 |  if_ne	add	local01, #28
2c5f0     13 33 02 5B |  if_ne	rdlong	local07, local01
2c5f4     1C 26 86 51 |  if_ne	sub	local01, #28
2c5f8     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2c5fc     10 00 90 5D |  if_ne	jmp	#LR__4431
2c600     01 2E 06 F1 | 	add	local05, #1
2c604     14 2F 0A F2 | 	cmp	local05, local02 wz
2c608     1C 00 90 AD |  if_e	jmp	#LR__4433
2c60c     04 00 90 FD | 	jmp	#LR__4432
2c610                 | LR__4431
2c610     00 2E 06 F6 | 	mov	local05, #0
2c614                 | LR__4432
2c614     13 13 02 F6 | 	mov	arg01, local01
2c618     01 14 06 F6 | 	mov	arg02, #1
2c61c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2c620     FD 2C 0A F6 | 	mov	local04, result1 wz
2c624     94 FF 9F AD |  if_e	jmp	#LR__4430
2c628                 | LR__4433
2c628                 | LR__4434
2c628     04 2C 0E F2 | 	cmp	local04, #4 wz
2c62c     07 2C 06 A6 |  if_e	mov	local04, #7
2c630                 | ' 	return res;
2c630     16 FB 01 F6 | 	mov	result1, local04
2c634     A7 F0 03 F6 | 	mov	ptra, fp
2c638     B2 00 A0 FD | 	call	#popregs_
2c63c                 | _fatfs_cc_dir_alloc_ret
2c63c     2D 00 64 FD | 	ret
2c640                 | 
2c640                 | _fatfs_cc_ld_clust
2c640     09 01 02 F6 | 	mov	_var01, arg01
2c644     0A 13 02 F6 | 	mov	arg01, arg02
2c648     1A 12 06 F1 | 	add	arg01, #26
2c64c                 | ' {
2c64c                 | ' 
2c64c                 | ' 	return *((WORD*)ptr);
2c64c     09 FB E1 FA | 	rdword	result1, arg01
2c650     FD 12 32 F9 | 	getword	arg01, result1, #0
2c654     00 01 C2 FA | 	rdbyte	_var01, _var01
2c658     03 00 0E F2 | 	cmp	_var01, #3 wz
2c65c     14 14 06 A1 |  if_e	add	arg02, #20
2c660                 | ' {
2c660                 | ' 
2c660                 | ' 	return *((WORD*)ptr);
2c660     0A FB E1 AA |  if_e	rdword	result1, arg02
2c664     10 FA 65 A0 |  if_e	shl	result1, #16
2c668     FD 12 42 A5 |  if_e	or	arg01, result1
2c66c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2c66c                 | ' 	}
2c66c                 | ' 
2c66c                 | ' 	return cl;
2c66c     09 FB 01 F6 | 	mov	result1, arg01
2c670                 | _fatfs_cc_ld_clust_ret
2c670     2D 00 64 FD | 	ret
2c674                 | 
2c674                 | _fatfs_cc_st_clust
2c674     09 01 02 F6 | 	mov	_var01, arg01
2c678     0A 13 02 F6 | 	mov	arg01, arg02
2c67c     1A 12 06 F1 | 	add	arg01, #26
2c680     09 17 52 FC | 	wrword	arg03, arg01
2c684     00 01 C2 FA | 	rdbyte	_var01, _var01
2c688     03 00 0E F2 | 	cmp	_var01, #3 wz
2c68c     14 14 06 A1 |  if_e	add	arg02, #20
2c690     10 16 46 A0 |  if_e	shr	arg03, #16
2c694     0A 17 52 AC |  if_e	wrword	arg03, arg02
2c698                 | _fatfs_cc_st_clust_ret
2c698     2D 00 64 FD | 	ret
2c69c                 | 
2c69c                 | _fatfs_cc_cmp_lfn
2c69c     07 4A 05 F6 | 	mov	COUNT_, #7
2c6a0     A8 00 A0 FD | 	call	#pushregs_
2c6a4     09 27 02 F6 | 	mov	local01, arg01
2c6a8     0A 13 02 F6 | 	mov	arg01, arg02
2c6ac     1A 12 06 F1 | 	add	arg01, #26
2c6b0                 | ' {
2c6b0                 | ' 
2c6b0                 | ' 	return *((WORD*)ptr);
2c6b0     09 FB E9 FA | 	rdword	result1, arg01 wz
2c6b4     00 FA 05 56 |  if_ne	mov	result1, #0
2c6b8     E0 00 90 5D |  if_ne	jmp	#LR__4446
2c6bc     0A 29 C2 FA | 	rdbyte	local02, arg02
2c6c0     3F 28 06 F5 | 	and	local02, #63
2c6c4     01 28 86 F1 | 	sub	local02, #1
2c6c8     0D 28 06 FD | 	qmul	local02, #13
2c6cc                 | ' 
2c6cc                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2c6cc                 | ' 
2c6cc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2c6cc     01 2A 06 F6 | 	mov	local03, #1
2c6d0     00 2C 06 F6 | 	mov	local04, #0
2c6d4     18 2E 62 FD | 	getqx	local05
2c6d8                 | LR__4440
2c6d8     0D 2C 16 F2 | 	cmp	local04, #13 wc
2c6dc     9C 00 90 3D |  if_ae	jmp	#LR__4445
2c6e0     0A 13 02 F6 | 	mov	arg01, arg02
2c6e4     16 29 02 F6 | 	mov	local02, local04
2c6e8     01 00 00 FF 
2c6ec     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2c6f0     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2c6f4     14 29 C2 FA | 	rdbyte	local02, local02
2c6f8     01 28 06 FA | 	mul	local02, #1
2c6fc     14 13 02 F1 | 	add	arg01, local02
2c700     01 00 00 FF 
2c704     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2c708                 | ' {
2c708                 | ' 
2c708                 | ' 	return *((WORD*)ptr);
2c708     09 FB E1 FA | 	rdword	result1, arg01
2c70c     FD 30 02 F6 | 	mov	local06, result1
2c710     15 29 02 F6 | 	mov	local02, local03
2c714     0F 28 4E F7 | 	zerox	local02, #15 wz
2c718     44 00 90 AD |  if_e	jmp	#LR__4443
2c71c     00 2F 16 F2 | 	cmp	local05, #256 wc
2c720     2C 00 90 3D |  if_ae	jmp	#LR__4441
2c724     18 13 32 F9 | 	getword	arg01, local06, #0
2c728     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2c72c     FD 28 02 F6 | 	mov	local02, result1
2c730     17 2B 02 F6 | 	mov	local03, local05
2c734     01 2A 66 F0 | 	shl	local03, #1
2c738     13 2B 02 F1 | 	add	local03, local01
2c73c     15 13 E2 FA | 	rdword	arg01, local03
2c740     01 2E 06 F1 | 	add	local05, #1
2c744     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2c748     FD 28 0A F2 | 	cmp	local02, result1 wz
2c74c     08 00 90 AD |  if_e	jmp	#LR__4442
2c750                 | LR__4441
2c750                 | ' 				return 0;
2c750     00 FA 05 F6 | 	mov	result1, #0
2c754     44 00 90 FD | 	jmp	#LR__4446
2c758                 | LR__4442
2c758     18 2B 02 F6 | 	mov	local03, local06
2c75c     14 00 90 FD | 	jmp	#LR__4444
2c760                 | LR__4443
2c760     18 31 32 F9 | 	getword	local06, local06, #0
2c764     7F 00 00 FF 
2c768     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2c76c     00 FA 05 56 |  if_ne	mov	result1, #0
2c770     28 00 90 5D |  if_ne	jmp	#LR__4446
2c774                 | LR__4444
2c774     01 2C 06 F1 | 	add	local04, #1
2c778     5C FF 9F FD | 	jmp	#LR__4440
2c77c                 | LR__4445
2c77c     0A 29 C2 FA | 	rdbyte	local02, arg02
2c780     40 28 CE F7 | 	test	local02, #64 wz
2c784     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2c788     01 2E 66 50 |  if_ne	shl	local05, #1
2c78c     13 2F 02 51 |  if_ne	add	local05, local01
2c790     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2c794     00 FA 05 56 |  if_ne	mov	result1, #0
2c798                 | ' 
2c798                 | ' 	return 1;
2c798     01 FA 05 A6 |  if_e	mov	result1, #1
2c79c                 | LR__4446
2c79c     A7 F0 03 F6 | 	mov	ptra, fp
2c7a0     B2 00 A0 FD | 	call	#popregs_
2c7a4                 | _fatfs_cc_cmp_lfn_ret
2c7a4     2D 00 64 FD | 	ret
2c7a8                 | 
2c7a8                 | _fatfs_cc_pick_lfn
2c7a8     09 01 02 F6 | 	mov	_var01, arg01
2c7ac     0A 13 02 F6 | 	mov	arg01, arg02
2c7b0     1A 12 06 F1 | 	add	arg01, #26
2c7b4                 | ' {
2c7b4                 | ' 
2c7b4                 | ' 	return *((WORD*)ptr);
2c7b4     09 FB E9 FA | 	rdword	result1, arg01 wz
2c7b8     00 FA 05 56 |  if_ne	mov	result1, #0
2c7bc     D4 00 90 5D |  if_ne	jmp	#LR__4455
2c7c0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2c7c4     40 02 26 F5 | 	andn	_var02, #64
2c7c8     01 02 86 F1 | 	sub	_var02, #1
2c7cc     0D 02 06 FD | 	qmul	_var02, #13
2c7d0                 | ' 
2c7d0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2c7d0                 | ' 
2c7d0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2c7d0     01 04 06 F6 | 	mov	_var03, #1
2c7d4     00 06 06 F6 | 	mov	_var04, #0
2c7d8     18 08 62 FD | 	getqx	_var05
2c7dc                 | LR__4450
2c7dc     0D 06 16 F2 | 	cmp	_var04, #13 wc
2c7e0     80 00 90 3D |  if_ae	jmp	#LR__4453
2c7e4     0A 13 02 F6 | 	mov	arg01, arg02
2c7e8     03 03 02 F6 | 	mov	_var02, _var04
2c7ec     01 00 00 FF 
2c7f0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2c7f4     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2c7f8     01 03 C2 FA | 	rdbyte	_var02, _var02
2c7fc     01 02 06 FA | 	mul	_var02, #1
2c800     01 13 02 F1 | 	add	arg01, _var02
2c804     01 00 00 FF 
2c808     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2c80c                 | ' {
2c80c                 | ' 
2c80c                 | ' 	return *((WORD*)ptr);
2c80c     09 FB E1 FA | 	rdword	result1, arg01
2c810     FD 0A 02 F6 | 	mov	_var06, result1
2c814     02 03 02 F6 | 	mov	_var02, _var03
2c818     0F 02 4E F7 | 	zerox	_var02, #15 wz
2c81c     28 00 90 AD |  if_e	jmp	#LR__4451
2c820     00 09 16 F2 | 	cmp	_var05, #256 wc
2c824     00 FA 05 36 |  if_ae	mov	result1, #0
2c828     68 00 90 3D |  if_ae	jmp	#LR__4455
2c82c     04 03 02 F6 | 	mov	_var02, _var05
2c830     01 02 66 F0 | 	shl	_var02, #1
2c834     00 03 02 F1 | 	add	_var02, _var01
2c838     05 05 02 F6 | 	mov	_var03, _var06
2c83c     01 05 52 FC | 	wrword	_var03, _var02
2c840     01 08 06 F1 | 	add	_var05, #1
2c844     14 00 90 FD | 	jmp	#LR__4452
2c848                 | LR__4451
2c848     05 0B 32 F9 | 	getword	_var06, _var06, #0
2c84c     7F 00 00 FF 
2c850     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2c854     00 FA 05 56 |  if_ne	mov	result1, #0
2c858     38 00 90 5D |  if_ne	jmp	#LR__4455
2c85c                 | LR__4452
2c85c     01 06 06 F1 | 	add	_var04, #1
2c860     78 FF 9F FD | 	jmp	#LR__4450
2c864                 | LR__4453
2c864     0A 03 C2 FA | 	rdbyte	_var02, arg02
2c868     40 02 CE F7 | 	test	_var02, #64 wz
2c86c     02 0D 02 56 |  if_ne	mov	_var07, _var03
2c870     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2c874     18 00 90 AD |  if_e	jmp	#LR__4454
2c878     00 09 16 F2 | 	cmp	_var05, #256 wc
2c87c     00 FA 05 36 |  if_ae	mov	result1, #0
2c880     10 00 90 3D |  if_ae	jmp	#LR__4455
2c884     01 08 66 F0 | 	shl	_var05, #1
2c888     00 09 02 F1 | 	add	_var05, _var01
2c88c     04 01 58 FC | 	wrword	#0, _var05
2c890                 | LR__4454
2c890                 | ' 		lfnbuf[i] = 0;
2c890                 | ' 	}
2c890                 | ' 
2c890                 | ' 	return 1;
2c890     01 FA 05 F6 | 	mov	result1, #1
2c894                 | LR__4455
2c894                 | _fatfs_cc_pick_lfn_ret
2c894     2D 00 64 FD | 	ret
2c898                 | 
2c898                 | _fatfs_cc_put_lfn
2c898     0D 14 06 F1 | 	add	arg02, #13
2c89c     0A 19 42 FC | 	wrbyte	arg04, arg02
2c8a0     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2c8a4     01 18 86 F1 | 	sub	arg04, #1
2c8a8     0D 18 06 FD | 	qmul	arg04, #13
2c8ac     09 01 02 F6 | 	mov	_var01, arg01
2c8b0     02 14 86 F1 | 	sub	arg02, #2
2c8b4     0A 1F 48 FC | 	wrbyte	#15, arg02
2c8b8     01 14 06 F1 | 	add	arg02, #1
2c8bc     0A 01 48 FC | 	wrbyte	#0, arg02
2c8c0     0C 14 86 F1 | 	sub	arg02, #12
2c8c4     0A 13 02 F6 | 	mov	arg01, arg02
2c8c8     1A 12 06 F1 | 	add	arg01, #26
2c8cc     09 01 58 FC | 	wrword	#0, arg01
2c8d0     00 02 06 F6 | 	mov	_var02, #0
2c8d4     00 04 06 F6 | 	mov	_var03, #0
2c8d8                 | ' 	BYTE* dir,
2c8d8                 | ' 	BYTE ord,
2c8d8                 | ' 	BYTE sum
2c8d8                 | ' )
2c8d8                 | ' {
2c8d8                 | ' 	UINT i, s;
2c8d8                 | ' 	WCHAR wc;
2c8d8                 | ' 
2c8d8                 | ' 
2c8d8                 | ' 	dir[ 13 ] = sum;
2c8d8                 | ' 	dir[ 11 ] =  0x0F ;
2c8d8                 | ' 	dir[ 12 ] = 0;
2c8d8                 | ' 	st_word(dir +  26 , 0);
2c8d8                 | ' 
2c8d8                 | ' 	i = (ord - 1) * 13;
2c8d8                 | ' 	s = wc = 0;
2c8d8                 | ' 	do {
2c8d8     01 00 00 FF 
2c8dc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2c8e0     18 06 62 FD | 	getqx	_var04
2c8e4     97 2A 48 FB | 	callpa	#(@LR__4461-@LR__4460)>>2,fcache_load_ptr_
2c8e8                 | LR__4460
2c8e8     01 19 32 F9 | 	getword	arg04, _var02, #0
2c8ec     7F 00 00 FF 
2c8f0     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2c8f4     03 13 02 56 |  if_ne	mov	arg01, _var04
2c8f8     01 06 06 51 |  if_ne	add	_var04, #1
2c8fc     01 12 66 50 |  if_ne	shl	arg01, #1
2c900     00 13 02 51 |  if_ne	add	arg01, _var01
2c904     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2c908     0A 13 02 F6 | 	mov	arg01, arg02
2c90c     02 19 02 F6 | 	mov	arg04, _var03
2c910     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2c914     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c918     01 18 06 FA | 	mul	arg04, #1
2c91c     0C 13 02 F1 | 	add	arg01, arg04
2c920     09 03 52 FC | 	wrword	_var02, arg01
2c924     01 19 02 F6 | 	mov	arg04, _var02
2c928     0F 18 4E F7 | 	zerox	arg04, #15 wz
2c92c     0F 02 CE A9 |  if_e	bmask	_var02, #15
2c930     01 04 06 F1 | 	add	_var03, #1
2c934     0D 04 16 F2 | 	cmp	_var03, #13 wc
2c938     AC FF 9F CD |  if_b	jmp	#LR__4460
2c93c                 | LR__4461
2c93c     01 00 00 FF 
2c940     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2c944     01 03 32 F9 | 	getword	_var02, _var02, #0
2c948     7F 00 00 FF 
2c94c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2c950     01 06 66 50 |  if_ne	shl	_var04, #1
2c954     00 07 02 51 |  if_ne	add	_var04, _var01
2c958     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2c95c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2c960     40 16 46 A5 |  if_e	or	arg03, #64
2c964     0A 17 42 FC | 	wrbyte	arg03, arg02
2c968                 | _fatfs_cc_put_lfn_ret
2c968     2D 00 64 FD | 	ret
2c96c                 | 
2c96c                 | _fatfs_cc_gen_numname
2c96c     08 4A 05 F6 | 	mov	COUNT_, #8
2c970     A8 00 A0 FD | 	call	#pushregs_
2c974     2C F0 07 F1 | 	add	ptra, #44
2c978     09 27 02 F6 | 	mov	local01, arg01
2c97c     0A 29 02 F6 | 	mov	local02, arg02
2c980     0B 2B 02 F6 | 	mov	local03, arg03
2c984     0C 2D 02 F6 | 	mov	local04, arg04
2c988     13 13 02 F6 | 	mov	arg01, local01
2c98c     14 15 02 F6 | 	mov	arg02, local02
2c990     0B 16 06 F6 | 	mov	arg03, #11
2c994     9C 72 BF FD | 	call	#__system____builtin_memmove
2c998     06 2C 16 F2 | 	cmp	local04, #6 wc
2c99c     48 00 90 CD |  if_b	jmp	#LR__4475
2c9a0     16 2F 02 F6 | 	mov	local05, local04
2c9a4     97 1E 48 FB | 	callpa	#(@LR__4473-@LR__4470)>>2,fcache_load_ptr_
2c9a8                 | ' 		sreg = seq;
2c9a8                 | ' 		while (*lfn) {
2c9a8                 | LR__4470
2c9a8     15 31 EA FA | 	rdword	local06, local03 wz
2c9ac     34 00 90 AD |  if_e	jmp	#LR__4474
2c9b0     15 33 E2 FA | 	rdword	local07, local03
2c9b4                 | ' 			wc = *lfn++;
2c9b4                 | ' 			for (i = 0; i < 16; i++) {
2c9b4     02 2A 06 F1 | 	add	local03, #2
2c9b8     10 12 DC FC | 	rep	@LR__4472, #16
2c9bc                 | LR__4471
2c9bc     01 2E 66 F0 | 	shl	local05, #1
2c9c0     19 31 32 F9 | 	getword	local06, local07, #0
2c9c4     01 30 06 F5 | 	and	local06, #1
2c9c8     18 2F 02 F1 | 	add	local05, local06
2c9cc     19 33 32 F9 | 	getword	local07, local07, #0
2c9d0     01 32 46 F0 | 	shr	local07, #1
2c9d4     10 2E 2E F4 | 	testbn	local05, #16 wz
2c9d8     88 00 00 5F 
2c9dc     21 2E 66 55 |  if_ne	xor	local05, ##69665
2c9e0                 | LR__4472
2c9e0     C4 FF 9F FD | 	jmp	#LR__4470
2c9e4                 | LR__4473
2c9e4                 | LR__4474
2c9e4     17 2D 02 F6 | 	mov	local04, local05
2c9e8                 | LR__4475
2c9e8     07 32 06 F6 | 	mov	local07, #7
2c9ec                 | ' 			}
2c9ec                 | ' 		}
2c9ec                 | ' 		seq = (UINT)sreg;
2c9ec                 | ' 	}
2c9ec                 | ' 
2c9ec                 | ' 
2c9ec                 | ' 	i = 7;
2c9ec                 | ' 	do {
2c9ec     10 4E 05 F1 | 	add	fp, #16
2c9f0     97 1A 48 FB | 	callpa	#(@LR__4477-@LR__4476)>>2,fcache_load_ptr_
2c9f4                 | LR__4476
2c9f4     16 2F 42 F8 | 	getnib	local05, local04, #0
2c9f8     30 2E 06 F1 | 	add	local05, #48
2c9fc     04 2C 46 F0 | 	shr	local04, #4
2ca00     17 31 E2 F8 | 	getbyte	local06, local05, #0
2ca04     3A 30 16 F2 | 	cmp	local06, #58 wc
2ca08     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2ca0c     07 2E 06 31 |  if_ae	add	local05, #7
2ca10     19 31 02 F6 | 	mov	local06, local07
2ca14     01 32 8E F1 | 	sub	local07, #1 wz
2ca18     A7 30 02 F1 | 	add	local06, fp
2ca1c     18 2F 42 FC | 	wrbyte	local05, local06
2ca20     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2ca24     CC FF 9F 5D |  if_ne	jmp	#LR__4476
2ca28                 | LR__4477
2ca28     19 31 02 F6 | 	mov	local06, local07
2ca2c     A7 30 02 F1 | 	add	local06, fp
2ca30     18 FD 48 FC | 	wrbyte	#126, local06
2ca34                 | ' 	ns[i] = '~';
2ca34                 | ' 
2ca34                 | ' 
2ca34                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2ca34     00 2E 06 F6 | 	mov	local05, #0
2ca38     10 4E 85 F1 | 	sub	fp, #16
2ca3c     97 2A 48 FB | 	callpa	#(@LR__4480-@LR__4478)>>2,fcache_load_ptr_
2ca40                 | LR__4478
2ca40     19 2F 12 F2 | 	cmp	local05, local07 wc
2ca44     4C 00 90 3D |  if_ae	jmp	#LR__4481
2ca48     17 31 02 F6 | 	mov	local06, local05
2ca4c     13 31 02 F1 | 	add	local06, local01
2ca50     18 31 C2 FA | 	rdbyte	local06, local06
2ca54     20 30 0E F2 | 	cmp	local06, #32 wz
2ca58     38 00 90 AD |  if_e	jmp	#LR__4481
2ca5c     17 13 02 F6 | 	mov	arg01, local05
2ca60     13 13 02 F1 | 	add	arg01, local01
2ca64     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2ca68     00 FA 05 56 |  if_ne	mov	result1, #0
2ca6c                 | ' 
2ca6c                 | ' 	return 0;
2ca6c     00 FA 05 A6 |  if_e	mov	result1, #0
2ca70     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca74     14 00 90 AD |  if_e	jmp	#LR__4479
2ca78     19 31 02 F6 | 	mov	local06, local07
2ca7c     01 30 86 F1 | 	sub	local06, #1
2ca80     18 2F 0A F2 | 	cmp	local05, local06 wz
2ca84     0C 00 90 AD |  if_e	jmp	#LR__4481
2ca88     01 2E 06 F1 | 	add	local05, #1
2ca8c                 | LR__4479
2ca8c     01 2E 06 F1 | 	add	local05, #1
2ca90     AC FF 9F FD | 	jmp	#LR__4478
2ca94                 | LR__4480
2ca94                 | LR__4481
2ca94     97 20 48 FB | 	callpa	#(@LR__4485-@LR__4482)>>2,fcache_load_ptr_
2ca98                 | ' 			j++;
2ca98                 | ' 		}
2ca98                 | ' 	}
2ca98                 | ' 	do {
2ca98                 | LR__4482
2ca98     17 31 02 F6 | 	mov	local06, local05
2ca9c     13 31 02 F1 | 	add	local06, local01
2caa0     08 32 16 F2 | 	cmp	local07, #8 wc
2caa4     01 2E 06 F1 | 	add	local05, #1
2caa8     1C 00 90 3D |  if_ae	jmp	#LR__4483
2caac     19 2D 02 F6 | 	mov	local04, local07
2cab0     10 4E 05 F1 | 	add	fp, #16
2cab4     A7 2C 02 F1 | 	add	local04, fp
2cab8     16 35 C2 FA | 	rdbyte	local08, local04
2cabc     01 32 06 F1 | 	add	local07, #1
2cac0     10 4E 85 F1 | 	sub	fp, #16
2cac4     04 00 90 FD | 	jmp	#LR__4484
2cac8                 | LR__4483
2cac8     20 34 06 F6 | 	mov	local08, #32
2cacc                 | LR__4484
2cacc     18 35 42 FC | 	wrbyte	local08, local06
2cad0     08 2E 16 F2 | 	cmp	local05, #8 wc
2cad4     C0 FF 9F CD |  if_b	jmp	#LR__4482
2cad8                 | LR__4485
2cad8     A7 F0 03 F6 | 	mov	ptra, fp
2cadc     B2 00 A0 FD | 	call	#popregs_
2cae0                 | _fatfs_cc_gen_numname_ret
2cae0     2D 00 64 FD | 	ret
2cae4                 | 
2cae4                 | _fatfs_cc_sum_sfn
2cae4     00 00 06 F6 | 	mov	_var01, #0
2cae8                 | ' )
2cae8                 | ' {
2cae8                 | ' 	BYTE sum = 0;
2cae8                 | ' 	UINT n = 11;
2cae8                 | ' 
2cae8                 | ' 	do {
2cae8     97 12 48 FB | 	callpa	#(@LR__4492-@LR__4490)>>2,fcache_load_ptr_
2caec                 | LR__4490
2caec     0B 10 DC FC | 	rep	@LR__4493, #11
2caf0                 | LR__4491
2caf0     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2caf4     01 FA 45 F0 | 	shr	result1, #1
2caf8     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2cafc     07 00 66 F0 | 	shl	_var01, #7
2cb00     00 FB 01 F1 | 	add	result1, _var01
2cb04     09 01 C2 FA | 	rdbyte	_var01, arg01
2cb08     FD 00 02 F1 | 	add	_var01, result1
2cb0c     01 12 06 F1 | 	add	arg01, #1
2cb10                 | LR__4492
2cb10                 | LR__4493
2cb10                 | ' 	return sum;
2cb10     00 FB 01 F6 | 	mov	result1, _var01
2cb14                 | _fatfs_cc_sum_sfn_ret
2cb14     2D 00 64 FD | 	ret
2cb18                 | 
2cb18                 | _fatfs_cc_dir_read
2cb18     0C 4A 05 F6 | 	mov	COUNT_, #12
2cb1c     A8 00 A0 FD | 	call	#pushregs_
2cb20     09 27 02 F6 | 	mov	local01, arg01
2cb24     0A 29 02 F6 | 	mov	local02, arg02
2cb28     04 2A 06 F6 | 	mov	local03, #4
2cb2c     13 2D 02 FB | 	rdlong	local04, local01
2cb30     FF 2E 06 F6 | 	mov	local05, #255
2cb34     FF 30 06 F6 | 	mov	local06, #255
2cb38                 | ' )
2cb38                 | ' {
2cb38                 | ' 	FRESULT res = FR_NO_FILE;
2cb38                 | ' 	FATFS *fs = dp->obj.fs;
2cb38                 | ' 	BYTE attr, b;
2cb38                 | ' 
2cb38                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2cb38                 | ' 
2cb38                 | ' 
2cb38                 | ' 	while (dp->sect) {
2cb38                 | LR__4500
2cb38     18 26 06 F1 | 	add	local01, #24
2cb3c     13 FB 09 FB | 	rdlong	result1, local01 wz
2cb40     18 26 86 F1 | 	sub	local01, #24
2cb44     AC 01 90 AD |  if_e	jmp	#LR__4510
2cb48     18 26 06 F1 | 	add	local01, #24
2cb4c     13 15 02 FB | 	rdlong	arg02, local01
2cb50     18 26 86 F1 | 	sub	local01, #24
2cb54     16 13 02 F6 | 	mov	arg01, local04
2cb58     AC ED BF FD | 	call	#_fatfs_cc_move_window
2cb5c     FD 2A 0A F6 | 	mov	local03, result1 wz
2cb60     90 01 90 5D |  if_ne	jmp	#LR__4510
2cb64     1C 26 06 F1 | 	add	local01, #28
2cb68     13 FB 01 FB | 	rdlong	result1, local01
2cb6c     1C 26 86 F1 | 	sub	local01, #28
2cb70     FD 32 C2 FA | 	rdbyte	local07, result1
2cb74     19 FB 01 F6 | 	mov	result1, local07
2cb78     07 FA 4D F7 | 	zerox	result1, #7 wz
2cb7c     04 2A 06 A6 |  if_e	mov	local03, #4
2cb80                 | ' 			res = FR_NO_FILE; break;
2cb80     70 01 90 AD |  if_e	jmp	#LR__4510
2cb84     1C 26 06 F1 | 	add	local01, #28
2cb88     13 35 02 FB | 	rdlong	local08, local01
2cb8c     0B 34 06 F1 | 	add	local08, #11
2cb90     1A 37 C2 FA | 	rdbyte	local09, local08
2cb94     3F 36 06 F5 | 	and	local09, #63
2cb98     16 26 86 F1 | 	sub	local01, #22
2cb9c     13 37 42 FC | 	wrbyte	local09, local01
2cba0     06 26 86 F1 | 	sub	local01, #6
2cba4     19 FB E1 F8 | 	getbyte	result1, local07, #0
2cba8     E5 FA 0D F2 | 	cmp	result1, #229 wz
2cbac     19 35 02 56 |  if_ne	mov	local08, local07
2cbb0     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2cbb4     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2cbb8     1C 00 90 AD |  if_e	jmp	#LR__4501
2cbbc     00 38 06 F6 | 	mov	local10, #0
2cbc0     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2cbc4     20 34 26 F5 | 	andn	local08, #32
2cbc8     08 34 0E F2 | 	cmp	local08, #8 wz
2cbcc     01 38 06 A6 |  if_e	mov	local10, #1
2cbd0     14 39 0A F2 | 	cmp	local10, local02 wz
2cbd4     08 00 90 AD |  if_e	jmp	#LR__4502
2cbd8                 | LR__4501
2cbd8     FF 2E 06 F6 | 	mov	local05, #255
2cbdc     00 01 90 FD | 	jmp	#LR__4509
2cbe0                 | LR__4502
2cbe0     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2cbe4     0F 36 0E F2 | 	cmp	local09, #15 wz
2cbe8     B4 00 90 5D |  if_ne	jmp	#LR__4506
2cbec     19 3B E2 F8 | 	getbyte	local11, local07, #0
2cbf0     40 3A CE F7 | 	test	local11, #64 wz
2cbf4     30 00 90 AD |  if_e	jmp	#LR__4503
2cbf8     1C 26 06 F1 | 	add	local01, #28
2cbfc     13 3B 02 FB | 	rdlong	local11, local01
2cc00     0D 3A 06 F1 | 	add	local11, #13
2cc04     1D 31 C2 FA | 	rdbyte	local06, local11
2cc08     19 33 E2 F8 | 	getbyte	local07, local07, #0
2cc0c     BF 32 06 F5 | 	and	local07, #191
2cc10     19 2F 02 F6 | 	mov	local05, local07
2cc14     0C 26 86 F1 | 	sub	local01, #12
2cc18     13 3B 02 FB | 	rdlong	local11, local01
2cc1c     1C 26 06 F1 | 	add	local01, #28
2cc20     13 3B 62 FC | 	wrlong	local11, local01
2cc24     2C 26 86 F1 | 	sub	local01, #44
2cc28                 | LR__4503
2cc28     19 35 E2 F8 | 	getbyte	local08, local07, #0
2cc2c     17 39 E2 F8 | 	getbyte	local10, local05, #0
2cc30     1C 35 0A F2 | 	cmp	local08, local10 wz
2cc34     5C 00 90 5D |  if_ne	jmp	#LR__4504
2cc38     18 39 E2 F8 | 	getbyte	local10, local06, #0
2cc3c     1C 26 06 F1 | 	add	local01, #28
2cc40     13 37 02 FB | 	rdlong	local09, local01
2cc44     1C 26 86 F1 | 	sub	local01, #28
2cc48     0D 36 06 F1 | 	add	local09, #13
2cc4c     1B 35 C2 FA | 	rdbyte	local08, local09
2cc50     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2cc54     1B 39 0A F2 | 	cmp	local10, local09 wz
2cc58     38 00 90 5D |  if_ne	jmp	#LR__4504
2cc5c     0C 2C 06 F1 | 	add	local04, #12
2cc60     16 13 02 FB | 	rdlong	arg01, local04
2cc64     0C 2C 86 F1 | 	sub	local04, #12
2cc68     1C 26 06 F1 | 	add	local01, #28
2cc6c     13 3D 02 FB | 	rdlong	local12, local01
2cc70     1C 26 86 F1 | 	sub	local01, #28
2cc74     1E 15 02 F6 | 	mov	arg02, local12
2cc78     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2cc7c     00 FA 4D F2 | 	cmps	result1, #0 wz
2cc80     17 3D 02 56 |  if_ne	mov	local12, local05
2cc84     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2cc88     01 3C 86 51 |  if_ne	sub	local12, #1
2cc8c     1E 3B 02 56 |  if_ne	mov	local11, local12
2cc90     04 00 90 5D |  if_ne	jmp	#LR__4505
2cc94                 | LR__4504
2cc94     FF 3A 06 F6 | 	mov	local11, #255
2cc98                 | LR__4505
2cc98     1D 2F 02 F6 | 	mov	local05, local11
2cc9c     40 00 90 FD | 	jmp	#LR__4508
2cca0                 | LR__4506
2cca0     17 3B 02 F6 | 	mov	local11, local05
2cca4     07 3A 4E F7 | 	zerox	local11, #7 wz
2cca8     20 00 90 5D |  if_ne	jmp	#LR__4507
2ccac     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ccb0     1C 26 06 F1 | 	add	local01, #28
2ccb4     13 13 02 FB | 	rdlong	arg01, local01
2ccb8     1C 26 86 F1 | 	sub	local01, #28
2ccbc     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2ccc0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ccc4     FD 30 0A F2 | 	cmp	local06, result1 wz
2ccc8     28 00 90 AD |  if_e	jmp	#LR__4510
2cccc                 | LR__4507
2cccc     2C 26 06 F1 | 	add	local01, #44
2ccd0     FF FF FF FF 
2ccd4     13 FF 6B FC | 	wrlong	##-1, local01
2ccd8     2C 26 86 F1 | 	sub	local01, #44
2ccdc                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2ccdc                 | ' 					}
2ccdc                 | ' 					break;
2ccdc     14 00 90 FD | 	jmp	#LR__4510
2cce0                 | LR__4508
2cce0                 | LR__4509
2cce0     13 13 02 F6 | 	mov	arg01, local01
2cce4     00 14 06 F6 | 	mov	arg02, #0
2cce8     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2ccec     FD 2A 0A F6 | 	mov	local03, result1 wz
2ccf0     44 FE 9F AD |  if_e	jmp	#LR__4500
2ccf4                 | LR__4510
2ccf4     00 2A 0E F2 | 	cmp	local03, #0 wz
2ccf8     18 26 06 51 |  if_ne	add	local01, #24
2ccfc     13 01 68 5C |  if_ne	wrlong	#0, local01
2cd00                 | ' 	return res;
2cd00     15 FB 01 F6 | 	mov	result1, local03
2cd04     A7 F0 03 F6 | 	mov	ptra, fp
2cd08     B2 00 A0 FD | 	call	#popregs_
2cd0c                 | _fatfs_cc_dir_read_ret
2cd0c     2D 00 64 FD | 	ret
2cd10                 | 
2cd10                 | _fatfs_cc_dir_find
2cd10     0B 4A 05 F6 | 	mov	COUNT_, #11
2cd14     A8 00 A0 FD | 	call	#pushregs_
2cd18     09 27 02 F6 | 	mov	local01, arg01
2cd1c     13 29 02 FB | 	rdlong	local02, local01
2cd20     13 13 02 F6 | 	mov	arg01, local01
2cd24     00 14 06 F6 | 	mov	arg02, #0
2cd28     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2cd2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd30     18 02 90 5D |  if_ne	jmp	#LR__4532
2cd34     FF 2A 06 F6 | 	mov	local03, #255
2cd38     FF 2C 06 F6 | 	mov	local04, #255
2cd3c     2C 26 06 F1 | 	add	local01, #44
2cd40     FF FF FF FF 
2cd44     13 FF 6B FC | 	wrlong	##-1, local01
2cd48     2C 26 86 F1 | 	sub	local01, #44
2cd4c                 | ' #line 2404 "ff.c"
2cd4c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2cd4c                 | ' 
2cd4c                 | ' 	do {
2cd4c                 | LR__4520
2cd4c     18 26 06 F1 | 	add	local01, #24
2cd50     13 15 02 FB | 	rdlong	arg02, local01
2cd54     18 26 86 F1 | 	sub	local01, #24
2cd58     14 13 02 F6 | 	mov	arg01, local02
2cd5c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2cd60     FD 2E 0A F6 | 	mov	local05, result1 wz
2cd64     E0 01 90 5D |  if_ne	jmp	#LR__4531
2cd68     1C 26 06 F1 | 	add	local01, #28
2cd6c     13 17 02 FB | 	rdlong	arg03, local01
2cd70     1C 26 86 F1 | 	sub	local01, #28
2cd74     0B 31 C2 FA | 	rdbyte	local06, arg03
2cd78     18 17 02 F6 | 	mov	arg03, local06
2cd7c     07 16 4E F7 | 	zerox	arg03, #7 wz
2cd80     04 2E 06 A6 |  if_e	mov	local05, #4
2cd84     C0 01 90 AD |  if_e	jmp	#LR__4531
2cd88     1C 26 06 F1 | 	add	local01, #28
2cd8c     13 33 02 FB | 	rdlong	local07, local01
2cd90     19 17 02 F6 | 	mov	arg03, local07
2cd94     0B 16 06 F1 | 	add	arg03, #11
2cd98     0B 35 C2 FA | 	rdbyte	local08, arg03
2cd9c     3F 34 06 F5 | 	and	local08, #63
2cda0     16 26 86 F1 | 	sub	local01, #22
2cda4     13 35 42 FC | 	wrbyte	local08, local01
2cda8     06 26 86 F1 | 	sub	local01, #6
2cdac     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2cdb0     E5 16 0E F2 | 	cmp	arg03, #229 wz
2cdb4     18 00 90 AD |  if_e	jmp	#LR__4521
2cdb8     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2cdbc     08 16 CE F7 | 	test	arg03, #8 wz
2cdc0     1A 33 02 56 |  if_ne	mov	local07, local08
2cdc4     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2cdc8     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2cdcc     18 00 90 AD |  if_e	jmp	#LR__4522
2cdd0                 | LR__4521
2cdd0     FF 2C 06 F6 | 	mov	local04, #255
2cdd4     2C 26 06 F1 | 	add	local01, #44
2cdd8     FF FF FF FF 
2cddc     13 FF 6B FC | 	wrlong	##-1, local01
2cde0     2C 26 86 F1 | 	sub	local01, #44
2cde4     4C 01 90 FD | 	jmp	#LR__4530
2cde8                 | LR__4522
2cde8     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2cdec     0F 34 0E F2 | 	cmp	local08, #15 wz
2cdf0     C8 00 90 5D |  if_ne	jmp	#LR__4526
2cdf4     2B 26 06 F1 | 	add	local01, #43
2cdf8     13 35 C2 FA | 	rdbyte	local08, local01
2cdfc     2B 26 86 F1 | 	sub	local01, #43
2ce00     40 34 CE F7 | 	test	local08, #64 wz
2ce04     2C 01 90 5D |  if_ne	jmp	#LR__4529
2ce08     18 37 E2 F8 | 	getbyte	local09, local06, #0
2ce0c     40 36 CE F7 | 	test	local09, #64 wz
2ce10     30 00 90 AD |  if_e	jmp	#LR__4523
2ce14     1C 26 06 F1 | 	add	local01, #28
2ce18     13 37 02 FB | 	rdlong	local09, local01
2ce1c     0D 36 06 F1 | 	add	local09, #13
2ce20     1B 2B C2 FA | 	rdbyte	local03, local09
2ce24     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ce28     BF 30 06 F5 | 	and	local06, #191
2ce2c     18 2D 02 F6 | 	mov	local04, local06
2ce30     0C 26 86 F1 | 	sub	local01, #12
2ce34     13 37 02 FB | 	rdlong	local09, local01
2ce38     1C 26 06 F1 | 	add	local01, #28
2ce3c     13 37 62 FC | 	wrlong	local09, local01
2ce40     2C 26 86 F1 | 	sub	local01, #44
2ce44                 | LR__4523
2ce44     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ce48     16 33 E2 F8 | 	getbyte	local07, local04, #0
2ce4c     19 39 0A F2 | 	cmp	local10, local07 wz
2ce50     5C 00 90 5D |  if_ne	jmp	#LR__4524
2ce54     15 35 E2 F8 | 	getbyte	local08, local03, #0
2ce58     1C 26 06 F1 | 	add	local01, #28
2ce5c     13 33 02 FB | 	rdlong	local07, local01
2ce60     1C 26 86 F1 | 	sub	local01, #28
2ce64     0D 32 06 F1 | 	add	local07, #13
2ce68     19 31 C2 FA | 	rdbyte	local06, local07
2ce6c     18 33 E2 F8 | 	getbyte	local07, local06, #0
2ce70     19 35 0A F2 | 	cmp	local08, local07 wz
2ce74     38 00 90 5D |  if_ne	jmp	#LR__4524
2ce78     0C 28 06 F1 | 	add	local02, #12
2ce7c     14 13 02 FB | 	rdlong	arg01, local02
2ce80     0C 28 86 F1 | 	sub	local02, #12
2ce84     1C 26 06 F1 | 	add	local01, #28
2ce88     13 3B 02 FB | 	rdlong	local11, local01
2ce8c     1C 26 86 F1 | 	sub	local01, #28
2ce90     1D 15 02 F6 | 	mov	arg02, local11
2ce94     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2ce98     00 FA 4D F2 | 	cmps	result1, #0 wz
2ce9c     16 3B 02 56 |  if_ne	mov	local11, local04
2cea0     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2cea4     01 3A 86 51 |  if_ne	sub	local11, #1
2cea8     1D 37 02 56 |  if_ne	mov	local09, local11
2ceac     04 00 90 5D |  if_ne	jmp	#LR__4525
2ceb0                 | LR__4524
2ceb0     FF 36 06 F6 | 	mov	local09, #255
2ceb4                 | LR__4525
2ceb4     1B 2D 02 F6 | 	mov	local04, local09
2ceb8     78 00 90 FD | 	jmp	#LR__4529
2cebc                 | LR__4526
2cebc     16 37 02 F6 | 	mov	local09, local04
2cec0     07 36 4E F7 | 	zerox	local09, #7 wz
2cec4     20 00 90 5D |  if_ne	jmp	#LR__4527
2cec8     15 39 E2 F8 | 	getbyte	local10, local03, #0
2cecc     1C 26 06 F1 | 	add	local01, #28
2ced0     13 13 02 FB | 	rdlong	arg01, local01
2ced4     1C 26 86 F1 | 	sub	local01, #28
2ced8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2cedc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cee0     FD 38 0A F2 | 	cmp	local10, result1 wz
2cee4     60 00 90 AD |  if_e	jmp	#LR__4531
2cee8                 | LR__4527
2cee8     2B 26 06 F1 | 	add	local01, #43
2ceec     13 37 C2 FA | 	rdbyte	local09, local01
2cef0     2B 26 86 F1 | 	sub	local01, #43
2cef4     01 36 CE F7 | 	test	local09, #1 wz
2cef8     24 00 90 5D |  if_ne	jmp	#LR__4528
2cefc     1C 26 06 F1 | 	add	local01, #28
2cf00     13 13 02 FB | 	rdlong	arg01, local01
2cf04     04 26 06 F1 | 	add	local01, #4
2cf08     13 15 02 F6 | 	mov	arg02, local01
2cf0c     20 26 86 F1 | 	sub	local01, #32
2cf10     0B 16 06 F6 | 	mov	arg03, #11
2cf14     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2cf18     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf1c     28 00 90 AD |  if_e	jmp	#LR__4531
2cf20                 | LR__4528
2cf20     FF 2C 06 F6 | 	mov	local04, #255
2cf24     2C 26 06 F1 | 	add	local01, #44
2cf28     FF FF FF FF 
2cf2c     13 FF 6B FC | 	wrlong	##-1, local01
2cf30     2C 26 86 F1 | 	sub	local01, #44
2cf34                 | LR__4529
2cf34                 | LR__4530
2cf34     13 13 02 F6 | 	mov	arg01, local01
2cf38     00 14 06 F6 | 	mov	arg02, #0
2cf3c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2cf40     FD 2E 0A F6 | 	mov	local05, result1 wz
2cf44     04 FE 9F AD |  if_e	jmp	#LR__4520
2cf48                 | LR__4531
2cf48                 | ' 
2cf48                 | ' 	return res;
2cf48     17 FB 01 F6 | 	mov	result1, local05
2cf4c                 | LR__4532
2cf4c     A7 F0 03 F6 | 	mov	ptra, fp
2cf50     B2 00 A0 FD | 	call	#popregs_
2cf54                 | _fatfs_cc_dir_find_ret
2cf54     2D 00 64 FD | 	ret
2cf58                 | 
2cf58                 | _fatfs_cc_dir_register
2cf58     0A 4A 05 F6 | 	mov	COUNT_, #10
2cf5c     A8 00 A0 FD | 	call	#pushregs_
2cf60     2C F0 07 F1 | 	add	ptra, #44
2cf64     04 4E 05 F1 | 	add	fp, #4
2cf68     A7 12 62 FC | 	wrlong	arg01, fp
2cf6c     09 27 02 FB | 	rdlong	local01, arg01
2cf70     08 4E 05 F1 | 	add	fp, #8
2cf74     A7 26 62 FC | 	wrlong	local01, fp
2cf78     08 4E 85 F1 | 	sub	fp, #8
2cf7c     A7 28 02 FB | 	rdlong	local02, fp
2cf80     04 4E 85 F1 | 	sub	fp, #4
2cf84     2B 28 06 F1 | 	add	local02, #43
2cf88     14 29 C2 FA | 	rdbyte	local02, local02
2cf8c     A0 28 CE F7 | 	test	local02, #160 wz
2cf90     06 FA 05 56 |  if_ne	mov	result1, #6
2cf94     F8 03 90 5D |  if_ne	jmp	#LR__4555
2cf98                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2cf98     14 4E 05 F1 | 	add	fp, #20
2cf9c     A7 00 68 FC | 	wrlong	#0, fp
2cfa0     14 4E 85 F1 | 	sub	fp, #20
2cfa4     97 28 48 FB | 	callpa	#(@LR__4541-@LR__4540)>>2,fcache_load_ptr_
2cfa8                 | LR__4540
2cfa8     0C 4E 05 F1 | 	add	fp, #12
2cfac     A7 28 02 FB | 	rdlong	local02, fp
2cfb0     0C 28 06 F1 | 	add	local02, #12
2cfb4     14 2B 02 FB | 	rdlong	local03, local02
2cfb8     08 4E 05 F1 | 	add	fp, #8
2cfbc     A7 2C 02 FB | 	rdlong	local04, fp
2cfc0     14 4E 85 F1 | 	sub	fp, #20
2cfc4     01 2C 66 F0 | 	shl	local04, #1
2cfc8     15 2D 02 F1 | 	add	local04, local03
2cfcc     16 29 EA FA | 	rdword	local02, local04 wz
2cfd0     24 00 90 AD |  if_e	jmp	#LR__4542
2cfd4     14 4E 05 F1 | 	add	fp, #20
2cfd8     A7 2E 02 FB | 	rdlong	local05, fp
2cfdc     17 31 02 F6 | 	mov	local06, local05
2cfe0     17 33 02 F6 | 	mov	local07, local05
2cfe4     19 35 02 F6 | 	mov	local08, local07
2cfe8     01 34 06 F1 | 	add	local08, #1
2cfec     A7 34 62 FC | 	wrlong	local08, fp
2cff0     14 4E 85 F1 | 	sub	fp, #20
2cff4     B0 FF 9F FD | 	jmp	#LR__4540
2cff8                 | LR__4541
2cff8                 | LR__4542
2cff8     1C 4E 05 F1 | 	add	fp, #28
2cffc     A7 12 02 F6 | 	mov	arg01, fp
2d000     18 4E 85 F1 | 	sub	fp, #24
2d004     A7 14 02 FB | 	rdlong	arg02, fp
2d008     04 4E 85 F1 | 	sub	fp, #4
2d00c     20 14 06 F1 | 	add	arg02, #32
2d010     0C 16 06 F6 | 	mov	arg03, #12
2d014     1C 6C BF FD | 	call	#__system____builtin_memmove
2d018     27 4E 05 F1 | 	add	fp, #39
2d01c     A7 36 C2 FA | 	rdbyte	local09, fp
2d020     27 4E 85 F1 | 	sub	fp, #39
2d024     01 36 CE F7 | 	test	local09, #1 wz
2d028     F4 00 90 AD |  if_e	jmp	#LR__4545
2d02c     04 4E 05 F1 | 	add	fp, #4
2d030     A7 38 02 FB | 	rdlong	local10, fp
2d034     2B 38 06 F1 | 	add	local10, #43
2d038     1C 81 48 FC | 	wrbyte	#64, local10
2d03c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2d03c                 | ' 		for (n = 1; n < 100; n++) {
2d03c     0C 4E 05 F1 | 	add	fp, #12
2d040     A7 02 68 FC | 	wrlong	#1, fp
2d044     10 4E 85 F1 | 	sub	fp, #16
2d048                 | LR__4543
2d048     10 4E 05 F1 | 	add	fp, #16
2d04c     A7 28 02 FB | 	rdlong	local02, fp
2d050     10 4E 85 F1 | 	sub	fp, #16
2d054     64 28 16 F2 | 	cmp	local02, #100 wc
2d058     70 00 90 3D |  if_ae	jmp	#LR__4544
2d05c     04 4E 05 F1 | 	add	fp, #4
2d060     A7 12 02 FB | 	rdlong	arg01, fp
2d064     20 12 06 F1 | 	add	arg01, #32
2d068     18 4E 05 F1 | 	add	fp, #24
2d06c     A7 14 02 F6 | 	mov	arg02, fp
2d070     10 4E 85 F1 | 	sub	fp, #16
2d074     A7 38 02 FB | 	rdlong	local10, fp
2d078     0C 38 06 F1 | 	add	local10, #12
2d07c     1C 17 02 FB | 	rdlong	arg03, local10
2d080     04 4E 05 F1 | 	add	fp, #4
2d084     A7 18 02 FB | 	rdlong	arg04, fp
2d088     10 4E 85 F1 | 	sub	fp, #16
2d08c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2d090     04 4E 05 F1 | 	add	fp, #4
2d094     A7 12 02 FB | 	rdlong	arg01, fp
2d098     04 4E 85 F1 | 	sub	fp, #4
2d09c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2d0a0     08 4E 05 F1 | 	add	fp, #8
2d0a4     A7 FA 61 FC | 	wrlong	result1, fp
2d0a8     00 FA 4D F2 | 	cmps	result1, #0 wz
2d0ac     08 4E 85 F1 | 	sub	fp, #8
2d0b0     18 00 90 5D |  if_ne	jmp	#LR__4544
2d0b4     10 4E 05 F1 | 	add	fp, #16
2d0b8     A7 38 02 FB | 	rdlong	local10, fp
2d0bc     01 38 06 F1 | 	add	local10, #1
2d0c0     A7 38 62 FC | 	wrlong	local10, fp
2d0c4     10 4E 85 F1 | 	sub	fp, #16
2d0c8     7C FF 9F FD | 	jmp	#LR__4543
2d0cc                 | LR__4544
2d0cc     10 4E 05 F1 | 	add	fp, #16
2d0d0     A7 38 02 FB | 	rdlong	local10, fp
2d0d4     10 4E 85 F1 | 	sub	fp, #16
2d0d8     64 38 0E F2 | 	cmp	local10, #100 wz
2d0dc     07 FA 05 A6 |  if_e	mov	result1, #7
2d0e0     AC 02 90 AD |  if_e	jmp	#LR__4555
2d0e4     08 4E 05 F1 | 	add	fp, #8
2d0e8     A7 38 02 FB | 	rdlong	local10, fp
2d0ec     08 4E 85 F1 | 	sub	fp, #8
2d0f0     04 38 0E F2 | 	cmp	local10, #4 wz
2d0f4     08 4E 05 51 |  if_ne	add	fp, #8
2d0f8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d0fc     08 4E 85 51 |  if_ne	sub	fp, #8
2d100     8C 02 90 5D |  if_ne	jmp	#LR__4555
2d104     04 4E 05 F1 | 	add	fp, #4
2d108     A7 38 02 FB | 	rdlong	local10, fp
2d10c     23 4E 05 F1 | 	add	fp, #35
2d110     A7 26 C2 FA | 	rdbyte	local01, fp
2d114     27 4E 85 F1 | 	sub	fp, #39
2d118     2B 38 06 F1 | 	add	local10, #43
2d11c     1C 27 42 FC | 	wrbyte	local01, local10
2d120                 | LR__4545
2d120     27 4E 05 F1 | 	add	fp, #39
2d124     A7 28 C2 FA | 	rdbyte	local02, fp
2d128     27 4E 85 F1 | 	sub	fp, #39
2d12c     02 28 CE F7 | 	test	local02, #2 wz
2d130     20 00 90 AD |  if_e	jmp	#LR__4546
2d134     14 4E 05 F1 | 	add	fp, #20
2d138     A7 38 02 FB | 	rdlong	local10, fp
2d13c     0C 38 06 F1 | 	add	local10, #12
2d140     0D 38 16 FD | 	qdiv	local10, #13
2d144     14 4E 85 F1 | 	sub	fp, #20
2d148     18 38 62 FD | 	getqx	local10
2d14c     01 38 06 F1 | 	add	local10, #1
2d150     04 00 90 FD | 	jmp	#LR__4547
2d154                 | LR__4546
2d154     01 38 06 F6 | 	mov	local10, #1
2d158                 | LR__4547
2d158     18 4E 05 F1 | 	add	fp, #24
2d15c     A7 38 62 FC | 	wrlong	local10, fp
2d160     14 4E 85 F1 | 	sub	fp, #20
2d164     A7 12 02 FB | 	rdlong	arg01, fp
2d168     1C 15 02 F6 | 	mov	arg02, local10
2d16c     04 4E 85 F1 | 	sub	fp, #4
2d170     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2d174     08 4E 05 F1 | 	add	fp, #8
2d178     A7 FA 61 FC | 	wrlong	result1, fp
2d17c     08 4E 85 F1 | 	sub	fp, #8
2d180     00 FA 0D F2 | 	cmp	result1, #0 wz
2d184     38 01 90 5D |  if_ne	jmp	#LR__4552
2d188     18 4E 05 F1 | 	add	fp, #24
2d18c     A7 38 02 FB | 	rdlong	local10, fp
2d190     01 38 8E F1 | 	sub	local10, #1 wz
2d194     A7 38 62 FC | 	wrlong	local10, fp
2d198     18 4E 85 F1 | 	sub	fp, #24
2d19c     20 01 90 AD |  if_e	jmp	#LR__4552
2d1a0     04 4E 05 F1 | 	add	fp, #4
2d1a4     A7 38 02 FB | 	rdlong	local10, fp
2d1a8     1C 13 02 F6 | 	mov	arg01, local10
2d1ac     14 4E 05 F1 | 	add	fp, #20
2d1b0     A7 18 02 FB | 	rdlong	arg04, fp
2d1b4     18 4E 85 F1 | 	sub	fp, #24
2d1b8     05 18 66 F0 | 	shl	arg04, #5
2d1bc     10 38 06 F1 | 	add	local10, #16
2d1c0     1C 15 02 FB | 	rdlong	arg02, local10
2d1c4     0C 15 82 F1 | 	sub	arg02, arg04
2d1c8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2d1cc     08 4E 05 F1 | 	add	fp, #8
2d1d0     A7 FA 61 FC | 	wrlong	result1, fp
2d1d4     08 4E 85 F1 | 	sub	fp, #8
2d1d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d1dc     E0 00 90 5D |  if_ne	jmp	#LR__4551
2d1e0     04 4E 05 F1 | 	add	fp, #4
2d1e4     A7 12 02 FB | 	rdlong	arg01, fp
2d1e8     04 4E 85 F1 | 	sub	fp, #4
2d1ec     20 12 06 F1 | 	add	arg01, #32
2d1f0     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2d1f4     FD 38 02 F6 | 	mov	local10, result1
2d1f8     28 4E 05 F1 | 	add	fp, #40
2d1fc     A7 38 42 FC | 	wrbyte	local10, fp
2d200     28 4E 85 F1 | 	sub	fp, #40
2d204                 | ' 			sum = sum_sfn(dp->fn);
2d204                 | ' 			do {
2d204                 | LR__4548
2d204     0C 4E 05 F1 | 	add	fp, #12
2d208     A7 12 02 FB | 	rdlong	arg01, fp
2d20c     08 4E 85 F1 | 	sub	fp, #8
2d210     A7 26 02 FB | 	rdlong	local01, fp
2d214     04 4E 85 F1 | 	sub	fp, #4
2d218     18 26 06 F1 | 	add	local01, #24
2d21c     13 15 02 FB | 	rdlong	arg02, local01
2d220     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2d224     08 4E 05 F1 | 	add	fp, #8
2d228     A7 FA 61 FC | 	wrlong	result1, fp
2d22c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d230     08 4E 85 F1 | 	sub	fp, #8
2d234     88 00 90 5D |  if_ne	jmp	#LR__4550
2d238     0C 4E 05 F1 | 	add	fp, #12
2d23c     A7 28 02 FB | 	rdlong	local02, fp
2d240     0C 28 06 F1 | 	add	local02, #12
2d244     14 13 02 FB | 	rdlong	arg01, local02
2d248     08 4E 85 F1 | 	sub	fp, #8
2d24c     A7 26 02 FB | 	rdlong	local01, fp
2d250     1C 26 06 F1 | 	add	local01, #28
2d254     13 15 02 FB | 	rdlong	arg02, local01
2d258     14 4E 05 F1 | 	add	fp, #20
2d25c     A7 16 02 FB | 	rdlong	arg03, fp
2d260     10 4E 05 F1 | 	add	fp, #16
2d264     A7 18 C2 FA | 	rdbyte	arg04, fp
2d268     28 4E 85 F1 | 	sub	fp, #40
2d26c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2d270     0C 4E 05 F1 | 	add	fp, #12
2d274     A7 38 02 FB | 	rdlong	local10, fp
2d278     03 38 06 F1 | 	add	local10, #3
2d27c     1C 03 48 FC | 	wrbyte	#1, local10
2d280     08 4E 85 F1 | 	sub	fp, #8
2d284     A7 12 02 FB | 	rdlong	arg01, fp
2d288     04 4E 85 F1 | 	sub	fp, #4
2d28c     00 14 06 F6 | 	mov	arg02, #0
2d290     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2d294     08 4E 05 F1 | 	add	fp, #8
2d298     A7 FA 61 FC | 	wrlong	result1, fp
2d29c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d2a0     08 4E 85 F1 | 	sub	fp, #8
2d2a4     18 00 90 5D |  if_ne	jmp	#LR__4549
2d2a8     18 4E 05 F1 | 	add	fp, #24
2d2ac     A7 38 02 FB | 	rdlong	local10, fp
2d2b0     01 38 8E F1 | 	sub	local10, #1 wz
2d2b4     A7 38 62 FC | 	wrlong	local10, fp
2d2b8     18 4E 85 F1 | 	sub	fp, #24
2d2bc     44 FF 9F 5D |  if_ne	jmp	#LR__4548
2d2c0                 | LR__4549
2d2c0                 | LR__4550
2d2c0                 | LR__4551
2d2c0                 | LR__4552
2d2c0     08 4E 05 F1 | 	add	fp, #8
2d2c4     A7 38 0A FB | 	rdlong	local10, fp wz
2d2c8     08 4E 85 F1 | 	sub	fp, #8
2d2cc     B4 00 90 5D |  if_ne	jmp	#LR__4554
2d2d0     0C 4E 05 F1 | 	add	fp, #12
2d2d4     A7 12 02 FB | 	rdlong	arg01, fp
2d2d8     08 4E 85 F1 | 	sub	fp, #8
2d2dc     A7 26 02 FB | 	rdlong	local01, fp
2d2e0     04 4E 85 F1 | 	sub	fp, #4
2d2e4     18 26 06 F1 | 	add	local01, #24
2d2e8     13 15 02 FB | 	rdlong	arg02, local01
2d2ec     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2d2f0     08 4E 05 F1 | 	add	fp, #8
2d2f4     A7 FA 61 FC | 	wrlong	result1, fp
2d2f8     08 4E 85 F1 | 	sub	fp, #8
2d2fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d300     80 00 90 5D |  if_ne	jmp	#LR__4553
2d304     04 4E 05 F1 | 	add	fp, #4
2d308     A7 28 02 FB | 	rdlong	local02, fp
2d30c     04 4E 85 F1 | 	sub	fp, #4
2d310     1C 28 06 F1 | 	add	local02, #28
2d314     14 13 02 FB | 	rdlong	arg01, local02
2d318     00 14 06 F6 | 	mov	arg02, #0
2d31c     20 16 06 F6 | 	mov	arg03, #32
2d320     98 00 A0 FD | 	call	#\builtin_bytefill_
2d324     04 4E 05 F1 | 	add	fp, #4
2d328     A7 14 02 FB | 	rdlong	arg02, fp
2d32c     0A 27 02 F6 | 	mov	local01, arg02
2d330     1C 26 06 F1 | 	add	local01, #28
2d334     13 13 02 FB | 	rdlong	arg01, local01
2d338     04 4E 85 F1 | 	sub	fp, #4
2d33c     20 14 06 F1 | 	add	arg02, #32
2d340     0B 16 06 F6 | 	mov	arg03, #11
2d344     EC 68 BF FD | 	call	#__system____builtin_memmove
2d348     04 4E 05 F1 | 	add	fp, #4
2d34c     A7 36 02 FB | 	rdlong	local09, fp
2d350     1B 39 02 F6 | 	mov	local10, local09
2d354     1C 38 06 F1 | 	add	local10, #28
2d358     1C 27 02 FB | 	rdlong	local01, local10
2d35c     2B 36 06 F1 | 	add	local09, #43
2d360     1B 39 C2 FA | 	rdbyte	local10, local09
2d364     18 38 06 F5 | 	and	local10, #24
2d368     0C 26 06 F1 | 	add	local01, #12
2d36c     13 39 42 FC | 	wrbyte	local10, local01
2d370     08 4E 05 F1 | 	add	fp, #8
2d374     A7 38 02 FB | 	rdlong	local10, fp
2d378     0C 4E 85 F1 | 	sub	fp, #12
2d37c     03 38 06 F1 | 	add	local10, #3
2d380     1C 03 48 FC | 	wrbyte	#1, local10
2d384                 | LR__4553
2d384                 | LR__4554
2d384                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2d384                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2d384                 | ' 
2d384                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2d384                 | ' 
2d384                 | ' 			fs->wflag = 1;
2d384                 | ' 		}
2d384                 | ' 	}
2d384                 | ' 
2d384                 | ' 	return res;
2d384     08 4E 05 F1 | 	add	fp, #8
2d388     A7 FA 01 FB | 	rdlong	result1, fp
2d38c     08 4E 85 F1 | 	sub	fp, #8
2d390                 | LR__4555
2d390     A7 F0 03 F6 | 	mov	ptra, fp
2d394     B2 00 A0 FD | 	call	#popregs_
2d398                 | _fatfs_cc_dir_register_ret
2d398     2D 00 64 FD | 	ret
2d39c                 | 
2d39c                 | _fatfs_cc_dir_remove
2d39c     05 4A 05 F6 | 	mov	COUNT_, #5
2d3a0     A8 00 A0 FD | 	call	#pushregs_
2d3a4     09 27 02 F6 | 	mov	local01, arg01
2d3a8     13 29 02 FB | 	rdlong	local02, local01
2d3ac     10 26 06 F1 | 	add	local01, #16
2d3b0     13 2B 02 FB | 	rdlong	local03, local01
2d3b4     1C 26 06 F1 | 	add	local01, #28
2d3b8     13 15 02 FB | 	rdlong	arg02, local01
2d3bc     2C 26 86 F1 | 	sub	local01, #44
2d3c0     FF FF 7F FF 
2d3c4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2d3c8     00 2C 06 A6 |  if_e	mov	local04, #0
2d3cc     18 00 90 AD |  if_e	jmp	#LR__4560
2d3d0     13 13 02 F6 | 	mov	arg01, local01
2d3d4     2C 26 06 F1 | 	add	local01, #44
2d3d8     13 15 02 FB | 	rdlong	arg02, local01
2d3dc     2C 26 86 F1 | 	sub	local01, #44
2d3e0     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2d3e4     FD 2C 02 F6 | 	mov	local04, result1
2d3e8                 | LR__4560
2d3e8     16 2F 0A F6 | 	mov	local05, local04 wz
2d3ec     64 00 90 5D |  if_ne	jmp	#LR__4563
2d3f0                 | ' 		do {
2d3f0                 | LR__4561
2d3f0     18 26 06 F1 | 	add	local01, #24
2d3f4     13 15 02 FB | 	rdlong	arg02, local01
2d3f8     18 26 86 F1 | 	sub	local01, #24
2d3fc     14 13 02 F6 | 	mov	arg01, local02
2d400     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2d404     FD 2E 0A F6 | 	mov	local05, result1 wz
2d408     40 00 90 5D |  if_ne	jmp	#LR__4562
2d40c     1C 26 06 F1 | 	add	local01, #28
2d410     13 2D 02 FB | 	rdlong	local04, local01
2d414     16 CB 49 FC | 	wrbyte	#229, local04
2d418     03 28 06 F1 | 	add	local02, #3
2d41c     14 03 48 FC | 	wrbyte	#1, local02
2d420     03 28 86 F1 | 	sub	local02, #3
2d424     0C 26 86 F1 | 	sub	local01, #12
2d428     13 2D 02 FB | 	rdlong	local04, local01
2d42c     10 26 86 F1 | 	sub	local01, #16
2d430     15 2D 12 F2 | 	cmp	local04, local03 wc
2d434     14 00 90 3D |  if_ae	jmp	#LR__4562
2d438     13 13 02 F6 | 	mov	arg01, local01
2d43c     00 14 06 F6 | 	mov	arg02, #0
2d440     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2d444     FD 2E 0A F6 | 	mov	local05, result1 wz
2d448     A4 FF 9F AD |  if_e	jmp	#LR__4561
2d44c                 | LR__4562
2d44c     04 2E 0E F2 | 	cmp	local05, #4 wz
2d450     02 2E 06 A6 |  if_e	mov	local05, #2
2d454                 | LR__4563
2d454                 | ' 	}
2d454                 | ' #line 2590 "ff.c"
2d454                 | ' 	return res;
2d454     17 FB 01 F6 | 	mov	result1, local05
2d458     A7 F0 03 F6 | 	mov	ptra, fp
2d45c     B2 00 A0 FD | 	call	#popregs_
2d460                 | _fatfs_cc_dir_remove_ret
2d460     2D 00 64 FD | 	ret
2d464                 | 
2d464                 | _fatfs_cc_get_fileinfo
2d464     0F 4A 05 F6 | 	mov	COUNT_, #15
2d468     A8 00 A0 FD | 	call	#pushregs_
2d46c     09 27 02 F6 | 	mov	local01, arg01
2d470     0A 29 02 F6 | 	mov	local02, arg02
2d474     13 2B 02 FB | 	rdlong	local03, local01
2d478     1C 28 06 F1 | 	add	local02, #28
2d47c     14 01 48 FC | 	wrbyte	#0, local02
2d480     1C 28 86 F1 | 	sub	local02, #28
2d484     18 26 06 F1 | 	add	local01, #24
2d488     13 2D 0A FB | 	rdlong	local04, local01 wz
2d48c     18 26 86 F1 | 	sub	local01, #24
2d490     90 03 90 AD |  if_e	jmp	#LR__4584
2d494     2C 26 06 F1 | 	add	local01, #44
2d498     13 2D 02 FB | 	rdlong	local04, local01
2d49c     2C 26 86 F1 | 	sub	local01, #44
2d4a0     FF FF 7F FF 
2d4a4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2d4a8     D8 00 90 AD |  if_e	jmp	#LR__4573
2d4ac     00 2E 06 F6 | 	mov	local05, #0
2d4b0     00 30 06 F6 | 	mov	local06, #0
2d4b4     00 32 06 F6 | 	mov	local07, #0
2d4b8                 | ' 			si = di = 0;
2d4b8                 | ' 			hs = 0;
2d4b8                 | ' 			while (fs->lfnbuf[si] != 0) {
2d4b8                 | LR__4570
2d4b8     0C 2A 06 F1 | 	add	local03, #12
2d4bc     15 2D 02 FB | 	rdlong	local04, local03
2d4c0     0C 2A 86 F1 | 	sub	local03, #12
2d4c4     18 35 02 F6 | 	mov	local08, local06
2d4c8     01 34 66 F0 | 	shl	local08, #1
2d4cc     16 35 02 F1 | 	add	local08, local04
2d4d0     1A 2D EA FA | 	rdword	local04, local08 wz
2d4d4     90 00 90 AD |  if_e	jmp	#LR__4572
2d4d8     0C 2A 06 F1 | 	add	local03, #12
2d4dc     15 37 02 FB | 	rdlong	local09, local03
2d4e0     0C 2A 86 F1 | 	sub	local03, #12
2d4e4     18 39 02 F6 | 	mov	local10, local06
2d4e8     01 38 66 F0 | 	shl	local10, #1
2d4ec     1B 39 02 F1 | 	add	local10, local09
2d4f0     1C 3B E2 FA | 	rdword	local11, local10
2d4f4     19 2D 02 F6 | 	mov	local04, local07
2d4f8     0F 2C 4E F7 | 	zerox	local04, #15 wz
2d4fc     01 30 06 F1 | 	add	local06, #1
2d500     24 00 90 5D |  if_ne	jmp	#LR__4571
2d504     1D 3D 32 F9 | 	getword	local12, local11, #0
2d508     6C 00 00 FF 
2d50c     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2d510     14 00 90 CD |  if_b	jmp	#LR__4571
2d514     1D 3F 32 F9 | 	getword	local13, local11, #0
2d518     70 00 00 FF 
2d51c     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2d520     1D 33 02 C6 |  if_b	mov	local07, local11
2d524                 | ' 					hs = wc; continue;
2d524     90 FF 9F CD |  if_b	jmp	#LR__4570
2d528                 | LR__4571
2d528     19 13 32 F9 | 	getword	arg01, local07, #0
2d52c     10 12 66 F0 | 	shl	arg01, #16
2d530     1D 3B 32 F9 | 	getword	local11, local11, #0
2d534     1D 13 42 F5 | 	or	arg01, local11
2d538     17 15 02 F6 | 	mov	arg02, local05
2d53c     1C 28 06 F1 | 	add	local02, #28
2d540     14 15 02 F1 | 	add	arg02, local02
2d544     FF 16 06 F6 | 	mov	arg03, #255
2d548     17 17 82 F1 | 	sub	arg03, local05
2d54c     1C 28 86 F1 | 	sub	local02, #28
2d550     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2d554     FD 40 0A F6 | 	mov	local14, result1 wz
2d558     00 2E 06 A6 |  if_e	mov	local05, #0
2d55c     20 2F 02 51 |  if_ne	add	local05, local14
2d560     00 32 06 56 |  if_ne	mov	local07, #0
2d564     50 FF 9F 5D |  if_ne	jmp	#LR__4570
2d568                 | LR__4572
2d568     19 2D 02 F6 | 	mov	local04, local07
2d56c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2d570     00 2E 06 56 |  if_ne	mov	local05, #0
2d574     1C 28 06 F1 | 	add	local02, #28
2d578     14 2F 02 F1 | 	add	local05, local02
2d57c     17 01 48 FC | 	wrbyte	#0, local05
2d580     1C 28 86 F1 | 	sub	local02, #28
2d584                 | LR__4573
2d584     00 2E 06 F6 | 	mov	local05, #0
2d588     00 30 06 F6 | 	mov	local06, #0
2d58c                 | ' 			fno->fname[di] = 0;
2d58c                 | ' 		}
2d58c                 | ' 	}
2d58c                 | ' 
2d58c                 | ' 	si = di = 0;
2d58c                 | ' 	while (si < 11) {
2d58c                 | LR__4574
2d58c     0B 30 16 F2 | 	cmp	local06, #11 wc
2d590     20 01 90 3D |  if_ae	jmp	#LR__4577
2d594     1C 26 06 F1 | 	add	local01, #28
2d598     13 37 02 FB | 	rdlong	local09, local01
2d59c     1C 26 86 F1 | 	sub	local01, #28
2d5a0     18 39 02 F6 | 	mov	local10, local06
2d5a4     1B 39 02 F1 | 	add	local10, local09
2d5a8     1C 3B C2 FA | 	rdbyte	local11, local10
2d5ac     1D 2D 32 F9 | 	getword	local04, local11, #0
2d5b0     20 2C 0E F2 | 	cmp	local04, #32 wz
2d5b4     01 30 06 F1 | 	add	local06, #1
2d5b8     D0 FF 9F AD |  if_e	jmp	#LR__4574
2d5bc     1D 2D 32 F9 | 	getword	local04, local11, #0
2d5c0     05 2C 0E F2 | 	cmp	local04, #5 wz
2d5c4     E5 3A 06 A6 |  if_e	mov	local11, #229
2d5c8     09 30 0E F2 | 	cmp	local06, #9 wz
2d5cc     20 00 90 5D |  if_ne	jmp	#LR__4575
2d5d0     0C 2E 16 F2 | 	cmp	local05, #12 wc
2d5d4     18 00 90 3D |  if_ae	jmp	#LR__4575
2d5d8     17 3F 02 F6 | 	mov	local13, local05
2d5dc     0C 28 06 F1 | 	add	local02, #12
2d5e0     14 3F 02 F1 | 	add	local13, local02
2d5e4     1F 5D 48 FC | 	wrbyte	#46, local13
2d5e8     01 2E 06 F1 | 	add	local05, #1
2d5ec     0C 28 86 F1 | 	sub	local02, #12
2d5f0                 | LR__4575
2d5f0     1D 13 32 F9 | 	getword	arg01, local11, #0
2d5f4     07 12 4E F7 | 	zerox	arg01, #7 wz
2d5f8     00 FA 05 56 |  if_ne	mov	result1, #0
2d5fc                 | ' 
2d5fc                 | ' 	return 0;
2d5fc     00 FA 05 A6 |  if_e	mov	result1, #0
2d600     00 FA 0D F2 | 	cmp	result1, #0 wz
2d604     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2d608     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2d60c     50 00 90 AD |  if_e	jmp	#LR__4576
2d610     1C 26 06 F1 | 	add	local01, #28
2d614     13 39 02 FB | 	rdlong	local10, local01
2d618     1C 26 86 F1 | 	sub	local01, #28
2d61c     18 35 02 F6 | 	mov	local08, local06
2d620     1C 35 02 F1 | 	add	local08, local10
2d624     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2d628     00 FA 05 56 |  if_ne	mov	result1, #0
2d62c                 | ' 
2d62c                 | ' 	return 0;
2d62c     00 FA 05 A6 |  if_e	mov	result1, #0
2d630     00 FA 0D F2 | 	cmp	result1, #0 wz
2d634     28 00 90 AD |  if_e	jmp	#LR__4576
2d638     1D 3B 32 F9 | 	getword	local11, local11, #0
2d63c     08 3A 66 F0 | 	shl	local11, #8
2d640     1C 26 06 F1 | 	add	local01, #28
2d644     13 41 02 FB | 	rdlong	local14, local01
2d648     1C 26 86 F1 | 	sub	local01, #28
2d64c     18 37 02 F6 | 	mov	local09, local06
2d650     20 37 02 F1 | 	add	local09, local14
2d654     1B 3D C2 FA | 	rdbyte	local12, local09
2d658     1E 3B 42 F5 | 	or	local11, local12
2d65c     01 30 06 F1 | 	add	local06, #1
2d660                 | LR__4576
2d660     1D 13 02 F6 | 	mov	arg01, local11
2d664     01 00 00 FF 
2d668     52 15 06 F6 | 	mov	arg02, ##850
2d66c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2d670     FD 3A 02 F6 | 	mov	local11, result1
2d674     1D 2D 02 F6 | 	mov	local04, local11
2d678     0F 2C 4E F7 | 	zerox	local04, #15 wz
2d67c     00 2E 06 A6 |  if_e	mov	local05, #0
2d680     30 00 90 AD |  if_e	jmp	#LR__4577
2d684     1D 13 32 F9 | 	getword	arg01, local11, #0
2d688     17 15 02 F6 | 	mov	arg02, local05
2d68c     0C 28 06 F1 | 	add	local02, #12
2d690     14 15 02 F1 | 	add	arg02, local02
2d694     0C 16 06 F6 | 	mov	arg03, #12
2d698     17 17 82 F1 | 	sub	arg03, local05
2d69c     0C 28 86 F1 | 	sub	local02, #12
2d6a0     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2d6a4     FD 40 0A F6 | 	mov	local14, result1 wz
2d6a8     00 2E 06 A6 |  if_e	mov	local05, #0
2d6ac     20 2F 02 51 |  if_ne	add	local05, local14
2d6b0     D8 FE 9F 5D |  if_ne	jmp	#LR__4574
2d6b4                 | LR__4577
2d6b4     17 2D 02 F6 | 	mov	local04, local05
2d6b8     0C 28 06 F1 | 	add	local02, #12
2d6bc     14 2D 02 F1 | 	add	local04, local02
2d6c0     16 01 48 FC | 	wrbyte	#0, local04
2d6c4     10 28 06 F1 | 	add	local02, #16
2d6c8     14 2D CA FA | 	rdbyte	local04, local02 wz
2d6cc     1C 28 86 F1 | 	sub	local02, #28
2d6d0     F8 00 90 5D |  if_ne	jmp	#LR__4583
2d6d4     00 2E 0E F2 | 	cmp	local05, #0 wz
2d6d8     1C 00 90 5D |  if_ne	jmp	#LR__4578
2d6dc     17 3F 02 F6 | 	mov	local13, local05
2d6e0     1C 28 06 F1 | 	add	local02, #28
2d6e4     14 3F 02 F1 | 	add	local13, local02
2d6e8     1F 7F 48 FC | 	wrbyte	#63, local13
2d6ec     01 2E 06 F1 | 	add	local05, #1
2d6f0     1C 28 86 F1 | 	sub	local02, #28
2d6f4     A4 00 90 FD | 	jmp	#LR__4582
2d6f8                 | LR__4578
2d6f8                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2d6f8     00 2E 06 F6 | 	mov	local05, #0
2d6fc     00 30 06 F6 | 	mov	local06, #0
2d700     08 42 06 F6 | 	mov	local15, #8
2d704                 | LR__4579
2d704     18 2D 02 F6 | 	mov	local04, local06
2d708     0C 28 06 F1 | 	add	local02, #12
2d70c     14 2D 02 F1 | 	add	local04, local02
2d710     16 3F CA FA | 	rdbyte	local13, local04 wz
2d714     0C 28 86 F1 | 	sub	local02, #12
2d718     80 00 90 AD |  if_e	jmp	#LR__4581
2d71c     18 35 02 F6 | 	mov	local08, local06
2d720     0C 28 06 F1 | 	add	local02, #12
2d724     14 35 02 F1 | 	add	local08, local02
2d728     1A 3B C2 FA | 	rdbyte	local11, local08
2d72c     1D 41 32 F9 | 	getword	local14, local11, #0
2d730     2E 40 0E F2 | 	cmp	local14, #46 wz
2d734     0C 28 86 F1 | 	sub	local02, #12
2d738     10 42 06 A6 |  if_e	mov	local15, #16
2d73c     1D 41 32 F9 | 	getword	local14, local11, #0
2d740     41 40 16 F2 | 	cmp	local14, #65 wc
2d744     30 00 90 CD |  if_b	jmp	#LR__4580
2d748     1D 35 32 F9 | 	getword	local08, local11, #0
2d74c     5B 34 16 F2 | 	cmp	local08, #91 wc
2d750     24 00 90 3D |  if_ae	jmp	#LR__4580
2d754     1C 26 06 F1 | 	add	local01, #28
2d758     13 37 02 FB | 	rdlong	local09, local01
2d75c     1C 26 86 F1 | 	sub	local01, #28
2d760     0C 36 06 F1 | 	add	local09, #12
2d764     1B 39 C2 FA | 	rdbyte	local10, local09
2d768     21 41 E2 F8 | 	getbyte	local14, local15, #0
2d76c     20 39 CA F7 | 	test	local10, local14 wz
2d770     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2d774     20 3A 06 51 |  if_ne	add	local11, #32
2d778                 | LR__4580
2d778     17 41 02 F6 | 	mov	local14, local05
2d77c     1C 28 06 F1 | 	add	local02, #28
2d780     14 41 02 F1 | 	add	local14, local02
2d784     1D 3B 32 F9 | 	getword	local11, local11, #0
2d788     20 3B 42 FC | 	wrbyte	local11, local14
2d78c     01 30 06 F1 | 	add	local06, #1
2d790     01 2E 06 F1 | 	add	local05, #1
2d794     1C 28 86 F1 | 	sub	local02, #28
2d798     68 FF 9F FD | 	jmp	#LR__4579
2d79c                 | LR__4581
2d79c                 | LR__4582
2d79c     1C 28 06 F1 | 	add	local02, #28
2d7a0     14 2F 02 F1 | 	add	local05, local02
2d7a4     17 01 48 FC | 	wrbyte	#0, local05
2d7a8     1C 26 06 F1 | 	add	local01, #28
2d7ac     13 2D 02 FB | 	rdlong	local04, local01
2d7b0     1C 26 86 F1 | 	sub	local01, #28
2d7b4     0C 2C 06 F1 | 	add	local04, #12
2d7b8     16 3F CA FA | 	rdbyte	local13, local04 wz
2d7bc     1C 28 86 F1 | 	sub	local02, #28
2d7c0     0C 28 06 A1 |  if_e	add	local02, #12
2d7c4     14 01 48 AC |  if_e	wrbyte	#0, local02
2d7c8     0C 28 86 A1 |  if_e	sub	local02, #12
2d7cc                 | LR__4583
2d7cc     1C 26 06 F1 | 	add	local01, #28
2d7d0     13 3D 02 FB | 	rdlong	local12, local01
2d7d4     0B 3C 06 F1 | 	add	local12, #11
2d7d8     1E 2D C2 FA | 	rdbyte	local04, local12
2d7dc     3F 2C 06 F5 | 	and	local04, #63
2d7e0     08 28 06 F1 | 	add	local02, #8
2d7e4     14 2D 42 FC | 	wrbyte	local04, local02
2d7e8     08 28 86 F1 | 	sub	local02, #8
2d7ec     13 13 02 FB | 	rdlong	arg01, local01
2d7f0     1C 12 06 F1 | 	add	arg01, #28
2d7f4                 | ' {
2d7f4                 | ' 
2d7f4                 | ' 	return *((DWORD*)ptr);
2d7f4     09 FB 01 FB | 	rdlong	result1, arg01
2d7f8     14 FB 61 FC | 	wrlong	result1, local02
2d7fc     13 13 02 FB | 	rdlong	arg01, local01
2d800     16 12 06 F1 | 	add	arg01, #22
2d804                 | ' {
2d804                 | ' 
2d804                 | ' 	return *((WORD*)ptr);
2d804     09 FB E1 FA | 	rdword	result1, arg01
2d808     06 28 06 F1 | 	add	local02, #6
2d80c     14 FB 51 FC | 	wrword	result1, local02
2d810     13 13 02 FB | 	rdlong	arg01, local01
2d814     18 12 06 F1 | 	add	arg01, #24
2d818                 | ' {
2d818                 | ' 
2d818                 | ' 	return *((WORD*)ptr);
2d818     09 FB E1 FA | 	rdword	result1, arg01
2d81c     02 28 86 F1 | 	sub	local02, #2
2d820     14 FB 51 FC | 	wrword	result1, local02
2d824                 | LR__4584
2d824     A7 F0 03 F6 | 	mov	ptra, fp
2d828     B2 00 A0 FD | 	call	#popregs_
2d82c                 | _fatfs_cc_get_fileinfo_ret
2d82c     2D 00 64 FD | 	ret
2d830                 | 
2d830                 | _fatfs_cc_create_name
2d830     0D 4A 05 F6 | 	mov	COUNT_, #13
2d834     A8 00 A0 FD | 	call	#pushregs_
2d838     34 F0 07 F1 | 	add	ptra, #52
2d83c     04 4E 05 F1 | 	add	fp, #4
2d840     A7 12 62 FC | 	wrlong	arg01, fp
2d844     04 4E 05 F1 | 	add	fp, #4
2d848     A7 14 62 FC | 	wrlong	arg02, fp
2d84c     0A FB 01 FB | 	rdlong	result1, arg02
2d850     28 4E 05 F1 | 	add	fp, #40
2d854     A7 FA 61 FC | 	wrlong	result1, fp
2d858     2C 4E 85 F1 | 	sub	fp, #44
2d85c     A7 FA 01 FB | 	rdlong	result1, fp
2d860     FD 26 02 FB | 	rdlong	local01, result1
2d864     0C 26 06 F1 | 	add	local01, #12
2d868     13 29 02 FB | 	rdlong	local02, local01
2d86c     14 4E 05 F1 | 	add	fp, #20
2d870     A7 28 62 FC | 	wrlong	local02, fp
2d874     14 4E 05 F1 | 	add	fp, #20
2d878     A7 00 68 FC | 	wrlong	#0, fp
2d87c     2C 4E 85 F1 | 	sub	fp, #44
2d880                 | ' 
2d880                 | ' 
2d880                 | ' 
2d880                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2d880                 | ' 	for (;;) {
2d880                 | LR__4590
2d880     30 4E 05 F1 | 	add	fp, #48
2d884     A7 12 02 F6 | 	mov	arg01, fp
2d888     30 4E 85 F1 | 	sub	fp, #48
2d88c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2d890     1C 4E 05 F1 | 	add	fp, #28
2d894     A7 FA 61 FC | 	wrlong	result1, fp
2d898     1C 4E 85 F1 | 	sub	fp, #28
2d89c     FF FF 7F FF 
2d8a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d8a4     06 FA 05 A6 |  if_e	mov	result1, #6
2d8a8     74 08 90 AD |  if_e	jmp	#LR__4630
2d8ac     1C 4E 05 F1 | 	add	fp, #28
2d8b0     A7 26 02 FB | 	rdlong	local01, fp
2d8b4     1C 4E 85 F1 | 	sub	fp, #28
2d8b8     80 00 00 FF 
2d8bc     00 26 16 F2 | 	cmp	local01, ##65536 wc
2d8c0     3C 00 90 CD |  if_b	jmp	#LR__4591
2d8c4     18 4E 05 F1 | 	add	fp, #24
2d8c8     A7 2A 02 FB | 	rdlong	local03, fp
2d8cc     14 4E 05 F1 | 	add	fp, #20
2d8d0     A7 26 02 FB | 	rdlong	local01, fp
2d8d4     13 2D 02 F6 | 	mov	local04, local01
2d8d8     01 2C 06 F1 | 	add	local04, #1
2d8dc     A7 2C 62 FC | 	wrlong	local04, fp
2d8e0     01 26 66 F0 | 	shl	local01, #1
2d8e4     15 27 02 F1 | 	add	local01, local03
2d8e8     10 4E 85 F1 | 	sub	fp, #16
2d8ec     A7 2E 02 FB | 	rdlong	local05, fp
2d8f0     1C 4E 85 F1 | 	sub	fp, #28
2d8f4     17 31 02 F6 | 	mov	local06, local05
2d8f8     10 30 46 F0 | 	shr	local06, #16
2d8fc     13 31 52 FC | 	wrword	local06, local01
2d900                 | LR__4591
2d900     1C 4E 05 F1 | 	add	fp, #28
2d904     A7 26 02 FB | 	rdlong	local01, fp
2d908     08 4E 85 F1 | 	sub	fp, #8
2d90c     A7 26 52 FC | 	wrword	local01, fp
2d910     A7 26 E2 FA | 	rdword	local01, fp
2d914     14 4E 85 F1 | 	sub	fp, #20
2d918     20 26 16 F2 | 	cmp	local01, #32 wc
2d91c     B0 00 90 CD |  if_b	jmp	#LR__4593
2d920     14 4E 05 F1 | 	add	fp, #20
2d924     A7 26 E2 FA | 	rdword	local01, fp
2d928     14 4E 85 F1 | 	sub	fp, #20
2d92c     2F 26 0E F2 | 	cmp	local01, #47 wz
2d930     14 4E 05 51 |  if_ne	add	fp, #20
2d934     A7 2C E2 5A |  if_ne	rdword	local04, fp
2d938     14 4E 85 51 |  if_ne	sub	fp, #20
2d93c     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2d940     8C 00 90 AD |  if_e	jmp	#LR__4593
2d944     14 4E 05 F1 | 	add	fp, #20
2d948     A7 12 E2 FA | 	rdword	arg01, fp
2d94c     14 4E 85 F1 | 	sub	fp, #20
2d950     80 12 16 F2 | 	cmp	arg01, #128 wc
2d954     24 00 90 3D |  if_ae	jmp	#LR__4592
2d958     9C 01 00 FF 
2d95c     94 12 06 F6 | 	mov	arg01, ##@LR__5252
2d960     14 4E 05 F1 | 	add	fp, #20
2d964     A7 14 E2 FA | 	rdword	arg02, fp
2d968     14 4E 85 F1 | 	sub	fp, #20
2d96c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2d970     00 FA 0D F2 | 	cmp	result1, #0 wz
2d974     06 FA 05 56 |  if_ne	mov	result1, #6
2d978     A4 07 90 5D |  if_ne	jmp	#LR__4630
2d97c                 | LR__4592
2d97c     2C 4E 05 F1 | 	add	fp, #44
2d980     A7 30 02 FB | 	rdlong	local06, fp
2d984     2C 4E 85 F1 | 	sub	fp, #44
2d988     FF 30 16 F2 | 	cmp	local06, #255 wc
2d98c     06 FA 05 36 |  if_ae	mov	result1, #6
2d990     8C 07 90 3D |  if_ae	jmp	#LR__4630
2d994     18 4E 05 F1 | 	add	fp, #24
2d998     A7 2A 02 FB | 	rdlong	local03, fp
2d99c     14 4E 05 F1 | 	add	fp, #20
2d9a0     A7 28 02 FB | 	rdlong	local02, fp
2d9a4     14 2D 02 F6 | 	mov	local04, local02
2d9a8     01 2C 06 F1 | 	add	local04, #1
2d9ac     A7 2C 62 FC | 	wrlong	local04, fp
2d9b0     14 27 02 F6 | 	mov	local01, local02
2d9b4     01 26 66 F0 | 	shl	local01, #1
2d9b8     15 27 02 F1 | 	add	local01, local03
2d9bc     18 4E 85 F1 | 	sub	fp, #24
2d9c0     A7 30 E2 FA | 	rdword	local06, fp
2d9c4     14 4E 85 F1 | 	sub	fp, #20
2d9c8     13 31 52 FC | 	wrword	local06, local01
2d9cc     B0 FE 9F FD | 	jmp	#LR__4590
2d9d0                 | LR__4593
2d9d0     14 4E 05 F1 | 	add	fp, #20
2d9d4     A7 32 E2 FA | 	rdword	local07, fp
2d9d8     14 4E 85 F1 | 	sub	fp, #20
2d9dc     20 32 16 F2 | 	cmp	local07, #32 wc
2d9e0     10 4E 05 C1 |  if_b	add	fp, #16
2d9e4     A7 08 48 CC |  if_b	wrbyte	#4, fp
2d9e8     10 4E 85 C1 |  if_b	sub	fp, #16
2d9ec     74 00 90 CD |  if_b	jmp	#LR__4598
2d9f0     97 24 48 FB | 	callpa	#(@LR__4596-@LR__4594)>>2,fcache_load_ptr_
2d9f4                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2d9f4                 | LR__4594
2d9f4     30 4E 05 F1 | 	add	fp, #48
2d9f8     A7 2C 02 FB | 	rdlong	local04, fp
2d9fc     30 4E 85 F1 | 	sub	fp, #48
2da00     16 33 C2 FA | 	rdbyte	local07, local04
2da04     2F 32 0E F2 | 	cmp	local07, #47 wz
2da08     18 00 90 AD |  if_e	jmp	#LR__4595
2da0c     30 4E 05 F1 | 	add	fp, #48
2da10     A7 2C 02 FB | 	rdlong	local04, fp
2da14     30 4E 85 F1 | 	sub	fp, #48
2da18     16 29 C2 FA | 	rdbyte	local02, local04
2da1c     5C 28 0E F2 | 	cmp	local02, #92 wz
2da20     18 00 90 5D |  if_ne	jmp	#LR__4597
2da24                 | LR__4595
2da24     30 4E 05 F1 | 	add	fp, #48
2da28     A7 26 02 FB | 	rdlong	local01, fp
2da2c     01 26 06 F1 | 	add	local01, #1
2da30     A7 26 62 FC | 	wrlong	local01, fp
2da34     30 4E 85 F1 | 	sub	fp, #48
2da38     B8 FF 9F FD | 	jmp	#LR__4594
2da3c                 | LR__4596
2da3c                 | LR__4597
2da3c     10 4E 05 F1 | 	add	fp, #16
2da40     A7 00 48 FC | 	wrbyte	#0, fp
2da44     20 4E 05 F1 | 	add	fp, #32
2da48     A7 30 02 FB | 	rdlong	local06, fp
2da4c     30 4E 85 F1 | 	sub	fp, #48
2da50     18 33 C2 FA | 	rdbyte	local07, local06
2da54     20 32 16 F2 | 	cmp	local07, #32 wc
2da58     10 4E 05 C1 |  if_b	add	fp, #16
2da5c     A7 08 48 CC |  if_b	wrbyte	#4, fp
2da60     10 4E 85 C1 |  if_b	sub	fp, #16
2da64                 | LR__4598
2da64     08 4E 05 F1 | 	add	fp, #8
2da68     A7 32 02 FB | 	rdlong	local07, fp
2da6c     28 4E 05 F1 | 	add	fp, #40
2da70     A7 26 02 FB | 	rdlong	local01, fp
2da74     30 4E 85 F1 | 	sub	fp, #48
2da78     19 27 62 FC | 	wrlong	local01, local07
2da7c     97 38 48 FB | 	callpa	#(@LR__4600-@LR__4599)>>2,fcache_load_ptr_
2da80                 | ' 	}
2da80                 | ' 	*path = p;
2da80                 | ' #line 2862 "ff.c"
2da80                 | ' 	while (di) {
2da80                 | LR__4599
2da80     2C 4E 05 F1 | 	add	fp, #44
2da84     A7 32 0A FB | 	rdlong	local07, fp wz
2da88     2C 4E 85 F1 | 	sub	fp, #44
2da8c     60 00 90 AD |  if_e	jmp	#LR__4601
2da90     18 4E 05 F1 | 	add	fp, #24
2da94     A7 30 02 FB | 	rdlong	local06, fp
2da98     14 4E 05 F1 | 	add	fp, #20
2da9c     A7 2C 02 FB | 	rdlong	local04, fp
2daa0     01 2C 86 F1 | 	sub	local04, #1
2daa4     01 2C 66 F0 | 	shl	local04, #1
2daa8     18 2D 02 F1 | 	add	local04, local06
2daac     16 31 E2 FA | 	rdword	local06, local04
2dab0     18 4E 85 F1 | 	sub	fp, #24
2dab4     A7 30 52 FC | 	wrword	local06, fp
2dab8     A7 32 E2 FA | 	rdword	local07, fp
2dabc     14 4E 85 F1 | 	sub	fp, #20
2dac0     20 32 0E F2 | 	cmp	local07, #32 wz
2dac4     14 4E 05 51 |  if_ne	add	fp, #20
2dac8     A7 26 E2 5A |  if_ne	rdword	local01, fp
2dacc     14 4E 85 51 |  if_ne	sub	fp, #20
2dad0     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2dad4     18 00 90 5D |  if_ne	jmp	#LR__4601
2dad8     2C 4E 05 F1 | 	add	fp, #44
2dadc     A7 26 02 FB | 	rdlong	local01, fp
2dae0     01 26 86 F1 | 	sub	local01, #1
2dae4     A7 26 62 FC | 	wrlong	local01, fp
2dae8     2C 4E 85 F1 | 	sub	fp, #44
2daec     90 FF 9F FD | 	jmp	#LR__4599
2daf0                 | LR__4600
2daf0                 | LR__4601
2daf0     18 4E 05 F1 | 	add	fp, #24
2daf4     A7 34 02 FB | 	rdlong	local08, fp
2daf8     14 4E 05 F1 | 	add	fp, #20
2dafc     A7 2C 02 FB | 	rdlong	local04, fp
2db00     01 2C 66 F0 | 	shl	local04, #1
2db04     1A 2D 02 F1 | 	add	local04, local08
2db08     16 01 58 FC | 	wrword	#0, local04
2db0c     A7 32 0A FB | 	rdlong	local07, fp wz
2db10     2C 4E 85 F1 | 	sub	fp, #44
2db14     06 FA 05 A6 |  if_e	mov	result1, #6
2db18     04 06 90 AD |  if_e	jmp	#LR__4630
2db1c                 | ' 
2db1c                 | ' 
2db1c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2db1c     28 4E 05 F1 | 	add	fp, #40
2db20     A7 00 68 FC | 	wrlong	#0, fp
2db24     28 4E 85 F1 | 	sub	fp, #40
2db28     97 22 48 FB | 	callpa	#(@LR__4603-@LR__4602)>>2,fcache_load_ptr_
2db2c                 | LR__4602
2db2c     18 4E 05 F1 | 	add	fp, #24
2db30     A7 36 02 FB | 	rdlong	local09, fp
2db34     10 4E 05 F1 | 	add	fp, #16
2db38     A7 38 02 FB | 	rdlong	local10, fp
2db3c     28 4E 85 F1 | 	sub	fp, #40
2db40     01 38 66 F0 | 	shl	local10, #1
2db44     1B 39 02 F1 | 	add	local10, local09
2db48     1C 3B E2 FA | 	rdword	local11, local10
2db4c     20 3A 0E F2 | 	cmp	local11, #32 wz
2db50     1C 00 90 5D |  if_ne	jmp	#LR__4604
2db54     28 4E 05 F1 | 	add	fp, #40
2db58     A7 3C 02 FB | 	rdlong	local12, fp
2db5c     1E 2F 02 F6 | 	mov	local05, local12
2db60     01 2E 06 F1 | 	add	local05, #1
2db64     A7 2E 62 FC | 	wrlong	local05, fp
2db68     28 4E 85 F1 | 	sub	fp, #40
2db6c     BC FF 9F FD | 	jmp	#LR__4602
2db70                 | LR__4603
2db70                 | LR__4604
2db70     28 4E 05 F1 | 	add	fp, #40
2db74     A7 32 02 FB | 	rdlong	local07, fp
2db78     28 4E 85 F1 | 	sub	fp, #40
2db7c     01 32 16 F2 | 	cmp	local07, #1 wc
2db80     28 00 90 3D |  if_ae	jmp	#LR__4605
2db84     18 4E 05 F1 | 	add	fp, #24
2db88     A7 2A 02 FB | 	rdlong	local03, fp
2db8c     10 4E 05 F1 | 	add	fp, #16
2db90     A7 36 02 FB | 	rdlong	local09, fp
2db94     28 4E 85 F1 | 	sub	fp, #40
2db98     01 36 66 F0 | 	shl	local09, #1
2db9c     15 37 02 F1 | 	add	local09, local03
2dba0     1B 27 E2 FA | 	rdword	local01, local09
2dba4     2E 26 0E F2 | 	cmp	local01, #46 wz
2dba8     14 00 90 5D |  if_ne	jmp	#LR__4606
2dbac                 | LR__4605
2dbac     10 4E 05 F1 | 	add	fp, #16
2dbb0     A7 32 C2 FA | 	rdbyte	local07, fp
2dbb4     03 32 46 F5 | 	or	local07, #3
2dbb8     A7 32 42 FC | 	wrbyte	local07, fp
2dbbc     10 4E 85 F1 | 	sub	fp, #16
2dbc0                 | LR__4606
2dbc0     97 2C 48 FB | 	callpa	#(@LR__4608-@LR__4607)>>2,fcache_load_ptr_
2dbc4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2dbc4                 | LR__4607
2dbc4     2C 4E 05 F1 | 	add	fp, #44
2dbc8     A7 32 02 FB | 	rdlong	local07, fp
2dbcc     2C 4E 85 F1 | 	sub	fp, #44
2dbd0     01 32 16 F2 | 	cmp	local07, #1 wc
2dbd4     44 00 90 CD |  if_b	jmp	#LR__4609
2dbd8     18 4E 05 F1 | 	add	fp, #24
2dbdc     A7 30 02 FB | 	rdlong	local06, fp
2dbe0     14 4E 05 F1 | 	add	fp, #20
2dbe4     A7 2A 02 FB | 	rdlong	local03, fp
2dbe8     2C 4E 85 F1 | 	sub	fp, #44
2dbec     01 2A 86 F1 | 	sub	local03, #1
2dbf0     01 2A 66 F0 | 	shl	local03, #1
2dbf4     18 2B 02 F1 | 	add	local03, local06
2dbf8     15 27 E2 FA | 	rdword	local01, local03
2dbfc     2E 26 0E F2 | 	cmp	local01, #46 wz
2dc00     18 00 90 AD |  if_e	jmp	#LR__4609
2dc04     2C 4E 05 F1 | 	add	fp, #44
2dc08     A7 26 02 FB | 	rdlong	local01, fp
2dc0c     01 26 86 F1 | 	sub	local01, #1
2dc10     A7 26 62 FC | 	wrlong	local01, fp
2dc14     2C 4E 85 F1 | 	sub	fp, #44
2dc18     A8 FF 9F FD | 	jmp	#LR__4607
2dc1c                 | LR__4608
2dc1c                 | LR__4609
2dc1c     04 4E 05 F1 | 	add	fp, #4
2dc20     A7 12 02 FB | 	rdlong	arg01, fp
2dc24     04 4E 85 F1 | 	sub	fp, #4
2dc28     20 12 06 F1 | 	add	arg01, #32
2dc2c     20 14 06 F6 | 	mov	arg02, #32
2dc30     0B 16 06 F6 | 	mov	arg03, #11
2dc34     09 3F 02 F6 | 	mov	local13, arg01
2dc38     98 00 A0 FD | 	call	#\builtin_bytefill_
2dc3c     1F FB 01 F6 | 	mov	result1, local13
2dc40     0C 4E 05 F1 | 	add	fp, #12
2dc44     A7 00 48 FC | 	wrbyte	#0, fp
2dc48     A7 32 C2 FA | 	rdbyte	local07, fp
2dc4c     14 4E 05 F1 | 	add	fp, #20
2dc50     A7 32 62 FC | 	wrlong	local07, fp
2dc54     04 4E 05 F1 | 	add	fp, #4
2dc58     A7 10 68 FC | 	wrlong	#8, fp
2dc5c     24 4E 85 F1 | 	sub	fp, #36
2dc60                 | ' 
2dc60                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2dc60                 | ' 	i = b = 0; ni = 8;
2dc60                 | ' 	for (;;) {
2dc60                 | LR__4610
2dc60     18 4E 05 F1 | 	add	fp, #24
2dc64     A7 2A 02 FB | 	rdlong	local03, fp
2dc68     10 4E 05 F1 | 	add	fp, #16
2dc6c     A7 36 02 FB | 	rdlong	local09, fp
2dc70     1B 2D 02 F6 | 	mov	local04, local09
2dc74     01 2C 06 F1 | 	add	local04, #1
2dc78     A7 2C 62 FC | 	wrlong	local04, fp
2dc7c     01 36 66 F0 | 	shl	local09, #1
2dc80     15 37 02 F1 | 	add	local09, local03
2dc84     1B 31 E2 FA | 	rdword	local06, local09
2dc88     14 4E 85 F1 | 	sub	fp, #20
2dc8c     A7 30 52 FC | 	wrword	local06, fp
2dc90     A7 32 EA FA | 	rdword	local07, fp wz
2dc94     14 4E 85 F1 | 	sub	fp, #20
2dc98     74 03 90 AD |  if_e	jmp	#LR__4626
2dc9c     14 4E 05 F1 | 	add	fp, #20
2dca0     A7 32 E2 FA | 	rdword	local07, fp
2dca4     14 4E 85 F1 | 	sub	fp, #20
2dca8     20 32 0E F2 | 	cmp	local07, #32 wz
2dcac     30 00 90 AD |  if_e	jmp	#LR__4611
2dcb0     14 4E 05 F1 | 	add	fp, #20
2dcb4     A7 26 E2 FA | 	rdword	local01, fp
2dcb8     14 4E 85 F1 | 	sub	fp, #20
2dcbc     2E 26 0E F2 | 	cmp	local01, #46 wz
2dcc0     34 00 90 5D |  if_ne	jmp	#LR__4612
2dcc4     28 4E 05 F1 | 	add	fp, #40
2dcc8     A7 2C 02 FB | 	rdlong	local04, fp
2dccc     04 4E 05 F1 | 	add	fp, #4
2dcd0     A7 38 02 FB | 	rdlong	local10, fp
2dcd4     2C 4E 85 F1 | 	sub	fp, #44
2dcd8     1C 2D 0A F2 | 	cmp	local04, local10 wz
2dcdc     18 00 90 AD |  if_e	jmp	#LR__4612
2dce0                 | LR__4611
2dce0     10 4E 05 F1 | 	add	fp, #16
2dce4     A7 32 C2 FA | 	rdbyte	local07, fp
2dce8     03 32 46 F5 | 	or	local07, #3
2dcec     A7 32 42 FC | 	wrbyte	local07, fp
2dcf0     10 4E 85 F1 | 	sub	fp, #16
2dcf4                 | ' 			cf |=  0x01  |  0x02 ;
2dcf4                 | ' 			continue;
2dcf4     68 FF 9F FD | 	jmp	#LR__4610
2dcf8                 | LR__4612
2dcf8     20 4E 05 F1 | 	add	fp, #32
2dcfc     A7 32 02 FB | 	rdlong	local07, fp
2dd00     04 4E 05 F1 | 	add	fp, #4
2dd04     A7 26 02 FB | 	rdlong	local01, fp
2dd08     24 4E 85 F1 | 	sub	fp, #36
2dd0c     13 33 12 F2 | 	cmp	local07, local01 wc
2dd10     1C 00 90 3D |  if_ae	jmp	#LR__4613
2dd14     28 4E 05 F1 | 	add	fp, #40
2dd18     A7 34 02 FB | 	rdlong	local08, fp
2dd1c     04 4E 05 F1 | 	add	fp, #4
2dd20     A7 38 02 FB | 	rdlong	local10, fp
2dd24     2C 4E 85 F1 | 	sub	fp, #44
2dd28     1C 35 0A F2 | 	cmp	local08, local10 wz
2dd2c     B0 00 90 5D |  if_ne	jmp	#LR__4615
2dd30                 | LR__4613
2dd30     24 4E 05 F1 | 	add	fp, #36
2dd34     A7 32 02 FB | 	rdlong	local07, fp
2dd38     24 4E 85 F1 | 	sub	fp, #36
2dd3c     0B 32 0E F2 | 	cmp	local07, #11 wz
2dd40     18 00 90 5D |  if_ne	jmp	#LR__4614
2dd44     10 4E 05 F1 | 	add	fp, #16
2dd48     A7 32 C2 FA | 	rdbyte	local07, fp
2dd4c     03 32 46 F5 | 	or	local07, #3
2dd50     A7 32 42 FC | 	wrbyte	local07, fp
2dd54     10 4E 85 F1 | 	sub	fp, #16
2dd58                 | ' 				cf |=  0x01  |  0x02 ;
2dd58                 | ' 				break;
2dd58     B4 02 90 FD | 	jmp	#LR__4626
2dd5c                 | LR__4614
2dd5c     28 4E 05 F1 | 	add	fp, #40
2dd60     A7 32 02 FB | 	rdlong	local07, fp
2dd64     04 4E 05 F1 | 	add	fp, #4
2dd68     A7 26 02 FB | 	rdlong	local01, fp
2dd6c     2C 4E 85 F1 | 	sub	fp, #44
2dd70     13 33 0A F2 | 	cmp	local07, local01 wz
2dd74     10 4E 05 51 |  if_ne	add	fp, #16
2dd78     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2dd7c     03 32 46 55 |  if_ne	or	local07, #3
2dd80     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2dd84     10 4E 85 51 |  if_ne	sub	fp, #16
2dd88     28 4E 05 F1 | 	add	fp, #40
2dd8c     A7 32 02 FB | 	rdlong	local07, fp
2dd90     04 4E 05 F1 | 	add	fp, #4
2dd94     A7 28 02 FB | 	rdlong	local02, fp
2dd98     2C 4E 85 F1 | 	sub	fp, #44
2dd9c     14 33 1A F2 | 	cmp	local07, local02 wcz
2dda0     6C 02 90 1D |  if_a	jmp	#LR__4626
2dda4     2C 4E 05 F1 | 	add	fp, #44
2dda8     A7 32 02 FB | 	rdlong	local07, fp
2ddac     04 4E 85 F1 | 	sub	fp, #4
2ddb0     A7 32 62 FC | 	wrlong	local07, fp
2ddb4     08 4E 85 F1 | 	sub	fp, #8
2ddb8     A7 10 68 FC | 	wrlong	#8, fp
2ddbc     04 4E 05 F1 | 	add	fp, #4
2ddc0     A7 16 68 FC | 	wrlong	#11, fp
2ddc4     18 4E 85 F1 | 	sub	fp, #24
2ddc8     A7 3A C2 FA | 	rdbyte	local11, fp
2ddcc     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2ddd0     02 32 66 F0 | 	shl	local07, #2
2ddd4     A7 32 42 FC | 	wrbyte	local07, fp
2ddd8     0C 4E 85 F1 | 	sub	fp, #12
2dddc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2dddc                 | ' 			continue;
2dddc     80 FE 9F FD | 	jmp	#LR__4610
2dde0                 | LR__4615
2dde0     14 4E 05 F1 | 	add	fp, #20
2dde4     A7 32 E2 FA | 	rdword	local07, fp
2dde8     14 4E 85 F1 | 	sub	fp, #20
2ddec     80 32 16 F2 | 	cmp	local07, #128 wc
2ddf0     6C 00 90 CD |  if_b	jmp	#LR__4617
2ddf4     10 4E 05 F1 | 	add	fp, #16
2ddf8     A7 32 C2 FA | 	rdbyte	local07, fp
2ddfc     02 32 46 F5 | 	or	local07, #2
2de00     A7 32 42 FC | 	wrbyte	local07, fp
2de04     04 4E 05 F1 | 	add	fp, #4
2de08     A7 12 E2 FA | 	rdword	arg01, fp
2de0c     14 4E 85 F1 | 	sub	fp, #20
2de10     01 00 00 FF 
2de14     52 15 06 F6 | 	mov	arg02, ##850
2de18     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2de1c     14 4E 05 F1 | 	add	fp, #20
2de20     A7 FA 51 FC | 	wrword	result1, fp
2de24     A7 32 E2 FA | 	rdword	local07, fp
2de28     14 4E 85 F1 | 	sub	fp, #20
2de2c     80 32 CE F7 | 	test	local07, #128 wz
2de30     2C 00 90 AD |  if_e	jmp	#LR__4616
2de34     14 4E 05 F1 | 	add	fp, #20
2de38     A7 28 E2 FA | 	rdword	local02, fp
2de3c     7F 28 06 F5 | 	and	local02, #127
2de40     01 00 00 FF 
2de44     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2de48     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2de4c     14 33 C2 FA | 	rdbyte	local07, local02
2de50     A7 32 52 FC | 	wrword	local07, fp
2de54     14 4E 85 F1 | 	sub	fp, #20
2de58     01 00 00 FF 
2de5c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2de60                 | LR__4616
2de60                 | LR__4617
2de60     14 4E 05 F1 | 	add	fp, #20
2de64     A7 32 E2 FA | 	rdword	local07, fp
2de68     14 4E 85 F1 | 	sub	fp, #20
2de6c     00 33 16 F2 | 	cmp	local07, #256 wc
2de70     88 00 90 CD |  if_b	jmp	#LR__4619
2de74     24 4E 05 F1 | 	add	fp, #36
2de78     A7 32 02 FB | 	rdlong	local07, fp
2de7c     01 32 86 F1 | 	sub	local07, #1
2de80     04 4E 85 F1 | 	sub	fp, #4
2de84     A7 28 02 FB | 	rdlong	local02, fp
2de88     20 4E 85 F1 | 	sub	fp, #32
2de8c     19 29 12 F2 | 	cmp	local02, local07 wc
2de90     2C 00 90 CD |  if_b	jmp	#LR__4618
2de94     10 4E 05 F1 | 	add	fp, #16
2de98     A7 3A C2 FA | 	rdbyte	local11, fp
2de9c     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2dea0     03 32 46 F5 | 	or	local07, #3
2dea4     A7 32 42 FC | 	wrbyte	local07, fp
2dea8     14 4E 05 F1 | 	add	fp, #20
2deac     A7 32 02 FB | 	rdlong	local07, fp
2deb0     04 4E 85 F1 | 	sub	fp, #4
2deb4     A7 32 62 FC | 	wrlong	local07, fp
2deb8     20 4E 85 F1 | 	sub	fp, #32
2debc                 | ' 				cf |=  0x01  |  0x02 ;
2debc                 | ' 				i = ni; continue;
2debc     A0 FD 9F FD | 	jmp	#LR__4610
2dec0                 | LR__4618
2dec0     04 4E 05 F1 | 	add	fp, #4
2dec4     A7 36 02 FB | 	rdlong	local09, fp
2dec8     1C 4E 05 F1 | 	add	fp, #28
2decc     A7 38 02 FB | 	rdlong	local10, fp
2ded0     1C 2D 02 F6 | 	mov	local04, local10
2ded4     01 2C 06 F1 | 	add	local04, #1
2ded8     A7 2C 62 FC | 	wrlong	local04, fp
2dedc     20 36 06 F1 | 	add	local09, #32
2dee0     1B 39 02 F1 | 	add	local10, local09
2dee4     0C 4E 85 F1 | 	sub	fp, #12
2dee8     A7 2A E2 FA | 	rdword	local03, fp
2deec     14 4E 85 F1 | 	sub	fp, #20
2def0     08 2A 46 F0 | 	shr	local03, #8
2def4     1C 2B 42 FC | 	wrbyte	local03, local10
2def8     D4 00 90 FD | 	jmp	#LR__4625
2defc                 | LR__4619
2defc     14 4E 05 F1 | 	add	fp, #20
2df00     A7 32 EA FA | 	rdword	local07, fp wz
2df04     14 4E 85 F1 | 	sub	fp, #20
2df08     20 00 90 AD |  if_e	jmp	#LR__4620
2df0c     9C 01 00 FF 
2df10     9D 12 06 F6 | 	mov	arg01, ##@LR__5253
2df14     14 4E 05 F1 | 	add	fp, #20
2df18     A7 14 E2 FA | 	rdword	arg02, fp
2df1c     14 4E 85 F1 | 	sub	fp, #20
2df20     48 CB BF FD | 	call	#_fatfs_cc_strchr
2df24     00 FA 0D F2 | 	cmp	result1, #0 wz
2df28     20 00 90 AD |  if_e	jmp	#LR__4621
2df2c                 | LR__4620
2df2c     14 4E 05 F1 | 	add	fp, #20
2df30     A7 BE 58 FC | 	wrword	#95, fp
2df34     04 4E 85 F1 | 	sub	fp, #4
2df38     A7 32 C2 FA | 	rdbyte	local07, fp
2df3c     03 32 46 F5 | 	or	local07, #3
2df40     A7 32 42 FC | 	wrbyte	local07, fp
2df44     10 4E 85 F1 | 	sub	fp, #16
2df48     84 00 90 FD | 	jmp	#LR__4624
2df4c                 | LR__4621
2df4c     14 4E 05 F1 | 	add	fp, #20
2df50     A7 32 E2 FA | 	rdword	local07, fp
2df54     14 4E 85 F1 | 	sub	fp, #20
2df58     41 32 16 F2 | 	cmp	local07, #65 wc
2df5c     24 00 90 CD |  if_b	jmp	#LR__4622
2df60     14 4E 05 F1 | 	add	fp, #20
2df64     A7 26 E2 FA | 	rdword	local01, fp
2df68     14 4E 85 F1 | 	sub	fp, #20
2df6c     5B 26 16 F2 | 	cmp	local01, #91 wc
2df70     0C 4E 05 C1 |  if_b	add	fp, #12
2df74     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2df78     02 32 46 C5 |  if_b	or	local07, #2
2df7c     A7 32 42 CC |  if_b	wrbyte	local07, fp
2df80     0C 4E 85 C1 |  if_b	sub	fp, #12
2df84                 | LR__4622
2df84     14 4E 05 F1 | 	add	fp, #20
2df88     A7 32 E2 FA | 	rdword	local07, fp
2df8c     14 4E 85 F1 | 	sub	fp, #20
2df90     61 32 16 F2 | 	cmp	local07, #97 wc
2df94     38 00 90 CD |  if_b	jmp	#LR__4623
2df98     14 4E 05 F1 | 	add	fp, #20
2df9c     A7 26 E2 FA | 	rdword	local01, fp
2dfa0     14 4E 85 F1 | 	sub	fp, #20
2dfa4     7B 26 16 F2 | 	cmp	local01, #123 wc
2dfa8     24 00 90 3D |  if_ae	jmp	#LR__4623
2dfac     0C 4E 05 F1 | 	add	fp, #12
2dfb0     A7 32 C2 FA | 	rdbyte	local07, fp
2dfb4     01 32 46 F5 | 	or	local07, #1
2dfb8     A7 32 42 FC | 	wrbyte	local07, fp
2dfbc     08 4E 05 F1 | 	add	fp, #8
2dfc0     A7 32 E2 FA | 	rdword	local07, fp
2dfc4     20 32 86 F1 | 	sub	local07, #32
2dfc8     A7 32 52 FC | 	wrword	local07, fp
2dfcc     14 4E 85 F1 | 	sub	fp, #20
2dfd0                 | LR__4623
2dfd0                 | LR__4624
2dfd0                 | LR__4625
2dfd0     04 4E 05 F1 | 	add	fp, #4
2dfd4     A7 3A 02 FB | 	rdlong	local11, fp
2dfd8     1D 37 02 F6 | 	mov	local09, local11
2dfdc     1C 4E 05 F1 | 	add	fp, #28
2dfe0     A7 28 02 FB | 	rdlong	local02, fp
2dfe4     14 2D 02 F6 | 	mov	local04, local02
2dfe8     01 2C 06 F1 | 	add	local04, #1
2dfec     A7 2C 62 FC | 	wrlong	local04, fp
2dff0     14 39 02 F6 | 	mov	local10, local02
2dff4     20 36 06 F1 | 	add	local09, #32
2dff8     1B 39 02 F1 | 	add	local10, local09
2dffc     0C 4E 85 F1 | 	sub	fp, #12
2e000     A7 2A E2 FA | 	rdword	local03, fp
2e004     14 4E 85 F1 | 	sub	fp, #20
2e008     1C 2B 42 FC | 	wrbyte	local03, local10
2e00c     50 FC 9F FD | 	jmp	#LR__4610
2e010                 | LR__4626
2e010     04 4E 05 F1 | 	add	fp, #4
2e014     A7 3A 02 FB | 	rdlong	local11, fp
2e018     04 4E 85 F1 | 	sub	fp, #4
2e01c     20 3A 06 F1 | 	add	local11, #32
2e020     1D 33 C2 FA | 	rdbyte	local07, local11
2e024     E5 32 0E F2 | 	cmp	local07, #229 wz
2e028     04 4E 05 A1 |  if_e	add	fp, #4
2e02c     A7 32 02 AB |  if_e	rdlong	local07, fp
2e030     04 4E 85 A1 |  if_e	sub	fp, #4
2e034     20 32 06 A1 |  if_e	add	local07, #32
2e038     19 0B 48 AC |  if_e	wrbyte	#5, local07
2e03c     24 4E 05 F1 | 	add	fp, #36
2e040     A7 32 02 FB | 	rdlong	local07, fp
2e044     24 4E 85 F1 | 	sub	fp, #36
2e048     08 32 0E F2 | 	cmp	local07, #8 wz
2e04c     0C 4E 05 A1 |  if_e	add	fp, #12
2e050     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2e054     02 32 66 A0 |  if_e	shl	local07, #2
2e058     A7 32 42 AC |  if_e	wrbyte	local07, fp
2e05c     0C 4E 85 A1 |  if_e	sub	fp, #12
2e060     0C 4E 05 F1 | 	add	fp, #12
2e064     A7 32 C2 FA | 	rdbyte	local07, fp
2e068     0C 4E 85 F1 | 	sub	fp, #12
2e06c     0C 32 06 F5 | 	and	local07, #12
2e070     0C 32 0E F2 | 	cmp	local07, #12 wz
2e074     18 00 90 AD |  if_e	jmp	#LR__4627
2e078     0C 4E 05 F1 | 	add	fp, #12
2e07c     A7 26 C2 FA | 	rdbyte	local01, fp
2e080     0C 4E 85 F1 | 	sub	fp, #12
2e084     03 26 06 F5 | 	and	local01, #3
2e088     03 26 0E F2 | 	cmp	local01, #3 wz
2e08c     14 00 90 5D |  if_ne	jmp	#LR__4628
2e090                 | LR__4627
2e090     10 4E 05 F1 | 	add	fp, #16
2e094     A7 32 C2 FA | 	rdbyte	local07, fp
2e098     02 32 46 F5 | 	or	local07, #2
2e09c     A7 32 42 FC | 	wrbyte	local07, fp
2e0a0     10 4E 85 F1 | 	sub	fp, #16
2e0a4                 | LR__4628
2e0a4     10 4E 05 F1 | 	add	fp, #16
2e0a8     A7 32 C2 FA | 	rdbyte	local07, fp
2e0ac     10 4E 85 F1 | 	sub	fp, #16
2e0b0     02 32 CE F7 | 	test	local07, #2 wz
2e0b4     48 00 90 5D |  if_ne	jmp	#LR__4629
2e0b8     0C 4E 05 F1 | 	add	fp, #12
2e0bc     A7 32 C2 FA | 	rdbyte	local07, fp
2e0c0     0C 4E 85 F1 | 	sub	fp, #12
2e0c4     01 32 CE F7 | 	test	local07, #1 wz
2e0c8     10 4E 05 51 |  if_ne	add	fp, #16
2e0cc     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2e0d0     10 32 46 55 |  if_ne	or	local07, #16
2e0d4     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2e0d8     10 4E 85 51 |  if_ne	sub	fp, #16
2e0dc     0C 4E 05 F1 | 	add	fp, #12
2e0e0     A7 32 C2 FA | 	rdbyte	local07, fp
2e0e4     0C 4E 85 F1 | 	sub	fp, #12
2e0e8     04 32 CE F7 | 	test	local07, #4 wz
2e0ec     10 4E 05 51 |  if_ne	add	fp, #16
2e0f0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2e0f4     08 32 46 55 |  if_ne	or	local07, #8
2e0f8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2e0fc     10 4E 85 51 |  if_ne	sub	fp, #16
2e100                 | LR__4629
2e100     04 4E 05 F1 | 	add	fp, #4
2e104     A7 32 02 FB | 	rdlong	local07, fp
2e108     0C 4E 05 F1 | 	add	fp, #12
2e10c     A7 26 C2 FA | 	rdbyte	local01, fp
2e110     10 4E 85 F1 | 	sub	fp, #16
2e114     2B 32 06 F1 | 	add	local07, #43
2e118     19 27 42 FC | 	wrbyte	local01, local07
2e11c                 | ' 	}
2e11c                 | ' 
2e11c                 | ' 	dp->fn[ 11 ] = cf;
2e11c                 | ' 
2e11c                 | ' 	return FR_OK;
2e11c     00 FA 05 F6 | 	mov	result1, #0
2e120                 | LR__4630
2e120     A7 F0 03 F6 | 	mov	ptra, fp
2e124     B2 00 A0 FD | 	call	#popregs_
2e128                 | _fatfs_cc_create_name_ret
2e128     2D 00 64 FD | 	ret
2e12c                 | 
2e12c                 | _fatfs_cc_follow_path
2e12c     02 4A 05 F6 | 	mov	COUNT_, #2
2e130     A8 00 A0 FD | 	call	#pushregs_
2e134     18 F0 07 F1 | 	add	ptra, #24
2e138     04 4E 05 F1 | 	add	fp, #4
2e13c     A7 12 62 FC | 	wrlong	arg01, fp
2e140     04 4E 05 F1 | 	add	fp, #4
2e144     A7 14 62 FC | 	wrlong	arg02, fp
2e148     04 4E 85 F1 | 	sub	fp, #4
2e14c     A7 FA 01 FB | 	rdlong	result1, fp
2e150     FD 26 02 FB | 	rdlong	local01, result1
2e154     10 4E 05 F1 | 	add	fp, #16
2e158     A7 26 62 FC | 	wrlong	local01, fp
2e15c     14 4E 85 F1 | 	sub	fp, #20
2e160     97 24 48 FB | 	callpa	#(@LR__4642-@LR__4640)>>2,fcache_load_ptr_
2e164                 | ' )
2e164                 | ' {
2e164                 | ' 	FRESULT res;
2e164                 | ' 	BYTE ns;
2e164                 | ' 	FATFS *fs = dp->obj.fs;
2e164                 | ' #line 3034 "ff.c"
2e164                 | ' 	{
2e164                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2e164                 | LR__4640
2e164     08 4E 05 F1 | 	add	fp, #8
2e168     A7 26 02 FB | 	rdlong	local01, fp
2e16c     08 4E 85 F1 | 	sub	fp, #8
2e170     13 27 C2 FA | 	rdbyte	local01, local01
2e174     2F 26 0E F2 | 	cmp	local01, #47 wz
2e178     18 00 90 AD |  if_e	jmp	#LR__4641
2e17c     08 4E 05 F1 | 	add	fp, #8
2e180     A7 26 02 FB | 	rdlong	local01, fp
2e184     08 4E 85 F1 | 	sub	fp, #8
2e188     13 27 C2 FA | 	rdbyte	local01, local01
2e18c     5C 26 0E F2 | 	cmp	local01, #92 wz
2e190     18 00 90 5D |  if_ne	jmp	#LR__4643
2e194                 | LR__4641
2e194     08 4E 05 F1 | 	add	fp, #8
2e198     A7 26 02 FB | 	rdlong	local01, fp
2e19c     01 26 06 F1 | 	add	local01, #1
2e1a0     A7 26 62 FC | 	wrlong	local01, fp
2e1a4     08 4E 85 F1 | 	sub	fp, #8
2e1a8     B8 FF 9F FD | 	jmp	#LR__4640
2e1ac                 | LR__4642
2e1ac                 | LR__4643
2e1ac     04 4E 05 F1 | 	add	fp, #4
2e1b0     A7 26 02 FB | 	rdlong	local01, fp
2e1b4     08 26 06 F1 | 	add	local01, #8
2e1b8     13 01 68 FC | 	wrlong	#0, local01
2e1bc     04 4E 05 F1 | 	add	fp, #4
2e1c0     A7 26 02 FB | 	rdlong	local01, fp
2e1c4     08 4E 85 F1 | 	sub	fp, #8
2e1c8     13 27 C2 FA | 	rdbyte	local01, local01
2e1cc     20 26 16 F2 | 	cmp	local01, #32 wc
2e1d0     30 00 90 3D |  if_ae	jmp	#LR__4644
2e1d4     04 4E 05 F1 | 	add	fp, #4
2e1d8     A7 26 02 FB | 	rdlong	local01, fp
2e1dc     2B 26 06 F1 | 	add	local01, #43
2e1e0     13 01 49 FC | 	wrbyte	#128, local01
2e1e4     A7 12 02 FB | 	rdlong	arg01, fp
2e1e8     04 4E 85 F1 | 	sub	fp, #4
2e1ec     00 14 06 F6 | 	mov	arg02, #0
2e1f0     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e1f4     0C 4E 05 F1 | 	add	fp, #12
2e1f8     A7 FA 61 FC | 	wrlong	result1, fp
2e1fc     0C 4E 85 F1 | 	sub	fp, #12
2e200     1C 01 90 FD | 	jmp	#LR__4648
2e204                 | LR__4644
2e204                 | ' 		for (;;) {
2e204                 | LR__4645
2e204     04 4E 05 F1 | 	add	fp, #4
2e208     A7 12 02 FB | 	rdlong	arg01, fp
2e20c     04 4E 05 F1 | 	add	fp, #4
2e210     A7 14 02 F6 | 	mov	arg02, fp
2e214     08 4E 85 F1 | 	sub	fp, #8
2e218     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2e21c     0C 4E 05 F1 | 	add	fp, #12
2e220     A7 FA 61 FC | 	wrlong	result1, fp
2e224     00 FA 4D F2 | 	cmps	result1, #0 wz
2e228     0C 4E 85 F1 | 	sub	fp, #12
2e22c     F0 00 90 5D |  if_ne	jmp	#LR__4647
2e230     04 4E 05 F1 | 	add	fp, #4
2e234     A7 12 02 FB | 	rdlong	arg01, fp
2e238     04 4E 85 F1 | 	sub	fp, #4
2e23c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2e240     0C 4E 05 F1 | 	add	fp, #12
2e244     A7 FA 61 FC | 	wrlong	result1, fp
2e248     08 4E 85 F1 | 	sub	fp, #8
2e24c     A7 26 02 FB | 	rdlong	local01, fp
2e250     2B 26 06 F1 | 	add	local01, #43
2e254     13 27 C2 FA | 	rdbyte	local01, local01
2e258     0C 4E 05 F1 | 	add	fp, #12
2e25c     A7 26 42 FC | 	wrbyte	local01, fp
2e260     04 4E 85 F1 | 	sub	fp, #4
2e264     A7 26 0A FB | 	rdlong	local01, fp wz
2e268     0C 4E 85 F1 | 	sub	fp, #12
2e26c     34 00 90 AD |  if_e	jmp	#LR__4646
2e270     0C 4E 05 F1 | 	add	fp, #12
2e274     A7 26 02 FB | 	rdlong	local01, fp
2e278     0C 4E 85 F1 | 	sub	fp, #12
2e27c     04 26 0E F2 | 	cmp	local01, #4 wz
2e280     9C 00 90 5D |  if_ne	jmp	#LR__4647
2e284     10 4E 05 F1 | 	add	fp, #16
2e288     A7 26 C2 FA | 	rdbyte	local01, fp
2e28c     10 4E 85 F1 | 	sub	fp, #16
2e290     04 26 CE F7 | 	test	local01, #4 wz
2e294     0C 4E 05 A1 |  if_e	add	fp, #12
2e298     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e29c     0C 4E 85 A1 |  if_e	sub	fp, #12
2e2a0                 | ' 					}
2e2a0                 | ' 				}
2e2a0                 | ' 				break;
2e2a0     7C 00 90 FD | 	jmp	#LR__4647
2e2a4                 | LR__4646
2e2a4     10 4E 05 F1 | 	add	fp, #16
2e2a8     A7 26 C2 FA | 	rdbyte	local01, fp
2e2ac     10 4E 85 F1 | 	sub	fp, #16
2e2b0     04 26 CE F7 | 	test	local01, #4 wz
2e2b4     68 00 90 5D |  if_ne	jmp	#LR__4647
2e2b8     04 4E 05 F1 | 	add	fp, #4
2e2bc     A7 26 02 FB | 	rdlong	local01, fp
2e2c0     04 4E 85 F1 | 	sub	fp, #4
2e2c4     06 26 06 F1 | 	add	local01, #6
2e2c8     13 27 C2 FA | 	rdbyte	local01, local01
2e2cc     10 26 CE F7 | 	test	local01, #16 wz
2e2d0     0C 4E 05 A1 |  if_e	add	fp, #12
2e2d4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e2d8     0C 4E 85 A1 |  if_e	sub	fp, #12
2e2dc                 | ' 				res = FR_NO_PATH; break;
2e2dc     40 00 90 AD |  if_e	jmp	#LR__4647
2e2e0     04 4E 05 F1 | 	add	fp, #4
2e2e4     A7 28 02 FB | 	rdlong	local02, fp
2e2e8     14 27 02 F6 | 	mov	local01, local02
2e2ec     10 4E 05 F1 | 	add	fp, #16
2e2f0     A7 14 02 FB | 	rdlong	arg02, fp
2e2f4     0A 13 02 F6 | 	mov	arg01, arg02
2e2f8     34 14 06 F1 | 	add	arg02, #52
2e2fc     14 4E 85 F1 | 	sub	fp, #20
2e300     10 28 06 F1 | 	add	local02, #16
2e304     14 29 02 FB | 	rdlong	local02, local02
2e308     FF 29 06 F5 | 	and	local02, #511
2e30c     14 15 02 F1 | 	add	arg02, local02
2e310     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2e314     08 26 06 F1 | 	add	local01, #8
2e318     13 FB 61 FC | 	wrlong	result1, local01
2e31c     E4 FE 9F FD | 	jmp	#LR__4645
2e320                 | LR__4647
2e320                 | LR__4648
2e320                 | ' 			}
2e320                 | ' #line 3090 "ff.c"
2e320                 | ' 			{
2e320                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2e320                 | ' 			}
2e320                 | ' 		}
2e320                 | ' 	}
2e320                 | ' 
2e320                 | ' 	return res;
2e320     0C 4E 05 F1 | 	add	fp, #12
2e324     A7 FA 01 FB | 	rdlong	result1, fp
2e328     0C 4E 85 F1 | 	sub	fp, #12
2e32c     A7 F0 03 F6 | 	mov	ptra, fp
2e330     B2 00 A0 FD | 	call	#popregs_
2e334                 | _fatfs_cc_follow_path_ret
2e334     2D 00 64 FD | 	ret
2e338                 | 
2e338                 | _fatfs_cc_get_ldnumber
2e338     01 00 66 F6 | 	neg	_var01, #1
2e33c     09 03 0A FB | 	rdlong	_var02, arg01 wz
2e340     01 05 02 F6 | 	mov	_var03, _var02
2e344     01 FA 65 A6 |  if_e	neg	result1, #1
2e348     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2e34c     97 10 48 FB | 	callpa	#(@LR__4651-@LR__4650)>>2,fcache_load_ptr_
2e350                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2e350                 | LR__4650
2e350     02 07 C2 FA | 	rdbyte	_var04, _var03
2e354     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2e358     20 FA 15 F2 | 	cmp	result1, #32 wc
2e35c     01 04 06 F1 | 	add	_var03, #1
2e360     03 09 02 36 |  if_ae	mov	_var05, _var04
2e364     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2e368     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2e36c     E0 FF 9F 1D |  if_a	jmp	#LR__4650
2e370                 | LR__4651
2e370     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2e374     3A 06 0E F2 | 	cmp	_var04, #58 wz
2e378     40 00 90 5D |  if_ne	jmp	#LR__4653
2e37c     01 0A 06 F6 | 	mov	_var06, #1
2e380     01 09 C2 FA | 	rdbyte	_var05, _var02
2e384     30 08 16 F2 | 	cmp	_var05, #48 wc
2e388     1C 00 90 CD |  if_b	jmp	#LR__4652
2e38c     01 09 C2 FA | 	rdbyte	_var05, _var02
2e390     3A 08 16 F2 | 	cmp	_var05, #58 wc
2e394     01 0D 02 C6 |  if_b	mov	_var07, _var02
2e398     02 0C 06 C1 |  if_b	add	_var07, #2
2e39c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2e3a0     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2e3a4     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2e3a8                 | LR__4652
2e3a8     01 0A 56 F2 | 	cmps	_var06, #1 wc
2e3ac     05 01 02 C6 |  if_b	mov	_var01, _var06
2e3b0     09 05 62 CC |  if_b	wrlong	_var03, arg01
2e3b4                 | ' 			vol = i;
2e3b4                 | ' 			*path = tt;
2e3b4                 | ' 		}
2e3b4                 | ' 		return vol;
2e3b4     00 FB 01 F6 | 	mov	result1, _var01
2e3b8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2e3bc                 | LR__4653
2e3bc                 | ' 	}
2e3bc                 | ' #line 3170 "ff.c"
2e3bc                 | ' 	vol = 0;
2e3bc                 | ' 
2e3bc                 | ' 	return vol;
2e3bc     00 FA 05 F6 | 	mov	result1, #0
2e3c0                 | _fatfs_cc_get_ldnumber_ret
2e3c0     2D 00 64 FD | 	ret
2e3c4                 | 
2e3c4                 | _fatfs_cc_check_fs
2e3c4     04 4A 05 F6 | 	mov	COUNT_, #4
2e3c8     A8 00 A0 FD | 	call	#pushregs_
2e3cc     09 27 02 F6 | 	mov	local01, arg01
2e3d0     03 26 06 F1 | 	add	local01, #3
2e3d4     13 01 48 FC | 	wrbyte	#0, local01
2e3d8     2D 26 06 F1 | 	add	local01, #45
2e3dc     FF FF FF FF 
2e3e0     13 FF 6B FC | 	wrlong	##-1, local01
2e3e4     30 26 86 F1 | 	sub	local01, #48
2e3e8     13 13 02 F6 | 	mov	arg01, local01
2e3ec     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2e3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3f4     04 FA 05 56 |  if_ne	mov	result1, #4
2e3f8     94 01 90 5D |  if_ne	jmp	#LR__4664
2e3fc     34 26 06 F1 | 	add	local01, #52
2e400     13 13 02 F6 | 	mov	arg01, local01
2e404     FE 13 06 F1 | 	add	arg01, #510
2e408                 | ' {
2e408                 | ' 
2e408                 | ' 	return *((WORD*)ptr);
2e408     09 29 E2 FA | 	rdword	local02, arg01
2e40c     13 2B C2 FA | 	rdbyte	local03, local01
2e410     34 26 86 F1 | 	sub	local01, #52
2e414     15 2D E2 F8 | 	getbyte	local04, local03, #0
2e418     EB 2C 0E F2 | 	cmp	local04, #235 wz
2e41c     15 17 02 56 |  if_ne	mov	arg03, local03
2e420     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2e424     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2e428     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2e42c     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2e430     44 01 90 5D |  if_ne	jmp	#LR__4663
2e434     14 2D 32 F9 | 	getword	local04, local02, #0
2e438     55 00 00 FF 
2e43c     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2e440     2C 00 90 5D |  if_ne	jmp	#LR__4660
2e444     34 26 06 F1 | 	add	local01, #52
2e448     13 13 02 F6 | 	mov	arg01, local01
2e44c     34 26 86 F1 | 	sub	local01, #52
2e450     52 12 06 F1 | 	add	arg01, #82
2e454     9C 01 00 FF 
2e458     A4 14 06 F6 | 	mov	arg02, ##@LR__5254
2e45c     08 16 06 F6 | 	mov	arg03, #8
2e460     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2e464     00 FA 0D F2 | 	cmp	result1, #0 wz
2e468                 | ' 			return 0;
2e468     00 FA 05 A6 |  if_e	mov	result1, #0
2e46c     20 01 90 AD |  if_e	jmp	#LR__4664
2e470                 | LR__4660
2e470     34 26 06 F1 | 	add	local01, #52
2e474     13 13 02 F6 | 	mov	arg01, local01
2e478     0B 12 06 F1 | 	add	arg01, #11
2e47c                 | ' {
2e47c                 | ' 
2e47c                 | ' 	return *((WORD*)ptr);
2e47c     09 FB E1 FA | 	rdword	result1, arg01
2e480     0D 26 06 F1 | 	add	local01, #13
2e484     13 2B C2 FA | 	rdbyte	local03, local01
2e488     41 26 86 F1 | 	sub	local01, #65
2e48c     FD 2C 32 F9 | 	getword	local04, result1, #0
2e490     FD 14 32 F9 | 	getword	arg02, result1, #0
2e494     01 14 86 F1 | 	sub	arg02, #1
2e498     0A 2D CA F7 | 	test	local04, arg02 wz
2e49c     D8 00 90 5D |  if_ne	jmp	#LR__4662
2e4a0     FD 14 32 F9 | 	getword	arg02, result1, #0
2e4a4     01 00 00 FF 
2e4a8     00 14 16 F2 | 	cmp	arg02, ##512 wc
2e4ac     C8 00 90 CD |  if_b	jmp	#LR__4662
2e4b0     FD 14 32 F9 | 	getword	arg02, result1, #0
2e4b4     01 00 00 FF 
2e4b8     01 14 16 F2 | 	cmp	arg02, ##513 wc
2e4bc     B8 00 90 3D |  if_ae	jmp	#LR__4662
2e4c0     15 13 02 F6 | 	mov	arg01, local03
2e4c4     07 12 4E F7 | 	zerox	arg01, #7 wz
2e4c8     AC 00 90 AD |  if_e	jmp	#LR__4662
2e4cc     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2e4d0     15 2B E2 F8 | 	getbyte	local03, local03, #0
2e4d4     01 2A 86 F1 | 	sub	local03, #1
2e4d8     15 13 CA F7 | 	test	arg01, local03 wz
2e4dc     98 00 90 5D |  if_ne	jmp	#LR__4662
2e4e0     34 26 06 F1 | 	add	local01, #52
2e4e4     13 13 02 F6 | 	mov	arg01, local01
2e4e8     34 26 86 F1 | 	sub	local01, #52
2e4ec     0E 12 06 F1 | 	add	arg01, #14
2e4f0                 | ' {
2e4f0                 | ' 
2e4f0                 | ' 	return *((WORD*)ptr);
2e4f0     09 FB E9 FA | 	rdword	result1, arg01 wz
2e4f4     80 00 90 AD |  if_e	jmp	#LR__4662
2e4f8     44 26 06 F1 | 	add	local01, #68
2e4fc     13 13 C2 FA | 	rdbyte	arg01, local01
2e500     44 26 86 F1 | 	sub	local01, #68
2e504     01 12 86 F1 | 	sub	arg01, #1
2e508     02 12 16 F2 | 	cmp	arg01, #2 wc
2e50c     68 00 90 3D |  if_ae	jmp	#LR__4662
2e510     34 26 06 F1 | 	add	local01, #52
2e514     13 13 02 F6 | 	mov	arg01, local01
2e518     34 26 86 F1 | 	sub	local01, #52
2e51c     11 12 06 F1 | 	add	arg01, #17
2e520                 | ' {
2e520                 | ' 
2e520                 | ' 	return *((WORD*)ptr);
2e520     09 FB E9 FA | 	rdword	result1, arg01 wz
2e524     50 00 90 AD |  if_e	jmp	#LR__4662
2e528     34 26 06 F1 | 	add	local01, #52
2e52c     13 13 02 F6 | 	mov	arg01, local01
2e530     34 26 86 F1 | 	sub	local01, #52
2e534     13 12 06 F1 | 	add	arg01, #19
2e538                 | ' {
2e538                 | ' 
2e538                 | ' 	return *((WORD*)ptr);
2e538     09 FB E1 FA | 	rdword	result1, arg01
2e53c     FD 2A 32 F9 | 	getword	local03, result1, #0
2e540     80 2A 16 F2 | 	cmp	local03, #128 wc
2e544     20 00 90 3D |  if_ae	jmp	#LR__4661
2e548     34 26 06 F1 | 	add	local01, #52
2e54c     13 13 02 F6 | 	mov	arg01, local01
2e550     34 26 86 F1 | 	sub	local01, #52
2e554     20 12 06 F1 | 	add	arg01, #32
2e558                 | ' {
2e558                 | ' 
2e558                 | ' 	return *((DWORD*)ptr);
2e558     09 FB 01 FB | 	rdlong	result1, arg01
2e55c     80 00 00 FF 
2e560     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2e564     10 00 90 CD |  if_b	jmp	#LR__4662
2e568                 | LR__4661
2e568     4A 26 06 F1 | 	add	local01, #74
2e56c                 | ' {
2e56c                 | ' 
2e56c                 | ' 	return *((WORD*)ptr);
2e56c     13 FB E9 FA | 	rdword	result1, local01 wz
2e570                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2e570                 | ' 			&& ld_word(fs->win +  14 ) != 0
2e570                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2e570                 | ' 			&& ld_word(fs->win +  17 ) != 0
2e570                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2e570                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2e570                 | ' 				return 0;
2e570     00 FA 05 56 |  if_ne	mov	result1, #0
2e574     18 00 90 5D |  if_ne	jmp	#LR__4664
2e578                 | LR__4662
2e578                 | LR__4663
2e578                 | ' 		}
2e578                 | ' 	}
2e578                 | ' 	return sign == 0xAA55 ? 2 : 3;
2e578     14 2B 32 F9 | 	getword	local03, local02, #0
2e57c     55 00 00 FF 
2e580     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2e584     02 2C 06 A6 |  if_e	mov	local04, #2
2e588     03 2C 06 56 |  if_ne	mov	local04, #3
2e58c     16 FB 01 F6 | 	mov	result1, local04
2e590                 | LR__4664
2e590     A7 F0 03 F6 | 	mov	ptra, fp
2e594     B2 00 A0 FD | 	call	#popregs_
2e598                 | _fatfs_cc_check_fs_ret
2e598     2D 00 64 FD | 	ret
2e59c                 | 
2e59c                 | _fatfs_cc_find_volume
2e59c     05 4A 05 F6 | 	mov	COUNT_, #5
2e5a0     A8 00 A0 FD | 	call	#pushregs_
2e5a4     24 F0 07 F1 | 	add	ptra, #36
2e5a8     09 27 02 F6 | 	mov	local01, arg01
2e5ac     0A 29 02 F6 | 	mov	local02, arg02
2e5b0     13 13 02 F6 | 	mov	arg01, local01
2e5b4     00 14 06 F6 | 	mov	arg02, #0
2e5b8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2e5bc     02 FA 0D F2 | 	cmp	result1, #2 wz
2e5c0     0C 00 90 AD |  if_e	jmp	#LR__4670
2e5c4     03 FA 15 F2 | 	cmp	result1, #3 wc
2e5c8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2e5cc     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4678
2e5d0                 | LR__4670
2e5d0                 | ' 	for (i = 0; i < 4; i++) {
2e5d0     00 2A 06 F6 | 	mov	local03, #0
2e5d4     97 26 48 FB | 	callpa	#(@LR__4672-@LR__4671)>>2,fcache_load_ptr_
2e5d8                 | LR__4671
2e5d8     04 2A 16 F2 | 	cmp	local03, #4 wc
2e5dc     44 00 90 3D |  if_ae	jmp	#LR__4673
2e5e0     15 2D 02 F6 | 	mov	local04, local03
2e5e4     02 2C 66 F0 | 	shl	local04, #2
2e5e8     14 4E 05 F1 | 	add	fp, #20
2e5ec     A7 2C 02 F1 | 	add	local04, fp
2e5f0     34 26 06 F1 | 	add	local01, #52
2e5f4     13 13 02 F6 | 	mov	arg01, local01
2e5f8     34 26 86 F1 | 	sub	local01, #52
2e5fc     BE 13 06 F1 | 	add	arg01, #446
2e600     15 15 02 F6 | 	mov	arg02, local03
2e604     04 14 66 F0 | 	shl	arg02, #4
2e608     0A 13 02 F1 | 	add	arg01, arg02
2e60c     08 12 06 F1 | 	add	arg01, #8
2e610                 | ' {
2e610                 | ' 
2e610                 | ' 	return *((DWORD*)ptr);
2e610     09 FB 01 FB | 	rdlong	result1, arg01
2e614     14 4E 85 F1 | 	sub	fp, #20
2e618     16 FB 61 FC | 	wrlong	result1, local04
2e61c     01 2A 06 F1 | 	add	local03, #1
2e620     B4 FF 9F FD | 	jmp	#LR__4671
2e624                 | LR__4672
2e624                 | LR__4673
2e624     00 28 0E F2 | 	cmp	local02, #0 wz
2e628     14 2D 02 56 |  if_ne	mov	local04, local02
2e62c     01 2C 86 51 |  if_ne	sub	local04, #1
2e630     00 2C 06 A6 |  if_e	mov	local04, #0
2e634     16 2B 02 F6 | 	mov	local03, local04
2e638                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2e638                 | ' 	}
2e638                 | ' 	i = part ? part - 1 : 0;
2e638                 | ' 	do {
2e638                 | LR__4674
2e638     15 2D 02 F6 | 	mov	local04, local03
2e63c     02 2C 66 F0 | 	shl	local04, #2
2e640     14 4E 05 F1 | 	add	fp, #20
2e644     A7 2C 02 F1 | 	add	local04, fp
2e648     16 2D 0A FB | 	rdlong	local04, local04 wz
2e64c     14 4E 85 F1 | 	sub	fp, #20
2e650     28 00 90 AD |  if_e	jmp	#LR__4675
2e654     15 2D 02 F6 | 	mov	local04, local03
2e658     02 2C 66 F0 | 	shl	local04, #2
2e65c     14 4E 05 F1 | 	add	fp, #20
2e660     A7 2C 02 F1 | 	add	local04, fp
2e664     16 15 02 FB | 	rdlong	arg02, local04
2e668     13 13 02 F6 | 	mov	arg01, local01
2e66c     14 4E 85 F1 | 	sub	fp, #20
2e670     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2e674     FD 2C 02 F6 | 	mov	local04, result1
2e678     04 00 90 FD | 	jmp	#LR__4676
2e67c                 | LR__4675
2e67c     03 2C 06 F6 | 	mov	local04, #3
2e680                 | LR__4676
2e680     16 2F 02 F6 | 	mov	local05, local04
2e684     00 28 0E F2 | 	cmp	local02, #0 wz
2e688     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2e68c     0C 00 90 8D |  if_c_and_z	jmp	#LR__4677
2e690     01 2A 06 A1 |  if_e	add	local03, #1
2e694     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2e698     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4674
2e69c                 | LR__4677
2e69c                 | ' 	return fmt;
2e69c     17 FB 01 F6 | 	mov	result1, local05
2e6a0                 | LR__4678
2e6a0     A7 F0 03 F6 | 	mov	ptra, fp
2e6a4     B2 00 A0 FD | 	call	#popregs_
2e6a8                 | _fatfs_cc_find_volume_ret
2e6a8     2D 00 64 FD | 	ret
2e6ac                 | 
2e6ac                 | _fatfs_cc_mount_volume
2e6ac     0B 4A 05 F6 | 	mov	COUNT_, #11
2e6b0     A8 00 A0 FD | 	call	#pushregs_
2e6b4     0A 27 02 F6 | 	mov	local01, arg02
2e6b8     0B 29 02 F6 | 	mov	local02, arg03
2e6bc     13 01 68 FC | 	wrlong	#0, local01
2e6c0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2e6c4     FD 2A 02 F6 | 	mov	local03, result1
2e6c8     00 2A 56 F2 | 	cmps	local03, #0 wc
2e6cc     0B FA 05 C6 |  if_b	mov	result1, #11
2e6d0     3C 05 90 CD |  if_b	jmp	#LR__4690
2e6d4     15 17 02 F6 | 	mov	arg03, local03
2e6d8     02 16 66 F0 | 	shl	arg03, #2
2e6dc     F2 16 02 F1 | 	add	arg03, objptr
2e6e0     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2e6e4     0C FA 05 A6 |  if_e	mov	result1, #12
2e6e8     24 05 90 AD |  if_e	jmp	#LR__4690
2e6ec     13 2D 62 FC | 	wrlong	local04, local01
2e6f0     14 29 E2 F8 | 	getbyte	local02, local02, #0
2e6f4     FE 28 06 F5 | 	and	local02, #254
2e6f8     16 17 CA FA | 	rdbyte	arg03, local04 wz
2e6fc     4C 00 90 AD |  if_e	jmp	#LR__4681
2e700     01 2C 06 F1 | 	add	local04, #1
2e704     16 13 CA FA | 	rdbyte	arg01, local04 wz
2e708     01 2C 86 F1 | 	sub	local04, #1
2e70c     01 FA 05 56 |  if_ne	mov	result1, #1
2e710                 | ' 
2e710                 | ' 	return Stat;
2e710     01 00 00 AF 
2e714     20 E4 05 A1 |  if_e	add	objptr, ##544
2e718     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e71c     01 00 00 AF 
2e720     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e724     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2e728     01 16 CE F7 | 	test	arg03, #1 wz
2e72c     1C 00 90 5D |  if_ne	jmp	#LR__4680
2e730     00 28 0E F2 | 	cmp	local02, #0 wz
2e734     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2e738     04 FA CD 57 |  if_ne	test	result1, #4 wz
2e73c                 | ' 				return FR_WRITE_PROTECTED;
2e73c     0A FA 05 56 |  if_ne	mov	result1, #10
2e740     CC 04 90 5D |  if_ne	jmp	#LR__4690
2e744                 | ' 			}
2e744                 | ' 			return FR_OK;
2e744     00 FA 05 F6 | 	mov	result1, #0
2e748     C4 04 90 FD | 	jmp	#LR__4690
2e74c                 | LR__4680
2e74c                 | LR__4681
2e74c     16 01 48 FC | 	wrbyte	#0, local04
2e750     01 2C 06 F1 | 	add	local04, #1
2e754     16 2B 42 FC | 	wrbyte	local03, local04
2e758     16 13 C2 FA | 	rdbyte	arg01, local04
2e75c     01 2C 86 F1 | 	sub	local04, #1
2e760     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2e764     FD 16 02 F6 | 	mov	arg03, result1
2e768     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2e76c     01 2E CE F7 | 	test	local05, #1 wz
2e770                 | ' 		return FR_NOT_READY;
2e770     03 FA 05 56 |  if_ne	mov	result1, #3
2e774     98 04 90 5D |  if_ne	jmp	#LR__4690
2e778     00 28 0E F2 | 	cmp	local02, #0 wz
2e77c     0B 2F 02 56 |  if_ne	mov	local05, arg03
2e780     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2e784     04 2E CE 57 |  if_ne	test	local05, #4 wz
2e788                 | ' 		return FR_WRITE_PROTECTED;
2e788     0A FA 05 56 |  if_ne	mov	result1, #10
2e78c     80 04 90 5D |  if_ne	jmp	#LR__4690
2e790     16 13 02 F6 | 	mov	arg01, local04
2e794     00 14 06 F6 | 	mov	arg02, #0
2e798     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2e79c     FD 12 02 F6 | 	mov	arg01, result1
2e7a0     04 12 0E F2 | 	cmp	arg01, #4 wz
2e7a4     01 FA 05 A6 |  if_e	mov	result1, #1
2e7a8     64 04 90 AD |  if_e	jmp	#LR__4690
2e7ac     02 12 16 F2 | 	cmp	arg01, #2 wc
2e7b0     0D FA 05 36 |  if_ae	mov	result1, #13
2e7b4     58 04 90 3D |  if_ae	jmp	#LR__4690
2e7b8     30 2C 06 F1 | 	add	local04, #48
2e7bc     16 31 02 FB | 	rdlong	local06, local04
2e7c0     04 2C 06 F1 | 	add	local04, #4
2e7c4     16 13 02 F6 | 	mov	arg01, local04
2e7c8     34 2C 86 F1 | 	sub	local04, #52
2e7cc     0B 12 06 F1 | 	add	arg01, #11
2e7d0                 | ' {
2e7d0                 | ' 
2e7d0                 | ' 	return *((WORD*)ptr);
2e7d0     09 FB E1 FA | 	rdword	result1, arg01
2e7d4     01 00 00 FF 
2e7d8     00 FA 0D F2 | 	cmp	result1, ##512 wz
2e7dc     0D FA 05 56 |  if_ne	mov	result1, #13
2e7e0     2C 04 90 5D |  if_ne	jmp	#LR__4690
2e7e4     34 2C 06 F1 | 	add	local04, #52
2e7e8     16 13 02 F6 | 	mov	arg01, local04
2e7ec     34 2C 86 F1 | 	sub	local04, #52
2e7f0     16 12 06 F1 | 	add	arg01, #22
2e7f4                 | ' {
2e7f4                 | ' 
2e7f4                 | ' 	return *((WORD*)ptr);
2e7f4     09 FB E1 FA | 	rdword	result1, arg01
2e7f8     FD 32 0A F6 | 	mov	local07, result1 wz
2e7fc     18 00 90 5D |  if_ne	jmp	#LR__4682
2e800     34 2C 06 F1 | 	add	local04, #52
2e804     16 13 02 F6 | 	mov	arg01, local04
2e808     34 2C 86 F1 | 	sub	local04, #52
2e80c     24 12 06 F1 | 	add	arg01, #36
2e810                 | ' {
2e810                 | ' 
2e810                 | ' 	return *((DWORD*)ptr);
2e810     09 FB 01 FB | 	rdlong	result1, arg01
2e814     FD 32 02 F6 | 	mov	local07, result1
2e818                 | LR__4682
2e818     1C 2C 06 F1 | 	add	local04, #28
2e81c     16 33 62 FC | 	wrlong	local07, local04
2e820     28 2C 06 F1 | 	add	local04, #40
2e824     16 2F C2 FA | 	rdbyte	local05, local04
2e828     42 2C 86 F1 | 	sub	local04, #66
2e82c     16 2F 42 FC | 	wrbyte	local05, local04
2e830     16 2F C2 FA | 	rdbyte	local05, local04
2e834     02 2C 86 F1 | 	sub	local04, #2
2e838     01 2E 0E F2 | 	cmp	local05, #1 wz
2e83c     02 2C 06 51 |  if_ne	add	local04, #2
2e840     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2e844     02 2C 86 51 |  if_ne	sub	local04, #2
2e848     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2e84c     0D FA 05 56 |  if_ne	mov	result1, #13
2e850     BC 03 90 5D |  if_ne	jmp	#LR__4690
2e854     02 2C 06 F1 | 	add	local04, #2
2e858     16 2F C2 FA | 	rdbyte	local05, local04
2e85c     17 33 02 FD | 	qmul	local07, local05
2e860     3F 2C 06 F1 | 	add	local04, #63
2e864     16 2F C2 FA | 	rdbyte	local05, local04
2e868     37 2C 86 F1 | 	sub	local04, #55
2e86c     16 2F 52 FC | 	wrword	local05, local04
2e870     16 2F EA FA | 	rdword	local05, local04 wz
2e874     0A 2C 86 F1 | 	sub	local04, #10
2e878     18 32 62 FD | 	getqx	local07
2e87c     20 00 90 AD |  if_e	jmp	#LR__4683
2e880     0A 2C 06 F1 | 	add	local04, #10
2e884     16 2F E2 FA | 	rdword	local05, local04
2e888     17 2B 32 F9 | 	getword	local03, local05, #0
2e88c     0A 2C 86 F1 | 	sub	local04, #10
2e890     17 2F 32 F9 | 	getword	local05, local05, #0
2e894     01 2E 86 F1 | 	sub	local05, #1
2e898     17 2B CA F7 | 	test	local03, local05 wz
2e89c     08 00 90 AD |  if_e	jmp	#LR__4684
2e8a0                 | LR__4683
2e8a0     0D FA 05 F6 | 	mov	result1, #13
2e8a4     68 03 90 FD | 	jmp	#LR__4690
2e8a8                 | LR__4684
2e8a8     34 2C 06 F1 | 	add	local04, #52
2e8ac     16 13 02 F6 | 	mov	arg01, local04
2e8b0     11 12 06 F1 | 	add	arg01, #17
2e8b4                 | ' {
2e8b4                 | ' 
2e8b4                 | ' 	return *((WORD*)ptr);
2e8b4     09 FB E1 FA | 	rdword	result1, arg01
2e8b8     2C 2C 86 F1 | 	sub	local04, #44
2e8bc     16 FB 51 FC | 	wrword	result1, local04
2e8c0     16 2F E2 FA | 	rdword	local05, local04
2e8c4     08 2C 86 F1 | 	sub	local04, #8
2e8c8     17 13 52 F6 | 	abs	arg01, local05 wc
2e8cc     09 13 42 F8 | 	getnib	arg01, arg01, #0
2e8d0     09 13 8A F6 | 	negc	arg01, arg01 wz
2e8d4     0D FA 05 56 |  if_ne	mov	result1, #13
2e8d8     34 03 90 5D |  if_ne	jmp	#LR__4690
2e8dc     34 2C 06 F1 | 	add	local04, #52
2e8e0     16 13 02 F6 | 	mov	arg01, local04
2e8e4     34 2C 86 F1 | 	sub	local04, #52
2e8e8     13 12 06 F1 | 	add	arg01, #19
2e8ec                 | ' {
2e8ec                 | ' 
2e8ec                 | ' 	return *((WORD*)ptr);
2e8ec     09 FB E1 FA | 	rdword	result1, arg01
2e8f0     FD 34 0A F6 | 	mov	local08, result1 wz
2e8f4     34 2C 06 A1 |  if_e	add	local04, #52
2e8f8     16 13 02 A6 |  if_e	mov	arg01, local04
2e8fc     34 2C 86 A1 |  if_e	sub	local04, #52
2e900     20 12 06 A1 |  if_e	add	arg01, #32
2e904                 | ' {
2e904                 | ' 
2e904                 | ' 	return *((DWORD*)ptr);
2e904     09 35 02 AB |  if_e	rdlong	local08, arg01
2e908     34 2C 06 F1 | 	add	local04, #52
2e90c     16 13 02 F6 | 	mov	arg01, local04
2e910     34 2C 86 F1 | 	sub	local04, #52
2e914     0E 12 06 F1 | 	add	arg01, #14
2e918                 | ' {
2e918                 | ' 
2e918                 | ' 	return *((WORD*)ptr);
2e918     09 FB E1 FA | 	rdword	result1, arg01
2e91c     FD 12 02 F6 | 	mov	arg01, result1
2e920     09 2F 02 F6 | 	mov	local05, arg01
2e924     0F 2E 4E F7 | 	zerox	local05, #15 wz
2e928     0D FA 05 A6 |  if_e	mov	result1, #13
2e92c     E0 02 90 AD |  if_e	jmp	#LR__4690
2e930     09 37 32 F9 | 	getword	local09, arg01, #0
2e934     19 37 02 F1 | 	add	local09, local07
2e938     08 2C 06 F1 | 	add	local04, #8
2e93c     16 2F E2 FA | 	rdword	local05, local04
2e940     08 2C 86 F1 | 	sub	local04, #8
2e944     17 2F 52 F6 | 	abs	local05, local05 wc
2e948     04 2E 46 F0 | 	shr	local05, #4
2e94c     17 37 82 F3 | 	sumc	local09, local05
2e950     1B 35 12 F2 | 	cmp	local08, local09 wc
2e954     0D FA 05 C6 |  if_b	mov	result1, #13
2e958     B4 02 90 CD |  if_b	jmp	#LR__4690
2e95c     1B 35 82 F1 | 	sub	local08, local09
2e960     0A 2C 06 F1 | 	add	local04, #10
2e964     16 2F E2 FA | 	rdword	local05, local04
2e968     17 35 12 FD | 	qdiv	local08, local05
2e96c     0A 2C 86 F1 | 	sub	local04, #10
2e970     18 2E 62 FD | 	getqx	local05
2e974     00 2E 0E F2 | 	cmp	local05, #0 wz
2e978     0D FA 05 A6 |  if_e	mov	result1, #13
2e97c     90 02 90 AD |  if_e	jmp	#LR__4690
2e980     00 38 06 F6 | 	mov	local10, #0
2e984     FF FF 07 FF 
2e988     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2e98c     03 38 06 C6 |  if_b	mov	local10, #3
2e990     7F 00 00 FF 
2e994     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2e998     02 38 06 C6 |  if_b	mov	local10, #2
2e99c     07 00 00 FF 
2e9a0     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2e9a4     01 38 06 C6 |  if_b	mov	local10, #1
2e9a8     00 38 0E F2 | 	cmp	local10, #0 wz
2e9ac     0D FA 05 A6 |  if_e	mov	result1, #13
2e9b0     5C 02 90 AD |  if_e	jmp	#LR__4690
2e9b4     02 2E 06 F1 | 	add	local05, #2
2e9b8     18 2C 06 F1 | 	add	local04, #24
2e9bc     16 2F 62 FC | 	wrlong	local05, local04
2e9c0     08 2C 06 F1 | 	add	local04, #8
2e9c4     16 31 62 FC | 	wrlong	local06, local04
2e9c8     18 2F 02 F6 | 	mov	local05, local06
2e9cc     09 13 32 F9 | 	getword	arg01, arg01, #0
2e9d0     09 2F 02 F1 | 	add	local05, arg01
2e9d4     04 2C 06 F1 | 	add	local04, #4
2e9d8     16 2F 62 FC | 	wrlong	local05, local04
2e9dc     18 2F 02 F6 | 	mov	local05, local06
2e9e0     1B 2F 02 F1 | 	add	local05, local09
2e9e4     08 2C 06 F1 | 	add	local04, #8
2e9e8     16 2F 62 FC | 	wrlong	local05, local04
2e9ec     2C 2C 86 F1 | 	sub	local04, #44
2e9f0     03 38 0E F2 | 	cmp	local10, #3 wz
2e9f4     5C 00 90 5D |  if_ne	jmp	#LR__4685
2e9f8     34 2C 06 F1 | 	add	local04, #52
2e9fc     16 13 02 F6 | 	mov	arg01, local04
2ea00     34 2C 86 F1 | 	sub	local04, #52
2ea04     2A 12 06 F1 | 	add	arg01, #42
2ea08                 | ' {
2ea08                 | ' 
2ea08                 | ' 	return *((WORD*)ptr);
2ea08     09 FB E9 FA | 	rdword	result1, arg01 wz
2ea0c     0D FA 05 56 |  if_ne	mov	result1, #13
2ea10     FC 01 90 5D |  if_ne	jmp	#LR__4690
2ea14     08 2C 06 F1 | 	add	local04, #8
2ea18     16 2F EA FA | 	rdword	local05, local04 wz
2ea1c     08 2C 86 F1 | 	sub	local04, #8
2ea20     0D FA 05 56 |  if_ne	mov	result1, #13
2ea24     E8 01 90 5D |  if_ne	jmp	#LR__4690
2ea28     34 2C 06 F1 | 	add	local04, #52
2ea2c     16 13 02 F6 | 	mov	arg01, local04
2ea30     2C 12 06 F1 | 	add	arg01, #44
2ea34                 | ' {
2ea34                 | ' 
2ea34                 | ' 	return *((DWORD*)ptr);
2ea34     09 FB 01 FB | 	rdlong	result1, arg01
2ea38     0C 2C 86 F1 | 	sub	local04, #12
2ea3c     16 FB 61 FC | 	wrlong	result1, local04
2ea40     10 2C 86 F1 | 	sub	local04, #16
2ea44     16 3B 02 FB | 	rdlong	local11, local04
2ea48     18 2C 86 F1 | 	sub	local04, #24
2ea4c     02 3A 66 F0 | 	shl	local11, #2
2ea50     6C 00 90 FD | 	jmp	#LR__4687
2ea54                 | LR__4685
2ea54     08 2C 06 F1 | 	add	local04, #8
2ea58     16 2F EA FA | 	rdword	local05, local04 wz
2ea5c     08 2C 86 F1 | 	sub	local04, #8
2ea60     0D FA 05 A6 |  if_e	mov	result1, #13
2ea64     A8 01 90 AD |  if_e	jmp	#LR__4690
2ea68     24 2C 06 F1 | 	add	local04, #36
2ea6c     16 2F 02 FB | 	rdlong	local05, local04
2ea70     19 2F 02 F1 | 	add	local05, local07
2ea74     04 2C 06 F1 | 	add	local04, #4
2ea78     16 2F 62 FC | 	wrlong	local05, local04
2ea7c     28 2C 86 F1 | 	sub	local04, #40
2ea80     02 38 0E F2 | 	cmp	local10, #2 wz
2ea84     18 2C 06 A1 |  if_e	add	local04, #24
2ea88     16 2F 02 AB |  if_e	rdlong	local05, local04
2ea8c     18 2C 86 A1 |  if_e	sub	local04, #24
2ea90     01 2E 66 A0 |  if_e	shl	local05, #1
2ea94     24 00 90 AD |  if_e	jmp	#LR__4686
2ea98     18 2C 06 F1 | 	add	local04, #24
2ea9c     16 3B 02 FB | 	rdlong	local11, local04
2eaa0     1D 2F 02 F6 | 	mov	local05, local11
2eaa4     01 2E 66 F0 | 	shl	local05, #1
2eaa8     1D 2F 02 F1 | 	add	local05, local11
2eaac     01 2E 46 F0 | 	shr	local05, #1
2eab0     18 2C 86 F1 | 	sub	local04, #24
2eab4     01 3A 06 F5 | 	and	local11, #1
2eab8     1D 2F 02 F1 | 	add	local05, local11
2eabc                 | LR__4686
2eabc     17 3B 02 F6 | 	mov	local11, local05
2eac0                 | LR__4687
2eac0     FF 3B 06 F1 | 	add	local11, #511
2eac4     09 3A 46 F0 | 	shr	local11, #9
2eac8     1C 2C 06 F1 | 	add	local04, #28
2eacc     16 17 02 FB | 	rdlong	arg03, local04
2ead0     1C 2C 86 F1 | 	sub	local04, #28
2ead4     1D 17 12 F2 | 	cmp	arg03, local11 wc
2ead8     0D FA 05 C6 |  if_b	mov	result1, #13
2eadc     30 01 90 CD |  if_b	jmp	#LR__4690
2eae0     14 2C 06 F1 | 	add	local04, #20
2eae4     FF FF FF FF 
2eae8     16 FF 6B FC | 	wrlong	##-1, local04
2eaec     04 2C 86 F1 | 	sub	local04, #4
2eaf0     FF FF FF FF 
2eaf4     16 FF 6B FC | 	wrlong	##-1, local04
2eaf8     0C 2C 86 F1 | 	sub	local04, #12
2eafc     16 01 49 FC | 	wrbyte	#128, local04
2eb00     04 2C 86 F1 | 	sub	local04, #4
2eb04     03 38 0E F2 | 	cmp	local10, #3 wz
2eb08     D0 00 90 5D |  if_ne	jmp	#LR__4689
2eb0c     34 2C 06 F1 | 	add	local04, #52
2eb10     16 13 02 F6 | 	mov	arg01, local04
2eb14     34 2C 86 F1 | 	sub	local04, #52
2eb18     30 12 06 F1 | 	add	arg01, #48
2eb1c                 | ' {
2eb1c                 | ' 
2eb1c                 | ' 	return *((WORD*)ptr);
2eb1c     09 FB E1 FA | 	rdword	result1, arg01
2eb20     FD 2E 32 F9 | 	getword	local05, result1, #0
2eb24     01 2E 0E F2 | 	cmp	local05, #1 wz
2eb28     B0 00 90 5D |  if_ne	jmp	#LR__4689
2eb2c     01 30 06 F1 | 	add	local06, #1
2eb30     16 13 02 F6 | 	mov	arg01, local04
2eb34     18 15 02 F6 | 	mov	arg02, local06
2eb38     CC CD BF FD | 	call	#_fatfs_cc_move_window
2eb3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb40     98 00 90 5D |  if_ne	jmp	#LR__4689
2eb44     04 2C 06 F1 | 	add	local04, #4
2eb48     16 01 48 FC | 	wrbyte	#0, local04
2eb4c     30 2C 06 F1 | 	add	local04, #48
2eb50     16 13 02 F6 | 	mov	arg01, local04
2eb54     34 2C 86 F1 | 	sub	local04, #52
2eb58     FE 13 06 F1 | 	add	arg01, #510
2eb5c                 | ' {
2eb5c                 | ' 
2eb5c                 | ' 	return *((WORD*)ptr);
2eb5c     09 FB E1 FA | 	rdword	result1, arg01
2eb60     FD 2E 32 F9 | 	getword	local05, result1, #0
2eb64     55 00 00 FF 
2eb68     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2eb6c     34 2C 06 A1 |  if_e	add	local04, #52
2eb70     16 13 02 A6 |  if_e	mov	arg01, local04
2eb74     34 2C 86 A1 |  if_e	sub	local04, #52
2eb78                 | ' {
2eb78                 | ' 
2eb78                 | ' 	return *((DWORD*)ptr);
2eb78     09 FB 01 AB |  if_e	rdlong	result1, arg01
2eb7c     A9 B0 20 AF 
2eb80     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2eb84     54 00 90 5D |  if_ne	jmp	#LR__4688
2eb88     34 2C 06 F1 | 	add	local04, #52
2eb8c     16 13 02 F6 | 	mov	arg01, local04
2eb90     34 2C 86 F1 | 	sub	local04, #52
2eb94     E4 13 06 F1 | 	add	arg01, #484
2eb98                 | ' {
2eb98                 | ' 
2eb98                 | ' 	return *((DWORD*)ptr);
2eb98     09 FB 01 FB | 	rdlong	result1, arg01
2eb9c     B9 A0 30 FF 
2eba0     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2eba4     34 00 90 5D |  if_ne	jmp	#LR__4688
2eba8     34 2C 06 F1 | 	add	local04, #52
2ebac     16 13 02 F6 | 	mov	arg01, local04
2ebb0     E8 13 06 F1 | 	add	arg01, #488
2ebb4                 | ' {
2ebb4                 | ' 
2ebb4                 | ' 	return *((DWORD*)ptr);
2ebb4     09 FB 01 FB | 	rdlong	result1, arg01
2ebb8     20 2C 86 F1 | 	sub	local04, #32
2ebbc     16 FB 61 FC | 	wrlong	result1, local04
2ebc0     20 2C 06 F1 | 	add	local04, #32
2ebc4     16 13 02 F6 | 	mov	arg01, local04
2ebc8     EC 13 06 F1 | 	add	arg01, #492
2ebcc                 | ' {
2ebcc                 | ' 
2ebcc                 | ' 	return *((DWORD*)ptr);
2ebcc     09 FB 01 FB | 	rdlong	result1, arg01
2ebd0     24 2C 86 F1 | 	sub	local04, #36
2ebd4     16 FB 61 FC | 	wrlong	result1, local04
2ebd8     10 2C 86 F1 | 	sub	local04, #16
2ebdc                 | LR__4688
2ebdc                 | LR__4689
2ebdc     16 39 42 FC | 	wrbyte	local10, local04
2ebe0     04 E4 05 F1 | 	add	objptr, #4
2ebe4     F2 2E E2 FA | 	rdword	local05, objptr
2ebe8     01 2E 06 F1 | 	add	local05, #1
2ebec     F2 2E 52 FC | 	wrword	local05, objptr
2ebf0     F2 3A E2 FA | 	rdword	local11, objptr
2ebf4     06 2C 06 F1 | 	add	local04, #6
2ebf8     16 3B 52 FC | 	wrword	local11, local04
2ebfc     04 E4 05 F1 | 	add	objptr, #4
2ec00     06 2C 06 F1 | 	add	local04, #6
2ec04     16 E5 61 FC | 	wrlong	objptr, local04
2ec08                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2ec08                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2ec08                 | ' 			{
2ec08                 | ' 
2ec08                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2ec08                 | ' 
2ec08                 | ' 
2ec08                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2ec08                 | ' 
2ec08                 | ' 			}
2ec08                 | ' 		}
2ec08                 | ' 
2ec08                 | ' 
2ec08                 | ' 	}
2ec08                 | ' 
2ec08                 | ' 	fs->fs_type = (BYTE)fmt;
2ec08                 | ' 	fs->id = ++Fsid;
2ec08                 | ' 
2ec08                 | ' 	fs->lfnbuf = LfnBuf;
2ec08                 | ' #line 3567 "ff.c"
2ec08                 | ' 	return FR_OK;
2ec08     00 FA 05 F6 | 	mov	result1, #0
2ec0c     08 E4 85 F1 | 	sub	objptr, #8
2ec10                 | LR__4690
2ec10     A7 F0 03 F6 | 	mov	ptra, fp
2ec14     B2 00 A0 FD | 	call	#popregs_
2ec18                 | _fatfs_cc_mount_volume_ret
2ec18     2D 00 64 FD | 	ret
2ec1c                 | 
2ec1c                 | _fatfs_cc_validate
2ec1c     09 01 0A F6 | 	mov	_var01, arg01 wz
2ec20     09 02 06 F6 | 	mov	_var02, #9
2ec24     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2ec28     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2ec2c     50 00 90 AD |  if_e	jmp	#LR__4700
2ec30     04 00 06 F1 | 	add	_var01, #4
2ec34     00 07 E2 FA | 	rdword	_var04, _var01
2ec38     04 00 86 F1 | 	sub	_var01, #4
2ec3c     00 13 02 FB | 	rdlong	arg01, _var01
2ec40     06 12 06 F1 | 	add	arg01, #6
2ec44     09 FB E1 FA | 	rdword	result1, arg01
2ec48     FD 06 0A F2 | 	cmp	_var04, result1 wz
2ec4c     30 00 90 5D |  if_ne	jmp	#LR__4700
2ec50     00 07 02 FB | 	rdlong	_var04, _var01
2ec54     01 06 06 F1 | 	add	_var04, #1
2ec58     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2ec5c     01 FA 05 56 |  if_ne	mov	result1, #1
2ec60                 | ' 
2ec60                 | ' 	return Stat;
2ec60     01 00 00 AF 
2ec64     20 E4 05 A1 |  if_e	add	objptr, ##544
2ec68     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ec6c     01 00 00 AF 
2ec70     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ec74     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2ec78     01 04 CE F7 | 	test	_var03, #1 wz
2ec7c     00 02 06 A6 |  if_e	mov	_var02, #0
2ec80                 | LR__4700
2ec80     00 02 0E F2 | 	cmp	_var02, #0 wz
2ec84     00 05 02 AB |  if_e	rdlong	_var03, _var01
2ec88     00 04 06 56 |  if_ne	mov	_var03, #0
2ec8c     0A 05 62 FC | 	wrlong	_var03, arg02
2ec90                 | ' 			res = FR_OK;
2ec90                 | ' 		}
2ec90                 | ' 
2ec90                 | ' 	}
2ec90                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2ec90                 | ' 	return res;
2ec90     01 FB 01 F6 | 	mov	result1, _var02
2ec94                 | _fatfs_cc_validate_ret
2ec94     2D 00 64 FD | 	ret
2ec98                 | 
2ec98                 | _fatfs_cc_f_mount
2ec98     01 4A 05 F6 | 	mov	COUNT_, #1
2ec9c     A8 00 A0 FD | 	call	#pushregs_
2eca0     20 F0 07 F1 | 	add	ptra, #32
2eca4     04 4E 05 F1 | 	add	fp, #4
2eca8     A7 12 62 FC | 	wrlong	arg01, fp
2ecac     04 4E 05 F1 | 	add	fp, #4
2ecb0     A7 14 62 FC | 	wrlong	arg02, fp
2ecb4     04 4E 05 F1 | 	add	fp, #4
2ecb8     A7 16 42 FC | 	wrbyte	arg03, fp
2ecbc     04 4E 85 F1 | 	sub	fp, #4
2ecc0     A7 16 02 FB | 	rdlong	arg03, fp
2ecc4     14 4E 05 F1 | 	add	fp, #20
2ecc8     A7 16 62 FC | 	wrlong	arg03, fp
2eccc     A7 12 02 F6 | 	mov	arg01, fp
2ecd0     1C 4E 85 F1 | 	sub	fp, #28
2ecd4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2ecd8     14 4E 05 F1 | 	add	fp, #20
2ecdc     A7 FA 61 FC | 	wrlong	result1, fp
2ece0     14 4E 85 F1 | 	sub	fp, #20
2ece4     00 FA 55 F2 | 	cmps	result1, #0 wc
2ece8     0B FA 05 C6 |  if_b	mov	result1, #11
2ecec     C0 00 90 CD |  if_b	jmp	#LR__4711
2ecf0     14 4E 05 F1 | 	add	fp, #20
2ecf4     A7 16 02 FB | 	rdlong	arg03, fp
2ecf8     02 16 66 F0 | 	shl	arg03, #2
2ecfc     F2 16 02 F1 | 	add	arg03, objptr
2ed00     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2ed04     04 4E 85 F1 | 	sub	fp, #4
2ed08     A7 16 62 FC | 	wrlong	arg03, fp
2ed0c     10 4E 85 F1 | 	sub	fp, #16
2ed10     28 00 90 AD |  if_e	jmp	#LR__4710
2ed14     10 4E 05 F1 | 	add	fp, #16
2ed18     A7 16 02 FB | 	rdlong	arg03, fp
2ed1c     10 4E 85 F1 | 	sub	fp, #16
2ed20     01 16 06 F1 | 	add	arg03, #1
2ed24     0B 13 C2 FA | 	rdbyte	arg01, arg03
2ed28     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2ed2c     10 4E 05 F1 | 	add	fp, #16
2ed30     A7 16 02 FB | 	rdlong	arg03, fp
2ed34     10 4E 85 F1 | 	sub	fp, #16
2ed38     0B 01 48 FC | 	wrbyte	#0, arg03
2ed3c                 | LR__4710
2ed3c     04 4E 05 F1 | 	add	fp, #4
2ed40     A7 26 0A FB | 	rdlong	local01, fp wz
2ed44     04 4E 85 F1 | 	sub	fp, #4
2ed48     04 4E 05 51 |  if_ne	add	fp, #4
2ed4c     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ed50     04 4E 85 51 |  if_ne	sub	fp, #4
2ed54     13 01 48 5C |  if_ne	wrbyte	#0, local01
2ed58     14 4E 05 F1 | 	add	fp, #20
2ed5c     A7 26 02 FB | 	rdlong	local01, fp
2ed60     02 26 66 F0 | 	shl	local01, #2
2ed64     F2 26 02 F1 | 	add	local01, objptr
2ed68     10 4E 85 F1 | 	sub	fp, #16
2ed6c     A7 16 02 FB | 	rdlong	arg03, fp
2ed70     13 17 62 FC | 	wrlong	arg03, local01
2ed74     08 4E 05 F1 | 	add	fp, #8
2ed78     A7 26 CA FA | 	rdbyte	local01, fp wz
2ed7c     0C 4E 85 F1 | 	sub	fp, #12
2ed80     00 FA 05 A6 |  if_e	mov	result1, #0
2ed84     28 00 90 AD |  if_e	jmp	#LR__4711
2ed88     08 4E 05 F1 | 	add	fp, #8
2ed8c     A7 12 02 F6 | 	mov	arg01, fp
2ed90     04 4E 85 F1 | 	sub	fp, #4
2ed94     A7 14 02 F6 | 	mov	arg02, fp
2ed98     04 4E 85 F1 | 	sub	fp, #4
2ed9c     00 16 06 F6 | 	mov	arg03, #0
2eda0     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2eda4     18 4E 05 F1 | 	add	fp, #24
2eda8     A7 FA 61 FC | 	wrlong	result1, fp
2edac                 | ' 
2edac                 | ' 	res = mount_volume(&path, &fs, 0);
2edac                 | ' 	return res ;
2edac     18 4E 85 F1 | 	sub	fp, #24
2edb0                 | LR__4711
2edb0     A7 F0 03 F6 | 	mov	ptra, fp
2edb4     B2 00 A0 FD | 	call	#popregs_
2edb8                 | _fatfs_cc_f_mount_ret
2edb8     2D 00 64 FD | 	ret
2edbc                 | 
2edbc                 | _fatfs_cc_f_open
2edbc     02 4A 05 F6 | 	mov	COUNT_, #2
2edc0     A8 00 A0 FD | 	call	#pushregs_
2edc4     60 F0 07 F1 | 	add	ptra, #96
2edc8     04 4E 05 F1 | 	add	fp, #4
2edcc     A7 12 62 FC | 	wrlong	arg01, fp
2edd0     04 4E 05 F1 | 	add	fp, #4
2edd4     A7 14 62 FC | 	wrlong	arg02, fp
2edd8     04 4E 05 F1 | 	add	fp, #4
2eddc     A7 16 42 FC | 	wrbyte	arg03, fp
2ede0     08 4E 85 F1 | 	sub	fp, #8
2ede4     A7 18 0A FB | 	rdlong	arg04, fp wz
2ede8     04 4E 85 F1 | 	sub	fp, #4
2edec     09 FA 05 A6 |  if_e	mov	result1, #9
2edf0     98 06 90 AD |  if_e	jmp	#LR__4737
2edf4     0C 4E 05 F1 | 	add	fp, #12
2edf8     A7 18 C2 FA | 	rdbyte	arg04, fp
2edfc     3F 18 06 F5 | 	and	arg04, #63
2ee00     A7 18 42 FC | 	wrbyte	arg04, fp
2ee04     04 4E 85 F1 | 	sub	fp, #4
2ee08     A7 12 02 F6 | 	mov	arg01, fp
2ee0c     3C 4E 05 F1 | 	add	fp, #60
2ee10     A7 14 02 F6 | 	mov	arg02, fp
2ee14     38 4E 85 F1 | 	sub	fp, #56
2ee18     A7 16 C2 FA | 	rdbyte	arg03, fp
2ee1c     0C 4E 85 F1 | 	sub	fp, #12
2ee20     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2ee24     10 4E 05 F1 | 	add	fp, #16
2ee28     A7 FA 61 FC | 	wrlong	result1, fp
2ee2c     10 4E 85 F1 | 	sub	fp, #16
2ee30     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee34     2C 06 90 5D |  if_ne	jmp	#LR__4736
2ee38     44 4E 05 F1 | 	add	fp, #68
2ee3c     A7 18 02 FB | 	rdlong	arg04, fp
2ee40     30 4E 85 F1 | 	sub	fp, #48
2ee44     A7 18 62 FC | 	wrlong	arg04, fp
2ee48     A7 12 02 F6 | 	mov	arg01, fp
2ee4c     0C 4E 85 F1 | 	sub	fp, #12
2ee50     A7 26 02 FB | 	rdlong	local01, fp
2ee54     08 4E 85 F1 | 	sub	fp, #8
2ee58     13 15 02 F6 | 	mov	arg02, local01
2ee5c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2ee60     10 4E 05 F1 | 	add	fp, #16
2ee64     A7 FA 61 FC | 	wrlong	result1, fp
2ee68     10 4E 85 F1 | 	sub	fp, #16
2ee6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee70     1C 00 90 5D |  if_ne	jmp	#LR__4720
2ee74     3F 4E 05 F1 | 	add	fp, #63
2ee78     A7 18 C2 FA | 	rdbyte	arg04, fp
2ee7c     3F 4E 85 F1 | 	sub	fp, #63
2ee80     80 18 CE F7 | 	test	arg04, #128 wz
2ee84     10 4E 05 51 |  if_ne	add	fp, #16
2ee88     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ee8c     10 4E 85 51 |  if_ne	sub	fp, #16
2ee90                 | LR__4720
2ee90     0C 4E 05 F1 | 	add	fp, #12
2ee94     A7 18 C2 FA | 	rdbyte	arg04, fp
2ee98     0C 4E 85 F1 | 	sub	fp, #12
2ee9c     1C 18 CE F7 | 	test	arg04, #28 wz
2eea0     F0 01 90 AD |  if_e	jmp	#LR__4725
2eea4     10 4E 05 F1 | 	add	fp, #16
2eea8     A7 26 0A FB | 	rdlong	local01, fp wz
2eeac     10 4E 85 F1 | 	sub	fp, #16
2eeb0     48 00 90 AD |  if_e	jmp	#LR__4722
2eeb4     10 4E 05 F1 | 	add	fp, #16
2eeb8     A7 18 02 FB | 	rdlong	arg04, fp
2eebc     10 4E 85 F1 | 	sub	fp, #16
2eec0     04 18 0E F2 | 	cmp	arg04, #4 wz
2eec4     1C 00 90 5D |  if_ne	jmp	#LR__4721
2eec8     14 4E 05 F1 | 	add	fp, #20
2eecc     A7 12 02 F6 | 	mov	arg01, fp
2eed0     14 4E 85 F1 | 	sub	fp, #20
2eed4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2eed8     10 4E 05 F1 | 	add	fp, #16
2eedc     A7 FA 61 FC | 	wrlong	result1, fp
2eee0     10 4E 85 F1 | 	sub	fp, #16
2eee4                 | LR__4721
2eee4     0C 4E 05 F1 | 	add	fp, #12
2eee8     A7 26 C2 FA | 	rdbyte	local01, fp
2eeec     08 26 46 F5 | 	or	local01, #8
2eef0     A7 26 42 FC | 	wrbyte	local01, fp
2eef4     0C 4E 85 F1 | 	sub	fp, #12
2eef8     3C 00 90 FD | 	jmp	#LR__4724
2eefc                 | LR__4722
2eefc     1A 4E 05 F1 | 	add	fp, #26
2ef00     A7 26 C2 FA | 	rdbyte	local01, fp
2ef04     1A 4E 85 F1 | 	sub	fp, #26
2ef08     11 26 CE F7 | 	test	local01, #17 wz
2ef0c     10 4E 05 51 |  if_ne	add	fp, #16
2ef10     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ef14     10 4E 85 51 |  if_ne	sub	fp, #16
2ef18     1C 00 90 5D |  if_ne	jmp	#LR__4723
2ef1c     0C 4E 05 F1 | 	add	fp, #12
2ef20     A7 26 C2 FA | 	rdbyte	local01, fp
2ef24     0C 4E 85 F1 | 	sub	fp, #12
2ef28     04 26 CE F7 | 	test	local01, #4 wz
2ef2c     10 4E 05 51 |  if_ne	add	fp, #16
2ef30     A7 10 68 5C |  if_ne	wrlong	#8, fp
2ef34     10 4E 85 51 |  if_ne	sub	fp, #16
2ef38                 | LR__4723
2ef38                 | LR__4724
2ef38     10 4E 05 F1 | 	add	fp, #16
2ef3c     A7 26 0A FB | 	rdlong	local01, fp wz
2ef40     10 4E 85 F1 | 	sub	fp, #16
2ef44     A8 01 90 5D |  if_ne	jmp	#LR__4728
2ef48     0C 4E 05 F1 | 	add	fp, #12
2ef4c     A7 26 C2 FA | 	rdbyte	local01, fp
2ef50     0C 4E 85 F1 | 	sub	fp, #12
2ef54     08 26 CE F7 | 	test	local01, #8 wz
2ef58     94 01 90 AD |  if_e	jmp	#LR__4728
2ef5c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2ef60     54 4E 05 F1 | 	add	fp, #84
2ef64     A7 FA 61 FC | 	wrlong	result1, fp
2ef68     24 4E 85 F1 | 	sub	fp, #36
2ef6c     A7 12 02 FB | 	rdlong	arg01, fp
2ef70     0E 12 06 F1 | 	add	arg01, #14
2ef74     09 FB 61 FC | 	wrlong	result1, arg01
2ef78     A7 12 02 FB | 	rdlong	arg01, fp
2ef7c     16 12 06 F1 | 	add	arg01, #22
2ef80     24 4E 05 F1 | 	add	fp, #36
2ef84     A7 14 02 FB | 	rdlong	arg02, fp
2ef88     09 15 62 FC | 	wrlong	arg02, arg01
2ef8c     10 4E 85 F1 | 	sub	fp, #16
2ef90     A7 12 02 FB | 	rdlong	arg01, fp
2ef94     14 4E 85 F1 | 	sub	fp, #20
2ef98     A7 14 02 FB | 	rdlong	arg02, fp
2ef9c     30 4E 85 F1 | 	sub	fp, #48
2efa0     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2efa4     48 4E 05 F1 | 	add	fp, #72
2efa8     A7 FA 61 FC | 	wrlong	result1, fp
2efac     18 4E 85 F1 | 	sub	fp, #24
2efb0     A7 26 02 FB | 	rdlong	local01, fp
2efb4     0B 26 06 F1 | 	add	local01, #11
2efb8     13 41 48 FC | 	wrbyte	#32, local01
2efbc     14 4E 05 F1 | 	add	fp, #20
2efc0     A7 12 02 FB | 	rdlong	arg01, fp
2efc4     14 4E 85 F1 | 	sub	fp, #20
2efc8     A7 14 02 FB | 	rdlong	arg02, fp
2efcc     30 4E 85 F1 | 	sub	fp, #48
2efd0     00 16 06 F6 | 	mov	arg03, #0
2efd4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2efd8     30 4E 05 F1 | 	add	fp, #48
2efdc     A7 12 02 FB | 	rdlong	arg01, fp
2efe0     1C 12 06 F1 | 	add	arg01, #28
2efe4     09 01 68 FC | 	wrlong	#0, arg01
2efe8     14 4E 05 F1 | 	add	fp, #20
2efec     A7 26 02 FB | 	rdlong	local01, fp
2eff0     03 26 06 F1 | 	add	local01, #3
2eff4     13 03 48 FC | 	wrbyte	#1, local01
2eff8     04 4E 05 F1 | 	add	fp, #4
2effc     A7 26 0A FB | 	rdlong	local01, fp wz
2f000     48 4E 85 F1 | 	sub	fp, #72
2f004     E8 00 90 AD |  if_e	jmp	#LR__4728
2f008     44 4E 05 F1 | 	add	fp, #68
2f00c     A7 26 02 FB | 	rdlong	local01, fp
2f010     30 26 06 F1 | 	add	local01, #48
2f014     13 27 02 FB | 	rdlong	local01, local01
2f018     14 4E 05 F1 | 	add	fp, #20
2f01c     A7 26 62 FC | 	wrlong	local01, fp
2f020     44 4E 85 F1 | 	sub	fp, #68
2f024     A7 12 02 F6 | 	mov	arg01, fp
2f028     34 4E 05 F1 | 	add	fp, #52
2f02c     A7 14 02 FB | 	rdlong	arg02, fp
2f030     48 4E 85 F1 | 	sub	fp, #72
2f034     00 16 06 F6 | 	mov	arg03, #0
2f038     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2f03c     10 4E 05 F1 | 	add	fp, #16
2f040     A7 FA 61 FC | 	wrlong	result1, fp
2f044     10 4E 85 F1 | 	sub	fp, #16
2f048     00 FA 0D F2 | 	cmp	result1, #0 wz
2f04c     A0 00 90 5D |  if_ne	jmp	#LR__4728
2f050     44 4E 05 F1 | 	add	fp, #68
2f054     A7 12 02 FB | 	rdlong	arg01, fp
2f058     14 4E 05 F1 | 	add	fp, #20
2f05c     A7 14 02 FB | 	rdlong	arg02, fp
2f060     58 4E 85 F1 | 	sub	fp, #88
2f064     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2f068     10 4E 05 F1 | 	add	fp, #16
2f06c     A7 FA 61 FC | 	wrlong	result1, fp
2f070     34 4E 05 F1 | 	add	fp, #52
2f074     A7 18 02 FB | 	rdlong	arg04, fp
2f078     04 4E 05 F1 | 	add	fp, #4
2f07c     A7 26 02 FB | 	rdlong	local01, fp
2f080     48 4E 85 F1 | 	sub	fp, #72
2f084     01 26 86 F1 | 	sub	local01, #1
2f088     10 18 06 F1 | 	add	arg04, #16
2f08c     0C 27 62 FC | 	wrlong	local01, arg04
2f090     5C 00 90 FD | 	jmp	#LR__4728
2f094                 | LR__4725
2f094     10 4E 05 F1 | 	add	fp, #16
2f098     A7 18 0A FB | 	rdlong	arg04, fp wz
2f09c     10 4E 85 F1 | 	sub	fp, #16
2f0a0     4C 00 90 5D |  if_ne	jmp	#LR__4727
2f0a4     1A 4E 05 F1 | 	add	fp, #26
2f0a8     A7 18 C2 FA | 	rdbyte	arg04, fp
2f0ac     1A 4E 85 F1 | 	sub	fp, #26
2f0b0     10 18 CE F7 | 	test	arg04, #16 wz
2f0b4     10 4E 05 51 |  if_ne	add	fp, #16
2f0b8     A7 08 68 5C |  if_ne	wrlong	#4, fp
2f0bc     10 4E 85 51 |  if_ne	sub	fp, #16
2f0c0     2C 00 90 5D |  if_ne	jmp	#LR__4726
2f0c4     0C 4E 05 F1 | 	add	fp, #12
2f0c8     A7 18 C2 FA | 	rdbyte	arg04, fp
2f0cc     0C 4E 85 F1 | 	sub	fp, #12
2f0d0     02 18 CE F7 | 	test	arg04, #2 wz
2f0d4     1A 4E 05 51 |  if_ne	add	fp, #26
2f0d8     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
2f0dc     1A 4E 85 51 |  if_ne	sub	fp, #26
2f0e0     01 26 CE 57 |  if_ne	test	local01, #1 wz
2f0e4     10 4E 05 51 |  if_ne	add	fp, #16
2f0e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2f0ec     10 4E 85 51 |  if_ne	sub	fp, #16
2f0f0                 | LR__4726
2f0f0                 | LR__4727
2f0f0                 | LR__4728
2f0f0     10 4E 05 F1 | 	add	fp, #16
2f0f4     A7 26 0A FB | 	rdlong	local01, fp wz
2f0f8     10 4E 85 F1 | 	sub	fp, #16
2f0fc     60 00 90 5D |  if_ne	jmp	#LR__4729
2f100     0C 4E 05 F1 | 	add	fp, #12
2f104     A7 28 C2 FA | 	rdbyte	local02, fp
2f108     0C 4E 85 F1 | 	sub	fp, #12
2f10c     08 28 CE F7 | 	test	local02, #8 wz
2f110     0C 4E 05 51 |  if_ne	add	fp, #12
2f114     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
2f118     40 28 46 55 |  if_ne	or	local02, #64
2f11c     A7 28 42 5C |  if_ne	wrbyte	local02, fp
2f120     0C 4E 85 51 |  if_ne	sub	fp, #12
2f124     04 4E 05 F1 | 	add	fp, #4
2f128     A7 28 02 FB | 	rdlong	local02, fp
2f12c     40 4E 05 F1 | 	add	fp, #64
2f130     A7 26 02 FB | 	rdlong	local01, fp
2f134     30 26 06 F1 | 	add	local01, #48
2f138     13 27 02 FB | 	rdlong	local01, local01
2f13c     20 28 06 F1 | 	add	local02, #32
2f140     14 27 62 FC | 	wrlong	local01, local02
2f144     40 4E 85 F1 | 	sub	fp, #64
2f148     A7 28 02 FB | 	rdlong	local02, fp
2f14c     2C 4E 05 F1 | 	add	fp, #44
2f150     A7 26 02 FB | 	rdlong	local01, fp
2f154     30 4E 85 F1 | 	sub	fp, #48
2f158     24 28 06 F1 | 	add	local02, #36
2f15c     14 27 62 FC | 	wrlong	local01, local02
2f160                 | LR__4729
2f160     10 4E 05 F1 | 	add	fp, #16
2f164     A7 28 0A FB | 	rdlong	local02, fp wz
2f168     10 4E 85 F1 | 	sub	fp, #16
2f16c     F4 02 90 5D |  if_ne	jmp	#LR__4735
2f170     04 4E 05 F1 | 	add	fp, #4
2f174     A7 28 02 FB | 	rdlong	local02, fp
2f178     40 4E 05 F1 | 	add	fp, #64
2f17c     A7 12 02 FB | 	rdlong	arg01, fp
2f180     14 4E 85 F1 | 	sub	fp, #20
2f184     A7 14 02 FB | 	rdlong	arg02, fp
2f188     30 4E 85 F1 | 	sub	fp, #48
2f18c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2f190     08 28 06 F1 | 	add	local02, #8
2f194     14 FB 61 FC | 	wrlong	result1, local02
2f198     04 4E 05 F1 | 	add	fp, #4
2f19c     A7 28 02 FB | 	rdlong	local02, fp
2f1a0     2C 4E 05 F1 | 	add	fp, #44
2f1a4     A7 12 02 FB | 	rdlong	arg01, fp
2f1a8     1C 12 06 F1 | 	add	arg01, #28
2f1ac                 | ' {
2f1ac                 | ' 
2f1ac                 | ' 	return *((DWORD*)ptr);
2f1ac     09 FB 01 FB | 	rdlong	result1, arg01
2f1b0     0C 28 06 F1 | 	add	local02, #12
2f1b4     14 FB 61 FC | 	wrlong	result1, local02
2f1b8     2C 4E 85 F1 | 	sub	fp, #44
2f1bc     A7 28 02 FB | 	rdlong	local02, fp
2f1c0     40 4E 05 F1 | 	add	fp, #64
2f1c4     A7 26 02 FB | 	rdlong	local01, fp
2f1c8     14 27 62 FC | 	wrlong	local01, local02
2f1cc     40 4E 85 F1 | 	sub	fp, #64
2f1d0     A7 28 02 FB | 	rdlong	local02, fp
2f1d4     40 4E 05 F1 | 	add	fp, #64
2f1d8     A7 26 02 FB | 	rdlong	local01, fp
2f1dc     06 26 06 F1 | 	add	local01, #6
2f1e0     13 27 E2 FA | 	rdword	local01, local01
2f1e4     04 28 06 F1 | 	add	local02, #4
2f1e8     14 27 52 FC | 	wrword	local01, local02
2f1ec     40 4E 85 F1 | 	sub	fp, #64
2f1f0     A7 28 02 FB | 	rdlong	local02, fp
2f1f4     08 4E 05 F1 | 	add	fp, #8
2f1f8     A7 26 C2 FA | 	rdbyte	local01, fp
2f1fc     10 28 06 F1 | 	add	local02, #16
2f200     14 27 42 FC | 	wrbyte	local01, local02
2f204     08 4E 85 F1 | 	sub	fp, #8
2f208     A7 28 02 FB | 	rdlong	local02, fp
2f20c     11 28 06 F1 | 	add	local02, #17
2f210     14 01 48 FC | 	wrbyte	#0, local02
2f214     A7 28 02 FB | 	rdlong	local02, fp
2f218     1C 28 06 F1 | 	add	local02, #28
2f21c     14 01 68 FC | 	wrlong	#0, local02
2f220     A7 28 02 FB | 	rdlong	local02, fp
2f224     14 28 06 F1 | 	add	local02, #20
2f228     14 01 68 FC | 	wrlong	#0, local02
2f22c     A7 12 02 FB | 	rdlong	arg01, fp
2f230     04 4E 85 F1 | 	sub	fp, #4
2f234     28 12 06 F1 | 	add	arg01, #40
2f238     00 14 06 F6 | 	mov	arg02, #0
2f23c     09 16 C6 F9 | 	decod	arg03, #9
2f240     98 00 A0 FD | 	call	#\builtin_bytefill_
2f244     0C 4E 05 F1 | 	add	fp, #12
2f248     A7 28 C2 FA | 	rdbyte	local02, fp
2f24c     0C 4E 85 F1 | 	sub	fp, #12
2f250     20 28 CE F7 | 	test	local02, #32 wz
2f254     0C 02 90 AD |  if_e	jmp	#LR__4734
2f258     04 4E 05 F1 | 	add	fp, #4
2f25c     A7 26 02 FB | 	rdlong	local01, fp
2f260     04 4E 85 F1 | 	sub	fp, #4
2f264     0C 26 06 F1 | 	add	local01, #12
2f268     13 29 02 FB | 	rdlong	local02, local01
2f26c     01 28 16 F2 | 	cmp	local02, #1 wc
2f270     F0 01 90 CD |  if_b	jmp	#LR__4734
2f274     04 4E 05 F1 | 	add	fp, #4
2f278     A7 26 02 FB | 	rdlong	local01, fp
2f27c     13 29 02 F6 | 	mov	local02, local01
2f280     0C 26 06 F1 | 	add	local01, #12
2f284     13 27 02 FB | 	rdlong	local01, local01
2f288     14 28 06 F1 | 	add	local02, #20
2f28c     14 27 62 FC | 	wrlong	local01, local02
2f290     40 4E 05 F1 | 	add	fp, #64
2f294     A7 28 02 FB | 	rdlong	local02, fp
2f298     0A 28 06 F1 | 	add	local02, #10
2f29c     14 29 E2 FA | 	rdword	local02, local02
2f2a0     09 28 66 F0 | 	shl	local02, #9
2f2a4     08 4E 05 F1 | 	add	fp, #8
2f2a8     A7 28 62 FC | 	wrlong	local02, fp
2f2ac     48 4E 85 F1 | 	sub	fp, #72
2f2b0     A7 28 02 FB | 	rdlong	local02, fp
2f2b4     08 28 06 F1 | 	add	local02, #8
2f2b8     14 27 02 FB | 	rdlong	local01, local02
2f2bc     4C 4E 05 F1 | 	add	fp, #76
2f2c0     A7 26 62 FC | 	wrlong	local01, fp
2f2c4                 | ' 				fp->fptr = fp->obj.objsize;
2f2c4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f2c4                 | ' 				clst = fp->obj.sclust;
2f2c4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2f2c4     4C 4E 85 F1 | 	sub	fp, #76
2f2c8     A7 28 02 FB | 	rdlong	local02, fp
2f2cc     0C 28 06 F1 | 	add	local02, #12
2f2d0     14 27 02 FB | 	rdlong	local01, local02
2f2d4     58 4E 05 F1 | 	add	fp, #88
2f2d8     A7 26 62 FC | 	wrlong	local01, fp
2f2dc     5C 4E 85 F1 | 	sub	fp, #92
2f2e0                 | LR__4730
2f2e0     10 4E 05 F1 | 	add	fp, #16
2f2e4     A7 28 0A FB | 	rdlong	local02, fp wz
2f2e8     10 4E 85 F1 | 	sub	fp, #16
2f2ec     94 00 90 5D |  if_ne	jmp	#LR__4731
2f2f0     5C 4E 05 F1 | 	add	fp, #92
2f2f4     A7 28 02 FB | 	rdlong	local02, fp
2f2f8     10 4E 85 F1 | 	sub	fp, #16
2f2fc     A7 26 02 FB | 	rdlong	local01, fp
2f300     4C 4E 85 F1 | 	sub	fp, #76
2f304     13 29 1A F2 | 	cmp	local02, local01 wcz
2f308     78 00 90 ED |  if_be	jmp	#LR__4731
2f30c     04 4E 05 F1 | 	add	fp, #4
2f310     A7 12 02 FB | 	rdlong	arg01, fp
2f314     4C 4E 05 F1 | 	add	fp, #76
2f318     A7 14 02 FB | 	rdlong	arg02, fp
2f31c     50 4E 85 F1 | 	sub	fp, #80
2f320     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2f324     50 4E 05 F1 | 	add	fp, #80
2f328     A7 FA 61 FC | 	wrlong	result1, fp
2f32c     50 4E 85 F1 | 	sub	fp, #80
2f330     02 FA 15 F2 | 	cmp	result1, #2 wc
2f334     10 4E 05 C1 |  if_b	add	fp, #16
2f338     A7 04 68 CC |  if_b	wrlong	#2, fp
2f33c     10 4E 85 C1 |  if_b	sub	fp, #16
2f340     50 4E 05 F1 | 	add	fp, #80
2f344     A7 28 02 FB | 	rdlong	local02, fp
2f348     50 4E 85 F1 | 	sub	fp, #80
2f34c     FF FF 7F FF 
2f350     FF 29 0E F2 | 	cmp	local02, ##-1 wz
2f354     10 4E 05 A1 |  if_e	add	fp, #16
2f358     A7 02 68 AC |  if_e	wrlong	#1, fp
2f35c     10 4E 85 A1 |  if_e	sub	fp, #16
2f360     5C 4E 05 F1 | 	add	fp, #92
2f364     A7 28 02 FB | 	rdlong	local02, fp
2f368     10 4E 85 F1 | 	sub	fp, #16
2f36c     A7 26 02 FB | 	rdlong	local01, fp
2f370     13 29 82 F1 | 	sub	local02, local01
2f374     10 4E 05 F1 | 	add	fp, #16
2f378     A7 28 62 FC | 	wrlong	local02, fp
2f37c     5C 4E 85 F1 | 	sub	fp, #92
2f380     5C FF 9F FD | 	jmp	#LR__4730
2f384                 | LR__4731
2f384     04 4E 05 F1 | 	add	fp, #4
2f388     A7 28 02 FB | 	rdlong	local02, fp
2f38c     4C 4E 05 F1 | 	add	fp, #76
2f390     A7 26 02 FB | 	rdlong	local01, fp
2f394     18 28 06 F1 | 	add	local02, #24
2f398     14 27 62 FC | 	wrlong	local01, local02
2f39c     40 4E 85 F1 | 	sub	fp, #64
2f3a0     A7 28 0A FB | 	rdlong	local02, fp wz
2f3a4     10 4E 85 F1 | 	sub	fp, #16
2f3a8     B8 00 90 5D |  if_ne	jmp	#LR__4733
2f3ac     5C 4E 05 F1 | 	add	fp, #92
2f3b0     A7 26 02 FB | 	rdlong	local01, fp
2f3b4     5C 4E 85 F1 | 	sub	fp, #92
2f3b8     FF 27 CE F7 | 	test	local01, #511 wz
2f3bc     A4 00 90 AD |  if_e	jmp	#LR__4733
2f3c0     44 4E 05 F1 | 	add	fp, #68
2f3c4     A7 12 02 FB | 	rdlong	arg01, fp
2f3c8     0C 4E 05 F1 | 	add	fp, #12
2f3cc     A7 14 02 FB | 	rdlong	arg02, fp
2f3d0     50 4E 85 F1 | 	sub	fp, #80
2f3d4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2f3d8     58 4E 05 F1 | 	add	fp, #88
2f3dc     A7 FA 61 FC | 	wrlong	result1, fp
2f3e0     00 FA 4D F2 | 	cmps	result1, #0 wz
2f3e4     58 4E 85 F1 | 	sub	fp, #88
2f3e8     10 4E 05 A1 |  if_e	add	fp, #16
2f3ec     A7 04 68 AC |  if_e	wrlong	#2, fp
2f3f0     10 4E 85 A1 |  if_e	sub	fp, #16
2f3f4     6C 00 90 AD |  if_e	jmp	#LR__4732
2f3f8     04 4E 05 F1 | 	add	fp, #4
2f3fc     A7 28 02 FB | 	rdlong	local02, fp
2f400     54 4E 05 F1 | 	add	fp, #84
2f404     A7 26 02 FB | 	rdlong	local01, fp
2f408     04 4E 05 F1 | 	add	fp, #4
2f40c     A7 18 02 FB | 	rdlong	arg04, fp
2f410     09 18 46 F0 | 	shr	arg04, #9
2f414     0C 27 02 F1 | 	add	local01, arg04
2f418     1C 28 06 F1 | 	add	local02, #28
2f41c     14 27 62 FC | 	wrlong	local01, local02
2f420     18 4E 85 F1 | 	sub	fp, #24
2f424     A7 28 02 FB | 	rdlong	local02, fp
2f428     01 28 06 F1 | 	add	local02, #1
2f42c     14 13 C2 FA | 	rdbyte	arg01, local02
2f430     40 4E 85 F1 | 	sub	fp, #64
2f434     A7 28 02 FB | 	rdlong	local02, fp
2f438     14 15 02 F6 | 	mov	arg02, local02
2f43c     28 14 06 F1 | 	add	arg02, #40
2f440     04 4E 85 F1 | 	sub	fp, #4
2f444     1C 28 06 F1 | 	add	local02, #28
2f448     14 17 02 FB | 	rdlong	arg03, local02
2f44c     01 18 06 F6 | 	mov	arg04, #1
2f450     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2f454     00 FA 0D F2 | 	cmp	result1, #0 wz
2f458     10 4E 05 51 |  if_ne	add	fp, #16
2f45c     A7 02 68 5C |  if_ne	wrlong	#1, fp
2f460     10 4E 85 51 |  if_ne	sub	fp, #16
2f464                 | LR__4732
2f464                 | LR__4733
2f464                 | LR__4734
2f464                 | LR__4735
2f464                 | LR__4736
2f464     10 4E 05 F1 | 	add	fp, #16
2f468     A7 28 0A FB | 	rdlong	local02, fp wz
2f46c     10 4E 85 F1 | 	sub	fp, #16
2f470     04 4E 05 51 |  if_ne	add	fp, #4
2f474     A7 28 02 5B |  if_ne	rdlong	local02, fp
2f478     04 4E 85 51 |  if_ne	sub	fp, #4
2f47c     14 01 68 5C |  if_ne	wrlong	#0, local02
2f480                 | ' 
2f480                 | ' 	return res ;
2f480     10 4E 05 F1 | 	add	fp, #16
2f484     A7 FA 01 FB | 	rdlong	result1, fp
2f488     10 4E 85 F1 | 	sub	fp, #16
2f48c                 | LR__4737
2f48c     A7 F0 03 F6 | 	mov	ptra, fp
2f490     B2 00 A0 FD | 	call	#popregs_
2f494                 | _fatfs_cc_f_open_ret
2f494     2D 00 64 FD | 	ret
2f498                 | 
2f498                 | _fatfs_cc_f_read
2f498     0E 4A 05 F6 | 	mov	COUNT_, #14
2f49c     A8 00 A0 FD | 	call	#pushregs_
2f4a0     38 F0 07 F1 | 	add	ptra, #56
2f4a4     04 4E 05 F1 | 	add	fp, #4
2f4a8     A7 12 62 FC | 	wrlong	arg01, fp
2f4ac     04 4E 05 F1 | 	add	fp, #4
2f4b0     A7 14 62 FC | 	wrlong	arg02, fp
2f4b4     04 4E 05 F1 | 	add	fp, #4
2f4b8     A7 16 62 FC | 	wrlong	arg03, fp
2f4bc     04 4E 05 F1 | 	add	fp, #4
2f4c0     A7 18 62 FC | 	wrlong	arg04, fp
2f4c4     08 4E 85 F1 | 	sub	fp, #8
2f4c8     A7 FA 01 FB | 	rdlong	result1, fp
2f4cc     2C 4E 05 F1 | 	add	fp, #44
2f4d0     A7 FA 61 FC | 	wrlong	result1, fp
2f4d4     24 4E 85 F1 | 	sub	fp, #36
2f4d8     A7 FA 01 FB | 	rdlong	result1, fp
2f4dc     FD 00 68 FC | 	wrlong	#0, result1
2f4e0     0C 4E 85 F1 | 	sub	fp, #12
2f4e4     A7 12 02 FB | 	rdlong	arg01, fp
2f4e8     14 4E 05 F1 | 	add	fp, #20
2f4ec     A7 14 02 F6 | 	mov	arg02, fp
2f4f0     18 4E 85 F1 | 	sub	fp, #24
2f4f4     24 F7 BF FD | 	call	#_fatfs_cc_validate
2f4f8     14 4E 05 F1 | 	add	fp, #20
2f4fc     A7 FA 61 FC | 	wrlong	result1, fp
2f500     00 FA 4D F2 | 	cmps	result1, #0 wz
2f504     14 4E 85 F1 | 	sub	fp, #20
2f508     20 00 90 5D |  if_ne	jmp	#LR__4740
2f50c     04 4E 05 F1 | 	add	fp, #4
2f510     A7 14 02 FB | 	rdlong	arg02, fp
2f514     11 14 06 F1 | 	add	arg02, #17
2f518     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2f51c     10 4E 05 F1 | 	add	fp, #16
2f520     A7 14 62 FC | 	wrlong	arg02, fp
2f524     14 4E 85 F1 | 	sub	fp, #20
2f528     10 00 90 AD |  if_e	jmp	#LR__4741
2f52c                 | LR__4740
2f52c     14 4E 05 F1 | 	add	fp, #20
2f530     A7 FA 01 FB | 	rdlong	result1, fp
2f534     14 4E 85 F1 | 	sub	fp, #20
2f538     EC 05 90 FD | 	jmp	#LR__4760
2f53c                 | LR__4741
2f53c     04 4E 05 F1 | 	add	fp, #4
2f540     A7 18 02 FB | 	rdlong	arg04, fp
2f544     04 4E 85 F1 | 	sub	fp, #4
2f548     10 18 06 F1 | 	add	arg04, #16
2f54c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f550     01 18 CE F7 | 	test	arg04, #1 wz
2f554     07 FA 05 A6 |  if_e	mov	result1, #7
2f558     CC 05 90 AD |  if_e	jmp	#LR__4760
2f55c     04 4E 05 F1 | 	add	fp, #4
2f560     A7 26 02 FB | 	rdlong	local01, fp
2f564     13 29 02 F6 | 	mov	local02, local01
2f568     0C 28 06 F1 | 	add	local02, #12
2f56c     14 2B 02 FB | 	rdlong	local03, local02
2f570     14 26 06 F1 | 	add	local01, #20
2f574     13 27 02 FB | 	rdlong	local01, local01
2f578     13 2B 82 F1 | 	sub	local03, local01
2f57c     20 4E 05 F1 | 	add	fp, #32
2f580     A7 2A 62 FC | 	wrlong	local03, fp
2f584     18 4E 85 F1 | 	sub	fp, #24
2f588     A7 2C 02 FB | 	rdlong	local04, fp
2f58c     0C 4E 85 F1 | 	sub	fp, #12
2f590     15 2D 1A F2 | 	cmp	local04, local03 wcz
2f594     24 4E 05 11 |  if_a	add	fp, #36
2f598     A7 2C 02 1B |  if_a	rdlong	local04, fp
2f59c     18 4E 85 11 |  if_a	sub	fp, #24
2f5a0     A7 2C 62 1C |  if_a	wrlong	local04, fp
2f5a4     0C 4E 85 11 |  if_a	sub	fp, #12
2f5a8                 | ' 
2f5a8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2f5a8                 | LR__4742
2f5a8     0C 4E 05 F1 | 	add	fp, #12
2f5ac     A7 28 02 FB | 	rdlong	local02, fp
2f5b0     0C 4E 85 F1 | 	sub	fp, #12
2f5b4     14 2D 02 F6 | 	mov	local04, local02
2f5b8     01 2C 16 F2 | 	cmp	local04, #1 wc
2f5bc     64 05 90 CD |  if_b	jmp	#LR__4759
2f5c0     04 4E 05 F1 | 	add	fp, #4
2f5c4     A7 2A 02 FB | 	rdlong	local03, fp
2f5c8     04 4E 85 F1 | 	sub	fp, #4
2f5cc     14 2A 06 F1 | 	add	local03, #20
2f5d0     15 2B 02 FB | 	rdlong	local03, local03
2f5d4     FF 2B CE F7 | 	test	local03, #511 wz
2f5d8     3C 04 90 5D |  if_ne	jmp	#LR__4757
2f5dc     04 4E 05 F1 | 	add	fp, #4
2f5e0     A7 26 02 FB | 	rdlong	local01, fp
2f5e4     14 26 06 F1 | 	add	local01, #20
2f5e8     13 2B 02 FB | 	rdlong	local03, local01
2f5ec     09 2A 46 F0 | 	shr	local03, #9
2f5f0     14 4E 05 F1 | 	add	fp, #20
2f5f4     A7 2E 02 FB | 	rdlong	local05, fp
2f5f8     17 31 02 F6 | 	mov	local06, local05
2f5fc     0A 30 06 F1 | 	add	local06, #10
2f600     18 33 E2 FA | 	rdword	local07, local06
2f604     0A 30 86 F1 | 	sub	local06, #10
2f608     19 35 32 F9 | 	getword	local08, local07, #0
2f60c     01 34 86 F1 | 	sub	local08, #1
2f610     1A 2B 0A F5 | 	and	local03, local08 wz
2f614     18 4E 05 F1 | 	add	fp, #24
2f618     A7 2A 62 FC | 	wrlong	local03, fp
2f61c     30 4E 85 F1 | 	sub	fp, #48
2f620     E0 00 90 5D |  if_ne	jmp	#LR__4747
2f624     04 4E 05 F1 | 	add	fp, #4
2f628     A7 2A 02 FB | 	rdlong	local03, fp
2f62c     04 4E 85 F1 | 	sub	fp, #4
2f630     14 2A 06 F1 | 	add	local03, #20
2f634     15 2B 0A FB | 	rdlong	local03, local03 wz
2f638     20 00 90 5D |  if_ne	jmp	#LR__4743
2f63c     04 4E 05 F1 | 	add	fp, #4
2f640     A7 2A 02 FB | 	rdlong	local03, fp
2f644     08 2A 06 F1 | 	add	local03, #8
2f648     15 2B 02 FB | 	rdlong	local03, local03
2f64c     18 4E 05 F1 | 	add	fp, #24
2f650     A7 2A 62 FC | 	wrlong	local03, fp
2f654     1C 4E 85 F1 | 	sub	fp, #28
2f658     28 00 90 FD | 	jmp	#LR__4744
2f65c                 | LR__4743
2f65c     04 4E 05 F1 | 	add	fp, #4
2f660     A7 34 02 FB | 	rdlong	local08, fp
2f664     1A 13 02 F6 | 	mov	arg01, local08
2f668     04 4E 85 F1 | 	sub	fp, #4
2f66c     18 34 06 F1 | 	add	local08, #24
2f670     1A 15 02 FB | 	rdlong	arg02, local08
2f674     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2f678     1C 4E 05 F1 | 	add	fp, #28
2f67c     A7 FA 61 FC | 	wrlong	result1, fp
2f680     1C 4E 85 F1 | 	sub	fp, #28
2f684                 | LR__4744
2f684     1C 4E 05 F1 | 	add	fp, #28
2f688     A7 2A 02 FB | 	rdlong	local03, fp
2f68c     1C 4E 85 F1 | 	sub	fp, #28
2f690     02 2A 16 F2 | 	cmp	local03, #2 wc
2f694     1C 00 90 3D |  if_ae	jmp	#LR__4745
2f698     04 4E 05 F1 | 	add	fp, #4
2f69c     A7 2A 02 FB | 	rdlong	local03, fp
2f6a0     04 4E 85 F1 | 	sub	fp, #4
2f6a4     11 2A 06 F1 | 	add	local03, #17
2f6a8     15 05 48 FC | 	wrbyte	#2, local03
2f6ac     02 FA 05 F6 | 	mov	result1, #2
2f6b0     74 04 90 FD | 	jmp	#LR__4760
2f6b4                 | LR__4745
2f6b4     1C 4E 05 F1 | 	add	fp, #28
2f6b8     A7 2A 02 FB | 	rdlong	local03, fp
2f6bc     1C 4E 85 F1 | 	sub	fp, #28
2f6c0     FF FF 7F FF 
2f6c4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2f6c8     1C 00 90 5D |  if_ne	jmp	#LR__4746
2f6cc     04 4E 05 F1 | 	add	fp, #4
2f6d0     A7 2A 02 FB | 	rdlong	local03, fp
2f6d4     04 4E 85 F1 | 	sub	fp, #4
2f6d8     11 2A 06 F1 | 	add	local03, #17
2f6dc     15 03 48 FC | 	wrbyte	#1, local03
2f6e0     01 FA 05 F6 | 	mov	result1, #1
2f6e4     40 04 90 FD | 	jmp	#LR__4760
2f6e8                 | LR__4746
2f6e8     04 4E 05 F1 | 	add	fp, #4
2f6ec     A7 2A 02 FB | 	rdlong	local03, fp
2f6f0     18 4E 05 F1 | 	add	fp, #24
2f6f4     A7 34 02 FB | 	rdlong	local08, fp
2f6f8     1C 4E 85 F1 | 	sub	fp, #28
2f6fc     18 2A 06 F1 | 	add	local03, #24
2f700     15 35 62 FC | 	wrlong	local08, local03
2f704                 | LR__4747
2f704     18 4E 05 F1 | 	add	fp, #24
2f708     A7 12 02 FB | 	rdlong	arg01, fp
2f70c     14 4E 85 F1 | 	sub	fp, #20
2f710     A7 2A 02 FB | 	rdlong	local03, fp
2f714     04 4E 85 F1 | 	sub	fp, #4
2f718     18 2A 06 F1 | 	add	local03, #24
2f71c     15 15 02 FB | 	rdlong	arg02, local03
2f720     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2f724     20 4E 05 F1 | 	add	fp, #32
2f728     A7 FA 61 FC | 	wrlong	result1, fp
2f72c     20 4E 85 F1 | 	sub	fp, #32
2f730     00 FA 0D F2 | 	cmp	result1, #0 wz
2f734     1C 00 90 5D |  if_ne	jmp	#LR__4748
2f738     04 4E 05 F1 | 	add	fp, #4
2f73c     A7 2A 02 FB | 	rdlong	local03, fp
2f740     04 4E 85 F1 | 	sub	fp, #4
2f744     11 2A 06 F1 | 	add	local03, #17
2f748     15 05 48 FC | 	wrbyte	#2, local03
2f74c     02 FA 05 F6 | 	mov	result1, #2
2f750     D4 03 90 FD | 	jmp	#LR__4760
2f754                 | LR__4748
2f754     20 4E 05 F1 | 	add	fp, #32
2f758     A7 2A 02 FB | 	rdlong	local03, fp
2f75c     10 4E 05 F1 | 	add	fp, #16
2f760     A7 34 02 FB | 	rdlong	local08, fp
2f764     1A 2B 02 F1 | 	add	local03, local08
2f768     10 4E 85 F1 | 	sub	fp, #16
2f76c     A7 2A 62 FC | 	wrlong	local03, fp
2f770     14 4E 85 F1 | 	sub	fp, #20
2f774     A7 2A 02 FB | 	rdlong	local03, fp
2f778     09 2A 46 F0 | 	shr	local03, #9
2f77c     20 4E 05 F1 | 	add	fp, #32
2f780     A7 2A 62 FC | 	wrlong	local03, fp
2f784     2C 4E 85 F1 | 	sub	fp, #44
2f788     01 2A 16 F2 | 	cmp	local03, #1 wc
2f78c     5C 01 90 CD |  if_b	jmp	#LR__4752
2f790     30 4E 05 F1 | 	add	fp, #48
2f794     A7 2A 02 FB | 	rdlong	local03, fp
2f798     04 4E 85 F1 | 	sub	fp, #4
2f79c     A7 34 02 FB | 	rdlong	local08, fp
2f7a0     1A 2B 02 F1 | 	add	local03, local08
2f7a4     14 4E 85 F1 | 	sub	fp, #20
2f7a8     A7 34 02 FB | 	rdlong	local08, fp
2f7ac     18 4E 85 F1 | 	sub	fp, #24
2f7b0     0A 34 06 F1 | 	add	local08, #10
2f7b4     1A 35 E2 FA | 	rdword	local08, local08
2f7b8     1A 2B 1A F2 | 	cmp	local03, local08 wcz
2f7bc     28 00 90 ED |  if_be	jmp	#LR__4749
2f7c0     18 4E 05 F1 | 	add	fp, #24
2f7c4     A7 26 02 FB | 	rdlong	local01, fp
2f7c8     0A 26 06 F1 | 	add	local01, #10
2f7cc     13 2B E2 FA | 	rdword	local03, local01
2f7d0     18 4E 05 F1 | 	add	fp, #24
2f7d4     A7 34 02 FB | 	rdlong	local08, fp
2f7d8     1A 2B 82 F1 | 	sub	local03, local08
2f7dc     04 4E 85 F1 | 	sub	fp, #4
2f7e0     A7 2A 62 FC | 	wrlong	local03, fp
2f7e4     2C 4E 85 F1 | 	sub	fp, #44
2f7e8                 | LR__4749
2f7e8     18 4E 05 F1 | 	add	fp, #24
2f7ec     A7 26 02 FB | 	rdlong	local01, fp
2f7f0     01 26 06 F1 | 	add	local01, #1
2f7f4     13 13 C2 FA | 	rdbyte	arg01, local01
2f7f8     1C 4E 05 F1 | 	add	fp, #28
2f7fc     A7 14 02 FB | 	rdlong	arg02, fp
2f800     14 4E 85 F1 | 	sub	fp, #20
2f804     A7 16 02 FB | 	rdlong	arg03, fp
2f808     0C 4E 05 F1 | 	add	fp, #12
2f80c     A7 18 02 FB | 	rdlong	arg04, fp
2f810     2C 4E 85 F1 | 	sub	fp, #44
2f814     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2f818     00 FA 0D F2 | 	cmp	result1, #0 wz
2f81c     1C 00 90 AD |  if_e	jmp	#LR__4750
2f820     04 4E 05 F1 | 	add	fp, #4
2f824     A7 2A 02 FB | 	rdlong	local03, fp
2f828     04 4E 85 F1 | 	sub	fp, #4
2f82c     11 2A 06 F1 | 	add	local03, #17
2f830     15 03 48 FC | 	wrbyte	#1, local03
2f834     01 FA 05 F6 | 	mov	result1, #1
2f838     EC 02 90 FD | 	jmp	#LR__4760
2f83c                 | LR__4750
2f83c     04 4E 05 F1 | 	add	fp, #4
2f840     A7 26 02 FB | 	rdlong	local01, fp
2f844     04 4E 85 F1 | 	sub	fp, #4
2f848     10 26 06 F1 | 	add	local01, #16
2f84c     13 2B C2 FA | 	rdbyte	local03, local01
2f850     80 2A CE F7 | 	test	local03, #128 wz
2f854     78 00 90 AD |  if_e	jmp	#LR__4751
2f858     04 4E 05 F1 | 	add	fp, #4
2f85c     A7 34 02 FB | 	rdlong	local08, fp
2f860     1C 34 06 F1 | 	add	local08, #28
2f864     1A 35 02 FB | 	rdlong	local08, local08
2f868     1C 4E 05 F1 | 	add	fp, #28
2f86c     A7 36 02 FB | 	rdlong	local09, fp
2f870     1B 35 82 F1 | 	sub	local08, local09
2f874     0C 4E 05 F1 | 	add	fp, #12
2f878     A7 38 02 FB | 	rdlong	local10, fp
2f87c     2C 4E 85 F1 | 	sub	fp, #44
2f880     1C 3B 02 F6 | 	mov	local11, local10
2f884     1D 35 12 F2 | 	cmp	local08, local11 wc
2f888     44 00 90 3D |  if_ae	jmp	#LR__4751
2f88c     34 4E 05 F1 | 	add	fp, #52
2f890     A7 12 02 FB | 	rdlong	arg01, fp
2f894     30 4E 85 F1 | 	sub	fp, #48
2f898     A7 14 02 FB | 	rdlong	arg02, fp
2f89c     0A 3B 02 F6 | 	mov	local11, arg02
2f8a0     1C 3A 06 F1 | 	add	local11, #28
2f8a4     1D 37 02 FB | 	rdlong	local09, local11
2f8a8     1C 4E 05 F1 | 	add	fp, #28
2f8ac     A7 2E 02 FB | 	rdlong	local05, fp
2f8b0     17 37 82 F1 | 	sub	local09, local05
2f8b4     09 36 66 F0 | 	shl	local09, #9
2f8b8     1B 3B 02 F6 | 	mov	local11, local09
2f8bc     1B 13 02 F1 | 	add	arg01, local09
2f8c0     20 4E 85 F1 | 	sub	fp, #32
2f8c4     28 14 06 F1 | 	add	arg02, #40
2f8c8     09 16 C6 F9 | 	decod	arg03, #9
2f8cc     64 43 BF FD | 	call	#__system____builtin_memmove
2f8d0                 | LR__4751
2f8d0     2C 4E 05 F1 | 	add	fp, #44
2f8d4     A7 2A 02 FB | 	rdlong	local03, fp
2f8d8     09 2A 66 F0 | 	shl	local03, #9
2f8dc     04 4E 85 F1 | 	sub	fp, #4
2f8e0     A7 2A 62 FC | 	wrlong	local03, fp
2f8e4     28 4E 85 F1 | 	sub	fp, #40
2f8e8                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2f8e8                 | ' 				}
2f8e8                 | ' 
2f8e8                 | ' 
2f8e8                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2f8e8                 | ' 				continue;
2f8e8     B4 01 90 FD | 	jmp	#LR__4758
2f8ec                 | LR__4752
2f8ec     04 4E 05 F1 | 	add	fp, #4
2f8f0     A7 2A 02 FB | 	rdlong	local03, fp
2f8f4     1C 2A 06 F1 | 	add	local03, #28
2f8f8     15 2B 02 FB | 	rdlong	local03, local03
2f8fc     1C 4E 05 F1 | 	add	fp, #28
2f900     A7 26 02 FB | 	rdlong	local01, fp
2f904     20 4E 85 F1 | 	sub	fp, #32
2f908     13 2B 0A F2 | 	cmp	local03, local01 wz
2f90c     EC 00 90 AD |  if_e	jmp	#LR__4756
2f910     04 4E 05 F1 | 	add	fp, #4
2f914     A7 26 02 FB | 	rdlong	local01, fp
2f918     04 4E 85 F1 | 	sub	fp, #4
2f91c     10 26 06 F1 | 	add	local01, #16
2f920     13 2B C2 FA | 	rdbyte	local03, local01
2f924     80 2A CE F7 | 	test	local03, #128 wz
2f928     7C 00 90 AD |  if_e	jmp	#LR__4754
2f92c     18 4E 05 F1 | 	add	fp, #24
2f930     A7 26 02 FB | 	rdlong	local01, fp
2f934     01 26 06 F1 | 	add	local01, #1
2f938     13 13 C2 FA | 	rdbyte	arg01, local01
2f93c     14 4E 85 F1 | 	sub	fp, #20
2f940     A7 2A 02 FB | 	rdlong	local03, fp
2f944     15 15 02 F6 | 	mov	arg02, local03
2f948     28 14 06 F1 | 	add	arg02, #40
2f94c     04 4E 85 F1 | 	sub	fp, #4
2f950     1C 2A 06 F1 | 	add	local03, #28
2f954     15 17 02 FB | 	rdlong	arg03, local03
2f958     01 18 06 F6 | 	mov	arg04, #1
2f95c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2f960     00 FA 0D F2 | 	cmp	result1, #0 wz
2f964     1C 00 90 AD |  if_e	jmp	#LR__4753
2f968     04 4E 05 F1 | 	add	fp, #4
2f96c     A7 2A 02 FB | 	rdlong	local03, fp
2f970     04 4E 85 F1 | 	sub	fp, #4
2f974     11 2A 06 F1 | 	add	local03, #17
2f978     15 03 48 FC | 	wrbyte	#1, local03
2f97c     01 FA 05 F6 | 	mov	result1, #1
2f980     A4 01 90 FD | 	jmp	#LR__4760
2f984                 | LR__4753
2f984     04 4E 05 F1 | 	add	fp, #4
2f988     A7 3A 02 FB | 	rdlong	local11, fp
2f98c     1D 2B 02 F6 | 	mov	local03, local11
2f990     04 4E 85 F1 | 	sub	fp, #4
2f994     10 3A 06 F1 | 	add	local11, #16
2f998     1D 3B C2 FA | 	rdbyte	local11, local11
2f99c     7F 3A 06 F5 | 	and	local11, #127
2f9a0     10 2A 06 F1 | 	add	local03, #16
2f9a4     15 3B 42 FC | 	wrbyte	local11, local03
2f9a8                 | LR__4754
2f9a8     18 4E 05 F1 | 	add	fp, #24
2f9ac     A7 26 02 FB | 	rdlong	local01, fp
2f9b0     01 26 06 F1 | 	add	local01, #1
2f9b4     13 13 C2 FA | 	rdbyte	arg01, local01
2f9b8     14 4E 85 F1 | 	sub	fp, #20
2f9bc     A7 14 02 FB | 	rdlong	arg02, fp
2f9c0     28 14 06 F1 | 	add	arg02, #40
2f9c4     1C 4E 05 F1 | 	add	fp, #28
2f9c8     A7 16 02 FB | 	rdlong	arg03, fp
2f9cc     20 4E 85 F1 | 	sub	fp, #32
2f9d0     01 18 06 F6 | 	mov	arg04, #1
2f9d4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2f9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9dc     1C 00 90 AD |  if_e	jmp	#LR__4755
2f9e0     04 4E 05 F1 | 	add	fp, #4
2f9e4     A7 2A 02 FB | 	rdlong	local03, fp
2f9e8     04 4E 85 F1 | 	sub	fp, #4
2f9ec     11 2A 06 F1 | 	add	local03, #17
2f9f0     15 03 48 FC | 	wrbyte	#1, local03
2f9f4     01 FA 05 F6 | 	mov	result1, #1
2f9f8     2C 01 90 FD | 	jmp	#LR__4760
2f9fc                 | LR__4755
2f9fc                 | LR__4756
2f9fc     04 4E 05 F1 | 	add	fp, #4
2fa00     A7 2A 02 FB | 	rdlong	local03, fp
2fa04     1C 4E 05 F1 | 	add	fp, #28
2fa08     A7 3A 02 FB | 	rdlong	local11, fp
2fa0c     20 4E 85 F1 | 	sub	fp, #32
2fa10     1C 2A 06 F1 | 	add	local03, #28
2fa14     15 3B 62 FC | 	wrlong	local11, local03
2fa18                 | LR__4757
2fa18     04 4E 05 F1 | 	add	fp, #4
2fa1c     A7 26 02 FB | 	rdlong	local01, fp
2fa20     14 26 06 F1 | 	add	local01, #20
2fa24     13 3B 02 FB | 	rdlong	local11, local01
2fa28     FF 3B 06 F5 | 	and	local11, #511
2fa2c     09 2A C6 F9 | 	decod	local03, #9
2fa30     1D 2B 82 F1 | 	sub	local03, local11
2fa34     24 4E 05 F1 | 	add	fp, #36
2fa38     A7 2A 62 FC | 	wrlong	local03, fp
2fa3c     1C 4E 85 F1 | 	sub	fp, #28
2fa40     A7 3A 02 FB | 	rdlong	local11, fp
2fa44     0C 4E 85 F1 | 	sub	fp, #12
2fa48     1D 2B 1A F2 | 	cmp	local03, local11 wcz
2fa4c     0C 4E 05 11 |  if_a	add	fp, #12
2fa50     A7 2A 02 1B |  if_a	rdlong	local03, fp
2fa54     1C 4E 05 11 |  if_a	add	fp, #28
2fa58     A7 2A 62 1C |  if_a	wrlong	local03, fp
2fa5c     28 4E 85 11 |  if_a	sub	fp, #40
2fa60     34 4E 05 F1 | 	add	fp, #52
2fa64     A7 12 02 FB | 	rdlong	arg01, fp
2fa68     30 4E 85 F1 | 	sub	fp, #48
2fa6c     A7 30 02 FB | 	rdlong	local06, fp
2fa70     18 15 02 F6 | 	mov	arg02, local06
2fa74     28 14 06 F1 | 	add	arg02, #40
2fa78     14 30 06 F1 | 	add	local06, #20
2fa7c     18 3B 02 FB | 	rdlong	local11, local06
2fa80     1D 37 02 F6 | 	mov	local09, local11
2fa84     1B 39 02 F6 | 	mov	local10, local09
2fa88     FF 39 06 F5 | 	and	local10, #511
2fa8c     1C 15 02 F1 | 	add	arg02, local10
2fa90     24 4E 05 F1 | 	add	fp, #36
2fa94     A7 16 02 FB | 	rdlong	arg03, fp
2fa98     28 4E 85 F1 | 	sub	fp, #40
2fa9c     94 41 BF FD | 	call	#__system____builtin_memmove
2faa0                 | LR__4758
2faa0     0C 4E 05 F1 | 	add	fp, #12
2faa4     A7 2A 02 FB | 	rdlong	local03, fp
2faa8     1C 4E 05 F1 | 	add	fp, #28
2faac     A7 34 02 FB | 	rdlong	local08, fp
2fab0     1A 2B 82 F1 | 	sub	local03, local08
2fab4     1C 4E 85 F1 | 	sub	fp, #28
2fab8     A7 2A 62 FC | 	wrlong	local03, fp
2fabc     04 4E 05 F1 | 	add	fp, #4
2fac0     A7 26 02 FB | 	rdlong	local01, fp
2fac4     13 33 02 FB | 	rdlong	local07, local01
2fac8     18 4E 05 F1 | 	add	fp, #24
2facc     A7 34 02 FB | 	rdlong	local08, fp
2fad0     1A 33 02 F1 | 	add	local07, local08
2fad4     13 33 62 FC | 	wrlong	local07, local01
2fad8     0C 4E 05 F1 | 	add	fp, #12
2fadc     A7 2A 02 FB | 	rdlong	local03, fp
2fae0     0C 4E 85 F1 | 	sub	fp, #12
2fae4     A7 3C 02 FB | 	rdlong	local12, fp
2fae8     1E 2B 02 F1 | 	add	local03, local12
2faec     0C 4E 05 F1 | 	add	fp, #12
2faf0     A7 2A 62 FC | 	wrlong	local03, fp
2faf4     30 4E 85 F1 | 	sub	fp, #48
2faf8     A7 3E 02 FB | 	rdlong	local13, fp
2fafc     1F 2B 02 F6 | 	mov	local03, local13
2fb00     14 3E 06 F1 | 	add	local13, #20
2fb04     1F 41 02 FB | 	rdlong	local14, local13
2fb08     24 4E 05 F1 | 	add	fp, #36
2fb0c     A7 30 02 FB | 	rdlong	local06, fp
2fb10     28 4E 85 F1 | 	sub	fp, #40
2fb14     18 41 02 F1 | 	add	local14, local06
2fb18     14 2A 06 F1 | 	add	local03, #20
2fb1c     15 41 62 FC | 	wrlong	local14, local03
2fb20     84 FA 9F FD | 	jmp	#LR__4742
2fb24                 | LR__4759
2fb24                 | ' 
2fb24                 | ' 
2fb24                 | ' 
2fb24                 | ' 
2fb24                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2fb24                 | ' 
2fb24                 | ' 	}
2fb24                 | ' 
2fb24                 | ' 	return FR_OK ;
2fb24     00 FA 05 F6 | 	mov	result1, #0
2fb28                 | LR__4760
2fb28     A7 F0 03 F6 | 	mov	ptra, fp
2fb2c     B2 00 A0 FD | 	call	#popregs_
2fb30                 | _fatfs_cc_f_read_ret
2fb30     2D 00 64 FD | 	ret
2fb34                 | 
2fb34                 | _fatfs_cc_f_write
2fb34     15 4A 05 F6 | 	mov	COUNT_, #21
2fb38     A8 00 A0 FD | 	call	#pushregs_
2fb3c     34 F0 07 F1 | 	add	ptra, #52
2fb40     04 4E 05 F1 | 	add	fp, #4
2fb44     A7 12 62 FC | 	wrlong	arg01, fp
2fb48     04 4E 05 F1 | 	add	fp, #4
2fb4c     A7 14 62 FC | 	wrlong	arg02, fp
2fb50     04 4E 05 F1 | 	add	fp, #4
2fb54     A7 16 62 FC | 	wrlong	arg03, fp
2fb58     04 4E 05 F1 | 	add	fp, #4
2fb5c     A7 18 62 FC | 	wrlong	arg04, fp
2fb60     08 4E 85 F1 | 	sub	fp, #8
2fb64     A7 FA 01 FB | 	rdlong	result1, fp
2fb68     28 4E 05 F1 | 	add	fp, #40
2fb6c     A7 FA 61 FC | 	wrlong	result1, fp
2fb70     20 4E 85 F1 | 	sub	fp, #32
2fb74     A7 FA 01 FB | 	rdlong	result1, fp
2fb78     FD 00 68 FC | 	wrlong	#0, result1
2fb7c     0C 4E 85 F1 | 	sub	fp, #12
2fb80     A7 12 02 FB | 	rdlong	arg01, fp
2fb84     14 4E 05 F1 | 	add	fp, #20
2fb88     A7 14 02 F6 | 	mov	arg02, fp
2fb8c     18 4E 85 F1 | 	sub	fp, #24
2fb90     88 F0 BF FD | 	call	#_fatfs_cc_validate
2fb94     14 4E 05 F1 | 	add	fp, #20
2fb98     A7 FA 61 FC | 	wrlong	result1, fp
2fb9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2fba0     14 4E 85 F1 | 	sub	fp, #20
2fba4     20 00 90 5D |  if_ne	jmp	#LR__4770
2fba8     04 4E 05 F1 | 	add	fp, #4
2fbac     A7 14 02 FB | 	rdlong	arg02, fp
2fbb0     11 14 06 F1 | 	add	arg02, #17
2fbb4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2fbb8     10 4E 05 F1 | 	add	fp, #16
2fbbc     A7 14 62 FC | 	wrlong	arg02, fp
2fbc0     14 4E 85 F1 | 	sub	fp, #20
2fbc4     10 00 90 AD |  if_e	jmp	#LR__4771
2fbc8                 | LR__4770
2fbc8     14 4E 05 F1 | 	add	fp, #20
2fbcc     A7 FA 01 FB | 	rdlong	result1, fp
2fbd0     14 4E 85 F1 | 	sub	fp, #20
2fbd4     44 07 90 FD | 	jmp	#LR__4793
2fbd8                 | LR__4771
2fbd8     04 4E 05 F1 | 	add	fp, #4
2fbdc     A7 14 02 FB | 	rdlong	arg02, fp
2fbe0     04 4E 85 F1 | 	sub	fp, #4
2fbe4     10 14 06 F1 | 	add	arg02, #16
2fbe8     0A 15 C2 FA | 	rdbyte	arg02, arg02
2fbec     02 14 CE F7 | 	test	arg02, #2 wz
2fbf0     07 FA 05 A6 |  if_e	mov	result1, #7
2fbf4     24 07 90 AD |  if_e	jmp	#LR__4793
2fbf8     04 4E 05 F1 | 	add	fp, #4
2fbfc     A7 14 02 FB | 	rdlong	arg02, fp
2fc00     0A 13 02 F6 | 	mov	arg01, arg02
2fc04     14 12 06 F1 | 	add	arg01, #20
2fc08     09 13 02 FB | 	rdlong	arg01, arg01
2fc0c     08 4E 05 F1 | 	add	fp, #8
2fc10     A7 FA 01 FB | 	rdlong	result1, fp
2fc14     FD 12 02 F1 | 	add	arg01, result1
2fc18     0C 4E 85 F1 | 	sub	fp, #12
2fc1c     14 14 06 F1 | 	add	arg02, #20
2fc20     0A FB 01 FB | 	rdlong	result1, arg02
2fc24     FD 12 12 F2 | 	cmp	arg01, result1 wc
2fc28     24 00 90 3D |  if_ae	jmp	#LR__4772
2fc2c     04 4E 05 F1 | 	add	fp, #4
2fc30     A7 14 02 FB | 	rdlong	arg02, fp
2fc34     01 FA 65 F6 | 	neg	result1, #1
2fc38     14 14 06 F1 | 	add	arg02, #20
2fc3c     0A 15 02 FB | 	rdlong	arg02, arg02
2fc40     0A FB 81 F1 | 	sub	result1, arg02
2fc44     08 4E 05 F1 | 	add	fp, #8
2fc48     A7 FA 61 FC | 	wrlong	result1, fp
2fc4c     0C 4E 85 F1 | 	sub	fp, #12
2fc50                 | LR__4772
2fc50                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2fc50                 | ' 	}
2fc50                 | ' 
2fc50                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2fc50                 | LR__4773
2fc50     0C 4E 05 F1 | 	add	fp, #12
2fc54     A7 FA 01 FB | 	rdlong	result1, fp
2fc58     0C 4E 85 F1 | 	sub	fp, #12
2fc5c     01 FA 15 F2 | 	cmp	result1, #1 wc
2fc60     90 06 90 CD |  if_b	jmp	#LR__4792
2fc64     04 4E 05 F1 | 	add	fp, #4
2fc68     A7 FA 01 FB | 	rdlong	result1, fp
2fc6c     04 4E 85 F1 | 	sub	fp, #4
2fc70     14 FA 05 F1 | 	add	result1, #20
2fc74     FD FA 01 FB | 	rdlong	result1, result1
2fc78     FF FB CD F7 | 	test	result1, #511 wz
2fc7c     D8 04 90 5D |  if_ne	jmp	#LR__4788
2fc80     04 4E 05 F1 | 	add	fp, #4
2fc84     A7 FA 01 FB | 	rdlong	result1, fp
2fc88     14 FA 05 F1 | 	add	result1, #20
2fc8c     FD FA 01 FB | 	rdlong	result1, result1
2fc90     09 FA 45 F0 | 	shr	result1, #9
2fc94     14 4E 05 F1 | 	add	fp, #20
2fc98     A7 14 02 FB | 	rdlong	arg02, fp
2fc9c     0A 14 06 F1 | 	add	arg02, #10
2fca0     0A 19 E2 FA | 	rdword	arg04, arg02
2fca4     0C 15 32 F9 | 	getword	arg02, arg04, #0
2fca8     01 14 86 F1 | 	sub	arg02, #1
2fcac     0A FB 09 F5 | 	and	result1, arg02 wz
2fcb0     14 4E 05 F1 | 	add	fp, #20
2fcb4     A7 FA 61 FC | 	wrlong	result1, fp
2fcb8     2C 4E 85 F1 | 	sub	fp, #44
2fcbc     44 01 90 5D |  if_ne	jmp	#LR__4779
2fcc0     04 4E 05 F1 | 	add	fp, #4
2fcc4     A7 FA 01 FB | 	rdlong	result1, fp
2fcc8     04 4E 85 F1 | 	sub	fp, #4
2fccc     14 FA 05 F1 | 	add	result1, #20
2fcd0     FD 14 0A FB | 	rdlong	arg02, result1 wz
2fcd4     44 00 90 5D |  if_ne	jmp	#LR__4774
2fcd8     04 4E 05 F1 | 	add	fp, #4
2fcdc     A7 14 02 FB | 	rdlong	arg02, fp
2fce0     08 14 06 F1 | 	add	arg02, #8
2fce4     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2fce8     18 4E 05 F1 | 	add	fp, #24
2fcec     A7 14 62 FC | 	wrlong	arg02, fp
2fcf0     1C 4E 85 F1 | 	sub	fp, #28
2fcf4     4C 00 90 5D |  if_ne	jmp	#LR__4775
2fcf8     04 4E 05 F1 | 	add	fp, #4
2fcfc     A7 12 02 FB | 	rdlong	arg01, fp
2fd00     04 4E 85 F1 | 	sub	fp, #4
2fd04     00 14 06 F6 | 	mov	arg02, #0
2fd08     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2fd0c     1C 4E 05 F1 | 	add	fp, #28
2fd10     A7 FA 61 FC | 	wrlong	result1, fp
2fd14     1C 4E 85 F1 | 	sub	fp, #28
2fd18     28 00 90 FD | 	jmp	#LR__4775
2fd1c                 | LR__4774
2fd1c     04 4E 05 F1 | 	add	fp, #4
2fd20     A7 18 02 FB | 	rdlong	arg04, fp
2fd24     0C 13 02 F6 | 	mov	arg01, arg04
2fd28     04 4E 85 F1 | 	sub	fp, #4
2fd2c     18 18 06 F1 | 	add	arg04, #24
2fd30     0C 15 02 FB | 	rdlong	arg02, arg04
2fd34     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2fd38     1C 4E 05 F1 | 	add	fp, #28
2fd3c     A7 FA 61 FC | 	wrlong	result1, fp
2fd40     1C 4E 85 F1 | 	sub	fp, #28
2fd44                 | LR__4775
2fd44     1C 4E 05 F1 | 	add	fp, #28
2fd48     A7 FA 09 FB | 	rdlong	result1, fp wz
2fd4c     1C 4E 85 F1 | 	sub	fp, #28
2fd50     A0 05 90 AD |  if_e	jmp	#LR__4792
2fd54     1C 4E 05 F1 | 	add	fp, #28
2fd58     A7 FA 01 FB | 	rdlong	result1, fp
2fd5c     1C 4E 85 F1 | 	sub	fp, #28
2fd60     01 FA 0D F2 | 	cmp	result1, #1 wz
2fd64     1C 00 90 5D |  if_ne	jmp	#LR__4776
2fd68     04 4E 05 F1 | 	add	fp, #4
2fd6c     A7 FA 01 FB | 	rdlong	result1, fp
2fd70     04 4E 85 F1 | 	sub	fp, #4
2fd74     11 FA 05 F1 | 	add	result1, #17
2fd78     FD 04 48 FC | 	wrbyte	#2, result1
2fd7c     02 FA 05 F6 | 	mov	result1, #2
2fd80     98 05 90 FD | 	jmp	#LR__4793
2fd84                 | LR__4776
2fd84     1C 4E 05 F1 | 	add	fp, #28
2fd88     A7 FA 01 FB | 	rdlong	result1, fp
2fd8c     1C 4E 85 F1 | 	sub	fp, #28
2fd90     FF FF 7F FF 
2fd94     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2fd98     1C 00 90 5D |  if_ne	jmp	#LR__4777
2fd9c     04 4E 05 F1 | 	add	fp, #4
2fda0     A7 FA 01 FB | 	rdlong	result1, fp
2fda4     04 4E 85 F1 | 	sub	fp, #4
2fda8     11 FA 05 F1 | 	add	result1, #17
2fdac     FD 02 48 FC | 	wrbyte	#1, result1
2fdb0     01 FA 05 F6 | 	mov	result1, #1
2fdb4     64 05 90 FD | 	jmp	#LR__4793
2fdb8                 | LR__4777
2fdb8     04 4E 05 F1 | 	add	fp, #4
2fdbc     A7 FA 01 FB | 	rdlong	result1, fp
2fdc0     18 4E 05 F1 | 	add	fp, #24
2fdc4     A7 18 02 FB | 	rdlong	arg04, fp
2fdc8     18 FA 05 F1 | 	add	result1, #24
2fdcc     FD 18 62 FC | 	wrlong	arg04, result1
2fdd0     18 4E 85 F1 | 	sub	fp, #24
2fdd4     A7 FA 01 FB | 	rdlong	result1, fp
2fdd8     04 4E 85 F1 | 	sub	fp, #4
2fddc     08 FA 05 F1 | 	add	result1, #8
2fde0     FD FA 09 FB | 	rdlong	result1, result1 wz
2fde4     1C 00 90 5D |  if_ne	jmp	#LR__4778
2fde8     04 4E 05 F1 | 	add	fp, #4
2fdec     A7 18 02 FB | 	rdlong	arg04, fp
2fdf0     18 4E 05 F1 | 	add	fp, #24
2fdf4     A7 FA 01 FB | 	rdlong	result1, fp
2fdf8     1C 4E 85 F1 | 	sub	fp, #28
2fdfc     08 18 06 F1 | 	add	arg04, #8
2fe00     0C FB 61 FC | 	wrlong	result1, arg04
2fe04                 | LR__4778
2fe04                 | LR__4779
2fe04     04 4E 05 F1 | 	add	fp, #4
2fe08     A7 18 02 FB | 	rdlong	arg04, fp
2fe0c     04 4E 85 F1 | 	sub	fp, #4
2fe10     10 18 06 F1 | 	add	arg04, #16
2fe14     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fe18     80 18 CE F7 | 	test	arg04, #128 wz
2fe1c     7C 00 90 AD |  if_e	jmp	#LR__4781
2fe20     18 4E 05 F1 | 	add	fp, #24
2fe24     A7 18 02 FB | 	rdlong	arg04, fp
2fe28     01 18 06 F1 | 	add	arg04, #1
2fe2c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2fe30     14 4E 85 F1 | 	sub	fp, #20
2fe34     A7 18 02 FB | 	rdlong	arg04, fp
2fe38     0C 15 02 F6 | 	mov	arg02, arg04
2fe3c     28 14 06 F1 | 	add	arg02, #40
2fe40     04 4E 85 F1 | 	sub	fp, #4
2fe44     1C 18 06 F1 | 	add	arg04, #28
2fe48     0C 17 02 FB | 	rdlong	arg03, arg04
2fe4c     01 18 06 F6 | 	mov	arg04, #1
2fe50     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2fe54     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe58     1C 00 90 AD |  if_e	jmp	#LR__4780
2fe5c     04 4E 05 F1 | 	add	fp, #4
2fe60     A7 FA 01 FB | 	rdlong	result1, fp
2fe64     04 4E 85 F1 | 	sub	fp, #4
2fe68     11 FA 05 F1 | 	add	result1, #17
2fe6c     FD 02 48 FC | 	wrbyte	#1, result1
2fe70     01 FA 05 F6 | 	mov	result1, #1
2fe74     A4 04 90 FD | 	jmp	#LR__4793
2fe78                 | LR__4780
2fe78     04 4E 05 F1 | 	add	fp, #4
2fe7c     A7 18 02 FB | 	rdlong	arg04, fp
2fe80     0C FB 01 F6 | 	mov	result1, arg04
2fe84     04 4E 85 F1 | 	sub	fp, #4
2fe88     10 18 06 F1 | 	add	arg04, #16
2fe8c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fe90     7F 18 06 F5 | 	and	arg04, #127
2fe94     10 FA 05 F1 | 	add	result1, #16
2fe98     FD 18 42 FC | 	wrbyte	arg04, result1
2fe9c                 | LR__4781
2fe9c     18 4E 05 F1 | 	add	fp, #24
2fea0     A7 12 02 FB | 	rdlong	arg01, fp
2fea4     14 4E 85 F1 | 	sub	fp, #20
2fea8     A7 14 02 FB | 	rdlong	arg02, fp
2feac     04 4E 85 F1 | 	sub	fp, #4
2feb0     18 14 06 F1 | 	add	arg02, #24
2feb4     0A 15 02 FB | 	rdlong	arg02, arg02
2feb8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2febc     20 4E 05 F1 | 	add	fp, #32
2fec0     A7 FA 61 FC | 	wrlong	result1, fp
2fec4     20 4E 85 F1 | 	sub	fp, #32
2fec8     00 FA 0D F2 | 	cmp	result1, #0 wz
2fecc     1C 00 90 5D |  if_ne	jmp	#LR__4782
2fed0     04 4E 05 F1 | 	add	fp, #4
2fed4     A7 FA 01 FB | 	rdlong	result1, fp
2fed8     04 4E 85 F1 | 	sub	fp, #4
2fedc     11 FA 05 F1 | 	add	result1, #17
2fee0     FD 04 48 FC | 	wrbyte	#2, result1
2fee4     02 FA 05 F6 | 	mov	result1, #2
2fee8     30 04 90 FD | 	jmp	#LR__4793
2feec                 | LR__4782
2feec     20 4E 05 F1 | 	add	fp, #32
2fef0     A7 FA 01 FB | 	rdlong	result1, fp
2fef4     0C 4E 05 F1 | 	add	fp, #12
2fef8     A7 26 02 FB | 	rdlong	local01, fp
2fefc     13 FB 01 F1 | 	add	result1, local01
2ff00     0C 4E 85 F1 | 	sub	fp, #12
2ff04     A7 FA 61 FC | 	wrlong	result1, fp
2ff08     14 4E 85 F1 | 	sub	fp, #20
2ff0c     A7 FA 01 FB | 	rdlong	result1, fp
2ff10     09 FA 45 F0 | 	shr	result1, #9
2ff14     1C 4E 05 F1 | 	add	fp, #28
2ff18     A7 FA 61 FC | 	wrlong	result1, fp
2ff1c     28 4E 85 F1 | 	sub	fp, #40
2ff20     01 FA 15 F2 | 	cmp	result1, #1 wc
2ff24     60 01 90 CD |  if_b	jmp	#LR__4786
2ff28     2C 4E 05 F1 | 	add	fp, #44
2ff2c     A7 FA 01 FB | 	rdlong	result1, fp
2ff30     04 4E 85 F1 | 	sub	fp, #4
2ff34     A7 18 02 FB | 	rdlong	arg04, fp
2ff38     0C FB 01 F1 | 	add	result1, arg04
2ff3c     10 4E 85 F1 | 	sub	fp, #16
2ff40     A7 18 02 FB | 	rdlong	arg04, fp
2ff44     18 4E 85 F1 | 	sub	fp, #24
2ff48     0A 18 06 F1 | 	add	arg04, #10
2ff4c     0C 19 E2 FA | 	rdword	arg04, arg04
2ff50     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2ff54     28 00 90 ED |  if_be	jmp	#LR__4783
2ff58     18 4E 05 F1 | 	add	fp, #24
2ff5c     A7 FA 01 FB | 	rdlong	result1, fp
2ff60     0A FA 05 F1 | 	add	result1, #10
2ff64     FD FA E1 FA | 	rdword	result1, result1
2ff68     14 4E 05 F1 | 	add	fp, #20
2ff6c     A7 18 02 FB | 	rdlong	arg04, fp
2ff70     0C FB 81 F1 | 	sub	result1, arg04
2ff74     04 4E 85 F1 | 	sub	fp, #4
2ff78     A7 FA 61 FC | 	wrlong	result1, fp
2ff7c     28 4E 85 F1 | 	sub	fp, #40
2ff80                 | LR__4783
2ff80     18 4E 05 F1 | 	add	fp, #24
2ff84     A7 18 02 FB | 	rdlong	arg04, fp
2ff88     01 18 06 F1 | 	add	arg04, #1
2ff8c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ff90     18 4E 05 F1 | 	add	fp, #24
2ff94     A7 14 02 FB | 	rdlong	arg02, fp
2ff98     10 4E 85 F1 | 	sub	fp, #16
2ff9c     A7 16 02 FB | 	rdlong	arg03, fp
2ffa0     08 4E 05 F1 | 	add	fp, #8
2ffa4     A7 18 02 FB | 	rdlong	arg04, fp
2ffa8     28 4E 85 F1 | 	sub	fp, #40
2ffac     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2ffb0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ffb4     1C 00 90 AD |  if_e	jmp	#LR__4784
2ffb8     04 4E 05 F1 | 	add	fp, #4
2ffbc     A7 26 02 FB | 	rdlong	local01, fp
2ffc0     04 4E 85 F1 | 	sub	fp, #4
2ffc4     11 26 06 F1 | 	add	local01, #17
2ffc8     13 03 48 FC | 	wrbyte	#1, local01
2ffcc     01 FA 05 F6 | 	mov	result1, #1
2ffd0     48 03 90 FD | 	jmp	#LR__4793
2ffd4                 | LR__4784
2ffd4     04 4E 05 F1 | 	add	fp, #4
2ffd8     A7 FA 01 FB | 	rdlong	result1, fp
2ffdc     1C FA 05 F1 | 	add	result1, #28
2ffe0     FD FA 01 FB | 	rdlong	result1, result1
2ffe4     1C 4E 05 F1 | 	add	fp, #28
2ffe8     A7 28 02 FB | 	rdlong	local02, fp
2ffec     14 FB 81 F1 | 	sub	result1, local02
2fff0     08 4E 05 F1 | 	add	fp, #8
2fff4     A7 18 02 FB | 	rdlong	arg04, fp
2fff8     28 4E 85 F1 | 	sub	fp, #40
2fffc     0C FB 11 F2 | 	cmp	result1, arg04 wc
30000     68 00 90 3D |  if_ae	jmp	#LR__4785
30004     04 4E 05 F1 | 	add	fp, #4
30008     A7 12 02 FB | 	rdlong	arg01, fp
3000c     28 12 06 F1 | 	add	arg01, #40
30010     2C 4E 05 F1 | 	add	fp, #44
30014     A7 14 02 FB | 	rdlong	arg02, fp
30018     2C 4E 85 F1 | 	sub	fp, #44
3001c     A7 FA 01 FB | 	rdlong	result1, fp
30020     1C FA 05 F1 | 	add	result1, #28
30024     FD 2A 02 FB | 	rdlong	local03, result1
30028     1C 4E 05 F1 | 	add	fp, #28
3002c     A7 18 02 FB | 	rdlong	arg04, fp
30030     20 4E 85 F1 | 	sub	fp, #32
30034     0C 2B 82 F1 | 	sub	local03, arg04
30038     09 2A 66 F0 | 	shl	local03, #9
3003c     15 15 02 F1 | 	add	arg02, local03
30040     09 16 C6 F9 | 	decod	arg03, #9
30044     EC 3B BF FD | 	call	#__system____builtin_memmove
30048     04 4E 05 F1 | 	add	fp, #4
3004c     A7 18 02 FB | 	rdlong	arg04, fp
30050     0C FB 01 F6 | 	mov	result1, arg04
30054     04 4E 85 F1 | 	sub	fp, #4
30058     10 18 06 F1 | 	add	arg04, #16
3005c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30060     7F 18 06 F5 | 	and	arg04, #127
30064     10 FA 05 F1 | 	add	result1, #16
30068     FD 18 42 FC | 	wrbyte	arg04, result1
3006c                 | LR__4785
3006c     28 4E 05 F1 | 	add	fp, #40
30070     A7 FA 01 FB | 	rdlong	result1, fp
30074     09 FA 65 F0 | 	shl	result1, #9
30078     04 4E 85 F1 | 	sub	fp, #4
3007c     A7 FA 61 FC | 	wrlong	result1, fp
30080     24 4E 85 F1 | 	sub	fp, #36
30084                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
30084                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
30084                 | ' 				}
30084                 | ' 
30084                 | ' 
30084                 | ' 				wcnt =  ((UINT) 512 )  * cc;
30084                 | ' 				continue;
30084     74 01 90 FD | 	jmp	#LR__4789
30088                 | LR__4786
30088     04 4E 05 F1 | 	add	fp, #4
3008c     A7 28 02 FB | 	rdlong	local02, fp
30090     1C 28 06 F1 | 	add	local02, #28
30094     14 FB 01 FB | 	rdlong	result1, local02
30098     1C 4E 05 F1 | 	add	fp, #28
3009c     A7 28 02 FB | 	rdlong	local02, fp
300a0     20 4E 85 F1 | 	sub	fp, #32
300a4     14 FB 09 F2 | 	cmp	result1, local02 wz
300a8     90 00 90 AD |  if_e	jmp	#LR__4787
300ac     04 4E 05 F1 | 	add	fp, #4
300b0     A7 FA 01 FB | 	rdlong	result1, fp
300b4     FD 2A 02 F6 | 	mov	local03, result1
300b8     04 4E 85 F1 | 	sub	fp, #4
300bc     14 2A 06 F1 | 	add	local03, #20
300c0     15 2B 02 FB | 	rdlong	local03, local03
300c4     0C FA 05 F1 | 	add	result1, #12
300c8     FD 2C 02 FB | 	rdlong	local04, result1
300cc     16 2F 02 F6 | 	mov	local05, local04
300d0     17 2B 12 F2 | 	cmp	local03, local05 wc
300d4     64 00 90 3D |  if_ae	jmp	#LR__4787
300d8     18 4E 05 F1 | 	add	fp, #24
300dc     A7 18 02 FB | 	rdlong	arg04, fp
300e0     01 18 06 F1 | 	add	arg04, #1
300e4     0C 13 C2 FA | 	rdbyte	arg01, arg04
300e8     14 4E 85 F1 | 	sub	fp, #20
300ec     A7 30 02 FB | 	rdlong	local06, fp
300f0     28 30 06 F1 | 	add	local06, #40
300f4     18 33 02 F6 | 	mov	local07, local06
300f8     1C 4E 05 F1 | 	add	fp, #28
300fc     A7 34 02 FB | 	rdlong	local08, fp
30100     20 4E 85 F1 | 	sub	fp, #32
30104     01 36 06 F6 | 	mov	local09, #1
30108     19 15 02 F6 | 	mov	arg02, local07
3010c     1A 17 02 F6 | 	mov	arg03, local08
30110     01 18 06 F6 | 	mov	arg04, #1
30114     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
30118     FD 38 0A F6 | 	mov	local10, result1 wz
3011c     1C 00 90 AD |  if_e	jmp	#LR__4787
30120     04 4E 05 F1 | 	add	fp, #4
30124     A7 38 02 FB | 	rdlong	local10, fp
30128     04 4E 85 F1 | 	sub	fp, #4
3012c     11 38 06 F1 | 	add	local10, #17
30130     1C 03 48 FC | 	wrbyte	#1, local10
30134                 | ' 				fp->fptr < fp->obj.objsize &&
30134                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
30134                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
30134     01 FA 05 F6 | 	mov	result1, #1
30138     E0 01 90 FD | 	jmp	#LR__4793
3013c                 | LR__4787
3013c     04 4E 05 F1 | 	add	fp, #4
30140     A7 18 02 FB | 	rdlong	arg04, fp
30144     1C 4E 05 F1 | 	add	fp, #28
30148     A7 FA 01 FB | 	rdlong	result1, fp
3014c     20 4E 85 F1 | 	sub	fp, #32
30150     1C 18 06 F1 | 	add	arg04, #28
30154     0C FB 61 FC | 	wrlong	result1, arg04
30158                 | LR__4788
30158     04 4E 05 F1 | 	add	fp, #4
3015c     A7 FA 01 FB | 	rdlong	result1, fp
30160     14 FA 05 F1 | 	add	result1, #20
30164     FD FA 01 FB | 	rdlong	result1, result1
30168     FF FB 05 F5 | 	and	result1, #511
3016c     09 3A C6 F9 | 	decod	local11, #9
30170     FD 3A 82 F1 | 	sub	local11, result1
30174     20 4E 05 F1 | 	add	fp, #32
30178     A7 3A 62 FC | 	wrlong	local11, fp
3017c     18 4E 85 F1 | 	sub	fp, #24
30180     A7 FA 01 FB | 	rdlong	result1, fp
30184     0C 4E 85 F1 | 	sub	fp, #12
30188     FD 3A 1A F2 | 	cmp	local11, result1 wcz
3018c     0C 4E 05 11 |  if_a	add	fp, #12
30190     A7 3A 02 1B |  if_a	rdlong	local11, fp
30194     18 4E 05 11 |  if_a	add	fp, #24
30198     A7 3A 62 1C |  if_a	wrlong	local11, fp
3019c     24 4E 85 11 |  if_a	sub	fp, #36
301a0     04 4E 05 F1 | 	add	fp, #4
301a4     A7 3A 02 FB | 	rdlong	local11, fp
301a8     1D 13 02 F6 | 	mov	arg01, local11
301ac     28 12 06 F1 | 	add	arg01, #40
301b0     14 3A 06 F1 | 	add	local11, #20
301b4     1D 3B 02 FB | 	rdlong	local11, local11
301b8     FF 3B 06 F5 | 	and	local11, #511
301bc     1D 13 02 F1 | 	add	arg01, local11
301c0     2C 4E 05 F1 | 	add	fp, #44
301c4     A7 14 02 FB | 	rdlong	arg02, fp
301c8     0C 4E 85 F1 | 	sub	fp, #12
301cc     A7 16 02 FB | 	rdlong	arg03, fp
301d0     24 4E 85 F1 | 	sub	fp, #36
301d4     5C 3A BF FD | 	call	#__system____builtin_memmove
301d8     04 4E 05 F1 | 	add	fp, #4
301dc     A7 FA 01 FB | 	rdlong	result1, fp
301e0     FD 3A 02 F6 | 	mov	local11, result1
301e4     04 4E 85 F1 | 	sub	fp, #4
301e8     10 FA 05 F1 | 	add	result1, #16
301ec     FD FA C1 FA | 	rdbyte	result1, result1
301f0     80 FA 45 F5 | 	or	result1, #128
301f4     10 3A 06 F1 | 	add	local11, #16
301f8     1D FB 41 FC | 	wrbyte	result1, local11
301fc                 | LR__4789
301fc     0C 4E 05 F1 | 	add	fp, #12
30200     A7 3A 02 FB | 	rdlong	local11, fp
30204     18 4E 05 F1 | 	add	fp, #24
30208     A7 FA 01 FB | 	rdlong	result1, fp
3020c     FD 3A 82 F1 | 	sub	local11, result1
30210     18 4E 85 F1 | 	sub	fp, #24
30214     A7 3A 62 FC | 	wrlong	local11, fp
30218     04 4E 05 F1 | 	add	fp, #4
3021c     A7 3C 02 FB | 	rdlong	local12, fp
30220     1E 3B 02 FB | 	rdlong	local11, local12
30224     14 4E 05 F1 | 	add	fp, #20
30228     A7 3E 02 FB | 	rdlong	local13, fp
3022c     1F 3B 02 F1 | 	add	local11, local13
30230     1E 3B 62 FC | 	wrlong	local11, local12
30234     0C 4E 05 F1 | 	add	fp, #12
30238     A7 3A 02 FB | 	rdlong	local11, fp
3023c     0C 4E 85 F1 | 	sub	fp, #12
30240     A7 40 02 FB | 	rdlong	local14, fp
30244     20 3B 02 F1 | 	add	local11, local14
30248     0C 4E 05 F1 | 	add	fp, #12
3024c     A7 3A 62 FC | 	wrlong	local11, fp
30250     2C 4E 85 F1 | 	sub	fp, #44
30254     A7 42 02 FB | 	rdlong	local15, fp
30258     21 3B 02 F6 | 	mov	local11, local15
3025c     14 42 06 F1 | 	add	local15, #20
30260     21 43 02 FB | 	rdlong	local15, local15
30264     20 4E 05 F1 | 	add	fp, #32
30268     A7 44 02 FB | 	rdlong	local16, fp
3026c     22 43 02 F1 | 	add	local15, local16
30270     14 3A 06 F1 | 	add	local11, #20
30274     1D 43 62 FC | 	wrlong	local15, local11
30278     20 4E 85 F1 | 	sub	fp, #32
3027c     A7 46 02 FB | 	rdlong	local17, fp
30280     23 3B 02 F6 | 	mov	local11, local17
30284     23 49 02 F6 | 	mov	local18, local17
30288     04 4E 85 F1 | 	sub	fp, #4
3028c     14 46 06 F1 | 	add	local17, #20
30290     23 4B 02 FB | 	rdlong	local19, local17
30294     0C 48 06 F1 | 	add	local18, #12
30298     24 4D 02 FB | 	rdlong	local20, local18
3029c     26 4B 1A F2 | 	cmp	local19, local20 wcz
302a0     24 00 90 ED |  if_be	jmp	#LR__4790
302a4     04 4E 05 F1 | 	add	fp, #4
302a8     A7 2E 02 FB | 	rdlong	local05, fp
302ac     04 4E 85 F1 | 	sub	fp, #4
302b0     17 2B 02 F6 | 	mov	local03, local05
302b4     14 2A 06 F1 | 	add	local03, #20
302b8     15 2D 02 FB | 	rdlong	local04, local03
302bc     14 2A 86 F1 | 	sub	local03, #20
302c0     16 4F 02 F6 | 	mov	local21, local04
302c4     20 00 90 FD | 	jmp	#LR__4791
302c8                 | LR__4790
302c8     04 4E 05 F1 | 	add	fp, #4
302cc     A7 32 02 FB | 	rdlong	local07, fp
302d0     04 4E 85 F1 | 	sub	fp, #4
302d4     19 39 02 F6 | 	mov	local10, local07
302d8     0C 38 06 F1 | 	add	local10, #12
302dc     1C 35 02 FB | 	rdlong	local08, local10
302e0     0C 38 86 F1 | 	sub	local10, #12
302e4     1A 4F 02 F6 | 	mov	local21, local08
302e8                 | LR__4791
302e8     0C 3A 06 F1 | 	add	local11, #12
302ec     1D 4F 62 FC | 	wrlong	local21, local11
302f0     5C F9 9F FD | 	jmp	#LR__4773
302f4                 | LR__4792
302f4     04 4E 05 F1 | 	add	fp, #4
302f8     A7 3C 02 FB | 	rdlong	local12, fp
302fc     1E 27 02 F6 | 	mov	local01, local12
30300     04 4E 85 F1 | 	sub	fp, #4
30304     10 3C 06 F1 | 	add	local12, #16
30308     1E 3B C2 FA | 	rdbyte	local11, local12
3030c     40 3A 46 F5 | 	or	local11, #64
30310     10 26 06 F1 | 	add	local01, #16
30314     13 3B 42 FC | 	wrbyte	local11, local01
30318                 | ' 
30318                 | ' 
30318                 | ' 
30318                 | ' 
30318                 | ' 
30318                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
30318                 | ' 		fp->flag |=  0x80 ;
30318                 | ' 
30318                 | ' 	}
30318                 | ' 
30318                 | ' 	fp->flag |=  0x40 ;
30318                 | ' 
30318                 | ' 	return FR_OK ;
30318     00 FA 05 F6 | 	mov	result1, #0
3031c                 | LR__4793
3031c     A7 F0 03 F6 | 	mov	ptra, fp
30320     B2 00 A0 FD | 	call	#popregs_
30324                 | _fatfs_cc_f_write_ret
30324     2D 00 64 FD | 	ret
30328                 | 
30328                 | _fatfs_cc_f_sync
30328     00 4A 05 F6 | 	mov	COUNT_, #0
3032c     A8 00 A0 FD | 	call	#pushregs_
30330     18 F0 07 F1 | 	add	ptra, #24
30334     04 4E 05 F1 | 	add	fp, #4
30338     A7 12 62 FC | 	wrlong	arg01, fp
3033c     08 4E 05 F1 | 	add	fp, #8
30340     A7 14 02 F6 | 	mov	arg02, fp
30344     0C 4E 85 F1 | 	sub	fp, #12
30348     D0 E8 BF FD | 	call	#_fatfs_cc_validate
3034c     08 4E 05 F1 | 	add	fp, #8
30350     A7 FA 61 FC | 	wrlong	result1, fp
30354     08 4E 85 F1 | 	sub	fp, #8
30358     00 FA 0D F2 | 	cmp	result1, #0 wz
3035c     C0 01 90 5D |  if_ne	jmp	#LR__4803
30360     04 4E 05 F1 | 	add	fp, #4
30364     A7 18 02 FB | 	rdlong	arg04, fp
30368     04 4E 85 F1 | 	sub	fp, #4
3036c     10 18 06 F1 | 	add	arg04, #16
30370     0C 19 C2 FA | 	rdbyte	arg04, arg04
30374     40 18 CE F7 | 	test	arg04, #64 wz
30378     A4 01 90 AD |  if_e	jmp	#LR__4802
3037c     04 4E 05 F1 | 	add	fp, #4
30380     A7 18 02 FB | 	rdlong	arg04, fp
30384     04 4E 85 F1 | 	sub	fp, #4
30388     10 18 06 F1 | 	add	arg04, #16
3038c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30390     80 18 CE F7 | 	test	arg04, #128 wz
30394     64 00 90 AD |  if_e	jmp	#LR__4800
30398     0C 4E 05 F1 | 	add	fp, #12
3039c     A7 18 02 FB | 	rdlong	arg04, fp
303a0     01 18 06 F1 | 	add	arg04, #1
303a4     0C 13 C2 FA | 	rdbyte	arg01, arg04
303a8     08 4E 85 F1 | 	sub	fp, #8
303ac     A7 18 02 FB | 	rdlong	arg04, fp
303b0     0C 15 02 F6 | 	mov	arg02, arg04
303b4     28 14 06 F1 | 	add	arg02, #40
303b8     04 4E 85 F1 | 	sub	fp, #4
303bc     1C 18 06 F1 | 	add	arg04, #28
303c0     0C 17 02 FB | 	rdlong	arg03, arg04
303c4     01 18 06 F6 | 	mov	arg04, #1
303c8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
303cc     00 FA 0D F2 | 	cmp	result1, #0 wz
303d0     01 FA 05 56 |  if_ne	mov	result1, #1
303d4     54 01 90 5D |  if_ne	jmp	#LR__4804
303d8     04 4E 05 F1 | 	add	fp, #4
303dc     A7 18 02 FB | 	rdlong	arg04, fp
303e0     0C 17 02 F6 | 	mov	arg03, arg04
303e4     04 4E 85 F1 | 	sub	fp, #4
303e8     10 18 06 F1 | 	add	arg04, #16
303ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
303f0     7F 18 06 F5 | 	and	arg04, #127
303f4     10 16 06 F1 | 	add	arg03, #16
303f8     0B 19 42 FC | 	wrbyte	arg04, arg03
303fc                 | LR__4800
303fc     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
30400     10 4E 05 F1 | 	add	fp, #16
30404     A7 FA 61 FC | 	wrlong	result1, fp
30408     04 4E 85 F1 | 	sub	fp, #4
3040c     A7 12 02 FB | 	rdlong	arg01, fp
30410     08 4E 85 F1 | 	sub	fp, #8
30414     A7 18 02 FB | 	rdlong	arg04, fp
30418     04 4E 85 F1 | 	sub	fp, #4
3041c     20 18 06 F1 | 	add	arg04, #32
30420     0C 15 02 FB | 	rdlong	arg02, arg04
30424     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
30428     08 4E 05 F1 | 	add	fp, #8
3042c     A7 FA 61 FC | 	wrlong	result1, fp
30430     08 4E 85 F1 | 	sub	fp, #8
30434     00 FA 0D F2 | 	cmp	result1, #0 wz
30438     E4 00 90 5D |  if_ne	jmp	#LR__4801
3043c     04 4E 05 F1 | 	add	fp, #4
30440     A7 18 02 FB | 	rdlong	arg04, fp
30444     24 18 06 F1 | 	add	arg04, #36
30448     0C 19 02 FB | 	rdlong	arg04, arg04
3044c     10 4E 05 F1 | 	add	fp, #16
30450     A7 18 62 FC | 	wrlong	arg04, fp
30454     0C 17 02 F6 | 	mov	arg03, arg04
30458     0B 16 06 F1 | 	add	arg03, #11
3045c     0B 17 C2 FA | 	rdbyte	arg03, arg03
30460     20 16 46 F5 | 	or	arg03, #32
30464     0B 18 06 F1 | 	add	arg04, #11
30468     0C 17 42 FC | 	wrbyte	arg03, arg04
3046c     10 4E 85 F1 | 	sub	fp, #16
30470     A7 18 02 FB | 	rdlong	arg04, fp
30474     0C 13 02 FB | 	rdlong	arg01, arg04
30478     10 4E 05 F1 | 	add	fp, #16
3047c     A7 14 02 FB | 	rdlong	arg02, fp
30480     14 4E 85 F1 | 	sub	fp, #20
30484     08 18 06 F1 | 	add	arg04, #8
30488     0C 17 02 FB | 	rdlong	arg03, arg04
3048c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
30490     14 4E 05 F1 | 	add	fp, #20
30494     A7 12 02 FB | 	rdlong	arg01, fp
30498     1C 12 06 F1 | 	add	arg01, #28
3049c     10 4E 85 F1 | 	sub	fp, #16
304a0     A7 18 02 FB | 	rdlong	arg04, fp
304a4     0C 18 06 F1 | 	add	arg04, #12
304a8     0C 15 02 FB | 	rdlong	arg02, arg04
304ac     09 15 62 FC | 	wrlong	arg02, arg01
304b0     10 4E 05 F1 | 	add	fp, #16
304b4     A7 12 02 FB | 	rdlong	arg01, fp
304b8     16 12 06 F1 | 	add	arg01, #22
304bc     04 4E 85 F1 | 	sub	fp, #4
304c0     A7 14 02 FB | 	rdlong	arg02, fp
304c4     09 15 62 FC | 	wrlong	arg02, arg01
304c8     04 4E 05 F1 | 	add	fp, #4
304cc     A7 12 02 FB | 	rdlong	arg01, fp
304d0     12 12 06 F1 | 	add	arg01, #18
304d4     09 01 58 FC | 	wrword	#0, arg01
304d8     08 4E 85 F1 | 	sub	fp, #8
304dc     A7 18 02 FB | 	rdlong	arg04, fp
304e0     03 18 06 F1 | 	add	arg04, #3
304e4     0C 03 48 FC | 	wrbyte	#1, arg04
304e8     A7 12 02 FB | 	rdlong	arg01, fp
304ec     0C 4E 85 F1 | 	sub	fp, #12
304f0     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
304f4     08 4E 05 F1 | 	add	fp, #8
304f8     A7 FA 61 FC | 	wrlong	result1, fp
304fc     04 4E 85 F1 | 	sub	fp, #4
30500     A7 18 02 FB | 	rdlong	arg04, fp
30504     0C 17 02 F6 | 	mov	arg03, arg04
30508     04 4E 85 F1 | 	sub	fp, #4
3050c     10 18 06 F1 | 	add	arg04, #16
30510     0C 19 C2 FA | 	rdbyte	arg04, arg04
30514     BF 18 06 F5 | 	and	arg04, #191
30518     10 16 06 F1 | 	add	arg03, #16
3051c     0B 19 42 FC | 	wrbyte	arg04, arg03
30520                 | LR__4801
30520                 | LR__4802
30520                 | LR__4803
30520                 | ' 					dir = fp->dir_ptr;
30520                 | ' 					dir[ 11 ] |=  0x20 ;
30520                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
30520                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
30520                 | ' 					st_dword(dir +  22 , tm);
30520                 | ' 					st_word(dir +  18 , 0);
30520                 | ' 					fs->wflag = 1;
30520                 | ' 					res = sync_fs(fs);
30520                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
30520                 | ' 				}
30520                 | ' 			}
30520                 | ' 		}
30520                 | ' 	}
30520                 | ' 
30520                 | ' 	return res ;
30520     08 4E 05 F1 | 	add	fp, #8
30524     A7 FA 01 FB | 	rdlong	result1, fp
30528     08 4E 85 F1 | 	sub	fp, #8
3052c                 | LR__4804
3052c     A7 F0 03 F6 | 	mov	ptra, fp
30530     B2 00 A0 FD | 	call	#popregs_
30534                 | _fatfs_cc_f_sync_ret
30534     2D 00 64 FD | 	ret
30538                 | 
30538                 | _fatfs_cc_f_close
30538     01 4A 05 F6 | 	mov	COUNT_, #1
3053c     A8 00 A0 FD | 	call	#pushregs_
30540     10 F0 07 F1 | 	add	ptra, #16
30544     04 4E 05 F1 | 	add	fp, #4
30548     A7 12 62 FC | 	wrlong	arg01, fp
3054c     04 4E 85 F1 | 	sub	fp, #4
30550     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
30554     08 4E 05 F1 | 	add	fp, #8
30558     A7 FA 61 FC | 	wrlong	result1, fp
3055c     08 4E 85 F1 | 	sub	fp, #8
30560     00 FA 0D F2 | 	cmp	result1, #0 wz
30564     38 00 90 5D |  if_ne	jmp	#LR__4810
30568     04 4E 05 F1 | 	add	fp, #4
3056c     A7 12 02 FB | 	rdlong	arg01, fp
30570     08 4E 05 F1 | 	add	fp, #8
30574     A7 14 02 F6 | 	mov	arg02, fp
30578     0C 4E 85 F1 | 	sub	fp, #12
3057c     9C E6 BF FD | 	call	#_fatfs_cc_validate
30580     08 4E 05 F1 | 	add	fp, #8
30584     A7 FA 61 FC | 	wrlong	result1, fp
30588     08 4E 85 F1 | 	sub	fp, #8
3058c     00 FA 0D F2 | 	cmp	result1, #0 wz
30590     04 4E 05 A1 |  if_e	add	fp, #4
30594     A7 26 02 AB |  if_e	rdlong	local01, fp
30598     04 4E 85 A1 |  if_e	sub	fp, #4
3059c     13 01 68 AC |  if_e	wrlong	#0, local01
305a0                 | LR__4810
305a0                 | ' 
305a0                 | ' 
305a0                 | ' 
305a0                 | ' 
305a0                 | ' 			fp->obj.fs = 0;
305a0                 | ' #line 4192 "ff.c"
305a0                 | ' 		}
305a0                 | ' 	}
305a0                 | ' 	return res;
305a0     08 4E 05 F1 | 	add	fp, #8
305a4     A7 FA 01 FB | 	rdlong	result1, fp
305a8     08 4E 85 F1 | 	sub	fp, #8
305ac     A7 F0 03 F6 | 	mov	ptra, fp
305b0     B2 00 A0 FD | 	call	#popregs_
305b4                 | _fatfs_cc_f_close_ret
305b4     2D 00 64 FD | 	ret
305b8                 | 
305b8                 | _fatfs_cc_f_lseek
305b8     00 4A 05 F6 | 	mov	COUNT_, #0
305bc     A8 00 A0 FD | 	call	#pushregs_
305c0     24 F0 07 F1 | 	add	ptra, #36
305c4     04 4E 05 F1 | 	add	fp, #4
305c8     A7 12 62 FC | 	wrlong	arg01, fp
305cc     04 4E 05 F1 | 	add	fp, #4
305d0     A7 14 62 FC | 	wrlong	arg02, fp
305d4     04 4E 85 F1 | 	sub	fp, #4
305d8     A7 12 02 FB | 	rdlong	arg01, fp
305dc     0C 4E 05 F1 | 	add	fp, #12
305e0     A7 14 02 F6 | 	mov	arg02, fp
305e4     10 4E 85 F1 | 	sub	fp, #16
305e8     30 E6 BF FD | 	call	#_fatfs_cc_validate
305ec     0C 4E 05 F1 | 	add	fp, #12
305f0     A7 FA 61 FC | 	wrlong	result1, fp
305f4     0C 4E 85 F1 | 	sub	fp, #12
305f8     00 FA 0D F2 | 	cmp	result1, #0 wz
305fc     1C 00 90 5D |  if_ne	jmp	#LR__4820
30600     04 4E 05 F1 | 	add	fp, #4
30604     A7 18 02 FB | 	rdlong	arg04, fp
30608     11 18 06 F1 | 	add	arg04, #17
3060c     0C 19 C2 FA | 	rdbyte	arg04, arg04
30610     08 4E 05 F1 | 	add	fp, #8
30614     A7 18 62 FC | 	wrlong	arg04, fp
30618     0C 4E 85 F1 | 	sub	fp, #12
3061c                 | LR__4820
3061c     0C 4E 05 F1 | 	add	fp, #12
30620     A7 18 0A FB | 	rdlong	arg04, fp wz
30624     0C 4E 85 F1 | 	sub	fp, #12
30628     0C 4E 05 51 |  if_ne	add	fp, #12
3062c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30630     0C 4E 85 51 |  if_ne	sub	fp, #12
30634     40 06 90 5D |  if_ne	jmp	#LR__4843
30638     04 4E 05 F1 | 	add	fp, #4
3063c     A7 18 02 FB | 	rdlong	arg04, fp
30640     04 4E 05 F1 | 	add	fp, #4
30644     A7 16 02 FB | 	rdlong	arg03, fp
30648     08 4E 85 F1 | 	sub	fp, #8
3064c     0C 18 06 F1 | 	add	arg04, #12
30650     0C 19 02 FB | 	rdlong	arg04, arg04
30654     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
30658     3C 00 90 ED |  if_be	jmp	#LR__4821
3065c     04 4E 05 F1 | 	add	fp, #4
30660     A7 16 02 FB | 	rdlong	arg03, fp
30664     04 4E 85 F1 | 	sub	fp, #4
30668     10 16 06 F1 | 	add	arg03, #16
3066c     0B 17 C2 FA | 	rdbyte	arg03, arg03
30670     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
30674     02 16 CE F7 | 	test	arg03, #2 wz
30678     1C 00 90 5D |  if_ne	jmp	#LR__4821
3067c     04 4E 05 F1 | 	add	fp, #4
30680     A7 16 02 FB | 	rdlong	arg03, fp
30684     0C 16 06 F1 | 	add	arg03, #12
30688     0B 17 02 FB | 	rdlong	arg03, arg03
3068c     04 4E 05 F1 | 	add	fp, #4
30690     A7 16 62 FC | 	wrlong	arg03, fp
30694     08 4E 85 F1 | 	sub	fp, #8
30698                 | LR__4821
30698     04 4E 05 F1 | 	add	fp, #4
3069c     A7 16 02 FB | 	rdlong	arg03, fp
306a0     14 16 06 F1 | 	add	arg03, #20
306a4     0B 17 02 FB | 	rdlong	arg03, arg03
306a8     1C 4E 05 F1 | 	add	fp, #28
306ac     A7 16 62 FC | 	wrlong	arg03, fp
306b0     1C 4E 85 F1 | 	sub	fp, #28
306b4     A7 16 02 FB | 	rdlong	arg03, fp
306b8     18 4E 05 F1 | 	add	fp, #24
306bc     A7 00 68 FC | 	wrlong	#0, fp
306c0     14 16 06 F1 | 	add	arg03, #20
306c4     0B 01 68 FC | 	wrlong	#0, arg03
306c8     14 4E 85 F1 | 	sub	fp, #20
306cc     A7 16 02 FB | 	rdlong	arg03, fp
306d0     08 4E 85 F1 | 	sub	fp, #8
306d4     01 16 16 F2 | 	cmp	arg03, #1 wc
306d8     E4 03 90 CD |  if_b	jmp	#LR__4837
306dc     10 4E 05 F1 | 	add	fp, #16
306e0     A7 16 02 FB | 	rdlong	arg03, fp
306e4     0A 16 06 F1 | 	add	arg03, #10
306e8     0B 19 E2 FA | 	rdword	arg04, arg03
306ec     09 18 66 F0 | 	shl	arg04, #9
306f0     08 4E 05 F1 | 	add	fp, #8
306f4     A7 18 62 FC | 	wrlong	arg04, fp
306f8     08 4E 05 F1 | 	add	fp, #8
306fc     A7 18 02 FB | 	rdlong	arg04, fp
30700     20 4E 85 F1 | 	sub	fp, #32
30704     01 18 16 F2 | 	cmp	arg04, #1 wc
30708     AC 00 90 CD |  if_b	jmp	#LR__4822
3070c     08 4E 05 F1 | 	add	fp, #8
30710     A7 18 02 FB | 	rdlong	arg04, fp
30714     01 18 86 F1 | 	sub	arg04, #1
30718     10 4E 05 F1 | 	add	fp, #16
3071c     A7 16 02 FB | 	rdlong	arg03, fp
30720     0B 19 12 FD | 	qdiv	arg04, arg03
30724     08 4E 05 F1 | 	add	fp, #8
30728     A7 FA 01 FB | 	rdlong	result1, fp
3072c     01 FA 85 F1 | 	sub	result1, #1
30730     18 18 62 FD | 	getqx	arg04
30734     0B FB 11 FD | 	qdiv	result1, arg03
30738     20 4E 85 F1 | 	sub	fp, #32
3073c     18 16 62 FD | 	getqx	arg03
30740     0B 19 12 F2 | 	cmp	arg04, arg03 wc
30744     70 00 90 CD |  if_b	jmp	#LR__4822
30748     04 4E 05 F1 | 	add	fp, #4
3074c     A7 16 02 FB | 	rdlong	arg03, fp
30750     1C 4E 05 F1 | 	add	fp, #28
30754     A7 FA 01 FB | 	rdlong	result1, fp
30758     01 FA 85 F1 | 	sub	result1, #1
3075c     08 4E 85 F1 | 	sub	fp, #8
30760     A7 18 02 FB | 	rdlong	arg04, fp
30764     01 18 86 F1 | 	sub	arg04, #1
30768     0C FB 21 F5 | 	andn	result1, arg04
3076c     14 16 06 F1 | 	add	arg03, #20
30770     0B FB 61 FC | 	wrlong	result1, arg03
30774     10 4E 85 F1 | 	sub	fp, #16
30778     A7 16 02 FB | 	rdlong	arg03, fp
3077c     04 4E 85 F1 | 	sub	fp, #4
30780     A7 18 02 FB | 	rdlong	arg04, fp
30784     14 18 06 F1 | 	add	arg04, #20
30788     0C 19 02 FB | 	rdlong	arg04, arg04
3078c     0C 17 82 F1 | 	sub	arg03, arg04
30790     04 4E 05 F1 | 	add	fp, #4
30794     A7 16 62 FC | 	wrlong	arg03, fp
30798     04 4E 85 F1 | 	sub	fp, #4
3079c     A7 16 02 FB | 	rdlong	arg03, fp
307a0     18 16 06 F1 | 	add	arg03, #24
307a4     0B 17 02 FB | 	rdlong	arg03, arg03
307a8     10 4E 05 F1 | 	add	fp, #16
307ac     A7 16 62 FC | 	wrlong	arg03, fp
307b0     14 4E 85 F1 | 	sub	fp, #20
307b4     D0 00 90 FD | 	jmp	#LR__4826
307b8                 | LR__4822
307b8     04 4E 05 F1 | 	add	fp, #4
307bc     A7 16 02 FB | 	rdlong	arg03, fp
307c0     08 16 06 F1 | 	add	arg03, #8
307c4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
307c8     10 4E 05 F1 | 	add	fp, #16
307cc     A7 16 62 FC | 	wrlong	arg03, fp
307d0     14 4E 85 F1 | 	sub	fp, #20
307d4     94 00 90 5D |  if_ne	jmp	#LR__4825
307d8     04 4E 05 F1 | 	add	fp, #4
307dc     A7 12 02 FB | 	rdlong	arg01, fp
307e0     04 4E 85 F1 | 	sub	fp, #4
307e4     00 14 06 F6 | 	mov	arg02, #0
307e8     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
307ec     14 4E 05 F1 | 	add	fp, #20
307f0     A7 FA 61 FC | 	wrlong	result1, fp
307f4     14 4E 85 F1 | 	sub	fp, #20
307f8     01 FA 0D F2 | 	cmp	result1, #1 wz
307fc     1C 00 90 5D |  if_ne	jmp	#LR__4823
30800     04 4E 05 F1 | 	add	fp, #4
30804     A7 16 02 FB | 	rdlong	arg03, fp
30808     04 4E 85 F1 | 	sub	fp, #4
3080c     11 16 06 F1 | 	add	arg03, #17
30810     0B 05 48 FC | 	wrbyte	#2, arg03
30814     02 FA 05 F6 | 	mov	result1, #2
30818     5C 04 90 FD | 	jmp	#LR__4843
3081c                 | LR__4823
3081c     14 4E 05 F1 | 	add	fp, #20
30820     A7 FA 01 FB | 	rdlong	result1, fp
30824     14 4E 85 F1 | 	sub	fp, #20
30828     FF FF 7F FF 
3082c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30830     1C 00 90 5D |  if_ne	jmp	#LR__4824
30834     04 4E 05 F1 | 	add	fp, #4
30838     A7 16 02 FB | 	rdlong	arg03, fp
3083c     04 4E 85 F1 | 	sub	fp, #4
30840     11 16 06 F1 | 	add	arg03, #17
30844     0B 03 48 FC | 	wrbyte	#1, arg03
30848     01 FA 05 F6 | 	mov	result1, #1
3084c     28 04 90 FD | 	jmp	#LR__4843
30850                 | LR__4824
30850     04 4E 05 F1 | 	add	fp, #4
30854     A7 16 02 FB | 	rdlong	arg03, fp
30858     10 4E 05 F1 | 	add	fp, #16
3085c     A7 18 02 FB | 	rdlong	arg04, fp
30860     14 4E 85 F1 | 	sub	fp, #20
30864     08 16 06 F1 | 	add	arg03, #8
30868     0B 19 62 FC | 	wrlong	arg04, arg03
3086c                 | LR__4825
3086c     04 4E 05 F1 | 	add	fp, #4
30870     A7 16 02 FB | 	rdlong	arg03, fp
30874     10 4E 05 F1 | 	add	fp, #16
30878     A7 18 02 FB | 	rdlong	arg04, fp
3087c     14 4E 85 F1 | 	sub	fp, #20
30880     18 16 06 F1 | 	add	arg03, #24
30884     0B 19 62 FC | 	wrlong	arg04, arg03
30888                 | LR__4826
30888     14 4E 05 F1 | 	add	fp, #20
3088c     A7 16 0A FB | 	rdlong	arg03, fp wz
30890     14 4E 85 F1 | 	sub	fp, #20
30894     28 02 90 AD |  if_e	jmp	#LR__4836
30898                 | ' 				while (ofs > bcs) {
30898                 | LR__4827
30898     08 4E 05 F1 | 	add	fp, #8
3089c     A7 18 02 FB | 	rdlong	arg04, fp
308a0     10 4E 05 F1 | 	add	fp, #16
308a4     A7 16 02 FB | 	rdlong	arg03, fp
308a8     18 4E 85 F1 | 	sub	fp, #24
308ac     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
308b0     68 01 90 ED |  if_be	jmp	#LR__4833
308b4     08 4E 05 F1 | 	add	fp, #8
308b8     A7 18 02 FB | 	rdlong	arg04, fp
308bc     10 4E 05 F1 | 	add	fp, #16
308c0     A7 16 02 FB | 	rdlong	arg03, fp
308c4     0B 19 82 F1 | 	sub	arg04, arg03
308c8     10 4E 85 F1 | 	sub	fp, #16
308cc     A7 18 62 FC | 	wrlong	arg04, fp
308d0     04 4E 85 F1 | 	sub	fp, #4
308d4     A7 18 02 FB | 	rdlong	arg04, fp
308d8     0C FB 01 F6 | 	mov	result1, arg04
308dc     14 18 06 F1 | 	add	arg04, #20
308e0     0C 19 02 FB | 	rdlong	arg04, arg04
308e4     14 4E 05 F1 | 	add	fp, #20
308e8     A7 16 02 FB | 	rdlong	arg03, fp
308ec     0B 19 02 F1 | 	add	arg04, arg03
308f0     14 FA 05 F1 | 	add	result1, #20
308f4     FD 18 62 FC | 	wrlong	arg04, result1
308f8     14 4E 85 F1 | 	sub	fp, #20
308fc     A7 16 02 FB | 	rdlong	arg03, fp
30900     04 4E 85 F1 | 	sub	fp, #4
30904     10 16 06 F1 | 	add	arg03, #16
30908     0B 17 C2 FA | 	rdbyte	arg03, arg03
3090c     02 16 CE F7 | 	test	arg03, #2 wz
30910     3C 00 90 AD |  if_e	jmp	#LR__4828
30914     04 4E 05 F1 | 	add	fp, #4
30918     A7 12 02 FB | 	rdlong	arg01, fp
3091c     10 4E 05 F1 | 	add	fp, #16
30920     A7 14 02 FB | 	rdlong	arg02, fp
30924     14 4E 85 F1 | 	sub	fp, #20
30928     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
3092c     14 4E 05 F1 | 	add	fp, #20
30930     A7 FA 61 FC | 	wrlong	result1, fp
30934     00 FA 4D F2 | 	cmps	result1, #0 wz
30938     14 4E 85 F1 | 	sub	fp, #20
3093c     08 4E 05 A1 |  if_e	add	fp, #8
30940     A7 00 68 AC |  if_e	wrlong	#0, fp
30944     08 4E 85 A1 |  if_e	sub	fp, #8
30948                 | ' 							ofs = 0; break;
30948     D0 00 90 AD |  if_e	jmp	#LR__4833
3094c     24 00 90 FD | 	jmp	#LR__4829
30950                 | LR__4828
30950     04 4E 05 F1 | 	add	fp, #4
30954     A7 12 02 FB | 	rdlong	arg01, fp
30958     10 4E 05 F1 | 	add	fp, #16
3095c     A7 14 02 FB | 	rdlong	arg02, fp
30960     14 4E 85 F1 | 	sub	fp, #20
30964     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
30968     14 4E 05 F1 | 	add	fp, #20
3096c     A7 FA 61 FC | 	wrlong	result1, fp
30970     14 4E 85 F1 | 	sub	fp, #20
30974                 | LR__4829
30974     14 4E 05 F1 | 	add	fp, #20
30978     A7 16 02 FB | 	rdlong	arg03, fp
3097c     14 4E 85 F1 | 	sub	fp, #20
30980     FF FF 7F FF 
30984     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
30988     1C 00 90 5D |  if_ne	jmp	#LR__4830
3098c     04 4E 05 F1 | 	add	fp, #4
30990     A7 16 02 FB | 	rdlong	arg03, fp
30994     04 4E 85 F1 | 	sub	fp, #4
30998     11 16 06 F1 | 	add	arg03, #17
3099c     0B 03 48 FC | 	wrbyte	#1, arg03
309a0     01 FA 05 F6 | 	mov	result1, #1
309a4     D0 02 90 FD | 	jmp	#LR__4843
309a8                 | LR__4830
309a8     14 4E 05 F1 | 	add	fp, #20
309ac     A7 16 02 FB | 	rdlong	arg03, fp
309b0     14 4E 85 F1 | 	sub	fp, #20
309b4     02 16 16 F2 | 	cmp	arg03, #2 wc
309b8     24 00 90 CD |  if_b	jmp	#LR__4831
309bc     10 4E 05 F1 | 	add	fp, #16
309c0     A7 18 02 FB | 	rdlong	arg04, fp
309c4     04 4E 05 F1 | 	add	fp, #4
309c8     A7 16 02 FB | 	rdlong	arg03, fp
309cc     14 4E 85 F1 | 	sub	fp, #20
309d0     18 18 06 F1 | 	add	arg04, #24
309d4     0C 19 02 FB | 	rdlong	arg04, arg04
309d8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
309dc     1C 00 90 CD |  if_b	jmp	#LR__4832
309e0                 | LR__4831
309e0     04 4E 05 F1 | 	add	fp, #4
309e4     A7 16 02 FB | 	rdlong	arg03, fp
309e8     04 4E 85 F1 | 	sub	fp, #4
309ec     11 16 06 F1 | 	add	arg03, #17
309f0     0B 05 48 FC | 	wrbyte	#2, arg03
309f4     02 FA 05 F6 | 	mov	result1, #2
309f8     7C 02 90 FD | 	jmp	#LR__4843
309fc                 | LR__4832
309fc     04 4E 05 F1 | 	add	fp, #4
30a00     A7 18 02 FB | 	rdlong	arg04, fp
30a04     10 4E 05 F1 | 	add	fp, #16
30a08     A7 16 02 FB | 	rdlong	arg03, fp
30a0c     14 4E 85 F1 | 	sub	fp, #20
30a10     18 18 06 F1 | 	add	arg04, #24
30a14     0C 17 62 FC | 	wrlong	arg03, arg04
30a18     7C FE 9F FD | 	jmp	#LR__4827
30a1c                 | LR__4833
30a1c     04 4E 05 F1 | 	add	fp, #4
30a20     A7 16 02 FB | 	rdlong	arg03, fp
30a24     0B 13 02 F6 | 	mov	arg01, arg03
30a28     14 16 06 F1 | 	add	arg03, #20
30a2c     0B 15 02 FB | 	rdlong	arg02, arg03
30a30     04 4E 05 F1 | 	add	fp, #4
30a34     A7 16 02 FB | 	rdlong	arg03, fp
30a38     0B 15 02 F1 | 	add	arg02, arg03
30a3c     14 12 06 F1 | 	add	arg01, #20
30a40     09 15 62 FC | 	wrlong	arg02, arg01
30a44     A7 16 02 FB | 	rdlong	arg03, fp
30a48     08 4E 85 F1 | 	sub	fp, #8
30a4c     FF 17 CE F7 | 	test	arg03, #511 wz
30a50     6C 00 90 AD |  if_e	jmp	#LR__4835
30a54     10 4E 05 F1 | 	add	fp, #16
30a58     A7 12 02 FB | 	rdlong	arg01, fp
30a5c     04 4E 05 F1 | 	add	fp, #4
30a60     A7 14 02 FB | 	rdlong	arg02, fp
30a64     14 4E 85 F1 | 	sub	fp, #20
30a68     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
30a6c     1C 4E 05 F1 | 	add	fp, #28
30a70     A7 FA 61 FC | 	wrlong	result1, fp
30a74     1C 4E 85 F1 | 	sub	fp, #28
30a78     00 FA 0D F2 | 	cmp	result1, #0 wz
30a7c     1C 00 90 5D |  if_ne	jmp	#LR__4834
30a80     04 4E 05 F1 | 	add	fp, #4
30a84     A7 16 02 FB | 	rdlong	arg03, fp
30a88     04 4E 85 F1 | 	sub	fp, #4
30a8c     11 16 06 F1 | 	add	arg03, #17
30a90     0B 05 48 FC | 	wrbyte	#2, arg03
30a94     02 FA 05 F6 | 	mov	result1, #2
30a98     DC 01 90 FD | 	jmp	#LR__4843
30a9c                 | LR__4834
30a9c     1C 4E 05 F1 | 	add	fp, #28
30aa0     A7 18 02 FB | 	rdlong	arg04, fp
30aa4     14 4E 85 F1 | 	sub	fp, #20
30aa8     A7 16 02 FB | 	rdlong	arg03, fp
30aac     09 16 46 F0 | 	shr	arg03, #9
30ab0     0B 19 02 F1 | 	add	arg04, arg03
30ab4     14 4E 05 F1 | 	add	fp, #20
30ab8     A7 18 62 FC | 	wrlong	arg04, fp
30abc     1C 4E 85 F1 | 	sub	fp, #28
30ac0                 | LR__4835
30ac0                 | LR__4836
30ac0                 | LR__4837
30ac0     04 4E 05 F1 | 	add	fp, #4
30ac4     A7 18 02 FB | 	rdlong	arg04, fp
30ac8     0C 17 02 F6 | 	mov	arg03, arg04
30acc     04 4E 85 F1 | 	sub	fp, #4
30ad0     14 16 06 F1 | 	add	arg03, #20
30ad4     0B 17 02 FB | 	rdlong	arg03, arg03
30ad8     0C 18 06 F1 | 	add	arg04, #12
30adc     0C 19 02 FB | 	rdlong	arg04, arg04
30ae0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
30ae4     3C 00 90 ED |  if_be	jmp	#LR__4838
30ae8     04 4E 05 F1 | 	add	fp, #4
30aec     A7 18 02 FB | 	rdlong	arg04, fp
30af0     0C 17 02 F6 | 	mov	arg03, arg04
30af4     14 18 06 F1 | 	add	arg04, #20
30af8     0C 19 02 FB | 	rdlong	arg04, arg04
30afc     0C 16 06 F1 | 	add	arg03, #12
30b00     0B 19 62 FC | 	wrlong	arg04, arg03
30b04     A7 18 02 FB | 	rdlong	arg04, fp
30b08     0C 17 02 F6 | 	mov	arg03, arg04
30b0c     04 4E 85 F1 | 	sub	fp, #4
30b10     10 18 06 F1 | 	add	arg04, #16
30b14     0C 19 C2 FA | 	rdbyte	arg04, arg04
30b18     40 18 46 F5 | 	or	arg04, #64
30b1c     10 16 06 F1 | 	add	arg03, #16
30b20     0B 19 42 FC | 	wrbyte	arg04, arg03
30b24                 | LR__4838
30b24     04 4E 05 F1 | 	add	fp, #4
30b28     A7 16 02 FB | 	rdlong	arg03, fp
30b2c     04 4E 85 F1 | 	sub	fp, #4
30b30     14 16 06 F1 | 	add	arg03, #20
30b34     0B 17 02 FB | 	rdlong	arg03, arg03
30b38     FF 17 CE F7 | 	test	arg03, #511 wz
30b3c     2C 01 90 AD |  if_e	jmp	#LR__4842
30b40     04 4E 05 F1 | 	add	fp, #4
30b44     A7 18 02 FB | 	rdlong	arg04, fp
30b48     18 4E 05 F1 | 	add	fp, #24
30b4c     A7 16 02 FB | 	rdlong	arg03, fp
30b50     1C 4E 85 F1 | 	sub	fp, #28
30b54     1C 18 06 F1 | 	add	arg04, #28
30b58     0C 19 02 FB | 	rdlong	arg04, arg04
30b5c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
30b60     08 01 90 AD |  if_e	jmp	#LR__4842
30b64     04 4E 05 F1 | 	add	fp, #4
30b68     A7 16 02 FB | 	rdlong	arg03, fp
30b6c     04 4E 85 F1 | 	sub	fp, #4
30b70     10 16 06 F1 | 	add	arg03, #16
30b74     0B 17 C2 FA | 	rdbyte	arg03, arg03
30b78     80 16 CE F7 | 	test	arg03, #128 wz
30b7c     7C 00 90 AD |  if_e	jmp	#LR__4840
30b80     10 4E 05 F1 | 	add	fp, #16
30b84     A7 16 02 FB | 	rdlong	arg03, fp
30b88     01 16 06 F1 | 	add	arg03, #1
30b8c     0B 13 C2 FA | 	rdbyte	arg01, arg03
30b90     0C 4E 85 F1 | 	sub	fp, #12
30b94     A7 16 02 FB | 	rdlong	arg03, fp
30b98     0B 15 02 F6 | 	mov	arg02, arg03
30b9c     28 14 06 F1 | 	add	arg02, #40
30ba0     04 4E 85 F1 | 	sub	fp, #4
30ba4     1C 16 06 F1 | 	add	arg03, #28
30ba8     0B 17 02 FB | 	rdlong	arg03, arg03
30bac     01 18 06 F6 | 	mov	arg04, #1
30bb0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
30bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
30bb8     1C 00 90 AD |  if_e	jmp	#LR__4839
30bbc     04 4E 05 F1 | 	add	fp, #4
30bc0     A7 16 02 FB | 	rdlong	arg03, fp
30bc4     04 4E 85 F1 | 	sub	fp, #4
30bc8     11 16 06 F1 | 	add	arg03, #17
30bcc     0B 03 48 FC | 	wrbyte	#1, arg03
30bd0     01 FA 05 F6 | 	mov	result1, #1
30bd4     A0 00 90 FD | 	jmp	#LR__4843
30bd8                 | LR__4839
30bd8     04 4E 05 F1 | 	add	fp, #4
30bdc     A7 18 02 FB | 	rdlong	arg04, fp
30be0     0C 17 02 F6 | 	mov	arg03, arg04
30be4     04 4E 85 F1 | 	sub	fp, #4
30be8     10 18 06 F1 | 	add	arg04, #16
30bec     0C 19 C2 FA | 	rdbyte	arg04, arg04
30bf0     7F 18 06 F5 | 	and	arg04, #127
30bf4     10 16 06 F1 | 	add	arg03, #16
30bf8     0B 19 42 FC | 	wrbyte	arg04, arg03
30bfc                 | LR__4840
30bfc     10 4E 05 F1 | 	add	fp, #16
30c00     A7 16 02 FB | 	rdlong	arg03, fp
30c04     01 16 06 F1 | 	add	arg03, #1
30c08     0B 13 C2 FA | 	rdbyte	arg01, arg03
30c0c     0C 4E 85 F1 | 	sub	fp, #12
30c10     A7 14 02 FB | 	rdlong	arg02, fp
30c14     28 14 06 F1 | 	add	arg02, #40
30c18     18 4E 05 F1 | 	add	fp, #24
30c1c     A7 16 02 FB | 	rdlong	arg03, fp
30c20     1C 4E 85 F1 | 	sub	fp, #28
30c24     01 18 06 F6 | 	mov	arg04, #1
30c28     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
30c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
30c30     1C 00 90 AD |  if_e	jmp	#LR__4841
30c34     04 4E 05 F1 | 	add	fp, #4
30c38     A7 16 02 FB | 	rdlong	arg03, fp
30c3c     04 4E 85 F1 | 	sub	fp, #4
30c40     11 16 06 F1 | 	add	arg03, #17
30c44     0B 03 48 FC | 	wrbyte	#1, arg03
30c48     01 FA 05 F6 | 	mov	result1, #1
30c4c     28 00 90 FD | 	jmp	#LR__4843
30c50                 | LR__4841
30c50     04 4E 05 F1 | 	add	fp, #4
30c54     A7 18 02 FB | 	rdlong	arg04, fp
30c58     18 4E 05 F1 | 	add	fp, #24
30c5c     A7 16 02 FB | 	rdlong	arg03, fp
30c60     1C 4E 85 F1 | 	sub	fp, #28
30c64     1C 18 06 F1 | 	add	arg04, #28
30c68     0C 17 62 FC | 	wrlong	arg03, arg04
30c6c                 | LR__4842
30c6c                 | ' 
30c6c                 | ' 			fp->sect = nsect;
30c6c                 | ' 		}
30c6c                 | ' 	}
30c6c                 | ' 
30c6c                 | ' 	return res ;
30c6c     0C 4E 05 F1 | 	add	fp, #12
30c70     A7 FA 01 FB | 	rdlong	result1, fp
30c74     0C 4E 85 F1 | 	sub	fp, #12
30c78                 | LR__4843
30c78     A7 F0 03 F6 | 	mov	ptra, fp
30c7c     B2 00 A0 FD | 	call	#popregs_
30c80                 | _fatfs_cc_f_lseek_ret
30c80     2D 00 64 FD | 	ret
30c84                 | 
30c84                 | _fatfs_cc_f_opendir
30c84     01 4A 05 F6 | 	mov	COUNT_, #1
30c88     A8 00 A0 FD | 	call	#pushregs_
30c8c     14 F0 07 F1 | 	add	ptra, #20
30c90     04 4E 05 F1 | 	add	fp, #4
30c94     A7 12 62 FC | 	wrlong	arg01, fp
30c98     04 4E 05 F1 | 	add	fp, #4
30c9c     A7 14 62 FC | 	wrlong	arg02, fp
30ca0     04 4E 85 F1 | 	sub	fp, #4
30ca4     A7 16 0A FB | 	rdlong	arg03, fp wz
30ca8     04 4E 85 F1 | 	sub	fp, #4
30cac     09 FA 05 A6 |  if_e	mov	result1, #9
30cb0     78 01 90 AD |  if_e	jmp	#LR__4856
30cb4     08 4E 05 F1 | 	add	fp, #8
30cb8     A7 12 02 F6 | 	mov	arg01, fp
30cbc     08 4E 05 F1 | 	add	fp, #8
30cc0     A7 14 02 F6 | 	mov	arg02, fp
30cc4     10 4E 85 F1 | 	sub	fp, #16
30cc8     00 16 06 F6 | 	mov	arg03, #0
30ccc     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
30cd0     0C 4E 05 F1 | 	add	fp, #12
30cd4     A7 FA 61 FC | 	wrlong	result1, fp
30cd8     0C 4E 85 F1 | 	sub	fp, #12
30cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
30ce0     20 01 90 5D |  if_ne	jmp	#LR__4855
30ce4     04 4E 05 F1 | 	add	fp, #4
30ce8     A7 16 02 FB | 	rdlong	arg03, fp
30cec     0C 4E 05 F1 | 	add	fp, #12
30cf0     A7 FA 01 FB | 	rdlong	result1, fp
30cf4     0B FB 61 FC | 	wrlong	result1, arg03
30cf8     0C 4E 85 F1 | 	sub	fp, #12
30cfc     A7 12 02 FB | 	rdlong	arg01, fp
30d00     04 4E 05 F1 | 	add	fp, #4
30d04     A7 14 02 FB | 	rdlong	arg02, fp
30d08     08 4E 85 F1 | 	sub	fp, #8
30d0c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
30d10     0C 4E 05 F1 | 	add	fp, #12
30d14     A7 FA 61 FC | 	wrlong	result1, fp
30d18     0C 4E 85 F1 | 	sub	fp, #12
30d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
30d20     C4 00 90 5D |  if_ne	jmp	#LR__4854
30d24     04 4E 05 F1 | 	add	fp, #4
30d28     A7 16 02 FB | 	rdlong	arg03, fp
30d2c     04 4E 85 F1 | 	sub	fp, #4
30d30     2B 16 06 F1 | 	add	arg03, #43
30d34     0B 17 C2 FA | 	rdbyte	arg03, arg03
30d38     80 16 CE F7 | 	test	arg03, #128 wz
30d3c     58 00 90 5D |  if_ne	jmp	#LR__4852
30d40     04 4E 05 F1 | 	add	fp, #4
30d44     A7 16 02 FB | 	rdlong	arg03, fp
30d48     04 4E 85 F1 | 	sub	fp, #4
30d4c     06 16 06 F1 | 	add	arg03, #6
30d50     0B 17 C2 FA | 	rdbyte	arg03, arg03
30d54     10 16 CE F7 | 	test	arg03, #16 wz
30d58     30 00 90 AD |  if_e	jmp	#LR__4850
30d5c     04 4E 05 F1 | 	add	fp, #4
30d60     A7 16 02 FB | 	rdlong	arg03, fp
30d64     0B 27 02 F6 | 	mov	local01, arg03
30d68     0C 4E 05 F1 | 	add	fp, #12
30d6c     A7 12 02 FB | 	rdlong	arg01, fp
30d70     10 4E 85 F1 | 	sub	fp, #16
30d74     1C 16 06 F1 | 	add	arg03, #28
30d78     0B 15 02 FB | 	rdlong	arg02, arg03
30d7c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
30d80     08 26 06 F1 | 	add	local01, #8
30d84     13 FB 61 FC | 	wrlong	result1, local01
30d88     0C 00 90 FD | 	jmp	#LR__4851
30d8c                 | LR__4850
30d8c     0C 4E 05 F1 | 	add	fp, #12
30d90     A7 0A 68 FC | 	wrlong	#5, fp
30d94     0C 4E 85 F1 | 	sub	fp, #12
30d98                 | LR__4851
30d98                 | LR__4852
30d98     0C 4E 05 F1 | 	add	fp, #12
30d9c     A7 26 0A FB | 	rdlong	local01, fp wz
30da0     0C 4E 85 F1 | 	sub	fp, #12
30da4     40 00 90 5D |  if_ne	jmp	#LR__4853
30da8     04 4E 05 F1 | 	add	fp, #4
30dac     A7 26 02 FB | 	rdlong	local01, fp
30db0     0C 4E 05 F1 | 	add	fp, #12
30db4     A7 16 02 FB | 	rdlong	arg03, fp
30db8     06 16 06 F1 | 	add	arg03, #6
30dbc     0B 17 E2 FA | 	rdword	arg03, arg03
30dc0     04 26 06 F1 | 	add	local01, #4
30dc4     13 17 52 FC | 	wrword	arg03, local01
30dc8     0C 4E 85 F1 | 	sub	fp, #12
30dcc     A7 12 02 FB | 	rdlong	arg01, fp
30dd0     04 4E 85 F1 | 	sub	fp, #4
30dd4     00 14 06 F6 | 	mov	arg02, #0
30dd8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
30ddc     0C 4E 05 F1 | 	add	fp, #12
30de0     A7 FA 61 FC | 	wrlong	result1, fp
30de4     0C 4E 85 F1 | 	sub	fp, #12
30de8                 | LR__4853
30de8                 | LR__4854
30de8     0C 4E 05 F1 | 	add	fp, #12
30dec     A7 26 02 FB | 	rdlong	local01, fp
30df0     0C 4E 85 F1 | 	sub	fp, #12
30df4     04 26 0E F2 | 	cmp	local01, #4 wz
30df8     0C 4E 05 A1 |  if_e	add	fp, #12
30dfc     A7 0A 68 AC |  if_e	wrlong	#5, fp
30e00     0C 4E 85 A1 |  if_e	sub	fp, #12
30e04                 | LR__4855
30e04     0C 4E 05 F1 | 	add	fp, #12
30e08     A7 26 0A FB | 	rdlong	local01, fp wz
30e0c     0C 4E 85 F1 | 	sub	fp, #12
30e10     04 4E 05 51 |  if_ne	add	fp, #4
30e14     A7 26 02 5B |  if_ne	rdlong	local01, fp
30e18     04 4E 85 51 |  if_ne	sub	fp, #4
30e1c     13 01 68 5C |  if_ne	wrlong	#0, local01
30e20                 | ' 
30e20                 | ' 	return res ;
30e20     0C 4E 05 F1 | 	add	fp, #12
30e24     A7 FA 01 FB | 	rdlong	result1, fp
30e28     0C 4E 85 F1 | 	sub	fp, #12
30e2c                 | LR__4856
30e2c     A7 F0 03 F6 | 	mov	ptra, fp
30e30     B2 00 A0 FD | 	call	#popregs_
30e34                 | _fatfs_cc_f_opendir_ret
30e34     2D 00 64 FD | 	ret
30e38                 | 
30e38                 | _fatfs_cc_f_closedir
30e38     00 4A 05 F6 | 	mov	COUNT_, #0
30e3c     A8 00 A0 FD | 	call	#pushregs_
30e40     10 F0 07 F1 | 	add	ptra, #16
30e44     04 4E 05 F1 | 	add	fp, #4
30e48     A7 12 62 FC | 	wrlong	arg01, fp
30e4c     08 4E 05 F1 | 	add	fp, #8
30e50     A7 14 02 F6 | 	mov	arg02, fp
30e54     0C 4E 85 F1 | 	sub	fp, #12
30e58     C0 DD BF FD | 	call	#_fatfs_cc_validate
30e5c     08 4E 05 F1 | 	add	fp, #8
30e60     A7 FA 61 FC | 	wrlong	result1, fp
30e64     08 4E 85 F1 | 	sub	fp, #8
30e68     00 FA 0D F2 | 	cmp	result1, #0 wz
30e6c     04 4E 05 A1 |  if_e	add	fp, #4
30e70     A7 FA 01 AB |  if_e	rdlong	result1, fp
30e74     04 4E 85 A1 |  if_e	sub	fp, #4
30e78     FD 00 68 AC |  if_e	wrlong	#0, result1
30e7c                 | ' 
30e7c                 | ' 
30e7c                 | ' 
30e7c                 | ' 
30e7c                 | ' 		dp->obj.fs = 0;
30e7c                 | ' #line 4633 "ff.c"
30e7c                 | ' 	}
30e7c                 | ' 	return res;
30e7c     08 4E 05 F1 | 	add	fp, #8
30e80     A7 FA 01 FB | 	rdlong	result1, fp
30e84     08 4E 85 F1 | 	sub	fp, #8
30e88     A7 F0 03 F6 | 	mov	ptra, fp
30e8c     B2 00 A0 FD | 	call	#popregs_
30e90                 | _fatfs_cc_f_closedir_ret
30e90     2D 00 64 FD | 	ret
30e94                 | 
30e94                 | _fatfs_cc_f_readdir
30e94     00 4A 05 F6 | 	mov	COUNT_, #0
30e98     A8 00 A0 FD | 	call	#pushregs_
30e9c     14 F0 07 F1 | 	add	ptra, #20
30ea0     04 4E 05 F1 | 	add	fp, #4
30ea4     A7 12 62 FC | 	wrlong	arg01, fp
30ea8     04 4E 05 F1 | 	add	fp, #4
30eac     A7 14 62 FC | 	wrlong	arg02, fp
30eb0     04 4E 85 F1 | 	sub	fp, #4
30eb4     A7 12 02 FB | 	rdlong	arg01, fp
30eb8     0C 4E 05 F1 | 	add	fp, #12
30ebc     A7 14 02 F6 | 	mov	arg02, fp
30ec0     10 4E 85 F1 | 	sub	fp, #16
30ec4     54 DD BF FD | 	call	#_fatfs_cc_validate
30ec8     0C 4E 05 F1 | 	add	fp, #12
30ecc     A7 FA 61 FC | 	wrlong	result1, fp
30ed0     0C 4E 85 F1 | 	sub	fp, #12
30ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
30ed8     BC 00 90 5D |  if_ne	jmp	#LR__4863
30edc     08 4E 05 F1 | 	add	fp, #8
30ee0     A7 FA 09 FB | 	rdlong	result1, fp wz
30ee4     08 4E 85 F1 | 	sub	fp, #8
30ee8     24 00 90 5D |  if_ne	jmp	#LR__4860
30eec     04 4E 05 F1 | 	add	fp, #4
30ef0     A7 12 02 FB | 	rdlong	arg01, fp
30ef4     04 4E 85 F1 | 	sub	fp, #4
30ef8     00 14 06 F6 | 	mov	arg02, #0
30efc     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
30f00     0C 4E 05 F1 | 	add	fp, #12
30f04     A7 FA 61 FC | 	wrlong	result1, fp
30f08     0C 4E 85 F1 | 	sub	fp, #12
30f0c     88 00 90 FD | 	jmp	#LR__4862
30f10                 | LR__4860
30f10     04 4E 05 F1 | 	add	fp, #4
30f14     A7 12 02 FB | 	rdlong	arg01, fp
30f18     04 4E 85 F1 | 	sub	fp, #4
30f1c     00 14 06 F6 | 	mov	arg02, #0
30f20     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
30f24     0C 4E 05 F1 | 	add	fp, #12
30f28     A7 FA 61 FC | 	wrlong	result1, fp
30f2c     0C 4E 85 F1 | 	sub	fp, #12
30f30     04 FA 0D F2 | 	cmp	result1, #4 wz
30f34     0C 4E 05 A1 |  if_e	add	fp, #12
30f38     A7 00 68 AC |  if_e	wrlong	#0, fp
30f3c     0C 4E 85 A1 |  if_e	sub	fp, #12
30f40     0C 4E 05 F1 | 	add	fp, #12
30f44     A7 FA 09 FB | 	rdlong	result1, fp wz
30f48     0C 4E 85 F1 | 	sub	fp, #12
30f4c     48 00 90 5D |  if_ne	jmp	#LR__4861
30f50     04 4E 05 F1 | 	add	fp, #4
30f54     A7 12 02 FB | 	rdlong	arg01, fp
30f58     04 4E 05 F1 | 	add	fp, #4
30f5c     A7 14 02 FB | 	rdlong	arg02, fp
30f60     08 4E 85 F1 | 	sub	fp, #8
30f64     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
30f68     04 4E 05 F1 | 	add	fp, #4
30f6c     A7 12 02 FB | 	rdlong	arg01, fp
30f70     04 4E 85 F1 | 	sub	fp, #4
30f74     00 14 06 F6 | 	mov	arg02, #0
30f78     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
30f7c     0C 4E 05 F1 | 	add	fp, #12
30f80     A7 FA 61 FC | 	wrlong	result1, fp
30f84     0C 4E 85 F1 | 	sub	fp, #12
30f88     04 FA 0D F2 | 	cmp	result1, #4 wz
30f8c     0C 4E 05 A1 |  if_e	add	fp, #12
30f90     A7 00 68 AC |  if_e	wrlong	#0, fp
30f94     0C 4E 85 A1 |  if_e	sub	fp, #12
30f98                 | LR__4861
30f98                 | LR__4862
30f98                 | LR__4863
30f98                 | ' 			}
30f98                 | ' 			;
30f98                 | ' 		}
30f98                 | ' 	}
30f98                 | ' 	return res ;
30f98     0C 4E 05 F1 | 	add	fp, #12
30f9c     A7 FA 01 FB | 	rdlong	result1, fp
30fa0     0C 4E 85 F1 | 	sub	fp, #12
30fa4     A7 F0 03 F6 | 	mov	ptra, fp
30fa8     B2 00 A0 FD | 	call	#popregs_
30fac                 | _fatfs_cc_f_readdir_ret
30fac     2D 00 64 FD | 	ret
30fb0                 | 
30fb0                 | _fatfs_cc_f_stat
30fb0     00 4A 05 F6 | 	mov	COUNT_, #0
30fb4     A8 00 A0 FD | 	call	#pushregs_
30fb8     40 F0 07 F1 | 	add	ptra, #64
30fbc     04 4E 05 F1 | 	add	fp, #4
30fc0     A7 12 62 FC | 	wrlong	arg01, fp
30fc4     04 4E 05 F1 | 	add	fp, #4
30fc8     A7 14 62 FC | 	wrlong	arg02, fp
30fcc     04 4E 85 F1 | 	sub	fp, #4
30fd0     A7 12 02 F6 | 	mov	arg01, fp
30fd4     0C 4E 05 F1 | 	add	fp, #12
30fd8     A7 14 02 F6 | 	mov	arg02, fp
30fdc     10 4E 85 F1 | 	sub	fp, #16
30fe0     00 16 06 F6 | 	mov	arg03, #0
30fe4     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
30fe8     0C 4E 05 F1 | 	add	fp, #12
30fec     A7 FA 61 FC | 	wrlong	result1, fp
30ff0     0C 4E 85 F1 | 	sub	fp, #12
30ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
30ff8     74 00 90 5D |  if_ne	jmp	#LR__4873
30ffc     10 4E 05 F1 | 	add	fp, #16
31000     A7 12 02 F6 | 	mov	arg01, fp
31004     0C 4E 85 F1 | 	sub	fp, #12
31008     A7 14 02 FB | 	rdlong	arg02, fp
3100c     04 4E 85 F1 | 	sub	fp, #4
31010     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
31014     0C 4E 05 F1 | 	add	fp, #12
31018     A7 FA 61 FC | 	wrlong	result1, fp
3101c     0C 4E 85 F1 | 	sub	fp, #12
31020     00 FA 0D F2 | 	cmp	result1, #0 wz
31024     48 00 90 5D |  if_ne	jmp	#LR__4872
31028     3B 4E 05 F1 | 	add	fp, #59
3102c     A7 FA C1 FA | 	rdbyte	result1, fp
31030     3B 4E 85 F1 | 	sub	fp, #59
31034     80 FA CD F7 | 	test	result1, #128 wz
31038     0C 4E 05 51 |  if_ne	add	fp, #12
3103c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31040     0C 4E 85 51 |  if_ne	sub	fp, #12
31044     28 00 90 5D |  if_ne	jmp	#LR__4871
31048     08 4E 05 F1 | 	add	fp, #8
3104c     A7 FA 09 FB | 	rdlong	result1, fp wz
31050     08 4E 85 F1 | 	sub	fp, #8
31054     18 00 90 AD |  if_e	jmp	#LR__4870
31058     10 4E 05 F1 | 	add	fp, #16
3105c     A7 12 02 F6 | 	mov	arg01, fp
31060     08 4E 85 F1 | 	sub	fp, #8
31064     A7 14 02 FB | 	rdlong	arg02, fp
31068     08 4E 85 F1 | 	sub	fp, #8
3106c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
31070                 | LR__4870
31070                 | LR__4871
31070                 | LR__4872
31070                 | LR__4873
31070                 | ' 			}
31070                 | ' 		}
31070                 | ' 		;
31070                 | ' 	}
31070                 | ' 
31070                 | ' 	return res ;
31070     0C 4E 05 F1 | 	add	fp, #12
31074     A7 FA 01 FB | 	rdlong	result1, fp
31078     0C 4E 85 F1 | 	sub	fp, #12
3107c     A7 F0 03 F6 | 	mov	ptra, fp
31080     B2 00 A0 FD | 	call	#popregs_
31084                 | _fatfs_cc_f_stat_ret
31084     2D 00 64 FD | 	ret
31088                 | 
31088                 | _fatfs_cc_f_unlink
31088     00 4A 05 F6 | 	mov	COUNT_, #0
3108c     A8 00 A0 FD | 	call	#pushregs_
31090     74 F0 07 F1 | 	add	ptra, #116
31094     04 4E 05 F1 | 	add	fp, #4
31098     A7 12 62 FC | 	wrlong	arg01, fp
3109c     68 4E 05 F1 | 	add	fp, #104
310a0     A7 00 68 FC | 	wrlong	#0, fp
310a4     68 4E 85 F1 | 	sub	fp, #104
310a8     A7 12 02 F6 | 	mov	arg01, fp
310ac     6C 4E 05 F1 | 	add	fp, #108
310b0     A7 14 02 F6 | 	mov	arg02, fp
310b4     70 4E 85 F1 | 	sub	fp, #112
310b8     02 16 06 F6 | 	mov	arg03, #2
310bc     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
310c0     08 4E 05 F1 | 	add	fp, #8
310c4     A7 FA 61 FC | 	wrlong	result1, fp
310c8     08 4E 85 F1 | 	sub	fp, #8
310cc     00 FA 0D F2 | 	cmp	result1, #0 wz
310d0     E4 01 90 5D |  if_ne	jmp	#LR__4888
310d4     70 4E 05 F1 | 	add	fp, #112
310d8     A7 16 02 FB | 	rdlong	arg03, fp
310dc     64 4E 85 F1 | 	sub	fp, #100
310e0     A7 16 62 FC | 	wrlong	arg03, fp
310e4     A7 12 02 F6 | 	mov	arg01, fp
310e8     08 4E 85 F1 | 	sub	fp, #8
310ec     A7 14 02 FB | 	rdlong	arg02, fp
310f0     04 4E 85 F1 | 	sub	fp, #4
310f4     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
310f8     08 4E 05 F1 | 	add	fp, #8
310fc     A7 FA 61 FC | 	wrlong	result1, fp
31100     00 FA 4D F2 | 	cmps	result1, #0 wz
31104     08 4E 85 F1 | 	sub	fp, #8
31108     AC 01 90 5D |  if_ne	jmp	#LR__4887
3110c     37 4E 05 F1 | 	add	fp, #55
31110     A7 FA C1 FA | 	rdbyte	result1, fp
31114     37 4E 85 F1 | 	sub	fp, #55
31118     80 FA CD F7 | 	test	result1, #128 wz
3111c     08 4E 05 51 |  if_ne	add	fp, #8
31120     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31124     08 4E 85 51 |  if_ne	sub	fp, #8
31128     1C 00 90 5D |  if_ne	jmp	#LR__4880
3112c     12 4E 05 F1 | 	add	fp, #18
31130     A7 FA C1 FA | 	rdbyte	result1, fp
31134     12 4E 85 F1 | 	sub	fp, #18
31138     01 FA CD F7 | 	test	result1, #1 wz
3113c     08 4E 05 51 |  if_ne	add	fp, #8
31140     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31144     08 4E 85 51 |  if_ne	sub	fp, #8
31148                 | LR__4880
31148     08 4E 05 F1 | 	add	fp, #8
3114c     A7 FA 09 FB | 	rdlong	result1, fp wz
31150     08 4E 85 F1 | 	sub	fp, #8
31154     C8 00 90 5D |  if_ne	jmp	#LR__4883
31158     70 4E 05 F1 | 	add	fp, #112
3115c     A7 12 02 FB | 	rdlong	arg01, fp
31160     48 4E 85 F1 | 	sub	fp, #72
31164     A7 14 02 FB | 	rdlong	arg02, fp
31168     28 4E 85 F1 | 	sub	fp, #40
3116c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
31170     6C 4E 05 F1 | 	add	fp, #108
31174     A7 FA 61 FC | 	wrlong	result1, fp
31178     5A 4E 85 F1 | 	sub	fp, #90
3117c     A7 FA C1 FA | 	rdbyte	result1, fp
31180     12 4E 85 F1 | 	sub	fp, #18
31184     10 FA CD F7 | 	test	result1, #16 wz
31188     94 00 90 AD |  if_e	jmp	#LR__4882
3118c     70 4E 05 F1 | 	add	fp, #112
31190     A7 FA 01 FB | 	rdlong	result1, fp
31194     34 4E 85 F1 | 	sub	fp, #52
31198     A7 FA 61 FC | 	wrlong	result1, fp
3119c     30 4E 05 F1 | 	add	fp, #48
311a0     A7 16 02 FB | 	rdlong	arg03, fp
311a4     28 4E 85 F1 | 	sub	fp, #40
311a8     A7 16 62 FC | 	wrlong	arg03, fp
311ac     08 4E 85 F1 | 	sub	fp, #8
311b0     A7 12 02 F6 | 	mov	arg01, fp
311b4     3C 4E 85 F1 | 	sub	fp, #60
311b8     00 14 06 F6 | 	mov	arg02, #0
311bc     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
311c0     08 4E 05 F1 | 	add	fp, #8
311c4     A7 FA 61 FC | 	wrlong	result1, fp
311c8     08 4E 85 F1 | 	sub	fp, #8
311cc     00 FA 0D F2 | 	cmp	result1, #0 wz
311d0     4C 00 90 5D |  if_ne	jmp	#LR__4881
311d4     3C 4E 05 F1 | 	add	fp, #60
311d8     A7 12 02 F6 | 	mov	arg01, fp
311dc     3C 4E 85 F1 | 	sub	fp, #60
311e0     00 14 06 F6 | 	mov	arg02, #0
311e4     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
311e8     08 4E 05 F1 | 	add	fp, #8
311ec     A7 FA 61 FC | 	wrlong	result1, fp
311f0     00 FA 4D F2 | 	cmps	result1, #0 wz
311f4     08 4E 85 F1 | 	sub	fp, #8
311f8     08 4E 05 A1 |  if_e	add	fp, #8
311fc     A7 0E 68 AC |  if_e	wrlong	#7, fp
31200     08 4E 85 A1 |  if_e	sub	fp, #8
31204     08 4E 05 F1 | 	add	fp, #8
31208     A7 FA 01 FB | 	rdlong	result1, fp
3120c     08 4E 85 F1 | 	sub	fp, #8
31210     04 FA 0D F2 | 	cmp	result1, #4 wz
31214     08 4E 05 A1 |  if_e	add	fp, #8
31218     A7 00 68 AC |  if_e	wrlong	#0, fp
3121c     08 4E 85 A1 |  if_e	sub	fp, #8
31220                 | LR__4881
31220                 | LR__4882
31220                 | LR__4883
31220     08 4E 05 F1 | 	add	fp, #8
31224     A7 FA 09 FB | 	rdlong	result1, fp wz
31228     08 4E 85 F1 | 	sub	fp, #8
3122c     88 00 90 5D |  if_ne	jmp	#LR__4886
31230     0C 4E 05 F1 | 	add	fp, #12
31234     A7 12 02 F6 | 	mov	arg01, fp
31238     0C 4E 85 F1 | 	sub	fp, #12
3123c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
31240     08 4E 05 F1 | 	add	fp, #8
31244     A7 FA 61 FC | 	wrlong	result1, fp
31248     08 4E 85 F1 | 	sub	fp, #8
3124c     00 FA 0D F2 | 	cmp	result1, #0 wz
31250     38 00 90 5D |  if_ne	jmp	#LR__4884
31254     6C 4E 05 F1 | 	add	fp, #108
31258     A7 FA 09 FB | 	rdlong	result1, fp wz
3125c     6C 4E 85 F1 | 	sub	fp, #108
31260     28 00 90 AD |  if_e	jmp	#LR__4884
31264     0C 4E 05 F1 | 	add	fp, #12
31268     A7 12 02 F6 | 	mov	arg01, fp
3126c     60 4E 05 F1 | 	add	fp, #96
31270     A7 14 02 FB | 	rdlong	arg02, fp
31274     6C 4E 85 F1 | 	sub	fp, #108
31278     00 16 06 F6 | 	mov	arg03, #0
3127c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
31280     08 4E 05 F1 | 	add	fp, #8
31284     A7 FA 61 FC | 	wrlong	result1, fp
31288     08 4E 85 F1 | 	sub	fp, #8
3128c                 | LR__4884
3128c     08 4E 05 F1 | 	add	fp, #8
31290     A7 FA 09 FB | 	rdlong	result1, fp wz
31294     08 4E 85 F1 | 	sub	fp, #8
31298     1C 00 90 5D |  if_ne	jmp	#LR__4885
3129c     70 4E 05 F1 | 	add	fp, #112
312a0     A7 12 02 FB | 	rdlong	arg01, fp
312a4     70 4E 85 F1 | 	sub	fp, #112
312a8     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
312ac     08 4E 05 F1 | 	add	fp, #8
312b0     A7 FA 61 FC | 	wrlong	result1, fp
312b4     08 4E 85 F1 | 	sub	fp, #8
312b8                 | LR__4885
312b8                 | LR__4886
312b8                 | LR__4887
312b8                 | LR__4888
312b8                 | ' 			}
312b8                 | ' 		}
312b8                 | ' 		;
312b8                 | ' 	}
312b8                 | ' 
312b8                 | ' 	return res ;
312b8     08 4E 05 F1 | 	add	fp, #8
312bc     A7 FA 01 FB | 	rdlong	result1, fp
312c0     08 4E 85 F1 | 	sub	fp, #8
312c4     A7 F0 03 F6 | 	mov	ptra, fp
312c8     B2 00 A0 FD | 	call	#popregs_
312cc                 | _fatfs_cc_f_unlink_ret
312cc     2D 00 64 FD | 	ret
312d0                 | 
312d0                 | _fatfs_cc_f_mkdir
312d0     00 4A 05 F6 | 	mov	COUNT_, #0
312d4     A8 00 A0 FD | 	call	#pushregs_
312d8     5C F0 07 F1 | 	add	ptra, #92
312dc     04 4E 05 F1 | 	add	fp, #4
312e0     A7 12 62 FC | 	wrlong	arg01, fp
312e4     A7 12 02 F6 | 	mov	arg01, fp
312e8     48 4E 05 F1 | 	add	fp, #72
312ec     A7 14 02 F6 | 	mov	arg02, fp
312f0     4C 4E 85 F1 | 	sub	fp, #76
312f4     02 16 06 F6 | 	mov	arg03, #2
312f8     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
312fc     08 4E 05 F1 | 	add	fp, #8
31300     A7 FA 61 FC | 	wrlong	result1, fp
31304     08 4E 85 F1 | 	sub	fp, #8
31308     00 FA 0D F2 | 	cmp	result1, #0 wz
3130c     C4 02 90 5D |  if_ne	jmp	#LR__4895
31310     4C 4E 05 F1 | 	add	fp, #76
31314     A7 16 02 FB | 	rdlong	arg03, fp
31318     40 4E 85 F1 | 	sub	fp, #64
3131c     A7 16 62 FC | 	wrlong	arg03, fp
31320     A7 12 02 F6 | 	mov	arg01, fp
31324     08 4E 85 F1 | 	sub	fp, #8
31328     A7 14 02 FB | 	rdlong	arg02, fp
3132c     04 4E 85 F1 | 	sub	fp, #4
31330     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
31334     08 4E 05 F1 | 	add	fp, #8
31338     A7 FA 61 FC | 	wrlong	result1, fp
3133c     00 FA 4D F2 | 	cmps	result1, #0 wz
31340     08 4E 85 F1 | 	sub	fp, #8
31344     08 4E 05 A1 |  if_e	add	fp, #8
31348     A7 10 68 AC |  if_e	wrlong	#8, fp
3134c     08 4E 85 A1 |  if_e	sub	fp, #8
31350     08 4E 05 F1 | 	add	fp, #8
31354     A7 FA 01 FB | 	rdlong	result1, fp
31358     08 4E 85 F1 | 	sub	fp, #8
3135c     04 FA 0D F2 | 	cmp	result1, #4 wz
31360     70 02 90 5D |  if_ne	jmp	#LR__4894
31364     4C 4E 05 F1 | 	add	fp, #76
31368     A7 16 02 FB | 	rdlong	arg03, fp
3136c     10 4E 85 F1 | 	sub	fp, #16
31370     A7 16 62 FC | 	wrlong	arg03, fp
31374     A7 12 02 F6 | 	mov	arg01, fp
31378     3C 4E 85 F1 | 	sub	fp, #60
3137c     00 14 06 F6 | 	mov	arg02, #0
31380     04 AC BF FD | 	call	#_fatfs_cc_create_chain
31384     50 4E 05 F1 | 	add	fp, #80
31388     A7 FA 61 FC | 	wrlong	result1, fp
3138c     48 4E 85 F1 | 	sub	fp, #72
31390     A7 00 68 FC | 	wrlong	#0, fp
31394     48 4E 05 F1 | 	add	fp, #72
31398     A7 FA 09 FB | 	rdlong	result1, fp wz
3139c     50 4E 85 F1 | 	sub	fp, #80
313a0     08 4E 05 A1 |  if_e	add	fp, #8
313a4     A7 0E 68 AC |  if_e	wrlong	#7, fp
313a8     08 4E 85 A1 |  if_e	sub	fp, #8
313ac     50 4E 05 F1 | 	add	fp, #80
313b0     A7 FA 01 FB | 	rdlong	result1, fp
313b4     50 4E 85 F1 | 	sub	fp, #80
313b8     01 FA 0D F2 | 	cmp	result1, #1 wz
313bc     08 4E 05 A1 |  if_e	add	fp, #8
313c0     A7 04 68 AC |  if_e	wrlong	#2, fp
313c4     08 4E 85 A1 |  if_e	sub	fp, #8
313c8     50 4E 05 F1 | 	add	fp, #80
313cc     A7 16 02 FB | 	rdlong	arg03, fp
313d0     50 4E 85 F1 | 	sub	fp, #80
313d4     FF FF 7F FF 
313d8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
313dc     08 4E 05 A1 |  if_e	add	fp, #8
313e0     A7 02 68 AC |  if_e	wrlong	#1, fp
313e4     08 4E 85 A1 |  if_e	sub	fp, #8
313e8     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
313ec     58 4E 05 F1 | 	add	fp, #88
313f0     A7 FA 61 FC | 	wrlong	result1, fp
313f4     50 4E 85 F1 | 	sub	fp, #80
313f8     A7 FA 09 FB | 	rdlong	result1, fp wz
313fc     08 4E 85 F1 | 	sub	fp, #8
31400     1C 01 90 5D |  if_ne	jmp	#LR__4891
31404     4C 4E 05 F1 | 	add	fp, #76
31408     A7 12 02 FB | 	rdlong	arg01, fp
3140c     04 4E 05 F1 | 	add	fp, #4
31410     A7 14 02 FB | 	rdlong	arg02, fp
31414     50 4E 85 F1 | 	sub	fp, #80
31418     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
3141c     08 4E 05 F1 | 	add	fp, #8
31420     A7 FA 61 FC | 	wrlong	result1, fp
31424     00 FA 4D F2 | 	cmps	result1, #0 wz
31428     08 4E 85 F1 | 	sub	fp, #8
3142c     F0 00 90 5D |  if_ne	jmp	#LR__4890
31430     4C 4E 05 F1 | 	add	fp, #76
31434     A7 12 02 FB | 	rdlong	arg01, fp
31438     4C 4E 85 F1 | 	sub	fp, #76
3143c     34 12 06 F1 | 	add	arg01, #52
31440     20 14 06 F6 | 	mov	arg02, #32
31444     0B 16 06 F6 | 	mov	arg03, #11
31448     98 00 A0 FD | 	call	#\builtin_bytefill_
3144c     4C 4E 05 F1 | 	add	fp, #76
31450     A7 FA 01 FB | 	rdlong	result1, fp
31454     34 FA 05 F1 | 	add	result1, #52
31458     FD 5C 48 FC | 	wrbyte	#46, result1
3145c     A7 16 02 FB | 	rdlong	arg03, fp
31460     3F 16 06 F1 | 	add	arg03, #63
31464     0B 21 48 FC | 	wrbyte	#16, arg03
31468     A7 12 02 FB | 	rdlong	arg01, fp
3146c     4A 12 06 F1 | 	add	arg01, #74
31470     0C 4E 05 F1 | 	add	fp, #12
31474     A7 14 02 FB | 	rdlong	arg02, fp
31478     09 15 62 FC | 	wrlong	arg02, arg01
3147c     0C 4E 85 F1 | 	sub	fp, #12
31480     A7 14 02 FB | 	rdlong	arg02, fp
31484     0A 13 02 F6 | 	mov	arg01, arg02
31488     34 14 06 F1 | 	add	arg02, #52
3148c     04 4E 05 F1 | 	add	fp, #4
31490     A7 16 02 FB | 	rdlong	arg03, fp
31494     50 4E 85 F1 | 	sub	fp, #80
31498     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
3149c     4C 4E 05 F1 | 	add	fp, #76
314a0     A7 14 02 FB | 	rdlong	arg02, fp
314a4     0A 13 02 F6 | 	mov	arg01, arg02
314a8     54 12 06 F1 | 	add	arg01, #84
314ac     4C 4E 85 F1 | 	sub	fp, #76
314b0     34 14 06 F1 | 	add	arg02, #52
314b4     20 16 06 F6 | 	mov	arg03, #32
314b8     78 27 BF FD | 	call	#__system____builtin_memmove
314bc     4C 4E 05 F1 | 	add	fp, #76
314c0     A7 16 02 FB | 	rdlong	arg03, fp
314c4     55 16 06 F1 | 	add	arg03, #85
314c8     0B 5D 48 FC | 	wrbyte	#46, arg03
314cc     38 4E 85 F1 | 	sub	fp, #56
314d0     A7 16 02 FB | 	rdlong	arg03, fp
314d4     40 4E 05 F1 | 	add	fp, #64
314d8     A7 16 62 FC | 	wrlong	arg03, fp
314dc     08 4E 85 F1 | 	sub	fp, #8
314e0     A7 14 02 FB | 	rdlong	arg02, fp
314e4     0A 13 02 F6 | 	mov	arg01, arg02
314e8     54 14 06 F1 | 	add	arg02, #84
314ec     4C 4E 85 F1 | 	sub	fp, #76
314f0     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
314f4     4C 4E 05 F1 | 	add	fp, #76
314f8     A7 16 02 FB | 	rdlong	arg03, fp
314fc     03 16 06 F1 | 	add	arg03, #3
31500     0B 03 48 FC | 	wrbyte	#1, arg03
31504     40 4E 85 F1 | 	sub	fp, #64
31508     A7 12 02 F6 | 	mov	arg01, fp
3150c     0C 4E 85 F1 | 	sub	fp, #12
31510     44 BA BF FD | 	call	#_fatfs_cc_dir_register
31514     08 4E 05 F1 | 	add	fp, #8
31518     A7 FA 61 FC | 	wrlong	result1, fp
3151c     08 4E 85 F1 | 	sub	fp, #8
31520                 | LR__4890
31520                 | LR__4891
31520     08 4E 05 F1 | 	add	fp, #8
31524     A7 FA 09 FB | 	rdlong	result1, fp wz
31528     08 4E 85 F1 | 	sub	fp, #8
3152c     88 00 90 5D |  if_ne	jmp	#LR__4892
31530     28 4E 05 F1 | 	add	fp, #40
31534     A7 12 02 FB | 	rdlong	arg01, fp
31538     16 12 06 F1 | 	add	arg01, #22
3153c     30 4E 05 F1 | 	add	fp, #48
31540     A7 14 02 FB | 	rdlong	arg02, fp
31544     09 15 62 FC | 	wrlong	arg02, arg01
31548     0C 4E 85 F1 | 	sub	fp, #12
3154c     A7 12 02 FB | 	rdlong	arg01, fp
31550     24 4E 85 F1 | 	sub	fp, #36
31554     A7 14 02 FB | 	rdlong	arg02, fp
31558     28 4E 05 F1 | 	add	fp, #40
3155c     A7 16 02 FB | 	rdlong	arg03, fp
31560     50 4E 85 F1 | 	sub	fp, #80
31564     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
31568     28 4E 05 F1 | 	add	fp, #40
3156c     A7 FA 01 FB | 	rdlong	result1, fp
31570     0B FA 05 F1 | 	add	result1, #11
31574     FD 20 48 FC | 	wrbyte	#16, result1
31578     24 4E 05 F1 | 	add	fp, #36
3157c     A7 FA 01 FB | 	rdlong	result1, fp
31580     03 FA 05 F1 | 	add	result1, #3
31584     FD 02 48 FC | 	wrbyte	#1, result1
31588     44 4E 85 F1 | 	sub	fp, #68
3158c     A7 FA 09 FB | 	rdlong	result1, fp wz
31590     08 4E 85 F1 | 	sub	fp, #8
31594     3C 00 90 5D |  if_ne	jmp	#LR__4893
31598     4C 4E 05 F1 | 	add	fp, #76
3159c     A7 12 02 FB | 	rdlong	arg01, fp
315a0     4C 4E 85 F1 | 	sub	fp, #76
315a4     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
315a8     08 4E 05 F1 | 	add	fp, #8
315ac     A7 FA 61 FC | 	wrlong	result1, fp
315b0     08 4E 85 F1 | 	sub	fp, #8
315b4     1C 00 90 FD | 	jmp	#LR__4893
315b8                 | LR__4892
315b8     3C 4E 05 F1 | 	add	fp, #60
315bc     A7 12 02 F6 | 	mov	arg01, fp
315c0     14 4E 05 F1 | 	add	fp, #20
315c4     A7 14 02 FB | 	rdlong	arg02, fp
315c8     50 4E 85 F1 | 	sub	fp, #80
315cc     00 16 06 F6 | 	mov	arg03, #0
315d0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
315d4                 | LR__4893
315d4                 | LR__4894
315d4                 | LR__4895
315d4                 | ' 				remove_chain(&sobj, dcl, 0);
315d4                 | ' 			}
315d4                 | ' 		}
315d4                 | ' 		;
315d4                 | ' 	}
315d4                 | ' 
315d4                 | ' 	return res ;
315d4     08 4E 05 F1 | 	add	fp, #8
315d8     A7 FA 01 FB | 	rdlong	result1, fp
315dc     08 4E 85 F1 | 	sub	fp, #8
315e0     A7 F0 03 F6 | 	mov	ptra, fp
315e4     B2 00 A0 FD | 	call	#popregs_
315e8                 | _fatfs_cc_f_mkdir_ret
315e8     2D 00 64 FD | 	ret
315ec                 | 
315ec                 | _fatfs_cc_f_rename
315ec     01 4A 05 F6 | 	mov	COUNT_, #1
315f0     A8 00 A0 FD | 	call	#pushregs_
315f4     9C F0 07 F1 | 	add	ptra, #156
315f8     04 4E 05 F1 | 	add	fp, #4
315fc     A7 12 62 FC | 	wrlong	arg01, fp
31600     04 4E 05 F1 | 	add	fp, #4
31604     A7 14 62 FC | 	wrlong	arg02, fp
31608     A7 12 02 F6 | 	mov	arg01, fp
3160c     08 4E 85 F1 | 	sub	fp, #8
31610     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
31614     04 4E 05 F1 | 	add	fp, #4
31618     A7 12 02 F6 | 	mov	arg01, fp
3161c     6C 4E 05 F1 | 	add	fp, #108
31620     A7 14 02 F6 | 	mov	arg02, fp
31624     70 4E 85 F1 | 	sub	fp, #112
31628     02 16 06 F6 | 	mov	arg03, #2
3162c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
31630     0C 4E 05 F1 | 	add	fp, #12
31634     A7 FA 61 FC | 	wrlong	result1, fp
31638     0C 4E 85 F1 | 	sub	fp, #12
3163c     00 FA 0D F2 | 	cmp	result1, #0 wz
31640     44 03 90 5D |  if_ne	jmp	#LR__4913
31644     70 4E 05 F1 | 	add	fp, #112
31648     A7 16 02 FB | 	rdlong	arg03, fp
3164c     60 4E 85 F1 | 	sub	fp, #96
31650     A7 16 62 FC | 	wrlong	arg03, fp
31654     A7 12 02 F6 | 	mov	arg01, fp
31658     0C 4E 85 F1 | 	sub	fp, #12
3165c     A7 14 02 FB | 	rdlong	arg02, fp
31660     04 4E 85 F1 | 	sub	fp, #4
31664     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
31668     0C 4E 05 F1 | 	add	fp, #12
3166c     A7 FA 61 FC | 	wrlong	result1, fp
31670     00 FA 4D F2 | 	cmps	result1, #0 wz
31674     0C 4E 85 F1 | 	sub	fp, #12
31678     1C 00 90 5D |  if_ne	jmp	#LR__4900
3167c     3B 4E 05 F1 | 	add	fp, #59
31680     A7 FA C1 FA | 	rdbyte	result1, fp
31684     3B 4E 85 F1 | 	sub	fp, #59
31688     A0 FA CD F7 | 	test	result1, #160 wz
3168c     0C 4E 05 51 |  if_ne	add	fp, #12
31690     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31694     0C 4E 85 51 |  if_ne	sub	fp, #12
31698                 | LR__4900
31698     0C 4E 05 F1 | 	add	fp, #12
3169c     A7 26 0A FB | 	rdlong	local01, fp wz
316a0     0C 4E 85 F1 | 	sub	fp, #12
316a4     E0 02 90 5D |  if_ne	jmp	#LR__4912
316a8     74 4E 05 F1 | 	add	fp, #116
316ac     A7 12 02 F6 | 	mov	arg01, fp
316b0     48 4E 85 F1 | 	sub	fp, #72
316b4     A7 14 02 FB | 	rdlong	arg02, fp
316b8     2C 4E 85 F1 | 	sub	fp, #44
316bc     20 16 06 F6 | 	mov	arg03, #32
316c0     70 25 BF FD | 	call	#__system____builtin_memmove
316c4     40 4E 05 F1 | 	add	fp, #64
316c8     A7 12 02 F6 | 	mov	arg01, fp
316cc     30 4E 85 F1 | 	sub	fp, #48
316d0     A7 14 02 F6 | 	mov	arg02, fp
316d4     10 4E 85 F1 | 	sub	fp, #16
316d8     30 16 06 F6 | 	mov	arg03, #48
316dc     54 25 BF FD | 	call	#__system____builtin_memmove
316e0     40 4E 05 F1 | 	add	fp, #64
316e4     A7 12 02 F6 | 	mov	arg01, fp
316e8     38 4E 85 F1 | 	sub	fp, #56
316ec     A7 14 02 FB | 	rdlong	arg02, fp
316f0     08 4E 85 F1 | 	sub	fp, #8
316f4     34 CA BF FD | 	call	#_fatfs_cc_follow_path
316f8     0C 4E 05 F1 | 	add	fp, #12
316fc     A7 FA 61 FC | 	wrlong	result1, fp
31700     0C 4E 85 F1 | 	sub	fp, #12
31704     00 FA 0D F2 | 	cmp	result1, #0 wz
31708     4C 00 90 5D |  if_ne	jmp	#LR__4903
3170c     48 4E 05 F1 | 	add	fp, #72
31710     A7 FA 01 FB | 	rdlong	result1, fp
31714     30 4E 85 F1 | 	sub	fp, #48
31718     A7 16 02 FB | 	rdlong	arg03, fp
3171c     18 4E 85 F1 | 	sub	fp, #24
31720     0B FB 09 F2 | 	cmp	result1, arg03 wz
31724     20 00 90 5D |  if_ne	jmp	#LR__4901
31728     50 4E 05 F1 | 	add	fp, #80
3172c     A7 FA 01 FB | 	rdlong	result1, fp
31730     30 4E 85 F1 | 	sub	fp, #48
31734     A7 16 02 FB | 	rdlong	arg03, fp
31738     20 4E 85 F1 | 	sub	fp, #32
3173c     0B FB 09 F2 | 	cmp	result1, arg03 wz
31740     04 26 06 A6 |  if_e	mov	local01, #4
31744     04 00 90 AD |  if_e	jmp	#LR__4902
31748                 | LR__4901
31748     08 26 06 F6 | 	mov	local01, #8
3174c                 | LR__4902
3174c     0C 4E 05 F1 | 	add	fp, #12
31750     A7 26 62 FC | 	wrlong	local01, fp
31754     0C 4E 85 F1 | 	sub	fp, #12
31758                 | LR__4903
31758     0C 4E 05 F1 | 	add	fp, #12
3175c     A7 26 02 FB | 	rdlong	local01, fp
31760     0C 4E 85 F1 | 	sub	fp, #12
31764     04 26 0E F2 | 	cmp	local01, #4 wz
31768     CC 01 90 5D |  if_ne	jmp	#LR__4909
3176c     40 4E 05 F1 | 	add	fp, #64
31770     A7 12 02 F6 | 	mov	arg01, fp
31774     40 4E 85 F1 | 	sub	fp, #64
31778     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
3177c     0C 4E 05 F1 | 	add	fp, #12
31780     A7 FA 61 FC | 	wrlong	result1, fp
31784     0C 4E 85 F1 | 	sub	fp, #12
31788     00 FA 0D F2 | 	cmp	result1, #0 wz
3178c     A8 01 90 5D |  if_ne	jmp	#LR__4908
31790     5C 4E 05 F1 | 	add	fp, #92
31794     A7 12 02 FB | 	rdlong	arg01, fp
31798     38 4E 05 F1 | 	add	fp, #56
3179c     A7 12 62 FC | 	wrlong	arg01, fp
317a0     0D 12 06 F1 | 	add	arg01, #13
317a4     20 4E 85 F1 | 	sub	fp, #32
317a8     A7 14 02 F6 | 	mov	arg02, fp
317ac     74 4E 85 F1 | 	sub	fp, #116
317b0     0D 14 06 F1 | 	add	arg02, #13
317b4     13 16 06 F6 | 	mov	arg03, #19
317b8     78 24 BF FD | 	call	#__system____builtin_memmove
317bc     94 4E 05 F1 | 	add	fp, #148
317c0     A7 26 02 FB | 	rdlong	local01, fp
317c4     15 4E 85 F1 | 	sub	fp, #21
317c8     A7 FA C1 FA | 	rdbyte	result1, fp
317cc     0B 26 06 F1 | 	add	local01, #11
317d0     13 FB 41 FC | 	wrbyte	result1, local01
317d4     15 4E 05 F1 | 	add	fp, #21
317d8     A7 26 02 FB | 	rdlong	local01, fp
317dc     94 4E 85 F1 | 	sub	fp, #148
317e0     0B 26 06 F1 | 	add	local01, #11
317e4     13 27 C2 FA | 	rdbyte	local01, local01
317e8     10 26 CE F7 | 	test	local01, #16 wz
317ec     24 00 90 5D |  if_ne	jmp	#LR__4904
317f0     94 4E 05 F1 | 	add	fp, #148
317f4     A7 FA 01 FB | 	rdlong	result1, fp
317f8     FD 26 02 F6 | 	mov	local01, result1
317fc     94 4E 85 F1 | 	sub	fp, #148
31800     0B FA 05 F1 | 	add	result1, #11
31804     FD FA C1 FA | 	rdbyte	result1, result1
31808     20 FA 45 F5 | 	or	result1, #32
3180c     0B 26 06 F1 | 	add	local01, #11
31810     13 FB 41 FC | 	wrbyte	result1, local01
31814                 | LR__4904
31814     70 4E 05 F1 | 	add	fp, #112
31818     A7 26 02 FB | 	rdlong	local01, fp
3181c     03 26 06 F1 | 	add	local01, #3
31820     13 03 48 FC | 	wrbyte	#1, local01
31824     24 4E 05 F1 | 	add	fp, #36
31828     A7 26 02 FB | 	rdlong	local01, fp
3182c     94 4E 85 F1 | 	sub	fp, #148
31830     0B 26 06 F1 | 	add	local01, #11
31834     13 27 C2 FA | 	rdbyte	local01, local01
31838     10 26 CE F7 | 	test	local01, #16 wz
3183c     F8 00 90 AD |  if_e	jmp	#LR__4907
31840     18 4E 05 F1 | 	add	fp, #24
31844     A7 16 02 FB | 	rdlong	arg03, fp
31848     30 4E 05 F1 | 	add	fp, #48
3184c     A7 26 02 FB | 	rdlong	local01, fp
31850     48 4E 85 F1 | 	sub	fp, #72
31854     13 17 0A F2 | 	cmp	arg03, local01 wz
31858     DC 00 90 AD |  if_e	jmp	#LR__4907
3185c     70 4E 05 F1 | 	add	fp, #112
31860     A7 12 02 FB | 	rdlong	arg01, fp
31864     09 27 02 F6 | 	mov	local01, arg01
31868     24 4E 05 F1 | 	add	fp, #36
3186c     A7 14 02 FB | 	rdlong	arg02, fp
31870     94 4E 85 F1 | 	sub	fp, #148
31874     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
31878     FD 14 02 F6 | 	mov	arg02, result1
3187c     13 13 02 F6 | 	mov	arg01, local01
31880     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
31884     98 4E 05 F1 | 	add	fp, #152
31888     A7 FA 61 FC | 	wrlong	result1, fp
3188c     00 FA 4D F2 | 	cmps	result1, #0 wz
31890     98 4E 85 F1 | 	sub	fp, #152
31894     0C 4E 05 A1 |  if_e	add	fp, #12
31898     A7 04 68 AC |  if_e	wrlong	#2, fp
3189c     0C 4E 85 A1 |  if_e	sub	fp, #12
318a0     94 00 90 AD |  if_e	jmp	#LR__4906
318a4     70 4E 05 F1 | 	add	fp, #112
318a8     A7 12 02 FB | 	rdlong	arg01, fp
318ac     28 4E 05 F1 | 	add	fp, #40
318b0     A7 14 02 FB | 	rdlong	arg02, fp
318b4     98 4E 85 F1 | 	sub	fp, #152
318b8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
318bc     0C 4E 05 F1 | 	add	fp, #12
318c0     A7 FA 61 FC | 	wrlong	result1, fp
318c4     64 4E 05 F1 | 	add	fp, #100
318c8     A7 26 02 FB | 	rdlong	local01, fp
318cc     54 26 06 F1 | 	add	local01, #84
318d0     24 4E 05 F1 | 	add	fp, #36
318d4     A7 26 62 FC | 	wrlong	local01, fp
318d8     88 4E 85 F1 | 	sub	fp, #136
318dc     A7 26 0A FB | 	rdlong	local01, fp wz
318e0     0C 4E 85 F1 | 	sub	fp, #12
318e4     50 00 90 5D |  if_ne	jmp	#LR__4905
318e8     94 4E 05 F1 | 	add	fp, #148
318ec     A7 26 02 FB | 	rdlong	local01, fp
318f0     94 4E 85 F1 | 	sub	fp, #148
318f4     01 26 06 F1 | 	add	local01, #1
318f8     13 27 C2 FA | 	rdbyte	local01, local01
318fc     2E 26 0E F2 | 	cmp	local01, #46 wz
31900     34 00 90 5D |  if_ne	jmp	#LR__4905
31904     70 4E 05 F1 | 	add	fp, #112
31908     A7 12 02 FB | 	rdlong	arg01, fp
3190c     24 4E 05 F1 | 	add	fp, #36
31910     A7 14 02 FB | 	rdlong	arg02, fp
31914     4C 4E 85 F1 | 	sub	fp, #76
31918     A7 16 02 FB | 	rdlong	arg03, fp
3191c     48 4E 85 F1 | 	sub	fp, #72
31920     50 AD BF FD | 	call	#_fatfs_cc_st_clust
31924     70 4E 05 F1 | 	add	fp, #112
31928     A7 26 02 FB | 	rdlong	local01, fp
3192c     70 4E 85 F1 | 	sub	fp, #112
31930     03 26 06 F1 | 	add	local01, #3
31934     13 03 48 FC | 	wrbyte	#1, local01
31938                 | LR__4905
31938                 | LR__4906
31938                 | LR__4907
31938                 | LR__4908
31938                 | LR__4909
31938     0C 4E 05 F1 | 	add	fp, #12
3193c     A7 26 0A FB | 	rdlong	local01, fp wz
31940     0C 4E 85 F1 | 	sub	fp, #12
31944     40 00 90 5D |  if_ne	jmp	#LR__4911
31948     10 4E 05 F1 | 	add	fp, #16
3194c     A7 12 02 F6 | 	mov	arg01, fp
31950     10 4E 85 F1 | 	sub	fp, #16
31954     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
31958     0C 4E 05 F1 | 	add	fp, #12
3195c     A7 FA 61 FC | 	wrlong	result1, fp
31960     0C 4E 85 F1 | 	sub	fp, #12
31964     00 FA 0D F2 | 	cmp	result1, #0 wz
31968     1C 00 90 5D |  if_ne	jmp	#LR__4910
3196c     70 4E 05 F1 | 	add	fp, #112
31970     A7 12 02 FB | 	rdlong	arg01, fp
31974     70 4E 85 F1 | 	sub	fp, #112
31978     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
3197c     0C 4E 05 F1 | 	add	fp, #12
31980     A7 FA 61 FC | 	wrlong	result1, fp
31984     0C 4E 85 F1 | 	sub	fp, #12
31988                 | LR__4910
31988                 | LR__4911
31988                 | LR__4912
31988                 | LR__4913
31988                 | ' 					res = sync_fs(fs);
31988                 | ' 				}
31988                 | ' 			}
31988                 | ' 
31988                 | ' 		}
31988                 | ' 		;
31988                 | ' 	}
31988                 | ' 
31988                 | ' 	return res ;
31988     0C 4E 05 F1 | 	add	fp, #12
3198c     A7 FA 01 FB | 	rdlong	result1, fp
31990     0C 4E 85 F1 | 	sub	fp, #12
31994     A7 F0 03 F6 | 	mov	ptra, fp
31998     B2 00 A0 FD | 	call	#popregs_
3199c                 | _fatfs_cc_f_rename_ret
3199c     2D 00 64 FD | 	ret
319a0                 | 
319a0                 | _fatfs_cc_time
319a0     00 4A 05 F6 | 	mov	COUNT_, #0
319a4     A8 00 A0 FD | 	call	#pushregs_
319a8     14 F0 07 F1 | 	add	ptra, #20
319ac     04 4E 05 F1 | 	add	fp, #4
319b0     A7 12 62 FC | 	wrlong	arg01, fp
319b4     04 4E 05 F1 | 	add	fp, #4
319b8     A7 12 02 F6 | 	mov	arg01, fp
319bc     08 4E 85 F1 | 	sub	fp, #8
319c0     00 14 06 F6 | 	mov	arg02, #0
319c4     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
319c8     08 4E 05 F1 | 	add	fp, #8
319cc     A7 FA 01 FB | 	rdlong	result1, fp
319d0     08 4E 05 F1 | 	add	fp, #8
319d4     A7 FA 61 FC | 	wrlong	result1, fp
319d8     0C 4E 85 F1 | 	sub	fp, #12
319dc     A7 FA 09 FB | 	rdlong	result1, fp wz
319e0     04 4E 85 F1 | 	sub	fp, #4
319e4     18 00 90 AD |  if_e	jmp	#LR__4920
319e8     04 4E 05 F1 | 	add	fp, #4
319ec     A7 FA 01 FB | 	rdlong	result1, fp
319f0     0C 4E 05 F1 | 	add	fp, #12
319f4     A7 14 02 FB | 	rdlong	arg02, fp
319f8     10 4E 85 F1 | 	sub	fp, #16
319fc     FD 14 62 FC | 	wrlong	arg02, result1
31a00                 | LR__4920
31a00                 | '         *tp = now;
31a00                 | '     return now;
31a00     10 4E 05 F1 | 	add	fp, #16
31a04     A7 FA 01 FB | 	rdlong	result1, fp
31a08     10 4E 85 F1 | 	sub	fp, #16
31a0c     A7 F0 03 F6 | 	mov	ptra, fp
31a10     B2 00 A0 FD | 	call	#popregs_
31a14                 | _fatfs_cc_time_ret
31a14     2D 00 64 FD | 	ret
31a18                 | 
31a18                 | _fatfs_cc_mktime
31a18     06 4A 05 F6 | 	mov	COUNT_, #6
31a1c     A8 00 A0 FD | 	call	#pushregs_
31a20     09 27 02 F6 | 	mov	local01, arg01
31a24     14 26 06 F1 | 	add	local01, #20
31a28     13 13 02 FB | 	rdlong	arg01, local01
31a2c     14 26 86 F1 | 	sub	local01, #20
31a30     46 12 56 F2 | 	cmps	arg01, #70 wc
31a34                 | '                 return (time_t) -1;
31a34     01 FA 65 C6 |  if_b	neg	result1, #1
31a38     7C 01 90 CD |  if_b	jmp	#LR__4934
31a3c     03 00 00 FF 
31a40     6C 29 06 F6 | 	mov	local02, ##1900
31a44     14 26 06 F1 | 	add	local01, #20
31a48     13 FB 01 FB | 	rdlong	result1, local01
31a4c     FD 28 02 F1 | 	add	local02, result1
31a50     08 26 86 F1 | 	sub	local01, #8
31a54     13 2B 02 FB | 	rdlong	local03, local01
31a58     01 2A 86 F1 | 	sub	local03, #1
31a5c     04 26 06 F1 | 	add	local01, #4
31a60     13 13 02 FB | 	rdlong	arg01, local01
31a64     10 26 86 F1 | 	sub	local01, #16
31a68     02 12 66 F0 | 	shl	arg01, #2
31a6c     02 00 00 FF 
31a70     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
31a74     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31a78     09 FB 01 FB | 	rdlong	result1, arg01
31a7c     FD 2A 02 F1 | 	add	local03, result1
31a80     14 13 02 F6 | 	mov	arg01, local02
31a84     02 00 00 FF 
31a88     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
31a8c     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
31a90     00 FA 0D F2 | 	cmp	result1, #0 wz
31a94     1C 00 90 AD |  if_e	jmp	#LR__4930
31a98     00 2C 06 F6 | 	mov	local04, #0
31a9c     10 26 06 F1 | 	add	local01, #16
31aa0     13 FB 01 FB | 	rdlong	result1, local01
31aa4     10 26 86 F1 | 	sub	local01, #16
31aa8     02 FA 55 F2 | 	cmps	result1, #2 wc
31aac     01 2C 06 36 |  if_ae	mov	local04, #1
31ab0     04 00 90 FD | 	jmp	#LR__4931
31ab4                 | LR__4930
31ab4     00 2C 06 F6 | 	mov	local04, #0
31ab8                 | LR__4931
31ab8     04 26 06 F1 | 	add	local01, #4
31abc     13 FB 01 FB | 	rdlong	result1, local01
31ac0     04 26 86 F1 | 	sub	local01, #4
31ac4     13 2F 02 FB | 	rdlong	local05, local01
31ac8     08 26 06 F1 | 	add	local01, #8
31acc     13 13 02 FB | 	rdlong	arg01, local01
31ad0     07 00 00 FF 
31ad4     10 12 06 FD | 	qmul	arg01, ##3600
31ad8     16 2B 02 F1 | 	add	local03, local04
31adc     FD 2C 02 F6 | 	mov	local04, result1
31ae0     04 2C 66 F0 | 	shl	local04, #4
31ae4     FD 2C 82 F1 | 	sub	local04, result1
31ae8     02 2C 66 F0 | 	shl	local04, #2
31aec     16 2F 02 F1 | 	add	local05, local04
31af0     08 26 86 F1 | 	sub	local01, #8
31af4     18 2C 62 FD | 	getqx	local04
31af8     A8 00 00 FF 
31afc     80 2B 06 FD | 	qmul	local03, ##86400
31b00     16 2F 02 F1 | 	add	local05, local04
31b04     14 2B 02 F6 | 	mov	local03, local02
31b08     03 00 00 FF 
31b0c     B2 2B 86 F1 | 	sub	local03, ##1970
31b10     18 2C 62 FD | 	getqx	local04
31b14     99 F0 00 FF 
31b18     80 2B 06 FD | 	qmul	local03, ##31536000
31b1c     16 2F 02 F1 | 	add	local05, local04
31b20     14 2B 02 F6 | 	mov	local03, local02
31b24     03 00 00 FF 
31b28     B1 2B 86 F1 | 	sub	local03, ##1969
31b2c     15 31 52 F6 | 	abs	local06, local03 wc
31b30     02 30 46 F0 | 	shr	local06, #2
31b34     18 31 82 F6 | 	negc	local06, local06
31b38     03 00 00 FF 
31b3c     D1 29 56 F2 | 	cmps	local02, ##2001 wc
31b40     18 2C 62 FD | 	getqx	local04
31b44     16 2F 02 F1 | 	add	local05, local04
31b48     18 00 90 CD |  if_b	jmp	#LR__4932
31b4c     03 00 00 FF 
31b50     D0 29 86 F1 | 	sub	local02, ##2000
31b54     14 2D 52 F6 | 	abs	local04, local02 wc
31b58     64 2C 16 FD | 	qdiv	local04, #100
31b5c     18 2C 62 FD | 	getqx	local04
31b60     16 31 A2 F3 | 	sumnc	local06, local04
31b64                 | LR__4932
31b64     A8 00 00 FF 
31b68     80 31 06 FD | 	qmul	local06, ##86400
31b6c     18 30 62 FD | 	getqx	local06
31b70     18 2F 02 F1 | 	add	local05, local06
31b74     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
31b78     02 00 00 FF 
31b7c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
31b80     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
31b84     18 2F 02 F1 | 	add	local05, local06
31b88     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
31b8c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31b90     02 00 00 FF 
31b94     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31b98     01 2A 0E F2 | 	cmp	local03, #1 wz
31b9c     14 00 90 5D |  if_ne	jmp	#LR__4933
31ba0     13 13 02 F6 | 	mov	arg01, local01
31ba4     DC 19 B0 FD | 	call	#_fatfs_cc___indst
31ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
31bac     07 00 00 5F 
31bb0     10 2E 86 51 |  if_ne	sub	local05, ##3600
31bb4                 | LR__4933
31bb4                 | '                 s -=  (3600L) ;
31bb4                 | ' 
31bb4                 | '         return s;
31bb4     17 FB 01 F6 | 	mov	result1, local05
31bb8                 | LR__4934
31bb8     A7 F0 03 F6 | 	mov	ptra, fp
31bbc     B2 00 A0 FD | 	call	#popregs_
31bc0                 | _fatfs_cc_mktime_ret
31bc0     2D 00 64 FD | 	ret
31bc4                 | 
31bc4                 | _fatfs_cc__gmtime_r
31bc4     03 4A 05 F6 | 	mov	COUNT_, #3
31bc8     A8 00 A0 FD | 	call	#pushregs_
31bcc     09 27 02 FB | 	rdlong	local01, arg01
31bd0     A8 00 00 FF 
31bd4     80 27 16 FD | 	qdiv	local01, ##86400
31bd8     18 FA 61 FD | 	getqx	result1
31bdc     04 FA 05 F1 | 	add	result1, #4
31be0     07 FA 15 FD | 	qdiv	result1, #7
31be4     18 14 06 F1 | 	add	arg02, #24
31be8     D1 7F 27 FF 
31bec     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
31bf0     D1 7F 27 3F 
31bf4     00 26 86 31 |  if_ae	sub	local01, ##1325376000
31bf8     03 00 00 3F 
31bfc     DC 29 06 36 |  if_ae	mov	local02, ##2012
31c00     03 00 00 CF 
31c04     B2 29 06 C6 |  if_b	mov	local02, ##1970
31c08                 | ' 	  year = 1970;
31c08                 | ' 	}
31c08                 | ' 
31c08                 | ' 	for(;;) {
31c08     19 FA 61 FD | 	getqy	result1
31c0c     0A FB 61 FC | 	wrlong	result1, arg02
31c10     18 14 86 F1 | 	sub	arg02, #24
31c14                 | LR__4940
31c14     14 13 02 F6 | 	mov	arg01, local02
31c18     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
31c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
31c20     42 F1 00 5F 
31c24     00 2B 06 56 |  if_ne	mov	local03, ##31622400
31c28     99 F0 00 AF 
31c2c     80 2B 06 A6 |  if_e	mov	local03, ##31536000
31c30     15 27 12 F2 | 	cmp	local01, local03 wc
31c34                 | ' 	    break;
31c34     01 28 06 31 |  if_ae	add	local02, #1
31c38     15 27 82 31 |  if_ae	sub	local01, local03
31c3c     D4 FF 9F 3D |  if_ae	jmp	#LR__4940
31c40     A8 00 00 FF 
31c44     80 27 16 FD | 	qdiv	local01, ##86400
31c48     14 2B 02 F6 | 	mov	local03, local02
31c4c     03 00 00 FF 
31c50     6C 2B 86 F1 | 	sub	local03, ##1900
31c54     14 14 06 F1 | 	add	arg02, #20
31c58     0A 2B 62 FC | 	wrlong	local03, arg02
31c5c     08 14 06 F1 | 	add	arg02, #8
31c60     14 13 02 F6 | 	mov	arg01, local02
31c64     18 28 62 FD | 	getqx	local02
31c68     0A 29 62 FC | 	wrlong	local02, arg02
31c6c     1C 14 86 F1 | 	sub	arg02, #28
31c70     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
31c74     00 FA 0D F2 | 	cmp	result1, #0 wz
31c78     1D 2A 06 56 |  if_ne	mov	local03, #29
31c7c     1C 2A 06 A6 |  if_e	mov	local03, #28
31c80     02 00 00 FF 
31c84     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
31c88     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
31c8c     02 00 00 FF 
31c90     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
31c94                 | ' 
31c94                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
31c94                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
31c94     00 12 06 F6 | 	mov	arg01, #0
31c98     97 2A 48 FB | 	callpa	#(@LR__4942-@LR__4941)>>2,fcache_load_ptr_
31c9c                 | LR__4941
31c9c     09 2B 02 F6 | 	mov	local03, arg01
31ca0     02 2A 66 F0 | 	shl	local03, #2
31ca4     02 00 00 FF 
31ca8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
31cac     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
31cb0     15 2B 02 FB | 	rdlong	local03, local03
31cb4     15 29 52 F2 | 	cmps	local02, local03 wc
31cb8     02 00 00 FF 
31cbc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
31cc0     2C 00 90 CD |  if_b	jmp	#LR__4943
31cc4     09 2B 02 F6 | 	mov	local03, arg01
31cc8     02 2A 66 F0 | 	shl	local03, #2
31ccc     02 00 00 FF 
31cd0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
31cd4     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
31cd8     15 2B 02 FB | 	rdlong	local03, local03
31cdc     15 29 82 F1 | 	sub	local02, local03
31ce0     01 12 06 F1 | 	add	arg01, #1
31ce4     02 00 00 FF 
31ce8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
31cec     AC FF 9F FD | 	jmp	#LR__4941
31cf0                 | LR__4942
31cf0                 | LR__4943
31cf0     A8 00 00 FF 
31cf4     80 27 16 FD | 	qdiv	local01, ##86400
31cf8     10 14 06 F1 | 	add	arg02, #16
31cfc     0A 13 62 FC | 	wrlong	arg01, arg02
31d00     01 28 06 F1 | 	add	local02, #1
31d04     04 14 86 F1 | 	sub	arg02, #4
31d08     0A 29 62 FC | 	wrlong	local02, arg02
31d0c     19 26 62 FD | 	getqy	local01
31d10     07 00 00 FF 
31d14     10 26 16 FD | 	qdiv	local01, ##3600
31d18     18 2A 62 FD | 	getqx	local03
31d1c     07 00 00 FF 
31d20     10 26 16 FD | 	qdiv	local01, ##3600
31d24     04 14 86 F1 | 	sub	arg02, #4
31d28     0A 2B 62 FC | 	wrlong	local03, arg02
31d2c     19 26 62 FD | 	getqy	local01
31d30     3C 26 16 FD | 	qdiv	local01, #60
31d34     18 2A 62 FD | 	getqx	local03
31d38     3C 26 16 FD | 	qdiv	local01, #60
31d3c     04 14 86 F1 | 	sub	arg02, #4
31d40     0A 2B 62 FC | 	wrlong	local03, arg02
31d44     04 14 86 F1 | 	sub	arg02, #4
31d48                 | '         stm->tm_isdst = 0;
31d48                 | ' 
31d48                 | ' ;
31d48                 | '         return stm;
31d48     0A FB 01 F6 | 	mov	result1, arg02
31d4c     19 2A 62 FD | 	getqy	local03
31d50     0A 2B 62 FC | 	wrlong	local03, arg02
31d54     20 14 06 F1 | 	add	arg02, #32
31d58     0A 01 68 FC | 	wrlong	#0, arg02
31d5c     A7 F0 03 F6 | 	mov	ptra, fp
31d60     B2 00 A0 FD | 	call	#popregs_
31d64                 | _fatfs_cc__gmtime_r_ret
31d64     2D 00 64 FD | 	ret
31d68                 | 
31d68                 | _fatfs_cc__tzset
31d68     9C 01 00 FF 
31d6c     AD 12 06 F6 | 	mov	arg01, ##@LR__5255
31d70     34 00 B0 FD | 	call	#_fatfs_cc_getenv
31d74     FD 12 02 F6 | 	mov	arg01, result1
31d78     02 00 00 FF 
31d7c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31d80     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
31d84     02 00 00 FF 
31d88     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
31d8c     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
31d90     02 00 00 FF 
31d94     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
31d98     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
31d9c     02 00 00 FF 
31da0     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
31da4                 | _fatfs_cc__tzset_ret
31da4     2D 00 64 FD | 	ret
31da8                 | 
31da8                 | _fatfs_cc_getenv
31da8     06 4A 05 F6 | 	mov	COUNT_, #6
31dac     A8 00 A0 FD | 	call	#pushregs_
31db0     09 27 02 F6 | 	mov	local01, arg01
31db4     09 29 02 F6 | 	mov	local02, arg01
31db8     97 06 48 FB | 	callpa	#(@LR__4951-@LR__4950)>>2,fcache_load_ptr_
31dbc                 | LR__4950
31dbc     14 FB C9 FA | 	rdbyte	result1, local02 wz
31dc0     01 28 06 51 |  if_ne	add	local02, #1
31dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__4950
31dc8                 | LR__4951
31dc8     09 29 82 F1 | 	sub	local02, arg01
31dcc     14 FB 01 F6 | 	mov	result1, local02
31dd0     02 00 00 FF 
31dd4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
31dd8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
31ddc     02 00 00 FF 
31de0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
31de4                 | '             return 0;
31de4     00 FA 05 A6 |  if_e	mov	result1, #0
31de8     5C 00 90 AD |  if_e	jmp	#LR__4954
31dec                 | ' 
31dec                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
31dec     02 00 00 FF 
31df0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
31df4     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31df8     02 00 00 FF 
31dfc     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
31e00                 | LR__4952
31e00     15 2D 0A FB | 	rdlong	local04, local03 wz
31e04     3C 00 90 AD |  if_e	jmp	#LR__4953
31e08     16 13 02 F6 | 	mov	arg01, local04
31e0c     13 15 02 F6 | 	mov	arg02, local01
31e10     14 17 02 F6 | 	mov	arg03, local02
31e14     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
31e18     00 FA 0D F2 | 	cmp	result1, #0 wz
31e1c     14 2F 02 A6 |  if_e	mov	local05, local02
31e20     16 2F 02 A1 |  if_e	add	local05, local04
31e24     17 31 C2 AA |  if_e	rdbyte	local06, local05
31e28     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
31e2c                 | ' 			return name+len+1;
31e2c     14 2D 02 A1 |  if_e	add	local04, local02
31e30     01 2C 06 A1 |  if_e	add	local04, #1
31e34     16 FB 01 A6 |  if_e	mov	result1, local04
31e38     0C 00 90 AD |  if_e	jmp	#LR__4954
31e3c     04 2A 06 F1 | 	add	local03, #4
31e40     BC FF 9F FD | 	jmp	#LR__4952
31e44                 | LR__4953
31e44                 | ' 	}
31e44                 | ' 	return 0;
31e44     00 FA 05 F6 | 	mov	result1, #0
31e48                 | LR__4954
31e48     A7 F0 03 F6 | 	mov	ptra, fp
31e4c     B2 00 A0 FD | 	call	#popregs_
31e50                 | _fatfs_cc_getenv_ret
31e50     2D 00 64 FD | 	ret
31e54                 | 
31e54                 | _fatfs_cc__get_fattime
31e54     00 4A 05 F6 | 	mov	COUNT_, #0
31e58     A8 00 A0 FD | 	call	#pushregs_
31e5c     34 F0 07 F1 | 	add	ptra, #52
31e60     00 12 06 F6 | 	mov	arg01, #0
31e64     38 FB BF FD | 	call	#_fatfs_cc_time
31e68     04 4E 05 F1 | 	add	fp, #4
31e6c     A7 FA 61 FC | 	wrlong	result1, fp
31e70     A7 12 02 F6 | 	mov	arg01, fp
31e74     0C 4E 05 F1 | 	add	fp, #12
31e78     A7 14 02 F6 | 	mov	arg02, fp
31e7c     10 4E 85 F1 | 	sub	fp, #16
31e80     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
31e84     24 4E 05 F1 | 	add	fp, #36
31e88     A7 14 02 FB | 	rdlong	arg02, fp
31e8c     50 14 86 F1 | 	sub	arg02, #80
31e90     09 14 66 F0 | 	shl	arg02, #9
31e94     04 4E 85 F1 | 	sub	fp, #4
31e98     A7 FA 01 FB | 	rdlong	result1, fp
31e9c     01 FA 05 F1 | 	add	result1, #1
31ea0     05 FA 65 F0 | 	shl	result1, #5
31ea4     FD 14 42 F5 | 	or	arg02, result1
31ea8     04 4E 85 F1 | 	sub	fp, #4
31eac     A7 FA 01 FB | 	rdlong	result1, fp
31eb0     FD 14 42 F5 | 	or	arg02, result1
31eb4     14 4E 85 F1 | 	sub	fp, #20
31eb8     A7 14 62 FC | 	wrlong	arg02, fp
31ebc     10 4E 05 F1 | 	add	fp, #16
31ec0     A7 14 02 FB | 	rdlong	arg02, fp
31ec4     0B 14 66 F0 | 	shl	arg02, #11
31ec8     04 4E 85 F1 | 	sub	fp, #4
31ecc     A7 FA 01 FB | 	rdlong	result1, fp
31ed0     05 FA 65 F0 | 	shl	result1, #5
31ed4     FD 14 42 F5 | 	or	arg02, result1
31ed8     04 4E 85 F1 | 	sub	fp, #4
31edc     A7 FA 01 FB | 	rdlong	result1, fp
31ee0     FD 14 42 F5 | 	or	arg02, result1
31ee4     04 4E 85 F1 | 	sub	fp, #4
31ee8     A7 14 62 FC | 	wrlong	arg02, fp
31eec                 | ' 
31eec                 | '     now = time(0);
31eec                 | '     _gmtime_r (&now, &date);
31eec                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
31eec                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
31eec                 | '     return (ffdate << 16) | fftime;
31eec     04 4E 85 F1 | 	sub	fp, #4
31ef0     A7 FA 01 FB | 	rdlong	result1, fp
31ef4     10 FA 65 F0 | 	shl	result1, #16
31ef8     08 4E 85 F1 | 	sub	fp, #8
31efc     0A FB 41 F5 | 	or	result1, arg02
31f00     A7 F0 03 F6 | 	mov	ptra, fp
31f04     B2 00 A0 FD | 	call	#popregs_
31f08                 | _fatfs_cc__get_fattime_ret
31f08     2D 00 64 FD | 	ret
31f0c                 | 
31f0c                 | _fatfs_cc_unixtime_0999
31f0c     00 4A 05 F6 | 	mov	COUNT_, #0
31f10     A8 00 A0 FD | 	call	#pushregs_
31f14     34 F0 07 F1 | 	add	ptra, #52
31f18     04 4E 05 F1 | 	add	fp, #4
31f1c     A7 12 62 FC | 	wrlong	arg01, fp
31f20     04 4E 05 F1 | 	add	fp, #4
31f24     A7 14 62 FC | 	wrlong	arg02, fp
31f28     04 4E 85 F1 | 	sub	fp, #4
31f2c     A7 14 02 FB | 	rdlong	arg02, fp
31f30     09 14 46 F0 | 	shr	arg02, #9
31f34     7F 14 06 F5 | 	and	arg02, #127
31f38     50 FA 05 F6 | 	mov	result1, #80
31f3c     0A FB 01 F1 | 	add	result1, arg02
31f40     20 4E 05 F1 | 	add	fp, #32
31f44     A7 FA 61 FC | 	wrlong	result1, fp
31f48     20 4E 85 F1 | 	sub	fp, #32
31f4c     A7 FA 01 FB | 	rdlong	result1, fp
31f50     05 FA 45 F0 | 	shr	result1, #5
31f54     FD FA 41 F8 | 	getnib	result1, result1, #0
31f58     01 FA 85 F1 | 	sub	result1, #1
31f5c     1C 4E 05 F1 | 	add	fp, #28
31f60     A7 FA 61 FC | 	wrlong	result1, fp
31f64     1C 4E 85 F1 | 	sub	fp, #28
31f68     A7 FA 01 FB | 	rdlong	result1, fp
31f6c     1F FA 05 F5 | 	and	result1, #31
31f70     18 4E 05 F1 | 	add	fp, #24
31f74     A7 FA 61 FC | 	wrlong	result1, fp
31f78     14 4E 85 F1 | 	sub	fp, #20
31f7c     A7 FA 01 FB | 	rdlong	result1, fp
31f80     0B FA 45 F0 | 	shr	result1, #11
31f84     1F FA 05 F5 | 	and	result1, #31
31f88     10 4E 05 F1 | 	add	fp, #16
31f8c     A7 FA 61 FC | 	wrlong	result1, fp
31f90     10 4E 85 F1 | 	sub	fp, #16
31f94     A7 FA 01 FB | 	rdlong	result1, fp
31f98     05 FA 45 F0 | 	shr	result1, #5
31f9c     3F FA 05 F5 | 	and	result1, #63
31fa0     0C 4E 05 F1 | 	add	fp, #12
31fa4     A7 FA 61 FC | 	wrlong	result1, fp
31fa8     0C 4E 85 F1 | 	sub	fp, #12
31fac     A7 14 02 FB | 	rdlong	arg02, fp
31fb0     1F 14 06 F5 | 	and	arg02, #31
31fb4     01 14 66 F0 | 	shl	arg02, #1
31fb8     08 4E 05 F1 | 	add	fp, #8
31fbc     A7 14 62 FC | 	wrlong	arg02, fp
31fc0     A7 12 02 F6 | 	mov	arg01, fp
31fc4     10 4E 85 F1 | 	sub	fp, #16
31fc8     4C FA BF FD | 	call	#_fatfs_cc_mktime
31fcc     0C 4E 05 F1 | 	add	fp, #12
31fd0     A7 FA 61 FC | 	wrlong	result1, fp
31fd4                 | ' 
31fd4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
31fd4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
31fd4                 | '     date.tm_mday = (dosdate & 0x1f);
31fd4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
31fd4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
31fd4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
31fd4                 | ' 
31fd4                 | '     t = mktime(&date);
31fd4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31fd4                 | '     return t;
31fd4     0C 4E 85 F1 | 	sub	fp, #12
31fd8     A7 F0 03 F6 | 	mov	ptra, fp
31fdc     B2 00 A0 FD | 	call	#popregs_
31fe0                 | _fatfs_cc_unixtime_0999_ret
31fe0     2D 00 64 FD | 	ret
31fe4                 | 
31fe4                 | _fatfs_cc__set_dos_error_1001
31fe4     09 01 02 F6 | 	mov	_var01, arg01
31fe8                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31fe8                 | '     switch (derr) {
31fe8     14 00 26 F3 | 	fle	_var01, #20
31fec     30 00 62 FD | 	jmprel	_var01
31ff0                 | LR__4960
31ff0     50 00 90 FD | 	jmp	#LR__4961
31ff4     84 00 90 FD | 	jmp	#LR__4975
31ff8     80 00 90 FD | 	jmp	#LR__4976
31ffc     7C 00 90 FD | 	jmp	#LR__4977
32000     48 00 90 FD | 	jmp	#LR__4962
32004     44 00 90 FD | 	jmp	#LR__4963
32008     40 00 90 FD | 	jmp	#LR__4964
3200c     44 00 90 FD | 	jmp	#LR__4965
32010     48 00 90 FD | 	jmp	#LR__4967
32014     54 00 90 FD | 	jmp	#LR__4970
32018     38 00 90 FD | 	jmp	#LR__4966
3201c     4C 00 90 FD | 	jmp	#LR__4971
32020     48 00 90 FD | 	jmp	#LR__4972
32024     44 00 90 FD | 	jmp	#LR__4973
32028     50 00 90 FD | 	jmp	#LR__4978
3202c     4C 00 90 FD | 	jmp	#LR__4978
32030     48 00 90 FD | 	jmp	#LR__4978
32034     2C 00 90 FD | 	jmp	#LR__4968
32038     38 00 90 FD | 	jmp	#LR__4974
3203c     2C 00 90 FD | 	jmp	#LR__4969
32040     38 00 90 FD | 	jmp	#LR__4978
32044                 | LR__4961
32044     00 02 06 F6 | 	mov	_var02, #0
32048                 | '         r = 0;
32048                 | '         break;
32048     34 00 90 FD | 	jmp	#LR__4979
3204c                 | LR__4962
3204c                 | LR__4963
3204c                 | LR__4964
3204c     04 02 06 F6 | 	mov	_var02, #4
32050                 | '         r =  4 ;
32050                 | '         break;
32050     2C 00 90 FD | 	jmp	#LR__4979
32054                 | LR__4965
32054                 | LR__4966
32054     06 02 06 F6 | 	mov	_var02, #6
32058                 | '         r =  6 ;
32058                 | '         break;
32058     24 00 90 FD | 	jmp	#LR__4979
3205c                 | LR__4967
3205c     09 02 06 F6 | 	mov	_var02, #9
32060                 | '         r =  9 ;
32060                 | '         break;
32060     1C 00 90 FD | 	jmp	#LR__4979
32064                 | LR__4968
32064     07 02 06 F6 | 	mov	_var02, #7
32068                 | '         r =  7 ;
32068                 | '         break;
32068     14 00 90 FD | 	jmp	#LR__4979
3206c                 | LR__4969
3206c                 | LR__4970
3206c                 | LR__4971
3206c                 | LR__4972
3206c                 | LR__4973
3206c     0A 02 06 F6 | 	mov	_var02, #10
32070                 | '         r =  10 ;
32070                 | '         break;
32070     0C 00 90 FD | 	jmp	#LR__4979
32074                 | LR__4974
32074     0B 02 06 F6 | 	mov	_var02, #11
32078                 | '         r =  11 ;
32078                 | '         break;
32078     04 00 90 FD | 	jmp	#LR__4979
3207c                 | LR__4975
3207c                 | LR__4976
3207c                 | LR__4977
3207c                 | LR__4978
3207c     0C 02 06 F6 | 	mov	_var02, #12
32080                 | '         r =  12 ;
32080                 | '         break;
32080                 | LR__4979
32080                 | '     }
32080                 | '     return _seterror(r);
32080     00 02 4E F2 | 	cmps	_var02, #0 wz
32084     20 E6 05 F1 | 	add	ptr___system__dat__, #32
32088     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
3208c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
32090     01 FA 65 56 |  if_ne	neg	result1, #1
32094     00 FA 05 A6 |  if_e	mov	result1, #0
32098                 | _fatfs_cc__set_dos_error_1001_ret
32098     2D 00 64 FD | 	ret
3209c                 | 
3209c                 | _fatfs_cc_v_creat
3209c     04 4A 05 F6 | 	mov	COUNT_, #4
320a0     A8 00 A0 FD | 	call	#pushregs_
320a4     09 27 02 F6 | 	mov	local01, arg01
320a8     0A 29 02 F6 | 	mov	local02, arg02
320ac     03 00 00 FF 
320b0     3C 12 06 F6 | 	mov	arg01, ##1596
320b4                 | '     return _gc_alloc(size);
320b4     10 14 06 F6 | 	mov	arg02, #16
320b8     28 5E BF FD | 	call	#__system___gc_doalloc
320bc     FD 2A 0A F6 | 	mov	local03, result1 wz
320c0                 | '       return _seterror( 7 );
320c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
320c4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
320c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
320cc     01 FA 65 A6 |  if_e	neg	result1, #1
320d0     58 00 90 AD |  if_e	jmp	#LR__4981
320d4     15 13 02 F6 | 	mov	arg01, local03
320d8     00 14 06 F6 | 	mov	arg02, #0
320dc     03 00 00 FF 
320e0     3C 16 06 F6 | 	mov	arg03, ##1596
320e4     98 00 A0 FD | 	call	#\builtin_bytefill_
320e8     02 00 00 FF 
320ec     14 2A 06 F1 | 	add	local03, ##1044
320f0     15 13 02 F6 | 	mov	arg01, local03
320f4     02 00 00 FF 
320f8     14 2A 86 F1 | 	sub	local03, ##1044
320fc     14 15 02 F6 | 	mov	arg02, local02
32100     07 16 06 F6 | 	mov	arg03, #7
32104     B4 CC BF FD | 	call	#_fatfs_cc_f_open
32108     FD 2C 0A F6 | 	mov	local04, result1 wz
3210c     14 00 90 AD |  if_e	jmp	#LR__4980
32110     15 13 02 F6 | 	mov	arg01, local03
32114                 | '     return _gc_free(ptr);
32114     D8 5E BF FD | 	call	#__system___gc_free
32118                 | '     free(f);
32118                 | '     return _set_dos_error(r);
32118     16 13 02 F6 | 	mov	arg01, local04
3211c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32120     08 00 90 FD | 	jmp	#LR__4981
32124                 | LR__4980
32124     13 2B 62 FC | 	wrlong	local03, local01
32128                 | '   }
32128                 | '   fil->vfsdata = f;
32128                 | '   return 0;
32128     00 FA 05 F6 | 	mov	result1, #0
3212c                 | LR__4981
3212c     A7 F0 03 F6 | 	mov	ptra, fp
32130     B2 00 A0 FD | 	call	#popregs_
32134                 | _fatfs_cc_v_creat_ret
32134     2D 00 64 FD | 	ret
32138                 | 
32138                 | _fatfs_cc_v_close
32138     02 4A 05 F6 | 	mov	COUNT_, #2
3213c     A8 00 A0 FD | 	call	#pushregs_
32140     09 27 02 FB | 	rdlong	local01, arg01
32144     02 00 00 FF 
32148     14 26 06 F1 | 	add	local01, ##1044
3214c     13 13 02 F6 | 	mov	arg01, local01
32150     02 00 00 FF 
32154     14 26 86 F1 | 	sub	local01, ##1044
32158     DC E3 BF FD | 	call	#_fatfs_cc_f_close
3215c     FD 28 02 F6 | 	mov	local02, result1
32160     13 13 02 F6 | 	mov	arg01, local01
32164                 | '     return _gc_free(ptr);
32164     88 5E BF FD | 	call	#__system___gc_free
32168                 | '     FAT_FIL *f = fil->vfsdata;
32168                 | '     r=f_close(&f->fil);
32168                 | '     free(f);
32168                 | '     return _set_dos_error(r);
32168     14 13 02 F6 | 	mov	arg01, local02
3216c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32170     A7 F0 03 F6 | 	mov	ptra, fp
32174     B2 00 A0 FD | 	call	#popregs_
32178                 | _fatfs_cc_v_close_ret
32178     2D 00 64 FD | 	ret
3217c                 | 
3217c                 | _fatfs_cc_v_opendir
3217c     04 4A 05 F6 | 	mov	COUNT_, #4
32180     A8 00 A0 FD | 	call	#pushregs_
32184     09 27 02 F6 | 	mov	local01, arg01
32188     0A 29 02 F6 | 	mov	local02, arg02
3218c     30 12 06 F6 | 	mov	arg01, #48
32190                 | '     return _gc_alloc(size);
32190     10 14 06 F6 | 	mov	arg02, #16
32194     4C 5D BF FD | 	call	#__system___gc_doalloc
32198     FD 2A 0A F6 | 	mov	local03, result1 wz
3219c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3219c                 | '       return _seterror( 7 );
3219c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
321a0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
321a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
321a8     01 FA 65 A6 |  if_e	neg	result1, #1
321ac     34 00 90 AD |  if_e	jmp	#LR__4991
321b0     14 15 02 F6 | 	mov	arg02, local02
321b4     15 13 02 F6 | 	mov	arg01, local03
321b8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
321bc     FD 2C 0A F6 | 	mov	local04, result1 wz
321c0     14 00 90 AD |  if_e	jmp	#LR__4990
321c4     15 13 02 F6 | 	mov	arg01, local03
321c8                 | '     return _gc_free(ptr);
321c8     24 5E BF FD | 	call	#__system___gc_free
321cc                 | '         free(f);
321cc                 | '         return _set_dos_error(r);
321cc     16 13 02 F6 | 	mov	arg01, local04
321d0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1001
321d4     0C 00 90 FD | 	jmp	#LR__4991
321d8                 | LR__4990
321d8     04 26 06 F1 | 	add	local01, #4
321dc     13 2B 62 FC | 	wrlong	local03, local01
321e0                 | '     }
321e0                 | '     dir->vfsdata = f;
321e0                 | '     return 0;
321e0     00 FA 05 F6 | 	mov	result1, #0
321e4                 | LR__4991
321e4     A7 F0 03 F6 | 	mov	ptra, fp
321e8     B2 00 A0 FD | 	call	#popregs_
321ec                 | _fatfs_cc_v_opendir_ret
321ec     2D 00 64 FD | 	ret
321f0                 | 
321f0                 | _fatfs_cc_v_closedir
321f0     02 4A 05 F6 | 	mov	COUNT_, #2
321f4     A8 00 A0 FD | 	call	#pushregs_
321f8     04 12 06 F1 | 	add	arg01, #4
321fc     09 27 02 FB | 	rdlong	local01, arg01
32200     13 13 02 F6 | 	mov	arg01, local01
32204     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
32208     FD 28 02 F6 | 	mov	local02, result1
3220c     13 13 02 F6 | 	mov	arg01, local01
32210                 | '     return _gc_free(ptr);
32210     DC 5D BF FD | 	call	#__system___gc_free
32214     00 28 0E F2 | 	cmp	local02, #0 wz
32218     14 13 02 56 |  if_ne	mov	arg01, local02
3221c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1001
32220                 | '     return r;
32220     14 FB 01 F6 | 	mov	result1, local02
32224     A7 F0 03 F6 | 	mov	ptra, fp
32228     B2 00 A0 FD | 	call	#popregs_
3222c                 | _fatfs_cc_v_closedir_ret
3222c     2D 00 64 FD | 	ret
32230                 | 
32230                 | _fatfs_cc_v_readdir
32230     01 4A 05 F6 | 	mov	COUNT_, #1
32234     A8 00 A0 FD | 	call	#pushregs_
32238     2C F1 07 F1 | 	add	ptra, #300
3223c     04 4E 05 F1 | 	add	fp, #4
32240     A7 12 62 FC | 	wrlong	arg01, fp
32244     04 4E 05 F1 | 	add	fp, #4
32248     A7 14 62 FC | 	wrlong	arg02, fp
3224c     04 4E 85 F1 | 	sub	fp, #4
32250     A7 16 02 FB | 	rdlong	arg03, fp
32254     04 16 06 F1 | 	add	arg03, #4
32258     0B 13 02 FB | 	rdlong	arg01, arg03
3225c     08 4E 05 F1 | 	add	fp, #8
32260     A7 14 02 F6 | 	mov	arg02, fp
32264     0C 4E 85 F1 | 	sub	fp, #12
32268     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
3226c     28 4F 05 F1 | 	add	fp, #296
32270     A7 FA 61 FC | 	wrlong	result1, fp
32274     28 4F 85 F1 | 	sub	fp, #296
32278     00 FA 0D F2 | 	cmp	result1, #0 wz
3227c     14 00 90 AD |  if_e	jmp	#LR__5000
32280                 | '         return _set_dos_error(r);
32280     28 4F 05 F1 | 	add	fp, #296
32284     A7 12 02 FB | 	rdlong	arg01, fp
32288     28 4F 85 F1 | 	sub	fp, #296
3228c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32290     C4 00 90 FD | 	jmp	#LR__5003
32294                 | LR__5000
32294     28 4E 05 F1 | 	add	fp, #40
32298     A7 16 CA FA | 	rdbyte	arg03, fp wz
3229c     28 4E 85 F1 | 	sub	fp, #40
322a0                 | '         return -1;
322a0     01 FA 65 A6 |  if_e	neg	result1, #1
322a4     B0 00 90 AD |  if_e	jmp	#LR__5003
322a8     08 4E 05 F1 | 	add	fp, #8
322ac     A7 12 02 FB | 	rdlong	arg01, fp
322b0     20 4E 05 F1 | 	add	fp, #32
322b4     A7 14 02 F6 | 	mov	arg02, fp
322b8     28 4E 85 F1 | 	sub	fp, #40
322bc     3F 16 06 F6 | 	mov	arg03, #63
322c0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
322c4     08 4E 05 F1 | 	add	fp, #8
322c8     A7 16 02 FB | 	rdlong	arg03, fp
322cc     3F 16 06 F1 | 	add	arg03, #63
322d0     0B 01 48 FC | 	wrbyte	#0, arg03
322d4     0C 4E 05 F1 | 	add	fp, #12
322d8     A7 16 C2 FA | 	rdbyte	arg03, fp
322dc     14 4E 85 F1 | 	sub	fp, #20
322e0     10 16 CE F7 | 	test	arg03, #16 wz
322e4     18 00 90 AD |  if_e	jmp	#LR__5001
322e8     08 4E 05 F1 | 	add	fp, #8
322ec     A7 16 02 FB | 	rdlong	arg03, fp
322f0     08 4E 85 F1 | 	sub	fp, #8
322f4     50 16 06 F1 | 	add	arg03, #80
322f8     0B 03 48 FC | 	wrbyte	#1, arg03
322fc     14 00 90 FD | 	jmp	#LR__5002
32300                 | LR__5001
32300     08 4E 05 F1 | 	add	fp, #8
32304     A7 16 02 FB | 	rdlong	arg03, fp
32308     08 4E 85 F1 | 	sub	fp, #8
3230c     50 16 06 F1 | 	add	arg03, #80
32310     0B 01 48 FC | 	wrbyte	#0, arg03
32314                 | LR__5002
32314     08 4E 05 F1 | 	add	fp, #8
32318     A7 16 02 FB | 	rdlong	arg03, fp
3231c     04 4E 05 F1 | 	add	fp, #4
32320     A7 14 02 FB | 	rdlong	arg02, fp
32324     48 16 06 F1 | 	add	arg03, #72
32328     0B 15 62 FC | 	wrlong	arg02, arg03
3232c     04 4E 85 F1 | 	sub	fp, #4
32330     A7 26 02 FB | 	rdlong	local01, fp
32334     08 4E 05 F1 | 	add	fp, #8
32338     A7 12 E2 FA | 	rdword	arg01, fp
3233c     02 4E 05 F1 | 	add	fp, #2
32340     A7 14 E2 FA | 	rdword	arg02, fp
32344     12 4E 85 F1 | 	sub	fp, #18
32348     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0999
3234c     4C 26 06 F1 | 	add	local01, #76
32350     13 FB 61 FC | 	wrlong	result1, local01
32354                 | '         ent->d_type =  (0) ;
32354                 | '     }
32354                 | '     ent->d_size = finfo.fsize;
32354                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
32354                 | '     return 0;
32354     00 FA 05 F6 | 	mov	result1, #0
32358                 | LR__5003
32358     A7 F0 03 F6 | 	mov	ptra, fp
3235c     B2 00 A0 FD | 	call	#popregs_
32360                 | _fatfs_cc_v_readdir_ret
32360     2D 00 64 FD | 	ret
32364                 | 
32364                 | _fatfs_cc_v_stat
32364     03 4A 05 F6 | 	mov	COUNT_, #3
32368     A8 00 A0 FD | 	call	#pushregs_
3236c     30 F1 07 F1 | 	add	ptra, #304
32370     04 4E 05 F1 | 	add	fp, #4
32374     A7 12 62 FC | 	wrlong	arg01, fp
32378     04 4E 05 F1 | 	add	fp, #4
3237c     A7 14 62 FC | 	wrlong	arg02, fp
32380     08 4E 85 F1 | 	sub	fp, #8
32384     0A 13 02 F6 | 	mov	arg01, arg02
32388     00 14 06 F6 | 	mov	arg02, #0
3238c     30 16 06 F6 | 	mov	arg03, #48
32390     98 00 A0 FD | 	call	#\builtin_bytefill_
32394     04 4E 05 F1 | 	add	fp, #4
32398     A7 FA 01 FB | 	rdlong	result1, fp
3239c     04 4E 85 F1 | 	sub	fp, #4
323a0     FD FA C9 FA | 	rdbyte	result1, result1 wz
323a4     2C 00 90 AD |  if_e	jmp	#LR__5010
323a8     04 4E 05 F1 | 	add	fp, #4
323ac     A7 FA 01 FB | 	rdlong	result1, fp
323b0     04 4E 85 F1 | 	sub	fp, #4
323b4     FD FA C1 FA | 	rdbyte	result1, result1
323b8     2E FA 0D F2 | 	cmp	result1, #46 wz
323bc     04 4E 05 A1 |  if_e	add	fp, #4
323c0     A7 26 02 AB |  if_e	rdlong	local01, fp
323c4     04 4E 85 A1 |  if_e	sub	fp, #4
323c8     01 26 06 A1 |  if_e	add	local01, #1
323cc     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
323d0     18 00 90 5D |  if_ne	jmp	#LR__5011
323d4                 | LR__5010
323d4     18 4E 05 F1 | 	add	fp, #24
323d8     A7 20 48 FC | 	wrbyte	#16, fp
323dc     0C 4E 85 F1 | 	sub	fp, #12
323e0     A7 00 68 FC | 	wrlong	#0, fp
323e4     0C 4E 85 F1 | 	sub	fp, #12
323e8     24 00 90 FD | 	jmp	#LR__5012
323ec                 | LR__5011
323ec     04 4E 05 F1 | 	add	fp, #4
323f0     A7 12 02 FB | 	rdlong	arg01, fp
323f4     0C 4E 05 F1 | 	add	fp, #12
323f8     A7 14 02 F6 | 	mov	arg02, fp
323fc     10 4E 85 F1 | 	sub	fp, #16
32400     AC EB BF FD | 	call	#_fatfs_cc_f_stat
32404     0C 4E 05 F1 | 	add	fp, #12
32408     A7 FA 61 FC | 	wrlong	result1, fp
3240c     0C 4E 85 F1 | 	sub	fp, #12
32410                 | LR__5012
32410     0C 4E 05 F1 | 	add	fp, #12
32414     A7 28 0A FB | 	rdlong	local02, fp wz
32418     0C 4E 85 F1 | 	sub	fp, #12
3241c     14 00 90 AD |  if_e	jmp	#LR__5013
32420                 | '         return _set_dos_error(r);
32420     0C 4E 05 F1 | 	add	fp, #12
32424     A7 12 02 FB | 	rdlong	arg01, fp
32428     0C 4E 85 F1 | 	sub	fp, #12
3242c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32430     14 01 90 FD | 	jmp	#LR__5014
32434                 | LR__5013
32434     2C 4F 05 F1 | 	add	fp, #300
32438     A7 48 6A FC | 	wrlong	#292, fp
3243c     14 4F 85 F1 | 	sub	fp, #276
32440     A7 2A C2 FA | 	rdbyte	local03, fp
32444     18 4E 85 F1 | 	sub	fp, #24
32448     01 2A CE F7 | 	test	local03, #1 wz
3244c     2C 4F 05 A1 |  if_e	add	fp, #300
32450     A7 2A 02 AB |  if_e	rdlong	local03, fp
32454     92 2A 46 A5 |  if_e	or	local03, #146
32458     A7 2A 62 AC |  if_e	wrlong	local03, fp
3245c     2C 4F 85 A1 |  if_e	sub	fp, #300
32460     18 4E 05 F1 | 	add	fp, #24
32464     A7 2A C2 FA | 	rdbyte	local03, fp
32468     18 4E 85 F1 | 	sub	fp, #24
3246c     10 2A CE F7 | 	test	local03, #16 wz
32470     2C 4F 05 51 |  if_ne	add	fp, #300
32474     A7 2A 02 5B |  if_ne	rdlong	local03, fp
32478     08 00 00 5F 
3247c     49 2A 46 55 |  if_ne	or	local03, ##4169
32480     A7 2A 62 5C |  if_ne	wrlong	local03, fp
32484     2C 4F 85 51 |  if_ne	sub	fp, #300
32488     08 4E 05 F1 | 	add	fp, #8
3248c     A7 2A 02 FB | 	rdlong	local03, fp
32490     24 4F 05 F1 | 	add	fp, #292
32494     A7 28 02 FB | 	rdlong	local02, fp
32498     08 2A 06 F1 | 	add	local03, #8
3249c     15 29 62 FC | 	wrlong	local02, local03
324a0     24 4F 85 F1 | 	sub	fp, #292
324a4     A7 2A 02 FB | 	rdlong	local03, fp
324a8     0C 2A 06 F1 | 	add	local03, #12
324ac     15 03 68 FC | 	wrlong	#1, local03
324b0     A7 2A 02 FB | 	rdlong	local03, fp
324b4     08 4E 05 F1 | 	add	fp, #8
324b8     A7 28 02 FB | 	rdlong	local02, fp
324bc     18 2A 06 F1 | 	add	local03, #24
324c0     15 29 62 FC | 	wrlong	local02, local03
324c4     08 4E 85 F1 | 	sub	fp, #8
324c8     A7 2A 02 FB | 	rdlong	local03, fp
324cc     1C 2A 06 F1 | 	add	local03, #28
324d0     01 00 80 FF 
324d4     15 01 68 FC | 	wrlong	##512, local03
324d8     A7 28 02 FB | 	rdlong	local02, fp
324dc     14 2B 02 F6 | 	mov	local03, local02
324e0     18 28 06 F1 | 	add	local02, #24
324e4     14 29 02 FB | 	rdlong	local02, local02
324e8     FF 29 06 F1 | 	add	local02, #511
324ec     14 29 52 F6 | 	abs	local02, local02 wc
324f0     09 28 46 F0 | 	shr	local02, #9
324f4     14 29 82 F6 | 	negc	local02, local02
324f8     20 2A 06 F1 | 	add	local03, #32
324fc     15 29 62 FC | 	wrlong	local02, local03
32500     A7 28 02 FB | 	rdlong	local02, fp
32504     14 2B 02 F6 | 	mov	local03, local02
32508     14 27 02 F6 | 	mov	local01, local02
3250c     0C 4E 05 F1 | 	add	fp, #12
32510     A7 12 E2 FA | 	rdword	arg01, fp
32514     02 4E 05 F1 | 	add	fp, #2
32518     A7 14 E2 FA | 	rdword	arg02, fp
3251c     16 4E 85 F1 | 	sub	fp, #22
32520     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0999
32524     2C 26 06 F1 | 	add	local01, #44
32528     13 FB 61 FC | 	wrlong	result1, local01
3252c     28 28 06 F1 | 	add	local02, #40
32530     14 FB 61 FC | 	wrlong	result1, local02
32534     24 2A 06 F1 | 	add	local03, #36
32538     15 FB 61 FC | 	wrlong	result1, local03
3253c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
3253c                 | '     }
3253c                 | '     buf->st_mode = mode;
3253c                 | '     buf->st_nlink = 1;
3253c                 | '     buf->st_size = finfo.fsize;
3253c                 | '     buf->st_blksize = 512;
3253c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
3253c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
3253c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3253c                 | '     return r;
3253c     0C 4E 05 F1 | 	add	fp, #12
32540     A7 FA 01 FB | 	rdlong	result1, fp
32544     0C 4E 85 F1 | 	sub	fp, #12
32548                 | LR__5014
32548     A7 F0 03 F6 | 	mov	ptra, fp
3254c     B2 00 A0 FD | 	call	#popregs_
32550                 | _fatfs_cc_v_stat_ret
32550     2D 00 64 FD | 	ret
32554                 | 
32554                 | _fatfs_cc_v_read
32554     00 4A 05 F6 | 	mov	COUNT_, #0
32558     A8 00 A0 FD | 	call	#pushregs_
3255c     1C F0 07 F1 | 	add	ptra, #28
32560     04 4E 05 F1 | 	add	fp, #4
32564     A7 12 62 FC | 	wrlong	arg01, fp
32568     04 4E 05 F1 | 	add	fp, #4
3256c     A7 14 62 FC | 	wrlong	arg02, fp
32570     04 4E 05 F1 | 	add	fp, #4
32574     A7 16 62 FC | 	wrlong	arg03, fp
32578     08 4E 85 F1 | 	sub	fp, #8
3257c     A7 12 02 FB | 	rdlong	arg01, fp
32580     09 13 0A FB | 	rdlong	arg01, arg01 wz
32584     0C 4E 05 F1 | 	add	fp, #12
32588     A7 12 62 FC | 	wrlong	arg01, fp
3258c     10 4E 85 F1 | 	sub	fp, #16
32590                 | '         return _seterror( 5 );
32590     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32594     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
32598     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3259c     01 FA 65 A6 |  if_e	neg	result1, #1
325a0     B8 00 90 AD |  if_e	jmp	#LR__5022
325a4     10 4E 05 F1 | 	add	fp, #16
325a8     A7 12 02 FB | 	rdlong	arg01, fp
325ac     02 00 00 FF 
325b0     14 12 06 F1 | 	add	arg01, ##1044
325b4     08 4E 85 F1 | 	sub	fp, #8
325b8     A7 14 02 FB | 	rdlong	arg02, fp
325bc     04 4E 05 F1 | 	add	fp, #4
325c0     A7 16 02 FB | 	rdlong	arg03, fp
325c4     0C 4E 05 F1 | 	add	fp, #12
325c8     A7 18 02 F6 | 	mov	arg04, fp
325cc     18 4E 85 F1 | 	sub	fp, #24
325d0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
325d4     14 4E 05 F1 | 	add	fp, #20
325d8     A7 FA 61 FC | 	wrlong	result1, fp
325dc     14 4E 85 F1 | 	sub	fp, #20
325e0     00 FA 0D F2 | 	cmp	result1, #0 wz
325e4     34 00 90 AD |  if_e	jmp	#LR__5020
325e8     04 4E 05 F1 | 	add	fp, #4
325ec     A7 18 02 FB | 	rdlong	arg04, fp
325f0     0C 17 02 F6 | 	mov	arg03, arg04
325f4     08 18 06 F1 | 	add	arg04, #8
325f8     0C 19 02 FB | 	rdlong	arg04, arg04
325fc     20 18 46 F5 | 	or	arg04, #32
32600     08 16 06 F1 | 	add	arg03, #8
32604     0B 19 62 FC | 	wrlong	arg04, arg03
32608                 | '         fil->state |=  (0x20) ;
32608                 | '         return _set_dos_error(r);
32608     10 4E 05 F1 | 	add	fp, #16
3260c     A7 12 02 FB | 	rdlong	arg01, fp
32610     14 4E 85 F1 | 	sub	fp, #20
32614     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32618     40 00 90 FD | 	jmp	#LR__5022
3261c                 | LR__5020
3261c     18 4E 05 F1 | 	add	fp, #24
32620     A7 FA 09 FB | 	rdlong	result1, fp wz
32624     18 4E 85 F1 | 	sub	fp, #24
32628     24 00 90 5D |  if_ne	jmp	#LR__5021
3262c     04 4E 05 F1 | 	add	fp, #4
32630     A7 FA 01 FB | 	rdlong	result1, fp
32634     FD 18 02 F6 | 	mov	arg04, result1
32638     04 4E 85 F1 | 	sub	fp, #4
3263c     08 FA 05 F1 | 	add	result1, #8
32640     FD FA 01 FB | 	rdlong	result1, result1
32644     10 FA 45 F5 | 	or	result1, #16
32648     08 18 06 F1 | 	add	arg04, #8
3264c     0C FB 61 FC | 	wrlong	result1, arg04
32650                 | LR__5021
32650                 | '         fil->state |=  (0x10) ;
32650                 | '     }
32650                 | '     return x;
32650     18 4E 05 F1 | 	add	fp, #24
32654     A7 FA 01 FB | 	rdlong	result1, fp
32658     18 4E 85 F1 | 	sub	fp, #24
3265c                 | LR__5022
3265c     A7 F0 03 F6 | 	mov	ptra, fp
32660     B2 00 A0 FD | 	call	#popregs_
32664                 | _fatfs_cc_v_read_ret
32664     2D 00 64 FD | 	ret
32668                 | 
32668                 | _fatfs_cc_v_write
32668     00 4A 05 F6 | 	mov	COUNT_, #0
3266c     A8 00 A0 FD | 	call	#pushregs_
32670     1C F0 07 F1 | 	add	ptra, #28
32674     04 4E 05 F1 | 	add	fp, #4
32678     A7 12 62 FC | 	wrlong	arg01, fp
3267c     04 4E 05 F1 | 	add	fp, #4
32680     A7 14 62 FC | 	wrlong	arg02, fp
32684     04 4E 05 F1 | 	add	fp, #4
32688     A7 16 62 FC | 	wrlong	arg03, fp
3268c     08 4E 85 F1 | 	sub	fp, #8
32690     A7 12 02 FB | 	rdlong	arg01, fp
32694     09 13 0A FB | 	rdlong	arg01, arg01 wz
32698     0C 4E 05 F1 | 	add	fp, #12
3269c     A7 12 62 FC | 	wrlong	arg01, fp
326a0     10 4E 85 F1 | 	sub	fp, #16
326a4                 | '         return _seterror( 5 );
326a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
326a8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
326ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
326b0     01 FA 65 A6 |  if_e	neg	result1, #1
326b4     84 00 90 AD |  if_e	jmp	#LR__5031
326b8     10 4E 05 F1 | 	add	fp, #16
326bc     A7 12 02 FB | 	rdlong	arg01, fp
326c0     02 00 00 FF 
326c4     14 12 06 F1 | 	add	arg01, ##1044
326c8     08 4E 85 F1 | 	sub	fp, #8
326cc     A7 14 02 FB | 	rdlong	arg02, fp
326d0     04 4E 05 F1 | 	add	fp, #4
326d4     A7 16 02 FB | 	rdlong	arg03, fp
326d8     0C 4E 05 F1 | 	add	fp, #12
326dc     A7 18 02 F6 | 	mov	arg04, fp
326e0     18 4E 85 F1 | 	sub	fp, #24
326e4     4C D4 BF FD | 	call	#_fatfs_cc_f_write
326e8     14 4E 05 F1 | 	add	fp, #20
326ec     A7 FA 61 FC | 	wrlong	result1, fp
326f0     14 4E 85 F1 | 	sub	fp, #20
326f4     00 FA 0D F2 | 	cmp	result1, #0 wz
326f8     34 00 90 AD |  if_e	jmp	#LR__5030
326fc     04 4E 05 F1 | 	add	fp, #4
32700     A7 18 02 FB | 	rdlong	arg04, fp
32704     0C 17 02 F6 | 	mov	arg03, arg04
32708     08 18 06 F1 | 	add	arg04, #8
3270c     0C 19 02 FB | 	rdlong	arg04, arg04
32710     20 18 46 F5 | 	or	arg04, #32
32714     08 16 06 F1 | 	add	arg03, #8
32718     0B 19 62 FC | 	wrlong	arg04, arg03
3271c                 | '         fil->state |=  (0x20) ;
3271c                 | '         return _set_dos_error(r);
3271c     10 4E 05 F1 | 	add	fp, #16
32720     A7 12 02 FB | 	rdlong	arg01, fp
32724     14 4E 85 F1 | 	sub	fp, #20
32728     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
3272c     0C 00 90 FD | 	jmp	#LR__5031
32730                 | LR__5030
32730                 | '     }
32730                 | '     return x;
32730     18 4E 05 F1 | 	add	fp, #24
32734     A7 FA 01 FB | 	rdlong	result1, fp
32738     18 4E 85 F1 | 	sub	fp, #24
3273c                 | LR__5031
3273c     A7 F0 03 F6 | 	mov	ptra, fp
32740     B2 00 A0 FD | 	call	#popregs_
32744                 | _fatfs_cc_v_write_ret
32744     2D 00 64 FD | 	ret
32748                 | 
32748                 | _fatfs_cc_v_lseek
32748     04 4A 05 F6 | 	mov	COUNT_, #4
3274c     A8 00 A0 FD | 	call	#pushregs_
32750     0A 27 02 F6 | 	mov	local01, arg02
32754     0B 29 02 F6 | 	mov	local02, arg03
32758     09 2B 02 FB | 	rdlong	local03, arg01
3275c     02 00 00 FF 
32760     14 2A 0E F1 | 	add	local03, ##1044 wz
32764                 | '         return _seterror( 5 );
32764     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32768     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3276c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
32770     01 FA 65 A6 |  if_e	neg	result1, #1
32774     4C 00 90 AD |  if_e	jmp	#LR__5042
32778     00 28 0E F2 | 	cmp	local02, #0 wz
3277c     24 00 90 AD |  if_e	jmp	#LR__5040
32780     01 28 0E F2 | 	cmp	local02, #1 wz
32784     14 2A 06 A1 |  if_e	add	local03, #20
32788     15 2D 02 AB |  if_e	rdlong	local04, local03
3278c     14 2A 86 A1 |  if_e	sub	local03, #20
32790     16 27 02 A1 |  if_e	add	local01, local04
32794     0C 2A 06 51 |  if_ne	add	local03, #12
32798     15 2D 02 5B |  if_ne	rdlong	local04, local03
3279c     0C 2A 86 51 |  if_ne	sub	local03, #12
327a0     16 27 02 51 |  if_ne	add	local01, local04
327a4                 | LR__5040
327a4     13 15 02 F6 | 	mov	arg02, local01
327a8     15 13 02 F6 | 	mov	arg01, local03
327ac     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
327b0     FD 12 0A F6 | 	mov	arg01, result1 wz
327b4     08 00 90 AD |  if_e	jmp	#LR__5041
327b8                 | '         return _set_dos_error(result);
327b8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
327bc     04 00 90 FD | 	jmp	#LR__5042
327c0                 | LR__5041
327c0                 | '     }
327c0                 | '     return offset;
327c0     13 FB 01 F6 | 	mov	result1, local01
327c4                 | LR__5042
327c4     A7 F0 03 F6 | 	mov	ptra, fp
327c8     B2 00 A0 FD | 	call	#popregs_
327cc                 | _fatfs_cc_v_lseek_ret
327cc     2D 00 64 FD | 	ret
327d0                 | 
327d0                 | _fatfs_cc_v_ioctl
327d0                 | ' {
327d0                 | '     return _seterror( 10 );
327d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
327d4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
327d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
327dc     01 FA 65 F6 | 	neg	result1, #1
327e0                 | _fatfs_cc_v_ioctl_ret
327e0     2D 00 64 FD | 	ret
327e4                 | 
327e4                 | _fatfs_cc_v_mkdir
327e4     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
327e8     FD 12 02 F6 | 	mov	arg01, result1
327ec                 | ' 
327ec                 | '     r = f_mkdir(name);
327ec                 | '     return _set_dos_error(r);
327ec     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
327f0                 | _fatfs_cc_v_mkdir_ret
327f0     2D 00 64 FD | 	ret
327f4                 | 
327f4                 | _fatfs_cc_v_remove
327f4     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
327f8     FD 12 02 F6 | 	mov	arg01, result1
327fc                 | ' 
327fc                 | '     r = f_unlink(name);
327fc                 | '     return _set_dos_error(r);
327fc     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32800                 | _fatfs_cc_v_remove_ret
32800     2D 00 64 FD | 	ret
32804                 | 
32804                 | _fatfs_cc_v_rmdir
32804     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
32808     FD 12 02 F6 | 	mov	arg01, result1
3280c                 | ' 
3280c                 | '     r = f_unlink(name);
3280c                 | '     return _set_dos_error(r);
3280c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32810                 | _fatfs_cc_v_rmdir_ret
32810     2D 00 64 FD | 	ret
32814                 | 
32814                 | _fatfs_cc_v_rename
32814     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
32818     FD 12 02 F6 | 	mov	arg01, result1
3281c                 | '     return _set_dos_error(r);
3281c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32820                 | _fatfs_cc_v_rename_ret
32820     2D 00 64 FD | 	ret
32824                 | 
32824                 | _fatfs_cc_v_open
32824     07 4A 05 F6 | 	mov	COUNT_, #7
32828     A8 00 A0 FD | 	call	#pushregs_
3282c     09 27 02 F6 | 	mov	local01, arg01
32830     0A 29 02 F6 | 	mov	local02, arg02
32834     0B 2B 02 F6 | 	mov	local03, arg03
32838     03 00 00 FF 
3283c     3C 12 06 F6 | 	mov	arg01, ##1596
32840                 | '     return _gc_alloc(size);
32840     10 14 06 F6 | 	mov	arg02, #16
32844     9C 56 BF FD | 	call	#__system___gc_doalloc
32848     FD 2C 0A F6 | 	mov	local04, result1 wz
3284c                 | '       return _seterror( 7 );
3284c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32850     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
32854     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
32858     01 FA 65 A6 |  if_e	neg	result1, #1
3285c     98 00 90 AD |  if_e	jmp	#LR__5056
32860     16 13 02 F6 | 	mov	arg01, local04
32864     00 14 06 F6 | 	mov	arg02, #0
32868     03 00 00 FF 
3286c     3C 16 06 F6 | 	mov	arg03, ##1596
32870     98 00 A0 FD | 	call	#\builtin_bytefill_
32874                 | '   switch (flags & 3) {
32874     15 2F 02 F6 | 	mov	local05, local03
32878     03 2E 0E F5 | 	and	local05, #3 wz
3287c     0C 00 90 AD |  if_e	jmp	#LR__5050
32880     01 2E 0E F2 | 	cmp	local05, #1 wz
32884     0C 00 90 AD |  if_e	jmp	#LR__5051
32888     10 00 90 FD | 	jmp	#LR__5052
3288c                 | LR__5050
3288c     01 30 06 F6 | 	mov	local06, #1
32890                 | '       fs_flags =  0x01 ;
32890                 | '       break;
32890     0C 00 90 FD | 	jmp	#LR__5053
32894                 | LR__5051
32894     02 30 06 F6 | 	mov	local06, #2
32898                 | '       fs_flags =  0x02 ;
32898                 | '       break;
32898     04 00 90 FD | 	jmp	#LR__5053
3289c                 | LR__5052
3289c     03 30 06 F6 | 	mov	local06, #3
328a0                 | '       fs_flags =  0x01  |  0x02 ;
328a0                 | '       break;
328a0                 | LR__5053
328a0     08 2A CE F7 | 	test	local03, #8 wz
328a4     18 30 46 55 |  if_ne	or	local06, #24
328a8     08 00 90 5D |  if_ne	jmp	#LR__5054
328ac     20 2A CE F7 | 	test	local03, #32 wz
328b0     30 30 46 55 |  if_ne	or	local06, #48
328b4                 | LR__5054
328b4     02 00 00 FF 
328b8     14 2C 06 F1 | 	add	local04, ##1044
328bc     16 13 02 F6 | 	mov	arg01, local04
328c0     02 00 00 FF 
328c4     14 2C 86 F1 | 	sub	local04, ##1044
328c8     14 15 02 F6 | 	mov	arg02, local02
328cc     18 17 02 F6 | 	mov	arg03, local06
328d0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
328d4     FD 32 0A F6 | 	mov	local07, result1 wz
328d8     14 00 90 AD |  if_e	jmp	#LR__5055
328dc     16 13 02 F6 | 	mov	arg01, local04
328e0                 | '     return _gc_free(ptr);
328e0     0C 57 BF FD | 	call	#__system___gc_free
328e4                 | '     free(f);
328e4                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
328e4                 | '     return _set_dos_error(r);
328e4     19 13 02 F6 | 	mov	arg01, local07
328e8     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
328ec     08 00 90 FD | 	jmp	#LR__5056
328f0                 | LR__5055
328f0     13 2D 62 FC | 	wrlong	local04, local01
328f4                 | '   }
328f4                 | '   fil->vfsdata = f;
328f4                 | '   return 0;
328f4     00 FA 05 F6 | 	mov	result1, #0
328f8                 | LR__5056
328f8     A7 F0 03 F6 | 	mov	ptra, fp
328fc     B2 00 A0 FD | 	call	#popregs_
32900                 | _fatfs_cc_v_open_ret
32900     2D 00 64 FD | 	ret
32904                 | 
32904                 | _fatfs_cc_v_flush
32904     09 13 02 FB | 	rdlong	arg01, arg01
32908     02 00 00 FF 
3290c     14 12 0E F1 | 	add	arg01, ##1044 wz
32910                 | '         return _seterror( 5 );
32910     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
32914     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
32918     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3291c     01 FA 65 A6 |  if_e	neg	result1, #1
32920     0C 00 90 AD |  if_e	jmp	#LR__5060
32924     00 DA BF FD | 	call	#_fatfs_cc_f_sync
32928     FD 12 02 F6 | 	mov	arg01, result1
3292c                 | '     }
3292c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3292c                 | '     result = f_sync(f);
3292c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3292c                 | '     return _set_dos_error(result);
3292c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
32930                 | LR__5060
32930                 | _fatfs_cc_v_flush_ret
32930     2D 00 64 FD | 	ret
32934                 | 
32934                 | _fatfs_cc_v_init
32934                 | ' {
32934                 | '     return 0;
32934     00 FA 05 F6 | 	mov	result1, #0
32938                 | _fatfs_cc_v_init_ret
32938     2D 00 64 FD | 	ret
3293c                 | 
3293c                 | _fatfs_cc_v_deinit
3293c     9C 01 00 FF 
32940     B0 14 06 F6 | 	mov	arg02, ##@LR__5256
32944     00 12 06 F6 | 	mov	arg01, #0
32948     00 16 06 F6 | 	mov	arg03, #0
3294c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
32950     01 00 00 FF 
32954     08 E4 05 F1 | 	add	objptr, ##520
32958     F2 12 02 FB | 	rdlong	arg01, objptr
3295c     04 E4 05 F1 | 	add	objptr, #4
32960     F2 14 02 FB | 	rdlong	arg02, objptr
32964     01 00 00 FF 
32968     0C E4 85 F1 | 	sub	objptr, ##524
3296c     F0 3D BF FD | 	call	#__system___freepins
32970                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
32970                 | '     _freepins(f_pinmask);
32970                 | '     return 0;
32970     00 FA 05 F6 | 	mov	result1, #0
32974                 | _fatfs_cc_v_deinit_ret
32974     2D 00 64 FD | 	ret
32978                 | 
32978                 | _fatfs_cc_get_vfs
32978     01 4A 05 F6 | 	mov	COUNT_, #1
3297c     A8 00 A0 FD | 	call	#pushregs_
32980     09 27 02 F6 | 	mov	local01, arg01
32984     50 12 06 F6 | 	mov	arg01, #80
32988     28 55 BF FD | 	call	#__system___gc_alloc_managed
3298c     FD 12 02 F6 | 	mov	arg01, result1
32990     F2 FA 01 F6 | 	mov	result1, objptr
32994     00 20 05 FF 
32998     00 FA 45 F5 | 	or	result1, ##171966464
3299c     09 FB 61 FC | 	wrlong	result1, arg01
329a0     F2 FA 01 F6 | 	mov	result1, objptr
329a4     00 28 05 FF 
329a8     00 FA 45 F5 | 	or	result1, ##173015040
329ac     04 12 06 F1 | 	add	arg01, #4
329b0     09 FB 61 FC | 	wrlong	result1, arg01
329b4     F2 FA 01 F6 | 	mov	result1, objptr
329b8     00 30 05 FF 
329bc     00 FA 45 F5 | 	or	result1, ##174063616
329c0     04 12 06 F1 | 	add	arg01, #4
329c4     09 FB 61 FC | 	wrlong	result1, arg01
329c8     F2 FA 01 F6 | 	mov	result1, objptr
329cc     00 38 05 FF 
329d0     00 FA 45 F5 | 	or	result1, ##175112192
329d4     04 12 06 F1 | 	add	arg01, #4
329d8     09 FB 61 FC | 	wrlong	result1, arg01
329dc     F2 FA 01 F6 | 	mov	result1, objptr
329e0     00 40 05 FF 
329e4     00 FA 45 F5 | 	or	result1, ##176160768
329e8     04 12 06 F1 | 	add	arg01, #4
329ec     09 FB 61 FC | 	wrlong	result1, arg01
329f0     04 12 06 F1 | 	add	arg01, #4
329f4     09 01 68 FC | 	wrlong	#0, arg01
329f8     04 12 06 F1 | 	add	arg01, #4
329fc     09 27 62 FC | 	wrlong	local01, arg01
32a00     04 12 06 F1 | 	add	arg01, #4
32a04     09 01 68 FC | 	wrlong	#0, arg01
32a08     F2 FA 01 F6 | 	mov	result1, objptr
32a0c     00 48 05 FF 
32a10     00 FA 45 F5 | 	or	result1, ##177209344
32a14     04 12 06 F1 | 	add	arg01, #4
32a18     09 FB 61 FC | 	wrlong	result1, arg01
32a1c     F2 FA 01 F6 | 	mov	result1, objptr
32a20     00 50 05 FF 
32a24     00 FA 45 F5 | 	or	result1, ##178257920
32a28     04 12 06 F1 | 	add	arg01, #4
32a2c     09 FB 61 FC | 	wrlong	result1, arg01
32a30     F2 FA 01 F6 | 	mov	result1, objptr
32a34     00 58 05 FF 
32a38     00 FA 45 F5 | 	or	result1, ##179306496
32a3c     04 12 06 F1 | 	add	arg01, #4
32a40     09 FB 61 FC | 	wrlong	result1, arg01
32a44     F2 FA 01 F6 | 	mov	result1, objptr
32a48     00 60 05 FF 
32a4c     00 FA 45 F5 | 	or	result1, ##180355072
32a50     04 12 06 F1 | 	add	arg01, #4
32a54     09 FB 61 FC | 	wrlong	result1, arg01
32a58     F2 FA 01 F6 | 	mov	result1, objptr
32a5c     00 68 05 FF 
32a60     00 FA 45 F5 | 	or	result1, ##181403648
32a64     04 12 06 F1 | 	add	arg01, #4
32a68     09 FB 61 FC | 	wrlong	result1, arg01
32a6c     F2 FA 01 F6 | 	mov	result1, objptr
32a70     00 70 05 FF 
32a74     00 FA 45 F5 | 	or	result1, ##182452224
32a78     04 12 06 F1 | 	add	arg01, #4
32a7c     09 FB 61 FC | 	wrlong	result1, arg01
32a80     F2 FA 01 F6 | 	mov	result1, objptr
32a84     00 78 05 FF 
32a88     00 FA 45 F5 | 	or	result1, ##183500800
32a8c     04 12 06 F1 | 	add	arg01, #4
32a90     09 FB 61 FC | 	wrlong	result1, arg01
32a94     F2 FA 01 F6 | 	mov	result1, objptr
32a98     00 80 05 FF 
32a9c     00 FA 45 F5 | 	or	result1, ##184549376
32aa0     04 12 06 F1 | 	add	arg01, #4
32aa4     09 FB 61 FC | 	wrlong	result1, arg01
32aa8     F2 FA 01 F6 | 	mov	result1, objptr
32aac     00 88 05 FF 
32ab0     00 FA 45 F5 | 	or	result1, ##185597952
32ab4     04 12 06 F1 | 	add	arg01, #4
32ab8     09 FB 61 FC | 	wrlong	result1, arg01
32abc     F2 FA 01 F6 | 	mov	result1, objptr
32ac0     00 90 05 FF 
32ac4     00 FA 45 F5 | 	or	result1, ##186646528
32ac8     04 12 06 F1 | 	add	arg01, #4
32acc     09 FB 61 FC | 	wrlong	result1, arg01
32ad0     F2 FA 01 F6 | 	mov	result1, objptr
32ad4     00 98 05 FF 
32ad8     00 FA 45 F5 | 	or	result1, ##187695104
32adc     04 12 06 F1 | 	add	arg01, #4
32ae0     09 FB 61 FC | 	wrlong	result1, arg01
32ae4     F2 FA 01 F6 | 	mov	result1, objptr
32ae8     00 A0 05 FF 
32aec     00 FA 45 F5 | 	or	result1, ##188743680
32af0     04 12 06 F1 | 	add	arg01, #4
32af4     09 FB 61 FC | 	wrlong	result1, arg01
32af8     4C 12 86 F1 | 	sub	arg01, #76
32afc                 | ' 
32afc                 | '     v->close = &v_close;
32afc                 | '     v->read = &v_read;
32afc                 | '     v->write = &v_write;
32afc                 | '     v->lseek = &v_lseek;
32afc                 | '     v->ioctl = &v_ioctl;
32afc                 | '     v->flush = 0;
32afc                 | '     v->vfs_data = ptr;
32afc                 | '     v->reserved = 0;
32afc                 | ' 
32afc                 | '     v->open = &v_open;
32afc                 | '     v->creat = &v_creat;
32afc                 | '     v->opendir = &v_opendir;
32afc                 | '     v->closedir = &v_closedir;
32afc                 | '     v->readdir = &v_readdir;
32afc                 | '     v->stat = &v_stat;
32afc                 | ' 
32afc                 | '     v->mkdir = &v_mkdir;
32afc                 | '     v->rmdir = &v_rmdir;
32afc                 | ' 
32afc                 | '     v->remove = &v_remove;
32afc                 | '     v->rename = &v_rename;
32afc                 | ' 
32afc                 | '     v->init = &v_init;
32afc                 | '     v->deinit = &v_deinit;
32afc                 | ' 
32afc                 | '     return v;
32afc     09 FB 01 F6 | 	mov	result1, arg01
32b00     A7 F0 03 F6 | 	mov	ptra, fp
32b04     B2 00 A0 FD | 	call	#popregs_
32b08                 | _fatfs_cc_get_vfs_ret
32b08     2D 00 64 FD | 	ret
32b0c                 | 
32b0c                 | _fatfs_cc_xmit_mmc_1152
32b0c     01 00 00 FF 
32b10     10 E4 05 F1 | 	add	objptr, ##528
32b14     F2 00 02 FB | 	rdlong	_var01, objptr
32b18     08 E4 05 F1 | 	add	objptr, #8
32b1c     F2 02 02 FB | 	rdlong	_var02, objptr
32b20     01 00 00 FF 
32b24     18 E4 85 F1 | 	sub	objptr, ##536
32b28     40 02 62 FD | 	dirl	_var02
32b2c     28 02 64 FD | 	setq	#1
32b30     09 05 02 FB | 	rdlong	_var03, arg01
32b34     69 04 62 FD | 	rev	_var03
32b38     1B 04 FE F9 | 	movbyts	_var03, #27
32b3c     01 05 22 FC | 	wypin	_var03, _var02
32b40     0A 05 02 F6 | 	mov	_var03, arg02
32b44     02 14 4E F0 | 	shr	arg02, #2 wz
32b48     03 04 66 F0 | 	shl	_var03, #3
32b4c     00 05 22 FC | 	wypin	_var03, _var01
32b50     41 02 62 FD | 	dirh	_var02
32b54     08 12 06 F1 | 	add	arg01, #8
32b58     69 06 62 FD | 	rev	_var04
32b5c     1B 06 FE F9 | 	movbyts	_var04, #27
32b60                 | LR__5070
32b60     01 07 22 5C |  if_ne	wypin	_var04, _var02
32b64     09 07 02 5B |  if_ne	rdlong	_var04, arg01
32b68     04 12 06 51 |  if_ne	add	arg01, #4
32b6c     69 06 62 5D |  if_ne	rev	_var04
32b70     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
32b74                 | LR__5071
32b74     40 02 72 5D |  if_ne	testp	_var02 wc
32b78     F8 FF 9F 1D |  if_a	jmp	#LR__5071
32b7c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5070
32b80                 | LR__5072
32b80     40 00 72 FD | 	testp	_var01 wc
32b84     F8 FF 9F 3D |  if_ae	jmp	#LR__5072
32b88     40 02 62 FD | 	dirl	_var02
32b8c     FF FF FF FF 
32b90     01 FF 2B FC | 	wypin	##-1, _var02
32b94     41 02 62 FD | 	dirh	_var02
32b98                 | _fatfs_cc_xmit_mmc_1152_ret
32b98     2D 00 64 FD | 	ret
32b9c                 | 
32b9c                 | _fatfs_cc_rcvr_mmc_1159
32b9c     01 00 00 FF 
32ba0     10 E4 05 F1 | 	add	objptr, ##528
32ba4     F2 00 02 FB | 	rdlong	_var01, objptr
32ba8     0C E4 05 F1 | 	add	objptr, #12
32bac     F2 02 02 FB | 	rdlong	_var02, objptr
32bb0     01 00 00 FF 
32bb4     1C E4 85 F1 | 	sub	objptr, ##540
32bb8     01 03 08 FC | 	akpin	_var02
32bbc     0A 05 0A F6 | 	mov	_var03, arg02 wz
32bc0     02 04 4E F0 | 	shr	_var03, #2 wz
32bc4     30 00 90 AD |  if_e	jmp	#LR__5082
32bc8     02 07 02 F6 | 	mov	_var04, _var03
32bcc     05 06 66 F0 | 	shl	_var04, #5
32bd0     00 07 22 FC | 	wypin	_var04, _var01
32bd4     01 7F 18 FC | 	wxpin	#63, _var02
32bd8                 | LR__5080
32bd8                 | LR__5081
32bd8     40 02 72 FD | 	testp	_var02 wc
32bdc     F8 FF 9F 3D |  if_ae	jmp	#LR__5081
32be0     01 07 8A FA | 	rdpin	_var04, _var02
32be4     69 06 62 FD | 	rev	_var04
32be8     1B 06 FE F9 | 	movbyts	_var04, #27
32bec     09 07 62 FC | 	wrlong	_var04, arg01
32bf0     04 12 06 F1 | 	add	arg01, #4
32bf4     F8 05 6E FB | 	djnz	_var03, #LR__5080
32bf8                 | LR__5082
32bf8     03 14 0E F5 | 	and	arg02, #3 wz
32bfc     24 00 90 AD |  if_e	jmp	#LR__5085
32c00     01 4F 18 FC | 	wxpin	#39, _var02
32c04                 | LR__5083
32c04     00 11 28 FC | 	wypin	#8, _var01
32c08                 | LR__5084
32c08     40 02 72 FD | 	testp	_var02 wc
32c0c     F8 FF 9F 3D |  if_ae	jmp	#LR__5084
32c10     01 07 8A FA | 	rdpin	_var04, _var02
32c14     69 06 62 FD | 	rev	_var04
32c18     09 07 42 FC | 	wrbyte	_var04, arg01
32c1c     01 12 06 F1 | 	add	arg01, #1
32c20     F8 15 6E FB | 	djnz	arg02, #LR__5083
32c24                 | LR__5085
32c24                 | _fatfs_cc_rcvr_mmc_1159_ret
32c24     2D 00 64 FD | 	ret
32c28                 | 
32c28                 | _fatfs_cc_wait_ready_1163
32c28     01 4A 05 F6 | 	mov	COUNT_, #1
32c2c     A8 00 A0 FD | 	call	#pushregs_
32c30     10 F0 07 F1 | 	add	ptra, #16
32c34     1A FA 61 FD | 	getct	result1
32c38     08 4E 05 F1 | 	add	fp, #8
32c3c     A7 FA 61 FC | 	wrlong	result1, fp
32c40     14 26 06 FB | 	rdlong	local01, #20
32c44     01 26 46 F0 | 	shr	local01, #1
32c48     04 4E 05 F1 | 	add	fp, #4
32c4c     A7 26 62 FC | 	wrlong	local01, fp
32c50     0C 4E 85 F1 | 	sub	fp, #12
32c54                 | ' {
32c54                 | ' 	BYTE d;
32c54                 | ' 	UINT tmr, tmout;
32c54                 | ' 
32c54                 | ' 	tmr = _cnt();
32c54                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
32c54                 | ' 	for(;;) {
32c54                 | LR__5090
32c54     04 4E 05 F1 | 	add	fp, #4
32c58     A7 12 02 F6 | 	mov	arg01, fp
32c5c     04 4E 85 F1 | 	sub	fp, #4
32c60     01 14 06 F6 | 	mov	arg02, #1
32c64     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32c68     04 4E 05 F1 | 	add	fp, #4
32c6c     A7 26 C2 FA | 	rdbyte	local01, fp
32c70     04 4E 85 F1 | 	sub	fp, #4
32c74     FF 26 0E F2 | 	cmp	local01, #255 wz
32c78     01 FA 05 A6 |  if_e	mov	result1, #1
32c7c     28 00 90 AD |  if_e	jmp	#LR__5091
32c80     1A FA 61 FD | 	getct	result1
32c84     08 4E 05 F1 | 	add	fp, #8
32c88     A7 26 02 FB | 	rdlong	local01, fp
32c8c     13 FB 81 F1 | 	sub	result1, local01
32c90     04 4E 05 F1 | 	add	fp, #4
32c94     A7 26 02 FB | 	rdlong	local01, fp
32c98     0C 4E 85 F1 | 	sub	fp, #12
32c9c     13 FB 11 F2 | 	cmp	result1, local01 wc
32ca0     00 FA 05 36 |  if_ae	mov	result1, #0
32ca4     AC FF 9F CD |  if_b	jmp	#LR__5090
32ca8                 | LR__5091
32ca8     A7 F0 03 F6 | 	mov	ptra, fp
32cac     B2 00 A0 FD | 	call	#popregs_
32cb0                 | _fatfs_cc_wait_ready_1163_ret
32cb0     2D 00 64 FD | 	ret
32cb4                 | 
32cb4                 | _fatfs_cc_deselect_1169
32cb4     00 4A 05 F6 | 	mov	COUNT_, #0
32cb8     A8 00 A0 FD | 	call	#pushregs_
32cbc     14 F0 07 F1 | 	add	ptra, #20
32cc0     01 00 00 FF 
32cc4     14 E4 05 F1 | 	add	objptr, ##532
32cc8     F2 14 02 FB | 	rdlong	arg02, objptr
32ccc     04 4E 05 F1 | 	add	fp, #4
32cd0     A7 14 62 FC | 	wrlong	arg02, fp
32cd4     04 E4 85 F1 | 	sub	objptr, #4
32cd8     F2 14 02 FB | 	rdlong	arg02, objptr
32cdc     04 4E 05 F1 | 	add	fp, #4
32ce0     A7 14 62 FC | 	wrlong	arg02, fp
32ce4     08 E4 05 F1 | 	add	objptr, #8
32ce8     F2 14 02 FB | 	rdlong	arg02, objptr
32cec     04 4E 05 F1 | 	add	fp, #4
32cf0     A7 14 62 FC | 	wrlong	arg02, fp
32cf4     04 E4 05 F1 | 	add	objptr, #4
32cf8     F2 14 02 FB | 	rdlong	arg02, objptr
32cfc     01 00 00 FF 
32d00     1C E4 85 F1 | 	sub	objptr, ##540
32d04     04 4E 05 F1 | 	add	fp, #4
32d08     A7 14 62 FC | 	wrlong	arg02, fp
32d0c     0C 4E 85 F1 | 	sub	fp, #12
32d10     A7 12 02 FB | 	rdlong	arg01, fp
32d14     04 4E 85 F1 | 	sub	fp, #4
32d18     59 12 62 FD | 	drvh	arg01
32d1c     1F 20 64 FD | 	waitx	#16
32d20     A7 12 02 F6 | 	mov	arg01, fp
32d24     01 14 06 F6 | 	mov	arg02, #1
32d28     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32d2c     A7 F0 03 F6 | 	mov	ptra, fp
32d30     B2 00 A0 FD | 	call	#popregs_
32d34                 | _fatfs_cc_deselect_1169_ret
32d34     2D 00 64 FD | 	ret
32d38                 | 
32d38                 | _fatfs_cc_select_1173
32d38     00 4A 05 F6 | 	mov	COUNT_, #0
32d3c     A8 00 A0 FD | 	call	#pushregs_
32d40     10 F0 07 F1 | 	add	ptra, #16
32d44     01 00 00 FF 
32d48     14 E4 05 F1 | 	add	objptr, ##532
32d4c     F2 14 02 FB | 	rdlong	arg02, objptr
32d50     08 4E 05 F1 | 	add	fp, #8
32d54     A7 14 62 FC | 	wrlong	arg02, fp
32d58     08 E4 05 F1 | 	add	objptr, #8
32d5c     F2 12 02 FB | 	rdlong	arg01, objptr
32d60     01 00 00 FF 
32d64     1C E4 85 F1 | 	sub	objptr, ##540
32d68     04 4E 05 F1 | 	add	fp, #4
32d6c     A7 12 62 FC | 	wrlong	arg01, fp
32d70     50 12 62 FD | 	fltl	arg01
32d74     04 4E 85 F1 | 	sub	fp, #4
32d78     A7 12 02 FB | 	rdlong	arg01, fp
32d7c     58 12 62 FD | 	drvl	arg01
32d80     1F 20 64 FD | 	waitx	#16
32d84     04 4E 05 F1 | 	add	fp, #4
32d88     A7 12 02 FB | 	rdlong	arg01, fp
32d8c     41 12 62 FD | 	dirh	arg01
32d90     08 4E 85 F1 | 	sub	fp, #8
32d94     A7 12 02 F6 | 	mov	arg01, fp
32d98     04 4E 85 F1 | 	sub	fp, #4
32d9c     01 14 06 F6 | 	mov	arg02, #1
32da0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32da4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1163
32da8     00 FA 0D F2 | 	cmp	result1, #0 wz
32dac     01 FA 05 56 |  if_ne	mov	result1, #1
32db0     08 00 90 5D |  if_ne	jmp	#LR__5100
32db4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1169
32db8                 | ' 
32db8                 | ' 	deselect();
32db8                 | ' 	return 0;
32db8     00 FA 05 F6 | 	mov	result1, #0
32dbc                 | LR__5100
32dbc     A7 F0 03 F6 | 	mov	ptra, fp
32dc0     B2 00 A0 FD | 	call	#popregs_
32dc4                 | _fatfs_cc_select_1173_ret
32dc4     2D 00 64 FD | 	ret
32dc8                 | 
32dc8                 | _fatfs_cc_rcvr_datablock_1177
32dc8     01 4A 05 F6 | 	mov	COUNT_, #1
32dcc     A8 00 A0 FD | 	call	#pushregs_
32dd0     18 F0 07 F1 | 	add	ptra, #24
32dd4     04 4E 05 F1 | 	add	fp, #4
32dd8     A7 12 62 FC | 	wrlong	arg01, fp
32ddc     04 4E 05 F1 | 	add	fp, #4
32de0     A7 14 62 FC | 	wrlong	arg02, fp
32de4     1A FA 61 FD | 	getct	result1
32de8     08 4E 05 F1 | 	add	fp, #8
32dec     A7 FA 61 FC | 	wrlong	result1, fp
32df0     14 26 06 FB | 	rdlong	local01, #20
32df4     03 26 46 F0 | 	shr	local01, #3
32df8     04 4E 05 F1 | 	add	fp, #4
32dfc     A7 26 62 FC | 	wrlong	local01, fp
32e00     14 4E 85 F1 | 	sub	fp, #20
32e04                 | ' 	BYTE *buff,
32e04                 | ' 	UINT btr
32e04                 | ' )
32e04                 | ' {
32e04                 | ' 	BYTE d[2];
32e04                 | ' 	UINT tmr, tmout;
32e04                 | ' 
32e04                 | ' 	tmr = _cnt();
32e04                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
32e04                 | ' 	for(;;) {
32e04                 | LR__5110
32e04     0C 4E 05 F1 | 	add	fp, #12
32e08     A7 12 02 F6 | 	mov	arg01, fp
32e0c     0C 4E 85 F1 | 	sub	fp, #12
32e10     01 14 06 F6 | 	mov	arg02, #1
32e14     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32e18     0C 4E 05 F1 | 	add	fp, #12
32e1c     A7 26 C2 FA | 	rdbyte	local01, fp
32e20     0C 4E 85 F1 | 	sub	fp, #12
32e24     FF 26 0E F2 | 	cmp	local01, #255 wz
32e28     28 00 90 5D |  if_ne	jmp	#LR__5111
32e2c     1A FA 61 FD | 	getct	result1
32e30     FD 26 02 F6 | 	mov	local01, result1
32e34     10 4E 05 F1 | 	add	fp, #16
32e38     A7 14 02 FB | 	rdlong	arg02, fp
32e3c     0A 27 82 F1 | 	sub	local01, arg02
32e40     04 4E 05 F1 | 	add	fp, #4
32e44     A7 14 02 FB | 	rdlong	arg02, fp
32e48     14 4E 85 F1 | 	sub	fp, #20
32e4c     0A 27 12 F2 | 	cmp	local01, arg02 wc
32e50     B0 FF 9F CD |  if_b	jmp	#LR__5110
32e54                 | LR__5111
32e54     0C 4E 05 F1 | 	add	fp, #12
32e58     A7 26 C2 FA | 	rdbyte	local01, fp
32e5c     0C 4E 85 F1 | 	sub	fp, #12
32e60     FE 26 0E F2 | 	cmp	local01, #254 wz
32e64     00 FA 05 56 |  if_ne	mov	result1, #0
32e68     30 00 90 5D |  if_ne	jmp	#LR__5112
32e6c     04 4E 05 F1 | 	add	fp, #4
32e70     A7 12 02 FB | 	rdlong	arg01, fp
32e74     04 4E 05 F1 | 	add	fp, #4
32e78     A7 14 02 FB | 	rdlong	arg02, fp
32e7c     08 4E 85 F1 | 	sub	fp, #8
32e80     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32e84     0C 4E 05 F1 | 	add	fp, #12
32e88     A7 12 02 F6 | 	mov	arg01, fp
32e8c     0C 4E 85 F1 | 	sub	fp, #12
32e90     02 14 06 F6 | 	mov	arg02, #2
32e94     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32e98                 | ' 
32e98                 | ' 	rcvr_mmc(buff, btr);
32e98                 | ' 	rcvr_mmc(d, 2);
32e98                 | ' 
32e98                 | ' 	return 1;
32e98     01 FA 05 F6 | 	mov	result1, #1
32e9c                 | LR__5112
32e9c     A7 F0 03 F6 | 	mov	ptra, fp
32ea0     B2 00 A0 FD | 	call	#popregs_
32ea4                 | _fatfs_cc_rcvr_datablock_1177_ret
32ea4     2D 00 64 FD | 	ret
32ea8                 | 
32ea8                 | _fatfs_cc_xmit_datablock_1179
32ea8     00 4A 05 F6 | 	mov	COUNT_, #0
32eac     A8 00 A0 FD | 	call	#pushregs_
32eb0     10 F0 07 F1 | 	add	ptra, #16
32eb4     04 4E 05 F1 | 	add	fp, #4
32eb8     A7 12 62 FC | 	wrlong	arg01, fp
32ebc     04 4E 05 F1 | 	add	fp, #4
32ec0     A7 14 42 FC | 	wrbyte	arg02, fp
32ec4     08 4E 85 F1 | 	sub	fp, #8
32ec8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1163
32ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
32ed0     00 FA 05 A6 |  if_e	mov	result1, #0
32ed4     90 00 90 AD |  if_e	jmp	#LR__5121
32ed8     08 4E 05 F1 | 	add	fp, #8
32edc     A7 14 C2 FA | 	rdbyte	arg02, fp
32ee0     04 4E 05 F1 | 	add	fp, #4
32ee4     A7 14 42 FC | 	wrbyte	arg02, fp
32ee8     A7 12 02 F6 | 	mov	arg01, fp
32eec     0C 4E 85 F1 | 	sub	fp, #12
32ef0     01 14 06 F6 | 	mov	arg02, #1
32ef4     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1152
32ef8     08 4E 05 F1 | 	add	fp, #8
32efc     A7 14 C2 FA | 	rdbyte	arg02, fp
32f00     08 4E 85 F1 | 	sub	fp, #8
32f04     FD 14 0E F2 | 	cmp	arg02, #253 wz
32f08     58 00 90 AD |  if_e	jmp	#LR__5120
32f0c     04 4E 05 F1 | 	add	fp, #4
32f10     A7 12 02 FB | 	rdlong	arg01, fp
32f14     04 4E 85 F1 | 	sub	fp, #4
32f18     09 14 C6 F9 | 	decod	arg02, #9
32f1c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1152
32f20     0C 4E 05 F1 | 	add	fp, #12
32f24     A7 12 02 F6 | 	mov	arg01, fp
32f28     0C 4E 85 F1 | 	sub	fp, #12
32f2c     02 14 06 F6 | 	mov	arg02, #2
32f30     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32f34     0C 4E 05 F1 | 	add	fp, #12
32f38     A7 12 02 F6 | 	mov	arg01, fp
32f3c     0C 4E 85 F1 | 	sub	fp, #12
32f40     01 14 06 F6 | 	mov	arg02, #1
32f44     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
32f48     0C 4E 05 F1 | 	add	fp, #12
32f4c     A7 14 C2 FA | 	rdbyte	arg02, fp
32f50     0C 4E 85 F1 | 	sub	fp, #12
32f54     1F 14 06 F5 | 	and	arg02, #31
32f58     05 14 0E F2 | 	cmp	arg02, #5 wz
32f5c                 | ' 			return 0;
32f5c     00 FA 05 56 |  if_ne	mov	result1, #0
32f60     04 00 90 5D |  if_ne	jmp	#LR__5121
32f64                 | LR__5120
32f64                 | ' 	}
32f64                 | ' 
32f64                 | ' 	return 1;
32f64     01 FA 05 F6 | 	mov	result1, #1
32f68                 | LR__5121
32f68     A7 F0 03 F6 | 	mov	ptra, fp
32f6c     B2 00 A0 FD | 	call	#popregs_
32f70                 | _fatfs_cc_xmit_datablock_1179_ret
32f70     2D 00 64 FD | 	ret
32f74                 | 
32f74                 | _fatfs_cc_send_cmd_1183
32f74     01 4A 05 F6 | 	mov	COUNT_, #1
32f78     A8 00 A0 FD | 	call	#pushregs_
32f7c     1C F0 07 F1 | 	add	ptra, #28
32f80                 | _fatfs_cc_send_cmd_1183_enter
32f80     04 4E 05 F1 | 	add	fp, #4
32f84     A7 12 42 FC | 	wrbyte	arg01, fp
32f88     04 4E 05 F1 | 	add	fp, #4
32f8c     A7 14 62 FC | 	wrlong	arg02, fp
32f90     04 4E 85 F1 | 	sub	fp, #4
32f94     A7 FA C1 FA | 	rdbyte	result1, fp
32f98     04 4E 85 F1 | 	sub	fp, #4
32f9c     80 FA CD F7 | 	test	result1, #128 wz
32fa0     44 00 90 AD |  if_e	jmp	#LR__5130
32fa4     04 4E 05 F1 | 	add	fp, #4
32fa8     A7 14 C2 FA | 	rdbyte	arg02, fp
32fac     7F 14 06 F5 | 	and	arg02, #127
32fb0     A7 14 42 FC | 	wrbyte	arg02, fp
32fb4     04 4E 85 F1 | 	sub	fp, #4
32fb8     37 12 06 F6 | 	mov	arg01, #55
32fbc     00 14 06 F6 | 	mov	arg02, #0
32fc0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1183
32fc4     0C 4E 05 F1 | 	add	fp, #12
32fc8     A7 FA 41 FC | 	wrbyte	result1, fp
32fcc     A7 14 C2 FA | 	rdbyte	arg02, fp
32fd0     0C 4E 85 F1 | 	sub	fp, #12
32fd4     02 14 16 F2 | 	cmp	arg02, #2 wc
32fd8     0C 4E 05 31 |  if_ae	add	fp, #12
32fdc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
32fe0     0C 4E 85 31 |  if_ae	sub	fp, #12
32fe4     6C 01 90 3D |  if_ae	jmp	#LR__5134
32fe8                 | LR__5130
32fe8     04 4E 05 F1 | 	add	fp, #4
32fec     A7 14 C2 FA | 	rdbyte	arg02, fp
32ff0     04 4E 85 F1 | 	sub	fp, #4
32ff4     0C 14 0E F2 | 	cmp	arg02, #12 wz
32ff8     14 00 90 AD |  if_e	jmp	#LR__5131
32ffc     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1169
33000     34 FD BF FD | 	call	#_fatfs_cc_select_1173
33004     00 FA 0D F2 | 	cmp	result1, #0 wz
33008     FF FA 05 A6 |  if_e	mov	result1, #255
3300c     44 01 90 AD |  if_e	jmp	#LR__5134
33010                 | LR__5131
33010     04 4E 05 F1 | 	add	fp, #4
33014     A7 14 C2 FA | 	rdbyte	arg02, fp
33018     40 FA 05 F6 | 	mov	result1, #64
3301c     0A FB 41 F5 | 	or	result1, arg02
33020     10 4E 05 F1 | 	add	fp, #16
33024     A7 FA 41 FC | 	wrbyte	result1, fp
33028     0C 4E 85 F1 | 	sub	fp, #12
3302c     A7 FA 01 FB | 	rdlong	result1, fp
33030     18 FA 45 F0 | 	shr	result1, #24
33034     0D 4E 05 F1 | 	add	fp, #13
33038     A7 FA 41 FC | 	wrbyte	result1, fp
3303c     0D 4E 85 F1 | 	sub	fp, #13
33040     A7 FA 01 FB | 	rdlong	result1, fp
33044     10 FA 45 F0 | 	shr	result1, #16
33048     0E 4E 05 F1 | 	add	fp, #14
3304c     A7 FA 41 FC | 	wrbyte	result1, fp
33050     0E 4E 85 F1 | 	sub	fp, #14
33054     A7 FA 01 FB | 	rdlong	result1, fp
33058     08 FA 45 F0 | 	shr	result1, #8
3305c     0F 4E 05 F1 | 	add	fp, #15
33060     A7 FA 41 FC | 	wrbyte	result1, fp
33064     0F 4E 85 F1 | 	sub	fp, #15
33068     A7 FA 01 FB | 	rdlong	result1, fp
3306c     10 4E 05 F1 | 	add	fp, #16
33070     A7 FA 41 FC | 	wrbyte	result1, fp
33074     0C 4E 85 F1 | 	sub	fp, #12
33078     A7 02 48 FC | 	wrbyte	#1, fp
3307c     08 4E 85 F1 | 	sub	fp, #8
33080     A7 FA C9 FA | 	rdbyte	result1, fp wz
33084     04 4E 85 F1 | 	sub	fp, #4
33088     0C 4E 05 A1 |  if_e	add	fp, #12
3308c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
33090     0C 4E 85 A1 |  if_e	sub	fp, #12
33094     04 4E 05 F1 | 	add	fp, #4
33098     A7 FA C1 FA | 	rdbyte	result1, fp
3309c     04 4E 85 F1 | 	sub	fp, #4
330a0     08 FA 0D F2 | 	cmp	result1, #8 wz
330a4     0C 4E 05 A1 |  if_e	add	fp, #12
330a8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
330ac     0C 4E 85 A1 |  if_e	sub	fp, #12
330b0     0C 4E 05 F1 | 	add	fp, #12
330b4     A7 14 C2 FA | 	rdbyte	arg02, fp
330b8     0D 4E 05 F1 | 	add	fp, #13
330bc     A7 14 42 FC | 	wrbyte	arg02, fp
330c0     05 4E 85 F1 | 	sub	fp, #5
330c4     A7 12 02 F6 | 	mov	arg01, fp
330c8     14 4E 85 F1 | 	sub	fp, #20
330cc     06 14 06 F6 | 	mov	arg02, #6
330d0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1152
330d4     04 4E 05 F1 | 	add	fp, #4
330d8     A7 26 C2 FA | 	rdbyte	local01, fp
330dc     04 4E 85 F1 | 	sub	fp, #4
330e0     0C 26 0E F2 | 	cmp	local01, #12 wz
330e4     10 4E 05 A1 |  if_e	add	fp, #16
330e8     A7 12 02 A6 |  if_e	mov	arg01, fp
330ec     10 4E 85 A1 |  if_e	sub	fp, #16
330f0     01 14 06 A6 |  if_e	mov	arg02, #1
330f4     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1159
330f8     0C 4E 05 F1 | 	add	fp, #12
330fc     A7 14 48 FC | 	wrbyte	#10, fp
33100     0C 4E 85 F1 | 	sub	fp, #12
33104                 | ' 	n = 10;
33104                 | ' 	do
33104                 | LR__5132
33104     10 4E 05 F1 | 	add	fp, #16
33108     A7 12 02 F6 | 	mov	arg01, fp
3310c     10 4E 85 F1 | 	sub	fp, #16
33110     01 14 06 F6 | 	mov	arg02, #1
33114     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1159
33118     10 4E 05 F1 | 	add	fp, #16
3311c     A7 26 C2 FA | 	rdbyte	local01, fp
33120     10 4E 85 F1 | 	sub	fp, #16
33124     80 26 CE F7 | 	test	local01, #128 wz
33128     1C 00 90 AD |  if_e	jmp	#LR__5133
3312c     0C 4E 05 F1 | 	add	fp, #12
33130     A7 26 C2 FA | 	rdbyte	local01, fp
33134     01 26 86 F1 | 	sub	local01, #1
33138     A7 26 42 FC | 	wrbyte	local01, fp
3313c     A7 26 CA FA | 	rdbyte	local01, fp wz
33140     0C 4E 85 F1 | 	sub	fp, #12
33144     BC FF 9F 5D |  if_ne	jmp	#LR__5132
33148                 | LR__5133
33148                 | ' 
33148                 | ' 	return d;
33148     10 4E 05 F1 | 	add	fp, #16
3314c     A7 FA C1 FA | 	rdbyte	result1, fp
33150     10 4E 85 F1 | 	sub	fp, #16
33154                 | LR__5134
33154     A7 F0 03 F6 | 	mov	ptra, fp
33158     B2 00 A0 FD | 	call	#popregs_
3315c                 | _fatfs_cc_send_cmd_1183_ret
3315c     2D 00 64 FD | 	ret
33160                 | 
33160                 | _fatfs_cc_disk_deinitialize
33160     03 4A 05 F6 | 	mov	COUNT_, #3
33164     A8 00 A0 FD | 	call	#pushregs_
33168     00 12 4E F2 | 	cmps	arg01, #0 wz
3316c     01 00 00 FF 
33170     14 E4 05 F1 | 	add	objptr, ##532
33174     F2 12 02 FB | 	rdlong	arg01, objptr
33178     04 E4 85 F1 | 	sub	objptr, #4
3317c     F2 26 02 FB | 	rdlong	local01, objptr
33180     08 E4 05 F1 | 	add	objptr, #8
33184     F2 28 02 FB | 	rdlong	local02, objptr
33188     04 E4 05 F1 | 	add	objptr, #4
3318c     F2 2A 02 FB | 	rdlong	local03, objptr
33190     01 00 00 FF 
33194     1C E4 85 F1 | 	sub	objptr, ##540
33198                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
33198                 | '         return RES_NOTRDY;
33198     03 FA 05 56 |  if_ne	mov	result1, #3
3319c     2C 00 90 5D |  if_ne	jmp	#LR__5140
331a0     50 12 62 FD | 	fltl	arg01
331a4     09 01 08 FC | 	wrpin	#0, arg01
331a8     50 26 62 FD | 	fltl	local01
331ac     13 01 08 FC | 	wrpin	#0, local01
331b0     50 28 62 FD | 	fltl	local02
331b4     14 01 08 FC | 	wrpin	#0, local02
331b8     50 2A 62 FD | 	fltl	local03
331bc     15 01 08 FC | 	wrpin	#0, local03
331c0     0A 12 06 F6 | 	mov	arg01, #10
331c4     40 0E BF FD | 	call	#__system___waitms
331c8                 | '     }
331c8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
331c8                 | '     _pinclear(PIN_SS);
331c8                 | '     _pinclear(PIN_CLK);
331c8                 | '     _pinclear(PIN_DI);
331c8                 | '     _pinclear(PIN_DO);
331c8                 | ' 
331c8                 | '     _waitms(10);
331c8                 | ' 
331c8                 | '     return 0;
331c8     00 FA 05 F6 | 	mov	result1, #0
331cc                 | LR__5140
331cc     A7 F0 03 F6 | 	mov	ptra, fp
331d0     B2 00 A0 FD | 	call	#popregs_
331d4                 | _fatfs_cc_disk_deinitialize_ret
331d4     2D 00 64 FD | 	ret
331d8                 | 
331d8                 | _fatfs_cc_gettimeofday
331d8     04 4A 05 F6 | 	mov	COUNT_, #4
331dc     A8 00 A0 FD | 	call	#pushregs_
331e0     09 27 02 F6 | 	mov	local01, arg01
331e4     FC 09 BF FD | 	call	#__system___getus
331e8     FD 12 02 F6 | 	mov	arg01, result1
331ec     02 00 00 FF 
331f0     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
331f4     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
331f8     09 FB 01 F6 | 	mov	result1, arg01
331fc     14 FB 81 F1 | 	sub	result1, local02
33200     A1 07 00 FF 
33204     40 FA 15 FD | 	qdiv	result1, ##1000000
33208     02 00 00 FF 
3320c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
33210     18 28 62 FD | 	getqx	local02
33214     A1 07 00 FF 
33218     40 FA 15 FD | 	qdiv	result1, ##1000000
3321c     00 28 0E F2 | 	cmp	local02, #0 wz
33220     19 2A 62 FD | 	getqy	local03
33224     28 00 90 AD |  if_e	jmp	#LR__5150
33228     02 00 00 FF 
3322c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
33230     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
33234     14 2D 02 F1 | 	add	local04, local02
33238     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
3323c     15 13 82 F1 | 	sub	arg01, local03
33240     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
33244     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
33248     02 00 00 FF 
3324c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
33250                 | LR__5150
33250     02 00 00 FF 
33254     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
33258     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3325c     02 00 00 FF 
33260     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
33264     13 2D 62 FC | 	wrlong	local04, local01
33268     04 26 06 F1 | 	add	local01, #4
3326c     13 2B 62 FC | 	wrlong	local03, local01
33270                 | '         lastsec += secs;
33270                 | '         lastus = now - leftover;
33270                 | '     }
33270                 | '     tv->tv_sec = lastsec;
33270                 | '     tv->tv_usec = leftover;
33270                 | '     return 0;
33270     00 FA 05 F6 | 	mov	result1, #0
33274     A7 F0 03 F6 | 	mov	ptra, fp
33278     B2 00 A0 FD | 	call	#popregs_
3327c                 | _fatfs_cc_gettimeofday_ret
3327c     2D 00 64 FD | 	ret
33280                 | 
33280                 | _fatfs_cc__is_leap_year
33280     09 FB 51 F6 | 	abs	result1, arg01 wc
33284     03 FA 05 F5 | 	and	result1, #3
33288     FD FA 89 F6 | 	negc	result1, result1 wz
3328c     38 00 90 5D |  if_ne	jmp	#LR__5161
33290     09 FB 51 F6 | 	abs	result1, arg01 wc
33294     64 FA 15 FD | 	qdiv	result1, #100
33298     19 FA 61 FD | 	getqy	result1
3329c     FD FA 89 F6 | 	negc	result1, result1 wz
332a0     1C 00 90 5D |  if_ne	jmp	#LR__5160
332a4     09 FB 51 F6 | 	abs	result1, arg01 wc
332a8     90 FB 15 FD | 	qdiv	result1, #400
332ac                 | '       return (0 == y % 400);
332ac     00 FA 05 F6 | 	mov	result1, #0
332b0     19 00 62 FD | 	getqy	_var01
332b4     00 01 8A F6 | 	negc	_var01, _var01 wz
332b8     01 FA 05 A6 |  if_e	mov	result1, #1
332bc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
332c0                 | LR__5160
332c0                 | '     return 1;
332c0     01 FA 05 F6 | 	mov	result1, #1
332c4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
332c8                 | LR__5161
332c8                 | '   }
332c8                 | '   return 0;
332c8     00 FA 05 F6 | 	mov	result1, #0
332cc                 | _fatfs_cc__is_leap_year_ret
332cc     2D 00 64 FD | 	ret
332d0                 | 
332d0                 | _fatfs_cc___tzoffset
332d0     09 01 0A F6 | 	mov	_var01, arg01 wz
332d4     FF FF FF FF 
332d8     0A FF 6B FC | 	wrlong	##-1, arg02
332dc     01 02 06 F6 | 	mov	_var02, #1
332e0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
332e4                 | '                 return 0;
332e4     00 FA 05 A6 |  if_e	mov	result1, #0
332e8     94 02 90 AD |  if_e	jmp	#LR__5187
332ec     0A 01 68 FC | 	wrlong	#0, arg02
332f0     02 00 00 FF 
332f4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
332f8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
332fc                 | ' 
332fc                 | '        *hasdst = 0;
332fc                 | ' 
332fc                 | ' 	n = stdname;
332fc                 | '         while (*s && isalpha(*s)) {
332fc     02 00 00 FF 
33300     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
33304     97 28 48 FB | 	callpa	#(@LR__5171-@LR__5170)>>2,fcache_load_ptr_
33308                 | LR__5170
33308     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3330c     48 00 90 AD |  if_e	jmp	#LR__5172
33310     00 13 C2 FA | 	rdbyte	arg01, _var01
33314                 | ' {
33314                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
33314     80 12 36 F3 | 	fle	arg01, #128 wc
33318                 | '     return __ctype[c];
33318     02 00 00 FF 
3331c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
33320     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33324     09 FB C1 FA | 	rdbyte	result1, arg01
33328     02 00 00 FF 
3332c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33330     0C FA CD F7 | 	test	result1, #12 wz
33334     20 00 90 AD |  if_e	jmp	#LR__5172
33338     00 09 02 F6 | 	mov	_var05, _var01
3333c     00 0B 02 F6 | 	mov	_var06, _var01
33340     01 0A 06 F1 | 	add	_var06, #1
33344     04 0D C2 FA | 	rdbyte	_var07, _var05
33348     05 01 02 F6 | 	mov	_var01, _var06
3334c     03 0D 42 FC | 	wrbyte	_var07, _var04
33350     01 06 06 F1 | 	add	_var04, #1
33354     B0 FF 9F FD | 	jmp	#LR__5170
33358                 | LR__5171
33358                 | LR__5172
33358     03 01 48 FC | 	wrbyte	#0, _var04
3335c     00 0E 06 F6 | 	mov	_var08, #0
33360     00 05 C2 FA | 	rdbyte	_var03, _var01
33364     2D 04 0E F2 | 	cmp	_var03, #45 wz
33368     01 02 66 A6 |  if_e	neg	_var02, #1
3336c     01 00 06 A1 |  if_e	add	_var01, #1
33370     97 28 48 FB | 	callpa	#(@LR__5174-@LR__5173)>>2,fcache_load_ptr_
33374                 | '                 sgn = -1;
33374                 | '                 s++;
33374                 | '         }
33374                 | '         while (isdigit(*s)) {
33374                 | LR__5173
33374     00 13 C2 FA | 	rdbyte	arg01, _var01
33378                 | ' {
33378                 | '   return  (__ctype_get(c) & 0x02 ) ;
33378     80 12 36 F3 | 	fle	arg01, #128 wc
3337c                 | '     return __ctype[c];
3337c     02 00 00 FF 
33380     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
33384     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33388     09 FB C1 FA | 	rdbyte	result1, arg01
3338c     02 00 00 FF 
33390     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33394     02 FA CD F7 | 	test	result1, #2 wz
33398     28 00 90 AD |  if_e	jmp	#LR__5175
3339c     07 05 02 F6 | 	mov	_var03, _var08
333a0     02 04 66 F0 | 	shl	_var03, #2
333a4     07 05 02 F1 | 	add	_var03, _var08
333a8     01 04 66 F0 | 	shl	_var03, #1
333ac     00 09 C2 FA | 	rdbyte	_var05, _var01
333b0     30 08 86 F1 | 	sub	_var05, #48
333b4     04 05 02 F1 | 	add	_var03, _var05
333b8     02 0F 02 F6 | 	mov	_var08, _var03
333bc     01 00 06 F1 | 	add	_var01, #1
333c0     B0 FF 9F FD | 	jmp	#LR__5173
333c4                 | LR__5174
333c4                 | LR__5175
333c4     07 00 00 FF 
333c8     10 0E 06 FD | 	qmul	_var08, ##3600
333cc     00 05 C2 FA | 	rdbyte	_var03, _var01
333d0     3A 04 0E F2 | 	cmp	_var03, #58 wz
333d4     18 10 62 FD | 	getqx	_var09
333d8     70 00 90 5D |  if_ne	jmp	#LR__5179
333dc     00 0E 06 F6 | 	mov	_var08, #0
333e0     01 00 06 F1 | 	add	_var01, #1
333e4     97 28 48 FB | 	callpa	#(@LR__5177-@LR__5176)>>2,fcache_load_ptr_
333e8                 | '                 x = 0;
333e8                 | '                 s++;
333e8                 | '                 while (isdigit(*s)) {
333e8                 | LR__5176
333e8     00 13 C2 FA | 	rdbyte	arg01, _var01
333ec                 | ' {
333ec                 | '   return  (__ctype_get(c) & 0x02 ) ;
333ec     80 12 36 F3 | 	fle	arg01, #128 wc
333f0                 | '     return __ctype[c];
333f0     02 00 00 FF 
333f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
333f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
333fc     09 FB C1 FA | 	rdbyte	result1, arg01
33400     02 00 00 FF 
33404     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33408     02 FA CD F7 | 	test	result1, #2 wz
3340c     28 00 90 AD |  if_e	jmp	#LR__5178
33410     07 05 02 F6 | 	mov	_var03, _var08
33414     02 04 66 F0 | 	shl	_var03, #2
33418     07 05 02 F1 | 	add	_var03, _var08
3341c     01 04 66 F0 | 	shl	_var03, #1
33420     00 09 C2 FA | 	rdbyte	_var05, _var01
33424     30 08 86 F1 | 	sub	_var05, #48
33428     04 05 02 F1 | 	add	_var03, _var05
3342c     02 0F 02 F6 | 	mov	_var08, _var03
33430     01 00 06 F1 | 	add	_var01, #1
33434     B0 FF 9F FD | 	jmp	#LR__5176
33438                 | LR__5177
33438                 | LR__5178
33438     07 0D 02 F6 | 	mov	_var07, _var08
3343c     04 0C 66 F0 | 	shl	_var07, #4
33440     07 0D 82 F1 | 	sub	_var07, _var08
33444     02 0C 66 F0 | 	shl	_var07, #2
33448     06 11 02 F1 | 	add	_var09, _var07
3344c                 | LR__5179
3344c     02 00 00 FF 
33450     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
33454     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
33458     00 13 C2 FA | 	rdbyte	arg01, _var01
3345c                 | ' {
3345c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3345c     80 12 36 F3 | 	fle	arg01, #128 wc
33460                 | '     return __ctype[c];
33460     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
33464     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33468     09 FB C1 FA | 	rdbyte	result1, arg01
3346c     02 00 00 FF 
33470     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
33474     0C FA CD F7 | 	test	result1, #12 wz
33478     50 00 90 AD |  if_e	jmp	#LR__5182
3347c     0A 03 68 FC | 	wrlong	#1, arg02
33480                 | '                 *hasdst = 1;
33480                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
33480                 | LR__5180
33480     00 05 CA FA | 	rdbyte	_var03, _var01 wz
33484     44 00 90 AD |  if_e	jmp	#LR__5181
33488     00 13 C2 FA | 	rdbyte	arg01, _var01
3348c                 | ' {
3348c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3348c     80 12 36 F3 | 	fle	arg01, #128 wc
33490                 | '     return __ctype[c];
33490     02 00 00 FF 
33494     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
33498     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3349c     09 FB C1 FA | 	rdbyte	result1, arg01
334a0     02 00 00 FF 
334a4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
334a8     0C FA CD F7 | 	test	result1, #12 wz
334ac     1C 00 90 AD |  if_e	jmp	#LR__5181
334b0     00 0B 02 F6 | 	mov	_var06, _var01
334b4     01 0A 06 F1 | 	add	_var06, #1
334b8     00 0D C2 FA | 	rdbyte	_var07, _var01
334bc     05 01 02 F6 | 	mov	_var01, _var06
334c0     03 0D 42 FC | 	wrbyte	_var07, _var04
334c4     01 06 06 F1 | 	add	_var04, #1
334c8     B4 FF 9F FD | 	jmp	#LR__5180
334cc                 | LR__5181
334cc                 | LR__5182
334cc     03 01 48 FC | 	wrbyte	#0, _var04
334d0     02 00 00 FF 
334d4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
334d8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
334dc     02 00 00 FF 
334e0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
334e4     20 00 90 AD |  if_e	jmp	#LR__5183
334e8     02 00 00 FF 
334ec     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
334f0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
334f4     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
334f8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
334fc     02 00 00 FF 
33500     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
33504     1C 00 90 FD | 	jmp	#LR__5184
33508                 | LR__5183
33508     02 00 00 FF 
3350c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
33510     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
33514     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
33518     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3351c     02 00 00 FF 
33520     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
33524                 | LR__5184
33524     02 00 00 FF 
33528     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3352c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
33530     02 00 00 FF 
33534     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
33538     20 00 90 AD |  if_e	jmp	#LR__5185
3353c     02 00 00 FF 
33540     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
33544     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
33548     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
3354c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
33550     02 00 00 FF 
33554     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
33558     1C 00 90 FD | 	jmp	#LR__5186
3355c                 | LR__5185
3355c     02 00 00 FF 
33560     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
33564     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
33568     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
3356c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
33570     02 00 00 FF 
33574     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
33578                 | LR__5186
33578     08 03 02 FD | 	qmul	_var02, _var09
3357c                 | ' 		_tzname[1] = stdname;
3357c                 | ' 
3357c                 | '         return sgn * off;
3357c     18 FA 61 FD | 	getqx	result1
33580                 | LR__5187
33580                 | _fatfs_cc___tzoffset_ret
33580     2D 00 64 FD | 	ret
33584                 | 
33584                 | _fatfs_cc___indst
33584     10 12 06 F1 | 	add	arg01, #16
33588     09 01 02 FB | 	rdlong	_var01, arg01
3358c     10 12 86 F1 | 	sub	arg01, #16
33590     02 00 0E F2 | 	cmp	_var01, #2 wz
33594     30 00 90 5D |  if_ne	jmp	#LR__5190
33598     07 00 06 F6 | 	mov	_var01, #7
3359c     18 12 06 F1 | 	add	arg01, #24
335a0     09 03 02 FB | 	rdlong	_var02, arg01
335a4     01 01 02 F1 | 	add	_var01, _var02
335a8     0C 12 86 F1 | 	sub	arg01, #12
335ac     09 05 02 FB | 	rdlong	_var03, arg01
335b0     02 01 82 F1 | 	sub	_var01, _var03
335b4     00 00 56 F2 | 	cmps	_var01, #0 wc
335b8                 | '                         return 1;
335b8     01 FA 05 C6 |  if_b	mov	result1, #1
335bc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
335c0                 | '                 return 0;
335c0     00 FA 05 F6 | 	mov	result1, #0
335c4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
335c8                 | LR__5190
335c8     10 12 06 F1 | 	add	arg01, #16
335cc     09 01 02 FB | 	rdlong	_var01, arg01
335d0     10 12 86 F1 | 	sub	arg01, #16
335d4     0A 00 0E F2 | 	cmp	_var01, #10 wz
335d8     28 00 90 5D |  if_ne	jmp	#LR__5191
335dc     18 12 06 F1 | 	add	arg01, #24
335e0     09 01 02 FB | 	rdlong	_var01, arg01
335e4     0C 12 86 F1 | 	sub	arg01, #12
335e8     09 07 02 FB | 	rdlong	_var04, arg01
335ec     03 01 82 F1 | 	sub	_var01, _var04
335f0     00 00 56 F2 | 	cmps	_var01, #0 wc
335f4                 | '                         return 0;
335f4     00 FA 05 C6 |  if_b	mov	result1, #0
335f8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
335fc                 | '                 return 1;
335fc     01 FA 05 F6 | 	mov	result1, #1
33600     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
33604                 | LR__5191
33604                 | '         }
33604                 | ' 
33604                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
33604     00 00 06 F6 | 	mov	_var01, #0
33608     10 12 06 F1 | 	add	arg01, #16
3360c     09 03 02 FB | 	rdlong	_var02, arg01
33610     10 12 86 F1 | 	sub	arg01, #16
33614     03 02 56 F2 | 	cmps	_var02, #3 wc
33618     10 00 90 CD |  if_b	jmp	#LR__5192
3361c     10 12 06 F1 | 	add	arg01, #16
33620     09 05 02 FB | 	rdlong	_var03, arg01
33624     0A 04 56 F2 | 	cmps	_var03, #10 wc
33628     01 00 06 C6 |  if_b	mov	_var01, #1
3362c                 | LR__5192
3362c     00 FB 01 F6 | 	mov	result1, _var01
33630                 | _fatfs_cc___indst_ret
33630     2D 00 64 FD | 	ret
33634                 | 
33634                 | ' 	
33634                 | ' 	FUNCTION pfunc(c as integer) as integer
33634                 | ___strs_cl_pfunc
33634                 | ' 		if (i < 16) then
33634     04 E4 05 F1 | 	add	objptr, #4
33638     F2 FA 01 FB | 	rdlong	result1, objptr
3363c     04 E4 85 F1 | 	sub	objptr, #4
33640     10 FA 55 F2 | 	cmps	result1, #16 wc
33644     2C 00 90 3D |  if_ae	jmp	#LR__5200
33648     F2 FA 01 FB | 	rdlong	result1, objptr
3364c     04 E4 05 F1 | 	add	objptr, #4
33650     F2 00 02 FB | 	rdlong	_var01, objptr
33654     FD 00 02 F1 | 	add	_var01, result1
33658     00 13 42 FC | 	wrbyte	arg01, _var01
3365c     F2 FA 01 FB | 	rdlong	result1, objptr
33660     01 FA 05 F1 | 	add	result1, #1
33664     F2 FA 61 FC | 	wrlong	result1, objptr
33668     04 E4 85 F1 | 	sub	objptr, #4
3366c                 | ' 			p(i) = c
3366c                 | ' 			i = i+1
3366c                 | ' 			return 1
3366c     01 FA 05 F6 | 	mov	result1, #1
33670     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
33674                 | LR__5200
33674                 | ' 			return -1
33674     01 FA 65 F6 | 	neg	result1, #1
33678                 | ___strs_cl_pfunc_ret
33678     2D 00 64 FD | 	ret
3367c                 | 
3367c                 | __struct__s_vfs_file_t_putchar
3367c     04 4A 05 F6 | 	mov	COUNT_, #4
33680     A8 00 A0 FD | 	call	#pushregs_
33684     1C E4 05 F1 | 	add	objptr, #28
33688     F2 26 0A FB | 	rdlong	local01, objptr wz
3368c     1C E4 85 F1 | 	sub	objptr, #28
33690     00 FA 05 A6 |  if_e	mov	result1, #0
33694     48 00 90 AD |  if_e	jmp	#LR__5210
33698     1C E4 05 F1 | 	add	objptr, #28
3369c     F2 28 02 FB | 	rdlong	local02, objptr
336a0     14 2B 02 F6 | 	mov	local03, local02
336a4     1C E4 85 F1 | 	sub	objptr, #28
336a8     13 2A 46 F7 | 	zerox	local03, #19
336ac     14 28 46 F0 | 	shr	local02, #20
336b0     02 28 66 F0 | 	shl	local02, #2
336b4     ED 28 02 F1 | 	add	local02, __methods__
336b8     14 29 02 FB | 	rdlong	local02, local02
336bc     F2 14 02 F6 | 	mov	arg02, objptr
336c0     F2 2C 02 F6 | 	mov	local04, objptr
336c4     15 E5 01 F6 | 	mov	objptr, local03
336c8     2D 28 62 FD | 	call	local02
336cc     16 E5 01 F6 | 	mov	objptr, local04
336d0                 | '     return (i < 0) ? 0 : 1;
336d0     00 FA 55 F2 | 	cmps	result1, #0 wc
336d4     00 26 06 C6 |  if_b	mov	local01, #0
336d8     01 26 06 36 |  if_ae	mov	local01, #1
336dc     13 FB 01 F6 | 	mov	result1, local01
336e0                 | LR__5210
336e0     A7 F0 03 F6 | 	mov	ptra, fp
336e4     B2 00 A0 FD | 	call	#popregs_
336e8                 | __struct__s_vfs_file_t_putchar_ret
336e8     2D 00 64 FD | 	ret
336ec                 | 
336ec                 | __struct__s_vfs_file_t_getchar
336ec     03 4A 05 F6 | 	mov	COUNT_, #3
336f0     A8 00 A0 FD | 	call	#pushregs_
336f4     20 E4 05 F1 | 	add	objptr, #32
336f8     F2 12 0A FB | 	rdlong	arg01, objptr wz
336fc     20 E4 85 F1 | 	sub	objptr, #32
33700     01 FA 65 A6 |  if_e	neg	result1, #1
33704     38 00 90 AD |  if_e	jmp	#LR__5220
33708                 | '     return getcf(__this);
33708     20 E4 05 F1 | 	add	objptr, #32
3370c     F2 26 02 FB | 	rdlong	local01, objptr
33710     13 29 02 F6 | 	mov	local02, local01
33714     20 E4 85 F1 | 	sub	objptr, #32
33718     13 28 46 F7 | 	zerox	local02, #19
3371c     14 26 46 F0 | 	shr	local01, #20
33720     02 26 66 F0 | 	shl	local01, #2
33724     ED 26 02 F1 | 	add	local01, __methods__
33728     13 27 02 FB | 	rdlong	local01, local01
3372c     F2 12 02 F6 | 	mov	arg01, objptr
33730     F2 2A 02 F6 | 	mov	local03, objptr
33734     14 E5 01 F6 | 	mov	objptr, local02
33738     2D 26 62 FD | 	call	local01
3373c     15 E5 01 F6 | 	mov	objptr, local03
33740                 | LR__5220
33740     A7 F0 03 F6 | 	mov	ptra, fp
33744     B2 00 A0 FD | 	call	#popregs_
33748                 | __struct__s_vfs_file_t_getchar_ret
33748     2D 00 64 FD | 	ret
3374c                 | 
3374c                 | __struct___bas_wrap_sender_tx
3374c     03 4A 05 F6 | 	mov	COUNT_, #3
33750     A8 00 A0 FD | 	call	#pushregs_
33754     F2 26 02 FB | 	rdlong	local01, objptr
33758     13 29 02 F6 | 	mov	local02, local01
3375c     13 26 46 F7 | 	zerox	local01, #19
33760     14 28 46 F0 | 	shr	local02, #20
33764     02 28 66 F0 | 	shl	local02, #2
33768     ED 28 02 F1 | 	add	local02, __methods__
3376c     14 29 02 FB | 	rdlong	local02, local02
33770     F2 2A 02 F6 | 	mov	local03, objptr
33774     13 E5 01 F6 | 	mov	objptr, local01
33778     2D 28 62 FD | 	call	local02
3377c     15 E5 01 F6 | 	mov	objptr, local03
33780     01 FA 05 F6 | 	mov	result1, #1
33784     A7 F0 03 F6 | 	mov	ptra, fp
33788     B2 00 A0 FD | 	call	#popregs_
3378c                 | __struct___bas_wrap_sender_tx_ret
3378c     2D 00 64 FD | 	ret
33790                 | 
33790                 | __struct___bas_wrap_sender_rx
33790     03 4A 05 F6 | 	mov	COUNT_, #3
33794     A8 00 A0 FD | 	call	#pushregs_
33798     04 E4 05 F1 | 	add	objptr, #4
3379c     F2 26 02 FB | 	rdlong	local01, objptr
337a0     13 29 02 F6 | 	mov	local02, local01
337a4     04 E4 85 F1 | 	sub	objptr, #4
337a8     13 28 46 F7 | 	zerox	local02, #19
337ac     14 26 46 F0 | 	shr	local01, #20
337b0     02 26 66 F0 | 	shl	local01, #2
337b4     ED 26 02 F1 | 	add	local01, __methods__
337b8     13 27 02 FB | 	rdlong	local01, local01
337bc     F2 2A 02 F6 | 	mov	local03, objptr
337c0     14 E5 01 F6 | 	mov	objptr, local02
337c4     2D 26 62 FD | 	call	local01
337c8     15 E5 01 F6 | 	mov	objptr, local03
337cc     A7 F0 03 F6 | 	mov	ptra, fp
337d0     B2 00 A0 FD | 	call	#popregs_
337d4                 | __struct___bas_wrap_sender_rx_ret
337d4     2D 00 64 FD | 	ret
337d8                 | 
337d8                 | __struct___bas_wrap_sender_close
337d8     03 4A 05 F6 | 	mov	COUNT_, #3
337dc     A8 00 A0 FD | 	call	#pushregs_
337e0     08 E4 05 F1 | 	add	objptr, #8
337e4     F2 26 02 FB | 	rdlong	local01, objptr
337e8     13 29 02 F6 | 	mov	local02, local01
337ec     08 E4 85 F1 | 	sub	objptr, #8
337f0     13 28 46 F7 | 	zerox	local02, #19
337f4     14 26 46 F0 | 	shr	local01, #20
337f8     02 26 66 F0 | 	shl	local01, #2
337fc     ED 26 02 F1 | 	add	local01, __methods__
33800     13 27 02 FB | 	rdlong	local01, local01
33804     F2 2A 02 F6 | 	mov	local03, objptr
33808     14 E5 01 F6 | 	mov	objptr, local02
3380c     2D 26 62 FD | 	call	local01
33810     15 E5 01 F6 | 	mov	objptr, local03
33814     A7 F0 03 F6 | 	mov	ptra, fp
33818     B2 00 A0 FD | 	call	#popregs_
3381c                 | __struct___bas_wrap_sender_close_ret
3381c     2D 00 64 FD | 	ret
33820                 | 
33820                 | LR__5230
33820     2F          | 	byte	"/"
33821     00          | 	byte	0
33822                 | LR__5231
33822     69 6E 66    | 	byte	"inf"
33825     00          | 	byte	0
33826                 | LR__5232
33826     6E 61 6E    | 	byte	"nan"
33829     00          | 	byte	0
3382a                 | LR__5233
3382a                 | 	byte	
3382a     00          | 	byte	0
3382b                 | LR__5234
3382b                 | 	byte	
3382b     00          | 	byte	0
3382c                 | LR__5235
3382c                 | 	byte	
3382c     00          | 	byte	0
3382d                 | LR__5236
3382d                 | 	byte	
3382d     00          | 	byte	0
3382e                 | LR__5237
3382e                 | 	byte	
3382e     00          | 	byte	0
3382f                 | LR__5238
3382f                 | 	byte	
3382f     00          | 	byte	0
33830                 | LR__5239
33830                 | 	byte	
33830     00          | 	byte	0
33831                 | LR__5240
33831                 | 	byte	
33831     00          | 	byte	0
33832                 | LR__5241
33832     00          | 	byte	0
33833     00          | 	byte	0
33834                 | LR__5242
33834     00          | 	byte	0
33835     00          | 	byte	0
33836                 | LR__5243
33836     00          | 	byte	0
33837     00          | 	byte	0
33838                 | LR__5244
33838     20 21 21 21 
3383c     20 63 6F 72 
33840     72 75 70 74 
33844     65 64 20 68 
33848     65 61 70 3F 
3384c     3F 3F 20 21 
33850     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
33853     00          | 	byte	0
33854                 | LR__5245
33854     20 21 21 21 
33858     20 6F 75 74 
3385c     20 6F 66 20 
33860     68 65 61 70 
33864     20 6D 65 6D 
33868     6F 72 79 20 
3386c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
33870     00          | 	byte	0
33871                 | LR__5246
33871     20 21 21 21 
33875     20 63 6F 72 
33879     72 75 70 74 
3387d     65 64 20 68 
33881     65 61 70 20 
33885     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
33889     00          | 	byte	0
3388a                 | LR__5247
3388a     00          | 	byte	0
3388b     00          | 	byte	0
3388c                 | LR__5248
3388c     2E          | 	byte	"."
3388d     00          | 	byte	0
3388e                 | LR__5249
3388e     00          | 	byte	0
3388f     00          | 	byte	0
33890                 | LR__5250
33890     00          | 	byte	0
33891     00          | 	byte	0
33892                 | LR__5251
33892     00          | 	byte	0
33893     00          | 	byte	0
33894                 | LR__5252
33894     2A 3A 3C 3E 
33898     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
3389c     00          | 	byte	0
3389d                 | LR__5253
3389d     2B 2C 3B 3D 
338a1     5B 5D       | 	byte	"+,;=[]"
338a3     00          | 	byte	0
338a4                 | LR__5254
338a4     46 41 54 33 
338a8     32 20 20 20 | 	byte	"FAT32   "
338ac     00          | 	byte	0
338ad                 | LR__5255
338ad     54 5A       | 	byte	"TZ"
338af     00          | 	byte	0
338b0                 | LR__5256
338b0     00          | 	byte	0
338b1     00          | 	byte	0
338b2                 | LR__5257
338b2                 | 	byte	
338b2     00          | 	byte	0
338b3                 | LR__5258
338b3                 | 	byte	
338b3     00          | 	byte	0
338b4                 | LR__5259
338b4                 | 	byte	
338b4     00          | 	byte	0
338b5                 | LR__5260
338b5                 | 	byte	
338b5     00          | 	byte	0
338b6                 | LR__5261
338b6     22          | 	byte	34
338b7     00          | 	byte	0
338b8                 | LR__5262
338b8     22          | 	byte	34
338b9     00          | 	byte	0
338ba                 | LR__5263
338ba     3A          | 	byte	":"
338bb     00          | 	byte	0
338bc                 | LR__5264
338bc                 | 	byte	
338bc     00          | 	byte	0
338bd                 | LR__5265
338bd                 | 	byte	
338bd     00          | 	byte	0
338be                 | LR__5266
338be                 | 	byte	
338be     00          | 	byte	0
338bf                 | LR__5267
338bf                 | 	byte	
338bf     00          | 	byte	0
338c0                 | LR__5268
338c0                 | 	byte	
338c0     00          | 	byte	0
338c1                 | LR__5269
338c1                 | 	byte	
338c1     00          | 	byte	0
338c2                 | LR__5270
338c2                 | 	byte	
338c2     00          | 	byte	0
338c3                 | LR__5271
338c3     30          | 	byte	"0"
338c4     00          | 	byte	0
338c5                 | LR__5272
338c5     22          | 	byte	34
338c6     00          | 	byte	0
338c7                 | LR__5273
338c7     22          | 	byte	34
338c8     00          | 	byte	0
338c9                 | LR__5274
338c9     22          | 	byte	34
338ca     00          | 	byte	0
338cb                 | LR__5275
338cb     22          | 	byte	34
338cc     00          | 	byte	0
338cd                 | LR__5276
338cd     22          | 	byte	34
338ce     00          | 	byte	0
338cf                 | LR__5277
338cf     3E          | 	byte	">"
338d0     00          | 	byte	0
338d1                 | LR__5278
338d1     3C          | 	byte	"<"
338d2     00          | 	byte	0
338d3                 | LR__5279
338d3     2B          | 	byte	"+"
338d4     00          | 	byte	0
338d5                 | LR__5280
338d5     2D          | 	byte	"-"
338d6     00          | 	byte	0
338d7                 | LR__5281
338d7     2A          | 	byte	"*"
338d8     00          | 	byte	0
338d9                 | LR__5282
338d9     2F          | 	byte	"/"
338da     00          | 	byte	0
338db                 | LR__5283
338db     5E          | 	byte	"^"
338dc     00          | 	byte	0
338dd                 | LR__5284
338dd     3D          | 	byte	"="
338de     00          | 	byte	0
338df                 | LR__5285
338df     2B          | 	byte	"+"
338e0     00          | 	byte	0
338e1                 | LR__5286
338e1     2B          | 	byte	"+"
338e2     00          | 	byte	0
338e3                 | LR__5287
338e3     2D          | 	byte	"-"
338e4     00          | 	byte	0
338e5                 | LR__5288
338e5     2D          | 	byte	"-"
338e6     00          | 	byte	0
338e7                 | LR__5289
338e7     3C          | 	byte	"<"
338e8     00          | 	byte	0
338e9                 | LR__5290
338e9     3E          | 	byte	">"
338ea     00          | 	byte	0
338eb                 | LR__5291
338eb     22          | 	byte	34
338ec     00          | 	byte	0
338ed                 | LR__5292
338ed     22          | 	byte	34
338ee     00          | 	byte	0
338ef                 | LR__5293
338ef     65 6C 73 65 | 	byte	"else"
338f3     00          | 	byte	0
338f4                 | LR__5294
338f4     74 68 65 6E | 	byte	"then"
338f8     00          | 	byte	0
338f9                 | LR__5295
338f9     2E          | 	byte	"."
338fa     00          | 	byte	0
338fb                 | LR__5296
338fb     3F          | 	byte	"?"
338fc     00          | 	byte	0
338fd                 | LR__5297
338fd     3F          | 	byte	"?"
338fe     00          | 	byte	0
338ff                 | LR__5298
338ff     6D 6F 75 73 
33903     65          | 	byte	"mouse"
33904     00          | 	byte	0
33905                 | LR__5299
33905     63 75 72 73 
33909     6F 72       | 	byte	"cursor"
3390b     00          | 	byte	0
3390c                 | LR__5300
3390c     63 6C 69 63 
33910     6B          | 	byte	"click"
33911     00          | 	byte	0
33912                 | LR__5301
33912     6F 6E       | 	byte	"on"
33914     00          | 	byte	0
33915                 | LR__5302
33915     31          | 	byte	"1"
33916     00          | 	byte	0
33917                 | LR__5303
33917     6F 66 66    | 	byte	"off"
3391a     00          | 	byte	0
3391b                 | LR__5304
3391b     30          | 	byte	"0"
3391c     00          | 	byte	0
3391d                 | LR__5305
3391d     6D 6F 64 65 | 	byte	"mode"
33921     00          | 	byte	0
33922                 | LR__5306
33922     6D 2E       | 	byte	"m."
33924     00          | 	byte	0
33925                 | LR__5307
33925     61 74 61 72 
33929     69          | 	byte	"atari"
3392a     00          | 	byte	0
3392b                 | LR__5308
3392b     30          | 	byte	"0"
3392c     00          | 	byte	0
3392d                 | LR__5309
3392d     70 63 5F 61 
33931     6D 62 65 72 | 	byte	"pc_amber"
33935     00          | 	byte	0
33936                 | LR__5310
33936     31          | 	byte	"1"
33937     00          | 	byte	0
33938                 | LR__5311
33938     70 63 5F 67 
3393c     72 65 65 6E | 	byte	"pc_green"
33940     00          | 	byte	0
33941                 | LR__5312
33941     32          | 	byte	"2"
33942     00          | 	byte	0
33943                 | LR__5313
33943     70 63 5F 77 
33947     68 69 74 65 | 	byte	"pc_white"
3394b     00          | 	byte	0
3394c                 | LR__5314
3394c     33          | 	byte	"3"
3394d     00          | 	byte	0
3394e                 | LR__5315
3394e     73 74       | 	byte	"st"
33950     00          | 	byte	0
33951                 | LR__5316
33951     34          | 	byte	"4"
33952     00          | 	byte	0
33953                 | LR__5317
33953                 | 	byte	
33953     00          | 	byte	0
33954                 | LR__5318
33954     6C 6F 61 64 | 	byte	"load"
33958     00          | 	byte	0
33959                 | LR__5319
33959     73 61 76 65 | 	byte	"save"
3395d     00          | 	byte	0
3395e                 | LR__5320
3395e     62 72 75 6E | 	byte	"brun"
33962     00          | 	byte	0
33963                 | LR__5321
33963     72 75 6E    | 	byte	"run"
33966     00          | 	byte	0
33967                 | LR__5322
33967     6C 6F 2E    | 	byte	"lo."
3396a     00          | 	byte	0
3396b                 | LR__5323
3396b     73 2E       | 	byte	"s."
3396d     00          | 	byte	0
3396e                 | LR__5324
3396e     62 72 2E    | 	byte	"br."
33971     00          | 	byte	0
33972                 | LR__5325
33972     65 6E 74 65 
33976     72          | 	byte	"enter"
33977     00          | 	byte	0
33978                 | LR__5326
33978     65 2E       | 	byte	"e."
3397a     00          | 	byte	0
3397b                 | LR__5327
3397b     64 65 6C 65 
3397f     74 65       | 	byte	"delete"
33981     00          | 	byte	0
33982                 | LR__5328
33982     6D 6B 64 69 
33986     72          | 	byte	"mkdir"
33987     00          | 	byte	0
33988                 | LR__5329
33988     63 64       | 	byte	"cd"
3398a     00          | 	byte	0
3398b                 | LR__5330
3398b     63 64 2E    | 	byte	"cd."
3398e     00          | 	byte	0
3398f                 | LR__5331
3398f     2E          | 	byte	"."
33990     00          | 	byte	0
33991                 | LR__5332
33991     2E 2E       | 	byte	".."
33993     00          | 	byte	0
33994                 | LR__5333
33994     63 64       | 	byte	"cd"
33996     00          | 	byte	0
33997                 | LR__5334
33997     2F          | 	byte	"/"
33998     00          | 	byte	0
33999                 | LR__5335
33999                 | 	byte	
33999     00          | 	byte	0
3399a                 | LR__5336
3399a                 | 	byte	
3399a     00          | 	byte	0
3399b                 | LR__5337
3399b                 | 	byte	
3399b     00          | 	byte	0
3399c                 | LR__5338
3399c                 | 	byte	
3399c     00          | 	byte	0
3399d                 | LR__5339
3399d                 | 	byte	
3399d     00          | 	byte	0
3399e                 | LR__5340
3399e     52 65 61 64 
339a2     79          | 	byte	"Ready"
339a3     00          | 	byte	0
339a4                 | LR__5341
339a4     2B          | 	byte	"+"
339a5     00          | 	byte	0
339a6                 | LR__5342
339a6     2D          | 	byte	"-"
339a7     00          | 	byte	0
339a8                 | LR__5343
339a8     6F 72       | 	byte	"or"
339aa     00          | 	byte	0
339ab                 | LR__5344
339ab     78 6F 72    | 	byte	"xor"
339ae     00          | 	byte	0
339af                 | LR__5345
339af     2A          | 	byte	"*"
339b0     00          | 	byte	0
339b1                 | LR__5346
339b1     2F          | 	byte	"/"
339b2     00          | 	byte	0
339b3                 | LR__5347
339b3     61 6E 64    | 	byte	"and"
339b6     00          | 	byte	0
339b7                 | LR__5348
339b7     64 69 76    | 	byte	"div"
339ba     00          | 	byte	0
339bb                 | LR__5349
339bb     6D 6F 64    | 	byte	"mod"
339be     00          | 	byte	0
339bf                 | LR__5350
339bf     73 68 6C    | 	byte	"shl"
339c2     00          | 	byte	0
339c3                 | LR__5351
339c3     73 68 72    | 	byte	"shr"
339c6     00          | 	byte	0
339c7                 | LR__5352
339c7     5E          | 	byte	"^"
339c8     00          | 	byte	0
339c9                 | LR__5353
339c9     6E 6F 74    | 	byte	"not"
339cc     00          | 	byte	0
339cd                 | LR__5354
339cd     40          | 	byte	"@"
339ce     00          | 	byte	0
339cf                 | LR__5355
339cf     3D          | 	byte	"="
339d0     00          | 	byte	0
339d1                 | LR__5356
339d1     3E 3D       | 	byte	">="
339d3     00          | 	byte	0
339d4                 | LR__5357
339d4     3C 3D       | 	byte	"<="
339d6     00          | 	byte	0
339d7                 | LR__5358
339d7     3C          | 	byte	"<"
339d8     00          | 	byte	0
339d9                 | LR__5359
339d9     3E          | 	byte	">"
339da     00          | 	byte	0
339db                 | LR__5360
339db     3C 3E       | 	byte	"<>"
339dd     00          | 	byte	0
339de                 | LR__5361
339de     2B 2B       | 	byte	"++"
339e0     00          | 	byte	0
339e1                 | LR__5362
339e1     2D 2D       | 	byte	"--"
339e3     00          | 	byte	0
339e4                 | LR__5363
339e4     23          | 	byte	"#"
339e5     00          | 	byte	0
339e6                 | LR__5364
339e6     30          | 	byte	"0"
339e7     00          | 	byte	0
339e8                 | LR__5365
339e8     39          | 	byte	"9"
339e9     00          | 	byte	0
339ea                 | LR__5366
339ea     23 72 65 61 
339ee     64          | 	byte	"#read"
339ef     00          | 	byte	0
339f0                 | LR__5367
339f0     23 77 72 69 
339f4     74 65       | 	byte	"#write"
339f6     00          | 	byte	0
339f7                 | LR__5368
339f7     23 61 70 70 
339fb     65 6E 64    | 	byte	"#append"
339fe     00          | 	byte	0
339ff                 | LR__5369
339ff     23          | 	byte	"#"
33a00     00          | 	byte	0
33a01                 | LR__5370
33a01     23          | 	byte	"#"
33a02     00          | 	byte	0
33a03                 | LR__5371
33a03     2D          | 	byte	"-"
33a04     00          | 	byte	0
33a05                 | LR__5372
33a05     30          | 	byte	"0"
33a06     00          | 	byte	0
33a07                 | LR__5373
33a07     63          | 	byte	"c"
33a08     00          | 	byte	0
33a09                 | LR__5374
33a09     63 23       | 	byte	"c#"
33a0b     00          | 	byte	0
33a0c                 | LR__5375
33a0c     64          | 	byte	"d"
33a0d     00          | 	byte	0
33a0e                 | LR__5376
33a0e     64 23       | 	byte	"d#"
33a10     00          | 	byte	0
33a11                 | LR__5377
33a11     65          | 	byte	"e"
33a12     00          | 	byte	0
33a13                 | LR__5378
33a13     66          | 	byte	"f"
33a14     00          | 	byte	0
33a15                 | LR__5379
33a15     66 23       | 	byte	"f#"
33a17     00          | 	byte	0
33a18                 | LR__5380
33a18     67          | 	byte	"g"
33a19     00          | 	byte	0
33a1a                 | LR__5381
33a1a     67 23       | 	byte	"g#"
33a1c     00          | 	byte	0
33a1d                 | LR__5382
33a1d     61          | 	byte	"a"
33a1e     00          | 	byte	0
33a1f                 | LR__5383
33a1f     61 23       | 	byte	"a#"
33a21     00          | 	byte	0
33a22                 | LR__5384
33a22     68          | 	byte	"h"
33a23     00          | 	byte	0
33a24                 | LR__5385
33a24     62          | 	byte	"b"
33a25     00          | 	byte	0
33a26                 | LR__5386
33a26     2B          | 	byte	"+"
33a27     00          | 	byte	0
33a28                 | LR__5387
33a28     2D          | 	byte	"-"
33a29     00          | 	byte	0
33a2a                 | LR__5388
33a2a     3D          | 	byte	"="
33a2b     00          | 	byte	0
33a2c                 | LR__5389
33a2c     2C          | 	byte	","
33a2d     00          | 	byte	0
33a2e                 | LR__5390
33a2e     2A          | 	byte	"*"
33a2f     00          | 	byte	0
33a30                 | LR__5391
33a30     2F          | 	byte	"/"
33a31     00          | 	byte	0
33a32                 | LR__5392
33a32     3B          | 	byte	";"
33a33     00          | 	byte	0
33a34                 | LR__5393
33a34     22          | 	byte	34
33a35     00          | 	byte	0
33a36                 | LR__5394
33a36     5E          | 	byte	"^"
33a37     00          | 	byte	0
33a38                 | LR__5395
33a38     29          | 	byte	")"
33a39     00          | 	byte	0
33a3a                 | LR__5396
33a3a     28          | 	byte	"("
33a3b     00          | 	byte	0
33a3c                 | LR__5397
33a3c     3A          | 	byte	":"
33a3d     00          | 	byte	0
33a3e                 | LR__5398
33a3e     20          | 	byte	" "
33a3f     00          | 	byte	0
33a40                 | LR__5399
33a40     3E          | 	byte	">"
33a41     00          | 	byte	0
33a42                 | LR__5400
33a42     3C          | 	byte	"<"
33a43     00          | 	byte	0
33a44                 | LR__5401
33a44     3D          | 	byte	"="
33a45     00          | 	byte	0
33a46                 | LR__5402
33a46     62 65 65 70 | 	byte	"beep"
33a4a     00          | 	byte	0
33a4b                 | LR__5403
33a4b     62 2E       | 	byte	"b."
33a4d     00          | 	byte	0
33a4e                 | LR__5404
33a4e     62 6C 69 74 | 	byte	"blit"
33a52     00          | 	byte	0
33a53                 | LR__5405
33a53     62 6F 78    | 	byte	"box"
33a56     00          | 	byte	0
33a57                 | LR__5406
33a57     62 72 75 6E | 	byte	"brun"
33a5b     00          | 	byte	0
33a5c                 | LR__5407
33a5c     62 72 2E    | 	byte	"br."
33a5f     00          | 	byte	0
33a60                 | LR__5408
33a60     63 64       | 	byte	"cd"
33a62     00          | 	byte	0
33a63                 | LR__5409
33a63     63 68 61 6E 
33a67     67 65 66 72 
33a6b     65 71       | 	byte	"changefreq"
33a6d     00          | 	byte	0
33a6e                 | LR__5410
33a6e     63 66 2E    | 	byte	"cf."
33a71     00          | 	byte	0
33a72                 | LR__5411
33a72     63 68 61 6E 
33a76     67 65 70 61 
33a7a     6E          | 	byte	"changepan"
33a7b     00          | 	byte	0
33a7c                 | LR__5412
33a7c     63 70 2E    | 	byte	"cp."
33a7f     00          | 	byte	0
33a80                 | LR__5413
33a80     63 68 61 6E 
33a84     67 65 76 6F 
33a88     6C          | 	byte	"changevol"
33a89     00          | 	byte	0
33a8a                 | LR__5414
33a8a     63 76 2E    | 	byte	"cv."
33a8d     00          | 	byte	0
33a8e                 | LR__5415
33a8e     63 68 61 6E 
33a92     67 65 77 61 
33a96     76 65       | 	byte	"changewave"
33a98     00          | 	byte	0
33a99                 | LR__5416
33a99     63 77 2E    | 	byte	"cw."
33a9c     00          | 	byte	0
33a9d                 | LR__5417
33a9d     63 69 72 63 
33aa1     6C 65       | 	byte	"circle"
33aa3     00          | 	byte	0
33aa4                 | LR__5418
33aa4     63 69 2E    | 	byte	"ci."
33aa7     00          | 	byte	0
33aa8                 | LR__5419
33aa8     63 6C 69 63 
33aac     6B          | 	byte	"click"
33aad     00          | 	byte	0
33aae                 | LR__5420
33aae     63 6C 6F 73 
33ab2     65          | 	byte	"close"
33ab3     00          | 	byte	0
33ab4                 | LR__5421
33ab4     63 6C 73    | 	byte	"cls"
33ab7     00          | 	byte	0
33ab8                 | LR__5422
33ab8     63 6F 6C 6F 
33abc     72          | 	byte	"color"
33abd     00          | 	byte	0
33abe                 | LR__5423
33abe     63 2E       | 	byte	"c."
33ac0     00          | 	byte	0
33ac1                 | LR__5424
33ac1     63 73 61 76 
33ac5     65          | 	byte	"csave"
33ac6     00          | 	byte	0
33ac7                 | LR__5425
33ac7     63 73 2E    | 	byte	"cs."
33aca     00          | 	byte	0
33acb                 | LR__5426
33acb     63 75 72 73 
33acf     6F 72       | 	byte	"cursor"
33ad1     00          | 	byte	0
33ad2                 | LR__5427
33ad2     64 65 66 73 
33ad6     6E 64       | 	byte	"defsnd"
33ad8     00          | 	byte	0
33ad9                 | LR__5428
33ad9     64 65 66 65 
33add     6E 76       | 	byte	"defenv"
33adf     00          | 	byte	0
33ae0                 | LR__5429
33ae0     64 65 66 73 
33ae4     70 72 69 74 
33ae8     65          | 	byte	"defsprite"
33ae9     00          | 	byte	0
33aea                 | LR__5430
33aea     64 73 2E    | 	byte	"ds."
33aed     00          | 	byte	0
33aee                 | LR__5431
33aee     64 65 67    | 	byte	"deg"
33af1     00          | 	byte	0
33af2                 | LR__5432
33af2     64 65 6C 65 
33af6     74 65       | 	byte	"delete"
33af8     00          | 	byte	0
33af9                 | LR__5433
33af9     64 69 6D    | 	byte	"dim"
33afc     00          | 	byte	0
33afd                 | LR__5434
33afd     64 69 72    | 	byte	"dir"
33b00     00          | 	byte	0
33b01                 | LR__5435
33b01     64 70 6F 6B 
33b05     65          | 	byte	"dpoke"
33b06     00          | 	byte	0
33b07                 | LR__5436
33b07     64 72 61 77 | 	byte	"draw"
33b0b     00          | 	byte	0
33b0c                 | LR__5437
33b0c     64 72 61 77 
33b10     74 6F       | 	byte	"drawto"
33b12     00          | 	byte	0
33b13                 | LR__5438
33b13     64 72 2E    | 	byte	"dr."
33b16     00          | 	byte	0
33b17                 | LR__5439
33b17     65 6C 73 65 | 	byte	"else"
33b1b     00          | 	byte	0
33b1c                 | LR__5440
33b1c     65 6E 64    | 	byte	"end"
33b1f     00          | 	byte	0
33b20                 | LR__5441
33b20     65 6E 74 65 
33b24     72          | 	byte	"enter"
33b25     00          | 	byte	0
33b26                 | LR__5442
33b26     65 2E       | 	byte	"e."
33b28     00          | 	byte	0
33b29                 | LR__5443
33b29     66 63 69 72 
33b2d     63 6C 65    | 	byte	"fcircle"
33b30     00          | 	byte	0
33b31                 | LR__5444
33b31     66 63 2E    | 	byte	"fc."
33b34     00          | 	byte	0
33b35                 | LR__5445
33b35     66 69 6C 6C | 	byte	"fill"
33b39     00          | 	byte	0
33b3a                 | LR__5446
33b3a     66 69 2E    | 	byte	"fi."
33b3d     00          | 	byte	0
33b3e                 | LR__5447
33b3e     66 6F 6E 74 | 	byte	"font"
33b42     00          | 	byte	0
33b43                 | LR__5448
33b43     66 6F 72    | 	byte	"for"
33b46     00          | 	byte	0
33b47                 | LR__5449
33b47     66 2E       | 	byte	"f."
33b49     00          | 	byte	0
33b4a                 | LR__5450
33b4a     66 72 61 6D 
33b4e     65          | 	byte	"frame"
33b4f     00          | 	byte	0
33b50                 | LR__5451
33b50     66 72 2E    | 	byte	"fr."
33b53     00          | 	byte	0
33b54                 | LR__5452
33b54     67 65 74    | 	byte	"get"
33b57     00          | 	byte	0
33b58                 | LR__5453
33b58     67 6F 73 75 
33b5c     62          | 	byte	"gosub"
33b5d     00          | 	byte	0
33b5e                 | LR__5454
33b5e     67 6F 74 6F | 	byte	"goto"
33b62     00          | 	byte	0
33b63                 | LR__5455
33b63     67 2E       | 	byte	"g."
33b65     00          | 	byte	0
33b66                 | LR__5456
33b66     69 66       | 	byte	"if"
33b68     00          | 	byte	0
33b69                 | LR__5457
33b69     69 6E 6B    | 	byte	"ink"
33b6c     00          | 	byte	0
33b6d                 | LR__5458
33b6d     69 2E       | 	byte	"i."
33b6f     00          | 	byte	0
33b70                 | LR__5459
33b70     69 6E 70 75 
33b74     74          | 	byte	"input"
33b75     00          | 	byte	0
33b76                 | LR__5460
33b76     6C 69 73 74 | 	byte	"list"
33b7a     00          | 	byte	0
33b7b                 | LR__5461
33b7b     6C 2E       | 	byte	"l."
33b7d     00          | 	byte	0
33b7e                 | LR__5462
33b7e     6C 6F 61 64 | 	byte	"load"
33b82     00          | 	byte	0
33b83                 | LR__5463
33b83     6C 6F 2E    | 	byte	"lo."
33b86     00          | 	byte	0
33b87                 | LR__5464
33b87     6C 70 6F 6B 
33b8b     65          | 	byte	"lpoke"
33b8c     00          | 	byte	0
33b8d                 | LR__5465
33b8d     6D 6B 64 69 
33b91     72          | 	byte	"mkdir"
33b92     00          | 	byte	0
33b93                 | LR__5466
33b93     6D 6F 64 65 | 	byte	"mode"
33b97     00          | 	byte	0
33b98                 | LR__5467
33b98     6D 2E       | 	byte	"m."
33b9a     00          | 	byte	0
33b9b                 | LR__5468
33b9b     6D 6F 75 73 
33b9f     65          | 	byte	"mouse"
33ba0     00          | 	byte	0
33ba1                 | LR__5469
33ba1     6E 65 77    | 	byte	"new"
33ba4     00          | 	byte	0
33ba5                 | LR__5470
33ba5     6E 65 78 74 | 	byte	"next"
33ba9     00          | 	byte	0
33baa                 | LR__5471
33baa     6E 2E       | 	byte	"n."
33bac     00          | 	byte	0
33bad                 | LR__5472
33bad     6F 6E       | 	byte	"on"
33baf     00          | 	byte	0
33bb0                 | LR__5473
33bb0     6F 70 65 6E | 	byte	"open"
33bb4     00          | 	byte	0
33bb5                 | LR__5474
33bb5     70 61 70 65 
33bb9     72          | 	byte	"paper"
33bba     00          | 	byte	0
33bbb                 | LR__5475
33bbb     70 61 2E    | 	byte	"pa."
33bbe     00          | 	byte	0
33bbf                 | LR__5476
33bbf     70 69 6E 66 
33bc3     6C 6F 61 74 | 	byte	"pinfloat"
33bc7     00          | 	byte	0
33bc8                 | LR__5477
33bc8     70 69 6E 68 
33bcc     69          | 	byte	"pinhi"
33bcd     00          | 	byte	0
33bce                 | LR__5478
33bce     70 69 6E 6C 
33bd2     6F          | 	byte	"pinlo"
33bd3     00          | 	byte	0
33bd4                 | LR__5479
33bd4     70 69 6E 73 
33bd8     74 61 72 74 | 	byte	"pinstart"
33bdc     00          | 	byte	0
33bdd                 | LR__5480
33bdd     70 69 6E 74 
33be1     6F 67 67 6C 
33be5     65          | 	byte	"pintoggle"
33be6     00          | 	byte	0
33be7                 | LR__5481
33be7     70 69 6E 77 
33beb     72 69 74 65 | 	byte	"pinwrite"
33bef     00          | 	byte	0
33bf0                 | LR__5482
33bf0     70 6C 61 79 | 	byte	"play"
33bf4     00          | 	byte	0
33bf5                 | LR__5483
33bf5     70 2E       | 	byte	"p."
33bf7     00          | 	byte	0
33bf8                 | LR__5484
33bf8     70 6C 6F 74 | 	byte	"plot"
33bfc     00          | 	byte	0
33bfd                 | LR__5485
33bfd     70 6C 2E    | 	byte	"pl."
33c00     00          | 	byte	0
33c01                 | LR__5486
33c01     70 6F 6B 65 | 	byte	"poke"
33c05     00          | 	byte	0
33c06                 | LR__5487
33c06     70 6F 70    | 	byte	"pop"
33c09     00          | 	byte	0
33c0a                 | LR__5488
33c0a     70 6F 73 69 
33c0e     74 69 6F 6E | 	byte	"position"
33c12     00          | 	byte	0
33c13                 | LR__5489
33c13     70 6F 73 2E | 	byte	"pos."
33c17     00          | 	byte	0
33c18                 | LR__5490
33c18     70 72 69 6E 
33c1c     74          | 	byte	"print"
33c1d     00          | 	byte	0
33c1e                 | LR__5491
33c1e     3F          | 	byte	"?"
33c1f     00          | 	byte	0
33c20                 | LR__5492
33c20     70 75 74    | 	byte	"put"
33c23     00          | 	byte	0
33c24                 | LR__5493
33c24     72 61 64    | 	byte	"rad"
33c27     00          | 	byte	0
33c28                 | LR__5494
33c28     72 65 6C 65 
33c2c     61 73 65    | 	byte	"release"
33c2f     00          | 	byte	0
33c30                 | LR__5495
33c30     72 65 6D    | 	byte	"rem"
33c33     00          | 	byte	0
33c34                 | LR__5496
33c34     27          | 	byte	"'"
33c35     00          | 	byte	0
33c36                 | LR__5497
33c36     72 65 74 75 
33c3a     72 6E       | 	byte	"return"
33c3c     00          | 	byte	0
33c3d                 | LR__5498
33c3d     72 75 6E    | 	byte	"run"
33c40     00          | 	byte	0
33c41                 | LR__5499
33c41     73 61 76 65 | 	byte	"save"
33c45     00          | 	byte	0
33c46                 | LR__5500
33c46     73 2E       | 	byte	"s."
33c48     00          | 	byte	0
33c49                 | LR__5501
33c49     73 65 74 64 
33c4d     65 6C 61 79 | 	byte	"setdelay"
33c51     00          | 	byte	0
33c52                 | LR__5502
33c52     73 64 2E    | 	byte	"sd."
33c55     00          | 	byte	0
33c56                 | LR__5503
33c56     73 65 74 65 
33c5a     6E 76       | 	byte	"setenv"
33c5c     00          | 	byte	0
33c5d                 | LR__5504
33c5d     73 65 2E    | 	byte	"se."
33c60     00          | 	byte	0
33c61                 | LR__5505
33c61     73 65 74 6C 
33c65     65 6E       | 	byte	"setlen"
33c67     00          | 	byte	0
33c68                 | LR__5506
33c68     73 6C 2E    | 	byte	"sl."
33c6b     00          | 	byte	0
33c6c                 | LR__5507
33c6c     73 65 74 70 
33c70     61 6E       | 	byte	"setpan"
33c72     00          | 	byte	0
33c73                 | LR__5508
33c73     73 70 2E    | 	byte	"sp."
33c76     00          | 	byte	0
33c77                 | LR__5509
33c77     73 65 74 73 
33c7b     75 73 74 61 
33c7f     69 6E       | 	byte	"setsustain"
33c81     00          | 	byte	0
33c82                 | LR__5510
33c82     73 73 2E    | 	byte	"ss."
33c85     00          | 	byte	0
33c86                 | LR__5511
33c86     73 65 74 76 
33c8a     6F 6C       | 	byte	"setvol"
33c8c     00          | 	byte	0
33c8d                 | LR__5512
33c8d     73 76 2E    | 	byte	"sv."
33c90     00          | 	byte	0
33c91                 | LR__5513
33c91     73 65 74 77 
33c95     61 76 65    | 	byte	"setwave"
33c98     00          | 	byte	0
33c99                 | LR__5514
33c99     73 77 2E    | 	byte	"sw."
33c9c     00          | 	byte	0
33c9d                 | LR__5515
33c9d     73 65 74 77 
33ca1     61 76       | 	byte	"setwav"
33ca3     00          | 	byte	0
33ca4                 | LR__5516
33ca4     73 68 75 74 
33ca8     75 70       | 	byte	"shutup"
33caa     00          | 	byte	0
33cab                 | LR__5517
33cab     73 68 2E    | 	byte	"sh."
33cae     00          | 	byte	0
33caf                 | LR__5518
33caf     73 6F 75 6E 
33cb3     64          | 	byte	"sound"
33cb4     00          | 	byte	0
33cb5                 | LR__5519
33cb5     73 6F 2E    | 	byte	"so."
33cb8     00          | 	byte	0
33cb9                 | LR__5520
33cb9     73 70 72 69 
33cbd     74 65       | 	byte	"sprite"
33cbf     00          | 	byte	0
33cc0                 | LR__5521
33cc0     73 70 72 2E | 	byte	"spr."
33cc4     00          | 	byte	0
33cc5                 | LR__5522
33cc5     74 68 65 6E | 	byte	"then"
33cc9     00          | 	byte	0
33cca                 | LR__5523
33cca     77 61 69 74 
33cce     6D 73       | 	byte	"waitms"
33cd0     00          | 	byte	0
33cd1                 | LR__5524
33cd1     77 2E       | 	byte	"w."
33cd3     00          | 	byte	0
33cd4                 | LR__5525
33cd4     77 61 69 74 
33cd8     63 6C 6F 63 
33cdc     6B          | 	byte	"waitclock"
33cdd     00          | 	byte	0
33cde                 | LR__5526
33cde     77 63 2E    | 	byte	"wc."
33ce1     00          | 	byte	0
33ce2                 | LR__5527
33ce2     77 61 69 74 
33ce6     76 62 6C    | 	byte	"waitvbl"
33ce9     00          | 	byte	0
33cea                 | LR__5528
33cea     77 76 2E    | 	byte	"wv."
33ced     00          | 	byte	0
33cee                 | LR__5529
33cee     77 72 70 69 
33cf2     6E          | 	byte	"wrpin"
33cf3     00          | 	byte	0
33cf4                 | LR__5530
33cf4     77 78 70 69 
33cf8     6E          | 	byte	"wxpin"
33cf9     00          | 	byte	0
33cfa                 | LR__5531
33cfa     77 79 70 69 
33cfe     6E          | 	byte	"wypin"
33cff     00          | 	byte	0
33d00                 | LR__5532
33d00     61 62 73    | 	byte	"abs"
33d03     00          | 	byte	0
33d04                 | LR__5533
33d04     61 63 6F 73 | 	byte	"acos"
33d08     00          | 	byte	0
33d09                 | LR__5534
33d09     61 64 72    | 	byte	"adr"
33d0c     00          | 	byte	0
33d0d                 | LR__5535
33d0d     61 64 64 72 | 	byte	"addr"
33d11     00          | 	byte	0
33d12                 | LR__5536
33d12     61 73 63    | 	byte	"asc"
33d15     00          | 	byte	0
33d16                 | LR__5537
33d16     61 73 69 6E | 	byte	"asin"
33d1a     00          | 	byte	0
33d1b                 | LR__5538
33d1b     61 74 6E    | 	byte	"atn"
33d1e     00          | 	byte	0
33d1f                 | LR__5539
33d1f     62 69 6E 24 | 	byte	"bin$"
33d23     00          | 	byte	0
33d24                 | LR__5540
33d24     63 68 72 24 | 	byte	"chr$"
33d28     00          | 	byte	0
33d29                 | LR__5541
33d29     63 6F 73    | 	byte	"cos"
33d2c     00          | 	byte	0
33d2d                 | LR__5542
33d2d     64 70 65 65 
33d31     6B          | 	byte	"dpeek"
33d32     00          | 	byte	0
33d33                 | LR__5543
33d33     66 72 61 6D 
33d37     65 62 75 66 | 	byte	"framebuf"
33d3b     00          | 	byte	0
33d3c                 | LR__5544
33d3c     66 62 2E    | 	byte	"fb."
33d3f     00          | 	byte	0
33d40                 | LR__5545
33d40     66 72 65    | 	byte	"fre"
33d43     00          | 	byte	0
33d44                 | LR__5546
33d44     67 65 74 70 
33d48     69 78 65 6C | 	byte	"getpixel"
33d4c     00          | 	byte	0
33d4d                 | LR__5547
33d4d     67 65 2E    | 	byte	"ge."
33d50     00          | 	byte	0
33d51                 | LR__5548
33d51     67 65 74 65 
33d55     6E 76 73 75 
33d59     73 74 61 69 
33d5d     6E          | 	byte	"getenvsustain"
33d5e     00          | 	byte	0
33d5f                 | LR__5549
33d5f     67 65 74 6E 
33d63     6F 74 65 76 
33d67     61 6C 75 65 | 	byte	"getnotevalue"
33d6b     00          | 	byte	0
33d6c                 | LR__5550
33d6c     67 65 74 74 
33d70     69 6D 65    | 	byte	"gettime"
33d73     00          | 	byte	0
33d74                 | LR__5551
33d74     68 65 78 24 | 	byte	"hex$"
33d78     00          | 	byte	0
33d79                 | LR__5552
33d79     69 6E 6B 65 
33d7d     79 24       | 	byte	"inkey$"
33d7f     00          | 	byte	0
33d80                 | LR__5553
33d80     69 6E 74    | 	byte	"int"
33d83     00          | 	byte	0
33d84                 | LR__5554
33d84     6C 65 66 74 
33d88     24          | 	byte	"left$"
33d89     00          | 	byte	0
33d8a                 | LR__5555
33d8a     6C 65 6E    | 	byte	"len"
33d8d     00          | 	byte	0
33d8e                 | LR__5556
33d8e     6C 6F 67    | 	byte	"log"
33d91     00          | 	byte	0
33d92                 | LR__5557
33d92     6C 70 65 65 
33d96     6B          | 	byte	"lpeek"
33d97     00          | 	byte	0
33d98                 | LR__5558
33d98     6D 69 64 24 | 	byte	"mid$"
33d9c     00          | 	byte	0
33d9d                 | LR__5559
33d9d     6D 6F 75 73 
33da1     65 6B       | 	byte	"mousek"
33da3     00          | 	byte	0
33da4                 | LR__5560
33da4     6D 6F 75 73 
33da8     65 77       | 	byte	"mousew"
33daa     00          | 	byte	0
33dab                 | LR__5561
33dab     6D 6F 75 73 
33daf     65 78       | 	byte	"mousex"
33db1     00          | 	byte	0
33db2                 | LR__5562
33db2     6D 6F 75 73 
33db6     65 79       | 	byte	"mousey"
33db8     00          | 	byte	0
33db9                 | LR__5563
33db9     70 65 65 6B | 	byte	"peek"
33dbd     00          | 	byte	0
33dbe                 | LR__5564
33dbe     70 69 6E 72 
33dc2     65 61 64    | 	byte	"pinread"
33dc5     00          | 	byte	0
33dc6                 | LR__5565
33dc6     72 64 70 69 
33dca     6E          | 	byte	"rdpin"
33dcb     00          | 	byte	0
33dcc                 | LR__5566
33dcc     72 69 67 68 
33dd0     74 24       | 	byte	"right$"
33dd2     00          | 	byte	0
33dd3                 | LR__5567
33dd3     72 71 70 69 
33dd7     6E          | 	byte	"rqpin"
33dd8     00          | 	byte	0
33dd9                 | LR__5568
33dd9     72 6F 75 6E 
33ddd     64          | 	byte	"round"
33dde     00          | 	byte	0
33ddf                 | LR__5569
33ddf     72 6E 64    | 	byte	"rnd"
33de2     00          | 	byte	0
33de3                 | LR__5570
33de3     73 69 6E    | 	byte	"sin"
33de6     00          | 	byte	0
33de7                 | LR__5571
33de7     73 71 72    | 	byte	"sqr"
33dea     00          | 	byte	0
33deb                 | LR__5572
33deb     73 74 69 63 
33def     6B          | 	byte	"stick"
33df0     00          | 	byte	0
33df1                 | LR__5573
33df1     73 74 72 69 
33df5     67          | 	byte	"strig"
33df6     00          | 	byte	0
33df7                 | LR__5574
33df7     73 74 72 24 | 	byte	"str$"
33dfb     00          | 	byte	0
33dfc                 | LR__5575
33dfc     74 61 6E    | 	byte	"tan"
33dff     00          | 	byte	0
33e00                 | LR__5576
33e00     76 61 6C    | 	byte	"val"
33e03     00          | 	byte	0
33e04                 | LR__5577
33e04     76 61 72 70 
33e08     74 72       | 	byte	"varptr"
33e0a     00          | 	byte	0
33e0b                 | LR__5578
33e0b     61          | 	byte	"a"
33e0c     00          | 	byte	0
33e0d                 | LR__5579
33e0d     7A          | 	byte	"z"
33e0e     00          | 	byte	0
33e0f                 | LR__5580
33e0f     5F          | 	byte	"_"
33e10     00          | 	byte	0
33e11                 | LR__5581
33e11     61          | 	byte	"a"
33e12     00          | 	byte	0
33e13                 | LR__5582
33e13     7A          | 	byte	"z"
33e14     00          | 	byte	0
33e15                 | LR__5583
33e15     30          | 	byte	"0"
33e16     00          | 	byte	0
33e17                 | LR__5584
33e17     39          | 	byte	"9"
33e18     00          | 	byte	0
33e19                 | LR__5585
33e19     5F          | 	byte	"_"
33e1a     00          | 	byte	0
33e1b                 | LR__5586
33e1b     2E          | 	byte	"."
33e1c     00          | 	byte	0
33e1d                 | LR__5587
33e1d     61          | 	byte	"a"
33e1e     00          | 	byte	0
33e1f                 | LR__5588
33e1f     7A          | 	byte	"z"
33e20     00          | 	byte	0
33e21                 | LR__5589
33e21     30          | 	byte	"0"
33e22     00          | 	byte	0
33e23                 | LR__5590
33e23     39          | 	byte	"9"
33e24     00          | 	byte	0
33e25                 | LR__5591
33e25     5F          | 	byte	"_"
33e26     00          | 	byte	0
33e27                 | LR__5592
33e27     24          | 	byte	"$"
33e28     00          | 	byte	0
33e29                 | LR__5593
33e29     25          | 	byte	"%"
33e2a     00          | 	byte	0
33e2b                 | LR__5594
33e2b     21          | 	byte	"!"
33e2c     00          | 	byte	0
33e2d                 | LR__5595
33e2d     30          | 	byte	"0"
33e2e     00          | 	byte	0
33e2f                 | LR__5596
33e2f     39          | 	byte	"9"
33e30     00          | 	byte	0
33e31                 | LR__5597
33e31     2E          | 	byte	"."
33e32     00          | 	byte	0
33e33                 | LR__5598
33e33     24          | 	byte	"$"
33e34     00          | 	byte	0
33e35                 | LR__5599
33e35     25          | 	byte	"%"
33e36     00          | 	byte	0
33e37                 | LR__5600
33e37     2D          | 	byte	"-"
33e38     00          | 	byte	0
33e39                 | LR__5601
33e39     2E          | 	byte	"."
33e3a     00          | 	byte	0
33e3b                 | LR__5602
33e3b     24          | 	byte	"$"
33e3c     00          | 	byte	0
33e3d                 | LR__5603
33e3d     25          | 	byte	"%"
33e3e     00          | 	byte	0
33e3f                 | LR__5604
33e3f     30          | 	byte	"0"
33e40     00          | 	byte	0
33e41                 | LR__5605
33e41     39          | 	byte	"9"
33e42     00          | 	byte	0
33e43                 | LR__5606
33e43     5F          | 	byte	"_"
33e44     00          | 	byte	0
33e45                 | LR__5607
33e45     2E          | 	byte	"."
33e46     00          | 	byte	0
33e47                 | LR__5608
33e47     45          | 	byte	"E"
33e48     00          | 	byte	0
33e49                 | LR__5609
33e49     65          | 	byte	"e"
33e4a     00          | 	byte	0
33e4b                 | LR__5610
33e4b     2D          | 	byte	"-"
33e4c     00          | 	byte	0
33e4d                 | LR__5611
33e4d     61          | 	byte	"a"
33e4e     00          | 	byte	0
33e4f                 | LR__5612
33e4f     66          | 	byte	"f"
33e50     00          | 	byte	0
33e51                 | LR__5613
33e51     30          | 	byte	"0"
33e52     00          | 	byte	0
33e53                 | LR__5614
33e53     31          | 	byte	"1"
33e54     00          | 	byte	0
33e55                 | LR__5615
33e55     5F          | 	byte	"_"
33e56     00          | 	byte	0
33e57                 | LR__5616
33e57     2D          | 	byte	"-"
33e58     00          | 	byte	0
33e59                 | LR__5617
33e59     65          | 	byte	"e"
33e5a     00          | 	byte	0
33e5b                 | LR__5618
33e5b     2E          | 	byte	"."
33e5c     00          | 	byte	0
33e5d                 | LR__5619
33e5d     45          | 	byte	"E"
33e5e     00          | 	byte	0
33e5f                 | LR__5620
33e5f     65          | 	byte	"e"
33e60     00          | 	byte	0
33e61                 | LR__5621
33e61     30          | 	byte	"0"
33e62     00          | 	byte	0
33e63                 | LR__5622
33e63     39          | 	byte	"9"
33e64     00          | 	byte	0
33e65                 | LR__5623
33e65     24          | 	byte	"$"
33e66     00          | 	byte	0
33e67                 | LR__5624
33e67     25          | 	byte	"%"
33e68     00          | 	byte	0
33e69                 | LR__5625
33e69     2D          | 	byte	"-"
33e6a     00          | 	byte	0
33e6b                 | LR__5626
33e6b     24          | 	byte	"$"
33e6c     00          | 	byte	0
33e6d                 | LR__5627
33e6d     25          | 	byte	"%"
33e6e     00          | 	byte	0
33e6f                 | LR__5628
33e6f     30          | 	byte	"0"
33e70     00          | 	byte	0
33e71                 | LR__5629
33e71     39          | 	byte	"9"
33e72     00          | 	byte	0
33e73                 | LR__5630
33e73     5F          | 	byte	"_"
33e74     00          | 	byte	0
33e75                 | LR__5631
33e75     30          | 	byte	"0"
33e76     00          | 	byte	0
33e77                 | LR__5632
33e77     39          | 	byte	"9"
33e78     00          | 	byte	0
33e79                 | LR__5633
33e79     61          | 	byte	"a"
33e7a     00          | 	byte	0
33e7b                 | LR__5634
33e7b     66          | 	byte	"f"
33e7c     00          | 	byte	0
33e7d                 | LR__5635
33e7d     5F          | 	byte	"_"
33e7e     00          | 	byte	0
33e7f                 | LR__5636
33e7f     30          | 	byte	"0"
33e80     00          | 	byte	0
33e81                 | LR__5637
33e81     31          | 	byte	"1"
33e82     00          | 	byte	0
33e83                 | LR__5638
33e83     5F          | 	byte	"_"
33e84     00          | 	byte	0
33e85                 | LR__5639
33e85     30          | 	byte	"0"
33e86     00          | 	byte	0
33e87                 | LR__5640
33e87     39          | 	byte	"9"
33e88     00          | 	byte	0
33e89                 | LR__5641
33e89     5F          | 	byte	"_"
33e8a     00          | 	byte	0
33e8b                 | LR__5642
33e8b     22          | 	byte	34
33e8c     00          | 	byte	0
33e8d                 | LR__5643
33e8d     22          | 	byte	34
33e8e     00          | 	byte	0
33e8f                 | LR__5644
33e8f     44 69 6D 3A 
33e93     20 61 74 20 
33e97     6C 69 6E 65 
33e9b     20          | 	byte	"Dim: at line "
33e9c     00          | 	byte	0
33e9d                 | LR__5645
33e9d     3A 20 77 61 
33ea1     72 6E 69 6E 
33ea5     67 3A 20 74 
33ea9     68 65 20 76 
33ead     61 72 69 61 
33eb1     62 6C 65 20 
33eb5     65 78 69 73 
33eb9     74 65 64 2E | 	byte	": warning: the variable existed."
33ebd     00          | 	byte	0
33ebe                 | LR__5646
33ebe     28          | 	byte	"("
33ebf     00          | 	byte	0
33ec0                 | LR__5647
33ec0     61 73       | 	byte	"as"
33ec2     00          | 	byte	0
33ec3                 | LR__5648
33ec3     61 73       | 	byte	"as"
33ec5     00          | 	byte	0
33ec6                 | LR__5649
33ec6     2C          | 	byte	","
33ec7     00          | 	byte	0
33ec8                 | LR__5650
33ec8     29          | 	byte	")"
33ec9     00          | 	byte	0
33eca                 | LR__5651
33eca     29          | 	byte	")"
33ecb     00          | 	byte	0
33ecc                 | LR__5652
33ecc     61 73       | 	byte	"as"
33ece     00          | 	byte	0
33ecf                 | LR__5653
33ecf     62 79 74 65 | 	byte	"byte"
33ed3     00          | 	byte	0
33ed4                 | LR__5654
33ed4     75 62 79 74 
33ed8     65          | 	byte	"ubyte"
33ed9     00          | 	byte	0
33eda                 | LR__5655
33eda     73 68 6F 72 
33ede     74          | 	byte	"short"
33edf     00          | 	byte	0
33ee0                 | LR__5656
33ee0     75 73 68 6F 
33ee4     72 74       | 	byte	"ushort"
33ee6     00          | 	byte	0
33ee7                 | LR__5657
33ee7     6C 6F 6E 67 | 	byte	"long"
33eeb     00          | 	byte	0
33eec                 | LR__5658
33eec     69 6E 74 65 
33ef0     67 65 72    | 	byte	"integer"
33ef3     00          | 	byte	0
33ef4                 | LR__5659
33ef4     75 6C 6F 6E 
33ef8     67          | 	byte	"ulong"
33ef9     00          | 	byte	0
33efa                 | LR__5660
33efa     69 6E 74 36 
33efe     34          | 	byte	"int64"
33eff     00          | 	byte	0
33f00                 | LR__5661
33f00     75 69 6E 74 
33f04     36 34       | 	byte	"uint64"
33f06     00          | 	byte	0
33f07                 | LR__5662
33f07     73 69 6E 67 
33f0b     6C 65       | 	byte	"single"
33f0d     00          | 	byte	0
33f0e                 | LR__5663
33f0e     64 6F 75 62 
33f12     6C 65       | 	byte	"double"
33f14     00          | 	byte	0
33f15                 | LR__5664
33f15     73 74 72 69 
33f19     6E 67       | 	byte	"string"
33f1b     00          | 	byte	0
33f1c                 | LR__5665
33f1c     74 6F       | 	byte	"to"
33f1e     00          | 	byte	0
33f1f                 | LR__5666
33f1f     73 74 65 70 | 	byte	"step"
33f23     00          | 	byte	0
33f24                 | LR__5667
33f24     73 2E       | 	byte	"s."
33f26     00          | 	byte	0
33f27                 | LR__5668
33f27     67 6F 74 6F | 	byte	"goto"
33f2b     00          | 	byte	0
33f2c                 | LR__5669
33f2c     67 6F 73 75 
33f30     62          | 	byte	"gosub"
33f31     00          | 	byte	0
33f32                 | LR__5670
33f32     24          | 	byte	"$"
33f33     00          | 	byte	0
33f34                 | LR__5671
33f34     26 68       | 	byte	"&h"
33f36     00          | 	byte	0
33f37                 | LR__5672
33f37     25          | 	byte	"%"
33f38     00          | 	byte	0
33f39                 | LR__5673
33f39     26 62       | 	byte	"&b"
33f3b     00          | 	byte	0
33f3c                 | LR__5674
33f3c                 | 	byte	
33f3c     00          | 	byte	0
33f3d                 | LR__5675
33f3d     61 63 6F 73 
33f41     3A 20       | 	byte	"acos: "
33f43     00          | 	byte	0
33f44                 | LR__5676
33f44     61 73 63 3A 
33f48     20          | 	byte	"asc: "
33f49     00          | 	byte	0
33f4a                 | LR__5677
33f4a     61 73 63 3A 
33f4e     20          | 	byte	"asc: "
33f4f     00          | 	byte	0
33f50                 | LR__5678
33f50     61 73 69 6E 
33f54     3A 20       | 	byte	"asin: "
33f56     00          | 	byte	0
33f57                 | LR__5679
33f57     61 74 6E 3A 
33f5b     20          | 	byte	"atn: "
33f5c     00          | 	byte	0
33f5d                 | LR__5680
33f5d     62 6C 69 74 
33f61     3A 20       | 	byte	"blit: "
33f63     00          | 	byte	0
33f64                 | LR__5681
33f64     62 69 6E 24 
33f68     3A 20       | 	byte	"bin$: "
33f6a     00          | 	byte	0
33f6b                 | LR__5682
33f6b     2F          | 	byte	"/"
33f6c     00          | 	byte	0
33f6d                 | LR__5683
33f6d     2F 73 64 2F 
33f71     62 69 6E 2F | 	byte	"/sd/bin/"
33f75     00          | 	byte	0
33f76                 | LR__5684
33f76     53 79 73 74 
33f7a     65 6D 20 65 
33f7e     72 72 6F 72 
33f82     20          | 	byte	"System error "
33f83     00          | 	byte	0
33f84                 | LR__5685
33f84     3A 20       | 	byte	": "
33f86     00          | 	byte	0
33f87                 | LR__5686
33f87     2A          | 	byte	"*"
33f88     00          | 	byte	0
33f89                 | LR__5687
33f89     2E 2E       | 	byte	".."
33f8b     00          | 	byte	0
33f8c                 | LR__5688
33f8c     2F          | 	byte	"/"
33f8d     00          | 	byte	0
33f8e                 | LR__5689
33f8e     2F          | 	byte	"/"
33f8f     00          | 	byte	0
33f90                 | LR__5690
33f90     53 79 73 74 
33f94     65 6D 20 65 
33f98     72 72 6F 72 
33f9c     20          | 	byte	"System error "
33f9d     00          | 	byte	0
33f9e                 | LR__5691
33f9e     3A 20       | 	byte	": "
33fa0     00          | 	byte	0
33fa1                 | LR__5692
33fa1     43 75 72 72 
33fa5     65 6E 74 20 
33fa9     64 69 72 65 
33fad     63 74 6F 72 
33fb1     79 3A 20    | 	byte	"Current directory: "
33fb4     00          | 	byte	0
33fb5                 | LR__5693
33fb5     2F          | 	byte	"/"
33fb6     00          | 	byte	0
33fb7                 | LR__5694
33fb7     53 79 73 74 
33fbb     65 6D 20 65 
33fbf     72 72 6F 72 
33fc3     20          | 	byte	"System error "
33fc4     00          | 	byte	0
33fc5                 | LR__5695
33fc5     3A 20       | 	byte	": "
33fc7     00          | 	byte	0
33fc8                 | LR__5696
33fc8     43 75 72 72 
33fcc     65 6E 74 20 
33fd0     64 69 72 65 
33fd4     63 74 6F 72 
33fd8     79 3A 20    | 	byte	"Current directory: "
33fdb     00          | 	byte	0
33fdc                 | LR__5697
33fdc     2F          | 	byte	"/"
33fdd     00          | 	byte	0
33fde                 | LR__5698
33fde     2F          | 	byte	"/"
33fdf     00          | 	byte	0
33fe0                 | LR__5699
33fe0     2F          | 	byte	"/"
33fe1     00          | 	byte	0
33fe2                 | LR__5700
33fe2     53 79 73 74 
33fe6     65 6D 20 65 
33fea     72 72 6F 72 
33fee     20          | 	byte	"System error "
33fef     00          | 	byte	0
33ff0                 | LR__5701
33ff0     3A 20       | 	byte	": "
33ff2     00          | 	byte	0
33ff3                 | LR__5702
33ff3     43 75 72 72 
33ff7     65 6E 74 20 
33ffb     64 69 72 65 
33fff     63 74 6F 72 
34003     79 3A 20    | 	byte	"Current directory: "
34006     00          | 	byte	0
34007                 | LR__5703
34007     63 68 72 24 
3400b     3A 20       | 	byte	"chr$: "
3400d     00          | 	byte	0
3400e                 | LR__5704
3400e     63 68 61 6E 
34012     6E 65 6C 23 
34016     20 65 78 70 
3401a     65 63 74 65 
3401e     64          | 	byte	"channel# expected"
3401f     00          | 	byte	0
34020                 | LR__5705
34020     63 6F 73 3A 
34024     20          | 	byte	"cos: "
34025     00          | 	byte	0
34026                 | LR__5706
34026                 | 	byte	
34026     00          | 	byte	0
34027                 | LR__5707
34027                 | 	byte	
34027     00          | 	byte	0
34028                 | LR__5708
34028     2F 73 64 2F 
3402c     6D 65 64 69 
34030     61 2F 68 2F | 	byte	"/sd/media/h/"
34034     00          | 	byte	0
34035                 | LR__5709
34035     53 79 73 74 
34039     65 6D 20 65 
3403d     72 72 6F 72 
34041     20          | 	byte	"System error "
34042     00          | 	byte	0
34043                 | LR__5710
34043     3A 20       | 	byte	": "
34045     00          | 	byte	0
34046                 | LR__5711
34046                 | 	byte	
34046     00          | 	byte	0
34047                 | LR__5712
34047                 | 	byte	
34047     00          | 	byte	0
34048                 | LR__5713
34048     2F 73 64 2F 
3404c     6D 65 64 69 
34050     61 2F 73 2F | 	byte	"/sd/media/s/"
34054     00          | 	byte	0
34055                 | LR__5714
34055     53 79 73 74 
34059     65 6D 20 65 
3405d     72 72 6F 72 
34061     20          | 	byte	"System error "
34062     00          | 	byte	0
34063                 | LR__5715
34063     3A 20       | 	byte	": "
34065     00          | 	byte	0
34066                 | LR__5716
34066     2F          | 	byte	"/"
34067     00          | 	byte	0
34068                 | LR__5717
34068     2F          | 	byte	"/"
34069     00          | 	byte	0
3406a                 | LR__5718
3406a     2F          | 	byte	"/"
3406b     00          | 	byte	0
3406c                 | LR__5719
3406c     43 61 6E 6E 
34070     6F 74 20 64 
34074     65 6C 65 74 
34078     65 20 66 69 
3407c     6C 65 20 6F 
34080     72 20 66 69 
34084     6C 65 20 64 
34088     6F 65 73 6E 
3408c     27 74 20 65 
34090     78 69 73 74 
34094     3A 20 73 79 
34098     73 74 65 6D 
3409c     20 65 72 72 
340a0     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
340a3     00          | 	byte	0
340a4                 | LR__5720
340a4     43 75 72 72 
340a8     65 6E 74 20 
340ac     64 69 72 65 
340b0     63 74 6F 72 
340b4     79 3A 20    | 	byte	"Current directory: "
340b7     00          | 	byte	0
340b8                 | LR__5721
340b8                 | 	byte	
340b8     00          | 	byte	0
340b9                 | LR__5722
340b9     2A          | 	byte	"*"
340ba     00          | 	byte	0
340bb                 | LR__5723
340bb                 | 	byte	
340bb     00          | 	byte	0
340bc                 | LR__5724
340bc     5B 64 69 72 
340c0     5D 20       | 	byte	"[dir] "
340c2     00          | 	byte	0
340c3                 | LR__5725
340c3     4D 6F 72 65 
340c7     20 74 68 61 
340cb     6E 20 31 32 
340cf     38 20 65 6E 
340d3     74 72 69 65 
340d7     73 20 66 6F 
340db     75 6E 64 3A 
340df     20 63 6C 65 
340e3     61 6E 20 79 
340e7     6F 75 72 20 
340eb     64 69 72 65 
340ef     63 74 6F 72 
340f3     79          | 	byte	"More than 128 entries found: clean your directory"
340f4     00          | 	byte	0
340f5                 | LR__5726
340f5     2A          | 	byte	"*"
340f6     00          | 	byte	0
340f7                 | LR__5727
340f7                 | 	byte	
340f7     00          | 	byte	0
340f8                 | LR__5728
340f8     4D 6F 72 65 
340fc     20 74 68 61 
34100     6E 20 31 32 
34104     38 20 65 6E 
34108     74 72 69 65 
3410c     73 20 66 6F 
34110     75 6E 64 3A 
34114     20 63 6C 65 
34118     61 6E 20 79 
3411c     6F 75 72 20 
34120     64 69 72 65 
34124     63 74 6F 72 
34128     79          | 	byte	"More than 128 entries found: clean your directory"
34129     00          | 	byte	0
3412a                 | LR__5729
3412a     45 72 72 6F 
3412e     72 20       | 	byte	"Error "
34130     00          | 	byte	0
34131                 | LR__5730
34131     3A 20       | 	byte	": "
34133     00          | 	byte	0
34134                 | LR__5731
34134     67 65 74 65 
34138     6E 76 73 75 
3413c     73 74 61 69 
34140     6E 3A 20    | 	byte	"getenvsustain: "
34143     00          | 	byte	0
34144                 | LR__5732
34144     67 65 74 70 
34148     69 78 65 6C 
3414c     3A 20       | 	byte	"getpixel: "
3414e     00          | 	byte	0
3414f                 | LR__5733
3414f     68 65 78 24 
34153     3A 20       | 	byte	"hex$: "
34155     00          | 	byte	0
34156                 | LR__5734
34156                 | 	byte	
34156     00          | 	byte	0
34157                 | LR__5735
34157     49 6E 20 69 
3415b     6E 70 75 74 
3415f     3A 20       | 	byte	"In input: "
34161     00          | 	byte	0
34162                 | LR__5736
34162     2C          | 	byte	","
34163     00          | 	byte	0
34164                 | LR__5737
34164                 | 	byte	
34164     00          | 	byte	0
34165                 | LR__5738
34165                 | 	byte	
34165     00          | 	byte	0
34166                 | LR__5739
34166     6C 65 66 74 
3416a     24 3A 20    | 	byte	"left$: "
3416d     00          | 	byte	0
3416e                 | LR__5740
3416e     6C 65 66 74 
34172     24 3A 20    | 	byte	"left$: "
34175     00          | 	byte	0
34176                 | LR__5741
34176     6C 65 6E 3A 
3417a     20          | 	byte	"len: "
3417b     00          | 	byte	0
3417c                 | LR__5742
3417c     6C 65 6E 3A 
34180     20          | 	byte	"len: "
34181     00          | 	byte	0
34182                 | LR__5743
34182                 | 	byte	
34182     00          | 	byte	0
34183                 | LR__5744
34183     2F          | 	byte	"/"
34184     00          | 	byte	0
34185                 | LR__5745
34185     2F          | 	byte	"/"
34186     00          | 	byte	0
34187                 | LR__5746
34187     2E 62 61 73 | 	byte	".bas"
3418b     00          | 	byte	0
3418c                 | LR__5747
3418c     53 79 73 74 
34190     65 6D 20 65 
34194     72 72 6F 72 
34198     20          | 	byte	"System error "
34199     00          | 	byte	0
3419a                 | LR__5748
3419a     3A 20       | 	byte	": "
3419c     00          | 	byte	0
3419d                 | LR__5749
3419d     2E 62 61 73 | 	byte	".bas"
341a1     00          | 	byte	0
341a2                 | LR__5750
341a2     2F          | 	byte	"/"
341a3     00          | 	byte	0
341a4                 | LR__5751
341a4                 | 	byte	
341a4     00          | 	byte	0
341a5                 | LR__5752
341a5     4C 6F 61 64 
341a9     65 64 20    | 	byte	"Loaded "
341ac     00          | 	byte	0
341ad                 | LR__5753
341ad     2F          | 	byte	"/"
341ae     00          | 	byte	0
341af                 | LR__5754
341af     6C 6F 67 3A 
341b3     20          | 	byte	"log: "
341b4     00          | 	byte	0
341b5                 | LR__5755
341b5     6D 69 64 24 
341b9     3A 20       | 	byte	"mid$: "
341bb     00          | 	byte	0
341bc                 | LR__5756
341bc     6D 69 64 24 
341c0     3A 20       | 	byte	"mid$: "
341c2     00          | 	byte	0
341c3                 | LR__5757
341c3     43 61 6E 6E 
341c7     6F 74 20 63 
341cb     72 65 61 74 
341cf     65 20 61 20 
341d3     64 69 72 65 
341d7     63 74 6F 72 
341db     79 3A 20 73 
341df     79 73 74 65 
341e3     6D 20 65 72 
341e7     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
341eb     00          | 	byte	0
341ec                 | LR__5758
341ec     20 42 41 53 
341f0     49 43 20 62 
341f4     79 74 65 73 
341f8     20 66 72 65 
341fc     65          | 	byte	" BASIC bytes free"
341fd     00          | 	byte	0
341fe                 | LR__5759
341fe                 | 	byte	
341fe     00          | 	byte	0
341ff                 | LR__5760
341ff                 | 	byte	
341ff     00          | 	byte	0
34200                 | LR__5761
34200     6E 6F 6E 61 
34204     6D 65 2E 62 
34208     61 73       | 	byte	"noname.bas"
3420a     00          | 	byte	0
3420b                 | LR__5762
3420b     66 69 6C 65 
3420f     6E 61 6D 65 
34213     20 65 78 70 
34217     65 63 74 65 
3421b     64          | 	byte	"filename expected"
3421c     00          | 	byte	0
3421d                 | LR__5763
3421d     72 65 61 64 | 	byte	"read"
34221     00          | 	byte	0
34222                 | LR__5764
34222     77 72 69 74 
34226     65          | 	byte	"write"
34227     00          | 	byte	0
34228                 | LR__5765
34228     61 70 70 65 
3422c     6E 64       | 	byte	"append"
3422e     00          | 	byte	0
3422f                 | LR__5766
3422f     63 68 61 6E 
34233     6E 65 6C 23 
34237     20 65 78 70 
3423b     65 63 74 65 
3423f     64          | 	byte	"channel# expected"
34240     00          | 	byte	0
34241                 | LR__5767
34241     4F 70 65 6E 
34245     3A 20 69 6E 
34249     76 61 6C 69 
3424d     64 20 6D 6F 
34251     64 65       | 	byte	"Open: invalid mode"
34253     00          | 	byte	0
34254                 | LR__5768
34254     50 72 69 6E 
34258     74 20 74 6F 
3425c     20 63 68 61 
34260     6E 6E 65 6C 
34264     20 28 6E 6F 
34268     74 20 79 65 
3426c     74 20 69 6D 
34270     70 6C 65 6D 
34274     65 6E 74 65 
34278     64 29       | 	byte	"Print to channel (not yet implemented)"
3427a     00          | 	byte	0
3427b                 | LR__5769
3427b     72 69 67 68 
3427f     74 24 3A 20 | 	byte	"right$: "
34283     00          | 	byte	0
34284                 | LR__5770
34284     72 69 67 68 
34288     74 24 3A 20 | 	byte	"right$: "
3428c     00          | 	byte	0
3428d                 | LR__5771
3428d     72 6E 64 3A 
34291     20          | 	byte	"rnd: "
34292     00          | 	byte	0
34293                 | LR__5772
34293     72 6E 64 3A 
34297     20          | 	byte	"rnd: "
34298     00          | 	byte	0
34299                 | LR__5773
34299     53 74 6F 70 
3429d     70 65 64 20 
342a1     61 74 20 6C 
342a5     69 6E 65 20 | 	byte	"Stopped at line "
342a9     00          | 	byte	0
342aa                 | LR__5774
342aa                 | 	byte	
342aa     00          | 	byte	0
342ab                 | LR__5775
342ab     2F          | 	byte	"/"
342ac     00          | 	byte	0
342ad                 | LR__5776
342ad                 | 	byte	
342ad     00          | 	byte	0
342ae                 | LR__5777
342ae     53 61 76 65 
342b2     64 20 61 73 
342b6     20          | 	byte	"Saved as "
342b7     00          | 	byte	0
342b8                 | LR__5778
342b8     2F          | 	byte	"/"
342b9     00          | 	byte	0
342ba                 | LR__5779
342ba     73 69 6E 3A 
342be     20          | 	byte	"sin: "
342bf     00          | 	byte	0
342c0                 | LR__5780
342c0     73 71 72 3A 
342c4     20          | 	byte	"sqr: "
342c5     00          | 	byte	0
342c6                 | LR__5781
342c6     73 74 69 63 
342ca     6B 3A 20    | 	byte	"stick: "
342cd     00          | 	byte	0
342ce                 | LR__5782
342ce     73 74 72 69 
342d2     67 3A 20    | 	byte	"strig: "
342d5     00          | 	byte	0
342d6                 | LR__5783
342d6     74 61 6E 3A 
342da     20          | 	byte	"tan: "
342db     00          | 	byte	0
342dc                 | LR__5784
342dc     76 61 6C 3A 
342e0     20          | 	byte	"val: "
342e1     00          | 	byte	0
342e2                 | LR__5785
342e2     76 61 6C 3A 
342e6     20          | 	byte	"val: "
342e7     00          | 	byte	0
342e8                 | LR__5786
342e8     24          | 	byte	"$"
342e9     00          | 	byte	0
342ea                 | LR__5787
342ea     26 68       | 	byte	"&h"
342ec     00          | 	byte	0
342ed                 | LR__5788
342ed     25          | 	byte	"%"
342ee     00          | 	byte	0
342ef                 | LR__5789
342ef     26 62       | 	byte	"&b"
342f1     00          | 	byte	0
342f2                 | LR__5790
342f2                 | 	byte	
342f2     00          | 	byte	0
342f3                 | LR__5791
342f3     45 78 70 65 
342f7     63 74 65 64 
342fb     20 6E 75 6D 
342ff     62 65 72 2C 
34303     20 67 6F 74 
34307     20 73 6F 6D 
3430b     65 74 68 69 
3430f     6E 67 20 65 
34313     6C 73 65    | 	byte	"Expected number, got something else"
34316     00          | 	byte	0
34317                 | LR__5792
34317     43 61 6E 6E 
3431b     6F 74 20 61 
3431f     64 64 20 61 
34323     20 6E 75 6D 
34327     62 65 72 20 
3432b     74 6F 20 61 
3432f     20 73 74 72 
34333     69 6E 67    | 	byte	"Cannot add a number to a string"
34336     00          | 	byte	0
34337                 | LR__5793
34337     43 61 6E 6E 
3433b     6F 74 20 73 
3433f     75 62 73 74 
34343     72 61 63 74 
34347     20 73 74 72 
3434b     69 6E 67 73 | 	byte	"Cannot substract strings"
3434f     00          | 	byte	0
34350                 | LR__5794
34350     55 6E 6B 6E 
34354     6F 77 6E 20 
34358     65 72 72 6F 
3435c     72 20 77 68 
34360     69 6C 65 20 
34364     61 64 64 69 
34368     6E 67       | 	byte	"Unknown error while adding"
3436a     00          | 	byte	0
3436b                 | LR__5795
3436b     55 6E 6B 6E 
3436f     6F 77 6E 20 
34373     65 72 72 6F 
34377     72 20 77 68 
3437b     69 6C 65 20 
3437f     73 75 62 73 
34383     74 72 61 63 
34387     74 69 6E 67 | 	byte	"Unknown error while substracting"
3438b     00          | 	byte	0
3438c                 | LR__5796
3438c     43 61 6E 6E 
34390     6F 74 20 64 
34394     6F 20 6C 6F 
34398     67 69 63 20 
3439c     6F 70 65 72 
343a0     61 74 69 6F 
343a4     6E 20 6F 6E 
343a8     20 73 74 72 
343ac     69 6E 67 20 
343b0     6F 72 20 66 
343b4     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
343b8     00          | 	byte	0
343b9                 | LR__5797
343b9     55 6E 6B 6E 
343bd     6F 77 6E 20 
343c1     65 72 72 6F 
343c5     72 20 77 68 
343c9     69 6C 65 20 
343cd     64 6F 69 6E 
343d1     67 20 6C 6F 
343d5     67 69 63 20 
343d9     6F 70 65 72 
343dd     61 74 69 6F 
343e1     6E          | 	byte	"Unknown error while doing logic operation"
343e2     00          | 	byte	0
343e3                 | LR__5798
343e3     43 61 6E 6E 
343e7     6F 74 20 6D 
343eb     75 6C 74 69 
343ef     70 6C 79 20 
343f3     73 74 72 69 
343f7     6E 67 73    | 	byte	"Cannot multiply strings"
343fa     00          | 	byte	0
343fb                 | LR__5799
343fb     55 6E 6B 6E 
343ff     6F 77 6E 20 
34403     65 72 72 6F 
34407     72 20 77 68 
3440b     69 6C 65 20 
3440f     6D 75 6C 74 
34413     69 70 6C 79 
34417     69 6E 67    | 	byte	"Unknown error while multiplying"
3441a     00          | 	byte	0
3441b                 | LR__5800
3441b     43 61 6E 6E 
3441f     6F 74 20 64 
34423     69 76 69 64 
34427     65 20 73 74 
3442b     72 69 6E 67 
3442f     73          | 	byte	"Cannot divide strings"
34430     00          | 	byte	0
34431                 | LR__5801
34431     55 6E 6B 6E 
34435     6F 77 6E 20 
34439     65 72 72 6F 
3443d     72 20 77 68 
34441     69 6C 65 20 
34445     64 69 76 69 
34449     64 69 6E 67 | 	byte	"Unknown error while dividing"
3444d     00          | 	byte	0
3444e                 | LR__5802
3444e     43 61 6E 6E 
34452     6F 74 20 63 
34456     6F 6D 70 75 
3445a     74 65 20 61 
3445e     20 70 6F 77 
34462     65 72 20 6F 
34466     66 20 61 20 
3446a     73 74 72 69 
3446e     6E 67       | 	byte	"Cannot compute a power of a string"
34470     00          | 	byte	0
34471                 | LR__5803
34471     55 6E 6B 6E 
34475     6F 77 6E 20 
34479     65 72 72 6F 
3447d     72 20 77 68 
34481     69 6C 65 20 
34485     63 6F 6D 70 
34489     75 74 69 6E 
3448d     67 20 61 20 
34491     70 6F 77 65 
34495     72          | 	byte	"Unknown error while computing a power"
34496     00          | 	byte	0
34497                 | LR__5804
34497     52 69 67 68 
3449b     74 20 70 61 
3449f     72 65 6E 74 
344a3     68 65 73 69 
344a7     73 20 65 78 
344ab     70 65 63 74 
344af     65 64       | 	byte	"Right parenthesis expected"
344b1     00          | 	byte	0
344b2                 | LR__5805
344b2     45 78 70 65 
344b6     63 74 65 64 
344ba     20 73 74 72 
344be     69 6E 67    | 	byte	"Expected string"
344c1     00          | 	byte	0
344c2                 | LR__5806
344c2     45 78 70 65 
344c6     63 74 65 64 
344ca     20 66 6C 6F 
344ce     61 74       | 	byte	"Expected float"
344d0     00          | 	byte	0
344d1                 | LR__5807
344d1     45 78 70 65 
344d5     63 74 65 64 
344d9     20 75 6E 73 
344dd     69 67 6E 65 
344e1     64 20 69 6E 
344e5     74 65 67 65 
344e9     72          | 	byte	"Expected unsigned integer"
344ea     00          | 	byte	0
344eb                 | LR__5808
344eb     45 78 70 65 
344ef     63 74 65 64 
344f3     20 69 6E 74 
344f7     65 67 65 72 | 	byte	"Expected integer"
344fb     00          | 	byte	0
344fc                 | LR__5809
344fc     4E 6F 20 6D 
34500     6F 72 65 20 
34504     76 61 72 69 
34508     61 62 6C 65 
3450c     20 73 6C 6F 
34510     74 73       | 	byte	"No more variable slots"
34512     00          | 	byte	0
34513                 | LR__5810
34513     56 61 72 69 
34517     61 62 6C 65 
3451b     20 6E 6F 74 
3451f     20 66 6F 75 
34523     6E 64       | 	byte	"Variable not found"
34525     00          | 	byte	0
34526                 | LR__5811
34526     43 6F 6D 6D 
3452a     61 20 65 78 
3452e     70 65 63 74 
34532     65 64       | 	byte	"Comma expected"
34534     00          | 	byte	0
34535                 | LR__5812
34535     43 6F 6D 6D 
34539     61 20 6F 72 
3453d     20 73 65 6D 
34541     69 63 6F 6C 
34545     6F 6E 20 65 
34549     78 70 65 63 
3454d     74 65 64    | 	byte	"Comma or semicolon expected"
34550     00          | 	byte	0
34551                 | LR__5813
34551     55 6E 6B 6E 
34555     6F 77 6E 20 
34559     63 6F 6D 6D 
3455d     61 6E 64    | 	byte	"Unknown command"
34560     00          | 	byte	0
34561                 | LR__5814
34561     53 74 61 63 
34565     6B 20 75 6E 
34569     64 65 72 66 
3456d     6C 6F 77    | 	byte	"Stack underflow"
34570     00          | 	byte	0
34571                 | LR__5815
34571     43 61 6E 6E 
34575     6F 74 20 65 
34579     78 65 63 75 
3457d     74 65 20 67 
34581     6F 74 6F 20 
34585     6F 72 20 67 
34589     6F 73 75 62 
3458d     20 69 6E 20 
34591     74 68 65 20 
34595     69 6D 6D 65 
34599     64 69 61 74 
3459d     65 20 6D 6F 
345a1     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
345a3     00          | 	byte	0
345a4                 | LR__5816
345a4     43 61 6E 6E 
345a8     6F 74 20 6C 
345ac     6F 61 64 20 
345b0     66 72 6F 6D 
345b4     20 74 68 69 
345b8     73 20 66 69 
345bc     6C 65       | 	byte	"Cannot load from this file"
345be     00          | 	byte	0
345bf                 | LR__5817
345bf     54 68 65 20 
345c3     70 72 6F 67 
345c7     72 61 6D 20 
345cb     69 73 20 65 
345cf     6D 70 74 79 | 	byte	"The program is empty"
345d3     00          | 	byte	0
345d4                 | LR__5818
345d4     49 66 20 61 
345d8     66 74 65 72 
345dc     20 69 66    | 	byte	"If after if"
345df     00          | 	byte	0
345e0                 | LR__5819
345e0     45 6D 70 74 
345e4     79 20 65 78 
345e8     70 72 65 73 
345ec     73 69 6F 6E | 	byte	"Empty expression"
345f0     00          | 	byte	0
345f1                 | LR__5820
345f1     53 74 72 69 
345f5     6E 67 20 65 
345f9     78 70 65 63 
345fd     74 65 64    | 	byte	"String expected"
34600     00          | 	byte	0
34601                 | LR__5821
34601     49 6E 74 65 
34605     72 70 72 65 
34609     74 65 72 20 
3460d     69 6E 74 65 
34611     72 6E 61 6C 
34615     20 65 72 72 
34619     6F 72       | 	byte	"Interpreter internal error"
3461b     00          | 	byte	0
3461c                 | LR__5822
3461c     45 78 70 65 
34620     63 74 65 64 
34624     20 61 73 73 
34628     69 67 6E    | 	byte	"Expected assign"
3462b     00          | 	byte	0
3462c                 | LR__5823
3462c     45 78 70 65 
34630     63 74 65 64 
34634     20 27 74 6F 
34638     27          | 	byte	"Expected 'to'"
34639     00          | 	byte	0
3463a                 | LR__5824
3463a     45 78 70 65 
3463e     63 74 65 64 
34642     20 69 6E 74 
34646     65 67 65 72 
3464a     20 76 61 72 
3464e     69 61 62 6C 
34652     65          | 	byte	"Expected integer variable"
34653     00          | 	byte	0
34654                 | LR__5825
34654     55 6E 69 6E 
34658     69 74 69 61 
3465c     6C 69 7A 65 
34660     64 20 76 61 
34664     72 69 61 62 
34668     6C 65 20 69 
3466c     6E 20 27 6E 
34670     65 78 74 27 
34674     2C 20 75 73 
34678     65 20 27 66 
3467c     6F 72 27 20 
34680     62 65 66 6F 
34684     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
34686     00          | 	byte	0
34687                 | LR__5826
34687     4E 6F 20 6D 
3468b     6F 72 65 20 
3468f     73 6C 6F 74 
34693     73 20 66 6F 
34697     72 20 27 66 
3469b     6F 72 27    | 	byte	"No more slots for 'for'"
3469e     00          | 	byte	0
3469f                 | LR__5827
3469f     27 4E 65 78 
346a3     74 27 20 64 
346a7     6F 65 73 6E 
346ab     27 74 20 6D 
346af     61 74 63 68 
346b3     20 27 66 6F 
346b7     72 27       | 	byte	"'Next' doesn't match 'for'"
346b9     00          | 	byte	0
346ba                 | LR__5828
346ba     27 47 6F 74 
346be     6F 27 20 74 
346c2     61 72 67 65 
346c6     74 20 6C 69 
346ca     6E 65 20 6E 
346ce     6F 74 20 66 
346d2     6F 75 6E 64 | 	byte	"'Goto' target line not found"
346d6     00          | 	byte	0
346d7                 | LR__5829
346d7     42 61 64 20 
346db     6E 75 6D 62 
346df     65 72 20 6F 
346e3     66 20 70 61 
346e7     72 61 6D 65 
346eb     74 65 72 73 | 	byte	"Bad number of parameters"
346ef     00          | 	byte	0
346f0                 | LR__5830
346f0     46 75 6E 63 
346f4     74 69 6F 6E 
346f8     20 75 6E 64 
346fc     65 66 69 6E 
34700     65 64 20 66 
34704     6F 72 20 73 
34708     74 72 69 6E 
3470c     67 73       | 	byte	"Function undefined for strings"
3470e     00          | 	byte	0
3470f                 | LR__5831
3470f     42 61 64 20 
34713     70 61 72 61 
34717     6D 65 74 65 
3471b     72          | 	byte	"Bad parameter"
3471c     00          | 	byte	0
3471d                 | LR__5832
3471d     43 61 6E 6E 
34721     6F 74 20 64 
34725     65 63 6C 61 
34729     72 65 20 61 
3472d     6E 20 61 72 
34731     72 61 79 3A 
34735     20 74 68 65 
34739     20 76 61 72 
3473d     69 61 62 6C 
34741     65 20 65 78 
34745     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
34749     00          | 	byte	0
3474a                 | LR__5833
3474a     45 78 70 65 
3474e     63 74 65 64 
34752     20 27 28 27 | 	byte	"Expected '('"
34756     00          | 	byte	0
34757                 | LR__5834
34757     45 78 70 65 
3475b     63 74 65 64 
3475f     20 27 29 27 
34763     20 6F 72 20 
34767     27 2C 27    | 	byte	"Expected ')' or ','"
3476a     00          | 	byte	0
3476b                 | LR__5835
3476b     4E 6F 20 6D 
3476f     6F 72 65 20 
34773     74 68 61 6E 
34777     20 33 20 64 
3477b     69 6D 65 6E 
3477f     73 69 6F 6E 
34783     73 20 73 75 
34787     70 70 6F 72 
3478b     74 65 64    | 	byte	"No more than 3 dimensions supported"
3478e     00          | 	byte	0
3478f                 | LR__5836
3478f     56 61 72 69 
34793     61 62 6C 65 
34797     20 6E 61 6D 
3479b     65 20 65 78 
3479f     70 65 63 74 
347a3     65 64       | 	byte	"Variable name expected"
347a5     00          | 	byte	0
347a6                 | LR__5837
347a6     54 79 70 65 
347aa     20 6E 61 6D 
347ae     65 20 65 78 
347b2     70 65 63 74 
347b6     65 64       | 	byte	"Type name expected"
347b8     00          | 	byte	0
347b9                 | LR__5838
347b9     54 79 70 65 
347bd     20 6E 6F 74 
347c1     20 73 75 70 
347c5     70 6F 72 74 
347c9     65 64 20 79 
347cd     65 74       | 	byte	"Type not supported yet"
347cf     00          | 	byte	0
347d0                 | LR__5839
347d0     41 72 72 61 
347d4     79 20 69 6E 
347d8     64 65 78 20 
347dc     6F 75 74 20 
347e0     6F 66 20 72 
347e4     61 6E 67 65 | 	byte	"Array index out of range"
347e8     00          | 	byte	0
347e9                 | LR__5840
347e9     42 61 64 20 
347ed     74 79 70 65 
347f1     20 77 68 69 
347f5     6C 65 20 61 
347f9     73 73 69 67 
347fd     6E 69 6E 67 
34801     20 74 6F 20 
34805     61 72 72 61 
34809     79          | 	byte	"Bad type while assigning to array"
3480a     00          | 	byte	0
3480b                 | LR__5841
3480b     54 6F 6F 20 
3480f     6D 61 6E 79 
34813     20 76 61 72 
34817     69 61 62 6C 
3481b     65 73       | 	byte	"Too many variables"
3481d     00          | 	byte	0
3481e                 | LR__5842
3481e     27 54 68 65 
34822     6E 27 20 65 
34826     78 70 65 63 
3482a     74 65 64    | 	byte	"'Then' expected"
3482d     00          | 	byte	0
3482e                 | LR__5843
3482e     44 69 72 65 
34832     63 74 6F 72 
34836     79 20 64 6F 
3483a     65 73 6E 27 
3483e     74 20 65 78 
34842     69 73 74    | 	byte	"Directory doesn't exist"
34845     00          | 	byte	0
34846                 | LR__5844
34846     55 6E 65 78 
3484a     70 65 63 74 
3484e     65 64 20 65 
34852     6E 64 20 6F 
34856     66 20 6C 69 
3485a     6E 65       | 	byte	"Unexpected end of line"
3485c     00          | 	byte	0
3485d                 | LR__5845
3485d     45 72 72 6F 
34861     72 20       | 	byte	"Error "
34863     00          | 	byte	0
34864                 | LR__5846
34864     20 2D 20    | 	byte	" - "
34867     00          | 	byte	0
34868                 | LR__5847
34868     20 69 6E 20 
3486c     6C 69 6E 65 
34870     20          | 	byte	" in line "
34871     00          | 	byte	0
34872                 | LR__5848
34872     2F 73 64    | 	byte	"/sd"
34875     00          | 	byte	0
34876                 | LR__5849
34876     2F 73 64 2F 
3487a     62 61 73    | 	byte	"/sd/bas"
3487d     00          | 	byte	0
3487e                 | LR__5850
3487e     2F 73 64 2F 
34882     62 61 73    | 	byte	"/sd/bas"
34885     00          | 	byte	0
34886                 | LR__5851
34886     20 42 41 53 
3488a     49 43 20 62 
3488e     79 74 65 73 
34892     20 66 72 65 
34896     65          | 	byte	" BASIC bytes free"
34897     00          | 	byte	0
34898                 | LR__5852
34898     52 65 61 64 
3489c     79          | 	byte	"Ready"
3489d     00          | 	byte	0
3489e                 | LR__5853
3489e     6E 6F 6E 61 
348a2     6D 65 2E 62 
348a6     61 73       | 	byte	"noname.bas"
348a8     00          | 	byte	0
348a9                 | LR__5854
348a9     2F 73 64 2F 
348ad     62 61 73 2F 
348b1     61 75 74 6F 
348b5     72 75 6E 2E 
348b9     62 61 73    | 	byte	"/sd/bas/autorun.bas"
348bc     00          | 	byte	0
348bd                 | LR__5855
348bd     72 75 6E 20 
348c1     61 75 74 6F 
348c5     72 75 6E 2E 
348c9     62 61 73    | 	byte	"run autorun.bas"
348cc     00          | 	byte	0
348cd                 | LR__5856
348cd                 | 	byte	
348cd     00          | 	byte	0
348ce     00 00       | 	alignl
348d0                 | _dat_
348d0     00 00 00 00 
348d4     00 00 00 00 
348d8     00 00 00 00 
348dc     00 00 00 00 | 	byte	$00[16]
348e0     61 41 17 0E 
348e4     62 42 00 00 
348e8     63 43 19 10 
348ec     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
348f0     65 45 18 0F 
348f4     66 46 00 00 
348f8     67 47 00 00 
348fc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
34900     69 49 00 00 
34904     6A 4A 00 00 
34908     6B 4B 00 00 
3490c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
34910     6D 4D 00 00 
34914     6E 4E 1A 11 
34918     6F 4F 1E 15 
3491c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
34920     71 51 00 00 
34924     72 52 00 00 
34928     73 53 1B 12 
3492c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
34930     75 55 00 00 
34934     76 56 00 00 
34938     77 57 00 00 
3493c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
34940     79 59 00 00 
34944     7A 5A 1D 14 
34948     31 21 04 00 
3494c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
34950     33 23 06 00 
34954     34 24 07 00 
34958     35 25 08 00 
3495c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
34960     37 26 0A 00 
34964     38 2A 0B 00 
34968     39 28 0C 00 
3496c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
34970     8D 8D 00 00 
34974     9B 9B 00 00 
34978     88 88 00 00 
3497c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
34980     20 20 00 00 
34984     2D 5F 00 00 
34988     3D 2B 00 00 
3498c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
34990     5D 7D 00 00 
34994     5C 7C 00 00 
34998     23 7E 00 00 
3499c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
349a0     27 22 00 00 
349a4     60 7E 03 00 
349a8     2C 3C 00 00 
349ac     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
349b0     2F 3F 00 00 
349b4     B9 B9 00 00 
349b8     BA 00 00 00 
349bc     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
349c0     BC 00 00 00 
349c4     BD 00 00 00 
349c8     BE 00 00 00 
349cc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
349d0     C0 00 00 00 
349d4     C1 00 00 00 
349d8     C2 00 00 00 
349dc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
349e0     C4 00 00 00 
349e4     C5 00 00 00 
349e8     C6 00 00 00 
349ec     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
349f0     C8 00 00 00 
349f4     C9 00 00 00 
349f8     CA 00 00 00 
349fc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
34a00     7F 7F 00 00 
34a04     CC 00 00 00 
34a08     CD 00 00 00 
34a0c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
34a10     CF 00 00 00 
34a14     D0 00 00 00 
34a18     D1 00 00 00 
34a1c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
34a20     2F 2F 00 00 
34a24     2A 2A 00 00 
34a28     2D 2D 00 00 
34a2c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
34a30     8D 8D 00 00 
34a34     31 31 00 00 
34a38     32 32 00 00 
34a3c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
34a40     34 34 00 00 
34a44     35 35 00 00 
34a48     36 36 00 00 
34a4c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
34a50     38 38 00 00 
34a54     39 39 00 00 
34a58     30 30 00 00 
34a5c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
34a60     5C 7C 00 00 
34a64     00 00 00 00 
34a68     00 00 00 00 
34a6c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
34a70     00 00 00 00 
      ...             
34ac8     00 00 00 00 
34acc     00 00 00 00 | 	byte	$00[96]
34ad0     2B 00 A6 F2 
34ad4     24 A7 09 80 
34ad8     5B 88 4D 89 
34adc     80 88 A5 88 | atari_spl file "atari.spl"
34ae0     6D 88 B8 88 
34ae4     80 88 CB 88 
34ae8     92 88 A5 88 
34aec     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
34af0     A5 88 CA 88 
34af4     A6 88 DD 88 
34af8     B8 88 AB 89 
34afc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
34b00     C8 AD C6 F1 
34b04     91 06 B6 FF 
34b08     13 00 4A 00 
34b0c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
34b10     5D 00 5E 00 
34b14     5D 00 5E 00 
34b18     5E 00 5D 00 
34b1c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
34b20     38 00 83 00 
34b24     25 00 83 00 
34b28     C3 FE D1 04 
34b2c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
34b30     48 88 38 85 
34b34     41 8A CB 88 
34b38     28 89 B8 88 
34b3c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
34b40     15 89 03 89 
34b44     02 89 15 89 
34b48     16 89 15 89 
34b4c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
34b50     15 89 3A 89 
34b54     72 89 E3 89 
34b58     52 83 AD 97 
34b5c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
34b60     0C 02 B6 FF 
34b64     E1 00 A8 00 
34b68     F3 00 A8 00 
34b6c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
34b70     CE 00 CD 00 
34b74     CD 00 BA 00 
34b78     E1 00 BB 00 
34b7c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
34b80     DF 00 C9 FF 
34b84     E6 01 B6 06 
34b88     EE DD 8D 98 
34b8c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
34b90     97 89 73 89 
34b94     3B 89 60 89 
34b98     60 89 60 89 
34b9c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
34ba0     73 89 72 89 
34ba4     85 89 73 89 
34ba8     AA 89 60 89 
34bac     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
34bb0     E8 8A 18 86 
34bb4     92 88 A5 C2 
34bb8     E0 00 C3 05 
34bbc     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
34bc0     F2 00 64 01 
34bc4     06 01 3E 01 
34bc8     2B 01 2B 01 
34bcc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
34bd0     2B 01 2A 01 
34bd4     2B 01 2B 01 
34bd8     2B 01 18 01 
34bdc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
34be0     39 07 61 F3 
34be4     C0 AF 37 85 
34be8     0F 88 8B 8A 
34bec     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
34bf0     AB 89 D0 89 
34bf4     AB 89 D0 89 
34bf8     D0 89 CF 89 
34bfc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
34c00     D0 89 F5 89 
34c04     BD 89 08 8A 
34c08     CF 89 E8 8A 
34c0c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
34c10     53 B3 0D F8 
34c14     F4 07 38 00 
34c18     63 01 63 01 
34c1c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
34c20     88 01 88 01 
34c24     76 01 88 01 
34c28     88 01 89 01 
34c2c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
34c30     75 01 AE 01 
34c34     76 01 88 01 
34c38     4A 00 46 06 
34c3c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
34c40     08 8A 9A 86 
34c44     33 8B 08 8A 
34c48     2D 8A F5 89 
34c4c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
34c50     2D 8A 2D 8A 
34c54     2E 8A 1B 8A 
34c58     40 8A 2D 8A 
34c5c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
34c60     2E 8A 79 8A 
34c64     66 8A C8 8B 
34c68     72 82 2B 97 
34c6c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
34c70     1D 02 05 01 
34c74     F8 01 C0 01 
34c78     0B 02 C0 01 
34c7c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
34c80     F9 01 D3 01 
34c84     F8 01 D3 01 
34c88     F8 01 D2 01 
34c8c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
34c90     E6 01 2B 01 
34c94     8E 02 5F 07 
34c98     F7 E2 ED 9C 
34c9c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
34ca0     E8 8A 78 8A 
34ca4     78 8A 65 8A 
34ca8     8B 8A 78 8A 
34cac     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
34cb0     8B 8A 9D 8A 
34cb4     9D 8A 8B 8A 
34cb8     C2 8A 78 8A 
34cbc     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
34cc0     70 8C 18 86 
34cc4     8B 8A 23 C9 
34cc8     CB 03 C4 05 
34ccc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
34cd0     0B 02 7B 02 
34cd4     1E 02 55 02 
34cd8     30 02 43 02 
34cdc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
34ce0     43 02 44 02 
34ce4     43 02 30 02 
34ce8     68 02 31 02 
34cec     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
34cf0     07 08 3F F7 
34cf4     73 B2 13 85 
34cf8     15 89 ED 8B 
34cfc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
34d00     B0 8A FB 8A 
34d04     D5 8A FA 8A 
34d08     E8 8A FB 8A 
34d0c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
34d10     E8 8A 21 8B 
34d14     E7 8A 33 8B 
34d18     E8 8A 26 8C 
34d1c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
34d20     8D B0 27 F6 
34d24     9C 08 AD 01 
34d28     7B 02 8D 02 
34d2c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
34d30     A1 02 A0 02 
34d34     A1 02 A0 02 
34d38     A0 02 A0 02 
34d3c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
34d40     7B 02 D8 02 
34d44     7B 02 C6 02 
34d48     3E 01 C3 05 
34d4c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
34d50     00 8C 2A 86 
34d54     E0 8C FA 8A 
34d58     6A 8B FB 8A 
34d5c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
34d60     45 8B 45 8B 
34d64     45 8B 6B 8B 
34d68     46 8B 59 8B 
34d6c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
34d70     6B 8B 6B 8B 
34d74     6B 8B 6B 8B 
34d78     7D 8B 7D 8B 
34d7c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
34d80     90 8B 91 8B 
34d84     90 8B 90 8B 
34d88     A3 8B A3 8B 
34d8c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
34d90     B5 8B B6 8B 
34d94     B5 8B B5 8B 
34d98     B6 8B C8 8B 
34d9c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
34da0     C8 8B DA 8B 
34da4     DB 8B DB 8B 
34da8     DB 8B DC 8B 
34dac     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
34db0     EE 8B EE 8B 
34db4     00 8C 01 8C 
34db8     00 8C 01 8C 
34dbc     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
34dc0     12 8C 13 8C 
34dc4     13 8C 26 8C 
34dc8     26 8C 26 8C 
34dcc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
34dd0     38 8C 38 8C 
34dd4     38 8C 38 8C 
34dd8     4B 8C 4B 8C 
34ddc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
34de0     5E 8C 5E 8C 
34de4     5E 8C 5E 8C 
34de8     70 8C 70 8C 
34dec     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
34df0     70 8C 83 8C 
34df4     83 8C 83 8C 
34df8     83 8C 96 8C 
34dfc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
34e00     95 8C A9 8C 
34e04     A9 8C A8 8C 
34e08     A8 8C A8 8C 
34e0c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
34e10     BB 8C BB 8C 
34e14     BB 8C CE 8C 
34e18     CE 8C CE 8C 
34e1c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
34e20     E0 8C E1 8C 
34e24     E1 8C E0 8C 
34e28     F4 8C F2 8C 
34e2c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
34e30     05 8D 05 8D 
34e34     06 8D 06 8D 
34e38     19 8D 19 8D 
34e3c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
34e40     18 8D 2B 8D 
34e44     2B 8D 2B 8D 
34e48     2A 8D 3E 8D 
34e4c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
34e50     3E 8D 51 8D 
34e54     50 8D 50 8D 
34e58     50 8D 51 8D 
34e5c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
34e60     63 8D 64 8D 
34e64     76 8D 75 8D 
34e68     75 8D 76 8D 
34e6c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
34e70     88 8D 88 8D 
34e74     89 8D 9B 8D 
34e78     9A 8D 9B 8D 
34e7c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
34e80     AD 8D AE 8D 
34e84     AD 8D AE 8D 
34e88     C1 8D C1 8D 
34e8c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
34e90     D3 8D D3 8D 
34e94     D3 8D D3 8D 
34e98     D3 8D E6 8D 
34e9c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
34ea0     E6 8D E6 8D 
34ea4     F9 8D F9 8D 
34ea8     F9 8D F8 8D 
34eac     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
34eb0     0B 8E 0B 8E 
34eb4     1D 8E 1D 8E 
34eb8     1E 8E 1E 8E 
34ebc     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
34ec0     31 8E 31 8E 
34ec4     31 8E 42 8E 
34ec8     43 8E 43 8E 
34ecc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
34ed0     56 8E 56 8E 
34ed4     55 8E 56 8E 
34ed8     68 8E 69 8E 
34edc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
34ee0     69 8E 7B 8E 
34ee4     7C 8E 7B 8E 
34ee8     7B 8E 8D 8E 
34eec     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
34ef0     8D 8E A1 8E 
34ef4     A0 8E A1 8E 
34ef8     A1 8E A0 8E 
34efc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
34f00     B3 8E B3 8E 
34f04     C6 8E C5 8E 
34f08     C6 8E C6 8E 
34f0c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
34f10     D8 8E D9 8E 
34f14     D8 8E EC 8E 
34f18     EB 8E EC 8E 
34f1c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
34f20     FE 8E FE 8E 
34f24     FE 8E FE 8E 
34f28     10 8F 10 8F 
34f2c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
34f30     11 8F 23 8F 
34f34     24 8F 23 8F 
34f38     24 8F 37 8F 
34f3c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
34f40     36 8F 36 8F 
34f44     48 8F 49 8F 
34f48     49 8F 49 8F 
34f4c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
34f50     5B 8F 5C 8F 
34f54     5B 8F 6E 8F 
34f58     6E 8F 6E 8F 
34f5c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
34f60     81 8F 81 8F 
34f64     81 8F 81 8F 
34f68     93 8F 93 8F 
34f6c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
34f70     93 8F A6 8F 
34f74     A6 8F A6 8F 
34f78     A6 8F B9 8F 
34f7c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
34f80     B9 8F B9 8F 
34f84     CC 8F CB 8F 
34f88     CB 8F CC 8F 
34f8c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
34f90     DF 8F DE 8F 
34f94     DE 8F F1 8F 
34f98     F1 8F F1 8F 
34f9c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
34fa0     03 90 04 90 
34fa4     04 90 04 90 
34fa8     16 90 17 90 
34fac     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
34fb0     29 90 28 90 
34fb4     29 90 28 90 
34fb8     29 90 3C 90 
34fbc     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
34fc0     3C 90 4F 90 
34fc4     4E 90 4E 90 
34fc8     4E 90 4E 90 
34fcc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
34fd0     61 90 61 90 
34fd4     73 90 74 90 
34fd8     74 90 74 90 
34fdc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
34fe0     87 90 86 90 
34fe4     87 90 86 90 
34fe8     99 90 99 90 
34fec     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
34ff0     AB 90 AB 90 
34ff4     AC 90 AB 90 
34ff8     AB 90 BF 90 
34ffc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
35000     BE 90 D1 90 
35004     D0 90 D1 90 
35008     D1 90 D1 90 
3500c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
35010     E3 90 E4 90 
35014     F6 90 F6 90 
35018     F6 90 F6 90 
3501c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
35020     09 91 0A 91 
35024     0A 91 1C 91 
35028     1C 91 1C 91 
3502c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
35030     2F 91 2E 91 
35034     2F 91 2F 91 
35038     2E 91 41 91 
3503c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
35040     41 91 53 91 
35044     54 91 54 91 
35048     53 91 54 91 
3504c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
35050     67 91 67 91 
35054     79 91 7A 91 
35058     79 91 78 91 
3505c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
35060     8C 91 8B 91 
35064     8C 91 8C 91 
35068     9E 91 9E 91 
3506c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
35070     B1 91 B1 91 
35074     B2 91 B1 91 
35078     B1 91 C4 91 
3507c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
35080     C4 91 D6 91 
35084     D7 91 D7 91 
35088     D7 91 D6 91 
3508c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
35090     EA 91 EA 91 
35094     EA 91 FC 91 
35098     FC 91 FB 91 
3509c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
350a0     0E 92 0F 92 
350a4     0F 92 0E 92 
350a8     21 92 21 92 
350ac     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
350b0     21 92 34 92 
350b4     33 92 34 92 
350b8     34 92 47 92 
350bc     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
350c0     46 92 47 92 
350c4     59 92 59 92 
350c8     59 92 59 92 
350cc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
350d0     6C 92 6C 92 
350d4     6B 92 7E 92 
350d8     7E 92 7E 92 
350dc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
350e0     92 92 91 92 
350e4     91 92 90 92 
350e8     91 92 A4 92 
350ec     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
350f0     A3 92 B6 92 
350f4     B6 92 B7 92 
350f8     B7 92 B6 92 
350fc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
35100     CA 92 C9 92 
35104     CA 92 DC 92 
35108     DC 92 DC 92 
3510c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
35110     EF 92 EF 92 
35114     EF 92 EF 92 
35118     01 93 01 93 
3511c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
35120     15 93 14 93 
35124     14 93 14 93 
35128     14 93 27 93 
3512c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
35130     27 93 39 93 
35134     3A 93 39 93 
35138     39 93 39 93 
3513c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
35140     4B 93 4C 93 
35144     5F 93 5F 93 
35148     5F 93 5E 93 
3514c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
35150     5F 93 84 93 
35154     4C 93 96 93 
35158     5F 93 AE 94 
3515c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
35160     7B C1 00 00 
35164     00 00 00 00 
35168     00 00 00 00 
3516c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35170     00 00 00 00 | 	byte	$00, $00, $00, $00
35174     7A D7 00 80 
35178     87 8A 48 8F 
3517c     EC 8C 76 8D 
35180     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
35184     3C 8D 82 8D 
35188     42 8D 88 8D 
3518c     8C 8D 8E 8D 
35190     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
35194     97 8D DE 8D 
35198     E1 8D F1 8E 
3519c     D8 8C A3 83 
351a0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
351a4     65 71 C9 65 
351a8     FC 64 C4 65 
351ac     C1 65 BF 65 
351b0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
351b4     B6 65 B4 65 
351b8     B2 65 AE 65 
351bc     AC 65 ED 65 
351c0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
351c4     5E 65 25 66 
351c8     FA 62 23 6B 
351cc     B5 6C 61 0A 
351d0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
351d4     5D 90 BE 8D 
351d8     47 8E C3 8D 
351dc     09 8E C9 8D 
351e0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
351e4     15 8E 19 8E 
351e8     1B 8E 62 8E 
351ec     64 8E 68 8E 
351f0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
351f4     B5 8E 4C 90 
351f8     FA 84 3C 9D 
351fc     98 13 79 6D 
35200     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
35204     D9 66 50 66 
35208     D4 66 4B 66 
3520c     8C 66 46 66 
35210     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
35214     81 66 3A 66 
35218     7C 66 36 66 
3521c     76 66 30 66 
35220     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
35224     6B 66 88 72 
35228     BF 37 E7 B7 
3522c     75 83 8B 8E 
35230     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
35234     94 8E 96 8E 
35238     DD 8E 9C 8E 
3523c     E2 8E A2 8E 
35240     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
35244     EE 8E AE 8E 
35248     38 8F B5 8E 
3524c     3F 8F FD 8E 
35250     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
35254     A5 87 1E E3 
35258     6D 5D FA 71 
3525c     41 64 25 67 
35260     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
35264     D9 66 1A 67 
35268     18 67 15 67 
3526c     12 67 0F 67 
35270     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
35274     07 67 C0 66 
35278     01 67 BC 66 
3527c     B8 66 DE 64 
35280     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
35284     43 E5 1F 8B 
35288     14 8A F1 90 
3528c     1C 8F 63 8F 
35290     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
35294     29 8F 6E 8F 
35298     72 8F 75 8F 
3529c     34 8F BE 8F 
352a0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
352a4     84 8F 87 8F 
352a8     CC 8F 56 90 
352ac     67 91 49 80 
352b0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
352b4     46 77 A6 66 
352b8     E8 66 B0 67 
352bc     AD 67 ED 67 
352c0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
352c4     A2 67 E3 67 
352c8     9D 67 9A 67 
352cc     98 67 94 67 
352d0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
352d4     49 67 CD 67 
352d8     28 65 5F 6E 
352dc     82 67 3A 01 
352e0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
352e4     C2 91 A9 8F 
352e8     EF 8F AE 8F 
352ec     F4 8F B5 8F 
352f0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
352f4     01 90 03 90 
352f8     07 90 09 90 
352fc     0C 90 53 90 
35300     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
35304     18 90 44 93 
35308     85 84 D6 9D 
3530c     87 1F 2F 75 
35310     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
35314     C4 68 F6 67 
35318     BE 68 F1 67 
3531c     76 68 2E 68 
35320     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
35324     27 68 24 68 
35328     64 68 1E 68 
3532c     5F 68 19 68 
35330     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
35334     DC 68 56 72 
35338     7E 36 C2 B8 
3533c     D7 84 73 90 
35340     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
35344     7B 90 7F 90 
35348     82 90 84 90 
3534c     CB 90 8B 90 
35350     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
35354     D7 90 96 90 
35358     20 91 59 90 
3535c     25 91 A2 90 
35360     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
35364     D0 89 40 EE 
35368     12 64 C4 71 
3536c     29 66 0C 69 
35370     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
35374     C0 68 02 69 
35378     FE 68 FB 68 
3537c     F9 68 F6 68 
35380     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
35384     EE 68 A8 68 
35388     2C 69 5F 68 
3538c     E2 68 81 66 
35390     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
35394     1E EB A6 8A 
35398     73 8B 5E 93 
3539c     7B 90 48 91 
353a0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
353a4     0D 91 11 91 
353a8     14 91 16 91 
353ac     5C 91 1C 91 
353b0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
353b4     68 91 AF 91 
353b8     2A 91 B5 91 
353bc     75 91 1A 94 
353c0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
353c4     70 0E CB 6C 
353c8     5D 6E C4 67 
353cc     99 69 54 69 
353d0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
353d4     D2 69 49 69 
353d8     89 69 86 69 
353dc     40 69 C4 69 
353e0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
353e4     35 69 76 69 
353e8     58 67 EB 6D 
353ec     E9 6D 89 0F 
353f0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
353f4     33 94 94 91 
353f8     D9 91 56 91 
353fc     E0 91 9F 91 
35400     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
35404     EC 91 EE 91 
35408     F1 91 F4 91 
3540c     F7 91 3D 92 
35410     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
35414     46 92 21 94 
35418     11 89 A4 9D 
3541c     FD 0E 8F 6C 
35420     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
35424     28 6A E1 69 
35428     65 6A 1F 6A 
3542c     5F 6A 1A 6A 
35430     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
35434     54 6A 0F 6A 
35438     4F 6A 09 6A 
3543c     06 6A 03 6A 
35440     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
35444     23 68 69 77 
35448     3A 4D 38 CA 
3544c     38 86 4E 91 
35450     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
35454     64 92 24 92 
35458     6A 92 2A 92 
3545c     70 92 30 92 
35460     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
35464     7B 92 7E 92 
35468     C5 92 84 92 
3546c     CB 92 8A 92 
35470     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
35474     4D 8D F9 E2 
35478     97 59 FE 74 
3547c     DB 68 6D 6A 
35480     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
35484     A8 6A A5 6A 
35488     A3 6A 9F 6A 
3548c     9D 6A 9B 6A 
35490     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
35494     D6 6A 8F 6A 
35498     CF 6A 46 6A 
3549c     CA 6A E1 67 
354a0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
354a4     D3 F7 15 92 
354a8     90 8C BF 94 
354ac     A6 92 EB 92 
354b0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
354b4     B1 92 F7 92 
354b8     FA 92 FD 92 
354bc     00 93 02 93 
354c0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
354c4     4F 93 52 93 
354c8     54 93 22 94 
354cc     5A 93 8F 88 
354d0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
354d4     1C 77 07 6C 
354d8     E8 69 7A 6B 
354dc     34 6B 75 6B 
354e0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
354e4     29 6B 26 6B 
354e8     24 6B 21 6B 
354ec     1D 6B 5E 6B 
354f0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
354f4     12 6B 52 6B 
354f8     34 69 34 6E 
354fc     BA 73 A4 24 
35500     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
35504     7A 94 B3 93 
35508     72 93 31 93 
3550c     78 93 7A 93 
35510     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
35514     83 93 86 93 
35518     89 93 D0 93 
3551c     D2 93 D5 93 
35520     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
35524     DD 93 40 96 
35528     30 8B 99 9C 
3552c     52 10 94 71 
35530     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
35534     46 6C 79 6B 
35538     40 6C B7 6B 
3553c     F7 6B B1 6B 
35540     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
35544     EC 6B A5 6B 
35548     A2 6B 9F 6B 
3554c     9D 6B 9A 6B 
35550     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
35554     C8 6A E4 76 
35558     20 4B F9 CE 
3555c     2E 8A 1A 92 
35560     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
35564     FB 93 BA 93 
35568     01 94 03 94 
3556c     4A 94 09 94 
35570     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
35574     55 94 14 94 
35578     9E 94 1A 94 
3557c     61 94 20 94 
35580     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
35584     3E 87 E5 CD 
35588     5F 50 6C 78 
3558c     B5 6A 04 6C 
35590     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
35594     83 6C 7F 6C 
35598     7C 6C 36 6C 
3559c     76 6C 74 6C 
355a0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
355a4     6B 6C 25 6C 
355a8     66 6C 1F 6C 
355ac     1D 6C 41 6A 
355b0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
355b4     BA FA FC 94 
355b8     5B 8D 97 96 
355bc     3B 94 C5 94 
355c0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
355c4     89 94 8C 94 
355c8     8F 94 92 94 
355cc     94 94 DB 94 
355d0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
355d4     E4 94 E7 94 
355d8     2D 95 74 95 
355dc     C8 96 15 89 
355e0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
355e4     CB 75 31 6F 
355e8     7E 6B 10 6D 
355ec     C9 6C 0A 6D 
355f0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
355f4     BD 6C FF 6C 
355f8     FB 6C F9 6C 
355fc     B2 6C F3 6C 
35600     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
35604     A7 6C E8 6C 
35608     0D 6B 85 6F 
3560c     C7 74 10 28 
35610     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
35614     96 96 47 95 
35618     06 95 0A 95 
3561c     0C 95 0F 95 
35620     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
35624     17 95 5E 95 
35628     61 95 63 95 
3562c     22 95 AC 95 
35630     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
35634     72 95 17 98 
35638     59 8E 01 96 
3563c     CF FC 5A 68 
35640     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
35644     96 6D 50 6D 
35648     D5 6D 4A 6D 
3564c     8C 6D 89 6D 
35650     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
35654     80 6D 3A 6D 
35658     7A 6D 77 6D 
3565c     75 6D 71 6D 
35660     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
35664     18 6C BC 78 
35668     9A 4F 7E CF 
3566c     1F 89 F1 93 
35670     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
35674     D2 95 4E 95 
35678     D7 95 53 95 
3567c     DD 95 E0 95 
35680     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
35684     A5 95 EB 95 
35688     EE 95 F0 95 
3568c     37 96 B3 95 
35690     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
35694     1A 98 D5 8D 
35698     C5 9F CD 0F 
3569c     0F 71 F3 73 
356a0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
356a4     D9 6D 5E 6E 
356a8     D3 6D 58 6E 
356ac     12 6E 0F 6E 
356b0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
356b4     49 6E BF 6D 
356b8     87 6E 76 6D 
356bc     81 6E 11 6B 
356c0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
356c4     3F 09 44 95 
356c8     E5 8D 3F 99 
356cc     D4 95 A2 96 
356d0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
356d4     23 96 69 96 
356d8     6B 96 6E 96 
356dc     71 96 74 96 
356e0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
356e4     BF 96 3C 96 
356e8     C6 96 C8 96 
356ec     A3 98 51 8D 
356f0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
356f4     CF 75 29 73 
356f8     90 6C EC 6E 
356fc     62 6E E7 6E 
35700     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
35704     9A 6E 98 6E 
35708     95 6E 91 6E 
3570c     8E 6E CF 6E 
35710     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
35714     40 6E C3 6E 
35718     E8 6C 45 6F 
3571c     A5 7B C9 35 
35720     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
35724     2D 98 23 97 
35728     E1 96 A0 96 
3572c     A4 96 EA 96 
35730     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
35734     AF 96 F4 96 
35738     F8 96 3E 97 
3573c     FD 96 43 97 
35740     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
35744     08 97 6B 99 
35748     D6 92 88 91 
3574c     D8 EE 84 66 
35750     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
35754     2E 6F E7 6E 
35758     6C 6F 24 6F 
3575c     21 6F 1F 6F 
35760     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
35764     17 6F 13 6F 
35768     54 6F 0E 6F 
3576c     0B 6F 4B 6F 
35770     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
35774     27 6D 1C 7B 
35778     19 59 9F DB 
3577c     66 8E BC 94 
35780     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
35784     67 97 26 97 
35788     6D 97 2B 97 
3578c     72 97 32 97 
35790     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
35794     C1 97 7F 97 
35798     C6 97 85 97 
3579c     CB 97 CE 97 
357a0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
357a4     EC 8A C4 C6 
357a8     68 4C F4 7D 
357ac     63 6E E8 6E 
357b0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
357b4     ED 6F A7 6F 
357b8     E7 6F A0 6F 
357bc     E1 6F 9B 6F 
357c0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
357c4     D5 6F 8F 6F 
357c8     CE 6F 45 6F 
357cc     86 6F 68 6D 
357d0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
357d4     C0 13 AD A2 
357d8     A7 8E 79 99 
357dc     E6 97 E8 97 
357e0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
357e4     F1 97 F3 97 
357e8     F6 97 F9 97 
357ec     FB 97 FE 97 
357f0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
357f4     4A 98 0A 98 
357f8     93 98 0F 98 
357fc     7F 9B BF 8C 
35800     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
35804     91 7B 62 73 
35808     1A 6E B9 70 
3580c     EB 6F B3 70 
35810     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
35814     25 70 20 70 
35818     1E 70 1B 70 
3581c     18 70 15 70 
35820     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
35824     0D 70 09 70 
35828     07 70 03 70 
3582c     01 70 FD 6F 
35830     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
35834     F6 6F F2 6F 
35838     EF 6F EC 6F 
3583c     2C 70 E6 6F 
35840     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
35844     DD 6F 97 6F 
35848     D7 6F 84 6E 
3584c     8F 6F 3F 7D 
35850     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
35852     FF FF FF FF 
35856     FF FF       | atarist_spl file "atarist.spl" '512
35858     00 00 00 00 
3585c     00 00 00 00 
35860     00 00       | 	byte	$00[10]
35862     17 7F F2 7F 
35866     B2 7F 72 7F 
3586a     33 7F F4 7E 
3586e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
35872     36 7E F5 7D 
35876     E9 51 F2 0D 
3587a     8E 00 F3 FD 
3587e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
35882     57 FD 58 FD 
35886     5B FD 5C FD 
3588a     5C FD 60 7D 
3588e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
35892     D6 7C 98 7C 
35896     59 7C 1A 7C 
3589a     DC 7B 9E 7B 
3589e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
358a2     F3 05 00 FD 
358a6     41 FB EA FA 
358aa     D9 FA DB FA 
358ae     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
358b2     E4 FA 9B 36 
358b6     F8 7A C0 7A 
358ba     84 7A 45 7A 
358be     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
358c2     8E 79 51 79 
358c6     15 79 D7 78 
358ca     3C 1F EB FF 
358ce     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
358d2     6D F8 65 F8 
358d6     68 F8 6D F8 
358da     70 F8 74 F8 
358de     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
358e2     AB 60 79 60 
358e6     4B 60 1A 60 
358ea     E9 5F B9 5F 
358ee     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
358f2     FB 59 B2 0B 
358f6     92 FA 3A F7 
358fa     96 F6 79 F6 
358fe     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
35902     82 F6 86 F6 
35906     8C F6 DB 5D 
3590a     F1 5E C1 5E 
3590e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
35912     34 5E 04 5E 
35916     D6 5D A6 5D 
3591a     78 5D D4 3E 
3591e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
35922     27 F5 BA F4 
35926     AB F4 AD F4 
3592a     B2 F4 B8 F4 
3592e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
35932     26 5D 2B 5D 
35936     FC 5C CD 5C 
3593a     9F 5C 70 5C 
3593e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
35942     E5 5B B8 5B 
35946     DB 24 A7 FC 
3594a     D1 F4 4D F3 
3594e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
35952     04 F3 0B F3 
35956     11 F3 16 F3 
3595a     DE 18 98 5B 
3595e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
35962     4E 4A 29 48 
35966     A0 47 6A 47 
3596a     43 47 20 47 
3596e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
35972     E2 F6 98 F2 
35976     C5 F1 A3 F1 
3597a     A3 F1 A8 F1 
3597e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
35982     BF F1 00 3D 
35986     EF 46 CD 46 
3598a     AA 46 86 46 
3598e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
35992     1C 46 F9 45 
35996     D7 45 EE 43 
3599a     DE 02 E8 F3 
3599e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
359a2     61 F0 65 F0 
359a6     6D F0 74 F0 
359aa     7C F0 84 F0 
359ae     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
359b2     8E 45 6D 45 
359b6     49 45 27 45 
359ba     05 45 E1 44 
359be     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
359c2     F1 2F A9 FB 
359c6     8B F1 9B EF 
359ca     40 EF 36 EF 
359ce     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
359d2     4D EF 56 EF 
359d6     5E EF 7B 44 
359da     8C 44 69 44 
359de     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
359e2     03 44 E1 43 
359e6     C0 43 F5 37 
359ea     69 33 0F 11 
359ee     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
359f2     66 EE 37 EE 
359f6     38 EE 40 EE 
359fa     48 EE 51 EE 
359fe     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
35a02     7D 32 6A 32 
35a06     51 32 37 32 
35a0a     1F 32 05 32 
35a0e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
35a12     B9 31 A1 31 
35a16     F1 04 F4 F1 
35a1a     50 EE A0 ED 
35a1e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
35a22     93 ED 9A ED 
35a26     A4 ED AD ED 
35a2a     F4 27 C1 31 
35a2e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
35a32     78 31 5F 31 
35a36     46 31 2E 31 
35a3a     15 31 FC 30 
35a3e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
35a42     C4 EF 4A ED 
35a46     DC EC CB EC 
35a4a     D2 EC DA EC 
35a4e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
35a52     F9 EC 64 2F 
35a56     0A 31 F1 30 
35a5a     D9 30 C0 30 
35a5e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
35a62     78 30 5F 30 
35a66     46 30 38 23 
35a6a     A6 F6 19 EE 
35a6e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
35a72     20 EC 28 EC 
35a76     32 EC 3C EC 
35a7a     47 EC 51 EC 
35a7e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
35a82     A3 22 93 22 
35a86     7F 22 6E 22 
35a8a     5D 22 4C 22 
35a8e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
35a92     77 09 76 F1 
35a96     CC EC F0 EB 
35a9a     CD EB CE EB 
35a9e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
35aa2     ED EB F5 EB 
35aa6     3E F6 6B 22 
35aaa     5F 22 4E 22 
35aae     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
35ab2     1B 22 0B 22 
35ab6     FA 21 E9 21 
35aba     D8 21 4D FF 
35abe     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
35ac2     92 EB 7B EB 
35ac6     82 EB 8C EB 
35aca     97 EB A1 EB 
35ace     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
35ad2     15 22 04 22 
35ad6     F3 21 E3 21 
35ada     D2 21 C0 21 
35ade     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
35ae2     8E 21 7D 21 
35ae6     9A F8 A4 ED 
35aea     8E EB 2F EB 
35aee     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
35af2     37 EB 42 EB 
35af6     4C EB 57 EB 
35afa     B2 17 22 19 
35afe     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
35b02     FD 18 EF 18 
35b06     E3 18 D6 18 
35b0a     CA 18 BD 18 
35b0e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
35b12     60 EC 35 EB 
35b16     01 EB 01 EB 
35b1a     0C EB 16 EB 
35b1e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
35b22     34 EB D0 18 
35b26     00 19 F4 18 
35b2a     E8 18 DA 18 
35b2e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
35b32     B6 18 A9 18 
35b36     9D 18 91 05 
35b3a     F0 EF CA EB 
35b3e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
35b42     E8 EA F2 EA 
35b46     FE EA 07 EB 
35b4a     12 EB C2 EF 
35b4e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
35b52     D9 18 CD 18 
35b56     C0 18 B3 18 
35b5a     A7 18 9B 18 
35b5e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
35b62     B8 FC 30 EE 
35b66     61 EB DC EA 
35b6a     CD EA D2 EA 
35b6e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
35b72     F3 EA FE EA 
35b76     D2 09 D1 18 
35b7a     C3 18 17 18 
35b7e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
35b82     66 11 52 11 
35b86     49 11 41 11 
35b8a     38 11 E0 F4 
35b8e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
35b92     C9 EA C5 EA 
35b96     CF EA DB EA 
35b9a     E6 EA EF EA 
35b9e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
35ba2     89 11 80 11 
35ba6     78 11 6E 11 
35baa     67 11 5D 11 
35bae     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
35bb2     43 11 32 0D 
35bb6     9C F1 07 EC 
35bba     F8 EA CD EA 
35bbe     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
35bc2     E4 EA ED EA 
35bc6     F8 EA 02 EB 
35bca     55 11 91 11 
35bce     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
35bd2     75 11 6E 11 
35bd6     64 11 5E 11 
35bda     54 11 4A 11 
35bde     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
35be2     A8 EB F1 EA 
35be6     D9 EA DC EA 
35bea     E8 EA F1 EA 
35bee     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
35bf2     A6 EB 9E 11 
35bf6     A0 11 96 11 
35bfa     8D 11 85 11 
35bfe     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
35c02     6A 11 CA 0D 
35c06     36 0B 57 F8 
35c0a     6C ED 57 EB 
35c0e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
35c12     F4 EA FF EA 
35c16     09 EB 15 EB 
35c1a     1E EB 1A FD 
35c1e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
35c22     ED 0A E8 0A 
35c26     E2 0A DC 0A 
35c2a     D6 0A D1 0A 
35c2e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
35c32     F8 F3 BC EC 
35c36     57 EB 1E EB 
35c3a     18 EB 24 EB 
35c3e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
35c42     42 EB 4D EB 
35c46     08 09 20 0B 
35c4a     1A 0B 14 0B 
35c4e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
35c52     04 0B FE 0A 
35c56     F9 0A F2 0A 
35c5a     84 08 3A F1 
35c5e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
35c62     42 EB 42 EB 
35c66     4E EB 57 EB 
35c6a     62 EB 6B EB 
35c6e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
35c72     48 0B 43 0B 
35c76     3C 0B 36 0B 
35c7a     31 0B 2C 0B 
35c7e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
35c82     1B 0B 5C 00 
35c86     6A EF 1B EC 
35c8a     81 EB 6A EB 
35c8e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
35c92     85 EB 8E EB 
35c96     99 EB A3 EB 
35c9a     DD 05 E5 05 
35c9e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
35ca2     DB 05 D8 05 
35ca6     D5 05 D1 05 
35caa     D0 05 CB 05 
35cae     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
35cb2     0C EC BB EB 
35cb6     B3 EB BB EB 
35cba     C5 EB D0 EB 
35cbe     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
35cc2     E4 F7 2C 06 
35cc6     28 06 24 06 
35cca     22 06 1F 06 
35cce     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
35cd2     16 06 14 06 
35cd6     0F 06 D0 F3 
35cda     65 ED 2D EC 
35cde     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
35ce2     01 EC 0A EC 
35ce6     14 EC 1E EC 
35cea     29 EC FB 03 
35cee     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
35cf2     63 06 60 06 
35cf6     5E 06 59 06 
35cfa     58 06 54 06 
35cfe     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
35d02     69 F1 21 ED 
35d06     55 EC 33 EC 
35d0a     36 EC 40 EC 
35d0e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
35d12     5C EC 68 EC 
35d16     92 02 D9 02 
35d1a     D7 02 D7 02 
35d1e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
35d22     D1 02 D1 02 
35d26     CE 02 CD 02 
35d2a     5D FC 80 EF 
35d2e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
35d32     83 EC 8A EC 
35d36     93 EC 9C EC 
35d3a     A5 EC B1 EC 
35d3e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
35d42     2B 03 2A 03 
35d46     29 03 26 03 
35d4a     25 03 24 03 
35d4e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
35d52     1F 03 70 F7 
35d56     D0 EE 27 ED 
35d5a     DB EC D4 EC 
35d5e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
35d62     F0 EC FA EC 
35d66     02 ED F9 F4 
35d6a     7B 03 7C 03 
35d6e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
35d72     75 03 73 03 
35d76     72 03 70 03 
35d7a     6D 03 6C 03 
35d7e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
35d82     54 ED 22 ED 
35d86     22 ED 2C ED 
35d8a     35 ED 3F ED 
35d8e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
35d92     14 01 C3 03 
35d96     C1 03 C0 03 
35d9a     5F 01 A5 00 
35d9e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
35da2     7B 00 7C 00 
35da6     20 00 85 F1 
35daa     2A EE 89 ED 
35dae     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
35db2     80 ED 87 ED 
35db6     90 ED 9A ED 
35dba     A3 ED 73 00 
35dbe     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
35dc2     D0 00 D0 00 
35dc6     D0 00 D0 00 
35dca     D0 00 CF 00 
35dce     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
35dd2     80 F0 3D EE 
35dd6     D5 ED C7 ED 
35dda     CD ED D6 ED 
35dde     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
35de2     F2 ED FA ED 
35de6     1D 01 29 01 
35dea     27 01 27 01 
35dee     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
35df2     25 01 26 01 
35df6     26 01 23 01 
35dfa     D0 F7 EC EF 
35dfe     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
35e02     1C EE 24 EE 
35e06     2D EE 37 EE 
35e0a     40 EE 47 EE 
35e0e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
35e12     7D 01 7B 01 
35e16     7A 01 7A 01 
35e1a     79 01 78 01 
35e1e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
35e22     84 FE DE F3 
35e26     6C EF 93 EE 
35e2a     72 EE 72 EE 
35e2e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
35e32     8B EE 95 EE 
35e36     9E EE 15 FC 
35e3a     67 FE 67 FE 
35e3e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
35e42     6B FE 6B FE 
35e46     6D FE 6D FE 
35e4a     6D FE 6F FE 
35e4e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
35e52     DF EE CC EE 
35e56     CF EE D9 EE 
35e5a     E1 EE EA EE 
35e5e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
35e62     5A FE C4 FE 
35e66     C3 FE C5 FE 
35e6a     C6 FE C6 FE 
35e6e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
35e72     C8 FE C7 FE 
35e76     DA FB 85 F1 
35e7a     8D EF 31 EF 
35e7e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
35e82     34 EF 3E EF 
35e86     46 EF 4F EF 
35e8a     57 EF 0D FF 
35e8e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
35e92     1F FF 1F FF 
35e96     21 FF 21 FF 
35e9a     21 FF 21 FF 
35e9e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
35ea2     15 F1 BE EF 
35ea6     84 EF 7E EF 
35eaa     88 EF 8F EF 
35eae     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
35eb2     A9 EF 06 F2 
35eb6     A6 FC AB FC 
35eba     AD FC AE FC 
35ebe     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
35ec2     B2 FC B4 FC 
35ec6     B6 FC B7 FC 
35eca     8B F4 BD F0 
35ece     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
35ed2     E4 EF EE EF 
35ed6     F6 EF FD EF 
35eda     04 F0 0E F0 
35ede     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
35ee2     0B FD 0D FD 
35ee6     0F FD 11 FD 
35eea     11 FD 13 FD 
35eee     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
35ef2     17 FD 64 F3 
35ef6     CD F0 52 F0 
35efa     41 F0 45 F0 
35efe     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
35f02     5B F0 64 F0 
35f06     6D F0 FB FC 
35f0a     65 FD 68 FD 
35f0e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
35f12     6C FD 6D FD 
35f16     6F FD 70 FD 
35f1a     72 FD B3 FB 
35f1e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
35f22     A4 F0 99 F0 
35f26     A0 F0 A8 F0 
35f2a     AE F0 B9 F0 
35f2e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
35f32     CB FB DD FB 
35f36     DE FB E0 FB 
35f3a     E3 FB E3 FB 
35f3e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
35f42     E9 FB EC FB 
35f46     62 F7 27 F2 
35f4a     2A F1 FF F0 
35f4e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
35f52     0C F1 13 F1 
35f56     1B F1 23 F1 
35f5a     33 F2 3C FC 
35f5e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
35f62     42 FC 45 FC 
35f66     47 FC 48 FC 
35f6a     4A FC 4C FC 
35f6e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
35f72     20 F2 77 F1 
35f76     5C F1 5F F1 
35f7a     64 F1 6C F1 
35f7e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
35f82     83 F1 DC F8 
35f86     9A FC 9A FC 
35f8a     9B FC 9E FC 
35f8e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
35f92     A3 FC A4 FC 
35f96     A6 FC A9 FC 
35f9a     90 F4 33 F2 
35f9e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
35fa2     BA F1 BF F1 
35fa6     C7 F1 CE F1 
35faa     D6 F1 DC F1 
35fae     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
35fb2     F3 FC F5 FC 
35fb6     FE FB 79 FB 
35fba     62 FB 5F FB 
35fbe     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
35fc2     6F FA AF F3 
35fc6     53 F2 12 F2 
35fca     0F F2 15 F2 
35fce     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
35fd2     2A F2 32 F2 
35fd6     38 F2 9A FB 
35fda     AF FB B1 FB 
35fde     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
35fe2     B7 FB B8 FB 
35fe6     BA FB BC FB 
35fea     C1 FB 3B F8 
35fee     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
35ff2     6E F2 6C F2 
35ff6     74 F2 7A F2 
35ffa     81 F2 87 F2 
35ffe     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
36002     06 FC 09 FC 
36006     0C FC 0E FC 
3600a     0F FC 12 FC 
3600e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
36012     17 FC 1A FC 
36016     B2 F6 7B F3 
3601a     DD F2 C5 F2 
3601e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
36022     D4 F2 DB F2 
36026     E0 F2 E8 F2 
3602a     28 F8 60 FC 
3602e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
36032     64 FC 66 FC 
36036     68 FC 6A FC 
3603a     6D FC 52 FC 
3603e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
36042     78 F3 24 F3 
36046     1A F3 1E F3 
3604a     24 F3 2A F3 
3604e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
36052     3D F3 80 FA 
36056     0C FB 0F FB 
3605a     10 FB 14 FB 
3605e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
36062     1B FB 1D FB 
36066     1F FB 92 FA 
3606a     DE F4 AE F3 
3606e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
36072     79 F3 7E F3 
36076     84 F3 8C F3 
3607a     92 F3 97 F3 
3607e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
36082     67 FB 69 FB 
36086     6B FB 6F FB 
3608a     71 FB 72 FB 
3608e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
36092     E3 F8 BA F4 
36096     EE F3 CC F3 
3609a     CA F3 CF F3 
3609e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
360a2     E2 F3 E8 F3 
360a6     ED F3 B7 FB 
360aa     BC FB BE FB 
360ae     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
360b2     C4 FB C6 FB 
360b6     C8 FB C9 FB 
360ba     CC FB 8F F7 
360be     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
360c2     1E F4 1E F4 
360c6     24 F4 2A F4 
360ca     30 F4 38 F4 
360ce     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
360d2     AD FA B1 FA 
360d6     B4 FA B6 FA 
360da     BA FA BB FA 
360de     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
360e2     C2 FA C6 FA 
360e6     55 F6 C6 F4 
360ea     7D F4 72 F4 
360ee     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
360f2     83 F4 89 F4 
360f6     8F F4 94 F4 
360fa     66 FA 03 FB 
360fe     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
36102     0A FB 0E FB 
36106     10 FB 11 FB 
3610a     16 FB 18 FB 
3610e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
36112     F9 F4 CA F4 
36116     C5 F4 CB F4 
3611a     D1 F4 D7 F4 
3611e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
36122     E8 F4 3F FB 
36126     56 FB 58 FB 
3612a     5A FB 5E FB 
3612e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
36132     64 FB 64 FB 
36136     69 FB 99 F9 
3613a     E9 F5 33 F5 
3613e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
36142     1D F5 22 F5 
36146     27 F5 2E F5 
3614a     32 F5 37 F5 
3614e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
36152     BC FA BC FA 
36156     C1 FA C2 FA 
3615a     C4 FA C8 FA 
3615e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
36162     F9 F7 DB F5 
36166     78 F5 69 F5 
3616a     6A F5 70 F5 
3616e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
36172     7F F5 85 F5 
36176     6E F7 06 FB 
3617a     0A FB 0B FB 
3617e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
36182     14 FB 15 FB 
36186     18 FB 1B FB 
3618a     1D FB 70 F7 
3618e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
36192     B6 F5 BB F5 
36196     C0 F5 C6 F5 
3619a     CA F5 CF F5 
3619e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
361a2     54 FB 56 FB 
361a6     5A FB 5B FB 
361aa     5E FB 5F FB 
361ae     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
361b2     67 FB 52 FB 
361b6     29 F7 33 F6 
361ba     06 F6 02 F6 
361be     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
361c2     10 F6 16 F6 
361c6     1A F6 1F F6 
361ca     81 FB 9F FB 
361ce     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
361d2     51 FB F2 FA 
361d6     E3 FA E3 FA 
361da     E5 FA E9 FA 
361de     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
361e2     64 F6 4D F6 
361e6     4D F6 53 F6 
361ea     57 F6 5C F6 
361ee     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
361f2     6A F6 19 FB 
361f6     1E FB 22 FB 
361fa     23 FB 24 FB 
361fe     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
36202     2C FB 2E FB 
36206     32 FB F0 F8 
3620a     01 F7 A5 F6 
3620e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
36212     9F F6 A3 F6 
36216     A6 F6 AC F6 
3621a     B0 F6 EB F7 
3621e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
36222     68 FB 6C FB 
36226     6E FB 71 FB 
3622a     72 FB 74 FB 
3622e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
36232     71 F8 21 F7 
36236     E5 F6 DD F6 
3623a     E1 F6 E6 F6 
3623e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
36242     F5 F6 F7 F6 
36246     F7 FA AB FB 
3624a     AD FB AF FB 
3624e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
36252     B6 FB B9 FB 
36256     BB FB BC FB 
3625a     21 FB 07 F8 
3625e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
36262     22 F7 26 F7 
36266     2B F7 2E F7 
3626a     34 F7 38 F7 
3626e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
36272     13 FB 16 FB 
36276     17 FB 1B FB 
3627a     1E FB 20 FB 
3627e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
36282     26 FB 77 FA 
36286     F3 F7 7C F7 
3628a     67 F7 6A F7 
3628e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
36292     74 F7 7A F7 
36296     7E F7 82 F7 
3629a     53 FB 5A FB 
3629e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
362a2     5F FB 63 FB 
362a6     65 FB 67 FB 
362aa     69 FB 6A FB 
362ae     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
362b2     B5 F7 A9 F7 
362b6     AD F7 B0 F7 
362ba     B5 F7 B8 F7 
362be     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
362c2     6E F8 99 FB 
362c6     9C FB 9D FB 
362ca     9F FB A4 FB 
362ce     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
362d2     A9 FB AB FB 
362d6     AD FB 46 F9 
362da     26 F8 F0 F7 
362de     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
362e2     F4 F7 F8 F7 
362e6     FB F7 FF F7 
362ea     03 F8 65 FA 
362ee     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
362f2     2B FB 2F FB 
362f6     30 FB 32 FB 
362fa     34 FB 38 FB 
362fe     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
36302     E9 F8 4A F8 
36306     2E F8 2C F8 
3630a     2F F8 36 F8 
3630e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
36312     41 F8 44 F8 
36316     4A FB 67 FB 
3631a     68 FB 6B FB 
3631e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
36322     73 FB 74 FB 
36326     78 FB 7A FB 
3632a     14 FB E7 F8 
3632e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
36332     6D F8 70 F8 
36336     73 F8 78 F8 
3633a     7C F8 80 F8 
3633e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
36342     A6 FB A7 FB 
36346     A9 FB AC FB 
3634a     AF FB B1 FB 
3634e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
36352     B7 FB 73 FA 
36356     F8 F8 B4 F8 
3635a     A9 F8 AB F8 
3635e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
36362     B4 F8 B8 F8 
36366     BB F8 FA F8 
3636a     64 FB 65 FB 
3636e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
36372     6D FB 6F FB 
36376     70 FB 74 FB 
3637a     77 FB 77 FB 
3637e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
36382     E9 F8 E4 F8 
36386     E8 F8 EB F8 
3638a     EE F8 F2 F8 
3638e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
36392     B5 FA 9F FB 
36396     A1 FB A4 FB 
3639a     A5 FB A9 FB 
3639e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
363a2     AE FB B1 FB 
363a6     B2 FB C7 F9 
363aa     39 F9 22 F9 
363ae     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
363b2     26 F9 2A F9 
363b6     2E F9 32 F9 
363ba     33 F9 BA FB 
363be     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
363c2     DE FB E1 FB 
363c6     E2 FB E4 FB 
363ca     E5 FB E7 FB 
363ce     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
363d2     C5 F9 67 F9 
363d6     57 F9 56 F9 
363da     5B F9 5F F9 
363de     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
363e2     68 F9 6C F9 
363e6     0B FC 11 FC 
363ea     14 FC 15 FC 
363ee     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
363f2     B5 FB B5 FB 
363f6     B6 FB B8 FB 
363fa     E9 FA C8 F9 
363fe     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
36402     90 F9 94 F9 
36406     95 F9 99 F9 
3640a     9D F9 9F F9 
3640e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
36412     DE FB DF FB 
36416     E2 FB E4 FB 
3641a     E6 FB E8 FB 
3641e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
36422     EF FB AC FA 
36426     E9 F9 C7 F9 
3642a     C3 F9 C8 F9 
3642e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
36432     D0 F9 D4 F9 
36436     D6 F9 0E FB 
3643a     11 FC 13 FC 
3643e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
36442     19 FC 1B FC 
36446     1D FC 1E FC 
3644a     21 FC 22 FC 
3644e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
36452     F7 F9 F7 F9 
36456     FB F9 FE F9 
3645a     00 FA 03 FA 
3645e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
36462     1B FC 45 FC 
36466     46 FC 48 FC 
3646a     4A FC 4B FC 
3646e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
36472     52 FC 54 FC 
36476     F3 FB 82 FA 
3647a     35 FA 28 FA 
3647e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
36482     31 FA 32 FA 
36486     37 FA 37 FA 
3648a     3C FA 00 FC 
3648e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
36492     09 FC 0B FC 
36496     0F FC 12 FC 
3649a     12 FC 15 FC 
3649e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
364a2     8D FA 60 FA 
364a6     5B FA 5C FA 
364aa     60 FA 61 FA 
364ae     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
364b2     6C FA 6D FA 
364b6     37 FC 3A FC 
364ba     3B FC 3D FC 
364be     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
364c2     43 FC 44 FC 
364c6     45 FC 47 FC 
364ca     51 FB AB FA 
364ce     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
364d2     8E FA 91 FA 
364d6     93 FA 95 FA 
364da     98 FA 9B FA 
364de     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
364e2     68 FC 6A FC 
364e6     6C FC 6E FC 
364ea     70 FC 72 FC 
364ee     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
364f2     76 FC 3B FB 
364f6     D0 FA BB FA 
364fa     B9 FA BD FA 
364fe     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
36502     C4 FA C6 FA 
36506     CA FA 13 FC 
3650a     3A FC 3A FC 
3650e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
36512     41 FC 43 FC 
36516     44 FC 47 FC 
3651a     48 FC 3C FC 
3651e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
36522     E6 FA E8 FA 
36526     EB FA EE FA 
3652a     F0 FA F2 FA 
3652e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
36532     61 FC 66 FC 
36536     68 FC 6B FC 
3653a     6C FC 6E FC 
3653e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
36542     73 FC 75 FC 
36546     13 FC 3F FB 
3654a     17 FB 12 FB 
3654e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
36552     1A FB 1D FB 
36556     1F FB 20 FB 
3655a     23 FB 92 FC 
3655e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
36562     96 FC 97 FC 
36566     9A FC 9C FC 
3656a     9E FC 9F FC 
3656e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
36572     5A FB 41 FB 
36576     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3657a     73 32 00 04 
3657e     00 00 10 00 
36582     00 00 00 00 
36586     00 00 00 00 | atari2 file "atari2.s2"
3658a     43 87 43 87 
3658e     43 87 44 87 
36592     43 87 44 87 
36596     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3659a     43 87 43 87 
3659e     43 87 44 87 
365a2     43 87 43 87 
365a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
365aa     44 87 43 87 
365ae     44 87 43 87 
365b2     43 87 43 87 
365b6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
365ba     43 87 43 87 
365be     44 87 43 87 
365c2     44 87 44 87 
365c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
365ca     43 87 43 87 
365ce     44 87 43 87 
365d2     43 87 42 87 
365d6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
365da     43 87 43 87 
365de     43 87 43 87 
365e2     44 87 43 87 
365e6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
365ea     44 87 44 87 
365ee     43 87 44 87 
365f2     43 87 44 87 
365f6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
365fa     44 87 43 87 
365fe     44 87 44 87 
36602     43 87 43 87 
36606     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3660a     43 87 44 87 
3660e     44 87 43 87 
36612     43 87 44 87 
36616     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3661a     43 87 43 87 
3661e     43 87 43 87 
36622     43 87 43 87 
36626     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3662a     42 87 43 87 
3662e     44 87 42 87 
36632     43 87 43 87 
36636     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3663a     43 87 44 87 
3663e     44 87 43 87 
36642     43 87 43 87 
36646     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3664a     43 87 5C 87 
3664e     EE 86 AC 87 
36652     4C 7C A3 78 
36656     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3665a     BC 78 BB 78 
3665e     BD 78 BC 78 
36662     BB 78 BD 78 
36666     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3666a     BB 78 BB 78 
3666e     BC 78 BC 78 
36672     BC 78 BB 78 
36676     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3667a     BC 78 BC 78 
3667e     BC 78 BC 78 
36682     BC 78 BC 78 
36686     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3668a     BB 78 BC 78 
3668e     A0 78 4C 7C 
36692     11 7A 29 89 
36696     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3669a     44 87 43 87 
3669e     44 87 43 87 
366a2     43 87 42 87 
366a6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
366aa     43 87 43 87 
366ae     44 87 ED 85 
366b2     71 85 52 79 
366b6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
366ba     BC 78 BC 78 
366be     BC 78 BC 78 
366c2     BC 78 BC 78 
366c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
366ca     BC 78 BC 78 
366ce     BC 78 A0 78 
366d2     CF 7A B9 81 
366d6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
366da     44 87 43 87 
366de     43 87 44 87 
366e2     43 87 44 87 
366e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
366ea     43 87 43 87 
366ee     43 87 43 87 
366f2     44 87 43 87 
366f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
366fa     43 87 43 87 
366fe     44 87 43 87 
36702     44 87 43 87 
36706     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3670a     44 87 43 87 
3670e     43 87 43 87 
36712     5A 87 39 81 
36716     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3671a     A5 78 BC 78 
3671e     BB 78 BC 78 
36722     BB 78 BC 78 
36726     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3672a     BC 78 BC 78 
3672e     BC 78 BC 78 
36732     BC 78 8F 79 
36736     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3673a     09 85 47 87 
3673e     43 87 43 87 
36742     42 87 42 87 
36746     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3674a     43 87 43 87 
3674e     43 87 43 87 
36752     43 87 44 87 
36756     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3675a     43 87 43 87 
3675e     44 87 43 87 
36762     42 87 43 87 
36766     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3676a     44 87 43 87 
3676e     43 87 43 87 
36772     44 87 44 87 
36776     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3677a     94 78 55 7A 
3677e     B9 78 BC 78 
36782     BC 78 BC 78 
36786     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3678a     BC 78 BB 78 
3678e     BC 78 BC 78 
36792     BC 78 BC 78 
36796     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3679a     BB 78 BC 78 
3679e     BC 78 BC 78 
367a2     BB 78 BC 78 
367a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
367aa     BC 78 BC 78 
367ae     BD 78 BC 78 
367b2     BC 78 BB 78 
367b6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
367ba     94 78 B3 84 
367be     36 84 4A 87 
367c2     43 87 43 87 
367c6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
367ca     43 87 44 87 
367ce     43 87 43 87 
367d2     43 87 43 87 
367d6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
367da     43 87 44 87 
367de     43 87 44 87 
367e2     43 87 43 87 
367e6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
367ea     43 87 43 87 
367ee     43 87 45 87 
367f2     43 87 43 87 
367f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
367fa     43 87 44 87 
367fe     44 87 44 87 
36802     43 87 43 87 
36806     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3680a     43 87 42 87 
3680e     43 87 43 87 
36812     44 87 43 87 
36816     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3681a     54 87 3C 82 
3681e     36 83 52 79 
36822     C6 78 BC 78 
36826     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3682a     BB 78 BB 78 
3682e     BC 78 BC 78 
36832     BC 78 BC 78 
36836     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3683a     BD 78 ED 78 
3683e     1B 79 F4 83 
36842     4D 83 4E 87 
36846     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3684a     44 87 43 87 
3684e     42 87 44 87 
36852     43 87 42 87 
36856     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3685a     43 87 54 87 
3685e     26 82 B3 84 
36862     D6 77 BB 78 
36866     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3686a     BC 78 BB 78 
3686e     BB 78 BB 78 
36872     BB 78 BB 78 
36876     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3687a     BC 78 BC 78 
3687e     26 79 18 75 
36882     36 83 1F 84 
36886     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3688a     43 87 43 87 
3688e     43 87 43 87 
36892     43 87 44 87 
36896     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3689a     43 87 44 87 
3689e     44 87 43 87 
368a2     43 87 43 87 
368a6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
368aa     43 87 43 87 
368ae     43 87 43 87 
368b2     44 87 44 87 
368b6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
368ba     44 87 43 87 
368be     43 87 43 87 
368c2     43 87 44 87 
368c6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
368ca     44 87 44 87 
368ce     44 87 43 87 
368d2     44 87 43 87 
368d6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
368da     43 87 43 87 
368de     43 87 44 87 
368e2     44 87 43 87 
368e6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
368ea     43 87 43 87 
368ee     43 87 43 87 
368f2     43 87 44 87 
368f6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
368fa     43 87 44 87 
368fe     43 87 44 87 
36902     19 87 7D 86 
36906     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3690a     B1 78 BC 78 
3690e     BC 78 BC 78 
36912     BC 78 BC 78 
36916     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3691a     BC 78 BC 78 
3691e     BD 78 BC 78 
36922     B7 78 3B 7B 
36926     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3692a     96 86 44 87 
3692e     43 87 43 87 
36932     43 87 43 87 
36936     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3693a     44 87 44 87 
3693e     43 87 44 87 
36942     43 87 44 87 
36946     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3694a     43 87 44 87 
3694e     43 87 44 87 
36952     43 87 44 87 
36956     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3695a     43 87 44 87 
3695e     43 87 43 87 
36962     44 87 43 87 
36966     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3696a     44 87 44 87 
3696e     43 87 43 87 
36972     43 87 44 87 
36976     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3697a     43 87 43 87 
3697e     43 87 43 87 
36982     44 87 44 87 
36986     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3698a     36 83 CF 7A 
3698e     AB 78 BB 78 
36992     BC 78 BC 78 
36996     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3699a     BB 78 BC 78 
3699e     BC 78 BC 78 
369a2     BC 78 BC 78 
369a6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
369aa     BC 78 BC 78 
369ae     BC 78 BB 78 
369b2     BC 78 BC 78 
369b6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
369ba     BB 78 BC 78 
369be     BB 78 BC 78 
369c2     BC 78 BD 78 
369c6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
369ca     BC 78 BC 78 
369ce     BC 78 BC 78 
369d2     BC 78 BD 78 
369d6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
369da     BC 78 BB 78 
369de     BC 78 BB 78 
369e2     BB 78 BC 78 
369e6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
369ea     BC 78 BC 78 
369ee     BC 78 BC 78 
369f2     BC 78 BB 78 
369f6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
369fa     BC 78 BC 78 
369fe     BC 78 BD 78 
36a02     BB 78 BC 78 
36a06     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
36a0a     BC 78 BC 78 
36a0e     BC 78 BB 78 
36a12     BC 78 BB 78 
36a16     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
36a1a     BB 78 BC 78 
36a1e     BC 78 BC 78 
36a22     BC 78 BB 78 
36a26     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36a2a     BC 78 BC 78 
36a2e     BC 78 BB 78 
36a32     BC 78 BB 78 
36a36     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36a3a     BC 78 BC 78 
36a3e     BC 78 BC 78 
36a42     BB 78 BC 78 
36a46     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
36a4a     BC 78 9F 78 
36a4e     52 79 B3 84 
36a52     2F 86 60 87 
36a56     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
36a5a     44 87 43 87 
36a5e     43 87 43 87 
36a62     43 87 43 87 
36a66     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
36a6a     43 87 43 87 
36a6e     43 87 44 87 
36a72     43 87 43 87 
36a76     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
36a7a     43 87 43 87 
36a7e     43 87 43 87 
36a82     43 87 44 87 
36a86     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
36a8a     44 87 44 87 
36a8e     5E 87 BC 80 
36a92     FB 80 94 78 
36a96     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
36a9a     BD 78 BC 78 
36a9e     BB 78 BC 78 
36aa2     BB 78 BB 78 
36aa6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
36aaa     BC 78 BB 78 
36aae     BB 78 6B 79 
36ab2     D6 77 AC 87 
36ab6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
36aba     43 87 44 87 
36abe     43 87 43 87 
36ac2     44 87 43 87 
36ac6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
36aca     43 87 44 87 
36ace     43 87 5C 87 
36ad2     E7 80 00 80 
36ad6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
36ada     BC 78 BD 78 
36ade     BC 78 BC 78 
36ae2     BC 78 BB 78 
36ae6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36aea     BC 78 BC 78 
36aee     BB 78 BC 78 
36af2     BB 78 BC 78 
36af6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36afa     BB 78 BC 78 
36afe     BC 78 BC 78 
36b02     BC 78 BC 78 
36b06     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36b0a     BC 78 BC 78 
36b0e     BC 78 BC 78 
36b12     A0 78 8D 7B 
36b16     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
36b1a     60 87 43 87 
36b1e     44 87 44 87 
36b22     43 87 43 87 
36b26     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
36b2a     44 87 43 87 
36b2e     43 87 43 87 
36b32     44 87 73 86 
36b36     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
36b3a     51 7B B6 78 
36b3e     BC 78 BD 78 
36b42     BC 78 BC 78 
36b46     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36b4a     BB 78 BC 78 
36b4e     BD 78 BB 78 
36b52     BC 78 BB 78 
36b56     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
36b5a     BC 78 BC 78 
36b5e     BC 78 BC 78 
36b62     BB 78 BC 78 
36b66     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36b6a     BC 78 BB 78 
36b6e     BB 78 BC 78 
36b72     BC 78 BB 78 
36b76     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
36b7a     22 8C AF 84 
36b7e     48 87 43 87 
36b82     44 87 43 87 
36b86     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
36b8a     43 87 42 87 
36b8e     43 87 43 87 
36b92     44 87 43 87 
36b96     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
36b9a     43 87 43 87 
36b9e     44 87 44 87 
36ba2     43 87 43 87 
36ba6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
36baa     43 87 43 87 
36bae     43 87 43 87 
36bb2     44 87 43 87 
36bb6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
36bba     9F 8B D6 77 
36bbe     16 7C B3 78 
36bc2     BC 78 BB 78 
36bc6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
36bca     BB 78 BC 78 
36bce     BB 78 BC 78 
36bd2     BC 78 BC 78 
36bd6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
36bda     BC 78 BB 78 
36bde     BB 78 BC 78 
36be2     BB 78 BC 78 
36be6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
36bea     BB 78 BB 78 
36bee     BC 78 BC 78 
36bf2     BC 78 BB 78 
36bf6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
36bfa     BC 78 BC 78 
36bfe     BC 78 BD 78 
36c02     BB 78 BC 78 
36c06     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
36c0a     BC 78 BC 78 
36c0e     BC 78 BB 78 
36c12     BC 78 BC 78 
36c16     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
36c1a     A8 78 54 7E 
36c1e     F4 83 17 82 
36c22     50 87 43 87 
36c26     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
36c2a     44 87 43 87 
36c2e     44 87 43 87 
36c32     43 87 44 87 
36c36     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
36c3a     43 87 28 87 
36c3e     20 85 CF 7A 
36c42     70 7D AD 78 
36c46     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
36c4a     BB 78 BC 78 
36c4e     BC 78 BC 78 
36c52     BB 78 BB 78 
36c56     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
36c5a     BB 78 B2 78 
36c5e     9A 7C CF 7A 
36c62     4A 87 0D 87 
36c66     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
36c6a     43 87 44 87 
36c6e     43 87 44 87 
36c72     43 87 43 87 
36c76     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
36c7a     44 87 43 87 
36c7e     28 87 51 85 
36c82     11 7A 1E 7D 
36c86     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
36c8a     BC 78 BB 78 
36c8e     BC 78 BC 78 
36c92     BC 78 BC 78 
36c96     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
36c9a     BB 78 BC 78 
36c9e     BB 78 BC 78 
36ca2     BC 78 BC 78 
36ca6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
36caa     BB 78 BC 78 
36cae     BC 78 BC 78 
36cb2     BD 78 BB 78 
36cb6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
36cba     BC 78 BB 78 
36cbe     BC 78 BC 78 
36cc2     BC 78 BB 78 
36cc6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36cca     BC 78 BC 78 
36cce     BC 78 BC 78 
36cd2     BB 78 BC 78 
36cd6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36cda     BC 78 BD 78 
36cde     BC 78 BC 78 
36ce2     BC 78 BB 78 
36ce6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36cea     BC 78 BB 78 
36cee     BB 78 BC 78 
36cf2     BC 78 BB 78 
36cf6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36cfa     BB 78 BB 78 
36cfe     BB 78 BC 78 
36d02     B6 78 48 7D 
36d06     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
36d0a     56 87 43 87 
36d0e     42 87 44 87 
36d12     44 87 43 87 
36d16     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
36d1a     43 87 44 87 
36d1e     43 87 44 87 
36d22     4C 87 7E 83 
36d26     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
36d2a     F7 78 BC 78 
36d2e     BC 78 BB 78 
36d32     BB 78 BC 78 
36d36     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
36d3a     BC 78 BB 78 
36d3e     BC 78 BC 78 
36d42     BB 78 BC 78 
36d46     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
36d4a     BB 78 BC 78 
36d4e     BC 78 BC 78 
36d52     BC 78 BB 78 
36d56     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36d5a     BC 78 BC 78 
36d5e     BC 78 BC 78 
36d62     BC 78 BB 78 
36d66     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36d6a     BC 78 BB 78 
36d6e     BB 78 BC 78 
36d72     BC 78 BB 78 
36d76     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
36d7a     BC 78 BC 78 
36d7e     BB 78 BC 78 
36d82     BC 78 BC 78 
36d86     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
36d8a     73 32 00 04 
36d8e     00 00 10 00 
36d92     00 00 00 00 
36d96     00 00 00 00 | atari12 file "atari12.s2"
36d9a     00 6D 00 6D 
36d9e     00 6D 00 6D 
36da2     00 6D 00 6D 
36da6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36daa     00 6D 00 6D 
36dae     00 6D 00 6D 
36db2     00 6D 00 6D 
36db6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36dba     00 6D 00 6D 
36dbe     00 6D 00 6D 
36dc2     00 6D 00 6D 
36dc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36dca     00 6D 00 6D 
36dce     00 6D 00 6D 
36dd2     00 6D 00 6D 
36dd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36dda     00 6D 00 6D 
36dde     00 6D 00 6D 
36de2     00 6D 00 6D 
36de6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
36dea     00 6C 00 6C 
36dee     00 6C 00 6C 
36df2     00 6C 00 6C 
36df6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36dfa     00 6C 00 6C 
36dfe     00 6C 00 6C 
36e02     00 6C 00 6C 
36e06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e0a     00 6C 00 6C 
36e0e     00 6C 00 6C 
36e12     00 6C 00 6C 
36e16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e1a     00 6C 00 6C 
36e1e     00 6C 00 6C 
36e22     00 6C 00 6C 
36e26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e2a     00 6C 00 6C 
36e2e     00 6C 00 6C 
36e32     00 6C 00 6C 
36e36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e3a     00 6C 00 6C 
36e3e     00 6C 00 6C 
36e42     00 6C 00 6C 
36e46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e4a     00 6C 00 6C 
36e4e     00 6C 00 6C 
36e52     00 6C 00 6C 
36e56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e5a     00 6C 00 6C 
36e5e     00 6C 00 6C 
36e62     00 6C 00 6C 
36e66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e6a     00 6C 00 6C 
36e6e     00 6C 00 6C 
36e72     00 6C 00 6C 
36e76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e7a     00 6C 00 6C 
36e7e     00 6C 00 6C 
36e82     00 6C 00 6C 
36e86     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e8a     00 6C 00 6C 
36e8e     00 6C 00 6C 
36e92     00 6C 00 6C 
36e96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36e9a     00 6C 00 6B 
36e9e     00 6B 00 6B 
36ea2     00 6B 00 6B 
36ea6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36eaa     00 6B 00 6B 
36eae     00 6B 00 6B 
36eb2     00 6B 00 6B 
36eb6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36eba     00 6B 00 6B 
36ebe     00 6B 00 6B 
36ec2     00 6B 00 6B 
36ec6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36eca     00 6B 00 6B 
36ece     00 6B 00 6B 
36ed2     00 6B 00 6B 
36ed6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36eda     00 6B 00 6B 
36ede     00 6B 00 6B 
36ee2     00 6B 00 6B 
36ee6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36eea     00 6B 00 6B 
36eee     00 6B 00 6B 
36ef2     00 6B 00 6B 
36ef6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36efa     00 6B 00 6B 
36efe     00 6B 00 6B 
36f02     00 6B 00 6B 
36f06     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36f0a     00 6B 00 6B 
36f0e     00 6B 00 6B 
36f12     00 6B 00 6B 
36f16     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36f1a     00 6B 00 6B 
36f1e     00 6B 00 6B 
36f22     00 6B 00 6B 
36f26     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36f2a     00 6B 00 6B 
36f2e     00 6B 00 6B 
36f32     00 6A 00 9D 
36f36     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
36f3a     00 9E 00 9E 
36f3e     00 9E 00 9E 
36f42     00 9E 00 9E 
36f46     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36f4a     00 9E 00 9E 
36f4e     00 9E 00 9E 
36f52     00 9E 00 9E 
36f56     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36f5a     00 9E 00 9E 
36f5e     00 9E 00 9E 
36f62     00 9E 00 9E 
36f66     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36f6a     00 9E 00 9E 
36f6e     00 9E 00 9E 
36f72     00 9E 00 9E 
36f76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36f7a     00 9E 00 9E 
36f7e     00 9E 00 9E 
36f82     00 9E 00 9E 
36f86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36f8a     00 9E 00 9E 
36f8e     00 9E 00 9E 
36f92     00 9E 00 9E 
36f96     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36f9a     00 9E 00 9E 
36f9e     00 9E 00 9E 
36fa2     00 9E 00 9E 
36fa6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36faa     00 9E 00 9E 
36fae     00 9E 00 9E 
36fb2     00 9E 00 9E 
36fb6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36fba     00 9E 00 9E 
36fbe     00 9E 00 9E 
36fc2     00 9E 00 9E 
36fc6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
36fca     00 9F 00 9F 
36fce     00 9F 00 9F 
36fd2     00 9F 00 9F 
36fd6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36fda     00 9F 00 9F 
36fde     00 9F 00 9F 
36fe2     00 9F 00 9F 
36fe6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36fea     00 9F 00 9F 
36fee     00 9F 00 9F 
36ff2     00 9F 00 9F 
36ff6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36ffa     00 9F 00 9F 
36ffe     00 9F 00 9F 
37002     00 9F 00 9F 
37006     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3700a     00 9F 00 9F 
3700e     00 9F 00 9F 
37012     00 9F 00 9F 
37016     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3701a     00 9F 00 9F 
3701e     00 9F 00 9F 
37022     00 9F 00 9F 
37026     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3702a     00 9F 00 9F 
3702e     00 9F 00 9F 
37032     00 9F 00 9F 
37036     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3703a     00 9F 00 9F 
3703e     00 9F 00 9F 
37042     00 9F 00 9F 
37046     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3704a     00 9F 00 9F 
3704e     00 9F 00 9F 
37052     00 9F 00 9F 
37056     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3705a     00 9F 00 9F 
3705e     00 9F 00 9F 
37062     00 9F 00 9F 
37066     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3706a     00 9F 00 9F 
3706e     00 9F 00 9F 
37072     00 9F 00 9F 
37076     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3707a     00 9F 00 9F 
3707e     00 9F 00 9F 
37082     00 9F 00 9F 
37086     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3708a     00 9F 00 9F 
3708e     00 9F 00 A0 
37092     00 A0 00 A0 
37096     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3709a     00 A0 00 A0 
3709e     00 A0 00 A0 
370a2     00 A0 00 A0 
370a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
370aa     00 A0 00 A0 
370ae     00 A0 00 A0 
370b2     00 A0 00 A0 
370b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
370ba     00 A0 00 A0 
370be     00 A0 00 A0 
370c2     00 A0 00 A0 
370c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
370ca     00 A0 00 A0 
370ce     00 A0 00 A0 
370d2     00 A0 00 A0 
370d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
370da     00 A0 00 A0 
370de     00 A0 00 A0 
370e2     00 A0 00 A0 
370e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
370ea     00 A0 00 A0 
370ee     00 A0 00 A0 
370f2     00 A0 00 A0 
370f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
370fa     00 A0 00 A0 
370fe     00 A0 00 A0 
37102     00 A0 00 A0 
37106     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3710a     00 A0 00 A0 
3710e     00 A0 00 A0 
37112     00 A0 00 A0 
37116     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3711a     00 A0 00 A0 
3711e     00 A0 00 A0 
37122     00 A0 00 A0 
37126     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3712a     00 A0 00 A0 
3712e     00 A0 00 A0 
37132     00 A0 00 A0 
37136     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3713a     00 A0 00 A0 
3713e     00 A0 00 A0 
37142     00 A0 00 A0 
37146     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3714a     00 A0 00 A0 
3714e     00 A0 00 A0 
37152     00 A0 00 A0 
37156     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3715a     00 6D 00 6D 
3715e     00 6D 00 6D 
37162     00 6D 00 6D 
37166     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3716a     00 6D 00 6D 
3716e     00 6D 00 6D 
37172     00 6D 00 6D 
37176     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3717a     00 6D 00 6D 
3717e     00 6D 00 6D 
37182     00 6D 00 6D 
37186     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3718a     00 6D 00 6D 
3718e     00 6D 00 6D 
37192     00 6D 00 6D 
37196     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3719a     00 6D 00 6D 
3719e     00 6D 00 6D 
371a2     00 6D 00 6D 
371a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
371aa     00 6D 00 6D 
371ae     00 6D 00 6D 
371b2     00 6D 00 6D 
371b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
371ba     00 6D 00 6D 
371be     00 6D 00 6D 
371c2     00 6D 00 6D 
371c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
371ca     00 6D 00 6D 
371ce     00 6D 00 6D 
371d2     00 6D 00 6D 
371d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
371da     00 6D 00 6D 
371de     00 A0 00 A0 
371e2     00 A0 00 A0 
371e6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
371ea     00 A0 00 A0 
371ee     00 A0 00 A0 
371f2     00 A0 00 A0 
371f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
371fa     00 A0 00 A0 
371fe     00 A0 00 A0 
37202     00 A0 00 A0 
37206     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3720a     00 A0 00 A0 
3720e     00 A0 00 A0 
37212     00 A0 00 A0 
37216     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3721a     00 A0 00 A0 
3721e     00 A0 00 A0 
37222     00 A0 00 A0 
37226     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3722a     00 A0 00 A0 
3722e     00 A0 00 A0 
37232     00 A0 00 A0 
37236     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3723a     00 A0 00 A0 
3723e     00 A0 00 A0 
37242     00 A0 00 A0 
37246     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3724a     00 A0 00 A0 
3724e     00 A0 00 A0 
37252     00 A0 00 A0 
37256     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3725a     00 A0 00 A0 
3725e     00 A0 00 A0 
37262     00 A0 00 A0 
37266     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3726a     00 6D 00 6D 
3726e     00 6D 00 6D 
37272     00 6D 00 6D 
37276     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3727a     00 6D 00 6D 
3727e     00 6D 00 6D 
37282     00 6D 00 6D 
37286     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3728a     00 6D 00 6D 
3728e     00 6D 00 6D 
37292     00 6D 00 6D 
37296     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3729a     00 6D 00 6D 
3729e     00 6D 00 6D 
372a2     00 6D 00 6D 
372a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
372aa     00 6D 00 6D 
372ae     00 6D 00 6D 
372b2     00 6D 00 6D 
372b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
372ba     00 6D 00 6D 
372be     00 6D 00 6D 
372c2     00 6D 00 6D 
372c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
372ca     00 6D 00 6D 
372ce     00 6D 00 6D 
372d2     00 6D 00 6D 
372d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
372da     00 6D 00 6D 
372de     00 6D 00 6D 
372e2     00 6D 00 6D 
372e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
372ea     00 6D 00 6D 
372ee     00 6C 00 A0 
372f2     00 9F 00 A0 
372f6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
372fa     00 A0 00 A0 
372fe     00 A0 00 A0 
37302     00 A0 00 A0 
37306     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3730a     00 A0 00 A0 
3730e     00 A0 00 A0 
37312     00 A0 00 A0 
37316     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3731a     00 A0 00 A0 
3731e     00 A0 00 A0 
37322     00 A0 00 A0 
37326     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3732a     00 A0 00 A0 
3732e     00 A0 00 A0 
37332     00 A0 00 A0 
37336     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3733a     00 A0 00 A0 
3733e     00 A0 00 A0 
37342     00 A0 00 A0 
37346     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3734a     00 A0 00 A0 
3734e     00 A0 00 A0 
37352     00 A0 00 A0 
37356     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3735a     00 A0 00 A0 
3735e     00 A0 00 A0 
37362     00 A0 00 A0 
37366     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3736a     00 A0 00 A0 
3736e     00 A0 00 A0 
37372     00 A0 00 A0 
37376     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3737a     00 A0 00 A0 
3737e     00 A0 00 A0 
37382     00 A0 00 A0 
37386     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3738a     00 A0 00 A0 
3738e     00 A0 00 A0 
37392     00 A0 00 A0 
37396     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3739a     00 A0 00 A0 
3739e     00 A0 00 A0 
373a2     00 A0 00 A0 
373a6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
373aa     00 A1 00 A1 
373ae     00 A1 00 A1 
373b2     00 A1 00 A1 
373b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
373ba     00 A1 00 A1 
373be     00 A1 00 A1 
373c2     00 A1 00 A1 
373c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
373ca     00 A1 00 A1 
373ce     00 A1 00 A1 
373d2     00 A1 00 A1 
373d6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
373da     00 A1 00 A1 
373de     00 A1 00 A1 
373e2     00 A1 00 A1 
373e6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
373ea     00 A1 00 A1 
373ee     00 A1 00 A1 
373f2     00 A1 00 A1 
373f6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
373fa     00 A1 00 A1 
373fe     00 A1 00 A1 
37402     00 6E 00 6E 
37406     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3740a     00 6E 00 6E 
3740e     00 6E 00 6E 
37412     00 6E 00 6E 
37416     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3741a     00 6E 00 6E 
3741e     00 6E 00 6E 
37422     00 6E 00 6E 
37426     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3742a     00 6E 00 6E 
3742e     00 6E 00 6E 
37432     00 6E 00 6E 
37436     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3743a     00 6E 00 6D 
3743e     00 6D 00 6D 
37442     00 6D 00 6D 
37446     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3744a     00 6D 00 6D 
3744e     00 6D 00 6D 
37452     00 6D 00 6D 
37456     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3745a     00 6D 00 6D 
3745e     00 6D 00 6D 
37462     00 6D 00 6D 
37466     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3746a     00 6D 00 6D 
3746e     00 6D 00 6D 
37472     00 6D 00 6D 
37476     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3747a     00 6D 00 6D 
3747e     00 6D 00 6D 
37482     00 6D 00 6D 
37486     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3748a     00 6D 00 6D 
3748e     00 6D 00 6D 
37492     00 6D 00 6D 
37496     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3749a     00 6D 00 6D 
3749e     00 6D 00 6D 
374a2     00 6D 00 6D 
374a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374aa     00 6D 00 6D 
374ae     00 6D 00 6D 
374b2     00 6D 00 6D 
374b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374ba     00 6D 00 6D 
374be     00 6D 00 6D 
374c2     00 6D 00 6D 
374c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374ca     00 6D 00 6D 
374ce     00 6D 00 6D 
374d2     00 6D 00 6D 
374d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374da     00 6D 00 6D 
374de     00 6D 00 6D 
374e2     00 6D 00 6D 
374e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
374ea     00 6D 00 6D 
374ee     00 6C 00 6C 
374f2     00 6C 00 6C 
374f6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
374fa     00 6C 00 6C 
374fe     00 6C 00 6C 
37502     00 6C 00 6C 
37506     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3750a     00 6C 00 6C 
3750e     00 6C 00 6C 
37512     00 9D 00 9F 
37516     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3751a     00 9F 00 9F 
3751e     00 9F 00 9F 
37522     00 A0 00 A0 
37526     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3752a     00 A0 00 A0 
3752e     00 A0 00 A0 
37532     00 A0 00 A0 
37536     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3753a     00 A0 00 A0 
3753e     00 A0 00 A0 
37542     00 A0 00 A0 
37546     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3754a     00 A0 00 A0 
3754e     00 A0 00 A0 
37552     00 A0 00 A0 
37556     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3755a     00 A0 00 A0 
3755e     00 A0 00 A0 
37562     00 A0 00 A0 
37566     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3756a     00 A0 00 A0 
3756e     00 A0 00 A0 
37572     00 A0 00 A0 
37576     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3757a     00 A0 00 A0 
3757e     00 A0 00 A0 
37582     00 A0 00 A0 
37586     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3758a     00 A0 00 A0 
3758e     00 A0 00 A0 
37592     00 A0 00 A0 
37596     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3759a     01 00 00 00 
3759e     00 00 00 00 
375a2     00 00 00 00 
375a6     00 00 00 00 | mouse  file "mouse2.def"
375aa     00 00 00 00 
375ae     00 00 00 00 
375b2     00 00 00 00 
375b6     00 00 00 00 | 	byte	$00[16]
375ba     01 01 00 00 
375be     00 00 00 00 
375c2     00 00 00 00 
375c6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
375ca     00 00 00 00 
375ce     00 00 00 00 
375d2     00 00 00 00 
375d6     00 00 00 00 | 	byte	$00[16]
375da     01 0D 01 00 
375de     00 00 00 00 
375e2     00 00 00 00 
375e6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
375ea     00 00 00 00 
375ee     00 00 00 00 
375f2     00 00 00 00 
375f6     00 00 00 00 | 	byte	$00[16]
375fa     01 0D 0D 01 
375fe     00 00 00 00 
37602     00 00 00 00 
37606     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3760a     00 00 00 00 
3760e     00 00 00 00 
37612     00 00 00 00 
37616     00 00 00 00 | 	byte	$00[16]
3761a     01 0D 0D 0D 
3761e     01 00 00 00 
37622     00 00 00 00 
37626     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3762a     00 00 00 00 
3762e     00 00 00 00 
37632     00 00 00 00 
37636     00 00 00 00 | 	byte	$00[16]
3763a     01 0D 0D 0D 
3763e     0D 01 00 00 
37642     00 00 00 00 
37646     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3764a     00 00 00 00 
3764e     00 00 00 00 
37652     00 00 00 00 
37656     00 00 00 00 | 	byte	$00[16]
3765a     01 0D 0D 0D 
3765e     0D 0D 01 00 
37662     00 00 00 00 
37666     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3766a     00 00 00 00 
3766e     00 00 00 00 
37672     00 00 00 00 
37676     00 00 00 00 | 	byte	$00[16]
3767a     01 0D 0D 0D 
3767e     0D 0D 0D 01 
37682     00 00 00 00 
37686     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3768a     00 00 00 00 
3768e     00 00 00 00 
37692     00 00 00 00 
37696     00 00 00 00 | 	byte	$00[16]
3769a     01 0D 0D 0D 
3769e     0D 0D 0D 0C 
376a2     01 00 00 00 
376a6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
376aa     00 00 00 00 
376ae     00 00 00 00 
376b2     00 00 00 00 
376b6     00 00 00 00 | 	byte	$00[16]
376ba     01 0D 0D 0D 
376be     0D 0D 0D 0D 
376c2     0C 01 00 00 
376c6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
376ca     00 00 00 00 
376ce     00 00 00 00 
376d2     00 00 00 00 
376d6     00 00 00 00 | 	byte	$00[16]
376da     01 0D 0D 0D 
376de     0D 0D 0D 0D 
376e2     0D 0C 01 00 
376e6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
376ea     00 00 00 00 
376ee     00 00 00 00 
376f2     00 00 00 00 
376f6     00 00 00 00 | 	byte	$00[16]
376fa     01 0D 0D 0D 
376fe     0D 0D 0D 0D 
37702     0D 0D 0B 01 
37706     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3770a     00 00 00 00 
3770e     00 00 00 00 
37712     00 00 00 00 
37716     00 00 00 00 | 	byte	$00[16]
3771a     01 0D 0D 0D 
3771e     0C 0D 0D 03 
37722     01 01 01 01 
37726     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3772a     00 00 00 00 
3772e     00 00 00 00 
37732     00 00 00 00 
37736     00 00 00 00 | 	byte	$00[16]
3773a     01 0D 0D 0C 
3773e     01 09 0D 03 
37742     00 00 00 00 
37746     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3774a     00 00 00 00 
3774e     00 00 00 00 
37752     00 00 00 00 
37756     00 00 00 00 | 	byte	$00[16]
3775a     01 0D 0C 01 
3775e     00 01 0D 0B 
37762     01 00 00 00 
37766     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3776a     00 00 00 00 
3776e     00 00 00 00 
37772     00 00 00 00 
37776     00 00 00 00 | 	byte	$00[16]
3777a     01 0C 01 00 
3777e     00 01 0A 0D 
37782     01 00 00 00 
37786     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3778a     00 00 00 00 
3778e     00 00 00 00 
37792     00 00 00 00 
37796     00 00 00 00 | 	byte	$00[16]
3779a     01 01 00 00 
3779e     00 00 01 0D 
377a2     0B 01 00 00 
377a6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
377aa     00 00 00 00 
377ae     00 00 00 00 
377b2     00 00 00 00 
377b6     00 00 00 00 
377ba     00 00 00 00 
377be     00 00       | 	byte	$00[22]
377c0     01 0B 0D 01 
377c4     00 00 00 00 
377c8     00 00 00 00 
377cc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377d0     00 00 00 00 
377d4     00 00 00 00 
377d8     00 00 00 00 
377dc     00 00 00 00 
377e0     00          | 	byte	$00[17]
377e1     01 01 00 00 
377e5     00 00 00 00 
377e9     00 00 00 00 
377ed     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
377f1     00 00 00 00 
      ...             
37995     00 00 00 00 
37999     00          | 	byte	$00[425]
3799a                 | 
3799a     00 00       |              	org
3799c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
379a0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
379a4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
379a8 003             | 
379a8 003 00 30 04 F6 |                 mov     psramaddr,#0
379ac 004             | 
379ac 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
379b0 005 20 00 00 FF 
379b4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
379b8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
379bc 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
379c0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
379c4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
379c8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
379cc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
379d0 00d             | 
379d0 00d 20 00 00 FF 
379d4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
379d8 00f E0 03 00 FF 
379dc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
379e0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
379e4 012             | 
379e4 012             |                 
379e4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
379e8 013             |     
379e8 013 01 2C 60 FD |                 cogid 	t11				' get id
379ec 014 00 00 EC FC |                 coginit #0,#0				' start the new program
379f0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
379f4 016             | 
379f4 016 00 00 00 00 | t11 		long 	0
379f8 017 00 FF 07 00 | mailbox 	long 	$7FF00
379fc 018 00 00 00 00 | psramaddr 	long 	0
37a00 019 00 00 00 00 | pslockval	long 	0
37a04 01a 00 00 00 00 | cmd             long    0
37a08 01b 00 00 00 00 | buf1            long    0
37a0c 01c 00 40 00 00 | buf2            long    16384
37a10 01d 14 7A 03 00 | 	long	@@@_dat_ + 12612
37a14 01e 50 32 20 52 
37a18 01f 65 74 72 6F 
37a1c 020 6D 61 63 68 
37a20 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
37a24 022 42 41 53 49 
37a28 023 43 20 76 65 
37a2c 024 72 73 69 6F 
37a30 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
37a34 026 33 32 00 00 | 	byte	$33, $32, $00, $00
37a38 027             | 	alignl
37a38 027             | _hg010b_spin2_dat_
37a38 027             | 
37a38 027 00 00 00 00 
37a3c 028 00 00 00 00 
37a40 029 00 00 00 00 
37a44 02a 00 00 00 00 
37a48 02b 00 00 00    | vga_font       file "vgafont.def"
37a4b 02b 7E 81 A5 81 
37a4f 02c 81 BD 99 81 
37a53 02d 81 7E 00 00 
37a57 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
37a5b 02f 7E FF DB FF 
37a5f 030 FF C3 E7 FF 
37a63 031 FF 7E 00 00 
37a67 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
37a6b 033 00 36 7F 7F 
37a6f 034 7F 7F 3E 1C 
37a73 035 08 00 00 00 
37a77 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
37a7b 037 00 08 1C 3E 
37a7f 038 7F 3E 1C 08 
37a83 039 00 00 00 00 
37a87 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
37a8b 03b 18 3C 3C E7 
37a8f 03c E7 E7 18 18 
37a93 03d 3C 00 00 00 
37a97 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
37a9b 03f 18 3C 7E FF 
37a9f 040 FF 7E 18 18 
37aa3 041 3C 00 00 00 
37aa7 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
37aab 043 00 00 00 18 
37aaf 044 3C 3C 18 00 
37ab3 045 00 00 00 00 
37ab7 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
37abb 047 FF FF FF E7 
37abf 048 C3 C3 E7 FF 
37ac3 049 FF FF FF FF 
37ac7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
37acb 04b 00 00 3C 66 
37acf 04c 42 42 66 3C 
37ad3 04d 00 00 00 00 
37ad7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
37adb 04f FF FF C3 99 
37adf 050 BD BD 99 C3 
37ae3 051 FF FF FF FF 
37ae7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
37aeb 053 78 70 58 4C 
37aef 054 1E 33 33 33 
37af3 055 33 1E 00 00 
37af7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
37afb 057 3C 66 66 66 
37aff 058 66 3C 18 7E 
37b03 059 18 18 00 00 
37b07 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
37b0b 05b FC CC FC 0C 
37b0f 05c 0C 0C 0C 0E 
37b13 05d 0F 07 00 00 
37b17 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
37b1b 05f FE C6 FE C6 
37b1f 060 C6 C6 C6 E6 
37b23 061 E7 67 03 00 
37b27 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
37b2b 063 18 18 DB 3C 
37b2f 064 E7 3C DB 18 
37b33 065 18 00 00 00 
37b37 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
37b3b 067 03 07 0F 1F 
37b3f 068 7F 1F 0F 07 
37b43 069 03 01 00 00 
37b47 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
37b4b 06b 60 70 78 7C 
37b4f 06c 7F 7C 78 70 
37b53 06d 60 40 00 00 
37b57 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
37b5b 06f 18 3C 7E 18 
37b5f 070 18 18 7E 3C 
37b63 071 18 00 00 00 
37b67 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
37b6b 073 66 66 66 66 
37b6f 074 66 66 66    | 	byte	$66[7]
37b72 075 00 66 66 00 
37b76 076 00 00 00 00 
37b7a 077 00 FE DB DB 
37b7e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
37b82 079 D8 D8 D8 00 
37b86 07a 00 00 00 3E 
37b8a 07b 63 06 1C 36 
37b8e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
37b92 07d 30 63 3E 00 
37b96 07e 00 00 00 00 
37b9a 07f 00 00 00 00 
37b9e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
37ba2 081 7F 7F 7F 00 
37ba6 082 00 00 00 00 
37baa 083 00 18 3C 7E 
37bae 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
37bb2 085 3C 18 7E 00 
37bb6 086 00 00 00 00 
37bba 087 00 18 3C 7E 
37bbe 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
37bc2 089 18 18 18 00 
37bc6 08a 00 00 00 00 
37bca 08b 00 18 18 18 
37bce 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37bd2 08d 7E 3C 18 00 
37bd6 08e 00 00 00 00 
37bda 08f 00 00 00 18 
37bde 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
37be2 091 00 00 00 00 
37be6 092 00 00 00 00 
37bea 093 00 00 00    | 	byte	$00[11]
37bed 094 0C 06 7F 06 
37bf1 095 0C 00 00 00 
37bf5 096 00 00 00 00 
37bf9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37bfd 098 00 03 03 03 
37c01 099 7F 00 00 00 
37c05 09a 00 00 00 00 
37c09 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c0d 09c 14 36 7F 36 
37c11 09d 14 00 00 00 
37c15 09e 00 00 00 00 
37c19 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
37c1d 0a0 1C 1C 3E 3E 
37c21 0a1 7F 7F 00 00 
37c25 0a2 00 00 00 00 
37c29 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
37c2d 0a4 7F 3E 3E 1C 
37c31 0a5 1C 08 00 00 
37c35 0a6 00 00 00 00 
37c39 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c3d 0a8 00 00 00 00 
37c41 0a9 00 00 00 00 
37c45 0aa 00 00 00 00 
37c49 0ab 00 00       | 	byte	$00[14]
37c4b 0ab 18 3C 3C 3C 
37c4f 0ac 18 18 18 00 
37c53 0ad 18 18 00 00 
37c57 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
37c5b 0af 66 24 00 00 
37c5f 0b0 00 00 00 00 
37c63 0b1 00 00 00 00 
37c67 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c6b 0b3 00 36 36 7F 
37c6f 0b4 36 36 36 7F 
37c73 0b5 36 36 00 00 
37c77 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
37c7b 0b7 3E 63 43 03 
37c7f 0b8 3E 60 60 61 
37c83 0b9 63 3E 18 18 
37c87 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
37c8b 0bb 00 00 43 63 
37c8f 0bc 30 18 0C 06 
37c93 0bd 63 61 00 00 
37c97 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
37c9b 0bf 1C 36 36 1C 
37c9f 0c0 6E 3B 33 33 
37ca3 0c1 33 6E 00 00 
37ca7 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
37cab 0c3 0C 0C 0C 06 
37caf 0c4 00 00 00 00 
37cb3 0c5 00 00 00 00 
37cb7 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37cbb 0c7 30 18 0C 0C 
37cbf 0c8 0C 0C 0C 0C 
37cc3 0c9 18 30 00 00 
37cc7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
37ccb 0cb 0C 18 30 30 
37ccf 0cc 30 30 30 30 
37cd3 0cd 18 0C 00 00 
37cd7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
37cdb 0cf 00 00 00 66 
37cdf 0d0 3C FF 3C 66 
37ce3 0d1 00 00 00 00 
37ce7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
37ceb 0d3 00 00 00 18 
37cef 0d4 18 7E 18 18 
37cf3 0d5 00 00 00 00 
37cf7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
37cfb 0d7 00 00 00 00 
37cff 0d8 00 00 00 00 | 	byte	$00[8]
37d03 0d9 18 18 18 0C 
37d07 0da 00 00 00 00 
37d0b 0db 00 00 00 00 
37d0f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
37d13 0dd 00 00 00 00 
37d17 0de 00 00 00 00 
37d1b 0df 00 00 00 00 
37d1f 0e0 00 00 00 00 | 	byte	$00[16]
37d23 0e1 18 18 00 00 
37d27 0e2 00 00 00 00 
37d2b 0e3 00 00 40 60 
37d2f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
37d33 0e5 03 01 00 00 
37d37 0e6 00 00 00 00 
37d3b 0e7 1C 36 63 63 
37d3f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
37d43 0e9 36 1C 00 00 
37d47 0ea 00 00 00 00 
37d4b 0eb 18 1C 1E 18 
37d4f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
37d53 0ed 18 7E 00 00 
37d57 0ee 00 00 00 00 
37d5b 0ef 3E 63 60 30 
37d5f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
37d63 0f1 63 7F 00 00 
37d67 0f2 00 00 00 00 
37d6b 0f3 3E 63 60 60 
37d6f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
37d73 0f5 63 3E 00 00 
37d77 0f6 00 00 00 00 
37d7b 0f7 30 38 3C 36 
37d7f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
37d83 0f9 30 78 00 00 
37d87 0fa 00 00 00 00 
37d8b 0fb 7F 03 03 03 
37d8f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
37d93 0fd 63 3E 00 00 
37d97 0fe 00 00 00 00 
37d9b 0ff 1C 06 03 03 
37d9f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
37da3 101 63 3E 00 00 
37da7 102 00 00 00 00 
37dab 103 7F 63 60 60 
37daf 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
37db3 105 0C 0C 00 00 
37db7 106 00 00 00 00 
37dbb 107 3E 63 63 63 
37dbf 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
37dc3 109 63 3E 00 00 
37dc7 10a 00 00 00 00 
37dcb 10b 3E 63 63 63 
37dcf 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
37dd3 10d 30 1E 00 00 
37dd7 10e 00 00 00 00 
37ddb 10f 00 00 00 18 
37ddf 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
37de3 111 18 18 00 00 
37de7 112 00 00 00 00 
37deb 113 00 00 00 18 
37def 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
37df3 115 18 18 0C 00 
37df7 116 00 00 00 00 
37dfb 117 00 60 30 18 
37dff 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
37e03 119 30 60 00 00 
37e07 11a 00 00 00 00 
37e0b 11b 00 00 00 7E 
37e0f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
37e13 11d 00 00 00 00 
37e17 11e 00 00 00 00 
37e1b 11f 00          | 	byte	$00[9]
37e1c 120 06 0C 18 30 
37e20 121 60 30 18 0C 
37e24 122 06 00 00 00 
37e28 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
37e2c 124 63 63 30 18 
37e30 125 18 18 00 18 
37e34 126 18 00 00 00 
37e38 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
37e3c 128 3E 63 63 7B 
37e40 129 7B 7B 3B 03 
37e44 12a 3E 00 00 00 
37e48 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
37e4c 12c 1C 36 63 63 
37e50 12d 7F 63 63 63 
37e54 12e 63 00 00 00 
37e58 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
37e5c 130 66 66 66 3E 
37e60 131 66 66 66 66 
37e64 132 3F 00 00 00 
37e68 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
37e6c 134 66 43 03 03 
37e70 135 03 03 43 66 
37e74 136 3C 00 00 00 
37e78 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
37e7c 138 36 66 66 66 
37e80 139 66 66 66 36 
37e84 13a 1F 00 00 00 
37e88 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
37e8c 13c 66 46 16 1E 
37e90 13d 16 06 46 66 
37e94 13e 7F 00 00 00 
37e98 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
37e9c 140 66 46 16 1E 
37ea0 141 16 06 06 06 
37ea4 142 0F 00 00 00 
37ea8 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
37eac 144 66 43 03 03 
37eb0 145 7B 63 63 66 
37eb4 146 5C 00 00 00 
37eb8 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
37ebc 148 63 63 63 7F 
37ec0 149 63 63 63 63 
37ec4 14a 63 00 00 00 
37ec8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
37ecc 14c 18 18 18 18 
37ed0 14d 18 18 18 18 | 	byte	$18[8]
37ed4 14e 3C 00 00 00 
37ed8 14f 00 00 00 78 
37edc 150 30 30 30 30 
37ee0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
37ee4 152 1E 00 00 00 
37ee8 153 00 00 00 67 
37eec 154 66 66 36 1E 
37ef0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
37ef4 156 67 00 00 00 
37ef8 157 00 00 00 0F 
37efc 158 06 06 06 06 
37f00 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
37f04 15a 7F 00 00 00 
37f08 15b 00 00 00 63 
37f0c 15c 77 7F 7F 6B 
37f10 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
37f14 15e 63 00 00 00 
37f18 15f 00 00 00 63 
37f1c 160 67 6F 7F 7B 
37f20 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
37f24 162 63 00 00 00 
37f28 163 00 00 00 3E 
37f2c 164 63 63 63 63 
37f30 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
37f34 166 3E 00 00 00 
37f38 167 00 00 00 3F 
37f3c 168 66 66 66 3E 
37f40 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
37f44 16a 0F 00 00 00 
37f48 16b 00 00 00 3E 
37f4c 16c 63 63 63 63 
37f50 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
37f54 16e 3E 30 70 00 
37f58 16f 00 00 00 3F 
37f5c 170 66 66 66 3E 
37f60 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
37f64 172 67 00 00 00 
37f68 173 00 00 00 3E 
37f6c 174 63 63 06 1C 
37f70 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
37f74 176 3E 00 00 00 
37f78 177 00 00 00 7E 
37f7c 178 7E 5A 18 18 
37f80 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
37f84 17a 3C 00 00 00 
37f88 17b 00 00 00 63 
37f8c 17c 63 63 63 63 
37f90 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
37f94 17e 3E 00 00 00 
37f98 17f 00 00 00 63 
37f9c 180 63 63 63 63 
37fa0 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
37fa4 182 08 00 00 00 
37fa8 183 00 00 00 63 
37fac 184 63 63 63 6B 
37fb0 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
37fb4 186 36 00 00 00 
37fb8 187 00 00 00 63 
37fbc 188 63 36 3E 1C 
37fc0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
37fc4 18a 63 00 00 00 
37fc8 18b 00 00 00 66 
37fcc 18c 66 66 66 3C 
37fd0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
37fd4 18e 3C 00 00 00 
37fd8 18f 00 00 00 7F 
37fdc 190 63 61 30 18 
37fe0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
37fe4 192 7F 00 00 00 
37fe8 193 00 00 00 3C 
37fec 194 0C 0C 0C 0C 
37ff0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
37ff4 196 3C 00 00 00 
37ff8 197 00 00 00 00 
37ffc 198 01 03 07 0E 
38000 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
38004 19a 40 00 00 00 
38008 19b 00 00 00 3C 
3800c 19c 30 30 30 30 
38010 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
38014 19e 3C 00 00 00 
38018 19f 1C 36 00 00 
3801c 1a0 00 00 00 00 
38020 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38024 1a2 00 00 00 00 
38028 1a3 00 00 00 00 
3802c 1a4 00 00 00 00 
38030 1a5 00 00 00 00 
38034 1a6 00          | 	byte	$00[17]
38035 1a6 FF 00 00 0C 
38039 1a7 18 00 00 00 
3803d 1a8 00 00 00 00 
38041 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38045 1aa 00 00 00 00 
38049 1ab 00 00 00 00 
3804d 1ac 00          | 	byte	$00[9]
3804e 1ac 1E 30 3E 33 
38052 1ad 33 33 6E 00 
38056 1ae 00 00 00 00 
3805a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3805e 1b0 1E 36 66 66 
38062 1b1 66 66 3E 00 
38066 1b2 00 00 00 00 
3806a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3806e 1b4 3E 63 03 03 
38072 1b5 03 63 3E 00 
38076 1b6 00 00 00 00 
3807a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3807e 1b8 3C 36 33 33 
38082 1b9 33 33 6E 00 
38086 1ba 00 00 00 00 
3808a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3808e 1bc 3E 63 7F 03 
38092 1bd 03 63 3E 00 
38096 1be 00 00 00 00 
3809a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3809e 1c0 0C 1E 0C 0C 
380a2 1c1 0C 0C 1E 00 
380a6 1c2 00 00 00 00 
380aa 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
380ae 1c4 6E 33 33 33 
380b2 1c5 33 33 3E 30 
380b6 1c6 33 1E 00 00 
380ba 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
380be 1c8 36 6E 66 66 
380c2 1c9 66 66 67 00 
380c6 1ca 00 00 00 00 
380ca 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
380ce 1cc 1C 18 18 18 
380d2 1cd 18 18 3C 00 
380d6 1ce 00 00 00 00 
380da 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
380de 1d0 70 60 60 60 
380e2 1d1 60 60 60 66 
380e6 1d2 66 3C 00 00 
380ea 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
380ee 1d4 66 36 1E 1E 
380f2 1d5 36 66 67 00 
380f6 1d6 00 00 00 00 
380fa 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
380fe 1d8 18 18 18 18 
38102 1d9 18 18       | 	byte	$18[6]
38104 1da 3C 00 00 00 
38108 1db 00 00 00 00 
3810c 1dc 00 00 37 7F 
38110 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
38114 1de 63 00 00 00 
38118 1df 00 00 00 00 
3811c 1e0 00 00 3B 66 
38120 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
38124 1e2 66 00 00 00 
38128 1e3 00 00 00 00 
3812c 1e4 00 00 3E 63 
38130 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
38134 1e6 3E 00 00 00 
38138 1e7 00 00 00 00 
3813c 1e8 00 00 3B 66 
38140 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
38144 1ea 3E 06 06 0F 
38148 1eb 00 00 00 00 
3814c 1ec 00 00 6E 33 
38150 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
38154 1ee 3E 30 30 78 
38158 1ef 00 00 00 00 
3815c 1f0 00 00 3B 6E 
38160 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
38164 1f2 0F 00 00 00 
38168 1f3 00 00 00 00 
3816c 1f4 00 00 3E 63 
38170 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
38174 1f6 3E 00 00 00 
38178 1f7 00 00 00 08 
3817c 1f8 0C 0C 3F 0C 
38180 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
38184 1fa 38 00 00 00 
38188 1fb 00 00 00 00 
3818c 1fc 00 00 33 33 
38190 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
38194 1fe 6E 00 00 00 
38198 1ff 00 00 00 00 
3819c 200 00 00 63 63 
381a0 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
381a4 202 1C 00 00 00 
381a8 203 00 00 00 00 
381ac 204 00 00 63 63 
381b0 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
381b4 206 36 00 00 00 
381b8 207 00 00 00 00 
381bc 208 00 00 63 36 
381c0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
381c4 20a 63 00 00 00 
381c8 20b 00 00 00 00 
381cc 20c 00 00 63 63 
381d0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
381d4 20e 7E 60 30 1F 
381d8 20f 00 00 00 00 
381dc 210 00 00 7F 33 
381e0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
381e4 212 7F 00 00 00 
381e8 213 00 00 00 70 
381ec 214 18 18 18 0E 
381f0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
381f4 216 70 00 00 00 
381f8 217 00 00 00 18 
381fc 218 18 18 18 18 
38200 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
38204 21a 18 00 00 00 
38208 21b 00 00 00 0E 
3820c 21c 18 18 18 70 
38210 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
38214 21e 0E 00 00 00 
38218 21f 6E 3B 00 00 
3821c 220 00 00 00 00 
38220 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38224 222 00 00 00 00 
38228 223 00 00 00 00 
3822c 224 00 00       | 	byte	$00[10]
3822e 224 08 1C 36 63 
38232 225 63 63 7F 00 
38236 226 00 00 00 00 
3823a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3823e 228 03 03 03 03 
38242 229 43 66 3C 18 
38246 22a 30 1E 00 00 
3824a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3824e 22c 33 33 33 33 
38252 22d 33 33       | 	byte	$33[6]
38254 22e 6E 00 00 00 
38258 22f 00 00 60 30 
3825c 230 18 00 3E 63 
38260 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
38264 232 3E 00 00 00 
38268 233 00 00 08 1C 
3826c 234 36 00 1E 30 
38270 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
38274 236 6E 00 00 00 
38278 237 00 00 00 00 
3827c 238 33 00 1E 30 
38280 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
38284 23a 6E 00 00 00 
38288 23b 00 00 1C 36 
3828c 23c 1C 00 33 33 
38290 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
38294 23e 6E 00 00 00 
38298 23f 00 00 60 30 
3829c 240 18 00 3E 63 
382a0 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
382a4 242 3E 00 00 00 
382a8 243 00 00 00 00 
382ac 244 00 00 3E 63 
382b0 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
382b4 246 3E 18 30 1E 
382b8 247 00 00 00 1C 
382bc 248 58 78 38 18 
382c0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
382c4 24a 3C 00 00 00 
382c8 24b 00 00 00 00 
382cc 24c 63 00 3E 63 
382d0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
382d4 24e 3E 00 00 00 
382d8 24f 66 33 00 3E 
382dc 250 63 63 63 63 
382e0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
382e4 252 3E 00 00 00 
382e8 253 00 00 CC 66 
382ec 254 33 00 3E 63 
382f0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
382f4 256 3E 00 00 00 
382f8 257 00 00 18 3C 
382fc 258 66 00 1C 18 
38300 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
38304 25a 3C 00 00 00 
38308 25b 30 18 00 7F 
3830c 25c 63 61 30 18 
38310 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
38314 25e 7F 00 00 00 
38318 25f 00 63 00 08 
3831c 260 1C 36 63 63 
38320 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
38324 262 63 00 00 00 
38328 263 30 18 00 3C 
3832c 264 66 43 03 03 
38330 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
38334 266 3C 00 00 00 
38338 267 30 18 00 7F 
3833c 268 66 46 16 1E 
38340 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
38344 26a 7F 00 00 00 
38348 26b 0C 06 00 0F 
3834c 26c 06 06 06 06 
38350 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
38354 26e 7F 00 00 00 
38358 26f 30 18 00 1C 
3835c 270 18 18 18 18 
38360 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
38364 272 3C 00 00 00 
38368 273 00 00 08 1C 
3836c 274 36 00 3E 63 
38370 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
38374 276 3E 00 00 00 
38378 277 00 00 00 00 
3837c 278 63 00 3E 63 
38380 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
38384 27a 3E 00 00 00 
38388 27b 00 00 00 6F 
3838c 27c 46 26 06 06 
38390 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
38394 27e 7F 00 00 00 
38398 27f 00 00 00 6E 
3839c 280 4C 2C 0C 0C 
383a0 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
383a4 282 1E 00 00 00 
383a8 283 30 18 00 3E 
383ac 284 63 63 06 1C 
383b0 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
383b4 286 3E 00 00 00 
383b8 287 00 00 60 30 
383bc 288 18 00 3E 63 
383c0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
383c4 28a 3E 00 00 00 
383c8 28b 00 63 00 3E 
383cc 28c 63 63 63 63 
383d0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
383d4 28e 3E 00 00 00 
383d8 28f 00 63 00 63 
383dc 290 63 63 63 63 
383e0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
383e4 292 3E 00 00 00 
383e8 293 6C 38 00 7E 
383ec 294 7E 5A 18 18 
383f0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
383f4 296 3C 00 00 00 
383f8 297 00 00 60 48 
383fc 298 2C 0C 3F 0C 
38400 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
38404 29a 38 00 00 00 
38408 29b 00 00 00 0F 
3840c 29c 26 36 1E 0E 
38410 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
38414 29e 7F 00 00 00 
38418 29f 00 00 00 00 
3841c 2a0 00 63 36 1C 
38420 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
38424 2a2 00 00 00 00 
38428 2a3 00 00       | 	byte	$00[6]
3842a 2a3 36 1C 08 00 
3842e 2a4 3E 63 03 03 
38432 2a5 03 63 3E 00 
38436 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3843a 2a7 30 18 0C 00 
3843e 2a8 1E 30 3E 33 
38442 2a9 33 33 6E 00 
38446 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3844a 2ab 60 30 18 00 
3844e 2ac 1C 18 18 18 
38452 2ad 18 18 3C 00 
38456 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3845a 2af 60 30 18 00 
3845e 2b0 3E 63 63 63 
38462 2b1 63 63 3E 00 
38466 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3846a 2b3 30 18 0C 00 
3846e 2b4 33 33 33 33 
38472 2b5 33 33 6E 00 
38476 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3847a 2b7 00 08 1C 36 
3847e 2b8 63 63 7F 63 
38482 2b9 63 63 63 18 
38486 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3848a 2bb 00 00 00 00 
3848e 2bc 1E 30 3E 33 
38492 2bd 33 33 6E 18 
38496 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3849a 2bf 00 7F 63 61 
3849e 2c0 30 18 0C 06 
384a2 2c1 43 63 7F 00 
384a6 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
384aa 2c3 36 1C 08 00 
384ae 2c4 7F 33 18 0C 
384b2 2c5 06 63 7F 00 
384b6 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
384ba 2c7 00 7F 66 46 
384be 2c8 16 1E 16 06 
384c2 2c9 46 66 7F 18 
384c6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
384ca 2cb 00 00 00 00 
384ce 2cc 3E 63 7F 03 
384d2 2cd 03 63 3E 18 
384d6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
384da 2cf 00 3C 66 03 
384de 2d0 1F 03 0F 03 
384e2 2d1 03 66 3C 00 
384e6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
384ea 2d3 60 30 18 00 
384ee 2d4 7F 33 18 0C 
384f2 2d5 06 63 7F 00 
384f6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
384fa 2d7 00 3C 66 43 
384fe 2d8 03 03 03 03 
38502 2d9 43 66 3C 00 
38506 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3850a 2db 00 00 00 00 
3850e 2dc 3E 63 06 1C 
38512 2dd 30 63 3E 18 
38516 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3851a 2df 00 00 00 00 
3851e 2e0 00 00       | 	byte	$00[6]
38520 2e1 6C 36 1B 36 
38524 2e2 6C 00 00 00 
38528 2e3 00 00 00 00 
3852c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38530 2e5 1B 36 6C 36 
38534 2e6 1B 00 00 00 
38538 2e7 88 22 88 22 
3853c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
38540 2e9 88 22 88 22 
38544 2ea 88 22 88 22 
38548 2eb AA 55 AA 55 
3854c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
38550 2ed AA 55 AA 55 
38554 2ee AA 55 AA 55 
38558 2ef BB EE BB EE 
3855c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
38560 2f1 BB EE BB EE 
38564 2f2 BB EE BB EE 
38568 2f3 18 18 18 18 
3856c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
38570 2f5 18 18 18 18 
38574 2f6 18 18 18 18 
38578 2f7 18 18 18 18 
3857c 2f8 18 18 18    | 	byte	$18[15]
3857f 2f8 1F 18 18 18 
38583 2f9 18 18 18 18 
38587 2fa 18 30 18 00 
3858b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3858f 2fc 63 7F 63 63 
38593 2fd 63 63 00 00 
38597 2fe 00 1C 36 00 
3859b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3859f 300 63 7F 63 63 
385a3 301 63 63 00 00 
385a7 302 00 36 1C 00 
385ab 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
385af 304 1E 16 06 46 
385b3 305 66 7F 00 00 
385b7 306 00 00 00 00 
385bb 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
385bf 308 1C 30 60 63 
385c3 309 63 3E 18 30 
385c7 30a 1E 6C 6C 6C 
385cb 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
385cf 30c 6F 6C 6C 6C 
385d3 30d 6C 6C 6C 6C 
385d7 30e 6C 6C 6C 6C 
385db 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
385df 310 6C 6C 6C 6C 
385e3 311 6C 6C 6C 6C 
385e7 312 6C          | 	byte	$6c[9]
385e8 313 00 00 00 00 
385ec 314 00          | 	byte	$00[5]
385ed 314 7F 60 6F 6C 
385f1 315 6C 6C 6C 6C 
385f5 316 6C 6C 6C 6C 
385f9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
385fd 318 6F 60 7F 00 
38601 319 00 00 00 00 
38605 31a 00 00 00 18 
38609 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3860d 31c 61 30 18 0C 
38611 31d 06 43 63 7F 
38615 31e 00 00 00 00 
38619 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3861d 320 00 7F 33 18 
38621 321 0C 06 63 7F 
38625 322 00 00 00 00 
38629 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3862d 324 00 00 1F 18 
38631 325 18 18 18 18 
38635 326 18 18 18 18 
38639 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3863d 328 18 18 F8 00 
38641 329 00 00 00 00 
38645 32a 00 00 00 18 
38649 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3864d 32c 18 18 FF 00 
38651 32d 00 00 00 00 
38655 32e 00 00 00 00 
38659 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3865d 330 00 00 FF 18 
38661 331 18 18 18 18 
38665 332 18 18 18 18 
38669 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3866d 334 18 18 F8 18 
38671 335 18 18 18 18 
38675 336 18 18 18 00 
38679 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3867d 338 00 00 FF 00 
38681 339 00 00 00 00 
38685 33a 00 00 00 18 
38689 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3868d 33c 18 18 FF 18 
38691 33d 18 18 18 18 
38695 33e 18 18 18 63 
38699 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3869d 340 36 63 63 7F 
386a1 341 63 63 63 63 
386a5 342 00 00 00 00 
386a9 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
386ad 344 00 1E 30 3E 
386b1 345 33 33 33 6E 
386b5 346 00 00 00 6C 
386b9 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
386bd 348 EC 0C FC 00 
386c1 349 00 00 00 00 
386c5 34a 00 00 00 00 
386c9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
386cd 34c FC 0C EC 6C 
386d1 34d 6C 6C 6C 6C 
386d5 34e 6C 6C 6C 6C 
386d9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
386dd 350 EF 00 FF 00 
386e1 351 00 00 00 00 
386e5 352 00 00 00 00 
386e9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
386ed 354 FF 00 EF 6C 
386f1 355 6C 6C 6C 6C 
386f5 356 6C 6C 6C 6C 
386f9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
386fd 358 EC 0C EC 6C 
38701 359 6C 6C 6C 6C 
38705 35a 6C 6C 6C 00 
38709 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3870d 35c FF 00 FF 00 
38711 35d 00 00 00 00 
38715 35e 00 00 00 6C 
38719 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3871d 360 EF 00 EF 6C 
38721 361 6C 6C 6C 6C 
38725 362 6C 6C 6C 00 
38729 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3872d 364 63 3E 63 63 
38731 365 63 63 3E 63 
38735 366 00 00 00 00 
38739 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3873d 368 30 3C 36 33 
38741 369 33 33 33 6E 
38745 36a 00 00 00 00 
38749 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3874d 36c 66 66 6F 66 
38751 36d 66 66 36 1F 
38755 36e 00 00 00 36 
38759 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3875d 370 66 66 66 66 
38761 371 66 66       | 	byte	$66[6]
38763 371 36 1F 00 00 
38767 372 00 00 63 00 
3876b 373 7F 66 46 16 
3876f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
38773 375 66 7F 00 00 
38777 376 00 6C 38 00 
3877b 377 38 30 30 3C 
3877f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
38783 379 33 6E 00 00 
38787 37a 00 36 1C 00 
3878b 37b 63 67 6F 7F 
3878f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
38793 37d 63 63 00 00 
38797 37e 00 30 18 00 
3879b 37f 3C 18 18 18 
3879f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
387a3 381 18 3C 00 00 
387a7 382 00 3C 66 00 
387ab 383 3C 18 18 18 
387af 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
387b3 385 18 3C 00 00 
387b7 386 00 00 00 36 
387bb 387 1C 08 00 3E 
387bf 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
387c3 389 63 3E 00 00 
387c7 38a 00 18 18 18 
387cb 38b 18 18 18 18 
387cf 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
387d3 38d 00 00 00 00 
387d7 38e 00 00 00 00 
387db 38f 00 00 00 00 | 	byte	$00[12]
387df 390 F8 18 18 18 
387e3 391 18 18 18 18 
387e7 392 18 FF FF FF 
387eb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
387ef 394 FF FF FF FF 
387f3 395 FF FF FF FF 
387f7 396 FF          | 	byte	$ff[9]
387f8 397 00 00 00 00 
387fc 398 00 00 00    | 	byte	$00[7]
387ff 398 FF FF FF FF 
38803 399 FF FF FF FF 
38807 39a FF          | 	byte	$ff[9]
38808 39b 00 00 00 7E 
3880c 39c 7E 5A 18 18 
38810 39d 18 18 18 18 
38814 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
38818 39f 1C 36 1C 63 
3881c 3a0 63 63 63 63 
38820 3a1 63 63 63 63 
38824 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38828 3a3 FF FF FF FF 
3882c 3a4 FF FF FF    | 	byte	$ff[7]
3882f 3a4 00 00 00 00 
38833 3a5 00 00 00 00 
38837 3a6 00          | 	byte	$00[9]
38838 3a7 30 18 00 3E 
3883c 3a8 63 63 63 63 
38840 3a9 63 63 63 63 
38844 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38848 3ab 00 00 00 1E 
3884c 3ac 33 33 33 1B 
38850 3ad 33 63 63 63 
38854 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
38858 3af 1C 36 00 3E 
3885c 3b0 63 63 63 63 
38860 3b1 63 63 63 63 
38864 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
38868 3b3 30 18 00 63 
3886c 3b4 67 6F 7F 7B 
38870 3b5 73 63 63 63 
38874 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
38878 3b7 00 00 60 30 
3887c 3b8 18 00 3B 66 
38880 3b9 66 66 66 66 
38884 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
38888 3bb 00 00 36 1C 
3888c 3bc 08 00 3B 66 
38890 3bd 66 66 66 66 
38894 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
38898 3bf 36 1C 00 3E 
3889c 3c0 63 63 06 1C 
388a0 3c1 30 60 63 63 
388a4 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
388a8 3c3 00 00 36 1C 
388ac 3c4 08 00 3E 63 
388b0 3c5 06 1C 30 63 
388b4 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
388b8 3c7 30 18 00 3F 
388bc 3c8 66 66 66 3E 
388c0 3c9 36 66 66 66 
388c4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
388c8 3cb 30 18 00 63 
388cc 3cc 63 63 63 63 
388d0 3cd 63 63 63 63 
388d4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
388d8 3cf 00 00 60 30 
388dc 3d0 18 00 3B 6E 
388e0 3d1 66 06 06 06 
388e4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
388e8 3d3 66 33 00 63 
388ec 3d4 63 63 63 63 
388f0 3d5 63 63 63 63 
388f4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
388f8 3d7 00 00 60 30 
388fc 3d8 18 00 63 63 
38900 3d9 63 63 63 63 
38904 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
38908 3db 30 18 00 66 
3890c 3dc 66 66 66 3C 
38910 3dd 18 18 18 18 
38914 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
38918 3df 00 00 00 08 
3891c 3e0 0C 0C 3F 0C 
38920 3e1 0C 0C 0C 6C 
38924 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
38928 3e3 30 18 00 00 
3892c 3e4 00 00 00 00 
38930 3e5 00 00 00 00 
38934 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38938 3e7 00 00 00 00 
3893c 3e8 00 00 00 00 | 	byte	$00[8]
38940 3e9 7F 00 00 00 
38944 3ea 00 00 00 00 
38948 3eb 66 33 00 00 
3894c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
38950 3ed 00 00 00 00 
38954 3ee 00 00 00 00 
38958 3ef 00 00 00 00 
3895c 3f0 00 00 00 00 
38960 3f1 00 00 00 00 
38964 3f2 00          | 	byte	$00[21]
38965 3f2 0C 06 3C 36 
38969 3f3 1C 00 00 00 
3896d 3f4 00 00 00 00 
38971 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38975 3f6 00 00 00 63 
38979 3f7 3E 00 00 00 
3897d 3f8 00 00 00 00 
38981 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38985 3fa 00 00 00 00 
38989 3fb 3E 63 06 1C 
3898d 3fc 36 63 63 36 
38991 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
38995 3fe 00 00 00 00 
38999 3ff 00 00 00 00 | 	byte	$00[8]
3899d 400 18 00 7E 00 
389a1 401 18 00 00 00 
389a5 402 00 00 00 00 
389a9 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
389ad 404 00 00 00 00 
389b1 405 00 00 00 00 | 	byte	$00[8]
389b5 406 18 30 1E 00 
389b9 407 00 00 1C 36 
389bd 408 36 1C 00 00 
389c1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
389c5 40a 00 00 00 00 
389c9 40b 63 00 00 00 
389cd 40c 00 00 00 00 
389d1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
389d5 40e 00 00 00 18 
389d9 40f 18 00 00 00 
389dd 410 00 00 00 00 
389e1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
389e5 412 00 00 00 00 
389e9 413 00          | 	byte	$00[5]
389ea 413 CC 66 33 00 
389ee 414 33 33 33 33 
389f2 415 33 33 6E 00 
389f6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
389fa 417 00 3F 66 66 
389fe 418 66 3E 36 66 
38a02 419 66 66 6F 00 
38a06 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
38a0a 41b 36 1C 08 00 
38a0e 41c 3B 6E 66 06 
38a12 41d 06 06 0F 00 
38a16 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
38a1a 41f 00 00 00 7E 
38a1e 420 7E 7E 7E 7E 
38a22 421 7E 7E 00 00 
38a26 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
38a2a 423 00 00 00 00 
38a2e 424 00 00 00 00 
38a32 425 00 00 00 00 
38a36 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38a38 427             | 'vga_font       file "vgafont.def"
38a38 427 00 00 00 00 
      ...             
38a68 433 00 00 00 00 
38a6c 434 00 00 00    | st_font        file "st4font.def"
38a6f 434 FF FF 00 00 
38a73 435 00 00 00 00 
38a77 436 00 18 18 18 
38a7b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38a7f 438 18 18 18 18 
38a83 439 18 18 18 18 
38a87 43a 18          | 	byte	$18[9]
38a88 43b 00 00 00 00 
38a8c 43c 00 00 00    | 	byte	$00[7]
38a8f 43c FF FF 18 18 
38a93 43d 18 18 18 18 
38a97 43e 18 18 18 18 
38a9b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38a9f 440 FF FF 00 00 
38aa3 441 00 00 00 00 
38aa7 442 00 18 18 18 
38aab 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38aaf 444 1F 1F 18 18 
38ab3 445 18 18 18 18 
38ab7 446 18 18 18 18 
38abb 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38abf 448 F8 F8 18 18 
38ac3 449 18 18 18 18 
38ac7 44a 18 00 00 00 
38acb 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38acf 44c 1F 1F 18 18 
38ad3 44d 18 18 18 18 
38ad7 44e 18 00 00 00 
38adb 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38adf 450 F8 F8 18 18 
38ae3 451 18 18 18 18 
38ae7 452 18 18 18 18 
38aeb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
38aef 454 1F 1F 00 00 
38af3 455 00 00 00 00 
38af7 456 00 18 18 18 
38afb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38aff 458 F8 F8 00 00 
38b03 459 00 00 00 00 
38b07 45a 00 18 18 18 
38b0b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
38b0f 45c FF FF 18 18 
38b13 45d 18 18 18 18 
38b17 45e 18 00 00 18 
38b1b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
38b1f 460 66 7E 7E 66 
38b23 461 66 66 66 30 
38b27 462 18 00 00 7E 
38b2b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
38b2f 464 3E 06 06 06 
38b33 465 06 7E 7E 18 
38b37 466 0C 30 18 3C 
38b3b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
38b3f 468 06 06 06 66 
38b43 469 66 7E 3C 00 
38b47 46a 00 30 18 66 
38b4b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
38b4f 46c 7E 7E 76 76 
38b53 46d 66 66 66 00 
38b57 46e 00 30 18 7C 
38b5b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
38b5f 470 1C 38 70 60 
38b63 471 60 7E 3E 00 
38b67 472 00 30 18 7E 
38b6b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
38b6f 474 18 0C 0C 06 
38b73 475 06 7E 7E 00 
38b77 476 00 18 18 00 
38b7b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
38b7f 478 18 18 0C 0C 
38b83 479 06 7E 7E 00 
38b87 47a 00 30 18 3C 
38b8b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
38b8f 47c 66 66 66 66 
38b93 47d 66          | 	byte	$66[5]
38b94 47e 7E 3C 00 00 
38b98 47f 00 00 06 06 
38b9c 480 06 06 16 1E 
38ba0 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
38ba4 482 7E 7E 00 00 
38ba8 483 00 00 00 00 
38bac 484 00 3C 7C 60 
38bb0 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
38bb4 486 7E 7C 30 18 
38bb8 487 00 00 00 00 
38bbc 488 00 3C 7E 66 
38bc0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
38bc4 48a 7E 7C 18 0C 
38bc8 48b 00 00 30 18 
38bcc 48c 00 3C 3E 06 
38bd0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
38bd4 48e 7E 7C 00 00 
38bd8 48f 00 00 30 18 
38bdc 490 00 3E 7E 66 
38be0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
38be4 492 66 66 00 00 
38be8 493 00 00 30 18 
38bec 494 00 7C 7E 06 
38bf0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
38bf4 496 7E 3E 00 00 
38bf8 497 00 00 30 18 
38bfc 498 00 7E 7E 30 
38c00 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38c04 49a 7E 7E 00 00 
38c08 49b 00 00 18 18 
38c0c 49c 00 7E 7E 30 
38c10 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
38c14 49e 7E 7E 00 00 
38c18 49f 00 00 30 18 
38c1c 4a0 00 3C 7E 66 
38c20 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
38c24 4a2 7E 3C 00 00 
38c28 4a3 00 00 1C 1C 
38c2c 4a4 18 18 38 3C 
38c30 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
38c34 4a6 3C 3C 00 00 
38c38 4a7 00 00 00 00 
38c3c 4a8 00 00 00 00 
38c40 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38c44 4aa 00 00 00 00 
38c48 4ab 00 00       | 	byte	$00[6]
38c4a 4ab 18 18 18 18 
38c4e 4ac 18 18 18 18 | 	byte	$18[8]
38c52 4ad 00 00 18 18 
38c56 4ae 00 00 00 00 
38c5a 4af 66 66 66 66 
38c5e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
38c62 4b1 00 00 00 00 
38c66 4b2 00 00 00 00 
38c6a 4b3 00          | 	byte	$00[9]
38c6b 4b3 66 66 FF FF 
38c6f 4b4 66 66 FF FF 
38c73 4b5 66 66 00 00 
38c77 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
38c7b 4b7 7C 7E 06 06 
38c7f 4b8 3E 7C 60 60 
38c83 4b9 7E 3E 18 18 
38c87 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
38c8b 4bb 66 30 30 18 
38c8f 4bc 18 0C 0C 66 
38c93 4bd 66 00 00 00 
38c97 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
38c9b 4bf 66 66 3C 1C 
38c9f 4c0 1C FC FE 66 
38ca3 4c1 66 FE FC 00 
38ca7 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
38cab 4c3 18 18 18 18 
38caf 4c4 00 00 00 00 
38cb3 4c5 00 00 00 00 
38cb7 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
38cbb 4c7 18 1C 0C 0C 
38cbf 4c8 0C 0C 0C 0C 
38cc3 4c9 1C 18 30 00 
38cc7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
38ccb 4cb 18 38 30 30 
38ccf 4cc 30 30 30 30 
38cd3 4cd 38 18 0C 00 
38cd7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
38cdb 4cf 66 66 3C 3C 
38cdf 4d0 FF FF 3C 3C 
38ce3 4d1 66 66 00 00 
38ce7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
38ceb 4d3 00 18 18 18 
38cef 4d4 7E 7E 18 18 
38cf3 4d5 18 00 00 00 
38cf7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38cfb 4d7 00 00 00 00 
38cff 4d8 00 00       | 	byte	$00[6]
38d01 4d9 18 18 18 18 
38d05 4da 18          | 	byte	$18[5]
38d06 4da 0C 04 00 00 
38d0a 4db 00 00 00 00 
38d0e 4dc 7E 7E 00 00 
38d12 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
38d16 4de 00 00 00 00 
38d1a 4df 00 00 00 00 
38d1e 4e0 00 00 00 00 
38d22 4e1 00          | 	byte	$00[13]
38d23 4e1 18 18 18 00 
38d27 4e2 00 00 00 60 
38d2b 4e3 60 60 30 30 
38d2f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
38d33 4e5 06 06 06 00 
38d37 4e6 00 00 00 3C 
38d3b 4e7 7E 66 66 66 
38d3f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
38d43 4e9 66 7E 3C 00 
38d47 4ea 00 00 00 18 
38d4b 4eb 18 1C 1C 18 
38d4f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
38d53 4ed 18 7E 7E 00 
38d57 4ee 00 00 00 3C 
38d5b 4ef 7E 66 66 30 
38d5f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
38d63 4f1 0C 7E 7E 00 
38d67 4f2 00 00 00 7E 
38d6b 4f3 7E 30 30 18 
38d6f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
38d73 4f5 66 7E 3C 00 
38d77 4f6 00 00 00 30 
38d7b 4f7 30 38 38 3C 
38d7f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
38d83 4f9 7E 30 30 00 
38d87 4fa 00 00 00 7E 
38d8b 4fb 7E 06 06 3E 
38d8f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
38d93 4fd 66 7E 3C 00 
38d97 4fe 00 00 00 38 
38d9b 4ff 3C 0E 06 06 
38d9f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
38da3 501 66 7E 3C 00 
38da7 502 00 00 00 7E 
38dab 503 7E 60 60 30 
38daf 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
38db3 505 0C 0C 0C 00 
38db7 506 00 00 00 3C 
38dbb 507 7E 66 66 3C 
38dbf 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
38dc3 509 66 7E 3C 00 
38dc7 50a 00 00 00 3C 
38dcb 50b 7E 66 66 7E 
38dcf 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
38dd3 50d 70 3C 1C 00 
38dd7 50e 00 00 00 00 
38ddb 50f 00 00 18 18 
38ddf 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
38de3 511 18 18 18 00 
38de7 512 00 00 00 00 
38deb 513 00 00 18 18 
38def 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
38df3 515 18 18 18 0C 
38df7 516 04 00 00 00 
38dfb 517 70 38 1C 0E 
38dff 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
38e03 519 70 00 00 00 
38e07 51a 00 00 00 00 
38e0b 51b 00 00 7E 7E 
38e0f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
38e13 51d 00 00 00 00 
38e17 51e 00 00 00 00 | 	byte	$00[8]
38e1b 51f 0E 1C 38 70 
38e1f 520 E0 70 38 1C 
38e23 521 0E 00 00 00 
38e27 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
38e2b 523 7E 66 66 30 
38e2f 524 30 18 18 18 
38e33 525 00 18 18 00 
38e37 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
38e3b 527 7E 66 66 66 
38e3f 528 66 36 06 66 
38e43 529 66 7E 3C 00 
38e47 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
38e4b 52b 3C 7E 66 66 
38e4f 52c 66 7E 7E 66 
38e53 52d 66 66 66 00 
38e57 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
38e5b 52f 7E 66 66 7E 
38e5f 530 3E 66 66 66 
38e63 531 66 7E 3E 00 
38e67 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
38e6b 533 7E 66 66 06 
38e6f 534 06 06 06 66 
38e73 535 66 7E 3C 00 
38e77 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
38e7b 537 7E 66 66 66 
38e7f 538 66 66 66 66 
38e83 539 66 7E 3E 00 
38e87 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
38e8b 53b 7E 06 06 3E 
38e8f 53c 3E 06 06 06 
38e93 53d 06 7E 7E 00 
38e97 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
38e9b 53f 7E 06 06 3E 
38e9f 540 3E 06 06 06 
38ea3 541 06 06 06 00 
38ea7 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
38eab 543 7E 06 06 76 
38eaf 544 76 66 66 66 
38eb3 545 66 7E 3C 00 
38eb7 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
38ebb 547 66 66 66 7E 
38ebf 548 7E 66 66 66 
38ec3 549 66 66 66 00 
38ec7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
38ecb 54b 7E 18 18 18 
38ecf 54c 18 18 18 18 
38ed3 54d 18 7E 7E 00 
38ed7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
38edb 54f 60 60 60 60 
38edf 550 60 60 60    | 	byte	$60[7]
38ee2 551 66 66 7E 3C 
38ee6 552 00 00 00 00 
38eea 553 66 66 36 36 
38eee 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
38ef2 555 66 66 C6 C6 
38ef6 556 00 00 00 00 
38efa 557 06 06 06 06 
38efe 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
38f02 559 06 06 7E 7E 
38f06 55a 00 00 00 00 
38f0a 55b C6 C6 EE EE 
38f0e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
38f12 55d C6 C6 C6 C6 
38f16 55e 00 00 00 00 
38f1a 55f 66 66 66 6E 
38f1e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
38f22 561 76 66 66 66 
38f26 562 00 00 00 00 
38f2a 563 3C 7E 66 66 
38f2e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
38f32 565 66 66 7E 3C 
38f36 566 00 00 00 00 
38f3a 567 3E 7E 66 66 
38f3e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
38f42 569 06 06 06 06 
38f46 56a 00 00 00 00 
38f4a 56b 3C 7E 66 66 
38f4e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
38f52 56d 66 56 3E 6C 
38f56 56e 00 00 00 00 
38f5a 56f 3E 7E 66 66 
38f5e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
38f62 571 66 66 C6 C6 
38f66 572 00 00 00 00 
38f6a 573 7C 7E 06 06 
38f6e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
38f72 575 60 60 7E 3E 
38f76 576 00 00 00 00 
38f7a 577 7E 7E 18 18 
38f7e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
38f82 579 18 18 18 18 
38f86 57a 00 00 00 00 
38f8a 57b 66 66 66 66 
38f8e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
38f92 57d 66 66 7E 3C 
38f96 57e 00 00 00 00 
38f9a 57f 66 66 66 66 
38f9e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
38fa2 581 3C 3C 18 18 
38fa6 582 00 00 00 00 
38faa 583 C6 C6 C6 C6 
38fae 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
38fb2 585 FE EE C6 82 
38fb6 586 00 00 00 00 
38fba 587 66 66 66 3C 
38fbe 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
38fc2 589 3C 66 66 66 
38fc6 58a 00 00 00 00 
38fca 58b 66 66 66 66 
38fce 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
38fd2 58d 18 18 18 18 
38fd6 58e 00 00 00 00 
38fda 58f 7E 7E 30 30 
38fde 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
38fe2 591 06 06 7E 7E 
38fe6 592 00 00 00 00 
38fea 593 3C 3C 0C 0C 
38fee 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
38ff2 595 0C 0C 3C 3C 
38ff6 596 00 00 00 00 
38ffa 597 06 06 0C 0C 
38ffe 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
39002 599 60 60 C0 C0 
39006 59a 00 00 00 00 
3900a 59b 3C 3C 30 30 
3900e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
39012 59d 30 30 3C 3C 
39016 59e 00 00 00 00 
3901a 59f 18 18 3C 3C 
3901e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
39022 5a1 00 00 00 00 
39026 5a2 00 00 00 00 
3902a 5a3 00 00 00 00 
3902e 5a4 00 00 00 00 
39032 5a5 00 00       | 	byte	$00[18]
39034 5a6 FE FE 00 00 
39038 5a7 00 00 0C 0C 
3903c 5a8 18 18 00 00 
39040 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
39044 5aa 00 00 00 00 
39048 5ab 00 00 00 00 
3904c 5ac 00          | 	byte	$00[9]
3904d 5ac 3C 7C 60 7C 
39051 5ad 7E 66 66 7E 
39055 5ae 7C 00 00 00 
39059 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3905d 5b0 3E 7E 66 66 
39061 5b1 66 66 66 7E 
39065 5b2 3E 00 00 00 
39069 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3906d 5b4 3C 3E 06 06 
39071 5b5 06 06 06 7E 
39075 5b6 7C 00 00 00 
39079 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3907d 5b8 7C 7E 66 66 
39081 5b9 66 66 66 7E 
39085 5ba 7C 00 00 00 
39089 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3908d 5bc 3C 7E 66 66 
39091 5bd 7E 06 06 7E 
39095 5be 7C 00 00 00 
39099 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3909d 5c0 18 7E 7E 18 
390a1 5c1 18 18 18 18 
390a5 5c2 18 00 00 00 
390a9 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
390ad 5c4 7C 7E 66 66 
390b1 5c5 66 66 7E 7C 
390b5 5c6 60 7E 3E 00 
390b9 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
390bd 5c8 3E 7E 66 66 
390c1 5c9 66 66 66 66 
390c5 5ca 66 00 00 00 
390c9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
390cd 5cc 1C 1C 18 18 
390d1 5cd 18 18 18 3C 
390d5 5ce 3C 00 00 00 
390d9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
390dd 5d0 30 30 30 30 
390e1 5d1 30 30 30 30 
390e5 5d2 30          | 	byte	$30[9]
390e6 5d2 3E 1E 00 00 
390ea 5d3 06 06 06 36 
390ee 5d4 36 1E 1E 1E 
390f2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
390f6 5d6 00 00 00 00 
390fa 5d7 1C 1C 18 18 
390fe 5d8 18 18 18 18 
39102 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
39106 5da 00 00 00 00 
3910a 5db 00 00 00    | 	byte	$00[7]
3910d 5dc 6C FE FE D6 
39111 5dd D6 C6 C6 C6 
39115 5de C6 00 00 00 
39119 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3911d 5e0 3E 7E 66 66 
39121 5e1 66 66 66 66 
39125 5e2 66 00 00 00 
39129 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3912d 5e4 3C 7E 66 66 
39131 5e5 66 66 66 7E 
39135 5e6 3C 00 00 00 
39139 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3913d 5e8 3E 7E 66 66 
39141 5e9 66 66 66 7E 
39145 5ea 3E 06 06 00 
39149 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3914d 5ec 7C 7E 66 66 
39151 5ed 66 66 66 7E 
39155 5ee 7C 60 60 00 
39159 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3915d 5f0 3E 7E 66 06 
39161 5f1 06 06 06 06 
39165 5f2 06 00 00 00 
39169 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3916d 5f4 7C 7E 06 0E 
39171 5f5 3C 70 60 7E 
39175 5f6 3E 00 00 00 
39179 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3917d 5f8 7E 7E 18 18 
39181 5f9 18 18 18 78 
39185 5fa 70 00 00 00 
39189 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3918d 5fc 66 66 66 66 
39191 5fd 66 66 66    | 	byte	$66[7]
39194 5fe 7E 7C 00 00 
39198 5ff 00 00 00 00 
3919c 600 00 66 66 66 
391a0 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
391a4 602 18 18 00 00 
391a8 603 00 00 00 00 
391ac 604 00 C6 C6 D6 
391b0 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
391b4 606 C6 82 00 00 
391b8 607 00 00 00 00 
391bc 608 00 66 66 3C 
391c0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
391c4 60a 66 66 00 00 
391c8 60b 00 00 00 00 
391cc 60c 00 66 66 66 
391d0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
391d4 60e 7C 60 7E 3E 
391d8 60f 00 00 00 00 
391dc 610 00 7E 7E 30 
391e0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
391e4 612 7E 7E 00 00 
391e8 613 00 00 30 18 
391ec 614 18 18 18 0C 
391f0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
391f4 616 18 30 00 00 
391f8 617 00 00 18 18 
391fc 618 18 18 18 18 
39200 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
39204 61a 18 18 00 00 
39208 61b 00 00 0C 18 
3920c 61c 18 18 18 30 
39210 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
39214 61e 18 0C 00 00 
39218 61f 00 00 6C 7E 
3921c 620 36 00 00 00 
39220 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
39224 622 00 00 00 00 
39228 623 00 00 00 00 
3922c 624 00          | 	byte	$00[9]
3922d 624 18 18 18 18 
39231 625 18 18 00 00 
39235 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
39238 627             | 'amiga_font     file "amigafont.def"
39238 627 00 6C FE FE 
3923c 628 7C 38 10 00 
39240 629 18 18 18 F8 
39244 62a F8 18 18 18 | a8_font        file "atari8.fnt"
39248 62b C0 C0 C0 C0 
3924c 62c C0 C0 C0 C0 | 	byte	$c0[8]
39250 62d 18 18 18 1F 
39254 62e 1F 00 00 00 
39258 62f 18 18 18 1F 
3925c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
39260 631 00 00 00 1F 
39264 632 1F 18 18 18 
39268 633 C0 E0 70 38 
3926c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
39270 635 03 07 0E 1C 
39274 636 38 70 E0 C0 
39278 637 80 C0 E0 F0 
3927c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
39280 639 00 00 00 00 
39284 63a F0 F0 F0 F0 
39288 63b 01 03 07 0F 
3928c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
39290 63d F0 F0 F0 F0 
39294 63e 00 00 00 00 
39298 63f 0F 0F 0F 0F 
3929c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
392a0 641 FF FF 00 00 
392a4 642 00 00 00 00 
392a8 643 00 00 00 00 
392ac 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
392b0 645 00 00 00 00 
392b4 646 0F 0F 0F 0F 
392b8 647 00 38 38 EE 
392bc 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
392c0 649 00 00 00 F8 
392c4 64a F8 18 18 18 
392c8 64b 00 00 00 FF 
392cc 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
392d0 64d 18 18 18 FF 
392d4 64e FF 18 18 18 
392d8 64f 00 00 3C 7E 
392dc 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
392e0 651 00 00 00 00 
392e4 652 FF FF FF FF 
392e8 653 03 03 03 03 
392ec 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
392f0 655 00 00 00 FF 
392f4 656 FF 18 18 18 
392f8 657 18 18 18 FF 
392fc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
39300 659 0F 0F 0F 0F 
39304 65a 0F 0F 0F 0F | 	byte	$0f[8]
39308 65b 18 18 18 F8 
3930c 65c F8 00 00 00 
39310 65d 1E 06 1E 06 
39314 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
39318 65f 00 18 3C 7E 
3931c 660 18 18 18 00 
39320 661 00 18 18 18 
39324 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
39328 663 00 18 0C 7E 
3932c 664 0C 18 00 00 
39330 665 00 18 30 7E 
39334 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
39338 667 00 00 00 00 
3933c 668 00 00 00 00 
39340 669 00          | 	byte	$00[9]
39341 669 18 18 18 18 
39345 66a 00 18 00 00 
39349 66b 66 66 66 00 
3934d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
39351 66d 66 FF 66 66 
39355 66e FF 66 00 18 
39359 66f 7C 06 3C 60 
3935d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
39361 671 66 36 18 0C 
39365 672 66 62 00 38 
39369 673 6C 38 1C F6 
3936d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
39371 675 18 18 18 00 
39375 676 00 00 00 00 
39379 677 70 38 18 18 
3937d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
39381 679 0E 1C 18 18 
39385 67a 1C 0E 00 00 
39389 67b 66 3C FF 3C 
3938d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
39391 67d 18 18 7E 18 
39395 67e 18 00 00 00 
39399 67f 00 00 00 00 
3939d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
393a1 681 00 00 7E 00 
393a5 682 00 00 00 00 
393a9 683 00 00 00 00 
393ad 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
393b1 685 60 30 18 0C 
393b5 686 06 02 00 00 
393b9 687 3C 66 76 6E 
393bd 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
393c1 689 18 1C 18 18 
393c5 68a 18 7E 00 00 
393c9 68b 3C 66 30 18 
393cd 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
393d1 68d 7E 30 18 30 
393d5 68e 66 3C 00 00 
393d9 68f 30 38 3C 36 
393dd 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
393e1 691 7E 06 3E 60 
393e5 692 66 3C 00 00 
393e9 693 3C 06 3E 66 
393ed 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
393f1 695 7E 60 30 18 
393f5 696 0C 0C 00 00 
393f9 697 3C 66 3C 66 
393fd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
39401 699 3C 66 7C 60 
39405 69a 30 1C 00 00 
39409 69b 00 18 18 00 
3940d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
39411 69d 00 18 18 00 
39415 69e 18 18 0C 60 
39419 69f 30 18 0C 18 
3941d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
39421 6a1 00 7E 00 00 
39425 6a2 7E 00 00 06 
39429 6a3 0C 18 30 18 
3942d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
39431 6a5 3C 66 30 18 
39435 6a6 00 18 00 00 
39439 6a7 3C 66 76 76 
3943d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
39441 6a9 18 3C 66 66 
39445 6aa 7E 66 00 00 
39449 6ab 3E 66 3E 66 
3944d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
39451 6ad 3C 66 06 06 
39455 6ae 66 3C 00 00 
39459 6af 1E 36 66 66 
3945d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
39461 6b1 7E 06 3E 06 
39465 6b2 06 7E 00 00 
39469 6b3 7E 06 3E 06 
3946d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
39471 6b5 7C 06 06 76 
39475 6b6 66 7C 00 00 
39479 6b7 66 66 7E 66 
3947d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
39481 6b9 7E 18 18 18 
39485 6ba 18 7E 00 00 
39489 6bb 60 60 60 60 
3948d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
39491 6bd 66 36 1E 1E 
39495 6be 36 66 00 00 
39499 6bf 06 06 06 06 
3949d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
394a1 6c1 C6 EE FE D6 
394a5 6c2 C6 C6 00 00 
394a9 6c3 66 6E 7E 7E 
394ad 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
394b1 6c5 3C 66 66 66 
394b5 6c6 66 3C 00 00 
394b9 6c7 3E 66 66 3E 
394bd 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
394c1 6c9 3C 66 66 66 
394c5 6ca 36 6C 00 00 
394c9 6cb 3E 66 66 3E 
394cd 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
394d1 6cd 3C 06 3C 60 
394d5 6ce 60 3C 00 00 
394d9 6cf 7E 18 18 18 
394dd 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
394e1 6d1 66 66 66 66 
394e5 6d2 66          | 	byte	$66[5]
394e6 6d2 7E 00 00 66 
394ea 6d3 66 66 66 3C 
394ee 6d4 18 00 00 C6 
394f2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
394f6 6d6 C6 00 00 66 
394fa 6d7 66 3C 3C 66 
394fe 6d8 66 00 00 66 
39502 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
39506 6da 18 00 00 7E 
3950a 6db 30 18 0C 06 
3950e 6dc 7E 00 00 78 
39512 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
39516 6de 78 00 00 02 
3951a 6df 06 0C 18 30 
3951e 6e0 60 00 00 1E 
39522 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
39526 6e2 1E 00 00 10 
3952a 6e3 38 6C C6 00 
3952e 6e4 00 00 00 00 
39532 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
39536 6e6 FF 00 00 18 
3953a 6e7 3C 7E 7E 3C 
3953e 6e8 18 00 00 00 
39542 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
39546 6ea 7C 00 00 06 
3954a 6eb 06 3E 66 66 
3954e 6ec 3E 00 00 00 
39552 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
39556 6ee 3C 00 00 60 
3955a 6ef 60 7C 66 66 
3955e 6f0 7C 00 00 00 
39562 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
39566 6f2 3C 00 00 70 
3956a 6f3 18 7C 18 18 
3956e 6f4 18 00 00 00 
39572 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
39576 6f6 60 3E 00 06 
3957a 6f7 06 3E 66 66 
3957e 6f8 66 00 00 18 
39582 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
39586 6fa 3C 00 00 60 
3958a 6fb 00 60 60 60 
3958e 6fc 60 3C 00 06 
39592 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
39596 6fe 66 00 00 1C 
3959a 6ff 18 18 18 18 
3959e 700 3C 00 00 00 
395a2 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
395a6 702 C6 00 00 00 
395aa 703 3E 66 66 66 
395ae 704 66 00 00 00 
395b2 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
395b6 706 3C 00 00 00 
395ba 707 3E 66 66 3E 
395be 708 06 06 00 00 
395c2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
395c6 70a 60 60 00 00 
395ca 70b 3E 66 06 06 
395ce 70c 06 00 00 00 
395d2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
395d6 70e 3E 00 00 18 
395da 70f 7E 18 18 18 
395de 710 70 00 00 00 
395e2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
395e6 712 7C 00 00 00 
395ea 713 66 66 66 3C 
395ee 714 18 00 00 00 
395f2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
395f6 716 6C 00 00 00 
395fa 717 66 3C 18 3C 
395fe 718 66 00 00 00 
39602 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
39606 71a 30 1E 00 00 
3960a 71b 7E 30 18 0C 
3960e 71c 7E 00 00 18 
39612 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
39616 71e 3C 00 18 18 
3961a 71f 18 18 18 18 
3961e 720 18 18 00 7E 
39622 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
39626 722 60 00 10 18 
3962a 723 1C 1E 1C 18 
3962e 724 10 00 08 18 
39632 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
39636 726 08 00       | 	byte	$08, $00
39638 727 00 00 00 00 
3963c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3963d 728 80 00 00 00 
39641 729 00 80 00 00 
39645 72a 80 80 00 00 
39649 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3964d 72c 80 00 80 00 
39651 72d 00 40 80 00 
39655 72e AA AA AA 00 
39659 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3965d 730 FF 00 00 00 
39661 731 00 FF 00 00 
39665 732 FF FF 00 00 
39669 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3966d 734 FF 00 FF 00 
39671 735 00 FF FF 00 
39675 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
39678 737 00 00 00 00 
3967c 738 00          | ataripalette   file "ataripalettep2.def"
3967d 738 11 11 11 00 
39681 739 22 22 22 00 
39685 73a 33 33 33 00 
39689 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3968d 73c 55 55 55 00 
39691 73d 66 66 66 00 
39695 73e 77 77 77 00 
39699 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3969d 740 99 99 99 00 
396a1 741 AA AA AA 00 
396a5 742 BB BB BB 00 
396a9 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
396ad 744 DD DD DD 00 
396b1 745 EE EE EE 00 
396b5 746 FF FF FF 00 
396b9 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
396bd 748 00 14 40 00 
396c1 749 00 1E 60 00 
396c5 74a 00 28 80 00 
396c9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
396cd 74c 00 3C BF 00 
396d1 74d 00 46 DF 00 
396d5 74e 00 50 FF 00 
396d9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
396dd 750 39 77 FF 00 
396e1 751 55 8A FF 00 
396e5 752 71 9E FF 00 
396e9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
396ed 754 AA C5 FF 00 
396f1 755 C6 D8 FF 00 
396f5 756 E3 EC FF 00 
396f9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
396fd 758 00 00 40 00 
39701 759 00 00 60 00 
39705 75a 00 00 80 00 
39709 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3970d 75c 00 00 BF 00 
39711 75d 00 00 DF 00 
39715 75e 00 00 FF 00 
39719 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3971d 760 39 39 FF 00 
39721 761 55 55 FF 00 
39725 762 71 71 FF 00 
39729 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3972d 764 AA AA FF 00 
39731 765 C6 C6 FF 00 
39735 766 E3 E3 FF 00 
39739 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3973d 768 20 00 40 00 
39741 769 30 00 60 00 
39745 76a 40 00 80 00 
39749 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3974d 76c 60 00 BF 00 
39751 76d 70 00 DF 00 
39755 76e 80 00 FF 00 
39759 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3975d 770 9C 39 FF 00 
39761 771 AA 55 FF 00 
39765 772 B8 71 FF 00 
39769 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3976d 774 D5 AA FF 00 
39771 775 E3 C6 FF 00 
39775 776 F1 E3 FF 00 
39779 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3977d 778 40 00 40 00 
39781 779 60 00 60 00 
39785 77a 80 00 80 00 
39789 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3978d 77c BF 00 BF 00 
39791 77d DF 00 DF 00 
39795 77e FF 00 FF 00 
39799 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3979d 780 FF 39 FF 00 
397a1 781 FF 55 FF 00 
397a5 782 FF 71 FF 00 
397a9 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
397ad 784 FF AA FF 00 
397b1 785 FF C6 FF 00 
397b5 786 FF E3 FF 00 
397b9 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
397bd 788 40 00 20 00 
397c1 789 60 00 30 00 
397c5 78a 80 00 40 00 
397c9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
397cd 78c BF 00 60 00 
397d1 78d DF 00 70 00 
397d5 78e FF 00 80 00 
397d9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
397dd 790 FF 39 9C 00 
397e1 791 FF 55 AA 00 
397e5 792 FF 71 B8 00 
397e9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
397ed 794 FF AA D5 00 
397f1 795 FF C6 E3 00 
397f5 796 FF E3 F1 00 
397f9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
397fd 798 40 00 00 00 
39801 799 60 00 00 00 
39805 79a 80 00 00 00 
39809 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3980d 79c BF 00 00 00 
39811 79d DF 00 00 00 
39815 79e FF 00 00 00 
39819 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3981d 7a0 FF 39 39 00 
39821 7a1 FF 55 55 00 
39825 7a2 FF 71 71 00 
39829 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3982d 7a4 FF AA AA 00 
39831 7a5 FF C6 C6 00 
39835 7a6 FF E3 E3 00 
39839 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3983d 7a8 40 10 00 00 
39841 7a9 60 18 00 00 
39845 7aa 80 20 00 00 
39849 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3984d 7ac BF 30 00 00 
39851 7ad DF 38 00 00 
39855 7ae FF 40 00 00 
39859 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3985d 7b0 FF 6A 39 00 
39861 7b1 FF 80 55 00 
39865 7b2 FF 95 71 00 
39869 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3986d 7b4 FF BF AA 00 
39871 7b5 FF D5 C6 00 
39875 7b6 FF EA E3 00 
39879 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3987d 7b8 40 20 00 00 
39881 7b9 60 30 00 00 
39885 7ba 80 40 00 00 
39889 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3988d 7bc BF 60 00 00 
39891 7bd DF 70 00 00 
39895 7be FF 80 00 00 
39899 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3989d 7c0 FF 9C 39 00 
398a1 7c1 FF AA 55 00 
398a5 7c2 FF B8 71 00 
398a9 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
398ad 7c4 FF D5 AA 00 
398b1 7c5 FF E3 C6 00 
398b5 7c6 FF F1 E3 00 
398b9 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
398bd 7c8 40 30 00 00 
398c1 7c9 60 48 00 00 
398c5 7ca 80 60 00 00 
398c9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
398cd 7cc BF 90 00 00 
398d1 7cd DF A8 00 00 
398d5 7ce FF C0 00 00 
398d9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
398dd 7d0 FF CE 39 00 
398e1 7d1 FF D5 55 00 
398e5 7d2 FF DC 71 00 
398e9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
398ed 7d4 FF EA AA 00 
398f1 7d5 FF F1 C6 00 
398f5 7d6 FF F8 E3 00 
398f9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
398fd 7d8 30 40 00 00 
39901 7d9 48 60 00 00 
39905 7da 60 80 00 00 
39909 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3990d 7dc 90 BF 00 00 
39911 7dd A8 DF 00 00 
39915 7de C0 FF 00 00 
39919 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3991d 7e0 CE FF 39 00 
39921 7e1 D5 FF 55 00 
39925 7e2 DC FF 71 00 
39929 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3992d 7e4 EA FF AA 00 
39931 7e5 F1 FF C6 00 
39935 7e6 F8 FF E3 00 
39939 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3993d 7e8 00 40 00 00 
39941 7e9 00 60 00 00 
39945 7ea 00 80 00 00 
39949 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3994d 7ec 00 BF 00 00 
39951 7ed 00 DF 00 00 
39955 7ee 00 FF 00 00 
39959 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3995d 7f0 39 FF 39 00 
39961 7f1 55 FF 55 00 
39965 7f2 71 FF 71 00 
39969 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3996d 7f4 AA FF AA 00 
39971 7f5 C6 FF C6 00 
39975 7f6 E3 FF E3 00 
39979 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3997d 7f8 00 40 14 00 
39981 7f9 00 60 1E 00 
39985 7fa 00 80 28 00 
39989 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3998d 7fc 00 BF 3C 00 
39991 7fd 00 DF 46 00 
39995 7fe 00 FF 50 00 
39999 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3999d 800 39 FF 77 00 
399a1 801 55 FF 8A 00 
399a5 802 71 FF 9E 00 
399a9 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
399ad 804 AA FF C5 00 
399b1 805 C6 FF D8 00 
399b5 806 E3 FF EC 00 
399b9 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
399bd 808 00 40 28 00 
399c1 809 00 60 3C 00 
399c5 80a 00 80 50 00 
399c9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
399cd 80c 00 BF 78 00 
399d1 80d 00 DF 8C 00 
399d5 80e 00 FF A0 00 
399d9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
399dd 810 39 FF B5 00 
399e1 811 55 FF C0 00 
399e5 812 71 FF CA 00 
399e9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
399ed 814 AA FF DF 00 
399f1 815 C6 FF EA 00 
399f5 816 E3 FF F4 00 
399f9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
399fd 818 00 40 40 00 
39a01 819 00 60 60 00 
39a05 81a 00 80 80 00 
39a09 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
39a0d 81c 00 BF BF 00 
39a11 81d 00 DF DF 00 
39a15 81e 00 FF FF 00 
39a19 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
39a1d 820 39 FF FF 00 
39a21 821 55 FF FF 00 
39a25 822 71 FF FF 00 
39a29 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
39a2d 824 AA FF FF 00 
39a31 825 C6 FF FF 00 
39a35 826 E3 FF FF 00 
39a39 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
39a3d 828 00 28 40 00 
39a41 829 00 3C 60 00 
39a45 82a 00 50 80 00 
39a49 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
39a4d 82c 00 78 BF 00 
39a51 82d 00 8C DF 00 
39a55 82e 00 A0 FF 00 
39a59 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
39a5d 830 39 B5 FF 00 
39a61 831 55 C0 FF 00 
39a65 832 71 CA FF 00 
39a69 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
39a6d 834 AA DF FF 00 
39a71 835 C6 EA FF 00 
39a75 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
39a78 837             | 
39a78 837             | '**********************************************************************************
39a78 837             | '
39a78 837             | '        Timings and colors definitions
39a78 837             | '
39a78 837             | '**********************************************************************************
39a78 837             | 
39a78 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
39a78 837 08 00 00 00 
39a7c 838 3C 00 00 00 
39a80 839 08 00 00 00 
39a84 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
39a88 83b 07 00 00 00 
39a8c 83c 04 00 00 00 
39a90 83d 01 00 00 00 
39a94 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
39a98 83f 58 02 00 00 
39a9c 840 20 9E 4B 14 
39aa0 841 FB A8 9E 01 
39aa4 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
39aa8 843 00 00 00 00 
39aac 844 C0 00 00 00 
39ab0 845 00 00 00 00 
39ab4 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ab8 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
39ab8 847 00 75 C7 97 
39abc 848 27 47 F6 0A 
39ac0 849 05 79 CB 9B 
39ac4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
39ac8 84b             | 
39ac8 84b             | ''--------  Initialization  ----------------------------------------------------------------
39ac8 84b             | 
39ac8 84b 28 0C 64 FD | hdmi            setq    #6
39acc 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
39ad0 84d 28 10 64 FD |                 setq    #8
39ad4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
39ad8 84f             | 
39ad8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
39adc 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
39ae0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
39ae4 852 D6 C6 01 F1 |                 add     t1,hbase
39ae8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
39aec 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
39af0 855 7B 0B 80 5F 
39af4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
39af8 857 66 66 86 FF 
39afc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
39b00 859             | '
39b00 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
39b04 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
39b08 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
39b0c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
39b10 85d             | 
39b10 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
39b14 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
39b18 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
39b1c 860             | 
39b1c 860             | ''--------  frame rendering main loop  ---------------------------------------------------
39b1c 860             | 
39b1c 860 28 06 64 FD | p101            setq 	#3
39b20 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
39b24 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
39b28 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
39b2c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
39b30 865 00 A0 05 F6 |                 mov     dlinum, #0
39b34 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
39b38 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
39b3c 868             | 
39b3c 868             | 
39b3c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
39b40 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
39b44 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
39b48 86b             |                 
39b48 86b             | 
39b48 86b             | 
39b48 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
39b48 86b             |   
39b48 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
39b4c 86c 29 FE 65 3D |          if_nc  setq2   #255
39b50 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
39b54 86e             | 
39b54 86e             | '' -----   up porch (before the picture)
39b54 86e             | 
39b54 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
39b58 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
39b5c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
39b60 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
39b64 872             |  
39b64 872             |    
39b64 872             |  
39b64 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39b68 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
39b6c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
39b70 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39b74 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
39b78 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
39b7c 878             | 
39b7c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
39b80 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
39b84 87a 48 00 B0 FD | 		call    #dli
39b88 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
39b8c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
39b90 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
39b94 87e             |                 	
39b94 87e             |                 
39b94 87e             | 
39b94 87e             |  
39b94 87e             | '' ------- the main screen drawing starts here
39b94 87e             | 
39b94 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
39b98 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
39b9c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
39ba0 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
39ba4 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
39ba8 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
39bac 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
39bb0 885             |               
39bb0 885             | 
39bb0 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
39bb4 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
39bb8 887             | 
39bb8 887             | ' ---------------- All visible lines displayed now, start vblank  
39bb8 887             | 
39bb8 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
39bbc 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
39bc0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
39bc4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
39bc8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
39bcc 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
39bd0 88d             | 
39bd0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
39bd0 88d             | 
39bd0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
39bd0 88d             | 
39bd0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
39bd4 88e             | 
39bd4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
39bd8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
39bdc 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
39be0 891             | 
39be0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
39be4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
39be8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
39bec 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
39bf0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
39bf4 896             | 
39bf4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
39bf8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
39bfc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
39c00 899 70 00 90 AD |     if_z        jmp     #preload
39c04 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
39c08 89b 94 00 90 AD |     if_z        jmp     #preload2
39c0c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
39c10 89d 0C 00 90 AD |     if_z        jmp     #p390
39c14 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
39c18 89f 28 00 90 AD |     if_z        jmp     #p391  
39c1c 8a0             | 
39c1c 8a0 2D 00 64 FD | p308            ret
39c20 8a1             |    
39c20 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
39c24 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
39c28 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
39c2c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
39c30 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
39c34 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
39c38 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
39c3c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
39c40 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
39c44 8aa             |  
39c44 8aa             | '' --------  Reload palette. To do 
39c44 8aa             | 
39c44 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
39c48 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
39c4c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
39c50 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
39c54 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
39c58 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
39c5c 8b0 70 FF 9F FD |         	jmp     #dli                
39c60 8b1             |       
39c60 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
39c60 8b1             | 
39c60 8b1             | 
39c60 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
39c60 8b1             | 
39c60 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
39c64 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
39c68 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
39c6c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
39c70 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
39c74 8b6             |         
39c74 8b6             | '' -------------- Preload a line from PSRAM        
39c74 8b6             |         
39c74 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
39c78 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
39c7c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
39c80 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
39c84 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
39c88 8bb             | 
39c88 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
39c8c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
39c90 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
39c94 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
39c98 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
39c9c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
39ca0 8c1             |  
39ca0 8c1             |  
39ca0 8c1             | preload2      '  incmod  dlinum,#3
39ca0 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
39ca4 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
39ca8 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
39cac 8c4 28 02 64 FD |                 setq	#1
39cb0 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
39cb4 8c6             |                 
39cb4 8c6             | 
39cb4 8c6             | '' -------------- Draw sprites
39cb4 8c6             | 
39cb4 8c6 CF 5C 02 F6 | sprite          mov t8,frames
39cb8 8c7 10 5C 0E F5 | 		and t8,#16 wz
39cbc 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
39cc0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
39cc4 8ca             | 		
39cc4 8ca             | 
39cc4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
39cc8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
39ccc 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
39cd0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
39cd4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
39cd8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
39cdc 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
39ce0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
39ce4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
39ce8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
39cec 8d4 01 52 86 F1 |                 sub     sprite_h,#1
39cf0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
39cf4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
39cf8 8d7             | 
39cf8 8d7             | 
39cf8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
39cfc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
39d00 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
39d04 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
39d08 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
39d0c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
39d10 8dd 00 5E 06 F6 |                 mov 	t9,#0
39d14 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
39d18 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
39d1c 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
39d20 8e1             |      
39d20 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
39d24 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
39d28 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
39d2c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
39d30 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
39d34 8e6             |                 
39d34 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
39d38 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
39d3c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
39d40 8e9             |   		
39d40 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
39d44 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
39d48 8eb             | 
39d48 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
39d4c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
39d50 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
39d54 8ee             |  
39d54 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
39d58 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
39d5c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
39d60 8f1             | 	
39d60 8f1             | 	
39d60 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
39d64 8f2 28 CD 01 F1 | 		add	t4,sprite_w
39d68 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
39d6c 8f4             | 
39d6c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
39d70 8f5             | 
39d70 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
39d74 8f6 01 58 86 F1 | 	 	sub     t6,#1
39d78 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
39d7c 8f8             | 
39d7c 8f8 28 58 62 FD |                 setq   	t6
39d80 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
39d84 8fa 28 5D 02 F6 |                 mov t8,sprite_w
39d88 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
39d8c 8fc 24 00 90 AD |         if_z    jmp #p898
39d90 8fd             |          
39d90 8fd             |         
39d90 8fd 70 5F 06 F6 |                 mov  t9,#368
39d94 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
39d98 8ff             | 
39d98 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
39d9c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
39da0 901 FF FF 7F FF 
39da4 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
39da8 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
39dac 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
39db0 905 2D 01 00 F5 |                 and 0-0, t7
39db4 906             |                
39db4 906             | 
39db4 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
39db8 907 E5 E0 7A FA |                 wmlong 368,t3				
39dbc 908             |                 
39dbc 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
39dc0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
39dc4 90a 2D 00 64 FD |                 ret
39dc8 90b             | 	
39dc8 90b             | 	
39dc8 90b             |                
39dc8 90b             |  
39dc8 90b             | '' -------------- Graphics line ------------------------------------------------------------
39dc8 90b             |  
39dc8 90b             | 
39dc8 90b             | '' consts and vars
39dc8 90b             | 
39dc8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
39dcc 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
39dd0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
39dd4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
39dd8 90f             | 
39dd8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
39ddc 910             | 
39ddc 910             | '------ these longs will be set by setmode function
39ddc 910             | 
39ddc 910 00 00 00 00 | m_bs            long    0        'blanks before sync
39de0 911 00 00 00 00 | m_sn            long    0        'sync
39de4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
39de8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
39dec 914             | 'm_border        long    0        'left/right borders
39dec 914 00 00 00 00 | i_upporch       long    0        'up porch lines
39df0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
39df4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
39df8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
39dfc 918 00 00 00 00 | i_totalvis      long    0
39e00 919             | 
39e00 919             | '-------------------------------------
39e00 919             |  
39e00 919 00 00 00 00 | linenum         long    0
39e04 91a 00 00 00 00 | frames          long    0
39e08 91b 00 00 00 00 | dlinum long 0
39e0c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
39e10 91d             | 
39e10 91d 00 00 00 00 | vblankptr       long    0
39e14 91e 00 00 00 00 | modeptr         long    0
39e18 91f 00 00 00 00 | paletteptr      long    0
39e1c 920 00 00 00 00 | dlptr           long    0
39e20 921 01 00 00 00 | hbase           long    1
39e24 922 00 00 00 00 | mailbox         long    0
39e28 923 00 00 00 00 | spriteptr          long 0
39e2c 924             | 
39e2c 924 00 00 00 00 | cmd             long    0
39e30 925 00 B0 07 00 | buf1            long    $80000-16384-4096
39e34 926 00 04 00 00 | buf2            long    1024
39e38 927 01 00 00 00 | dlptr2          long    1
39e3c 928 01 00 00 00 | dl              long    1
39e40 929             | 
39e40 929 00 00 00 00 | buf1c long 0
39e44 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
39e48 92b 01 00 00 00 | framebuf2       long    1
39e4c 92c 01 00 00 00 | hsync0          long    1
39e50 92d 01 00 00 00 | hsync1          long    1
39e54 92e             | 
39e54 92e 01 00 00 00 | t1              long    1
39e58 92f 00 00 00 00 | t2 long 0
39e5c 930 00 00 00 00 | t3 long 0
39e60 931 00 00 00 00 | t4 long 0
39e64 932             | 
39e64 932 00 00 00 00 | rcnt            long    0  'dl repeat count
39e68 933 00 00 00 00 | rcnt2           long    0
39e6c 934 00 00 00 00 | rcnt2a          long    0
39e70 935 00 00 00 00 | roffset         long    0
39e74 936 00 00 00 00 | rdl             long    0  'dl repeat line
39e78 937 00 00 00 00 | dlc             long    0  'dl command
39e7c 938             | 
39e7c 938 FF FF FF FF | affffffff       long    $ffffffff
39e80 939 00 00 00 00 | sprite1pointer long 0
39e84 93a 00 00 00 00 | sprite1xy      long 0
39e88 93b 00 00 00 00 | sprite1wh      long 0
39e8c 93c 00 00 00 00 | sprite2pointer long 0
39e90 93d 00 00 00 00 | sprite2xy      long 0
39e94 93e 00 00 00 00 | sprite2wh      long 0
39e98 93f 00 00 00 00 | sprite3pointer long 0
39e9c 940 00 00 00 00 | sprite3xy      long 0
39ea0 941 00 00 00 00 | sprite3wh      long 0
39ea4 942 00 00 00 00 | sprite4pointer long 0
39ea8 943 00 00 00 00 | sprite4xy      long 0
39eac 944 00 00 00 00 | sprite4wh      long 0
39eb0 945 00 00 00 00 | sprite5pointer long 0
39eb4 946 00 00 00 00 | sprite5xy      long 0
39eb8 947 00 00 00 00 | sprite5wh      long 0
39ebc 948 00 00 00 00 | sprite6pointer long 0
39ec0 949 00 00 00 00 | sprite6xy      long 0
39ec4 94a 00 00 00 00 | sprite6wh      long 0
39ec8 94b 00 00 00 00 | sprite7pointer long 0
39ecc 94c 00 00 00 00 | sprite7xy      long 0
39ed0 94d 00 00 00 00 | sprite7wh      long 0
39ed4 94e 00 00 00 00 | sprite8pointer long 0
39ed8 94f 00 00 00 00 | sprite8xy      long 0
39edc 950 00 00 00 00 | sprite8wh      long 0
39ee0 951 00 00 00 00 | sprite9pointer long 0
39ee4 952 00 00 00 00 | sprite9xy      long 0
39ee8 953 00 00 00 00 | sprite9wh      long 0
39eec 954 00 00 00 00 | sprite10pointer long 0
39ef0 955 00 00 00 00 | sprite10xy      long 0
39ef4 956 00 00 00 00 | sprite10wh      long 0
39ef8 957 00 00 00 00 | sprite11pointer long 0
39efc 958 00 00 00 00 | sprite11xy      long 0
39f00 959 00 00 00 00 | sprite11wh      long 0
39f04 95a 00 00 00 00 | sprite12pointer long 0
39f08 95b 00 00 00 00 | sprite12xy      long 0
39f0c 95c 00 00 00 00 | sprite12wh      long 0
39f10 95d 00 00 00 00 | sprite13pointer long 0
39f14 95e 00 00 00 00 | sprite13xy      long 0
39f18 95f 00 00 00 00 | sprite13wh      long 0
39f1c 960 00 00 00 00 | sprite14pointer long 0
39f20 961 00 00 00 00 | sprite14xy      long 0
39f24 962 00 00 00 00 | sprite14wh      long 0
39f28 963 00 00 00 00 | sprite15pointer long 0
39f2c 964 00 00 00 00 | sprite15xy      long 0
39f30 965 00 00 00 00 | sprite15wh      long 0
39f34 966 00 00 00 00 | sprite16pointer long 0
39f38 967 00 00 00 00 | sprite16xy      long 0
39f3c 968 00 00 00 00 | sprite16wh      long 0
39f40 969 00 00 00 00 | sprite17pointer long 0
39f44 96a 00 00 00 00 | sprite17xy      long 0
39f48 96b 00 00 00 00 | sprite17wh      long 0
39f4c 96c 00 00 00 00 | sprite18pointer long 0
39f50 96d 00 00 00 00 | sprite18xy      long 0
39f54 96e 00 00 00 00 | sprite18wh      long 0
39f58 96f 00 00 00 00 | spritenum long 0
39f5c 970             | 
39f5c 970 00 00 00 00 | spriteline long 0
39f60 971 84 03 00 00 | sprite_x long 900
39f64 972 00 00 00 00 | sprite_y long 0
39f68 973 10 00 00 00 | sprite_w long 16
39f6c 974 40 00 00 00 | sprite_h long 64
39f70 975 00 00 00 00 | l2 long 0
39f74 976 00 00 00 00 | t5 long 0
39f78 977 00 00 00 00 | t6 long 0
39f7c 978 00 00 00 00 | t7 long 0
39f80 979 00 00 00 00 | t8 long 0
39f84 97a 00 00 00 00 | t9 long 0
39f88 97b 00 00 00 00 | preloadaddr long 0
39f8c 97c 00 00 00 00 | preloadlineaddr long 0
39f90 97d 00 04 00 00 | a1024 long 1024
39f94 97e             | 
39f94 97e E0 03 00 00 | aa long 992
39f98 97f FF 03 00 00 | a1023 long 1023
39f9c 980 00 10 00 00 | a4096 long 4096
39fa0 981             |  fit 368
39fa0 981             | _psram_spin2_dat_
39fa0 981 00 00 00 00 
      ...             
3a098 9bf 00 00 00 00 
3a09c 9c0 00 00 00 00 |     listdata long 0[8*8]
3a0a0 9c1             |             orgh
3a0a0                 | 
3a0a0                 | ' driver state
3a0a0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3a0a4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3a0a8                 | 
3a0a8                 | ' delay profile
3a0a8     07 00 00 00 
3a0ac     00 CF 7B 05 
3a0b0     80 D1 F0 08 
3a0b4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3a0b8     80 C4 60 0F 
3a0bc     80 39 7A 12 
3a0c0     40 2D D9 13 
3a0c4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3a0c8                 | 
3a0c8                 | ' data to be passed to driver when starting it
3a0c8                 | startupData
3a0c8     00 00 00 00 |     long    0           ' current frequency
3a0cc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3a0d0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3a0d4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3a0d8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3a0dc     E8 A0 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3a0e0     68 A1 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3a0e4     88 A1 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3a0e8                 | 
3a0e8                 | ' data for memory
3a0e8                 | deviceData
3a0e8                 |     ' 16 bank parameters follow (16MB per bank)
3a0e8     00 00 00 00 
      ...             
3a120     00 00 00 00 
3a124     00 00 00 00 |     long    0[16]                               ' banks 0-15
3a128                 |     ' 16 banks of pin parameters follow
3a128     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3a12c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3a130     FF FF FF FF 
      ...             
3a160     FF FF FF FF 
3a164     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3a168                 | 
3a168                 | ' data for COG polling
3a168                 | qosData 
3a168     00 00 FF FF 
3a16c     00 00 FF FF 
3a170     00 00 FF FF 
3a174     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3a178     00 00 FF FF 
3a17c     00 00 FF FF 
3a180     00 00 FF FF 
3a184     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3a188                 |     
3a188                 | ' mailbox storage
3a188                 | 
3a188                 | mailboxes
3a188     00 00 00 00 
      ...             
3a1e0     00 00 00 00 
3a1e4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3a1e8                 | 	alignl
3a1e8                 | _psram16drv_spin2_dat_
3a1e8                 |                             orgh
3a1e8     00 00 00 00 
      ...             
3a200     00 00 00 00 
3a204     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3a208                 | 
3a208                 | driver_start
3a208                 |                             org
3a208 000             | '..................................................................................................
3a208 000             | ' Memory layout for COG RAM once operational:
3a208 000             | '
3a208 000             | '  COG RAM address      Usage
3a208 000             | '  ---------------      ----
3a208 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3a208 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3a208 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3a208 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3a208 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3a208 000             | '  ~$198-$1F3           State and register variables
3a208 000             | '
3a208 000             | ' Also during driver COG startup:
3a208 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3a208 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3a208 000             | '..................................................................................................
3a208 000             |                             
3a208 000             | ' Mailbox storage after vector initialization
3a208 000             | 
3a208 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3a20c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3a210 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3a214 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3a218 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3a21c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3a220 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3a224 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3a228 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3a22c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3a230 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3a234 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3a238 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3a23c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3a240 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3a244 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3a248 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3a24c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3a250 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3a254 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3a258 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3a25c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3a260 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3a264 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3a268 018             | 
3a268 018             | ' Mailbox parameter addresses per COG once patched
3a268 018             |                             
3a268 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3a26c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3a270 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3a274 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3a278 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3a27c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3a280 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3a284 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3a288 020             | 
3a288 020             | '..................................................................................................
3a288 020             | ' Per COG request and state setup and service branching
3a288 020             |         
3a288 020             | cog0                 
3a288 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3a28c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3a290 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3a294 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3a298 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a29c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a2a0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3a2a4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3a2a8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3a2ac 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a2b0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a2b4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3a2b8 02c             | cog1                        
3a2b8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3a2bc 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3a2c0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3a2c4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3a2c8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a2cc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a2d0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3a2d4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3a2d8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3a2dc 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a2e0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a2e4 037 33 CA 63 FD |                             execf   request-0               'jump to service
3a2e8 038             | cog2                         
3a2e8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3a2ec 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3a2f0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3a2f4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3a2f8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a2fc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a300 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3a304 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3a308 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3a30c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a310 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a314 043 33 CA 63 FD |                             execf   request-0               'jump to service
3a318 044             | cog3                        
3a318 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3a31c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3a320 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3a324 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3a328 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a32c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a330 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3a334 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3a338 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3a33c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a340 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a344 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3a348 050             | cog4                        
3a348 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3a34c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3a350 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3a354 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3a358 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a35c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a360 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3a364 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3a368 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3a36c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a370 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a374 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3a378 05c             | cog5                        
3a378 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3a37c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3a380 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3a384 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3a388 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a38c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a390 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3a394 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3a398 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3a39c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a3a0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a3a4 067 33 CA 63 FD |                             execf   request-0               'jump to service
3a3a8 068             | cog6                        
3a3a8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3a3ac 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3a3b0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3a3b4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3a3b8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a3bc 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a3c0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3a3c4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3a3c8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3a3cc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a3d0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a3d4 073 33 CA 63 FD |                             execf   request-0               'jump to service
3a3d8 074             | cog7                        
3a3d8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3a3dc 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3a3e0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3a3e4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3a3e8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3a3ec 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3a3f0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3a3f4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3a3f8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3a3fc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3a400 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3a404 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3a408 080             |                             fit     128
3a408 080             | 
3a408 080             |                             fit     128
3a408 080             | pad                         long    0[128-$]                'align init code to $80
3a408 080             | 
3a408 080             | '..................................................................................................
3a408 080             | 
3a408 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3a408 080             | 
3a408 080             | init                        
3a408 080             |                             ' get driver scratch long address in hub
3a408 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3a40c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3a410 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3a414 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3a418 084             |                     
3a418 084             |                             ' read in the additional LUT RAM code
3a418 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3a41c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3a420 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3a424 087             | 
3a424 087             |                             ' read the startup parameters
3a424 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3a428 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3a42c 089             | 
3a42c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3a42c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3a430 08a             | 
3a430 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3a434 08b 01 00 00 5F 
3a438 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3a43c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3a440 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3a444 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3a448 090             | 
3a448 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3a448 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3a44c 091 01 00 00 FF 
3a450 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3a454 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3a458 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3a45c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3a460 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3a464 097 08 DE 47 F5 |                             or      a, #8
3a468 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3a46c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3a470 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3a474 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3a478 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3a47c 09d 01 DE 07 F1 |                             add     a, #1
3a480 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3a484 09f             |  
3a484 09f             |                             ' setup device control pin states
3a484 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3a488 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3a48c 0a1 01 00 00 FF 
3a490 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3a494 0a3             | 
3a494 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3a498 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3a49c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3a4a0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3a4a4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3a4a8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3a4ac 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3a4b0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3a4b4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3a4b8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3a4bc 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3a4c0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3a4c4 0af             | pinloop
3a4c4 0af             |                             ' generate minimum CE high time before access
3a4c4 0af A1 07 00 FF 
3a4c8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3a4cc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3a4d0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3a4d4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3a4d8 0b4 1F DE 63 FD |                             waitx   a                       'delay
3a4dc 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3a4e0 0b6             | 
3a4e0 0b6             |                             ' setup the COG mailboxes and addresses 
3a4e0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3a4e4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3a4e8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3a4ec 0b9             | 
3a4ec 0b9 28 2E 64 FD |                             setq    #24-1
3a4f0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3a4f4 0bb             | 
3a4f4 0bb             |                             ' setup the polling loop for active COGs 
3a4f4 0bb 01 C2 63 FD |                             cogid   id
3a4f8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3a4fc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3a500 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3a504 0bf 0A F0 07 F6 |                             mov     ptra, #10
3a508 0c0 E1 F1 03 FA |                             mul     ptra, id
3a50c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3a510 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3a514 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3a518 0c4 03 C2 07 FA |                             mul     id, #3
3a51c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3a520 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3a524 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3a528 0c8 D8 01 B0 FD |                             call    #reloadcogs
3a52c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3a530 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3a534 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3a534 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3a538 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3a53c 0cd 08 04 DC FC |                             rep     #2, #8
3a540 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3a544 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3a548 0d0             | 
3a548 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3a548 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3a548 0d0 01 C2 63 FD |                             cogid   id
3a54c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3a550 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3a554 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3a558 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3a55c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3a560 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3a564 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3a568 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3a56c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3a570 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a574 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3a578 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3a57c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3a580 0de A5 E5 03 F1 |                             add     d, const512
3a584 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3a588 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3a58c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3a590 0e2             |                             
3a590 0e2             |                             ' setup register values for control vector loop setup after we return
3a590 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3a594 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3a598 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3a59c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3a5a0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3a5a4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3a5a8 0e8 D0 C3 8F F9 |                             altd    id, #id0
3a5ac 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3a5b0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3a5b4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3a5b8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3a5bc 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3a5c0 0ee             |  
3a5c0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3a5c4 0ef 07 CA 07 F5 |                             and     request, #7
3a5c8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3a5cc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3a5d0 0f2             |                             fit     $100                    'ensure all init code fits this space
3a5d0 0f2             | 
3a5d0 0f2             |                             fit     $100                    'ensure all init code fits this space
3a5d0 0f2             | 
3a5d0 0f2 00 00 00 00 
      ...             
3a600 0fe 00 00 00 00 
3a604 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3a608 100             | 
3a608 100             | '..................................................................................................
3a608 100             | ' Error result handling and COG notification of request completion
3a608 100             | 
3a608 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3a60c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3a610 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3a614 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3a618 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3a61c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3a620 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3a624 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3a628 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3a62c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3a630 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3a634 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3a638 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3a63c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3a640 10e             | ' Poller re-starts here after a COG is serviced
3a640 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3a644 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3a648 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3a64c 111             | ' Main dynamic polling loop repeats until a request arrives
3a64c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3a650 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3a654 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3a658 114             | 
3a658 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3a65c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3a660 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3a664 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3a668 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3a66c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3a670 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3a674 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3a678 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3a67c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3a680 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3a684 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3a688 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3a68c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3a690 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3a694 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3a698 124             | 
3a698 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3a69c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3a6a0 126             |  
3a6a0 126             | '..................................................................................................
3a6a0 126             | ' List handler                               
3a6a0 126             | 
3a6a0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3a6a4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3a6a8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3a6ac 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3a6b0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3a6b4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3a6b8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3a6bc 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3a6c0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3a6c4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3a6c8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3a6cc 131 33 00 60 FD |                             execf   0-0                     'process the request 
3a6d0 132             | 
3a6d0 132             | '..................................................................................................
3a6d0 132             | ' Restoring per COG state and resuming where we left off
3a6d0 132             | 
3a6d0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3a6d4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3a6d8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3a6dc 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3a6e0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3a6e4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3a6e8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3a6ec 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3a6f0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3a6f4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3a6f8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3a6fc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3a700 13e             |                    
3a700 13e             | '..................................................................................................
3a700 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3a700 13e             | 
3a700 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3a704 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3a708 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3a70c 141 D0 DF B7 F9 |                             setd    a, #id0
3a710 142 D8 DF BF F9 |                             sets    a, #addr1
3a714 143 FE FF FF FF 
3a718 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3a71c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3a720 146 3F DE A7 F9 |                             alti    a, #%111_111 
3a724 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3a728 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3a72c 149 01 E2 63 FD |                             cogid   c
3a730 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3a734 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3a738 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3a73c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3a740 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3a744 14f 00 E0 03 F6 |                             mov     b, 0-0
3a748 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3a74c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3a750 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3a754 153 0C 00 90 AD |             if_z            jmp     #excluded               
3a758 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3a75c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3a760 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3a764 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3a768 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3a76c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3a770 15a             | 
3a770 15a             | 'determine priority cogs and build instructions for the polling sequence
3a770 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3a774 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3a778 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3a77c 15d             | 
3a77c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3a780 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3a784 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3a788 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3a78c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3a790 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3a794 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3a798 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3a79c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3a7a0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3a7a4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3a7a8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3a7ac 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3a7b0 16a             | endprioloop
3a7b0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3a7b4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3a7b8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3a7bc 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3a7c0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3a7c4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3a7c8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3a7cc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3a7d0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3a7d4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3a7d8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3a7dc 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3a7e0 176             | 
3a7e0 176             | ' populate the round robin COG polling instructions
3a7e0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3a7e4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3a7e8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3a7ec 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3a7f0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3a7f4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3a7f8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3a7fc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3a800 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3a804 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3a808 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3a80c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3a810 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3a814 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3a818 184             | '..................................................................................................
3a818 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3a818 184             | 
3a818 184             | set_latency                                                 '            (a) set latency
3a818 184             | get_latency                                                 '            (b) get latency
3a818 184             | set_burst                                                   '            (c) set burst size of bank
3a818 184             | get_burst                                                   '            (d) get burst size of bank
3a818 184             |                                                             '            (e) dump state
3a818 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3a81c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3a820 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3a824 187             |                                                             ' | | | | e  account for following AUGS
3a824 187 04 00 00 FF 
3a828 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3a82c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3a830 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3a834 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3a838 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3a83c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3a840 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3a844 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3a848 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3a84c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3a850 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3a854 193             | 
3a854 193             | '..................................................................................................
3a854 193             | ' Misc EXECF code
3a854 193             | 
3a854 193 33 72 63 FD | start_read_exec             execf   newburstr
3a858 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3a85c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3a860 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3a864 197             | 
3a864 197             | '..................................................................................................
3a864 197             | ' Variables
3a864 197             | 
3a864 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3a868 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3a86c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3a870 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3a874 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3a878 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3a87c 19d             | 
3a87c 19d 00 00 00 80 | xfreq1          long    $80000000
3a880 19e 00 00 00 40 | xfreq2          long    $40000000
3a884 19f 03 00 00 00 | delay           long    3
3a888 1a0             | 
3a888 1a0             | lutcodeaddr                 
3a888 1a0             | startupparams
3a888 1a0             | excludedcogs                                    'careful: shared register use!
3a888 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3a88c 1a1 00 00 00 00 | flags           long    0
3a890 1a2             | mask                                            'careful: shared register use!
3a890 1a2 00 00 00 00 | resetmaskA      long    0
3a894 1a3             | limit                                           'careful: shared register use!
3a894 1a3 00 00 00 00 | resetmaskB      long    0
3a898 1a4 00 00 00 00 | datapins        long    0
3a89c 1a5             | const512                                        'careful: shared register use!
3a89c 1a5 00 00 00 00 | devicelist      long    0
3a8a0 1a6 00 00 00 00 | coglist         long    0
3a8a4 1a7 00 00 00 00 | mbox            long    0 
3a8a8 1a8             | 
3a8a8 1a8             | clkpin                                          'shared with code patched during init
3a8a8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3a8ac 1a9             | cspin                                           'shared with code patched during init
3a8ac 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3a8b0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3a8b4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3a8b8 1ac 01 00 00 00 | clkdelay        long    1
3a8bc 1ad 00 00 00 00 | regdatabus      long    0
3a8c0 1ae             | 
3a8c0 1ae 10 00 00 00 | deviceaddr      long    $10
3a8c4 1af             | rrcounter
3a8c4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3a8c8 1b0             | 
3a8c8 1b0             | ' jump addresses for the per COG handlers
3a8c8 1b0 20 00 00 00 | cog0_handler    long    cog0
3a8cc 1b1 2C 00 00 00 | cog1_handler    long    cog1
3a8d0 1b2 38 00 00 00 | cog2_handler    long    cog2
3a8d4 1b3 44 00 00 00 | cog3_handler    long    cog3
3a8d8 1b4 50 00 00 00 | cog4_handler    long    cog4
3a8dc 1b5 5C 00 00 00 | cog5_handler    long    cog5
3a8e0 1b6 68 00 00 00 | cog6_handler    long    cog6
3a8e4 1b7 74 00 00 00 | cog7_handler    long    cog7
3a8e8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3a8ec 1b9             | 
3a8ec 1b9             | ' EXECF sequences
3a8ec 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3a8f0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3a8f4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3a8f8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3a8fc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3a900 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3a904 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3a908 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3a908 1c0             | 
3a908 1c0             | 
3a908 1c0             | ' SKIPF sequences
3a908 1c0             | skiptable
3a908 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3a90c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3a910 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3a914 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3a918 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3a91c 1c5 00 00 00 00 | pattern2        long    0
3a920 1c6 00 00 00 00 | pattern3        long    0
3a924 1c7 77 02 00 00 | singlelong      long    %1001110111  
3a928 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3a92c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3a930 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3a934 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3a938 1cc             | 
3a938 1cc             | ' LUT RAM address values
3a938 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3a93c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3a940 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3a944 1cf F6 02 00 00 | noread          long    noread_lut
3a948 1d0             | 
3a948 1d0 00 00 00 00 | id0             long    0
3a94c 1d1 01 00 00 00 | id1             long    1
3a950 1d2 02 00 00 00 | id2             long    2
3a954 1d3 03 00 00 00 | id3             long    3
3a958 1d4 04 00 00 00 | id4             long    4
3a95c 1d5 05 00 00 00 | id5             long    5
3a960 1d6 06 00 00 00 | id6             long    6
3a964 1d7 07 00 00 00 | id7             long    7
3a968 1d8             | 
3a968 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3a968 1d8             | 'and COG updates and need to follow immediately after id0-id7
3a968 1d8 00 00 00 00 | addr1           long    0
3a96c 1d9 00 00 00 00 | hubdata         long    0
3a970 1da 00 00 00 00 | count           long    0
3a974 1db 00 00 00 00 | addr2           long    0
3a978 1dc 00 00 00 00 | total           long    0
3a97c 1dd 00 00 00 00 | offset1         long    0
3a980 1de 00 00 00 00 | offset2         long    0
3a984 1df 00 00 00 00 | link            long    0
3a988 1e0             | 
3a988 1e0             | burstwrite                                      'note shared register use during init
3a988 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3a98c 1e1 00 00 00 00 | id              long    0
3a990 1e2             | 
3a990 1e2 00 00 00 00 | header          long    0
3a994 1e3 00 00 00 00 | trailer         long    0
3a998 1e4 00 00 00 00 | cmdaddr         long    0
3a99c 1e5 00 00 00 00 | request         long    0
3a9a0 1e6 00 00 00 00 | rrlimit         long    0
3a9a4 1e7 00 00 00 00 | pinconfig       long    0
3a9a8 1e8 00 00 00 00 | clks            long    0
3a9ac 1e9 00 00 00 00 | resume          long    0
3a9b0 1ea 00 00 00 00 | orighubsize     long    0
3a9b4 1eb 00 00 00 00 | wrclks          long    0
3a9b8 1ec             | 
3a9b8 1ec 00 00 00 00 | pattern         long    0
3a9bc 1ed 00 00 00 00 | hubscratch      long    0
3a9c0 1ee 00 10 00 00 | val4k           long    4096
3a9c4 1ef             | 
3a9c4 1ef             | ' temporary general purpose regs
3a9c4 1ef 00 00 00 00 | a               long    0
3a9c8 1f0 00 00 00 00 | b               long    0
3a9cc 1f1 00 00 00 00 | c               long    0
3a9d0 1f2 00 00 00 00 | d               long    0
3a9d4 1f3             |                 fit     502
3a9d4 1f3             | 
3a9d4 1f3             |                 fit     502
3a9d4 1f3             | 
3a9d4 1f3             | '..................................................................................................
3a9d4 1f3             | 
3a9d4 1f3             |             orgh
3a9d4                 | 
3a9d4                 | lut_code
3a9d4                 | 'HW init code up to 80 longs
3a9d4                 | 
3a9d4                 | '..................................................................................................
3a9d4                 | ' Memory layout for LUT RAM once operational:
3a9d4                 | '
3a9d4                 | '  LUT RAM address      Usage
3a9d4                 | '  ---------------      ----
3a9d4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3a9d4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3a9d4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3a9d4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3a9d4                 | '
3a9d4                 | ' Also during driver COG startup:
3a9d4                 | ' $230-$24F is used for HW init setup
3a9d4                 | ' $250-$26F is used as temporary vector storage 
3a9d4                 | '..................................................................................................
3a9d4                 | 
3a9d4                 |                 org $230    
3a9d4 230             | 
3a9d4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3a9d4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3a9d8 231 24 16 60 FD |                             pollxfi
3a9dc 232 FF AA 2A FF 
3a9e0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3a9e4 234 28 00 B0 FD |                             call    #sendqspi
3a9e8 235 07 F8 07 FF 
3a9ec 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3a9f0 237 28 00 B0 FD |                             call    #sendspi
3a9f4 238 F8 07 78 FF 
3a9f8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3a9fc 23a 1C 00 B0 FD |                             call    #sendspi
3aa00 23b 7F 78 78 FF 
3aa04 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3aa08 23d 10 00 B0 FD |                             call    #sendspi 
3aa0c 23e 2D 00 64 FD |                             ret
3aa10 23f             | 
3aa10 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3aa14 240 32 0C 64 FD |                             skipf   #%110
3aa18 241 9C EF 03 F6 |                             mov     pb, xsendimm
3aa1c 242             | 
3aa1c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3aa20 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3aa24 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3aa28 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3aa2c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3aa30 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3aa34 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3aa38 249 50 48 63 FD |                             fltl    datapins                'float data bus
3aa3c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3aa40 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3aa44 24c             | 
3aa44 24c 00 00 00 00 
3aa48 24d 00 00 00 00 
3aa4c 24e 00 00 00 00 
3aa50 24f 00 00 00 00 |                 long    0[$270-32-$]
3aa54 250             |                 fit     $270-32  ' keep room for 32 vector longs
3aa54 250             |     
3aa54 250             |                 fit     $270-32  ' keep room for 32 vector longs
3aa54 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3aa54 250             | rw_vect ' PSRAM jump vectors
3aa54 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aa58 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aa5c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3aa60 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3aa64 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3aa68 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3aa6c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3aa70 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3aa74 258             | ro_vect ' R/O PSRAM jump vectors
3aa74 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aa78 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3aa7c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3aa80 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3aa84 25c 00 01 00 00 |                 long    unsupported
3aa88 25d 00 01 00 00 |                 long    unsupported
3aa8c 25e 00 01 00 00 |                 long    unsupported
3aa90 25f 00 01 00 00 |                 long    unsupported
3aa94 260             | ctrl_vect ' Control jump vectors
3aa94 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3aa98 261 00 01 00 00 |                 long    unsupported
3aa9c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3aaa0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3aaa4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3aaa8 265 00 01 00 00 |                 long    unsupported
3aaac 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3aab0 267 3E 01 00 00 |                 long    reconfig 
3aab4 268             | no_vect ' Invalid bank jump vectors
3aab4 268 01 01 00 00 |                 long    invalidbank
3aab8 269 01 01 00 00 |                 long    invalidbank
3aabc 26a 01 01 00 00 |                 long    invalidbank
3aac0 26b 01 01 00 00 |                 long    invalidbank
3aac4 26c 01 01 00 00 |                 long    invalidbank
3aac8 26d 01 01 00 00 |                 long    invalidbank
3aacc 26e 01 01 00 00 |                 long    invalidbank
3aad0 26f 01 01 00 00 |                 long    invalidbank
3aad4 270             |                 fit     $270
3aad4 270             | 
3aad4 270             |                 fit     $270
3aad4 270             | '..................................................................................................
3aad4 270             | ' PSRAM READS
3aad4 270             |                                                             ' a b c d e f
3aad4 270             |                                                             ' B W L B R L  (a) byte read
3aad4 270             |                                                             ' Y O O U E O  (b) word read
3aad4 270             |                                                             ' T R N R S C  (c) long read
3aad4 270             |                                                             ' E D G S U K  (d) new burst read
3aad4 270             |                                                             '       T M E  (e) resumed sub-burst
3aad4 270             |                                                             '         E D  (f) locked sub-burst
3aad4 270             | 
3aad4 270             | 
3aad4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3aad8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3aadc 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3aae0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3aae4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3aae8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3aaec 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3aaf0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3aaf4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3aaf8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3aafc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3ab00 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3ab04 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3ab08 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3ab0c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3ab10 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3ab14 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3ab18 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3ab1c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3ab20 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3ab24 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3ab28 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3ab2c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3ab30 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3ab34 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3ab38 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3ab3c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3ab40 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3ab44 28c             | 
3ab44 28c             |                             ' fall through to read bursts
3ab44 28c             |                         
3ab44 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3ab44 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3ab48 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3ab4c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3ab50 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3ab54 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3ab58 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3ab5c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3ab60 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3ab64 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3ab68 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3ab6c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3ab70 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3ab74 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3ab78 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3ab7c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3ab80 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3ab84 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3ab88 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3ab8c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3ab90 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3ab94 2a0 E8 D1 03 F1 |                             add     clks, clks
3ab98 2a1             | readcommon
3ab98 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3ab9c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3aba0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3aba4 2a4             | 
3aba4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3aba8 2a5 69 C8 63 FD |                             rev     cmdaddr
3abac 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3abb0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3abb4 2a8             | 
3abb4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3abb8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3abbc 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3abbc 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3abc0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3abc4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3abc8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3abcc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3abcc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3abd0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3abd4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3abd8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3abdc 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3abe0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3abe4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3abe4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3abe8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3abec 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3abf0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3abf4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3abf8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3abfc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3ac00 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3ac04 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3ac08 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3ac0c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3ac10 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3ac14 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3ac18 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3ac1c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3ac1c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3ac20 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3ac24 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3ac28 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3ac2c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3ac30 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3ac34 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3ac38 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3ac3c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3ac40 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3ac44 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3ac48 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3ac4c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3ac50 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3ac54 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3ac58 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3ac5c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3ac60 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3ac64 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3ac68 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3ac6c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3ac70 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3ac74 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3ac78 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3ac7c 2da 10 03 90 FD |                             jmp     #writecommon
3ac80 2db             | 
3ac80 2db             | '..................................................................................................
3ac80 2db             | ' Burst continuation testing
3ac80 2db             | 
3ac80 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3ac84 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3ac88 2dd             | continue_read_lut          
3ac88 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3ac8c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3ac90 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3ac94 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3ac98 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3ac9c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3aca0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3aca4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3aca8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3acac 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3acb0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3acb4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3acb8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3acbc 2ea             | 
3acbc 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3acc0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3acc4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3acc8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3accc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3acd0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3acd4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3acd8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3acdc 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3ace0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3ace4 2f4 2A 1C 66 0D |             _ret_           push    #poller
3ace8 2f5             | 
3ace8 2f5             | 
3ace8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3acec 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3acec 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3acf0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3acf4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3acf8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3acfc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3ad00 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3ad04 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3ad08 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3ad0c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3ad10 2ff             | '..................................................................................................
3ad10 2ff             | ' Completion of requests
3ad10 2ff             | 
3ad10 2ff             | complete_rw_lut             
3ad10 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3ad14 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3ad18 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3ad1c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3ad20 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3ad24 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3ad28 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3ad2c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3ad30 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3ad34 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3ad38 309 32 62 64 AD |             if_z            skipf   #%110001
3ad3c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3ad40 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3ad44 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3ad48 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3ad4c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3ad50 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3ad54 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3ad58 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3ad5c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3ad60 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3ad64 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3ad68 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3ad6c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3ad6c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3ad6c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3ad6c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3ad70 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3ad74 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3ad78 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3ad7c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3ad80 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3ad84 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3ad88 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3ad8c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3ad90 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3ad94 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3ad98 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3ad9c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3ada0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3ada4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3ada8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3adac 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3adb0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3adb4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3adb8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3adbc 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3adc0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3adc4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3adc8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3adcc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3add0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3add4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3add8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3addc 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3ade0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3ade4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3ade8 335 DF B7 03 A6 |             if_z            mov     addr2, link
3adec 336 34 FF 9F AD |             if_z            jmp     #checknext
3adf0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3adf4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3adf8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3adfc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3ae00 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3ae04 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3ae08 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3ae0c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3ae10 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3ae14 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3ae18 341             | 
3ae18 341             | '..................................................................................................
3ae18 341             | ' PSRAM WRITES
3ae18 341             |                                                             '  a b c d e f g h
3ae18 341             | 
3ae18 341             |                                                             '  B W L F B R L L (a) byte write(s)
3ae18 341             |                                                             '  Y O O I U E O O (b) word write(s)
3ae18 341             |                                                             '  T R N L R S C C (c) long write(s)
3ae18 341             |                                                             '  E D G L S U K K (d) resumed fill
3ae18 341             |                                                             '          T M E E (e) new burst write
3ae18 341             |                                                             '            E D D (f) resumed burst
3ae18 341             |                                                             '              F B (g) locked fill
3ae18 341             |                                                             '              I U (h) locked burst write
3ae18 341             |                                                             '              L R 
3ae18 341             |                                                             '              L S 
3ae18 341             |                                                             '                T 
3ae18 341             | 
3ae18 341             | w_single                   
3ae18 341             | w_fill_cont           
3ae18 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3ae1c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3ae20 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3ae24 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3ae28 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3ae2c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3ae30 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3ae34 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3ae38 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3ae3c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3ae40 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3ae44 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3ae48 34d             |                ' disable call to r_resume_burst for single longs when z=0
3ae48 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3ae4c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3ae50 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3ae54 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3ae58 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3ae5c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3ae60 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3ae64 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3ae68 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3ae6c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3ae70 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3ae74 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3ae78 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3ae7c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3ae80 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3ae84 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3ae88 35d             |         
3ae88 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3ae88 35d             |             '
3ae88 35d             |             '  At least one of these 3 optional components will be sent
3ae88 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3ae88 35d             |             '     body - N x full longs of data
3ae88 35d             |             '     trailer - last partial long of data
3ae88 35d             |             '
3ae88 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3ae88 35d             |             '
3ae88 35d             |             'Case    Type                           Sends
3ae88 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3ae88 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3ae88 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3ae88 35d             |             ' 4)     Multiple long fill             body only
3ae88 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3ae88 35d             | 
3ae88 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3ae88 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3ae8c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3ae90 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3ae94 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3ae98 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3ae9c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3aea0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3aea4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3aea8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3aeac 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3aeb0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3aeb4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3aeb8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3aebc 36a             |                             
3aebc 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3aec0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3aec4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3aec8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3aecc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3aed0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3aed4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3aed8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3aedc 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3aee0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3aee4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3aee8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3aeec 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3aef0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3aef4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3aef8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3aefc 37a             | 
3aefc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3af00 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3af04 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3af08 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3af0c 37e             |                  
3af0c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3af10 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3af14 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3af18 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3af1c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3af20 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3af24 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3af28 385             | 
3af28 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3af2c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3af30 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3af34 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3af38 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3af3c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3af40 38b             | 
3af40 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3af40 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3af44 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3af48 38d 2A B0 63 FD |                             push    addr1                   'save address
3af4c 38e             | 
3af4c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3af4c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3af50 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3af54 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3af58 391             |             
3af58 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3af5c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3af60 393 2B B0 63 FD |                             pop     addr1                   'restore address
3af64 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3af68 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3af6c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3af70 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3af74 398             | 
3af74 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3af78 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3af7c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3af80 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3af84 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3af88 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3af8c 39e             | 
3af8c 39e             |                             'trailer is done
3af8c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3af90 39f             | 
3af90 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3af94 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3af98 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3af9c 3a2             | 
3af9c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3afa0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3afa4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3afa8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3afac 3a6             |                             
3afac 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3afb0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3afb4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3afb8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3afbc 3aa             |                                                          
3afbc 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3afc0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3afc4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3afc8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3afcc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3afd0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3afd4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3afd8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3afdc 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3afe0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3afe4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3afe8 3b5             |  
3afe8 3b5 59 52 63 FD |                             drvh    cspin
3afec 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3aff0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3aff4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3aff8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3affc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3b000 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3b004 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3b008 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3b00c 3be EA E5 03 F6 |                             mov     d, orighubsize
3b010 3bf EF E5 63 F0 |                             shl     d, a
3b014 3c0 F2 E3 83 F1 |                             sub     c, d
3b018 3c1 DD E3 03 F1 |                             add     c, offset1
3b01c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3b020 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3b024 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3b028 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3b02c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3b030 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3b034 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3b038 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3b03c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3b040 3cb BB D3 03 F6 |                             mov     resume, restorefill
3b044 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3b048 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3b04c 3ce 6C FC BF CD |             if_c            call    #yield
3b050 3cf 2D 00 64 FD |                             ret
3b054 3d0             |                            
3b054 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3b054 3d0             |                       '     rczl    pa                      'rotate left into address offset
3b054 3d0             |                       '     rczl    c wcz                   'restore count and flags
3b054 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3b058 3d1 02 EC 67 F0 |                             shl     pa, #2
3b05c 3d2 28 06 64 AD |             if_z            setq    #3
3b060 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3b064 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3b068 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3b06c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3b070 3d7             | 
3b070 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3b074 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3b078 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3b07c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3b080 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3b084 3dc             |                 fit 1024-32
3b084 3dc             |         
3b084 3dc             | 
3b084 3dc             | '..................................................................................................
3b084 3dc             | 
3b084 3dc             |                 fit 1024-32
3b084 3dc 00 00 00 00 
3b088 3dd 00 00 00 00 
3b08c 3de 00 00 00 00 
3b090 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3b094 3e0             |                 org 1024-32
3b094 000             | 
3b094 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3b094 000 00 00 00 00 |                 long $0000
3b098 001 11 11 00 00 |                 long $1111
3b09c 002 22 22 00 00 |                 long $2222
3b0a0 003 33 33 00 00 |                 long $3333
3b0a4 004 44 44 00 00 |                 long $4444
3b0a8 005 55 55 00 00 |                 long $5555
3b0ac 006 66 66 00 00 |                 long $6666
3b0b0 007 77 77 00 00 |                 long $7777
3b0b4 008 88 88 00 00 |                 long $8888
3b0b8 009 99 99 00 00 |                 long $9999
3b0bc 00a AA AA 00 00 |                 long $aaaa
3b0c0 00b BB BB 00 00 |                 long $bbbb
3b0c4 00c CC CC 00 00 |                 long $cccc
3b0c8 00d DD DD 00 00 |                 long $dddd
3b0cc 00e EE EE 00 00 |                 long $eeee
3b0d0 00f FF FF 00 00 |                 long $ffff
3b0d4 010             | 
3b0d4 010             | 'masks
3b0d4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3b0d8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3b0dc 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3b0e0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3b0e4 014             | 
3b0e4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3b0e8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3b0ec 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3b0f0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3b0f4 018             | 
3b0f4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3b0f8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3b0fc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3b100 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3b104 01c             | 
3b104 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3b108 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3b10c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3b110 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3b114 020             |         fit 1024
3b114 020             | 
3b114 020             |         fit 1024
3b114 020             | 
3b114 020             | '--------------------------------------------------------------------------------------------------
3b114 020             |         orgh
3b114                 | 
3b114                 | gfxexpansion
3b114                 |                             'simple line drawing graphics expansion of memory driver
3b114                 |                             'jmp     #donerepeats                'just return for now
3b114                 | 
3b114     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3b118     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3b11c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3b120     DD E1 03 F6 |                             mov     b, offset1              'get error term
3b124     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3b128     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3b12c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3b130     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3b134     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3b138     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3b13c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3b140     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3b144     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3b148     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3b14c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3b150     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3b154     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3b158     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3b15c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3b160     DC E5 33 F9 |                             getword d, total, #0            'get line width
3b164     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3b168     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3b16c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3b170     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3b174     C3 03 80 FD |                             jmp     #readmask               'continue filling
3b178                 | 	alignl
3b178                 | _usbnew_spin2_dat_
3b178                 |                 org     $000
3b178 000             | 
3b178 000             | usb_host_start
3b178 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3b17c 001             | 
3b17c 001 03 00 00 FF 
3b180 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3b184 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3b188 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3b18c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b190 006 29 70 63 FD |                 setq2   htmp
3b194 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3b198 008             | 
3b198 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3b19c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3b1a0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3b1a4 00b             | 
3b1a4 00b             | '------------------------------------------------------------------------------
3b1a4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3b1a4 00b             | ' special because the receiving function must not respond with either STALL or
3b1a4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3b1a4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3b1a4 00b             | ' corrupt packet, it must ignore the transaction
3b1a4 00b             | '------------------------------------------------------------------------------
3b1a4 00b             | ' On entry:
3b1a4 00b             | '   PTRA - start address of the SETUP data struct.
3b1a4 00b             | ' On exit:
3b1a4 00b             | '   retval - PID_ACK on success, otherwise error code.
3b1a4 00b             | '------------------------------------------------------------------------------
3b1a4 00b             | txn_setup
3b1a4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3b1a8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3b1ac 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3b1b0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3b1b4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3b1b8 010             | .setup
3b1b8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3b1bc 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b1c0 012 2D 00 64 AD |         if_z    ret
3b1c4 013 7C 0B B0 FD |                 call    #retry_wait
3b1c8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b1cc 015 2D 00 64 AD |         if_z    ret
3b1d0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3b1d4 017 E0 FF 9F FD |                 jmp     #.setup
3b1d8 018             | 
3b1d8 018             | '------------------------------------------------------------------------------
3b1d8 018             | ' IN/INTERRUPT transaction.
3b1d8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3b1d8 018             | '------------------------------------------------------------------------------
3b1d8 018             | ' On entry:
3b1d8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3b1d8 018             | '     CRC(b19..23).
3b1d8 018             | ' On exit:
3b1d8 018             | '------------------------------------------------------------------------------
3b1d8 018             | txn_in
3b1d8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b1dc 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3b1e0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3b1e4 01b             | 
3b1e4 01b             |                 ' Fall through to urx_packet
3b1e4 01b             | 
3b1e4 01b             | '------------------------------------------------------------------------------
3b1e4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3b1e4 01b             | ' received are handshakes and IN DATAx.
3b1e4 01b             | '------------------------------------------------------------------------------
3b1e4 01b             | ' On entry:
3b1e4 01b             | ' On exit:
3b1e4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3b1e4 01b             | '     returned.
3b1e4 01b             | '------------------------------------------------------------------------------
3b1e4 01b             | urx_packet
3b1e4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3b1e8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b1ec 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3b1f0 01e 1A 92 63 FD |                 getct   hct2
3b1f4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3b1f8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3b1fc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3b200 022             | .wait_sop
3b200 022 22 A7 8A FA |                 rdpin   urx, dm
3b204 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b208 024 08 00 90 CD |         if_c    jmp     #.get_pid
3b20c 025 FC 25 CC FB |                 jnct2   #.wait_sop
3b210 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3b214 027             | .get_pid
3b214 027 28 02 B0 FD |                 call    #urx_next
3b218 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3b21c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3b220 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3b224 02b             | .chk_pid
3b224 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b228 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3b22c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3b230 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3b234 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3b238 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3b23c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3b240 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3b244 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3b248 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3b24c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3b250 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3b254 037             | .ack_resend
3b254 037 22 A7 82 FA |                 rqpin   urx, dm
3b258 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b25c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3b260 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b264 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3b268 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3b26c 03d             | .chk_eop
3b26c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b270 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3b274 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3b278 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3b27c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3b280 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b284 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3b288 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3b28c 045 2D 00 64 FD |                 ret
3b290 046             | .idle
3b290 046 22 A7 82 FA |                 rqpin   urx, dm
3b294 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b298 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3b29c 049 2D 00 64 FD |                 ret
3b2a0 04a             | 
3b2a0 04a             | '------------------------------------------------------------------------------
3b2a0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3b2a0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3b2a0 04a             | ' if one is required.
3b2a0 04a             | '------------------------------------------------------------------------------
3b2a0 04a             | ' On entry:
3b2a0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3b2a0 04a             | ' On exit:
3b2a0 04a             | '------------------------------------------------------------------------------
3b2a0 04a             | utx_token
3b2a0 04a 22 A7 82 FA |                 rqpin   urx, dm
3b2a4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b2a8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3b2ac 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b2b0 04e 34 0D B0 CD |         if_c    call    #utx_pre
3b2b4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b2b8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3b2bc 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3b2c0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3b2c4 053             | .next_byte
3b2c4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3b2c8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3b2cc 055             | .wait
3b2cc 055 40 46 72 FD |                 testp   dp                      wc
3b2d0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b2d4 057 23 03 08 FC |                 akpin   dp
3b2d8 058 22 A5 22 FC |                 wypin   utx, dm
3b2dc 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3b2e0 05a             | 
3b2e0 05a             | '------------------------------------------------------------------------------
3b2e0 05a             | ' SETUP/OUT/INTERRUPT transaction.
3b2e0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3b2e0 05a             | '------------------------------------------------------------------------------
3b2e0 05a             | ' On entry:
3b2e0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3b2e0 05a             | '     CRC(b19..23).
3b2e0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3b2e0 05a             | '   pkt_data - count of DATAx payload bytes to send.
3b2e0 05a             | ' On exit:
3b2e0 05a             | '------------------------------------------------------------------------------
3b2e0 05a             | txn_out
3b2e0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3b2e4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3b2e8 05c 00 00 C0 FF 
3b2ec 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3b2f0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3b2f4 05f             | 
3b2f4 05f             |                 ' Fall through to utx_data
3b2f4 05f             | 
3b2f4 05f             | '------------------------------------------------------------------------------
3b2f4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3b2f4 05f             | ' calculated while the data byte is being shifted out. Since data stage
3b2f4 05f             | ' success/fail is not determined until the status stage of the transaction,
3b2f4 05f             | ' this routine is only concerned about the current DATAx packet.
3b2f4 05f             | '------------------------------------------------------------------------------
3b2f4 05f             | ' On entry:
3b2f4 05f             | '   PTRA - hub start address of the data to read.
3b2f4 05f             | '   pkt_cnt - data payload size.
3b2f4 05f             | ' On exit:
3b2f4 05f             | '------------------------------------------------------------------------------
3b2f4 05f             | utx_data
3b2f4 05f 22 A7 82 FA |                 rqpin   urx, dm
3b2f8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b2fc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3b300 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b304 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3b308 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b30c 065 D8 0C B0 CD |         if_c    call    #utx_pre
3b310 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b314 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3b318 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b31c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3b320 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3b324 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3b328 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3b32c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3b330 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3b334 06f             | .read_byte
3b334 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3b338 070 F0 00 B0 FD |                 call    #utx_byte
3b33c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3b340 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3b344 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b348 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b34c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3b350 076             | .send_crc
3b350 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3b354 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3b358 078 D0 00 B0 FD |                 call    #utx_byte
3b35c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3b360 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3b364 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3b368 07c             | 
3b368 07c             | '------------------------------------------------------------------------------
3b368 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3b368 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3b368 07c             | ' expects that the packet includes at least the CRC word.
3b368 07c             | '
3b368 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3b368 07c             | ' was requested, which makes it difficult to determine where the data stops
3b368 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3b368 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3b368 07c             | ' USB-16 expected residual value of 0xB001.
3b368 07c             | '
3b368 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3b368 07c             | ' so the caller can verify IN success before writing the data to its final
3b368 07c             | ' destination.
3b368 07c             | '------------------------------------------------------------------------------
3b368 07c             | ' On entry:
3b368 07c             | '   pkt_data - max byte count expected to be in the packet.
3b368 07c             | '   newb_flg - signals new byte ready when toggled.
3b368 07c             | ' On exit:
3b368 07c             | '   pkt_cnt - actual number of bytes read.
3b368 07c             | '------------------------------------------------------------------------------
3b368 07c             | urx_data
3b368 07c F7 75 03 F6 |                 mov     htmp2, pb
3b36c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3b370 07e 00 00 C0 FF 
3b374 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3b378 080 BA EF 03 F6 |                 mov     pb, htmp2
3b37c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3b380 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3b384 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3b388 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3b38c 085             | .wait_byte
3b38c 085             | ' In-line rx for max speed
3b38c 085 22 A7 82 FA |                 rqpin   urx, dm
3b390 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b394 087 53 A5 02 F5 |                 and     utx, urx
3b398 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b39c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b3a0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3b3a4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3b3a8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3b3ac 08d DC FF 9F FD |                 jmp     #.wait_byte
3b3b0 08e             | .get_byte
3b3b0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3b3b4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3b3b8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3b3bc 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3b3c0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3b3c4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3b3c8 094             | .end_crc
3b3c8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3b3cc 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3b3d0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3b3d4 097 2D 00 64 1D |         if_a    ret
3b3d8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3b3d8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3b3d8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3b3d8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3b3d8 098 22 A7 82 FA |                 rqpin   urx, dm
3b3dc 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3b3e0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3b3e4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3b3e4 09b             | .chk_crc
3b3e4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3b3e8 09c 58 00 00 FF 
3b3ec 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3b3f0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3b3f4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3b3f8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3b3fc 0a1 34 09 B0 FD |                 call    #poll_waitx
3b400 0a2             | 
3b400 0a2             |                 ' Fall through to utx_handshake
3b400 0a2             | 
3b400 0a2             | '------------------------------------------------------------------------------
3b400 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3b400 0a2             | ' the appropriate IP delay has been inserted.
3b400 0a2             | '------------------------------------------------------------------------------
3b400 0a2             | ' On entry:
3b400 0a2             | '   retval - handshake PID to send.
3b400 0a2             | ' On exit:
3b400 0a2             | '   retval unchanged.
3b400 0a2             | '------------------------------------------------------------------------------
3b400 0a2             | utx_handshake
3b400 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3b404 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3b408 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3b40c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3b410 0a6 5F A5 02 F6 |                 mov     utx, retval
3b414 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3b418 0a8             | .idle
3b418 0a8 22 A7 82 FA |                 rqpin   urx, dm
3b41c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3b420 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3b424 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3b428 0ac 08 09 90 FD |                 jmp     #poll_waitx
3b42c 0ad             | 
3b42c 0ad             | '------------------------------------------------------------------------------
3b42c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3b42c 0ad             | '------------------------------------------------------------------------------
3b42c 0ad             | ' On entry:
3b42c 0ad             | '   utx - byte to transmit.
3b42c 0ad             | ' On exit:
3b42c 0ad             | '------------------------------------------------------------------------------
3b42c 0ad             | utx_byte
3b42c 0ad 40 46 72 FD |                 testp   dp                      wc
3b430 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3b434 0af 23 03 08 FC |                 akpin   dp
3b438 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3b43c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3b440 0b2             | 
3b440 0b2             | '------------------------------------------------------------------------------
3b440 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3b440 0b2             | '------------------------------------------------------------------------------
3b440 0b2             | ' On entry:
3b440 0b2             | ' On exit:
3b440 0b2             | '   retval - the byte read.
3b440 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3b440 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3b440 0b2             | '     received.
3b440 0b2             | '------------------------------------------------------------------------------
3b440 0b2             | urx_next
3b440 0b2 22 A7 8A FA |                 rdpin   urx, dm
3b444 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3b448 0b4 53 A5 02 F5 |                 and     utx, urx
3b44c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3b450 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3b454 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3b458 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3b45c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3b460 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3b464 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3b468 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3b46c 0bd 2D 00 64 FD |                 ret
3b470 0be             | 
3b470 0be             | '------------------------------------------------------------------------------
3b470 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3b470 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3b470 0be             | ' length, and the PID is not included in the CRC calculation:
3b470 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3b470 0be             | '  CRC5  ENDP ADDRESS PID
3b470 0be             | ' %00000_1111_1111111_xxxxxxxx
3b470 0be             | '------------------------------------------------------------------------------
3b470 0be             | ' On entry:
3b470 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3b470 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3b470 0be             | ' On exit:
3b470 0be             | '   ep_addr_pid - CRC value appended to the packet.
3b470 0be             | '------------------------------------------------------------------------------
3b470 0be             | calc_crc5
3b470 0be FF 03 00 FF 
3b474 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3b478 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3b47c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3b480 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3b484 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3b488 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3b48c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3b490 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3b494 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3b498 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3b49c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3b4a0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b4a4 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3b4a8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3b4ac 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3b4b0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3b4b4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3b4b8 0d0             | 
3b4b8 0d0             | '------------------------------------------------------------------------------
3b4b8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3b4b8 0d0             | '------------------------------------------------------------------------------
3b4b8 0d0             | isr1_fsframe
3b4b8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3b4bc 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b4c0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b4c4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b4c8 0d4             | .wait
3b4c8 0d4 40 46 72 FD |                 testp   dp                      wc
3b4cc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b4d0 0d6 23 03 08 FC |                 akpin   dp
3b4d4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3b4d8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3b4dc 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3b4e0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3b4e4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3b4e8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3b4ec 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3b4f0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3b4f4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3b4f8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3b4fc 0e1 2C FF BF FD |                 call    #utx_byte
3b500 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3b504 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3b508 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3b50c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3b510 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3b514 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3b518 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3b51c 0e9 5B A5 42 F5 |                 or      utx, icrc
3b520 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3b524 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3b528 0ec 20 00 90 FD |                 jmp     #isr1_wait
3b52c 0ed             | isr1_lsframe
3b52c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3b530 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b534 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b538 0f0             | .wait
3b538 0f0 40 46 72 FD |                 testp   dp                      wc
3b53c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3b540 0f2 23 03 08 FC |                 akpin   dp
3b544 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3b548 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3b54c 0f5             | isr1_wait
3b54c 0f5 22 A5 82 FA |                 rqpin   utx, dm
3b550 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3b554 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3b558 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3b55c 0f9 03 00 00 FF 
3b560 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3b564 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3b568 0fc F5 FF 3B FB |                 reti1
3b56c 0fd             | 
3b56c 0fd             | '------------------------------------------------------------------------------
3b56c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3b56c 0fd             | ' transaction will complete before the next frame is triggered.
3b56c 0fd             | '------------------------------------------------------------------------------
3b56c 0fd             | ' On entry:
3b56c 0fd             | ' On exit:
3b56c 0fd             | '------------------------------------------------------------------------------
3b56c 0fd             | wait_txn_ok
3b56c 0fd 1A 74 63 FD |                 getct   htmp2
3b570 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3b574 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b578 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3b57c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3b580 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3b584 103 2D 00 64 FD |                 ret
3b588 104             | 
3b588 104             | '------------------------------------------------------------------------------
3b588 104             | ' A device connection was detected, or a bus reset was requested by the USB
3b588 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3b588 104             | ' and perform a reset sequence prior to device enumeration.
3b588 104             | '------------------------------------------------------------------------------
3b588 104             | dev_reset
3b588 104 22 A7 82 FA |                 rqpin   urx, dm
3b58c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3b590 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3b594 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3b598 108             | reset
3b598 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3b59c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3b5a0 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3b5a4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3b5a8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3b5ac 10d 1A 92 62 FD |                 getct   iframe_ct_base
3b5b0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3b5b4 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3b5b8 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3b5bc 111 24 70 07 F1 |                 add     htmp, #36
3b5c0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3b5c4 113             | .framewait
3b5c4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3b5c8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3b5cc 115 2D 00 64 FD |                 ret
3b5d0 116             | 
3b5d0 116             | '------------------------------------------------------------------------------
3b5d0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3b5d0 116             | '------------------------------------------------------------------------------
3b5d0 116             | ' On entry:
3b5d0 116             | '   PTRA - source address.
3b5d0 116             | '   PB - destination address.
3b5d0 116             | '   hr0 - length of copy, in bytes.
3b5d0 116             | ' On exit:
3b5d0 116             | '------------------------------------------------------------------------------
3b5d0 116             | hmemcpy
3b5d0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3b5d4 117 F7 71 43 FC |                 wrbyte  htmp, pb
3b5d8 118 01 EE 07 F1 |                 add     pb, #1
3b5dc 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3b5e0 11a             | 
3b5e0 11a             | '------------------------------------------------------------------------------
3b5e0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3b5e0 11a             | ' loop until the errant device is disconnected.
3b5e0 11a             | '------------------------------------------------------------------------------
3b5e0 11a             | ' On entry:
3b5e0 11a             | ' On exit:
3b5e0 11a             | '------------------------------------------------------------------------------
3b5e0 11a             | host_error
3b5e0 11a             |           if ERROR_LED >= 0
3b5e0 11a             |           end
3b5e0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3b5e4 11b             | 
3b5e4 11b             | '------------------------------------------------------------------------------
3b5e4 11b             | ' Get HID descriptor buffer for current port
3b5e4 11b             | '------------------------------------------------------------------------------
3b5e4 11b             | ' On entry:
3b5e4 11b             | ' On exit:
3b5e4 11b             | '   PB - HID descriptor buffer pointer
3b5e4 11b             | '------------------------------------------------------------------------------
3b5e4 11b             | get_hid_descr_buffer
3b5e4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3b5e8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3b5ec 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3b5f0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3b5f4 11f             | 
3b5f4 11f             | 
3b5f4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3b5f8 120             | 
3b5f8 120             | ' USB commands and error codes
3b5f8 120 00 00 00 00 | cmd_data        long    0
3b5fc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3b600 122             | 
3b600 122             | ' Parameters block assigned at cog startup
3b600 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3b604 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3b608 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3b60c 125             | if ACTIVITY_LED >= 0
3b60c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3b60c 125             | end
3b60c 125             | if ERROR_LED >= 0
3b60c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3b60c 125             | end
3b60c 125 00 00 00 00 | hid_descr_p     long    0
3b610 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3b610 126             | 'hkbd_report_p   long    0
3b610 126 00 00 00 00 | hub_descr_p     long    0
3b614 127 00 00 00 00 | urx_buff_p      long    0
3b618 128 00 00 00 00 | dev_desc_buff_p long    0
3b61c 129 00 00 00 00 | con_desc_buff_p long    0
3b620 12a 00 00 00 00 | cache_start_p   long    0
3b624 12b 00 00 00 00 | cache_end_p     long    0
3b628 12c             | if EMUPAD_MAX_PLAYER > 0
3b628 12c             | emupad_out_ptr  long    0
3b628 12c             | end
3b628 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3b62c 12d             | 
3b62c 12d             | hdev_init_start
3b62c 12d             | hdev_port       res     1
3b62c 12d             | hdev_port       res     1
3b62c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3b62c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3b62c 12d             | kbm_next_datax  res     1
3b62c 12d             | kbm_next_datax  res     1
3b62c 12d             | hub_intf_num    res     1
3b62c 12d             | hub_intf_num    res     1
3b62c 12d             | hub_next_datax  res     1
3b62c 12d             | hub_next_datax  res     1
3b62c 12d             | hub_status_chg  res     1
3b62c 12d             | hub_status_chg  res     1
3b62c 12d             | hub_port_status res     1
3b62c 12d             | hub_port_status res     1
3b62c 12d             | if HAVE_MOUSE
3b62c 12d             | ms_intf_num     res     1
3b62c 12d             | ms_intf_num     res     1
3b62c 12d             | ms_in_max_pkt   res     1
3b62c 12d             | ms_in_max_pkt   res     1
3b62c 12d             | end
3b62c 12d             | kb_intf_num     res     1
3b62c 12d             | kb_intf_num     res     1
3b62c 12d             | kb_interval     res     1
3b62c 12d             | kb_interval     res     1
3b62c 12d             | kb_in_max_pkt   res     1
3b62c 12d             | kb_in_max_pkt   res     1
3b62c 12d             | kb_max_index    res     1
3b62c 12d             | kb_max_index    res     1
3b62c 12d             | kb_led_states   res     1
3b62c 12d             | kb_led_states   res     1
3b62c 12d             | gp_intf_num     res     1
3b62c 12d             | gp_intf_num     res     1
3b62c 12d             | gp_interval     res     1
3b62c 12d             | gp_interval     res     1
3b62c 12d             | gp_max_index    res     1
3b62c 12d             | gp_max_index    res     1
3b62c 12d             | gp_descr_len    res     1+MAX_DEVICES
3b62c 12d             | gp_descr_len    res     1+MAX_DEVICES
3b62c 12d             | hdev_init_end
3b62c 12d             | 
3b62c 12d             | ' Initialized at cog startup:
3b62c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3b62c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3b62c 12d             | iframe_ct_new   res     1
3b62c 12d             | iframe_ct_new   res     1
3b62c 12d             | iframe_ct_base  res     1
3b62c 12d             | iframe_ct_base  res     1
3b62c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3b62c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3b62c 12d             | 
3b62c 12d             | ' This register block is reset to zero when a USB device connects
3b62c 12d             | hreg_init_start
3b62c 12d             | hstatus         res     1         ' Host status flags
3b62c 12d             | hstatus         res     1         ' Host status flags
3b62c 12d             | hctwait         res     1         ' Poll-based wait clocks
3b62c 12d             | hctwait         res     1         ' Poll-based wait clocks
3b62c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3b62c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3b62c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3b62c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3b62c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3b62c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3b62c 12d             | xfer_retry      res     1         ' Control transfer retry count
3b62c 12d             | xfer_retry      res     1         ' Control transfer retry count
3b62c 12d             | retry           res     1         ' Transaction retry count
3b62c 12d             | retry           res     1         ' Transaction retry count
3b62c 12d             | utx             res     1         ' Byte to transmit on USB
3b62c 12d             | utx             res     1         ' Byte to transmit on USB
3b62c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3b62c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3b62c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3b62c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3b62c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3b62c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3b62c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3b62c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3b62c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3b62c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3b62c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3b62c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3b62c 12d             | frame           res     1         ' USB 1ms frame counter value
3b62c 12d             | frame           res     1         ' USB 1ms frame counter value
3b62c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3b62c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3b62c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3b62c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3b62c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3b62c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3b62c 12d             | crc             res     1         ' Used for CRC16 calculation
3b62c 12d             | crc             res     1         ' Used for CRC16 calculation
3b62c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3b62c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3b62c 12d             | retval          res     1         ' Global success/fail return parameter
3b62c 12d             | retval          res     1         ' Global success/fail return parameter
3b62c 12d             | context_retval  res     1         ' Operation contextual return parameter
3b62c 12d             | context_retval  res     1         ' Operation contextual return parameter
3b62c 12d             | ' Device stuff
3b62c 12d             | hdev_id         res     1+MAX_DEVICES
3b62c 12d             | hdev_id         res     1+MAX_DEVICES
3b62c 12d             | hdev_bcd        res     1
3b62c 12d             | hdev_bcd        res     1
3b62c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3b62c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3b62c 12d             | ' Keyboard/mouse stuff
3b62c 12d             | hctrl_ep_addr   res     1
3b62c 12d             | hctrl_ep_addr   res     1
3b62c 12d             | hctrl_max_pkt   res     1
3b62c 12d             | hctrl_max_pkt   res     1
3b62c 12d             | hconfig_base    res     1
3b62c 12d             | hconfig_base    res     1
3b62c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3b62c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3b62c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3b62c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3b62c 12d             | hdev_class      res     1
3b62c 12d             | hdev_class      res     1
3b62c 12d             | hdev_subclass   res     1
3b62c 12d             | hdev_subclass   res     1
3b62c 12d             | hdev_protocol   res     1
3b62c 12d             | hdev_protocol   res     1
3b62c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3b62c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3b62c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3b62c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3b62c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3b62c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3b62c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3b62c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3b62c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3b62c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3b62c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3b62c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3b62c 12d             | if HAVE_MOUSE
3b62c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3b62c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3b62c 12d             | end
3b62c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3b62c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3b62c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3b62c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3b62c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3b62c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3b62c 12d             | hdev_out_addr   res     1
3b62c 12d             | hdev_out_addr   res     1
3b62c 12d             | 
3b62c 12d             | if EMUPAD_MAX_PLAYER > 0
3b62c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3b62c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3b62c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3b62c 12d             | end
3b62c 12d             | 
3b62c 12d             | hreg_init_end
3b62c 12d             | 
3b62c 12d             | hidr_start
3b62c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3b62c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3b62c 12d             | hidr_flags      res     1
3b62c 12d             | hidr_flags      res     1
3b62c 12d             | hidr_axis       res     3
3b62c 12d             | hidr_axis       res     3
3b62c 12d             | hidr_buttons    res     1
3b62c 12d             | hidr_buttons    res     1
3b62c 12d             | hidr_hats       res     1
3b62c 12d             | hidr_hats       res     1
3b62c 12d             | '' Above are actually useful values, 6 longs
3b62c 12d             | hidr_id         res     1
3b62c 12d             | hidr_id         res     1
3b62c 12d             | hidr_state      res     1
3b62c 12d             | hidr_state      res     1
3b62c 12d             | hidr_size       res     1
3b62c 12d             | hidr_size       res     1
3b62c 12d             | hidr_count      res     1
3b62c 12d             | hidr_count      res     1
3b62c 12d             | hidr_offset     res     1
3b62c 12d             | hidr_offset     res     1
3b62c 12d             | hidr_usage_idx  res     1
3b62c 12d             | hidr_usage_idx  res     1
3b62c 12d             | hidr_lminmax    res     1
3b62c 12d             | hidr_lminmax    res     1
3b62c 12d             | hidr_pminmax    res     1
3b62c 12d             | hidr_pminmax    res     1
3b62c 12d             | hidr_type       res     1
3b62c 12d             | hidr_type       res     1
3b62c 12d             | hidr_end
3b62c 12d             | 
3b62c 12d             | ' Variables dependent on the system freqency
3b62c 12d             | _var_64_lower_  res     1
3b62c 12d             | _var_64_lower_  res     1
3b62c 12d             | _var_64_upper_  res     1
3b62c 12d             | _var_64_upper_  res     1
3b62c 12d             | _12Mbps_        res     1
3b62c 12d             | _12Mbps_        res     1
3b62c 12d             | _1_5Mbps_       res     1
3b62c 12d             | _1_5Mbps_       res     1
3b62c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3b62c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3b62c 12d             | _1us_           res     1         ' 1us
3b62c 12d             | _1us_           res     1         ' 1us
3b62c 12d             | _10us_          res     1         ' 10us
3b62c 12d             | _10us_          res     1         ' 10us
3b62c 12d             | _33us_          res     1         ' 33us
3b62c 12d             | _33us_          res     1         ' 33us
3b62c 12d             | _txn_err_       res     1         ' 250us
3b62c 12d             | _txn_err_       res     1         ' 250us
3b62c 12d             | _500us_         res     1         ' 500us
3b62c 12d             | _500us_         res     1         ' 500us
3b62c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3b62c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3b62c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3b62c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3b62c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3b62c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3b62c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3b62c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3b62c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3b62c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3b62c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3b62c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3b62c 12d             | _preamble_wait_ res     1
3b62c 12d             | _preamble_wait_ res     1
3b62c 12d             | _1ms_           res     1         ' 1ms
3b62c 12d             | _1ms_           res     1         ' 1ms
3b62c 12d             | _2ms_           res     1         ' 2ms
3b62c 12d             | _2ms_           res     1         ' 2ms
3b62c 12d             | _suspend_wait_  res     1         ' 3ms
3b62c 12d             | _suspend_wait_  res     1         ' 3ms
3b62c 12d             | _4ms_           res     1         ' 4ms
3b62c 12d             | _4ms_           res     1         ' 4ms
3b62c 12d             | _xfer_wait_     res     1         ' 5ms
3b62c 12d             | _xfer_wait_     res     1         ' 5ms
3b62c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3b62c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3b62c 12d             | _reset_hold_    res     1         ' 15ms
3b62c 12d             | _reset_hold_    res     1         ' 15ms
3b62c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3b62c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3b62c 12d             | _21ms_          res     1         ' 21ms
3b62c 12d             | _21ms_          res     1         ' 21ms
3b62c 12d             | _100ms_         res     1         ' 100ms
3b62c 12d             | _100ms_         res     1         ' 100ms
3b62c 12d             | _500ms_         res     1         ' 500ms
3b62c 12d             | _500ms_         res     1         ' 500ms
3b62c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3b62c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3b62c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3b62c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3b62c 12d             | '------------------------------------------------------------------------------
3b62c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3b62c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3b62c 12d             | _usb_d_ls_nco_  res     1
3b62c 12d             | _usb_d_ls_nco_  res     1
3b62c 12d             | _usb_h_fs_nco_  res     1
3b62c 12d             | _usb_h_fs_nco_  res     1
3b62c 12d             | _usb_d_fs_nco_  res     1
3b62c 12d             | _usb_d_fs_nco_  res     1
3b62c 12d             | '------------------------------------------------------------------------------
3b62c 12d             | ' Scratch registers
3b62c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3b62c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3b62c 12d             | htmp1           res     1
3b62c 12d             | htmp1           res     1
3b62c 12d             | htmp2           res     1
3b62c 12d             | htmp2           res     1
3b62c 12d             | htmp3           res     1
3b62c 12d             | htmp3           res     1
3b62c 12d             | hrep            res     1         ' Repeat count
3b62c 12d             | hrep            res     1         ' Repeat count
3b62c 12d             | hsave0          res     1         ' Subroutine parameter saves
3b62c 12d             | hsave0          res     1         ' Subroutine parameter saves
3b62c 12d             | hsave1          res     1
3b62c 12d             | hsave1          res     1
3b62c 12d             | hsave2          res     1
3b62c 12d             | hsave2          res     1
3b62c 12d             | isrtmp1         res     1
3b62c 12d             | isrtmp1         res     1
3b62c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3b62c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3b62c 12d             | hr0             res     1         ' Multi-purpose registers
3b62c 12d             | hr0             res     1         ' Multi-purpose registers
3b62c 12d             | hr1             res     1
3b62c 12d             | hr1             res     1
3b62c 12d             | hr2             res     1
3b62c 12d             | hr2             res     1
3b62c 12d             | hr3             res     1
3b62c 12d             | hr3             res     1
3b62c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3b62c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3b62c 12d             | hpar2           res     1
3b62c 12d             | hpar2           res     1
3b62c 12d             | hpar3           res     1
3b62c 12d             | hpar3           res     1
3b62c 12d             | hct2            res     1         ' Function response bus turn-around timer
3b62c 12d             | hct2            res     1         ' Function response bus turn-around timer
3b62c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3b62c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3b62c 12d             | mod_cnt         res     1         ' Used in idle loops
3b62c 12d             | mod_cnt         res     1         ' Used in idle loops
3b62c 12d             |                 fit     $1F0
3b62c 12d             |                 org     $200
3b62c 200             | hlut_start
3b62c 200             | 
3b62c 200             | '------------------------------------------------------------------------------
3b62c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3b62c 200             | ' settings to startup defaults.
3b62c 200             | '------------------------------------------------------------------------------
3b62c 200             | ' On entry:
3b62c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3b62c 200             | '------------------------------------------------------------------------------
3b62c 200             | set_speed_full
3b62c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3b630 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3b634 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3b638 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3b63c 204             | '                ret                             wcz     ' Restore caller flags on exit
3b63c 204             | 
3b63c 204             | '------------------------------------------------------------------------------
3b63c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3b63c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3b63c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3b63c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3b63c 204             | ' putting the smart pins into reset.
3b63c 204             | '------------------------------------------------------------------------------
3b63c 204             | ' On entry:
3b63c 204             | ' On exit: CZ flags restored to caller states
3b63c 204             | '------------------------------------------------------------------------------
3b63c 204             | set_speed_low
3b63c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3b640 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3b644 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3b648 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3b64c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3b650 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3b654 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3b658 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3b65c 20c             | 
3b65c 20c             | '------------------------------------------------------------------------------
3b65c 20c             | ' Perform configuration stuff required when a device intitially connects.
3b65c 20c             | '------------------------------------------------------------------------------
3b65c 20c             | ' On entry:
3b65c 20c             | ' On exit:
3b65c 20c             | '------------------------------------------------------------------------------
3b65c 20c             | on_connect
3b65c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3b660 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3b664 20e             | .retry
3b664 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3b668 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3b66c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3b670 211 00 08 00 FF 
3b674 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3b678 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3b67c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b680 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3b684 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3b688 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3b68c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b690 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3b694 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3b698 21b 4C 03 B0 FD |                 call    #poll_waitx
3b69c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3b6a0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3b6a4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3b6a8 21f B8 FF 9F FD |                 jmp     #.retry
3b6ac 220             | .get_dev_desc
3b6ac 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3b6b0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3b6b4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3b6b8 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3b6bc 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3b6c0 225 88 FB BF FD |                 call    #reset
3b6c4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3b6c8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b6cc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3b6d0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3b6d4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b6d8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3b6dc 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3b6e0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3b6e4 22e 04 00 00 FF 
3b6e8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3b6ec 230 34 FA BF FD |                 call    #calc_crc5
3b6f0 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3b6f4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b6f8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3b6fc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3b700 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3b704 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3b708 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b70c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3b710 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3b714 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3b718 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3b71c 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3b720 23d C4 02 B0 FD |                 call    #poll_waitx
3b724 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3b728 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3b72c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3b730 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3b734 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3b738 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b73c 244 2D 00 64 5D |         if_nz   ret
3b740 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3b744 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3b748 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3b74c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3b750 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3b754 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3b758 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3b75c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3b760 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3b764 24e 2C FB 9F CD |         if_b    jmp     #host_error
3b768 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3b76c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b770 251 2D EC 63 FD |                 call    pa
3b774 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3b778 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3b77c 254 2C EC 63 FD |                 jmp     pa
3b780 255             | 
3b780 255             | '------------------------------------------------------------------------------
3b780 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3b780 255             | ' Status reporting is always in the function-to-host direction.
3b780 255             | '------------------------------------------------------------------------------
3b780 255             | ' On entry:
3b780 255             | '   PTRA - start address of the SETUP data in hub.
3b780 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3b780 255             | '     stage.
3b780 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3b780 255             | ' On exit:
3b780 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3b780 255             | '     contains the count of data stage bytes actually received, which must
3b780 255             | '     always be <= the count requested.
3b780 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3b780 255             | '     more specific USB operation error code.
3b780 255             | '------------------------------------------------------------------------------
3b780 255             | control_read
3b780 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3b784 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3b788 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3b78c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3b790 259             | .xfer_start
3b790 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3b794 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3b798 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b79c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3b7a0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3b7a4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3b7a8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3b7ac 260 61 00 00 FF 
3b7b0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3b7b4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3b7b8 263             | .data
3b7b8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3b7bc 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3b7c0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3b7c4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3b7c8 267             | .nak_retry
3b7c8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3b7cc 268             | .in_retry
3b7cc 268 BC F6 BF FD |                 call    #txn_in
3b7d0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3b7d4 26a 28 00 90 AD |         if_z    jmp     #.commit
3b7d8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b7dc 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3b7e0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b7e4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3b7e8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3b7ec 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3b7f0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3b7f4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b7f8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3b7fc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3b800 275             | .commit
3b800 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3b804 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3b808 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3b80c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3b810 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3b814 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3b818 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3b81c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3b820 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3b824 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3b828 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3b82c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3b830 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3b834 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3b838 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3b83c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3b840 285             | .pre_status
3b840 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3b844 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3b848 287 00 B0 06 F6 |                 mov     pkt_data, #0
3b84c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3b850 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3b854 28a 61 00 00 FF 
3b858 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3b85c 28c             | .out_retry
3b85c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3b860 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b864 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3b868 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b86c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3b870 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b874 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3b878 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3b87c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b880 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3b884 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3b888 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3b888 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3b888 297             | ' ControlRead() transfer gets things unstuck most of the time...
3b888 297             | .xfer_retry
3b888 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3b88c 298 58 01 B0 FD |                 call    #poll_waitx
3b890 299 8C F9 BF FD |                 call    #wait_txn_ok
3b894 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3b898 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3b89c 29c C8 EF 03 F6 |                 mov     pb, hpar3
3b8a0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3b8a4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3b8a8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3b8ac 2a0             | 
3b8ac 2a0             | '------------------------------------------------------------------------------
3b8ac 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3b8ac 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3b8ac 2a0             | ' the SETUP data struct is filled with the required values.
3b8ac 2a0             | '------------------------------------------------------------------------------
3b8ac 2a0             | ' On entry:
3b8ac 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3b8ac 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3b8ac 2a0             | '     stage.
3b8ac 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3b8ac 2a0             | ' On exit:
3b8ac 2a0             | '   retval - used to convey the success/failure of each stage.
3b8ac 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3b8ac 2a0             | '     more specific USB operation error code.
3b8ac 2a0             | '------------------------------------------------------------------------------
3b8ac 2a0             | control_write
3b8ac 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3b8b0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3b8b4 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3b8b8 2a3             | 
3b8b8 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3b8bc 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3b8c0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3b8c4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3b8c8 2a7             | .xfer_start
3b8c8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3b8cc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3b8d0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3b8d4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b8d8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3b8dc 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3b8e0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3b8e4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3b8e8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3b8ec 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3b8f0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3b8f4 2b2             | .data
3b8f4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3b8f8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3b8fc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3b900 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3b904 2b6             | .out_retry
3b904 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3b908 2b7 88 F6 BF FD |                 call    #txn_out
3b90c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b910 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3b914 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3b918 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3b91c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3b920 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3b924 2be             | .commit
3b924 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3b928 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3b92c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3b930 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3b934 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3b938 2c3             | pre_status_in
3b938 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3b93c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3b940 2c5             | .status_retry
3b940 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3b944 2c6 44 F5 BF FD |                 call    #txn_in
3b948 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3b94c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3b950 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3b954 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3b958 2cb 2D 00 64 AD |         if_z    ret
3b95c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3b960 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b964 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3b968 2cf             | '               ret                                     ' Caller must handle transfer retirement
3b968 2cf             | 
3b968 2cf             | '------------------------------------------------------------------------------
3b968 2cf             | ' Execute an IN interrupt transaction.
3b968 2cf             | '------------------------------------------------------------------------------
3b968 2cf             | ' On entry:
3b968 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3b968 2cf             | '   hpar2 - Address of the IN data buffer
3b968 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3b968 2cf             | ' On exit:
3b968 2cf             | '   retval - the result of the operation.
3b968 2cf             | '   hpar3 - the count of IN data bytes actually received.
3b968 2cf             | '------------------------------------------------------------------------------
3b968 2cf             | do_int_in
3b968 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3b96c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3b970 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3b974 2d2             | 
3b974 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3b978 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3b97c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3b980 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3b984 2d6             | .retry
3b984 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3b988 2d7 00 F5 BF FD |                 call    #txn_in
3b98c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3b990 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3b994 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3b998 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3b99c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3b9a0 2dd 54 00 B0 FD |                 call    #retry_wait
3b9a4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3b9a8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3b9ac 2e0 D4 FF 9F FD |                 jmp     #.retry
3b9b0 2e1             | .commit
3b9b0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3b9b4 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3b9b8 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3b9bc 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3b9c0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3b9c4 2e6             | .post_ret
3b9c4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3b9c8 2e7             | 
3b9c8 2e7             | 
3b9c8 2e7             | '------------------------------------------------------------------------------
3b9c8 2e7             | ' Resets the downstream hub port to FS
3b9c8 2e7             | '------------------------------------------------------------------------------
3b9c8 2e7             | dwnstream_reset
3b9c8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3b9cc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3b9d0 2e9             | 
3b9d0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3b9d4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3b9d8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b9dc 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3b9e0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3b9e4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3b9e8 2ef             | 
3b9e8 2ef             | '------------------------------------------------------------------------------
3b9e8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3b9e8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3b9e8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3b9e8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3b9e8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3b9e8 2ef             | '------------------------------------------------------------------------------
3b9e8 2ef             | ' On entry:
3b9e8 2ef             | '   hctwait - wait interval in sysclocks.
3b9e8 2ef             | ' On exit:
3b9e8 2ef             | '------------------------------------------------------------------------------
3b9e8 2ef             | poll_waitx
3b9e8 2ef 1A 92 63 FD |                 getct   hct2
3b9ec 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3b9f0 2f1             | .wait
3b9f0 2f1 FF 25 CC FB |                 jnct2   #.wait
3b9f4 2f2 2D 00 64 FD |                 ret
3b9f8 2f3             | 
3b9f8 2f3             | '------------------------------------------------------------------------------
3b9f8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3b9f8 2f3             | '------------------------------------------------------------------------------
3b9f8 2f3             | ' On entry:
3b9f8 2f3             | '   retval - transaction response PID or error code.
3b9f8 2f3             | ' On exit:
3b9f8 2f3             | '------------------------------------------------------------------------------
3b9f8 2f3             | retry_wait
3b9f8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3b9fc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3ba00 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3ba04 2f6 14 00 90 AD |         if_z    jmp     #.nak
3ba08 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3ba0c 2f8 D8 FF BF FD |                 call    #poll_waitx
3ba10 2f9             | .dec
3ba10 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3ba14 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3ba18 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3ba1c 2fc             | .nak
3ba1c 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3ba20 2fd C4 FF BF FD |                 call    #poll_waitx
3ba24 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3ba28 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3ba2c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3ba30 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3ba34 302 2D 00 64 FD |                 ret
3ba38 303             | 
3ba38 303             | host_reset
3ba38 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3ba3c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3ba40 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3ba40 305 BD 01 05 FF 
3ba44 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3ba48 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3ba4c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3ba50 309             | ' Check to see if the system clock has been changed.
3ba50 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3ba54 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3ba58 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3ba5c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3ba60 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ba64 30e 40 46 62 FD |                 dirl    dp
3ba68 30f             | 
3ba68 30f 28 02 64 FD |                 setq    #1
3ba6c 310 80 00 80 FF 
3ba70 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ba74 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3ba78 313             | .enable
3ba78 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ba7c 314 41 46 62 FD |                 dirh    dp
3ba80 315 1F 36 63 FD |                 waitx   _1us_
3ba84 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ba88 317             | 
3ba88 317             |                 ' Handle Port protection enable and startup delay
3ba88 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3ba8c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3ba90 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3ba94 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3ba98 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3ba9c 31c             | 
3ba9c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3baa0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3baa4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3baa8 31f 00 00 04 F6 |                 mov     0-0, #0
3baac 320             | .regloop
3baac 320             | 
3baac 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3baac 320             | 
3baac 320             | discon_entry
3baac 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3bab0 321             | 
3bab0 321             |               
3bab0 321             |         if HAVE_HIDPAD
3bab0 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3bab4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bab8 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3babc 324 F7 01 68 FC |                 wrlong  #0,pb
3bac0 325             |         end
3bac0 325             |         if EMUPAD_MAX_PLAYER > 0
3bac0 325             |         end
3bac0 325             | 
3bac0 325             |                 ' Fall through to disconnected loop
3bac0 325             | 
3bac0 325             | '-----------------------------------------------------------------------------------------------------------------
3bac0 325             | ' Device connect handling (Section 7.1.7.3).
3bac0 325             | '-----------------------------------------------------------------------------------------------------------------
3bac0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3bac0 325             | ' device to connect (Section 7.1.7.3).
3bac0 325             | '-----------------------------------------------------------------------------------------------------------------
3bac0 325             | disconnected
3bac0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3bac4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3bac8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3bacc 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3bad0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3bad4 32a             |         if ACTIVITY_LED >= 0
3bad4 32a             |         end
3bad4 32a 22 A7 82 FA |                 rqpin   urx, dm
3bad8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3badc 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3bae0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3bae4 32e             | .se1_test
3bae4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3bae8 32f FC FE BF FD |                 call    #poll_waitx
3baec 330 22 A7 82 FA |                 rqpin   urx, dm
3baf0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3baf4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3baf8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3bafc 334             | .se1            'SE1 is a fatal error condition
3bafc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3bb00 335 E4 FE BF FD |                 call    #poll_waitx
3bb04 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3bb08 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3bb0c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3bb0c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3bb10 339 22 A7 82 FA |                 rqpin   urx, dm
3bb14 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3bb18 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3bb1c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3bb20 33d             | connected
3bb20 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3bb24 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3bb28 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3bb2c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3bb30 341             | .set_pulse
3bb30 341 1A 64 63 FD |                 getct   _pulse_time_
3bb34 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3bb38 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3bb38 343             | ' of 1ms and make a correction, if necessary.
3bb38 343             | '                mov     htmp, _1ms_
3bb38 343             | '                subs    htmp, iframe_delta
3bb38 343             | '                adds    _frame1ms_clks_, htmp
3bb38 343             | '                debug(udec(_frame1ms_clks_))
3bb38 343             | 
3bb38 343             |                 ' Fall through to idle/processing loop
3bb38 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3bb3c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3bb40 345             | 
3bb40 345             | hidle
3bb40 345 22 A7 82 FA |                 rqpin   urx, dm
3bb44 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3bb48 347 98 00 90 CD |         if_c    jmp     #.se0_test
3bb4c 348 24 06 70 FD |                 pollct3                         wc
3bb50 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3bb54 34a 1A 94 63 FD |                 getct   hct3
3bb58 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3bb5c 34c             | 
3bb5c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3bb60 34d 00 70 E3 F8 |                 getbyte htmp
3bb64 34e             | 
3bb64 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3bb68 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3bb6c 350 40 00 90 AD |         if_z    jmp     #.poll
3bb70 351             | 
3bb70 351             |         if _HAVE_GAMEPAD
3bb70 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3bb74 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3bb78 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3bb7c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3bb80 355 2C 00 90 AD |         if_z    jmp     #.poll
3bb84 356             |         end
3bb84 356             | 
3bb84 356             |         if HAVE_MOUSE
3bb84 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3bb88 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bb8c 358 20 00 90 AD |         if_z    jmp     #.poll
3bb90 359             |         end
3bb90 359             | 
3bb90 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3bb94 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3bb98 35b 14 00 90 AD |         if_z    jmp     #.poll
3bb9c 35c             | 
3bb9c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3bba0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3bba4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3bba8 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3bbac 360             |         if HAVE_MOUSE
3bbac 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3bbb0 361             |         else
3bbb0 361             |         end
3bbb0 361             | 
3bbb0 361             | .poll
3bbb0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3bbb4 362 2D EC 63 FD |                 call    pa
3bbb8 363             | .skip_poll
3bbb8 363             | 
3bbb8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3bbbc 364             | 
3bbbc 364             | .nopoll
3bbbc 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3bbc0 365 44 00 90 AD |         if_z    jmp     #hsuspend
3bbc4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3bbc8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3bbcc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3bbd0 369 1A 84 63 FD |                 getct   hr0
3bbd4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3bbd8 36b             |         if ACTIVITY_LED >= 0
3bbd8 36b             |         end
3bbd8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3bbdc 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3bbe0 36d 5C FF 9F FD |                 jmp     #hidle
3bbe4 36e             | ' Check for extended SE0 state on the bus
3bbe4 36e             | .se0_test
3bbe4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3bbe8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3bbec 370 22 A7 82 FA |                 rqpin   urx, dm
3bbf0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3bbf4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3bbf8 373 24 F6 BF FD |                 call    #wait_txn_ok
3bbfc 374 00 00 80 FF 
3bc00 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3bc04 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3bc04 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3bc08 377             | 
3bc08 377             | hsuspend
3bc08 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3bc0c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3bc10 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3bc14 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3bc18 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3bc1c 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3bc20 37d             | 
3bc20 37d             |                 ' Fall through to resume wait loop
3bc20 37d             | 
3bc20 37d             | hwait_resume
3bc20 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3bc24 37e 02 86 47 F0 |                 shr     hr1, #2
3bc28 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3bc2c 380             |         if ACTIVITY_LED >= 0
3bc2c 380             |         end
3bc2c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3bc30 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3bc34 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3bc38 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3bc3c 384 18 00 90 AD |         if_z    jmp     #.resume
3bc40 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3bc44 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3bc48 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3bc4c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3bc50 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3bc54 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3bc58 38b             | .resume
3bc58 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3bc5c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3bc60 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3bc64 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3bc68 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3bc6c 390 1F 70 63 FD |                 waitx   htmp
3bc70 391 22 07 28 FC |                 wypin   #OUT_J, dm
3bc74 392 01 70 47 F0 |                 shr     htmp, #1
3bc78 393 1F 70 63 FD |                 waitx   htmp
3bc7c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bc80 395 1A 92 62 FD |                 getct   iframe_ct_base
3bc84 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3bc88 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3bc8c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3bc90 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3bc94 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3bc98 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3bc9c 39c             | 
3bc9c 39c             | '------------------------------------------------------------------------------
3bc9c 39c             | ' Send preamble to enable low-speed HUB ports
3bc9c 39c             | '------------------------------------------------------------------------------
3bc9c 39c             | ' On entry:
3bc9c 39c             | ' On exit:
3bc9c 39c             | '   USB baud rate set to low-speed
3bc9c 39c             | '------------------------------------------------------------------------------
3bc9c 39c             | utx_pre
3bc9c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3bca0 39d 40 46 62 FD |                 dirl    dp
3bca4 39e 28 02 64 FD |                 setq    #1
3bca8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3bcac 3a0 58 44 62 FD |                 drvl    dm
3bcb0 3a1 59 46 62 FD |                 drvh    dp
3bcb4 3a2             | 
3bcb4 3a2 1E 00 00 FF 
3bcb8 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3bcbc 3a4             | 
3bcbc 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3bcc0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3bcc4 3a6 28 02 64 3D |         if_nc   setq    #1
3bcc8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3bccc 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3bcd0 3a9             | .l1
3bcd0 3a9             | 
3bcd0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3bcd4 3aa 40 46 62 FD |                 dirl    dp
3bcd8 3ab 28 02 64 FD |                 setq    #1
3bcdc 3ac 80 00 80 FF 
3bce0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3bce4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3bce8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3bcec 3b0 41 46 62 FD |                 dirh    dp
3bcf0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3bcf4 3b2             | 
3bcf4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3bcf8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3bcfc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3bd00 3b5             | 
3bd00 3b5             | hlut_end
3bd00 3b5             |                 fit     $400
3bd00 3b5             |                 orgh
3bd00                 | if OVERLAP_MEMORY
3bd00                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3bd00                 | end
3bd00                 | '------------------------------------------------------------------------------
3bd00                 | ' Routines called from cog space.
3bd00                 | '------------------------------------------------------------------------------
3bd00                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3bd00                 | '------------------------------------------------------------------------------
3bd00                 | 
3bd00                 | '------------------------------------------------------------------------------
3bd00                 | ' USB host cog initialization.
3bd00                 | '------------------------------------------------------------------------------
3bd00                 | usb_host_init
3bd00                 |                 ' Initialize buffer pointers
3bd00                 |         if OVERLAP_MEMORY
3bd00                 |         else
3bd00     40 15 B0 FE |                 loc     pb, #hid_descr
3bd04                 |         end
3bd04     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3bd08                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3bd08                 |                 {
3bd08                 |                 }
3bd08                 |         
3bd08                 |                 {
3bd08                 |                 }
3bd08                 |                 'loc     pb,#hkbd_report
3bd08                 |                 'mov     hkbd_report_p,pb
3bd08                 | 
3bd08     08 1D B0 FE |                 loc     pb, #hub_descr
3bd0c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3bd10     1D 1D B0 FE |                 loc     pb, #urx_buff
3bd14     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3bd18     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3bd1c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3bd20     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3bd24     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3bd28     18 15 B0 FE |                 loc     pb, #usb_cache_start
3bd2c     F7 55 02 F6 |                 mov     cache_start_p, pb
3bd30     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3bd34     F7 57 02 F6 |                 mov     cache_end_p, pb
3bd38                 | 
3bd38                 |         if ERROR_LED >= 0
3bd38                 |         end
3bd38                 | 
3bd38                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3bd38                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3bd38                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3bd38                 | ' Configure and enable the Serial Host USB port.
3bd38     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3bd3c                 | 
3bd3c                 | '------------------------------------------------------------------------------
3bd3c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3bd3c                 | '------------------------------------------------------------------------------
3bd3c                 | ' On entry:
3bd3c                 | '   htmp - current CLKFREQ value.
3bd3c                 | '------------------------------------------------------------------------------
3bd3c                 | hinit_usb_timings
3bd3c                 | '                getct   htmp2
3bd3c     B8 59 02 F6 |                 mov     save_sysclk, htmp
3bd40     8D 5B 80 FF 
3bd44     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3bd48     18 30 63 FD |                 getqx   _12Mbps_
3bd4c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3bd50     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3bd54     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3bd58     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3bd5c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3bd60     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3bd64     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3bd68     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3bd6c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3bd70     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3bd74     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3bd78     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3bd7c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3bd80     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3bd84     80 00 00 FF 
3bd88     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3bd8c     18 2C 63 FD |                 getqx   _var_64_lower_
3bd90     19 2E 63 FD |                 getqy   _var_64_upper_
3bd94     28 2C 63 FD |                 setq    _var_64_lower_
3bd98     65 CD 1D FF 
3bd9c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3bda0     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3bda4     01 00 00 FF 
3bda8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3bdac     18 2C 63 FD |                 getqx   _var_64_lower_
3bdb0     19 2E 63 FD |                 getqy   _var_64_upper_
3bdb4     28 2C 63 FD |                 setq    _var_64_lower_
3bdb8     A1 07 00 FF 
3bdbc     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3bdc0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3bdc4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3bdc8     09 36 57 F0 |                 shr     _1us_, #9               wc
3bdcc     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3bdd0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3bdd4     18 38 63 FD |                 getqx   _10us_
3bdd8     09 38 57 F0 |                 shr     _10us_, #9              wc
3bddc     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3bde0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3bde4     18 3A 63 FD |                 getqx   _33us_
3bde8     09 3A 57 F0 |                 shr     _33us_, #9              wc
3bdec     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3bdf0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3bdf4     18 3C 63 FD |                 getqx   _txn_err_
3bdf8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3bdfc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3be00     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3be04     18 3E 63 FD |                 getqx   _500us_
3be08     09 3E 57 F0 |                 shr     _500us_, #9             wc
3be0c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3be10     01 00 00 FF 
3be14     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3be18     18 40 63 FD |                 getqx   _txn_ok_ls_
3be1c     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3be20     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3be24     01 00 00 FF 
3be28     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3be2c     18 42 63 FD |                 getqx   _txn_ok_fs_
3be30     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3be34     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3be38     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3be3c     05 00 00 FF 
3be40     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3be44     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3be48     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3be4c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3be50     1C 00 00 FF 
3be54     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3be58     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3be5c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3be60     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3be64     00 00 00 FF 
3be68     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3be6c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3be70     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3be74     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3be78     04 00 00 FF 
3be7c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3be80     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3be84     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3be88     8D 5B 00 FF 
3be8c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3be90     18 4C 63 FD |                 getqx   _preamble_wait_
3be94     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3be98     01 00 00 FF 
3be9c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3bea0     18 2C 63 FD |                 getqx   _var_64_lower_
3bea4     19 2E 63 FD |                 getqy   _var_64_upper_
3bea8     28 2C 63 FD |                 setq    _var_64_lower_
3beac     01 00 00 FF 
3beb0     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3beb4     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3beb8     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3bebc     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3bec0     FF FF 7F FF 
3bec4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3bec8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3becc     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3bed0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3bed4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3bed8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3bedc     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3bee0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3bee4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3bee8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3beec     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3bef0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3bef4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3bef8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3befc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3bf00     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3bf04     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3bf08     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3bf0c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3bf10     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3bf14     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3bf18     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3bf1c     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3bf20     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3bf24     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3bf28     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3bf2c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3bf30                 | '        _ret_   mov     _1sec_, save_sysclk
3bf30                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3bf30                 | '                ret
3bf30                 | {
3bf30                 | }
3bf30                 | 
3bf30                 | '------------------------------------------------------------------------------
3bf30                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3bf30                 | ' one. If it is, start the task progression that will configure the device for
3bf30                 | ' use.
3bf30                 | '------------------------------------------------------------------------------
3bf30                 | ' On entry:
3bf30                 | '   hconfig_base - start address of the cached config descriptor chain.
3bf30                 | ' On exit:
3bf30                 | '------------------------------------------------------------------------------
3bf30                 | hparse_con_desc
3bf30     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3bf34     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3bf38     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3bf3c     4E 70 FF F9 |                 movbyts htmp,#%%1032
3bf40     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3bf44                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3bf44                 | 
3bf44     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3bf48     6E ED 03 F1 |                 add     pa, hconfig_base
3bf4c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3bf50                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3bf50                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3bf50                 | ' that defines a keyboard and/or mouse.
3bf50     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3bf54                 | .next_intf
3bf54     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3bf58     BC 01 90 3D |         if_ae   jmp     #hset_config
3bf5c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3bf60     75 F3 03 F1 |                 add     ptrb, hnext_desc
3bf64     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3bf68     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3bf6c     0C 00 90 AD |         if_z    jmp     #.intf
3bf70     80 71 C7 FA |                 rdbyte  htmp, ptrb
3bf74     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3bf78     D8 FF 9F FD |                 jmp     #.next_intf
3bf7c                 | .intf
3bf7c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3bf80     00 90 07 F6 |                 mov     hpar3, #0
3bf84     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3bf88     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3bf8c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3bf90     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3bf94                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3bf94                 | 
3bf94                 | .endp
3bf94     80 71 C7 FA |                 rdbyte  htmp, ptrb
3bf98     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3bf9c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3bfa0     78 00 90 3D |         if_ae   jmp     #.get_device
3bfa4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3bfa8     75 F3 03 F1 |                 add     ptrb, hnext_desc
3bfac     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3bfb0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3bfb4     64 00 90 AD |         if_z    jmp     #.get_device
3bfb8     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3bfbc     04 00 90 AD |         if_z    jmp     #.get_ep
3bfc0     D0 FF 9F FD |                 jmp     #.endp
3bfc4                 | .get_ep
3bfc4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3bfc8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3bfcc     0F 86 67 F0 |                 shl     hr1, #8 + 7
3bfd0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3bfd4     3F 00 00 FF 
3bfd8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3bfdc     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3bfe0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3bfe4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3bfe8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3bfec     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3bff0     A0 FF 9F FD |                 jmp     #.endp
3bff4                 | .in_ep
3bff4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3bff8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3bffc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3bffc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c000     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3c004     8C FF 9F FD |                 jmp     #.endp
3c008                 | .out_ep
3c008     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3c00c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3c010                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3c010     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3c014     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3c018     78 FF 9F FD |                 jmp     #.endp
3c01c                 | 
3c01c                 | .get_device
3c01c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3c020     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3c024     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3c028     68 00 90 AD |         if_z    jmp     #.gamepad
3c02c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3c030     AC 00 90 AD |         if_z    jmp     #.hub
3c034     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3c038     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3c03c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c040     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c044     4C 00 90 AD |         if_z    jmp     #.gamepad
3c048     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3c04c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3c050                 | .keyboard
3c050     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3c054                 |         if HAVE_MOUSE
3c054     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3c058                 |         else
3c058                 |         end
3c058     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3c05c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3c060     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c064     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3c068     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3c06c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3c070                 |                 'debug(udec(kb_intf_num))
3c070                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c070     E0 FE 9F FD |                 jmp     #.next_intf
3c074                 | if HAVE_MOUSE
3c074                 | .mouse
3c074     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3c078     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3c07c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3c080     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3c084     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c088                 |                 'getbyte ms_interval, hr2, #3
3c088     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3c08c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3c090                 |                 'debug(udec(kb_intf_num))
3c090                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3c090     C0 FE 9F FD |                 jmp     #.next_intf
3c094                 | end
3c094                 | .gamepad
3c094     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3c098     C7 71 63 F5 |                 xor     htmp, hpar2
3c09c     3F 00 00 FF 
3c0a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c0a4     AC FE 9F AD |         if_z    jmp     #.next_intf
3c0a8                 |         if HAVE_MOUSE
3c0a8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3c0ac     C7 71 63 F5 |                 xor     htmp, hpar2
3c0b0     3F 00 00 FF 
3c0b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c0b8     98 FE 9F AD |         if_z    jmp     #.next_intf
3c0bc                 |         end
3c0bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3c0c0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3c0c4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3c0c8                 | 
3c0c8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3c0cc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3c0d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c0d4     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3c0d8     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3c0dc                 |                 'debug(udec(gp_intf_num))
3c0dc                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3c0dc     74 FE 9F FD |                 jmp     #.next_intf
3c0e0                 | .hub
3c0e0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3c0e4     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3c0e8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3c0ec     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3c0f0     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3c0f4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c0f8     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3c0fc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3c100     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c104     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3c108     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c10c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3c110     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3c114                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3c114     3C FE 9F FD |                 jmp     #.next_intf
3c118                 | 
3c118                 | '------------------------------------------------------------------------------
3c118                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3c118                 | ' it according to its function, or functions. In the case of this boot protocol
3c118                 | ' keyboard/mouse class driver:
3c118                 | ' - SetConfiguration(config_num)
3c118                 | ' - SetProtocol(boot)
3c118                 | ' - SetIdle(indefinite)
3c118                 | ' - Enter the device interrupt IN polling task stage.
3c118                 | '------------------------------------------------------------------------------
3c118                 | ' On entry:
3c118                 | ' On exit:
3c118                 | '------------------------------------------------------------------------------
3c118                 | hset_config
3c118                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3c118                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3c118     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3c11c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c120     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c124     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3c128                 |         if HAVE_MOUSE
3c128     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3c12c                 |         end
3c12c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3c130     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3c134                 | .set_config
3c134     6C 0E D0 FE |                 loc     ptra, #set_config
3c138     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3c13c     6E ED 03 F1 |                 add     pa, hconfig_base
3c140     F6 8D C3 FA |                 rdbyte  hpar1, pa
3c144     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3c148     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3c14c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3c150     A0 02 A0 FD |                 call    #control_write
3c154     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c158     2D 00 64 5D |         if_nz   ret
3c15c                 | .kbd_config
3c15c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3c160     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3c164                 | 
3c164     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3c168     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c16c     3F 00 00 FF 
3c170     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c174     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3c178                 | 
3c178     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c17c     34 0E D0 FE |                 loc     ptra, #set_protocol
3c180     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c184     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c188     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c18c     A0 02 A0 FD |                 call    #control_write
3c190     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c194     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c198     E4 02 90 5D |         if_nz   jmp     #.notify_client
3c19c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c1a0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3c1a4     30 03 B0 FD |                 call    #hset_idle
3c1a8                 |                 'cmp     retval, #PID_ACK        wz
3c1a8                 |         'if_nz   mov     hkbd_ep_addr, #0
3c1a8                 |         'if_nz   jmp     #.notify_client
3c1a8     A8 99 02 F6 |                 mov     hctwait, _2ms_
3c1ac     EF 02 A0 FD |                 call    #poll_waitx
3c1b0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3c1b4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3c1b8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3c1bc     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3c1c0     2C 03 B0 FD |                 call    #hset_kbdled_report
3c1c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c1c8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3c1cc     B0 02 90 5D |         if_nz   jmp     #.notify_client
3c1d0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c1d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c1d8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c1dc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c1e0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3c1e4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3c1e8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3c1ec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c1f0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3c1f4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3c1f8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3c1fc                 |         if !!HAVE_MOUSE
3c1fc                 |         end
3c1fc                 | 
3c1fc                 | .mouse_config
3c1fc                 | if HAVE_MOUSE
3c1fc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3c200     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c204     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3c208     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c20c     3F 00 00 FF 
3c210     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c214     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3c218                 | 
3c218                 |                 debug("mouse passed addr check")
3c218                 | 
3c218     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c21c     00 00 80 FF 
3c220     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3c224     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3c228     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c22c     55 02 A0 FD |                 call    #control_read
3c230     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c234     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c238     44 02 90 5D |         if_nz   jmp     #.notify_client
3c23c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c240     56 01 00 F6 |                 mov     0-0, total_data
3c244     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c248                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c248                 | 
3c248     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3c24c     64 0D D0 FE |                 loc     ptra, #set_protocol
3c250     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3c254     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c258     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3c25c     A0 02 A0 FD |                 call    #control_write
3c260     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c264     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3c268     14 02 90 5D |         if_nz   jmp     #.notify_client
3c26c                 |                 debug("mouse passed SetProtocol")
3c26c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3c270     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3c274     60 02 B0 FD |                 call    #hset_idle
3c278                 |                 'cmp     retval, #PID_ACK        wz
3c278                 |         'if_nz   mov     hmouse_ep_addr, #0
3c278                 |         'if_nz   jmp     #.notify_client
3c278                 |                 debug("mouse passed SetIdle")
3c278     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c27c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c280     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c284     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c288     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3c28c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c290     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3c294     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3c298     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3c29c     3F 00 00 FF 
3c2a0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3c2a4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3c2a8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3c2ac     D0 01 90 FD |                 jmp     #.notify_client
3c2b0                 | end
3c2b0                 | .gamepad_config
3c2b0                 | if _HAVE_GAMEPAD
3c2b0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c2b4     00 00 0C F2 |                 cmp     0-0, #0                 wz
3c2b8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3c2bc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c2c0     00 70 03 F6 |                 mov     htmp, 0-0
3c2c4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c2c8     3F 00 00 FF 
3c2cc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c2d0     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3c2d4                 | 
3c2d4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c2d8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c2dc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c2e0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c2e4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3c2e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c2ec     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3c2f0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3c2f4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3c2f8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3c2fc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c300     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3c304     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3c308     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3c30c                 | 
3c30c                 |                 if EMUPAD_MAX_PLAYER > 0
3c30c                 |                 
3c30c                 | .rule_loop           
3c30c                 |                 end
3c30c                 | 
3c30c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3c310     5C 00 90 AD |         if_e    jmp     #.xinput
3c314     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3c318     00 70 03 F6 |                 mov     htmp,0-0
3c31c     01 A6 02 FF 
3c320     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3c324     7C 00 90 AD |         if_e    jmp     #.ps3
3c328                 | 
3c328     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3c32c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3c330     00 00 80 5F 
3c334     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3c338     03 00 80 AF 
3c33c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3c340     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3c344     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c348     55 02 A0 FD |                 call    #control_read
3c34c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c350     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c354     00 00 04 56 |         if_nz   mov     0-0, #0
3c358     24 01 90 5D |         if_nz   jmp     #.notify_client
3c35c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3c360     56 01 00 F6 |                 mov     0-0, total_data
3c364     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c368                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3c368                 | 
3c368     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3c36c     10 01 90 FD |                 jmp     #.notify_client
3c370                 | .xinput
3c370     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3c374     2D EF 03 F6 |                 mov     pb,hdev_port
3c378     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3c37c     03 EE 27 F3 |                 fle     pb,#3
3c380     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3c384     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3c388                 | 
3c388     03 B0 06 F6 |                 mov     pkt_data, #3
3c38c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3c390     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3c394     5A 00 A0 FD |                 call    #txn_out
3c398     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3c39c                 | 
3c39c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3c3a0     DC 00 90 FD |                 jmp     #.notify_client
3c3a4                 | .ps3
3c3a4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3c3a8     2D EF 03 F6 |                 mov     pb,hdev_port
3c3ac     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3c3b0     04 EE 27 F3 |                 fle     pb,#4
3c3b4     F7 EF C3 F9 |                 decod   pb
3c3b8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3c3bc                 | 
3c3bc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c3c0     00 0C D0 FE |                 loc     ptra, #set_report
3c3c4     01 00 80 FF 
3c3c8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3c3cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c3d0     03 61 5C FC |                 wrword  #48, ptra[wLength]
3c3d4     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3c3d8     A0 02 A0 FD |                 call    #control_write
3c3dc                 | 
3c3dc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3c3e0     E0 0B D0 FE |                 loc     ptra, #set_report
3c3e4     01 00 80 FF 
3c3e8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3c3ec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c3f0     03 09 5C FC |                 wrword  #4, ptra[wLength]
3c3f4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3c3f8     A0 02 A0 FD |                 call    #control_write
3c3fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3c400     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3c404     00 00 04 56 |         if_nz   mov     0-0, #0
3c408     74 00 90 5D |         if_nz   jmp     #.notify_client
3c40c                 | 
3c40c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3c410     6C 00 90 FD |                 jmp     #.notify_client
3c414                 | end
3c414                 | 
3c414                 | .hub_config
3c414     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3c418     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3c41c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3c420     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3c424     3F 00 00 FF 
3c428     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3c42c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3c430                 | 
3c430     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3c434     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3c438     26 EF 03 F6 |                 mov     pb, hub_descr_p
3c43c     55 02 A0 FD |                 call    #control_read
3c440     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c444     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3c448     34 00 90 5D |         if_nz   jmp     #.notify_client
3c44c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3c44c                 | 
3c44c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3c450     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3c454     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3c458                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3c458                 | .pwr_loop
3c458     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3c45c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3c460     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3c464     A0 02 A0 FD |                 call    #control_write
3c468     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3c46c                 | 
3c46c     B1 99 02 F6 |                 mov     hctwait, _500ms_
3c470     B0 99 02 F1 |                 add     hctwait, _100ms_
3c474     EF 02 A0 FD |                 call    #poll_waitx
3c478                 | 
3c478     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3c47c     00 00 90 FD |                 jmp     #.notify_client
3c480                 | 
3c480                 | .notify_client
3c480     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3c484     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3c488                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3c488                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3c488     2D 00 64 FD |                 ret
3c48c                 | 
3c48c                 | '------------------------------------------------------------------------------
3c48c                 | ' Initialize the keyboard/mouse data area to start-up values.
3c48c                 | '------------------------------------------------------------------------------
3c48c                 | ' On entry:
3c48c                 | ' On exit:
3c48c                 | '------------------------------------------------------------------------------
3c48c                 | init_kbdm_data
3c48c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3c490     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3c494                 | 
3c494     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3c498     2B ED 03 F6 |                 mov     pa, cache_end_p
3c49c                 | .loop
3c49c     61 01 4C FC |                 wrbyte  #0, ptra++
3c4a0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3c4a4     F4 FF 9F CD |         if_b    jmp     #.loop
3c4a8                 |         
3c4a8                 |         if EMUPAD_MAX_PLAYER > 0
3c4a8                 |         end
3c4a8                 | 
3c4a8                 | 
3c4a8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3c4ac                 | .regloop
3c4ac     00 EC 8F F9 |                 altd    pa
3c4b0     00 00 04 F6 |                 mov     0-0, #0
3c4b4     01 EC 07 F1 |                 add     pa, #1
3c4b8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3c4bc     EC FF 9F 5D |         if_nz   jmp     #.regloop
3c4c0                 | 
3c4c0     E1 E1 61 FF 
3c4c4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3c4c8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3c4cc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3c4d0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3c4d4                 | 
3c4d4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3c4d8                 | 
3c4d8                 | '------------------------------------------------------------------------------
3c4d8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3c4d8                 | ' function.
3c4d8                 | '------------------------------------------------------------------------------
3c4d8                 | ' On entry:
3c4d8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3c4d8                 | '   hpar2 - index number of the target interface.
3c4d8                 | ' On exit:
3c4d8                 | '------------------------------------------------------------------------------
3c4d8                 | hset_idle
3c4d8     A8 99 02 F6 |                 mov     hctwait, _2ms_
3c4dc     EF 02 A0 FD |                 call    #poll_waitx
3c4e0     D8 0A D0 FE |                 loc     ptra, #set_idle
3c4e4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3c4e8     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3c4ec     A0 02 80 FD |                 jmp     #control_write
3c4f0                 | 
3c4f0                 | '------------------------------------------------------------------------------
3c4f0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3c4f0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3c4f0                 | '------------------------------------------------------------------------------
3c4f0                 | ' On entry:
3c4f0                 | '   ep_addr_pid - device address and enpoint for the request.
3c4f0                 | ' On exit:
3c4f0                 | '   retval - transaction result.
3c4f0                 | '------------------------------------------------------------------------------
3c4f0                 | hset_kbdled_report
3c4f0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3c4f4     CC 0A D0 FE |                 loc     ptra, #set_report
3c4f8     01 00 80 FF 
3c4fc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3c500     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3c504     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3c508     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c50c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3c510     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3c514                 | 
3c514                 | '------------------------------------------------------------------------------
3c514                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3c514                 | '------------------------------------------------------------------------------
3c514                 | ' On entry:
3c514                 | ' On exit:
3c514                 | '------------------------------------------------------------------------------
3c514                 | hget_kbd_in_report
3c514     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3c518     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3c51c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3c520     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3c524     CF 02 A0 FD |                 call    #do_int_in
3c528     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c52c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c530                 | 
3c530     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c534     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c538                 | 
3c538     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3c53c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c540     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3c544     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3c548                 | 
3c548     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3c54c     18 00 B0 FD |                 call    #hkbd_compare
3c550                 |         if EMUPAD_MAX_PLAYER > 0
3c550                 |         end
3c550                 | 
3c550                 | .led_check
3c550     3B 71 03 F6 |                 mov     htmp, kb_led_states
3c554     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3c558     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3c55c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3c560     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3c564     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3c568                 | 
3c568                 | '------------------------------------------------------------------------------
3c568                 | ' Compare current and previous keyboard data buffers for keypress changes.
3c568                 | '------------------------------------------------------------------------------
3c568                 | hkbd_compare
3c568     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c56c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3c570     61 73 07 FB |                 rdlong  htmp1, ptra++
3c574     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3c578     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3c57c     61 73 07 FB |                 rdlong  htmp1, ptra++
3c580     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3c584     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3c588     2D 00 64 AD |         if_z    ret
3c58c                 | 
3c58c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3c590                 | 
3c590                 |                 ' Handle modifiers
3c590     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3c594     00 87 C7 FA |                 rdbyte  hr1, ptra
3c598     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3c59c     63 86 63 FD |                 mergew  hr1
3c5a0     08 EC 07 F6 |                 mov     pa,#8
3c5a4                 | .modloop
3c5a4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3c5a8     E8 8C 07 F6 |                 mov     hpar1,#$E8
3c5ac     F6 8D 83 F1 |                 sub     hpar1,pa
3c5b0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3c5b4     FB ED 6F FB |                 djnz    pa,#.modloop
3c5b8                 | 
3c5b8     6F E0 75 FD | .release        modc    _set    wc
3c5bc                 |                 'alts    hdev_port, #hid_report_p
3c5bc                 |                 'mov     ptra, hid_report_p
3c5bc     02 F0 07 F1 |                 add     ptra, #2
3c5c0     06 EC 07 F6 |                 mov     pa, #6
3c5c4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3c5c8     20 00 90 AD |         if_z    jmp     #.rl3
3c5cc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3c5d0     02 F2 07 F1 |                 add     ptrb, #2
3c5d4     06 EE 07 F6 |                 mov     pb, #6
3c5d8     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3c5dc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3c5e0     08 00 90 AD |         if_z    jmp     #.rl3
3c5e4     FC EF 6F FB |                 djnz    pb, #.rl2
3c5e8     68 00 B0 FD |                 call    #hkbd_translate
3c5ec     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3c5f0                 | 
3c5f0     00 90 07 F6 |                 mov     hpar3, #0
3c5f4     1F 90 27 F4 |                 bith    hpar3, #31
3c5f8                 | 
3c5f8     6F 00 74 FD | .press          modc    _clr    wc
3c5fc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c600     02 F0 07 F1 |                 add     ptra, #2
3c604     06 EC 07 F6 |                 mov     pa, #6
3c608     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3c60c     20 00 90 AD |         if_z    jmp     #.pl3
3c610     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3c614     02 F2 07 F1 |                 add     ptrb, #2
3c618     06 EE 07 F6 |                 mov     pb, #6
3c61c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3c620     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3c624     08 00 90 AD |         if_z    jmp     #.pl3
3c628     FC EF 6F FB |                 djnz    pb, #.pl2
3c62c     24 00 B0 FD |                 call    #hkbd_translate
3c630     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3c634                 | 
3c634     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3c638     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3c63c     28 02 64 FD |                 setq #1
3c640     61 73 07 FB |                 rdlong  htmp1, ptra++
3c644     28 02 64 FD |                 setq #1
3c648     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3c64c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3c650                 | 
3c650     2D 00 64 FD |                 ret
3c654                 | 
3c654                 | '------------------------------------------------------------------------------
3c654                 | ' Translate keyboard scancode to ASCII
3c654                 | '------------------------------------------------------------------------------
3c654                 | ' On entry:
3c654                 | '   hpar1 - scancode
3c654                 | '   hpar2 - key modifiers state
3c654                 | '       c - pressed (0) or released (1) flag
3c654                 | ' On exit:
3c654                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3c654                 | '               30..17 = unused
3c654                 | '                   18 = scroll-lock state 
3c654                 | '                   17 = caps-lock state
3c654                 | '                   16 = num-lock state 
3c654                 | '                15..8 = key modifiers state
3c654                 | '                 7..0 = scancode
3c654                 | '------------------------------------------------------------------------------
3c654                 | hkbd_translate
3c654     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3c658     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3c65c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3c660     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3c664     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3c668     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3c66c                 | 
3c66c                 |         if EMUPAD_MAX_PLAYER > 0
3c66c                 | 
3c66c                 |         if EMUPAD_BT0_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT1_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT2_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT3_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT4_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT5_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT6_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT7_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT8_BIT >= 0
3c66c                 |         end
3c66c                 |         if EMUPAD_BT9_BIT >= 0
3c66c                 |         end
3c66c                 | 
3c66c                 |         end
3c66c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3c670     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3c674     1F 8C 47 F4 |                 bitc    hpar1, #31
3c678                 |         if KEYQUEUE_SIZE > 0
3c678     C4 09 B0 FE |                 loc pb,#keyq_head
3c67c     F7 71 E3 FA |                 rdword htmp,pb
3c680     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3c684     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3c688     B8 75 03 F6 |                 mov htmp2,htmp
3c68c     04 74 07 FA |                 mul htmp2,#4
3c690     F7 75 03 F1 |                 add htmp2,pb
3c694     02 74 07 F1 |                 add htmp2,#2
3c698     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3c69c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3c6a0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3c6a4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3c6a8                 |         end
3c6a8     2D 00 7C FD |                 ret wcz
3c6ac                 | 
3c6ac                 | if HAVE_MOUSE
3c6ac                 | '------------------------------------------------------------------------------
3c6ac                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3c6ac                 | '------------------------------------------------------------------------------
3c6ac                 | ' On entry:
3c6ac                 | ' On exit:
3c6ac                 | '------------------------------------------------------------------------------
3c6ac                 | hget_mouse_in_report
3c6ac     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3c6b0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3c6b4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3c6b8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3c6bc     CF 02 A0 FD |                 call    #do_int_in
3c6c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c6c4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c6c8                 | 
3c6c8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c6cc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c6d0                 | 
3c6d0     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3c6d4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c6d8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3c6dc     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3c6e0                 | 
3c6e0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3c6e4     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3c6e8     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3c6ec     01 90 87 31 |         if_ae   sub     hpar3, #1
3c6f0                 | 
3c6f0     40 09 90 FE |                 loc     pa, #mouse_limits
3c6f4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3c6f8                 | 
3c6f8                 |                 ' load xacc,yacc,zacc
3c6f8     28 04 64 FD |                 setq    #3-1
3c6fc     80 87 07 FB |                 rdlong  hr1,ptrb
3c700                 |                 ' load limits and outptr
3c700     28 04 64 FD |                 setq    #3-1
3c704     F6 73 03 FB |                 rdlong  htmp1,pa
3c708                 | 
3c708     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3c70c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3c710     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3c714     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3c718     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3c71c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3c720     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3c724     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3c728                 |               
3c728                 | 
3c728     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3c72c     07 70 67 F7 |                 signx   htmp, #7
3c730     B8 87 03 F1 |                 add     hr1,htmp
3c734     00 72 0F F2 |                 cmp     htmp1,#0 wz
3c738     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3c73c     00 86 47 53 |         if_ne   fges    hr1,#0
3c740                 | 
3c740     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3c744     07 70 67 F7 |                 signx   htmp, #7
3c748     B8 89 03 F1 |                 add     hr2,htmp
3c74c     00 74 0F F2 |                 cmp     htmp2,#0 wz
3c750     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3c754     00 88 47 53 |         if_ne   fges    hr2,#0
3c758                 |                 
3c758                 | 
3c758     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3c75c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3c760     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3c764     B8 8B 03 A1 |         if_z    add     hr3,htmp
3c768                 | 
3c768     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3c76c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3c770                 | 
3c770                 |                 ' write back accumulators
3c770     28 04 64 FD |                 setq    #3-1
3c774     80 87 67 FC |                 wrlong  hr1,ptrb
3c778                 |                 ' if outptr set, write X/Y words
3c778     00 76 0F F2 |                 cmp htmp3,#0                    wz
3c77c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3c780     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3c784     2D 00 64 FD |                 ret
3c788                 | end
3c788                 | 
3c788                 | '------------------------------------------------------------------------------
3c788                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3c788                 | '------------------------------------------------------------------------------
3c788                 | ' On entry:
3c788                 | ' On exit:
3c788                 | '------------------------------------------------------------------------------
3c788                 | if _HAVE_GAMEPAD
3c788                 | hget_gp_in_report
3c788     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3c78c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3c790                 | 
3c790     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3c794     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3c798     00 90 E3 F8 |                 getbyte hpar3
3c79c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3c7a0     CF 02 A0 FD |                 call    #do_int_in
3c7a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c7a8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3c7ac                 | 
3c7ac     00 90 0F F2 |                 cmp     hpar3, #0               wz
3c7b0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3c7b4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3c7b4                 | 
3c7b4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3c7b8     00 70 E3 F8 |                 getbyte htmp                            ' |
3c7bc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3c7c0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3c7c4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3c7c8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3c7cc     B8 01 C0 F8 |                 setbyte htmp                            ' |
3c7d0                 | 
3c7d0                 | ' Note: the following code compares the current and previous reports
3c7d0                 | ' and process the data if there are changes to ease the debug output.
3c7d0                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3c7d0                 | ' gpPreReport buffer.
3c7d0                 | 
3c7d0                 |                 ' ----- start of block to remove
3c7d0                 |                 {
3c7d0                 |                 }
3c7d0                 |                 ' ----- end of block to remove
3c7d0     F4 04 90 FE |                 loc pa,#hpad_translate
3c7d4     2A EC 63 FD |                 push pa
3c7d8                 | 
3c7d8                 |                 ' FALL THROUGH !!!!
3c7d8                 | 
3c7d8                 | '------------------------------------------------------------------------------
3c7d8                 | ' Decode controller report
3c7d8                 | '------------------------------------------------------------------------------
3c7d8                 | hid_decode
3c7d8                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3c7d8     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3c7dc     00 04 00 FF 
3c7e0     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3c7e4                 | 
3c7e4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3c7e8                 | 
3c7e8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c7ec     00 2A E3 F8 |                 getbyte hidr_type
3c7f0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3c7f4     34 02 90 AD |         if_z    jmp     #hpad_xinput
3c7f8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3c7fc     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3c800     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3c804     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3c808     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3c80c                 |                 
3c80c                 | 
3c80c                 | '------------------------------------------------------------------------------
3c80c                 | ' Handle HID controller (or mouse now
3c80c                 | ' On entry:
3c80c                 | '   ptrb - controller report
3c80c                 | '------------------------------------------------------------------------------
3c80c                 | hpad_hid
3c80c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3c810     F7 F1 03 F6 |                 mov     ptra, pb
3c814     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3c818     00 EC 03 F6 |                 mov     pa, 0-0
3c81c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3c81c     19 2A 3B FF 
3c820     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3c824                 | 
3c824                 | .next
3c824     00 EC 5F F2 |                 cmps    pa, #0      wcz
3c828     2D 00 7C ED |         if_be   ret     wcz
3c82c                 | 
3c82c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3c830     01 EC 87 F1 |                 sub     pa, #1
3c834     00 8E 07 F6 |                 mov     hpar2, #0
3c838                 | 
3c838     C6 71 03 F6 |                 mov     htmp, hpar1
3c83c     03 70 07 F5 |                 and     htmp, #$03
3c840     01 70 0F F2 |                 cmp     htmp, #1    wz
3c844     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3c848     07 8E 67 A7 |         if_z    signx   hpar2,#7
3c84c     01 EC 87 A1 |         if_z    sub     pa, #1
3c850     02 70 0F F2 |                 cmp     htmp, #2    wz
3c854     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3c858     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3c85c     02 EC 87 A1 |         if_z    sub     pa, #2
3c860     03 70 0F F2 |                 cmp     htmp, #3    wz
3c864     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3c868     04 EC 87 A1 |         if_z    sub     pa, #4
3c86c                 | 
3c86c     FC 8C 07 F5 |                 and     hpar1, #$FC
3c870                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3c870                 | 
3c870     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3c874     0C 01 90 AD |         if_z    jmp     #.report_id
3c878     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3c87c     24 01 90 AD |         if_z    jmp     #.usage_page
3c880     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3c884     2C 01 90 AD |         if_z    jmp     #.usage
3c888     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3c88c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3c890     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3c894     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3c898     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3c89c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3c8a0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3c8a4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3c8a8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3c8ac     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3c8b0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3c8b4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3c8b8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3c8bc     64 FF 9F 5D |         if_nz   jmp     #.next
3c8c0                 | 
3c8c0     D8 1D A7 FB |                 tjf     hidr_state,#.next
3c8c4                 | 
3c8c4     03 8E 07 F5 |                 and     hpar2, #$03
3c8c8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3c8cc     18 00 90 5D |         if_nz   jmp     #.skip
3c8d0                 | 
3c8d0     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3c8d4     20 00 90 AD |         if_z    jmp     #.axes
3c8d8     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3c8dc     5C 00 90 AD |         if_z    jmp     #.hats
3c8e0     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3c8e4     70 00 90 AD |         if_z    jmp     #.buttons
3c8e8                 | .skip
3c8e8     8F 71 03 F6 |                 mov     htmp, hidr_size
3c8ec     90 71 03 FA |                 mul     htmp, hidr_count
3c8f0     B8 23 03 F1 |                 add     hidr_offset, htmp
3c8f4     2C FF 9F FD |                 jmp     #.next
3c8f8                 | .axes
3c8f8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3c8f8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3c8fc     90 87 03 F6 |                 mov     hr1, hidr_count
3c900                 | .l1
3c900     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3c904     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3c908     04 03 B0 FD |                 call    #hpad_getbits
3c90c     64 03 B0 FD |                 call    #hpad_normalize
3c910     06 84 1F F2 |                 cmp     hr0, #6         wcz
3c914     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3c918     00 88 43 C8 |         if_b    getnib  hr2
3c91c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3c920     5F 01 20 C9 |         if_b    setword retval
3c924     01 84 07 C1 |         if_b    add     hr0, #1
3c928     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3c92c     F4 87 6F FB |                 djnz    hr1, #.l1
3c930                 | 
3c930     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3c934     01 1C 07 F6 |                 mov     hidr_state, #1
3c938     E8 FE 9F FD |                 jmp     #.next
3c93c                 | .hats
3c93c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3c93c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3c940     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3c944     C8 02 B0 FD |                 call    #hpad_getbits
3c948     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3c94c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3c950     01 1C 07 F6 |                 mov     hidr_state, #1
3c954     90 FF 9F FD |                 jmp     #.skip
3c958                 | .buttons
3c958                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3c958     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3c95c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3c960     90 8F 03 FA |                 mul     hpar2, hidr_count
3c964     A8 02 B0 FD |                 call    #hpad_getbits
3c968     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3c96c     B8 BF 62 F0 |                 shl     retval, htmp
3c970     5F 17 43 F5 |                 or      hidr_buttons, retval
3c974     90 71 03 F1 |                 add     htmp, hidr_count
3c978     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3c97c     01 1C 07 F6 |                 mov     hidr_state, #1
3c980     64 FF 9F FD |                 jmp     #.skip
3c984                 | .report_id
3c984     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3c988     2D 00 7C 5D |         if_nz   ret     wcz
3c98c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3c990     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3c994     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3c998     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3c99c     01 F2 87 51 |         if_nz   sub     ptrb,#1
3c9a0     80 FE 9F FD |                 jmp     #.next
3c9a4                 | .usage_page
3c9a4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3c9a8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3c9ac     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3c9b0     70 FE 9F FD |                 jmp     #.next
3c9b4                 | .usage
3c9b4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3c9b8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3c9bc     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3c9c0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3c9c4     5C FE 9F AD |         if_z    jmp     #.next
3c9c8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3c9cc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3c9d0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3c9d4     4C FE 9F AD |         if_z    jmp     #.next
3c9d8     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3c9dc     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3c9e0     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3c9e4     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3c9e8     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3c9ec     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3c9f0     10 00 90 AD |         if_z    jmp     #.usage_axis
3c9f4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3c9f8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3c9fc     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3ca00     20 FE 9F FD |                 jmp     #.next
3ca04                 | .usage_axis
3ca04     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3ca08     18 FE 9F CD |         if_b    jmp     #.next
3ca0c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3ca10     C7 01 00 F8 |                 setnib  hpar2
3ca14                 | 
3ca14     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3ca18     C7 8F C3 F9 |                 decod   hpar2
3ca1c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3ca20                 | 
3ca20     01 24 07 F1 |                 add     hidr_usage_idx, #1
3ca24     02 1C 07 F6 |                 mov     hidr_state, #2
3ca28     F8 FD 9F FD |                 jmp     #.next
3ca2c                 | 
3ca2c                 | '------------------------------------------------------------------------------
3ca2c                 | ' Handle XInput controller
3ca2c                 | ' On entry:
3ca2c                 | '   ptrb - controller report
3ca2c                 | '------------------------------------------------------------------------------
3ca2c                 | '   Default implementation translates the report to a pseudo-defacto hid
3ca2c                 | '   standard and jumps to hpad_translate for actions.
3ca2c                 | '   Implementors may take specific actions for this kind of controller.
3ca2c                 | '------------------------------------------------------------------------------
3ca2c                 | hpad_xinput
3ca2c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3ca30     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3ca34     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3ca38     14 70 0F F2 |                 cmp     htmp, #$14      wz
3ca3c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3ca40                 | 
3ca40                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3ca40                 | 
3ca40     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3ca44     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3ca48                 | 
3ca48     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3ca4c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3ca50     5F BF 22 F6 |                 not     retval
3ca54     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3ca58     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3ca5c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3ca60     5F BF 22 F6 |                 not     retval
3ca64     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3ca68                 | 
3ca68     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3ca6c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3ca70     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3ca74     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3ca78     F8 01 B0 FD |                 call    #hpad_normalize
3ca7c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3ca80     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3ca84     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3ca88     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3ca8c     E4 01 B0 FD |                 call    #hpad_normalize
3ca90     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3ca94                 | 
3ca94     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ca98     81 BF E6 FA |                 rdword  retval, ptrb[1]
3ca9c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3caa0     00 16 47 F4 |                 bitc    hidr_buttons, #0
3caa4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3caa8     01 16 47 F4 |                 bitc    hidr_buttons, #1
3caac     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3cab0     02 16 47 F4 |                 bitc    hidr_buttons, #2
3cab4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3cab8     03 16 47 F4 |                 bitc    hidr_buttons, #3
3cabc     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3cac0     04 16 47 F4 |                 bitc    hidr_buttons, #4
3cac4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3cac8     05 16 47 F4 |                 bitc    hidr_buttons, #5
3cacc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3cad0     08 16 47 F4 |                 bitc    hidr_buttons, #8
3cad4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3cad8     09 16 47 F4 |                 bitc    hidr_buttons, #9
3cadc     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3cae0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3cae4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3cae8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3caec     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3caf0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3caf4                 | 
3caf4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3caf8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3cafc     7A BB 7A FF 
3cb00     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3cb04     F9 FF 7F FF 
3cb08     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3cb0c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3cb10     00 70 43 F8 |                 getnib  htmp
3cb14     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3cb18                 | 
3cb18     AC 01 90 FD |                 jmp     #hpad_translate
3cb1c                 | 
3cb1c                 | '------------------------------------------------------------------------------
3cb1c                 | ' Handle PS3 controller
3cb1c                 | ' On entry:
3cb1c                 | '   ptrb - controller report
3cb1c                 | '------------------------------------------------------------------------------
3cb1c                 | '   Default implementation translates the report to a pseudo-defacto hid
3cb1c                 | '   standard and jumps to hpad_translate for actions.
3cb1c                 | '   Implementors may take specific actions for this kind of controller.
3cb1c                 | '------------------------------------------------------------------------------
3cb1c                 | hpad_ps3
3cb1c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3cb20     01 70 0F F2 |                 cmp     htmp, #$01      wz
3cb24     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3cb28                 | 
3cb28                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3cb28                 | 
3cb28     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3cb2c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3cb30     40 01 B0 FD |                 call    #hpad_normalize
3cb34     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3cb38     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3cb3c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3cb40     30 01 B0 FD |                 call    #hpad_normalize
3cb44     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3cb48     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3cb4c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3cb50     20 01 B0 FD |                 call    #hpad_normalize
3cb54     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3cb58     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3cb5c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3cb60     10 01 B0 FD |                 call    #hpad_normalize
3cb64     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3cb68     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3cb6c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3cb70                 | 
3cb70     08 8C 07 F6 |                 mov     hpar1, #8
3cb74     13 8E 07 F6 |                 mov     hpar2, #19
3cb78     94 00 B0 FD |                 call    #hpad_getbits
3cb7c                 | 
3cb7c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3cb80     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3cb84     00 16 47 F4 |                 bitc    hidr_buttons, #0
3cb88     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3cb8c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3cb90     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3cb94     02 16 47 F4 |                 bitc    hidr_buttons, #2
3cb98     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3cb9c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3cba0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3cba4     04 16 47 F4 |                 bitc    hidr_buttons, #4
3cba8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3cbac     05 16 47 F4 |                 bitc    hidr_buttons, #5
3cbb0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3cbb4     06 16 47 F4 |                 bitc    hidr_buttons, #6
3cbb8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3cbbc     07 16 47 F4 |                 bitc    hidr_buttons, #7
3cbc0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3cbc4     08 16 47 F4 |                 bitc    hidr_buttons, #8
3cbc8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3cbcc     09 16 47 F4 |                 bitc    hidr_buttons, #9
3cbd0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3cbd4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3cbd8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3cbdc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3cbe0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3cbe4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3cbe8                 | 
3cbe8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3cbec     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3cbf0     09 FA 79 FF 
3cbf4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3cbf8     FF FA 7F FF 
3cbfc     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3cc00     B9 71 5F F9 |                 altgn   htmp, #htmp1
3cc04     00 70 43 F8 |                 getnib  htmp
3cc08     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3cc0c                 | 
3cc0c     B8 00 90 FD |                 jmp     #hpad_translate
3cc10                 | 
3cc10                 | '------------------------------------------------------------------------------
3cc10                 | ' Read bits from report data buffer
3cc10                 | '------------------------------------------------------------------------------
3cc10                 | ' On entry:
3cc10                 | '   PTRB - report buffer
3cc10                 | '   hpar1 - start bit
3cc10                 | '   hpar2 - number of bits
3cc10                 | ' On exit:
3cc10                 | '   retval - bits
3cc10                 | '------------------------------------------------------------------------------
3cc10                 | hpad_getbits
3cc10     C6 71 03 F6 |                 mov     htmp, hpar1
3cc14     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3cc18     F9 71 03 F1 |                 add     htmp, ptrb
3cc1c     B8 BF 02 FB |                 rdlong  retval, htmp
3cc20                 | 
3cc20     C6 73 03 F6 |                 mov     htmp1, hpar1
3cc24     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3cc28     B9 BF 42 F0 |                 shr     retval, htmp1
3cc2c                 | 
3cc2c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3cc30     10 00 90 1D |         if_a    jmp     #.l1
3cc34                 | 
3cc34     C7 8F C3 F9 |                 decod   hpar2
3cc38     01 8E 87 F1 |                 sub     hpar2, #1
3cc3c     C7 BF 02 F5 |                 and     retval, hpar2
3cc40     2D 00 64 FD |                 ret
3cc44                 | .l1
3cc44     FF 7F 00 FF 
3cc48     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3cc4c     03 70 07 F1 |                 add     htmp, #3
3cc50     B8 75 03 FB |                 rdlong  htmp2, htmp
3cc54     18 8E 87 F1 |                 sub     hpar2, #24
3cc58     C7 8F C3 F9 |                 decod   hpar2
3cc5c     01 8E 87 F1 |                 sub     hpar2, #1
3cc60     B9 75 43 F0 |                 shr     htmp2, htmp1
3cc64     C7 75 03 F5 |                 and     htmp2, hpar2
3cc68     18 74 67 F0 |                 shl     htmp2, #24
3cc6c     BA BF 42 F5 |                 or      retval, htmp2
3cc70     2D 00 64 FD |                 ret
3cc74                 | 
3cc74                 | '------------------------------------------------------------------------------
3cc74                 | ' Normalize value to signed word (-32768 / 32767)
3cc74                 | '------------------------------------------------------------------------------
3cc74                 | ' On entry:
3cc74                 | '   retval - value to normalize
3cc74                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3cc74                 | '   - or -
3cc74                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3cc74                 | '   hidr_size - value bits length
3cc74                 | ' On exit:
3cc74                 | '   retval - normalized value
3cc74                 | '------------------------------------------------------------------------------
3cc74                 | hpad_normalize
3cc74     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3cc78     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3cc7c     2D 00 64 AD |         if_z    ret
3cc80     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3cc84     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3cc88     0F 72 77 F7 |                 signx   htmp1, #15      wc
3cc8c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3cc90     00 BE 66 C7 |         if_c    signx   retval, #0-0
3cc94     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3cc98     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3cc9c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3cca0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3cca4     B8 71 53 F6 |                 abs     htmp            wc
3cca8     1F BE 0E F4 |                 testb   retval, #31     wz
3ccac     5F BF 42 F6 |                 abs     retval
3ccb0     B8 BF 12 FD |                 qdiv    retval, htmp
3ccb4     18 BE 62 FD |                 getqx   retval
3ccb8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ccbc     C0 FF 7F FF 
3ccc0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ccc4     2D 00 64 FD |                 ret
3ccc8                 | 
3ccc8                 | '------------------------------------------------------------------------------
3ccc8                 | ' Perform controller actions
3ccc8                 | ' On entry:
3ccc8                 | '    hidr_id        report id
3ccc8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3ccc8                 | '                      X = hidr_axis+0, #0
3ccc8                 | '                      Y = hidr_axis+0, #1
3ccc8                 | '                      Z = hidr_axis+1, #0
3ccc8                 | '                     RX = hidr_axis+1, #1
3ccc8                 | '                     RY = hidr_axis+2, #0
3ccc8                 | '                     RZ = hidr_axis+2, #1
3ccc8                 | '    hidr_buttons   buttons state (bits 0 to 31)
3ccc8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3ccc8                 | '
3ccc8                 | '                     -------3 -------2 -------1 -------0 byte
3ccc8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3ccc8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3ccc8                 | '                                zyx||| |||||||| ++++++++ n. buttons
3ccc8                 | '                                |||||| ||||++++--------- n. axes
3ccc8                 | '                                |||||| ++++------------- n. hats
3ccc8                 | '                                ++++++------------------ valid axes
3ccc8                 | '------------------------------------------------------------------------------
3ccc8                 | hpad_translate
3ccc8                 | 
3ccc8                 | 
3ccc8                 |         if HAVE_HIDPAD
3ccc8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3cccc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3ccd0     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3ccd4     01 70 E7 F2 |                 cmpsub  htmp,#1
3ccd8     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3ccdc     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3cce0     2D 00 7C 3D |         if_ae   ret     wcz
3cce4     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3cce8     B8 F3 03 F1 |                 add     ptrb,htmp
3ccec     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ccf0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3ccf4     28 0C 64 FD |                 setq    #7-1
3ccf8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3ccfc                 |         end
3ccfc                 | 
3ccfc                 | 
3ccfc                 |         if EMUPAD_MAX_PLAYER > 0
3ccfc                 | .emupad_no_hat
3ccfc                 |         if EMUPAD_BT0_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT1_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT2_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT3_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT4_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT5_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT6_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT7_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT8_BIT >= 0
3ccfc                 |         end
3ccfc                 |         if EMUPAD_BT9_BIT >= 0
3ccfc                 |         end
3ccfc                 | .emupad_slot_over
3ccfc                 |         end
3ccfc                 | 
3ccfc                 |         if 0
3ccfc                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3ccfc                 | 
3ccfc                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3ccfc                 | 
3ccfc                 |         end
3ccfc     2D 00 64 FD |                 ret
3cd00                 | end
3cd00                 | 
3cd00                 | if EMUPAD_MAX_PLAYER > 0
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | ' Clear EmuPad state
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | emupad_reset
3cd00                 | 
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | ' Get EmuPad Player number for current device (into retval)
3cd00                 | ' Z flag is also set if current device is valid
3cd00                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | emupad_getnum
3cd00                 | .loop
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | emupad_discon
3cd00                 | .loop         
3cd00                 |         
3cd00                 |         ' FALL THROUGH!!!
3cd00                 | 
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | ' Update EmuPad reports (all of them...)
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | emupad_write_reports
3cd00                 | .devloop
3cd00                 | 
3cd00                 | end
3cd00                 | 
3cd00                 | 
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | ' On entry:
3cd00                 | ' On exit:
3cd00                 | '------------------------------------------------------------------------------
3cd00                 | hget_hub_status
3cd00     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3cd04     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3cd08     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3cd0c     01 90 2F F9 |                 setword hpar3, #1, #1
3cd10     CF 02 A0 FD |                 call    #do_int_in
3cd14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3cd18     0C 00 90 AD |         if_z    jmp     #.data
3cd1c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3cd20     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3cd24     2D 00 64 FD |                 ret
3cd28                 | .data
3cd28     00 90 0F F2 |                 cmp     hpar3, #0               wz
3cd2c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3cd30                 | 
3cd30     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3cd34     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3cd38     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3cd3c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3cd40                 |                 debug(ubin_long(hub_status_chg))
3cd40                 | 
3cd40     01 5A 06 F6 |                 mov     hdev_port, #1
3cd44                 | .loop
3cd44     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3cd48     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3cd4c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3cd50     F0 FF 9F 3D |         if_nc   jmp     #.loop
3cd54     2D 00 64 FD |                 ret
3cd58                 | 
3cd58                 | hub_port_handler
3cd58     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3cd5c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cd60     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cd64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cd68     55 02 A0 FD |                 call    #control_read
3cd6c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3cd70                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3cd70                 | 
3cd70     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3cd74     50 01 90 5D |         if_x0   jmp     #.other
3cd78     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3cd7c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3cd80     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cd84     A0 02 A0 FD |                 call    #control_write
3cd88     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3cd8c     7C 01 90 5D |         if_x0   jmp     #.disconnect
3cd90     B0 99 02 F6 |                 mov     hctwait, _100ms_
3cd94     EF 02 A0 FD |                 call    #poll_waitx
3cd98                 | 
3cd98     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3cd9c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3cda0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cda4     A0 02 A0 FD |                 call    #control_write
3cda8                 | 
3cda8     02 76 07 F6 |                 mov     htmp3, #2
3cdac                 | .wait_reset
3cdac     AC 99 02 F6 |                 mov     hctwait, _8ms_
3cdb0     EF 02 A0 FD |                 call    #poll_waitx
3cdb4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cdb8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cdbc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cdc0     55 02 A0 FD |                 call    #control_read
3cdc4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3cdc8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3cdcc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3cdd0                 | 
3cdd0     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3cdd4     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3cdd8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cddc     A0 02 A0 FD |                 call    #control_write
3cde0                 | 
3cde0     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3cde4                 | .wait_recover
3cde4     A7 99 02 F6 |                 mov     hctwait, _1ms_
3cde8     EF 02 A0 FD |                 call    #poll_waitx
3cdec     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3cdf0                 | 
3cdf0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3cdf4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3cdf8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3cdfc                 | 
3cdfc     00 08 00 FF 
3ce00     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3ce04     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3ce08     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3ce0c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3ce10     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3ce14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce18     48 01 90 5D |         if_nz   jmp     #.done
3ce1c                 | .get_dev_desc
3ce1c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3ce20     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3ce24     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3ce28     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3ce2c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3ce30     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3ce34     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3ce38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce3c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3ce40     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ce44     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3ce48     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3ce4c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3ce50     BE 00 A0 FD |                 call    #calc_crc5
3ce54     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3ce58     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3ce5c     F7 AD C2 FA |                 rdbyte  total_data, pb
3ce60     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3ce64     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3ce68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce6c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3ce70     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3ce74     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3ce78                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3ce78     9F 99 02 F6 |                 mov     hctwait, _500us_
3ce7c     EF 02 A0 FD |                 call    #poll_waitx
3ce80     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3ce84     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3ce88     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3ce8c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3ce90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ce94     CC 00 90 5D |         if_nz   jmp     #.done
3ce98     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3ce9c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3cea0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3cea4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3cea8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3ceac     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3ceb0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3ceb4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3ceb8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3cebc     A4 00 90 CD |         if_b    jmp     #.done
3cec0     6C F0 BF FD |                 call    #hparse_con_desc
3cec4     9C 00 90 FD |                 jmp     #.done
3cec8                 | 
3cec8                 | .other
3cec8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3cecc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3ced0     28 00 90 AD |         if_x1   jmp     #.reset_feature
3ced4     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3ced8     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3cedc     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3cee0     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3cee4     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3cee8     10 00 90 AD |         if_x1   jmp     #.reset_feature
3ceec     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3cef0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3cef4     04 00 90 AD |         if_x1   jmp     #.reset_feature
3cef8     68 00 90 FD |                 jmp     #.done
3cefc                 | .reset_feature
3cefc     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3cf00     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cf04     A0 02 A0 FD |                 call    #control_write
3cf08     58 00 90 FD |                 jmp     #.done
3cf0c                 | .disconnect
3cf0c                 | 
3cf0c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3cf10     00 70 E3 F8 |                 getbyte htmp
3cf14     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3cf18     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3cf1c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3cf20     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3cf24     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3cf28     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3cf2c                 |         if EMUPAD_MAX_PLAYER > 0
3cf2c                 |         end
3cf2c                 |         if HAVE_MOUSE
3cf2c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3cf30     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3cf34     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3cf38                 |         end
3cf38                 |         if HAVE_HIDPAD
3cf38     14 0A F0 FE |                 loc ptrb,#hidpad_report
3cf3c     2D 71 03 F6 |                 mov htmp,hdev_port
3cf40     01 70 E7 F2 |                 cmpsub htmp,#1
3cf44     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3cf48     B8 F3 03 F1 |                 add ptrb,htmp
3cf4c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3cf50     80 01 6C FC |                 wrlong #0,ptrb
3cf54                 |         end
3cf54                 | 
3cf54     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3cf58     00 00 C4 F8 |                 setbyte #0
3cf5c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3cf60     00 00 04 F6 |                 mov     0-0, #0
3cf64                 | 
3cf64                 | .done
3cf64     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3cf68     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3cf6c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3cf70     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3cf74     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3cf78     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3cf7c                 | 
3cf7c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3cf80     27 EF 03 F6 |                 mov     pb, urx_buff_p
3cf84     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3cf88     55 02 A0 FD |                 call    #control_read
3cf8c     00 69 06 FB |                 rdlong  hub_port_status, ptra
3cf90                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3cf90     2D 00 64 FD |                 ret
3cf94                 | 
3cf94                 | '------------------------------------------------------------------------------
3cf94                 | ' Partially populated SETUP packets
3cf94                 | '------------------------------------------------------------------------------
3cf94     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3cf95     06          |                 byte    REQ_GET_DESC
3cf96     00 01       |                 word    TYPE_DEVICE << 8
3cf98     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3cf9a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cf9c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3cf9d     06          |                 byte    REQ_GET_DESC
3cf9e     00 02       |                 word    TYPE_CONFIG << 8
3cfa0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3cfa2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cfa4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3cfa5     09          |                 byte    REQ_SET_CONFIG
3cfa6     00 00       |                 word    0       ' Configuration value
3cfa8     00 00       |                 word    0       ' Zero
3cfaa     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3cfac     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3cfad     05          |                 byte    REQ_SET_ADDR
3cfae     00 00       |                 word    0       ' Zero
3cfb0     00 00       |                 word    0       ' Zero
3cfb2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3cfb4                 | '------------------------------------------------------------------------------
3cfb4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3cfb4                 | ' wValue field dictates which protocol should be used.
3cfb4                 | '
3cfb4                 | ' When initialized, all devices default to report protocol. However the host
3cfb4                 | ' should not make any assumptions about the device state and should set the
3cfb4                 | ' desired protocol whenever initializing a device.
3cfb4                 | '------------------------------------------------------------------------------
3cfb4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3cfb5     0B          |                 byte    HID_SET_PROTO
3cfb6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3cfb8                 |                                                 ' (HID 1.11 Section 7.2.6).
3cfb8     00 00       |                 word    0               ' Interface index number.
3cfba     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3cfbc                 | '------------------------------------------------------------------------------
3cfbc     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3cfbd     0A          |                 byte    HID_SET_IDLE
3cfbe     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3cfc0                 |                                         ' reporting until a change is detected in the report data
3cfc0                 | 
3cfc0                 |                                         ' (HID 1.11 Section 7.2.4).
3cfc0     00 00       |                 word    0       ' Interface index number.
3cfc2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3cfc4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3cfc5     09          |                 byte    HID_SET_REPORT
3cfc6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3cfc8                 |                                         ' (HID 1.11 Section 7.2.2).
3cfc8     00 00       |                 word    0       ' Interface index number.
3cfca     00 00       |                 word    0       ' Size of the report, in bytes.
3cfcc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3cfcd     06          |                 byte    REQ_GET_DESC
3cfce     00 22       |                 word    TYPE_REPORT << 8
3cfd0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3cfd2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cfd4                 | '------------------------------------------------------------------------------
3cfd4     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3cfd5     06          |                 byte    REQ_GET_DESC
3cfd6     00 29       |                 word    TYPE_HUB << 8
3cfd8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3cfda     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cfdc     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3cfdd     03          |                 byte    REQ_SET_FEATURE
3cfde     00 00       |                 word    0       ' port power
3cfe0     01 00       |                 word    1       ' Port index number (1+)
3cfe2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cfe4     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3cfe5     01          |                 byte    REQ_CLEAR_FEATURE
3cfe6     00 00       |                 word    0       ' port power
3cfe8     01 00       |                 word    1       ' Port index number (1+)
3cfea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3cfec     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3cfed     00          |                 byte    REQ_GET_STATUS
3cfee     00 00       |                 word    0
3cff0     01 00       |                 word    1       ' Port index number (1+)
3cff2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3cff4                 | '------------------------------------------------------------------------------
3cff4                 | if _HAVE_GAMEPAD
3cff4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3cff8                 | ps3_command_buff
3cff8     00 00 00 00 
3cffc     00          |                 byte    $00, $00, $00, $00, $00
3cffd     00 00 00 00 
3d001     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3d002     FF 27 10 00 
3d006     32          |                 byte    $FF, $27, $10, $00, $32
3d007     FF 27 10 00 
3d00b     32          |                 byte    $FF, $27, $10, $00, $32
3d00c     FF 27 10 00 
3d010     32          |                 byte    $FF, $27, $10, $00, $32
3d011     FF 27 10 00 
3d015     32          |                 byte    $FF, $27, $10, $00, $32
3d016     00 00 00 00 
3d01a     00          |                 byte    $00, $00, $00, $00, $00
3d01b     00 00 00 00 
3d01f     00          |                 byte    $00, $00, $00, $00, $00
3d020     00 00 00 00 
3d024     00          |                 byte    $00, $00, $00, $00, $00
3d025     00 00 00    |                 byte    $00, $00, $00
3d028                 | '------------------------------------------------------------------------------
3d028     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3d02b                 |                                         ' 0x01 All blinking
3d02b                 |                                         ' 0x02 1 flashes, then on
3d02b                 |                                         ' 0x03 2 flashes, then on
3d02b                 |                                         ' 0x04 3 flashes, then on
3d02b                 |                                         ' 0x05 4 flashes, then on
3d02b                 |                                         ' 0x06 1 on
3d02b                 |                                         ' 0x07 2 on
3d02b                 |                                         ' 0x08 3 on
3d02b                 |                                         ' 0x09 4 on
3d02b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3d02b                 |                                         ' 0x0B Blinking*
3d02b                 |                                         ' 0x0C Slow blinking*
3d02b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3d02b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3d02e     00          |                 byte    $00             ' Left rumble
3d02f     00          |                 byte    $00             ' Right rumble
3d030     00 00 00    |                 byte    $00, $00, $00
3d033     00          | end
3d034                 | alignl
3d034                 | 
3d034                 | if HAVE_MOUSE
3d034     00 00 00 00 
3d038     00 00 00 00 | mouse_limits long 0[2]
3d03c     00 00 00 00 | mouse_outptr long 0
3d040                 | end
3d040                 | 
3d040                 | if KEYQUEUE_SIZE > 0
3d040     00          | keyq_head byte 0
3d041     00          | keyq_tail byte 0
3d042     00 00 00 00 
      ...             
3d23e     00 00 00 00 
3d242     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3d244                 | alignl
3d244                 | end
3d244                 | 
3d244                 | if EMUPAD_MAX_PLAYER > 0
3d244                 | emupad_rule_buffer
3d244                 | if EMUPAD_BUILTIN_RULES
3d244                 | file "padmap_builtin.dat"
3d244                 | end
3d244                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3d244                 | '' Default rule directly follows!
3d244                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3d244                 | end
3d244                 | 
3d244                 | '------------------------------------------------------------------------------
3d244                 | ' The USB data cache area gets zero-filled at every device disconnect
3d244                 | '------------------------------------------------------------------------------
3d244                 | usb_cache_start
3d244                 | 
3d244                 | ' HID descriptor and report buffers
3d244                 | if !!OVERLAP_MEMORY
3d244     00 00 00 00 
      ...             
3d93c     00 00 00 00 
3d940     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3d944                 | end
3d944     00 00 00 00 
3d948     00 00 00 00 | hkbd_report     byte    0[8]
3d94c     00 00 00 00 | hkbd_led_rep    byte    0
3d950                 | alignl
3d950                 | 
3d950                 | if HAVE_HIDPAD
3d950     00 00 00 00 
      ...             
3da0c     00 00 00 00 
3da10     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3da14                 | end
3da14                 | 
3da14                 | ' HUB descriptor
3da14     00          | hub_descr       byte    0   ' bDescLength
3da15     00          |                 byte    0   ' bDescriptorType
3da16     00          |                 byte    0   ' bNbrPorts
3da17     00 00       |                 word    0   ' wHubCharacteristics
3da19     00          |                 byte    0   ' bPwrOn2PwrGood
3da1a     00          |                 byte    0   ' bHubContrCurrent
3da1b     00          |                 byte    0   ' DeviceRemoveable
3da1c     00          |                 byte    0   ' PortPwrCtrlMask
3da1d                 | 
3da1d                 | usb_cache_end
3da1d                 | 
3da1d                 | if HAVE_MOUSE
3da1d     00 00 00 00 | mouse_xacc      long 0
3da21     00 00 00 00 | mouse_yacc      long 0
3da25     00 00 00 00 | mouse_zacc      long 0
3da29     00          | mouse_bstate    byte 0
3da2a     00          | mouse_lpending  byte 0
3da2b     00          | mouse_rpending  byte 0
3da2c     00          | mouse_mpending  byte 0
3da2d     00          | mouse_lock      byte 0
3da2e     00 00 00    |                 byte 0[3] ' padding
3da31                 | end
3da31                 | 
3da31     00 00 00 00 
      ...             
3daa9     00 00 00 00 
3daad     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3dab1     00 00 00 00 
3dab5     00 00 00 00 
3dab9     00 00 00 00 
3dabd     00 00 00 00 
3dac1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3dac3     00 00 00 00 
      ...             
3dbbb     00 00 00 00 
3dbbf     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3dbc3                 | 
3dbc3     00          | driver_cog      byte    0                       ' Current driver cog + 1
3dbc4                 | 	alignl
3dbc4                 | _audio096_spin2_dat_
3dbc4                 | 
3dbc4                 | audio       org     0
3dbc4                 | 
3dbc4     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3dbc8     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3dbcc     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3dbd0                 |  
3dbd0     01 EC 63 FD |             cogid   pa                   ' compute cogid
3dbd4     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3dbd8     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3dbdc     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3dbe0                 | 
3dbe0     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3dbe4     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3dbe8     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3dbec     0F 24 06 FC |             wrpin   dac2,#right
3dbf0     0F 00 1E FC |             wxpin   #256,#right    
3dbf4     41 9C 64 FD |             dirh    #left addpins 1
3dbf8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3dbfc     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3dc00     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3dc04                 |             
3dc04                 | '---------------------------------------------------------------------------------        
3dc04                 | '----------------- The main loop -------------------------------------------------
3dc04                 | '---------------------------------------------------------------------------------
3dc04                 | 
3dc04     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3dc08     10 00 90 CD |       if_c  jmp     #loop1
3dc0c                 |   
3dc0c     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3dc10     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3dc14     D5 00 80 F1 |             sub     0-0,a40000000
3dc18     FD 01 6E FB |             djnz    cn,#p402
3dc1c                 |     
3dc1c     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3dc20     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3dc24     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3dc28     01 00 06 C6 |     if_c    mov     cn,#1
3dc2c     DA 02 3A F3 |             fle     ct,time3 wcz
3dc30     02 00 06 C6 |     if_c    mov     cn,#2     
3dc34     DB 02 3A F3 |             fle     ct,time4 wcz
3dc38     03 00 06 C6 |     if_c    mov     cn,#3
3dc3c     DC 02 3A F3 |             fle     ct,time5 wcz
3dc40     04 00 06 C6 |     if_c    mov     cn,#4
3dc44     DD 02 3A F3 |             fle     ct,time6 wcz
3dc48     05 00 06 C6 |     if_c    mov     cn,#5
3dc4c     DE 02 3A F3 |             fle     ct,time7 wcz
3dc50     06 00 06 C6 |     if_c    mov     cn,#6
3dc54     DF 02 3A F3 |             fle     ct,time8 wcz
3dc58     07 00 06 C6 |     if_c    mov     cn,#7
3dc5c                 | 
3dc5c                 | 
3dc5c                 | '----------------------------------------------------------------------------------
3dc5c                 | '------------- Compute channel samples --------------------------------------------
3dc5c                 | '----------------------------------------------------------------------------------
3dc5c                 | 
3dc5c                 | 
3dc5c     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3dc60     06 C0 65 F0 |             shl     channeladd,#6
3dc64     E0 F0 03 F1 |             add     ptra,channeladd
3dc68                 | 
3dc68     28 16 64 FD |             setq    #11                        	' read parameters
3dc6c     00 D7 05 FB |             rdlong  pointer0,ptra
3dc70                 |     	    
3dc70     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3dc74     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3dc78     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3dc7c     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3dc80     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3dc84     00 C4 0D F2 |             cmp     qq,#0 wz                         
3dc88     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3dc8c     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3dc90                 |             
3dc90     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3dc94     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3dc98     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3dc9c                 | 
3dc9c     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3dca0     EC 08 3A F9 |             getword oldrs,sample0,#1
3dca4     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3dca8     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3dcac     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3dcb0     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3dcb4                 | 
3dcb4     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3dcb8     00 04 02 F6 |             mov     dt0,0-0    
3dcbc     D7 04 82 F1 |             sub     dt0,time0
3dcc0                 |             
3dcc0     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3dcc4     FB 00 00 F1 |             add     0-0,afreq0  	
3dcc8                 |             
3dcc8                 | '---- envelopes
3dcc8                 |             
3dcc8     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3dccc     20 00 00 AF 
3dcd0     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3dcd4     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3dcd8                 | 
3dcd8     FB 48 02 F6 |             mov     envs1,afreq0
3dcdc     F5 48 02 FA |             mul     envs1,envspd0
3dce0     24 E7 01 F1 |             add     envph0,envs1 
3dce4                 | 
3dce4     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3dce8     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3dcec     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3dcf0     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3dcf4     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3dcf8     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3dcfc     00 46 06 36 |     if_ge   mov     envlo,#0
3dd00     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3dd04     16 E6 65 30 |     if_ge   shl     envph0,#22
3dd08                 | 
3dd08     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3dd0c     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3dd10     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3dd14     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3dd18     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3dd1c     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3dd20     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3dd24     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3dd28     23 49 02 FA |             mul     envs1,envlo
3dd2c     25 49 02 F1 |             add     envs1,envs2
3dd30     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3dd34                 |             
3dd34     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3dd38     1B C6 61 AD |     if_z    getrnd  spl
3dd3c     58 00 90 AD |     if_z    jmp     #p406
3dd40                 |  
3dd40     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3dd44     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3dd48     08 D6 45 F0 |             shr     pointer0,#8
3dd4c                 |          
3dd4c     1F DA 0D F4 |             testb   sstart0,#31 wz            
3dd50     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3dd54     1C DA 0D F4 |             testb   sstart0,#28 wz            
3dd58     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3dd5c                 |         
3dd5c     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3dd60     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3dd64     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3dd68                 |             
3dd68     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3dd6c     ED C4 01 F1 |             add     qq,sstart0            
3dd70                 | 
3dd70     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3dd74     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3dd78     1C 01 B0 1D |     if_gt   call    #cache_read
3dd7c                 |          
3dd7c     1F DA 0D F4 |             testb   sstart0,#31 wz 
3dd80     08 C6 65 50 |     if_nz   shl     spl,#8
3dd84     08 D6 65 50 |     if_nz   shl     pointer0,#8
3dd88     07 D6 65 A0 |     if_z    shl     pointer0,#7
3dd8c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3dd90     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3dd94     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3dd98                 | 
3dd98                 | 
3dd98     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3dd9c     00 C6 01 F6 |             mov     spl,0-0
3dda0     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3dda4     00 C6 01 F6 |             mov     spl,0-0
3dda8                 | 
3dda8     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3ddac     00 0A 02 F6 |             mov     ls0,0-0
3ddb0     20 00 00 FF 
3ddb4     00 C4 05 F6 |             mov     qq,##16384
3ddb8     FE C4 81 F1 |             sub     qq,apan0
3ddbc     E2 C6 31 FA |             scas    spl,qq
3ddc0     00 0C 02 F6 |             mov     rs0, 0-0
3ddc4                 | 
3ddc4     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3ddc8     06 11 02 F1 |             add     rs,rs0
3ddcc     03 0F 82 F1 |             sub     ls,oldls
3ddd0     05 0F 02 F1 |             add     ls,ls0
3ddd4                 |    
3ddd4     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3ddd8     05 D9 21 F9 |             setword sample0,ls0,#0
3dddc                 |             
3dddc     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3dde0     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3dde4     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3dde8                 |   '  if_z    mov     sample0,#0
3dde8     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3ddec     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3ddf0     04 00 00 AF 
3ddf4     00 B0 05 A1 |     if_z    add     time1,##2048
3ddf8     D8 B2 01 A6 |     if_z    mov     time2,time1
3ddfc     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3de00                 | 
3de00     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3de04     00 D7 65 FC |             wrlong  pointer0,ptra
3de08     08 E7 65 FC |             wrlong  envph0,ptra[8]
3de0c     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3de10                 |                       
3de10     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3de14     FF C3 25 A7 |     if_z    decmod  front, #511          
3de18                 |          
3de18     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3de1c     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3de20     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3de24     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3de28                 | 	    
3de28                 | 		    
3de28     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3de2c     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3de30     04 15 02 F6 |             mov     newsample, oldrs       
3de34                 | 
3de34     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3de38     02 AF 01 F1 |             add     time0,dt0    
3de3c                 |                                      
3de3c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3de40     D8 FD 9F AD |     if_z    jmp     #loop1
3de44     02 C5 01 F6 |             mov     qq,dt0
3de48                 | 
3de48                 |     
3de48                 |             
3de48     01 4E 36 F0 | p301        rol     dropper,#1 wc
3de4c     40 00 90 3D |     if_nc   jmp     #p399
3de50     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3de54     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3de58     F4 FF 9F AD |     if_e    jmp     #p398   
3de5c                 | 		
3de5c     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3de60     20 00 90 AD |     if_z    jmp     #p302	   
3de64                 |   
3de64     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3de68     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3de6c     02 1E 66 C0 |     if_c    shl     scptr2,#2
3de70     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3de74     60 1E 66 FC |             wrlong  scptr2,#$60
3de78     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3de7c     01 00 00 CF 
3de80     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3de84                 | 			    
3de84     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3de88     00 00 00 FF 
3de8c     FF C3 05 F7 |             incmod  front, ##511
3de90     ED C5 6D FB | p399        djnz    qq,#p301
3de94                 |             
3de94     6C FD 9F FD |             jmp     #loop            'loop
3de98                 | 
3de98                 | '----------------------------------------------------------------------------------
3de98                 | '------------- This is the end of the main loop -----------------------------------
3de98                 | '----------------------------------------------------------------------------------
3de98                 | 
3de98                 | '----------------------------------------------------------------------------------
3de98                 | '------------- PSRAM cache ----------- --------------------------------------------
3de98                 | '----------------------------------------------------------------------------------
3de98                 | 
3de98                 | ' There are 8 cache pointers for 8 channels
3de98                 | ' if 24 higher bits of address=cache, then get a word from the cache
3de98                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3de98                 | 
3de98                 | 
3de98     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3de9c                 |             
3de9c     E2 40 02 F6 | 	    mov     addrhi,qq		
3dea0     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3dea4     14 01 96 F9 | 	    alts    cn,#cache1            
3dea8     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3deac     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3deb0                 | 	
3deb0     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3deb4     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3deb8     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3debc     08 38 66 F0 | 	    shl     cmd,#8
3dec0     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3dec4     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3dec8     08 3A 66 F0 |             shl     hubaddr,#8                  '
3decc     13 3B 02 F1 |             add     hubaddr,hubptr 
3ded0     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3ded4     28 04 64 FD |             setq    #2                          ' write 3 longs
3ded8     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3dedc     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3dee0     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3dee4                 |             
3dee4                 | 	
3dee4     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3dee8     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3deec     13 C5 01 F1 | 	    add     qq,hubptr
3def0     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3def4     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3def8                 |           
3def8                 | 
3def8                 | '--------------------------------------------------------------------------
3def8                 | '------ Interrupt service -------------------------------------------------
3def8                 | '------ Output the sample, get the next one if exists ---------------------
3def8                 | '--------------------------------------------------------------------------
3def8                 | 
3def8     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3defc     0F D0 25 FC |             wypin   rsample,#right       '4
3df00     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3df04     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3df08     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3df0c     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3df10     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3df14                 |     
3df14     F5 FF 3B FB |             reti1                        '17/19 
3df18                 |           
3df18                 | '---------------------------------------------------------------------------
3df18                 | '-------- End of interrupt -------------------------------------------------
3df18                 | '---------------------------------------------------------------------------    
3df18                 | 
3df18                 | 
3df18                 | '---------------------------------------------------------------------------
3df18                 | '------- Variables ---------------------------------------------------------
3df18                 | '---------------------------------------------------------------------------
3df18                 | 
3df18                 | ' constants
3df18                 | 
3df18     00 00 00 40 | a40000000   long $40000000
3df1c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3df20                 | 
3df20                 | ' Time variables
3df20                 | 
3df20     00 00 00 00 | time0       long 0    ' Global sample computing time
3df24     01 00 00 00 | time1       long 1    ' Local channels time
3df28     02 00 00 00 | time2       long 2
3df2c     03 00 00 00 | time3       long 3
3df30     04 00 00 00 | time4       long 4
3df34     05 00 00 00 | time5       long 5
3df38     06 00 00 00 | time6       long 6
3df3c     07 00 00 00 | time7       long 7
3df40     08 00 00 00 | time8       long 8
3df44                 | 
3df44     00 00 00 00 | channeladd long 0
3df48                 | 
3df48     00 00 00 00 | front       long 0
3df4c                 | 
3df4c                 | ' temporary variables 
3df4c     00 00 00 00 | qq          long 0
3df50     00 00 00 00 | spl         long 0
3df54     00 00 00 00 | zero        long 0
3df58     00 00 00 00 | mailbox     long 0
3df5c     00 00 00 00 | mailbox2 long 0
3df60                 | 
3df60                 | ' Interrupt ISR variables
3df60                 | 
3df60     00 00 00 00 | lsample     long 0
3df64     00 00 00 00 | rsample     long 0
3df68     00 00 00 00 | lsnext      long 0
3df6c     00 00 00 00 | rsnext      long 0 
3df70                 | 
3df70                 | ' channel parameter block
3df70                 | 
3df70     00 00 00 00 | pointer0    long 0     
3df74     00 00 00 00 | sample0     long 0
3df78     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3df7c     00 00 00 00 | lstart0     long 0
3df80     00 00 00 00 | lend0       long 0
3df84     00 00 00 00 | volpan0     long 0
3df88     00 00 00 00 | freqskip0   long 0
3df8c     00 00 00 00 | command0    long 0
3df90     00 00 00 00 | envph0	    long 0
3df94     00 00 00 00 | envptr0	    long 0
3df98     00 00 00 00 | envspd0	    long 0
3df9c     00 00 00 00 | envlen0	    long 0
3dfa0     00 00 00 00 | res5	    long 0
3dfa4     00 00 00 00 | res6	    long 0
3dfa8     00 00 00 00 | res7	    long 0
3dfac     00 00 00 00 | res8	    long 0
3dfb0                 | 
3dfb0     00 00 00 00 | afreq0      long 0
3dfb4     00 00 00 00 | askip0      long 0
3dfb8     00 00 00 00 | avol0       long 0
3dfbc     00 00 00 00 | apan0       long 0
3dfc0                 | 
3dfc0     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3dfc4     00 00 00 00 | cn          long 0
3dfc8     00 00 00 00 | ct          long 0
3dfcc     00 00 00 00 | dt0         long 0
3dfd0                 | 
3dfd0                 | ' Samples
3dfd0     00 00 00 00 | oldls       long 0
3dfd4     00 00 00 00 | oldrs       long 0
3dfd8                 | 
3dfd8     00 00 00 00 | ls0         long 0
3dfdc     00 00 00 00 | rs0         long 0
3dfe0                 | 
3dfe0     00 00 00 00 | ls          long 0    
3dfe4     00 00 00 00 | rs          long 0
3dfe8                 | 
3dfe8     00 00 00 00 | oldsample   long 0
3dfec     00 00 00 00 | newsample   long 0
3dff0                 | 
3dff0     00 00 00 00 | nrsample    long 0
3dff4     00 00 00 00 | nlsample    long 0
3dff8                 | 
3dff8     00 00 00 00 | scbase long 0
3dffc     00 00 00 00 | scptr long 0
3e000     00 00 00 00 | scptr2 long 0
3e004     00 00 00 00 | scope long 0
3e008                 | 
3e008     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3e00c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3e010                 | 
3e010     00 18 07 00 | hubptr      long $71800
3e014     00 00 00 00 | cache1      long 0
3e018     00 00 00 00 | cache2      long 0
3e01c     00 00 00 00 | cache3      long 0
3e020     00 00 00 00 | cache4      long 0
3e024     00 00 00 00 | cache5      long 0
3e028     00 00 00 00 | cache6      long 0
3e02c     00 00 00 00 | cache7      long 0
3e030     00 00 00 00 | cache8      long 0
3e034                 | 
3e034                 | 
3e034     00 00 00 00 | cmd         long 0
3e038     00 00 00 00 | hubaddr     long 0
3e03c     00 01 00 00 | count       long 256
3e040     00 00 00 00 | addrlo long 0
3e044     00 00 00 00 | addrhi long 0
3e048     00 00 00 00 | pointer00 long 0
3e04c     00 00 00 00 | envhi long 0
3e050     00 00 00 00 | envlo long 0
3e054     00 00 00 00 | envs1 long 0
3e058     00 00 00 00 | envs2 long 0
3e05c     00 00 00 00 | noise0 long 0
3e060     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3e064     00 00 00 00 
3e068     00 00 00 00 | null  			long 	0,0           ' for channel reset
3e06c                 | 	alignl
3e06c                 | __system__dat_
3e06c     00 00 00 00 
3e070     00 00 00 00 | 	byte	$00[8]
3e074     03 00 00 00 
3e078     00 00 00 00 
3e07c     00 00 00 00 
3e080     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e084     00 00 00 00 
      ...             
3e310     00 00 00 00 
3e314     00 00 00 00 | 	byte	$00[660]
3e318     00 00 D0 09 | 	long	(157 {__system____root_opendir})<<20
3e31c     00 00 E0 09 | 	long	(158 {__system____root_closedir})<<20
3e320     00 00 F0 09 | 	long	(159 {__system____root_readdir})<<20
3e324     00 00 00 0A | 	long	(160 {__system____root_stat})<<20
3e328     00 00 00 00 
3e32c     00 00 00 00 
3e330     00 00 00 00 
3e334     00 00 00 00 
3e338     00 00 00 00 
3e33c     00 00 00 00 
3e340     00 00 00 00 | 	byte	$00[28]
3e344     AC E3 03 00 | 	long	@@@__system__dat_ + 832
3e348     AF E3 03 00 | 	long	@@@__system__dat_ + 835
3e34c     D0 E3 03 00 | 	long	@@@__system__dat_ + 868
3e350     E9 E3 03 00 | 	long	@@@__system__dat_ + 893
3e354     04 E4 03 00 | 	long	@@@__system__dat_ + 920
3e358     1E E4 03 00 | 	long	@@@__system__dat_ + 946
3e35c     2E E4 03 00 | 	long	@@@__system__dat_ + 962
3e360     40 E4 03 00 | 	long	@@@__system__dat_ + 980
3e364     52 E4 03 00 | 	long	@@@__system__dat_ + 998
3e368     64 E4 03 00 | 	long	@@@__system__dat_ + 1016
3e36c     70 E4 03 00 | 	long	@@@__system__dat_ + 1028
3e370     81 E4 03 00 | 	long	@@@__system__dat_ + 1045
3e374     95 E4 03 00 | 	long	@@@__system__dat_ + 1065
3e378     9F E4 03 00 | 	long	@@@__system__dat_ + 1075
3e37c     AF E4 03 00 | 	long	@@@__system__dat_ + 1091
3e380     BE E4 03 00 | 	long	@@@__system__dat_ + 1106
3e384     D4 E4 03 00 | 	long	@@@__system__dat_ + 1128
3e388     ED E4 03 00 | 	long	@@@__system__dat_ + 1153
3e38c     01 E5 03 00 | 	long	@@@__system__dat_ + 1173
3e390     0F E5 03 00 | 	long	@@@__system__dat_ + 1187
3e394     23 E5 03 00 | 	long	@@@__system__dat_ + 1207
3e398     2F E5 03 00 | 	long	@@@__system__dat_ + 1219
3e39c     41 E5 03 00 | 	long	@@@__system__dat_ + 1237
3e3a0     59 E5 03 00 | 	long	@@@__system__dat_ + 1261
3e3a4     6B E5 03 00 | 	long	@@@__system__dat_ + 1279
3e3a8     7E E5 03 00 | 	long	@@@__system__dat_ + 1298
3e3ac     4F 4B 00 4E 
3e3b0     75 6D 65 72 
3e3b4     69 63 61 6C 
3e3b8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3e3bc     75 6D 65 6E 
3e3c0     74 20 6F 75 
3e3c4     74 20 6F 66 
3e3c8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3e3cc     61 69 6E 00 
3e3d0     52 65 73 75 
3e3d4     6C 74 20 6E 
3e3d8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3e3dc     65 70 72 65 
3e3e0     73 65 6E 74 
3e3e4     61 62 6C 65 
3e3e8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3e3ec     65 67 61 6C 
3e3f0     20 6D 75 6C 
3e3f4     74 69 62 79 
3e3f8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3e3fc     65 71 75 65 
3e400     6E 63 65 00 
3e404     4E 6F 20 73 
3e408     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3e40c     66 69 6C 65 
3e410     20 6F 72 20 
3e414     64 69 72 65 
3e418     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e41c     79 00 42 61 
3e420     64 20 66 69 
3e424     6C 65 20 6E 
3e428     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3e42c     72 00 50 65 
3e430     72 6D 69 73 
3e434     73 69 6F 6E 
3e438     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3e43c     69 65 64 00 
3e440     4E 6F 74 20 
3e444     65 6E 6F 75 
3e448     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3e44c     65 6D 6F 72 
3e450     79 00 54 65 
3e454     6D 70 6F 72 
3e458     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3e45c     66 61 69 6C 
3e460     75 72 65 00 
3e464     46 69 6C 65 
3e468     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3e46c     73 74 73 00 
3e470     49 6E 76 61 
3e474     6C 69 64 20 
3e478     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3e47c     6D 65 6E 74 
3e480     00 54 6F 6F 
3e484     20 6D 61 6E 
3e488     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3e48c     65 6E 20 66 
3e490     69 6C 65 73 
3e494     00 49 2F 4F 
3e498     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3e49c     6F 72 00 4E 
3e4a0     6F 74 20 61 
3e4a4     20 64 69 72 
3e4a8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3e4ac     72 79 00 49 
3e4b0     73 20 61 20 
3e4b4     64 69 72 65 
3e4b8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3e4bc     79 00 52 65 
3e4c0     61 64 20 6F 
3e4c4     6E 6C 79 20 
3e4c8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3e4cc     20 73 79 73 
3e4d0     74 65 6D 00 
3e4d4     46 75 6E 63 
3e4d8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3e4dc     20 6E 6F 74 
3e4e0     20 69 6D 70 
3e4e4     6C 65 6D 65 
3e4e8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3e4ec     00 44 69 72 
3e4f0     65 63 74 6F 
3e4f4     72 79 20 6E 
3e4f8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3e4fc     6D 70 74 79 
3e500     00 4E 61 6D 
3e504     65 20 74 6F 
3e508     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3e50c     6E 67 00 44 
3e510     65 76 69 63 
3e514     65 20 6E 6F 
3e518     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3e51c     65 6B 61 62 
3e520     6C 65 00 42 
3e524     61 64 20 61 
3e528     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3e52c     73 73 00 42 
3e530     72 6F 6B 65 
3e534     6E 20 63 6F 
3e538     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3e53c     74 69 6F 6E 
3e540     00 44 65 76 
3e544     69 63 65 20 
3e548     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3e54c     65 73 6F 75 
3e550     72 63 65 20 
3e554     62 75 73 79 
3e558     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3e55c     73 73 20 64 
3e560     65 76 69 63 
3e564     65 20 6C 69 
3e568     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3e56c     6F 20 73 70 
3e570     61 63 65 20 
3e574     6F 6E 20 64 
3e578     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3e57c     65 00 55 6E 
3e580     6B 6E 6F 77 
3e584     6E 20 65 72 
3e588     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3e58c     00 00 00 00 
3e590     00 00 00 00 
3e594     00 00 00 00 | 	byte	$00[12]
3e598     05 00 00 00 
3e59c     00 00 00 00 
3e5a0     00 00 00 00 
3e5a4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e5a8     00 00 00 00 | 	byte	$00, $00, $00, $00
3e5ac     00 00 50 0B | 	long	(181 {__system___tx})<<20
3e5b0     00 00 60 0B | 	long	(182 {__system___rx})<<20
3e5b4     00 00 00 00 | 	byte	$00, $00, $00, $00
3e5b8     00 00 70 0B | 	long	(183 {__system___rxtxioctl_0735})<<20
3e5bc     00 00 80 0B | 	long	(184 {__system____dummy_flush_0736})<<20
3e5c0     00 00 00 00 
3e5c4     00 00 00 00 | 	byte	$00[8]
3e5c8     01 00 00 00 
3e5cc     06 00 00 00 
3e5d0     00 00 00 00 
3e5d4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e5d8     00 00 00 00 
3e5dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e5e0     00 00 50 0B | 	long	(181 {__system___tx})<<20
3e5e4     00 00 60 0B | 	long	(182 {__system___rx})<<20
3e5e8     00 00 00 00 | 	byte	$00, $00, $00, $00
3e5ec     00 00 70 0B | 	long	(183 {__system___rxtxioctl_0735})<<20
3e5f0     00 00 80 0B | 	long	(184 {__system____dummy_flush_0736})<<20
3e5f4     00 00 00 00 
3e5f8     00 00 00 00 | 	byte	$00[8]
3e5fc     01 00 00 00 
3e600     06 00 00 00 
3e604     00 00 00 00 
3e608     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e60c     00 00 00 00 
3e610     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e614     00 00 50 0B | 	long	(181 {__system___tx})<<20
3e618     00 00 60 0B | 	long	(182 {__system___rx})<<20
3e61c     00 00 00 00 | 	byte	$00, $00, $00, $00
3e620     00 00 70 0B | 	long	(183 {__system___rxtxioctl_0735})<<20
3e624     00 00 80 0B | 	long	(184 {__system____dummy_flush_0736})<<20
3e628     00 00 00 00 
      ...             
3e798     00 00 00 00 
3e79c     00 00 00 00 | 	byte	$00[376]
3e7a0     A4 E7 03 00 | 	long	@@@__system__dat_ + 1848
3e7a4     00 00 00 00 
3e7a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3e7ac                 | 	alignl
3e7ac                 | _fatfs_cc_dat_
3e7ac     C7 00 FC 00 
3e7b0     E9 00 E2 00 
3e7b4     E4 00 E0 00 
3e7b8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3e7bc     EA 00 EB 00 
3e7c0     E8 00 EF 00 
3e7c4     EE 00 EC 00 
3e7c8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3e7cc     C9 00 E6 00 
3e7d0     C6 00 F4 00 
3e7d4     F6 00 F2 00 
3e7d8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3e7dc     FF 00 D6 00 
3e7e0     DC 00 F8 00 
3e7e4     A3 00 D8 00 
3e7e8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3e7ec     E1 00 ED 00 
3e7f0     F3 00 FA 00 
3e7f4     F1 00 D1 00 
3e7f8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3e7fc     BF 00 AE 00 
3e800     AC 00 BD 00 
3e804     BC 00 A1 00 
3e808     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3e80c     91 25 92 25 
3e810     93 25 02 25 
3e814     24 25 C1 00 
3e818     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3e81c     A9 00 63 25 
3e820     51 25 57 25 
3e824     5D 25 A2 00 
3e828     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3e82c     14 25 34 25 
3e830     2C 25 1C 25 
3e834     00 25 3C 25 
3e838     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3e83c     5A 25 54 25 
3e840     69 25 66 25 
3e844     60 25 50 25 
3e848     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3e84c     F0 00 D0 00 
3e850     CA 00 CB 00 
3e854     C8 00 31 01 
3e858     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3e85c     CF 00 18 25 
3e860     0C 25 88 25 
3e864     84 25 A6 00 
3e868     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3e86c     D3 00 DF 00 
3e870     D4 00 D2 00 
3e874     F5 00 D5 00 
3e878     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3e87c     DE 00 DA 00 
3e880     DB 00 D9 00 
3e884     FD 00 DD 00 
3e888     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3e88c     AD 00 B1 00 
3e890     17 20 BE 00 
3e894     B6 00 A7 00 
3e898     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3e89c     B0 00 A8 00 
3e8a0     B7 00 B9 00 
3e8a4     B3 00 B2 00 
3e8a8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3e8ac     61 00 1A 03 
3e8b0     E0 00 17 03 
3e8b4     F8 00 07 03 
3e8b8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3e8bc     78 01 00 01 
3e8c0     30 01 32 01 
3e8c4     06 01 39 01 
3e8c8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3e8cc     2E 01 79 01 
3e8d0     06 01 80 01 
3e8d4     4D 00 43 02 
3e8d8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3e8dc     82 01 84 01 
3e8e0     84 01 86 01 
3e8e4     87 01 87 01 
3e8e8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3e8ec     8B 01 8B 01 
3e8f0     8D 01 8E 01 
3e8f4     8F 01 90 01 
3e8f8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3e8fc     93 01 94 01 
3e900     F6 01 96 01 
3e904     97 01 98 01 
3e908     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3e90c     9B 01 9C 01 
3e910     9D 01 20 02 
3e914     9F 01 A0 01 
3e918     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3e91c     A2 01 A4 01 
3e920     A4 01 A6 01 
3e924     A7 01 A7 01 
3e928     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3e92c     AB 01 AC 01 
3e930     AC 01 AE 01 
3e934     AF 01 AF 01 
3e938     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3e93c     B3 01 B3 01 
3e940     B5 01 B5 01 
3e944     B7 01 B8 01 
3e948     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3e94c     BB 01 BC 01 
3e950     BC 01 BE 01 
3e954     F7 01 C0 01 
3e958     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3e95c     C3 01 C4 01 
3e960     C5 01 C4 01 
3e964     C7 01 C8 01 
3e968     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3e96c     CB 01 CA 01 
3e970     CD 01 10 01 
3e974     DD 01 01 00 
3e978     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3e97c     12 01 F3 01 
3e980     03 00 F1 01 
3e984     F4 01 F4 01 
3e988     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3e98c     22 02 12 01 
3e990     3A 02 09 00 
3e994     65 2C 3B 02 
3e998     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3e99c     66 2C 3F 02 
3e9a0     40 02 41 02 
3e9a4     41 02 46 02 
3e9a8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3e9ac     40 00 81 01 
3e9b0     86 01 55 02 
3e9b4     89 01 8A 01 
3e9b8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3e9bc     5A 02 90 01 
3e9c0     5C 02 5D 02 
3e9c4     5E 02 5F 02 
3e9c8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3e9cc     62 02 94 01 
3e9d0     64 02 65 02 
3e9d4     66 02 67 02 
3e9d8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3e9dc     6A 02 62 2C 
3e9e0     6C 02 6D 02 
3e9e4     6E 02 9C 01 
3e9e8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3e9ec     9D 01 73 02 
3e9f0     74 02 9F 01 
3e9f4     76 02 77 02 
3e9f8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3e9fc     7A 02 7B 02 
3ea00     7C 02 64 2C 
3ea04     7E 02 7F 02 
3ea08     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3ea0c     82 02 A9 01 
3ea10     84 02 85 02 
3ea14     86 02 87 02 
3ea18     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3ea1c     B1 01 B2 01 
3ea20     45 02 8D 02 
3ea24     8E 02 8F 02 
3ea28     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3ea2c     B7 01 7B 03 
3ea30     03 00 FD 03 
3ea34     FE 03 FF 03 
3ea38     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3ea3c     86 03 88 03 
3ea40     89 03 8A 03 
3ea44     B1 03 11 03 
3ea48     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3ea4c     A3 03 A3 03 
3ea50     C4 03 08 03 
3ea54     CC 03 03 00 
3ea58     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3ea5c     8F 03 D8 03 
3ea60     18 01 F2 03 
3ea64     0A 00 F9 03 
3ea68     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3ea6c     F5 03 F6 03 
3ea70     F7 03 F7 03 
3ea74     F9 03 FA 03 
3ea78     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3ea7c     20 03 50 04 
3ea80     10 07 60 04 
3ea84     22 01 8A 04 
3ea88     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3ea8c     0E 01 CF 04 
3ea90     01 00 C0 04 
3ea94     D0 04 44 01 
3ea98     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3ea9c     00 00 7D 1D 
3eaa0     01 00 63 2C 
3eaa4     00 1E 96 01 
3eaa8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3eaac     00 1F 08 06 
3eab0     10 1F 06 06 
3eab4     20 1F 08 06 
3eab8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3eabc     40 1F 06 06 
3eac0     51 1F 07 00 
3eac4     59 1F 52 1F 
3eac8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3eacc     5D 1F 56 1F 
3ead0     5F 1F 60 1F 
3ead4     08 06 70 1F 
3ead8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3eadc     BB 1F C8 1F 
3eae0     C9 1F CA 1F 
3eae4     CB 1F DA 1F 
3eae8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3eaec     F9 1F EA 1F 
3eaf0     EB 1F FA 1F 
3eaf4     FB 1F 80 1F 
3eaf8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3eafc     08 06 A0 1F 
3eb00     08 06 B0 1F 
3eb04     04 00 B8 1F 
3eb08     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3eb0c     BC 1F CC 1F 
3eb10     01 00 C3 1F 
3eb14     D0 1F 02 06 
3eb18     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3eb1c     E5 1F 01 00 
3eb20     EC 1F F3 1F 
3eb24     01 00 FC 1F 
3eb28     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3eb2c     32 21 70 21 
3eb30     10 02 84 21 
3eb34     01 00 83 21 
3eb38     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3eb3c     30 2C 2F 04 
3eb40     60 2C 02 01 
3eb44     67 2C 06 01 
3eb48     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3eb4c     80 2C 64 01 
3eb50     00 2D 26 08 
3eb54     41 FF 1A 03 
3eb58     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3eb5c     05 07 09 0E 
3eb60     10 12 14 16 
3eb64     18 1C 1E 43 
3eb68     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3eb6c     41 41 43 45 
3eb70     45 45 49 49 
3eb74     49 41 41 45 
3eb78     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3eb7c     4F 55 55 59 
3eb80     4F 55 4F 9C 
3eb84     4F 9E 9F 41 
3eb88     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3eb8c     A5 A6 A7 A8 
3eb90     A9 AA AB AC 
3eb94     AD AE AF B0 
3eb98     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3eb9c     41 41 41 B8 
3eba0     B9 BA BB BC 
3eba4     BD BE BF C0 
3eba8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3ebac     C5 41 41 C8 
3ebb0     C9 CA CB CC 
3ebb4     CD CE CF D1 
3ebb8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3ebbc     49 49 49 49 
3ebc0     D9 DA DB DC 
3ebc4     DD 49 DF 4F 
3ebc8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3ebcc     4F E6 E8 E8 
3ebd0     55 55 55 59 
3ebd4     59 EE EF F0 
3ebd8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3ebdc     F5 F6 F7 F8 
3ebe0     F9 FA FB FC 
3ebe4     FD FE FF 00 
3ebe8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3ebec     00 00 00 00 | 	byte	$00, $00, $00, $00
3ebf0     00 00 40 0A | 	long	(164 {_fatfs_cc_v_close})<<20
3ebf4     00 00 50 0A | 	long	(165 {_fatfs_cc_v_read})<<20
3ebf8     00 00 60 0A | 	long	(166 {_fatfs_cc_v_write})<<20
3ebfc     00 00 70 0A | 	long	(167 {_fatfs_cc_v_lseek})<<20
3ec00     00 00 80 0A | 	long	(168 {_fatfs_cc_v_ioctl})<<20
3ec04     00 00 90 0B | 	long	(185 {_fatfs_cc_v_flush})<<20
3ec08     00 00 00 00 
3ec0c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ec10     00 00 90 0A | 	long	(169 {_fatfs_cc_v_open})<<20
3ec14     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_creat})<<20
3ec18     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_opendir})<<20
3ec1c     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_closedir})<<20
3ec20     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_readdir})<<20
3ec24     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_stat})<<20
3ec28     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_mkdir})<<20
3ec2c     00 00 00 0B | 	long	(176 {_fatfs_cc_v_rmdir})<<20
3ec30     00 00 10 0B | 	long	(177 {_fatfs_cc_v_remove})<<20
3ec34     00 00 20 0B | 	long	(178 {_fatfs_cc_v_rename})<<20
3ec38     00 00 30 0B | 	long	(179 {_fatfs_cc_v_init})<<20
3ec3c     00 00 40 0B | 	long	(180 {_fatfs_cc_v_deinit})<<20
3ec40     FF FF FF FF 
3ec44     1F 00 00 00 
3ec48     1C 00 00 00 
3ec4c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3ec50     1E 00 00 00 
3ec54     1F 00 00 00 
3ec58     1E 00 00 00 
3ec5c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3ec60     1F 00 00 00 
3ec64     1E 00 00 00 
3ec68     1F 00 00 00 
3ec6c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3ec70     1F 00 00 00 
3ec74     00 00 00 00 
3ec78     1F 00 00 00 
3ec7c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3ec80     5A 00 00 00 
3ec84     78 00 00 00 
3ec88     97 00 00 00 
3ec8c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3ec90     D4 00 00 00 
3ec94     F3 00 00 00 
3ec98     11 01 00 00 
3ec9c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3eca0     4E 01 00 00 
3eca4     6D 01 00 00 
3eca8     FF FF FF FF 
3ecac     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3ecb0     00 00 00 00 
      ...             
3ecc8     00 00 00 00 
3eccc     00 00 00 00 | 	byte	$00[32]
3ecd0     EE EC 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3ecd4     F2 EC 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3ecd8     00 00 00 00 
3ecdc     00 00 00 00 
3ece0     00 00 00 00 
3ece4     00 00 00 00 
3ece8     00 00       | 	byte	$00[18]
3ecea     3F 3F 3F 00 
3ecee     55 43 54 00 
3ecf2     55 43 54 00 
3ecf6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3ecfa     00 00 00 00 
3ecfe     00 00 00    | 	byte	$00[7]
3ed01     CA 9A 3B 00 
3ed05     00 00 00 01 
3ed09     01 01 01 01 
3ed0d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ed11     91 11 11 11 
3ed15     11 01 01 01 
3ed19     01 01 01 01 
3ed1d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ed21     01 01 01 01 
3ed25     01 01 01    | 	byte	$01[7]
3ed28     90 20 20 20 
3ed2c     20 20 20 20 
3ed30     20 20 20 20 
3ed34     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3ed38     42 42 42 42 
3ed3c     42 42 42 42 
3ed40     42 42       | 	byte	$42[10]
3ed42     20 20 20 20 
3ed46     20 20 20    | 	byte	$20[7]
3ed49     44 44 44 44 
3ed4d     44 44       | 	byte	$44[6]
3ed4f     04 04 04 04 
3ed53     04 04 04 04 
3ed57     04 04 04 04 
3ed5b     04 04 04 04 
3ed5f     04 04 04 04 | 	byte	$04[20]
3ed63     20 20 20 20 
3ed67     20 20       | 	byte	$20[6]
3ed69     48 48 48 48 
3ed6d     48 48       | 	byte	$48[6]
3ed6f     08 08 08 08 
3ed73     08 08 08 08 
3ed77     08 08 08 08 
3ed7b     08 08 08 08 
3ed7f     08 08 08 08 | 	byte	$08[20]
3ed83     20 20 20 20 
3ed87     01 00 00 00 
3ed8b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3ed8c                 | __methodtable__
3ed8c     E4 59 01 00 | 	long	@_do_no_command
3ed90     E8 DA 01 00 | 	long	@_do_plus
3ed94     08 CB 01 00 | 	long	@_do_minus
3ed98     D0 D9 01 00 | 	long	@_do_or
3ed9c     88 D1 01 00 | 	long	@_do_mul
3eda0     CC B5 01 00 | 	long	@_do_fdiv
3eda4     B8 AD 01 00 | 	long	@_do_and
3eda8     D0 AE 01 00 | 	long	@_do_div
3edac     68 CF 01 00 | 	long	@_do_mod
3edb0     9C E1 01 00 | 	long	@_do_shl
3edb4     B4 E2 01 00 | 	long	@_do_shr
3edb8     D4 DF 01 00 | 	long	@_do_power
3edbc     70 A3 01 00 | 	long	@_do_getvar
3edc0     80 76 01 00 | 	long	@_do_push
3edc4     68 9D 01 00 | 	long	@_do_assign
3edc8     AC F2 00 00 | 	long	@_do_cls
3edcc     D0 53 01 00 | 	long	@_do_new
3edd0     C4 6E 01 00 | 	long	@_do_plot
3edd4     AC 14 01 00 | 	long	@_do_draw
3edd8     2C 71 01 00 | 	long	@_do_print
3eddc     8C F0 00 00 | 	long	@_do_circle
3ede0     E0 16 01 00 | 	long	@_do_fcircle
3ede4     80 DF 00 00 | 	long	@_do_box
3ede8     C4 1B 01 00 | 	long	@_do_frame
3edec     EC F2 00 00 | 	long	@_do_color
3edf0     54 19 01 00 | 	long	@_do_for
3edf4     1C 56 01 00 | 	long	@_do_next
3edf8     08 42 01 00 | 	long	@_do_list
3edfc     D8 82 01 00 | 	long	@_do_run
3ee00     08 16 01 00 | 	long	@_do_error
3ee04     10 28 01 00 | 	long	@_do_fast_goto
3ee08     00 29 01 00 | 	long	@_do_find_goto
3ee0c     14 2B 01 00 | 	long	@_do_slow_goto
3ee10     F4 59 01 00 | 	long	@_do_nothing
3ee14     84 D2 00 00 | 	long	@_test_csave
3ee18     C4 86 01 00 | 	long	@_do_save
3ee1c     A4 44 01 00 | 	long	@_do_load
3ee20     00 62 01 00 | 	long	@_do_pinwrite
3ee24     A8 9A 01 00 | 	long	@_do_waitms
3ee28     DC 9B 01 00 | 	long	@_do_waitvbl
3ee2c     08 2E 01 00 | 	long	@_do_if
3ee30     A0 15 01 00 | 	long	@_do_else
3ee34     F0 B0 01 00 | 	long	@_do_eq
3ee38     94 B7 01 00 | 	long	@_do_ge
3ee3c     60 C1 01 00 | 	long	@_do_le
3ee40     7C BC 01 00 | 	long	@_do_gt
3ee44     3C C6 01 00 | 	long	@_do_lt
3ee48     F4 D4 01 00 | 	long	@_do_ne
3ee4c     40 80 01 00 | 	long	@_do_rnd
3ee50     68 E1 00 00 | 	long	@_do_brun
3ee54     04 DB 00 00 | 	long	@_do_beep
3ee58     3C 0D 01 00 | 	long	@_do_dir
3ee5c     34 5E 01 00 | 	long	@_do_paper
3ee60     C4 31 01 00 | 	long	@_do_ink
3ee64     D8 18 01 00 | 	long	@_do_font
3ee68     E0 4E 01 00 | 	long	@_do_mode
3ee6c     8C 52 01 00 | 	long	@_do_mouse
3ee70     90 26 01 00 | 	long	@_do_gettime
3ee74     48 F4 00 00 | 	long	@_do_cursor
3ee78     04 F2 00 00 | 	long	@_do_click
3ee7c     48 53 01 00 | 	long	@_do_mousex
3ee80     8C 53 01 00 | 	long	@_do_mousey
3ee84     C0 52 01 00 | 	long	@_do_mousek
3ee88     04 53 01 00 | 	long	@_do_mousew
3ee8c     10 90 01 00 | 	long	@_do_sin
3ee90     48 93 01 00 | 	long	@_do_stick
3ee94     D8 94 01 00 | 	long	@_do_strig
3ee98     68 91 01 00 | 	long	@_do_sprite
3ee9c     64 08 01 00 | 	long	@_do_defsprite
3eea0     3C 25 01 00 | 	long	@_do_getpixel
3eea4     84 9A 01 00 | 	long	@_do_waitclock
3eea8     B8 CE 01 00 | 	long	@_do_negative
3eeac     04 7D 01 00 | 	long	@_do_rdpin
3eeb0     64 82 01 00 | 	long	@_do_rqpin
3eeb4     2C 60 01 00 | 	long	@_do_pinread
3eeb8     E8 9B 01 00 | 	long	@_do_wrpin
3eebc     68 9C 01 00 | 	long	@_do_wxpin
3eec0     E8 9C 01 00 | 	long	@_do_wypin
3eec4     6C 5F 01 00 | 	long	@_do_pinfloat
3eec8     EC 5F 01 00 | 	long	@_do_pinlo
3eecc     AC 5F 01 00 | 	long	@_do_pinhi
3eed0     B0 60 01 00 | 	long	@_do_pinstart
3eed4     C0 61 01 00 | 	long	@_do_pintoggle
3eed8     A4 70 01 00 | 	long	@_do_position
3eedc     24 F3 00 00 | 	long	@_do_cos
3eee0     68 96 01 00 | 	long	@_do_tan
3eee4     EC D9 00 00 | 	long	@_do_atn
3eee8     DC D8 00 00 | 	long	@_do_asin
3eeec     6C D6 00 00 | 	long	@_do_acos
3eef0     54 92 01 00 | 	long	@_do_sqr
3eef4     C4 17 01 00 | 	long	@_do_fill
3eef8     78 FF 00 00 | 	long	@_do_defsnd
3eefc     7C F4 00 00 | 	long	@_do_defenv
3ef00     DC 7C 01 00 | 	long	@_do_rad
3ef04     D8 0B 01 00 | 	long	@_do_deg
3ef08     44 32 01 00 | 	long	@_do_int
3ef0c     88 62 01 00 | 	long	@_do_play
3ef10     68 8A 01 00 | 	long	@_do_setdelay
3ef14     10 8B 01 00 | 	long	@_do_setenv
3ef18     B8 8B 01 00 | 	long	@_do_setlen
3ef1c     60 8C 01 00 | 	long	@_do_setpan
3ef20     B0 8D 01 00 | 	long	@_do_setvol
3ef24     58 8E 01 00 | 	long	@_do_setwave
3ef28     08 8D 01 00 | 	long	@_do_setsustain
3ef2c     70 7D 01 00 | 	long	@_do_release
3ef30     28 23 01 00 | 	long	@_do_getenvsustain
3ef34     94 6F 01 00 | 	long	@_do_poke
3ef38     D4 13 01 00 | 	long	@_do_dpoke
3ef3c     7C 4B 01 00 | 	long	@_do_lpoke
3ef40     BC 5E 01 00 | 	long	@_do_peek
3ef44     28 13 01 00 | 	long	@_do_dpeek
3ef48     D0 4A 01 00 | 	long	@_do_lpeek
3ef4c     20 1D 01 00 | 	long	@_do_fre
3ef50     38 24 01 00 | 	long	@_do_getnotevalue
3ef54     28 A9 01 00 | 	long	@_do_getaddr
3ef58     EC 2E 01 00 | 	long	@_do_inkey
3ef5c     EC D5 00 00 | 	long	@_do_abs
3ef60     A4 2C 01 00 | 	long	@_do_hex
3ef64     1C DE 00 00 | 	long	@_do_bin
3ef68     78 97 01 00 | 	long	@_do_val
3ef6c     8C EF 00 00 | 	long	@_do_chr
3ef70     7C D7 00 00 | 	long	@_do_asc
3ef74     08 3F 01 00 | 	long	@_do_left
3ef78     B4 7E 01 00 | 	long	@_do_right
3ef7c     54 4C 01 00 | 	long	@_do_mid
3ef80     94 40 01 00 | 	long	@_do_len
3ef84     F8 26 01 00 | 	long	@_do_gosub
3ef88     08 7E 01 00 | 	long	@_do_return
3ef8c     C4 15 01 00 | 	long	@_do_end
3ef90     6C 70 01 00 | 	long	@_do_pop
3ef94     54 49 01 00 | 	long	@_do_log
3ef98     80 ED 00 00 | 	long	@_do_changevol
3ef9c     60 EE 00 00 | 	long	@_do_changewav
3efa0     70 EC 00 00 | 	long	@_do_changepan
3efa4     54 E9 00 00 | 	long	@_do_changefreq
3efa8     00 8F 01 00 | 	long	@_do_shutup
3efac     10 82 01 00 | 	long	@_do_round
3efb0     F8 15 01 00 | 	long	@_do_enter
3efb4     1C 5B 01 00 | 	long	@_do_open
3efb8     30 F2 00 00 | 	long	@_do_close
3efbc     84 1D 01 00 | 	long	@_do_get
3efc0     9C 77 01 00 | 	long	@_do_put
3efc4     A0 E3 00 00 | 	long	@_do_cd
3efc8     00 0C 01 00 | 	long	@_do_delete
3efcc     20 4E 01 00 | 	long	@_do_mkdir
3efd0     18 DC 00 00 | 	long	@_do_blit
3efd4     EC 1C 01 00 | 	long	@_do_framebuf
3efd8     F8 59 01 00 | 	long	@_do_on
3efdc     20 91 01 00 | 	long	@_do_skip
3efe0     00 33 01 00 | 	long	@_do_input
3efe4     AC 21 02 00 | 	long	@_hg010b_spin2_putchar
3efe8     4C 37 03 00 | 	long	@__struct___bas_wrap_sender_tx
3efec     90 37 03 00 | 	long	@__struct___bas_wrap_sender_rx
3eff0     D8 37 03 00 | 	long	@__struct___bas_wrap_sender_close
3eff4     7C 36 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3eff8     EC 36 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3effc     34 36 03 00 | 	long	@___strs_cl_pfunc
3f000     C8 93 02 00 | 	long	@__system____root_opendir
3f004     64 94 02 00 | 	long	@__system____root_closedir
3f008     E0 93 02 00 | 	long	@__system____root_readdir
3f00c     6C 94 02 00 | 	long	@__system____root_stat
3f010     B8 8C 02 00 | 	long	@__system____default_putc
3f014     3C 8C 02 00 | 	long	@__system____default_getc
3f018     60 8D 02 00 | 	long	@__system____default_flush
3f01c     38 21 03 00 | 	long	@_fatfs_cc_v_close
3f020     54 25 03 00 | 	long	@_fatfs_cc_v_read
3f024     68 26 03 00 | 	long	@_fatfs_cc_v_write
3f028     48 27 03 00 | 	long	@_fatfs_cc_v_lseek
3f02c     D0 27 03 00 | 	long	@_fatfs_cc_v_ioctl
3f030     24 28 03 00 | 	long	@_fatfs_cc_v_open
3f034     9C 20 03 00 | 	long	@_fatfs_cc_v_creat
3f038     7C 21 03 00 | 	long	@_fatfs_cc_v_opendir
3f03c     F0 21 03 00 | 	long	@_fatfs_cc_v_closedir
3f040     30 22 03 00 | 	long	@_fatfs_cc_v_readdir
3f044     64 23 03 00 | 	long	@_fatfs_cc_v_stat
3f048     E4 27 03 00 | 	long	@_fatfs_cc_v_mkdir
3f04c     04 28 03 00 | 	long	@_fatfs_cc_v_rmdir
3f050     F4 27 03 00 | 	long	@_fatfs_cc_v_remove
3f054     14 28 03 00 | 	long	@_fatfs_cc_v_rename
3f058     34 29 03 00 | 	long	@_fatfs_cc_v_init
3f05c     3C 29 03 00 | 	long	@_fatfs_cc_v_deinit
3f060     0C 3E 02 00 | 	long	@__system___tx
3f064     4C 3E 02 00 | 	long	@__system___rx
3f068     D8 9F 02 00 | 	long	@__system___rxtxioctl_0735
3f06c     30 A0 02 00 | 	long	@__system____dummy_flush_0736
3f070     04 29 03 00 | 	long	@_fatfs_cc_v_flush
3f074                 | __heap_base
3f074     00 00 00 00 
      ...             
56774     00 00 00 00 
56778     00 00 00 00 | 	long	0[24002]
5677c                 | objmem
5677c     00 00 00 00 
      ...             
60ba4     00 00 00 00 
60ba8     00 00 00 00 | 	long	0[10508]
60bac                 | stackspace
60bac     00 00 00 00 | 	long	0[1]
60bb0 100             | 	org	COG_BSS_START
60bb0 100             | _var01
60bb0 100             | 	res	1
60bb0 101             | _var02
60bb0 101             | 	res	1
60bb0 102             | _var03
60bb0 102             | 	res	1
60bb0 103             | _var04
60bb0 103             | 	res	1
60bb0 104             | _var05
60bb0 104             | 	res	1
60bb0 105             | _var06
60bb0 105             | 	res	1
60bb0 106             | _var07
60bb0 106             | 	res	1
60bb0 107             | _var08
60bb0 107             | 	res	1
60bb0 108             | _var09
60bb0 108             | 	res	1
60bb0 109             | arg01
60bb0 109             | 	res	1
60bb0 10a             | arg02
60bb0 10a             | 	res	1
60bb0 10b             | arg03
60bb0 10b             | 	res	1
60bb0 10c             | arg04
60bb0 10c             | 	res	1
60bb0 10d             | arg05
60bb0 10d             | 	res	1
60bb0 10e             | arg06
60bb0 10e             | 	res	1
60bb0 10f             | arg07
60bb0 10f             | 	res	1
60bb0 110             | arg08
60bb0 110             | 	res	1
60bb0 111             | arg09
60bb0 111             | 	res	1
60bb0 112             | arg10
60bb0 112             | 	res	1
60bb0 113             | local01
60bb0 113             | 	res	1
60bb0 114             | local02
60bb0 114             | 	res	1
60bb0 115             | local03
60bb0 115             | 	res	1
60bb0 116             | local04
60bb0 116             | 	res	1
60bb0 117             | local05
60bb0 117             | 	res	1
60bb0 118             | local06
60bb0 118             | 	res	1
60bb0 119             | local07
60bb0 119             | 	res	1
60bb0 11a             | local08
60bb0 11a             | 	res	1
60bb0 11b             | local09
60bb0 11b             | 	res	1
60bb0 11c             | local10
60bb0 11c             | 	res	1
60bb0 11d             | local11
60bb0 11d             | 	res	1
60bb0 11e             | local12
60bb0 11e             | 	res	1
60bb0 11f             | local13
60bb0 11f             | 	res	1
60bb0 120             | local14
60bb0 120             | 	res	1
60bb0 121             | local15
60bb0 121             | 	res	1
60bb0 122             | local16
60bb0 122             | 	res	1
60bb0 123             | local17
60bb0 123             | 	res	1
60bb0 124             | local18
60bb0 124             | 	res	1
60bb0 125             | local19
60bb0 125             | 	res	1
60bb0 126             | local20
60bb0 126             | 	res	1
60bb0 127             | local21
60bb0 127             | 	res	1
60bb0 128             | local22
60bb0 128             | 	res	1
60bb0 129             | local23
60bb0 129             | 	res	1
60bb0 12a             | local24
60bb0 12a             | 	res	1
60bb0 12b             | local25
60bb0 12b             | 	res	1
60bb0 12c             | local26
60bb0 12c             | 	res	1
60bb0 12d             | local27
60bb0 12d             | 	res	1
60bb0 12e             | local28
60bb0 12e             | 	res	1
60bb0 12f             | local29
60bb0 12f             | 	res	1
60bb0 130             | local30
60bb0 130             | 	res	1
60bb0 131             | local31
60bb0 131             | 	res	1
60bb0 132             | local32
60bb0 132             | 	res	1
60bb0 133             | local33
60bb0 133             | 	res	1
60bb0 134             | local34
60bb0 134             | 	res	1
60bb0 135             | local35
60bb0 135             | 	res	1
60bb0 136             | local36
60bb0 136             | 	res	1
60bb0 137             | local37
60bb0 137             | 	res	1
60bb0 138             | local38
60bb0 138             | 	res	1
60bb0 139             | local39
60bb0 139             | 	res	1
60bb0 13a             | local40
60bb0 13a             | 	res	1
60bb0 13b             | local41
60bb0 13b             | 	res	1
60bb0 13c             | local42
60bb0 13c             | 	res	1
60bb0 13d             | local43
60bb0 13d             | 	res	1
60bb0 13e             | local44
60bb0 13e             | 	res	1
60bb0 13f             | local45
60bb0 13f             | 	res	1
60bb0 140             | local46
60bb0 140             | 	res	1
60bb0 141             | local47
60bb0 141             | 	res	1
60bb0 142             | local48
60bb0 142             | 	res	1
60bb0 143             | local49
60bb0 143             | 	res	1
60bb0 144             | muldiva_
60bb0 144             | 	res	1
60bb0 145             | muldivb_
60bb0 145             | 	res	1
60bb0 146             | 	fit	480
60bb0 146             | 
